
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00029718  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d38  080297d8  080297d8  0002a7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e510  0802e510  00030430  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e510  0802e510  0002f510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e518  0802e518  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e518  0802e518  0002f518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e51c  0802e51c  0002f51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000430  20000000  0802e520  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031fc  20000430  0802e950  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2000362c  0802e950  0003062c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036a25  00000000  00000000  00030458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009d0b  00000000  00000000  00066e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d98  00000000  00000000  00070b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021f5  00000000  00000000  00073920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242dc  00000000  00000000  00075b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000462d3  00000000  00000000  00099df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3123  00000000  00000000  000e00c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001831e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb84  00000000  00000000  00183298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0018ee1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0018ee89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00191405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000430 	.word	0x20000430
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080297c0 	.word	0x080297c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000434 	.word	0x20000434
 8000104:	080297c0 	.word	0x080297c0

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802d614 	.word	0x0802d614
 8000ec8:	0802d654 	.word	0x0802d654
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802d690 	.word	0x0802d690
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	2000045c 	.word	0x2000045c
 8003ad8:	2000048c 	.word	0x2000048c

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000458 	.word	0x20000458
 8003b38:	2000048c 	.word	0x2000048c

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000454 	.word	0x20000454

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 f81c 	bl	8013b94 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	20000450 	.word	0x20000450

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000458 	.word	0x20000458
 8003b98:	2000045c 	.word	0x2000045c

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f00f fff3 	bl	8013ba8 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f00f fa6b 	bl	8013114 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	2000044c 	.word	0x2000044c
 8003c80:	080297d8 	.word	0x080297d8
 8003c84:	080297e4 	.word	0x080297e4
 8003c88:	080297e8 	.word	0x080297e8
 8003c8c:	080297f4 	.word	0x080297f4
 8003c90:	08029814 	.word	0x08029814
 8003c94:	2000048c 	.word	0x2000048c

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f00f ff78 	bl	8013ba8 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f00f ff64 	bl	8013ba8 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f00f f9f7 	bl	8013114 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f00f ff3e 	bl	8013ba8 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000494 	.word	0x20000494
 8003d40:	20000495 	.word	0x20000495
 8003d44:	2000044c 	.word	0x2000044c
 8003d48:	08029818 	.word	0x08029818
 8003d4c:	080297e4 	.word	0x080297e4
 8003d50:	0802981c 	.word	0x0802981c
 8003d54:	08029814 	.word	0x08029814

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f00f ff20 	bl	8013ba8 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f00f ff14 	bl	8013ba8 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f00f f999 	bl	8013114 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f00f fee0 	bl	8013ba8 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	2000048c 	.word	0x2000048c
 8003e00:	2000044c 	.word	0x2000044c
 8003e04:	08029848 	.word	0x08029848
 8003e08:	08029814 	.word	0x08029814

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f00f fead 	bl	8013ba8 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	2000048c 	.word	0x2000048c

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f00f f926 	bl	8013114 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f00f f8e7 	bl	8013114 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	2000048c 	.word	0x2000048c
 8003f58:	08029864 	.word	0x08029864
 8003f5c:	08029884 	.word	0x08029884
 8003f60:	2000044c 	.word	0x2000044c
 8003f64:	08029888 	.word	0x08029888
 8003f68:	08029814 	.word	0x08029814

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f00f f8c0 	bl	8013114 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000044c 	.word	0x2000044c
 8003fa4:	080298bc 	.word	0x080298bc
 8003fa8:	08029814 	.word	0x08029814

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f00f f8a0 	bl	8013114 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f00f fde3 	bl	8013ba8 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f00f fdd2 	bl	8013ba8 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	2000044c 	.word	0x2000044c
 8004094:	080298d0 	.word	0x080298d0
 8004098:	08029814 	.word	0x08029814
 800409c:	20000484 	.word	0x20000484
 80040a0:	2000048c 	.word	0x2000048c

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f f824 	bl	8013114 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f00f fd67 	bl	8013ba8 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f024 f889 	bl	802824c <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f024 f865 	bl	802824c <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f024 f841 	bl	802824c <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f024 f81d 	bl	802824c <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f023 fff3 	bl	802824c <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f023 ffcf 	bl	802824c <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f023 ffab 	bl	802824c <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f023 ff87 	bl	802824c <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	2000044c 	.word	0x2000044c
 8004378:	080298ec 	.word	0x080298ec
 800437c:	08029814 	.word	0x08029814
 8004380:	20000460 	.word	0x20000460

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bc8      	ldr	r3, [pc, #800]	@ (8004780 <ENS_Upkeep+0x328>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00e fe00 	bl	8013068 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc3      	ldr	r3, [pc, #780]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e21c      	b.n	80048b6 <ENS_Upkeep+0x45e>
  }
  switch(ENSState) {
 800447c:	4bc1      	ldr	r3, [pc, #772]	@ (8004784 <ENS_Upkeep+0x32c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e200      	b.n	8004888 <ENS_Upkeep+0x430>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bbf      	ldr	r3, [pc, #764]	@ (8004788 <ENS_Upkeep+0x330>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4abe      	ldr	r2, [pc, #760]	@ (800478c <ENS_Upkeep+0x334>)
 8004492:	4bbf      	ldr	r3, [pc, #764]	@ (8004790 <ENS_Upkeep+0x338>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00e fe3c 	bl	8013114 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800449c:	f00f fb7a 	bl	8013b94 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4abc      	ldr	r2, [pc, #752]	@ (8004794 <ENS_Upkeep+0x33c>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bb6      	ldr	r3, [pc, #728]	@ (8004780 <ENS_Upkeep+0x328>)
 80044a8:	601a      	str	r2, [r3, #0]
    break;
 80044aa:	e202      	b.n	80048b2 <ENS_Upkeep+0x45a>


  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044ac:	f008 fec0 	bl	800d230 <getSensorLock>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d000      	beq.n	80044b6 <ENS_Upkeep+0x5e>
 80044b4:	e1f4      	b.n	80048a0 <ENS_Upkeep+0x448>
      break;
    }
    setSensorLock(ENS160);
 80044b6:	2004      	movs	r0, #4
 80044b8:	f008 fea6 	bl	800d208 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044bc:	1d3c      	adds	r4, r7, #4
 80044be:	2002      	movs	r0, #2
 80044c0:	f7ff fca4 	bl	8003e0c <ENS160_setMode>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <ENS_Upkeep+0x7c>
 80044d0:	4bb1      	ldr	r3, [pc, #708]	@ (8004798 <ENS_Upkeep+0x340>)
 80044d2:	e000      	b.n	80044d6 <ENS_Upkeep+0x7e>
 80044d4:	4bb1      	ldr	r3, [pc, #708]	@ (800479c <ENS_Upkeep+0x344>)
 80044d6:	4ab2      	ldr	r2, [pc, #712]	@ (80047a0 <ENS_Upkeep+0x348>)
 80044d8:	49ad      	ldr	r1, [pc, #692]	@ (8004790 <ENS_Upkeep+0x338>)
 80044da:	2003      	movs	r0, #3
 80044dc:	f00e fe1a 	bl	8013114 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044e0:	200a      	movs	r0, #10
 80044e2:	f00f fb61 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f008 fe8e 	bl	800d208 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 80044ec:	4ba5      	ldr	r3, [pc, #660]	@ (8004784 <ENS_Upkeep+0x32c>)
 80044ee:	2203      	movs	r2, #3
 80044f0:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 80044f2:	f00f fb4f 	bl	8013b94 <HAL_GetTick>
 80044f6:	0003      	movs	r3, r0
 80044f8:	22fa      	movs	r2, #250	@ 0xfa
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	189a      	adds	r2, r3, r2
 80044fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <ENS_Upkeep+0x328>)
 8004500:	601a      	str	r2, [r3, #0]
    break;
 8004502:	e1d6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004504:	f008 fe94 	bl	800d230 <getSensorLock>
 8004508:	1e03      	subs	r3, r0, #0
 800450a:	d000      	beq.n	800450e <ENS_Upkeep+0xb6>
 800450c:	e1ca      	b.n	80048a4 <ENS_Upkeep+0x44c>
      break;
    }
    setSensorLock(ENS160);
 800450e:	2004      	movs	r0, #4
 8004510:	f008 fe7a 	bl	800d208 <setSensorLock>
    status = ENS160_readStatus();
 8004514:	1d7c      	adds	r4, r7, #5
 8004516:	f7ff fd29 	bl	8003f6c <ENS160_readStatus>
 800451a:	0003      	movs	r3, r0
 800451c:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 800451e:	200a      	movs	r0, #10
 8004520:	f00f fb42 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 8004524:	2000      	movs	r0, #0
 8004526:	f008 fe6f 	bl	800d208 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800452a:	1d7b      	adds	r3, r7, #5
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	d02e      	beq.n	8004592 <ENS_Upkeep+0x13a>
      switch (status >> 2) {
 8004534:	1d7b      	adds	r3, r7, #5
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d013      	beq.n	8004568 <ENS_Upkeep+0x110>
 8004540:	dc19      	bgt.n	8004576 <ENS_Upkeep+0x11e>
 8004542:	2b01      	cmp	r3, #1
 8004544:	d002      	beq.n	800454c <ENS_Upkeep+0xf4>
 8004546:	2b02      	cmp	r3, #2
 8004548:	d007      	beq.n	800455a <ENS_Upkeep+0x102>
 800454a:	e014      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 1:
        Debug("ENS160 Warm-Up phase");
 800454c:	4a95      	ldr	r2, [pc, #596]	@ (80047a4 <ENS_Upkeep+0x34c>)
 800454e:	4b90      	ldr	r3, [pc, #576]	@ (8004790 <ENS_Upkeep+0x338>)
 8004550:	0019      	movs	r1, r3
 8004552:	2003      	movs	r0, #3
 8004554:	f00e fdde 	bl	8013114 <CreateLine>
        break;
 8004558:	e00d      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800455a:	4a93      	ldr	r2, [pc, #588]	@ (80047a8 <ENS_Upkeep+0x350>)
 800455c:	4b8c      	ldr	r3, [pc, #560]	@ (8004790 <ENS_Upkeep+0x338>)
 800455e:	0019      	movs	r1, r3
 8004560:	2003      	movs	r0, #3
 8004562:	f00e fdd7 	bl	8013114 <CreateLine>
        break;
 8004566:	e006      	b.n	8004576 <ENS_Upkeep+0x11e>
      case 3:
        Debug("ENS160 Invalid output");
 8004568:	4a90      	ldr	r2, [pc, #576]	@ (80047ac <ENS_Upkeep+0x354>)
 800456a:	4b89      	ldr	r3, [pc, #548]	@ (8004790 <ENS_Upkeep+0x338>)
 800456c:	0019      	movs	r1, r3
 800456e:	2003      	movs	r0, #3
 8004570:	f00e fdd0 	bl	8013114 <CreateLine>
        break;
 8004574:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 8004576:	1d7b      	adds	r3, r7, #5
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2203      	movs	r2, #3
 800457c:	4013      	ands	r3, r2
 800457e:	d108      	bne.n	8004592 <ENS_Upkeep+0x13a>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004580:	f00f fb08 	bl	8013b94 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	22fa      	movs	r2, #250	@ 0xfa
 8004588:	0092      	lsls	r2, r2, #2
 800458a:	189a      	adds	r2, r3, r2
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <ENS_Upkeep+0x328>)
 800458e:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 8004590:	e18f      	b.n	80048b2 <ENS_Upkeep+0x45a>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 8004592:	4b7c      	ldr	r3, [pc, #496]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004594:	2204      	movs	r2, #4
 8004596:	701a      	strb	r2, [r3, #0]
    break;
 8004598:	e18b      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 800459a:	f008 fe49 	bl	800d230 <getSensorLock>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d036      	beq.n	8004610 <ENS_Upkeep+0x1b8>
 80045a2:	f008 fe45 	bl	800d230 <getSensorLock>
 80045a6:	0003      	movs	r3, r0
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d031      	beq.n	8004610 <ENS_Upkeep+0x1b8>
      uint8_t locktype = getSensorLock();
 80045ac:	1dbc      	adds	r4, r7, #6
 80045ae:	f008 fe3f 	bl	800d230 <getSensorLock>
 80045b2:	0003      	movs	r3, r0
 80045b4:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045b6:	1dbb      	adds	r3, r7, #6
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <ENS_Upkeep+0x19a>
 80045be:	1dbb      	adds	r3, r7, #6
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d013      	beq.n	80045ee <ENS_Upkeep+0x196>
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d00d      	beq.n	80045ea <ENS_Upkeep+0x192>
 80045ce:	1dbb      	adds	r3, r7, #6
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <ENS_Upkeep+0x18e>
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d101      	bne.n	80045e2 <ENS_Upkeep+0x18a>
 80045de:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <ENS_Upkeep+0x358>)
 80045e0:	e008      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e2:	4b74      	ldr	r3, [pc, #464]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80045e4:	e006      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045e6:	4b74      	ldr	r3, [pc, #464]	@ (80047b8 <ENS_Upkeep+0x360>)
 80045e8:	e004      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ea:	4b74      	ldr	r3, [pc, #464]	@ (80047bc <ENS_Upkeep+0x364>)
 80045ec:	e002      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045ee:	4b74      	ldr	r3, [pc, #464]	@ (80047c0 <ENS_Upkeep+0x368>)
 80045f0:	e000      	b.n	80045f4 <ENS_Upkeep+0x19c>
 80045f2:	4b74      	ldr	r3, [pc, #464]	@ (80047c4 <ENS_Upkeep+0x36c>)
 80045f4:	4a74      	ldr	r2, [pc, #464]	@ (80047c8 <ENS_Upkeep+0x370>)
 80045f6:	4966      	ldr	r1, [pc, #408]	@ (8004790 <ENS_Upkeep+0x338>)
 80045f8:	2003      	movs	r0, #3
 80045fa:	f00e fd8b 	bl	8013114 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 80045fe:	f00f fac9 	bl	8013b94 <HAL_GetTick>
 8004602:	0003      	movs	r3, r0
 8004604:	334e      	adds	r3, #78	@ 0x4e
 8004606:	33ff      	adds	r3, #255	@ 0xff
 8004608:	001a      	movs	r2, r3
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <ENS_Upkeep+0x328>)
 800460c:	601a      	str	r2, [r3, #0]
      break;
 800460e:	e150      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    setSensorLock(ENS160);
 8004610:	2004      	movs	r0, #4
 8004612:	f008 fdf9 	bl	800d208 <setSensorLock>
    status = ENS160_readStatus();
 8004616:	1d7c      	adds	r4, r7, #5
 8004618:	f7ff fca8 	bl	8003f6c <ENS160_readStatus>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004620:	1d7b      	adds	r3, r7, #5
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2202      	movs	r2, #2
 8004626:	4013      	ands	r3, r2
 8004628:	d10e      	bne.n	8004648 <ENS_Upkeep+0x1f0>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800462a:	f00f fab3 	bl	8013b94 <HAL_GetTick>
 800462e:	0003      	movs	r3, r0
 8004630:	33f5      	adds	r3, #245	@ 0xf5
 8004632:	33ff      	adds	r3, #255	@ 0xff
 8004634:	001a      	movs	r2, r3
 8004636:	4b52      	ldr	r3, [pc, #328]	@ (8004780 <ENS_Upkeep+0x328>)
 8004638:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800463a:	200a      	movs	r0, #10
 800463c:	f00f fab4 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 8004640:	2000      	movs	r0, #0
 8004642:	f008 fde1 	bl	800d208 <setSensorLock>
      break;
 8004646:	e134      	b.n	80048b2 <ENS_Upkeep+0x45a>
    }
    ENS160_measure(false);
 8004648:	2000      	movs	r0, #0
 800464a:	f7ff fcaf 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 800464e:	200a      	movs	r0, #10
 8004650:	f00f faaa 	bl	8013ba8 <HAL_Delay>
    ENS160_measureRaw(false);
 8004654:	2000      	movs	r0, #0
 8004656:	f7ff fd25 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f00f faa4 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 8004660:	2000      	movs	r0, #0
 8004662:	f008 fdd1 	bl	800d208 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 8004666:	4b47      	ldr	r3, [pc, #284]	@ (8004784 <ENS_Upkeep+0x32c>)
 8004668:	2206      	movs	r2, #6
 800466a:	701a      	strb	r2, [r3, #0]
    break;
 800466c:	e121      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 800466e:	4b57      	ldr	r3, [pc, #348]	@ (80047cc <ENS_Upkeep+0x374>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d13b      	bne.n	80046ee <ENS_Upkeep+0x296>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	001c      	movs	r4, r3
 800467c:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <ENS_Upkeep+0x378>)
 800467e:	885b      	ldrh	r3, [r3, #2]
 8004680:	0018      	movs	r0, r3
 8004682:	4b53      	ldr	r3, [pc, #332]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004684:	889b      	ldrh	r3, [r3, #4]
 8004686:	4a53      	ldr	r2, [pc, #332]	@ (80047d4 <ENS_Upkeep+0x37c>)
 8004688:	4953      	ldr	r1, [pc, #332]	@ (80047d8 <ENS_Upkeep+0x380>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	9000      	str	r0, [sp, #0]
 800468e:	0023      	movs	r3, r4
 8004690:	2002      	movs	r0, #2
 8004692:	f00e fd3f 	bl	8013114 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 8004696:	4b51      	ldr	r3, [pc, #324]	@ (80047dc <ENS_Upkeep+0x384>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	4b50      	ldr	r3, [pc, #320]	@ (80047dc <ENS_Upkeep+0x384>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a50      	ldr	r2, [pc, #320]	@ (80047e0 <ENS_Upkeep+0x388>)
 80046a0:	494d      	ldr	r1, [pc, #308]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0003      	movs	r3, r0
 80046a6:	2002      	movs	r0, #2
 80046a8:	f00e fd34 	bl	8013114 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <ENS_Upkeep+0x384>)
 80046ae:	6898      	ldr	r0, [r3, #8]
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <ENS_Upkeep+0x384>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a4b      	ldr	r2, [pc, #300]	@ (80047e4 <ENS_Upkeep+0x38c>)
 80046b6:	4948      	ldr	r1, [pc, #288]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	0003      	movs	r3, r0
 80046bc:	2002      	movs	r0, #2
 80046be:	f00e fd29 	bl	8013114 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046c2:	4b46      	ldr	r3, [pc, #280]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c4:	6918      	ldr	r0, [r3, #16]
 80046c6:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <ENS_Upkeep+0x384>)
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	4a47      	ldr	r2, [pc, #284]	@ (80047e8 <ENS_Upkeep+0x390>)
 80046cc:	4942      	ldr	r1, [pc, #264]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	0003      	movs	r3, r0
 80046d2:	2002      	movs	r0, #2
 80046d4:	f00e fd1e 	bl	8013114 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046d8:	4b40      	ldr	r3, [pc, #256]	@ (80047dc <ENS_Upkeep+0x384>)
 80046da:	6998      	ldr	r0, [r3, #24]
 80046dc:	4b3f      	ldr	r3, [pc, #252]	@ (80047dc <ENS_Upkeep+0x384>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <ENS_Upkeep+0x394>)
 80046e2:	493d      	ldr	r1, [pc, #244]	@ (80047d8 <ENS_Upkeep+0x380>)
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	0003      	movs	r3, r0
 80046e8:	2002      	movs	r0, #2
 80046ea:	f00e fd13 	bl	8013114 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 80046ee:	4b37      	ldr	r3, [pc, #220]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d103      	bne.n	80046fe <ENS_Upkeep+0x2a6>
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <ENS_Upkeep+0x374>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	e005      	b.n	800470a <ENS_Upkeep+0x2b2>
 80046fe:	4b33      	ldr	r3, [pc, #204]	@ (80047cc <ENS_Upkeep+0x374>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	3301      	adds	r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	4b31      	ldr	r3, [pc, #196]	@ (80047cc <ENS_Upkeep+0x374>)
 8004708:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <ENS_Upkeep+0x378>)
 800470c:	7818      	ldrb	r0, [r3, #0]
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004710:	8859      	ldrh	r1, [r3, #2]
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <ENS_Upkeep+0x378>)
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	001a      	movs	r2, r3
 8004718:	f000 fa04 	bl	8004b24 <setENS160>
    ENSState = ENS_LOW_POWER;
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <ENS_Upkeep+0x32c>)
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
    break;
 8004722:	e0c6      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004724:	f00f fa36 	bl	8013b94 <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	22fa      	movs	r2, #250	@ 0xfa
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	189a      	adds	r2, r3, r2
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <ENS_Upkeep+0x328>)
 8004732:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004734:	4b2e      	ldr	r3, [pc, #184]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4053      	eors	r3, r2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d071      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004742:	4b2c      	ldr	r3, [pc, #176]	@ (80047f4 <ENS_Upkeep+0x39c>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2201      	movs	r2, #1
 8004748:	4053      	eors	r3, r2
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d06a      	beq.n	8004826 <ENS_Upkeep+0x3ce>
 8004750:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <ENS_Upkeep+0x374>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d966      	bls.n	8004826 <ENS_Upkeep+0x3ce>
      if (getSensorLock() != FREE) {
 8004758:	f008 fd6a 	bl	800d230 <getSensorLock>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d000      	beq.n	8004762 <ENS_Upkeep+0x30a>
 8004760:	e0a2      	b.n	80048a8 <ENS_Upkeep+0x450>
        break;
      }
      setSensorLock(ENS160);
 8004762:	2004      	movs	r0, #4
 8004764:	f008 fd50 	bl	800d208 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 8004768:	1cfc      	adds	r4, r7, #3
 800476a:	2000      	movs	r0, #0
 800476c:	f7ff fb4e 	bl	8003e0c <ENS160_setMode>
 8004770:	0003      	movs	r3, r0
 8004772:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 8004774:	1cfb      	adds	r3, r7, #3
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d03d      	beq.n	80047f8 <ENS_Upkeep+0x3a0>
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <ENS_Upkeep+0x340>)
 800477e:	e03c      	b.n	80047fa <ENS_Upkeep+0x3a2>
 8004780:	20000450 	.word	0x20000450
 8004784:	20000000 	.word	0x20000000
 8004788:	0802d6d0 	.word	0x0802d6d0
 800478c:	0802990c 	.word	0x0802990c
 8004790:	08029814 	.word	0x08029814
 8004794:	002f9b80 	.word	0x002f9b80
 8004798:	08029940 	.word	0x08029940
 800479c:	08029948 	.word	0x08029948
 80047a0:	08029950 	.word	0x08029950
 80047a4:	08029974 	.word	0x08029974
 80047a8:	0802998c 	.word	0x0802998c
 80047ac:	080299ac 	.word	0x080299ac
 80047b0:	080299c4 	.word	0x080299c4
 80047b4:	080299cc 	.word	0x080299cc
 80047b8:	080299d4 	.word	0x080299d4
 80047bc:	080299dc 	.word	0x080299dc
 80047c0:	080299e4 	.word	0x080299e4
 80047c4:	080299ec 	.word	0x080299ec
 80047c8:	080299f4 	.word	0x080299f4
 80047cc:	20000454 	.word	0x20000454
 80047d0:	20000484 	.word	0x20000484
 80047d4:	08029a1c 	.word	0x08029a1c
 80047d8:	08029884 	.word	0x08029884
 80047dc:	20000460 	.word	0x20000460
 80047e0:	08029a48 	.word	0x08029a48
 80047e4:	08029a64 	.word	0x08029a64
 80047e8:	08029a80 	.word	0x08029a80
 80047ec:	08029a9c 	.word	0x08029a9c
 80047f0:	20001e61 	.word	0x20001e61
 80047f4:	20001e62 	.word	0x20001e62
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <ENS_Upkeep+0x468>)
 80047fa:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <ENS_Upkeep+0x46c>)
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	0010      	movs	r0, r2
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <ENS_Upkeep+0x470>)
 8004802:	4932      	ldr	r1, [pc, #200]	@ (80048cc <ENS_Upkeep+0x474>)
 8004804:	9000      	str	r0, [sp, #0]
 8004806:	2003      	movs	r0, #3
 8004808:	f00e fc84 	bl	8013114 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800480c:	200a      	movs	r0, #10
 800480e:	f00f f9cb 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 8004812:	2000      	movs	r0, #0
 8004814:	f008 fcf8 	bl	800d208 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004818:	f00f f9bc 	bl	8013b94 <HAL_GetTick>
 800481c:	0003      	movs	r3, r0
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <ENS_Upkeep+0x478>)
 8004820:	189a      	adds	r2, r3, r2
 8004822:	4b2c      	ldr	r3, [pc, #176]	@ (80048d4 <ENS_Upkeep+0x47c>)
 8004824:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004826:	4b2c      	ldr	r3, [pc, #176]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004828:	2208      	movs	r2, #8
 800482a:	701a      	strb	r2, [r3, #0]
    break;
 800482c:	e041      	b.n	80048b2 <ENS_Upkeep+0x45a>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800482e:	f008 fcff 	bl	800d230 <getSensorLock>
 8004832:	1e03      	subs	r3, r0, #0
 8004834:	d13a      	bne.n	80048ac <ENS_Upkeep+0x454>
        break;
      }
      setSensorLock(ENS160);
 8004836:	2004      	movs	r0, #4
 8004838:	f008 fce6 	bl	800d208 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800483c:	1cba      	adds	r2, r7, #2
 800483e:	2301      	movs	r3, #1
 8004840:	2101      	movs	r1, #1
 8004842:	2010      	movs	r0, #16
 8004844:	f7ff f94a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ENS_Upkeep+0x41c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004850:	1dfc      	adds	r4, r7, #7
 8004852:	2002      	movs	r0, #2
 8004854:	f7ff fada 	bl	8003e0c <ENS160_setMode>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <ENS_Upkeep+0x410>
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <ENS_Upkeep+0x484>)
 8004866:	e000      	b.n	800486a <ENS_Upkeep+0x412>
 8004868:	4b15      	ldr	r3, [pc, #84]	@ (80048c0 <ENS_Upkeep+0x468>)
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <ENS_Upkeep+0x488>)
 800486c:	4917      	ldr	r1, [pc, #92]	@ (80048cc <ENS_Upkeep+0x474>)
 800486e:	2003      	movs	r0, #3
 8004870:	f00e fc50 	bl	8013114 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004874:	200a      	movs	r0, #10
 8004876:	f00f f997 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 800487a:	2000      	movs	r0, #0
 800487c:	f008 fcc4 	bl	800d208 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 8004880:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <ENS_Upkeep+0x480>)
 8004882:	2203      	movs	r2, #3
 8004884:	701a      	strb	r2, [r3, #0]
    break;
 8004886:	e014      	b.n	80048b2 <ENS_Upkeep+0x45a>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <ENS_Upkeep+0x480>)
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 800488e:	f008 fccf 	bl	800d230 <getSensorLock>
 8004892:	0003      	movs	r3, r0
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00b      	beq.n	80048b0 <ENS_Upkeep+0x458>
      setSensorLock(FREE);
 8004898:	2000      	movs	r0, #0
 800489a:	f008 fcb5 	bl	800d208 <setSensorLock>
    }
    break;
 800489e:	e007      	b.n	80048b0 <ENS_Upkeep+0x458>
      break;
 80048a0:	46c0      	nop			@ (mov r8, r8)
 80048a2:	e006      	b.n	80048b2 <ENS_Upkeep+0x45a>
      break;
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	e004      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	e002      	b.n	80048b2 <ENS_Upkeep+0x45a>
        break;
 80048ac:	46c0      	nop			@ (mov r8, r8)
 80048ae:	e000      	b.n	80048b2 <ENS_Upkeep+0x45a>
    break;
 80048b0:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <ENS_Upkeep+0x480>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
}
 80048b6:	0018      	movs	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b003      	add	sp, #12
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	46c0      	nop			@ (mov r8, r8)
 80048c0:	08029948 	.word	0x08029948
 80048c4:	20000454 	.word	0x20000454
 80048c8:	08029ab8 	.word	0x08029ab8
 80048cc:	08029814 	.word	0x08029814
 80048d0:	0000afc8 	.word	0x0000afc8
 80048d4:	20000450 	.word	0x20000450
 80048d8:	20000000 	.word	0x20000000
 80048dc:	08029940 	.word	0x08029940
 80048e0:	08029af0 	.word	0x08029af0

080048e4 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80048e8:	4b02      	ldr	r3, [pc, #8]	@ (80048f4 <forceNTPupdate+0x10>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000670 	.word	0x20000670

080048f8 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004900:	f00f f948 	bl	8013b94 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	18d2      	adds	r2, r2, r3
 800490a:	4b03      	ldr	r3, [pc, #12]	@ (8004918 <setESPTimeStamp+0x20>)
 800490c:	601a      	str	r2, [r3, #0]
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	46bd      	mov	sp, r7
 8004912:	b002      	add	sp, #8
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	2000066c 	.word	0x2000066c

0800491c <setCharges>:
void setCharges(){
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004920:	f004 fc36 	bl	8009190 <ReadBatteryVoltage>
 8004924:	1c02      	adds	r2, r0, #0
 8004926:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <setCharges+0x3c>)
 8004928:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800492a:	f004 fc93 	bl	8009254 <ReadSolarVoltage>
 800492e:	0003      	movs	r3, r0
 8004930:	0018      	movs	r0, r3
 8004932:	f7fe ff5d 	bl	80037f0 <__aeabi_i2d>
 8004936:	2200      	movs	r2, #0
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <setCharges+0x40>)
 800493a:	f7fd fbd1 	bl	80020e0 <__aeabi_ddiv>
 800493e:	0002      	movs	r2, r0
 8004940:	000b      	movs	r3, r1
 8004942:	0010      	movs	r0, r2
 8004944:	0019      	movs	r1, r3
 8004946:	f7fe ffed 	bl	8003924 <__aeabi_d2f>
 800494a:	1c02      	adds	r2, r0, #0
 800494c:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <setCharges+0x44>)
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	200005c4 	.word	0x200005c4
 800495c:	408f4000 	.word	0x408f4000
 8004960:	200005c8 	.word	0x200005c8

08004964 <checkEEprom>:
bool checkEEprom(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800496a:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <checkEEprom+0x5c>)
 800496c:	4815      	ldr	r0, [pc, #84]	@ (80049c4 <checkEEprom+0x60>)
 800496e:	220c      	movs	r2, #12
 8004970:	0019      	movs	r1, r3
 8004972:	f006 fea9 	bl	800b6c8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004976:	1dfb      	adds	r3, r7, #7
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	e00e      	b.n	800499c <checkEEprom+0x38>
    configSum += tempConfig[i];
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4a0f      	ldr	r2, [pc, #60]	@ (80049c0 <checkEEprom+0x5c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	001a      	movs	r2, r3
 8004988:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <checkEEprom+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	18d2      	adds	r2, r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	@ (80049c8 <checkEEprom+0x64>)
 8004990:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	3201      	adds	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b0b      	cmp	r3, #11
 80049a2:	d9ec      	bls.n	800497e <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <checkEEprom+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	425a      	negs	r2, r3
 80049aa:	4153      	adcs	r3, r2
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b07      	ldr	r3, [pc, #28]	@ (80049cc <checkEEprom+0x68>)
 80049b0:	701a      	strb	r2, [r3, #0]
  return test;
 80049b2:	4b06      	ldr	r3, [pc, #24]	@ (80049cc <checkEEprom+0x68>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b002      	add	sp, #8
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200006f8 	.word	0x200006f8
 80049c4:	0808000c 	.word	0x0808000c
 80049c8:	20000704 	.word	0x20000704
 80049cc:	20000708 	.word	0x20000708

080049d0 <checkName>:
bool checkName(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <checkName+0x5c>)
 80049d8:	4815      	ldr	r0, [pc, #84]	@ (8004a30 <checkName+0x60>)
 80049da:	2220      	movs	r2, #32
 80049dc:	0019      	movs	r1, r3
 80049de:	f006 fe73 	bl	800b6c8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	e00e      	b.n	8004a08 <checkName+0x38>
    configSum += nameConfig[i];
 80049ea:	1dfb      	adds	r3, r7, #7
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	4a0f      	ldr	r2, [pc, #60]	@ (8004a2c <checkName+0x5c>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	001a      	movs	r2, r3
 80049f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004a34 <checkName+0x64>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	18d2      	adds	r2, r2, r3
 80049fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004a34 <checkName+0x64>)
 80049fc:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	3201      	adds	r2, #1
 8004a06:	701a      	strb	r2, [r3, #0]
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d9ec      	bls.n	80049ea <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <checkName+0x64>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	4193      	sbcs	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b07      	ldr	r3, [pc, #28]	@ (8004a38 <checkName+0x68>)
 8004a1c:	701a      	strb	r2, [r3, #0]
  return test;
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <checkName+0x68>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	2000070c 	.word	0x2000070c
 8004a30:	08080090 	.word	0x08080090
 8004a34:	2000072c 	.word	0x2000072c
 8004a38:	20000730 	.word	0x20000730

08004a3c <setHIDS>:


void setHIDS(float temp, float humid){
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004a46:	4b05      	ldr	r3, [pc, #20]	@ (8004a5c <setHIDS+0x20>)
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004a4c:	4b03      	ldr	r3, [pc, #12]	@ (8004a5c <setHIDS+0x20>)
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	2000067c 	.word	0x2000067c

08004a60 <setVOC>:

void setVOC(uint16_t voc) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	0002      	movs	r2, r0
 8004a68:	1dbb      	adds	r3, r7, #6
 8004a6a:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004a6c:	4b04      	ldr	r3, [pc, #16]	@ (8004a80 <setVOC+0x20>)
 8004a6e:	1dba      	adds	r2, r7, #6
 8004a70:	2158      	movs	r1, #88	@ 0x58
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	2000067c 	.word	0x2000067c

08004a84 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <setAHT2x+0x4c>)
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38
  if (airhum > MeasVal.AHT2x_humiditymax) {
 8004a94:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <setAHT2x+0x4c>)
 8004a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a98:	1c19      	adds	r1, r3, #0
 8004a9a:	6838      	ldr	r0, [r7, #0]
 8004a9c:	f7fb fd5c 	bl	8000558 <__aeabi_fcmpgt>
 8004aa0:	1e03      	subs	r3, r0, #0
 8004aa2:	d002      	beq.n	8004aaa <setAHT2x+0x26>
    MeasVal.AHT2x_humiditymax = airhum;
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <setAHT2x+0x4c>)
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  MeasVal.AHT2x_temperature = airtemp;
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <setAHT2x+0x4c>)
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
  if (airtemp > MeasVal.AHT2x_temperaturemax) {
 8004ab0:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <setAHT2x+0x4c>)
 8004ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab4:	1c19      	adds	r1, r3, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fb fd4e 	bl	8000558 <__aeabi_fcmpgt>
 8004abc:	1e03      	subs	r3, r0, #0
 8004abe:	d100      	bne.n	8004ac2 <setAHT2x+0x3e>
    MeasVal.AHT2x_temperaturemax = airtemp;
  }
}
 8004ac0:	e002      	b.n	8004ac8 <setAHT2x+0x44>
    MeasVal.AHT2x_temperaturemax = airtemp;
 8004ac2:	4b03      	ldr	r3, [pc, #12]	@ (8004ad0 <setAHT2x+0x4c>)
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	2000067c 	.word	0x2000067c

08004ad4 <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <setBMP280+0x4c>)
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	649a      	str	r2, [r3, #72]	@ 0x48
  if (airtemp > MeasVal.BMP280_temperaturemax) {
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b20 <setBMP280+0x4c>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae8:	1c19      	adds	r1, r3, #0
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fb fd34 	bl	8000558 <__aeabi_fcmpgt>
 8004af0:	1e03      	subs	r3, r0, #0
 8004af2:	d002      	beq.n	8004afa <setBMP280+0x26>
    MeasVal.BMP280_temperaturemax = airtemp;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <setBMP280+0x4c>)
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  MeasVal.BMP280_airpressure = airhpa;
 8004afa:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <setBMP280+0x4c>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	651a      	str	r2, [r3, #80]	@ 0x50
  if (airhpa > MeasVal.BMP280_airpressuremax) {
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <setBMP280+0x4c>)
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	1c19      	adds	r1, r3, #0
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f7fb fd26 	bl	8000558 <__aeabi_fcmpgt>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d100      	bne.n	8004b12 <setBMP280+0x3e>
    MeasVal.BMP280_airpressuremax = airhpa;
  }
}
 8004b10:	e002      	b.n	8004b18 <setBMP280+0x44>
    MeasVal.BMP280_airpressuremax = airhpa;
 8004b12:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <setBMP280+0x4c>)
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	2000067c 	.word	0x2000067c

08004b24 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b24:	b590      	push	{r4, r7, lr}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	0004      	movs	r4, r0
 8004b2c:	0008      	movs	r0, r1
 8004b2e:	0011      	movs	r1, r2
 8004b30:	1dfb      	adds	r3, r7, #7
 8004b32:	1c22      	adds	r2, r4, #0
 8004b34:	701a      	strb	r2, [r3, #0]
 8004b36:	1d3b      	adds	r3, r7, #4
 8004b38:	1c02      	adds	r2, r0, #0
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	1cbb      	adds	r3, r7, #2
 8004b3e:	1c0a      	adds	r2, r1, #0
 8004b40:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <setENS160+0x74>)
 8004b44:	1dfa      	adds	r2, r7, #7
 8004b46:	2164      	movs	r1, #100	@ 0x64
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <setENS160+0x74>)
 8004b4e:	2265      	movs	r2, #101	@ 0x65
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	1dfa      	adds	r2, r7, #7
 8004b54:	7812      	ldrb	r2, [r2, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d904      	bls.n	8004b64 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <setENS160+0x74>)
 8004b5c:	1dfa      	adds	r2, r7, #7
 8004b5e:	2165      	movs	r1, #101	@ 0x65
 8004b60:	7812      	ldrb	r2, [r2, #0]
 8004b62:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <setENS160+0x74>)
 8004b66:	1d3a      	adds	r2, r7, #4
 8004b68:	215a      	movs	r1, #90	@ 0x5a
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <setENS160+0x74>)
 8004b70:	1cba      	adds	r2, r7, #2
 8004b72:	2160      	movs	r1, #96	@ 0x60
 8004b74:	8812      	ldrh	r2, [r2, #0]
 8004b76:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <setENS160+0x74>)
 8004b7a:	2262      	movs	r2, #98	@ 0x62
 8004b7c:	5a9b      	ldrh	r3, [r3, r2]
 8004b7e:	1cba      	adds	r2, r7, #2
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d904      	bls.n	8004b90 <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004b86:	4b04      	ldr	r3, [pc, #16]	@ (8004b98 <setENS160+0x74>)
 8004b88:	1cba      	adds	r2, r7, #2
 8004b8a:	2162      	movs	r1, #98	@ 0x62
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	525a      	strh	r2, [r3, r1]
  }
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b003      	add	sp, #12
 8004b96:	bd90      	pop	{r4, r7, pc}
 8004b98:	2000067c 	.word	0x2000067c

08004b9c <sethPa>:

void sethPa(float hPa) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  MeasVal.hPaValue = hPa;
 8004ba4:	4b09      	ldr	r3, [pc, #36]	@ (8004bcc <sethPa+0x30>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	675a      	str	r2, [r3, #116]	@ 0x74
  if (hPa > MeasVal.hPaValuemax) {
 8004baa:	4b08      	ldr	r3, [pc, #32]	@ (8004bcc <sethPa+0x30>)
 8004bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bae:	1c19      	adds	r1, r3, #0
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fb fcd1 	bl	8000558 <__aeabi_fcmpgt>
 8004bb6:	1e03      	subs	r3, r0, #0
 8004bb8:	d100      	bne.n	8004bbc <sethPa+0x20>
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004bba:	e002      	b.n	8004bc2 <sethPa+0x26>
    MeasVal.hPaValuemax = hPa;
 8004bbc:	4b03      	ldr	r3, [pc, #12]	@ (8004bcc <sethPa+0x30>)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	2000067c 	.word	0x2000067c

08004bd0 <setMic>:


void setMic(float dB, float dBmax, float dBAavg){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	@ (8004bf8 <setMic+0x28>)
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  MeasVal.dBApeak = dBmax;
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <setMic+0x28>)
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  MeasVal.dBAaverage = dBAavg;
 8004be8:	4b03      	ldr	r3, [pc, #12]	@ (8004bf8 <setMic+0x28>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	671a      	str	r2, [r3, #112]	@ 0x70
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	2000067c 	.word	0x2000067c

08004bfc <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	0002      	movs	r2, r0
 8004c04:	1dbb      	adds	r3, r7, #6
 8004c06:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004c08:	1dbb      	adds	r3, r7, #6
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7fc fe0b 	bl	8001828 <__aeabi_i2f>
 8004c12:	1c03      	adds	r3, r0, #0
 8004c14:	490d      	ldr	r1, [pc, #52]	@ (8004c4c <setPM1p0+0x50>)
 8004c16:	1c18      	adds	r0, r3, #0
 8004c18:	f7fc f844 	bl	8000ca4 <__aeabi_fdiv>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	1c1a      	adds	r2, r3, #0
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <setPM1p0+0x54>)
 8004c22:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <setPM1p0+0x54>)
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <setPM1p0+0x54>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	1c19      	adds	r1, r3, #0
 8004c2e:	1c10      	adds	r0, r2, #0
 8004c30:	f7fb fc92 	bl	8000558 <__aeabi_fcmpgt>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d100      	bne.n	8004c3a <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c38:	e003      	b.n	8004c42 <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <setPM1p0+0x54>)
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <setPM1p0+0x54>)
 8004c40:	60da      	str	r2, [r3, #12]
}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b002      	add	sp, #8
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	41200000 	.word	0x41200000
 8004c50:	2000067c 	.word	0x2000067c

08004c54 <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	1dbb      	adds	r3, r7, #6
 8004c5e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c60:	1dbb      	adds	r3, r7, #6
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fc fddf 	bl	8001828 <__aeabi_i2f>
 8004c6a:	1c03      	adds	r3, r0, #0
 8004c6c:	490d      	ldr	r1, [pc, #52]	@ (8004ca4 <setPM2p5+0x50>)
 8004c6e:	1c18      	adds	r0, r3, #0
 8004c70:	f7fc f818 	bl	8000ca4 <__aeabi_fdiv>
 8004c74:	1c03      	adds	r3, r0, #0
 8004c76:	1c1a      	adds	r2, r3, #0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <setPM2p5+0x54>)
 8004c7a:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <setPM2p5+0x54>)
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	4b09      	ldr	r3, [pc, #36]	@ (8004ca8 <setPM2p5+0x54>)
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	1c19      	adds	r1, r3, #0
 8004c86:	1c10      	adds	r0, r2, #0
 8004c88:	f7fb fc66 	bl	8000558 <__aeabi_fcmpgt>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d100      	bne.n	8004c92 <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004c90:	e003      	b.n	8004c9a <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <setPM2p5+0x54>)
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <setPM2p5+0x54>)
 8004c98:	615a      	str	r2, [r3, #20]
}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b002      	add	sp, #8
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	41200000 	.word	0x41200000
 8004ca8:	2000067c 	.word	0x2000067c

08004cac <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	1dbb      	adds	r3, r7, #6
 8004cb6:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fc fdb3 	bl	8001828 <__aeabi_i2f>
 8004cc2:	1c03      	adds	r3, r0, #0
 8004cc4:	490d      	ldr	r1, [pc, #52]	@ (8004cfc <setPM4p0+0x50>)
 8004cc6:	1c18      	adds	r0, r3, #0
 8004cc8:	f7fb ffec 	bl	8000ca4 <__aeabi_fdiv>
 8004ccc:	1c03      	adds	r3, r0, #0
 8004cce:	1c1a      	adds	r2, r3, #0
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <setPM4p0+0x54>)
 8004cd2:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <setPM4p0+0x54>)
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <setPM4p0+0x54>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	1c19      	adds	r1, r3, #0
 8004cde:	1c10      	adds	r0, r2, #0
 8004ce0:	f7fb fc3a 	bl	8000558 <__aeabi_fcmpgt>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d100      	bne.n	8004cea <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004ce8:	e003      	b.n	8004cf2 <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004cea:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <setPM4p0+0x54>)
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <setPM4p0+0x54>)
 8004cf0:	61da      	str	r2, [r3, #28]
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b002      	add	sp, #8
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	41200000 	.word	0x41200000
 8004d00:	2000067c 	.word	0x2000067c

08004d04 <setPM10>:

void setPM10(uint16_t PM10) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	1dbb      	adds	r3, r7, #6
 8004d0e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004d10:	1dbb      	adds	r3, r7, #6
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	0018      	movs	r0, r3
 8004d16:	f7fc fd87 	bl	8001828 <__aeabi_i2f>
 8004d1a:	1c03      	adds	r3, r0, #0
 8004d1c:	490d      	ldr	r1, [pc, #52]	@ (8004d54 <setPM10+0x50>)
 8004d1e:	1c18      	adds	r0, r3, #0
 8004d20:	f7fb ffc0 	bl	8000ca4 <__aeabi_fdiv>
 8004d24:	1c03      	adds	r3, r0, #0
 8004d26:	1c1a      	adds	r2, r3, #0
 8004d28:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <setPM10+0x54>)
 8004d2a:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <setPM10+0x54>)
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <setPM10+0x54>)
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	1c19      	adds	r1, r3, #0
 8004d36:	1c10      	adds	r0, r2, #0
 8004d38:	f7fb fc0e 	bl	8000558 <__aeabi_fcmpgt>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d100      	bne.n	8004d42 <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d40:	e003      	b.n	8004d4a <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d42:	4b05      	ldr	r3, [pc, #20]	@ (8004d58 <setPM10+0x54>)
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <setPM10+0x54>)
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d4a:	46c0      	nop			@ (mov r8, r8)
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	41200000 	.word	0x41200000
 8004d58:	2000067c 	.word	0x2000067c

08004d5c <setNOx>:

void setNOx(uint16_t nox) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	0002      	movs	r2, r0
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <setNOx+0x38>)
 8004d6a:	1dba      	adds	r2, r7, #6
 8004d6c:	215c      	movs	r1, #92	@ 0x5c
 8004d6e:	8812      	ldrh	r2, [r2, #0]
 8004d70:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d72:	4b08      	ldr	r3, [pc, #32]	@ (8004d94 <setNOx+0x38>)
 8004d74:	225e      	movs	r2, #94	@ 0x5e
 8004d76:	5a9b      	ldrh	r3, [r3, r2]
 8004d78:	1dba      	adds	r2, r7, #6
 8004d7a:	8812      	ldrh	r2, [r2, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d904      	bls.n	8004d8a <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <setNOx+0x38>)
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	215e      	movs	r1, #94	@ 0x5e
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	2000067c 	.word	0x2000067c

08004d98 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004da2:	490a      	ldr	r1, [pc, #40]	@ (8004dcc <SetSEN545temphum+0x34>)
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fb ff7d 	bl	8000ca4 <__aeabi_fdiv>
 8004daa:	1c03      	adds	r3, r0, #0
 8004dac:	1c1a      	adds	r2, r3, #0
 8004dae:	4b08      	ldr	r3, [pc, #32]	@ (8004dd0 <SetSEN545temphum+0x38>)
 8004db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004db2:	4908      	ldr	r1, [pc, #32]	@ (8004dd4 <SetSEN545temphum+0x3c>)
 8004db4:	6838      	ldr	r0, [r7, #0]
 8004db6:	f7fb ff75 	bl	8000ca4 <__aeabi_fdiv>
 8004dba:	1c03      	adds	r3, r0, #0
 8004dbc:	1c1a      	adds	r2, r3, #0
 8004dbe:	4b04      	ldr	r3, [pc, #16]	@ (8004dd0 <SetSEN545temphum+0x38>)
 8004dc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	43480000 	.word	0x43480000
 8004dd0:	2000067c 	.word	0x2000067c
 8004dd4:	42c80000 	.word	0x42c80000

08004dd8 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004ddc:	f008 fdde 	bl	800d99c <sen5x_Get_sen5x_enable_state>
 8004de0:	1e03      	subs	r3, r0, #0
 8004de2:	d00f      	beq.n	8004e04 <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004dea:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004df0:	4b11      	ldr	r3, [pc, #68]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004df6:	4b10      	ldr	r3, [pc, #64]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004dfe:	225e      	movs	r2, #94	@ 0x5e
 8004e00:	2100      	movs	r1, #0
 8004e02:	5299      	strh	r1, [r3, r2]
  }
  MeasVal.AHT2x_humiditymax = 0.0;
 8004e04:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	63da      	str	r2, [r3, #60]	@ 0x3c
  MeasVal.AHT2x_temperaturemax = 0.0;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  MeasVal.BMP280_temperaturemax = 0.0;
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	64da      	str	r2, [r3, #76]	@ 0x4c
  MeasVal.BMP280_airpressuremax = 0.0;
 8004e16:	4b08      	ldr	r3, [pc, #32]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  MeasVal.eCO2Indexmax = 0;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e1e:	2262      	movs	r2, #98	@ 0x62
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004e24:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e26:	2265      	movs	r2, #101	@ 0x65
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]
  MeasVal.hPaValuemax = 0.0;
 8004e2c:	4b02      	ldr	r3, [pc, #8]	@ (8004e38 <resetMaxMeasurementValues+0x60>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	679a      	str	r2, [r3, #120]	@ 0x78
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000067c 	.word	0x2000067c

08004e3c <SetConfigMode>:

void SetConfigMode(){
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <SetConfigMode+0x30>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2201      	movs	r2, #1
 8004e46:	4053      	eors	r3, r2
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e4e:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <SetConfigMode+0x34>)
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <SetConfigMode+0x38>)
 8004e52:	0019      	movs	r1, r3
 8004e54:	2003      	movs	r0, #3
 8004e56:	f00e f95d 	bl	8013114 <CreateLine>
  }
  ReconfigSet = true;
 8004e5a:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <SetConfigMode+0x30>)
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e60:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <SetConfigMode+0x3c>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200005a3 	.word	0x200005a3
 8004e70:	08029b20 	.word	0x08029b20
 8004e74:	08029b40 	.word	0x08029b40
 8004e78:	20000207 	.word	0x20000207

08004e7c <GetReconfigMode>:

bool GetReconfigMode() {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e80:	4b02      	ldr	r3, [pc, #8]	@ (8004e8c <GetReconfigMode+0x10>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	200005a3 	.word	0x200005a3

08004e90 <ESP_GetUID>:

void ESP_GetUID(){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e94:	f00e fec8 	bl	8013c28 <HAL_GetUIDw0>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004e9c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e9e:	f00e fecd 	bl	8013c3c <HAL_GetUIDw1>
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004ea6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004ea8:	f00e fed2 	bl	8013c50 <HAL_GetUIDw2>
 8004eac:	0002      	movs	r2, r0
 8004eae:	4b02      	ldr	r3, [pc, #8]	@ (8004eb8 <ESP_GetUID+0x28>)
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	46c0      	nop			@ (mov r8, r8)
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	200005ac 	.word	0x200005ac

08004ebc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <ESP_Init+0x2c>)
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004eca:	4b08      	ldr	r3, [pc, #32]	@ (8004eec <ESP_Init+0x30>)
 8004ecc:	2202      	movs	r2, #2
 8004ece:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004ed0:	f7ff ffde 	bl	8004e90 <ESP_GetUID>
  beurs = checkEEprom();
 8004ed4:	f7ff fd46 	bl	8004964 <checkEEprom>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	001a      	movs	r2, r3
 8004edc:	4b04      	ldr	r3, [pc, #16]	@ (8004ef0 <ESP_Init+0x34>)
 8004ede:	701a      	strb	r2, [r3, #0]
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	20000498 	.word	0x20000498
 8004eec:	2000002c 	.word	0x2000002c
 8004ef0:	200005a6 	.word	0x200005a6

08004ef4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	000a      	movs	r2, r1
 8004efe:	1cbb      	adds	r3, r7, #2
 8004f00:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004f02:	4b11      	ldr	r3, [pc, #68]	@ (8004f48 <ESP_Send+0x54>)
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	1cbb      	adds	r3, r7, #2
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	0019      	movs	r1, r3
 8004f12:	f017 fc75 	bl	801c800 <HAL_UART_Transmit_DMA>
 8004f16:	0003      	movs	r3, r0
 8004f18:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f1a:	197b      	adds	r3, r7, r5
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004f22:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <ESP_Send+0x58>)
 8004f24:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <ESP_Send+0x5c>)
 8004f26:	0019      	movs	r1, r3
 8004f28:	2001      	movs	r0, #1
 8004f2a:	f00e f8f3 	bl	8013114 <CreateLine>
    return false;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e006      	b.n	8004f40 <ESP_Send+0x4c>
  }
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	4b07      	ldr	r3, [pc, #28]	@ (8004f54 <ESP_Send+0x60>)
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f020 f9e7 	bl	802530c <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  return true;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b004      	add	sp, #16
 8004f46:	bdb0      	pop	{r4, r5, r7, pc}
 8004f48:	20000498 	.word	0x20000498
 8004f4c:	08029b44 	.word	0x08029b44
 8004f50:	08029b64 	.word	0x08029b64
 8004f54:	08029b68 	.word	0x08029b68

08004f58 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	000a      	movs	r2, r1
 8004f62:	1cbb      	adds	r3, r7, #2
 8004f64:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f66:	4b5d      	ldr	r3, [pc, #372]	@ (80050dc <ESP_Receive+0x184>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f6c:	260f      	movs	r6, #15
 8004f6e:	19bb      	adds	r3, r7, r6
 8004f70:	2200      	movs	r2, #0
 8004f72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f74:	4b5a      	ldr	r3, [pc, #360]	@ (80050e0 <ESP_Receive+0x188>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	250d      	movs	r5, #13
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	1cbb      	adds	r3, r7, #2
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	0019      	movs	r1, r3
 8004f84:	f017 fccc 	bl	801c920 <HAL_UART_Receive_DMA>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f8c:	002c      	movs	r4, r5
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d100      	bne.n	8004f98 <ESP_Receive+0x40>
 8004f96:	e09c      	b.n	80050d2 <ESP_Receive+0x17a>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f98:	4b51      	ldr	r3, [pc, #324]	@ (80050e0 <ESP_Receive+0x188>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2284      	movs	r2, #132	@ 0x84
 8004f9e:	589b      	ldr	r3, [r3, r2]
 8004fa0:	4a50      	ldr	r2, [pc, #320]	@ (80050e4 <ESP_Receive+0x18c>)
 8004fa2:	4951      	ldr	r1, [pc, #324]	@ (80050e8 <ESP_Receive+0x190>)
 8004fa4:	2001      	movs	r0, #1
 8004fa6:	f00e f8b5 	bl	8013114 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004faa:	193b      	adds	r3, r7, r4
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d008      	beq.n	8004fc6 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80050ec <ESP_Receive+0x194>)
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <ESP_Receive+0x190>)
 8004fb8:	0019      	movs	r1, r3
 8004fba:	2001      	movs	r0, #1
 8004fbc:	f00e f8aa 	bl	8013114 <CreateLine>
      reset = true;
 8004fc0:	19bb      	adds	r3, r7, r6
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fc6:	230d      	movs	r3, #13
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d005      	beq.n	8004fde <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004fd2:	4a47      	ldr	r2, [pc, #284]	@ (80050f0 <ESP_Receive+0x198>)
 8004fd4:	4b44      	ldr	r3, [pc, #272]	@ (80050e8 <ESP_Receive+0x190>)
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f00e f89b 	bl	8013114 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fde:	230d      	movs	r3, #13
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2204      	movs	r2, #4
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d005      	beq.n	8004ff6 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004fea:	4a42      	ldr	r2, [pc, #264]	@ (80050f4 <ESP_Receive+0x19c>)
 8004fec:	4b3e      	ldr	r3, [pc, #248]	@ (80050e8 <ESP_Receive+0x190>)
 8004fee:	0019      	movs	r1, r3
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f00e f88f 	bl	8013114 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004ff6:	230d      	movs	r3, #13
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	4013      	ands	r3, r2
 8005000:	d005      	beq.n	800500e <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8005002:	4a3d      	ldr	r2, [pc, #244]	@ (80050f8 <ESP_Receive+0x1a0>)
 8005004:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <ESP_Receive+0x190>)
 8005006:	0019      	movs	r1, r3
 8005008:	2001      	movs	r0, #1
 800500a:	f00e f883 	bl	8013114 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 800500e:	230d      	movs	r3, #13
 8005010:	18fb      	adds	r3, r7, r3
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2210      	movs	r2, #16
 8005016:	4013      	ands	r3, r2
 8005018:	d005      	beq.n	8005026 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800501a:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <ESP_Receive+0x1a4>)
 800501c:	4b32      	ldr	r3, [pc, #200]	@ (80050e8 <ESP_Receive+0x190>)
 800501e:	0019      	movs	r1, r3
 8005020:	2001      	movs	r0, #1
 8005022:	f00e f877 	bl	8013114 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005026:	230d      	movs	r3, #13
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2220      	movs	r2, #32
 800502e:	4013      	ands	r3, r2
 8005030:	d005      	beq.n	800503e <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8005032:	4a33      	ldr	r2, [pc, #204]	@ (8005100 <ESP_Receive+0x1a8>)
 8005034:	4b2c      	ldr	r3, [pc, #176]	@ (80050e8 <ESP_Receive+0x190>)
 8005036:	0019      	movs	r1, r3
 8005038:	2001      	movs	r0, #1
 800503a:	f00e f86b 	bl	8013114 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800503e:	230d      	movs	r3, #13
 8005040:	18fb      	adds	r3, r7, r3
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2240      	movs	r2, #64	@ 0x40
 8005046:	4013      	ands	r3, r2
 8005048:	d005      	beq.n	8005056 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800504a:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <ESP_Receive+0x1ac>)
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <ESP_Receive+0x190>)
 800504e:	0019      	movs	r1, r3
 8005050:	2001      	movs	r0, #1
 8005052:	f00e f85f 	bl	8013114 <CreateLine>
    }
#endif
    if (reset) {
 8005056:	230f      	movs	r3, #15
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d033      	beq.n	80050c8 <ESP_Receive+0x170>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005060:	4b29      	ldr	r3, [pc, #164]	@ (8005108 <ESP_Receive+0x1b0>)
 8005062:	2200      	movs	r2, #0
 8005064:	2101      	movs	r1, #1
 8005066:	0018      	movs	r0, r3
 8005068:	f010 f825 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800506c:	2001      	movs	r0, #1
 800506e:	f00e fd9b 	bl	8013ba8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005072:	2380      	movs	r3, #128	@ 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4825      	ldr	r0, [pc, #148]	@ (800510c <ESP_Receive+0x1b4>)
 8005078:	2200      	movs	r2, #0
 800507a:	0019      	movs	r1, r3
 800507c:	f010 f81b 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005080:	2001      	movs	r0, #1
 8005082:	f00e fd91 	bl	8013ba8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005086:	4b20      	ldr	r3, [pc, #128]	@ (8005108 <ESP_Receive+0x1b0>)
 8005088:	2200      	movs	r2, #0
 800508a:	2102      	movs	r1, #2
 800508c:	0018      	movs	r0, r3
 800508e:	f010 f812 	bl	80150b6 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 8005092:	230e      	movs	r3, #14
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	2200      	movs	r2, #0
 8005098:	701a      	strb	r2, [r3, #0]
 800509a:	e00e      	b.n	80050ba <ESP_Receive+0x162>
        SetAllREDLED();
 800509c:	f00c ff32 	bl	8011f04 <SetAllREDLED>
        SetLEDsOff();
 80050a0:	f00c ff14 	bl	8011ecc <SetLEDsOff>
        HAL_Delay(500);
 80050a4:	23fa      	movs	r3, #250	@ 0xfa
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	0018      	movs	r0, r3
 80050aa:	f00e fd7d 	bl	8013ba8 <HAL_Delay>
      for (uint8_t resl = 0; resl < 6; resl++) { //Wait some time to reset
 80050ae:	210e      	movs	r1, #14
 80050b0:	187b      	adds	r3, r7, r1
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	187b      	adds	r3, r7, r1
 80050b6:	3201      	adds	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	230e      	movs	r3, #14
 80050bc:	18fb      	adds	r3, r7, r3
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d9eb      	bls.n	800509c <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 80050c4:	f00f fa2f 	bl	8014526 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050c8:	4b04      	ldr	r3, [pc, #16]	@ (80050dc <ESP_Receive+0x184>)
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
    return false;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <ESP_Receive+0x17c>
  }
  return true;
 80050d2:	2301      	movs	r3, #1
}
 80050d4:	0018      	movs	r0, r3
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b005      	add	sp, #20
 80050da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050dc:	2000049c 	.word	0x2000049c
 80050e0:	20000498 	.word	0x20000498
 80050e4:	08029b78 	.word	0x08029b78
 80050e8:	08029b64 	.word	0x08029b64
 80050ec:	08029ba8 	.word	0x08029ba8
 80050f0:	08029bcc 	.word	0x08029bcc
 80050f4:	08029bf0 	.word	0x08029bf0
 80050f8:	08029c14 	.word	0x08029c14
 80050fc:	08029c38 	.word	0x08029c38
 8005100:	08029c64 	.word	0x08029c64
 8005104:	08029c94 	.word	0x08029c94
 8005108:	50001c00 	.word	0x50001c00
 800510c:	50000800 	.word	0x50000800

08005110 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005118:	4b39      	ldr	r3, [pc, #228]	@ (8005200 <HAL_UART_ErrorCallback+0xf0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d16b      	bne.n	80051fa <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2284      	movs	r2, #132	@ 0x84
 8005126:	589b      	ldr	r3, [r3, r2]
 8005128:	2b04      	cmp	r3, #4
 800512a:	d065      	beq.n	80051f8 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2284      	movs	r2, #132	@ 0x84
 8005130:	589b      	ldr	r3, [r3, r2]
 8005132:	4a34      	ldr	r2, [pc, #208]	@ (8005204 <HAL_UART_ErrorCallback+0xf4>)
 8005134:	4934      	ldr	r1, [pc, #208]	@ (8005208 <HAL_UART_ErrorCallback+0xf8>)
 8005136:	2003      	movs	r0, #3
 8005138:	f00d ffec 	bl	8013114 <CreateLine>
    switch (huart->ErrorCode) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2284      	movs	r2, #132	@ 0x84
 8005140:	589b      	ldr	r3, [r3, r2]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d851      	bhi.n	80051ea <HAL_UART_ErrorCallback+0xda>
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <HAL_UART_ErrorCallback+0xfc>)
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 8005150:	4a2f      	ldr	r2, [pc, #188]	@ (8005210 <HAL_UART_ErrorCallback+0x100>)
 8005152:	4b30      	ldr	r3, [pc, #192]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005154:	0019      	movs	r1, r3
 8005156:	2001      	movs	r0, #1
 8005158:	f00d ffdc 	bl	8013114 <CreateLine>
        break;
 800515c:	e04d      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 800515e:	4a2e      	ldr	r2, [pc, #184]	@ (8005218 <HAL_UART_ErrorCallback+0x108>)
 8005160:	4b2c      	ldr	r3, [pc, #176]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005162:	0019      	movs	r1, r3
 8005164:	2001      	movs	r0, #1
 8005166:	f00d ffd5 	bl	8013114 <CreateLine>
        break;
 800516a:	e046      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 800516c:	4a2b      	ldr	r2, [pc, #172]	@ (800521c <HAL_UART_ErrorCallback+0x10c>)
 800516e:	4b29      	ldr	r3, [pc, #164]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 8005170:	0019      	movs	r1, r3
 8005172:	2001      	movs	r0, #1
 8005174:	f00d ffce 	bl	8013114 <CreateLine>
        break;
 8005178:	e03f      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 800517a:	4a29      	ldr	r2, [pc, #164]	@ (8005220 <HAL_UART_ErrorCallback+0x110>)
 800517c:	4b25      	ldr	r3, [pc, #148]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800517e:	0019      	movs	r1, r3
 8005180:	2001      	movs	r0, #1
 8005182:	f00d ffc7 	bl	8013114 <CreateLine>
        break;
 8005186:	e038      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8005188:	4a26      	ldr	r2, [pc, #152]	@ (8005224 <HAL_UART_ErrorCallback+0x114>)
 800518a:	4b22      	ldr	r3, [pc, #136]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800518c:	0019      	movs	r1, r3
 800518e:	2001      	movs	r0, #1
 8005190:	f00d ffc0 	bl	8013114 <CreateLine>
        break;
 8005194:	e031      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8005196:	4a24      	ldr	r2, [pc, #144]	@ (8005228 <HAL_UART_ErrorCallback+0x118>)
 8005198:	4b1e      	ldr	r3, [pc, #120]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 800519a:	0019      	movs	r1, r3
 800519c:	2001      	movs	r0, #1
 800519e:	f00d ffb9 	bl	8013114 <CreateLine>
        break;
 80051a2:	e02a      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 80051a4:	4a21      	ldr	r2, [pc, #132]	@ (800522c <HAL_UART_ErrorCallback+0x11c>)
 80051a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051a8:	0019      	movs	r1, r3
 80051aa:	2001      	movs	r0, #1
 80051ac:	f00d ffb2 	bl	8013114 <CreateLine>
        break;
 80051b0:	e023      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 80051b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005230 <HAL_UART_ErrorCallback+0x120>)
 80051b4:	4b17      	ldr	r3, [pc, #92]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051b6:	0019      	movs	r1, r3
 80051b8:	2001      	movs	r0, #1
 80051ba:	f00d ffab 	bl	8013114 <CreateLine>
        break;
 80051be:	e01c      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 80051c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005234 <HAL_UART_ErrorCallback+0x124>)
 80051c2:	4b14      	ldr	r3, [pc, #80]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051c4:	0019      	movs	r1, r3
 80051c6:	2001      	movs	r0, #1
 80051c8:	f00d ffa4 	bl	8013114 <CreateLine>
        break;
 80051cc:	e015      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 80051ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005238 <HAL_UART_ErrorCallback+0x128>)
 80051d0:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051d2:	0019      	movs	r1, r3
 80051d4:	2001      	movs	r0, #1
 80051d6:	f00d ff9d 	bl	8013114 <CreateLine>
        break;
 80051da:	e00e      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 80051dc:	4a17      	ldr	r2, [pc, #92]	@ (800523c <HAL_UART_ErrorCallback+0x12c>)
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051e0:	0019      	movs	r1, r3
 80051e2:	2001      	movs	r0, #1
 80051e4:	f00d ff96 	bl	8013114 <CreateLine>
        break;
 80051e8:	e007      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 80051ea:	4a15      	ldr	r2, [pc, #84]	@ (8005240 <HAL_UART_ErrorCallback+0x130>)
 80051ec:	4b09      	ldr	r3, [pc, #36]	@ (8005214 <HAL_UART_ErrorCallback+0x104>)
 80051ee:	0019      	movs	r1, r3
 80051f0:	2001      	movs	r0, #1
 80051f2:	f00d ff8f 	bl	8013114 <CreateLine>
 80051f6:	e000      	b.n	80051fa <HAL_UART_ErrorCallback+0xea>
      return;
 80051f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b002      	add	sp, #8
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000498 	.word	0x20000498
 8005204:	08029cc4 	.word	0x08029cc4
 8005208:	08029b40 	.word	0x08029b40
 800520c:	0802d780 	.word	0x0802d780
 8005210:	08029cf4 	.word	0x08029cf4
 8005214:	08029b64 	.word	0x08029b64
 8005218:	08029d28 	.word	0x08029d28
 800521c:	08029d54 	.word	0x08029d54
 8005220:	08029d88 	.word	0x08029d88
 8005224:	08029db4 	.word	0x08029db4
 8005228:	08029ddc 	.word	0x08029ddc
 800522c:	08029e0c 	.word	0x08029e0c
 8005230:	08029e44 	.word	0x08029e44
 8005234:	08029e7c 	.word	0x08029e7c
 8005238:	08029ea4 	.word	0x08029ea4
 800523c:	08029ecc 	.word	0x08029ecc
 8005240:	08029ef8 	.word	0x08029ef8

08005244 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b42      	cmp	r3, #66	@ 0x42
 8005256:	d905      	bls.n	8005264 <isKeyValid+0x20>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2bff      	cmp	r3, #255	@ 0xff
 800525e:	d001      	beq.n	8005264 <isKeyValid+0x20>
    return true;
 8005260:	2301      	movs	r3, #1
 8005262:	e01d      	b.n	80052a0 <isKeyValid+0x5c>
  else {
    printf("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <isKeyValid+0x64>)
 800526a:	0018      	movs	r0, r3
 800526c:	f020 f84e 	bl	802530c <iprintf>
    for (int i = 0; i < 12; i++) {
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	e00c      	b.n	8005290 <isKeyValid+0x4c>
      printf("%02x", data[i]);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	18d3      	adds	r3, r2, r3
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	001a      	movs	r2, r3
 8005280:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <isKeyValid+0x68>)
 8005282:	0011      	movs	r1, r2
 8005284:	0018      	movs	r0, r3
 8005286:	f020 f841 	bl	802530c <iprintf>
    for (int i = 0; i < 12; i++) {
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3301      	adds	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b0b      	cmp	r3, #11
 8005294:	ddef      	ble.n	8005276 <isKeyValid+0x32>
    }
    printf("\r\n");
 8005296:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <isKeyValid+0x6c>)
 8005298:	0018      	movs	r0, r3
 800529a:	f020 f89d 	bl	80253d8 <puts>
    return false;
 800529e:	2300      	movs	r3, #0
  }
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	08029f1c 	.word	0x08029f1c
 80052ac:	08029f54 	.word	0x08029f54
 80052b0:	08029f5c 	.word	0x08029f5c

080052b4 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e010      	b.n	80052e6 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	001a      	movs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1898      	adds	r0, r3, r2
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	001a      	movs	r2, r3
 80052d8:	4b07      	ldr	r3, [pc, #28]	@ (80052f8 <uint8ArrayToString+0x44>)
 80052da:	0019      	movs	r1, r3
 80052dc:	f020 f886 	bl	80253ec <siprintf>
  for (int i = 0; i < 12; i++) {
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2b0b      	cmp	r3, #11
 80052ea:	ddeb      	ble.n	80052c4 <uint8ArrayToString+0x10>
  }
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b004      	add	sp, #16
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	08029f54 	.word	0x08029f54

080052fc <CreateMessage>:

uint16_t CreateMessage(bool onBeurs, bool *txstat, bool send) {
 80052fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fe:	b089      	sub	sp, #36	@ 0x24
 8005300:	af04      	add	r7, sp, #16
 8005302:	6039      	str	r1, [r7, #0]
 8005304:	0011      	movs	r1, r2
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	1c02      	adds	r2, r0, #0
 800530a:	701a      	strb	r2, [r3, #0]
 800530c:	1dbb      	adds	r3, r7, #6
 800530e:	1c0a      	adds	r2, r1, #0
 8005310:	701a      	strb	r2, [r3, #0]
#endif
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005312:	f7ff fb5d 	bl	80049d0 <checkName>
 8005316:	1e03      	subs	r3, r0, #0
 8005318:	d00a      	beq.n	8005330 <CreateMessage+0x34>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800531a:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <CreateMessage+0x2c>)
 800531c:	4803      	ldr	r0, [pc, #12]	@ (800532c <CreateMessage+0x30>)
 800531e:	2220      	movs	r2, #32
 8005320:	0019      	movs	r1, r3
 8005322:	f006 f9d1 	bl	800b6c8 <ReadUint8ArrayEEprom>
 8005326:	e009      	b.n	800533c <CreateMessage+0x40>
 8005328:	20000734 	.word	0x20000734
 800532c:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8005330:	4bed      	ldr	r3, [pc, #948]	@ (80056e8 <CreateMessage+0x3ec>)
 8005332:	4aee      	ldr	r2, [pc, #952]	@ (80056ec <CreateMessage+0x3f0>)
 8005334:	6811      	ldr	r1, [r2, #0]
 8005336:	6019      	str	r1, [r3, #0]
 8005338:	7912      	ldrb	r2, [r2, #4]
 800533a:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 800533c:	f7ff faee 	bl	800491c <setCharges>
  uint16_t index = 0;
 8005340:	260e      	movs	r6, #14
 8005342:	19bb      	adds	r3, r7, r6
 8005344:	2200      	movs	r2, #0
 8005346:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8005348:	19bb      	adds	r3, r7, r6
 800534a:	881a      	ldrh	r2, [r3, #0]
 800534c:	4be8      	ldr	r3, [pc, #928]	@ (80056f0 <CreateMessage+0x3f4>)
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	4ae8      	ldr	r2, [pc, #928]	@ (80056f4 <CreateMessage+0x3f8>)
 8005352:	0011      	movs	r1, r2
 8005354:	0018      	movs	r0, r3
 8005356:	f020 f849 	bl	80253ec <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 800535a:	4be7      	ldr	r3, [pc, #924]	@ (80056f8 <CreateMessage+0x3fc>)
 800535c:	48e7      	ldr	r0, [pc, #924]	@ (80056fc <CreateMessage+0x400>)
 800535e:	220c      	movs	r2, #12
 8005360:	0019      	movs	r1, r3
 8005362:	f006 f9b1 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005366:	4ae4      	ldr	r2, [pc, #912]	@ (80056f8 <CreateMessage+0x3fc>)
 8005368:	4be5      	ldr	r3, [pc, #916]	@ (8005700 <CreateMessage+0x404>)
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f7ff ffa1 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
 8005372:	4be4      	ldr	r3, [pc, #912]	@ (8005704 <CreateMessage+0x408>)
 8005374:	689c      	ldr	r4, [r3, #8]
 8005376:	4be4      	ldr	r3, [pc, #912]	@ (8005708 <CreateMessage+0x40c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1c18      	adds	r0, r3, #0
 800537c:	f7fe fa8a 	bl	8003894 <__aeabi_f2d>
 8005380:	0002      	movs	r2, r0
 8005382:	000b      	movs	r3, r1
 8005384:	4dd8      	ldr	r5, [pc, #864]	@ (80056e8 <CreateMessage+0x3ec>)
 8005386:	49e1      	ldr	r1, [pc, #900]	@ (800570c <CreateMessage+0x410>)
 8005388:	48e1      	ldr	r0, [pc, #900]	@ (8005710 <CreateMessage+0x414>)
 800538a:	9202      	str	r2, [sp, #8]
 800538c:	9303      	str	r3, [sp, #12]
 800538e:	4bdc      	ldr	r3, [pc, #880]	@ (8005700 <CreateMessage+0x404>)
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	002b      	movs	r3, r5
 8005394:	0022      	movs	r2, r4
 8005396:	f020 f829 	bl	80253ec <siprintf>
#endif
index = strlen(message);
 800539a:	4bd5      	ldr	r3, [pc, #852]	@ (80056f0 <CreateMessage+0x3f4>)
 800539c:	0018      	movs	r0, r3
 800539e:	f7fa fee5 	bl	800016c <strlen>
 80053a2:	0002      	movs	r2, r0
 80053a4:	19bb      	adds	r3, r7, r6
 80053a6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80053a8:	1dbb      	adds	r3, r7, #6
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d019      	beq.n	80053e4 <CreateMessage+0xe8>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80053b0:	4bcf      	ldr	r3, [pc, #828]	@ (80056f0 <CreateMessage+0x3f4>)
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7fa feda 	bl	800016c <strlen>
 80053b8:	0003      	movs	r3, r0
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	4bcc      	ldr	r3, [pc, #816]	@ (80056f0 <CreateMessage+0x3f4>)
 80053be:	0011      	movs	r1, r2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff fd97 	bl	8004ef4 <ESP_Send>
 80053c6:	0003      	movs	r3, r0
 80053c8:	001a      	movs	r2, r3
 80053ca:	4bd2      	ldr	r3, [pc, #840]	@ (8005714 <CreateMessage+0x418>)
 80053cc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053ce:	4bd2      	ldr	r3, [pc, #840]	@ (8005718 <CreateMessage+0x41c>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	001a      	movs	r2, r3
 80053d4:	4bcf      	ldr	r3, [pc, #828]	@ (8005714 <CreateMessage+0x418>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	4013      	ands	r3, r2
 80053da:	1e5a      	subs	r2, r3, #1
 80053dc:	4193      	sbcs	r3, r2
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	4bcd      	ldr	r3, [pc, #820]	@ (8005718 <CreateMessage+0x41c>)
 80053e2:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 80053e4:	4bc4      	ldr	r3, [pc, #784]	@ (80056f8 <CreateMessage+0x3fc>)
 80053e6:	48cd      	ldr	r0, [pc, #820]	@ (800571c <CreateMessage+0x420>)
 80053e8:	220c      	movs	r2, #12
 80053ea:	0019      	movs	r1, r3
 80053ec:	f006 f96c 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80053f0:	4ac1      	ldr	r2, [pc, #772]	@ (80056f8 <CreateMessage+0x3fc>)
 80053f2:	4bc3      	ldr	r3, [pc, #780]	@ (8005700 <CreateMessage+0x404>)
 80053f4:	0011      	movs	r1, r2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff ff5c 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
 80053fc:	4bc1      	ldr	r3, [pc, #772]	@ (8005704 <CreateMessage+0x408>)
 80053fe:	689c      	ldr	r4, [r3, #8]
 8005400:	4bc1      	ldr	r3, [pc, #772]	@ (8005708 <CreateMessage+0x40c>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	1c18      	adds	r0, r3, #0
 8005406:	f7fe fa45 	bl	8003894 <__aeabi_f2d>
 800540a:	0002      	movs	r2, r0
 800540c:	000b      	movs	r3, r1
 800540e:	4db6      	ldr	r5, [pc, #728]	@ (80056e8 <CreateMessage+0x3ec>)
 8005410:	49c3      	ldr	r1, [pc, #780]	@ (8005720 <CreateMessage+0x424>)
 8005412:	48b7      	ldr	r0, [pc, #732]	@ (80056f0 <CreateMessage+0x3f4>)
 8005414:	9202      	str	r2, [sp, #8]
 8005416:	9303      	str	r3, [sp, #12]
 8005418:	4bb9      	ldr	r3, [pc, #740]	@ (8005700 <CreateMessage+0x404>)
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	002b      	movs	r3, r5
 800541e:	0022      	movs	r2, r4
 8005420:	f01f ffe4 	bl	80253ec <siprintf>
#endif
  index += strlen(message);
 8005424:	4bb2      	ldr	r3, [pc, #712]	@ (80056f0 <CreateMessage+0x3f4>)
 8005426:	0018      	movs	r0, r3
 8005428:	f7fa fea0 	bl	800016c <strlen>
 800542c:	0003      	movs	r3, r0
 800542e:	b299      	uxth	r1, r3
 8005430:	220e      	movs	r2, #14
 8005432:	18bb      	adds	r3, r7, r2
 8005434:	18ba      	adds	r2, r7, r2
 8005436:	8812      	ldrh	r2, [r2, #0]
 8005438:	188a      	adds	r2, r1, r2
 800543a:	801a      	strh	r2, [r3, #0]
  if (send) {
 800543c:	1dbb      	adds	r3, r7, #6
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <CreateMessage+0x17c>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005444:	4baa      	ldr	r3, [pc, #680]	@ (80056f0 <CreateMessage+0x3f4>)
 8005446:	0018      	movs	r0, r3
 8005448:	f7fa fe90 	bl	800016c <strlen>
 800544c:	0003      	movs	r3, r0
 800544e:	b29a      	uxth	r2, r3
 8005450:	4ba7      	ldr	r3, [pc, #668]	@ (80056f0 <CreateMessage+0x3f4>)
 8005452:	0011      	movs	r1, r2
 8005454:	0018      	movs	r0, r3
 8005456:	f7ff fd4d 	bl	8004ef4 <ESP_Send>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4bad      	ldr	r3, [pc, #692]	@ (8005714 <CreateMessage+0x418>)
 8005460:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005462:	4bad      	ldr	r3, [pc, #692]	@ (8005718 <CreateMessage+0x41c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	001a      	movs	r2, r3
 8005468:	4baa      	ldr	r3, [pc, #680]	@ (8005714 <CreateMessage+0x418>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	4013      	ands	r3, r2
 800546e:	1e5a      	subs	r2, r3, #1
 8005470:	4193      	sbcs	r3, r2
 8005472:	b2da      	uxtb	r2, r3
 8005474:	4ba8      	ldr	r3, [pc, #672]	@ (8005718 <CreateMessage+0x41c>)
 8005476:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 8005478:	4b9f      	ldr	r3, [pc, #636]	@ (80056f8 <CreateMessage+0x3fc>)
 800547a:	48aa      	ldr	r0, [pc, #680]	@ (8005724 <CreateMessage+0x428>)
 800547c:	220c      	movs	r2, #12
 800547e:	0019      	movs	r1, r3
 8005480:	f006 f922 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005484:	4a9c      	ldr	r2, [pc, #624]	@ (80056f8 <CreateMessage+0x3fc>)
 8005486:	4b9e      	ldr	r3, [pc, #632]	@ (8005700 <CreateMessage+0x404>)
 8005488:	0011      	movs	r1, r2
 800548a:	0018      	movs	r0, r3
 800548c:	f7ff ff12 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
 8005490:	4b9c      	ldr	r3, [pc, #624]	@ (8005704 <CreateMessage+0x408>)
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b9c      	ldr	r3, [pc, #624]	@ (8005708 <CreateMessage+0x40c>)
 8005496:	2158      	movs	r1, #88	@ 0x58
 8005498:	5a5b      	ldrh	r3, [r3, r1]
 800549a:	4c93      	ldr	r4, [pc, #588]	@ (80056e8 <CreateMessage+0x3ec>)
 800549c:	49a2      	ldr	r1, [pc, #648]	@ (8005728 <CreateMessage+0x42c>)
 800549e:	4894      	ldr	r0, [pc, #592]	@ (80056f0 <CreateMessage+0x3f4>)
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	4b97      	ldr	r3, [pc, #604]	@ (8005700 <CreateMessage+0x404>)
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	0023      	movs	r3, r4
 80054a8:	f01f ffa0 	bl	80253ec <siprintf>
#endif
  index += strlen(message);
 80054ac:	4b90      	ldr	r3, [pc, #576]	@ (80056f0 <CreateMessage+0x3f4>)
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7fa fe5c 	bl	800016c <strlen>
 80054b4:	0003      	movs	r3, r0
 80054b6:	b299      	uxth	r1, r3
 80054b8:	220e      	movs	r2, #14
 80054ba:	18bb      	adds	r3, r7, r2
 80054bc:	18ba      	adds	r2, r7, r2
 80054be:	8812      	ldrh	r2, [r2, #0]
 80054c0:	188a      	adds	r2, r1, r2
 80054c2:	801a      	strh	r2, [r3, #0]
  if (send) {
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d019      	beq.n	8005500 <CreateMessage+0x204>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80054cc:	4b88      	ldr	r3, [pc, #544]	@ (80056f0 <CreateMessage+0x3f4>)
 80054ce:	0018      	movs	r0, r3
 80054d0:	f7fa fe4c 	bl	800016c <strlen>
 80054d4:	0003      	movs	r3, r0
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	4b85      	ldr	r3, [pc, #532]	@ (80056f0 <CreateMessage+0x3f4>)
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f7ff fd09 	bl	8004ef4 <ESP_Send>
 80054e2:	0003      	movs	r3, r0
 80054e4:	001a      	movs	r2, r3
 80054e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005714 <CreateMessage+0x418>)
 80054e8:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80054ea:	4b8b      	ldr	r3, [pc, #556]	@ (8005718 <CreateMessage+0x41c>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	4b88      	ldr	r3, [pc, #544]	@ (8005714 <CreateMessage+0x418>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	4013      	ands	r3, r2
 80054f6:	1e5a      	subs	r2, r3, #1
 80054f8:	4193      	sbcs	r3, r2
 80054fa:	b2da      	uxtb	r2, r3
 80054fc:	4b86      	ldr	r3, [pc, #536]	@ (8005718 <CreateMessage+0x41c>)
 80054fe:	701a      	strb	r2, [r3, #0]
      retstat &= status;
    }
  }
#endif

  if (IsBMP280SensorPresent()) {
 8005500:	f007 fa16 	bl	800c930 <IsBMP280SensorPresent>
 8005504:	1e03      	subs	r3, r0, #0
 8005506:	d100      	bne.n	800550a <CreateMessage+0x20e>
 8005508:	e0ab      	b.n	8005662 <CreateMessage+0x366>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 800550a:	4b7b      	ldr	r3, [pc, #492]	@ (80056f8 <CreateMessage+0x3fc>)
 800550c:	4887      	ldr	r0, [pc, #540]	@ (800572c <CreateMessage+0x430>)
 800550e:	220c      	movs	r2, #12
 8005510:	0019      	movs	r1, r3
 8005512:	f006 f8d9 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && (MeasVal.hPaValuemax != 0.0)) {
 8005516:	4a86      	ldr	r2, [pc, #536]	@ (8005730 <CreateMessage+0x434>)
 8005518:	4986      	ldr	r1, [pc, #536]	@ (8005734 <CreateMessage+0x438>)
 800551a:	4b77      	ldr	r3, [pc, #476]	@ (80056f8 <CreateMessage+0x3fc>)
 800551c:	0018      	movs	r0, r3
 800551e:	f7ff fe91 	bl	8005244 <isKeyValid>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d04b      	beq.n	80055be <CreateMessage+0x2c2>
 8005526:	4b78      	ldr	r3, [pc, #480]	@ (8005708 <CreateMessage+0x40c>)
 8005528:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800552a:	2100      	movs	r1, #0
 800552c:	1c18      	adds	r0, r3, #0
 800552e:	f7fa fff9 	bl	8000524 <__aeabi_fcmpeq>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d143      	bne.n	80055be <CreateMessage+0x2c2>
      uint8ArrayToString(Buffer, keybuffer);
 8005536:	4a70      	ldr	r2, [pc, #448]	@ (80056f8 <CreateMessage+0x3fc>)
 8005538:	4b71      	ldr	r3, [pc, #452]	@ (8005700 <CreateMessage+0x404>)
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f7ff feb9 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.hPaValuemax);
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.hPaValuemax);
 8005542:	4b70      	ldr	r3, [pc, #448]	@ (8005704 <CreateMessage+0x408>)
 8005544:	689c      	ldr	r4, [r3, #8]
 8005546:	4b70      	ldr	r3, [pc, #448]	@ (8005708 <CreateMessage+0x40c>)
 8005548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800554a:	1c18      	adds	r0, r3, #0
 800554c:	f7fe f9a2 	bl	8003894 <__aeabi_f2d>
 8005550:	0002      	movs	r2, r0
 8005552:	000b      	movs	r3, r1
 8005554:	4d64      	ldr	r5, [pc, #400]	@ (80056e8 <CreateMessage+0x3ec>)
 8005556:	4978      	ldr	r1, [pc, #480]	@ (8005738 <CreateMessage+0x43c>)
 8005558:	4865      	ldr	r0, [pc, #404]	@ (80056f0 <CreateMessage+0x3f4>)
 800555a:	9202      	str	r2, [sp, #8]
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	4b68      	ldr	r3, [pc, #416]	@ (8005700 <CreateMessage+0x404>)
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	002b      	movs	r3, r5
 8005564:	0022      	movs	r2, r4
 8005566:	f01f ff41 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 800556a:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <CreateMessage+0x3f4>)
 800556c:	0018      	movs	r0, r3
 800556e:	f7fa fdfd 	bl	800016c <strlen>
 8005572:	0003      	movs	r3, r0
 8005574:	b299      	uxth	r1, r3
 8005576:	220e      	movs	r2, #14
 8005578:	18bb      	adds	r3, r7, r2
 800557a:	18ba      	adds	r2, r7, r2
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	188a      	adds	r2, r1, r2
 8005580:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005582:	1dbb      	adds	r3, r7, #6
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d019      	beq.n	80055be <CreateMessage+0x2c2>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800558a:	4b59      	ldr	r3, [pc, #356]	@ (80056f0 <CreateMessage+0x3f4>)
 800558c:	0018      	movs	r0, r3
 800558e:	f7fa fded 	bl	800016c <strlen>
 8005592:	0003      	movs	r3, r0
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b56      	ldr	r3, [pc, #344]	@ (80056f0 <CreateMessage+0x3f4>)
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f7ff fcaa 	bl	8004ef4 <ESP_Send>
 80055a0:	0003      	movs	r3, r0
 80055a2:	001a      	movs	r2, r3
 80055a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005714 <CreateMessage+0x418>)
 80055a6:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80055a8:	4b5b      	ldr	r3, [pc, #364]	@ (8005718 <CreateMessage+0x41c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	001a      	movs	r2, r3
 80055ae:	4b59      	ldr	r3, [pc, #356]	@ (8005714 <CreateMessage+0x418>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	4013      	ands	r3, r2
 80055b4:	1e5a      	subs	r2, r3, #1
 80055b6:	4193      	sbcs	r3, r2
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b57      	ldr	r3, [pc, #348]	@ (8005718 <CreateMessage+0x41c>)
 80055bc:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 80055be:	4b4e      	ldr	r3, [pc, #312]	@ (80056f8 <CreateMessage+0x3fc>)
 80055c0:	485e      	ldr	r0, [pc, #376]	@ (800573c <CreateMessage+0x440>)
 80055c2:	220c      	movs	r2, #12
 80055c4:	0019      	movs	r1, r3
 80055c6:	f006 f87f 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 80055ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005740 <CreateMessage+0x444>)
 80055cc:	4959      	ldr	r1, [pc, #356]	@ (8005734 <CreateMessage+0x438>)
 80055ce:	4b4a      	ldr	r3, [pc, #296]	@ (80056f8 <CreateMessage+0x3fc>)
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7ff fe37 	bl	8005244 <isKeyValid>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d043      	beq.n	8005662 <CreateMessage+0x366>
      uint8ArrayToString(Buffer, keybuffer);
 80055da:	4a47      	ldr	r2, [pc, #284]	@ (80056f8 <CreateMessage+0x3fc>)
 80055dc:	4b48      	ldr	r3, [pc, #288]	@ (8005700 <CreateMessage+0x404>)
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff fe67 	bl	80052b4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperaturemax);
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperaturemax);
 80055e6:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <CreateMessage+0x408>)
 80055e8:	689c      	ldr	r4, [r3, #8]
 80055ea:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <CreateMessage+0x40c>)
 80055ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ee:	1c18      	adds	r0, r3, #0
 80055f0:	f7fe f950 	bl	8003894 <__aeabi_f2d>
 80055f4:	0002      	movs	r2, r0
 80055f6:	000b      	movs	r3, r1
 80055f8:	4d3b      	ldr	r5, [pc, #236]	@ (80056e8 <CreateMessage+0x3ec>)
 80055fa:	4952      	ldr	r1, [pc, #328]	@ (8005744 <CreateMessage+0x448>)
 80055fc:	483c      	ldr	r0, [pc, #240]	@ (80056f0 <CreateMessage+0x3f4>)
 80055fe:	9202      	str	r2, [sp, #8]
 8005600:	9303      	str	r3, [sp, #12]
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <CreateMessage+0x404>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	002b      	movs	r3, r5
 8005608:	0022      	movs	r2, r4
 800560a:	f01f feef 	bl	80253ec <siprintf>
  #endif
      index += strlen(message);
 800560e:	4b38      	ldr	r3, [pc, #224]	@ (80056f0 <CreateMessage+0x3f4>)
 8005610:	0018      	movs	r0, r3
 8005612:	f7fa fdab 	bl	800016c <strlen>
 8005616:	0003      	movs	r3, r0
 8005618:	b299      	uxth	r1, r3
 800561a:	220e      	movs	r2, #14
 800561c:	18bb      	adds	r3, r7, r2
 800561e:	18ba      	adds	r2, r7, r2
 8005620:	8812      	ldrh	r2, [r2, #0]
 8005622:	188a      	adds	r2, r1, r2
 8005624:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005626:	1dbb      	adds	r3, r7, #6
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d019      	beq.n	8005662 <CreateMessage+0x366>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800562e:	4b30      	ldr	r3, [pc, #192]	@ (80056f0 <CreateMessage+0x3f4>)
 8005630:	0018      	movs	r0, r3
 8005632:	f7fa fd9b 	bl	800016c <strlen>
 8005636:	0003      	movs	r3, r0
 8005638:	b29a      	uxth	r2, r3
 800563a:	4b2d      	ldr	r3, [pc, #180]	@ (80056f0 <CreateMessage+0x3f4>)
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fc58 	bl	8004ef4 <ESP_Send>
 8005644:	0003      	movs	r3, r0
 8005646:	001a      	movs	r2, r3
 8005648:	4b32      	ldr	r3, [pc, #200]	@ (8005714 <CreateMessage+0x418>)
 800564a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800564c:	4b32      	ldr	r3, [pc, #200]	@ (8005718 <CreateMessage+0x41c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	001a      	movs	r2, r3
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <CreateMessage+0x418>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4013      	ands	r3, r2
 8005658:	1e5a      	subs	r2, r3, #1
 800565a:	4193      	sbcs	r3, r2
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <CreateMessage+0x41c>)
 8005660:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 8005662:	4b25      	ldr	r3, [pc, #148]	@ (80056f8 <CreateMessage+0x3fc>)
 8005664:	4838      	ldr	r0, [pc, #224]	@ (8005748 <CreateMessage+0x44c>)
 8005666:	220c      	movs	r2, #12
 8005668:	0019      	movs	r1, r3
 800566a:	f006 f82d 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800566e:	4a22      	ldr	r2, [pc, #136]	@ (80056f8 <CreateMessage+0x3fc>)
 8005670:	4b23      	ldr	r3, [pc, #140]	@ (8005700 <CreateMessage+0x404>)
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f7ff fe1d 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
 800567a:	4b22      	ldr	r3, [pc, #136]	@ (8005704 <CreateMessage+0x408>)
 800567c:	689c      	ldr	r4, [r3, #8]
 800567e:	4b22      	ldr	r3, [pc, #136]	@ (8005708 <CreateMessage+0x40c>)
 8005680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005682:	1c18      	adds	r0, r3, #0
 8005684:	f7fe f906 	bl	8003894 <__aeabi_f2d>
 8005688:	0002      	movs	r2, r0
 800568a:	000b      	movs	r3, r1
 800568c:	4d16      	ldr	r5, [pc, #88]	@ (80056e8 <CreateMessage+0x3ec>)
 800568e:	492f      	ldr	r1, [pc, #188]	@ (800574c <CreateMessage+0x450>)
 8005690:	4817      	ldr	r0, [pc, #92]	@ (80056f0 <CreateMessage+0x3f4>)
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9303      	str	r3, [sp, #12]
 8005696:	4b1a      	ldr	r3, [pc, #104]	@ (8005700 <CreateMessage+0x404>)
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	002b      	movs	r3, r5
 800569c:	0022      	movs	r2, r4
 800569e:	f01f fea5 	bl	80253ec <siprintf>
#endif
  index += strlen(message);
 80056a2:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <CreateMessage+0x3f4>)
 80056a4:	0018      	movs	r0, r3
 80056a6:	f7fa fd61 	bl	800016c <strlen>
 80056aa:	0003      	movs	r3, r0
 80056ac:	b299      	uxth	r1, r3
 80056ae:	220e      	movs	r2, #14
 80056b0:	18bb      	adds	r3, r7, r2
 80056b2:	18ba      	adds	r2, r7, r2
 80056b4:	8812      	ldrh	r2, [r2, #0]
 80056b6:	188a      	adds	r2, r1, r2
 80056b8:	801a      	strh	r2, [r3, #0]
  if (send) {
 80056ba:	1dbb      	adds	r3, r7, #6
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d04e      	beq.n	8005760 <CreateMessage+0x464>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <CreateMessage+0x3f4>)
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7fa fd51 	bl	800016c <strlen>
 80056ca:	0003      	movs	r3, r0
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <CreateMessage+0x3f4>)
 80056d0:	0011      	movs	r1, r2
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff fc0e 	bl	8004ef4 <ESP_Send>
 80056d8:	0003      	movs	r3, r0
 80056da:	001a      	movs	r2, r3
 80056dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005714 <CreateMessage+0x418>)
 80056de:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80056e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <CreateMessage+0x41c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	001a      	movs	r2, r3
 80056e6:	e033      	b.n	8005750 <CreateMessage+0x454>
 80056e8:	20000734 	.word	0x20000734
 80056ec:	0802d714 	.word	0x0802d714
 80056f0:	200005cc 	.word	0x200005cc
 80056f4:	08029f60 	.word	0x08029f60
 80056f8:	20000754 	.word	0x20000754
 80056fc:	0808000c 	.word	0x0808000c
 8005700:	20000760 	.word	0x20000760
 8005704:	200005ac 	.word	0x200005ac
 8005708:	2000067c 	.word	0x2000067c
 800570c:	08029f64 	.word	0x08029f64
 8005710:	200005cd 	.word	0x200005cd
 8005714:	20000779 	.word	0x20000779
 8005718:	2000002d 	.word	0x2000002d
 800571c:	08080018 	.word	0x08080018
 8005720:	08029fb8 	.word	0x08029fb8
 8005724:	08080030 	.word	0x08080030
 8005728:	0802a010 	.word	0x0802a010
 800572c:	0808003c 	.word	0x0808003c
 8005730:	0802a064 	.word	0x0802a064
 8005734:	0802a068 	.word	0x0802a068
 8005738:	0802a070 	.word	0x0802a070
 800573c:	080800e0 	.word	0x080800e0
 8005740:	0802a0cc 	.word	0x0802a0cc
 8005744:	0802a0d8 	.word	0x0802a0d8
 8005748:	08080048 	.word	0x08080048
 800574c:	0802a134 	.word	0x0802a134
 8005750:	4be8      	ldr	r3, [pc, #928]	@ (8005af4 <CreateMessage+0x7f8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4013      	ands	r3, r2
 8005756:	1e5a      	subs	r2, r3, #1
 8005758:	4193      	sbcs	r3, r2
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4be6      	ldr	r3, [pc, #920]	@ (8005af8 <CreateMessage+0x7fc>)
 800575e:	701a      	strb	r2, [r3, #0]
  }

  if(!onBeurs){
 8005760:	1dfb      	adds	r3, r7, #7
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	4053      	eors	r3, r2
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d100      	bne.n	8005770 <CreateMessage+0x474>
 800576e:	e2bd      	b.n	8005cec <CreateMessage+0x9f0>
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005770:	4be2      	ldr	r3, [pc, #904]	@ (8005afc <CreateMessage+0x800>)
 8005772:	48e3      	ldr	r0, [pc, #908]	@ (8005b00 <CreateMessage+0x804>)
 8005774:	220c      	movs	r2, #12
 8005776:	0019      	movs	r1, r3
 8005778:	f005 ffa6 	bl	800b6c8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 800577c:	4adf      	ldr	r2, [pc, #892]	@ (8005afc <CreateMessage+0x800>)
 800577e:	4be1      	ldr	r3, [pc, #900]	@ (8005b04 <CreateMessage+0x808>)
 8005780:	0011      	movs	r1, r2
 8005782:	0018      	movs	r0, r3
 8005784:	f7ff fd96 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8005788:	4bdf      	ldr	r3, [pc, #892]	@ (8005b08 <CreateMessage+0x80c>)
 800578a:	689c      	ldr	r4, [r3, #8]
 800578c:	4bdf      	ldr	r3, [pc, #892]	@ (8005b0c <CreateMessage+0x810>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1c18      	adds	r0, r3, #0
 8005792:	f7fe f87f 	bl	8003894 <__aeabi_f2d>
 8005796:	0002      	movs	r2, r0
 8005798:	000b      	movs	r3, r1
 800579a:	4ddd      	ldr	r5, [pc, #884]	@ (8005b10 <CreateMessage+0x814>)
 800579c:	49dd      	ldr	r1, [pc, #884]	@ (8005b14 <CreateMessage+0x818>)
 800579e:	48de      	ldr	r0, [pc, #888]	@ (8005b18 <CreateMessage+0x81c>)
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9303      	str	r3, [sp, #12]
 80057a4:	4bd7      	ldr	r3, [pc, #860]	@ (8005b04 <CreateMessage+0x808>)
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	002b      	movs	r3, r5
 80057aa:	0022      	movs	r2, r4
 80057ac:	f01f fe1e 	bl	80253ec <siprintf>
#endif
    index += strlen(message);
 80057b0:	4bd9      	ldr	r3, [pc, #868]	@ (8005b18 <CreateMessage+0x81c>)
 80057b2:	0018      	movs	r0, r3
 80057b4:	f7fa fcda 	bl	800016c <strlen>
 80057b8:	0003      	movs	r3, r0
 80057ba:	b299      	uxth	r1, r3
 80057bc:	220e      	movs	r2, #14
 80057be:	18bb      	adds	r3, r7, r2
 80057c0:	18ba      	adds	r2, r7, r2
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	188a      	adds	r2, r1, r2
 80057c6:	801a      	strh	r2, [r3, #0]
    if (send) {
 80057c8:	1dbb      	adds	r3, r7, #6
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d019      	beq.n	8005804 <CreateMessage+0x508>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80057d0:	4bd1      	ldr	r3, [pc, #836]	@ (8005b18 <CreateMessage+0x81c>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7fa fcca 	bl	800016c <strlen>
 80057d8:	0003      	movs	r3, r0
 80057da:	b29a      	uxth	r2, r3
 80057dc:	4bce      	ldr	r3, [pc, #824]	@ (8005b18 <CreateMessage+0x81c>)
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7ff fb87 	bl	8004ef4 <ESP_Send>
 80057e6:	0003      	movs	r3, r0
 80057e8:	001a      	movs	r2, r3
 80057ea:	4bc2      	ldr	r3, [pc, #776]	@ (8005af4 <CreateMessage+0x7f8>)
 80057ec:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80057ee:	4bc2      	ldr	r3, [pc, #776]	@ (8005af8 <CreateMessage+0x7fc>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	001a      	movs	r2, r3
 80057f4:	4bbf      	ldr	r3, [pc, #764]	@ (8005af4 <CreateMessage+0x7f8>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	4013      	ands	r3, r2
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	4193      	sbcs	r3, r2
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4bbd      	ldr	r3, [pc, #756]	@ (8005af8 <CreateMessage+0x7fc>)
 8005802:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 8005804:	4bc5      	ldr	r3, [pc, #788]	@ (8005b1c <CreateMessage+0x820>)
 8005806:	791b      	ldrb	r3, [r3, #4]
 8005808:	2b35      	cmp	r3, #53	@ 0x35
 800580a:	d147      	bne.n	800589c <CreateMessage+0x5a0>
 800580c:	f003 fd76 	bl	80092fc <Check_USB_PowerOn>
 8005810:	1e03      	subs	r3, r0, #0
 8005812:	d043      	beq.n	800589c <CreateMessage+0x5a0>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 8005814:	4bb9      	ldr	r3, [pc, #740]	@ (8005afc <CreateMessage+0x800>)
 8005816:	48c2      	ldr	r0, [pc, #776]	@ (8005b20 <CreateMessage+0x824>)
 8005818:	220c      	movs	r2, #12
 800581a:	0019      	movs	r1, r3
 800581c:	f005 ff54 	bl	800b6c8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005820:	4ab6      	ldr	r2, [pc, #728]	@ (8005afc <CreateMessage+0x800>)
 8005822:	4bb8      	ldr	r3, [pc, #736]	@ (8005b04 <CreateMessage+0x808>)
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f7ff fd44 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
 800582c:	4bb6      	ldr	r3, [pc, #728]	@ (8005b08 <CreateMessage+0x80c>)
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	4bbc      	ldr	r3, [pc, #752]	@ (8005b24 <CreateMessage+0x828>)
 8005832:	215e      	movs	r1, #94	@ 0x5e
 8005834:	5a5b      	ldrh	r3, [r3, r1]
 8005836:	4cb6      	ldr	r4, [pc, #728]	@ (8005b10 <CreateMessage+0x814>)
 8005838:	49bb      	ldr	r1, [pc, #748]	@ (8005b28 <CreateMessage+0x82c>)
 800583a:	48b7      	ldr	r0, [pc, #732]	@ (8005b18 <CreateMessage+0x81c>)
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	4bb1      	ldr	r3, [pc, #708]	@ (8005b04 <CreateMessage+0x808>)
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	0023      	movs	r3, r4
 8005844:	f01f fdd2 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 8005848:	4bb3      	ldr	r3, [pc, #716]	@ (8005b18 <CreateMessage+0x81c>)
 800584a:	0018      	movs	r0, r3
 800584c:	f7fa fc8e 	bl	800016c <strlen>
 8005850:	0003      	movs	r3, r0
 8005852:	b299      	uxth	r1, r3
 8005854:	220e      	movs	r2, #14
 8005856:	18bb      	adds	r3, r7, r2
 8005858:	18ba      	adds	r2, r7, r2
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	188a      	adds	r2, r1, r2
 800585e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005860:	1dbb      	adds	r3, r7, #6
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d019      	beq.n	800589c <CreateMessage+0x5a0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005868:	4bab      	ldr	r3, [pc, #684]	@ (8005b18 <CreateMessage+0x81c>)
 800586a:	0018      	movs	r0, r3
 800586c:	f7fa fc7e 	bl	800016c <strlen>
 8005870:	0003      	movs	r3, r0
 8005872:	b29a      	uxth	r2, r3
 8005874:	4ba8      	ldr	r3, [pc, #672]	@ (8005b18 <CreateMessage+0x81c>)
 8005876:	0011      	movs	r1, r2
 8005878:	0018      	movs	r0, r3
 800587a:	f7ff fb3b 	bl	8004ef4 <ESP_Send>
 800587e:	0003      	movs	r3, r0
 8005880:	001a      	movs	r2, r3
 8005882:	4b9c      	ldr	r3, [pc, #624]	@ (8005af4 <CreateMessage+0x7f8>)
 8005884:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005886:	4b9c      	ldr	r3, [pc, #624]	@ (8005af8 <CreateMessage+0x7fc>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	001a      	movs	r2, r3
 800588c:	4b99      	ldr	r3, [pc, #612]	@ (8005af4 <CreateMessage+0x7f8>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4013      	ands	r3, r2
 8005892:	1e5a      	subs	r2, r3, #1
 8005894:	4193      	sbcs	r3, r2
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b97      	ldr	r3, [pc, #604]	@ (8005af8 <CreateMessage+0x7fc>)
 800589a:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 800589c:	4b97      	ldr	r3, [pc, #604]	@ (8005afc <CreateMessage+0x800>)
 800589e:	48a3      	ldr	r0, [pc, #652]	@ (8005b2c <CreateMessage+0x830>)
 80058a0:	220c      	movs	r2, #12
 80058a2:	0019      	movs	r1, r3
 80058a4:	f005 ff10 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 80058a8:	4b9c      	ldr	r3, [pc, #624]	@ (8005b1c <CreateMessage+0x820>)
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	2b34      	cmp	r3, #52	@ 0x34
 80058ae:	d003      	beq.n	80058b8 <CreateMessage+0x5bc>
 80058b0:	4b9a      	ldr	r3, [pc, #616]	@ (8005b1c <CreateMessage+0x820>)
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b35      	cmp	r3, #53	@ 0x35
 80058b6:	d14b      	bne.n	8005950 <CreateMessage+0x654>
 80058b8:	4a9d      	ldr	r2, [pc, #628]	@ (8005b30 <CreateMessage+0x834>)
 80058ba:	499e      	ldr	r1, [pc, #632]	@ (8005b34 <CreateMessage+0x838>)
 80058bc:	4b8f      	ldr	r3, [pc, #572]	@ (8005afc <CreateMessage+0x800>)
 80058be:	0018      	movs	r0, r3
 80058c0:	f7ff fcc0 	bl	8005244 <isKeyValid>
 80058c4:	1e03      	subs	r3, r0, #0
 80058c6:	d043      	beq.n	8005950 <CreateMessage+0x654>
      uint8ArrayToString(Buffer, keybuffer);
 80058c8:	4a8c      	ldr	r2, [pc, #560]	@ (8005afc <CreateMessage+0x800>)
 80058ca:	4b8e      	ldr	r3, [pc, #568]	@ (8005b04 <CreateMessage+0x808>)
 80058cc:	0011      	movs	r1, r2
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7ff fcf0 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_temperature);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
 80058d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005b08 <CreateMessage+0x80c>)
 80058d6:	689c      	ldr	r4, [r3, #8]
 80058d8:	4b92      	ldr	r3, [pc, #584]	@ (8005b24 <CreateMessage+0x828>)
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	1c18      	adds	r0, r3, #0
 80058de:	f7fd ffd9 	bl	8003894 <__aeabi_f2d>
 80058e2:	0002      	movs	r2, r0
 80058e4:	000b      	movs	r3, r1
 80058e6:	4d8a      	ldr	r5, [pc, #552]	@ (8005b10 <CreateMessage+0x814>)
 80058e8:	4993      	ldr	r1, [pc, #588]	@ (8005b38 <CreateMessage+0x83c>)
 80058ea:	488b      	ldr	r0, [pc, #556]	@ (8005b18 <CreateMessage+0x81c>)
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	4b84      	ldr	r3, [pc, #528]	@ (8005b04 <CreateMessage+0x808>)
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	002b      	movs	r3, r5
 80058f6:	0022      	movs	r2, r4
 80058f8:	f01f fd78 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 80058fc:	4b86      	ldr	r3, [pc, #536]	@ (8005b18 <CreateMessage+0x81c>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fa fc34 	bl	800016c <strlen>
 8005904:	0003      	movs	r3, r0
 8005906:	b299      	uxth	r1, r3
 8005908:	220e      	movs	r2, #14
 800590a:	18bb      	adds	r3, r7, r2
 800590c:	18ba      	adds	r2, r7, r2
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	188a      	adds	r2, r1, r2
 8005912:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005914:	1dbb      	adds	r3, r7, #6
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d019      	beq.n	8005950 <CreateMessage+0x654>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800591c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b18 <CreateMessage+0x81c>)
 800591e:	0018      	movs	r0, r3
 8005920:	f7fa fc24 	bl	800016c <strlen>
 8005924:	0003      	movs	r3, r0
 8005926:	b29a      	uxth	r2, r3
 8005928:	4b7b      	ldr	r3, [pc, #492]	@ (8005b18 <CreateMessage+0x81c>)
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f7ff fae1 	bl	8004ef4 <ESP_Send>
 8005932:	0003      	movs	r3, r0
 8005934:	001a      	movs	r2, r3
 8005936:	4b6f      	ldr	r3, [pc, #444]	@ (8005af4 <CreateMessage+0x7f8>)
 8005938:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800593a:	4b6f      	ldr	r3, [pc, #444]	@ (8005af8 <CreateMessage+0x7fc>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	001a      	movs	r2, r3
 8005940:	4b6c      	ldr	r3, [pc, #432]	@ (8005af4 <CreateMessage+0x7f8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4013      	ands	r3, r2
 8005946:	1e5a      	subs	r2, r3, #1
 8005948:	4193      	sbcs	r3, r2
 800594a:	b2da      	uxtb	r2, r3
 800594c:	4b6a      	ldr	r3, [pc, #424]	@ (8005af8 <CreateMessage+0x7fc>)
 800594e:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005950:	4b6a      	ldr	r3, [pc, #424]	@ (8005afc <CreateMessage+0x800>)
 8005952:	487a      	ldr	r0, [pc, #488]	@ (8005b3c <CreateMessage+0x840>)
 8005954:	220c      	movs	r2, #12
 8005956:	0019      	movs	r1, r3
 8005958:	f005 feb6 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 800595c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b1c <CreateMessage+0x820>)
 800595e:	791b      	ldrb	r3, [r3, #4]
 8005960:	2b34      	cmp	r3, #52	@ 0x34
 8005962:	d003      	beq.n	800596c <CreateMessage+0x670>
 8005964:	4b6d      	ldr	r3, [pc, #436]	@ (8005b1c <CreateMessage+0x820>)
 8005966:	791b      	ldrb	r3, [r3, #4]
 8005968:	2b35      	cmp	r3, #53	@ 0x35
 800596a:	d14b      	bne.n	8005a04 <CreateMessage+0x708>
 800596c:	4a74      	ldr	r2, [pc, #464]	@ (8005b40 <CreateMessage+0x844>)
 800596e:	4971      	ldr	r1, [pc, #452]	@ (8005b34 <CreateMessage+0x838>)
 8005970:	4b62      	ldr	r3, [pc, #392]	@ (8005afc <CreateMessage+0x800>)
 8005972:	0018      	movs	r0, r3
 8005974:	f7ff fc66 	bl	8005244 <isKeyValid>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d043      	beq.n	8005a04 <CreateMessage+0x708>
      uint8ArrayToString(Buffer, keybuffer);
 800597c:	4a5f      	ldr	r2, [pc, #380]	@ (8005afc <CreateMessage+0x800>)
 800597e:	4b61      	ldr	r3, [pc, #388]	@ (8005b04 <CreateMessage+0x808>)
 8005980:	0011      	movs	r1, r2
 8005982:	0018      	movs	r0, r3
 8005984:	f7ff fc96 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.sen55_humidity);
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
 8005988:	4b5f      	ldr	r3, [pc, #380]	@ (8005b08 <CreateMessage+0x80c>)
 800598a:	689c      	ldr	r4, [r3, #8]
 800598c:	4b65      	ldr	r3, [pc, #404]	@ (8005b24 <CreateMessage+0x828>)
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	1c18      	adds	r0, r3, #0
 8005992:	f7fd ff7f 	bl	8003894 <__aeabi_f2d>
 8005996:	0002      	movs	r2, r0
 8005998:	000b      	movs	r3, r1
 800599a:	4d5d      	ldr	r5, [pc, #372]	@ (8005b10 <CreateMessage+0x814>)
 800599c:	4969      	ldr	r1, [pc, #420]	@ (8005b44 <CreateMessage+0x848>)
 800599e:	485e      	ldr	r0, [pc, #376]	@ (8005b18 <CreateMessage+0x81c>)
 80059a0:	9202      	str	r2, [sp, #8]
 80059a2:	9303      	str	r3, [sp, #12]
 80059a4:	4b57      	ldr	r3, [pc, #348]	@ (8005b04 <CreateMessage+0x808>)
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	002b      	movs	r3, r5
 80059aa:	0022      	movs	r2, r4
 80059ac:	f01f fd1e 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 80059b0:	4b59      	ldr	r3, [pc, #356]	@ (8005b18 <CreateMessage+0x81c>)
 80059b2:	0018      	movs	r0, r3
 80059b4:	f7fa fbda 	bl	800016c <strlen>
 80059b8:	0003      	movs	r3, r0
 80059ba:	b299      	uxth	r1, r3
 80059bc:	220e      	movs	r2, #14
 80059be:	18bb      	adds	r3, r7, r2
 80059c0:	18ba      	adds	r2, r7, r2
 80059c2:	8812      	ldrh	r2, [r2, #0]
 80059c4:	188a      	adds	r2, r1, r2
 80059c6:	801a      	strh	r2, [r3, #0]
      if (send) {
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <CreateMessage+0x708>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80059d0:	4b51      	ldr	r3, [pc, #324]	@ (8005b18 <CreateMessage+0x81c>)
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fa fbca 	bl	800016c <strlen>
 80059d8:	0003      	movs	r3, r0
 80059da:	b29a      	uxth	r2, r3
 80059dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005b18 <CreateMessage+0x81c>)
 80059de:	0011      	movs	r1, r2
 80059e0:	0018      	movs	r0, r3
 80059e2:	f7ff fa87 	bl	8004ef4 <ESP_Send>
 80059e6:	0003      	movs	r3, r0
 80059e8:	001a      	movs	r2, r3
 80059ea:	4b42      	ldr	r3, [pc, #264]	@ (8005af4 <CreateMessage+0x7f8>)
 80059ec:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80059ee:	4b42      	ldr	r3, [pc, #264]	@ (8005af8 <CreateMessage+0x7fc>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	001a      	movs	r2, r3
 80059f4:	4b3f      	ldr	r3, [pc, #252]	@ (8005af4 <CreateMessage+0x7f8>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	1e5a      	subs	r2, r3, #1
 80059fc:	4193      	sbcs	r3, r2
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	4b3d      	ldr	r3, [pc, #244]	@ (8005af8 <CreateMessage+0x7fc>)
 8005a02:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005a04:	f007 ffca 	bl	800d99c <sen5x_Get_sen5x_enable_state>
 8005a08:	1e03      	subs	r3, r0, #0
 8005a0a:	d100      	bne.n	8005a0e <CreateMessage+0x712>
 8005a0c:	e16e      	b.n	8005cec <CreateMessage+0x9f0>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <CreateMessage+0x800>)
 8005a10:	484d      	ldr	r0, [pc, #308]	@ (8005b48 <CreateMessage+0x84c>)
 8005a12:	220c      	movs	r2, #12
 8005a14:	0019      	movs	r1, r3
 8005a16:	f005 fe57 	bl	800b6c8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005a1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005b4c <CreateMessage+0x850>)
 8005a1c:	494c      	ldr	r1, [pc, #304]	@ (8005b50 <CreateMessage+0x854>)
 8005a1e:	4b37      	ldr	r3, [pc, #220]	@ (8005afc <CreateMessage+0x800>)
 8005a20:	0018      	movs	r0, r3
 8005a22:	f7ff fc0f 	bl	8005244 <isKeyValid>
 8005a26:	1e03      	subs	r3, r0, #0
 8005a28:	d043      	beq.n	8005ab2 <CreateMessage+0x7b6>
        uint8ArrayToString(Buffer, keybuffer);
 8005a2a:	4a34      	ldr	r2, [pc, #208]	@ (8005afc <CreateMessage+0x800>)
 8005a2c:	4b35      	ldr	r3, [pc, #212]	@ (8005b04 <CreateMessage+0x808>)
 8005a2e:	0011      	movs	r1, r2
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7ff fc3f 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
 8005a36:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <CreateMessage+0x80c>)
 8005a38:	689c      	ldr	r4, [r3, #8]
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b24 <CreateMessage+0x828>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	1c18      	adds	r0, r3, #0
 8005a40:	f7fd ff28 	bl	8003894 <__aeabi_f2d>
 8005a44:	0002      	movs	r2, r0
 8005a46:	000b      	movs	r3, r1
 8005a48:	4d31      	ldr	r5, [pc, #196]	@ (8005b10 <CreateMessage+0x814>)
 8005a4a:	4942      	ldr	r1, [pc, #264]	@ (8005b54 <CreateMessage+0x858>)
 8005a4c:	4832      	ldr	r0, [pc, #200]	@ (8005b18 <CreateMessage+0x81c>)
 8005a4e:	9202      	str	r2, [sp, #8]
 8005a50:	9303      	str	r3, [sp, #12]
 8005a52:	4b2c      	ldr	r3, [pc, #176]	@ (8005b04 <CreateMessage+0x808>)
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	002b      	movs	r3, r5
 8005a58:	0022      	movs	r2, r4
 8005a5a:	f01f fcc7 	bl	80253ec <siprintf>
#endif
        index += strlen(message);
 8005a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005b18 <CreateMessage+0x81c>)
 8005a60:	0018      	movs	r0, r3
 8005a62:	f7fa fb83 	bl	800016c <strlen>
 8005a66:	0003      	movs	r3, r0
 8005a68:	b299      	uxth	r1, r3
 8005a6a:	220e      	movs	r2, #14
 8005a6c:	18bb      	adds	r3, r7, r2
 8005a6e:	18ba      	adds	r2, r7, r2
 8005a70:	8812      	ldrh	r2, [r2, #0]
 8005a72:	188a      	adds	r2, r1, r2
 8005a74:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005a76:	1dbb      	adds	r3, r7, #6
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d019      	beq.n	8005ab2 <CreateMessage+0x7b6>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005a7e:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <CreateMessage+0x81c>)
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7fa fb73 	bl	800016c <strlen>
 8005a86:	0003      	movs	r3, r0
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	4b23      	ldr	r3, [pc, #140]	@ (8005b18 <CreateMessage+0x81c>)
 8005a8c:	0011      	movs	r1, r2
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f7ff fa30 	bl	8004ef4 <ESP_Send>
 8005a94:	0003      	movs	r3, r0
 8005a96:	001a      	movs	r2, r3
 8005a98:	4b16      	ldr	r3, [pc, #88]	@ (8005af4 <CreateMessage+0x7f8>)
 8005a9a:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005a9c:	4b16      	ldr	r3, [pc, #88]	@ (8005af8 <CreateMessage+0x7fc>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <CreateMessage+0x7f8>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	1e5a      	subs	r2, r3, #1
 8005aaa:	4193      	sbcs	r3, r2
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <CreateMessage+0x7fc>)
 8005ab0:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <CreateMessage+0x800>)
 8005ab4:	4828      	ldr	r0, [pc, #160]	@ (8005b58 <CreateMessage+0x85c>)
 8005ab6:	220c      	movs	r2, #12
 8005ab8:	0019      	movs	r1, r3
 8005aba:	f005 fe05 	bl	800b6c8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005abe:	4a0f      	ldr	r2, [pc, #60]	@ (8005afc <CreateMessage+0x800>)
 8005ac0:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <CreateMessage+0x808>)
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f7ff fbf5 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
 8005aca:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <CreateMessage+0x80c>)
 8005acc:	689c      	ldr	r4, [r3, #8]
 8005ace:	4b15      	ldr	r3, [pc, #84]	@ (8005b24 <CreateMessage+0x828>)
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	1c18      	adds	r0, r3, #0
 8005ad4:	f7fd fede 	bl	8003894 <__aeabi_f2d>
 8005ad8:	0002      	movs	r2, r0
 8005ada:	000b      	movs	r3, r1
 8005adc:	4d0c      	ldr	r5, [pc, #48]	@ (8005b10 <CreateMessage+0x814>)
 8005ade:	491f      	ldr	r1, [pc, #124]	@ (8005b5c <CreateMessage+0x860>)
 8005ae0:	480d      	ldr	r0, [pc, #52]	@ (8005b18 <CreateMessage+0x81c>)
 8005ae2:	9202      	str	r2, [sp, #8]
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <CreateMessage+0x808>)
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	002b      	movs	r3, r5
 8005aec:	0022      	movs	r2, r4
 8005aee:	f01f fc7d 	bl	80253ec <siprintf>
 8005af2:	e035      	b.n	8005b60 <CreateMessage+0x864>
 8005af4:	20000779 	.word	0x20000779
 8005af8:	2000002d 	.word	0x2000002d
 8005afc:	20000754 	.word	0x20000754
 8005b00:	08080078 	.word	0x08080078
 8005b04:	20000760 	.word	0x20000760
 8005b08:	200005ac 	.word	0x200005ac
 8005b0c:	200005c8 	.word	0x200005c8
 8005b10:	20000734 	.word	0x20000734
 8005b14:	0802a190 	.word	0x0802a190
 8005b18:	200005cc 	.word	0x200005cc
 8005b1c:	20000ed4 	.word	0x20000ed4
 8005b20:	08080024 	.word	0x08080024
 8005b24:	2000067c 	.word	0x2000067c
 8005b28:	0802a1f0 	.word	0x0802a1f0
 8005b2c:	08080170 	.word	0x08080170
 8005b30:	0802a244 	.word	0x0802a244
 8005b34:	0802a250 	.word	0x0802a250
 8005b38:	0802a258 	.word	0x0802a258
 8005b3c:	0808017c 	.word	0x0808017c
 8005b40:	0802a2b4 	.word	0x0802a2b4
 8005b44:	0802a2c0 	.word	0x0802a2c0
 8005b48:	080800b0 	.word	0x080800b0
 8005b4c:	0802a320 	.word	0x0802a320
 8005b50:	0802a32c 	.word	0x0802a32c
 8005b54:	0802a330 	.word	0x0802a330
 8005b58:	08080054 	.word	0x08080054
 8005b5c:	0802a388 	.word	0x0802a388
#endif
      index += strlen(message);
 8005b60:	4beb      	ldr	r3, [pc, #940]	@ (8005f10 <CreateMessage+0xc14>)
 8005b62:	0018      	movs	r0, r3
 8005b64:	f7fa fb02 	bl	800016c <strlen>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b299      	uxth	r1, r3
 8005b6c:	220e      	movs	r2, #14
 8005b6e:	18bb      	adds	r3, r7, r2
 8005b70:	18ba      	adds	r2, r7, r2
 8005b72:	8812      	ldrh	r2, [r2, #0]
 8005b74:	188a      	adds	r2, r1, r2
 8005b76:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b78:	1dbb      	adds	r3, r7, #6
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d019      	beq.n	8005bb4 <CreateMessage+0x8b8>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b80:	4be3      	ldr	r3, [pc, #908]	@ (8005f10 <CreateMessage+0xc14>)
 8005b82:	0018      	movs	r0, r3
 8005b84:	f7fa faf2 	bl	800016c <strlen>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	4be0      	ldr	r3, [pc, #896]	@ (8005f10 <CreateMessage+0xc14>)
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff f9af 	bl	8004ef4 <ESP_Send>
 8005b96:	0003      	movs	r3, r0
 8005b98:	001a      	movs	r2, r3
 8005b9a:	4bde      	ldr	r3, [pc, #888]	@ (8005f14 <CreateMessage+0xc18>)
 8005b9c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b9e:	4bde      	ldr	r3, [pc, #888]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	001a      	movs	r2, r3
 8005ba4:	4bdb      	ldr	r3, [pc, #876]	@ (8005f14 <CreateMessage+0xc18>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	1e5a      	subs	r2, r3, #1
 8005bac:	4193      	sbcs	r3, r2
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	4bd9      	ldr	r3, [pc, #868]	@ (8005f18 <CreateMessage+0xc1c>)
 8005bb2:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005bb4:	4bd9      	ldr	r3, [pc, #868]	@ (8005f1c <CreateMessage+0xc20>)
 8005bb6:	48da      	ldr	r0, [pc, #872]	@ (8005f20 <CreateMessage+0xc24>)
 8005bb8:	220c      	movs	r2, #12
 8005bba:	0019      	movs	r1, r3
 8005bbc:	f005 fd84 	bl	800b6c8 <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005bc0:	4ad8      	ldr	r2, [pc, #864]	@ (8005f24 <CreateMessage+0xc28>)
 8005bc2:	49d9      	ldr	r1, [pc, #868]	@ (8005f28 <CreateMessage+0xc2c>)
 8005bc4:	4bd5      	ldr	r3, [pc, #852]	@ (8005f1c <CreateMessage+0xc20>)
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7ff fb3c 	bl	8005244 <isKeyValid>
 8005bcc:	1e03      	subs	r3, r0, #0
 8005bce:	d043      	beq.n	8005c58 <CreateMessage+0x95c>
        uint8ArrayToString(Buffer, keybuffer);
 8005bd0:	4ad2      	ldr	r2, [pc, #840]	@ (8005f1c <CreateMessage+0xc20>)
 8005bd2:	4bd6      	ldr	r3, [pc, #856]	@ (8005f2c <CreateMessage+0xc30>)
 8005bd4:	0011      	movs	r1, r2
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7ff fb6c 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
 8005bdc:	4bd4      	ldr	r3, [pc, #848]	@ (8005f30 <CreateMessage+0xc34>)
 8005bde:	689c      	ldr	r4, [r3, #8]
 8005be0:	4bd4      	ldr	r3, [pc, #848]	@ (8005f34 <CreateMessage+0xc38>)
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	1c18      	adds	r0, r3, #0
 8005be6:	f7fd fe55 	bl	8003894 <__aeabi_f2d>
 8005bea:	0002      	movs	r2, r0
 8005bec:	000b      	movs	r3, r1
 8005bee:	4dd2      	ldr	r5, [pc, #840]	@ (8005f38 <CreateMessage+0xc3c>)
 8005bf0:	49d2      	ldr	r1, [pc, #840]	@ (8005f3c <CreateMessage+0xc40>)
 8005bf2:	48c7      	ldr	r0, [pc, #796]	@ (8005f10 <CreateMessage+0xc14>)
 8005bf4:	9202      	str	r2, [sp, #8]
 8005bf6:	9303      	str	r3, [sp, #12]
 8005bf8:	4bcc      	ldr	r3, [pc, #816]	@ (8005f2c <CreateMessage+0xc30>)
 8005bfa:	9300      	str	r3, [sp, #0]
 8005bfc:	002b      	movs	r3, r5
 8005bfe:	0022      	movs	r2, r4
 8005c00:	f01f fbf4 	bl	80253ec <siprintf>
#endif
        index += strlen(message);
 8005c04:	4bc2      	ldr	r3, [pc, #776]	@ (8005f10 <CreateMessage+0xc14>)
 8005c06:	0018      	movs	r0, r3
 8005c08:	f7fa fab0 	bl	800016c <strlen>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	b299      	uxth	r1, r3
 8005c10:	220e      	movs	r2, #14
 8005c12:	18bb      	adds	r3, r7, r2
 8005c14:	18ba      	adds	r2, r7, r2
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	188a      	adds	r2, r1, r2
 8005c1a:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005c1c:	1dbb      	adds	r3, r7, #6
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <CreateMessage+0x95c>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005c24:	4bba      	ldr	r3, [pc, #744]	@ (8005f10 <CreateMessage+0xc14>)
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fa faa0 	bl	800016c <strlen>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	4bb7      	ldr	r3, [pc, #732]	@ (8005f10 <CreateMessage+0xc14>)
 8005c32:	0011      	movs	r1, r2
 8005c34:	0018      	movs	r0, r3
 8005c36:	f7ff f95d 	bl	8004ef4 <ESP_Send>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	001a      	movs	r2, r3
 8005c3e:	4bb5      	ldr	r3, [pc, #724]	@ (8005f14 <CreateMessage+0xc18>)
 8005c40:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005c42:	4bb5      	ldr	r3, [pc, #724]	@ (8005f18 <CreateMessage+0xc1c>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	001a      	movs	r2, r3
 8005c48:	4bb2      	ldr	r3, [pc, #712]	@ (8005f14 <CreateMessage+0xc18>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	4193      	sbcs	r3, r2
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	4bb0      	ldr	r3, [pc, #704]	@ (8005f18 <CreateMessage+0xc1c>)
 8005c56:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005c58:	4bb0      	ldr	r3, [pc, #704]	@ (8005f1c <CreateMessage+0xc20>)
 8005c5a:	48b9      	ldr	r0, [pc, #740]	@ (8005f40 <CreateMessage+0xc44>)
 8005c5c:	220c      	movs	r2, #12
 8005c5e:	0019      	movs	r1, r3
 8005c60:	f005 fd32 	bl	800b6c8 <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005c64:	4aad      	ldr	r2, [pc, #692]	@ (8005f1c <CreateMessage+0xc20>)
 8005c66:	4bb1      	ldr	r3, [pc, #708]	@ (8005f2c <CreateMessage+0xc30>)
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7ff fb22 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
 8005c70:	4baf      	ldr	r3, [pc, #700]	@ (8005f30 <CreateMessage+0xc34>)
 8005c72:	689c      	ldr	r4, [r3, #8]
 8005c74:	4baf      	ldr	r3, [pc, #700]	@ (8005f34 <CreateMessage+0xc38>)
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	1c18      	adds	r0, r3, #0
 8005c7a:	f7fd fe0b 	bl	8003894 <__aeabi_f2d>
 8005c7e:	0002      	movs	r2, r0
 8005c80:	000b      	movs	r3, r1
 8005c82:	4dad      	ldr	r5, [pc, #692]	@ (8005f38 <CreateMessage+0xc3c>)
 8005c84:	49af      	ldr	r1, [pc, #700]	@ (8005f44 <CreateMessage+0xc48>)
 8005c86:	48a2      	ldr	r0, [pc, #648]	@ (8005f10 <CreateMessage+0xc14>)
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8005f2c <CreateMessage+0xc30>)
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	002b      	movs	r3, r5
 8005c92:	0022      	movs	r2, r4
 8005c94:	f01f fbaa 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 8005c98:	4b9d      	ldr	r3, [pc, #628]	@ (8005f10 <CreateMessage+0xc14>)
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7fa fa66 	bl	800016c <strlen>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	b299      	uxth	r1, r3
 8005ca4:	220e      	movs	r2, #14
 8005ca6:	18bb      	adds	r3, r7, r2
 8005ca8:	18ba      	adds	r2, r7, r2
 8005caa:	8812      	ldrh	r2, [r2, #0]
 8005cac:	188a      	adds	r2, r1, r2
 8005cae:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cb0:	1dbb      	adds	r3, r7, #6
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <CreateMessage+0x9f0>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cb8:	4b95      	ldr	r3, [pc, #596]	@ (8005f10 <CreateMessage+0xc14>)
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fa fa56 	bl	800016c <strlen>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	4b92      	ldr	r3, [pc, #584]	@ (8005f10 <CreateMessage+0xc14>)
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7ff f913 	bl	8004ef4 <ESP_Send>
 8005cce:	0003      	movs	r3, r0
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	4b90      	ldr	r3, [pc, #576]	@ (8005f14 <CreateMessage+0xc18>)
 8005cd4:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005cd6:	4b90      	ldr	r3, [pc, #576]	@ (8005f18 <CreateMessage+0xc1c>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	001a      	movs	r2, r3
 8005cdc:	4b8d      	ldr	r3, [pc, #564]	@ (8005f14 <CreateMessage+0xc18>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	1e5a      	subs	r2, r3, #1
 8005ce4:	4193      	sbcs	r3, r2
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	4b8b      	ldr	r3, [pc, #556]	@ (8005f18 <CreateMessage+0xc1c>)
 8005cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsAHT20SensorPresent()) {
 8005cec:	f006 fe16 	bl	800c91c <IsAHT20SensorPresent>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d100      	bne.n	8005cf6 <CreateMessage+0x9fa>
 8005cf4:	e0a3      	b.n	8005e3e <CreateMessage+0xb42>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005cf6:	4b89      	ldr	r3, [pc, #548]	@ (8005f1c <CreateMessage+0xc20>)
 8005cf8:	4893      	ldr	r0, [pc, #588]	@ (8005f48 <CreateMessage+0xc4c>)
 8005cfa:	220c      	movs	r2, #12
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	f005 fce3 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005d02:	4a92      	ldr	r2, [pc, #584]	@ (8005f4c <CreateMessage+0xc50>)
 8005d04:	4992      	ldr	r1, [pc, #584]	@ (8005f50 <CreateMessage+0xc54>)
 8005d06:	4b85      	ldr	r3, [pc, #532]	@ (8005f1c <CreateMessage+0xc20>)
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff fa9b 	bl	8005244 <isKeyValid>
 8005d0e:	1e03      	subs	r3, r0, #0
 8005d10:	d043      	beq.n	8005d9a <CreateMessage+0xa9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005d12:	4a82      	ldr	r2, [pc, #520]	@ (8005f1c <CreateMessage+0xc20>)
 8005d14:	4b85      	ldr	r3, [pc, #532]	@ (8005f2c <CreateMessage+0xc30>)
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff facb 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperaturemax);
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperaturemax);
 8005d1e:	4b84      	ldr	r3, [pc, #528]	@ (8005f30 <CreateMessage+0xc34>)
 8005d20:	689c      	ldr	r4, [r3, #8]
 8005d22:	4b84      	ldr	r3, [pc, #528]	@ (8005f34 <CreateMessage+0xc38>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d26:	1c18      	adds	r0, r3, #0
 8005d28:	f7fd fdb4 	bl	8003894 <__aeabi_f2d>
 8005d2c:	0002      	movs	r2, r0
 8005d2e:	000b      	movs	r3, r1
 8005d30:	4d81      	ldr	r5, [pc, #516]	@ (8005f38 <CreateMessage+0xc3c>)
 8005d32:	4988      	ldr	r1, [pc, #544]	@ (8005f54 <CreateMessage+0xc58>)
 8005d34:	4876      	ldr	r0, [pc, #472]	@ (8005f10 <CreateMessage+0xc14>)
 8005d36:	9202      	str	r2, [sp, #8]
 8005d38:	9303      	str	r3, [sp, #12]
 8005d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8005f2c <CreateMessage+0xc30>)
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	002b      	movs	r3, r5
 8005d40:	0022      	movs	r2, r4
 8005d42:	f01f fb53 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 8005d46:	4b72      	ldr	r3, [pc, #456]	@ (8005f10 <CreateMessage+0xc14>)
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f7fa fa0f 	bl	800016c <strlen>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	b299      	uxth	r1, r3
 8005d52:	220e      	movs	r2, #14
 8005d54:	18bb      	adds	r3, r7, r2
 8005d56:	18ba      	adds	r2, r7, r2
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	188a      	adds	r2, r1, r2
 8005d5c:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005d5e:	1dbb      	adds	r3, r7, #6
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d019      	beq.n	8005d9a <CreateMessage+0xa9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005d66:	4b6a      	ldr	r3, [pc, #424]	@ (8005f10 <CreateMessage+0xc14>)
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7fa f9ff 	bl	800016c <strlen>
 8005d6e:	0003      	movs	r3, r0
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	4b67      	ldr	r3, [pc, #412]	@ (8005f10 <CreateMessage+0xc14>)
 8005d74:	0011      	movs	r1, r2
 8005d76:	0018      	movs	r0, r3
 8005d78:	f7ff f8bc 	bl	8004ef4 <ESP_Send>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	001a      	movs	r2, r3
 8005d80:	4b64      	ldr	r3, [pc, #400]	@ (8005f14 <CreateMessage+0xc18>)
 8005d82:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d84:	4b64      	ldr	r3, [pc, #400]	@ (8005f18 <CreateMessage+0xc1c>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	001a      	movs	r2, r3
 8005d8a:	4b62      	ldr	r3, [pc, #392]	@ (8005f14 <CreateMessage+0xc18>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	4193      	sbcs	r3, r2
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4b60      	ldr	r3, [pc, #384]	@ (8005f18 <CreateMessage+0xc1c>)
 8005d98:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005d9a:	4b60      	ldr	r3, [pc, #384]	@ (8005f1c <CreateMessage+0xc20>)
 8005d9c:	486e      	ldr	r0, [pc, #440]	@ (8005f58 <CreateMessage+0xc5c>)
 8005d9e:	220c      	movs	r2, #12
 8005da0:	0019      	movs	r1, r3
 8005da2:	f005 fc91 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005da6:	4a6d      	ldr	r2, [pc, #436]	@ (8005f5c <CreateMessage+0xc60>)
 8005da8:	4969      	ldr	r1, [pc, #420]	@ (8005f50 <CreateMessage+0xc54>)
 8005daa:	4b5c      	ldr	r3, [pc, #368]	@ (8005f1c <CreateMessage+0xc20>)
 8005dac:	0018      	movs	r0, r3
 8005dae:	f7ff fa49 	bl	8005244 <isKeyValid>
 8005db2:	1e03      	subs	r3, r0, #0
 8005db4:	d043      	beq.n	8005e3e <CreateMessage+0xb42>
      uint8ArrayToString(Buffer, keybuffer);
 8005db6:	4a59      	ldr	r2, [pc, #356]	@ (8005f1c <CreateMessage+0xc20>)
 8005db8:	4b5c      	ldr	r3, [pc, #368]	@ (8005f2c <CreateMessage+0xc30>)
 8005dba:	0011      	movs	r1, r2
 8005dbc:	0018      	movs	r0, r3
 8005dbe:	f7ff fa79 	bl	80052b4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humiditymax);
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humiditymax);
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f30 <CreateMessage+0xc34>)
 8005dc4:	689c      	ldr	r4, [r3, #8]
 8005dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f34 <CreateMessage+0xc38>)
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dca:	1c18      	adds	r0, r3, #0
 8005dcc:	f7fd fd62 	bl	8003894 <__aeabi_f2d>
 8005dd0:	0002      	movs	r2, r0
 8005dd2:	000b      	movs	r3, r1
 8005dd4:	4d58      	ldr	r5, [pc, #352]	@ (8005f38 <CreateMessage+0xc3c>)
 8005dd6:	4962      	ldr	r1, [pc, #392]	@ (8005f60 <CreateMessage+0xc64>)
 8005dd8:	484d      	ldr	r0, [pc, #308]	@ (8005f10 <CreateMessage+0xc14>)
 8005dda:	9202      	str	r2, [sp, #8]
 8005ddc:	9303      	str	r3, [sp, #12]
 8005dde:	4b53      	ldr	r3, [pc, #332]	@ (8005f2c <CreateMessage+0xc30>)
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	002b      	movs	r3, r5
 8005de4:	0022      	movs	r2, r4
 8005de6:	f01f fb01 	bl	80253ec <siprintf>
  #endif
      index += strlen(message);
 8005dea:	4b49      	ldr	r3, [pc, #292]	@ (8005f10 <CreateMessage+0xc14>)
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7fa f9bd 	bl	800016c <strlen>
 8005df2:	0003      	movs	r3, r0
 8005df4:	b299      	uxth	r1, r3
 8005df6:	220e      	movs	r2, #14
 8005df8:	18bb      	adds	r3, r7, r2
 8005dfa:	18ba      	adds	r2, r7, r2
 8005dfc:	8812      	ldrh	r2, [r2, #0]
 8005dfe:	188a      	adds	r2, r1, r2
 8005e00:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e02:	1dbb      	adds	r3, r7, #6
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d019      	beq.n	8005e3e <CreateMessage+0xb42>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e0a:	4b41      	ldr	r3, [pc, #260]	@ (8005f10 <CreateMessage+0xc14>)
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7fa f9ad 	bl	800016c <strlen>
 8005e12:	0003      	movs	r3, r0
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	4b3e      	ldr	r3, [pc, #248]	@ (8005f10 <CreateMessage+0xc14>)
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f7ff f86a 	bl	8004ef4 <ESP_Send>
 8005e20:	0003      	movs	r3, r0
 8005e22:	001a      	movs	r2, r3
 8005e24:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <CreateMessage+0xc18>)
 8005e26:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e28:	4b3b      	ldr	r3, [pc, #236]	@ (8005f18 <CreateMessage+0xc1c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	4b39      	ldr	r3, [pc, #228]	@ (8005f14 <CreateMessage+0xc18>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	4013      	ands	r3, r2
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	4193      	sbcs	r3, r2
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <CreateMessage+0xc1c>)
 8005e3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005e3e:	f006 fd81 	bl	800c944 <IsENS160SensorPresent>
 8005e42:	1e03      	subs	r3, r0, #0
 8005e44:	d100      	bne.n	8005e48 <CreateMessage+0xb4c>
 8005e46:	e11b      	b.n	8006080 <CreateMessage+0xd84>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005e48:	4b34      	ldr	r3, [pc, #208]	@ (8005f1c <CreateMessage+0xc20>)
 8005e4a:	4846      	ldr	r0, [pc, #280]	@ (8005f64 <CreateMessage+0xc68>)
 8005e4c:	220c      	movs	r2, #12
 8005e4e:	0019      	movs	r1, r3
 8005e50:	f005 fc3a 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005e54:	4a44      	ldr	r2, [pc, #272]	@ (8005f68 <CreateMessage+0xc6c>)
 8005e56:	4945      	ldr	r1, [pc, #276]	@ (8005f6c <CreateMessage+0xc70>)
 8005e58:	4b30      	ldr	r3, [pc, #192]	@ (8005f1c <CreateMessage+0xc20>)
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f7ff f9f2 	bl	8005244 <isKeyValid>
 8005e60:	1e03      	subs	r3, r0, #0
 8005e62:	d03d      	beq.n	8005ee0 <CreateMessage+0xbe4>
      uint8ArrayToString(Buffer, keybuffer);
 8005e64:	4a2d      	ldr	r2, [pc, #180]	@ (8005f1c <CreateMessage+0xc20>)
 8005e66:	4b31      	ldr	r3, [pc, #196]	@ (8005f2c <CreateMessage+0xc30>)
 8005e68:	0011      	movs	r1, r2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7ff fa22 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
 8005e70:	4b2f      	ldr	r3, [pc, #188]	@ (8005f30 <CreateMessage+0xc34>)
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	4b2f      	ldr	r3, [pc, #188]	@ (8005f34 <CreateMessage+0xc38>)
 8005e76:	2165      	movs	r1, #101	@ 0x65
 8005e78:	5c5b      	ldrb	r3, [r3, r1]
 8005e7a:	4c2f      	ldr	r4, [pc, #188]	@ (8005f38 <CreateMessage+0xc3c>)
 8005e7c:	493c      	ldr	r1, [pc, #240]	@ (8005f70 <CreateMessage+0xc74>)
 8005e7e:	4824      	ldr	r0, [pc, #144]	@ (8005f10 <CreateMessage+0xc14>)
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	4b2a      	ldr	r3, [pc, #168]	@ (8005f2c <CreateMessage+0xc30>)
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	0023      	movs	r3, r4
 8005e88:	f01f fab0 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 8005e8c:	4b20      	ldr	r3, [pc, #128]	@ (8005f10 <CreateMessage+0xc14>)
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f7fa f96c 	bl	800016c <strlen>
 8005e94:	0003      	movs	r3, r0
 8005e96:	b299      	uxth	r1, r3
 8005e98:	220e      	movs	r2, #14
 8005e9a:	18bb      	adds	r3, r7, r2
 8005e9c:	18ba      	adds	r2, r7, r2
 8005e9e:	8812      	ldrh	r2, [r2, #0]
 8005ea0:	188a      	adds	r2, r1, r2
 8005ea2:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005ea4:	1dbb      	adds	r3, r7, #6
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d019      	beq.n	8005ee0 <CreateMessage+0xbe4>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005eac:	4b18      	ldr	r3, [pc, #96]	@ (8005f10 <CreateMessage+0xc14>)
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f7fa f95c 	bl	800016c <strlen>
 8005eb4:	0003      	movs	r3, r0
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	4b15      	ldr	r3, [pc, #84]	@ (8005f10 <CreateMessage+0xc14>)
 8005eba:	0011      	movs	r1, r2
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7ff f819 	bl	8004ef4 <ESP_Send>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	001a      	movs	r2, r3
 8005ec6:	4b13      	ldr	r3, [pc, #76]	@ (8005f14 <CreateMessage+0xc18>)
 8005ec8:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005eca:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	001a      	movs	r2, r3
 8005ed0:	4b10      	ldr	r3, [pc, #64]	@ (8005f14 <CreateMessage+0xc18>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	4193      	sbcs	r3, r2
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f18 <CreateMessage+0xc1c>)
 8005ede:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f1c <CreateMessage+0xc20>)
 8005ee2:	4824      	ldr	r0, [pc, #144]	@ (8005f74 <CreateMessage+0xc78>)
 8005ee4:	220c      	movs	r2, #12
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	f005 fbee 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 8005eec:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <CreateMessage+0xc7c>)
 8005eee:	491f      	ldr	r1, [pc, #124]	@ (8005f6c <CreateMessage+0xc70>)
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <CreateMessage+0xc20>)
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7ff f9a6 	bl	8005244 <isKeyValid>
 8005ef8:	1e03      	subs	r3, r0, #0
 8005efa:	d075      	beq.n	8005fe8 <CreateMessage+0xcec>
      uint8ArrayToString(Buffer, keybuffer);
 8005efc:	4a07      	ldr	r2, [pc, #28]	@ (8005f1c <CreateMessage+0xc20>)
 8005efe:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <CreateMessage+0xc30>)
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f7ff f9d6 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
 8005f08:	4b09      	ldr	r3, [pc, #36]	@ (8005f30 <CreateMessage+0xc34>)
 8005f0a:	689a      	ldr	r2, [r3, #8]
 8005f0c:	e036      	b.n	8005f7c <CreateMessage+0xc80>
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	200005cc 	.word	0x200005cc
 8005f14:	20000779 	.word	0x20000779
 8005f18:	2000002d 	.word	0x2000002d
 8005f1c:	20000754 	.word	0x20000754
 8005f20:	080800bc 	.word	0x080800bc
 8005f24:	0802a320 	.word	0x0802a320
 8005f28:	0802a3e4 	.word	0x0802a3e4
 8005f2c:	20000760 	.word	0x20000760
 8005f30:	200005ac 	.word	0x200005ac
 8005f34:	2000067c 	.word	0x2000067c
 8005f38:	20000734 	.word	0x20000734
 8005f3c:	0802a3e8 	.word	0x0802a3e8
 8005f40:	08080060 	.word	0x08080060
 8005f44:	0802a440 	.word	0x0802a440
 8005f48:	080800c8 	.word	0x080800c8
 8005f4c:	0802a244 	.word	0x0802a244
 8005f50:	0802a49c 	.word	0x0802a49c
 8005f54:	0802a4a4 	.word	0x0802a4a4
 8005f58:	080800d4 	.word	0x080800d4
 8005f5c:	0802a2b4 	.word	0x0802a2b4
 8005f60:	0802a500 	.word	0x0802a500
 8005f64:	080800ec 	.word	0x080800ec
 8005f68:	0802a55c 	.word	0x0802a55c
 8005f6c:	0802a570 	.word	0x0802a570
 8005f70:	0802a578 	.word	0x0802a578
 8005f74:	080800f8 	.word	0x080800f8
 8005f78:	0802a5d0 	.word	0x0802a5d0
 8005f7c:	4b71      	ldr	r3, [pc, #452]	@ (8006144 <CreateMessage+0xe48>)
 8005f7e:	215a      	movs	r1, #90	@ 0x5a
 8005f80:	5a5b      	ldrh	r3, [r3, r1]
 8005f82:	4c71      	ldr	r4, [pc, #452]	@ (8006148 <CreateMessage+0xe4c>)
 8005f84:	4971      	ldr	r1, [pc, #452]	@ (800614c <CreateMessage+0xe50>)
 8005f86:	4872      	ldr	r0, [pc, #456]	@ (8006150 <CreateMessage+0xe54>)
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	4b72      	ldr	r3, [pc, #456]	@ (8006154 <CreateMessage+0xe58>)
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	0023      	movs	r3, r4
 8005f90:	f01f fa2c 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 8005f94:	4b6e      	ldr	r3, [pc, #440]	@ (8006150 <CreateMessage+0xe54>)
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7fa f8e8 	bl	800016c <strlen>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	b299      	uxth	r1, r3
 8005fa0:	220e      	movs	r2, #14
 8005fa2:	18bb      	adds	r3, r7, r2
 8005fa4:	18ba      	adds	r2, r7, r2
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	188a      	adds	r2, r1, r2
 8005faa:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fac:	1dbb      	adds	r3, r7, #6
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d019      	beq.n	8005fe8 <CreateMessage+0xcec>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fb4:	4b66      	ldr	r3, [pc, #408]	@ (8006150 <CreateMessage+0xe54>)
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fa f8d8 	bl	800016c <strlen>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <CreateMessage+0xe54>)
 8005fc2:	0011      	movs	r1, r2
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7fe ff95 	bl	8004ef4 <ESP_Send>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	001a      	movs	r2, r3
 8005fce:	4b62      	ldr	r3, [pc, #392]	@ (8006158 <CreateMessage+0xe5c>)
 8005fd0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005fd2:	4b62      	ldr	r3, [pc, #392]	@ (800615c <CreateMessage+0xe60>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8006158 <CreateMessage+0xe5c>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	4193      	sbcs	r3, r2
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800615c <CreateMessage+0xe60>)
 8005fe6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 8005fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8006160 <CreateMessage+0xe64>)
 8005fea:	485e      	ldr	r0, [pc, #376]	@ (8006164 <CreateMessage+0xe68>)
 8005fec:	220c      	movs	r2, #12
 8005fee:	0019      	movs	r1, r3
 8005ff0:	f005 fb6a 	bl	800b6c8 <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8005ff4:	4a5c      	ldr	r2, [pc, #368]	@ (8006168 <CreateMessage+0xe6c>)
 8005ff6:	495d      	ldr	r1, [pc, #372]	@ (800616c <CreateMessage+0xe70>)
 8005ff8:	4b59      	ldr	r3, [pc, #356]	@ (8006160 <CreateMessage+0xe64>)
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f7ff f922 	bl	8005244 <isKeyValid>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d03d      	beq.n	8006080 <CreateMessage+0xd84>
      uint8ArrayToString(Buffer, keybuffer);
 8006004:	4a56      	ldr	r2, [pc, #344]	@ (8006160 <CreateMessage+0xe64>)
 8006006:	4b53      	ldr	r3, [pc, #332]	@ (8006154 <CreateMessage+0xe58>)
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f7ff f952 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
 8006010:	4b57      	ldr	r3, [pc, #348]	@ (8006170 <CreateMessage+0xe74>)
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <CreateMessage+0xe48>)
 8006016:	2162      	movs	r1, #98	@ 0x62
 8006018:	5a5b      	ldrh	r3, [r3, r1]
 800601a:	4c4b      	ldr	r4, [pc, #300]	@ (8006148 <CreateMessage+0xe4c>)
 800601c:	4955      	ldr	r1, [pc, #340]	@ (8006174 <CreateMessage+0xe78>)
 800601e:	484c      	ldr	r0, [pc, #304]	@ (8006150 <CreateMessage+0xe54>)
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	4b4c      	ldr	r3, [pc, #304]	@ (8006154 <CreateMessage+0xe58>)
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	0023      	movs	r3, r4
 8006028:	f01f f9e0 	bl	80253ec <siprintf>
#endif
      index += strlen(message);
 800602c:	4b48      	ldr	r3, [pc, #288]	@ (8006150 <CreateMessage+0xe54>)
 800602e:	0018      	movs	r0, r3
 8006030:	f7fa f89c 	bl	800016c <strlen>
 8006034:	0003      	movs	r3, r0
 8006036:	b299      	uxth	r1, r3
 8006038:	220e      	movs	r2, #14
 800603a:	18bb      	adds	r3, r7, r2
 800603c:	18ba      	adds	r2, r7, r2
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	188a      	adds	r2, r1, r2
 8006042:	801a      	strh	r2, [r3, #0]
      if (send) {
 8006044:	1dbb      	adds	r3, r7, #6
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d019      	beq.n	8006080 <CreateMessage+0xd84>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800604c:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <CreateMessage+0xe54>)
 800604e:	0018      	movs	r0, r3
 8006050:	f7fa f88c 	bl	800016c <strlen>
 8006054:	0003      	movs	r3, r0
 8006056:	b29a      	uxth	r2, r3
 8006058:	4b3d      	ldr	r3, [pc, #244]	@ (8006150 <CreateMessage+0xe54>)
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f7fe ff49 	bl	8004ef4 <ESP_Send>
 8006062:	0003      	movs	r3, r0
 8006064:	001a      	movs	r2, r3
 8006066:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <CreateMessage+0xe5c>)
 8006068:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800606a:	4b3c      	ldr	r3, [pc, #240]	@ (800615c <CreateMessage+0xe60>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	001a      	movs	r2, r3
 8006070:	4b39      	ldr	r3, [pc, #228]	@ (8006158 <CreateMessage+0xe5c>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4013      	ands	r3, r2
 8006076:	1e5a      	subs	r2, r3, #1
 8006078:	4193      	sbcs	r3, r2
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b37      	ldr	r3, [pc, #220]	@ (800615c <CreateMessage+0xe60>)
 800607e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8006080:	4b37      	ldr	r3, [pc, #220]	@ (8006160 <CreateMessage+0xe64>)
 8006082:	483d      	ldr	r0, [pc, #244]	@ (8006178 <CreateMessage+0xe7c>)
 8006084:	220c      	movs	r2, #12
 8006086:	0019      	movs	r1, r3
 8006088:	f005 fb1e 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800608c:	4a34      	ldr	r2, [pc, #208]	@ (8006160 <CreateMessage+0xe64>)
 800608e:	4b31      	ldr	r3, [pc, #196]	@ (8006154 <CreateMessage+0xe58>)
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f7ff f90e 	bl	80052b4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
#else
  sprintf(&message[0], ",{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8006098:	4b35      	ldr	r3, [pc, #212]	@ (8006170 <CreateMessage+0xe74>)
 800609a:	689c      	ldr	r4, [r3, #8]
 800609c:	4b37      	ldr	r3, [pc, #220]	@ (800617c <CreateMessage+0xe80>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	1c18      	adds	r0, r3, #0
 80060a2:	f7fd fbf7 	bl	8003894 <__aeabi_f2d>
 80060a6:	0002      	movs	r2, r0
 80060a8:	000b      	movs	r3, r1
 80060aa:	4d27      	ldr	r5, [pc, #156]	@ (8006148 <CreateMessage+0xe4c>)
 80060ac:	4934      	ldr	r1, [pc, #208]	@ (8006180 <CreateMessage+0xe84>)
 80060ae:	4828      	ldr	r0, [pc, #160]	@ (8006150 <CreateMessage+0xe54>)
 80060b0:	9202      	str	r2, [sp, #8]
 80060b2:	9303      	str	r3, [sp, #12]
 80060b4:	4b27      	ldr	r3, [pc, #156]	@ (8006154 <CreateMessage+0xe58>)
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	002b      	movs	r3, r5
 80060ba:	0022      	movs	r2, r4
 80060bc:	f01f f996 	bl	80253ec <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80060c0:	4b23      	ldr	r3, [pc, #140]	@ (8006150 <CreateMessage+0xe54>)
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7fa f852 	bl	800016c <strlen>
 80060c8:	0002      	movs	r2, r0
 80060ca:	4b21      	ldr	r3, [pc, #132]	@ (8006150 <CreateMessage+0xe54>)
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006184 <CreateMessage+0xe88>)
 80060d0:	0011      	movs	r1, r2
 80060d2:	0018      	movs	r0, r3
 80060d4:	f01f f98a 	bl	80253ec <siprintf>
  index += strlen(message);
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <CreateMessage+0xe54>)
 80060da:	0018      	movs	r0, r3
 80060dc:	f7fa f846 	bl	800016c <strlen>
 80060e0:	0003      	movs	r3, r0
 80060e2:	b299      	uxth	r1, r3
 80060e4:	220e      	movs	r2, #14
 80060e6:	18bb      	adds	r3, r7, r2
 80060e8:	18ba      	adds	r2, r7, r2
 80060ea:	8812      	ldrh	r2, [r2, #0]
 80060ec:	188a      	adds	r2, r1, r2
 80060ee:	801a      	strh	r2, [r3, #0]
  if (send) {
 80060f0:	1dbb      	adds	r3, r7, #6
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d019      	beq.n	800612c <CreateMessage+0xe30>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80060f8:	4b15      	ldr	r3, [pc, #84]	@ (8006150 <CreateMessage+0xe54>)
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7fa f836 	bl	800016c <strlen>
 8006100:	0003      	movs	r3, r0
 8006102:	b29a      	uxth	r2, r3
 8006104:	4b12      	ldr	r3, [pc, #72]	@ (8006150 <CreateMessage+0xe54>)
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f7fe fef3 	bl	8004ef4 <ESP_Send>
 800610e:	0003      	movs	r3, r0
 8006110:	001a      	movs	r2, r3
 8006112:	4b11      	ldr	r3, [pc, #68]	@ (8006158 <CreateMessage+0xe5c>)
 8006114:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8006116:	4b11      	ldr	r3, [pc, #68]	@ (800615c <CreateMessage+0xe60>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	001a      	movs	r2, r3
 800611c:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <CreateMessage+0xe5c>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4013      	ands	r3, r2
 8006122:	1e5a      	subs	r2, r3, #1
 8006124:	4193      	sbcs	r3, r2
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b0c      	ldr	r3, [pc, #48]	@ (800615c <CreateMessage+0xe60>)
 800612a:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <CreateMessage+0xe60>)
 800612e:	781a      	ldrb	r2, [r3, #0]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	701a      	strb	r2, [r3, #0]
  return index;
 8006134:	230e      	movs	r3, #14
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	881b      	ldrh	r3, [r3, #0]
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b005      	add	sp, #20
 8006140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006142:	46c0      	nop			@ (mov r8, r8)
 8006144:	2000067c 	.word	0x2000067c
 8006148:	20000734 	.word	0x20000734
 800614c:	0802a5d8 	.word	0x0802a5d8
 8006150:	200005cc 	.word	0x200005cc
 8006154:	20000760 	.word	0x20000760
 8006158:	20000779 	.word	0x20000779
 800615c:	2000002d 	.word	0x2000002d
 8006160:	20000754 	.word	0x20000754
 8006164:	08080104 	.word	0x08080104
 8006168:	0802a634 	.word	0x0802a634
 800616c:	0802a570 	.word	0x0802a570
 8006170:	200005ac 	.word	0x200005ac
 8006174:	0802a63c 	.word	0x0802a63c
 8006178:	0808006c 	.word	0x0808006c
 800617c:	200005c4 	.word	0x200005c4
 8006180:	0802a698 	.word	0x0802a698
 8006184:	0802a6f0 	.word	0x0802a6f0

08006188 <StartProg>:

void StartProg(){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 800618c:	2064      	movs	r0, #100	@ 0x64
 800618e:	f00d fd0b 	bl	8013ba8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <StartProg+0x60>)
 8006194:	2200      	movs	r2, #0
 8006196:	2101      	movs	r1, #1
 8006198:	0018      	movs	r0, r3
 800619a:	f00e ff8c 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800619e:	2064      	movs	r0, #100	@ 0x64
 80061a0:	f00d fd02 	bl	8013ba8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80061a4:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <StartProg+0x60>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	2102      	movs	r1, #2
 80061aa:	0018      	movs	r0, r3
 80061ac:	f00e ff83 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80061b0:	23fa      	movs	r3, #250	@ 0xfa
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	0018      	movs	r0, r3
 80061b6:	f00d fcf7 	bl	8013ba8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80061ba:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <StartProg+0x60>)
 80061bc:	2201      	movs	r2, #1
 80061be:	2101      	movs	r1, #1
 80061c0:	0018      	movs	r0, r3
 80061c2:	f00e ff78 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80061c6:	23fa      	movs	r3, #250	@ 0xfa
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	0018      	movs	r0, r3
 80061cc:	f00d fcec 	bl	8013ba8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <StartProg+0x60>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	2102      	movs	r1, #2
 80061d6:	0018      	movs	r0, r3
 80061d8:	f00e ff6d 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80061dc:	2028      	movs	r0, #40	@ 0x28
 80061de:	f00d fce3 	bl	8013ba8 <HAL_Delay>
}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	50001c00 	.word	0x50001c00

080061ec <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80061ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ee:	b0d9      	sub	sp, #356	@ 0x164
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	0008      	movs	r0, r1
 80061f6:	0011      	movs	r1, r2
 80061f8:	4ba3      	ldr	r3, [pc, #652]	@ (8006488 <ParseBuffer+0x29c>)
 80061fa:	24b0      	movs	r4, #176	@ 0xb0
 80061fc:	0064      	lsls	r4, r4, #1
 80061fe:	191b      	adds	r3, r3, r4
 8006200:	19db      	adds	r3, r3, r7
 8006202:	1c02      	adds	r2, r0, #0
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	4ba1      	ldr	r3, [pc, #644]	@ (800648c <ParseBuffer+0x2a0>)
 8006208:	191b      	adds	r3, r3, r4
 800620a:	19db      	adds	r3, r3, r7
 800620c:	1c0a      	adds	r2, r1, #0
 800620e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006210:	2380      	movs	r3, #128	@ 0x80
 8006212:	005a      	lsls	r2, r3, #1
 8006214:	2348      	movs	r3, #72	@ 0x48
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2100      	movs	r1, #0
 800621a:	0018      	movs	r0, r3
 800621c:	f01f fa50 	bl	80256c0 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006220:	2360      	movs	r3, #96	@ 0x60
 8006222:	33ff      	adds	r3, #255	@ 0xff
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2203      	movs	r2, #3
 8006228:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800622a:	23ae      	movs	r3, #174	@ 0xae
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	18fb      	adds	r3, r7, r3
 8006230:	2200      	movs	r2, #0
 8006232:	801a      	strh	r2, [r3, #0]
 8006234:	e013      	b.n	800625e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006236:	20ae      	movs	r0, #174	@ 0xae
 8006238:	0040      	lsls	r0, r0, #1
 800623a:	183b      	adds	r3, r7, r0
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	18d2      	adds	r2, r2, r3
 8006242:	183b      	adds	r3, r7, r0
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	7811      	ldrb	r1, [r2, #0]
 8006248:	4a91      	ldr	r2, [pc, #580]	@ (8006490 <ParseBuffer+0x2a4>)
 800624a:	24b0      	movs	r4, #176	@ 0xb0
 800624c:	0064      	lsls	r4, r4, #1
 800624e:	1912      	adds	r2, r2, r4
 8006250:	19d2      	adds	r2, r2, r7
 8006252:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006254:	183b      	adds	r3, r7, r0
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	183b      	adds	r3, r7, r0
 800625a:	3201      	adds	r2, #1
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	23ae      	movs	r3, #174	@ 0xae
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	18fa      	adds	r2, r7, r3
 8006264:	4b88      	ldr	r3, [pc, #544]	@ (8006488 <ParseBuffer+0x29c>)
 8006266:	21b0      	movs	r1, #176	@ 0xb0
 8006268:	0049      	lsls	r1, r1, #1
 800626a:	185b      	adds	r3, r3, r1
 800626c:	19db      	adds	r3, r3, r7
 800626e:	8812      	ldrh	r2, [r2, #0]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d3df      	bcc.n	8006236 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8006276:	4b84      	ldr	r3, [pc, #528]	@ (8006488 <ParseBuffer+0x29c>)
 8006278:	185b      	adds	r3, r3, r1
 800627a:	19db      	adds	r3, r3, r7
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	4a84      	ldr	r2, [pc, #528]	@ (8006490 <ParseBuffer+0x2a4>)
 8006280:	1852      	adds	r2, r2, r1
 8006282:	19d2      	adds	r2, r2, r7
 8006284:	2100      	movs	r1, #0
 8006286:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006288:	f00c ffbe 	bl	8013208 <GetVerboseLevel>
 800628c:	0003      	movs	r3, r0
 800628e:	2b03      	cmp	r3, #3
 8006290:	d106      	bne.n	80062a0 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8006292:	2348      	movs	r3, #72	@ 0x48
 8006294:	18fa      	adds	r2, r7, r3
 8006296:	4b7f      	ldr	r3, [pc, #508]	@ (8006494 <ParseBuffer+0x2a8>)
 8006298:	0011      	movs	r1, r2
 800629a:	0018      	movs	r0, r3
 800629c:	f01f f836 	bl	802530c <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	26ac      	movs	r6, #172	@ 0xac
 80062a4:	0076      	lsls	r6, r6, #1
 80062a6:	19ba      	adds	r2, r7, r6
 80062a8:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80062aa:	4b7b      	ldr	r3, [pc, #492]	@ (8006498 <ParseBuffer+0x2ac>)
 80062ac:	25b0      	movs	r5, #176	@ 0xb0
 80062ae:	006d      	lsls	r5, r5, #1
 80062b0:	195b      	adds	r3, r3, r5
 80062b2:	19db      	adds	r3, r3, r7
 80062b4:	4a79      	ldr	r2, [pc, #484]	@ (800649c <ParseBuffer+0x2b0>)
 80062b6:	8811      	ldrh	r1, [r2, #0]
 80062b8:	8019      	strh	r1, [r3, #0]
 80062ba:	7892      	ldrb	r2, [r2, #2]
 80062bc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80062be:	4b78      	ldr	r3, [pc, #480]	@ (80064a0 <ParseBuffer+0x2b4>)
 80062c0:	195b      	adds	r3, r3, r5
 80062c2:	19db      	adds	r3, r3, r7
 80062c4:	4a77      	ldr	r2, [pc, #476]	@ (80064a4 <ParseBuffer+0x2b8>)
 80062c6:	6811      	ldr	r1, [r2, #0]
 80062c8:	6019      	str	r1, [r3, #0]
 80062ca:	8892      	ldrh	r2, [r2, #4]
 80062cc:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <ParseBuffer+0x2bc>)
 80062d0:	195b      	adds	r3, r3, r5
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <ParseBuffer+0x2c0>)
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80062dc:	4b74      	ldr	r3, [pc, #464]	@ (80064b0 <ParseBuffer+0x2c4>)
 80062de:	195b      	adds	r3, r3, r5
 80062e0:	19db      	adds	r3, r3, r7
 80062e2:	4a74      	ldr	r2, [pc, #464]	@ (80064b4 <ParseBuffer+0x2c8>)
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	6019      	str	r1, [r3, #0]
 80062e8:	8892      	ldrh	r2, [r2, #4]
 80062ea:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80062ec:	4b72      	ldr	r3, [pc, #456]	@ (80064b8 <ParseBuffer+0x2cc>)
 80062ee:	195b      	adds	r3, r3, r5
 80062f0:	19db      	adds	r3, r3, r7
 80062f2:	223e      	movs	r2, #62	@ 0x3e
 80062f4:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80062f6:	4b71      	ldr	r3, [pc, #452]	@ (80064bc <ParseBuffer+0x2d0>)
 80062f8:	195b      	adds	r3, r3, r5
 80062fa:	19db      	adds	r3, r3, r7
 80062fc:	4a70      	ldr	r2, [pc, #448]	@ (80064c0 <ParseBuffer+0x2d4>)
 80062fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006300:	c313      	stmia	r3!, {r0, r1, r4}
 8006302:	8811      	ldrh	r1, [r2, #0]
 8006304:	8019      	strh	r1, [r3, #0]
 8006306:	7892      	ldrb	r2, [r2, #2]
 8006308:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800630a:	4b6e      	ldr	r3, [pc, #440]	@ (80064c4 <ParseBuffer+0x2d8>)
 800630c:	195b      	adds	r3, r3, r5
 800630e:	19db      	adds	r3, r3, r7
 8006310:	4a6d      	ldr	r2, [pc, #436]	@ (80064c8 <ParseBuffer+0x2dc>)
 8006312:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006314:	c313      	stmia	r3!, {r0, r1, r4}
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800631a:	4b5c      	ldr	r3, [pc, #368]	@ (800648c <ParseBuffer+0x2a0>)
 800631c:	195b      	adds	r3, r3, r5
 800631e:	19db      	adds	r3, r3, r7
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8006326:	2344      	movs	r3, #68	@ 0x44
 8006328:	18fa      	adds	r2, r7, r3
 800632a:	2348      	movs	r3, #72	@ 0x48
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f01f fa00 	bl	8025736 <strstr>
 8006336:	0003      	movs	r3, r0
 8006338:	19ba      	adds	r2, r7, r6
 800633a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800633c:	4b53      	ldr	r3, [pc, #332]	@ (800648c <ParseBuffer+0x2a0>)
 800633e:	22b0      	movs	r2, #176	@ 0xb0
 8006340:	0052      	lsls	r2, r2, #1
 8006342:	189b      	adds	r3, r3, r2
 8006344:	19db      	adds	r3, r3, r7
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d10c      	bne.n	8006366 <ParseBuffer+0x17a>
    ParsePoint = strstr(tempBuf, ready);
 800634c:	232c      	movs	r3, #44	@ 0x2c
 800634e:	18fa      	adds	r2, r7, r3
 8006350:	2348      	movs	r3, #72	@ 0x48
 8006352:	18fb      	adds	r3, r7, r3
 8006354:	0011      	movs	r1, r2
 8006356:	0018      	movs	r0, r3
 8006358:	f01f f9ed 	bl	8025736 <strstr>
 800635c:	0003      	movs	r3, r0
 800635e:	22ac      	movs	r2, #172	@ 0xac
 8006360:	0052      	lsls	r2, r2, #1
 8006362:	18ba      	adds	r2, r7, r2
 8006364:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006366:	4b49      	ldr	r3, [pc, #292]	@ (800648c <ParseBuffer+0x2a0>)
 8006368:	22b0      	movs	r2, #176	@ 0xb0
 800636a:	0052      	lsls	r2, r2, #1
 800636c:	189b      	adds	r3, r3, r2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d10c      	bne.n	8006390 <ParseBuffer+0x1a4>
    ParsePoint = strstr(tempBuf, start);
 8006376:	2328      	movs	r3, #40	@ 0x28
 8006378:	18fa      	adds	r2, r7, r3
 800637a:	2348      	movs	r3, #72	@ 0x48
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	0011      	movs	r1, r2
 8006380:	0018      	movs	r0, r3
 8006382:	f01f f9d8 	bl	8025736 <strstr>
 8006386:	0003      	movs	r3, r0
 8006388:	22ac      	movs	r2, #172	@ 0xac
 800638a:	0052      	lsls	r2, r2, #1
 800638c:	18ba      	adds	r2, r7, r2
 800638e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8006390:	4b3e      	ldr	r3, [pc, #248]	@ (800648c <ParseBuffer+0x2a0>)
 8006392:	22b0      	movs	r2, #176	@ 0xb0
 8006394:	0052      	lsls	r2, r2, #1
 8006396:	189b      	adds	r3, r3, r2
 8006398:	19db      	adds	r3, r3, r7
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b05      	cmp	r3, #5
 800639e:	d10c      	bne.n	80063ba <ParseBuffer+0x1ce>
    ParsePoint = strstr(tempBuf, TIME);
 80063a0:	2308      	movs	r3, #8
 80063a2:	18fa      	adds	r2, r7, r3
 80063a4:	2348      	movs	r3, #72	@ 0x48
 80063a6:	18fb      	adds	r3, r7, r3
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f01f f9c3 	bl	8025736 <strstr>
 80063b0:	0003      	movs	r3, r0
 80063b2:	22ac      	movs	r2, #172	@ 0xac
 80063b4:	0052      	lsls	r2, r2, #1
 80063b6:	18ba      	adds	r2, r7, r2
 80063b8:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80063ba:	233c      	movs	r3, #60	@ 0x3c
 80063bc:	18fa      	adds	r2, r7, r3
 80063be:	2448      	movs	r4, #72	@ 0x48
 80063c0:	193b      	adds	r3, r7, r4
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f01f f9b6 	bl	8025736 <strstr>
 80063ca:	0003      	movs	r3, r0
 80063cc:	22aa      	movs	r2, #170	@ 0xaa
 80063ce:	0052      	lsls	r2, r2, #1
 80063d0:	18ba      	adds	r2, r7, r2
 80063d2:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80063d4:	2318      	movs	r3, #24
 80063d6:	18fa      	adds	r2, r7, r3
 80063d8:	193b      	adds	r3, r7, r4
 80063da:	0011      	movs	r1, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	f01f f9aa 	bl	8025736 <strstr>
 80063e2:	0003      	movs	r3, r0
 80063e4:	22a8      	movs	r2, #168	@ 0xa8
 80063e6:	0052      	lsls	r2, r2, #1
 80063e8:	18ba      	adds	r2, r7, r2
 80063ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80063ec:	4a37      	ldr	r2, [pc, #220]	@ (80064cc <ParseBuffer+0x2e0>)
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	0011      	movs	r1, r2
 80063f2:	0018      	movs	r0, r3
 80063f4:	f01f f99f 	bl	8025736 <strstr>
 80063f8:	0003      	movs	r3, r0
 80063fa:	22a6      	movs	r2, #166	@ 0xa6
 80063fc:	0052      	lsls	r2, r2, #1
 80063fe:	18ba      	adds	r2, r7, r2
 8006400:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8006402:	2334      	movs	r3, #52	@ 0x34
 8006404:	18fa      	adds	r2, r7, r3
 8006406:	193b      	adds	r3, r7, r4
 8006408:	0011      	movs	r1, r2
 800640a:	0018      	movs	r0, r3
 800640c:	f01f f993 	bl	8025736 <strstr>
 8006410:	0003      	movs	r3, r0
 8006412:	22a4      	movs	r2, #164	@ 0xa4
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	18ba      	adds	r2, r7, r2
 8006418:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800641a:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <ParseBuffer+0x29c>)
 800641c:	21b0      	movs	r1, #176	@ 0xb0
 800641e:	0049      	lsls	r1, r1, #1
 8006420:	185b      	adds	r3, r3, r1
 8006422:	19db      	adds	r3, r3, r7
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d800      	bhi.n	800642c <ParseBuffer+0x240>
 800642a:	e0be      	b.n	80065aa <ParseBuffer+0x3be>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 800642c:	22ac      	movs	r2, #172	@ 0xac
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	18bb      	adds	r3, r7, r2
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d051      	beq.n	80064dc <ParseBuffer+0x2f0>
 8006438:	18bb      	adds	r3, r7, r2
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006440:	d14c      	bne.n	80064dc <ParseBuffer+0x2f0>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8006442:	2360      	movs	r3, #96	@ 0x60
 8006444:	33ff      	adds	r3, #255	@ 0xff
 8006446:	18fb      	adds	r3, r7, r3
 8006448:	2200      	movs	r2, #0
 800644a:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800644c:	4b20      	ldr	r3, [pc, #128]	@ (80064d0 <ParseBuffer+0x2e4>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b12      	cmp	r3, #18
 8006452:	d143      	bne.n	80064dc <ParseBuffer+0x2f0>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8006454:	4b0c      	ldr	r3, [pc, #48]	@ (8006488 <ParseBuffer+0x29c>)
 8006456:	185b      	adds	r3, r3, r1
 8006458:	19db      	adds	r3, r3, r7
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	2b2b      	cmp	r3, #43	@ 0x2b
 800645e:	d10b      	bne.n	8006478 <ParseBuffer+0x28c>
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <ParseBuffer+0x2a4>)
 8006462:	185b      	adds	r3, r3, r1
 8006464:	19db      	adds	r3, r3, r7
 8006466:	2221      	movs	r2, #33	@ 0x21
 8006468:	5c9b      	ldrb	r3, [r3, r2]
 800646a:	2b32      	cmp	r3, #50	@ 0x32
 800646c:	d104      	bne.n	8006478 <ParseBuffer+0x28c>
          ParseTime(tempBuf);
 800646e:	193b      	adds	r3, r7, r4
 8006470:	0018      	movs	r0, r3
 8006472:	f003 f8cf 	bl	8009614 <ParseTime>
 8006476:	e031      	b.n	80064dc <ParseBuffer+0x2f0>
        }
        else {
          Error("Error getting time");
 8006478:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <ParseBuffer+0x2e8>)
 800647a:	4b17      	ldr	r3, [pc, #92]	@ (80064d8 <ParseBuffer+0x2ec>)
 800647c:	0019      	movs	r1, r3
 800647e:	2001      	movs	r0, #1
 8006480:	f00c fe48 	bl	8013114 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8006484:	2306      	movs	r3, #6
 8006486:	e094      	b.n	80065b2 <ParseBuffer+0x3c6>
 8006488:	fffffea2 	.word	0xfffffea2
 800648c:	fffffea1 	.word	0xfffffea1
 8006490:	fffffee8 	.word	0xfffffee8
 8006494:	0802a6f4 	.word	0x0802a6f4
 8006498:	fffffee4 	.word	0xfffffee4
 800649c:	0802a720 	.word	0x0802a720
 80064a0:	fffffedc 	.word	0xfffffedc
 80064a4:	0802a724 	.word	0x0802a724
 80064a8:	fffffed4 	.word	0xfffffed4
 80064ac:	4c494146 	.word	0x4c494146
 80064b0:	fffffecc 	.word	0xfffffecc
 80064b4:	0802a72c 	.word	0x0802a72c
 80064b8:	fffffec8 	.word	0xfffffec8
 80064bc:	fffffeb8 	.word	0xfffffeb8
 80064c0:	0802a734 	.word	0x0802a734
 80064c4:	fffffea8 	.word	0xfffffea8
 80064c8:	0802a744 	.word	0x0802a744
 80064cc:	0802d6f4 	.word	0x0802d6f4
 80064d0:	20000676 	.word	0x20000676
 80064d4:	0802a70c 	.word	0x0802a70c
 80064d8:	08029b64 	.word	0x08029b64
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80064dc:	22ac      	movs	r2, #172	@ 0xac
 80064de:	0052      	lsls	r2, r2, #1
 80064e0:	18bb      	adds	r3, r7, r2
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d009      	beq.n	80064fc <ParseBuffer+0x310>
 80064e8:	18bb      	adds	r3, r7, r2
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b72      	cmp	r3, #114	@ 0x72
 80064f0:	d104      	bne.n	80064fc <ParseBuffer+0x310>
      status = RECEIVE_STATUS_READY;
 80064f2:	2360      	movs	r3, #96	@ 0x60
 80064f4:	33ff      	adds	r3, #255	@ 0xff
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	2202      	movs	r2, #2
 80064fa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80064fc:	22ac      	movs	r2, #172	@ 0xac
 80064fe:	0052      	lsls	r2, r2, #1
 8006500:	18bb      	adds	r3, r7, r2
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d009      	beq.n	800651c <ParseBuffer+0x330>
 8006508:	18bb      	adds	r3, r7, r2
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006510:	d104      	bne.n	800651c <ParseBuffer+0x330>
      status = RECEIVE_STATUS_START;
 8006512:	2360      	movs	r3, #96	@ 0x60
 8006514:	33ff      	adds	r3, #255	@ 0xff
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2205      	movs	r2, #5
 800651a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800651c:	22ac      	movs	r2, #172	@ 0xac
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	18bb      	adds	r3, r7, r2
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d009      	beq.n	800653c <ParseBuffer+0x350>
 8006528:	18bb      	adds	r3, r7, r2
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006530:	d104      	bne.n	800653c <ParseBuffer+0x350>
      status = RECEIVE_STATUS_TIME;
 8006532:	2360      	movs	r3, #96	@ 0x60
 8006534:	33ff      	adds	r3, #255	@ 0xff
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	220b      	movs	r2, #11
 800653a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800653c:	22aa      	movs	r2, #170	@ 0xaa
 800653e:	0052      	lsls	r2, r2, #1
 8006540:	18bb      	adds	r3, r7, r2
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d004      	beq.n	8006552 <ParseBuffer+0x366>
 8006548:	18bb      	adds	r3, r7, r2
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b45      	cmp	r3, #69	@ 0x45
 8006550:	d00a      	beq.n	8006568 <ParseBuffer+0x37c>
 8006552:	22a4      	movs	r2, #164	@ 0xa4
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	18bb      	adds	r3, r7, r2
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <ParseBuffer+0x386>
 800655e:	18bb      	adds	r3, r7, r2
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	2b46      	cmp	r3, #70	@ 0x46
 8006566:	d104      	bne.n	8006572 <ParseBuffer+0x386>
      status = RECEIVE_STATUS_ERROR;
 8006568:	2360      	movs	r3, #96	@ 0x60
 800656a:	33ff      	adds	r3, #255	@ 0xff
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8006572:	22a8      	movs	r2, #168	@ 0xa8
 8006574:	0052      	lsls	r2, r2, #1
 8006576:	18bb      	adds	r3, r7, r2
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <ParseBuffer+0x3a2>
 800657e:	18bb      	adds	r3, r7, r2
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b57      	cmp	r3, #87	@ 0x57
 8006586:	d102      	bne.n	800658e <ParseBuffer+0x3a2>
      ConnectionMade = true;
 8006588:	4b0c      	ldr	r3, [pc, #48]	@ (80065bc <ParseBuffer+0x3d0>)
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800658e:	22a6      	movs	r2, #166	@ 0xa6
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	18bb      	adds	r3, r7, r2
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <ParseBuffer+0x3be>
 800659a:	18bb      	adds	r3, r7, r2
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b32      	cmp	r3, #50	@ 0x32
 80065a2:	d102      	bne.n	80065aa <ParseBuffer+0x3be>
      beurs = true;
 80065a4:	4b06      	ldr	r3, [pc, #24]	@ (80065c0 <ParseBuffer+0x3d4>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80065aa:	2360      	movs	r3, #96	@ 0x60
 80065ac:	33ff      	adds	r3, #255	@ 0xff
 80065ae:	18fb      	adds	r3, r7, r3
 80065b0:	781b      	ldrb	r3, [r3, #0]

}
 80065b2:	0018      	movs	r0, r3
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b059      	add	sp, #356	@ 0x164
 80065b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	200005a4 	.word	0x200005a4
 80065c0:	200005a6 	.word	0x200005a6

080065c4 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <PollAwake+0x34>)
 80065cc:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7f9 fdcb 	bl	800016c <strlen>
 80065d6:	0003      	movs	r3, r0
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fe fc88 	bl	8004ef4 <ESP_Send>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <PollAwake+0x28>
    return true;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <PollAwake+0x2a>
  }
  else{
    return false;
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	0018      	movs	r0, r3
 80065f0:	46bd      	mov	sp, r7
 80065f2:	b002      	add	sp, #8
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	0802a754 	.word	0x0802a754

080065fc <RFPower>:

bool RFPower(){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006602:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <RFPower+0x34>)
 8006604:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fdaf 	bl	800016c <strlen>
 800660e:	0003      	movs	r3, r0
 8006610:	b29a      	uxth	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0011      	movs	r1, r2
 8006616:	0018      	movs	r0, r3
 8006618:	f7fe fc6c 	bl	8004ef4 <ESP_Send>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <RFPower+0x28>
    return true;
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <RFPower+0x2a>
  }
  else{
    return false;
 8006624:	2300      	movs	r3, #0
  }
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b002      	add	sp, #8
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	0802a75c 	.word	0x0802a75c

08006634 <CheckRFPower>:

bool CheckRFPower(){
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800663a:	4b0b      	ldr	r3, [pc, #44]	@ (8006668 <CheckRFPower+0x34>)
 800663c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7f9 fd93 	bl	800016c <strlen>
 8006646:	0003      	movs	r3, r0
 8006648:	b29a      	uxth	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	0011      	movs	r1, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f7fe fc50 	bl	8004ef4 <ESP_Send>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d001      	beq.n	800665c <CheckRFPower+0x28>
    return true;
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800665c:	2300      	movs	r3, #0
  }
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b002      	add	sp, #8
 8006664:	bd80      	pop	{r7, pc}
 8006666:	46c0      	nop			@ (mov r8, r8)
 8006668:	0802a76c 	.word	0x0802a76c

0800666c <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8006672:	4b0b      	ldr	r3, [pc, #44]	@ (80066a0 <ATRestore+0x34>)
 8006674:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f7f9 fd77 	bl	800016c <strlen>
 800667e:	0003      	movs	r3, r0
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0011      	movs	r1, r2
 8006686:	0018      	movs	r0, r3
 8006688:	f7fe fc34 	bl	8004ef4 <ESP_Send>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d001      	beq.n	8006694 <ATRestore+0x28>
    return true;
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <ATRestore+0x2a>
  }
  else{
    return false;
 8006694:	2300      	movs	r3, #0
  }
}
 8006696:	0018      	movs	r0, r3
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	0802a77c 	.word	0x0802a77c

080066a4 <CWINIT>:

bool CWINIT(){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80066aa:	4b0b      	ldr	r3, [pc, #44]	@ (80066d8 <CWINIT+0x34>)
 80066ac:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7f9 fd5b 	bl	800016c <strlen>
 80066b6:	0003      	movs	r3, r0
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0011      	movs	r1, r2
 80066be:	0018      	movs	r0, r3
 80066c0:	f7fe fc18 	bl	8004ef4 <ESP_Send>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <CWINIT+0x28>
    return true;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <CWINIT+0x2a>
  }
  else{
    return false;
 80066cc:	2300      	movs	r3, #0
  }
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	0802a78c 	.word	0x0802a78c

080066dc <CWMODE1>:

bool CWMODE1(){
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80066e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <CWMODE1+0x34>)
 80066e4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7f9 fd3f 	bl	800016c <strlen>
 80066ee:	0003      	movs	r3, r0
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7fe fbfc 	bl	8004ef4 <ESP_Send>
 80066fc:	1e03      	subs	r3, r0, #0
 80066fe:	d001      	beq.n	8006704 <CWMODE1+0x28>
    return true;
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <CWMODE1+0x2a>
  }
  else{
    return false;
 8006704:	2300      	movs	r3, #0
  }
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b002      	add	sp, #8
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			@ (mov r8, r8)
 8006710:	0802a79c 	.word	0x0802a79c

08006714 <CWMODE2>:

bool CWMODE2(){
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <CWMODE2+0x34>)
 800671c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	0018      	movs	r0, r3
 8006722:	f7f9 fd23 	bl	800016c <strlen>
 8006726:	0003      	movs	r3, r0
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f7fe fbe0 	bl	8004ef4 <ESP_Send>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d001      	beq.n	800673c <CWMODE2+0x28>
    return true;
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <CWMODE2+0x2a>
  }
  else{
    return false;
 800673c:	2300      	movs	r3, #0
  }
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b002      	add	sp, #8
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			@ (mov r8, r8)
 8006748:	0802a7ac 	.word	0x0802a7ac

0800674c <CWAUTOCONN>:

bool CWAUTOCONN(){
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <CWAUTOCONN+0x34>)
 8006754:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	0018      	movs	r0, r3
 800675a:	f7f9 fd07 	bl	800016c <strlen>
 800675e:	0003      	movs	r3, r0
 8006760:	b29a      	uxth	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	0011      	movs	r1, r2
 8006766:	0018      	movs	r0, r3
 8006768:	f7fe fbc4 	bl	8004ef4 <ESP_Send>
 800676c:	1e03      	subs	r3, r0, #0
 800676e:	d001      	beq.n	8006774 <CWAUTOCONN+0x28>
    return true;
 8006770:	2301      	movs	r3, #1
 8006772:	e000      	b.n	8006776 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8006774:	2300      	movs	r3, #0
  }
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b002      	add	sp, #8
 800677c:	bd80      	pop	{r7, pc}
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	0802a7bc 	.word	0x0802a7bc

08006784 <CWJAP>:

bool CWJAP(){
 8006784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006786:	46c6      	mov	lr, r8
 8006788:	b500      	push	{lr}
 800678a:	b0a2      	sub	sp, #136	@ 0x88
 800678c:	af00      	add	r7, sp, #0
 800678e:	466b      	mov	r3, sp
 8006790:	4698      	mov	r8, r3
  beursTest = true;
 8006792:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <CWJAP+0xf4>)
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8006798:	2618      	movs	r6, #24
 800679a:	19bb      	adds	r3, r7, r6
 800679c:	2264      	movs	r2, #100	@ 0x64
 800679e:	2100      	movs	r1, #0
 80067a0:	0018      	movs	r0, r3
 80067a2:	f01e ff8d 	bl	80256c0 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80067a6:	4b35      	ldr	r3, [pc, #212]	@ (800687c <CWJAP+0xf8>)
 80067a8:	4a35      	ldr	r2, [pc, #212]	@ (8006880 <CWJAP+0xfc>)
 80067aa:	4936      	ldr	r1, [pc, #216]	@ (8006884 <CWJAP+0x100>)
 80067ac:	19b8      	adds	r0, r7, r6
 80067ae:	f01e fe1d 	bl	80253ec <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80067b2:	19bb      	adds	r3, r7, r6
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7f9 fcd9 	bl	800016c <strlen>
 80067ba:	0002      	movs	r2, r0
 80067bc:	216f      	movs	r1, #111	@ 0x6f
 80067be:	0030      	movs	r0, r6
 80067c0:	180b      	adds	r3, r1, r0
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80067c6:	180b      	adds	r3, r1, r0
 80067c8:	19db      	adds	r3, r3, r7
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	3301      	adds	r3, #1
 80067ce:	1e5a      	subs	r2, r3, #1
 80067d0:	2180      	movs	r1, #128	@ 0x80
 80067d2:	1879      	adds	r1, r7, r1
 80067d4:	600a      	str	r2, [r1, #0]
 80067d6:	001a      	movs	r2, r3
 80067d8:	60ba      	str	r2, [r7, #8]
 80067da:	2200      	movs	r2, #0
 80067dc:	60fa      	str	r2, [r7, #12]
 80067de:	68b8      	ldr	r0, [r7, #8]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	0002      	movs	r2, r0
 80067e4:	0f52      	lsrs	r2, r2, #29
 80067e6:	000e      	movs	r6, r1
 80067e8:	00f6      	lsls	r6, r6, #3
 80067ea:	617e      	str	r6, [r7, #20]
 80067ec:	697e      	ldr	r6, [r7, #20]
 80067ee:	4316      	orrs	r6, r2
 80067f0:	617e      	str	r6, [r7, #20]
 80067f2:	0002      	movs	r2, r0
 80067f4:	00d2      	lsls	r2, r2, #3
 80067f6:	613a      	str	r2, [r7, #16]
 80067f8:	001a      	movs	r2, r3
 80067fa:	603a      	str	r2, [r7, #0]
 80067fc:	2200      	movs	r2, #0
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	0002      	movs	r2, r0
 8006806:	0f52      	lsrs	r2, r2, #29
 8006808:	000e      	movs	r6, r1
 800680a:	00f5      	lsls	r5, r6, #3
 800680c:	4315      	orrs	r5, r2
 800680e:	0002      	movs	r2, r0
 8006810:	00d4      	lsls	r4, r2, #3
 8006812:	3307      	adds	r3, #7
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	466a      	mov	r2, sp
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	469d      	mov	sp, r3
 800681e:	466b      	mov	r3, sp
 8006820:	3300      	adds	r3, #0
 8006822:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8006824:	246f      	movs	r4, #111	@ 0x6f
 8006826:	2518      	movs	r5, #24
 8006828:	1963      	adds	r3, r4, r5
 800682a:	19db      	adds	r3, r3, r7
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	3301      	adds	r3, #1
 8006830:	001a      	movs	r2, r3
 8006832:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006834:	2100      	movs	r1, #0
 8006836:	0018      	movs	r0, r3
 8006838:	f01e ff42 	bl	80256c0 <memset>
  strncpy(atCommand, atCommandBuff, len);
 800683c:	1963      	adds	r3, r4, r5
 800683e:	19db      	adds	r3, r3, r7
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	1979      	adds	r1, r7, r5
 8006844:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006846:	0018      	movs	r0, r3
 8006848:	f01e ff61 	bl	802570e <strncpy>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800684c:	1963      	adds	r3, r4, r5
 800684e:	19db      	adds	r3, r3, r7
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b29a      	uxth	r2, r3
 8006854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006856:	0011      	movs	r1, r2
 8006858:	0018      	movs	r0, r3
 800685a:	f7fe fb4b 	bl	8004ef4 <ESP_Send>
 800685e:	1e03      	subs	r3, r0, #0
 8006860:	d001      	beq.n	8006866 <CWJAP+0xe2>
    return true;
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <CWJAP+0xe4>
  }
  else{
    return false;
 8006866:	2300      	movs	r3, #0
 8006868:	46c5      	mov	sp, r8
  }
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b022      	add	sp, #136	@ 0x88
 8006870:	bc80      	pop	{r7}
 8006872:	46b8      	mov	r8, r7
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	46c0      	nop			@ (mov r8, r8)
 8006878:	200005a5 	.word	0x200005a5
 800687c:	0802d700 	.word	0x0802d700
 8006880:	0802d6f4 	.word	0x0802d6f4
 8006884:	0802a7d0 	.word	0x0802a7d0

08006888 <CWMODE3>:

bool CWMODE3(){
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800688e:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <CWMODE3+0x34>)
 8006890:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fc69 	bl	800016c <strlen>
 800689a:	0003      	movs	r3, r0
 800689c:	b29a      	uxth	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	0011      	movs	r1, r2
 80068a2:	0018      	movs	r0, r3
 80068a4:	f7fe fb26 	bl	8004ef4 <ESP_Send>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d001      	beq.n	80068b0 <CWMODE3+0x28>
    return true;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <CWMODE3+0x2a>
  }
  else{
    return false;
 80068b0:	2300      	movs	r3, #0
  }
}
 80068b2:	0018      	movs	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	0802a7e8 	.word	0x0802a7e8

080068c0 <CWSTATE>:

bool CWSTATE(){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80068c6:	4b0b      	ldr	r3, [pc, #44]	@ (80068f4 <CWSTATE+0x34>)
 80068c8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f7f9 fc4d 	bl	800016c <strlen>
 80068d2:	0003      	movs	r3, r0
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	0011      	movs	r1, r2
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fe fb0a 	bl	8004ef4 <ESP_Send>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d001      	beq.n	80068e8 <CWSTATE+0x28>
    return true;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <CWSTATE+0x2a>
  }
  else{
    return false;
 80068e8:	2300      	movs	r3, #0
  }
}
 80068ea:	0018      	movs	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b002      	add	sp, #8
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			@ (mov r8, r8)
 80068f4:	0802a7f8 	.word	0x0802a7f8

080068f8 <CWSAP>:

bool CWSAP(){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <CWSAP+0x34>)
 8006900:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	0018      	movs	r0, r3
 8006906:	f7f9 fc31 	bl	800016c <strlen>
 800690a:	0003      	movs	r3, r0
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0011      	movs	r1, r2
 8006912:	0018      	movs	r0, r3
 8006914:	f7fe faee 	bl	8004ef4 <ESP_Send>
 8006918:	1e03      	subs	r3, r0, #0
 800691a:	d001      	beq.n	8006920 <CWSAP+0x28>
    return true;
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <CWSAP+0x2a>
  }
  else{
    return false;
 8006920:	2300      	movs	r3, #0
  }
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b002      	add	sp, #8
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	0802a808 	.word	0x0802a808

08006930 <CIPMUX>:

bool CIPMUX(){
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <CIPMUX+0x34>)
 8006938:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	0018      	movs	r0, r3
 800693e:	f7f9 fc15 	bl	800016c <strlen>
 8006942:	0003      	movs	r3, r0
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0011      	movs	r1, r2
 800694a:	0018      	movs	r0, r3
 800694c:	f7fe fad2 	bl	8004ef4 <ESP_Send>
 8006950:	1e03      	subs	r3, r0, #0
 8006952:	d001      	beq.n	8006958 <CIPMUX+0x28>
    return true;
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <CIPMUX+0x2a>
  }
  else{
    return false;
 8006958:	2300      	movs	r3, #0
  }
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b002      	add	sp, #8
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			@ (mov r8, r8)
 8006964:	0802a82c 	.word	0x0802a82c

08006968 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <WEBSERVER+0x34>)
 8006970:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0018      	movs	r0, r3
 8006976:	f7f9 fbf9 	bl	800016c <strlen>
 800697a:	0003      	movs	r3, r0
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	0011      	movs	r1, r2
 8006982:	0018      	movs	r0, r3
 8006984:	f7fe fab6 	bl	8004ef4 <ESP_Send>
 8006988:	1e03      	subs	r3, r0, #0
 800698a:	d001      	beq.n	8006990 <WEBSERVER+0x28>
    return true;
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006990:	2300      	movs	r3, #0
  }
}
 8006992:	0018      	movs	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	b002      	add	sp, #8
 8006998:	bd80      	pop	{r7, pc}
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	0802a83c 	.word	0x0802a83c

080069a0 <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af02      	add	r7, sp, #8
//  char atCommandBuff[256];
  bool txresult = false;
 80069a6:	1cfb      	adds	r3, r7, #3
 80069a8:	2200      	movs	r2, #0
 80069aa:	701a      	strb	r2, [r3, #0]

//  memset(atCommandBuff, '\0', 256);
  uint16_t length = CreateMessage(beurs, &txresult, false);
 80069ac:	4b26      	ldr	r3, [pc, #152]	@ (8006a48 <HTTPCPOST+0xa8>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	1dbc      	adds	r4, r7, #6
 80069b2:	1cf9      	adds	r1, r7, #3
 80069b4:	2200      	movs	r2, #0
 80069b6:	0018      	movs	r0, r3
 80069b8:	f7fe fca0 	bl	80052fc <CreateMessage>
 80069bc:	0003      	movs	r3, r0
 80069be:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80069c0:	4b21      	ldr	r3, [pc, #132]	@ (8006a48 <HTTPCPOST+0xa8>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <HTTPCPOST+0x38>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
    sprintf(message, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80069c8:	1dbb      	adds	r3, r7, #6
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <HTTPCPOST+0xac>)
 80069ce:	4920      	ldr	r1, [pc, #128]	@ (8006a50 <HTTPCPOST+0xb0>)
 80069d0:	4820      	ldr	r0, [pc, #128]	@ (8006a54 <HTTPCPOST+0xb4>)
 80069d2:	f01e fd0b 	bl	80253ec <siprintf>
 80069d6:	e015      	b.n	8006a04 <HTTPCPOST+0x64>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80069d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006a58 <HTTPCPOST+0xb8>)
 80069da:	4820      	ldr	r0, [pc, #128]	@ (8006a5c <HTTPCPOST+0xbc>)
 80069dc:	220c      	movs	r2, #12
 80069de:	0019      	movs	r1, r3
 80069e0:	f004 fe72 	bl	800b6c8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80069e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a58 <HTTPCPOST+0xb8>)
 80069e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a60 <HTTPCPOST+0xc0>)
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f7fe fc62 	bl	80052b4 <uint8ArrayToString>
//    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
    sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80069f0:	1dbb      	adds	r3, r7, #6
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	4c1a      	ldr	r4, [pc, #104]	@ (8006a60 <HTTPCPOST+0xc0>)
 80069f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <HTTPCPOST+0xc4>)
 80069f8:	491b      	ldr	r1, [pc, #108]	@ (8006a68 <HTTPCPOST+0xc8>)
 80069fa:	4816      	ldr	r0, [pc, #88]	@ (8006a54 <HTTPCPOST+0xb4>)
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0023      	movs	r3, r4
 8006a00:	f01e fcf4 	bl	80253ec <siprintf>
  }
//  uint16_t len = strlen(atCommandBuff);
  uint16_t len = strlen(message);
 8006a04:	4b13      	ldr	r3, [pc, #76]	@ (8006a54 <HTTPCPOST+0xb4>)
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7f9 fbb0 	bl	800016c <strlen>
 8006a0c:	0002      	movs	r2, r0
 8006a0e:	1d3b      	adds	r3, r7, #4
 8006a10:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d bool value of tx result %d", len, txresult);
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	8818      	ldrh	r0, [r3, #0]
 8006a16:	1cfb      	adds	r3, r7, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	4a14      	ldr	r2, [pc, #80]	@ (8006a6c <HTTPCPOST+0xcc>)
 8006a1c:	4914      	ldr	r1, [pc, #80]	@ (8006a70 <HTTPCPOST+0xd0>)
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	0003      	movs	r3, r0
 8006a22:	2003      	movs	r0, #3
 8006a24:	f00c fb76 	bl	8013114 <CreateLine>
//  if(ESP_Send((uint8_t*)atCommandBuff, len)){
  if(ESP_Send((uint8_t*)message, len)){
 8006a28:	1d3b      	adds	r3, r7, #4
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	4b09      	ldr	r3, [pc, #36]	@ (8006a54 <HTTPCPOST+0xb4>)
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f7fe fa5f 	bl	8004ef4 <ESP_Send>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d001      	beq.n	8006a3e <HTTPCPOST+0x9e>
    return true;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e000      	b.n	8006a40 <HTTPCPOST+0xa0>
  }
  else{
    return false;
 8006a3e:	2300      	movs	r3, #0
  }
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b003      	add	sp, #12
 8006a46:	bd90      	pop	{r4, r7, pc}
 8006a48:	200005a6 	.word	0x200005a6
 8006a4c:	0802d71c 	.word	0x0802d71c
 8006a50:	0802a854 	.word	0x0802a854
 8006a54:	200005cc 	.word	0x200005cc
 8006a58:	2000077c 	.word	0x2000077c
 8006a5c:	08080000 	.word	0x08080000
 8006a60:	20000788 	.word	0x20000788
 8006a64:	0802d758 	.word	0x0802d758
 8006a68:	0802a88c 	.word	0x0802a88c
 8006a6c:	0802a8cc 	.word	0x0802a8cc
 8006a70:	08029b40 	.word	0x08029b40

08006a74 <SENDDATA>:

bool SENDDATA(){
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af02      	add	r7, sp, #8
  bool result = false;
 8006a7a:	1dfb      	adds	r3, r7, #7
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	701a      	strb	r2, [r3, #0]
  }
  else{
    return false;
  }
*/
  txLength = CreateMessage(beurs, &result, true);
 8006a80:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <SENDDATA+0x48>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	1df9      	adds	r1, r7, #7
 8006a86:	2201      	movs	r2, #1
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f7fe fc37 	bl	80052fc <CreateMessage>
 8006a8e:	0003      	movs	r3, r0
 8006a90:	001a      	movs	r2, r3
 8006a92:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <SENDDATA+0x4c>)
 8006a94:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006a96:	1dfb      	adds	r3, r7, #7
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	4b08      	ldr	r3, [pc, #32]	@ (8006ac0 <SENDDATA+0x4c>)
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	@ (8006ac4 <SENDDATA+0x50>)
 8006aa2:	4909      	ldr	r1, [pc, #36]	@ (8006ac8 <SENDDATA+0x54>)
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0003      	movs	r3, r0
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	f00c fb33 	bl	8013114 <CreateLine>
  return result;
 8006aae:	1dfb      	adds	r3, r7, #7
 8006ab0:	781b      	ldrb	r3, [r3, #0]
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	46c0      	nop			@ (mov r8, r8)
 8006abc:	200005a6 	.word	0x200005a6
 8006ac0:	200005c0 	.word	0x200005c0
 8006ac4:	0802a928 	.word	0x0802a928
 8006ac8:	08029b40 	.word	0x08029b40

08006acc <SLEEP>:

bool SLEEP(){
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <SLEEP+0x34>)
 8006ad4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7f9 fb47 	bl	800016c <strlen>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f7fe fa04 	bl	8004ef4 <ESP_Send>
 8006aec:	1e03      	subs	r3, r0, #0
 8006aee:	d001      	beq.n	8006af4 <SLEEP+0x28>
    return true;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <SLEEP+0x2a>
  }
  else{
    return false;
 8006af4:	2300      	movs	r3, #0
  }
}
 8006af6:	0018      	movs	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b002      	add	sp, #8
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	46c0      	nop			@ (mov r8, r8)
 8006b00:	0802a964 	.word	0x0802a964

08006b04 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <CIPSNTPCFG+0x3c>)
 8006b0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7f9 fb2b 	bl	800016c <strlen>
 8006b16:	0003      	movs	r3, r0
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	0011      	movs	r1, r2
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7fe f9e8 	bl	8004ef4 <ESP_Send>
 8006b24:	1e03      	subs	r3, r0, #0
 8006b26:	d006      	beq.n	8006b36 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006b28:	23fa      	movs	r3, #250	@ 0xfa
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f00d f83b 	bl	8013ba8 <HAL_Delay>
    return true;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006b36:	2300      	movs	r3, #0
  }
}
 8006b38:	0018      	movs	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	b002      	add	sp, #8
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	0802a974 	.word	0x0802a974

08006b44 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b78 <CIPSNTPTIME+0x34>)
 8006b4c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7f9 fb0b 	bl	800016c <strlen>
 8006b56:	0003      	movs	r3, r0
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	0011      	movs	r1, r2
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7fe f9c8 	bl	8004ef4 <ESP_Send>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d001      	beq.n	8006b6c <CIPSNTPTIME+0x28>
    return true;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e000      	b.n	8006b6e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006b6c:	2300      	movs	r3, #0
  }
}
 8006b6e:	0018      	movs	r0, r3
 8006b70:	46bd      	mov	sp, r7
 8006b72:	b002      	add	sp, #8
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	46c0      	nop			@ (mov r8, r8)
 8006b78:	0802a9c4 	.word	0x0802a9c4

08006b7c <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <CIPSNTPINTV+0x34>)
 8006b84:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7f9 faef 	bl	800016c <strlen>
 8006b8e:	0003      	movs	r3, r0
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7fe f9ac 	bl	8004ef4 <ESP_Send>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d001      	beq.n	8006ba4 <CIPSNTPINTV+0x28>
    return true;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006ba4:	2300      	movs	r3, #0
  }
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	0802a9d8 	.word	0x0802a9d8

08006bb4 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006bb4:	b5b0      	push	{r4, r5, r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	0002      	movs	r2, r0
 8006bbc:	1dfb      	adds	r3, r7, #7
 8006bbe:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d74 <DMA_ProcessBuffer+0x1c0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	200e      	movs	r0, #14
 8006bca:	183b      	adds	r3, r7, r0
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	0049      	lsls	r1, r1, #1
 8006bd0:	1a8a      	subs	r2, r1, r2
 8006bd2:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006bd4:	230d      	movs	r3, #13
 8006bd6:	18fb      	adds	r3, r7, r3
 8006bd8:	2203      	movs	r2, #3
 8006bda:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006bdc:	183b      	adds	r3, r7, r0
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	2380      	movs	r3, #128	@ 0x80
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d903      	bls.n	8006bf0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006be8:	183b      	adds	r3, r7, r0
 8006bea:	2280      	movs	r2, #128	@ 0x80
 8006bec:	0052      	lsls	r2, r2, #1
 8006bee:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006bf0:	4b61      	ldr	r3, [pc, #388]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	001a      	movs	r2, r3
 8006bf8:	230e      	movs	r3, #14
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d131      	bne.n	8006c66 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006c02:	4b5e      	ldr	r3, [pc, #376]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b14      	cmp	r3, #20
 8006c08:	d91b      	bls.n	8006c42 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006c10:	4b5b      	ldr	r3, [pc, #364]	@ (8006d80 <DMA_ProcessBuffer+0x1cc>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d107      	bne.n	8006c28 <DMA_ProcessBuffer+0x74>
 8006c18:	4b5a      	ldr	r3, [pc, #360]	@ (8006d84 <DMA_ProcessBuffer+0x1d0>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006c20:	230d      	movs	r3, #13
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	2207      	movs	r2, #7
 8006c26:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006c28:	4b55      	ldr	r3, [pc, #340]	@ (8006d80 <DMA_ProcessBuffer+0x1cc>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d103      	bne.n	8006c38 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006c30:	4b55      	ldr	r3, [pc, #340]	@ (8006d88 <DMA_ProcessBuffer+0x1d4>)
 8006c32:	220b      	movs	r2, #11
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e016      	b.n	8006c66 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006c38:	230d      	movs	r3, #13
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	2206      	movs	r2, #6
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e011      	b.n	8006c66 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006c42:	4b4e      	ldr	r3, [pc, #312]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c4c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006c4e:	f00c ffa1 	bl	8013b94 <HAL_GetTick>
 8006c52:	0003      	movs	r3, r0
 8006c54:	33f5      	adds	r3, #245	@ 0xf5
 8006c56:	33ff      	adds	r3, #255	@ 0xff
 8006c58:	001a      	movs	r2, r3
 8006c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8006d8c <DMA_ProcessBuffer+0x1d8>)
 8006c5c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006c5e:	230d      	movs	r3, #13
 8006c60:	18fb      	adds	r3, r7, r3
 8006c62:	2204      	movs	r2, #4
 8006c64:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006c66:	4b44      	ldr	r3, [pc, #272]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	001a      	movs	r2, r3
 8006c6e:	210e      	movs	r1, #14
 8006c70:	187b      	adds	r3, r7, r1
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d100      	bne.n	8006c7a <DMA_ProcessBuffer+0xc6>
 8006c78:	e075      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006c7a:	4b40      	ldr	r3, [pc, #256]	@ (8006d7c <DMA_ProcessBuffer+0x1c8>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006c80:	4b43      	ldr	r3, [pc, #268]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	4b3c      	ldr	r3, [pc, #240]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d109      	bne.n	8006ca4 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	4b3e      	ldr	r3, [pc, #248]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006c98:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006c9a:	230d      	movs	r3, #13
 8006c9c:	18fb      	adds	r3, r7, r3
 8006c9e:	220a      	movs	r2, #10
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	e060      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	001a      	movs	r2, r3
 8006cac:	210e      	movs	r1, #14
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006cb6:	187b      	adds	r3, r7, r1
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b34      	ldr	r3, [pc, #208]	@ (8006d90 <DMA_ProcessBuffer+0x1dc>)
 8006cbe:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006cc0:	230d      	movs	r3, #13
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e04d      	b.n	8006d66 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006cca:	4b2b      	ldr	r3, [pc, #172]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	210e      	movs	r1, #14
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d917      	bls.n	8006d0c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006cdc:	4b26      	ldr	r3, [pc, #152]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006ce6:	18d0      	adds	r0, r2, r3
 8006ce8:	4b23      	ldr	r3, [pc, #140]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	001a      	movs	r2, r3
 8006cf0:	187b      	adds	r3, r7, r1
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	b299      	uxth	r1, r3
 8006cf8:	230d      	movs	r3, #13
 8006cfa:	18fc      	adds	r4, r7, r3
 8006cfc:	1dfb      	adds	r3, r7, #7
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	001a      	movs	r2, r3
 8006d02:	f7ff fa73 	bl	80061ec <ParseBuffer>
 8006d06:	0003      	movs	r3, r0
 8006d08:	7023      	strb	r3, [r4, #0]
 8006d0a:	e026      	b.n	8006d5a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	001a      	movs	r2, r3
 8006d14:	4b1f      	ldr	r3, [pc, #124]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006d16:	18d0      	adds	r0, r2, r3
 8006d18:	4b17      	ldr	r3, [pc, #92]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	001a      	movs	r2, r3
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	1a9b      	subs	r3, r3, r2
 8006d26:	b299      	uxth	r1, r3
 8006d28:	250d      	movs	r5, #13
 8006d2a:	197c      	adds	r4, r7, r5
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	001a      	movs	r2, r3
 8006d32:	f7ff fa5b 	bl	80061ec <ParseBuffer>
 8006d36:	0003      	movs	r3, r0
 8006d38:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006d3a:	210e      	movs	r1, #14
 8006d3c:	187b      	adds	r3, r7, r1
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006d44:	197c      	adds	r4, r7, r5
 8006d46:	1dfb      	adds	r3, r7, #7
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	8819      	ldrh	r1, [r3, #0]
 8006d4e:	4b11      	ldr	r3, [pc, #68]	@ (8006d94 <DMA_ProcessBuffer+0x1e0>)
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7ff fa4b 	bl	80061ec <ParseBuffer>
 8006d56:	0003      	movs	r3, r0
 8006d58:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006d5a:	230e      	movs	r3, #14
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <DMA_ProcessBuffer+0x1c4>)
 8006d64:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006d66:	230d      	movs	r3, #13
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	781b      	ldrb	r3, [r3, #0]
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b004      	add	sp, #16
 8006d72:	bdb0      	pop	{r4, r5, r7, pc}
 8006d74:	20002168 	.word	0x20002168
 8006d78:	200007a1 	.word	0x200007a1
 8006d7c:	20000674 	.word	0x20000674
 8006d80:	20000676 	.word	0x20000676
 8006d84:	20000001 	.word	0x20000001
 8006d88:	2000002c 	.word	0x2000002c
 8006d8c:	2000066c 	.word	0x2000066c
 8006d90:	200007a2 	.word	0x200007a2
 8006d94:	200004a0 	.word	0x200004a0

08006d98 <clearDMABuffer>:

void clearDMABuffer(){
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	005a      	lsls	r2, r3, #1
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <clearDMABuffer+0x18>)
 8006da2:	2100      	movs	r1, #0
 8006da4:	0018      	movs	r0, r3
 8006da6:	f01e fc8b 	bl	80256c0 <memset>
}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	200004a0 	.word	0x200004a0

08006db4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	0002      	movs	r2, r0
 8006dbc:	1dfb      	adds	r3, r7, #7
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	1dbb      	adds	r3, r7, #6
 8006dc2:	1c0a      	adds	r2, r1, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006dc6:	210f      	movs	r1, #15
 8006dc8:	187b      	adds	r3, r7, r1
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006dce:	1dbb      	adds	r3, r7, #6
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8006dd6:	187b      	adds	r3, r7, r1
 8006dd8:	1dfa      	adds	r2, r7, #7
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	4251      	negs	r1, r2
 8006dde:	414a      	adcs	r2, r1
 8006de0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8006de2:	1dbb      	adds	r3, r7, #6
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d107      	bne.n	8006dfa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8006dea:	230f      	movs	r3, #15
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	1dfa      	adds	r2, r7, #7
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	3a02      	subs	r2, #2
 8006df4:	4251      	negs	r1, r2
 8006df6:	414a      	adcs	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8006dfa:	1dbb      	adds	r3, r7, #6
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d107      	bne.n	8006e12 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8006e02:	230f      	movs	r3, #15
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	1dfa      	adds	r2, r7, #7
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	3a05      	subs	r2, #5
 8006e0c:	4251      	negs	r1, r2
 8006e0e:	414a      	adcs	r2, r1
 8006e10:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8006e12:	1dbb      	adds	r3, r7, #6
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b05      	cmp	r3, #5
 8006e18:	d107      	bne.n	8006e2a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8006e1a:	230f      	movs	r3, #15
 8006e1c:	18fb      	adds	r3, r7, r3
 8006e1e:	1dfa      	adds	r2, r7, #7
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	3a0b      	subs	r2, #11
 8006e24:	4251      	negs	r1, r2
 8006e26:	414a      	adcs	r2, r1
 8006e28:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	781b      	ldrb	r3, [r3, #0]
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <AT_Send>:

bool AT_Send(AT_Commands state){
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	0002      	movs	r2, r0
 8006e40:	1dfb      	adds	r3, r7, #7
 8006e42:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8006e44:	230f      	movs	r3, #15
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
  switch (state){
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b14      	cmp	r3, #20
 8006e52:	d900      	bls.n	8006e56 <AT_Send+0x1e>
 8006e54:	e19e      	b.n	8007194 <AT_Send+0x35c>
 8006e56:	009a      	lsls	r2, r3, #2
 8006e58:	4bd2      	ldr	r3, [pc, #840]	@ (80071a4 <AT_Send+0x36c>)
 8006e5a:	18d3      	adds	r3, r2, r3
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8006e60:	4bd1      	ldr	r3, [pc, #836]	@ (80071a8 <AT_Send+0x370>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	0018      	movs	r0, r3
 8006e66:	f00c f8ff 	bl	8013068 <TimestampIsReached>
 8006e6a:	1e03      	subs	r3, r0, #0
 8006e6c:	d100      	bne.n	8006e70 <AT_Send+0x38>
 8006e6e:	e190      	b.n	8007192 <AT_Send+0x35a>
    Debug("AT_WAKEUP");
 8006e70:	4ace      	ldr	r2, [pc, #824]	@ (80071ac <AT_Send+0x374>)
 8006e72:	4bcf      	ldr	r3, [pc, #828]	@ (80071b0 <AT_Send+0x378>)
 8006e74:	0019      	movs	r1, r3
 8006e76:	2003      	movs	r0, #3
 8006e78:	f00c f94c 	bl	8013114 <CreateLine>
    ATCommandSend = PollAwake();
 8006e7c:	230f      	movs	r3, #15
 8006e7e:	18fc      	adds	r4, r7, r3
 8006e80:	f7ff fba0 	bl	80065c4 <PollAwake>
 8006e84:	0003      	movs	r3, r0
 8006e86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006e88:	f00c fe84 	bl	8013b94 <HAL_GetTick>
 8006e8c:	0003      	movs	r3, r0
 8006e8e:	3332      	adds	r3, #50	@ 0x32
 8006e90:	001a      	movs	r2, r3
 8006e92:	4bc5      	ldr	r3, [pc, #788]	@ (80071a8 <AT_Send+0x370>)
 8006e94:	601a      	str	r2, [r3, #0]
  }
  break;
 8006e96:	e17c      	b.n	8007192 <AT_Send+0x35a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8006e98:	4ac6      	ldr	r2, [pc, #792]	@ (80071b4 <AT_Send+0x37c>)
 8006e9a:	4bc5      	ldr	r3, [pc, #788]	@ (80071b0 <AT_Send+0x378>)
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	2003      	movs	r0, #3
 8006ea0:	f00c f938 	bl	8013114 <CreateLine>
    ATCommandSend = RFPower();
 8006ea4:	230f      	movs	r3, #15
 8006ea6:	18fc      	adds	r4, r7, r3
 8006ea8:	f7ff fba8 	bl	80065fc <RFPower>
 8006eac:	0003      	movs	r3, r0
 8006eae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006eb0:	f00c fe70 	bl	8013b94 <HAL_GetTick>
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	330a      	adds	r3, #10
 8006eb8:	001a      	movs	r2, r3
 8006eba:	4bbb      	ldr	r3, [pc, #748]	@ (80071a8 <AT_Send+0x370>)
 8006ebc:	601a      	str	r2, [r3, #0]
    break;
 8006ebe:	e169      	b.n	8007194 <AT_Send+0x35c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8006ec0:	4abd      	ldr	r2, [pc, #756]	@ (80071b8 <AT_Send+0x380>)
 8006ec2:	4bbb      	ldr	r3, [pc, #748]	@ (80071b0 <AT_Send+0x378>)
 8006ec4:	0019      	movs	r1, r3
 8006ec6:	2003      	movs	r0, #3
 8006ec8:	f00c f924 	bl	8013114 <CreateLine>
    ATCommandSend = CheckRFPower();
 8006ecc:	230f      	movs	r3, #15
 8006ece:	18fc      	adds	r4, r7, r3
 8006ed0:	f7ff fbb0 	bl	8006634 <CheckRFPower>
 8006ed4:	0003      	movs	r3, r0
 8006ed6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006ed8:	f00c fe5c 	bl	8013b94 <HAL_GetTick>
 8006edc:	0003      	movs	r3, r0
 8006ede:	330a      	adds	r3, #10
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	4bb1      	ldr	r3, [pc, #708]	@ (80071a8 <AT_Send+0x370>)
 8006ee4:	601a      	str	r2, [r3, #0]
    break;
 8006ee6:	e155      	b.n	8007194 <AT_Send+0x35c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8006ee8:	4ab4      	ldr	r2, [pc, #720]	@ (80071bc <AT_Send+0x384>)
 8006eea:	4bb1      	ldr	r3, [pc, #708]	@ (80071b0 <AT_Send+0x378>)
 8006eec:	0019      	movs	r1, r3
 8006eee:	2003      	movs	r0, #3
 8006ef0:	f00c f910 	bl	8013114 <CreateLine>
    ATCommandSend = ATRestore();
 8006ef4:	230f      	movs	r3, #15
 8006ef6:	18fc      	adds	r4, r7, r3
 8006ef8:	f7ff fbb8 	bl	800666c <ATRestore>
 8006efc:	0003      	movs	r3, r0
 8006efe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006f00:	f00c fe48 	bl	8013b94 <HAL_GetTick>
 8006f04:	0003      	movs	r3, r0
 8006f06:	3332      	adds	r3, #50	@ 0x32
 8006f08:	001a      	movs	r2, r3
 8006f0a:	4ba7      	ldr	r3, [pc, #668]	@ (80071a8 <AT_Send+0x370>)
 8006f0c:	601a      	str	r2, [r3, #0]
    break;
 8006f0e:	e141      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8006f10:	4aab      	ldr	r2, [pc, #684]	@ (80071c0 <AT_Send+0x388>)
 8006f12:	4ba7      	ldr	r3, [pc, #668]	@ (80071b0 <AT_Send+0x378>)
 8006f14:	0019      	movs	r1, r3
 8006f16:	2003      	movs	r0, #3
 8006f18:	f00c f8fc 	bl	8013114 <CreateLine>
    ATCommandSend = CWINIT();
 8006f1c:	230f      	movs	r3, #15
 8006f1e:	18fc      	adds	r4, r7, r3
 8006f20:	f7ff fbc0 	bl	80066a4 <CWINIT>
 8006f24:	0003      	movs	r3, r0
 8006f26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006f28:	f00c fe34 	bl	8013b94 <HAL_GetTick>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	33f5      	adds	r3, #245	@ 0xf5
 8006f30:	33ff      	adds	r3, #255	@ 0xff
 8006f32:	001a      	movs	r2, r3
 8006f34:	4b9c      	ldr	r3, [pc, #624]	@ (80071a8 <AT_Send+0x370>)
 8006f36:	601a      	str	r2, [r3, #0]
    break;
 8006f38:	e12c      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8006f3a:	4aa2      	ldr	r2, [pc, #648]	@ (80071c4 <AT_Send+0x38c>)
 8006f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80071b0 <AT_Send+0x378>)
 8006f3e:	0019      	movs	r1, r3
 8006f40:	2003      	movs	r0, #3
 8006f42:	f00c f8e7 	bl	8013114 <CreateLine>
    ATCommandSend = CWSTATE();
 8006f46:	230f      	movs	r3, #15
 8006f48:	18fc      	adds	r4, r7, r3
 8006f4a:	f7ff fcb9 	bl	80068c0 <CWSTATE>
 8006f4e:	0003      	movs	r3, r0
 8006f50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8006f52:	f00c fe1f 	bl	8013b94 <HAL_GetTick>
 8006f56:	0003      	movs	r3, r0
 8006f58:	33f5      	adds	r3, #245	@ 0xf5
 8006f5a:	33ff      	adds	r3, #255	@ 0xff
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	4b92      	ldr	r3, [pc, #584]	@ (80071a8 <AT_Send+0x370>)
 8006f60:	601a      	str	r2, [r3, #0]
    break;
 8006f62:	e117      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8006f64:	4a98      	ldr	r2, [pc, #608]	@ (80071c8 <AT_Send+0x390>)
 8006f66:	4b92      	ldr	r3, [pc, #584]	@ (80071b0 <AT_Send+0x378>)
 8006f68:	0019      	movs	r1, r3
 8006f6a:	2003      	movs	r0, #3
 8006f6c:	f00c f8d2 	bl	8013114 <CreateLine>
    ATCommandSend = CWMODE1();
 8006f70:	230f      	movs	r3, #15
 8006f72:	18fc      	adds	r4, r7, r3
 8006f74:	f7ff fbb2 	bl	80066dc <CWMODE1>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006f7c:	f00c fe0a 	bl	8013b94 <HAL_GetTick>
 8006f80:	0003      	movs	r3, r0
 8006f82:	330a      	adds	r3, #10
 8006f84:	001a      	movs	r2, r3
 8006f86:	4b88      	ldr	r3, [pc, #544]	@ (80071a8 <AT_Send+0x370>)
 8006f88:	601a      	str	r2, [r3, #0]
    break;
 8006f8a:	e103      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8006f8c:	4a8e      	ldr	r2, [pc, #568]	@ (80071c8 <AT_Send+0x390>)
 8006f8e:	4b88      	ldr	r3, [pc, #544]	@ (80071b0 <AT_Send+0x378>)
 8006f90:	0019      	movs	r1, r3
 8006f92:	2003      	movs	r0, #3
 8006f94:	f00c f8be 	bl	8013114 <CreateLine>
    ATCommandSend = CWMODE2();
 8006f98:	230f      	movs	r3, #15
 8006f9a:	18fc      	adds	r4, r7, r3
 8006f9c:	f7ff fbba 	bl	8006714 <CWMODE2>
 8006fa0:	0003      	movs	r3, r0
 8006fa2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fa4:	f00c fdf6 	bl	8013b94 <HAL_GetTick>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	330a      	adds	r3, #10
 8006fac:	001a      	movs	r2, r3
 8006fae:	4b7e      	ldr	r3, [pc, #504]	@ (80071a8 <AT_Send+0x370>)
 8006fb0:	601a      	str	r2, [r3, #0]
    break;
 8006fb2:	e0ef      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8006fb4:	4a85      	ldr	r2, [pc, #532]	@ (80071cc <AT_Send+0x394>)
 8006fb6:	4b7e      	ldr	r3, [pc, #504]	@ (80071b0 <AT_Send+0x378>)
 8006fb8:	0019      	movs	r1, r3
 8006fba:	2003      	movs	r0, #3
 8006fbc:	f00c f8aa 	bl	8013114 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8006fc0:	230f      	movs	r3, #15
 8006fc2:	18fc      	adds	r4, r7, r3
 8006fc4:	f7ff fbc2 	bl	800674c <CWAUTOCONN>
 8006fc8:	0003      	movs	r3, r0
 8006fca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8006fcc:	f00c fde2 	bl	8013b94 <HAL_GetTick>
 8006fd0:	0003      	movs	r3, r0
 8006fd2:	330a      	adds	r3, #10
 8006fd4:	001a      	movs	r2, r3
 8006fd6:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <AT_Send+0x370>)
 8006fd8:	601a      	str	r2, [r3, #0]
    break;
 8006fda:	e0db      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8006fdc:	4a7c      	ldr	r2, [pc, #496]	@ (80071d0 <AT_Send+0x398>)
 8006fde:	4b74      	ldr	r3, [pc, #464]	@ (80071b0 <AT_Send+0x378>)
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	2003      	movs	r0, #3
 8006fe4:	f00c f896 	bl	8013114 <CreateLine>
    ATCommandSend = CWJAP();
 8006fe8:	230f      	movs	r3, #15
 8006fea:	18fc      	adds	r4, r7, r3
 8006fec:	f7ff fbca 	bl	8006784 <CWJAP>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8006ff4:	f00c fdce 	bl	8013b94 <HAL_GetTick>
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	3332      	adds	r3, #50	@ 0x32
 8006ffc:	001a      	movs	r2, r3
 8006ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80071a8 <AT_Send+0x370>)
 8007000:	601a      	str	r2, [r3, #0]
    break;
 8007002:	e0c7      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8007004:	4a73      	ldr	r2, [pc, #460]	@ (80071d4 <AT_Send+0x39c>)
 8007006:	4b6a      	ldr	r3, [pc, #424]	@ (80071b0 <AT_Send+0x378>)
 8007008:	0019      	movs	r1, r3
 800700a:	2003      	movs	r0, #3
 800700c:	f00c f882 	bl	8013114 <CreateLine>
    ATCommandSend = CWMODE3();
 8007010:	230f      	movs	r3, #15
 8007012:	18fc      	adds	r4, r7, r3
 8007014:	f7ff fc38 	bl	8006888 <CWMODE3>
 8007018:	0003      	movs	r3, r0
 800701a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800701c:	f00c fdba 	bl	8013b94 <HAL_GetTick>
 8007020:	0003      	movs	r3, r0
 8007022:	330a      	adds	r3, #10
 8007024:	001a      	movs	r2, r3
 8007026:	4b60      	ldr	r3, [pc, #384]	@ (80071a8 <AT_Send+0x370>)
 8007028:	601a      	str	r2, [r3, #0]
    break;
 800702a:	e0b3      	b.n	8007194 <AT_Send+0x35c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800702c:	4a6a      	ldr	r2, [pc, #424]	@ (80071d8 <AT_Send+0x3a0>)
 800702e:	4b60      	ldr	r3, [pc, #384]	@ (80071b0 <AT_Send+0x378>)
 8007030:	0019      	movs	r1, r3
 8007032:	2003      	movs	r0, #3
 8007034:	f00c f86e 	bl	8013114 <CreateLine>
    ATCommandSend = CWSAP();
 8007038:	230f      	movs	r3, #15
 800703a:	18fc      	adds	r4, r7, r3
 800703c:	f7ff fc5c 	bl	80068f8 <CWSAP>
 8007040:	0003      	movs	r3, r0
 8007042:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007044:	f00c fda6 	bl	8013b94 <HAL_GetTick>
 8007048:	0003      	movs	r3, r0
 800704a:	330a      	adds	r3, #10
 800704c:	001a      	movs	r2, r3
 800704e:	4b56      	ldr	r3, [pc, #344]	@ (80071a8 <AT_Send+0x370>)
 8007050:	601a      	str	r2, [r3, #0]
    break;
 8007052:	e09f      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 8007054:	4a61      	ldr	r2, [pc, #388]	@ (80071dc <AT_Send+0x3a4>)
 8007056:	4b56      	ldr	r3, [pc, #344]	@ (80071b0 <AT_Send+0x378>)
 8007058:	0019      	movs	r1, r3
 800705a:	2003      	movs	r0, #3
 800705c:	f00c f85a 	bl	8013114 <CreateLine>
    ATCommandSend = CIPMUX();
 8007060:	230f      	movs	r3, #15
 8007062:	18fc      	adds	r4, r7, r3
 8007064:	f7ff fc64 	bl	8006930 <CIPMUX>
 8007068:	0003      	movs	r3, r0
 800706a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800706c:	f00c fd92 	bl	8013b94 <HAL_GetTick>
 8007070:	0003      	movs	r3, r0
 8007072:	330a      	adds	r3, #10
 8007074:	001a      	movs	r2, r3
 8007076:	4b4c      	ldr	r3, [pc, #304]	@ (80071a8 <AT_Send+0x370>)
 8007078:	601a      	str	r2, [r3, #0]
    break;
 800707a:	e08b      	b.n	8007194 <AT_Send+0x35c>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 800707c:	4a58      	ldr	r2, [pc, #352]	@ (80071e0 <AT_Send+0x3a8>)
 800707e:	4b4c      	ldr	r3, [pc, #304]	@ (80071b0 <AT_Send+0x378>)
 8007080:	0019      	movs	r1, r3
 8007082:	2003      	movs	r0, #3
 8007084:	f00c f846 	bl	8013114 <CreateLine>
    ATCommandSend = WEBSERVER();
 8007088:	230f      	movs	r3, #15
 800708a:	18fc      	adds	r4, r7, r3
 800708c:	f7ff fc6c 	bl	8006968 <WEBSERVER>
 8007090:	0003      	movs	r3, r0
 8007092:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007094:	f00c fd7e 	bl	8013b94 <HAL_GetTick>
 8007098:	0003      	movs	r3, r0
 800709a:	330a      	adds	r3, #10
 800709c:	001a      	movs	r2, r3
 800709e:	4b42      	ldr	r3, [pc, #264]	@ (80071a8 <AT_Send+0x370>)
 80070a0:	601a      	str	r2, [r3, #0]
    break;
 80070a2:	e077      	b.n	8007194 <AT_Send+0x35c>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80070a4:	230f      	movs	r3, #15
 80070a6:	18fc      	adds	r4, r7, r3
 80070a8:	f7ff fc7a 	bl	80069a0 <HTTPCPOST>
 80070ac:	0003      	movs	r3, r0
 80070ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80070b0:	f00c fd70 	bl	8013b94 <HAL_GetTick>
 80070b4:	0003      	movs	r3, r0
 80070b6:	33f5      	adds	r3, #245	@ 0xf5
 80070b8:	33ff      	adds	r3, #255	@ 0xff
 80070ba:	001a      	movs	r2, r3
 80070bc:	4b3a      	ldr	r3, [pc, #232]	@ (80071a8 <AT_Send+0x370>)
 80070be:	601a      	str	r2, [r3, #0]
    break;
 80070c0:	e068      	b.n	8007194 <AT_Send+0x35c>

  case AT_SENDDATA:
    Debug("Send the data");
 80070c2:	4a48      	ldr	r2, [pc, #288]	@ (80071e4 <AT_Send+0x3ac>)
 80070c4:	4b3a      	ldr	r3, [pc, #232]	@ (80071b0 <AT_Send+0x378>)
 80070c6:	0019      	movs	r1, r3
 80070c8:	2003      	movs	r0, #3
 80070ca:	f00c f823 	bl	8013114 <CreateLine>
    ATCommandSend = SENDDATA();
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fc      	adds	r4, r7, r3
 80070d2:	f7ff fccf 	bl	8006a74 <SENDDATA>
 80070d6:	0003      	movs	r3, r0
 80070d8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 80070da:	f00c fd5b 	bl	8013b94 <HAL_GetTick>
 80070de:	0003      	movs	r3, r0
 80070e0:	33f5      	adds	r3, #245	@ 0xf5
 80070e2:	33ff      	adds	r3, #255	@ 0xff
 80070e4:	001a      	movs	r2, r3
 80070e6:	4b30      	ldr	r3, [pc, #192]	@ (80071a8 <AT_Send+0x370>)
 80070e8:	601a      	str	r2, [r3, #0]
    break;
 80070ea:	e053      	b.n	8007194 <AT_Send+0x35c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80070ec:	4a3e      	ldr	r2, [pc, #248]	@ (80071e8 <AT_Send+0x3b0>)
 80070ee:	4b30      	ldr	r3, [pc, #192]	@ (80071b0 <AT_Send+0x378>)
 80070f0:	0019      	movs	r1, r3
 80070f2:	2003      	movs	r0, #3
 80070f4:	f00c f80e 	bl	8013114 <CreateLine>
    ATCommandSend = SLEEP();
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fc      	adds	r4, r7, r3
 80070fc:	f7ff fce6 	bl	8006acc <SLEEP>
 8007100:	0003      	movs	r3, r0
 8007102:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007104:	f00c fd46 	bl	8013b94 <HAL_GetTick>
 8007108:	0003      	movs	r3, r0
 800710a:	330a      	adds	r3, #10
 800710c:	001a      	movs	r2, r3
 800710e:	4b26      	ldr	r3, [pc, #152]	@ (80071a8 <AT_Send+0x370>)
 8007110:	601a      	str	r2, [r3, #0]
    break;
 8007112:	e03f      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8007114:	4a35      	ldr	r2, [pc, #212]	@ (80071ec <AT_Send+0x3b4>)
 8007116:	4b26      	ldr	r3, [pc, #152]	@ (80071b0 <AT_Send+0x378>)
 8007118:	0019      	movs	r1, r3
 800711a:	2003      	movs	r0, #3
 800711c:	f00b fffa 	bl	8013114 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007120:	230f      	movs	r3, #15
 8007122:	18fc      	adds	r4, r7, r3
 8007124:	f7ff fcee 	bl	8006b04 <CIPSNTPCFG>
 8007128:	0003      	movs	r3, r0
 800712a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800712c:	f00c fd32 	bl	8013b94 <HAL_GetTick>
 8007130:	0003      	movs	r3, r0
 8007132:	330a      	adds	r3, #10
 8007134:	001a      	movs	r2, r3
 8007136:	4b1c      	ldr	r3, [pc, #112]	@ (80071a8 <AT_Send+0x370>)
 8007138:	601a      	str	r2, [r3, #0]
    break;
 800713a:	e02b      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 800713c:	4a2c      	ldr	r2, [pc, #176]	@ (80071f0 <AT_Send+0x3b8>)
 800713e:	4b1c      	ldr	r3, [pc, #112]	@ (80071b0 <AT_Send+0x378>)
 8007140:	0019      	movs	r1, r3
 8007142:	2003      	movs	r0, #3
 8007144:	f00b ffe6 	bl	8013114 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8007148:	230f      	movs	r3, #15
 800714a:	18fc      	adds	r4, r7, r3
 800714c:	f7ff fcfa 	bl	8006b44 <CIPSNTPTIME>
 8007150:	0003      	movs	r3, r0
 8007152:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007154:	f00c fd1e 	bl	8013b94 <HAL_GetTick>
 8007158:	0003      	movs	r3, r0
 800715a:	33f5      	adds	r3, #245	@ 0xf5
 800715c:	33ff      	adds	r3, #255	@ 0xff
 800715e:	001a      	movs	r2, r3
 8007160:	4b11      	ldr	r3, [pc, #68]	@ (80071a8 <AT_Send+0x370>)
 8007162:	601a      	str	r2, [r3, #0]
    break;
 8007164:	e016      	b.n	8007194 <AT_Send+0x35c>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8007166:	4a23      	ldr	r2, [pc, #140]	@ (80071f4 <AT_Send+0x3bc>)
 8007168:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <AT_Send+0x378>)
 800716a:	0019      	movs	r1, r3
 800716c:	2003      	movs	r0, #3
 800716e:	f00b ffd1 	bl	8013114 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8007172:	230f      	movs	r3, #15
 8007174:	18fc      	adds	r4, r7, r3
 8007176:	f7ff fd01 	bl	8006b7c <CIPSNTPINTV>
 800717a:	0003      	movs	r3, r0
 800717c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800717e:	f00c fd09 	bl	8013b94 <HAL_GetTick>
 8007182:	0003      	movs	r3, r0
 8007184:	330a      	adds	r3, #10
 8007186:	001a      	movs	r2, r3
 8007188:	4b07      	ldr	r3, [pc, #28]	@ (80071a8 <AT_Send+0x370>)
 800718a:	601a      	str	r2, [r3, #0]
    break;
 800718c:	e002      	b.n	8007194 <AT_Send+0x35c>

  case AT_END:
    break;
 800718e:	46c0      	nop			@ (mov r8, r8)
 8007190:	e000      	b.n	8007194 <AT_Send+0x35c>
  break;
 8007192:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8007194:	230f      	movs	r3, #15
 8007196:	18fb      	adds	r3, r7, r3
 8007198:	781b      	ldrb	r3, [r3, #0]
}
 800719a:	0018      	movs	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	b005      	add	sp, #20
 80071a0:	bd90      	pop	{r4, r7, pc}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	0802d7b4 	.word	0x0802d7b4
 80071a8:	2000066c 	.word	0x2000066c
 80071ac:	0802a9f0 	.word	0x0802a9f0
 80071b0:	08029b40 	.word	0x08029b40
 80071b4:	0802a9fc 	.word	0x0802a9fc
 80071b8:	0802aa10 	.word	0x0802aa10
 80071bc:	0802aa24 	.word	0x0802aa24
 80071c0:	0802aa34 	.word	0x0802aa34
 80071c4:	0802aa48 	.word	0x0802aa48
 80071c8:	0802aa60 	.word	0x0802aa60
 80071cc:	0802aa78 	.word	0x0802aa78
 80071d0:	0802aa90 	.word	0x0802aa90
 80071d4:	0802aaa4 	.word	0x0802aaa4
 80071d8:	0802aac0 	.word	0x0802aac0
 80071dc:	0802aadc 	.word	0x0802aadc
 80071e0:	0802aaf8 	.word	0x0802aaf8
 80071e4:	0802ab14 	.word	0x0802ab14
 80071e8:	0802ab24 	.word	0x0802ab24
 80071ec:	0802ab48 	.word	0x0802ab48
 80071f0:	0802ab5c 	.word	0x0802ab5c
 80071f4:	0802ab74 	.word	0x0802ab74

080071f8 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80071fe:	1dfb      	adds	r3, r7, #7
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8007204:	4b7d      	ldr	r3, [pc, #500]	@ (80073fc <ESP_WakeTest+0x204>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d900      	bls.n	800720e <ESP_WakeTest+0x16>
 800720c:	e0d9      	b.n	80073c2 <ESP_WakeTest+0x1ca>
 800720e:	009a      	lsls	r2, r3, #2
 8007210:	4b7b      	ldr	r3, [pc, #492]	@ (8007400 <ESP_WakeTest+0x208>)
 8007212:	18d3      	adds	r3, r2, r3
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8007218:	4b7a      	ldr	r3, [pc, #488]	@ (8007404 <ESP_WakeTest+0x20c>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2201      	movs	r2, #1
 800721e:	4053      	eors	r3, r2
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d036      	beq.n	8007294 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007226:	2380      	movs	r3, #128	@ 0x80
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	4877      	ldr	r0, [pc, #476]	@ (8007408 <ESP_WakeTest+0x210>)
 800722c:	2200      	movs	r2, #0
 800722e:	0019      	movs	r1, r3
 8007230:	f00d ff41 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8007234:	2032      	movs	r0, #50	@ 0x32
 8007236:	f00c fcb7 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800723a:	2380      	movs	r3, #128	@ 0x80
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	4872      	ldr	r0, [pc, #456]	@ (8007408 <ESP_WakeTest+0x210>)
 8007240:	2201      	movs	r2, #1
 8007242:	0019      	movs	r1, r3
 8007244:	f00d ff37 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8007248:	200a      	movs	r0, #10
 800724a:	f00c fcad 	bl	8013ba8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800724e:	4b6f      	ldr	r3, [pc, #444]	@ (800740c <ESP_WakeTest+0x214>)
 8007250:	2200      	movs	r2, #0
 8007252:	2101      	movs	r1, #1
 8007254:	0018      	movs	r0, r3
 8007256:	f00d ff2e 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800725a:	200a      	movs	r0, #10
 800725c:	f00c fca4 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007260:	4b6a      	ldr	r3, [pc, #424]	@ (800740c <ESP_WakeTest+0x214>)
 8007262:	2201      	movs	r2, #1
 8007264:	2102      	movs	r1, #2
 8007266:	0018      	movs	r0, r3
 8007268:	f00d ff25 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800726c:	200a      	movs	r0, #10
 800726e:	f00c fc9b 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007272:	4b66      	ldr	r3, [pc, #408]	@ (800740c <ESP_WakeTest+0x214>)
 8007274:	2201      	movs	r2, #1
 8007276:	2101      	movs	r1, #1
 8007278:	0018      	movs	r0, r3
 800727a:	f00d ff1c 	bl	80150b6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800727e:	f00c fc89 	bl	8013b94 <HAL_GetTick>
 8007282:	0003      	movs	r3, r0
 8007284:	22af      	movs	r2, #175	@ 0xaf
 8007286:	0092      	lsls	r2, r2, #2
 8007288:	189a      	adds	r2, r3, r2
 800728a:	4b61      	ldr	r3, [pc, #388]	@ (8007410 <ESP_WakeTest+0x218>)
 800728c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800728e:	4b5d      	ldr	r3, [pc, #372]	@ (8007404 <ESP_WakeTest+0x20c>)
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007294:	2380      	movs	r3, #128	@ 0x80
 8007296:	005a      	lsls	r2, r3, #1
 8007298:	4b5e      	ldr	r3, [pc, #376]	@ (8007414 <ESP_WakeTest+0x21c>)
 800729a:	0011      	movs	r1, r2
 800729c:	0018      	movs	r0, r3
 800729e:	f7fd fe5b 	bl	8004f58 <ESP_Receive>
 80072a2:	1e03      	subs	r3, r0, #0
 80072a4:	d100      	bne.n	80072a8 <ESP_WakeTest+0xb0>
 80072a6:	e09f      	b.n	80073e8 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 80072a8:	4b54      	ldr	r3, [pc, #336]	@ (80073fc <ESP_WakeTest+0x204>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
      }
      break;
 80072ae:	e09b      	b.n	80073e8 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80072b0:	4b57      	ldr	r3, [pc, #348]	@ (8007410 <ESP_WakeTest+0x218>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f00b fed7 	bl	8013068 <TimestampIsReached>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d100      	bne.n	80072c0 <ESP_WakeTest+0xc8>
 80072be:	e095      	b.n	80073ec <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 80072c0:	4b55      	ldr	r3, [pc, #340]	@ (8007418 <ESP_WakeTest+0x220>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	1dfc      	adds	r4, r7, #7
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7ff fdb6 	bl	8006e38 <AT_Send>
 80072cc:	0003      	movs	r3, r0
 80072ce:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80072d0:	1dfb      	adds	r3, r7, #7
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d100      	bne.n	80072da <ESP_WakeTest+0xe2>
 80072d8:	e088      	b.n	80073ec <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 80072da:	4b48      	ldr	r3, [pc, #288]	@ (80073fc <ESP_WakeTest+0x204>)
 80072dc:	2202      	movs	r2, #2
 80072de:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80072e0:	e084      	b.n	80073ec <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80072e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007410 <ESP_WakeTest+0x218>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f00b febe 	bl	8013068 <TimestampIsReached>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d100      	bne.n	80072f2 <ESP_WakeTest+0xfa>
 80072f0:	e07e      	b.n	80073f0 <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80072f2:	4b4a      	ldr	r3, [pc, #296]	@ (800741c <ESP_WakeTest+0x224>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	0018      	movs	r0, r3
 80072f8:	f7ff fc5c 	bl	8006bb4 <DMA_ProcessBuffer>
 80072fc:	0003      	movs	r3, r0
 80072fe:	001a      	movs	r2, r3
 8007300:	4b47      	ldr	r3, [pc, #284]	@ (8007420 <ESP_WakeTest+0x228>)
 8007302:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007304:	4b46      	ldr	r3, [pc, #280]	@ (8007420 <ESP_WakeTest+0x228>)
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	4b44      	ldr	r3, [pc, #272]	@ (800741c <ESP_WakeTest+0x224>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	1dbc      	adds	r4, r7, #6
 800730e:	0019      	movs	r1, r3
 8007310:	0010      	movs	r0, r2
 8007312:	f7ff fd4f 	bl	8006db4 <ATCompare>
 8007316:	0003      	movs	r3, r0
 8007318:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800731a:	4b41      	ldr	r3, [pc, #260]	@ (8007420 <ESP_WakeTest+0x228>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d102      	bne.n	8007328 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8007322:	4b36      	ldr	r3, [pc, #216]	@ (80073fc <ESP_WakeTest+0x204>)
 8007324:	2201      	movs	r2, #1
 8007326:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8007328:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <ESP_WakeTest+0x228>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b07      	cmp	r3, #7
 800732e:	d104      	bne.n	800733a <ESP_WakeTest+0x142>
          StartProg();
 8007330:	f7fe ff2a 	bl	8006188 <StartProg>
          TestState = ESP_TEST_BOOT;
 8007334:	4b31      	ldr	r3, [pc, #196]	@ (80073fc <ESP_WakeTest+0x204>)
 8007336:	2205      	movs	r2, #5
 8007338:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <ESP_WakeTest+0x228>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d109      	bne.n	8007356 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8007342:	f00c fc27 	bl	8013b94 <HAL_GetTick>
 8007346:	0003      	movs	r3, r0
 8007348:	3332      	adds	r3, #50	@ 0x32
 800734a:	001a      	movs	r2, r3
 800734c:	4b30      	ldr	r3, [pc, #192]	@ (8007410 <ESP_WakeTest+0x218>)
 800734e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8007350:	4b2a      	ldr	r3, [pc, #168]	@ (80073fc <ESP_WakeTest+0x204>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8007356:	1dbb      	adds	r3, r7, #6
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d048      	beq.n	80073f0 <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 800735e:	4b27      	ldr	r3, [pc, #156]	@ (80073fc <ESP_WakeTest+0x204>)
 8007360:	2203      	movs	r2, #3
 8007362:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007364:	e044      	b.n	80073f0 <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8007366:	4b2f      	ldr	r3, [pc, #188]	@ (8007424 <ESP_WakeTest+0x22c>)
 8007368:	22fa      	movs	r2, #250	@ 0xfa
 800736a:	0112      	lsls	r2, r2, #4
 800736c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800736e:	f00a fba7 	bl	8011ac0 <Calculate_LED_ON>
 8007372:	0003      	movs	r3, r0
 8007374:	001a      	movs	r2, r3
 8007376:	4b2b      	ldr	r3, [pc, #172]	@ (8007424 <ESP_WakeTest+0x22c>)
 8007378:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 800737a:	4b2a      	ldr	r3, [pc, #168]	@ (8007424 <ESP_WakeTest+0x22c>)
 800737c:	22fa      	movs	r2, #250	@ 0xfa
 800737e:	0112      	lsls	r2, r2, #4
 8007380:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007382:	4b1e      	ldr	r3, [pc, #120]	@ (80073fc <ESP_WakeTest+0x204>)
 8007384:	2204      	movs	r2, #4
 8007386:	701a      	strb	r2, [r3, #0]

      break;
 8007388:	e033      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
      testRound = false;
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <ESP_WakeTest+0x230>)
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8007390:	4b1c      	ldr	r3, [pc, #112]	@ (8007404 <ESP_WakeTest+0x20c>)
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007396:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <ESP_WakeTest+0x214>)
 8007398:	2200      	movs	r2, #0
 800739a:	2101      	movs	r1, #1
 800739c:	0018      	movs	r0, r3
 800739e:	f00d fe8a 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80073a2:	2380      	movs	r3, #128	@ 0x80
 80073a4:	011b      	lsls	r3, r3, #4
 80073a6:	4818      	ldr	r0, [pc, #96]	@ (8007408 <ESP_WakeTest+0x210>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	0019      	movs	r1, r3
 80073ac:	f00d fe83 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80073b0:	4b16      	ldr	r3, [pc, #88]	@ (800740c <ESP_WakeTest+0x214>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	2102      	movs	r1, #2
 80073b6:	0018      	movs	r0, r3
 80073b8:	f00d fe7d 	bl	80150b6 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 80073bc:	f005 fb30 	bl	800ca20 <SetESPMeasurementDone>
      break;
 80073c0:	e017      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    default:
      TestState = ESP_TEST_INIT;
 80073c2:	4b0e      	ldr	r3, [pc, #56]	@ (80073fc <ESP_WakeTest+0x204>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
      break;
 80073c8:	e013      	b.n	80073f2 <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 80073ca:	4b16      	ldr	r3, [pc, #88]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073cc:	22fa      	movs	r2, #250	@ 0xfa
 80073ce:	0112      	lsls	r2, r2, #4
 80073d0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 80073d2:	4b14      	ldr	r3, [pc, #80]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073d4:	22fa      	movs	r2, #250	@ 0xfa
 80073d6:	0112      	lsls	r2, r2, #4
 80073d8:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 80073da:	f00a fb71 	bl	8011ac0 <Calculate_LED_ON>
 80073de:	0003      	movs	r3, r0
 80073e0:	001a      	movs	r2, r3
 80073e2:	4b10      	ldr	r3, [pc, #64]	@ (8007424 <ESP_WakeTest+0x22c>)
 80073e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80073e6:	e004      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073e8:	46c0      	nop			@ (mov r8, r8)
 80073ea:	e002      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073ec:	46c0      	nop			@ (mov r8, r8)
 80073ee:	e000      	b.n	80073f2 <ESP_WakeTest+0x1fa>
      break;
 80073f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b003      	add	sp, #12
 80073f8:	bd90      	pop	{r4, r7, pc}
 80073fa:	46c0      	nop			@ (mov r8, r8)
 80073fc:	20000678 	.word	0x20000678
 8007400:	0802d808 	.word	0x0802d808
 8007404:	200005a0 	.word	0x200005a0
 8007408:	50000800 	.word	0x50000800
 800740c:	50001c00 	.word	0x50001c00
 8007410:	2000066c 	.word	0x2000066c
 8007414:	200004a0 	.word	0x200004a0
 8007418:	20000676 	.word	0x20000676
 800741c:	20000675 	.word	0x20000675
 8007420:	2000002e 	.word	0x2000002e
 8007424:	40000400 	.word	0x40000400
 8007428:	20000001 	.word	0x20000001

0800742c <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8007432:	1dfb      	adds	r3, r7, #7
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 8007438:	4bdf      	ldr	r3, [pc, #892]	@ (80077b8 <ESP_Upkeep+0x38c>)
 800743a:	781a      	ldrb	r2, [r3, #0]
 800743c:	4bdf      	ldr	r3, [pc, #892]	@ (80077bc <ESP_Upkeep+0x390>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d024      	beq.n	800748e <ESP_Upkeep+0x62>
 8007444:	f00b fee0 	bl	8013208 <GetVerboseLevel>
 8007448:	0003      	movs	r3, r0
 800744a:	2b03      	cmp	r3, #3
 800744c:	d11f      	bne.n	800748e <ESP_Upkeep+0x62>
    oldEspState = EspState;
 800744e:	4bda      	ldr	r3, [pc, #872]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	4bda      	ldr	r3, [pc, #872]	@ (80077bc <ESP_Upkeep+0x390>)
 8007454:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8007456:	4bd9      	ldr	r3, [pc, #868]	@ (80077bc <ESP_Upkeep+0x390>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b03      	cmp	r3, #3
 800745c:	d103      	bne.n	8007466 <ESP_Upkeep+0x3a>
 800745e:	4bd8      	ldr	r3, [pc, #864]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b0e      	cmp	r3, #14
 8007464:	d013      	beq.n	800748e <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8007466:	4bd5      	ldr	r3, [pc, #852]	@ (80077bc <ESP_Upkeep+0x390>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	001d      	movs	r5, r3
 800746c:	4bd4      	ldr	r3, [pc, #848]	@ (80077c0 <ESP_Upkeep+0x394>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	0018      	movs	r0, r3
 8007472:	4bd4      	ldr	r3, [pc, #848]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	001c      	movs	r4, r3
 8007478:	4bd3      	ldr	r3, [pc, #844]	@ (80077c8 <ESP_Upkeep+0x39c>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	4ad3      	ldr	r2, [pc, #844]	@ (80077cc <ESP_Upkeep+0x3a0>)
 800747e:	49d4      	ldr	r1, [pc, #848]	@ (80077d0 <ESP_Upkeep+0x3a4>)
 8007480:	9302      	str	r3, [sp, #8]
 8007482:	9401      	str	r4, [sp, #4]
 8007484:	9000      	str	r0, [sp, #0]
 8007486:	002b      	movs	r3, r5
 8007488:	2003      	movs	r0, #3
 800748a:	f00b fe43 	bl	8013114 <CreateLine>
    }
  }
  switch (EspState) {
 800748e:	4bca      	ldr	r3, [pc, #808]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b0f      	cmp	r3, #15
 8007494:	d901      	bls.n	800749a <ESP_Upkeep+0x6e>
 8007496:	f000 fc5e 	bl	8007d56 <ESP_Upkeep+0x92a>
 800749a:	009a      	lsls	r2, r3, #2
 800749c:	4bcd      	ldr	r3, [pc, #820]	@ (80077d4 <ESP_Upkeep+0x3a8>)
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80074a4:	4bc4      	ldr	r3, [pc, #784]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80074a6:	2201      	movs	r2, #1
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	f000 fc6f 	bl	8007d8c <ESP_Upkeep+0x960>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 80074ae:	4bca      	ldr	r3, [pc, #808]	@ (80077d8 <ESP_Upkeep+0x3ac>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 80074b4:	f005 fd14 	bl	800cee0 <AllDevicesReady>
 80074b8:	0003      	movs	r3, r0
 80074ba:	001a      	movs	r2, r3
 80074bc:	2301      	movs	r3, #1
 80074be:	4053      	eors	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <ESP_Upkeep+0x9e>
 80074c6:	f000 fc52 	bl	8007d6e <ESP_Upkeep+0x942>
        break;
      }
      SetESPIndicator();
 80074ca:	f00a fc8b 	bl	8011de4 <SetESPIndicator>
      if(!EspTurnedOn){
 80074ce:	4bc3      	ldr	r3, [pc, #780]	@ (80077dc <ESP_Upkeep+0x3b0>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	4053      	eors	r3, r2
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d036      	beq.n	800754a <ESP_Upkeep+0x11e>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80074dc:	2380      	movs	r3, #128	@ 0x80
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	48bf      	ldr	r0, [pc, #764]	@ (80077e0 <ESP_Upkeep+0x3b4>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	0019      	movs	r1, r3
 80074e6:	f00d fde6 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80074ea:	2001      	movs	r0, #1
 80074ec:	f00c fb5c 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074f0:	2380      	movs	r3, #128	@ 0x80
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	48ba      	ldr	r0, [pc, #744]	@ (80077e0 <ESP_Upkeep+0x3b4>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	0019      	movs	r1, r3
 80074fa:	f00d fddc 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80074fe:	2001      	movs	r0, #1
 8007500:	f00c fb52 	bl	8013ba8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007504:	4bb7      	ldr	r3, [pc, #732]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 8007506:	2200      	movs	r2, #0
 8007508:	2101      	movs	r1, #1
 800750a:	0018      	movs	r0, r3
 800750c:	f00d fdd3 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007510:	2001      	movs	r0, #1
 8007512:	f00c fb49 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007516:	4bb3      	ldr	r3, [pc, #716]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 8007518:	2201      	movs	r2, #1
 800751a:	2102      	movs	r1, #2
 800751c:	0018      	movs	r0, r3
 800751e:	f00d fdca 	bl	80150b6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007522:	2001      	movs	r0, #1
 8007524:	f00c fb40 	bl	8013ba8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007528:	4bae      	ldr	r3, [pc, #696]	@ (80077e4 <ESP_Upkeep+0x3b8>)
 800752a:	2201      	movs	r2, #1
 800752c:	2101      	movs	r1, #1
 800752e:	0018      	movs	r0, r3
 8007530:	f00d fdc1 	bl	80150b6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8007534:	f00c fb2e 	bl	8013b94 <HAL_GetTick>
 8007538:	0003      	movs	r3, r0
 800753a:	22af      	movs	r2, #175	@ 0xaf
 800753c:	0092      	lsls	r2, r2, #2
 800753e:	189a      	adds	r2, r3, r2
 8007540:	4ba9      	ldr	r3, [pc, #676]	@ (80077e8 <ESP_Upkeep+0x3bc>)
 8007542:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8007544:	4ba5      	ldr	r3, [pc, #660]	@ (80077dc <ESP_Upkeep+0x3b0>)
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800754a:	2380      	movs	r3, #128	@ 0x80
 800754c:	005a      	lsls	r2, r3, #1
 800754e:	4ba7      	ldr	r3, [pc, #668]	@ (80077ec <ESP_Upkeep+0x3c0>)
 8007550:	0011      	movs	r1, r2
 8007552:	0018      	movs	r0, r3
 8007554:	f7fd fd00 	bl	8004f58 <ESP_Receive>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d101      	bne.n	8007560 <ESP_Upkeep+0x134>
 800755c:	f000 fc09 	bl	8007d72 <ESP_Upkeep+0x946>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007560:	4b95      	ldr	r3, [pc, #596]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007562:	220f      	movs	r2, #15
 8007564:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8007566:	f00c fb15 	bl	8013b94 <HAL_GetTick>
 800756a:	0003      	movs	r3, r0
 800756c:	22fa      	movs	r2, #250	@ 0xfa
 800756e:	00d2      	lsls	r2, r2, #3
 8007570:	189a      	adds	r2, r3, r2
 8007572:	4b9f      	ldr	r3, [pc, #636]	@ (80077f0 <ESP_Upkeep+0x3c4>)
 8007574:	601a      	str	r2, [r3, #0]
      }
      break;
 8007576:	f000 fbfc 	bl	8007d72 <ESP_Upkeep+0x946>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800757a:	2001      	movs	r0, #1
 800757c:	f7ff fb1a 	bl	8006bb4 <DMA_ProcessBuffer>
 8007580:	0003      	movs	r3, r0
 8007582:	001a      	movs	r2, r3
 8007584:	4b9b      	ldr	r3, [pc, #620]	@ (80077f4 <ESP_Upkeep+0x3c8>)
 8007586:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007588:	4b9a      	ldr	r3, [pc, #616]	@ (80077f4 <ESP_Upkeep+0x3c8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	1dbc      	adds	r4, r7, #6
 800758e:	2101      	movs	r1, #1
 8007590:	0018      	movs	r0, r3
 8007592:	f7ff fc0f 	bl	8006db4 <ATCompare>
 8007596:	0003      	movs	r3, r0
 8007598:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800759a:	1dbb      	adds	r3, r7, #6
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <ESP_Upkeep+0x188>
 80075a2:	4b93      	ldr	r3, [pc, #588]	@ (80077f0 <ESP_Upkeep+0x3c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	0018      	movs	r0, r3
 80075a8:	f00b fd5e 	bl	8013068 <TimestampIsReached>
 80075ac:	1e03      	subs	r3, r0, #0
 80075ae:	d101      	bne.n	80075b4 <ESP_Upkeep+0x188>
 80075b0:	f000 fbe1 	bl	8007d76 <ESP_Upkeep+0x94a>
          EspState = ESP_STATE_MODE_SELECT;
 80075b4:	4b80      	ldr	r3, [pc, #512]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80075b6:	220b      	movs	r2, #11
 80075b8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80075ba:	f000 fbdc 	bl	8007d76 <ESP_Upkeep+0x94a>

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80075be:	4b8e      	ldr	r3, [pc, #568]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80075c0:	2209      	movs	r2, #9
 80075c2:	2114      	movs	r1, #20
 80075c4:	0018      	movs	r0, r3
 80075c6:	f01e f87b 	bl	80256c0 <memset>
      if(!InitIsDone || WifiReset){
 80075ca:	4b8c      	ldr	r3, [pc, #560]	@ (80077fc <ESP_Upkeep+0x3d0>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2201      	movs	r2, #1
 80075d0:	4053      	eors	r3, r2
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d103      	bne.n	80075e0 <ESP_Upkeep+0x1b4>
 80075d8:	4b89      	ldr	r3, [pc, #548]	@ (8007800 <ESP_Upkeep+0x3d4>)
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <ESP_Upkeep+0x1ea>
        memcpy(ATCommandArray, AT_INIT, 7);
 80075e0:	4b85      	ldr	r3, [pc, #532]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80075e2:	4a88      	ldr	r2, [pc, #544]	@ (8007804 <ESP_Upkeep+0x3d8>)
 80075e4:	6811      	ldr	r1, [r2, #0]
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	8891      	ldrh	r1, [r2, #4]
 80075ea:	8099      	strh	r1, [r3, #4]
 80075ec:	7992      	ldrb	r2, [r2, #6]
 80075ee:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80075f0:	4b71      	ldr	r3, [pc, #452]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80075f2:	2204      	movs	r2, #4
 80075f4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80075f6:	4b84      	ldr	r3, [pc, #528]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80075fc:	4b71      	ldr	r3, [pc, #452]	@ (80077c4 <ESP_Upkeep+0x398>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007602:	4b81      	ldr	r3, [pc, #516]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	001a      	movs	r2, r3
 8007608:	4b7b      	ldr	r3, [pc, #492]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800760a:	5c9a      	ldrb	r2, [r3, r2]
 800760c:	4b6c      	ldr	r3, [pc, #432]	@ (80077c0 <ESP_Upkeep+0x394>)
 800760e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007610:	4b6d      	ldr	r3, [pc, #436]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007612:	2200      	movs	r2, #0
 8007614:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007616:	4b79      	ldr	r3, [pc, #484]	@ (80077fc <ESP_Upkeep+0x3d0>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d01f      	beq.n	800765e <ESP_Upkeep+0x232>
 800761e:	4b7b      	ldr	r3, [pc, #492]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2201      	movs	r2, #1
 8007624:	4053      	eors	r3, r2
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d018      	beq.n	800765e <ESP_Upkeep+0x232>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800762c:	4b72      	ldr	r3, [pc, #456]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800762e:	4a78      	ldr	r2, [pc, #480]	@ (8007810 <ESP_Upkeep+0x3e4>)
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	6019      	str	r1, [r3, #0]
 8007634:	8892      	ldrh	r2, [r2, #4]
 8007636:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007638:	4b5f      	ldr	r3, [pc, #380]	@ (80077b8 <ESP_Upkeep+0x38c>)
 800763a:	2204      	movs	r2, #4
 800763c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800763e:	4b72      	ldr	r3, [pc, #456]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8007644:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800764a:	4b6f      	ldr	r3, [pc, #444]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	001a      	movs	r2, r3
 8007650:	4b69      	ldr	r3, [pc, #420]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007652:	5c9a      	ldrb	r2, [r3, r2]
 8007654:	4b5a      	ldr	r3, [pc, #360]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007656:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007658:	4b5b      	ldr	r3, [pc, #364]	@ (80077c8 <ESP_Upkeep+0x39c>)
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800765e:	4b67      	ldr	r3, [pc, #412]	@ (80077fc <ESP_Upkeep+0x3d0>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d021      	beq.n	80076aa <ESP_Upkeep+0x27e>
 8007666:	4b69      	ldr	r3, [pc, #420]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01d      	beq.n	80076aa <ESP_Upkeep+0x27e>
 800766e:	4b69      	ldr	r3, [pc, #420]	@ (8007814 <ESP_Upkeep+0x3e8>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	2201      	movs	r2, #1
 8007674:	4053      	eors	r3, r2
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d016      	beq.n	80076aa <ESP_Upkeep+0x27e>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800767c:	4b66      	ldr	r3, [pc, #408]	@ (8007818 <ESP_Upkeep+0x3ec>)
 800767e:	881a      	ldrh	r2, [r3, #0]
 8007680:	4b5d      	ldr	r3, [pc, #372]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007682:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007684:	4b4c      	ldr	r3, [pc, #304]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007686:	2204      	movs	r2, #4
 8007688:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800768a:	4b5f      	ldr	r3, [pc, #380]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8007690:	4b4c      	ldr	r3, [pc, #304]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007692:	2204      	movs	r2, #4
 8007694:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007696:	4b5c      	ldr	r3, [pc, #368]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	001a      	movs	r2, r3
 800769c:	4b56      	ldr	r3, [pc, #344]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 800769e:	5c9a      	ldrb	r2, [r3, r2]
 80076a0:	4b47      	ldr	r3, [pc, #284]	@ (80077c0 <ESP_Upkeep+0x394>)
 80076a2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80076a4:	4b48      	ldr	r3, [pc, #288]	@ (80077c8 <ESP_Upkeep+0x39c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80076aa:	4b54      	ldr	r3, [pc, #336]	@ (80077fc <ESP_Upkeep+0x3d0>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d02c      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076b2:	4b56      	ldr	r3, [pc, #344]	@ (800780c <ESP_Upkeep+0x3e0>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d028      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076ba:	4b56      	ldr	r3, [pc, #344]	@ (8007814 <ESP_Upkeep+0x3e8>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d024      	beq.n	800770c <ESP_Upkeep+0x2e0>
 80076c2:	4b56      	ldr	r3, [pc, #344]	@ (800781c <ESP_Upkeep+0x3f0>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2201      	movs	r2, #1
 80076c8:	4053      	eors	r3, r2
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01d      	beq.n	800770c <ESP_Upkeep+0x2e0>
        memcpy(ATCommandArray, AT_SEND, 3);
 80076d0:	4b49      	ldr	r3, [pc, #292]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80076d2:	4a53      	ldr	r2, [pc, #332]	@ (8007820 <ESP_Upkeep+0x3f4>)
 80076d4:	8811      	ldrh	r1, [r2, #0]
 80076d6:	8019      	strh	r1, [r3, #0]
 80076d8:	7892      	ldrb	r2, [r2, #2]
 80076da:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <ESP_Upkeep+0x38c>)
 80076de:	2204      	movs	r2, #4
 80076e0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80076e2:	4b49      	ldr	r3, [pc, #292]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <ESP_Upkeep+0x398>)
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80076ee:	f00c fa51 	bl	8013b94 <HAL_GetTick>
 80076f2:	0002      	movs	r2, r0
 80076f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007824 <ESP_Upkeep+0x3f8>)
 80076f6:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80076f8:	4b43      	ldr	r3, [pc, #268]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	001a      	movs	r2, r3
 80076fe:	4b3e      	ldr	r3, [pc, #248]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007700:	5c9a      	ldrb	r2, [r3, r2]
 8007702:	4b2f      	ldr	r3, [pc, #188]	@ (80077c0 <ESP_Upkeep+0x394>)
 8007704:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007706:	4b30      	ldr	r3, [pc, #192]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 800770c:	4b3b      	ldr	r3, [pc, #236]	@ (80077fc <ESP_Upkeep+0x3d0>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d027      	beq.n	8007764 <ESP_Upkeep+0x338>
 8007714:	4b3d      	ldr	r3, [pc, #244]	@ (800780c <ESP_Upkeep+0x3e0>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d023      	beq.n	8007764 <ESP_Upkeep+0x338>
 800771c:	4b3d      	ldr	r3, [pc, #244]	@ (8007814 <ESP_Upkeep+0x3e8>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01f      	beq.n	8007764 <ESP_Upkeep+0x338>
 8007724:	4b3d      	ldr	r3, [pc, #244]	@ (800781c <ESP_Upkeep+0x3f0>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <ESP_Upkeep+0x338>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800772c:	4b3e      	ldr	r3, [pc, #248]	@ (8007828 <ESP_Upkeep+0x3fc>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	4b31      	ldr	r3, [pc, #196]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007732:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007734:	4b20      	ldr	r3, [pc, #128]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007736:	2204      	movs	r2, #4
 8007738:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800773a:	4b33      	ldr	r3, [pc, #204]	@ (8007808 <ESP_Upkeep+0x3dc>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007740:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <ESP_Upkeep+0x398>)
 8007742:	2205      	movs	r2, #5
 8007744:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007746:	f00c fa25 	bl	8013b94 <HAL_GetTick>
 800774a:	0002      	movs	r2, r0
 800774c:	4b35      	ldr	r3, [pc, #212]	@ (8007824 <ESP_Upkeep+0x3f8>)
 800774e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007750:	4b2d      	ldr	r3, [pc, #180]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	001a      	movs	r2, r3
 8007756:	4b28      	ldr	r3, [pc, #160]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007758:	5c9a      	ldrb	r2, [r3, r2]
 800775a:	4b19      	ldr	r3, [pc, #100]	@ (80077c0 <ESP_Upkeep+0x394>)
 800775c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800775e:	4b1a      	ldr	r3, [pc, #104]	@ (80077c8 <ESP_Upkeep+0x39c>)
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007764:	4b31      	ldr	r3, [pc, #196]	@ (800782c <ESP_Upkeep+0x400>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d100      	bne.n	800776e <ESP_Upkeep+0x342>
 800776c:	e305      	b.n	8007d7a <ESP_Upkeep+0x94e>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800776e:	4b22      	ldr	r3, [pc, #136]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 8007770:	4a2f      	ldr	r2, [pc, #188]	@ (8007830 <ESP_Upkeep+0x404>)
 8007772:	6811      	ldr	r1, [r2, #0]
 8007774:	6019      	str	r1, [r3, #0]
 8007776:	7912      	ldrb	r2, [r2, #4]
 8007778:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800777a:	4a2e      	ldr	r2, [pc, #184]	@ (8007834 <ESP_Upkeep+0x408>)
 800777c:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <ESP_Upkeep+0x3a4>)
 800777e:	0019      	movs	r1, r3
 8007780:	2003      	movs	r0, #3
 8007782:	f00b fcc7 	bl	8013114 <CreateLine>
        DisableConnectedDevices();
 8007786:	f005 fd19 	bl	800d1bc <DisableConnectedDevices>
        usblog = false;
 800778a:	4b2b      	ldr	r3, [pc, #172]	@ (8007838 <ESP_Upkeep+0x40c>)
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <ESP_Upkeep+0x38c>)
 8007792:	2204      	movs	r2, #4
 8007794:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007796:	4b1c      	ldr	r3, [pc, #112]	@ (8007808 <ESP_Upkeep+0x3dc>)
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800779c:	4b09      	ldr	r3, [pc, #36]	@ (80077c4 <ESP_Upkeep+0x398>)
 800779e:	2203      	movs	r2, #3
 80077a0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80077a2:	4b19      	ldr	r3, [pc, #100]	@ (8007808 <ESP_Upkeep+0x3dc>)
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	001a      	movs	r2, r3
 80077a8:	4b13      	ldr	r3, [pc, #76]	@ (80077f8 <ESP_Upkeep+0x3cc>)
 80077aa:	5c9a      	ldrb	r2, [r3, r2]
 80077ac:	4b04      	ldr	r3, [pc, #16]	@ (80077c0 <ESP_Upkeep+0x394>)
 80077ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80077b0:	4b05      	ldr	r3, [pc, #20]	@ (80077c8 <ESP_Upkeep+0x39c>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
      }
    break;
 80077b6:	e2e0      	b.n	8007d7a <ESP_Upkeep+0x94e>
 80077b8:	2000002c 	.word	0x2000002c
 80077bc:	20000003 	.word	0x20000003
 80077c0:	20000676 	.word	0x20000676
 80077c4:	20000677 	.word	0x20000677
 80077c8:	20000675 	.word	0x20000675
 80077cc:	0802ab94 	.word	0x0802ab94
 80077d0:	08029b40 	.word	0x08029b40
 80077d4:	0802d820 	.word	0x0802d820
 80077d8:	20000e28 	.word	0x20000e28
 80077dc:	200005a0 	.word	0x200005a0
 80077e0:	50000800 	.word	0x50000800
 80077e4:	50001c00 	.word	0x50001c00
 80077e8:	2000066c 	.word	0x2000066c
 80077ec:	200004a0 	.word	0x200004a0
 80077f0:	200007a4 	.word	0x200007a4
 80077f4:	2000002f 	.word	0x2000002f
 80077f8:	2000065c 	.word	0x2000065c
 80077fc:	200005a1 	.word	0x200005a1
 8007800:	200005a2 	.word	0x200005a2
 8007804:	20000004 	.word	0x20000004
 8007808:	20000666 	.word	0x20000666
 800780c:	200005a4 	.word	0x200005a4
 8007810:	20000014 	.word	0x20000014
 8007814:	200005a5 	.word	0x200005a5
 8007818:	20000010 	.word	0x20000010
 800781c:	20000002 	.word	0x20000002
 8007820:	2000000c 	.word	0x2000000c
 8007824:	200005b8 	.word	0x200005b8
 8007828:	20000024 	.word	0x20000024
 800782c:	200005a3 	.word	0x200005a3
 8007830:	2000001c 	.word	0x2000001c
 8007834:	0802abc0 	.word	0x0802abc0
 8007838:	20000207 	.word	0x20000207

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 800783c:	4bdd      	ldr	r3, [pc, #884]	@ (8007bb4 <ESP_Upkeep+0x788>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	1dfc      	adds	r4, r7, #7
 8007842:	0018      	movs	r0, r3
 8007844:	f7ff faf8 	bl	8006e38 <AT_Send>
 8007848:	0003      	movs	r3, r0
 800784a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800784c:	1dfb      	adds	r3, r7, #7
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d100      	bne.n	8007856 <ESP_Upkeep+0x42a>
 8007854:	e293      	b.n	8007d7e <ESP_Upkeep+0x952>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007856:	4bd8      	ldr	r3, [pc, #864]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007858:	2203      	movs	r2, #3
 800785a:	701a      	strb	r2, [r3, #0]
        }
    break;
 800785c:	e28f      	b.n	8007d7e <ESP_Upkeep+0x952>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800785e:	4bd7      	ldr	r3, [pc, #860]	@ (8007bbc <ESP_Upkeep+0x790>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <ESP_Upkeep+0x44a>
 8007866:	4bd6      	ldr	r3, [pc, #856]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d003      	beq.n	8007876 <ESP_Upkeep+0x44a>
        EspState = ESP_STATE_MODE_SELECT;
 800786e:	4bd2      	ldr	r3, [pc, #840]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007870:	220b      	movs	r2, #11
 8007872:	701a      	strb	r2, [r3, #0]
        break;
 8007874:	e28a      	b.n	8007d8c <ESP_Upkeep+0x960>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007876:	4bd3      	ldr	r3, [pc, #844]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	0018      	movs	r0, r3
 800787c:	f00b fbf4 	bl	8013068 <TimestampIsReached>
 8007880:	1e03      	subs	r3, r0, #0
 8007882:	d100      	bne.n	8007886 <ESP_Upkeep+0x45a>
 8007884:	e27d      	b.n	8007d82 <ESP_Upkeep+0x956>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007886:	4bd0      	ldr	r3, [pc, #832]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	0018      	movs	r0, r3
 800788c:	f7ff f992 	bl	8006bb4 <DMA_ProcessBuffer>
 8007890:	0003      	movs	r3, r0
 8007892:	001a      	movs	r2, r3
 8007894:	4bcd      	ldr	r3, [pc, #820]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007896:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007898:	4bcc      	ldr	r3, [pc, #816]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 800789a:	781a      	ldrb	r2, [r3, #0]
 800789c:	4bca      	ldr	r3, [pc, #808]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	1d7c      	adds	r4, r7, #5
 80078a2:	0019      	movs	r1, r3
 80078a4:	0010      	movs	r0, r2
 80078a6:	f7ff fa85 	bl	8006db4 <ATCompare>
 80078aa:	0003      	movs	r3, r0
 80078ac:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80078ae:	4bc7      	ldr	r3, [pc, #796]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d138      	bne.n	8007928 <ESP_Upkeep+0x4fc>
          if(ATCommand == AT_SENDDATA){
 80078b6:	4bbf      	ldr	r3, [pc, #764]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d108      	bne.n	80078d0 <ESP_Upkeep+0x4a4>
            ATCommand = AT_HTTPCPOST;
 80078be:	4bbd      	ldr	r3, [pc, #756]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80078c0:	220e      	movs	r2, #14
 80078c2:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80078c4:	4bc0      	ldr	r3, [pc, #768]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80078c6:	2202      	movs	r2, #2
 80078c8:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80078ca:	4bc1      	ldr	r3, [pc, #772]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80078d0:	4bb9      	ldr	r3, [pc, #740]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80078d2:	2204      	movs	r2, #4
 80078d4:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 80078d6:	4bbf      	ldr	r3, [pc, #764]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	4bbd      	ldr	r3, [pc, #756]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078e0:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 80078e2:	4bbc      	ldr	r3, [pc, #752]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d91e      	bls.n	8007928 <ESP_Upkeep+0x4fc>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80078ea:	f00c f953 	bl	8013b94 <HAL_GetTick>
 80078ee:	0003      	movs	r3, r0
 80078f0:	4ab9      	ldr	r2, [pc, #740]	@ (8007bd8 <ESP_Upkeep+0x7ac>)
 80078f2:	189a      	adds	r2, r3, r2
 80078f4:	4bb3      	ldr	r3, [pc, #716]	@ (8007bc4 <ESP_Upkeep+0x798>)
 80078f6:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80078f8:	4bb8      	ldr	r3, [pc, #736]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 80078fe:	f7ff fa4b 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007902:	f00c f947 	bl	8013b94 <HAL_GetTick>
 8007906:	0002      	movs	r2, r0
 8007908:	4bb5      	ldr	r3, [pc, #724]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800790a:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800790c:	4bb4      	ldr	r3, [pc, #720]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	4bb4      	ldr	r3, [pc, #720]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	4ab4      	ldr	r2, [pc, #720]	@ (8007be8 <ESP_Upkeep+0x7bc>)
 8007918:	49b4      	ldr	r1, [pc, #720]	@ (8007bec <ESP_Upkeep+0x7c0>)
 800791a:	2001      	movs	r0, #1
 800791c:	f00b fbfa 	bl	8013114 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007920:	4ba5      	ldr	r3, [pc, #660]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007922:	220d      	movs	r2, #13
 8007924:	701a      	strb	r2, [r3, #0]
            break;
 8007926:	e231      	b.n	8007d8c <ESP_Upkeep+0x960>
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007928:	4ba8      	ldr	r3, [pc, #672]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b03      	cmp	r3, #3
 800792e:	d106      	bne.n	800793e <ESP_Upkeep+0x512>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007930:	f00c f930 	bl	8013b94 <HAL_GetTick>
 8007934:	0003      	movs	r3, r0
 8007936:	330a      	adds	r3, #10
 8007938:	001a      	movs	r2, r3
 800793a:	4ba2      	ldr	r3, [pc, #648]	@ (8007bc4 <ESP_Upkeep+0x798>)
 800793c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800793e:	4ba3      	ldr	r3, [pc, #652]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b0a      	cmp	r3, #10
 8007944:	d106      	bne.n	8007954 <ESP_Upkeep+0x528>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007946:	f00c f925 	bl	8013b94 <HAL_GetTick>
 800794a:	0003      	movs	r3, r0
 800794c:	330a      	adds	r3, #10
 800794e:	001a      	movs	r2, r3
 8007950:	4b9c      	ldr	r3, [pc, #624]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007952:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007954:	4b9d      	ldr	r3, [pc, #628]	@ (8007bcc <ESP_Upkeep+0x7a0>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b06      	cmp	r3, #6
 800795a:	d14b      	bne.n	80079f4 <ESP_Upkeep+0x5c8>
          timeoutcntr++;
 800795c:	4ba4      	ldr	r3, [pc, #656]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	4ba2      	ldr	r3, [pc, #648]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007966:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007968:	4aa2      	ldr	r2, [pc, #648]	@ (8007bf4 <ESP_Upkeep+0x7c8>)
 800796a:	4ba0      	ldr	r3, [pc, #640]	@ (8007bec <ESP_Upkeep+0x7c0>)
 800796c:	0019      	movs	r1, r3
 800796e:	2001      	movs	r0, #1
 8007970:	f00b fbd0 	bl	8013114 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007974:	4b9e      	ldr	r3, [pc, #632]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2b02      	cmp	r3, #2
 800797a:	d924      	bls.n	80079c6 <ESP_Upkeep+0x59a>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 800797c:	f00c f90a 	bl	8013b94 <HAL_GetTick>
 8007980:	0003      	movs	r3, r0
 8007982:	4a9d      	ldr	r2, [pc, #628]	@ (8007bf8 <ESP_Upkeep+0x7cc>)
 8007984:	189a      	adds	r2, r3, r2
 8007986:	4b8f      	ldr	r3, [pc, #572]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007988:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800798a:	4b94      	ldr	r3, [pc, #592]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007990:	f7ff fa02 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007994:	f00c f8fe 	bl	8013b94 <HAL_GetTick>
 8007998:	0002      	movs	r2, r0
 800799a:	4b91      	ldr	r3, [pc, #580]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 800799c:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 800799e:	4b90      	ldr	r3, [pc, #576]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b90      	ldr	r3, [pc, #576]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	4a94      	ldr	r2, [pc, #592]	@ (8007bfc <ESP_Upkeep+0x7d0>)
 80079aa:	4990      	ldr	r1, [pc, #576]	@ (8007bec <ESP_Upkeep+0x7c0>)
 80079ac:	2001      	movs	r0, #1
 80079ae:	f00b fbb1 	bl	8013114 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80079b2:	4b81      	ldr	r3, [pc, #516]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079b4:	220d      	movs	r2, #13
 80079b6:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 80079b8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079ba:	2214      	movs	r2, #20
 80079bc:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 80079be:	4b82      	ldr	r3, [pc, #520]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	701a      	strb	r2, [r3, #0]
            break;
 80079c4:	e1e2      	b.n	8007d8c <ESP_Upkeep+0x960>
          }
          if(ATCommand != AT_SENDDATA){
 80079c6:	4b7b      	ldr	r3, [pc, #492]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d003      	beq.n	80079d6 <ESP_Upkeep+0x5aa>
            EspState = ESP_STATE_SEND;
 80079ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079d0:	2204      	movs	r2, #4
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e00e      	b.n	80079f4 <ESP_Upkeep+0x5c8>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80079d6:	4b77      	ldr	r3, [pc, #476]	@ (8007bb4 <ESP_Upkeep+0x788>)
 80079d8:	220e      	movs	r2, #14
 80079da:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80079dc:	4b7c      	ldr	r3, [pc, #496]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	4b7a      	ldr	r3, [pc, #488]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 80079e6:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80079e8:	4b77      	ldr	r3, [pc, #476]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 80079ea:	2202      	movs	r2, #2
 80079ec:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80079ee:	4b72      	ldr	r3, [pc, #456]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 80079f0:	2204      	movs	r2, #4
 80079f2:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80079f4:	1d7b      	adds	r3, r7, #5
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d100      	bne.n	80079fe <ESP_Upkeep+0x5d2>
 80079fc:	e1c1      	b.n	8007d82 <ESP_Upkeep+0x956>
          EspState = ESP_STATE_NEXT_AT;
 80079fe:	4b6e      	ldr	r3, [pc, #440]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007a00:	2205      	movs	r2, #5
 8007a02:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007a04:	e1bd      	b.n	8007d82 <ESP_Upkeep+0x956>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007a06:	4b72      	ldr	r3, [pc, #456]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	4b70      	ldr	r3, [pc, #448]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a10:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007a12:	4b6f      	ldr	r3, [pc, #444]	@ (8007bd0 <ESP_Upkeep+0x7a4>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	001a      	movs	r2, r3
 8007a18:	4b79      	ldr	r3, [pc, #484]	@ (8007c00 <ESP_Upkeep+0x7d4>)
 8007a1a:	5c9a      	ldrb	r2, [r3, r2]
 8007a1c:	4b65      	ldr	r3, [pc, #404]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a1e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007a20:	4b64      	ldr	r3, [pc, #400]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d102      	bne.n	8007a2e <ESP_Upkeep+0x602>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007a28:	4b67      	ldr	r3, [pc, #412]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007a2e:	4b61      	ldr	r3, [pc, #388]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b0e      	cmp	r3, #14
 8007a34:	d102      	bne.n	8007a3c <ESP_Upkeep+0x610>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007a36:	4b64      	ldr	r3, [pc, #400]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a38:	2202      	movs	r2, #2
 8007a3a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b0e      	cmp	r3, #14
 8007a42:	d006      	beq.n	8007a52 <ESP_Upkeep+0x626>
 8007a44:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d002      	beq.n	8007a52 <ESP_Upkeep+0x626>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007a52:	4b58      	ldr	r3, [pc, #352]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b11      	cmp	r3, #17
 8007a58:	d102      	bne.n	8007a60 <ESP_Upkeep+0x634>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bc8 <ESP_Upkeep+0x79c>)
 8007a5c:	2205      	movs	r2, #5
 8007a5e:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8007a60:	4b55      	ldr	r3, [pc, #340]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007a62:	2204      	movs	r2, #4
 8007a64:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007a66:	4b53      	ldr	r3, [pc, #332]	@ (8007bb4 <ESP_Upkeep+0x788>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b14      	cmp	r3, #20
 8007a6c:	d000      	beq.n	8007a70 <ESP_Upkeep+0x644>
 8007a6e:	e18a      	b.n	8007d86 <ESP_Upkeep+0x95a>
        if(Mode == AT_MODE_SEND){
 8007a70:	4b53      	ldr	r3, [pc, #332]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d124      	bne.n	8007ac2 <ESP_Upkeep+0x696>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007a78:	f00c f88c 	bl	8013b94 <HAL_GetTick>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	4a56      	ldr	r2, [pc, #344]	@ (8007bd8 <ESP_Upkeep+0x7ac>)
 8007a80:	189a      	adds	r2, r3, r2
 8007a82:	4b50      	ldr	r3, [pc, #320]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007a84:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007a86:	f7ff f987 	bl	8006d98 <clearDMABuffer>
          stop = HAL_GetTick();
 8007a8a:	f00c f883 	bl	8013b94 <HAL_GetTick>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	4b53      	ldr	r3, [pc, #332]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007a92:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007a94:	4b52      	ldr	r3, [pc, #328]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4b52      	ldr	r3, [pc, #328]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	4a59      	ldr	r2, [pc, #356]	@ (8007c04 <ESP_Upkeep+0x7d8>)
 8007aa0:	4959      	ldr	r1, [pc, #356]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007aa2:	2002      	movs	r0, #2
 8007aa4:	f00b fb36 	bl	8013114 <CreateLine>
          ResetdBAmax();
 8007aa8:	f005 fc10 	bl	800d2cc <ResetdBAmax>
          resetMaxMeasurementValues();
 8007aac:	f7fd f994 	bl	8004dd8 <resetMaxMeasurementValues>
          showTime();
 8007ab0:	f001 fc54 	bl	800935c <showTime>
          ESPTransmitDone = true;
 8007ab4:	4b49      	ldr	r3, [pc, #292]	@ (8007bdc <ESP_Upkeep+0x7b0>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007aba:	4b3f      	ldr	r3, [pc, #252]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007abc:	220d      	movs	r2, #13
 8007abe:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007ac0:	e161      	b.n	8007d86 <ESP_Upkeep+0x95a>
        else if (Mode == AT_MODE_GETTIME) {
 8007ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b05      	cmp	r3, #5
 8007ac8:	d13a      	bne.n	8007b40 <ESP_Upkeep+0x714>
            setTime = false;
 8007aca:	4b50      	ldr	r3, [pc, #320]	@ (8007c0c <ESP_Upkeep+0x7e0>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007ad0:	f001 fca2 	bl	8009418 <calculateNextNTPTime>
 8007ad4:	0002      	movs	r2, r0
 8007ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007ad8:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007ada:	4b4d      	ldr	r3, [pc, #308]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a4d      	ldr	r2, [pc, #308]	@ (8007c14 <ESP_Upkeep+0x7e8>)
 8007ae0:	189a      	adds	r2, r3, r2
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8007c10 <ESP_Upkeep+0x7e4>)
 8007ae4:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007ae6:	4b4b      	ldr	r3, [pc, #300]	@ (8007c14 <ESP_Upkeep+0x7e8>)
 8007ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8007c18 <ESP_Upkeep+0x7ec>)
 8007aea:	4947      	ldr	r1, [pc, #284]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007aec:	2002      	movs	r0, #2
 8007aee:	f00b fb11 	bl	8013114 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007af2:	4b4a      	ldr	r3, [pc, #296]	@ (8007c1c <ESP_Upkeep+0x7f0>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b33      	ldr	r3, [pc, #204]	@ (8007bc4 <ESP_Upkeep+0x798>)
 8007af8:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007afa:	f7ff f94d 	bl	8006d98 <clearDMABuffer>
            stop = HAL_GetTick();
 8007afe:	f00c f849 	bl	8013b94 <HAL_GetTick>
 8007b02:	0002      	movs	r2, r0
 8007b04:	4b36      	ldr	r3, [pc, #216]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007b06:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007b08:	4b35      	ldr	r3, [pc, #212]	@ (8007be0 <ESP_Upkeep+0x7b4>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b35      	ldr	r3, [pc, #212]	@ (8007be4 <ESP_Upkeep+0x7b8>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	4a43      	ldr	r2, [pc, #268]	@ (8007c20 <ESP_Upkeep+0x7f4>)
 8007b14:	493c      	ldr	r1, [pc, #240]	@ (8007c08 <ESP_Upkeep+0x7dc>)
 8007b16:	2002      	movs	r0, #2
 8007b18:	f00b fafc 	bl	8013114 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007b1c:	f00c f83a 	bl	8013b94 <HAL_GetTick>
 8007b20:	0003      	movs	r3, r0
 8007b22:	4a40      	ldr	r2, [pc, #256]	@ (8007c24 <ESP_Upkeep+0x7f8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d804      	bhi.n	8007b32 <ESP_Upkeep+0x706>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007b28:	4b3f      	ldr	r3, [pc, #252]	@ (8007c28 <ESP_Upkeep+0x7fc>)
 8007b2a:	4a40      	ldr	r2, [pc, #256]	@ (8007c2c <ESP_Upkeep+0x800>)
 8007b2c:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007b2e:	f005 faed 	bl	800d10c <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007b32:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b34:	220d      	movs	r2, #13
 8007b36:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <ESP_Upkeep+0x794>)
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
    break;
 8007b3e:	e122      	b.n	8007d86 <ESP_Upkeep+0x95a>
          EspState = ESP_STATE_RESET;
 8007b40:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b42:	2209      	movs	r2, #9
 8007b44:	701a      	strb	r2, [r3, #0]
    break;
 8007b46:	e11e      	b.n	8007d86 <ESP_Upkeep+0x95a>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007b48:	4b39      	ldr	r3, [pc, #228]	@ (8007c30 <ESP_Upkeep+0x804>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007b4e:	4b39      	ldr	r3, [pc, #228]	@ (8007c34 <ESP_Upkeep+0x808>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	2101      	movs	r1, #1
 8007b54:	0018      	movs	r0, r3
 8007b56:	f00d faae 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	f00c f824 	bl	8013ba8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007b60:	2380      	movs	r3, #128	@ 0x80
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4834      	ldr	r0, [pc, #208]	@ (8007c38 <ESP_Upkeep+0x80c>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	0019      	movs	r1, r3
 8007b6a:	f00d faa4 	bl	80150b6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f00c f81a 	bl	8013ba8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007b74:	4b2f      	ldr	r3, [pc, #188]	@ (8007c34 <ESP_Upkeep+0x808>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	2102      	movs	r1, #2
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f00d fa9b 	bl	80150b6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007b80:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <ESP_Upkeep+0x78c>)
 8007b82:	2209      	movs	r2, #9
 8007b84:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007b86:	2001      	movs	r0, #1
 8007b88:	f00c f80e 	bl	8013ba8 <HAL_Delay>
      ResetESPIndicator();
 8007b8c:	f00a f942 	bl	8011e14 <ResetESPIndicator>
      if (Check_USB_PowerOn() || userToggle) {
 8007b90:	f001 fbb4 	bl	80092fc <Check_USB_PowerOn>
 8007b94:	1e03      	subs	r3, r0, #0
 8007b96:	d103      	bne.n	8007ba0 <ESP_Upkeep+0x774>
 8007b98:	4b28      	ldr	r3, [pc, #160]	@ (8007c3c <ESP_Upkeep+0x810>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <ESP_Upkeep+0x778>
        EnabledConnectedDevices();
 8007ba0:	f005 fab4 	bl	800d10c <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <ESP_Upkeep+0x7a8>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007baa:	4b11      	ldr	r3, [pc, #68]	@ (8007bf0 <ESP_Upkeep+0x7c4>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
      break;
 8007bb0:	e0ec      	b.n	8007d8c <ESP_Upkeep+0x960>
 8007bb2:	46c0      	nop			@ (mov r8, r8)
 8007bb4:	20000676 	.word	0x20000676
 8007bb8:	2000002c 	.word	0x2000002c
 8007bbc:	200005a3 	.word	0x200005a3
 8007bc0:	20000677 	.word	0x20000677
 8007bc4:	2000066c 	.word	0x2000066c
 8007bc8:	20000675 	.word	0x20000675
 8007bcc:	2000002f 	.word	0x2000002f
 8007bd0:	20000666 	.word	0x20000666
 8007bd4:	20000667 	.word	0x20000667
 8007bd8:	0003a980 	.word	0x0003a980
 8007bdc:	200005a8 	.word	0x200005a8
 8007be0:	200005bc 	.word	0x200005bc
 8007be4:	200005b8 	.word	0x200005b8
 8007be8:	0802abf0 	.word	0x0802abf0
 8007bec:	08029b64 	.word	0x08029b64
 8007bf0:	20000668 	.word	0x20000668
 8007bf4:	0802ac24 	.word	0x0802ac24
 8007bf8:	0000c350 	.word	0x0000c350
 8007bfc:	0802ac60 	.word	0x0802ac60
 8007c00:	2000065c 	.word	0x2000065c
 8007c04:	0802ac90 	.word	0x0802ac90
 8007c08:	0802aca8 	.word	0x0802aca8
 8007c0c:	20000002 	.word	0x20000002
 8007c10:	20000670 	.word	0x20000670
 8007c14:	00012686 	.word	0x00012686
 8007c18:	0802acac 	.word	0x0802acac
 8007c1c:	20000028 	.word	0x20000028
 8007c20:	0802acf0 	.word	0x0802acf0
 8007c24:	000061a7 	.word	0x000061a7
 8007c28:	20000e28 	.word	0x20000e28
 8007c2c:	000061a8 	.word	0x000061a8
 8007c30:	200005a0 	.word	0x200005a0
 8007c34:	50001c00 	.word	0x50001c00
 8007c38:	50000800 	.word	0x50000800
 8007c3c:	20001e62 	.word	0x20001e62

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007c40:	4b55      	ldr	r3, [pc, #340]	@ (8007d98 <ESP_Upkeep+0x96c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f00b fa0f 	bl	8013068 <TimestampIsReached>
 8007c4a:	1e03      	subs	r3, r0, #0
 8007c4c:	d103      	bne.n	8007c56 <ESP_Upkeep+0x82a>
 8007c4e:	4b53      	ldr	r3, [pc, #332]	@ (8007d9c <ESP_Upkeep+0x970>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d043      	beq.n	8007cde <ESP_Upkeep+0x8b2>
        ESPTransmitDone = false;
 8007c56:	4b52      	ldr	r3, [pc, #328]	@ (8007da0 <ESP_Upkeep+0x974>)
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8007c5c:	4b51      	ldr	r3, [pc, #324]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d105      	bne.n	8007c70 <ESP_Upkeep+0x844>
          InitIsDone = true;
 8007c64:	4b50      	ldr	r3, [pc, #320]	@ (8007da8 <ESP_Upkeep+0x97c>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007c6a:	4b50      	ldr	r3, [pc, #320]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c6c:	220b      	movs	r2, #11
 8007c6e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8007c70:	4b4c      	ldr	r3, [pc, #304]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d108      	bne.n	8007c8a <ESP_Upkeep+0x85e>
          ConnectionMade = true;
 8007c78:	4b4d      	ldr	r3, [pc, #308]	@ (8007db0 <ESP_Upkeep+0x984>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8007c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007db4 <ESP_Upkeep+0x988>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8007c84:	4b49      	ldr	r3, [pc, #292]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c86:	220b      	movs	r2, #11
 8007c88:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8007c8a:	4b46      	ldr	r3, [pc, #280]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d102      	bne.n	8007c98 <ESP_Upkeep+0x86c>
          EspState = ESP_STATE_INIT;
 8007c92:	4b46      	ldr	r3, [pc, #280]	@ (8007dac <ESP_Upkeep+0x980>)
 8007c94:	2202      	movs	r2, #2
 8007c96:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8007c98:	4b42      	ldr	r3, [pc, #264]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d108      	bne.n	8007cb2 <ESP_Upkeep+0x886>
          EspState = ESP_STATE_CONFIG;
 8007ca0:	4b42      	ldr	r3, [pc, #264]	@ (8007dac <ESP_Upkeep+0x980>)
 8007ca2:	220e      	movs	r2, #14
 8007ca4:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8007ca6:	4a44      	ldr	r2, [pc, #272]	@ (8007db8 <ESP_Upkeep+0x98c>)
 8007ca8:	4b44      	ldr	r3, [pc, #272]	@ (8007dbc <ESP_Upkeep+0x990>)
 8007caa:	0019      	movs	r1, r3
 8007cac:	2002      	movs	r0, #2
 8007cae:	f00b fa31 	bl	8013114 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8007cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d105      	bne.n	8007cc6 <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_MODE_SELECT;
 8007cba:	4b3c      	ldr	r3, [pc, #240]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cbc:	220b      	movs	r2, #11
 8007cbe:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8007cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8007dc0 <ESP_Upkeep+0x994>)
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007cc6:	4b35      	ldr	r3, [pc, #212]	@ (8007d9c <ESP_Upkeep+0x970>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d020      	beq.n	8007d10 <ESP_Upkeep+0x8e4>
 8007cce:	4b35      	ldr	r3, [pc, #212]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d01c      	beq.n	8007d10 <ESP_Upkeep+0x8e4>
          EspState = ESP_STATE_INIT;
 8007cd6:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cd8:	2202      	movs	r2, #2
 8007cda:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007cdc:	e018      	b.n	8007d10 <ESP_Upkeep+0x8e4>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 8007cde:	f001 fb9b 	bl	8009418 <calculateNextNTPTime>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <ESP_Upkeep+0x998>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d94e      	bls.n	8007d8a <ESP_Upkeep+0x95e>
        if(Mode == AT_MODE_SEND ) {
 8007cec:	4b2d      	ldr	r3, [pc, #180]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d14a      	bne.n	8007d8a <ESP_Upkeep+0x95e>
           Mode = AT_MODE_GETTIME;
 8007cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8007da4 <ESP_Upkeep+0x978>)
 8007cf6:	2205      	movs	r2, #5
 8007cf8:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 8007cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8007dac <ESP_Upkeep+0x980>)
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 8007d00:	4b25      	ldr	r3, [pc, #148]	@ (8007d98 <ESP_Upkeep+0x96c>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	4b30      	ldr	r3, [pc, #192]	@ (8007dc8 <ESP_Upkeep+0x99c>)
 8007d06:	601a      	str	r2, [r3, #0]
           setTime = true;
 8007d08:	4b30      	ldr	r3, [pc, #192]	@ (8007dcc <ESP_Upkeep+0x9a0>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d0e:	e03c      	b.n	8007d8a <ESP_Upkeep+0x95e>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007d10:	46c0      	nop			@ (mov r8, r8)
      break;
 8007d12:	e03a      	b.n	8007d8a <ESP_Upkeep+0x95e>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <ESP_Upkeep+0x9a4>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4053      	eors	r3, r2
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d008      	beq.n	8007d34 <ESP_Upkeep+0x908>
        Info("Do nothing until reset");
 8007d22:	4a25      	ldr	r2, [pc, #148]	@ (8007db8 <ESP_Upkeep+0x98c>)
 8007d24:	4b25      	ldr	r3, [pc, #148]	@ (8007dbc <ESP_Upkeep+0x990>)
 8007d26:	0019      	movs	r1, r3
 8007d28:	2002      	movs	r0, #2
 8007d2a:	f00b f9f3 	bl	8013114 <CreateLine>
        msgdone = true;
 8007d2e:	4b28      	ldr	r3, [pc, #160]	@ (8007dd0 <ESP_Upkeep+0x9a4>)
 8007d30:	2201      	movs	r2, #1
 8007d32:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 8007d34:	f01a fa7c 	bl	8022230 <GetUsbRxPointer>
 8007d38:	0003      	movs	r3, r0
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f000 f980 	bl	8008040 <Process_PC_Config>
      break;
 8007d40:	e024      	b.n	8007d8c <ESP_Upkeep+0x960>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8007d42:	4a24      	ldr	r2, [pc, #144]	@ (8007dd4 <ESP_Upkeep+0x9a8>)
 8007d44:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <ESP_Upkeep+0x9ac>)
 8007d46:	0019      	movs	r1, r3
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f00b f9e3 	bl	8013114 <CreateLine>
      EspState = ESP_STATE_INIT;
 8007d4e:	4b17      	ldr	r3, [pc, #92]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d50:	2202      	movs	r2, #2
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e01a      	b.n	8007d8c <ESP_Upkeep+0x960>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8007d56:	4a21      	ldr	r2, [pc, #132]	@ (8007ddc <ESP_Upkeep+0x9b0>)
 8007d58:	4b1f      	ldr	r3, [pc, #124]	@ (8007dd8 <ESP_Upkeep+0x9ac>)
 8007d5a:	0019      	movs	r1, r3
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f00b f9d9 	bl	8013114 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8007d62:	4b12      	ldr	r3, [pc, #72]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d64:	2207      	movs	r2, #7
 8007d66:	701a      	strb	r2, [r3, #0]
      break;
 8007d68:	e010      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	e00e      	b.n	8007d8c <ESP_Upkeep+0x960>
        break;
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	e00c      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	e00a      	b.n	8007d8c <ESP_Upkeep+0x960>
        break;
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	e008      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	e006      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	e004      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	e002      	b.n	8007d8c <ESP_Upkeep+0x960>
    break;
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	e000      	b.n	8007d8c <ESP_Upkeep+0x960>
      break;
 8007d8a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8007d8c:	4b07      	ldr	r3, [pc, #28]	@ (8007dac <ESP_Upkeep+0x980>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bdb0      	pop	{r4, r5, r7, pc}
 8007d98:	2000066c 	.word	0x2000066c
 8007d9c:	200005a3 	.word	0x200005a3
 8007da0:	200005a8 	.word	0x200005a8
 8007da4:	20000677 	.word	0x20000677
 8007da8:	200005a1 	.word	0x200005a1
 8007dac:	2000002c 	.word	0x2000002c
 8007db0:	200005a4 	.word	0x200005a4
 8007db4:	200005a6 	.word	0x200005a6
 8007db8:	0802ad10 	.word	0x0802ad10
 8007dbc:	0802aca8 	.word	0x0802aca8
 8007dc0:	200005a5 	.word	0x200005a5
 8007dc4:	20000670 	.word	0x20000670
 8007dc8:	20000028 	.word	0x20000028
 8007dcc:	20000002 	.word	0x20000002
 8007dd0:	200005a7 	.word	0x200005a7
 8007dd4:	0802ad28 	.word	0x0802ad28
 8007dd8:	08029b64 	.word	0x08029b64
 8007ddc:	0802ad3c 	.word	0x0802ad3c

08007de0 <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8007de8:	4b12      	ldr	r3, [pc, #72]	@ (8007e34 <I2CSensors_Init+0x54>)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 8007dee:	4a12      	ldr	r2, [pc, #72]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007df2:	0011      	movs	r1, r2
 8007df4:	0018      	movs	r0, r3
 8007df6:	f00b fb8b 	bl	8013510 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007dfe:	0011      	movs	r1, r2
 8007e00:	0018      	movs	r0, r3
 8007e02:	f008 f9c9 	bl	8010198 <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 8007e06:	4a0e      	ldr	r2, [pc, #56]	@ (8007e40 <I2CSensors_Init+0x60>)
 8007e08:	490b      	ldr	r1, [pc, #44]	@ (8007e38 <I2CSensors_Init+0x58>)
 8007e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e3c <I2CSensors_Init+0x5c>)
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	f002 fa37 	bl	800a280 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 8007e12:	4a0c      	ldr	r2, [pc, #48]	@ (8007e44 <I2CSensors_Init+0x64>)
 8007e14:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <I2CSensors_Init+0x68>)
 8007e16:	0011      	movs	r1, r2
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f002 fffb 	bl	800ae14 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 8007e1e:	4a09      	ldr	r2, [pc, #36]	@ (8007e44 <I2CSensors_Init+0x64>)
 8007e20:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <I2CSensors_Init+0x68>)
 8007e22:	0011      	movs	r1, r2
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fb fea5 	bl	8003b74 <ENS_Init>
}
 8007e2a:	46c0      	nop			@ (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b002      	add	sp, #8
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			@ (mov r8, r8)
 8007e34:	200007a8 	.word	0x200007a8
 8007e38:	08007ef9 	.word	0x08007ef9
 8007e3c:	08007ea5 	.word	0x08007ea5
 8007e40:	08007e4d 	.word	0x08007e4d
 8007e44:	08007fc9 	.word	0x08007fc9
 8007e48:	08007f4d 	.word	0x08007f4d

08007e4c <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	6039      	str	r1, [r7, #0]
 8007e54:	0011      	movs	r1, r2
 8007e56:	1dfb      	adds	r3, r7, #7
 8007e58:	1c02      	adds	r2, r0, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	1dbb      	adds	r3, r7, #6
 8007e5e:	1c0a      	adds	r2, r1, #0
 8007e60:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 8007e62:	4b0f      	ldr	r3, [pc, #60]	@ (8007ea0 <ReadI2CDirect+0x54>)
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	18db      	adds	r3, r3, r3
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	1dbb      	adds	r3, r7, #6
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	260f      	movs	r6, #15
 8007e78:	19bc      	adds	r4, r7, r6
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	25fa      	movs	r5, #250	@ 0xfa
 8007e7e:	9500      	str	r5, [sp, #0]
 8007e80:	f00d faf0 	bl	8015464 <HAL_I2C_Master_Receive>
 8007e84:	0003      	movs	r3, r0
 8007e86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007e88:	19bb      	adds	r3, r7, r6
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <ReadI2CDirect+0x48>
        return false;
 8007e90:	2300      	movs	r3, #0
 8007e92:	e000      	b.n	8007e96 <ReadI2CDirect+0x4a>
    }
    return true;
 8007e94:	2301      	movs	r3, #1
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b005      	add	sp, #20
 8007e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	200007a8 	.word	0x200007a8

08007ea4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007ea4:	b5b0      	push	{r4, r5, r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6039      	str	r1, [r7, #0]
 8007eac:	0011      	movs	r1, r2
 8007eae:	1dfb      	adds	r3, r7, #7
 8007eb0:	1c02      	adds	r2, r0, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	1dbb      	adds	r3, r7, #6
 8007eb6:	1c0a      	adds	r2, r1, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007eba:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef4 <ReadI2C+0x50>)
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	18db      	adds	r3, r3, r3
 8007ec6:	b299      	uxth	r1, r3
 8007ec8:	1dbb      	adds	r3, r7, #6
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	250f      	movs	r5, #15
 8007ed0:	197c      	adds	r4, r7, r5
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	f00d fcd4 	bl	8015880 <HAL_I2C_Master_Receive_DMA>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007edc:	197b      	adds	r3, r7, r5
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <ReadI2C+0x44>
        return false;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e000      	b.n	8007eea <ReadI2C+0x46>
    }
    return true;
 8007ee8:	2301      	movs	r3, #1
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef2:	46c0      	nop			@ (mov r8, r8)
 8007ef4:	200007a8 	.word	0x200007a8

08007ef8 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007ef8:	b5b0      	push	{r4, r5, r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6039      	str	r1, [r7, #0]
 8007f00:	0011      	movs	r1, r2
 8007f02:	1dfb      	adds	r3, r7, #7
 8007f04:	1c02      	adds	r2, r0, #0
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	1dbb      	adds	r3, r7, #6
 8007f0a:	1c0a      	adds	r2, r1, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8007f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f48 <WriteI2C+0x50>)
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	1dfb      	adds	r3, r7, #7
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	18db      	adds	r3, r3, r3
 8007f1a:	b299      	uxth	r1, r3
 8007f1c:	1dbb      	adds	r3, r7, #6
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	250f      	movs	r5, #15
 8007f24:	197c      	adds	r4, r7, r5
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f00d fba4 	bl	8015674 <HAL_I2C_Master_Transmit_DMA>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8007f30:	197b      	adds	r3, r7, r5
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <WriteI2C+0x44>
        return false;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	e000      	b.n	8007f3e <WriteI2C+0x46>
    }
    return true;
 8007f3c:	2301      	movs	r3, #1
}
 8007f3e:	0018      	movs	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b004      	add	sp, #16
 8007f44:	bdb0      	pop	{r4, r5, r7, pc}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	200007a8 	.word	0x200007a8

08007f4c <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	b08b      	sub	sp, #44	@ 0x2c
 8007f50:	af04      	add	r7, sp, #16
 8007f52:	0004      	movs	r4, r0
 8007f54:	0008      	movs	r0, r1
 8007f56:	0011      	movs	r1, r2
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	250f      	movs	r5, #15
 8007f5c:	197b      	adds	r3, r7, r5
 8007f5e:	1c22      	adds	r2, r4, #0
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	260c      	movs	r6, #12
 8007f64:	19bb      	adds	r3, r7, r6
 8007f66:	1c02      	adds	r2, r0, #0
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	1c0a      	adds	r2, r1, #0
 8007f70:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 8007f72:	4b14      	ldr	r3, [pc, #80]	@ (8007fc4 <ReadI2CMem+0x78>)
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	197b      	adds	r3, r7, r5
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	18db      	adds	r3, r3, r3
 8007f7e:	b299      	uxth	r1, r3
 8007f80:	2217      	movs	r2, #23
 8007f82:	18bc      	adds	r4, r7, r2
 8007f84:	230a      	movs	r3, #10
 8007f86:	18fb      	adds	r3, r7, r3
 8007f88:	881d      	ldrh	r5, [r3, #0]
 8007f8a:	19bb      	adds	r3, r7, r6
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	2364      	movs	r3, #100	@ 0x64
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	2328      	movs	r3, #40	@ 0x28
 8007f94:	2608      	movs	r6, #8
 8007f96:	199b      	adds	r3, r3, r6
 8007f98:	19db      	adds	r3, r3, r7
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	9301      	str	r3, [sp, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	002b      	movs	r3, r5
 8007fa4:	f00d fd72 	bl	8015a8c <HAL_I2C_Mem_Read>
 8007fa8:	0003      	movs	r3, r0
 8007faa:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8007fac:	2217      	movs	r2, #23
 8007fae:	18bb      	adds	r3, r7, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <ReadI2CMem+0x6e>
     return false;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e000      	b.n	8007fbc <ReadI2CMem+0x70>
   }
   return true;
 8007fba:	2301      	movs	r3, #1
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b007      	add	sp, #28
 8007fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fc4:	200007a8 	.word	0x200007a8

08007fc8 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8007fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fca:	b089      	sub	sp, #36	@ 0x24
 8007fcc:	af02      	add	r7, sp, #8
 8007fce:	0004      	movs	r4, r0
 8007fd0:	0008      	movs	r0, r1
 8007fd2:	0011      	movs	r1, r2
 8007fd4:	607b      	str	r3, [r7, #4]
 8007fd6:	250f      	movs	r5, #15
 8007fd8:	197b      	adds	r3, r7, r5
 8007fda:	1c22      	adds	r2, r4, #0
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	260c      	movs	r6, #12
 8007fe0:	19bb      	adds	r3, r7, r6
 8007fe2:	1c02      	adds	r2, r0, #0
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	230a      	movs	r3, #10
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	1c0a      	adds	r2, r1, #0
 8007fec:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 8007fee:	4b13      	ldr	r3, [pc, #76]	@ (800803c <WriteI2CMem+0x74>)
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	197b      	adds	r3, r7, r5
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	18db      	adds	r3, r3, r3
 8007ffa:	b299      	uxth	r1, r3
 8007ffc:	2217      	movs	r2, #23
 8007ffe:	18bc      	adds	r4, r7, r2
 8008000:	230a      	movs	r3, #10
 8008002:	18fb      	adds	r3, r7, r3
 8008004:	881d      	ldrh	r5, [r3, #0]
 8008006:	19bb      	adds	r3, r7, r6
 8008008:	881a      	ldrh	r2, [r3, #0]
 800800a:	2328      	movs	r3, #40	@ 0x28
 800800c:	2608      	movs	r6, #8
 800800e:	199b      	adds	r3, r3, r6
 8008010:	19db      	adds	r3, r3, r7
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	9301      	str	r3, [sp, #4]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	002b      	movs	r3, r5
 800801c:	f00d fe6a 	bl	8015cf4 <HAL_I2C_Mem_Write_DMA>
 8008020:	0003      	movs	r3, r0
 8008022:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008024:	2217      	movs	r2, #23
 8008026:	18bb      	adds	r3, r7, r2
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <WriteI2CMem+0x6a>
     return false;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <WriteI2CMem+0x6c>
   }
   return true;
 8008032:	2301      	movs	r3, #1
}
 8008034:	0018      	movs	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	b007      	add	sp, #28
 800803a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800803c:	200007a8 	.word	0x200007a8

08008040 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8008040:	b590      	push	{r4, r7, lr}
 8008042:	b0c3      	sub	sp, #268	@ 0x10c
 8008044:	af3e      	add	r7, sp, #248	@ 0xf8
 8008046:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008048:	f01a f912 	bl	8022270 <GetUsbRxDataSize>
 800804c:	0003      	movs	r3, r0
 800804e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b05      	cmp	r3, #5
 8008054:	d972      	bls.n	800813c <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2123      	movs	r1, #35	@ 0x23
 800805a:	0018      	movs	r0, r3
 800805c:	f01d fb38 	bl	80256d0 <strchr>
 8008060:	0003      	movs	r3, r0
 8008062:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d066      	beq.n	8008138 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	785a      	ldrb	r2, [r3, #1]
 800806e:	4b35      	ldr	r3, [pc, #212]	@ (8008144 <Process_PC_Config+0x104>)
 8008070:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	789a      	ldrb	r2, [r3, #2]
 8008076:	4b33      	ldr	r3, [pc, #204]	@ (8008144 <Process_PC_Config+0x104>)
 8008078:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800807a:	4b32      	ldr	r3, [pc, #200]	@ (8008144 <Process_PC_Config+0x104>)
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	3305      	adds	r3, #5
 8008080:	001a      	movs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4293      	cmp	r3, r2
 8008086:	d352      	bcc.n	800812e <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	1cd9      	adds	r1, r3, #3
 800808c:	4b2d      	ldr	r3, [pc, #180]	@ (8008144 <Process_PC_Config+0x104>)
 800808e:	785b      	ldrb	r3, [r3, #1]
 8008090:	001a      	movs	r2, r3
 8008092:	4b2d      	ldr	r3, [pc, #180]	@ (8008148 <Process_PC_Config+0x108>)
 8008094:	0018      	movs	r0, r3
 8008096:	f01d fbef 	bl	8025878 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800809a:	4b2a      	ldr	r3, [pc, #168]	@ (8008144 <Process_PC_Config+0x104>)
 800809c:	785b      	ldrb	r3, [r3, #1]
 800809e:	3303      	adds	r3, #3
 80080a0:	001a      	movs	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b21b      	sxth	r3, r3
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	b21a      	sxth	r2, r3
 80080ae:	4b25      	ldr	r3, [pc, #148]	@ (8008144 <Process_PC_Config+0x104>)
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	3304      	adds	r3, #4
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	18cb      	adds	r3, r1, r3
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	b21b      	sxth	r3, r3
 80080bc:	4313      	orrs	r3, r2
 80080be:	b21b      	sxth	r3, r3
 80080c0:	b299      	uxth	r1, r3
 80080c2:	4a20      	ldr	r2, [pc, #128]	@ (8008144 <Process_PC_Config+0x104>)
 80080c4:	2381      	movs	r3, #129	@ 0x81
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80080ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008144 <Process_PC_Config+0x104>)
 80080cc:	2381      	movs	r3, #129	@ 0x81
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	5ad4      	ldrh	r4, [r2, r3]
 80080d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008144 <Process_PC_Config+0x104>)
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	3303      	adds	r3, #3
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	0011      	movs	r1, r2
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 fa14 	bl	800850c <CRC16_ARC>
 80080e4:	0003      	movs	r3, r0
 80080e6:	429c      	cmp	r4, r3
 80080e8:	d007      	beq.n	80080fa <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80080ea:	4b16      	ldr	r3, [pc, #88]	@ (8008144 <Process_PC_Config+0x104>)
 80080ec:	785a      	ldrb	r2, [r3, #1]
 80080ee:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <Process_PC_Config+0x108>)
 80080f0:	0019      	movs	r1, r3
 80080f2:	2001      	movs	r0, #1
 80080f4:	f000 f9b8 	bl	8008468 <Create_Message>
 80080f8:	e016      	b.n	8008128 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80080fa:	4c12      	ldr	r4, [pc, #72]	@ (8008144 <Process_PC_Config+0x104>)
 80080fc:	466b      	mov	r3, sp
 80080fe:	0018      	movs	r0, r3
 8008100:	0023      	movs	r3, r4
 8008102:	3310      	adds	r3, #16
 8008104:	22f4      	movs	r2, #244	@ 0xf4
 8008106:	0019      	movs	r1, r3
 8008108:	f01d fbb6 	bl	8025878 <memcpy>
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	6861      	ldr	r1, [r4, #4]
 8008110:	68a2      	ldr	r2, [r4, #8]
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	f000 f81a 	bl	800814c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8008118:	4b0a      	ldr	r3, [pc, #40]	@ (8008144 <Process_PC_Config+0x104>)
 800811a:	7818      	ldrb	r0, [r3, #0]
 800811c:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <Process_PC_Config+0x104>)
 800811e:	785a      	ldrb	r2, [r3, #1]
 8008120:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <Process_PC_Config+0x108>)
 8008122:	0019      	movs	r1, r3
 8008124:	f000 f9a0 	bl	8008468 <Create_Message>
                }
                ResetUsbRxDataSize();
 8008128:	f01a f88a 	bl	8022240 <ResetUsbRxDataSize>
                return;
 800812c:	e006      	b.n	800813c <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	0018      	movs	r0, r3
 8008132:	f01a f8a7 	bl	8022284 <GetUsbRxNextChunk>
 8008136:	e001      	b.n	800813c <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 8008138:	f01a f882 	bl	8022240 <ResetUsbRxDataSize>
        }
    }
}
 800813c:	46bd      	mov	sp, r7
 800813e:	b005      	add	sp, #20
 8008140:	bd90      	pop	{r4, r7, pc}
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	200007ac 	.word	0x200007ac
 8008148:	200007ae 	.word	0x200007ae

0800814c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 800814c:	b084      	sub	sp, #16
 800814e:	b5b0      	push	{r4, r5, r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	2518      	movs	r5, #24
 8008156:	197c      	adds	r4, r7, r5
 8008158:	6020      	str	r0, [r4, #0]
 800815a:	6061      	str	r1, [r4, #4]
 800815c:	60a2      	str	r2, [r4, #8]
 800815e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8008160:	197b      	adds	r3, r7, r5
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2bfe      	cmp	r3, #254	@ 0xfe
 8008166:	d100      	bne.n	800816a <ProcessCmd+0x1e>
 8008168:	e122      	b.n	80083b0 <ProcessCmd+0x264>
 800816a:	dd00      	ble.n	800816e <ProcessCmd+0x22>
 800816c:	e143      	b.n	80083f6 <ProcessCmd+0x2aa>
 800816e:	2b18      	cmp	r3, #24
 8008170:	dc0a      	bgt.n	8008188 <ProcessCmd+0x3c>
 8008172:	2b00      	cmp	r3, #0
 8008174:	da00      	bge.n	8008178 <ProcessCmd+0x2c>
 8008176:	e13e      	b.n	80083f6 <ProcessCmd+0x2aa>
 8008178:	2b18      	cmp	r3, #24
 800817a:	d900      	bls.n	800817e <ProcessCmd+0x32>
 800817c:	e13b      	b.n	80083f6 <ProcessCmd+0x2aa>
 800817e:	009a      	lsls	r2, r3, #2
 8008180:	4ba0      	ldr	r3, [pc, #640]	@ (8008404 <ProcessCmd+0x2b8>)
 8008182:	18d3      	adds	r3, r2, r3
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	469f      	mov	pc, r3
 8008188:	2bfd      	cmp	r3, #253	@ 0xfd
 800818a:	d100      	bne.n	800818e <ProcessCmd+0x42>
 800818c:	e108      	b.n	80083a0 <ProcessCmd+0x254>
            }
            break;
        }
    }

}
 800818e:	e132      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008190:	2118      	movs	r1, #24
 8008192:	187b      	adds	r3, r7, r1
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	001a      	movs	r2, r3
 8008198:	187b      	adds	r3, r7, r1
 800819a:	1c99      	adds	r1, r3, #2
 800819c:	489a      	ldr	r0, [pc, #616]	@ (8008408 <ProcessCmd+0x2bc>)
 800819e:	230c      	movs	r3, #12
 80081a0:	f003 fa76 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80081a4:	e127      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081a6:	2118      	movs	r1, #24
 80081a8:	187b      	adds	r3, r7, r1
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	001a      	movs	r2, r3
 80081ae:	187b      	adds	r3, r7, r1
 80081b0:	1c99      	adds	r1, r3, #2
 80081b2:	4896      	ldr	r0, [pc, #600]	@ (800840c <ProcessCmd+0x2c0>)
 80081b4:	230c      	movs	r3, #12
 80081b6:	f003 fa6b 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80081ba:	e11c      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081bc:	2118      	movs	r1, #24
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	001a      	movs	r2, r3
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	1c99      	adds	r1, r3, #2
 80081c8:	4891      	ldr	r0, [pc, #580]	@ (8008410 <ProcessCmd+0x2c4>)
 80081ca:	230c      	movs	r3, #12
 80081cc:	f003 fa60 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80081d0:	e111      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081d2:	2118      	movs	r1, #24
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	001a      	movs	r2, r3
 80081da:	187b      	adds	r3, r7, r1
 80081dc:	1c99      	adds	r1, r3, #2
 80081de:	488d      	ldr	r0, [pc, #564]	@ (8008414 <ProcessCmd+0x2c8>)
 80081e0:	230c      	movs	r3, #12
 80081e2:	f003 fa55 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80081e6:	e106      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081e8:	2118      	movs	r1, #24
 80081ea:	187b      	adds	r3, r7, r1
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	001a      	movs	r2, r3
 80081f0:	187b      	adds	r3, r7, r1
 80081f2:	1c99      	adds	r1, r3, #2
 80081f4:	4888      	ldr	r0, [pc, #544]	@ (8008418 <ProcessCmd+0x2cc>)
 80081f6:	230c      	movs	r3, #12
 80081f8:	f003 fa4a 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80081fc:	e0fb      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80081fe:	2118      	movs	r1, #24
 8008200:	187b      	adds	r3, r7, r1
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	001a      	movs	r2, r3
 8008206:	187b      	adds	r3, r7, r1
 8008208:	1c99      	adds	r1, r3, #2
 800820a:	4884      	ldr	r0, [pc, #528]	@ (800841c <ProcessCmd+0x2d0>)
 800820c:	230c      	movs	r3, #12
 800820e:	f003 fa3f 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008212:	e0f0      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008214:	2118      	movs	r1, #24
 8008216:	187b      	adds	r3, r7, r1
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	001a      	movs	r2, r3
 800821c:	187b      	adds	r3, r7, r1
 800821e:	1c99      	adds	r1, r3, #2
 8008220:	487f      	ldr	r0, [pc, #508]	@ (8008420 <ProcessCmd+0x2d4>)
 8008222:	230c      	movs	r3, #12
 8008224:	f003 fa34 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008228:	e0e5      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800822a:	2118      	movs	r1, #24
 800822c:	187b      	adds	r3, r7, r1
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	001a      	movs	r2, r3
 8008232:	187b      	adds	r3, r7, r1
 8008234:	1c99      	adds	r1, r3, #2
 8008236:	487b      	ldr	r0, [pc, #492]	@ (8008424 <ProcessCmd+0x2d8>)
 8008238:	230c      	movs	r3, #12
 800823a:	f003 fa29 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 800823e:	e0da      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008240:	2118      	movs	r1, #24
 8008242:	187b      	adds	r3, r7, r1
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	001a      	movs	r2, r3
 8008248:	187b      	adds	r3, r7, r1
 800824a:	1c99      	adds	r1, r3, #2
 800824c:	4876      	ldr	r0, [pc, #472]	@ (8008428 <ProcessCmd+0x2dc>)
 800824e:	230c      	movs	r3, #12
 8008250:	f003 fa1e 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008254:	e0cf      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008256:	2118      	movs	r1, #24
 8008258:	187b      	adds	r3, r7, r1
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	001a      	movs	r2, r3
 800825e:	187b      	adds	r3, r7, r1
 8008260:	1c99      	adds	r1, r3, #2
 8008262:	4872      	ldr	r0, [pc, #456]	@ (800842c <ProcessCmd+0x2e0>)
 8008264:	230c      	movs	r3, #12
 8008266:	f003 fa13 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 800826a:	e0c4      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800826c:	2118      	movs	r1, #24
 800826e:	187b      	adds	r3, r7, r1
 8008270:	785b      	ldrb	r3, [r3, #1]
 8008272:	001a      	movs	r2, r3
 8008274:	187b      	adds	r3, r7, r1
 8008276:	1c99      	adds	r1, r3, #2
 8008278:	486d      	ldr	r0, [pc, #436]	@ (8008430 <ProcessCmd+0x2e4>)
 800827a:	230c      	movs	r3, #12
 800827c:	f003 fa08 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008280:	e0b9      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8008282:	2118      	movs	r1, #24
 8008284:	187b      	adds	r3, r7, r1
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	001a      	movs	r2, r3
 800828a:	187b      	adds	r3, r7, r1
 800828c:	1c99      	adds	r1, r3, #2
 800828e:	4869      	ldr	r0, [pc, #420]	@ (8008434 <ProcessCmd+0x2e8>)
 8008290:	2320      	movs	r3, #32
 8008292:	f003 f9fd 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008296:	e0ae      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008298:	2118      	movs	r1, #24
 800829a:	187b      	adds	r3, r7, r1
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	001a      	movs	r2, r3
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	1c99      	adds	r1, r3, #2
 80082a4:	4864      	ldr	r0, [pc, #400]	@ (8008438 <ProcessCmd+0x2ec>)
 80082a6:	230c      	movs	r3, #12
 80082a8:	f003 f9f2 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80082ac:	e0a3      	b.n	80083f6 <ProcessCmd+0x2aa>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082ae:	2118      	movs	r1, #24
 80082b0:	187b      	adds	r3, r7, r1
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	001a      	movs	r2, r3
 80082b6:	187b      	adds	r3, r7, r1
 80082b8:	1c99      	adds	r1, r3, #2
 80082ba:	4860      	ldr	r0, [pc, #384]	@ (800843c <ProcessCmd+0x2f0>)
 80082bc:	230c      	movs	r3, #12
 80082be:	f003 f9e7 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80082c2:	e098      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082c4:	2118      	movs	r1, #24
 80082c6:	187b      	adds	r3, r7, r1
 80082c8:	785b      	ldrb	r3, [r3, #1]
 80082ca:	001a      	movs	r2, r3
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	1c99      	adds	r1, r3, #2
 80082d0:	485b      	ldr	r0, [pc, #364]	@ (8008440 <ProcessCmd+0x2f4>)
 80082d2:	230c      	movs	r3, #12
 80082d4:	f003 f9dc 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80082d8:	e08d      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082da:	2118      	movs	r1, #24
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	785b      	ldrb	r3, [r3, #1]
 80082e0:	001a      	movs	r2, r3
 80082e2:	187b      	adds	r3, r7, r1
 80082e4:	1c99      	adds	r1, r3, #2
 80082e6:	4857      	ldr	r0, [pc, #348]	@ (8008444 <ProcessCmd+0x2f8>)
 80082e8:	230c      	movs	r3, #12
 80082ea:	f003 f9d1 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 80082ee:	e082      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80082f0:	2118      	movs	r1, #24
 80082f2:	187b      	adds	r3, r7, r1
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	001a      	movs	r2, r3
 80082f8:	187b      	adds	r3, r7, r1
 80082fa:	1c99      	adds	r1, r3, #2
 80082fc:	4852      	ldr	r0, [pc, #328]	@ (8008448 <ProcessCmd+0x2fc>)
 80082fe:	230c      	movs	r3, #12
 8008300:	f003 f9c6 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008304:	e077      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008306:	2118      	movs	r1, #24
 8008308:	187b      	adds	r3, r7, r1
 800830a:	785b      	ldrb	r3, [r3, #1]
 800830c:	001a      	movs	r2, r3
 800830e:	187b      	adds	r3, r7, r1
 8008310:	1c99      	adds	r1, r3, #2
 8008312:	484e      	ldr	r0, [pc, #312]	@ (800844c <ProcessCmd+0x300>)
 8008314:	230c      	movs	r3, #12
 8008316:	f003 f9bb 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 800831a:	e06c      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800831c:	2118      	movs	r1, #24
 800831e:	187b      	adds	r3, r7, r1
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	001a      	movs	r2, r3
 8008324:	187b      	adds	r3, r7, r1
 8008326:	1c99      	adds	r1, r3, #2
 8008328:	4849      	ldr	r0, [pc, #292]	@ (8008450 <ProcessCmd+0x304>)
 800832a:	230c      	movs	r3, #12
 800832c:	f003 f9b0 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008330:	e061      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008332:	2118      	movs	r1, #24
 8008334:	187b      	adds	r3, r7, r1
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	001a      	movs	r2, r3
 800833a:	187b      	adds	r3, r7, r1
 800833c:	1c99      	adds	r1, r3, #2
 800833e:	4845      	ldr	r0, [pc, #276]	@ (8008454 <ProcessCmd+0x308>)
 8008340:	230c      	movs	r3, #12
 8008342:	f003 f9a5 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008346:	e056      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008348:	2118      	movs	r1, #24
 800834a:	187b      	adds	r3, r7, r1
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	001a      	movs	r2, r3
 8008350:	187b      	adds	r3, r7, r1
 8008352:	1c99      	adds	r1, r3, #2
 8008354:	4840      	ldr	r0, [pc, #256]	@ (8008458 <ProcessCmd+0x30c>)
 8008356:	230c      	movs	r3, #12
 8008358:	f003 f99a 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 800835c:	e04b      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800835e:	2118      	movs	r1, #24
 8008360:	187b      	adds	r3, r7, r1
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	001a      	movs	r2, r3
 8008366:	187b      	adds	r3, r7, r1
 8008368:	1c99      	adds	r1, r3, #2
 800836a:	483c      	ldr	r0, [pc, #240]	@ (800845c <ProcessCmd+0x310>)
 800836c:	230c      	movs	r3, #12
 800836e:	f003 f98f 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008372:	e040      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008374:	2118      	movs	r1, #24
 8008376:	187b      	adds	r3, r7, r1
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	001a      	movs	r2, r3
 800837c:	187b      	adds	r3, r7, r1
 800837e:	1c99      	adds	r1, r3, #2
 8008380:	4837      	ldr	r0, [pc, #220]	@ (8008460 <ProcessCmd+0x314>)
 8008382:	230c      	movs	r3, #12
 8008384:	f003 f984 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 8008388:	e035      	b.n	80083f6 <ProcessCmd+0x2aa>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800838a:	2118      	movs	r1, #24
 800838c:	187b      	adds	r3, r7, r1
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	001a      	movs	r2, r3
 8008392:	187b      	adds	r3, r7, r1
 8008394:	1c99      	adds	r1, r3, #2
 8008396:	4833      	ldr	r0, [pc, #204]	@ (8008464 <ProcessCmd+0x318>)
 8008398:	230c      	movs	r3, #12
 800839a:	f003 f979 	bl	800b690 <WriteUint8ArrayEepromSafe>
        break;
 800839e:	e02a      	b.n	80083f6 <ProcessCmd+0x2aa>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80083a0:	23ca      	movs	r3, #202	@ 0xca
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4a18      	ldr	r2, [pc, #96]	@ (8008408 <ProcessCmd+0x2bc>)
 80083a6:	0019      	movs	r1, r3
 80083a8:	0010      	movs	r0, r2
 80083aa:	f003 f9b6 	bl	800b71a <ClearEEprom>
        break;
 80083ae:	e022      	b.n	80083f6 <ProcessCmd+0x2aa>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80083b0:	2118      	movs	r1, #24
 80083b2:	187b      	adds	r3, r7, r1
 80083b4:	789b      	ldrb	r3, [r3, #2]
 80083b6:	b21b      	sxth	r3, r3
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	b21a      	sxth	r2, r3
 80083bc:	187b      	adds	r3, r7, r1
 80083be:	78db      	ldrb	r3, [r3, #3]
 80083c0:	b21b      	sxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b21a      	sxth	r2, r3
 80083c6:	1dbb      	adds	r3, r7, #6
 80083c8:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80083ca:	1dbb      	adds	r3, r7, #6
 80083cc:	881a      	ldrh	r2, [r3, #0]
 80083ce:	23c0      	movs	r3, #192	@ 0xc0
 80083d0:	015b      	lsls	r3, r3, #5
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d207      	bcs.n	80083e6 <ProcessCmd+0x29a>
                ClearEEprom(EEPromStartAddr, size);
 80083d6:	1dbb      	adds	r3, r7, #6
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	4a0b      	ldr	r2, [pc, #44]	@ (8008408 <ProcessCmd+0x2bc>)
 80083dc:	0019      	movs	r1, r3
 80083de:	0010      	movs	r0, r2
 80083e0:	f003 f99b 	bl	800b71a <ClearEEprom>
            break;
 80083e4:	e006      	b.n	80083f4 <ProcessCmd+0x2a8>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80083e6:	23c0      	movs	r3, #192	@ 0xc0
 80083e8:	015b      	lsls	r3, r3, #5
 80083ea:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <ProcessCmd+0x2bc>)
 80083ec:	0019      	movs	r1, r3
 80083ee:	0010      	movs	r0, r2
 80083f0:	f003 f993 	bl	800b71a <ClearEEprom>
            break;
 80083f4:	46c0      	nop			@ (mov r8, r8)
}
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b002      	add	sp, #8
 80083fc:	bcb0      	pop	{r4, r5, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	b004      	add	sp, #16
 8008402:	4718      	bx	r3
 8008404:	0802d860 	.word	0x0802d860
 8008408:	08080000 	.word	0x08080000
 800840c:	0808000c 	.word	0x0808000c
 8008410:	08080018 	.word	0x08080018
 8008414:	08080024 	.word	0x08080024
 8008418:	08080030 	.word	0x08080030
 800841c:	0808003c 	.word	0x0808003c
 8008420:	08080048 	.word	0x08080048
 8008424:	08080054 	.word	0x08080054
 8008428:	08080060 	.word	0x08080060
 800842c:	0808006c 	.word	0x0808006c
 8008430:	08080078 	.word	0x08080078
 8008434:	08080090 	.word	0x08080090
 8008438:	080800b0 	.word	0x080800b0
 800843c:	080800bc 	.word	0x080800bc
 8008440:	080800c8 	.word	0x080800c8
 8008444:	080800d4 	.word	0x080800d4
 8008448:	080800e0 	.word	0x080800e0
 800844c:	080800ec 	.word	0x080800ec
 8008450:	080800f8 	.word	0x080800f8
 8008454:	08080104 	.word	0x08080104
 8008458:	08080110 	.word	0x08080110
 800845c:	08080130 	.word	0x08080130
 8008460:	08080170 	.word	0x08080170
 8008464:	0808017c 	.word	0x0808017c

08008468 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6039      	str	r1, [r7, #0]
 8008470:	0011      	movs	r1, r2
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	1c02      	adds	r2, r0, #0
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	1dbb      	adds	r3, r7, #6
 800847a:	1c0a      	adds	r2, r1, #0
 800847c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 800847e:	2223      	movs	r2, #35	@ 0x23
 8008480:	4b20      	ldr	r3, [pc, #128]	@ (8008504 <Create_Message+0x9c>)
 8008482:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8008484:	4b1f      	ldr	r3, [pc, #124]	@ (8008504 <Create_Message+0x9c>)
 8008486:	1dfa      	adds	r2, r7, #7
 8008488:	7812      	ldrb	r2, [r2, #0]
 800848a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800848c:	4b1d      	ldr	r3, [pc, #116]	@ (8008504 <Create_Message+0x9c>)
 800848e:	1dba      	adds	r2, r7, #6
 8008490:	7812      	ldrb	r2, [r2, #0]
 8008492:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8008494:	1dbb      	adds	r3, r7, #6
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	4b1b      	ldr	r3, [pc, #108]	@ (8008508 <Create_Message+0xa0>)
 800849c:	0018      	movs	r0, r3
 800849e:	f01d f9eb 	bl	8025878 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80084a2:	1dbb      	adds	r3, r7, #6
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	250e      	movs	r5, #14
 80084aa:	197b      	adds	r3, r7, r5
 80084ac:	3203      	adds	r2, #3
 80084ae:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80084b0:	260c      	movs	r6, #12
 80084b2:	19bc      	adds	r4, r7, r6
 80084b4:	197b      	adds	r3, r7, r5
 80084b6:	881a      	ldrh	r2, [r3, #0]
 80084b8:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <Create_Message+0x9c>)
 80084ba:	0011      	movs	r1, r2
 80084bc:	0018      	movs	r0, r3
 80084be:	f000 f825 	bl	800850c <CRC16_ARC>
 80084c2:	0003      	movs	r3, r0
 80084c4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80084c6:	0030      	movs	r0, r6
 80084c8:	183b      	adds	r3, r7, r0
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	0a1b      	lsrs	r3, r3, #8
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	197b      	adds	r3, r7, r5
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b2d1      	uxtb	r1, r2
 80084d6:	4a0b      	ldr	r2, [pc, #44]	@ (8008504 <Create_Message+0x9c>)
 80084d8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80084da:	197b      	adds	r3, r7, r5
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	183a      	adds	r2, r7, r0
 80084e2:	8812      	ldrh	r2, [r2, #0]
 80084e4:	b2d1      	uxtb	r1, r2
 80084e6:	4a07      	ldr	r2, [pc, #28]	@ (8008504 <Create_Message+0x9c>)
 80084e8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80084ea:	197b      	adds	r3, r7, r5
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	3302      	adds	r3, #2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	4b04      	ldr	r3, [pc, #16]	@ (8008504 <Create_Message+0x9c>)
 80084f4:	0011      	movs	r1, r2
 80084f6:	0018      	movs	r0, r3
 80084f8:	f019 fe60 	bl	80221bc <CDC_Transmit_FS>
}
 80084fc:	46c0      	nop			@ (mov r8, r8)
 80084fe:	46bd      	mov	sp, r7
 8008500:	b005      	add	sp, #20
 8008502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008504:	200008b8 	.word	0x200008b8
 8008508:	200008bb 	.word	0x200008bb

0800850c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	000a      	movs	r2, r1
 8008516:	1cbb      	adds	r3, r7, #2
 8008518:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800851a:	2316      	movs	r3, #22
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	2200      	movs	r2, #0
 8008520:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	e02e      	b.n	8008586 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	18d3      	adds	r3, r2, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	0019      	movs	r1, r3
 8008532:	2216      	movs	r2, #22
 8008534:	18bb      	adds	r3, r7, r2
 8008536:	18ba      	adds	r2, r7, r2
 8008538:	8812      	ldrh	r2, [r2, #0]
 800853a:	404a      	eors	r2, r1
 800853c:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e01a      	b.n	800857a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8008544:	2116      	movs	r1, #22
 8008546:	187b      	adds	r3, r7, r1
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	2201      	movs	r2, #1
 800854c:	4013      	ands	r3, r2
 800854e:	d00b      	beq.n	8008568 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008550:	187b      	adds	r3, r7, r1
 8008552:	187a      	adds	r2, r7, r1
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	0852      	lsrs	r2, r2, #1
 8008558:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800855a:	187b      	adds	r3, r7, r1
 800855c:	187a      	adds	r2, r7, r1
 800855e:	8812      	ldrh	r2, [r2, #0]
 8008560:	490f      	ldr	r1, [pc, #60]	@ (80085a0 <CRC16_ARC+0x94>)
 8008562:	404a      	eors	r2, r1
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e005      	b.n	8008574 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008568:	2216      	movs	r2, #22
 800856a:	18bb      	adds	r3, r7, r2
 800856c:	18ba      	adds	r2, r7, r2
 800856e:	8812      	ldrh	r2, [r2, #0]
 8008570:	0852      	lsrs	r2, r2, #1
 8008572:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	3301      	adds	r3, #1
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b07      	cmp	r3, #7
 800857e:	dde1      	ble.n	8008544 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	3301      	adds	r3, #1
 8008584:	613b      	str	r3, [r7, #16]
 8008586:	1cbb      	adds	r3, r7, #2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	429a      	cmp	r2, r3
 800858e:	dbcb      	blt.n	8008528 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008590:	2316      	movs	r3, #22
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	881b      	ldrh	r3, [r3, #0]
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b006      	add	sp, #24
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			@ (mov r8, r8)
 80085a0:	ffffa001 	.word	0xffffa001

080085a4 <printf_USB>:

void printf_USB(const char* message, ...)
{
 80085a4:	b40f      	push	{r0, r1, r2, r3}
 80085a6:	b590      	push	{r4, r7, lr}
 80085a8:	b0a9      	sub	sp, #164	@ 0xa4
 80085aa:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 80085ac:	23ac      	movs	r3, #172	@ 0xac
 80085ae:	2108      	movs	r1, #8
 80085b0:	185b      	adds	r3, r3, r1
 80085b2:	19db      	adds	r3, r3, r7
 80085b4:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	23a8      	movs	r3, #168	@ 0xa8
 80085ba:	185b      	adds	r3, r3, r1
 80085bc:	19db      	adds	r3, r3, r7
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	2408      	movs	r4, #8
 80085c2:	193b      	adds	r3, r7, r4
 80085c4:	0018      	movs	r0, r3
 80085c6:	f01c ffcf 	bl	8025568 <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 80085ca:	193b      	adds	r3, r7, r4
 80085cc:	0018      	movs	r0, r3
 80085ce:	f7f7 fdcd 	bl	800016c <strlen>
 80085d2:	0003      	movs	r3, r0
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	193b      	adds	r3, r7, r4
 80085d8:	0011      	movs	r1, r2
 80085da:	0018      	movs	r0, r3
 80085dc:	f019 fdee 	bl	80221bc <CDC_Transmit_FS>
}
 80085e0:	46c0      	nop			@ (mov r8, r8)
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b029      	add	sp, #164	@ 0xa4
 80085e6:	bc90      	pop	{r4, r7}
 80085e8:	bc08      	pop	{r3}
 80085ea:	b004      	add	sp, #16
 80085ec:	4718      	bx	r3

080085ee <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	000a      	movs	r2, r1
 80085f8:	1cfb      	adds	r3, r7, #3
 80085fa:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 80085fc:	1cfb      	adds	r3, r7, #3
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <PC_selectout+0x1e>
    printf_USB(msg);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	0018      	movs	r0, r3
 8008608:	f7ff ffcc 	bl	80085a4 <printf_USB>
  }
//  else {
    printf(msg);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	0018      	movs	r0, r3
 8008610:	f01c fe7c 	bl	802530c <iprintf>
//  }
  HAL_Delay(10); //wait for the host poll of the USB buffer
 8008614:	200a      	movs	r0, #10
 8008616:	f00b fac7 	bl	8013ba8 <HAL_Delay>
}
 800861a:	46c0      	nop			@ (mov r8, r8)
 800861c:	46bd      	mov	sp, r7
 800861e:	b002      	add	sp, #8
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <PC_show_Keys>:

void PC_show_Keys() {
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  static uint8_t UptimeConfig[IdSize];            // 25
#endif

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008628:	f000 fe68 	bl	80092fc <Check_USB_PowerOn>
 800862c:	1e03      	subs	r3, r0, #0
 800862e:	d005      	beq.n	800863c <PC_show_Keys+0x18>
    usb_out = true;
 8008630:	4b01      	ldr	r3, [pc, #4]	@ (8008638 <PC_show_Keys+0x14>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e004      	b.n	8008642 <PC_show_Keys+0x1e>
 8008638:	200009bd 	.word	0x200009bd
  }
  else {
    usb_out = false;
 800863c:	4bfd      	ldr	r3, [pc, #1012]	@ (8008a34 <PC_show_Keys+0x410>)
 800863e:	2200      	movs	r2, #0
 8008640:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 8008642:	4afd      	ldr	r2, [pc, #1012]	@ (8008a38 <PC_show_Keys+0x414>)
 8008644:	4bfd      	ldr	r3, [pc, #1012]	@ (8008a3c <PC_show_Keys+0x418>)
 8008646:	0011      	movs	r1, r2
 8008648:	0018      	movs	r0, r3
 800864a:	f01c fecf 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 800864e:	4bf9      	ldr	r3, [pc, #996]	@ (8008a34 <PC_show_Keys+0x410>)
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	4bfa      	ldr	r3, [pc, #1000]	@ (8008a3c <PC_show_Keys+0x418>)
 8008654:	0011      	movs	r1, r2
 8008656:	0018      	movs	r0, r3
 8008658:	f7ff ffc9 	bl	80085ee <PC_selectout>
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800865c:	4bf8      	ldr	r3, [pc, #992]	@ (8008a40 <PC_show_Keys+0x41c>)
 800865e:	48f9      	ldr	r0, [pc, #996]	@ (8008a44 <PC_show_Keys+0x420>)
 8008660:	220c      	movs	r2, #12
 8008662:	0019      	movs	r1, r3
 8008664:	f003 f830 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008668:	4af5      	ldr	r2, [pc, #980]	@ (8008a40 <PC_show_Keys+0x41c>)
 800866a:	4bf7      	ldr	r3, [pc, #988]	@ (8008a48 <PC_show_Keys+0x424>)
 800866c:	0011      	movs	r1, r2
 800866e:	0018      	movs	r0, r3
 8008670:	f7fc fe20 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "Box id -----------------------------: %s\r\n", Buffer);
 8008674:	4af4      	ldr	r2, [pc, #976]	@ (8008a48 <PC_show_Keys+0x424>)
 8008676:	49f5      	ldr	r1, [pc, #980]	@ (8008a4c <PC_show_Keys+0x428>)
 8008678:	4bf0      	ldr	r3, [pc, #960]	@ (8008a3c <PC_show_Keys+0x418>)
 800867a:	0018      	movs	r0, r3
 800867c:	f01c feb6 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008680:	4bec      	ldr	r3, [pc, #944]	@ (8008a34 <PC_show_Keys+0x410>)
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	4bed      	ldr	r3, [pc, #948]	@ (8008a3c <PC_show_Keys+0x418>)
 8008686:	0011      	movs	r1, r2
 8008688:	0018      	movs	r0, r3
 800868a:	f7ff ffb0 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 800868e:	4bf0      	ldr	r3, [pc, #960]	@ (8008a50 <PC_show_Keys+0x42c>)
 8008690:	48f0      	ldr	r0, [pc, #960]	@ (8008a54 <PC_show_Keys+0x430>)
 8008692:	220c      	movs	r2, #12
 8008694:	0019      	movs	r1, r3
 8008696:	f003 f817 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 800869a:	4aed      	ldr	r2, [pc, #948]	@ (8008a50 <PC_show_Keys+0x42c>)
 800869c:	4bea      	ldr	r3, [pc, #936]	@ (8008a48 <PC_show_Keys+0x424>)
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f7fc fe07 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "01 - Temperature sensor id: --------: %s\r\n", Buffer);
 80086a6:	4ae8      	ldr	r2, [pc, #928]	@ (8008a48 <PC_show_Keys+0x424>)
 80086a8:	49eb      	ldr	r1, [pc, #940]	@ (8008a58 <PC_show_Keys+0x434>)
 80086aa:	4be4      	ldr	r3, [pc, #912]	@ (8008a3c <PC_show_Keys+0x418>)
 80086ac:	0018      	movs	r0, r3
 80086ae:	f01c fe9d 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086b2:	4be0      	ldr	r3, [pc, #896]	@ (8008a34 <PC_show_Keys+0x410>)
 80086b4:	781a      	ldrb	r2, [r3, #0]
 80086b6:	4be1      	ldr	r3, [pc, #900]	@ (8008a3c <PC_show_Keys+0x418>)
 80086b8:	0011      	movs	r1, r2
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff ff97 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 80086c0:	4be6      	ldr	r3, [pc, #920]	@ (8008a5c <PC_show_Keys+0x438>)
 80086c2:	48e7      	ldr	r0, [pc, #924]	@ (8008a60 <PC_show_Keys+0x43c>)
 80086c4:	220c      	movs	r2, #12
 80086c6:	0019      	movs	r1, r3
 80086c8:	f002 fffe 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 80086cc:	4ae3      	ldr	r2, [pc, #908]	@ (8008a5c <PC_show_Keys+0x438>)
 80086ce:	4bde      	ldr	r3, [pc, #888]	@ (8008a48 <PC_show_Keys+0x424>)
 80086d0:	0011      	movs	r1, r2
 80086d2:	0018      	movs	r0, r3
 80086d4:	f7fc fdee 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "02 - Humidity sensor id ------------: %s\r\n", Buffer);
 80086d8:	4adb      	ldr	r2, [pc, #876]	@ (8008a48 <PC_show_Keys+0x424>)
 80086da:	49e2      	ldr	r1, [pc, #904]	@ (8008a64 <PC_show_Keys+0x440>)
 80086dc:	4bd7      	ldr	r3, [pc, #860]	@ (8008a3c <PC_show_Keys+0x418>)
 80086de:	0018      	movs	r0, r3
 80086e0:	f01c fe84 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80086e4:	4bd3      	ldr	r3, [pc, #844]	@ (8008a34 <PC_show_Keys+0x410>)
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	4bd4      	ldr	r3, [pc, #848]	@ (8008a3c <PC_show_Keys+0x418>)
 80086ea:	0011      	movs	r1, r2
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7ff ff7e 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 80086f2:	4bdd      	ldr	r3, [pc, #884]	@ (8008a68 <PC_show_Keys+0x444>)
 80086f4:	48dd      	ldr	r0, [pc, #884]	@ (8008a6c <PC_show_Keys+0x448>)
 80086f6:	220c      	movs	r2, #12
 80086f8:	0019      	movs	r1, r3
 80086fa:	f002 ffe5 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 80086fe:	4ada      	ldr	r2, [pc, #872]	@ (8008a68 <PC_show_Keys+0x444>)
 8008700:	4bd1      	ldr	r3, [pc, #836]	@ (8008a48 <PC_show_Keys+0x424>)
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f7fc fdd5 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "03 - NOx sensor id -----------------: %s\r\n", Buffer);
 800870a:	4acf      	ldr	r2, [pc, #828]	@ (8008a48 <PC_show_Keys+0x424>)
 800870c:	49d8      	ldr	r1, [pc, #864]	@ (8008a70 <PC_show_Keys+0x44c>)
 800870e:	4bcb      	ldr	r3, [pc, #812]	@ (8008a3c <PC_show_Keys+0x418>)
 8008710:	0018      	movs	r0, r3
 8008712:	f01c fe6b 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008716:	4bc7      	ldr	r3, [pc, #796]	@ (8008a34 <PC_show_Keys+0x410>)
 8008718:	781a      	ldrb	r2, [r3, #0]
 800871a:	4bc8      	ldr	r3, [pc, #800]	@ (8008a3c <PC_show_Keys+0x418>)
 800871c:	0011      	movs	r1, r2
 800871e:	0018      	movs	r0, r3
 8008720:	f7ff ff65 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008724:	4bd3      	ldr	r3, [pc, #844]	@ (8008a74 <PC_show_Keys+0x450>)
 8008726:	48d4      	ldr	r0, [pc, #848]	@ (8008a78 <PC_show_Keys+0x454>)
 8008728:	220c      	movs	r2, #12
 800872a:	0019      	movs	r1, r3
 800872c:	f002 ffcc 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008730:	4ad0      	ldr	r2, [pc, #832]	@ (8008a74 <PC_show_Keys+0x450>)
 8008732:	4bc5      	ldr	r3, [pc, #788]	@ (8008a48 <PC_show_Keys+0x424>)
 8008734:	0011      	movs	r1, r2
 8008736:	0018      	movs	r0, r3
 8008738:	f7fc fdbc 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "04 - VOC sensor id -----------------: %s\r\n", Buffer);
 800873c:	4ac2      	ldr	r2, [pc, #776]	@ (8008a48 <PC_show_Keys+0x424>)
 800873e:	49cf      	ldr	r1, [pc, #828]	@ (8008a7c <PC_show_Keys+0x458>)
 8008740:	4bbe      	ldr	r3, [pc, #760]	@ (8008a3c <PC_show_Keys+0x418>)
 8008742:	0018      	movs	r0, r3
 8008744:	f01c fe52 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008748:	4bba      	ldr	r3, [pc, #744]	@ (8008a34 <PC_show_Keys+0x410>)
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	4bbb      	ldr	r3, [pc, #748]	@ (8008a3c <PC_show_Keys+0x418>)
 800874e:	0011      	movs	r1, r2
 8008750:	0018      	movs	r0, r3
 8008752:	f7ff ff4c 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 8008756:	4bca      	ldr	r3, [pc, #808]	@ (8008a80 <PC_show_Keys+0x45c>)
 8008758:	48ca      	ldr	r0, [pc, #808]	@ (8008a84 <PC_show_Keys+0x460>)
 800875a:	220c      	movs	r2, #12
 800875c:	0019      	movs	r1, r3
 800875e:	f002 ffb3 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 8008762:	4ac7      	ldr	r2, [pc, #796]	@ (8008a80 <PC_show_Keys+0x45c>)
 8008764:	4bb8      	ldr	r3, [pc, #736]	@ (8008a48 <PC_show_Keys+0x424>)
 8008766:	0011      	movs	r1, r2
 8008768:	0018      	movs	r0, r3
 800876a:	f7fc fda3 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "05 is former dBa unused\r\n");
 800876e:	4ac6      	ldr	r2, [pc, #792]	@ (8008a88 <PC_show_Keys+0x464>)
 8008770:	4bb2      	ldr	r3, [pc, #712]	@ (8008a3c <PC_show_Keys+0x418>)
 8008772:	0011      	movs	r1, r2
 8008774:	0018      	movs	r0, r3
 8008776:	f01c fe39 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 800877a:	4bae      	ldr	r3, [pc, #696]	@ (8008a34 <PC_show_Keys+0x410>)
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	4baf      	ldr	r3, [pc, #700]	@ (8008a3c <PC_show_Keys+0x418>)
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff ff33 	bl	80085ee <PC_selectout>
  sprintf(msg, "05 - Air pressure sensor id --------: %s\r\n", Buffer);
 8008788:	4aaf      	ldr	r2, [pc, #700]	@ (8008a48 <PC_show_Keys+0x424>)
 800878a:	49c0      	ldr	r1, [pc, #768]	@ (8008a8c <PC_show_Keys+0x468>)
 800878c:	4bab      	ldr	r3, [pc, #684]	@ (8008a3c <PC_show_Keys+0x418>)
 800878e:	0018      	movs	r0, r3
 8008790:	f01c fe2c 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008794:	4ba7      	ldr	r3, [pc, #668]	@ (8008a34 <PC_show_Keys+0x410>)
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	4ba8      	ldr	r3, [pc, #672]	@ (8008a3c <PC_show_Keys+0x418>)
 800879a:	0011      	movs	r1, r2
 800879c:	0018      	movs	r0, r3
 800879e:	f7ff ff26 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 80087a2:	4bbb      	ldr	r3, [pc, #748]	@ (8008a90 <PC_show_Keys+0x46c>)
 80087a4:	48bb      	ldr	r0, [pc, #748]	@ (8008a94 <PC_show_Keys+0x470>)
 80087a6:	220c      	movs	r2, #12
 80087a8:	0019      	movs	r1, r3
 80087aa:	f002 ff8d 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 80087ae:	4ab8      	ldr	r2, [pc, #736]	@ (8008a90 <PC_show_Keys+0x46c>)
 80087b0:	4ba5      	ldr	r3, [pc, #660]	@ (8008a48 <PC_show_Keys+0x424>)
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f7fc fd7d 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "06 is former dBc\r\n");
 80087ba:	4ab7      	ldr	r2, [pc, #732]	@ (8008a98 <PC_show_Keys+0x474>)
 80087bc:	4b9f      	ldr	r3, [pc, #636]	@ (8008a3c <PC_show_Keys+0x418>)
 80087be:	0011      	movs	r1, r2
 80087c0:	0018      	movs	r0, r3
 80087c2:	f01c fe13 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087c6:	4b9b      	ldr	r3, [pc, #620]	@ (8008a34 <PC_show_Keys+0x410>)
 80087c8:	781a      	ldrb	r2, [r3, #0]
 80087ca:	4b9c      	ldr	r3, [pc, #624]	@ (8008a3c <PC_show_Keys+0x418>)
 80087cc:	0011      	movs	r1, r2
 80087ce:	0018      	movs	r0, r3
 80087d0:	f7ff ff0d 	bl	80085ee <PC_selectout>
  sprintf(msg, "06 - Sound dBA sensor id -----------: %s\r\n", Buffer);
 80087d4:	4a9c      	ldr	r2, [pc, #624]	@ (8008a48 <PC_show_Keys+0x424>)
 80087d6:	49b1      	ldr	r1, [pc, #708]	@ (8008a9c <PC_show_Keys+0x478>)
 80087d8:	4b98      	ldr	r3, [pc, #608]	@ (8008a3c <PC_show_Keys+0x418>)
 80087da:	0018      	movs	r0, r3
 80087dc:	f01c fe06 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80087e0:	4b94      	ldr	r3, [pc, #592]	@ (8008a34 <PC_show_Keys+0x410>)
 80087e2:	781a      	ldrb	r2, [r3, #0]
 80087e4:	4b95      	ldr	r3, [pc, #596]	@ (8008a3c <PC_show_Keys+0x418>)
 80087e6:	0011      	movs	r1, r2
 80087e8:	0018      	movs	r0, r3
 80087ea:	f7ff ff00 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 80087ee:	4bac      	ldr	r3, [pc, #688]	@ (8008aa0 <PC_show_Keys+0x47c>)
 80087f0:	48ac      	ldr	r0, [pc, #688]	@ (8008aa4 <PC_show_Keys+0x480>)
 80087f2:	220c      	movs	r2, #12
 80087f4:	0019      	movs	r1, r3
 80087f6:	f002 ff67 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 80087fa:	4aa9      	ldr	r2, [pc, #676]	@ (8008aa0 <PC_show_Keys+0x47c>)
 80087fc:	4b92      	ldr	r3, [pc, #584]	@ (8008a48 <PC_show_Keys+0x424>)
 80087fe:	0011      	movs	r1, r2
 8008800:	0018      	movs	r0, r3
 8008802:	f7fc fd57 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "07 - PM2p5 sensor id ---------------: %s\r\n", Buffer);
 8008806:	4a90      	ldr	r2, [pc, #576]	@ (8008a48 <PC_show_Keys+0x424>)
 8008808:	49a7      	ldr	r1, [pc, #668]	@ (8008aa8 <PC_show_Keys+0x484>)
 800880a:	4b8c      	ldr	r3, [pc, #560]	@ (8008a3c <PC_show_Keys+0x418>)
 800880c:	0018      	movs	r0, r3
 800880e:	f01c fded 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008812:	4b88      	ldr	r3, [pc, #544]	@ (8008a34 <PC_show_Keys+0x410>)
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	4b89      	ldr	r3, [pc, #548]	@ (8008a3c <PC_show_Keys+0x418>)
 8008818:	0011      	movs	r1, r2
 800881a:	0018      	movs	r0, r3
 800881c:	f7ff fee7 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008820:	4ba2      	ldr	r3, [pc, #648]	@ (8008aac <PC_show_Keys+0x488>)
 8008822:	48a3      	ldr	r0, [pc, #652]	@ (8008ab0 <PC_show_Keys+0x48c>)
 8008824:	220c      	movs	r2, #12
 8008826:	0019      	movs	r1, r3
 8008828:	f002 ff4e 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 800882c:	4a9f      	ldr	r2, [pc, #636]	@ (8008aac <PC_show_Keys+0x488>)
 800882e:	4b86      	ldr	r3, [pc, #536]	@ (8008a48 <PC_show_Keys+0x424>)
 8008830:	0011      	movs	r1, r2
 8008832:	0018      	movs	r0, r3
 8008834:	f7fc fd3e 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "08 - PM10 sensor id ----------------: %s\r\n", Buffer);
 8008838:	4a83      	ldr	r2, [pc, #524]	@ (8008a48 <PC_show_Keys+0x424>)
 800883a:	499e      	ldr	r1, [pc, #632]	@ (8008ab4 <PC_show_Keys+0x490>)
 800883c:	4b7f      	ldr	r3, [pc, #508]	@ (8008a3c <PC_show_Keys+0x418>)
 800883e:	0018      	movs	r0, r3
 8008840:	f01c fdd4 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008844:	4b7b      	ldr	r3, [pc, #492]	@ (8008a34 <PC_show_Keys+0x410>)
 8008846:	781a      	ldrb	r2, [r3, #0]
 8008848:	4b7c      	ldr	r3, [pc, #496]	@ (8008a3c <PC_show_Keys+0x418>)
 800884a:	0011      	movs	r1, r2
 800884c:	0018      	movs	r0, r3
 800884e:	f7ff fece 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008852:	4b99      	ldr	r3, [pc, #612]	@ (8008ab8 <PC_show_Keys+0x494>)
 8008854:	4899      	ldr	r0, [pc, #612]	@ (8008abc <PC_show_Keys+0x498>)
 8008856:	220c      	movs	r2, #12
 8008858:	0019      	movs	r1, r3
 800885a:	f002 ff35 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 800885e:	4a96      	ldr	r2, [pc, #600]	@ (8008ab8 <PC_show_Keys+0x494>)
 8008860:	4b79      	ldr	r3, [pc, #484]	@ (8008a48 <PC_show_Keys+0x424>)
 8008862:	0011      	movs	r1, r2
 8008864:	0018      	movs	r0, r3
 8008866:	f7fc fd25 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "09 - Battery voltage sensor id -----: %s\r\n", Buffer);
 800886a:	4a77      	ldr	r2, [pc, #476]	@ (8008a48 <PC_show_Keys+0x424>)
 800886c:	4994      	ldr	r1, [pc, #592]	@ (8008ac0 <PC_show_Keys+0x49c>)
 800886e:	4b73      	ldr	r3, [pc, #460]	@ (8008a3c <PC_show_Keys+0x418>)
 8008870:	0018      	movs	r0, r3
 8008872:	f01c fdbb 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008876:	4b6f      	ldr	r3, [pc, #444]	@ (8008a34 <PC_show_Keys+0x410>)
 8008878:	781a      	ldrb	r2, [r3, #0]
 800887a:	4b70      	ldr	r3, [pc, #448]	@ (8008a3c <PC_show_Keys+0x418>)
 800887c:	0011      	movs	r1, r2
 800887e:	0018      	movs	r0, r3
 8008880:	f7ff feb5 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008884:	4b8f      	ldr	r3, [pc, #572]	@ (8008ac4 <PC_show_Keys+0x4a0>)
 8008886:	4890      	ldr	r0, [pc, #576]	@ (8008ac8 <PC_show_Keys+0x4a4>)
 8008888:	220c      	movs	r2, #12
 800888a:	0019      	movs	r1, r3
 800888c:	f002 ff1c 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008890:	4a8c      	ldr	r2, [pc, #560]	@ (8008ac4 <PC_show_Keys+0x4a0>)
 8008892:	4b6d      	ldr	r3, [pc, #436]	@ (8008a48 <PC_show_Keys+0x424>)
 8008894:	0011      	movs	r1, r2
 8008896:	0018      	movs	r0, r3
 8008898:	f7fc fd0c 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "10 - Solar voltage sensor id -------: %s\r\n", Buffer);
 800889c:	4a6a      	ldr	r2, [pc, #424]	@ (8008a48 <PC_show_Keys+0x424>)
 800889e:	498b      	ldr	r1, [pc, #556]	@ (8008acc <PC_show_Keys+0x4a8>)
 80088a0:	4b66      	ldr	r3, [pc, #408]	@ (8008a3c <PC_show_Keys+0x418>)
 80088a2:	0018      	movs	r0, r3
 80088a4:	f01c fda2 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088a8:	4b62      	ldr	r3, [pc, #392]	@ (8008a34 <PC_show_Keys+0x410>)
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	4b63      	ldr	r3, [pc, #396]	@ (8008a3c <PC_show_Keys+0x418>)
 80088ae:	0011      	movs	r1, r2
 80088b0:	0018      	movs	r0, r3
 80088b2:	f7ff fe9c 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 80088b6:	4b86      	ldr	r3, [pc, #536]	@ (8008ad0 <PC_show_Keys+0x4ac>)
 80088b8:	4886      	ldr	r0, [pc, #536]	@ (8008ad4 <PC_show_Keys+0x4b0>)
 80088ba:	220c      	movs	r2, #12
 80088bc:	0019      	movs	r1, r3
 80088be:	f002 ff03 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 80088c2:	4a83      	ldr	r2, [pc, #524]	@ (8008ad0 <PC_show_Keys+0x4ac>)
 80088c4:	4b60      	ldr	r3, [pc, #384]	@ (8008a48 <PC_show_Keys+0x424>)
 80088c6:	0011      	movs	r1, r2
 80088c8:	0018      	movs	r0, r3
 80088ca:	f7fc fcf3 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "11 - Charger status (not used) -----: %s\r\n", Buffer);
 80088ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008a48 <PC_show_Keys+0x424>)
 80088d0:	4981      	ldr	r1, [pc, #516]	@ (8008ad8 <PC_show_Keys+0x4b4>)
 80088d2:	4b5a      	ldr	r3, [pc, #360]	@ (8008a3c <PC_show_Keys+0x418>)
 80088d4:	0018      	movs	r0, r3
 80088d6:	f01c fd89 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80088da:	4b56      	ldr	r3, [pc, #344]	@ (8008a34 <PC_show_Keys+0x410>)
 80088dc:	781a      	ldrb	r2, [r3, #0]
 80088de:	4b57      	ldr	r3, [pc, #348]	@ (8008a3c <PC_show_Keys+0x418>)
 80088e0:	0011      	movs	r1, r2
 80088e2:	0018      	movs	r0, r3
 80088e4:	f7ff fe83 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 80088e8:	4b7c      	ldr	r3, [pc, #496]	@ (8008adc <PC_show_Keys+0x4b8>)
 80088ea:	487d      	ldr	r0, [pc, #500]	@ (8008ae0 <PC_show_Keys+0x4bc>)
 80088ec:	2220      	movs	r2, #32
 80088ee:	0019      	movs	r1, r3
 80088f0:	f002 feea 	bl	800b6c8 <ReadUint8ArrayEEprom>
  sprintf(msg, "12 - Stored name -------------------: ");
 80088f4:	4a7b      	ldr	r2, [pc, #492]	@ (8008ae4 <PC_show_Keys+0x4c0>)
 80088f6:	4b51      	ldr	r3, [pc, #324]	@ (8008a3c <PC_show_Keys+0x418>)
 80088f8:	0011      	movs	r1, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	f01c fd76 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008900:	4b4c      	ldr	r3, [pc, #304]	@ (8008a34 <PC_show_Keys+0x410>)
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	4b4d      	ldr	r3, [pc, #308]	@ (8008a3c <PC_show_Keys+0x418>)
 8008906:	0011      	movs	r1, r2
 8008908:	0018      	movs	r0, r3
 800890a:	f7ff fe70 	bl	80085ee <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 800890e:	4a73      	ldr	r2, [pc, #460]	@ (8008adc <PC_show_Keys+0x4b8>)
 8008910:	4975      	ldr	r1, [pc, #468]	@ (8008ae8 <PC_show_Keys+0x4c4>)
 8008912:	4b4a      	ldr	r3, [pc, #296]	@ (8008a3c <PC_show_Keys+0x418>)
 8008914:	0018      	movs	r0, r3
 8008916:	f01c fd69 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 800891a:	4b46      	ldr	r3, [pc, #280]	@ (8008a34 <PC_show_Keys+0x410>)
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	4b47      	ldr	r3, [pc, #284]	@ (8008a3c <PC_show_Keys+0x418>)
 8008920:	0011      	movs	r1, r2
 8008922:	0018      	movs	r0, r3
 8008924:	f7ff fe63 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8008928:	4b70      	ldr	r3, [pc, #448]	@ (8008aec <PC_show_Keys+0x4c8>)
 800892a:	4871      	ldr	r0, [pc, #452]	@ (8008af0 <PC_show_Keys+0x4cc>)
 800892c:	220c      	movs	r2, #12
 800892e:	0019      	movs	r1, r3
 8008930:	f002 feca 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8008934:	4a6d      	ldr	r2, [pc, #436]	@ (8008aec <PC_show_Keys+0x4c8>)
 8008936:	4b44      	ldr	r3, [pc, #272]	@ (8008a48 <PC_show_Keys+0x424>)
 8008938:	0011      	movs	r1, r2
 800893a:	0018      	movs	r0, r3
 800893c:	f7fc fcba 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "13 - PM1p0 sensor id ---------------: %s\r\n", Buffer);
 8008940:	4a41      	ldr	r2, [pc, #260]	@ (8008a48 <PC_show_Keys+0x424>)
 8008942:	496c      	ldr	r1, [pc, #432]	@ (8008af4 <PC_show_Keys+0x4d0>)
 8008944:	4b3d      	ldr	r3, [pc, #244]	@ (8008a3c <PC_show_Keys+0x418>)
 8008946:	0018      	movs	r0, r3
 8008948:	f01c fd50 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 800894c:	4b39      	ldr	r3, [pc, #228]	@ (8008a34 <PC_show_Keys+0x410>)
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	4b3a      	ldr	r3, [pc, #232]	@ (8008a3c <PC_show_Keys+0x418>)
 8008952:	0011      	movs	r1, r2
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fe4a 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 800895a:	4b67      	ldr	r3, [pc, #412]	@ (8008af8 <PC_show_Keys+0x4d4>)
 800895c:	4867      	ldr	r0, [pc, #412]	@ (8008afc <PC_show_Keys+0x4d8>)
 800895e:	220c      	movs	r2, #12
 8008960:	0019      	movs	r1, r3
 8008962:	f002 feb1 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 8008966:	4a64      	ldr	r2, [pc, #400]	@ (8008af8 <PC_show_Keys+0x4d4>)
 8008968:	4b37      	ldr	r3, [pc, #220]	@ (8008a48 <PC_show_Keys+0x424>)
 800896a:	0011      	movs	r1, r2
 800896c:	0018      	movs	r0, r3
 800896e:	f7fc fca1 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "14 - PM4p0 sensor id ---------------: %s\r\n", Buffer);
 8008972:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <PC_show_Keys+0x424>)
 8008974:	4962      	ldr	r1, [pc, #392]	@ (8008b00 <PC_show_Keys+0x4dc>)
 8008976:	4b31      	ldr	r3, [pc, #196]	@ (8008a3c <PC_show_Keys+0x418>)
 8008978:	0018      	movs	r0, r3
 800897a:	f01c fd37 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 800897e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a34 <PC_show_Keys+0x410>)
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	4b2e      	ldr	r3, [pc, #184]	@ (8008a3c <PC_show_Keys+0x418>)
 8008984:	0011      	movs	r1, r2
 8008986:	0018      	movs	r0, r3
 8008988:	f7ff fe31 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 800898c:	4b5d      	ldr	r3, [pc, #372]	@ (8008b04 <PC_show_Keys+0x4e0>)
 800898e:	485e      	ldr	r0, [pc, #376]	@ (8008b08 <PC_show_Keys+0x4e4>)
 8008990:	220c      	movs	r2, #12
 8008992:	0019      	movs	r1, r3
 8008994:	f002 fe98 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008998:	4a5a      	ldr	r2, [pc, #360]	@ (8008b04 <PC_show_Keys+0x4e0>)
 800899a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a48 <PC_show_Keys+0x424>)
 800899c:	0011      	movs	r1, r2
 800899e:	0018      	movs	r0, r3
 80089a0:	f7fc fc88 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "15 - AHT2x Temperature sensor id ---: %s\r\n", Buffer);
 80089a4:	4a28      	ldr	r2, [pc, #160]	@ (8008a48 <PC_show_Keys+0x424>)
 80089a6:	4959      	ldr	r1, [pc, #356]	@ (8008b0c <PC_show_Keys+0x4e8>)
 80089a8:	4b24      	ldr	r3, [pc, #144]	@ (8008a3c <PC_show_Keys+0x418>)
 80089aa:	0018      	movs	r0, r3
 80089ac:	f01c fd1e 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089b0:	4b20      	ldr	r3, [pc, #128]	@ (8008a34 <PC_show_Keys+0x410>)
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	4b21      	ldr	r3, [pc, #132]	@ (8008a3c <PC_show_Keys+0x418>)
 80089b6:	0011      	movs	r1, r2
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7ff fe18 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 80089be:	4b54      	ldr	r3, [pc, #336]	@ (8008b10 <PC_show_Keys+0x4ec>)
 80089c0:	4854      	ldr	r0, [pc, #336]	@ (8008b14 <PC_show_Keys+0x4f0>)
 80089c2:	220c      	movs	r2, #12
 80089c4:	0019      	movs	r1, r3
 80089c6:	f002 fe7f 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 80089ca:	4a51      	ldr	r2, [pc, #324]	@ (8008b10 <PC_show_Keys+0x4ec>)
 80089cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <PC_show_Keys+0x424>)
 80089ce:	0011      	movs	r1, r2
 80089d0:	0018      	movs	r0, r3
 80089d2:	f7fc fc6f 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "16 - AHT2x Humidity sensor id ------: %s\r\n", Buffer);
 80089d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a48 <PC_show_Keys+0x424>)
 80089d8:	494f      	ldr	r1, [pc, #316]	@ (8008b18 <PC_show_Keys+0x4f4>)
 80089da:	4b18      	ldr	r3, [pc, #96]	@ (8008a3c <PC_show_Keys+0x418>)
 80089dc:	0018      	movs	r0, r3
 80089de:	f01c fd05 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 80089e2:	4b14      	ldr	r3, [pc, #80]	@ (8008a34 <PC_show_Keys+0x410>)
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	4b15      	ldr	r3, [pc, #84]	@ (8008a3c <PC_show_Keys+0x418>)
 80089e8:	0011      	movs	r1, r2
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7ff fdff 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 80089f0:	4b4a      	ldr	r3, [pc, #296]	@ (8008b1c <PC_show_Keys+0x4f8>)
 80089f2:	484b      	ldr	r0, [pc, #300]	@ (8008b20 <PC_show_Keys+0x4fc>)
 80089f4:	220c      	movs	r2, #12
 80089f6:	0019      	movs	r1, r3
 80089f8:	f002 fe66 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 80089fc:	4a47      	ldr	r2, [pc, #284]	@ (8008b1c <PC_show_Keys+0x4f8>)
 80089fe:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <PC_show_Keys+0x424>)
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f7fc fc56 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "17 - BMP280 Temperature sensor id --: %s\r\n", Buffer);
 8008a08:	4a0f      	ldr	r2, [pc, #60]	@ (8008a48 <PC_show_Keys+0x424>)
 8008a0a:	4946      	ldr	r1, [pc, #280]	@ (8008b24 <PC_show_Keys+0x500>)
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a3c <PC_show_Keys+0x418>)
 8008a0e:	0018      	movs	r0, r3
 8008a10:	f01c fcec 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008a14:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <PC_show_Keys+0x410>)
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <PC_show_Keys+0x418>)
 8008a1a:	0011      	movs	r1, r2
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f7ff fde6 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <PC_show_Keys+0x504>)
 8008a24:	4841      	ldr	r0, [pc, #260]	@ (8008b2c <PC_show_Keys+0x508>)
 8008a26:	220c      	movs	r2, #12
 8008a28:	0019      	movs	r1, r3
 8008a2a:	f002 fe4d 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8008b28 <PC_show_Keys+0x504>)
 8008a30:	e07e      	b.n	8008b30 <PC_show_Keys+0x50c>
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	200009bd 	.word	0x200009bd
 8008a38:	0802ad6c 	.word	0x0802ad6c
 8008a3c:	200009c0 	.word	0x200009c0
 8008a40:	20000a08 	.word	0x20000a08
 8008a44:	08080000 	.word	0x08080000
 8008a48:	20000a14 	.word	0x20000a14
 8008a4c:	0802ad88 	.word	0x0802ad88
 8008a50:	20000a30 	.word	0x20000a30
 8008a54:	0808000c 	.word	0x0808000c
 8008a58:	0802adb4 	.word	0x0802adb4
 8008a5c:	20000a3c 	.word	0x20000a3c
 8008a60:	08080018 	.word	0x08080018
 8008a64:	0802ade0 	.word	0x0802ade0
 8008a68:	20000a48 	.word	0x20000a48
 8008a6c:	08080024 	.word	0x08080024
 8008a70:	0802ae0c 	.word	0x0802ae0c
 8008a74:	20000a54 	.word	0x20000a54
 8008a78:	08080030 	.word	0x08080030
 8008a7c:	0802ae38 	.word	0x0802ae38
 8008a80:	20000a60 	.word	0x20000a60
 8008a84:	0808003c 	.word	0x0808003c
 8008a88:	0802ae64 	.word	0x0802ae64
 8008a8c:	0802ae80 	.word	0x0802ae80
 8008a90:	20000a6c 	.word	0x20000a6c
 8008a94:	08080048 	.word	0x08080048
 8008a98:	0802aeac 	.word	0x0802aeac
 8008a9c:	0802aec0 	.word	0x0802aec0
 8008aa0:	20000a78 	.word	0x20000a78
 8008aa4:	08080054 	.word	0x08080054
 8008aa8:	0802aeec 	.word	0x0802aeec
 8008aac:	20000a84 	.word	0x20000a84
 8008ab0:	08080060 	.word	0x08080060
 8008ab4:	0802af18 	.word	0x0802af18
 8008ab8:	20000a90 	.word	0x20000a90
 8008abc:	0808006c 	.word	0x0808006c
 8008ac0:	0802af44 	.word	0x0802af44
 8008ac4:	20000a9c 	.word	0x20000a9c
 8008ac8:	08080078 	.word	0x08080078
 8008acc:	0802af70 	.word	0x0802af70
 8008ad0:	20000aa8 	.word	0x20000aa8
 8008ad4:	08080084 	.word	0x08080084
 8008ad8:	0802af9c 	.word	0x0802af9c
 8008adc:	20000ab4 	.word	0x20000ab4
 8008ae0:	08080090 	.word	0x08080090
 8008ae4:	0802afc8 	.word	0x0802afc8
 8008ae8:	0802aff0 	.word	0x0802aff0
 8008aec:	20000ad4 	.word	0x20000ad4
 8008af0:	080800b0 	.word	0x080800b0
 8008af4:	0802aff8 	.word	0x0802aff8
 8008af8:	20000ae0 	.word	0x20000ae0
 8008afc:	080800bc 	.word	0x080800bc
 8008b00:	0802b024 	.word	0x0802b024
 8008b04:	20000aec 	.word	0x20000aec
 8008b08:	080800c8 	.word	0x080800c8
 8008b0c:	0802b050 	.word	0x0802b050
 8008b10:	20000af8 	.word	0x20000af8
 8008b14:	080800d4 	.word	0x080800d4
 8008b18:	0802b07c 	.word	0x0802b07c
 8008b1c:	20000b04 	.word	0x20000b04
 8008b20:	080800e0 	.word	0x080800e0
 8008b24:	0802b0a8 	.word	0x0802b0a8
 8008b28:	20000b10 	.word	0x20000b10
 8008b2c:	080800ec 	.word	0x080800ec
 8008b30:	4b5d      	ldr	r3, [pc, #372]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b32:	0011      	movs	r1, r2
 8008b34:	0018      	movs	r0, r3
 8008b36:	f7fc fbbd 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "18 - ENS160 AQI sensor id ----------: %s\r\n", Buffer);
 8008b3a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b3c:	495b      	ldr	r1, [pc, #364]	@ (8008cac <PC_show_Keys+0x688>)
 8008b3e:	4b5c      	ldr	r3, [pc, #368]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b40:	0018      	movs	r0, r3
 8008b42:	f01c fc53 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b46:	4b5b      	ldr	r3, [pc, #364]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008b48:	781a      	ldrb	r2, [r3, #0]
 8008b4a:	4b59      	ldr	r3, [pc, #356]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b4c:	0011      	movs	r1, r2
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f7ff fd4d 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8008b54:	4b58      	ldr	r3, [pc, #352]	@ (8008cb8 <PC_show_Keys+0x694>)
 8008b56:	4859      	ldr	r0, [pc, #356]	@ (8008cbc <PC_show_Keys+0x698>)
 8008b58:	220c      	movs	r2, #12
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	f002 fdb4 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8008b60:	4a55      	ldr	r2, [pc, #340]	@ (8008cb8 <PC_show_Keys+0x694>)
 8008b62:	4b51      	ldr	r3, [pc, #324]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b64:	0011      	movs	r1, r2
 8008b66:	0018      	movs	r0, r3
 8008b68:	f7fc fba4 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "19 - ENS160 TVOC sensor id ---------: %s\r\n", Buffer);
 8008b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b6e:	4954      	ldr	r1, [pc, #336]	@ (8008cc0 <PC_show_Keys+0x69c>)
 8008b70:	4b4f      	ldr	r3, [pc, #316]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b72:	0018      	movs	r0, r3
 8008b74:	f01c fc3a 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b78:	4b4e      	ldr	r3, [pc, #312]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008b7e:	0011      	movs	r1, r2
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff fd34 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8008b86:	4b4f      	ldr	r3, [pc, #316]	@ (8008cc4 <PC_show_Keys+0x6a0>)
 8008b88:	484f      	ldr	r0, [pc, #316]	@ (8008cc8 <PC_show_Keys+0x6a4>)
 8008b8a:	220c      	movs	r2, #12
 8008b8c:	0019      	movs	r1, r3
 8008b8e:	f002 fd9b 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8008b92:	4a4c      	ldr	r2, [pc, #304]	@ (8008cc4 <PC_show_Keys+0x6a0>)
 8008b94:	4b44      	ldr	r3, [pc, #272]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008b96:	0011      	movs	r1, r2
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7fc fb8b 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "20 - ENS160 eCO2 sensor id ---------: %s\r\n", Buffer);
 8008b9e:	4a42      	ldr	r2, [pc, #264]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008ba0:	494a      	ldr	r1, [pc, #296]	@ (8008ccc <PC_show_Keys+0x6a8>)
 8008ba2:	4b43      	ldr	r3, [pc, #268]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f01c fc21 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008baa:	4b42      	ldr	r3, [pc, #264]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	4b40      	ldr	r3, [pc, #256]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7ff fd1b 	bl	80085ee <PC_selectout>

  sprintf(msg, "21 & 22 - Are interactive not supported\r\n");
 8008bb8:	4a45      	ldr	r2, [pc, #276]	@ (8008cd0 <PC_show_Keys+0x6ac>)
 8008bba:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bbc:	0011      	movs	r1, r2
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f01c fc14 	bl	80253ec <siprintf>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 8008bc4:	4b43      	ldr	r3, [pc, #268]	@ (8008cd4 <PC_show_Keys+0x6b0>)
 8008bc6:	4844      	ldr	r0, [pc, #272]	@ (8008cd8 <PC_show_Keys+0x6b4>)
 8008bc8:	220c      	movs	r2, #12
 8008bca:	0019      	movs	r1, r3
 8008bcc:	f002 fd7c 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 8008bd0:	4a40      	ldr	r2, [pc, #256]	@ (8008cd4 <PC_show_Keys+0x6b0>)
 8008bd2:	4b35      	ldr	r3, [pc, #212]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7fc fb6c 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "23 - SEN54/55 Temperature sensor id : %s\r\n", Buffer);
 8008bdc:	4a32      	ldr	r2, [pc, #200]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008bde:	493f      	ldr	r1, [pc, #252]	@ (8008cdc <PC_show_Keys+0x6b8>)
 8008be0:	4b33      	ldr	r3, [pc, #204]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008be2:	0018      	movs	r0, r3
 8008be4:	f01c fc02 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008be8:	4b32      	ldr	r3, [pc, #200]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	4b30      	ldr	r3, [pc, #192]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008bee:	0011      	movs	r1, r2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7ff fcfc 	bl	80085ee <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 8008bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8008ce0 <PC_show_Keys+0x6bc>)
 8008bf8:	483a      	ldr	r0, [pc, #232]	@ (8008ce4 <PC_show_Keys+0x6c0>)
 8008bfa:	220c      	movs	r2, #12
 8008bfc:	0019      	movs	r1, r3
 8008bfe:	f002 fd63 	bl	800b6c8 <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 8008c02:	4a37      	ldr	r2, [pc, #220]	@ (8008ce0 <PC_show_Keys+0x6bc>)
 8008c04:	4b28      	ldr	r3, [pc, #160]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008c06:	0011      	movs	r1, r2
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f7fc fb53 	bl	80052b4 <uint8ArrayToString>
  sprintf(msg, "24 - SEN54/55 Humidity sensor id ---: %s\r\n", Buffer);
 8008c0e:	4a26      	ldr	r2, [pc, #152]	@ (8008ca8 <PC_show_Keys+0x684>)
 8008c10:	4935      	ldr	r1, [pc, #212]	@ (8008ce8 <PC_show_Keys+0x6c4>)
 8008c12:	4b27      	ldr	r3, [pc, #156]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008c14:	0018      	movs	r0, r3
 8008c16:	f01c fbe9 	bl	80253ec <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c1a:	4b26      	ldr	r3, [pc, #152]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	4b24      	ldr	r3, [pc, #144]	@ (8008cb0 <PC_show_Keys+0x68c>)
 8008c20:	0011      	movs	r1, r2
 8008c22:	0018      	movs	r0, r3
 8008c24:	f7ff fce3 	bl	80085ee <PC_selectout>
  uint8ArrayToString(Buffer, UptimeConfig);
  sprintf(msg, "25 - Uptime sensor id --------------: %s\r\n", Buffer);
  PC_selectout(&msg[0], usb_out);
#endif

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 8008c28:	4b30      	ldr	r3, [pc, #192]	@ (8008cec <PC_show_Keys+0x6c8>)
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f7ff fcba 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c30:	200a      	movs	r0, #10
 8008c32:	f00a ffb9 	bl	8013ba8 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 8008c36:	4b2e      	ldr	r3, [pc, #184]	@ (8008cf0 <PC_show_Keys+0x6cc>)
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7ff fcb3 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c3e:	200a      	movs	r0, #10
 8008c40:	f00a ffb2 	bl	8013ba8 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 8008c44:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf4 <PC_show_Keys+0x6d0>)
 8008c46:	0018      	movs	r0, r3
 8008c48:	f7ff fcac 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c4c:	200a      	movs	r0, #10
 8008c4e:	f00a ffab 	bl	8013ba8 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8008c52:	4b29      	ldr	r3, [pc, #164]	@ (8008cf8 <PC_show_Keys+0x6d4>)
 8008c54:	0018      	movs	r0, r3
 8008c56:	f7ff fca5 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c5a:	200a      	movs	r0, #10
 8008c5c:	f00a ffa4 	bl	8013ba8 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 8008c60:	4b26      	ldr	r3, [pc, #152]	@ (8008cfc <PC_show_Keys+0x6d8>)
 8008c62:	0018      	movs	r0, r3
 8008c64:	f7ff fc9e 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c68:	200a      	movs	r0, #10
 8008c6a:	f00a ff9d 	bl	8013ba8 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 8008c6e:	4b24      	ldr	r3, [pc, #144]	@ (8008d00 <PC_show_Keys+0x6dc>)
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7ff fc97 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c76:	200a      	movs	r0, #10
 8008c78:	f00a ff96 	bl	8013ba8 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 8008c7c:	4b21      	ldr	r3, [pc, #132]	@ (8008d04 <PC_show_Keys+0x6e0>)
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f7ff fc90 	bl	80085a4 <printf_USB>
  HAL_Delay(10);
 8008c84:	200a      	movs	r0, #10
 8008c86:	f00a ff8f 	bl	8013ba8 <HAL_Delay>
  if (!usb_out) {
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb4 <PC_show_Keys+0x690>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	4053      	eors	r3, r2
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <PC_show_Keys+0x67c>
    printf("A key can only be changed by USB input or the by configuration programm.\r\n");
 8008c98:	4b1b      	ldr	r3, [pc, #108]	@ (8008d08 <PC_show_Keys+0x6e4>)
 8008c9a:	0018      	movs	r0, r3
 8008c9c:	f01c fb9c 	bl	80253d8 <puts>
  }
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	46c0      	nop			@ (mov r8, r8)
 8008ca8:	20000a14 	.word	0x20000a14
 8008cac:	0802b0d4 	.word	0x0802b0d4
 8008cb0:	200009c0 	.word	0x200009c0
 8008cb4:	200009bd 	.word	0x200009bd
 8008cb8:	20000b1c 	.word	0x20000b1c
 8008cbc:	080800f8 	.word	0x080800f8
 8008cc0:	0802b100 	.word	0x0802b100
 8008cc4:	20000b28 	.word	0x20000b28
 8008cc8:	08080104 	.word	0x08080104
 8008ccc:	0802b12c 	.word	0x0802b12c
 8008cd0:	0802b158 	.word	0x0802b158
 8008cd4:	20000b34 	.word	0x20000b34
 8008cd8:	08080170 	.word	0x08080170
 8008cdc:	0802b184 	.word	0x0802b184
 8008ce0:	20000b40 	.word	0x20000b40
 8008ce4:	0808017c 	.word	0x0808017c
 8008ce8:	0802b1b0 	.word	0x0802b1b0
 8008cec:	0802b1dc 	.word	0x0802b1dc
 8008cf0:	0802b1f4 	.word	0x0802b1f4
 8008cf4:	0802b220 	.word	0x0802b220
 8008cf8:	0802b250 	.word	0x0802b250
 8008cfc:	0802b28c 	.word	0x0802b28c
 8008d00:	0802b2c4 	.word	0x0802b2c4
 8008d04:	0802b2f8 	.word	0x0802b2f8
 8008d08:	0802b318 	.word	0x0802b318

08008d0c <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	4b20      	ldr	r3, [pc, #128]	@ (8008d9c <ascii_to_uint8+0x90>)
 8008d1c:	18d3      	adds	r3, r2, r3
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	001a      	movs	r2, r3
 8008d22:	2304      	movs	r3, #4
 8008d24:	4013      	ands	r3, r2
 8008d26:	d00a      	beq.n	8008d3e <ascii_to_uint8+0x32>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	4b1a      	ldr	r3, [pc, #104]	@ (8008d9c <ascii_to_uint8+0x90>)
 8008d32:	18d3      	adds	r3, r2, r3
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	001a      	movs	r2, r3
 8008d38:	2304      	movs	r3, #4
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d105      	bne.n	8008d4a <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 8008d3e:	4b18      	ldr	r3, [pc, #96]	@ (8008da0 <ascii_to_uint8+0x94>)
 8008d40:	0018      	movs	r0, r3
 8008d42:	f7ff fc2f 	bl	80085a4 <printf_USB>
    return 100;
 8008d46:	2364      	movs	r3, #100	@ 0x64
 8008d48:	e024      	b.n	8008d94 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	1c1a      	adds	r2, r3, #0
 8008d50:	0092      	lsls	r2, r2, #2
 8008d52:	18d3      	adds	r3, r2, r3
 8008d54:	18db      	adds	r3, r3, r3
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	18d3      	adds	r3, r2, r3
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	210f      	movs	r1, #15
 8008d64:	187b      	adds	r3, r7, r1
 8008d66:	3a10      	subs	r2, #16
 8008d68:	701a      	strb	r2, [r3, #0]
#ifndef PUBLIC
  if (value > 25 || value == 21 || value == 22) {
#else
  if (value > 24 || value == 21 || value == 22) {
 8008d6a:	187b      	adds	r3, r7, r1
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b18      	cmp	r3, #24
 8008d70:	d807      	bhi.n	8008d82 <ascii_to_uint8+0x76>
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b15      	cmp	r3, #21
 8008d78:	d003      	beq.n	8008d82 <ascii_to_uint8+0x76>
 8008d7a:	187b      	adds	r3, r7, r1
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b16      	cmp	r3, #22
 8008d80:	d105      	bne.n	8008d8e <ascii_to_uint8+0x82>
#endif
    printf_USB("Error: value out of range\r\n");
 8008d82:	4b08      	ldr	r3, [pc, #32]	@ (8008da4 <ascii_to_uint8+0x98>)
 8008d84:	0018      	movs	r0, r3
 8008d86:	f7ff fc0d 	bl	80085a4 <printf_USB>
    return 100;
 8008d8a:	2364      	movs	r3, #100	@ 0x64
 8008d8c:	e002      	b.n	8008d94 <ascii_to_uint8+0x88>
  }
  return (uint8_t)value;
 8008d8e:	230f      	movs	r3, #15
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	781b      	ldrb	r3, [r3, #0]
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b004      	add	sp, #16
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	0802e2b0 	.word	0x0802e2b0
 8008da0:	0802b364 	.word	0x0802b364
 8008da4:	0802b38c 	.word	0x0802b38c

08008da8 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b0d1      	sub	sp, #324	@ 0x144
 8008dac:	af3e      	add	r7, sp, #248	@ 0xf8
 8008dae:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 8008db0:	f019 fa5e 	bl	8022270 <GetUsbRxDataSize>
 8008db4:	0003      	movs	r3, r0
 8008db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t r = 0;
 8008db8:	2347      	movs	r3, #71	@ 0x47
 8008dba:	18fb      	adds	r3, r7, r3
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	701a      	strb	r2, [r3, #0]
  char Buffer[25];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2124      	movs	r1, #36	@ 0x24
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	f01c fc83 	bl	80256d0 <strchr>
 8008dca:	0003      	movs	r3, r0
 8008dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((length == 1) && (message != NULL) && (len != 28)){
 8008dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d10f      	bne.n	8008df4 <Process_USB_input+0x4c>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <Process_USB_input+0x4c>
 8008dda:	4bdb      	ldr	r3, [pc, #876]	@ (8009148 <Process_USB_input+0x3a0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b1c      	cmp	r3, #28
 8008de0:	d008      	beq.n	8008df4 <Process_USB_input+0x4c>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 8008de2:	4ada      	ldr	r2, [pc, #872]	@ (800914c <Process_USB_input+0x3a4>)
 8008de4:	4bda      	ldr	r3, [pc, #872]	@ (8009150 <Process_USB_input+0x3a8>)
 8008de6:	0019      	movs	r1, r3
 8008de8:	2003      	movs	r0, #3
 8008dea:	f00a f993 	bl	8013114 <CreateLine>
      len = 28;
 8008dee:	4bd6      	ldr	r3, [pc, #856]	@ (8009148 <Process_USB_input+0x3a0>)
 8008df0:	221c      	movs	r2, #28
 8008df2:	601a      	str	r2, [r3, #0]
  }
  if (length >= len) {
 8008df4:	4bd4      	ldr	r3, [pc, #848]	@ (8009148 <Process_USB_input+0x3a0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d200      	bcs.n	8008e00 <Process_USB_input+0x58>
 8008dfe:	e18c      	b.n	800911a <Process_USB_input+0x372>
//    HAL_Delay(20);
    printf_USB("minimum required USB input reached: %s\r\n", (const char*)data);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4bd4      	ldr	r3, [pc, #848]	@ (8009154 <Process_USB_input+0x3ac>)
 8008e04:	0011      	movs	r1, r2
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff fbcc 	bl	80085a4 <printf_USB>
    printf_USB("USB input: %s\r\n", (const char*)data);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4bd2      	ldr	r3, [pc, #840]	@ (8009158 <Process_USB_input+0x3b0>)
 8008e10:	0011      	movs	r1, r2
 8008e12:	0018      	movs	r0, r3
 8008e14:	f7ff fbc6 	bl	80085a4 <printf_USB>
//    message = (unsigned char*)data;
//    message = data;
    if (data[0] == '$') {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	2b24      	cmp	r3, #36	@ 0x24
 8008e1e:	d102      	bne.n	8008e26 <Process_USB_input+0x7e>
      len = 28;
 8008e20:	4bc9      	ldr	r3, [pc, #804]	@ (8009148 <Process_USB_input+0x3a0>)
 8008e22:	221c      	movs	r2, #28
 8008e24:	601a      	str	r2, [r3, #0]
    }
    if((data[0] == '#') || (data[0] == '$')) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2b23      	cmp	r3, #35	@ 0x23
 8008e2c:	d004      	beq.n	8008e38 <Process_USB_input+0x90>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b24      	cmp	r3, #36	@ 0x24
 8008e34:	d000      	beq.n	8008e38 <Process_USB_input+0x90>
 8008e36:	e153      	b.n	80090e0 <Process_USB_input+0x338>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff ff65 	bl	8008d0c <ascii_to_uint8>
 8008e42:	0003      	movs	r3, r0
 8008e44:	001a      	movs	r2, r3
 8008e46:	4bc5      	ldr	r3, [pc, #788]	@ (800915c <Process_USB_input+0x3b4>)
 8008e48:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100) {
 8008e4a:	4bc4      	ldr	r3, [pc, #784]	@ (800915c <Process_USB_input+0x3b4>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b64      	cmp	r3, #100	@ 0x64
 8008e50:	d101      	bne.n	8008e56 <Process_USB_input+0xae>
        return false; // value out of range
 8008e52:	2300      	movs	r3, #0
 8008e54:	e174      	b.n	8009140 <Process_USB_input+0x398>
      }
      if (data[3] == ',') {
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3303      	adds	r3, #3
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b2c      	cmp	r3, #44	@ 0x2c
 8008e5e:	d000      	beq.n	8008e62 <Process_USB_input+0xba>
 8008e60:	e122      	b.n	80090a8 <Process_USB_input+0x300>
        for (uint8_t i=4; i < len; i++) {
 8008e62:	2346      	movs	r3, #70	@ 0x46
 8008e64:	18fb      	adds	r3, r7, r3
 8008e66:	2204      	movs	r2, #4
 8008e68:	701a      	strb	r2, [r3, #0]
 8008e6a:	e0aa      	b.n	8008fc2 <Process_USB_input+0x21a>
//          printf_USB("handling character %c as nr: %d for pos: %d\r\n", data[i], i, r);
          HAL_Delay(10);
 8008e6c:	200a      	movs	r0, #10
 8008e6e:	f00a fe9b 	bl	8013ba8 <HAL_Delay>
          if (isxdigit(data[i])) {
 8008e72:	2146      	movs	r1, #70	@ 0x46
 8008e74:	187b      	adds	r3, r7, r1
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	18d3      	adds	r3, r2, r3
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	1c5a      	adds	r2, r3, #1
 8008e80:	4bb7      	ldr	r3, [pc, #732]	@ (8009160 <Process_USB_input+0x3b8>)
 8008e82:	18d3      	adds	r3, r2, r3
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	001a      	movs	r2, r3
 8008e88:	2344      	movs	r3, #68	@ 0x44
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	d06a      	beq.n	8008f64 <Process_USB_input+0x1bc>
            result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 8008e8e:	4bb5      	ldr	r3, [pc, #724]	@ (8009164 <Process_USB_input+0x3bc>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	b25b      	sxtb	r3, r3
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	b25a      	sxtb	r2, r3
 8008e98:	0008      	movs	r0, r1
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	18cb      	adds	r3, r1, r3
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	4bae      	ldr	r3, [pc, #696]	@ (8009160 <Process_USB_input+0x3b8>)
 8008ea8:	18cb      	adds	r3, r1, r3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	0019      	movs	r1, r3
 8008eae:	2304      	movs	r3, #4
 8008eb0:	400b      	ands	r3, r1
 8008eb2:	d008      	beq.n	8008ec6 <Process_USB_input+0x11e>
 8008eb4:	183b      	adds	r3, r7, r0
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	18cb      	adds	r3, r1, r3
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	3b30      	subs	r3, #48	@ 0x30
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	e01e      	b.n	8008f04 <Process_USB_input+0x15c>
 8008ec6:	2346      	movs	r3, #70	@ 0x46
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	18c9      	adds	r1, r1, r3
 8008ed0:	2037      	movs	r0, #55	@ 0x37
 8008ed2:	183b      	adds	r3, r7, r0
 8008ed4:	7809      	ldrb	r1, [r1, #0]
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	183b      	adds	r3, r7, r0
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	1c59      	adds	r1, r3, #1
 8008ede:	4ba0      	ldr	r3, [pc, #640]	@ (8009160 <Process_USB_input+0x3b8>)
 8008ee0:	18cb      	adds	r3, r1, r3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	2303      	movs	r3, #3
 8008ee8:	400b      	ands	r3, r1
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d103      	bne.n	8008ef6 <Process_USB_input+0x14e>
 8008eee:	183b      	adds	r3, r7, r0
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	3b20      	subs	r3, #32
 8008ef4:	e002      	b.n	8008efc <Process_USB_input+0x154>
 8008ef6:	2337      	movs	r3, #55	@ 0x37
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	3b37      	subs	r3, #55	@ 0x37
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	4313      	orrs	r3, r2
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	4b96      	ldr	r3, [pc, #600]	@ (8009164 <Process_USB_input+0x3bc>)
 8008f0c:	701a      	strb	r2, [r3, #0]
//            printf_USB("Result is 0x%02X\r\n", result);
            HAL_Delay(10);
 8008f0e:	200a      	movs	r0, #10
 8008f10:	f00a fe4a 	bl	8013ba8 <HAL_Delay>
            if (len == 28) {
 8008f14:	4b8c      	ldr	r3, [pc, #560]	@ (8009148 <Process_USB_input+0x3a0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b1c      	cmp	r3, #28
 8008f1a:	d14c      	bne.n	8008fb6 <Process_USB_input+0x20e>
              if ((i % 2) == 1) {
 8008f1c:	2346      	movs	r3, #70	@ 0x46
 8008f1e:	18fb      	adds	r3, r7, r3
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2201      	movs	r2, #1
 8008f24:	4013      	ands	r3, r2
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d044      	beq.n	8008fb6 <Process_USB_input+0x20e>
                data[r] = result;
 8008f2c:	2447      	movs	r4, #71	@ 0x47
 8008f2e:	193b      	adds	r3, r7, r4
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	18d3      	adds	r3, r2, r3
 8008f36:	4a8b      	ldr	r2, [pc, #556]	@ (8009164 <Process_USB_input+0x3bc>)
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
                Debug("data[%d] = 0x%02X",r, data[r]);
 8008f3c:	193b      	adds	r3, r7, r4
 8008f3e:	7818      	ldrb	r0, [r3, #0]
 8008f40:	193b      	adds	r3, r7, r4
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	18d3      	adds	r3, r2, r3
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	4a87      	ldr	r2, [pc, #540]	@ (8009168 <Process_USB_input+0x3c0>)
 8008f4c:	4980      	ldr	r1, [pc, #512]	@ (8009150 <Process_USB_input+0x3a8>)
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	0003      	movs	r3, r0
 8008f52:	2003      	movs	r0, #3
 8008f54:	f00a f8de 	bl	8013114 <CreateLine>
                r++;
 8008f58:	193b      	adds	r3, r7, r4
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	193b      	adds	r3, r7, r4
 8008f5e:	3201      	adds	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e028      	b.n	8008fb6 <Process_USB_input+0x20e>
              }
            }
          }
          else {
            printf_USB("Invalid hexadecimal character: '%c at position %d'\r\n", data[i], i);
 8008f64:	2046      	movs	r0, #70	@ 0x46
 8008f66:	183b      	adds	r3, r7, r0
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	18d3      	adds	r3, r2, r3
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	0019      	movs	r1, r3
 8008f72:	183b      	adds	r3, r7, r0
 8008f74:	781a      	ldrb	r2, [r3, #0]
 8008f76:	4b7d      	ldr	r3, [pc, #500]	@ (800916c <Process_USB_input+0x3c4>)
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7ff fb13 	bl	80085a4 <printf_USB>
            ResetUsbRxDataSize();
 8008f7e:	f019 f95f 	bl	8022240 <ResetUsbRxDataSize>
            PC_show_Keys();
 8008f82:	f7ff fb4f 	bl	8008624 <PC_show_Keys>
            for (uint8_t i=0; i < 32; i++) {
 8008f86:	2345      	movs	r3, #69	@ 0x45
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e00b      	b.n	8008fa8 <Process_USB_input+0x200>
              data[i] = '\0';
 8008f90:	2145      	movs	r1, #69	@ 0x45
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	18d3      	adds	r3, r2, r3
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
            for (uint8_t i=0; i < 32; i++) {
 8008f9e:	187b      	adds	r3, r7, r1
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	187b      	adds	r3, r7, r1
 8008fa4:	3201      	adds	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	2345      	movs	r3, #69	@ 0x45
 8008faa:	18fb      	adds	r3, r7, r3
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	2b1f      	cmp	r3, #31
 8008fb0:	d9ee      	bls.n	8008f90 <Process_USB_input+0x1e8>
            }
            return false; // Of een andere foutwaarde
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e0c4      	b.n	8009140 <Process_USB_input+0x398>
        for (uint8_t i=4; i < len; i++) {
 8008fb6:	2146      	movs	r1, #70	@ 0x46
 8008fb8:	187b      	adds	r3, r7, r1
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	187b      	adds	r3, r7, r1
 8008fbe:	3201      	adds	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	2346      	movs	r3, #70	@ 0x46
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8009148 <Process_USB_input+0x3a0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d200      	bcs.n	8008fd2 <Process_USB_input+0x22a>
 8008fd0:	e74c      	b.n	8008e6c <Process_USB_input+0xc4>
          }
        }
        if (len == 6) {
 8008fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8009148 <Process_USB_input+0x3a0>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b06      	cmp	r3, #6
 8008fd8:	d114      	bne.n	8009004 <Process_USB_input+0x25c>
          ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008fda:	2428      	movs	r4, #40	@ 0x28
 8008fdc:	193b      	adds	r3, r7, r4
 8008fde:	4864      	ldr	r0, [pc, #400]	@ (8009170 <Process_USB_input+0x3c8>)
 8008fe0:	220c      	movs	r2, #12
 8008fe2:	0019      	movs	r1, r3
 8008fe4:	f002 fb70 	bl	800b6c8 <ReadUint8ArrayEEprom>
          boxConfig[11] = result; //overwrite the last byte of the key
 8008fe8:	4b5e      	ldr	r3, [pc, #376]	@ (8009164 <Process_USB_input+0x3bc>)
 8008fea:	781a      	ldrb	r2, [r3, #0]
 8008fec:	0021      	movs	r1, r4
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	72da      	strb	r2, [r3, #11]
          memcpy(received.Payload, boxConfig, IdSize);
 8008ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800915c <Process_USB_input+0x3b4>)
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	1879      	adds	r1, r7, r1
 8008ff8:	189b      	adds	r3, r3, r2
 8008ffa:	220c      	movs	r2, #12
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f01c fc3b 	bl	8025878 <memcpy>
 8009002:	e005      	b.n	8009010 <Process_USB_input+0x268>
        }
        else {
          memcpy(received.Payload, data, IdSize);
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4b5b      	ldr	r3, [pc, #364]	@ (8009174 <Process_USB_input+0x3cc>)
 8009008:	220c      	movs	r2, #12
 800900a:	0018      	movs	r0, r3
 800900c:	f01c fc34 	bl	8025878 <memcpy>
        }
        received.Payload[12] = '\0';
 8009010:	4b52      	ldr	r3, [pc, #328]	@ (800915c <Process_USB_input+0x3b4>)
 8009012:	2200      	movs	r2, #0
 8009014:	739a      	strb	r2, [r3, #14]
        received.PayloadLength = IdSize;
 8009016:	4b51      	ldr	r3, [pc, #324]	@ (800915c <Process_USB_input+0x3b4>)
 8009018:	220c      	movs	r2, #12
 800901a:	705a      	strb	r2, [r3, #1]
        Debug("first char of payload before conversion: %c", received.Payload[0]);
 800901c:	4b4f      	ldr	r3, [pc, #316]	@ (800915c <Process_USB_input+0x3b4>)
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	4a55      	ldr	r2, [pc, #340]	@ (8009178 <Process_USB_input+0x3d0>)
 8009022:	494b      	ldr	r1, [pc, #300]	@ (8009150 <Process_USB_input+0x3a8>)
 8009024:	2003      	movs	r0, #3
 8009026:	f00a f875 	bl	8013114 <CreateLine>
        uint8ArrayToString(Buffer, received.Payload);
 800902a:	4a52      	ldr	r2, [pc, #328]	@ (8009174 <Process_USB_input+0x3cc>)
 800902c:	240c      	movs	r4, #12
 800902e:	193b      	adds	r3, r7, r4
 8009030:	0011      	movs	r1, r2
 8009032:	0018      	movs	r0, r3
 8009034:	f7fc f93e 	bl	80052b4 <uint8ArrayToString>
        Debug("received Payload to write key %s", Buffer);
 8009038:	193b      	adds	r3, r7, r4
 800903a:	4a50      	ldr	r2, [pc, #320]	@ (800917c <Process_USB_input+0x3d4>)
 800903c:	4944      	ldr	r1, [pc, #272]	@ (8009150 <Process_USB_input+0x3a8>)
 800903e:	2003      	movs	r0, #3
 8009040:	f00a f868 	bl	8013114 <CreateLine>
        Debug("first char of payload after conversion: %c", received.Payload[0]);
 8009044:	4b45      	ldr	r3, [pc, #276]	@ (800915c <Process_USB_input+0x3b4>)
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	4a4d      	ldr	r2, [pc, #308]	@ (8009180 <Process_USB_input+0x3d8>)
 800904a:	4941      	ldr	r1, [pc, #260]	@ (8009150 <Process_USB_input+0x3a8>)
 800904c:	2003      	movs	r0, #3
 800904e:	f00a f861 	bl	8013114 <CreateLine>
        ProcessCmd(received);
 8009052:	4c42      	ldr	r4, [pc, #264]	@ (800915c <Process_USB_input+0x3b4>)
 8009054:	466b      	mov	r3, sp
 8009056:	0018      	movs	r0, r3
 8009058:	0023      	movs	r3, r4
 800905a:	3310      	adds	r3, #16
 800905c:	22f4      	movs	r2, #244	@ 0xf4
 800905e:	0019      	movs	r1, r3
 8009060:	f01c fc0a 	bl	8025878 <memcpy>
 8009064:	6820      	ldr	r0, [r4, #0]
 8009066:	6861      	ldr	r1, [r4, #4]
 8009068:	68a2      	ldr	r2, [r4, #8]
 800906a:	68e3      	ldr	r3, [r4, #12]
 800906c:	f7ff f86e 	bl	800814c <ProcessCmd>
        ResetUsbRxDataSize();
 8009070:	f019 f8e6 	bl	8022240 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009074:	f7ff fad6 	bl	8008624 <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009078:	2344      	movs	r3, #68	@ 0x44
 800907a:	18fb      	adds	r3, r7, r3
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
 8009080:	e00b      	b.n	800909a <Process_USB_input+0x2f2>
          data[i] = '\0';
 8009082:	2144      	movs	r1, #68	@ 0x44
 8009084:	187b      	adds	r3, r7, r1
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	18d3      	adds	r3, r2, r3
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009090:	187b      	adds	r3, r7, r1
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	187b      	adds	r3, r7, r1
 8009096:	3201      	adds	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
 800909a:	2344      	movs	r3, #68	@ 0x44
 800909c:	18fb      	adds	r3, r7, r3
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b1f      	cmp	r3, #31
 80090a2:	d9ee      	bls.n	8009082 <Process_USB_input+0x2da>
        }
        return true;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e04b      	b.n	8009140 <Process_USB_input+0x398>
      }
      else {
        printf_USB("Invalid input; Command comma not found\r\n");
 80090a8:	4b36      	ldr	r3, [pc, #216]	@ (8009184 <Process_USB_input+0x3dc>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7ff fa7a 	bl	80085a4 <printf_USB>
        ResetUsbRxDataSize();
 80090b0:	f019 f8c6 	bl	8022240 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 80090b4:	2343      	movs	r3, #67	@ 0x43
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	e00b      	b.n	80090d6 <Process_USB_input+0x32e>
          data[i] = '\0';
 80090be:	2143      	movs	r1, #67	@ 0x43
 80090c0:	187b      	adds	r3, r7, r1
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	18d3      	adds	r3, r2, r3
 80090c8:	2200      	movs	r2, #0
 80090ca:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 80090cc:	187b      	adds	r3, r7, r1
 80090ce:	781a      	ldrb	r2, [r3, #0]
 80090d0:	187b      	adds	r3, r7, r1
 80090d2:	3201      	adds	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	2343      	movs	r3, #67	@ 0x43
 80090d8:	18fb      	adds	r3, r7, r3
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	2b1f      	cmp	r3, #31
 80090de:	d9ee      	bls.n	80090be <Process_USB_input+0x316>
        }
      }
    }
//    else {
    len = 6;
 80090e0:	4b19      	ldr	r3, [pc, #100]	@ (8009148 <Process_USB_input+0x3a0>)
 80090e2:	2206      	movs	r2, #6
 80090e4:	601a      	str	r2, [r3, #0]
    PC_show_Keys();
 80090e6:	f7ff fa9d 	bl	8008624 <PC_show_Keys>
    ResetUsbRxDataSize();
 80090ea:	f019 f8a9 	bl	8022240 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < 32; i++) {
 80090ee:	2342      	movs	r3, #66	@ 0x42
 80090f0:	18fb      	adds	r3, r7, r3
 80090f2:	2200      	movs	r2, #0
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e00b      	b.n	8009110 <Process_USB_input+0x368>
      data[i] = '\0';
 80090f8:	2142      	movs	r1, #66	@ 0x42
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	18d3      	adds	r3, r2, r3
 8009102:	2200      	movs	r2, #0
 8009104:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < 32; i++) {
 8009106:	187b      	adds	r3, r7, r1
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	187b      	adds	r3, r7, r1
 800910c:	3201      	adds	r2, #1
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	2342      	movs	r3, #66	@ 0x42
 8009112:	18fb      	adds	r3, r7, r3
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b1f      	cmp	r3, #31
 8009118:	d9ee      	bls.n	80090f8 <Process_USB_input+0x350>
    }
  }
  if (formerlength != length) {
 800911a:	4b1b      	ldr	r3, [pc, #108]	@ (8009188 <Process_USB_input+0x3e0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009120:	429a      	cmp	r2, r3
 8009122:	d008      	beq.n	8009136 <Process_USB_input+0x38e>
    printf_USB("USB input: %s\r", (const char*)data);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4b19      	ldr	r3, [pc, #100]	@ (800918c <Process_USB_input+0x3e4>)
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fa3a 	bl	80085a4 <printf_USB>
    formerlength = length;
 8009130:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <Process_USB_input+0x3e0>)
 8009132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009134:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 8009136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009138:	0018      	movs	r0, r3
 800913a:	f019 f8a3 	bl	8022284 <GetUsbRxNextChunk>

  return false;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b013      	add	sp, #76	@ 0x4c
 8009146:	bd90      	pop	{r4, r7, pc}
 8009148:	20000030 	.word	0x20000030
 800914c:	0802b3a8 	.word	0x0802b3a8
 8009150:	0802b3e8 	.word	0x0802b3e8
 8009154:	0802b3ec 	.word	0x0802b3ec
 8009158:	0802b418 	.word	0x0802b418
 800915c:	200007ac 	.word	0x200007ac
 8009160:	0802e2b0 	.word	0x0802e2b0
 8009164:	200008b0 	.word	0x200008b0
 8009168:	0802b428 	.word	0x0802b428
 800916c:	0802b43c 	.word	0x0802b43c
 8009170:	08080000 	.word	0x08080000
 8009174:	200007ae 	.word	0x200007ae
 8009178:	0802b474 	.word	0x0802b474
 800917c:	0802b4a0 	.word	0x0802b4a0
 8009180:	0802b4c4 	.word	0x0802b4c4
 8009184:	0802b4f0 	.word	0x0802b4f0
 8009188:	200008b4 	.word	0x200008b4
 800918c:	0802b51c 	.word	0x0802b51c

08009190 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009194:	4b26      	ldr	r3, [pc, #152]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009196:	4a27      	ldr	r2, [pc, #156]	@ (8009234 <ReadBatteryVoltage+0xa4>)
 8009198:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800919a:	4b25      	ldr	r3, [pc, #148]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 800919c:	2280      	movs	r2, #128	@ 0x80
 800919e:	0152      	lsls	r2, r2, #5
 80091a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80091a2:	4a23      	ldr	r2, [pc, #140]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 80091a4:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091a6:	0011      	movs	r1, r2
 80091a8:	0018      	movs	r0, r3
 80091aa:	f00a ffcb 	bl	8014144 <HAL_ADC_ConfigChannel>
 80091ae:	1e03      	subs	r3, r0, #0
 80091b0:	d001      	beq.n	80091b6 <ReadBatteryVoltage+0x26>
    Error_Handler();
 80091b2:	f003 fb4d 	bl	800c850 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80091b6:	4b20      	ldr	r3, [pc, #128]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091b8:	0018      	movs	r0, r3
 80091ba:	f00a fec7 	bl	8013f4c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80091be:	4b1e      	ldr	r3, [pc, #120]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091c0:	2101      	movs	r1, #1
 80091c2:	0018      	movs	r0, r3
 80091c4:	f00a ff16 	bl	8013ff4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80091c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 80091ca:	0018      	movs	r0, r3
 80091cc:	f00a ffae 	bl	801412c <HAL_ADC_GetValue>
 80091d0:	0002      	movs	r2, r0
 80091d2:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <ReadBatteryVoltage+0xac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4353      	muls	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4919      	ldr	r1, [pc, #100]	@ (8009240 <ReadBatteryVoltage+0xb0>)
 80091dc:	0018      	movs	r0, r3
 80091de:	f7f6 ffe1 	bl	80001a4 <__udivsi3>
 80091e2:	0003      	movs	r3, r0
 80091e4:	001a      	movs	r2, r3
 80091e6:	4b17      	ldr	r3, [pc, #92]	@ (8009244 <ReadBatteryVoltage+0xb4>)
 80091e8:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 80091ea:	4b16      	ldr	r3, [pc, #88]	@ (8009244 <ReadBatteryVoltage+0xb4>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f8 fb6a 	bl	80018c8 <__aeabi_ui2f>
 80091f4:	1c03      	adds	r3, r0, #0
 80091f6:	4914      	ldr	r1, [pc, #80]	@ (8009248 <ReadBatteryVoltage+0xb8>)
 80091f8:	1c18      	adds	r0, r3, #0
 80091fa:	f7f7 fd53 	bl	8000ca4 <__aeabi_fdiv>
 80091fe:	1c03      	adds	r3, r0, #0
 8009200:	1c1a      	adds	r2, r3, #0
 8009202:	4b12      	ldr	r3, [pc, #72]	@ (800924c <ReadBatteryVoltage+0xbc>)
 8009204:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009206:	4b0a      	ldr	r3, [pc, #40]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009208:	4a0a      	ldr	r2, [pc, #40]	@ (8009234 <ReadBatteryVoltage+0xa4>)
 800920a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800920c:	4b08      	ldr	r3, [pc, #32]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 800920e:	4a10      	ldr	r2, [pc, #64]	@ (8009250 <ReadBatteryVoltage+0xc0>)
 8009210:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009212:	4a07      	ldr	r2, [pc, #28]	@ (8009230 <ReadBatteryVoltage+0xa0>)
 8009214:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <ReadBatteryVoltage+0xa8>)
 8009216:	0011      	movs	r1, r2
 8009218:	0018      	movs	r0, r3
 800921a:	f00a ff93 	bl	8014144 <HAL_ADC_ConfigChannel>
 800921e:	1e03      	subs	r3, r0, #0
 8009220:	d001      	beq.n	8009226 <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009222:	f003 fb15 	bl	800c850 <Error_Handler>
  }
  return trueValue;
 8009226:	4b09      	ldr	r3, [pc, #36]	@ (800924c <ReadBatteryVoltage+0xbc>)
 8009228:	681b      	ldr	r3, [r3, #0]
 }
 800922a:	1c18      	adds	r0, r3, #0
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	20000b4c 	.word	0x20000b4c
 8009234:	38004000 	.word	0x38004000
 8009238:	20000b8c 	.word	0x20000b8c
 800923c:	20000034 	.word	0x20000034
 8009240:	00000fff 	.word	0x00000fff
 8009244:	20000b54 	.word	0x20000b54
 8009248:	447a0000 	.word	0x447a0000
 800924c:	20000b58 	.word	0x20000b58
 8009250:	00001001 	.word	0x00001001

08009254 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009258:	4b21      	ldr	r3, [pc, #132]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 800925a:	4a22      	ldr	r2, [pc, #136]	@ (80092e4 <ReadSolarVoltage+0x90>)
 800925c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800925e:	4b20      	ldr	r3, [pc, #128]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 8009260:	2280      	movs	r2, #128	@ 0x80
 8009262:	0152      	lsls	r2, r2, #5
 8009264:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009266:	4a1e      	ldr	r2, [pc, #120]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 8009268:	4b1f      	ldr	r3, [pc, #124]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800926a:	0011      	movs	r1, r2
 800926c:	0018      	movs	r0, r3
 800926e:	f00a ff69 	bl	8014144 <HAL_ADC_ConfigChannel>
 8009272:	1e03      	subs	r3, r0, #0
 8009274:	d001      	beq.n	800927a <ReadSolarVoltage+0x26>
    Error_Handler();
 8009276:	f003 faeb 	bl	800c850 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800927a:	4b1b      	ldr	r3, [pc, #108]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800927c:	0018      	movs	r0, r3
 800927e:	f00a fe65 	bl	8013f4c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009282:	4b19      	ldr	r3, [pc, #100]	@ (80092e8 <ReadSolarVoltage+0x94>)
 8009284:	2101      	movs	r1, #1
 8009286:	0018      	movs	r0, r3
 8009288:	f00a feb4 	bl	8013ff4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 800928c:	4b16      	ldr	r3, [pc, #88]	@ (80092e8 <ReadSolarVoltage+0x94>)
 800928e:	0018      	movs	r0, r3
 8009290:	f00a ff4c 	bl	801412c <HAL_ADC_GetValue>
 8009294:	0002      	movs	r2, r0
 8009296:	4b15      	ldr	r3, [pc, #84]	@ (80092ec <ReadSolarVoltage+0x98>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	435a      	muls	r2, r3
 800929c:	0013      	movs	r3, r2
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	189b      	adds	r3, r3, r2
 80092a2:	4913      	ldr	r1, [pc, #76]	@ (80092f0 <ReadSolarVoltage+0x9c>)
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7f6 ff7d 	bl	80001a4 <__udivsi3>
 80092aa:	0003      	movs	r3, r0
 80092ac:	001a      	movs	r2, r3
 80092ae:	4b11      	ldr	r3, [pc, #68]	@ (80092f4 <ReadSolarVoltage+0xa0>)
 80092b0:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80092b2:	4b0b      	ldr	r3, [pc, #44]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092b4:	4a0b      	ldr	r2, [pc, #44]	@ (80092e4 <ReadSolarVoltage+0x90>)
 80092b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80092b8:	4b09      	ldr	r3, [pc, #36]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092ba:	4a0f      	ldr	r2, [pc, #60]	@ (80092f8 <ReadSolarVoltage+0xa4>)
 80092bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80092be:	4a08      	ldr	r2, [pc, #32]	@ (80092e0 <ReadSolarVoltage+0x8c>)
 80092c0:	4b09      	ldr	r3, [pc, #36]	@ (80092e8 <ReadSolarVoltage+0x94>)
 80092c2:	0011      	movs	r1, r2
 80092c4:	0018      	movs	r0, r3
 80092c6:	f00a ff3d 	bl	8014144 <HAL_ADC_ConfigChannel>
 80092ca:	1e03      	subs	r3, r0, #0
 80092cc:	d001      	beq.n	80092d2 <ReadSolarVoltage+0x7e>
    Error_Handler();
 80092ce:	f003 fabf 	bl	800c850 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 80092d2:	4b08      	ldr	r3, [pc, #32]	@ (80092f4 <ReadSolarVoltage+0xa0>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 }
 80092d8:	0018      	movs	r0, r3
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	20000b4c 	.word	0x20000b4c
 80092e4:	3c008000 	.word	0x3c008000
 80092e8:	20000b8c 	.word	0x20000b8c
 80092ec:	20000034 	.word	0x20000034
 80092f0:	00000fff 	.word	0x00000fff
 80092f4:	20000b5c 	.word	0x20000b5c
 80092f8:	00001001 	.word	0x00001001

080092fc <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8009300:	23a0      	movs	r3, #160	@ 0xa0
 8009302:	05db      	lsls	r3, r3, #23
 8009304:	2180      	movs	r1, #128	@ 0x80
 8009306:	0018      	movs	r0, r3
 8009308:	f00b feb8 	bl	801507c <HAL_GPIO_ReadPin>
 800930c:	0003      	movs	r3, r0
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	4193      	sbcs	r3, r2
 8009312:	b2db      	uxtb	r3, r3
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800931a:	b580      	push	{r7, lr}
 800931c:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800931e:	2380      	movs	r3, #128	@ 0x80
 8009320:	021a      	lsls	r2, r3, #8
 8009322:	23a0      	movs	r3, #160	@ 0xa0
 8009324:	05db      	lsls	r3, r3, #23
 8009326:	0011      	movs	r1, r2
 8009328:	0018      	movs	r0, r3
 800932a:	f00b fea7 	bl	801507c <HAL_GPIO_ReadPin>
 800932e:	0003      	movs	r3, r0
 8009330:	1e5a      	subs	r2, r3, #1
 8009332:	4193      	sbcs	r3, r2
 8009334:	b2db      	uxtb	r3, r3
}
 8009336:	0018      	movs	r0, r3
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009340:	4b05      	ldr	r3, [pc, #20]	@ (8009358 <UserButton_Pressed+0x1c>)
 8009342:	2104      	movs	r1, #4
 8009344:	0018      	movs	r0, r3
 8009346:	f00b fe99 	bl	801507c <HAL_GPIO_ReadPin>
 800934a:	0003      	movs	r3, r0
 800934c:	425a      	negs	r2, r3
 800934e:	4153      	adcs	r3, r2
 8009350:	b2db      	uxtb	r3, r3
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	50000c00 	.word	0x50000c00

0800935c <showTime>:
void getUptime(char* uptbuffer) {
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
}
#endif

void showTime() {
 800935c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800935e:	46d6      	mov	lr, sl
 8009360:	464f      	mov	r7, r9
 8009362:	4646      	mov	r6, r8
 8009364:	b5c0      	push	{r6, r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 800936a:	4b25      	ldr	r3, [pc, #148]	@ (8009400 <showTime+0xa4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d03e      	beq.n	80093f0 <showTime+0x94>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009372:	003a      	movs	r2, r7
 8009374:	1d3b      	adds	r3, r7, #4
 8009376:	0011      	movs	r1, r2
 8009378:	0018      	movs	r0, r3
 800937a:	f000 fa4b 	bl	8009814 <RTC_GetTime>
  lasthour = currentTime.Hours;
 800937e:	1d3b      	adds	r3, r7, #4
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	4b20      	ldr	r3, [pc, #128]	@ (8009404 <showTime+0xa8>)
 8009384:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009386:	003b      	movs	r3, r7
 8009388:	781a      	ldrb	r2, [r3, #0]
 800938a:	4b1f      	ldr	r3, [pc, #124]	@ (8009408 <showTime+0xac>)
 800938c:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 800938e:	f000 f857 	bl	8009440 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009392:	003b      	movs	r3, r7
 8009394:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8009396:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8009398:	003b      	movs	r3, r7
 800939a:	785b      	ldrb	r3, [r3, #1]
 800939c:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800939e:	4b1b      	ldr	r3, [pc, #108]	@ (800940c <showTime+0xb0>)
 80093a0:	0092      	lsls	r2, r2, #2
 80093a2:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093a4:	003b      	movs	r3, r7
 80093a6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093a8:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093aa:	1d3b      	adds	r3, r7, #4
 80093ac:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093ae:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80093b0:	1d3b      	adds	r3, r7, #4
 80093b2:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093b4:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093b6:	1d3b      	adds	r3, r7, #4
 80093b8:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093ba:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093bc:	4b14      	ldr	r3, [pc, #80]	@ (8009410 <showTime+0xb4>)
 80093be:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093c0:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093c2:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <showTime+0xb4>)
 80093c4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093c6:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093c8:	4b11      	ldr	r3, [pc, #68]	@ (8009410 <showTime+0xb4>)
 80093ca:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093cc:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80093ce:	4b10      	ldr	r3, [pc, #64]	@ (8009410 <showTime+0xb4>)
 80093d0:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80093d2:	4810      	ldr	r0, [pc, #64]	@ (8009414 <showTime+0xb8>)
 80093d4:	9306      	str	r3, [sp, #24]
 80093d6:	4643      	mov	r3, r8
 80093d8:	9305      	str	r3, [sp, #20]
 80093da:	4663      	mov	r3, ip
 80093dc:	9304      	str	r3, [sp, #16]
 80093de:	9603      	str	r6, [sp, #12]
 80093e0:	9502      	str	r5, [sp, #8]
 80093e2:	9401      	str	r4, [sp, #4]
 80093e4:	9100      	str	r1, [sp, #0]
 80093e6:	4653      	mov	r3, sl
 80093e8:	4649      	mov	r1, r9
 80093ea:	f01b ff8f 	bl	802530c <iprintf>
 80093ee:	e000      	b.n	80093f2 <showTime+0x96>
    return;
 80093f0:	46c0      	nop			@ (mov r8, r8)
}
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b006      	add	sp, #24
 80093f6:	bce0      	pop	{r5, r6, r7}
 80093f8:	46ba      	mov	sl, r7
 80093fa:	46b1      	mov	r9, r6
 80093fc:	46a8      	mov	r8, r5
 80093fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009400:	20000b70 	.word	0x20000b70
 8009404:	20000b60 	.word	0x20000b60
 8009408:	20000b61 	.word	0x20000b61
 800940c:	20000054 	.word	0x20000054
 8009410:	20000b64 	.word	0x20000b64
 8009414:	0802b578 	.word	0x0802b578

08009418 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800941e:	003a      	movs	r2, r7
 8009420:	1d3b      	adds	r3, r7, #4
 8009422:	0011      	movs	r1, r2
 8009424:	0018      	movs	r0, r3
 8009426:	f000 f9f5 	bl	8009814 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800942a:	1d3a      	adds	r2, r7, #4
 800942c:	003b      	movs	r3, r7
 800942e:	0011      	movs	r1, r2
 8009430:	0018      	movs	r0, r3
 8009432:	f000 fbb7 	bl	8009ba4 <makeTime>
 8009436:	0003      	movs	r3, r0
}
 8009438:	0018      	movs	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	b006      	add	sp, #24
 800943e:	bd80      	pop	{r7, pc}

08009440 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009446:	003a      	movs	r2, r7
 8009448:	1d3b      	adds	r3, r7, #4
 800944a:	0011      	movs	r1, r2
 800944c:	0018      	movs	r0, r3
 800944e:	f000 f9e1 	bl	8009814 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009452:	1d3a      	adds	r2, r7, #4
 8009454:	003b      	movs	r3, r7
 8009456:	0011      	movs	r1, r2
 8009458:	0018      	movs	r0, r3
 800945a:	f000 fba3 	bl	8009ba4 <makeTime>
 800945e:	0002      	movs	r2, r0
 8009460:	4b1e      	ldr	r3, [pc, #120]	@ (80094dc <UpdateSystemUptime+0x9c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	213c      	movs	r1, #60	@ 0x3c
 8009470:	0018      	movs	r0, r3
 8009472:	f7f6 ff1d 	bl	80002b0 <__aeabi_uidivmod>
 8009476:	000b      	movs	r3, r1
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b19      	ldr	r3, [pc, #100]	@ (80094e0 <UpdateSystemUptime+0xa0>)
 800947c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	213c      	movs	r1, #60	@ 0x3c
 8009482:	0018      	movs	r0, r3
 8009484:	f7f6 fe8e 	bl	80001a4 <__udivsi3>
 8009488:	0003      	movs	r3, r0
 800948a:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	213c      	movs	r1, #60	@ 0x3c
 8009490:	0018      	movs	r0, r3
 8009492:	f7f6 ff0d 	bl	80002b0 <__aeabi_uidivmod>
 8009496:	000b      	movs	r3, r1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	4b11      	ldr	r3, [pc, #68]	@ (80094e0 <UpdateSystemUptime+0xa0>)
 800949c:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	213c      	movs	r1, #60	@ 0x3c
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7f6 fe7e 	bl	80001a4 <__udivsi3>
 80094a8:	0003      	movs	r3, r0
 80094aa:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2118      	movs	r1, #24
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7f6 fefd 	bl	80002b0 <__aeabi_uidivmod>
 80094b6:	000b      	movs	r3, r1
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	4b09      	ldr	r3, [pc, #36]	@ (80094e0 <UpdateSystemUptime+0xa0>)
 80094bc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80094be:	69bb      	ldr	r3, [r7, #24]
 80094c0:	2118      	movs	r1, #24
 80094c2:	0018      	movs	r0, r3
 80094c4:	f7f6 fe6e 	bl	80001a4 <__udivsi3>
 80094c8:	0003      	movs	r3, r0
 80094ca:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	4b03      	ldr	r3, [pc, #12]	@ (80094e0 <UpdateSystemUptime+0xa0>)
 80094d2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80094d4:	46c0      	nop			@ (mov r8, r8)
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b008      	add	sp, #32
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000b70 	.word	0x20000b70
 80094e0:	20000b64 	.word	0x20000b64

080094e4 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	0008      	movs	r0, r1
 80094ee:	0011      	movs	r1, r2
 80094f0:	1cfb      	adds	r3, r7, #3
 80094f2:	1c02      	adds	r2, r0, #0
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	1cbb      	adds	r3, r7, #2
 80094f8:	1c0a      	adds	r2, r1, #0
 80094fa:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80094fc:	230e      	movs	r3, #14
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009504:	230f      	movs	r3, #15
 8009506:	18fb      	adds	r3, r7, r3
 8009508:	1cfa      	adds	r2, r7, #3
 800950a:	7812      	ldrb	r2, [r2, #0]
 800950c:	701a      	strb	r2, [r3, #0]
 800950e:	e015      	b.n	800953c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009510:	200f      	movs	r0, #15
 8009512:	183b      	adds	r3, r7, r0
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	18d2      	adds	r2, r2, r3
 800951a:	240e      	movs	r4, #14
 800951c:	193b      	adds	r3, r7, r4
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	7811      	ldrb	r1, [r2, #0]
 8009522:	2208      	movs	r2, #8
 8009524:	18ba      	adds	r2, r7, r2
 8009526:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009528:	193b      	adds	r3, r7, r4
 800952a:	781a      	ldrb	r2, [r3, #0]
 800952c:	193b      	adds	r3, r7, r4
 800952e:	3201      	adds	r2, #1
 8009530:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009532:	183b      	adds	r3, r7, r0
 8009534:	781a      	ldrb	r2, [r3, #0]
 8009536:	183b      	adds	r3, r7, r0
 8009538:	3201      	adds	r2, #1
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	200f      	movs	r0, #15
 800953e:	183a      	adds	r2, r7, r0
 8009540:	1cbb      	adds	r3, r7, #2
 8009542:	7812      	ldrb	r2, [r2, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d9e2      	bls.n	8009510 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 800954a:	230e      	movs	r3, #14
 800954c:	18fb      	adds	r3, r7, r3
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2208      	movs	r2, #8
 8009552:	18ba      	adds	r2, r7, r2
 8009554:	2100      	movs	r1, #0
 8009556:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009558:	1cfb      	adds	r3, r7, #3
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b13      	cmp	r3, #19
 800955e:	d849      	bhi.n	80095f4 <aBuff2int+0x110>
    if (start == 17) { //month
 8009560:	1cfb      	adds	r3, r7, #3
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	2b11      	cmp	r3, #17
 8009566:	d122      	bne.n	80095ae <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009568:	183b      	adds	r3, r7, r0
 800956a:	2200      	movs	r2, #0
 800956c:	701a      	strb	r2, [r3, #0]
 800956e:	e018      	b.n	80095a2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009570:	240f      	movs	r4, #15
 8009572:	193b      	adds	r3, r7, r4
 8009574:	781a      	ldrb	r2, [r3, #0]
 8009576:	4b25      	ldr	r3, [pc, #148]	@ (800960c <aBuff2int+0x128>)
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	58d2      	ldr	r2, [r2, r3]
 800957c:	2308      	movs	r3, #8
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	0011      	movs	r1, r2
 8009582:	0018      	movs	r0, r3
 8009584:	f7f6 fde8 	bl	8000158 <strcmp>
 8009588:	1e03      	subs	r3, r0, #0
 800958a:	d104      	bne.n	8009596 <aBuff2int+0xb2>
          return i+1;
 800958c:	193b      	adds	r3, r7, r4
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	3301      	adds	r3, #1
 8009592:	b2db      	uxtb	r3, r3
 8009594:	e035      	b.n	8009602 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8009596:	210f      	movs	r1, #15
 8009598:	187b      	adds	r3, r7, r1
 800959a:	781a      	ldrb	r2, [r3, #0]
 800959c:	187b      	adds	r3, r7, r1
 800959e:	3201      	adds	r2, #1
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	230f      	movs	r3, #15
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b0b      	cmp	r3, #11
 80095aa:	d9e1      	bls.n	8009570 <aBuff2int+0x8c>
 80095ac:	e022      	b.n	80095f4 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80095ae:	230f      	movs	r3, #15
 80095b0:	18fb      	adds	r3, r7, r3
 80095b2:	2200      	movs	r2, #0
 80095b4:	701a      	strb	r2, [r3, #0]
 80095b6:	e018      	b.n	80095ea <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80095b8:	240f      	movs	r4, #15
 80095ba:	193b      	adds	r3, r7, r4
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	4b14      	ldr	r3, [pc, #80]	@ (8009610 <aBuff2int+0x12c>)
 80095c0:	0092      	lsls	r2, r2, #2
 80095c2:	58d2      	ldr	r2, [r2, r3]
 80095c4:	2308      	movs	r3, #8
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	0011      	movs	r1, r2
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7f6 fdc4 	bl	8000158 <strcmp>
 80095d0:	1e03      	subs	r3, r0, #0
 80095d2:	d104      	bne.n	80095de <aBuff2int+0xfa>
          return i+1;
 80095d4:	193b      	adds	r3, r7, r4
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	3301      	adds	r3, #1
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	e011      	b.n	8009602 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80095de:	210f      	movs	r1, #15
 80095e0:	187b      	adds	r3, r7, r1
 80095e2:	781a      	ldrb	r2, [r3, #0]
 80095e4:	187b      	adds	r3, r7, r1
 80095e6:	3201      	adds	r2, #1
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	230f      	movs	r3, #15
 80095ec:	18fb      	adds	r3, r7, r3
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b06      	cmp	r3, #6
 80095f2:	d9e1      	bls.n	80095b8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80095f4:	2308      	movs	r3, #8
 80095f6:	18fb      	adds	r3, r7, r3
 80095f8:	0018      	movs	r0, r3
 80095fa:	f01a faa2 	bl	8023b42 <atoi>
 80095fe:	0003      	movs	r3, r0
 8009600:	b2db      	uxtb	r3, r3
}
 8009602:	0018      	movs	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	b005      	add	sp, #20
 8009608:	bd90      	pop	{r4, r7, pc}
 800960a:	46c0      	nop			@ (mov r8, r8)
 800960c:	20000054 	.word	0x20000054
 8009610:	20000038 	.word	0x20000038

08009614 <ParseTime>:

void ParseTime(char* buffer) {
 8009614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009616:	b08b      	sub	sp, #44	@ 0x2c
 8009618:	af02      	add	r7, sp, #8
 800961a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800961c:	2408      	movs	r4, #8
 800961e:	193a      	adds	r2, r7, r4
 8009620:	260c      	movs	r6, #12
 8009622:	19bb      	adds	r3, r7, r6
 8009624:	0011      	movs	r1, r2
 8009626:	0018      	movs	r0, r3
 8009628:	f000 f8f4 	bl	8009814 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2219      	movs	r2, #25
 8009630:	2118      	movs	r1, #24
 8009632:	0018      	movs	r0, r3
 8009634:	f7ff ff56 	bl	80094e4 <aBuff2int>
 8009638:	0003      	movs	r3, r0
 800963a:	001a      	movs	r2, r3
 800963c:	19bb      	adds	r3, r7, r6
 800963e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	221c      	movs	r2, #28
 8009644:	211b      	movs	r1, #27
 8009646:	0018      	movs	r0, r3
 8009648:	f7ff ff4c 	bl	80094e4 <aBuff2int>
 800964c:	0003      	movs	r3, r0
 800964e:	001a      	movs	r2, r3
 8009650:	19bb      	adds	r3, r7, r6
 8009652:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	221f      	movs	r2, #31
 8009658:	211e      	movs	r1, #30
 800965a:	0018      	movs	r0, r3
 800965c:	f7ff ff42 	bl	80094e4 <aBuff2int>
 8009660:	0003      	movs	r3, r0
 8009662:	001a      	movs	r2, r3
 8009664:	19bb      	adds	r3, r7, r6
 8009666:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2224      	movs	r2, #36	@ 0x24
 800966c:	2123      	movs	r1, #35	@ 0x23
 800966e:	0018      	movs	r0, r3
 8009670:	f7ff ff38 	bl	80094e4 <aBuff2int>
 8009674:	0003      	movs	r3, r0
 8009676:	001a      	movs	r2, r3
 8009678:	0025      	movs	r5, r4
 800967a:	197b      	adds	r3, r7, r5
 800967c:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2213      	movs	r2, #19
 8009682:	2111      	movs	r1, #17
 8009684:	0018      	movs	r0, r3
 8009686:	f7ff ff2d 	bl	80094e4 <aBuff2int>
 800968a:	0003      	movs	r3, r0
 800968c:	001a      	movs	r2, r3
 800968e:	197b      	adds	r3, r7, r5
 8009690:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2216      	movs	r2, #22
 8009696:	2115      	movs	r1, #21
 8009698:	0018      	movs	r0, r3
 800969a:	f7ff ff23 	bl	80094e4 <aBuff2int>
 800969e:	0003      	movs	r3, r0
 80096a0:	001a      	movs	r2, r3
 80096a2:	197b      	adds	r3, r7, r5
 80096a4:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	220f      	movs	r2, #15
 80096aa:	210d      	movs	r1, #13
 80096ac:	0018      	movs	r0, r3
 80096ae:	f7ff ff19 	bl	80094e4 <aBuff2int>
 80096b2:	0003      	movs	r3, r0
 80096b4:	001a      	movs	r2, r3
 80096b6:	197b      	adds	r3, r7, r5
 80096b8:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80096ba:	19bb      	adds	r3, r7, r6
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	001c      	movs	r4, r3
 80096c0:	19bb      	adds	r3, r7, r6
 80096c2:	785b      	ldrb	r3, [r3, #1]
 80096c4:	0018      	movs	r0, r3
 80096c6:	19bb      	adds	r3, r7, r6
 80096c8:	789b      	ldrb	r3, [r3, #2]
 80096ca:	4a1c      	ldr	r2, [pc, #112]	@ (800973c <ParseTime+0x128>)
 80096cc:	491c      	ldr	r1, [pc, #112]	@ (8009740 <ParseTime+0x12c>)
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	9000      	str	r0, [sp, #0]
 80096d2:	0023      	movs	r3, r4
 80096d4:	2003      	movs	r0, #3
 80096d6:	f009 fd1d 	bl	8013114 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80096da:	197b      	adds	r3, r7, r5
 80096dc:	789b      	ldrb	r3, [r3, #2]
 80096de:	001c      	movs	r4, r3
 80096e0:	197b      	adds	r3, r7, r5
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	0018      	movs	r0, r3
 80096e6:	197b      	adds	r3, r7, r5
 80096e8:	78db      	ldrb	r3, [r3, #3]
 80096ea:	4a16      	ldr	r2, [pc, #88]	@ (8009744 <ParseTime+0x130>)
 80096ec:	4914      	ldr	r1, [pc, #80]	@ (8009740 <ParseTime+0x12c>)
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	9000      	str	r0, [sp, #0]
 80096f2:	0023      	movs	r3, r4
 80096f4:	2003      	movs	r0, #3
 80096f6:	f009 fd0d 	bl	8013114 <CreateLine>
  RTC_SetTime(&currentTime);
 80096fa:	19bb      	adds	r3, r7, r6
 80096fc:	0018      	movs	r0, r3
 80096fe:	f000 f825 	bl	800974c <RTC_SetTime>
  RTC_SetDate(&currentDate);
 8009702:	197b      	adds	r3, r7, r5
 8009704:	0018      	movs	r0, r3
 8009706:	f000 f847 	bl	8009798 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 800970a:	197b      	adds	r3, r7, r5
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d101      	bne.n	8009716 <ParseTime+0x102>
    reset_fanCleaningDone();
 8009712:	f004 fa37 	bl	800db84 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 8009716:	4b0c      	ldr	r3, [pc, #48]	@ (8009748 <ParseTime+0x134>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10a      	bne.n	8009734 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800971e:	230c      	movs	r3, #12
 8009720:	18fa      	adds	r2, r7, r3
 8009722:	2308      	movs	r3, #8
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	0011      	movs	r1, r2
 8009728:	0018      	movs	r0, r3
 800972a:	f000 fa3b 	bl	8009ba4 <makeTime>
 800972e:	0002      	movs	r2, r0
 8009730:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <ParseTime+0x134>)
 8009732:	601a      	str	r2, [r3, #0]
  }
}
 8009734:	46c0      	nop			@ (mov r8, r8)
 8009736:	46bd      	mov	sp, r7
 8009738:	b009      	add	sp, #36	@ 0x24
 800973a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800973c:	0802b5d0 	.word	0x0802b5d0
 8009740:	0802b608 	.word	0x0802b608
 8009744:	0802b60c 	.word	0x0802b60c
 8009748:	20000b70 	.word	0x20000b70

0800974c <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009766:	4b09      	ldr	r3, [pc, #36]	@ (800978c <RTC_SetTime+0x40>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	0018      	movs	r0, r3
 8009770:	f011 fe3c 	bl	801b3ec <HAL_RTC_SetTime>
 8009774:	1e03      	subs	r3, r0, #0
 8009776:	d005      	beq.n	8009784 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 8009778:	4a05      	ldr	r2, [pc, #20]	@ (8009790 <RTC_SetTime+0x44>)
 800977a:	4b06      	ldr	r3, [pc, #24]	@ (8009794 <RTC_SetTime+0x48>)
 800977c:	0019      	movs	r1, r3
 800977e:	2001      	movs	r0, #1
 8009780:	f009 fcc8 	bl	8013114 <CreateLine>
    }
}
 8009784:	46c0      	nop			@ (mov r8, r8)
 8009786:	46bd      	mov	sp, r7
 8009788:	b002      	add	sp, #8
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20000b6c 	.word	0x20000b6c
 8009790:	0802b640 	.word	0x0802b640
 8009794:	0802b65c 	.word	0x0802b65c

08009798 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80097a0:	4b16      	ldr	r3, [pc, #88]	@ (80097fc <RTC_SetDate+0x64>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6879      	ldr	r1, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	0018      	movs	r0, r3
 80097aa:	f011 ff27 	bl	801b5fc <HAL_RTC_SetDate>
 80097ae:	1e03      	subs	r3, r0, #0
 80097b0:	d005      	beq.n	80097be <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 80097b2:	4a13      	ldr	r2, [pc, #76]	@ (8009800 <RTC_SetDate+0x68>)
 80097b4:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <RTC_SetDate+0x6c>)
 80097b6:	0019      	movs	r1, r3
 80097b8:	2001      	movs	r0, #1
 80097ba:	f009 fcab 	bl	8013114 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80097be:	4b0f      	ldr	r3, [pc, #60]	@ (80097fc <RTC_SetDate+0x64>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2101      	movs	r1, #1
 80097c4:	0018      	movs	r0, r3
 80097c6:	f012 fa5f 	bl	801bc88 <HAL_RTCEx_BKUPRead>
 80097ca:	0003      	movs	r3, r0
 80097cc:	4a0e      	ldr	r2, [pc, #56]	@ (8009808 <RTC_SetDate+0x70>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d010      	beq.n	80097f4 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80097d2:	4a0e      	ldr	r2, [pc, #56]	@ (800980c <RTC_SetDate+0x74>)
 80097d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009810 <RTC_SetDate+0x78>)
 80097d6:	0019      	movs	r1, r3
 80097d8:	2003      	movs	r0, #3
 80097da:	f009 fc9b 	bl	8013114 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80097de:	f010 fd85 	bl	801a2ec <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80097e2:	4b06      	ldr	r3, [pc, #24]	@ (80097fc <RTC_SetDate+0x64>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a08      	ldr	r2, [pc, #32]	@ (8009808 <RTC_SetDate+0x70>)
 80097e8:	2101      	movs	r1, #1
 80097ea:	0018      	movs	r0, r3
 80097ec:	f012 fa34 	bl	801bc58 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80097f0:	f010 fd8a 	bl	801a308 <HAL_PWR_DisableBkUpAccess>
    }
}
 80097f4:	46c0      	nop			@ (mov r8, r8)
 80097f6:	46bd      	mov	sp, r7
 80097f8:	b002      	add	sp, #8
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	20000b6c 	.word	0x20000b6c
 8009800:	0802b660 	.word	0x0802b660
 8009804:	0802b65c 	.word	0x0802b65c
 8009808:	0000bebe 	.word	0x0000bebe
 800980c:	0802b67c 	.word	0x0802b67c
 8009810:	0802b608 	.word	0x0802b608

08009814 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8009814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800981e:	250f      	movs	r5, #15
 8009820:	197b      	adds	r3, r7, r5
 8009822:	2201      	movs	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8009826:	230e      	movs	r3, #14
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	2200      	movs	r2, #0
 800982c:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800982e:	260c      	movs	r6, #12
 8009830:	19bc      	adds	r4, r7, r6
 8009832:	f008 fce9 	bl	8012208 <powerCheck>
 8009836:	0003      	movs	r3, r0
 8009838:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800983a:	19bb      	adds	r3, r7, r6
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d104      	bne.n	800984c <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 8009842:	197b      	adds	r3, r7, r5
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	197b      	adds	r3, r7, r5
 8009848:	3201      	adds	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800984c:	230d      	movs	r3, #13
 800984e:	18fb      	adds	r3, r7, r3
 8009850:	2200      	movs	r2, #0
 8009852:	701a      	strb	r2, [r3, #0]
 8009854:	e039      	b.n	80098ca <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8009856:	4b23      	ldr	r3, [pc, #140]	@ (80098e4 <RTC_GetTime+0xd0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	0018      	movs	r0, r3
 8009860:	f011 fe6e 	bl	801b540 <HAL_RTC_GetTime>
 8009864:	1e03      	subs	r3, r0, #0
 8009866:	d005      	beq.n	8009874 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8009868:	4a1f      	ldr	r2, [pc, #124]	@ (80098e8 <RTC_GetTime+0xd4>)
 800986a:	4b20      	ldr	r3, [pc, #128]	@ (80098ec <RTC_GetTime+0xd8>)
 800986c:	0019      	movs	r1, r3
 800986e:	2001      	movs	r0, #1
 8009870:	f009 fc50 	bl	8013114 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009874:	4b1b      	ldr	r3, [pc, #108]	@ (80098e4 <RTC_GetTime+0xd0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	2200      	movs	r2, #0
 800987c:	0018      	movs	r0, r3
 800987e:	f011 ff51 	bl	801b724 <HAL_RTC_GetDate>
 8009882:	1e03      	subs	r3, r0, #0
 8009884:	d005      	beq.n	8009892 <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 8009886:	4a1a      	ldr	r2, [pc, #104]	@ (80098f0 <RTC_GetTime+0xdc>)
 8009888:	4b18      	ldr	r3, [pc, #96]	@ (80098ec <RTC_GetTime+0xd8>)
 800988a:	0019      	movs	r1, r3
 800988c:	2001      	movs	r0, #1
 800988e:	f009 fc41 	bl	8013114 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 8009892:	230c      	movs	r3, #12
 8009894:	18fb      	adds	r3, r7, r3
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d110      	bne.n	80098be <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	210e      	movs	r1, #14
 80098a2:	187a      	adds	r2, r7, r1
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d018      	beq.n	80098dc <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80098aa:	187b      	adds	r3, r7, r1
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	701a      	strb	r2, [r3, #0]
        t++;
 80098b2:	210f      	movs	r1, #15
 80098b4:	187b      	adds	r3, r7, r1
 80098b6:	781a      	ldrb	r2, [r3, #0]
 80098b8:	187b      	adds	r3, r7, r1
 80098ba:	3201      	adds	r2, #1
 80098bc:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80098be:	210d      	movs	r1, #13
 80098c0:	187b      	adds	r3, r7, r1
 80098c2:	781a      	ldrb	r2, [r3, #0]
 80098c4:	187b      	adds	r3, r7, r1
 80098c6:	3201      	adds	r2, #1
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	230d      	movs	r3, #13
 80098cc:	18fa      	adds	r2, r7, r3
 80098ce:	230f      	movs	r3, #15
 80098d0:	18fb      	adds	r3, r7, r3
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d3bd      	bcc.n	8009856 <RTC_GetTime+0x42>
 80098da:	e000      	b.n	80098de <RTC_GetTime+0xca>
      }
      else {
        return;
 80098dc:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80098de:	46bd      	mov	sp, r7
 80098e0:	b005      	add	sp, #20
 80098e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098e4:	20000b6c 	.word	0x20000b6c
 80098e8:	0802b694 	.word	0x0802b694
 80098ec:	0802b65c 	.word	0x0802b65c
 80098f0:	0802b6b0 	.word	0x0802b6b0

080098f4 <getPosixTime>:

uint32_t getPosixTime(void) {
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80098fa:	003a      	movs	r2, r7
 80098fc:	1d3b      	adds	r3, r7, #4
 80098fe:	0011      	movs	r1, r2
 8009900:	0018      	movs	r0, r3
 8009902:	f7ff ff87 	bl	8009814 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009906:	1d3a      	adds	r2, r7, #4
 8009908:	003b      	movs	r3, r7
 800990a:	0011      	movs	r1, r2
 800990c:	0018      	movs	r0, r3
 800990e:	f000 f949 	bl	8009ba4 <makeTime>
 8009912:	0003      	movs	r3, r0
}
 8009914:	0018      	movs	r0, r3
 8009916:	46bd      	mov	sp, r7
 8009918:	b006      	add	sp, #24
 800991a:	bd80      	pop	{r7, pc}

0800991c <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800991e:	b08d      	sub	sp, #52	@ 0x34
 8009920:	af04      	add	r7, sp, #16
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8009926:	240c      	movs	r4, #12
 8009928:	193a      	adds	r2, r7, r4
 800992a:	2508      	movs	r5, #8
 800992c:	1979      	adds	r1, r7, r5
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	0018      	movs	r0, r3
 8009932:	f000 fa01 	bl	8009d38 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009936:	002a      	movs	r2, r5
 8009938:	18bb      	adds	r3, r7, r2
 800993a:	789b      	ldrb	r3, [r3, #2]
 800993c:	001e      	movs	r6, r3
 800993e:	18bb      	adds	r3, r7, r2
 8009940:	785b      	ldrb	r3, [r3, #1]
 8009942:	469c      	mov	ip, r3
 8009944:	18bb      	adds	r3, r7, r2
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800994a:	0021      	movs	r1, r4
 800994c:	187b      	adds	r3, r7, r1
 800994e:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009950:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009952:	187b      	adds	r3, r7, r1
 8009954:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8009956:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8009958:	187b      	adds	r3, r7, r1
 800995a:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800995c:	4906      	ldr	r1, [pc, #24]	@ (8009978 <getUTCfromPosixTime+0x5c>)
 800995e:	6838      	ldr	r0, [r7, #0]
 8009960:	9303      	str	r3, [sp, #12]
 8009962:	9502      	str	r5, [sp, #8]
 8009964:	9401      	str	r4, [sp, #4]
 8009966:	9200      	str	r2, [sp, #0]
 8009968:	4663      	mov	r3, ip
 800996a:	0032      	movs	r2, r6
 800996c:	f01b fd3e 	bl	80253ec <siprintf>
}
 8009970:	46c0      	nop			@ (mov r8, r8)
 8009972:	46bd      	mov	sp, r7
 8009974:	b009      	add	sp, #36	@ 0x24
 8009976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009978:	0802b6cc 	.word	0x0802b6cc

0800997c <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8009984:	4b10      	ldr	r3, [pc, #64]	@ (80099c8 <RTC_SetWakeUpTimer+0x4c>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	0018      	movs	r0, r3
 800998a:	f012 f8c9 	bl	801bb20 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800998e:	4b0e      	ldr	r3, [pc, #56]	@ (80099c8 <RTC_SetWakeUpTimer+0x4c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	22ff      	movs	r2, #255	@ 0xff
 8009998:	401a      	ands	r2, r3
 800999a:	4b0b      	ldr	r3, [pc, #44]	@ (80099c8 <RTC_SetWakeUpTimer+0x4c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	490a      	ldr	r1, [pc, #40]	@ (80099cc <RTC_SetWakeUpTimer+0x50>)
 80099a2:	430a      	orrs	r2, r1
 80099a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80099a6:	4b0a      	ldr	r3, [pc, #40]	@ (80099d0 <RTC_SetWakeUpTimer+0x54>)
 80099a8:	2280      	movs	r2, #128	@ 0x80
 80099aa:	0352      	lsls	r2, r2, #13
 80099ac:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80099ae:	4b06      	ldr	r3, [pc, #24]	@ (80099c8 <RTC_SetWakeUpTimer+0x4c>)
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	2204      	movs	r2, #4
 80099b8:	0019      	movs	r1, r3
 80099ba:	f011 ffd9 	bl	801b970 <HAL_RTCEx_SetWakeUpTimer_IT>
}
 80099be:	46c0      	nop			@ (mov r8, r8)
 80099c0:	46bd      	mov	sp, r7
 80099c2:	b002      	add	sp, #8
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	20000b6c 	.word	0x20000b6c
 80099cc:	fffffb7f 	.word	0xfffffb7f
 80099d0:	40010400 	.word	0x40010400

080099d4 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 80099d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009a08 <Enter_Standby_Mode+0x34>)
 80099da:	4b0c      	ldr	r3, [pc, #48]	@ (8009a0c <Enter_Standby_Mode+0x38>)
 80099dc:	0019      	movs	r1, r3
 80099de:	2003      	movs	r0, #3
 80099e0:	f009 fb98 	bl	8013114 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 80099e4:	2064      	movs	r0, #100	@ 0x64
 80099e6:	f00a f8df 	bl	8013ba8 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80099ea:	4b09      	ldr	r3, [pc, #36]	@ (8009a10 <Enter_Standby_Mode+0x3c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	0018      	movs	r0, r3
 80099f0:	f012 f896 	bl	801bb20 <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 80099f4:	f002 f942 	bl	800bc7c <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 80099f8:	f00a f8fa 	bl	8013bf0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 80099fc:	f010 fcf0 	bl	801a3e0 <HAL_PWR_EnterSTANDBYMode>
}
 8009a00:	46c0      	nop			@ (mov r8, r8)
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	46c0      	nop			@ (mov r8, r8)
 8009a08:	0802b720 	.word	0x0802b720
 8009a0c:	0802b608 	.word	0x0802b608
 8009a10:	20000b6c 	.word	0x20000b6c

08009a14 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af02      	add	r7, sp, #8
 8009a1a:	0002      	movs	r2, r0
 8009a1c:	1dbb      	adds	r3, r7, #6
 8009a1e:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8009a20:	4b4e      	ldr	r3, [pc, #312]	@ (8009b5c <Enter_Stop_Mode+0x148>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8009a28:	f004 f880 	bl	800db2c <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8009a2c:	f7ff fbb0 	bl	8009190 <ReadBatteryVoltage>
 8009a30:	1c03      	adds	r3, r0, #0
 8009a32:	1c18      	adds	r0, r3, #0
 8009a34:	f7f9 ff2e 	bl	8003894 <__aeabi_f2d>
 8009a38:	0002      	movs	r2, r0
 8009a3a:	000b      	movs	r3, r1
 8009a3c:	4848      	ldr	r0, [pc, #288]	@ (8009b60 <Enter_Stop_Mode+0x14c>)
 8009a3e:	4949      	ldr	r1, [pc, #292]	@ (8009b64 <Enter_Stop_Mode+0x150>)
 8009a40:	9200      	str	r2, [sp, #0]
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	0002      	movs	r2, r0
 8009a46:	2002      	movs	r0, #2
 8009a48:	f009 fb64 	bl	8013114 <CreateLine>
  powerDisplay(powerCheck());
 8009a4c:	f008 fbdc 	bl	8012208 <powerCheck>
 8009a50:	0003      	movs	r3, r0
 8009a52:	0018      	movs	r0, r3
 8009a54:	f008 fbf4 	bl	8012240 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8009a58:	1dbb      	adds	r3, r7, #6
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	4a42      	ldr	r2, [pc, #264]	@ (8009b68 <Enter_Stop_Mode+0x154>)
 8009a5e:	4943      	ldr	r1, [pc, #268]	@ (8009b6c <Enter_Stop_Mode+0x158>)
 8009a60:	2003      	movs	r0, #3
 8009a62:	f009 fb57 	bl	8013114 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8009a66:	f7ff ff45 	bl	80098f4 <getPosixTime>
 8009a6a:	0002      	movs	r2, r0
 8009a6c:	1dbb      	adds	r3, r7, #6
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	18d3      	adds	r3, r2, r3
 8009a72:	4a3f      	ldr	r2, [pc, #252]	@ (8009b70 <Enter_Stop_Mode+0x15c>)
 8009a74:	0011      	movs	r1, r2
 8009a76:	0018      	movs	r0, r3
 8009a78:	f7ff ff50 	bl	800991c <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8009a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8009b70 <Enter_Stop_Mode+0x15c>)
 8009a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8009b74 <Enter_Stop_Mode+0x160>)
 8009a80:	4938      	ldr	r1, [pc, #224]	@ (8009b64 <Enter_Stop_Mode+0x150>)
 8009a82:	2002      	movs	r0, #2
 8009a84:	f009 fb46 	bl	8013114 <CreateLine>
  HAL_Delay(100);
 8009a88:	2064      	movs	r0, #100	@ 0x64
 8009a8a:	f00a f88d 	bl	8013ba8 <HAL_Delay>
  HAL_SuspendTick();
 8009a8e:	f00a f8af 	bl	8013bf0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8009a92:	1dbb      	adds	r3, r7, #6
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7ff ff70 	bl	800997c <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	2001      	movs	r0, #1
 8009aa0:	f010 fc42 	bl	801a328 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8009aa4:	f002 fd84 	bl	800c5b0 <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8009aa8:	f00a f8b0 	bl	8013c0c <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 8009aac:	1dbb      	adds	r3, r7, #6
 8009aae:	881b      	ldrh	r3, [r3, #0]
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f003 ffaf 	bl	800da14 <sen5x_enable>
 8009ab6:	1e03      	subs	r3, r0, #0
 8009ab8:	d01e      	beq.n	8009af8 <Enter_Stop_Mode+0xe4>
    showTime();
 8009aba:	f7ff fc4f 	bl	800935c <showTime>
    set_light_on_state();
 8009abe:	f004 fce9 	bl	800e494 <set_light_on_state>
    if (!userToggle) {
 8009ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8009b78 <Enter_Stop_Mode+0x164>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4053      	eors	r3, r2
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d013      	beq.n	8009af8 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 8009ad0:	201c      	movs	r0, #28
 8009ad2:	f7ff ff53 	bl	800997c <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8009ad6:	4a24      	ldr	r2, [pc, #144]	@ (8009b68 <Enter_Stop_Mode+0x154>)
 8009ad8:	4924      	ldr	r1, [pc, #144]	@ (8009b6c <Enter_Stop_Mode+0x158>)
 8009ada:	231c      	movs	r3, #28
 8009adc:	2003      	movs	r0, #3
 8009ade:	f009 fb19 	bl	8013114 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	2001      	movs	r0, #1
 8009ae6:	f010 fc1f 	bl	801a328 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8009aea:	f002 fd61 	bl	800c5b0 <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 8009aee:	f00a f88d 	bl	8013c0c <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 8009af2:	2000      	movs	r0, #0
 8009af4:	f003 ff6c 	bl	800d9d0 <setsen5xReadTimer>
    }
  }
  showTime();
 8009af8:	f7ff fc30 	bl	800935c <showTime>
  EnabledConnectedDevices();
 8009afc:	f003 fb06 	bl	800d10c <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 8009b00:	f003 fc00 	bl	800d304 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8009b04:	f006 fb3e 	bl	8010184 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 8009b08:	f7fa f818 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f003 ff71 	bl	800d9f4 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 8009b12:	4b1a      	ldr	r3, [pc, #104]	@ (8009b7c <Enter_Stop_Mode+0x168>)
 8009b14:	0018      	movs	r0, r3
 8009b16:	f7fa feef 	bl	80048f8 <setESPTimeStamp>
  setSGP40TimeStamp(30);
 8009b1a:	201e      	movs	r0, #30
 8009b1c:	f006 fb20 	bl	8010160 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 8009b20:	205a      	movs	r0, #90	@ 0x5a
 8009b22:	f009 fd55 	bl	80135d0 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 8009b26:	203c      	movs	r0, #60	@ 0x3c
 8009b28:	f000 fb98 	bl	800a25c <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 8009b2c:	205a      	movs	r0, #90	@ 0x5a
 8009b2e:	f000 ff3f 	bl	800a9b0 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 8009b32:	2000      	movs	r0, #0
 8009b34:	f7fa f80c 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 8009b38:	2000      	movs	r0, #0
 8009b3a:	f003 fbd1 	bl	800d2e0 <setMICTimeStamp>
  ESPTransmitDone = false;
 8009b3e:	4b10      	ldr	r3, [pc, #64]	@ (8009b80 <Enter_Stop_Mode+0x16c>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 8009b44:	f00a f826 	bl	8013b94 <HAL_GetTick>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b7c <Enter_Stop_Mode+0x168>)
 8009b4c:	189a      	adds	r2, r3, r2
 8009b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b84 <Enter_Stop_Mode+0x170>)
 8009b50:	601a      	str	r2, [r3, #0]
}
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b002      	add	sp, #8
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	20000ed1 	.word	0x20000ed1
 8009b60:	0802b744 	.word	0x0802b744
 8009b64:	0802b75c 	.word	0x0802b75c
 8009b68:	0802b760 	.word	0x0802b760
 8009b6c:	0802b608 	.word	0x0802b608
 8009b70:	20000b74 	.word	0x20000b74
 8009b74:	0802b784 	.word	0x0802b784
 8009b78:	20001e62 	.word	0x20001e62
 8009b7c:	00001194 	.word	0x00001194
 8009b80:	200005a8 	.word	0x200005a8
 8009b84:	20000e28 	.word	0x20000e28

08009b88 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8009b90:	4b03      	ldr	r3, [pc, #12]	@ (8009ba0 <InitClock+0x18>)
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	601a      	str	r2, [r3, #0]
}
 8009b96:	46c0      	nop			@ (mov r8, r8)
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	b002      	add	sp, #8
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	46c0      	nop			@ (mov r8, r8)
 8009ba0:	20000b6c 	.word	0x20000b6c

08009ba4 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	78db      	ldrb	r3, [r3, #3]
 8009bb2:	001a      	movs	r2, r3
 8009bb4:	0013      	movs	r3, r2
 8009bb6:	025b      	lsls	r3, r3, #9
 8009bb8:	189b      	adds	r3, r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	189b      	adds	r3, r3, r2
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	011a      	lsls	r2, r3, #4
 8009bc4:	1ad2      	subs	r2, r2, r3
 8009bc6:	01d3      	lsls	r3, r2, #7
 8009bc8:	001a      	movs	r2, r3
 8009bca:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]
 8009bd0:	e028      	b.n	8009c24 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	4a53      	ldr	r2, [pc, #332]	@ (8009d24 <makeTime+0x180>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	db21      	blt.n	8009c1e <makeTime+0x7a>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a52      	ldr	r2, [pc, #328]	@ (8009d28 <makeTime+0x184>)
 8009bde:	4694      	mov	ip, r2
 8009be0:	4463      	add	r3, ip
 8009be2:	001a      	movs	r2, r3
 8009be4:	2303      	movs	r3, #3
 8009be6:	4013      	ands	r3, r2
 8009be8:	d119      	bne.n	8009c1e <makeTime+0x7a>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	4a4e      	ldr	r2, [pc, #312]	@ (8009d28 <makeTime+0x184>)
 8009bee:	4694      	mov	ip, r2
 8009bf0:	4463      	add	r3, ip
 8009bf2:	2164      	movs	r1, #100	@ 0x64
 8009bf4:	0018      	movs	r0, r3
 8009bf6:	f7f6 fc45 	bl	8000484 <__aeabi_idivmod>
 8009bfa:	1e0b      	subs	r3, r1, #0
 8009bfc:	d10a      	bne.n	8009c14 <makeTime+0x70>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	4a49      	ldr	r2, [pc, #292]	@ (8009d28 <makeTime+0x184>)
 8009c02:	4694      	mov	ip, r2
 8009c04:	4463      	add	r3, ip
 8009c06:	22c8      	movs	r2, #200	@ 0xc8
 8009c08:	0051      	lsls	r1, r2, #1
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	f7f6 fc3a 	bl	8000484 <__aeabi_idivmod>
 8009c10:	1e0b      	subs	r3, r1, #0
 8009c12:	d104      	bne.n	8009c1e <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4a45      	ldr	r2, [pc, #276]	@ (8009d2c <makeTime+0x188>)
 8009c18:	4694      	mov	ip, r2
 8009c1a:	4463      	add	r3, ip
 8009c1c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	78db      	ldrb	r3, [r3, #3]
 8009c28:	001a      	movs	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	dbd0      	blt.n	8009bd2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8009c30:	2301      	movs	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	e03c      	b.n	8009cb0 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d125      	bne.n	8009c88 <makeTime+0xe4>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	78db      	ldrb	r3, [r3, #3]
 8009c40:	4a39      	ldr	r2, [pc, #228]	@ (8009d28 <makeTime+0x184>)
 8009c42:	4694      	mov	ip, r2
 8009c44:	4463      	add	r3, ip
 8009c46:	001a      	movs	r2, r3
 8009c48:	2303      	movs	r3, #3
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	d11c      	bne.n	8009c88 <makeTime+0xe4>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	78db      	ldrb	r3, [r3, #3]
 8009c52:	4a35      	ldr	r2, [pc, #212]	@ (8009d28 <makeTime+0x184>)
 8009c54:	4694      	mov	ip, r2
 8009c56:	4463      	add	r3, ip
 8009c58:	2164      	movs	r1, #100	@ 0x64
 8009c5a:	0018      	movs	r0, r3
 8009c5c:	f7f6 fc12 	bl	8000484 <__aeabi_idivmod>
 8009c60:	1e0b      	subs	r3, r1, #0
 8009c62:	d10b      	bne.n	8009c7c <makeTime+0xd8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	78db      	ldrb	r3, [r3, #3]
 8009c68:	4a2f      	ldr	r2, [pc, #188]	@ (8009d28 <makeTime+0x184>)
 8009c6a:	4694      	mov	ip, r2
 8009c6c:	4463      	add	r3, ip
 8009c6e:	22c8      	movs	r2, #200	@ 0xc8
 8009c70:	0051      	lsls	r1, r2, #1
 8009c72:	0018      	movs	r0, r3
 8009c74:	f7f6 fc06 	bl	8000484 <__aeabi_idivmod>
 8009c78:	1e0b      	subs	r3, r1, #0
 8009c7a:	d105      	bne.n	8009c88 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8009d30 <makeTime+0x18c>)
 8009c80:	4694      	mov	ip, r2
 8009c82:	4463      	add	r3, ip
 8009c84:	60bb      	str	r3, [r7, #8]
 8009c86:	e010      	b.n	8009caa <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	4a29      	ldr	r2, [pc, #164]	@ (8009d34 <makeTime+0x190>)
 8009c8e:	5cd3      	ldrb	r3, [r2, r3]
 8009c90:	001a      	movs	r2, r3
 8009c92:	0013      	movs	r3, r2
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	189b      	adds	r3, r3, r2
 8009c98:	011a      	lsls	r2, r3, #4
 8009c9a:	1ad2      	subs	r2, r2, r3
 8009c9c:	0113      	lsls	r3, r2, #4
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	01db      	lsls	r3, r3, #7
 8009ca2:	001a      	movs	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	001a      	movs	r2, r3
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	dbbc      	blt.n	8009c36 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	789b      	ldrb	r3, [r3, #2]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	001a      	movs	r2, r3
 8009cc4:	0013      	movs	r3, r2
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	189b      	adds	r3, r3, r2
 8009cca:	011a      	lsls	r2, r3, #4
 8009ccc:	1ad2      	subs	r2, r2, r3
 8009cce:	0113      	lsls	r3, r2, #4
 8009cd0:	1a9b      	subs	r3, r3, r2
 8009cd2:	01db      	lsls	r3, r3, #7
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	189b      	adds	r3, r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	001a      	movs	r2, r3
 8009ce2:	0013      	movs	r3, r2
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	1a9b      	subs	r3, r3, r2
 8009ce8:	011a      	lsls	r2, r3, #4
 8009cea:	1ad2      	subs	r2, r2, r3
 8009cec:	0113      	lsls	r3, r2, #4
 8009cee:	001a      	movs	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	189b      	adds	r3, r3, r2
 8009cf4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	001a      	movs	r2, r3
 8009cfc:	0013      	movs	r3, r2
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	1a9b      	subs	r3, r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	001a      	movs	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	189b      	adds	r3, r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	789b      	ldrb	r3, [r3, #2]
 8009d10:	001a      	movs	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	60bb      	str	r3, [r7, #8]
  return seconds;
 8009d18:	68bb      	ldr	r3, [r7, #8]
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b004      	add	sp, #16
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	fffff84f 	.word	0xfffff84f
 8009d28:	000007b2 	.word	0x000007b2
 8009d2c:	00015180 	.word	0x00015180
 8009d30:	00263b80 	.word	0x00263b80
 8009d34:	0802d8c4 	.word	0x0802d8c4

08009d38 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b089      	sub	sp, #36	@ 0x24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	213c      	movs	r1, #60	@ 0x3c
 8009d4c:	0018      	movs	r0, r3
 8009d4e:	f7f6 faaf 	bl	80002b0 <__aeabi_uidivmod>
 8009d52:	000b      	movs	r3, r1
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	213c      	movs	r1, #60	@ 0x3c
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7f6 fa20 	bl	80001a4 <__udivsi3>
 8009d64:	0003      	movs	r3, r0
 8009d66:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	213c      	movs	r1, #60	@ 0x3c
 8009d6c:	0018      	movs	r0, r3
 8009d6e:	f7f6 fa9f 	bl	80002b0 <__aeabi_uidivmod>
 8009d72:	000b      	movs	r3, r1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	213c      	movs	r1, #60	@ 0x3c
 8009d7e:	0018      	movs	r0, r3
 8009d80:	f7f6 fa10 	bl	80001a4 <__udivsi3>
 8009d84:	0003      	movs	r3, r0
 8009d86:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	2118      	movs	r1, #24
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f7f6 fa8f 	bl	80002b0 <__aeabi_uidivmod>
 8009d92:	000b      	movs	r3, r1
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2118      	movs	r1, #24
 8009d9e:	0018      	movs	r0, r3
 8009da0:	f7f6 fa00 	bl	80001a4 <__udivsi3>
 8009da4:	0003      	movs	r3, r0
 8009da6:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2107      	movs	r1, #7
 8009dae:	0018      	movs	r0, r3
 8009db0:	f7f6 fa7e 	bl	80002b0 <__aeabi_uidivmod>
 8009db4:	000b      	movs	r3, r1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	3301      	adds	r3, #1
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	701a      	strb	r2, [r3, #0]
  year = 0;
 8009dc0:	231f      	movs	r3, #31
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	701a      	strb	r2, [r3, #0]
  days = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009dcc:	e005      	b.n	8009dda <breakPosixTime+0xa2>
    year++;
 8009dce:	211f      	movs	r1, #31
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	781a      	ldrb	r2, [r3, #0]
 8009dd4:	187b      	adds	r3, r7, r1
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8009dda:	241f      	movs	r4, #31
 8009ddc:	193b      	adds	r3, r7, r4
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	4a64      	ldr	r2, [pc, #400]	@ (8009f74 <breakPosixTime+0x23c>)
 8009de2:	4694      	mov	ip, r2
 8009de4:	4463      	add	r3, ip
 8009de6:	001a      	movs	r2, r3
 8009de8:	2303      	movs	r3, #3
 8009dea:	4013      	ands	r3, r2
 8009dec:	d119      	bne.n	8009e22 <breakPosixTime+0xea>
 8009dee:	193b      	adds	r3, r7, r4
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4a60      	ldr	r2, [pc, #384]	@ (8009f74 <breakPosixTime+0x23c>)
 8009df4:	4694      	mov	ip, r2
 8009df6:	4463      	add	r3, ip
 8009df8:	2164      	movs	r1, #100	@ 0x64
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	f7f6 fb42 	bl	8000484 <__aeabi_idivmod>
 8009e00:	1e0b      	subs	r3, r1, #0
 8009e02:	d10b      	bne.n	8009e1c <breakPosixTime+0xe4>
 8009e04:	193b      	adds	r3, r7, r4
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	4a5a      	ldr	r2, [pc, #360]	@ (8009f74 <breakPosixTime+0x23c>)
 8009e0a:	4694      	mov	ip, r2
 8009e0c:	4463      	add	r3, ip
 8009e0e:	22c8      	movs	r2, #200	@ 0xc8
 8009e10:	0051      	lsls	r1, r2, #1
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7f6 fb36 	bl	8000484 <__aeabi_idivmod>
 8009e18:	1e0b      	subs	r3, r1, #0
 8009e1a:	d102      	bne.n	8009e22 <breakPosixTime+0xea>
 8009e1c:	23b7      	movs	r3, #183	@ 0xb7
 8009e1e:	005b      	lsls	r3, r3, #1
 8009e20:	e001      	b.n	8009e26 <breakPosixTime+0xee>
 8009e22:	236e      	movs	r3, #110	@ 0x6e
 8009e24:	33ff      	adds	r3, #255	@ 0xff
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	18d3      	adds	r3, r2, r3
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	697a      	ldr	r2, [r7, #20]
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d9cc      	bls.n	8009dce <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	241f      	movs	r4, #31
 8009e38:	193a      	adds	r2, r7, r4
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8009e3e:	193b      	adds	r3, r7, r4
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	4a4c      	ldr	r2, [pc, #304]	@ (8009f74 <breakPosixTime+0x23c>)
 8009e44:	4694      	mov	ip, r2
 8009e46:	4463      	add	r3, ip
 8009e48:	001a      	movs	r2, r3
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	d119      	bne.n	8009e84 <breakPosixTime+0x14c>
 8009e50:	193b      	adds	r3, r7, r4
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	4a47      	ldr	r2, [pc, #284]	@ (8009f74 <breakPosixTime+0x23c>)
 8009e56:	4694      	mov	ip, r2
 8009e58:	4463      	add	r3, ip
 8009e5a:	2164      	movs	r1, #100	@ 0x64
 8009e5c:	0018      	movs	r0, r3
 8009e5e:	f7f6 fb11 	bl	8000484 <__aeabi_idivmod>
 8009e62:	1e0b      	subs	r3, r1, #0
 8009e64:	d10b      	bne.n	8009e7e <breakPosixTime+0x146>
 8009e66:	193b      	adds	r3, r7, r4
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	4a42      	ldr	r2, [pc, #264]	@ (8009f74 <breakPosixTime+0x23c>)
 8009e6c:	4694      	mov	ip, r2
 8009e6e:	4463      	add	r3, ip
 8009e70:	22c8      	movs	r2, #200	@ 0xc8
 8009e72:	0051      	lsls	r1, r2, #1
 8009e74:	0018      	movs	r0, r3
 8009e76:	f7f6 fb05 	bl	8000484 <__aeabi_idivmod>
 8009e7a:	1e0b      	subs	r3, r1, #0
 8009e7c:	d102      	bne.n	8009e84 <breakPosixTime+0x14c>
 8009e7e:	23b7      	movs	r3, #183	@ 0xb7
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	e001      	b.n	8009e88 <breakPosixTime+0x150>
 8009e84:	236e      	movs	r3, #110	@ 0x6e
 8009e86:	33ff      	adds	r3, #255	@ 0xff
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	61bb      	str	r3, [r7, #24]

  days=0;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  month=0;
 8009e9a:	211e      	movs	r1, #30
 8009e9c:	187b      	adds	r3, r7, r1
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8009ea2:	231d      	movs	r3, #29
 8009ea4:	18fb      	adds	r3, r7, r3
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8009eaa:	187b      	adds	r3, r7, r1
 8009eac:	2200      	movs	r2, #0
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	e048      	b.n	8009f44 <breakPosixTime+0x20c>
    if (month==1) { // february
 8009eb2:	231e      	movs	r3, #30
 8009eb4:	18fb      	adds	r3, r7, r3
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d12a      	bne.n	8009f12 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8009ebc:	241f      	movs	r4, #31
 8009ebe:	193b      	adds	r3, r7, r4
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8009f74 <breakPosixTime+0x23c>)
 8009ec4:	4694      	mov	ip, r2
 8009ec6:	4463      	add	r3, ip
 8009ec8:	001a      	movs	r2, r3
 8009eca:	2303      	movs	r3, #3
 8009ecc:	4013      	ands	r3, r2
 8009ece:	d11b      	bne.n	8009f08 <breakPosixTime+0x1d0>
 8009ed0:	193b      	adds	r3, r7, r4
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	4a27      	ldr	r2, [pc, #156]	@ (8009f74 <breakPosixTime+0x23c>)
 8009ed6:	4694      	mov	ip, r2
 8009ed8:	4463      	add	r3, ip
 8009eda:	2164      	movs	r1, #100	@ 0x64
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7f6 fad1 	bl	8000484 <__aeabi_idivmod>
 8009ee2:	1e0b      	subs	r3, r1, #0
 8009ee4:	d10b      	bne.n	8009efe <breakPosixTime+0x1c6>
 8009ee6:	193b      	adds	r3, r7, r4
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	4a22      	ldr	r2, [pc, #136]	@ (8009f74 <breakPosixTime+0x23c>)
 8009eec:	4694      	mov	ip, r2
 8009eee:	4463      	add	r3, ip
 8009ef0:	22c8      	movs	r2, #200	@ 0xc8
 8009ef2:	0051      	lsls	r1, r2, #1
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f7f6 fac5 	bl	8000484 <__aeabi_idivmod>
 8009efa:	1e0b      	subs	r3, r1, #0
 8009efc:	d104      	bne.n	8009f08 <breakPosixTime+0x1d0>
        monthLength=29;
 8009efe:	231d      	movs	r3, #29
 8009f00:	18fb      	adds	r3, r7, r3
 8009f02:	221d      	movs	r2, #29
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	e00c      	b.n	8009f22 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8009f08:	231d      	movs	r3, #29
 8009f0a:	18fb      	adds	r3, r7, r3
 8009f0c:	221c      	movs	r2, #28
 8009f0e:	701a      	strb	r2, [r3, #0]
 8009f10:	e007      	b.n	8009f22 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8009f12:	231e      	movs	r3, #30
 8009f14:	18fb      	adds	r3, r7, r3
 8009f16:	781a      	ldrb	r2, [r3, #0]
 8009f18:	231d      	movs	r3, #29
 8009f1a:	18fb      	adds	r3, r7, r3
 8009f1c:	4916      	ldr	r1, [pc, #88]	@ (8009f78 <breakPosixTime+0x240>)
 8009f1e:	5c8a      	ldrb	r2, [r1, r2]
 8009f20:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8009f22:	211d      	movs	r1, #29
 8009f24:	187b      	adds	r3, r7, r1
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	69ba      	ldr	r2, [r7, #24]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d310      	bcc.n	8009f50 <breakPosixTime+0x218>
      time -= monthLength;
 8009f2e:	187b      	adds	r3, r7, r1
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8009f38:	211e      	movs	r1, #30
 8009f3a:	187b      	adds	r3, r7, r1
 8009f3c:	781a      	ldrb	r2, [r3, #0]
 8009f3e:	187b      	adds	r3, r7, r1
 8009f40:	3201      	adds	r2, #1
 8009f42:	701a      	strb	r2, [r3, #0]
 8009f44:	231e      	movs	r3, #30
 8009f46:	18fb      	adds	r3, r7, r3
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b0b      	cmp	r3, #11
 8009f4c:	d9b1      	bls.n	8009eb2 <breakPosixTime+0x17a>
 8009f4e:	e000      	b.n	8009f52 <breakPosixTime+0x21a>
    } else {
        break;
 8009f50:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8009f52:	231e      	movs	r3, #30
 8009f54:	18fb      	adds	r3, r7, r3
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	3301      	adds	r3, #1
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	709a      	strb	r2, [r3, #2]
}
 8009f6c:	46c0      	nop			@ (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b009      	add	sp, #36	@ 0x24
 8009f72:	bd90      	pop	{r4, r7, pc}
 8009f74:	000007b2 	.word	0x000007b2
 8009f78:	0802d8c4 	.word	0x0802d8c4

08009f7c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009f82:	003b      	movs	r3, r7
 8009f84:	0018      	movs	r0, r3
 8009f86:	2308      	movs	r3, #8
 8009f88:	001a      	movs	r2, r3
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f01b fb98 	bl	80256c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8009f90:	4b30      	ldr	r3, [pc, #192]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009f92:	4a31      	ldr	r2, [pc, #196]	@ (800a058 <MX_ADC_Init+0xdc>)
 8009f94:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8009f96:	4b2f      	ldr	r3, [pc, #188]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8009f9c:	4b2d      	ldr	r3, [pc, #180]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009f9e:	22c0      	movs	r2, #192	@ 0xc0
 8009fa0:	0612      	lsls	r2, r2, #24
 8009fa2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8009fa4:	4b2b      	ldr	r3, [pc, #172]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8009faa:	4b2a      	ldr	r3, [pc, #168]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8009fb0:	4b28      	ldr	r3, [pc, #160]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009fb6:	4b27      	ldr	r3, [pc, #156]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8009fbc:	4b25      	ldr	r3, [pc, #148]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8009fc4:	4b23      	ldr	r3, [pc, #140]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fc6:	2221      	movs	r2, #33	@ 0x21
 8009fc8:	2101      	movs	r1, #1
 8009fca:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009fcc:	4b21      	ldr	r3, [pc, #132]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009fd2:	4b20      	ldr	r3, [pc, #128]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fd4:	22c2      	movs	r2, #194	@ 0xc2
 8009fd6:	32ff      	adds	r2, #255	@ 0xff
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8009fda:	4b1e      	ldr	r3, [pc, #120]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fdc:	222c      	movs	r2, #44	@ 0x2c
 8009fde:	2100      	movs	r1, #0
 8009fe0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009fe2:	4b1c      	ldr	r3, [pc, #112]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fe4:	2204      	movs	r2, #4
 8009fe6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009fe8:	4b1a      	ldr	r3, [pc, #104]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8009fee:	4b19      	ldr	r3, [pc, #100]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8009ff4:	4b17      	ldr	r3, [pc, #92]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8009ffa:	4b16      	ldr	r3, [pc, #88]	@ (800a054 <MX_ADC_Init+0xd8>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800a000:	4b14      	ldr	r3, [pc, #80]	@ (800a054 <MX_ADC_Init+0xd8>)
 800a002:	0018      	movs	r0, r3
 800a004:	f009 fe2e 	bl	8013c64 <HAL_ADC_Init>
 800a008:	1e03      	subs	r3, r0, #0
 800a00a:	d001      	beq.n	800a010 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800a00c:	f002 fc20 	bl	800c850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a010:	003b      	movs	r3, r7
 800a012:	4a12      	ldr	r2, [pc, #72]	@ (800a05c <MX_ADC_Init+0xe0>)
 800a014:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800a016:	003b      	movs	r3, r7
 800a018:	2280      	movs	r2, #128	@ 0x80
 800a01a:	0152      	lsls	r2, r2, #5
 800a01c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a01e:	003a      	movs	r2, r7
 800a020:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <MX_ADC_Init+0xd8>)
 800a022:	0011      	movs	r1, r2
 800a024:	0018      	movs	r0, r3
 800a026:	f00a f88d 	bl	8014144 <HAL_ADC_ConfigChannel>
 800a02a:	1e03      	subs	r3, r0, #0
 800a02c:	d001      	beq.n	800a032 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800a02e:	f002 fc0f 	bl	800c850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a032:	003b      	movs	r3, r7
 800a034:	4a0a      	ldr	r2, [pc, #40]	@ (800a060 <MX_ADC_Init+0xe4>)
 800a036:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800a038:	003a      	movs	r2, r7
 800a03a:	4b06      	ldr	r3, [pc, #24]	@ (800a054 <MX_ADC_Init+0xd8>)
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f00a f880 	bl	8014144 <HAL_ADC_ConfigChannel>
 800a044:	1e03      	subs	r3, r0, #0
 800a046:	d001      	beq.n	800a04c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800a048:	f002 fc02 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800a04c:	46c0      	nop			@ (mov r8, r8)
 800a04e:	46bd      	mov	sp, r7
 800a050:	b002      	add	sp, #8
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20000b8c 	.word	0x20000b8c
 800a058:	40012400 	.word	0x40012400
 800a05c:	38004000 	.word	0x38004000
 800a060:	3c008000 	.word	0x3c008000

0800a064 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b089      	sub	sp, #36	@ 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a06c:	240c      	movs	r4, #12
 800a06e:	193b      	adds	r3, r7, r4
 800a070:	0018      	movs	r0, r3
 800a072:	2314      	movs	r3, #20
 800a074:	001a      	movs	r2, r3
 800a076:	2100      	movs	r1, #0
 800a078:	f01b fb22 	bl	80256c0 <memset>
  if(adcHandle->Instance==ADC1)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a14      	ldr	r2, [pc, #80]	@ (800a0d4 <HAL_ADC_MspInit+0x70>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d121      	bne.n	800a0ca <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a086:	4b14      	ldr	r3, [pc, #80]	@ (800a0d8 <HAL_ADC_MspInit+0x74>)
 800a088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a08a:	4b13      	ldr	r3, [pc, #76]	@ (800a0d8 <HAL_ADC_MspInit+0x74>)
 800a08c:	2180      	movs	r1, #128	@ 0x80
 800a08e:	0089      	lsls	r1, r1, #2
 800a090:	430a      	orrs	r2, r1
 800a092:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a094:	4b10      	ldr	r3, [pc, #64]	@ (800a0d8 <HAL_ADC_MspInit+0x74>)
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4b0f      	ldr	r3, [pc, #60]	@ (800a0d8 <HAL_ADC_MspInit+0x74>)
 800a09a:	2104      	movs	r1, #4
 800a09c:	430a      	orrs	r2, r1
 800a09e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <HAL_ADC_MspInit+0x74>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	4013      	ands	r3, r2
 800a0a8:	60bb      	str	r3, [r7, #8]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800a0ac:	193b      	adds	r3, r7, r4
 800a0ae:	2230      	movs	r2, #48	@ 0x30
 800a0b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a0b2:	193b      	adds	r3, r7, r4
 800a0b4:	2203      	movs	r2, #3
 800a0b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b8:	193b      	adds	r3, r7, r4
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0be:	193b      	adds	r3, r7, r4
 800a0c0:	4a06      	ldr	r2, [pc, #24]	@ (800a0dc <HAL_ADC_MspInit+0x78>)
 800a0c2:	0019      	movs	r1, r3
 800a0c4:	0010      	movs	r0, r2
 800a0c6:	f00a fe5b 	bl	8014d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a0ca:	46c0      	nop			@ (mov r8, r8)
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	b009      	add	sp, #36	@ 0x24
 800a0d0:	bd90      	pop	{r4, r7, pc}
 800a0d2:	46c0      	nop			@ (mov r8, r8)
 800a0d4:	40012400 	.word	0x40012400
 800a0d8:	40021000 	.word	0x40021000
 800a0dc:	50000800 	.word	0x50000800

0800a0e0 <ReadDirRegister>:
static uint8_t AHTerrors = 0;
AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6039      	str	r1, [r7, #0]
 800a0e8:	0011      	movs	r1, r2
 800a0ea:	1dfb      	adds	r3, r7, #7
 800a0ec:	1c02      	adds	r2, r0, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	1dbb      	adds	r3, r7, #6
 800a0f2:	1c0a      	adds	r2, r1, #0
 800a0f4:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a120 <ReadDirRegister+0x40>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800a0fe:	4b08      	ldr	r3, [pc, #32]	@ (800a120 <ReadDirRegister+0x40>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	1dba      	adds	r2, r7, #6
 800a104:	7814      	ldrb	r4, [r2, #0]
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	1dfa      	adds	r2, r7, #7
 800a10a:	7810      	ldrb	r0, [r2, #0]
 800a10c:	0022      	movs	r2, r4
 800a10e:	4798      	blx	r3
 800a110:	0003      	movs	r3, r0
 800a112:	e000      	b.n	800a116 <ReadDirRegister+0x36>
  }
  return false;
 800a114:	2300      	movs	r3, #0
}
 800a116:	0018      	movs	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	b003      	add	sp, #12
 800a11c:	bd90      	pop	{r4, r7, pc}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	20000bf4 	.word	0x20000bf4

0800a124 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6039      	str	r1, [r7, #0]
 800a12c:	0011      	movs	r1, r2
 800a12e:	1dfb      	adds	r3, r7, #7
 800a130:	1c02      	adds	r2, r0, #0
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	1dbb      	adds	r3, r7, #6
 800a136:	1c0a      	adds	r2, r1, #0
 800a138:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a13a:	4b0a      	ldr	r3, [pc, #40]	@ (800a164 <ReadRegister+0x40>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800a142:	4b08      	ldr	r3, [pc, #32]	@ (800a164 <ReadRegister+0x40>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	1dba      	adds	r2, r7, #6
 800a148:	7814      	ldrb	r4, [r2, #0]
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	1dfa      	adds	r2, r7, #7
 800a14e:	7810      	ldrb	r0, [r2, #0]
 800a150:	0022      	movs	r2, r4
 800a152:	4798      	blx	r3
 800a154:	0003      	movs	r3, r0
 800a156:	e000      	b.n	800a15a <ReadRegister+0x36>
  }
  return false;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	0018      	movs	r0, r3
 800a15c:	46bd      	mov	sp, r7
 800a15e:	b003      	add	sp, #12
 800a160:	bd90      	pop	{r4, r7, pc}
 800a162:	46c0      	nop			@ (mov r8, r8)
 800a164:	20000bec 	.word	0x20000bec

0800a168 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6039      	str	r1, [r7, #0]
 800a170:	0011      	movs	r1, r2
 800a172:	1dfb      	adds	r3, r7, #7
 800a174:	1c02      	adds	r2, r0, #0
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	1dbb      	adds	r3, r7, #6
 800a17a:	1c0a      	adds	r2, r1, #0
 800a17c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a17e:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <WriteRegister+0x40>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800a186:	4b08      	ldr	r3, [pc, #32]	@ (800a1a8 <WriteRegister+0x40>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1dba      	adds	r2, r7, #6
 800a18c:	7814      	ldrb	r4, [r2, #0]
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	1dfa      	adds	r2, r7, #7
 800a192:	7810      	ldrb	r0, [r2, #0]
 800a194:	0022      	movs	r2, r4
 800a196:	4798      	blx	r3
 800a198:	0003      	movs	r3, r0
 800a19a:	e000      	b.n	800a19e <WriteRegister+0x36>
  }
  return false;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	0018      	movs	r0, r3
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b003      	add	sp, #12
 800a1a4:	bd90      	pop	{r4, r7, pc}
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	20000bf0 	.word	0x20000bf0

0800a1ac <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	000a      	movs	r2, r1
 800a1b6:	1cfb      	adds	r3, r7, #3
 800a1b8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800a1ba:	230f      	movs	r3, #15
 800a1bc:	18fb      	adds	r3, r7, r3
 800a1be:	22ff      	movs	r2, #255	@ 0xff
 800a1c0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800a1c2:	230e      	movs	r3, #14
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e038      	b.n	800a23e <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800a1cc:	230e      	movs	r3, #14
 800a1ce:	18fb      	adds	r3, r7, r3
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	18d3      	adds	r3, r2, r3
 800a1d6:	7819      	ldrb	r1, [r3, #0]
 800a1d8:	220f      	movs	r2, #15
 800a1da:	18bb      	adds	r3, r7, r2
 800a1dc:	18ba      	adds	r2, r7, r2
 800a1de:	7812      	ldrb	r2, [r2, #0]
 800a1e0:	404a      	eors	r2, r1
 800a1e2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800a1e4:	230d      	movs	r3, #13
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e01c      	b.n	800a228 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800a1ee:	210f      	movs	r1, #15
 800a1f0:	187b      	adds	r3, r7, r1
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	da0a      	bge.n	800a210 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800a1fa:	187b      	adds	r3, r7, r1
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	b25b      	sxtb	r3, r3
 800a200:	18db      	adds	r3, r3, r3
 800a202:	b25b      	sxtb	r3, r3
 800a204:	2231      	movs	r2, #49	@ 0x31
 800a206:	4053      	eors	r3, r2
 800a208:	b25a      	sxtb	r2, r3
 800a20a:	187b      	adds	r3, r7, r1
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	e005      	b.n	800a21c <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800a210:	230f      	movs	r3, #15
 800a212:	18fa      	adds	r2, r7, r3
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	18db      	adds	r3, r3, r3
 800a21a:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800a21c:	210d      	movs	r1, #13
 800a21e:	187b      	adds	r3, r7, r1
 800a220:	781a      	ldrb	r2, [r3, #0]
 800a222:	187b      	adds	r3, r7, r1
 800a224:	3201      	adds	r2, #1
 800a226:	701a      	strb	r2, [r3, #0]
 800a228:	230d      	movs	r3, #13
 800a22a:	18fb      	adds	r3, r7, r3
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b07      	cmp	r3, #7
 800a230:	d9dd      	bls.n	800a1ee <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800a232:	210e      	movs	r1, #14
 800a234:	187b      	adds	r3, r7, r1
 800a236:	781a      	ldrb	r2, [r3, #0]
 800a238:	187b      	adds	r3, r7, r1
 800a23a:	3201      	adds	r2, #1
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	230e      	movs	r3, #14
 800a240:	18fa      	adds	r2, r7, r3
 800a242:	1cfb      	adds	r3, r7, #3
 800a244:	7812      	ldrb	r2, [r2, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d3bf      	bcc.n	800a1cc <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800a24c:	230f      	movs	r3, #15
 800a24e:	18fb      	adds	r3, r7, r3
 800a250:	781b      	ldrb	r3, [r3, #0]
}
 800a252:	0018      	movs	r0, r3
 800a254:	46bd      	mov	sp, r7
 800a256:	b004      	add	sp, #16
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800a264:	f009 fc96 	bl	8013b94 <HAL_GetTick>
 800a268:	0002      	movs	r2, r0
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	18d2      	adds	r2, r2, r3
 800a26e:	4b03      	ldr	r3, [pc, #12]	@ (800a27c <setAHT20TimeStamp+0x20>)
 800a270:	601a      	str	r2, [r3, #0]
}
 800a272:	46c0      	nop			@ (mov r8, r8)
 800a274:	46bd      	mov	sp, r7
 800a276:	b002      	add	sp, #8
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	46c0      	nop			@ (mov r8, r8)
 800a27c:	20000be8 	.word	0x20000be8

0800a280 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800a28c:	4b06      	ldr	r3, [pc, #24]	@ (800a2a8 <AHT_Init+0x28>)
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800a292:	4b06      	ldr	r3, [pc, #24]	@ (800a2ac <AHT_Init+0x2c>)
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a298:	4b05      	ldr	r3, [pc, #20]	@ (800a2b0 <AHT_Init+0x30>)
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	601a      	str	r2, [r3, #0]
}
 800a29e:	46c0      	nop			@ (mov r8, r8)
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b004      	add	sp, #16
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	20000bf4 	.word	0x20000bf4
 800a2ac:	20000bec 	.word	0x20000bec
 800a2b0:	20000bf0 	.word	0x20000bf0

0800a2b4 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af02      	add	r7, sp, #8
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	1dfb      	adds	r3, r7, #7
 800a2be:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800a2c0:	4b18      	ldr	r3, [pc, #96]	@ (800a324 <AHT20_register_reset+0x70>)
 800a2c2:	1dfa      	adds	r2, r7, #7
 800a2c4:	7812      	ldrb	r2, [r2, #0]
 800a2c6:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800a2c8:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <AHT20_register_reset+0x70>)
 800a2ca:	2203      	movs	r2, #3
 800a2cc:	0019      	movs	r1, r3
 800a2ce:	2038      	movs	r0, #56	@ 0x38
 800a2d0:	f7ff ff4a 	bl	800a168 <WriteRegister>
  HAL_Delay(15);
 800a2d4:	200f      	movs	r0, #15
 800a2d6:	f009 fc67 	bl	8013ba8 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a2da:	4b13      	ldr	r3, [pc, #76]	@ (800a328 <AHT20_register_reset+0x74>)
 800a2dc:	2203      	movs	r2, #3
 800a2de:	0019      	movs	r1, r3
 800a2e0:	2038      	movs	r0, #56	@ 0x38
 800a2e2:	f7ff ff1f 	bl	800a124 <ReadRegister>
  HAL_Delay(15);
 800a2e6:	200f      	movs	r0, #15
 800a2e8:	f009 fc5e 	bl	8013ba8 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800a2ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a328 <AHT20_register_reset+0x74>)
 800a2ee:	22b0      	movs	r2, #176	@ 0xb0
 800a2f0:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800a2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a328 <AHT20_register_reset+0x74>)
 800a2f4:	789b      	ldrb	r3, [r3, #2]
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <AHT20_register_reset+0x74>)
 800a2fa:	78db      	ldrb	r3, [r3, #3]
 800a2fc:	4a0b      	ldr	r2, [pc, #44]	@ (800a32c <AHT20_register_reset+0x78>)
 800a2fe:	490c      	ldr	r1, [pc, #48]	@ (800a330 <AHT20_register_reset+0x7c>)
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	0003      	movs	r3, r0
 800a304:	2003      	movs	r0, #3
 800a306:	f008 ff05 	bl	8013114 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800a30a:	4b07      	ldr	r3, [pc, #28]	@ (800a328 <AHT20_register_reset+0x74>)
 800a30c:	2203      	movs	r2, #3
 800a30e:	0019      	movs	r1, r3
 800a310:	2038      	movs	r0, #56	@ 0x38
 800a312:	f7ff ff29 	bl	800a168 <WriteRegister>
  HAL_Delay(15);
 800a316:	200f      	movs	r0, #15
 800a318:	f009 fc46 	bl	8013ba8 <HAL_Delay>
}
 800a31c:	46c0      	nop			@ (mov r8, r8)
 800a31e:	46bd      	mov	sp, r7
 800a320:	b002      	add	sp, #8
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000090 	.word	0x20000090
 800a328:	20000bf8 	.word	0x20000bf8
 800a32c:	0802b7a4 	.word	0x0802b7a4
 800a330:	0802b7f4 	.word	0x0802b7f4

0800a334 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800a338:	201b      	movs	r0, #27
 800a33a:	f7ff ffbb 	bl	800a2b4 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800a33e:	201c      	movs	r0, #28
 800a340:	f7ff ffb8 	bl	800a2b4 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800a344:	201e      	movs	r0, #30
 800a346:	f7ff ffb5 	bl	800a2b4 <AHT20_register_reset>
}
 800a34a:	46c0      	nop			@ (mov r8, r8)
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a354:	4b0c      	ldr	r3, [pc, #48]	@ (800a388 <AHT20_read_status+0x38>)
 800a356:	2201      	movs	r2, #1
 800a358:	0019      	movs	r1, r3
 800a35a:	2038      	movs	r0, #56	@ 0x38
 800a35c:	f7ff ff04 	bl	800a168 <WriteRegister>
  HAL_Delay(10);
 800a360:	200a      	movs	r0, #10
 800a362:	f009 fc21 	bl	8013ba8 <HAL_Delay>
  airtemphumraw[0] = 0;
 800a366:	4b09      	ldr	r3, [pc, #36]	@ (800a38c <AHT20_read_status+0x3c>)
 800a368:	2200      	movs	r2, #0
 800a36a:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800a36c:	4b07      	ldr	r3, [pc, #28]	@ (800a38c <AHT20_read_status+0x3c>)
 800a36e:	2201      	movs	r2, #1
 800a370:	0019      	movs	r1, r3
 800a372:	2038      	movs	r0, #56	@ 0x38
 800a374:	f7ff fed6 	bl	800a124 <ReadRegister>
  HAL_Delay(10);
 800a378:	200a      	movs	r0, #10
 800a37a:	f009 fc15 	bl	8013ba8 <HAL_Delay>
  return airtemphumraw[0];
 800a37e:	4b03      	ldr	r3, [pc, #12]	@ (800a38c <AHT20_read_status+0x3c>)
 800a380:	781b      	ldrb	r3, [r3, #0]
}
 800a382:	0018      	movs	r0, r3
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	2000008c 	.word	0x2000008c
 800a38c:	20000bf8 	.word	0x20000bf8

0800a390 <AHT20_init>:

bool AHT20_init(void) {
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800a396:	f009 fbfd 	bl	8013b94 <HAL_GetTick>
 800a39a:	0003      	movs	r3, r0
 800a39c:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b77      	cmp	r3, #119	@ 0x77
 800a3a2:	d805      	bhi.n	800a3b0 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2278      	movs	r2, #120	@ 0x78
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	0018      	movs	r0, r3
 800a3ac:	f009 fbfc 	bl	8013ba8 <HAL_Delay>
  }
  AHT20_read_status();
 800a3b0:	f7ff ffce 	bl	800a350 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a3f0 <AHT20_init+0x60>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a3f4 <AHT20_init+0x64>)
 800a3ba:	490f      	ldr	r1, [pc, #60]	@ (800a3f8 <AHT20_init+0x68>)
 800a3bc:	2003      	movs	r0, #3
 800a3be:	f008 fea9 	bl	8013114 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800a3c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a3f0 <AHT20_init+0x60>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	2318      	movs	r3, #24
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b18      	cmp	r3, #24
 800a3ce:	d00a      	beq.n	800a3e6 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3fc <AHT20_init+0x6c>)
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	0019      	movs	r1, r3
 800a3d6:	2038      	movs	r0, #56	@ 0x38
 800a3d8:	f7ff fec6 	bl	800a168 <WriteRegister>
    HAL_Delay(10);
 800a3dc:	200a      	movs	r0, #10
 800a3de:	f009 fbe3 	bl	8013ba8 <HAL_Delay>
    AHT20_Start_Init();
 800a3e2:	f7ff ffa7 	bl	800a334 <AHT20_Start_Init>
  }
  return true;
 800a3e6:	2301      	movs	r3, #1
}
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000bf8 	.word	0x20000bf8
 800a3f4:	0802b7f8 	.word	0x0802b7f8
 800a3f8:	0802b7f4 	.word	0x0802b7f4
 800a3fc:	20000084 	.word	0x20000084

0800a400 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800a406:	1dfc      	adds	r4, r7, #7
 800a408:	4b10      	ldr	r3, [pc, #64]	@ (800a44c <AHT20_calibrate+0x4c>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	0019      	movs	r1, r3
 800a40e:	2038      	movs	r0, #56	@ 0x38
 800a410:	f7ff feaa 	bl	800a168 <WriteRegister>
 800a414:	0003      	movs	r3, r0
 800a416:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800a418:	1dfb      	adds	r3, r7, #7
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	2201      	movs	r2, #1
 800a41e:	4053      	eors	r3, r2
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800a426:	4a0a      	ldr	r2, [pc, #40]	@ (800a450 <AHT20_calibrate+0x50>)
 800a428:	4b0a      	ldr	r3, [pc, #40]	@ (800a454 <AHT20_calibrate+0x54>)
 800a42a:	0019      	movs	r1, r3
 800a42c:	2001      	movs	r0, #1
 800a42e:	f008 fe71 	bl	8013114 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800a432:	f009 fbaf 	bl	8013b94 <HAL_GetTick>
 800a436:	0003      	movs	r3, r0
 800a438:	3332      	adds	r3, #50	@ 0x32
 800a43a:	001a      	movs	r2, r3
 800a43c:	4b06      	ldr	r3, [pc, #24]	@ (800a458 <AHT20_calibrate+0x58>)
 800a43e:	601a      	str	r2, [r3, #0]
  return response;
 800a440:	1dfb      	adds	r3, r7, #7
 800a442:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800a444:	0018      	movs	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	b003      	add	sp, #12
 800a44a:	bd90      	pop	{r4, r7, pc}
 800a44c:	2000008c 	.word	0x2000008c
 800a450:	0802b820 	.word	0x0802b820
 800a454:	0802b858 	.word	0x0802b858
 800a458:	20000be8 	.word	0x20000be8

0800a45c <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800a460:	4a0a      	ldr	r2, [pc, #40]	@ (800a48c <AHT20_DeviceConnected+0x30>)
 800a462:	4b0b      	ldr	r3, [pc, #44]	@ (800a490 <AHT20_DeviceConnected+0x34>)
 800a464:	0019      	movs	r1, r3
 800a466:	2003      	movs	r0, #3
 800a468:	f008 fe54 	bl	8013114 <CreateLine>
   AHT20_init();
 800a46c:	f7ff ff90 	bl	800a390 <AHT20_init>
   HAL_Delay(10);
 800a470:	200a      	movs	r0, #10
 800a472:	f009 fb99 	bl	8013ba8 <HAL_Delay>
   AHT20_calibrate();
 800a476:	f7ff ffc3 	bl	800a400 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800a47a:	f7ff ff69 	bl	800a350 <AHT20_read_status>
 800a47e:	0003      	movs	r3, r0
 800a480:	1e5a      	subs	r2, r3, #1
 800a482:	4193      	sbcs	r3, r2
 800a484:	b2db      	uxtb	r3, r3
 }
 800a486:	0018      	movs	r0, r3
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	0802b85c 	.word	0x0802b85c
 800a490:	0802b7f4 	.word	0x0802b7f4

0800a494 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800a494:	b590      	push	{r4, r7, lr}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800a49a:	1dfc      	adds	r4, r7, #7
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <AHT20_StartMeasurement+0x4c>)
 800a49e:	2203      	movs	r2, #3
 800a4a0:	0019      	movs	r1, r3
 800a4a2:	2038      	movs	r0, #56	@ 0x38
 800a4a4:	f7ff fe60 	bl	800a168 <WriteRegister>
 800a4a8:	0003      	movs	r3, r0
 800a4aa:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800a4ac:	1dfb      	adds	r3, r7, #7
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	4053      	eors	r3, r2
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800a4ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e4 <AHT20_StartMeasurement+0x50>)
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <AHT20_StartMeasurement+0x54>)
 800a4be:	0019      	movs	r1, r3
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f008 fe27 	bl	8013114 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800a4c6:	f009 fb65 	bl	8013b94 <HAL_GetTick>
 800a4ca:	0003      	movs	r3, r0
 800a4cc:	33fa      	adds	r3, #250	@ 0xfa
 800a4ce:	001a      	movs	r2, r3
 800a4d0:	4b06      	ldr	r3, [pc, #24]	@ (800a4ec <AHT20_StartMeasurement+0x58>)
 800a4d2:	601a      	str	r2, [r3, #0]
  return response;
 800a4d4:	1dfb      	adds	r3, r7, #7
 800a4d6:	781b      	ldrb	r3, [r3, #0]
}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b003      	add	sp, #12
 800a4de:	bd90      	pop	{r4, r7, pc}
 800a4e0:	20000088 	.word	0x20000088
 800a4e4:	0802b874 	.word	0x0802b874
 800a4e8:	0802b858 	.word	0x0802b858
 800a4ec:	20000be8 	.word	0x20000be8

0800a4f0 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800a4f0:	b590      	push	{r4, r7, lr}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800a4f6:	f009 fb4d 	bl	8013b94 <HAL_GetTick>
 800a4fa:	0003      	movs	r3, r0
 800a4fc:	22fa      	movs	r2, #250	@ 0xfa
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	189a      	adds	r2, r3, r2
 800a502:	4b2c      	ldr	r3, [pc, #176]	@ (800a5b4 <AHT20_GetMeasurementValues+0xc4>)
 800a504:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a506:	e01f      	b.n	800a548 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800a508:	4a2b      	ldr	r2, [pc, #172]	@ (800a5b8 <AHT20_GetMeasurementValues+0xc8>)
 800a50a:	4b2c      	ldr	r3, [pc, #176]	@ (800a5bc <AHT20_GetMeasurementValues+0xcc>)
 800a50c:	0019      	movs	r1, r3
 800a50e:	2002      	movs	r0, #2
 800a510:	f008 fe00 	bl	8013114 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800a514:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <AHT20_GetMeasurementValues+0xc4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	0018      	movs	r0, r3
 800a51a:	f008 fda5 	bl	8013068 <TimestampIsReached>
 800a51e:	1e03      	subs	r3, r0, #0
 800a520:	d00f      	beq.n	800a542 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800a522:	4a27      	ldr	r2, [pc, #156]	@ (800a5c0 <AHT20_GetMeasurementValues+0xd0>)
 800a524:	4b27      	ldr	r3, [pc, #156]	@ (800a5c4 <AHT20_GetMeasurementValues+0xd4>)
 800a526:	0019      	movs	r1, r3
 800a528:	2001      	movs	r0, #1
 800a52a:	f008 fdf3 	bl	8013114 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800a52e:	f009 fb31 	bl	8013b94 <HAL_GetTick>
 800a532:	0003      	movs	r3, r0
 800a534:	22fa      	movs	r2, #250	@ 0xfa
 800a536:	00d2      	lsls	r2, r2, #3
 800a538:	189a      	adds	r2, r3, r2
 800a53a:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b4 <AHT20_GetMeasurementValues+0xc4>)
 800a53c:	601a      	str	r2, [r3, #0]
      return false;
 800a53e:	2300      	movs	r3, #0
 800a540:	e034      	b.n	800a5ac <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800a542:	200a      	movs	r0, #10
 800a544:	f009 fb30 	bl	8013ba8 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800a548:	f7ff ff02 	bl	800a350 <AHT20_read_status>
 800a54c:	0003      	movs	r3, r0
 800a54e:	001a      	movs	r2, r3
 800a550:	2380      	movs	r3, #128	@ 0x80
 800a552:	4013      	ands	r3, r2
 800a554:	2b80      	cmp	r3, #128	@ 0x80
 800a556:	d0d7      	beq.n	800a508 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800a558:	200a      	movs	r0, #10
 800a55a:	f009 fb25 	bl	8013ba8 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e009      	b.n	800a57a <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800a566:	1dfb      	adds	r3, r7, #7
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	4a17      	ldr	r2, [pc, #92]	@ (800a5c8 <AHT20_GetMeasurementValues+0xd8>)
 800a56c:	2100      	movs	r1, #0
 800a56e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800a570:	1dfb      	adds	r3, r7, #7
 800a572:	781a      	ldrb	r2, [r3, #0]
 800a574:	1dfb      	adds	r3, r7, #7
 800a576:	3201      	adds	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	1dfb      	adds	r3, r7, #7
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b06      	cmp	r3, #6
 800a580:	d9f1      	bls.n	800a566 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800a582:	1dbc      	adds	r4, r7, #6
 800a584:	4b10      	ldr	r3, [pc, #64]	@ (800a5c8 <AHT20_GetMeasurementValues+0xd8>)
 800a586:	2207      	movs	r2, #7
 800a588:	0019      	movs	r1, r3
 800a58a:	2038      	movs	r0, #56	@ 0x38
 800a58c:	f7ff fda8 	bl	800a0e0 <ReadDirRegister>
 800a590:	0003      	movs	r3, r0
 800a592:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800a594:	200a      	movs	r0, #10
 800a596:	f009 fb07 	bl	8013ba8 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800a59a:	f009 fafb 	bl	8013b94 <HAL_GetTick>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	3364      	adds	r3, #100	@ 0x64
 800a5a2:	001a      	movs	r2, r3
 800a5a4:	4b03      	ldr	r3, [pc, #12]	@ (800a5b4 <AHT20_GetMeasurementValues+0xc4>)
 800a5a6:	601a      	str	r2, [r3, #0]
  return response;
 800a5a8:	1dbb      	adds	r3, r7, #6
 800a5aa:	781b      	ldrb	r3, [r3, #0]
}
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	b003      	add	sp, #12
 800a5b2:	bd90      	pop	{r4, r7, pc}
 800a5b4:	20000be8 	.word	0x20000be8
 800a5b8:	0802b8a0 	.word	0x0802b8a0
 800a5bc:	0802b8c8 	.word	0x0802b8c8
 800a5c0:	0802b8cc 	.word	0x0802b8cc
 800a5c4:	0802b858 	.word	0x0802b858
 800a5c8:	20000bf8 	.word	0x20000bf8

0800a5cc <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	46c6      	mov	lr, r8
 800a5d0:	b500      	push	{lr}
 800a5d2:	b08a      	sub	sp, #40	@ 0x28
 800a5d4:	af06      	add	r7, sp, #24
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800a5da:	4b5a      	ldr	r3, [pc, #360]	@ (800a744 <AHT20_Calculate+0x178>)
 800a5dc:	799c      	ldrb	r4, [r3, #6]
 800a5de:	4b59      	ldr	r3, [pc, #356]	@ (800a744 <AHT20_Calculate+0x178>)
 800a5e0:	2106      	movs	r1, #6
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7ff fde2 	bl	800a1ac <CalculateCRC>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	429c      	cmp	r4, r3
 800a5ec:	d044      	beq.n	800a678 <AHT20_Calculate+0xac>
 800a5ee:	4b55      	ldr	r3, [pc, #340]	@ (800a744 <AHT20_Calculate+0x178>)
 800a5f0:	799b      	ldrb	r3, [r3, #6]
 800a5f2:	2bff      	cmp	r3, #255	@ 0xff
 800a5f4:	d040      	beq.n	800a678 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800a5f6:	4b53      	ldr	r3, [pc, #332]	@ (800a744 <AHT20_Calculate+0x178>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	4698      	mov	r8, r3
 800a5fc:	4b51      	ldr	r3, [pc, #324]	@ (800a744 <AHT20_Calculate+0x178>)
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	0018      	movs	r0, r3
 800a602:	4b50      	ldr	r3, [pc, #320]	@ (800a744 <AHT20_Calculate+0x178>)
 800a604:	789b      	ldrb	r3, [r3, #2]
 800a606:	001c      	movs	r4, r3
 800a608:	4b4e      	ldr	r3, [pc, #312]	@ (800a744 <AHT20_Calculate+0x178>)
 800a60a:	78db      	ldrb	r3, [r3, #3]
 800a60c:	001d      	movs	r5, r3
 800a60e:	4b4d      	ldr	r3, [pc, #308]	@ (800a744 <AHT20_Calculate+0x178>)
 800a610:	791b      	ldrb	r3, [r3, #4]
 800a612:	001e      	movs	r6, r3
 800a614:	4b4b      	ldr	r3, [pc, #300]	@ (800a744 <AHT20_Calculate+0x178>)
 800a616:	795b      	ldrb	r3, [r3, #5]
 800a618:	469c      	mov	ip, r3
 800a61a:	4b4a      	ldr	r3, [pc, #296]	@ (800a744 <AHT20_Calculate+0x178>)
 800a61c:	799b      	ldrb	r3, [r3, #6]
 800a61e:	4a4a      	ldr	r2, [pc, #296]	@ (800a748 <AHT20_Calculate+0x17c>)
 800a620:	494a      	ldr	r1, [pc, #296]	@ (800a74c <AHT20_Calculate+0x180>)
 800a622:	9305      	str	r3, [sp, #20]
 800a624:	4663      	mov	r3, ip
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	9603      	str	r6, [sp, #12]
 800a62a:	9502      	str	r5, [sp, #8]
 800a62c:	9401      	str	r4, [sp, #4]
 800a62e:	9000      	str	r0, [sp, #0]
 800a630:	4643      	mov	r3, r8
 800a632:	2003      	movs	r0, #3
 800a634:	f008 fd6e 	bl	8013114 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800a638:	4b42      	ldr	r3, [pc, #264]	@ (800a744 <AHT20_Calculate+0x178>)
 800a63a:	799b      	ldrb	r3, [r3, #6]
 800a63c:	001c      	movs	r4, r3
 800a63e:	4b41      	ldr	r3, [pc, #260]	@ (800a744 <AHT20_Calculate+0x178>)
 800a640:	2106      	movs	r1, #6
 800a642:	0018      	movs	r0, r3
 800a644:	f7ff fdb2 	bl	800a1ac <CalculateCRC>
 800a648:	0003      	movs	r3, r0
 800a64a:	4a41      	ldr	r2, [pc, #260]	@ (800a750 <AHT20_Calculate+0x184>)
 800a64c:	4941      	ldr	r1, [pc, #260]	@ (800a754 <AHT20_Calculate+0x188>)
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	0023      	movs	r3, r4
 800a652:	2001      	movs	r0, #1
 800a654:	f008 fd5e 	bl	8013114 <CreateLine>
    *airtemp = 0.0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800a664:	f009 fa96 	bl	8013b94 <HAL_GetTick>
 800a668:	0003      	movs	r3, r0
 800a66a:	22fa      	movs	r2, #250	@ 0xfa
 800a66c:	00d2      	lsls	r2, r2, #3
 800a66e:	189a      	adds	r2, r3, r2
 800a670:	4b39      	ldr	r3, [pc, #228]	@ (800a758 <AHT20_Calculate+0x18c>)
 800a672:	601a      	str	r2, [r3, #0]
    return false;
 800a674:	2300      	movs	r3, #0
 800a676:	e05f      	b.n	800a738 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800a678:	4b38      	ldr	r3, [pc, #224]	@ (800a75c <AHT20_Calculate+0x190>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800a67e:	4b31      	ldr	r3, [pc, #196]	@ (800a744 <AHT20_Calculate+0x178>)
 800a680:	78db      	ldrb	r3, [r3, #3]
 800a682:	041a      	lsls	r2, r3, #16
 800a684:	23f0      	movs	r3, #240	@ 0xf0
 800a686:	031b      	lsls	r3, r3, #12
 800a688:	401a      	ands	r2, r3
 800a68a:	4b2e      	ldr	r3, [pc, #184]	@ (800a744 <AHT20_Calculate+0x178>)
 800a68c:	791b      	ldrb	r3, [r3, #4]
 800a68e:	021b      	lsls	r3, r3, #8
 800a690:	18d3      	adds	r3, r2, r3
 800a692:	4a2c      	ldr	r2, [pc, #176]	@ (800a744 <AHT20_Calculate+0x178>)
 800a694:	7952      	ldrb	r2, [r2, #5]
 800a696:	189b      	adds	r3, r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7f7 f914 	bl	80018c8 <__aeabi_ui2f>
 800a6a0:	1c03      	adds	r3, r0, #0
 800a6a2:	2193      	movs	r1, #147	@ 0x93
 800a6a4:	05c9      	lsls	r1, r1, #23
 800a6a6:	1c18      	adds	r0, r3, #0
 800a6a8:	f7f6 fafc 	bl	8000ca4 <__aeabi_fdiv>
 800a6ac:	1c03      	adds	r3, r0, #0
 800a6ae:	492c      	ldr	r1, [pc, #176]	@ (800a760 <AHT20_Calculate+0x194>)
 800a6b0:	1c18      	adds	r0, r3, #0
 800a6b2:	f7f6 fcc5 	bl	8001040 <__aeabi_fmul>
 800a6b6:	1c03      	adds	r3, r0, #0
 800a6b8:	492a      	ldr	r1, [pc, #168]	@ (800a764 <AHT20_Calculate+0x198>)
 800a6ba:	1c18      	adds	r0, r3, #0
 800a6bc:	f7f6 fe1a 	bl	80012f4 <__aeabi_fsub>
 800a6c0:	1c03      	adds	r3, r0, #0
 800a6c2:	1c1a      	adds	r2, r3, #0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800a6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a744 <AHT20_Calculate+0x178>)
 800a6ca:	785b      	ldrb	r3, [r3, #1]
 800a6cc:	031a      	lsls	r2, r3, #12
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a744 <AHT20_Calculate+0x178>)
 800a6d0:	789b      	ldrb	r3, [r3, #2]
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	18d3      	adds	r3, r2, r3
 800a6d6:	4a1b      	ldr	r2, [pc, #108]	@ (800a744 <AHT20_Calculate+0x178>)
 800a6d8:	78d2      	ldrb	r2, [r2, #3]
 800a6da:	0912      	lsrs	r2, r2, #4
 800a6dc:	b2d2      	uxtb	r2, r2
 800a6de:	189b      	adds	r3, r3, r2
 800a6e0:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800a6e2:	68b8      	ldr	r0, [r7, #8]
 800a6e4:	f7f7 f8f0 	bl	80018c8 <__aeabi_ui2f>
 800a6e8:	1c03      	adds	r3, r0, #0
 800a6ea:	2193      	movs	r1, #147	@ 0x93
 800a6ec:	05c9      	lsls	r1, r1, #23
 800a6ee:	1c18      	adds	r0, r3, #0
 800a6f0:	f7f6 fad8 	bl	8000ca4 <__aeabi_fdiv>
 800a6f4:	1c03      	adds	r3, r0, #0
 800a6f6:	491c      	ldr	r1, [pc, #112]	@ (800a768 <AHT20_Calculate+0x19c>)
 800a6f8:	1c18      	adds	r0, r3, #0
 800a6fa:	f7f6 fca1 	bl	8001040 <__aeabi_fmul>
 800a6fe:	1c03      	adds	r3, r0, #0
 800a700:	1c1a      	adds	r2, r3, #0
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	601a      	str	r2, [r3, #0]
  Debug("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1c18      	adds	r0, r3, #0
 800a70c:	f7f9 f8c2 	bl	8003894 <__aeabi_f2d>
 800a710:	0004      	movs	r4, r0
 800a712:	000d      	movs	r5, r1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	1c18      	adds	r0, r3, #0
 800a71a:	f7f9 f8bb 	bl	8003894 <__aeabi_f2d>
 800a71e:	0002      	movs	r2, r0
 800a720:	000b      	movs	r3, r1
 800a722:	4812      	ldr	r0, [pc, #72]	@ (800a76c <AHT20_Calculate+0x1a0>)
 800a724:	4909      	ldr	r1, [pc, #36]	@ (800a74c <AHT20_Calculate+0x180>)
 800a726:	9202      	str	r2, [sp, #8]
 800a728:	9303      	str	r3, [sp, #12]
 800a72a:	9400      	str	r4, [sp, #0]
 800a72c:	9501      	str	r5, [sp, #4]
 800a72e:	0002      	movs	r2, r0
 800a730:	2003      	movs	r0, #3
 800a732:	f008 fcef 	bl	8013114 <CreateLine>
  return true;
 800a736:	2301      	movs	r3, #1
}
 800a738:	0018      	movs	r0, r3
 800a73a:	46bd      	mov	sp, r7
 800a73c:	b004      	add	sp, #16
 800a73e:	bc80      	pop	{r7}
 800a740:	46b8      	mov	r8, r7
 800a742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a744:	20000bf8 	.word	0x20000bf8
 800a748:	0802b8f0 	.word	0x0802b8f0
 800a74c:	0802b7f4 	.word	0x0802b7f4
 800a750:	0802b970 	.word	0x0802b970
 800a754:	0802b858 	.word	0x0802b858
 800a758:	20000be8 	.word	0x20000be8
 800a75c:	20000bff 	.word	0x20000bff
 800a760:	43480000 	.word	0x43480000
 800a764:	42480000 	.word	0x42480000
 800a768:	42c80000 	.word	0x42c80000
 800a76c:	0802b998 	.word	0x0802b998

0800a770 <AHT_Upkeep>:
  AHT20TimeStamp = HAL_GetTick() + 50;
  calibrated = false;
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
}

AHT20State AHT_Upkeep(void) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800a776:	4b54      	ldr	r3, [pc, #336]	@ (800a8c8 <AHT_Upkeep+0x158>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	0018      	movs	r0, r3
 800a77c:	f008 fc74 	bl	8013068 <TimestampIsReached>
 800a780:	0003      	movs	r3, r0
 800a782:	001a      	movs	r2, r3
 800a784:	2301      	movs	r3, #1
 800a786:	4053      	eors	r3, r2
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <AHT_Upkeep+0x24>
    return AHTState;
 800a78e:	4b4f      	ldr	r3, [pc, #316]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	e094      	b.n	800a8be <AHT_Upkeep+0x14e>
  }
  switch(AHTState) {
 800a794:	4b4d      	ldr	r3, [pc, #308]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b05      	cmp	r3, #5
 800a79a:	d86a      	bhi.n	800a872 <AHT_Upkeep+0x102>
 800a79c:	009a      	lsls	r2, r3, #2
 800a79e:	4b4c      	ldr	r3, [pc, #304]	@ (800a8d0 <AHT_Upkeep+0x160>)
 800a7a0:	18d3      	adds	r3, r2, r3
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800a7a6:	4a4b      	ldr	r2, [pc, #300]	@ (800a8d4 <AHT_Upkeep+0x164>)
 800a7a8:	4b4b      	ldr	r3, [pc, #300]	@ (800a8d8 <AHT_Upkeep+0x168>)
 800a7aa:	0019      	movs	r1, r3
 800a7ac:	2003      	movs	r0, #3
 800a7ae:	f008 fcb1 	bl	8013114 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800a7b2:	f009 f9ef 	bl	8013b94 <HAL_GetTick>
 800a7b6:	0003      	movs	r3, r0
 800a7b8:	4a48      	ldr	r2, [pc, #288]	@ (800a8dc <AHT_Upkeep+0x16c>)
 800a7ba:	189a      	adds	r2, r3, r2
 800a7bc:	4b42      	ldr	r3, [pc, #264]	@ (800a8c8 <AHT_Upkeep+0x158>)
 800a7be:	601a      	str	r2, [r3, #0]
    break;
 800a7c0:	e07b      	b.n	800a8ba <AHT_Upkeep+0x14a>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800a7c2:	f002 fd35 	bl	800d230 <getSensorLock>
 800a7c6:	1e03      	subs	r3, r0, #0
 800a7c8:	d000      	beq.n	800a7cc <AHT_Upkeep+0x5c>
 800a7ca:	e071      	b.n	800a8b0 <AHT_Upkeep+0x140>
      break;
    }
    setSensorLock(AHT20);
 800a7cc:	2002      	movs	r0, #2
 800a7ce:	f002 fd1b 	bl	800d208 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800a7d2:	f7ff fe5f 	bl	800a494 <AHT20_StartMeasurement>
 800a7d6:	0003      	movs	r3, r0
 800a7d8:	001a      	movs	r2, r3
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4053      	eors	r3, r2
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <AHT_Upkeep+0x7c>
      AHTState = AHT20_ERROR;
 800a7e4:	4b39      	ldr	r3, [pc, #228]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a7e6:	22ff      	movs	r2, #255	@ 0xff
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	e002      	b.n	800a7f2 <AHT_Upkeep+0x82>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800a7ec:	4b37      	ldr	r3, [pc, #220]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800a7f2:	200a      	movs	r0, #10
 800a7f4:	f009 f9d8 	bl	8013ba8 <HAL_Delay>
    break;
 800a7f8:	e05f      	b.n	800a8ba <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800a7fa:	f7ff fe79 	bl	800a4f0 <AHT20_GetMeasurementValues>
 800a7fe:	1e03      	subs	r3, r0, #0
 800a800:	d058      	beq.n	800a8b4 <AHT_Upkeep+0x144>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800a802:	200a      	movs	r0, #10
 800a804:	f009 f9d0 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 800a808:	2000      	movs	r0, #0
 800a80a:	f002 fcfd 	bl	800d208 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800a80e:	4b2f      	ldr	r3, [pc, #188]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a810:	2203      	movs	r2, #3
 800a812:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800a814:	e04e      	b.n	800a8b4 <AHT_Upkeep+0x144>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800a816:	003a      	movs	r2, r7
 800a818:	1d3b      	adds	r3, r7, #4
 800a81a:	0011      	movs	r1, r2
 800a81c:	0018      	movs	r0, r3
 800a81e:	f7ff fed5 	bl	800a5cc <AHT20_Calculate>
 800a822:	0003      	movs	r3, r0
 800a824:	001a      	movs	r2, r3
 800a826:	2301      	movs	r3, #1
 800a828:	4053      	eors	r3, r2
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <AHT_Upkeep+0xcc>
      AHTState = AHT20_ERROR;
 800a830:	4b26      	ldr	r3, [pc, #152]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a832:	22ff      	movs	r2, #255	@ 0xff
 800a834:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800a836:	4b25      	ldr	r3, [pc, #148]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	e040      	b.n	800a8be <AHT_Upkeep+0x14e>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	1c11      	adds	r1, r2, #0
 800a842:	1c18      	adds	r0, r3, #0
 800a844:	f7fa f91e 	bl	8004a84 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	1c11      	adds	r1, r2, #0
 800a84e:	1c18      	adds	r0, r3, #0
 800a850:	f7f9 fdce 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800a854:	4b1d      	ldr	r3, [pc, #116]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a856:	2205      	movs	r2, #5
 800a858:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800a85a:	f009 f99b 	bl	8013b94 <HAL_GetTick>
 800a85e:	0003      	movs	r3, r0
 800a860:	4a1f      	ldr	r2, [pc, #124]	@ (800a8e0 <AHT_Upkeep+0x170>)
 800a862:	189a      	adds	r2, r3, r2
 800a864:	4b18      	ldr	r3, [pc, #96]	@ (800a8c8 <AHT_Upkeep+0x158>)
 800a866:	601a      	str	r2, [r3, #0]
    break;
 800a868:	e027      	b.n	800a8ba <AHT_Upkeep+0x14a>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a86a:	4b18      	ldr	r3, [pc, #96]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a86c:	2201      	movs	r2, #1
 800a86e:	701a      	strb	r2, [r3, #0]
  break;
 800a870:	e023      	b.n	800a8ba <AHT_Upkeep+0x14a>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800a872:	4b16      	ldr	r3, [pc, #88]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a874:	2201      	movs	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800a878:	f002 fcda 	bl	800d230 <getSensorLock>
 800a87c:	0003      	movs	r3, r0
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d102      	bne.n	800a888 <AHT_Upkeep+0x118>
      setSensorLock(FREE);
 800a882:	2000      	movs	r0, #0
 800a884:	f002 fcc0 	bl	800d208 <setSensorLock>
    }
    AHTerrors++;
 800a888:	4b16      	ldr	r3, [pc, #88]	@ (800a8e4 <AHT_Upkeep+0x174>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	3301      	adds	r3, #1
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	4b14      	ldr	r3, [pc, #80]	@ (800a8e4 <AHT_Upkeep+0x174>)
 800a892:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800a894:	4b13      	ldr	r3, [pc, #76]	@ (800a8e4 <AHT_Upkeep+0x174>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b19      	cmp	r3, #25
 800a89a:	d90d      	bls.n	800a8b8 <AHT_Upkeep+0x148>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800a89c:	4a12      	ldr	r2, [pc, #72]	@ (800a8e8 <AHT_Upkeep+0x178>)
 800a89e:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <AHT_Upkeep+0x17c>)
 800a8a0:	0019      	movs	r1, r3
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	f008 fc36 	bl	8013114 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800a8a8:	4b08      	ldr	r3, [pc, #32]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a8ae:	e003      	b.n	800a8b8 <AHT_Upkeep+0x148>
      break;
 800a8b0:	46c0      	nop			@ (mov r8, r8)
 800a8b2:	e002      	b.n	800a8ba <AHT_Upkeep+0x14a>
    break;
 800a8b4:	46c0      	nop			@ (mov r8, r8)
 800a8b6:	e000      	b.n	800a8ba <AHT_Upkeep+0x14a>
    break;
 800a8b8:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800a8ba:	4b04      	ldr	r3, [pc, #16]	@ (800a8cc <AHT_Upkeep+0x15c>)
 800a8bc:	781b      	ldrb	r3, [r3, #0]
}
 800a8be:	0018      	movs	r0, r3
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	b002      	add	sp, #8
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	46c0      	nop			@ (mov r8, r8)
 800a8c8:	20000be8 	.word	0x20000be8
 800a8cc:	20000093 	.word	0x20000093
 800a8d0:	0802d8d0 	.word	0x0802d8d0
 800a8d4:	0802b9cc 	.word	0x0802b9cc
 800a8d8:	0802b7f4 	.word	0x0802b7f4
 800a8dc:	000dbba0 	.word	0x000dbba0
 800a8e0:	0000ea60 	.word	0x0000ea60
 800a8e4:	20000bff 	.word	0x20000bff
 800a8e8:	0802b9f4 	.word	0x0802b9f4
 800a8ec:	0802b858 	.word	0x0802b858

0800a8f0 <WriteMemRegister>:
static int32_t raw_temp, raw_mpa;
static uint32_t BMP280TimeStamp;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af02      	add	r7, sp, #8
 800a8f6:	0004      	movs	r4, r0
 800a8f8:	0008      	movs	r0, r1
 800a8fa:	60ba      	str	r2, [r7, #8]
 800a8fc:	0019      	movs	r1, r3
 800a8fe:	260e      	movs	r6, #14
 800a900:	19bb      	adds	r3, r7, r6
 800a902:	1c22      	adds	r2, r4, #0
 800a904:	801a      	strh	r2, [r3, #0]
 800a906:	230c      	movs	r3, #12
 800a908:	18fb      	adds	r3, r7, r3
 800a90a:	1c02      	adds	r2, r0, #0
 800a90c:	801a      	strh	r2, [r3, #0]
 800a90e:	1dbb      	adds	r3, r7, #6
 800a910:	1c0a      	adds	r2, r1, #0
 800a912:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800a914:	4b0c      	ldr	r3, [pc, #48]	@ (800a948 <WriteMemRegister+0x58>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d010      	beq.n	800a93e <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a91c:	4b0a      	ldr	r3, [pc, #40]	@ (800a948 <WriteMemRegister+0x58>)
 800a91e:	681c      	ldr	r4, [r3, #0]
 800a920:	4b0a      	ldr	r3, [pc, #40]	@ (800a94c <WriteMemRegister+0x5c>)
 800a922:	7818      	ldrb	r0, [r3, #0]
 800a924:	68bd      	ldr	r5, [r7, #8]
 800a926:	230c      	movs	r3, #12
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	881a      	ldrh	r2, [r3, #0]
 800a92c:	19bb      	adds	r3, r7, r6
 800a92e:	8819      	ldrh	r1, [r3, #0]
 800a930:	1dbb      	adds	r3, r7, #6
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	002b      	movs	r3, r5
 800a938:	47a0      	blx	r4
 800a93a:	0003      	movs	r3, r0
 800a93c:	e000      	b.n	800a940 <WriteMemRegister+0x50>
  }
  return false;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	0018      	movs	r0, r3
 800a942:	46bd      	mov	sp, r7
 800a944:	b005      	add	sp, #20
 800a946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a948:	20000c00 	.word	0x20000c00
 800a94c:	20000094 	.word	0x20000094

0800a950 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800a950:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a952:	b087      	sub	sp, #28
 800a954:	af02      	add	r7, sp, #8
 800a956:	0004      	movs	r4, r0
 800a958:	0008      	movs	r0, r1
 800a95a:	60ba      	str	r2, [r7, #8]
 800a95c:	0019      	movs	r1, r3
 800a95e:	260e      	movs	r6, #14
 800a960:	19bb      	adds	r3, r7, r6
 800a962:	1c22      	adds	r2, r4, #0
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	230c      	movs	r3, #12
 800a968:	18fb      	adds	r3, r7, r3
 800a96a:	1c02      	adds	r2, r0, #0
 800a96c:	801a      	strh	r2, [r3, #0]
 800a96e:	1dbb      	adds	r3, r7, #6
 800a970:	1c0a      	adds	r2, r1, #0
 800a972:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800a974:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a8 <ReadMemRegister+0x58>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d010      	beq.n	800a99e <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800a97c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <ReadMemRegister+0x58>)
 800a97e:	681c      	ldr	r4, [r3, #0]
 800a980:	4b0a      	ldr	r3, [pc, #40]	@ (800a9ac <ReadMemRegister+0x5c>)
 800a982:	7818      	ldrb	r0, [r3, #0]
 800a984:	68bd      	ldr	r5, [r7, #8]
 800a986:	230c      	movs	r3, #12
 800a988:	18fb      	adds	r3, r7, r3
 800a98a:	881a      	ldrh	r2, [r3, #0]
 800a98c:	19bb      	adds	r3, r7, r6
 800a98e:	8819      	ldrh	r1, [r3, #0]
 800a990:	1dbb      	adds	r3, r7, #6
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	002b      	movs	r3, r5
 800a998:	47a0      	blx	r4
 800a99a:	0003      	movs	r3, r0
 800a99c:	e000      	b.n	800a9a0 <ReadMemRegister+0x50>
  }
  return false;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	b005      	add	sp, #20
 800a9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9a8:	20000c04 	.word	0x20000c04
 800a9ac:	20000094 	.word	0x20000094

0800a9b0 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800a9b8:	f009 f8ec 	bl	8013b94 <HAL_GetTick>
 800a9bc:	0002      	movs	r2, r0
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	18d2      	adds	r2, r2, r3
 800a9c2:	4b03      	ldr	r3, [pc, #12]	@ (800a9d0 <setBMP280TimeStamp+0x20>)
 800a9c4:	601a      	str	r2, [r3, #0]
}
 800a9c6:	46c0      	nop			@ (mov r8, r8)
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	b002      	add	sp, #8
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	20000c2c 	.word	0x20000c2c

0800a9d4 <BMP280_reset>:

static void BMP280_reset() {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800a9da:	1dfb      	adds	r3, r7, #7
 800a9dc:	22b6      	movs	r2, #182	@ 0xb6
 800a9de:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800a9e0:	1dfa      	adds	r2, r7, #7
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	20e0      	movs	r0, #224	@ 0xe0
 800a9e8:	f7ff ff82 	bl	800a8f0 <WriteMemRegister>
  Info("BMP280 has been reset");
 800a9ec:	4a06      	ldr	r2, [pc, #24]	@ (800aa08 <BMP280_reset+0x34>)
 800a9ee:	4b07      	ldr	r3, [pc, #28]	@ (800aa0c <BMP280_reset+0x38>)
 800a9f0:	0019      	movs	r1, r3
 800a9f2:	2002      	movs	r0, #2
 800a9f4:	f008 fb8e 	bl	8013114 <CreateLine>
  HAL_Delay(100);
 800a9f8:	2064      	movs	r0, #100	@ 0x64
 800a9fa:	f009 f8d5 	bl	8013ba8 <HAL_Delay>
}
 800a9fe:	46c0      	nop			@ (mov r8, r8)
 800aa00:	46bd      	mov	sp, r7
 800aa02:	b002      	add	sp, #8
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	46c0      	nop			@ (mov r8, r8)
 800aa08:	0802ba38 	.word	0x0802ba38
 800aa0c:	0802ba50 	.word	0x0802ba50

0800aa10 <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800aa16:	4aae      	ldr	r2, [pc, #696]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa18:	231a      	movs	r3, #26
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	2088      	movs	r0, #136	@ 0x88
 800aa1e:	f7ff ff97 	bl	800a950 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800aa22:	4bab      	ldr	r3, [pc, #684]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa24:	785b      	ldrb	r3, [r3, #1]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4aa9      	ldr	r2, [pc, #676]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	4ba8      	ldr	r3, [pc, #672]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aa34:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800aa36:	4ba6      	ldr	r3, [pc, #664]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa38:	78db      	ldrb	r3, [r3, #3]
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4aa4      	ldr	r2, [pc, #656]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa40:	7892      	ldrb	r2, [r2, #2]
 800aa42:	189b      	adds	r3, r3, r2
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	b21a      	sxth	r2, r3
 800aa48:	4ba2      	ldr	r3, [pc, #648]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aa4a:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800aa4c:	4ba0      	ldr	r3, [pc, #640]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa4e:	795b      	ldrb	r3, [r3, #5]
 800aa50:	021b      	lsls	r3, r3, #8
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	4a9e      	ldr	r2, [pc, #632]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa56:	7912      	ldrb	r2, [r2, #4]
 800aa58:	189b      	adds	r3, r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	b21a      	sxth	r2, r3
 800aa5e:	4b9d      	ldr	r3, [pc, #628]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aa60:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800aa62:	4b9b      	ldr	r3, [pc, #620]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa64:	79db      	ldrb	r3, [r3, #7]
 800aa66:	021b      	lsls	r3, r3, #8
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	4a99      	ldr	r2, [pc, #612]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa6c:	7992      	ldrb	r2, [r2, #6]
 800aa6e:	189b      	adds	r3, r3, r2
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	4b98      	ldr	r3, [pc, #608]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aa74:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800aa76:	4b96      	ldr	r3, [pc, #600]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa78:	7a5b      	ldrb	r3, [r3, #9]
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4a94      	ldr	r2, [pc, #592]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa80:	7a12      	ldrb	r2, [r2, #8]
 800aa82:	189b      	adds	r3, r3, r2
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	b21a      	sxth	r2, r3
 800aa88:	4b92      	ldr	r3, [pc, #584]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aa8a:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800aa8c:	4b90      	ldr	r3, [pc, #576]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa8e:	7adb      	ldrb	r3, [r3, #11]
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	4a8e      	ldr	r2, [pc, #568]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aa96:	7a92      	ldrb	r2, [r2, #10]
 800aa98:	189b      	adds	r3, r3, r2
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	b21a      	sxth	r2, r3
 800aa9e:	4b8d      	ldr	r3, [pc, #564]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aaa0:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800aaa2:	4b8b      	ldr	r3, [pc, #556]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aaa4:	7b5b      	ldrb	r3, [r3, #13]
 800aaa6:	021b      	lsls	r3, r3, #8
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	4a89      	ldr	r2, [pc, #548]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aaac:	7b12      	ldrb	r2, [r2, #12]
 800aaae:	189b      	adds	r3, r3, r2
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	b21a      	sxth	r2, r3
 800aab4:	4b87      	ldr	r3, [pc, #540]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aab6:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800aab8:	4b85      	ldr	r3, [pc, #532]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aaba:	7bdb      	ldrb	r3, [r3, #15]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	4a83      	ldr	r2, [pc, #524]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aac2:	7b92      	ldrb	r2, [r2, #14]
 800aac4:	189b      	adds	r3, r3, r2
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	b21a      	sxth	r2, r3
 800aaca:	4b82      	ldr	r3, [pc, #520]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aacc:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800aace:	4b80      	ldr	r3, [pc, #512]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aad0:	7c5b      	ldrb	r3, [r3, #17]
 800aad2:	021b      	lsls	r3, r3, #8
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4a7e      	ldr	r2, [pc, #504]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aad8:	7c12      	ldrb	r2, [r2, #16]
 800aada:	189b      	adds	r3, r3, r2
 800aadc:	b29b      	uxth	r3, r3
 800aade:	b21a      	sxth	r2, r3
 800aae0:	4b7c      	ldr	r3, [pc, #496]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aae2:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800aae4:	4b7a      	ldr	r3, [pc, #488]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aae6:	7cdb      	ldrb	r3, [r3, #19]
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	4a78      	ldr	r2, [pc, #480]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aaee:	7c92      	ldrb	r2, [r2, #18]
 800aaf0:	189b      	adds	r3, r3, r2
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	b21a      	sxth	r2, r3
 800aaf6:	4b77      	ldr	r3, [pc, #476]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aaf8:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800aafa:	4b75      	ldr	r3, [pc, #468]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aafc:	7d5b      	ldrb	r3, [r3, #21]
 800aafe:	021b      	lsls	r3, r3, #8
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	4a73      	ldr	r2, [pc, #460]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab04:	7d12      	ldrb	r2, [r2, #20]
 800ab06:	189b      	adds	r3, r3, r2
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	b21a      	sxth	r2, r3
 800ab0c:	4b71      	ldr	r3, [pc, #452]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ab0e:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800ab10:	4b6f      	ldr	r3, [pc, #444]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab12:	7ddb      	ldrb	r3, [r3, #23]
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	4a6d      	ldr	r2, [pc, #436]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab1a:	7d92      	ldrb	r2, [r2, #22]
 800ab1c:	189b      	adds	r3, r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b21a      	sxth	r2, r3
 800ab22:	4b6c      	ldr	r3, [pc, #432]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ab24:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800ab26:	4a6c      	ldr	r2, [pc, #432]	@ (800acd8 <BMP280_get_calibration+0x2c8>)
 800ab28:	4b6c      	ldr	r3, [pc, #432]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ab2a:	0019      	movs	r1, r3
 800ab2c:	2003      	movs	r0, #3
 800ab2e:	f008 faf1 	bl	8013114 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800ab32:	4b67      	ldr	r3, [pc, #412]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	001c      	movs	r4, r3
 800ab38:	4b65      	ldr	r3, [pc, #404]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	4b65      	ldr	r3, [pc, #404]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	4a67      	ldr	r2, [pc, #412]	@ (800ace0 <BMP280_get_calibration+0x2d0>)
 800ab44:	4965      	ldr	r1, [pc, #404]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	9000      	str	r0, [sp, #0]
 800ab4a:	0023      	movs	r3, r4
 800ab4c:	2003      	movs	r0, #3
 800ab4e:	f008 fae1 	bl	8013114 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800ab52:	4b5f      	ldr	r3, [pc, #380]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab54:	78db      	ldrb	r3, [r3, #3]
 800ab56:	001c      	movs	r4, r3
 800ab58:	4b5d      	ldr	r3, [pc, #372]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab5a:	789b      	ldrb	r3, [r3, #2]
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	4b5d      	ldr	r3, [pc, #372]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ab60:	2202      	movs	r2, #2
 800ab62:	5e9b      	ldrsh	r3, [r3, r2]
 800ab64:	4a5f      	ldr	r2, [pc, #380]	@ (800ace4 <BMP280_get_calibration+0x2d4>)
 800ab66:	495d      	ldr	r1, [pc, #372]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	9000      	str	r0, [sp, #0]
 800ab6c:	0023      	movs	r3, r4
 800ab6e:	2003      	movs	r0, #3
 800ab70:	f008 fad0 	bl	8013114 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800ab74:	4b56      	ldr	r3, [pc, #344]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab76:	795b      	ldrb	r3, [r3, #5]
 800ab78:	001c      	movs	r4, r3
 800ab7a:	4b55      	ldr	r3, [pc, #340]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab7c:	791b      	ldrb	r3, [r3, #4]
 800ab7e:	0018      	movs	r0, r3
 800ab80:	4b54      	ldr	r3, [pc, #336]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ab82:	2204      	movs	r2, #4
 800ab84:	5e9b      	ldrsh	r3, [r3, r2]
 800ab86:	4a58      	ldr	r2, [pc, #352]	@ (800ace8 <BMP280_get_calibration+0x2d8>)
 800ab88:	4954      	ldr	r1, [pc, #336]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	9000      	str	r0, [sp, #0]
 800ab8e:	0023      	movs	r3, r4
 800ab90:	2003      	movs	r0, #3
 800ab92:	f008 fabf 	bl	8013114 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800ab96:	4b4e      	ldr	r3, [pc, #312]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab98:	79db      	ldrb	r3, [r3, #7]
 800ab9a:	001c      	movs	r4, r3
 800ab9c:	4b4c      	ldr	r3, [pc, #304]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ab9e:	799b      	ldrb	r3, [r3, #6]
 800aba0:	0018      	movs	r0, r3
 800aba2:	4b4c      	ldr	r3, [pc, #304]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800aba4:	88db      	ldrh	r3, [r3, #6]
 800aba6:	4a51      	ldr	r2, [pc, #324]	@ (800acec <BMP280_get_calibration+0x2dc>)
 800aba8:	494c      	ldr	r1, [pc, #304]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800abaa:	9301      	str	r3, [sp, #4]
 800abac:	9000      	str	r0, [sp, #0]
 800abae:	0023      	movs	r3, r4
 800abb0:	2003      	movs	r0, #3
 800abb2:	f008 faaf 	bl	8013114 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800abb6:	4b46      	ldr	r3, [pc, #280]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800abb8:	7a5b      	ldrb	r3, [r3, #9]
 800abba:	001c      	movs	r4, r3
 800abbc:	4b44      	ldr	r3, [pc, #272]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800abbe:	7a1b      	ldrb	r3, [r3, #8]
 800abc0:	0018      	movs	r0, r3
 800abc2:	4b44      	ldr	r3, [pc, #272]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800abc4:	2208      	movs	r2, #8
 800abc6:	5e9b      	ldrsh	r3, [r3, r2]
 800abc8:	4a49      	ldr	r2, [pc, #292]	@ (800acf0 <BMP280_get_calibration+0x2e0>)
 800abca:	4944      	ldr	r1, [pc, #272]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800abcc:	9301      	str	r3, [sp, #4]
 800abce:	9000      	str	r0, [sp, #0]
 800abd0:	0023      	movs	r3, r4
 800abd2:	2003      	movs	r0, #3
 800abd4:	f008 fa9e 	bl	8013114 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800abd8:	4b3d      	ldr	r3, [pc, #244]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800abda:	7adb      	ldrb	r3, [r3, #11]
 800abdc:	001c      	movs	r4, r3
 800abde:	4b3c      	ldr	r3, [pc, #240]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800abe0:	7a9b      	ldrb	r3, [r3, #10]
 800abe2:	0018      	movs	r0, r3
 800abe4:	4b3b      	ldr	r3, [pc, #236]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800abe6:	220a      	movs	r2, #10
 800abe8:	5e9b      	ldrsh	r3, [r3, r2]
 800abea:	4a42      	ldr	r2, [pc, #264]	@ (800acf4 <BMP280_get_calibration+0x2e4>)
 800abec:	493b      	ldr	r1, [pc, #236]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	9000      	str	r0, [sp, #0]
 800abf2:	0023      	movs	r3, r4
 800abf4:	2003      	movs	r0, #3
 800abf6:	f008 fa8d 	bl	8013114 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800abfa:	4b35      	ldr	r3, [pc, #212]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800abfc:	7b5b      	ldrb	r3, [r3, #13]
 800abfe:	001c      	movs	r4, r3
 800ac00:	4b33      	ldr	r3, [pc, #204]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac02:	7b1b      	ldrb	r3, [r3, #12]
 800ac04:	0018      	movs	r0, r3
 800ac06:	4b33      	ldr	r3, [pc, #204]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ac08:	220c      	movs	r2, #12
 800ac0a:	5e9b      	ldrsh	r3, [r3, r2]
 800ac0c:	4a3a      	ldr	r2, [pc, #232]	@ (800acf8 <BMP280_get_calibration+0x2e8>)
 800ac0e:	4933      	ldr	r1, [pc, #204]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	9000      	str	r0, [sp, #0]
 800ac14:	0023      	movs	r3, r4
 800ac16:	2003      	movs	r0, #3
 800ac18:	f008 fa7c 	bl	8013114 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800ac1c:	4b2c      	ldr	r3, [pc, #176]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac1e:	7bdb      	ldrb	r3, [r3, #15]
 800ac20:	001c      	movs	r4, r3
 800ac22:	4b2b      	ldr	r3, [pc, #172]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac24:	7b9b      	ldrb	r3, [r3, #14]
 800ac26:	0018      	movs	r0, r3
 800ac28:	4b2a      	ldr	r3, [pc, #168]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ac2a:	220e      	movs	r2, #14
 800ac2c:	5e9b      	ldrsh	r3, [r3, r2]
 800ac2e:	4a33      	ldr	r2, [pc, #204]	@ (800acfc <BMP280_get_calibration+0x2ec>)
 800ac30:	492a      	ldr	r1, [pc, #168]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	9000      	str	r0, [sp, #0]
 800ac36:	0023      	movs	r3, r4
 800ac38:	2003      	movs	r0, #3
 800ac3a:	f008 fa6b 	bl	8013114 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800ac3e:	4b24      	ldr	r3, [pc, #144]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac40:	7c5b      	ldrb	r3, [r3, #17]
 800ac42:	001c      	movs	r4, r3
 800ac44:	4b22      	ldr	r3, [pc, #136]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac46:	7c1b      	ldrb	r3, [r3, #16]
 800ac48:	0018      	movs	r0, r3
 800ac4a:	4b22      	ldr	r3, [pc, #136]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	5e9b      	ldrsh	r3, [r3, r2]
 800ac50:	4a2b      	ldr	r2, [pc, #172]	@ (800ad00 <BMP280_get_calibration+0x2f0>)
 800ac52:	4922      	ldr	r1, [pc, #136]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9000      	str	r0, [sp, #0]
 800ac58:	0023      	movs	r3, r4
 800ac5a:	2003      	movs	r0, #3
 800ac5c:	f008 fa5a 	bl	8013114 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800ac60:	4b1b      	ldr	r3, [pc, #108]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac62:	7cdb      	ldrb	r3, [r3, #19]
 800ac64:	001c      	movs	r4, r3
 800ac66:	4b1a      	ldr	r3, [pc, #104]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac68:	7c9b      	ldrb	r3, [r3, #18]
 800ac6a:	0018      	movs	r0, r3
 800ac6c:	4b19      	ldr	r3, [pc, #100]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ac6e:	2212      	movs	r2, #18
 800ac70:	5e9b      	ldrsh	r3, [r3, r2]
 800ac72:	4a24      	ldr	r2, [pc, #144]	@ (800ad04 <BMP280_get_calibration+0x2f4>)
 800ac74:	4919      	ldr	r1, [pc, #100]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	9000      	str	r0, [sp, #0]
 800ac7a:	0023      	movs	r3, r4
 800ac7c:	2003      	movs	r0, #3
 800ac7e:	f008 fa49 	bl	8013114 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800ac82:	4b13      	ldr	r3, [pc, #76]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac84:	7d5b      	ldrb	r3, [r3, #21]
 800ac86:	001c      	movs	r4, r3
 800ac88:	4b11      	ldr	r3, [pc, #68]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
 800ac8c:	0018      	movs	r0, r3
 800ac8e:	4b11      	ldr	r3, [pc, #68]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800ac90:	2214      	movs	r2, #20
 800ac92:	5e9b      	ldrsh	r3, [r3, r2]
 800ac94:	4a1c      	ldr	r2, [pc, #112]	@ (800ad08 <BMP280_get_calibration+0x2f8>)
 800ac96:	4911      	ldr	r1, [pc, #68]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	9000      	str	r0, [sp, #0]
 800ac9c:	0023      	movs	r3, r4
 800ac9e:	2003      	movs	r0, #3
 800aca0:	f008 fa38 	bl	8013114 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800aca4:	4b0a      	ldr	r3, [pc, #40]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800aca6:	7ddb      	ldrb	r3, [r3, #23]
 800aca8:	001c      	movs	r4, r3
 800acaa:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <BMP280_get_calibration+0x2c0>)
 800acac:	7d9b      	ldrb	r3, [r3, #22]
 800acae:	0018      	movs	r0, r3
 800acb0:	4b08      	ldr	r3, [pc, #32]	@ (800acd4 <BMP280_get_calibration+0x2c4>)
 800acb2:	2216      	movs	r2, #22
 800acb4:	5e9b      	ldrsh	r3, [r3, r2]
 800acb6:	4a15      	ldr	r2, [pc, #84]	@ (800ad0c <BMP280_get_calibration+0x2fc>)
 800acb8:	4908      	ldr	r1, [pc, #32]	@ (800acdc <BMP280_get_calibration+0x2cc>)
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	9000      	str	r0, [sp, #0]
 800acbe:	0023      	movs	r3, r4
 800acc0:	2003      	movs	r0, #3
 800acc2:	f008 fa27 	bl	8013114 <CreateLine>
}
 800acc6:	46c0      	nop			@ (mov r8, r8)
 800acc8:	46bd      	mov	sp, r7
 800acca:	b001      	add	sp, #4
 800accc:	bd90      	pop	{r4, r7, pc}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	20000c30 	.word	0x20000c30
 800acd4:	20000c08 	.word	0x20000c08
 800acd8:	0802ba54 	.word	0x0802ba54
 800acdc:	0802ba70 	.word	0x0802ba70
 800ace0:	0802ba74 	.word	0x0802ba74
 800ace4:	0802baa8 	.word	0x0802baa8
 800ace8:	0802badc 	.word	0x0802badc
 800acec:	0802bb10 	.word	0x0802bb10
 800acf0:	0802bb44 	.word	0x0802bb44
 800acf4:	0802bb78 	.word	0x0802bb78
 800acf8:	0802bbac 	.word	0x0802bbac
 800acfc:	0802bbe0 	.word	0x0802bbe0
 800ad00:	0802bc14 	.word	0x0802bc14
 800ad04:	0802bc48 	.word	0x0802bc48
 800ad08:	0802bc7c 	.word	0x0802bc7c
 800ad0c:	0802bcb0 	.word	0x0802bcb0

0800ad10 <BMP280_probe>:

static bool BMP280_probe() {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800ad16:	4b34      	ldr	r3, [pc, #208]	@ (800ade8 <BMP280_probe+0xd8>)
 800ad18:	2276      	movs	r2, #118	@ 0x76
 800ad1a:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ad1c:	1dba      	adds	r2, r7, #6
 800ad1e:	2301      	movs	r3, #1
 800ad20:	2101      	movs	r1, #1
 800ad22:	20d0      	movs	r0, #208	@ 0xd0
 800ad24:	f7ff fe14 	bl	800a950 <ReadMemRegister>
 800ad28:	0003      	movs	r3, r0
 800ad2a:	001a      	movs	r2, r3
 800ad2c:	1dfb      	adds	r3, r7, #7
 800ad2e:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800ad30:	1dfb      	adds	r3, r7, #7
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <BMP280_probe+0x40>
 800ad3a:	1dbb      	adds	r3, r7, #6
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d006      	beq.n	800ad50 <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ad42:	1dbb      	adds	r3, r7, #6
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	4a29      	ldr	r2, [pc, #164]	@ (800adec <BMP280_probe+0xdc>)
 800ad48:	4929      	ldr	r1, [pc, #164]	@ (800adf0 <BMP280_probe+0xe0>)
 800ad4a:	2003      	movs	r0, #3
 800ad4c:	f008 f9e2 	bl	8013114 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800ad50:	1dbb      	adds	r3, r7, #6
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	2b58      	cmp	r3, #88	@ 0x58
 800ad56:	d01f      	beq.n	800ad98 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800ad58:	4b23      	ldr	r3, [pc, #140]	@ (800ade8 <BMP280_probe+0xd8>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	4b21      	ldr	r3, [pc, #132]	@ (800ade8 <BMP280_probe+0xd8>)
 800ad62:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800ad64:	1dba      	adds	r2, r7, #6
 800ad66:	2301      	movs	r3, #1
 800ad68:	2101      	movs	r1, #1
 800ad6a:	20d0      	movs	r0, #208	@ 0xd0
 800ad6c:	f7ff fdf0 	bl	800a950 <ReadMemRegister>
 800ad70:	0003      	movs	r3, r0
 800ad72:	001a      	movs	r2, r3
 800ad74:	1dfb      	adds	r3, r7, #7
 800ad76:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800ad78:	1dfb      	adds	r3, r7, #7
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	b25b      	sxtb	r3, r3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <BMP280_probe+0x88>
 800ad82:	1dbb      	adds	r3, r7, #6
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d006      	beq.n	800ad98 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800ad8a:	1dbb      	adds	r3, r7, #6
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	4a17      	ldr	r2, [pc, #92]	@ (800adec <BMP280_probe+0xdc>)
 800ad90:	4917      	ldr	r1, [pc, #92]	@ (800adf0 <BMP280_probe+0xe0>)
 800ad92:	2003      	movs	r0, #3
 800ad94:	f008 f9be 	bl	8013114 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800ad98:	1dbb      	adds	r3, r7, #6
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b58      	cmp	r3, #88	@ 0x58
 800ad9e:	d110      	bne.n	800adc2 <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800ada0:	1dbb      	adds	r3, r7, #6
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	0018      	movs	r0, r3
 800ada6:	4b10      	ldr	r3, [pc, #64]	@ (800ade8 <BMP280_probe+0xd8>)
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	4a12      	ldr	r2, [pc, #72]	@ (800adf4 <BMP280_probe+0xe4>)
 800adac:	4912      	ldr	r1, [pc, #72]	@ (800adf8 <BMP280_probe+0xe8>)
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	0003      	movs	r3, r0
 800adb2:	2002      	movs	r0, #2
 800adb4:	f008 f9ae 	bl	8013114 <CreateLine>
      BMP280_reset(); // get an initial state
 800adb8:	f7ff fe0c 	bl	800a9d4 <BMP280_reset>
      BMP280_get_calibration();
 800adbc:	f7ff fe28 	bl	800aa10 <BMP280_get_calibration>
 800adc0:	e008      	b.n	800add4 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800adc2:	4b09      	ldr	r3, [pc, #36]	@ (800ade8 <BMP280_probe+0xd8>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800adc8:	4a0c      	ldr	r2, [pc, #48]	@ (800adfc <BMP280_probe+0xec>)
 800adca:	4b0d      	ldr	r3, [pc, #52]	@ (800ae00 <BMP280_probe+0xf0>)
 800adcc:	0019      	movs	r1, r3
 800adce:	2001      	movs	r0, #1
 800add0:	f008 f9a0 	bl	8013114 <CreateLine>
    }
    return bmp280I2Caddr;
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <BMP280_probe+0xd8>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	4193      	sbcs	r3, r2
 800addc:	b2db      	uxtb	r3, r3
}
 800adde:	0018      	movs	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b002      	add	sp, #8
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	20000094 	.word	0x20000094
 800adec:	0802bce4 	.word	0x0802bce4
 800adf0:	0802ba70 	.word	0x0802ba70
 800adf4:	0802bd14 	.word	0x0802bd14
 800adf8:	0802ba50 	.word	0x0802ba50
 800adfc:	0802bd4c 	.word	0x0802bd4c
 800ae00:	0802bd60 	.word	0x0802bd60

0800ae04 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800ae04:	b580      	push	{r7, lr}
 800ae06:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800ae08:	f7ff ff82 	bl	800ad10 <BMP280_probe>
 800ae0c:	0003      	movs	r3, r0
}
 800ae0e:	0018      	movs	r0, r3
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800ae1e:	4b05      	ldr	r3, [pc, #20]	@ (800ae34 <BMP_Init+0x20>)
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800ae24:	4b04      	ldr	r3, [pc, #16]	@ (800ae38 <BMP_Init+0x24>)
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	601a      	str	r2, [r3, #0]
}
 800ae2a:	46c0      	nop			@ (mov r8, r8)
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	b002      	add	sp, #8
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	46c0      	nop			@ (mov r8, r8)
 800ae34:	20000c04 	.word	0x20000c04
 800ae38:	20000c00 	.word	0x20000c00

0800ae3c <BMP280_set_config>:


static bool BMP280_set_config() {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800ae42:	1dbb      	adds	r3, r7, #6
 800ae44:	228c      	movs	r2, #140	@ 0x8c
 800ae46:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800ae48:	1dba      	adds	r2, r7, #6
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	20f5      	movs	r0, #245	@ 0xf5
 800ae50:	f7ff fd4e 	bl	800a8f0 <WriteMemRegister>
 800ae54:	0003      	movs	r3, r0
 800ae56:	001a      	movs	r2, r3
 800ae58:	1dfb      	adds	r3, r7, #7
 800ae5a:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800ae5c:	f008 fe9a 	bl	8013b94 <HAL_GetTick>
 800ae60:	0003      	movs	r3, r0
 800ae62:	330a      	adds	r3, #10
 800ae64:	001a      	movs	r2, r3
 800ae66:	4b06      	ldr	r3, [pc, #24]	@ (800ae80 <BMP280_set_config+0x44>)
 800ae68:	601a      	str	r2, [r3, #0]
  return rslt;
 800ae6a:	1dfb      	adds	r3, r7, #7
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b25b      	sxtb	r3, r3
 800ae70:	1e5a      	subs	r2, r3, #1
 800ae72:	4193      	sbcs	r3, r2
 800ae74:	b2db      	uxtb	r3, r3
}
 800ae76:	0018      	movs	r0, r3
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	b002      	add	sp, #8
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	20000c2c 	.word	0x20000c2c

0800ae84 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800ae8a:	1dbb      	adds	r3, r7, #6
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800ae90:	4b22      	ldr	r3, [pc, #136]	@ (800af1c <BMP280_set_mode+0x98>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	224c      	movs	r2, #76	@ 0x4c
 800ae96:	4313      	orrs	r3, r2
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	1d7b      	adds	r3, r7, #5
 800ae9c:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800ae9e:	1d7a      	adds	r2, r7, #5
 800aea0:	2301      	movs	r3, #1
 800aea2:	2101      	movs	r1, #1
 800aea4:	20f4      	movs	r0, #244	@ 0xf4
 800aea6:	f7ff fd23 	bl	800a8f0 <WriteMemRegister>
 800aeaa:	0003      	movs	r3, r0
 800aeac:	001a      	movs	r2, r3
 800aeae:	1dfb      	adds	r3, r7, #7
 800aeb0:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800aeb2:	f008 fe6f 	bl	8013b94 <HAL_GetTick>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	22fa      	movs	r2, #250	@ 0xfa
 800aeba:	0092      	lsls	r2, r2, #2
 800aebc:	189a      	adds	r2, r3, r2
 800aebe:	4b18      	ldr	r3, [pc, #96]	@ (800af20 <BMP280_set_mode+0x9c>)
 800aec0:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800aec2:	e016      	b.n	800aef2 <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800aec4:	1dba      	adds	r2, r7, #6
 800aec6:	2301      	movs	r3, #1
 800aec8:	2101      	movs	r1, #1
 800aeca:	20f3      	movs	r0, #243	@ 0xf3
 800aecc:	f7ff fd40 	bl	800a950 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800aed0:	4b13      	ldr	r3, [pc, #76]	@ (800af20 <BMP280_set_mode+0x9c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	0018      	movs	r0, r3
 800aed6:	f008 f8c7 	bl	8013068 <TimestampIsReached>
 800aeda:	1e03      	subs	r3, r0, #0
 800aedc:	d006      	beq.n	800aeec <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800aede:	4a11      	ldr	r2, [pc, #68]	@ (800af24 <BMP280_set_mode+0xa0>)
 800aee0:	4b11      	ldr	r3, [pc, #68]	@ (800af28 <BMP280_set_mode+0xa4>)
 800aee2:	0019      	movs	r1, r3
 800aee4:	2001      	movs	r0, #1
 800aee6:	f008 f915 	bl	8013114 <CreateLine>
      break;
 800aeea:	e008      	b.n	800aefe <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800aeec:	2001      	movs	r0, #1
 800aeee:	f008 fe5b 	bl	8013ba8 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800aef2:	1dbb      	adds	r3, r7, #6
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	001a      	movs	r2, r3
 800aef8:	2308      	movs	r3, #8
 800aefa:	4013      	ands	r3, r2
 800aefc:	d1e2      	bne.n	800aec4 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800aefe:	f008 fe49 	bl	8013b94 <HAL_GetTick>
 800af02:	0002      	movs	r2, r0
 800af04:	4b06      	ldr	r3, [pc, #24]	@ (800af20 <BMP280_set_mode+0x9c>)
 800af06:	601a      	str	r2, [r3, #0]
  return rslt;
 800af08:	1dfb      	adds	r3, r7, #7
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	1e5a      	subs	r2, r3, #1
 800af10:	4193      	sbcs	r3, r2
 800af12:	b2db      	uxtb	r3, r3
}
 800af14:	0018      	movs	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	b002      	add	sp, #8
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	20000095 	.word	0x20000095
 800af20:	20000c2c 	.word	0x20000c2c
 800af24:	0802bd64 	.word	0x0802bd64
 800af28:	0802bd60 	.word	0x0802bd60

0800af2c <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800af32:	1dba      	adds	r2, r7, #6
 800af34:	2301      	movs	r3, #1
 800af36:	2101      	movs	r1, #1
 800af38:	20f4      	movs	r0, #244	@ 0xf4
 800af3a:	f7ff fd09 	bl	800a950 <ReadMemRegister>
 800af3e:	0003      	movs	r3, r0
 800af40:	001a      	movs	r2, r3
 800af42:	1dfb      	adds	r3, r7, #7
 800af44:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800af46:	1dbb      	adds	r3, r7, #6
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2203      	movs	r2, #3
 800af4c:	4013      	ands	r3, r2
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	1dbb      	adds	r3, r7, #6
 800af52:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800af54:	f008 fe1e 	bl	8013b94 <HAL_GetTick>
 800af58:	0003      	movs	r3, r0
 800af5a:	330a      	adds	r3, #10
 800af5c:	001a      	movs	r2, r3
 800af5e:	4b08      	ldr	r3, [pc, #32]	@ (800af80 <BMP280_get_mode+0x54>)
 800af60:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800af62:	1dfb      	adds	r3, r7, #7
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	b25b      	sxtb	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <BMP280_get_mode+0x46>
    bmpData = 255;
 800af6c:	1dbb      	adds	r3, r7, #6
 800af6e:	22ff      	movs	r2, #255	@ 0xff
 800af70:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800af72:	1dbb      	adds	r3, r7, #6
 800af74:	781b      	ldrb	r3, [r3, #0]
}
 800af76:	0018      	movs	r0, r3
 800af78:	46bd      	mov	sp, r7
 800af7a:	b002      	add	sp, #8
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	46c0      	nop			@ (mov r8, r8)
 800af80:	20000c2c 	.word	0x20000c2c

0800af84 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800af84:	b5b0      	push	{r4, r5, r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800af8a:	1d3a      	adds	r2, r7, #4
 800af8c:	2306      	movs	r3, #6
 800af8e:	2101      	movs	r1, #1
 800af90:	20f7      	movs	r0, #247	@ 0xf7
 800af92:	f7ff fcdd 	bl	800a950 <ReadMemRegister>
 800af96:	0003      	movs	r3, r0
 800af98:	001a      	movs	r2, r3
 800af9a:	230f      	movs	r3, #15
 800af9c:	18fb      	adds	r3, r7, r3
 800af9e:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800afa0:	1d3b      	adds	r3, r7, #4
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b80      	cmp	r3, #128	@ 0x80
 800afa6:	d013      	beq.n	800afd0 <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800afa8:	1d3b      	adds	r3, r7, #4
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	031a      	lsls	r2, r3, #12
 800afae:	1d3b      	adds	r3, r7, #4
 800afb0:	785b      	ldrb	r3, [r3, #1]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	18d3      	adds	r3, r2, r3
 800afb6:	1d3a      	adds	r2, r7, #4
 800afb8:	7892      	ldrb	r2, [r2, #2]
 800afba:	0912      	lsrs	r2, r2, #4
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	189b      	adds	r3, r3, r2
 800afc0:	001a      	movs	r2, r3
 800afc2:	4b2e      	ldr	r3, [pc, #184]	@ (800b07c <BMP280_get_measurement_values+0xf8>)
 800afc4:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800afc6:	1d3b      	adds	r3, r7, #4
 800afc8:	78db      	ldrb	r3, [r3, #3]
 800afca:	2b80      	cmp	r3, #128	@ 0x80
 800afcc:	d035      	beq.n	800b03a <BMP280_get_measurement_values+0xb6>
 800afce:	e01d      	b.n	800b00c <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800afd0:	4a2b      	ldr	r2, [pc, #172]	@ (800b080 <BMP280_get_measurement_values+0xfc>)
 800afd2:	4b2c      	ldr	r3, [pc, #176]	@ (800b084 <BMP280_get_measurement_values+0x100>)
 800afd4:	0019      	movs	r1, r3
 800afd6:	2001      	movs	r0, #1
 800afd8:	f008 f89c 	bl	8013114 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800afdc:	1d3b      	adds	r3, r7, #4
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	001d      	movs	r5, r3
 800afe2:	1d3b      	adds	r3, r7, #4
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	0018      	movs	r0, r3
 800afe8:	1d3b      	adds	r3, r7, #4
 800afea:	789b      	ldrb	r3, [r3, #2]
 800afec:	001c      	movs	r4, r3
 800afee:	4b23      	ldr	r3, [pc, #140]	@ (800b07c <BMP280_get_measurement_values+0xf8>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a25      	ldr	r2, [pc, #148]	@ (800b088 <BMP280_get_measurement_values+0x104>)
 800aff4:	4925      	ldr	r1, [pc, #148]	@ (800b08c <BMP280_get_measurement_values+0x108>)
 800aff6:	9302      	str	r3, [sp, #8]
 800aff8:	9401      	str	r4, [sp, #4]
 800affa:	9000      	str	r0, [sp, #0]
 800affc:	002b      	movs	r3, r5
 800affe:	2003      	movs	r0, #3
 800b000:	f008 f888 	bl	8013114 <CreateLine>
    SetAllBlueLED();
 800b004:	f006 ffbc 	bl	8011f80 <SetAllBlueLED>
    return false;
 800b008:	2300      	movs	r3, #0
 800b00a:	e033      	b.n	800b074 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800b00c:	1d3b      	adds	r3, r7, #4
 800b00e:	78db      	ldrb	r3, [r3, #3]
 800b010:	031a      	lsls	r2, r3, #12
 800b012:	1d3b      	adds	r3, r7, #4
 800b014:	791b      	ldrb	r3, [r3, #4]
 800b016:	011b      	lsls	r3, r3, #4
 800b018:	18d3      	adds	r3, r2, r3
 800b01a:	1d3a      	adds	r2, r7, #4
 800b01c:	7952      	ldrb	r2, [r2, #5]
 800b01e:	0912      	lsrs	r2, r2, #4
 800b020:	b2d2      	uxtb	r2, r2
 800b022:	189b      	adds	r3, r3, r2
 800b024:	001a      	movs	r2, r3
 800b026:	4b1a      	ldr	r3, [pc, #104]	@ (800b090 <BMP280_get_measurement_values+0x10c>)
 800b028:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800b02a:	230f      	movs	r3, #15
 800b02c:	18fb      	adds	r3, r7, r3
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	b25b      	sxtb	r3, r3
 800b032:	1e5a      	subs	r2, r3, #1
 800b034:	4193      	sbcs	r3, r2
 800b036:	b2db      	uxtb	r3, r3
 800b038:	e01c      	b.n	800b074 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800b03a:	4a16      	ldr	r2, [pc, #88]	@ (800b094 <BMP280_get_measurement_values+0x110>)
 800b03c:	4b11      	ldr	r3, [pc, #68]	@ (800b084 <BMP280_get_measurement_values+0x100>)
 800b03e:	0019      	movs	r1, r3
 800b040:	2001      	movs	r0, #1
 800b042:	f008 f867 	bl	8013114 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800b046:	1d3b      	adds	r3, r7, #4
 800b048:	78db      	ldrb	r3, [r3, #3]
 800b04a:	001d      	movs	r5, r3
 800b04c:	1d3b      	adds	r3, r7, #4
 800b04e:	791b      	ldrb	r3, [r3, #4]
 800b050:	0018      	movs	r0, r3
 800b052:	1d3b      	adds	r3, r7, #4
 800b054:	795b      	ldrb	r3, [r3, #5]
 800b056:	001c      	movs	r4, r3
 800b058:	4b0d      	ldr	r3, [pc, #52]	@ (800b090 <BMP280_get_measurement_values+0x10c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a0e      	ldr	r2, [pc, #56]	@ (800b098 <BMP280_get_measurement_values+0x114>)
 800b05e:	490b      	ldr	r1, [pc, #44]	@ (800b08c <BMP280_get_measurement_values+0x108>)
 800b060:	9302      	str	r3, [sp, #8]
 800b062:	9401      	str	r4, [sp, #4]
 800b064:	9000      	str	r0, [sp, #0]
 800b066:	002b      	movs	r3, r5
 800b068:	2003      	movs	r0, #3
 800b06a:	f008 f853 	bl	8013114 <CreateLine>
    SetAllBlueLED();
 800b06e:	f006 ff87 	bl	8011f80 <SetAllBlueLED>
    return false;
 800b072:	2300      	movs	r3, #0
}
 800b074:	0018      	movs	r0, r3
 800b076:	46bd      	mov	sp, r7
 800b078:	b004      	add	sp, #16
 800b07a:	bdb0      	pop	{r4, r5, r7, pc}
 800b07c:	20000c28 	.word	0x20000c28
 800b080:	0802bd90 	.word	0x0802bd90
 800b084:	0802bd60 	.word	0x0802bd60
 800b088:	0802bdbc 	.word	0x0802bdbc
 800b08c:	0802ba70 	.word	0x0802ba70
 800b090:	20000c24 	.word	0x20000c24
 800b094:	0802be04 	.word	0x0802be04
 800b098:	0802be28 	.word	0x0802be28

0800b09c <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800b0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800b11c <BMP280_calc_temperature+0x80>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	10da      	asrs	r2, r3, #3
 800b0ac:	4b1c      	ldr	r3, [pc, #112]	@ (800b120 <BMP280_calc_temperature+0x84>)
 800b0ae:	881b      	ldrh	r3, [r3, #0]
 800b0b0:	005b      	lsls	r3, r3, #1
 800b0b2:	1ad3      	subs	r3, r2, r3
 800b0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800b120 <BMP280_calc_temperature+0x84>)
 800b0b6:	2102      	movs	r1, #2
 800b0b8:	5e52      	ldrsh	r2, [r2, r1]
 800b0ba:	4353      	muls	r3, r2
 800b0bc:	12db      	asrs	r3, r3, #11
 800b0be:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	111b      	asrs	r3, r3, #4
 800b0c4:	4a16      	ldr	r2, [pc, #88]	@ (800b120 <BMP280_calc_temperature+0x84>)
 800b0c6:	8812      	ldrh	r2, [r2, #0]
 800b0c8:	1a9b      	subs	r3, r3, r2
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	1112      	asrs	r2, r2, #4
 800b0ce:	4914      	ldr	r1, [pc, #80]	@ (800b120 <BMP280_calc_temperature+0x84>)
 800b0d0:	8809      	ldrh	r1, [r1, #0]
 800b0d2:	1a52      	subs	r2, r2, r1
 800b0d4:	4353      	muls	r3, r2
 800b0d6:	131b      	asrs	r3, r3, #12
 800b0d8:	4a11      	ldr	r2, [pc, #68]	@ (800b120 <BMP280_calc_temperature+0x84>)
 800b0da:	2104      	movs	r1, #4
 800b0dc:	5e52      	ldrsh	r2, [r2, r1]
 800b0de:	4353      	muls	r3, r2
 800b0e0:	139b      	asrs	r3, r3, #14
 800b0e2:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	18d2      	adds	r2, r2, r3
 800b0ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b124 <BMP280_calc_temperature+0x88>)
 800b0ec:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800b0ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b124 <BMP280_calc_temperature+0x88>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	0013      	movs	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	189b      	adds	r3, r3, r2
 800b0f8:	3380      	adds	r3, #128	@ 0x80
 800b0fa:	121b      	asrs	r3, r3, #8
 800b0fc:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800b0fe:	68b8      	ldr	r0, [r7, #8]
 800b100:	f7f6 fb92 	bl	8001828 <__aeabi_i2f>
 800b104:	1c03      	adds	r3, r0, #0
 800b106:	4908      	ldr	r1, [pc, #32]	@ (800b128 <BMP280_calc_temperature+0x8c>)
 800b108:	1c18      	adds	r0, r3, #0
 800b10a:	f7f5 fdcb 	bl	8000ca4 <__aeabi_fdiv>
 800b10e:	1c03      	adds	r3, r0, #0
 800b110:	607b      	str	r3, [r7, #4]
  return airTemp;
 800b112:	687b      	ldr	r3, [r7, #4]
}
 800b114:	1c18      	adds	r0, r3, #0
 800b116:	46bd      	mov	sp, r7
 800b118:	b006      	add	sp, #24
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000c24 	.word	0x20000c24
 800b120:	20000c08 	.word	0x20000c08
 800b124:	20000c20 	.word	0x20000c20
 800b128:	42c80000 	.word	0x42c80000

0800b12c <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800b132:	4b4e      	ldr	r3, [pc, #312]	@ (800b26c <BMP280_calc_pressure+0x140>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800b138:	4b4d      	ldr	r3, [pc, #308]	@ (800b270 <BMP280_calc_pressure+0x144>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	105b      	asrs	r3, r3, #1
 800b13e:	4a4d      	ldr	r2, [pc, #308]	@ (800b274 <BMP280_calc_pressure+0x148>)
 800b140:	4694      	mov	ip, r2
 800b142:	4463      	add	r3, ip
 800b144:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	109b      	asrs	r3, r3, #2
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	1092      	asrs	r2, r2, #2
 800b14e:	4353      	muls	r3, r2
 800b150:	12db      	asrs	r3, r3, #11
 800b152:	4a49      	ldr	r2, [pc, #292]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b154:	2110      	movs	r1, #16
 800b156:	5e52      	ldrsh	r2, [r2, r1]
 800b158:	4353      	muls	r3, r2
 800b15a:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800b15c:	4b46      	ldr	r3, [pc, #280]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b15e:	220e      	movs	r2, #14
 800b160:	5e9b      	ldrsh	r3, [r3, r2]
 800b162:	001a      	movs	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4353      	muls	r3, r2
 800b168:	005b      	lsls	r3, r3, #1
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	18d3      	adds	r3, r2, r3
 800b16e:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	109a      	asrs	r2, r3, #2
 800b174:	4b40      	ldr	r3, [pc, #256]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b176:	210c      	movs	r1, #12
 800b178:	5e5b      	ldrsh	r3, [r3, r1]
 800b17a:	041b      	lsls	r3, r3, #16
 800b17c:	18d3      	adds	r3, r2, r3
 800b17e:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800b180:	4b3d      	ldr	r3, [pc, #244]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b182:	220a      	movs	r2, #10
 800b184:	5e9b      	ldrsh	r3, [r3, r2]
 800b186:	0019      	movs	r1, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	109b      	asrs	r3, r3, #2
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	1092      	asrs	r2, r2, #2
 800b190:	4353      	muls	r3, r2
 800b192:	135b      	asrs	r3, r3, #13
 800b194:	434b      	muls	r3, r1
 800b196:	10da      	asrs	r2, r3, #3
 800b198:	4b37      	ldr	r3, [pc, #220]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b19a:	2108      	movs	r1, #8
 800b19c:	5e5b      	ldrsh	r3, [r3, r1]
 800b19e:	0019      	movs	r1, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	434b      	muls	r3, r1
 800b1a4:	105b      	asrs	r3, r3, #1
 800b1a6:	18d3      	adds	r3, r2, r3
 800b1a8:	149b      	asrs	r3, r3, #18
 800b1aa:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2280      	movs	r2, #128	@ 0x80
 800b1b0:	0212      	lsls	r2, r2, #8
 800b1b2:	4694      	mov	ip, r2
 800b1b4:	4463      	add	r3, ip
 800b1b6:	4a30      	ldr	r2, [pc, #192]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b1b8:	88d2      	ldrh	r2, [r2, #6]
 800b1ba:	4353      	muls	r3, r2
 800b1bc:	13db      	asrs	r3, r3, #15
 800b1be:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <BMP280_calc_pressure+0x9e>
    return 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e04b      	b.n	800b262 <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2280      	movs	r2, #128	@ 0x80
 800b1ce:	0352      	lsls	r2, r2, #13
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	131b      	asrs	r3, r3, #12
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	001a      	movs	r2, r3
 800b1da:	4b28      	ldr	r3, [pc, #160]	@ (800b27c <BMP280_calc_pressure+0x150>)
 800b1dc:	4353      	muls	r3, r2
 800b1de:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	db09      	blt.n	800b1fa <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	005b      	lsls	r3, r3, #1
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	0011      	movs	r1, r2
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f7f4 ffd8 	bl	80001a4 <__udivsi3>
 800b1f4:	0003      	movs	r3, r0
 800b1f6:	617b      	str	r3, [r7, #20]
 800b1f8:	e007      	b.n	800b20a <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	0019      	movs	r1, r3
 800b1fe:	6978      	ldr	r0, [r7, #20]
 800b200:	f7f4 ffd0 	bl	80001a4 <__udivsi3>
 800b204:	0003      	movs	r3, r0
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800b20a:	4b1b      	ldr	r3, [pc, #108]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b20c:	2216      	movs	r2, #22
 800b20e:	5e9b      	ldrsh	r3, [r3, r2]
 800b210:	0019      	movs	r1, r3
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	08db      	lsrs	r3, r3, #3
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	08d2      	lsrs	r2, r2, #3
 800b21a:	4353      	muls	r3, r2
 800b21c:	0b5b      	lsrs	r3, r3, #13
 800b21e:	434b      	muls	r3, r1
 800b220:	131b      	asrs	r3, r3, #12
 800b222:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	089b      	lsrs	r3, r3, #2
 800b228:	001a      	movs	r2, r3
 800b22a:	4b13      	ldr	r3, [pc, #76]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b22c:	2114      	movs	r1, #20
 800b22e:	5e5b      	ldrsh	r3, [r3, r1]
 800b230:	4353      	muls	r3, r2
 800b232:	135b      	asrs	r3, r3, #13
 800b234:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	18d3      	adds	r3, r2, r3
 800b23c:	4a0e      	ldr	r2, [pc, #56]	@ (800b278 <BMP280_calc_pressure+0x14c>)
 800b23e:	2112      	movs	r1, #18
 800b240:	5e52      	ldrsh	r2, [r2, r1]
 800b242:	189b      	adds	r3, r3, r2
 800b244:	111a      	asrs	r2, r3, #4
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	18d3      	adds	r3, r2, r3
 800b24a:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800b24c:	6978      	ldr	r0, [r7, #20]
 800b24e:	f7f6 fb3b 	bl	80018c8 <__aeabi_ui2f>
 800b252:	1c03      	adds	r3, r0, #0
 800b254:	490a      	ldr	r1, [pc, #40]	@ (800b280 <BMP280_calc_pressure+0x154>)
 800b256:	1c18      	adds	r0, r3, #0
 800b258:	f7f5 fd24 	bl	8000ca4 <__aeabi_fdiv>
 800b25c:	1c03      	adds	r3, r0, #0
 800b25e:	607b      	str	r3, [r7, #4]
  return airhPa;
 800b260:	687b      	ldr	r3, [r7, #4]
}
 800b262:	1c18      	adds	r0, r3, #0
 800b264:	46bd      	mov	sp, r7
 800b266:	b006      	add	sp, #24
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	46c0      	nop			@ (mov r8, r8)
 800b26c:	20000c28 	.word	0x20000c28
 800b270:	20000c20 	.word	0x20000c20
 800b274:	ffff0600 	.word	0xffff0600
 800b278:	20000c08 	.word	0x20000c08
 800b27c:	00000c35 	.word	0x00000c35
 800b280:	42c80000 	.word	0x42c80000

0800b284 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800b284:	b5b0      	push	{r4, r5, r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800b28a:	4bba      	ldr	r3, [pc, #744]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	0018      	movs	r0, r3
 800b290:	f007 feea 	bl	8013068 <TimestampIsReached>
 800b294:	0003      	movs	r3, r0
 800b296:	001a      	movs	r2, r3
 800b298:	2301      	movs	r3, #1
 800b29a:	4053      	eors	r3, r2
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <BMP_Upkeep+0x24>
    return BMPState;
 800b2a2:	4bb5      	ldr	r3, [pc, #724]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	e161      	b.n	800b56c <BMP_Upkeep+0x2e8>
  }
  switch(BMPState) {
 800b2a8:	4bb3      	ldr	r3, [pc, #716]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b09      	cmp	r3, #9
 800b2ae:	d900      	bls.n	800b2b2 <BMP_Upkeep+0x2e>
 800b2b0:	e145      	b.n	800b53e <BMP_Upkeep+0x2ba>
 800b2b2:	009a      	lsls	r2, r3, #2
 800b2b4:	4bb1      	ldr	r3, [pc, #708]	@ (800b57c <BMP_Upkeep+0x2f8>)
 800b2b6:	18d3      	adds	r3, r2, r3
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800b2bc:	4ab0      	ldr	r2, [pc, #704]	@ (800b580 <BMP_Upkeep+0x2fc>)
 800b2be:	4bb1      	ldr	r3, [pc, #708]	@ (800b584 <BMP_Upkeep+0x300>)
 800b2c0:	0019      	movs	r1, r3
 800b2c2:	2003      	movs	r0, #3
 800b2c4:	f007 ff26 	bl	8013114 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 3120000;  // once an hour
 800b2c8:	f008 fc64 	bl	8013b94 <HAL_GetTick>
 800b2cc:	0003      	movs	r3, r0
 800b2ce:	4aae      	ldr	r2, [pc, #696]	@ (800b588 <BMP_Upkeep+0x304>)
 800b2d0:	189a      	adds	r2, r3, r2
 800b2d2:	4ba8      	ldr	r3, [pc, #672]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b2d4:	601a      	str	r2, [r3, #0]
    break;
 800b2d6:	e147      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800b2d8:	f001 ffaa 	bl	800d230 <getSensorLock>
 800b2dc:	1e03      	subs	r3, r0, #0
 800b2de:	d000      	beq.n	800b2e2 <BMP_Upkeep+0x5e>
 800b2e0:	e139      	b.n	800b556 <BMP_Upkeep+0x2d2>
      break;
    }
    setSensorLock(BMP280);
 800b2e2:	2003      	movs	r0, #3
 800b2e4:	f001 ff90 	bl	800d208 <setSensorLock>
    BMP280_reset();
 800b2e8:	f7ff fb74 	bl	800a9d4 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800b2ec:	200a      	movs	r0, #10
 800b2ee:	f008 fc5b 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	f001 ff88 	bl	800d208 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800b2f8:	4b9f      	ldr	r3, [pc, #636]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	701a      	strb	r2, [r3, #0]
    break;
 800b2fe:	e133      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800b300:	f001 ff96 	bl	800d230 <getSensorLock>
 800b304:	1e03      	subs	r3, r0, #0
 800b306:	d000      	beq.n	800b30a <BMP_Upkeep+0x86>
 800b308:	e127      	b.n	800b55a <BMP_Upkeep+0x2d6>
      break;
    }
    setSensorLock(BMP280);
 800b30a:	2003      	movs	r0, #3
 800b30c:	f001 ff7c 	bl	800d208 <setSensorLock>
    if (BMP280_set_config()) {
 800b310:	f7ff fd94 	bl	800ae3c <BMP280_set_config>
 800b314:	1e03      	subs	r3, r0, #0
 800b316:	d003      	beq.n	800b320 <BMP_Upkeep+0x9c>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b318:	4b97      	ldr	r3, [pc, #604]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b31a:	2202      	movs	r2, #2
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e00f      	b.n	800b340 <BMP_Upkeep+0xbc>
    }
    else {
      Error("Error while configuring BMP280");
 800b320:	4a9a      	ldr	r2, [pc, #616]	@ (800b58c <BMP_Upkeep+0x308>)
 800b322:	4b9b      	ldr	r3, [pc, #620]	@ (800b590 <BMP_Upkeep+0x30c>)
 800b324:	0019      	movs	r1, r3
 800b326:	2001      	movs	r0, #1
 800b328:	f007 fef4 	bl	8013114 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b32c:	f008 fc32 	bl	8013b94 <HAL_GetTick>
 800b330:	0003      	movs	r3, r0
 800b332:	4a98      	ldr	r2, [pc, #608]	@ (800b594 <BMP_Upkeep+0x310>)
 800b334:	189a      	adds	r2, r3, r2
 800b336:	4b8f      	ldr	r3, [pc, #572]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b338:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b33a:	4b8f      	ldr	r3, [pc, #572]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b33c:	2208      	movs	r2, #8
 800b33e:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b340:	200a      	movs	r0, #10
 800b342:	f008 fc31 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 800b346:	2000      	movs	r0, #0
 800b348:	f001 ff5e 	bl	800d208 <setSensorLock>
  break;
 800b34c:	e10c      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b34e:	f001 ff6f 	bl	800d230 <getSensorLock>
 800b352:	1e03      	subs	r3, r0, #0
 800b354:	d030      	beq.n	800b3b8 <BMP_Upkeep+0x134>
      uint8_t locktype = getSensorLock();
 800b356:	1dfc      	adds	r4, r7, #7
 800b358:	f001 ff6a 	bl	800d230 <getSensorLock>
 800b35c:	0003      	movs	r3, r0
 800b35e:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800b360:	1dfb      	adds	r3, r7, #7
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d019      	beq.n	800b39c <BMP_Upkeep+0x118>
 800b368:	1dfb      	adds	r3, r7, #7
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d013      	beq.n	800b398 <BMP_Upkeep+0x114>
 800b370:	1dfb      	adds	r3, r7, #7
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	2b05      	cmp	r3, #5
 800b376:	d00d      	beq.n	800b394 <BMP_Upkeep+0x110>
 800b378:	1dfb      	adds	r3, r7, #7
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d007      	beq.n	800b390 <BMP_Upkeep+0x10c>
 800b380:	1dfb      	adds	r3, r7, #7
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b03      	cmp	r3, #3
 800b386:	d101      	bne.n	800b38c <BMP_Upkeep+0x108>
 800b388:	4b83      	ldr	r3, [pc, #524]	@ (800b598 <BMP_Upkeep+0x314>)
 800b38a:	e008      	b.n	800b39e <BMP_Upkeep+0x11a>
 800b38c:	4b83      	ldr	r3, [pc, #524]	@ (800b59c <BMP_Upkeep+0x318>)
 800b38e:	e006      	b.n	800b39e <BMP_Upkeep+0x11a>
 800b390:	4b83      	ldr	r3, [pc, #524]	@ (800b5a0 <BMP_Upkeep+0x31c>)
 800b392:	e004      	b.n	800b39e <BMP_Upkeep+0x11a>
 800b394:	4b83      	ldr	r3, [pc, #524]	@ (800b5a4 <BMP_Upkeep+0x320>)
 800b396:	e002      	b.n	800b39e <BMP_Upkeep+0x11a>
 800b398:	4b83      	ldr	r3, [pc, #524]	@ (800b5a8 <BMP_Upkeep+0x324>)
 800b39a:	e000      	b.n	800b39e <BMP_Upkeep+0x11a>
 800b39c:	4b83      	ldr	r3, [pc, #524]	@ (800b5ac <BMP_Upkeep+0x328>)
 800b39e:	4a84      	ldr	r2, [pc, #528]	@ (800b5b0 <BMP_Upkeep+0x32c>)
 800b3a0:	4978      	ldr	r1, [pc, #480]	@ (800b584 <BMP_Upkeep+0x300>)
 800b3a2:	2003      	movs	r0, #3
 800b3a4:	f007 feb6 	bl	8013114 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800b3a8:	f008 fbf4 	bl	8013b94 <HAL_GetTick>
 800b3ac:	0003      	movs	r3, r0
 800b3ae:	3361      	adds	r3, #97	@ 0x61
 800b3b0:	001a      	movs	r2, r3
 800b3b2:	4b70      	ldr	r3, [pc, #448]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b3b4:	601a      	str	r2, [r3, #0]
      break;
 800b3b6:	e0d7      	b.n	800b568 <BMP_Upkeep+0x2e4>
    }
    if (getSensorLock() == FREE) {
 800b3b8:	f001 ff3a 	bl	800d230 <getSensorLock>
 800b3bc:	1e03      	subs	r3, r0, #0
 800b3be:	d105      	bne.n	800b3cc <BMP_Upkeep+0x148>
      HAL_Delay(10);
 800b3c0:	200a      	movs	r0, #10
 800b3c2:	f008 fbf1 	bl	8013ba8 <HAL_Delay>
      setSensorLock(BMP280);
 800b3c6:	2003      	movs	r0, #3
 800b3c8:	f001 ff1e 	bl	800d208 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800b3cc:	f7ff fd5a 	bl	800ae84 <BMP280_set_mode>
 800b3d0:	1e03      	subs	r3, r0, #0
 800b3d2:	d003      	beq.n	800b3dc <BMP_Upkeep+0x158>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b3d4:	4b68      	ldr	r3, [pc, #416]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b3d6:	2205      	movs	r2, #5
 800b3d8:	701a      	strb	r2, [r3, #0]
 800b3da:	e00f      	b.n	800b3fc <BMP_Upkeep+0x178>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800b3dc:	4a75      	ldr	r2, [pc, #468]	@ (800b5b4 <BMP_Upkeep+0x330>)
 800b3de:	4b6c      	ldr	r3, [pc, #432]	@ (800b590 <BMP_Upkeep+0x30c>)
 800b3e0:	0019      	movs	r1, r3
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	f007 fe96 	bl	8013114 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b3e8:	f008 fbd4 	bl	8013b94 <HAL_GetTick>
 800b3ec:	0003      	movs	r3, r0
 800b3ee:	4a69      	ldr	r2, [pc, #420]	@ (800b594 <BMP_Upkeep+0x310>)
 800b3f0:	189a      	adds	r2, r3, r2
 800b3f2:	4b60      	ldr	r3, [pc, #384]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b3f4:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b3f6:	4b60      	ldr	r3, [pc, #384]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b3fc:	200a      	movs	r0, #10
 800b3fe:	f008 fbd3 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 800b402:	2000      	movs	r0, #0
 800b404:	f001 ff00 	bl	800d208 <setSensorLock>
    break;
 800b408:	e0ae      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800b40a:	f001 ff11 	bl	800d230 <getSensorLock>
 800b40e:	1e03      	subs	r3, r0, #0
 800b410:	d000      	beq.n	800b414 <BMP_Upkeep+0x190>
 800b412:	e0a4      	b.n	800b55e <BMP_Upkeep+0x2da>
      break;
    }
    HAL_Delay(10);
 800b414:	200a      	movs	r0, #10
 800b416:	f008 fbc7 	bl	8013ba8 <HAL_Delay>
    setSensorLock(BMP280);
 800b41a:	2003      	movs	r0, #3
 800b41c:	f001 fef4 	bl	800d208 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800b420:	f7ff fdb0 	bl	800af84 <BMP280_get_measurement_values>
 800b424:	1e03      	subs	r3, r0, #0
 800b426:	d003      	beq.n	800b430 <BMP_Upkeep+0x1ac>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800b428:	4b53      	ldr	r3, [pc, #332]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b42a:	2203      	movs	r2, #3
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e00f      	b.n	800b450 <BMP_Upkeep+0x1cc>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800b430:	4a61      	ldr	r2, [pc, #388]	@ (800b5b8 <BMP_Upkeep+0x334>)
 800b432:	4b57      	ldr	r3, [pc, #348]	@ (800b590 <BMP_Upkeep+0x30c>)
 800b434:	0019      	movs	r1, r3
 800b436:	2001      	movs	r0, #1
 800b438:	f007 fe6c 	bl	8013114 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b43c:	f008 fbaa 	bl	8013b94 <HAL_GetTick>
 800b440:	0003      	movs	r3, r0
 800b442:	4a54      	ldr	r2, [pc, #336]	@ (800b594 <BMP_Upkeep+0x310>)
 800b444:	189a      	adds	r2, r3, r2
 800b446:	4b4b      	ldr	r3, [pc, #300]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b448:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800b44a:	4b4b      	ldr	r3, [pc, #300]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b44c:	2208      	movs	r2, #8
 800b44e:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b450:	200a      	movs	r0, #10
 800b452:	f008 fba9 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 800b456:	2000      	movs	r0, #0
 800b458:	f001 fed6 	bl	800d208 <setSensorLock>
  break;
 800b45c:	e084      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800b45e:	f7ff fe1d 	bl	800b09c <BMP280_calc_temperature>
 800b462:	1c03      	adds	r3, r0, #0
 800b464:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800b466:	f7ff fe61 	bl	800b12c <BMP280_calc_pressure>
 800b46a:	1c03      	adds	r3, r0, #0
 800b46c:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800b46e:	4953      	ldr	r1, [pc, #332]	@ (800b5bc <BMP_Upkeep+0x338>)
 800b470:	68b8      	ldr	r0, [r7, #8]
 800b472:	f7f5 f871 	bl	8000558 <__aeabi_fcmpgt>
 800b476:	1e03      	subs	r3, r0, #0
 800b478:	d02b      	beq.n	800b4d2 <BMP_Upkeep+0x24e>
 800b47a:	4951      	ldr	r1, [pc, #324]	@ (800b5c0 <BMP_Upkeep+0x33c>)
 800b47c:	68b8      	ldr	r0, [r7, #8]
 800b47e:	f7f5 f857 	bl	8000530 <__aeabi_fcmplt>
 800b482:	1e03      	subs	r3, r0, #0
 800b484:	d025      	beq.n	800b4d2 <BMP_Upkeep+0x24e>
      sethPa(airhpa);
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	1c18      	adds	r0, r3, #0
 800b48a:	f7f9 fb87 	bl	8004b9c <sethPa>
      Info("BMP280 airtemperature: %2.2fC barometric value: %.2fhPa", airtemp, airhpa);
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7f8 fa00 	bl	8003894 <__aeabi_f2d>
 800b494:	0004      	movs	r4, r0
 800b496:	000d      	movs	r5, r1
 800b498:	68b8      	ldr	r0, [r7, #8]
 800b49a:	f7f8 f9fb 	bl	8003894 <__aeabi_f2d>
 800b49e:	0002      	movs	r2, r0
 800b4a0:	000b      	movs	r3, r1
 800b4a2:	4848      	ldr	r0, [pc, #288]	@ (800b5c4 <BMP_Upkeep+0x340>)
 800b4a4:	4948      	ldr	r1, [pc, #288]	@ (800b5c8 <BMP_Upkeep+0x344>)
 800b4a6:	9202      	str	r2, [sp, #8]
 800b4a8:	9303      	str	r3, [sp, #12]
 800b4aa:	9400      	str	r4, [sp, #0]
 800b4ac:	9501      	str	r5, [sp, #4]
 800b4ae:	0002      	movs	r2, r0
 800b4b0:	2002      	movs	r0, #2
 800b4b2:	f007 fe2f 	bl	8013114 <CreateLine>
      setBMP280(airtemp, airhpa);
 800b4b6:	68ba      	ldr	r2, [r7, #8]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	1c11      	adds	r1, r2, #0
 800b4bc:	1c18      	adds	r0, r3, #0
 800b4be:	f7f9 fb09 	bl	8004ad4 <setBMP280>
      BMP280TimeStamp = HAL_GetTick() + 60000;
 800b4c2:	f008 fb67 	bl	8013b94 <HAL_GetTick>
 800b4c6:	0003      	movs	r3, r0
 800b4c8:	4a40      	ldr	r2, [pc, #256]	@ (800b5cc <BMP_Upkeep+0x348>)
 800b4ca:	189a      	adds	r2, r3, r2
 800b4cc:	4b29      	ldr	r3, [pc, #164]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	e00c      	b.n	800b4ec <BMP_Upkeep+0x268>
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800b4d2:	4a3f      	ldr	r2, [pc, #252]	@ (800b5d0 <BMP_Upkeep+0x34c>)
 800b4d4:	4b2e      	ldr	r3, [pc, #184]	@ (800b590 <BMP_Upkeep+0x30c>)
 800b4d6:	0019      	movs	r1, r3
 800b4d8:	2001      	movs	r0, #1
 800b4da:	f007 fe1b 	bl	8013114 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800b4de:	f008 fb59 	bl	8013b94 <HAL_GetTick>
 800b4e2:	0003      	movs	r3, r0
 800b4e4:	4a2b      	ldr	r2, [pc, #172]	@ (800b594 <BMP_Upkeep+0x310>)
 800b4e6:	189a      	adds	r2, r3, r2
 800b4e8:	4b22      	ldr	r3, [pc, #136]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b4ea:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800b4ec:	4b22      	ldr	r3, [pc, #136]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b4ee:	2208      	movs	r2, #8
 800b4f0:	701a      	strb	r2, [r3, #0]
    break;
 800b4f2:	e039      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800b4f4:	4b20      	ldr	r3, [pc, #128]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b4f6:	2209      	movs	r2, #9
 800b4f8:	701a      	strb	r2, [r3, #0]
    break;
 800b4fa:	e035      	b.n	800b568 <BMP_Upkeep+0x2e4>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800b4fc:	f001 fe98 	bl	800d230 <getSensorLock>
 800b500:	1e03      	subs	r3, r0, #0
 800b502:	d12e      	bne.n	800b562 <BMP_Upkeep+0x2de>
      break;
    }
    setSensorLock(BMP280);
 800b504:	2003      	movs	r0, #3
 800b506:	f001 fe7f 	bl	800d208 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800b50a:	f7ff fd0f 	bl	800af2c <BMP280_get_mode>
 800b50e:	0003      	movs	r3, r0
 800b510:	2b03      	cmp	r3, #3
 800b512:	d103      	bne.n	800b51c <BMP_Upkeep+0x298>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800b514:	4b18      	ldr	r3, [pc, #96]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b516:	2205      	movs	r2, #5
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e002      	b.n	800b522 <BMP_Upkeep+0x29e>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800b51c:	4b16      	ldr	r3, [pc, #88]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b51e:	2202      	movs	r2, #2
 800b520:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800b522:	200a      	movs	r0, #10
 800b524:	f008 fb40 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 800b528:	2000      	movs	r0, #0
 800b52a:	f001 fe6d 	bl	800d208 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800b52e:	f008 fb31 	bl	8013b94 <HAL_GetTick>
 800b532:	0003      	movs	r3, r0
 800b534:	3317      	adds	r3, #23
 800b536:	001a      	movs	r2, r3
 800b538:	4b0e      	ldr	r3, [pc, #56]	@ (800b574 <BMP_Upkeep+0x2f0>)
 800b53a:	601a      	str	r2, [r3, #0]
    break;
 800b53c:	e014      	b.n	800b568 <BMP_Upkeep+0x2e4>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800b53e:	4b0e      	ldr	r3, [pc, #56]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b540:	2200      	movs	r2, #0
 800b542:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800b544:	f001 fe74 	bl	800d230 <getSensorLock>
 800b548:	0003      	movs	r3, r0
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d10b      	bne.n	800b566 <BMP_Upkeep+0x2e2>
      setSensorLock(FREE);
 800b54e:	2000      	movs	r0, #0
 800b550:	f001 fe5a 	bl	800d208 <setSensorLock>
    }
    break;
 800b554:	e007      	b.n	800b566 <BMP_Upkeep+0x2e2>
      break;
 800b556:	46c0      	nop			@ (mov r8, r8)
 800b558:	e006      	b.n	800b568 <BMP_Upkeep+0x2e4>
      break;
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	e004      	b.n	800b568 <BMP_Upkeep+0x2e4>
      break;
 800b55e:	46c0      	nop			@ (mov r8, r8)
 800b560:	e002      	b.n	800b568 <BMP_Upkeep+0x2e4>
      break;
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	e000      	b.n	800b568 <BMP_Upkeep+0x2e4>
    break;
 800b566:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800b568:	4b03      	ldr	r3, [pc, #12]	@ (800b578 <BMP_Upkeep+0x2f4>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
}
 800b56c:	0018      	movs	r0, r3
 800b56e:	46bd      	mov	sp, r7
 800b570:	b004      	add	sp, #16
 800b572:	bdb0      	pop	{r4, r5, r7, pc}
 800b574:	20000c2c 	.word	0x20000c2c
 800b578:	20000096 	.word	0x20000096
 800b57c:	0802d8e8 	.word	0x0802d8e8
 800b580:	0802be70 	.word	0x0802be70
 800b584:	0802ba70 	.word	0x0802ba70
 800b588:	002f9b80 	.word	0x002f9b80
 800b58c:	0802beac 	.word	0x0802beac
 800b590:	0802bd60 	.word	0x0802bd60
 800b594:	00002710 	.word	0x00002710
 800b598:	0802becc 	.word	0x0802becc
 800b59c:	0802bed4 	.word	0x0802bed4
 800b5a0:	0802bedc 	.word	0x0802bedc
 800b5a4:	0802bee4 	.word	0x0802bee4
 800b5a8:	0802beec 	.word	0x0802beec
 800b5ac:	0802bef4 	.word	0x0802bef4
 800b5b0:	0802befc 	.word	0x0802befc
 800b5b4:	0802bf24 	.word	0x0802bf24
 800b5b8:	0802bf50 	.word	0x0802bf50
 800b5bc:	44548000 	.word	0x44548000
 800b5c0:	44898000 	.word	0x44898000
 800b5c4:	0802bf88 	.word	0x0802bf88
 800b5c8:	0802ba50 	.word	0x0802ba50
 800b5cc:	0000ea60 	.word	0x0000ea60
 800b5d0:	0802bfc0 	.word	0x0802bfc0

0800b5d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b5da:	4b10      	ldr	r3, [pc, #64]	@ (800b61c <MX_DMA_Init+0x48>)
 800b5dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b5de:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <MX_DMA_Init+0x48>)
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	430a      	orrs	r2, r1
 800b5e4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b61c <MX_DMA_Init+0x48>)
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	607b      	str	r3, [r7, #4]
 800b5f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	200a      	movs	r0, #10
 800b5f8:	f008 ff70 	bl	80144dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800b5fc:	200a      	movs	r0, #10
 800b5fe:	f008 ff82 	bl	8014506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800b602:	2200      	movs	r2, #0
 800b604:	2103      	movs	r1, #3
 800b606:	200b      	movs	r0, #11
 800b608:	f008 ff68 	bl	80144dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800b60c:	200b      	movs	r0, #11
 800b60e:	f008 ff7a 	bl	8014506 <HAL_NVIC_EnableIRQ>

}
 800b612:	46c0      	nop			@ (mov r8, r8)
 800b614:	46bd      	mov	sp, r7
 800b616:	b002      	add	sp, #8
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	46c0      	nop			@ (mov r8, r8)
 800b61c:	40021000 	.word	0x40021000

0800b620 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b620:	b590      	push	{r4, r7, lr}
 800b622:	b087      	sub	sp, #28
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	1dbb      	adds	r3, r7, #6
 800b62c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800b62e:	4b17      	ldr	r3, [pc, #92]	@ (800b68c <WriteUint8ArrayEeprom+0x6c>)
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b634:	f009 fae4 	bl	8014c00 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800b638:	2316      	movs	r3, #22
 800b63a:	18fb      	adds	r3, r7, r3
 800b63c:	2200      	movs	r2, #0
 800b63e:	801a      	strh	r2, [r3, #0]
 800b640:	e015      	b.n	800b66e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800b642:	4b12      	ldr	r3, [pc, #72]	@ (800b68c <WriteUint8ArrayEeprom+0x6c>)
 800b644:	6819      	ldr	r1, [r3, #0]
 800b646:	2416      	movs	r4, #22
 800b648:	193b      	adds	r3, r7, r4
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	18d3      	adds	r3, r2, r3
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	001a      	movs	r2, r3
 800b654:	2000      	movs	r0, #0
 800b656:	f009 fb3b 	bl	8014cd0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800b65a:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <WriteUint8ArrayEeprom+0x6c>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	4b0a      	ldr	r3, [pc, #40]	@ (800b68c <WriteUint8ArrayEeprom+0x6c>)
 800b662:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b664:	193b      	adds	r3, r7, r4
 800b666:	881a      	ldrh	r2, [r3, #0]
 800b668:	193b      	adds	r3, r7, r4
 800b66a:	3201      	adds	r2, #1
 800b66c:	801a      	strh	r2, [r3, #0]
 800b66e:	2316      	movs	r3, #22
 800b670:	18fa      	adds	r2, r7, r3
 800b672:	1dbb      	adds	r3, r7, #6
 800b674:	8812      	ldrh	r2, [r2, #0]
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d3e2      	bcc.n	800b642 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b67c:	f009 faee 	bl	8014c5c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800b680:	4b02      	ldr	r3, [pc, #8]	@ (800b68c <WriteUint8ArrayEeprom+0x6c>)
 800b682:	681b      	ldr	r3, [r3, #0]
}
 800b684:	0018      	movs	r0, r3
 800b686:	46bd      	mov	sp, r7
 800b688:	b007      	add	sp, #28
 800b68a:	bd90      	pop	{r4, r7, pc}
 800b68c:	20000c50 	.word	0x20000c50

0800b690 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b084      	sub	sp, #16
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	0019      	movs	r1, r3
 800b69c:	1dbb      	adds	r3, r7, #6
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	1d3b      	adds	r3, r7, #4
 800b6a2:	1c0a      	adds	r2, r1, #0
 800b6a4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800b6a6:	1dba      	adds	r2, r7, #6
 800b6a8:	1d3b      	adds	r3, r7, #4
 800b6aa:	8812      	ldrh	r2, [r2, #0]
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d806      	bhi.n	800b6c0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800b6b2:	1dbb      	adds	r3, r7, #6
 800b6b4:	881a      	ldrh	r2, [r3, #0]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f7ff ffb0 	bl	800b620 <WriteUint8ArrayEeprom>
    }
}
 800b6c0:	46c0      	nop			@ (mov r8, r8)
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b004      	add	sp, #16
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b086      	sub	sp, #24
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	1dbb      	adds	r3, r7, #6
 800b6d4:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b6d6:	2316      	movs	r3, #22
 800b6d8:	18fb      	adds	r3, r7, r3
 800b6da:	2200      	movs	r2, #0
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e010      	b.n	800b702 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800b6e0:	2016      	movs	r0, #22
 800b6e2:	183b      	adds	r3, r7, r0
 800b6e4:	881a      	ldrh	r2, [r3, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	18d3      	adds	r3, r2, r3
 800b6ea:	0019      	movs	r1, r3
 800b6ec:	183b      	adds	r3, r7, r0
 800b6ee:	881b      	ldrh	r3, [r3, #0]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	18d3      	adds	r3, r2, r3
 800b6f4:	780a      	ldrb	r2, [r1, #0]
 800b6f6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800b6f8:	183b      	adds	r3, r7, r0
 800b6fa:	881a      	ldrh	r2, [r3, #0]
 800b6fc:	183b      	adds	r3, r7, r0
 800b6fe:	3201      	adds	r2, #1
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	2316      	movs	r3, #22
 800b704:	18fa      	adds	r2, r7, r3
 800b706:	1dbb      	adds	r3, r7, #6
 800b708:	8812      	ldrh	r2, [r2, #0]
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d3e7      	bcc.n	800b6e0 <ReadUint8ArrayEEprom+0x18>
    }
}
 800b710:	46c0      	nop			@ (mov r8, r8)
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	46bd      	mov	sp, r7
 800b716:	b006      	add	sp, #24
 800b718:	bd80      	pop	{r7, pc}

0800b71a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800b71a:	b590      	push	{r4, r7, lr}
 800b71c:	b085      	sub	sp, #20
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	000a      	movs	r2, r1
 800b724:	1cbb      	adds	r3, r7, #2
 800b726:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800b728:	f009 fa6a 	bl	8014c00 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800b72c:	230e      	movs	r3, #14
 800b72e:	18fb      	adds	r3, r7, r3
 800b730:	2200      	movs	r2, #0
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e00c      	b.n	800b750 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800b736:	240e      	movs	r4, #14
 800b738:	193b      	adds	r3, r7, r4
 800b73a:	881a      	ldrh	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	18d3      	adds	r3, r2, r3
 800b740:	0018      	movs	r0, r3
 800b742:	f009 fa99 	bl	8014c78 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800b746:	193b      	adds	r3, r7, r4
 800b748:	193a      	adds	r2, r7, r4
 800b74a:	8812      	ldrh	r2, [r2, #0]
 800b74c:	3204      	adds	r2, #4
 800b74e:	801a      	strh	r2, [r3, #0]
 800b750:	230e      	movs	r3, #14
 800b752:	18fa      	adds	r2, r7, r3
 800b754:	1cbb      	adds	r3, r7, #2
 800b756:	8812      	ldrh	r2, [r2, #0]
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d3eb      	bcc.n	800b736 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800b75e:	f009 fa7d 	bl	8014c5c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800b762:	46c0      	nop			@ (mov r8, r8)
 800b764:	46bd      	mov	sp, r7
 800b766:	b005      	add	sp, #20
 800b768:	bd90      	pop	{r4, r7, pc}
	...

0800b76c <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b77c:	d901      	bls.n	800b782 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800b77e:	237f      	movs	r3, #127	@ 0x7f
 800b780:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800b782:	2017      	movs	r0, #23
 800b784:	183b      	adds	r3, r7, r0
 800b786:	490d      	ldr	r1, [pc, #52]	@ (800b7bc <accessLUT10log10+0x50>)
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	188a      	adds	r2, r1, r2
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800b790:	0001      	movs	r1, r0
 800b792:	187b      	adds	r3, r7, r1
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2206      	movs	r2, #6
 800b798:	4113      	asrs	r3, r2
 800b79a:	001a      	movs	r2, r3
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800b7a0:	187b      	adds	r3, r7, r1
 800b7a2:	781a      	ldrb	r2, [r3, #0]
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2106      	movs	r1, #6
 800b7aa:	408b      	lsls	r3, r1
 800b7ac:	1ad2      	subs	r2, r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
}
 800b7b2:	46c0      	nop			@ (mov r8, r8)
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	b006      	add	sp, #24
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	0802d910 	.word	0x0802d910

0800b7c0 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800b7c0:	b5b0      	push	{r4, r5, r7, lr}
 800b7c2:	b090      	sub	sp, #64	@ 0x40
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6138      	str	r0, [r7, #16]
 800b7c8:	6179      	str	r1, [r7, #20]
 800b7ca:	60fa      	str	r2, [r7, #12]
 800b7cc:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	001a      	movs	r2, r3
 800b7d2:	3a20      	subs	r2, #32
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	db03      	blt.n	800b7e0 <efficient10log10+0x20>
 800b7d8:	2101      	movs	r1, #1
 800b7da:	4091      	lsls	r1, r2
 800b7dc:	000d      	movs	r5, r1
 800b7de:	e008      	b.n	800b7f2 <efficient10log10+0x32>
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	1ad2      	subs	r2, r2, r3
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	40d1      	lsrs	r1, r2
 800b7e8:	000a      	movs	r2, r1
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4099      	lsls	r1, r3
 800b7ee:	000d      	movs	r5, r1
 800b7f0:	4315      	orrs	r5, r2
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	409a      	lsls	r2, r3
 800b7f6:	0014      	movs	r4, r2
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	4252      	negs	r2, r2
 800b7fc:	17d3      	asrs	r3, r2, #31
 800b7fe:	1912      	adds	r2, r2, r4
 800b800:	416b      	adcs	r3, r5
 800b802:	633a      	str	r2, [r7, #48]	@ 0x30
 800b804:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800b806:	2336      	movs	r3, #54	@ 0x36
 800b808:	2208      	movs	r2, #8
 800b80a:	189b      	adds	r3, r3, r2
 800b80c:	19db      	adds	r3, r3, r7
 800b80e:	2200      	movs	r2, #0
 800b810:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b812:	e017      	b.n	800b844 <efficient10log10+0x84>
    {
        P = P >> 1;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	07db      	lsls	r3, r3, #31
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	0852      	lsrs	r2, r2, #1
 800b81c:	603a      	str	r2, [r7, #0]
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	431a      	orrs	r2, r3
 800b822:	603a      	str	r2, [r7, #0]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	607b      	str	r3, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	687c      	ldr	r4, [r7, #4]
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	617c      	str	r4, [r7, #20]
        bShift++;
 800b832:	2136      	movs	r1, #54	@ 0x36
 800b834:	2008      	movs	r0, #8
 800b836:	180b      	adds	r3, r1, r0
 800b838:	19db      	adds	r3, r3, r7
 800b83a:	881a      	ldrh	r2, [r3, #0]
 800b83c:	180b      	adds	r3, r1, r0
 800b83e:	19db      	adds	r3, r3, r7
 800b840:	3201      	adds	r2, #1
 800b842:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	429a      	cmp	r2, r3
 800b84a:	d8e3      	bhi.n	800b814 <efficient10log10+0x54>
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b850:	429a      	cmp	r2, r3
 800b852:	d103      	bne.n	800b85c <efficient10log10+0x9c>
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b858:	429a      	cmp	r2, r3
 800b85a:	d8db      	bhi.n	800b814 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	2308      	movs	r3, #8
 800b860:	3b01      	subs	r3, #1
 800b862:	2101      	movs	r1, #1
 800b864:	4099      	lsls	r1, r3
 800b866:	000b      	movs	r3, r1
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800b874:	231c      	movs	r3, #28
 800b876:	2408      	movs	r4, #8
 800b878:	191b      	adds	r3, r3, r4
 800b87a:	19da      	adds	r2, r3, r7
 800b87c:	2320      	movs	r3, #32
 800b87e:	191b      	adds	r3, r3, r4
 800b880:	19d9      	adds	r1, r3, r7
 800b882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b884:	0018      	movs	r0, r3
 800b886:	f7ff ff71 	bl	800b76c <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b88a:	2215      	movs	r2, #21
 800b88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88e:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800b890:	2036      	movs	r0, #54	@ 0x36
 800b892:	1902      	adds	r2, r0, r4
 800b894:	19d2      	adds	r2, r2, r7
 800b896:	8812      	ldrh	r2, [r2, #0]
 800b898:	2103      	movs	r1, #3
 800b89a:	434a      	muls	r2, r1
 800b89c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800b89e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800b8a0:	0021      	movs	r1, r4
 800b8a2:	1843      	adds	r3, r0, r1
 800b8a4:	19db      	adds	r3, r3, r7
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	4353      	muls	r3, r2
 800b8ac:	2203      	movs	r2, #3
 800b8ae:	4113      	asrs	r3, r2
 800b8b0:	001a      	movs	r2, r3
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b4:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800b8b6:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800b8b8:	2314      	movs	r3, #20
 800b8ba:	185b      	adds	r3, r3, r1
 800b8bc:	19da      	adds	r2, r3, r7
 800b8be:	2318      	movs	r3, #24
 800b8c0:	185b      	adds	r3, r3, r1
 800b8c2:	19db      	adds	r3, r3, r7
 800b8c4:	0011      	movs	r1, r2
 800b8c6:	0018      	movs	r0, r3
 800b8c8:	f000 f80a 	bl	800b8e0 <correctIntFracNumber>
    integerPart[0] = intPart;
 800b8cc:	6a3a      	ldr	r2, [r7, #32]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	601a      	str	r2, [r3, #0]
}
 800b8d8:	46c0      	nop			@ (mov r8, r8)
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	b010      	add	sp, #64	@ 0x40
 800b8de:	bdb0      	pop	{r4, r5, r7, pc}

0800b8e0 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800b8ea:	e00a      	b.n	800b902 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3b0a      	subs	r3, #10
 800b8fc:	001a      	movs	r2, r3
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b09      	cmp	r3, #9
 800b908:	dcf0      	bgt.n	800b8ec <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800b90a:	e00a      	b.n	800b922 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	1e5a      	subs	r2, r3, #1
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	330a      	adds	r3, #10
 800b91c:	001a      	movs	r2, r3
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3309      	adds	r3, #9
 800b928:	dbf0      	blt.n	800b90c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	da0f      	bge.n	800b952 <correctIntFracNumber+0x72>
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	dd0b      	ble.n	800b952 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	3b0a      	subs	r3, #10
 800b94a:	001a      	movs	r2, r3
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800b950:	e012      	b.n	800b978 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	dd0e      	ble.n	800b978 <correctIntFracNumber+0x98>
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	da0a      	bge.n	800b978 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	1e5a      	subs	r2, r3, #1
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	330a      	adds	r3, #10
 800b972:	001a      	movs	r2, r3
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	601a      	str	r2, [r3, #0]
}
 800b978:	46c0      	nop			@ (mov r8, r8)
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b002      	add	sp, #8
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b980:	b590      	push	{r4, r7, lr}
 800b982:	b08b      	sub	sp, #44	@ 0x2c
 800b984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b986:	2414      	movs	r4, #20
 800b988:	193b      	adds	r3, r7, r4
 800b98a:	0018      	movs	r0, r3
 800b98c:	2314      	movs	r3, #20
 800b98e:	001a      	movs	r2, r3
 800b990:	2100      	movs	r1, #0
 800b992:	f019 fe95 	bl	80256c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b996:	4b8a      	ldr	r3, [pc, #552]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99a:	4b89      	ldr	r3, [pc, #548]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b99c:	2104      	movs	r1, #4
 800b99e:	430a      	orrs	r2, r1
 800b9a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9a2:	4b87      	ldr	r3, [pc, #540]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a6:	2204      	movs	r2, #4
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	613b      	str	r3, [r7, #16]
 800b9ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b9ae:	4b84      	ldr	r3, [pc, #528]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9b2:	4b83      	ldr	r3, [pc, #524]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9b4:	2180      	movs	r1, #128	@ 0x80
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9ba:	4b81      	ldr	r3, [pc, #516]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9be:	2280      	movs	r2, #128	@ 0x80
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9c6:	4b7e      	ldr	r3, [pc, #504]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ca:	4b7d      	ldr	r3, [pc, #500]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9d2:	4b7b      	ldr	r3, [pc, #492]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	4013      	ands	r3, r2
 800b9da:	60bb      	str	r3, [r7, #8]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9de:	4b78      	ldr	r3, [pc, #480]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	4b77      	ldr	r3, [pc, #476]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9e4:	2102      	movs	r1, #2
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b9ea:	4b75      	ldr	r3, [pc, #468]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	607b      	str	r3, [r7, #4]
 800b9f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b9f6:	4b72      	ldr	r3, [pc, #456]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9fa:	4b71      	ldr	r3, [pc, #452]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800b9fc:	2108      	movs	r1, #8
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ba02:	4b6f      	ldr	r3, [pc, #444]	@ (800bbc0 <MX_GPIO_Init+0x240>)
 800ba04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba06:	2208      	movs	r2, #8
 800ba08:	4013      	ands	r3, r2
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800ba0e:	4b6d      	ldr	r3, [pc, #436]	@ (800bbc4 <MX_GPIO_Init+0x244>)
 800ba10:	2201      	movs	r2, #1
 800ba12:	2101      	movs	r1, #1
 800ba14:	0018      	movs	r0, r3
 800ba16:	f009 fb4e 	bl	80150b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800ba1a:	4b6a      	ldr	r3, [pc, #424]	@ (800bbc4 <MX_GPIO_Init+0x244>)
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2102      	movs	r1, #2
 800ba20:	0018      	movs	r0, r3
 800ba22:	f009 fb48 	bl	80150b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800ba26:	4968      	ldr	r1, [pc, #416]	@ (800bbc8 <MX_GPIO_Init+0x248>)
 800ba28:	4b68      	ldr	r3, [pc, #416]	@ (800bbcc <MX_GPIO_Init+0x24c>)
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	0018      	movs	r0, r3
 800ba2e:	f009 fb42 	bl	80150b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800ba32:	2380      	movs	r3, #128	@ 0x80
 800ba34:	011b      	lsls	r3, r3, #4
 800ba36:	4866      	ldr	r0, [pc, #408]	@ (800bbd0 <MX_GPIO_Init+0x250>)
 800ba38:	2201      	movs	r2, #1
 800ba3a:	0019      	movs	r1, r3
 800ba3c:	f009 fb3b 	bl	80150b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800ba40:	2380      	movs	r3, #128	@ 0x80
 800ba42:	015b      	lsls	r3, r3, #5
 800ba44:	4862      	ldr	r0, [pc, #392]	@ (800bbd0 <MX_GPIO_Init+0x250>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	0019      	movs	r1, r3
 800ba4a:	f009 fb34 	bl	80150b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800ba4e:	193b      	adds	r3, r7, r4
 800ba50:	4a60      	ldr	r2, [pc, #384]	@ (800bbd4 <MX_GPIO_Init+0x254>)
 800ba52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba54:	193b      	adds	r3, r7, r4
 800ba56:	2203      	movs	r2, #3
 800ba58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba5a:	193b      	adds	r3, r7, r4
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba60:	193b      	adds	r3, r7, r4
 800ba62:	4a5b      	ldr	r2, [pc, #364]	@ (800bbd0 <MX_GPIO_Init+0x250>)
 800ba64:	0019      	movs	r1, r3
 800ba66:	0010      	movs	r0, r2
 800ba68:	f009 f98a 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800ba6c:	193b      	adds	r3, r7, r4
 800ba6e:	2203      	movs	r2, #3
 800ba70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ba72:	193b      	adds	r3, r7, r4
 800ba74:	2201      	movs	r2, #1
 800ba76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba78:	193b      	adds	r3, r7, r4
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ba7e:	193b      	adds	r3, r7, r4
 800ba80:	2200      	movs	r2, #0
 800ba82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ba84:	193b      	adds	r3, r7, r4
 800ba86:	4a4f      	ldr	r2, [pc, #316]	@ (800bbc4 <MX_GPIO_Init+0x244>)
 800ba88:	0019      	movs	r1, r3
 800ba8a:	0010      	movs	r0, r2
 800ba8c:	f009 f978 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800ba90:	193b      	adds	r3, r7, r4
 800ba92:	2270      	movs	r2, #112	@ 0x70
 800ba94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ba96:	193b      	adds	r3, r7, r4
 800ba98:	2203      	movs	r2, #3
 800ba9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba9c:	193b      	adds	r3, r7, r4
 800ba9e:	2200      	movs	r2, #0
 800baa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baa2:	193a      	adds	r2, r7, r4
 800baa4:	23a0      	movs	r3, #160	@ 0xa0
 800baa6:	05db      	lsls	r3, r3, #23
 800baa8:	0011      	movs	r1, r2
 800baaa:	0018      	movs	r0, r3
 800baac:	f009 f968 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800bab0:	193b      	adds	r3, r7, r4
 800bab2:	22c0      	movs	r2, #192	@ 0xc0
 800bab4:	0052      	lsls	r2, r2, #1
 800bab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bab8:	193b      	adds	r3, r7, r4
 800baba:	2200      	movs	r2, #0
 800babc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800babe:	193b      	adds	r3, r7, r4
 800bac0:	2200      	movs	r2, #0
 800bac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bac4:	193a      	adds	r2, r7, r4
 800bac6:	23a0      	movs	r3, #160	@ 0xa0
 800bac8:	05db      	lsls	r3, r3, #23
 800baca:	0011      	movs	r1, r2
 800bacc:	0018      	movs	r0, r3
 800bace:	f009 f957 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800bad2:	193b      	adds	r3, r7, r4
 800bad4:	4a3c      	ldr	r2, [pc, #240]	@ (800bbc8 <MX_GPIO_Init+0x248>)
 800bad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bad8:	193b      	adds	r3, r7, r4
 800bada:	2201      	movs	r2, #1
 800badc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bade:	193b      	adds	r3, r7, r4
 800bae0:	2200      	movs	r2, #0
 800bae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bae4:	193b      	adds	r3, r7, r4
 800bae6:	2200      	movs	r2, #0
 800bae8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800baea:	193b      	adds	r3, r7, r4
 800baec:	4a37      	ldr	r2, [pc, #220]	@ (800bbcc <MX_GPIO_Init+0x24c>)
 800baee:	0019      	movs	r1, r3
 800baf0:	0010      	movs	r0, r2
 800baf2:	f009 f945 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800baf6:	193b      	adds	r3, r7, r4
 800baf8:	4a37      	ldr	r2, [pc, #220]	@ (800bbd8 <MX_GPIO_Init+0x258>)
 800bafa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bafc:	193b      	adds	r3, r7, r4
 800bafe:	2203      	movs	r2, #3
 800bb00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb02:	193b      	adds	r3, r7, r4
 800bb04:	2200      	movs	r2, #0
 800bb06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb08:	193b      	adds	r3, r7, r4
 800bb0a:	4a30      	ldr	r2, [pc, #192]	@ (800bbcc <MX_GPIO_Init+0x24c>)
 800bb0c:	0019      	movs	r1, r3
 800bb0e:	0010      	movs	r0, r2
 800bb10:	f009 f936 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800bb14:	0021      	movs	r1, r4
 800bb16:	187b      	adds	r3, r7, r1
 800bb18:	2280      	movs	r2, #128	@ 0x80
 800bb1a:	0092      	lsls	r2, r2, #2
 800bb1c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb1e:	000c      	movs	r4, r1
 800bb20:	193b      	adds	r3, r7, r4
 800bb22:	2200      	movs	r2, #0
 800bb24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb26:	193b      	adds	r3, r7, r4
 800bb28:	2200      	movs	r2, #0
 800bb2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800bb2c:	193b      	adds	r3, r7, r4
 800bb2e:	4a28      	ldr	r2, [pc, #160]	@ (800bbd0 <MX_GPIO_Init+0x250>)
 800bb30:	0019      	movs	r1, r3
 800bb32:	0010      	movs	r0, r2
 800bb34:	f009 f924 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800bb38:	193b      	adds	r3, r7, r4
 800bb3a:	2280      	movs	r2, #128	@ 0x80
 800bb3c:	0212      	lsls	r2, r2, #8
 800bb3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb40:	193b      	adds	r3, r7, r4
 800bb42:	2288      	movs	r2, #136	@ 0x88
 800bb44:	0352      	lsls	r2, r2, #13
 800bb46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb48:	193b      	adds	r3, r7, r4
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800bb4e:	193a      	adds	r2, r7, r4
 800bb50:	23a0      	movs	r3, #160	@ 0xa0
 800bb52:	05db      	lsls	r3, r3, #23
 800bb54:	0011      	movs	r1, r2
 800bb56:	0018      	movs	r0, r3
 800bb58:	f009 f912 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800bb5c:	0021      	movs	r1, r4
 800bb5e:	187b      	adds	r3, r7, r1
 800bb60:	22c0      	movs	r2, #192	@ 0xc0
 800bb62:	0152      	lsls	r2, r2, #5
 800bb64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bb66:	000c      	movs	r4, r1
 800bb68:	193b      	adds	r3, r7, r4
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb6e:	193b      	adds	r3, r7, r4
 800bb70:	2200      	movs	r2, #0
 800bb72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb74:	193b      	adds	r3, r7, r4
 800bb76:	2200      	movs	r2, #0
 800bb78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb7a:	193b      	adds	r3, r7, r4
 800bb7c:	4a14      	ldr	r2, [pc, #80]	@ (800bbd0 <MX_GPIO_Init+0x250>)
 800bb7e:	0019      	movs	r1, r3
 800bb80:	0010      	movs	r0, r2
 800bb82:	f009 f8fd 	bl	8014d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800bb86:	0021      	movs	r1, r4
 800bb88:	187b      	adds	r3, r7, r1
 800bb8a:	2204      	movs	r2, #4
 800bb8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb8e:	187b      	adds	r3, r7, r1
 800bb90:	2200      	movs	r2, #0
 800bb92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb94:	187b      	adds	r3, r7, r1
 800bb96:	2201      	movs	r2, #1
 800bb98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800bb9a:	187b      	adds	r3, r7, r1
 800bb9c:	4a0f      	ldr	r2, [pc, #60]	@ (800bbdc <MX_GPIO_Init+0x25c>)
 800bb9e:	0019      	movs	r1, r3
 800bba0:	0010      	movs	r0, r2
 800bba2:	f009 f8ed 	bl	8014d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800bba6:	2200      	movs	r2, #0
 800bba8:	2100      	movs	r1, #0
 800bbaa:	2007      	movs	r0, #7
 800bbac:	f008 fc96 	bl	80144dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800bbb0:	2007      	movs	r0, #7
 800bbb2:	f008 fca8 	bl	8014506 <HAL_NVIC_EnableIRQ>

}
 800bbb6:	46c0      	nop			@ (mov r8, r8)
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	b00b      	add	sp, #44	@ 0x2c
 800bbbc:	bd90      	pop	{r4, r7, pc}
 800bbbe:	46c0      	nop			@ (mov r8, r8)
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	50001c00 	.word	0x50001c00
 800bbc8:	00000301 	.word	0x00000301
 800bbcc:	50000400 	.word	0x50000400
 800bbd0:	50000800 	.word	0x50000800
 800bbd4:	0000200c 	.word	0x0000200c
 800bbd8:	0000403e 	.word	0x0000403e
 800bbdc:	50000c00 	.word	0x50000c00

0800bbe0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2100      	movs	r1, #0
 800bbee:	0018      	movs	r0, r3
 800bbf0:	f010 f948 	bl	801be84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2108      	movs	r1, #8
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	f010 f943 	bl	801be84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	210c      	movs	r1, #12
 800bc02:	0018      	movs	r0, r3
 800bc04:	f010 f93e 	bl	801be84 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800bc08:	2380      	movs	r3, #128	@ 0x80
 800bc0a:	05db      	lsls	r3, r3, #23
 800bc0c:	22fa      	movs	r2, #250	@ 0xfa
 800bc0e:	0112      	lsls	r2, r2, #4
 800bc10:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800bc12:	2380      	movs	r3, #128	@ 0x80
 800bc14:	05db      	lsls	r3, r3, #23
 800bc16:	22fa      	movs	r2, #250	@ 0xfa
 800bc18:	0112      	lsls	r2, r2, #4
 800bc1a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800bc1c:	2380      	movs	r3, #128	@ 0x80
 800bc1e:	05db      	lsls	r3, r3, #23
 800bc20:	22fa      	movs	r2, #250	@ 0xfa
 800bc22:	0112      	lsls	r2, r2, #4
 800bc24:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800bc26:	2380      	movs	r3, #128	@ 0x80
 800bc28:	05db      	lsls	r3, r3, #23
 800bc2a:	22fa      	movs	r2, #250	@ 0xfa
 800bc2c:	0112      	lsls	r2, r2, #4
 800bc2e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2100      	movs	r1, #0
 800bc34:	0018      	movs	r0, r3
 800bc36:	f010 f925 	bl	801be84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2104      	movs	r1, #4
 800bc3e:	0018      	movs	r0, r3
 800bc40:	f010 f920 	bl	801be84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2108      	movs	r1, #8
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f010 f91b 	bl	801be84 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800bc4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <GPIO_InitPWMLEDs+0x98>)
 800bc50:	22fa      	movs	r2, #250	@ 0xfa
 800bc52:	0112      	lsls	r2, r2, #4
 800bc54:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800bc56:	4b08      	ldr	r3, [pc, #32]	@ (800bc78 <GPIO_InitPWMLEDs+0x98>)
 800bc58:	22fa      	movs	r2, #250	@ 0xfa
 800bc5a:	0112      	lsls	r2, r2, #4
 800bc5c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800bc5e:	4b06      	ldr	r3, [pc, #24]	@ (800bc78 <GPIO_InitPWMLEDs+0x98>)
 800bc60:	22fa      	movs	r2, #250	@ 0xfa
 800bc62:	0112      	lsls	r2, r2, #4
 800bc64:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800bc66:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <GPIO_InitPWMLEDs+0x98>)
 800bc68:	22fa      	movs	r2, #250	@ 0xfa
 800bc6a:	0112      	lsls	r2, r2, #4
 800bc6c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	46bd      	mov	sp, r7
 800bc72:	b002      	add	sp, #8
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	46c0      	nop			@ (mov r8, r8)
 800bc78:	40000400 	.word	0x40000400

0800bc7c <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc82:	1d3b      	adds	r3, r7, #4
 800bc84:	0018      	movs	r0, r3
 800bc86:	2314      	movs	r3, #20
 800bc88:	001a      	movs	r2, r3
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	f019 fd18 	bl	80256c0 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800bc90:	1d3b      	adds	r3, r7, #4
 800bc92:	2205      	movs	r2, #5
 800bc94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc96:	1d3b      	adds	r3, r7, #4
 800bc98:	2203      	movs	r2, #3
 800bc9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc9c:	1d3b      	adds	r3, r7, #4
 800bc9e:	2200      	movs	r2, #0
 800bca0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bca2:	1d3a      	adds	r2, r7, #4
 800bca4:	23a0      	movs	r3, #160	@ 0xa0
 800bca6:	05db      	lsls	r3, r3, #23
 800bca8:	0011      	movs	r1, r2
 800bcaa:	0018      	movs	r0, r3
 800bcac:	f009 f868 	bl	8014d80 <HAL_GPIO_Init>
}
 800bcb0:	46c0      	nop			@ (mov r8, r8)
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	b006      	add	sp, #24
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800bcbc:	4b1b      	ldr	r3, [pc, #108]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcbe:	4a1c      	ldr	r2, [pc, #112]	@ (800bd30 <MX_I2C1_Init+0x78>)
 800bcc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800bcc2:	4b1a      	ldr	r3, [pc, #104]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcc4:	4a1b      	ldr	r2, [pc, #108]	@ (800bd34 <MX_I2C1_Init+0x7c>)
 800bcc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800bcc8:	4b18      	ldr	r3, [pc, #96]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bcce:	4b17      	ldr	r3, [pc, #92]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bcd4:	4b15      	ldr	r3, [pc, #84]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800bcda:	4b14      	ldr	r3, [pc, #80]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bce0:	4b12      	ldr	r3, [pc, #72]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bce6:	4b11      	ldr	r3, [pc, #68]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bcec:	4b0f      	ldr	r3, [pc, #60]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800bcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	f009 fa17 	bl	8015128 <HAL_I2C_Init>
 800bcfa:	1e03      	subs	r3, r0, #0
 800bcfc:	d001      	beq.n	800bd02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800bcfe:	f000 fda7 	bl	800c850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd02:	4b0a      	ldr	r3, [pc, #40]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bd04:	2100      	movs	r1, #0
 800bd06:	0018      	movs	r0, r3
 800bd08:	f00c f8f4 	bl	8017ef4 <HAL_I2CEx_ConfigAnalogFilter>
 800bd0c:	1e03      	subs	r3, r0, #0
 800bd0e:	d001      	beq.n	800bd14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800bd10:	f000 fd9e 	bl	800c850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800bd14:	4b05      	ldr	r3, [pc, #20]	@ (800bd2c <MX_I2C1_Init+0x74>)
 800bd16:	2100      	movs	r1, #0
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f00c f937 	bl	8017f8c <HAL_I2CEx_ConfigDigitalFilter>
 800bd1e:	1e03      	subs	r3, r0, #0
 800bd20:	d001      	beq.n	800bd26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800bd22:	f000 fd95 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800bd26:	46c0      	nop			@ (mov r8, r8)
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20000c54 	.word	0x20000c54
 800bd30:	40005400 	.word	0x40005400
 800bd34:	00503d58 	.word	0x00503d58

0800bd38 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800bd3c:	4b1b      	ldr	r3, [pc, #108]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd3e:	4a1c      	ldr	r2, [pc, #112]	@ (800bdb0 <MX_I2C2_Init+0x78>)
 800bd40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800bd42:	4b1a      	ldr	r3, [pc, #104]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd44:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb4 <MX_I2C2_Init+0x7c>)
 800bd46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800bd48:	4b18      	ldr	r3, [pc, #96]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800bd4e:	4b17      	ldr	r3, [pc, #92]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd50:	2201      	movs	r2, #1
 800bd52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800bd54:	4b15      	ldr	r3, [pc, #84]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd56:	2200      	movs	r2, #0
 800bd58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800bd5a:	4b14      	ldr	r3, [pc, #80]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800bd60:	4b12      	ldr	r3, [pc, #72]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800bd66:	4b11      	ldr	r3, [pc, #68]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800bd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd6e:	2200      	movs	r2, #0
 800bd70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800bd72:	4b0e      	ldr	r3, [pc, #56]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd74:	0018      	movs	r0, r3
 800bd76:	f009 f9d7 	bl	8015128 <HAL_I2C_Init>
 800bd7a:	1e03      	subs	r3, r0, #0
 800bd7c:	d001      	beq.n	800bd82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800bd7e:	f000 fd67 	bl	800c850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800bd82:	4b0a      	ldr	r3, [pc, #40]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd84:	2100      	movs	r1, #0
 800bd86:	0018      	movs	r0, r3
 800bd88:	f00c f8b4 	bl	8017ef4 <HAL_I2CEx_ConfigAnalogFilter>
 800bd8c:	1e03      	subs	r3, r0, #0
 800bd8e:	d001      	beq.n	800bd94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800bd90:	f000 fd5e 	bl	800c850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800bd94:	4b05      	ldr	r3, [pc, #20]	@ (800bdac <MX_I2C2_Init+0x74>)
 800bd96:	2100      	movs	r1, #0
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f00c f8f7 	bl	8017f8c <HAL_I2CEx_ConfigDigitalFilter>
 800bd9e:	1e03      	subs	r3, r0, #0
 800bda0:	d001      	beq.n	800bda6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800bda2:	f000 fd55 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800bda6:	46c0      	nop			@ (mov r8, r8)
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000ca8 	.word	0x20000ca8
 800bdb0:	40005800 	.word	0x40005800
 800bdb4:	00503d58 	.word	0x00503d58

0800bdb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800bdb8:	b590      	push	{r4, r7, lr}
 800bdba:	b08b      	sub	sp, #44	@ 0x2c
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdc0:	2414      	movs	r4, #20
 800bdc2:	193b      	adds	r3, r7, r4
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	2314      	movs	r3, #20
 800bdc8:	001a      	movs	r2, r3
 800bdca:	2100      	movs	r1, #0
 800bdcc:	f019 fc78 	bl	80256c0 <memset>
  if(i2cHandle->Instance==I2C1)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a5d      	ldr	r2, [pc, #372]	@ (800bf4c <HAL_I2C_MspInit+0x194>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d000      	beq.n	800bddc <HAL_I2C_MspInit+0x24>
 800bdda:	e083      	b.n	800bee4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bddc:	4b5c      	ldr	r3, [pc, #368]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde0:	4b5b      	ldr	r3, [pc, #364]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bde2:	2102      	movs	r1, #2
 800bde4:	430a      	orrs	r2, r1
 800bde6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bde8:	4b59      	ldr	r3, [pc, #356]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdec:	2202      	movs	r2, #2
 800bdee:	4013      	ands	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800bdf4:	0021      	movs	r1, r4
 800bdf6:	187b      	adds	r3, r7, r1
 800bdf8:	22c0      	movs	r2, #192	@ 0xc0
 800bdfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bdfc:	187b      	adds	r3, r7, r1
 800bdfe:	2212      	movs	r2, #18
 800be00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800be02:	187b      	adds	r3, r7, r1
 800be04:	2200      	movs	r2, #0
 800be06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be08:	187b      	adds	r3, r7, r1
 800be0a:	2203      	movs	r2, #3
 800be0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800be0e:	187b      	adds	r3, r7, r1
 800be10:	2201      	movs	r2, #1
 800be12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800be14:	187b      	adds	r3, r7, r1
 800be16:	4a4f      	ldr	r2, [pc, #316]	@ (800bf54 <HAL_I2C_MspInit+0x19c>)
 800be18:	0019      	movs	r1, r3
 800be1a:	0010      	movs	r0, r2
 800be1c:	f008 ffb0 	bl	8014d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800be20:	4b4b      	ldr	r3, [pc, #300]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800be22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be24:	4b4a      	ldr	r3, [pc, #296]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800be26:	2180      	movs	r1, #128	@ 0x80
 800be28:	0389      	lsls	r1, r1, #14
 800be2a:	430a      	orrs	r2, r1
 800be2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800be2e:	4b4a      	ldr	r3, [pc, #296]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be30:	4a4a      	ldr	r2, [pc, #296]	@ (800bf5c <HAL_I2C_MspInit+0x1a4>)
 800be32:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800be34:	4b48      	ldr	r3, [pc, #288]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be36:	2206      	movs	r2, #6
 800be38:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be3a:	4b47      	ldr	r3, [pc, #284]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be40:	4b45      	ldr	r3, [pc, #276]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be42:	2200      	movs	r2, #0
 800be44:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800be46:	4b44      	ldr	r3, [pc, #272]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be48:	2280      	movs	r2, #128	@ 0x80
 800be4a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be4c:	4b42      	ldr	r3, [pc, #264]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be4e:	2200      	movs	r2, #0
 800be50:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be52:	4b41      	ldr	r3, [pc, #260]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be54:	2200      	movs	r2, #0
 800be56:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800be58:	4b3f      	ldr	r3, [pc, #252]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be5e:	4b3e      	ldr	r3, [pc, #248]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be60:	2200      	movs	r2, #0
 800be62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800be64:	4b3c      	ldr	r3, [pc, #240]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be66:	0018      	movs	r0, r3
 800be68:	f008 fb6e 	bl	8014548 <HAL_DMA_Init>
 800be6c:	1e03      	subs	r3, r0, #0
 800be6e:	d001      	beq.n	800be74 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800be70:	f000 fcee 	bl	800c850 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a38      	ldr	r2, [pc, #224]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be78:	63da      	str	r2, [r3, #60]	@ 0x3c
 800be7a:	4b37      	ldr	r3, [pc, #220]	@ (800bf58 <HAL_I2C_MspInit+0x1a0>)
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800be80:	4b37      	ldr	r3, [pc, #220]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800be82:	4a38      	ldr	r2, [pc, #224]	@ (800bf64 <HAL_I2C_MspInit+0x1ac>)
 800be84:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800be86:	4b36      	ldr	r3, [pc, #216]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800be88:	2206      	movs	r2, #6
 800be8a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800be8c:	4b34      	ldr	r3, [pc, #208]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800be8e:	2210      	movs	r2, #16
 800be90:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be92:	4b33      	ldr	r3, [pc, #204]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800be94:	2200      	movs	r2, #0
 800be96:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800be98:	4b31      	ldr	r3, [pc, #196]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800be9a:	2280      	movs	r2, #128	@ 0x80
 800be9c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be9e:	4b30      	ldr	r3, [pc, #192]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bea4:	4b2e      	ldr	r3, [pc, #184]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800beaa:	4b2d      	ldr	r3, [pc, #180]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800beac:	2200      	movs	r2, #0
 800beae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800beb0:	4b2b      	ldr	r3, [pc, #172]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800beb6:	4b2a      	ldr	r3, [pc, #168]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800beb8:	0018      	movs	r0, r3
 800beba:	f008 fb45 	bl	8014548 <HAL_DMA_Init>
 800bebe:	1e03      	subs	r3, r0, #0
 800bec0:	d001      	beq.n	800bec6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800bec2:	f000 fcc5 	bl	800c850 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a25      	ldr	r2, [pc, #148]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800beca:	639a      	str	r2, [r3, #56]	@ 0x38
 800becc:	4b24      	ldr	r3, [pc, #144]	@ (800bf60 <HAL_I2C_MspInit+0x1a8>)
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800bed2:	2200      	movs	r2, #0
 800bed4:	2100      	movs	r1, #0
 800bed6:	2017      	movs	r0, #23
 800bed8:	f008 fb00 	bl	80144dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800bedc:	2017      	movs	r0, #23
 800bede:	f008 fb12 	bl	8014506 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800bee2:	e02e      	b.n	800bf42 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a1f      	ldr	r2, [pc, #124]	@ (800bf68 <HAL_I2C_MspInit+0x1b0>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d129      	bne.n	800bf42 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800beee:	4b18      	ldr	r3, [pc, #96]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef2:	4b17      	ldr	r3, [pc, #92]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bef4:	2102      	movs	r1, #2
 800bef6:	430a      	orrs	r2, r1
 800bef8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800befa:	4b15      	ldr	r3, [pc, #84]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800befc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800befe:	2202      	movs	r2, #2
 800bf00:	4013      	ands	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bf06:	2114      	movs	r1, #20
 800bf08:	187b      	adds	r3, r7, r1
 800bf0a:	22c0      	movs	r2, #192	@ 0xc0
 800bf0c:	0112      	lsls	r2, r2, #4
 800bf0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf10:	187b      	adds	r3, r7, r1
 800bf12:	2212      	movs	r2, #18
 800bf14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf16:	187b      	adds	r3, r7, r1
 800bf18:	2200      	movs	r2, #0
 800bf1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf1c:	187b      	adds	r3, r7, r1
 800bf1e:	2203      	movs	r2, #3
 800bf20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800bf22:	187b      	adds	r3, r7, r1
 800bf24:	2206      	movs	r2, #6
 800bf26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf28:	187b      	adds	r3, r7, r1
 800bf2a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf54 <HAL_I2C_MspInit+0x19c>)
 800bf2c:	0019      	movs	r1, r3
 800bf2e:	0010      	movs	r0, r2
 800bf30:	f008 ff26 	bl	8014d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bf34:	4b06      	ldr	r3, [pc, #24]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bf36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf38:	4b05      	ldr	r3, [pc, #20]	@ (800bf50 <HAL_I2C_MspInit+0x198>)
 800bf3a:	2180      	movs	r1, #128	@ 0x80
 800bf3c:	03c9      	lsls	r1, r1, #15
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bf42:	46c0      	nop			@ (mov r8, r8)
 800bf44:	46bd      	mov	sp, r7
 800bf46:	b00b      	add	sp, #44	@ 0x2c
 800bf48:	bd90      	pop	{r4, r7, pc}
 800bf4a:	46c0      	nop			@ (mov r8, r8)
 800bf4c:	40005400 	.word	0x40005400
 800bf50:	40021000 	.word	0x40021000
 800bf54:	50000400 	.word	0x50000400
 800bf58:	20000cfc 	.word	0x20000cfc
 800bf5c:	40020030 	.word	0x40020030
 800bf60:	20000d44 	.word	0x20000d44
 800bf64:	4002001c 	.word	0x4002001c
 800bf68:	40005800 	.word	0x40005800

0800bf6c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800bf70:	4b10      	ldr	r3, [pc, #64]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf72:	4a11      	ldr	r2, [pc, #68]	@ (800bfb8 <MX_I2S2_Init+0x4c>)
 800bf74:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800bf76:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf78:	22c0      	movs	r2, #192	@ 0xc0
 800bf7a:	0092      	lsls	r2, r2, #2
 800bf7c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf80:	2200      	movs	r2, #0
 800bf82:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800bf84:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800bf8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800bf90:	4b08      	ldr	r3, [pc, #32]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf92:	22fa      	movs	r2, #250	@ 0xfa
 800bf94:	0192      	lsls	r2, r2, #6
 800bf96:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800bf98:	4b06      	ldr	r3, [pc, #24]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800bf9e:	4b05      	ldr	r3, [pc, #20]	@ (800bfb4 <MX_I2S2_Init+0x48>)
 800bfa0:	0018      	movs	r0, r3
 800bfa2:	f00c f83f 	bl	8018024 <HAL_I2S_Init>
 800bfa6:	1e03      	subs	r3, r0, #0
 800bfa8:	d001      	beq.n	800bfae <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800bfaa:	f000 fc51 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800bfae:	46c0      	nop			@ (mov r8, r8)
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	20000d8c 	.word	0x20000d8c
 800bfb8:	40003800 	.word	0x40003800

0800bfbc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800bfbc:	b590      	push	{r4, r7, lr}
 800bfbe:	b089      	sub	sp, #36	@ 0x24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfc4:	240c      	movs	r4, #12
 800bfc6:	193b      	adds	r3, r7, r4
 800bfc8:	0018      	movs	r0, r3
 800bfca:	2314      	movs	r3, #20
 800bfcc:	001a      	movs	r2, r3
 800bfce:	2100      	movs	r1, #0
 800bfd0:	f019 fb76 	bl	80256c0 <memset>
  if(i2sHandle->Instance==SPI2)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a2d      	ldr	r2, [pc, #180]	@ (800c090 <HAL_I2S_MspInit+0xd4>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d154      	bne.n	800c088 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800bfde:	4b2d      	ldr	r3, [pc, #180]	@ (800c094 <HAL_I2S_MspInit+0xd8>)
 800bfe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfe2:	4b2c      	ldr	r3, [pc, #176]	@ (800c094 <HAL_I2S_MspInit+0xd8>)
 800bfe4:	2180      	movs	r1, #128	@ 0x80
 800bfe6:	01c9      	lsls	r1, r1, #7
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfec:	4b29      	ldr	r3, [pc, #164]	@ (800c094 <HAL_I2S_MspInit+0xd8>)
 800bfee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff0:	4b28      	ldr	r3, [pc, #160]	@ (800c094 <HAL_I2S_MspInit+0xd8>)
 800bff2:	2102      	movs	r1, #2
 800bff4:	430a      	orrs	r2, r1
 800bff6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bff8:	4b26      	ldr	r3, [pc, #152]	@ (800c094 <HAL_I2S_MspInit+0xd8>)
 800bffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bffc:	2202      	movs	r2, #2
 800bffe:	4013      	ands	r3, r2
 800c000:	60bb      	str	r3, [r7, #8]
 800c002:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800c004:	193b      	adds	r3, r7, r4
 800c006:	22b0      	movs	r2, #176	@ 0xb0
 800c008:	0212      	lsls	r2, r2, #8
 800c00a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c00c:	0021      	movs	r1, r4
 800c00e:	187b      	adds	r3, r7, r1
 800c010:	2202      	movs	r2, #2
 800c012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c014:	187b      	adds	r3, r7, r1
 800c016:	2200      	movs	r2, #0
 800c018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c01a:	187b      	adds	r3, r7, r1
 800c01c:	2200      	movs	r2, #0
 800c01e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800c020:	187b      	adds	r3, r7, r1
 800c022:	2200      	movs	r2, #0
 800c024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c026:	187b      	adds	r3, r7, r1
 800c028:	4a1b      	ldr	r2, [pc, #108]	@ (800c098 <HAL_I2S_MspInit+0xdc>)
 800c02a:	0019      	movs	r1, r3
 800c02c:	0010      	movs	r0, r2
 800c02e:	f008 fea7 	bl	8014d80 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800c032:	4b1a      	ldr	r3, [pc, #104]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c034:	4a1a      	ldr	r2, [pc, #104]	@ (800c0a0 <HAL_I2S_MspInit+0xe4>)
 800c036:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800c038:	4b18      	ldr	r3, [pc, #96]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c03a:	2202      	movs	r2, #2
 800c03c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c03e:	4b17      	ldr	r3, [pc, #92]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c040:	2200      	movs	r2, #0
 800c042:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c044:	4b15      	ldr	r3, [pc, #84]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c046:	2200      	movs	r2, #0
 800c048:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c04a:	4b14      	ldr	r3, [pc, #80]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c04c:	2280      	movs	r2, #128	@ 0x80
 800c04e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c050:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c052:	2280      	movs	r2, #128	@ 0x80
 800c054:	0052      	lsls	r2, r2, #1
 800c056:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c058:	4b10      	ldr	r3, [pc, #64]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c05a:	2280      	movs	r2, #128	@ 0x80
 800c05c:	00d2      	lsls	r2, r2, #3
 800c05e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800c060:	4b0e      	ldr	r3, [pc, #56]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c062:	2220      	movs	r2, #32
 800c064:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c066:	4b0d      	ldr	r3, [pc, #52]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c068:	2200      	movs	r2, #0
 800c06a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800c06c:	4b0b      	ldr	r3, [pc, #44]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c06e:	0018      	movs	r0, r3
 800c070:	f008 fa6a 	bl	8014548 <HAL_DMA_Init>
 800c074:	1e03      	subs	r3, r0, #0
 800c076:	d001      	beq.n	800c07c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800c078:	f000 fbea 	bl	800c850 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a07      	ldr	r2, [pc, #28]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c080:	631a      	str	r2, [r3, #48]	@ 0x30
 800c082:	4b06      	ldr	r3, [pc, #24]	@ (800c09c <HAL_I2S_MspInit+0xe0>)
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800c088:	46c0      	nop			@ (mov r8, r8)
 800c08a:	46bd      	mov	sp, r7
 800c08c:	b009      	add	sp, #36	@ 0x24
 800c08e:	bd90      	pop	{r4, r7, pc}
 800c090:	40003800 	.word	0x40003800
 800c094:	40021000 	.word	0x40021000
 800c098:	50000400 	.word	0x50000400
 800c09c:	20000dc8 	.word	0x20000dc8
 800c0a0:	40020044 	.word	0x40020044

0800c0a4 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	af00      	add	r7, sp, #0
  testDone = true;
 800c0a8:	4b14      	ldr	r3, [pc, #80]	@ (800c0fc <SetTestDone+0x58>)
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800c0ae:	23fa      	movs	r3, #250	@ 0xfa
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f007 fd78 	bl	8013ba8 <HAL_Delay>
  SetDBLED(false, false, true);
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	2000      	movs	r0, #0
 800c0be:	f005 fd7b 	bl	8011bb8 <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c0c2:	4a0f      	ldr	r2, [pc, #60]	@ (800c100 <SetTestDone+0x5c>)
 800c0c4:	23fa      	movs	r3, #250	@ 0xfa
 800c0c6:	0119      	lsls	r1, r3, #4
 800c0c8:	23fa      	movs	r3, #250	@ 0xfa
 800c0ca:	011b      	lsls	r3, r3, #4
 800c0cc:	0018      	movs	r0, r3
 800c0ce:	f005 fd3f 	bl	8011b50 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c0d2:	4a0b      	ldr	r2, [pc, #44]	@ (800c100 <SetTestDone+0x5c>)
 800c0d4:	23fa      	movs	r3, #250	@ 0xfa
 800c0d6:	0119      	lsls	r1, r3, #4
 800c0d8:	23fa      	movs	r3, #250	@ 0xfa
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f005 fdb5 	bl	8011c4c <SetVocLED>
  HAL_Delay(500);
 800c0e2:	23fa      	movs	r3, #250	@ 0xfa
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	f007 fd5e 	bl	8013ba8 <HAL_Delay>
  SetLEDsOff();
 800c0ec:	f005 feee 	bl	8011ecc <SetLEDsOff>
  InitDone();
 800c0f0:	f005 fc82 	bl	80119f8 <InitDone>
}
 800c0f4:	46c0      	nop			@ (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	46c0      	nop			@ (mov r8, r8)
 800c0fc:	20000e10 	.word	0x20000e10
 800c100:	00000bb8 	.word	0x00000bb8

0800c104 <FlashLEDs>:

void FlashLEDs(){
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 800c10a:	1dfb      	adds	r3, r7, #7
 800c10c:	2200      	movs	r2, #0
 800c10e:	701a      	strb	r2, [r3, #0]
 800c110:	e021      	b.n	800c156 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 800c112:	2201      	movs	r2, #1
 800c114:	2101      	movs	r1, #1
 800c116:	2001      	movs	r0, #1
 800c118:	f005 fd4e 	bl	8011bb8 <SetDBLED>
    SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800c11c:	4a12      	ldr	r2, [pc, #72]	@ (800c168 <FlashLEDs+0x64>)
 800c11e:	23fa      	movs	r3, #250	@ 0xfa
 800c120:	0119      	lsls	r1, r3, #4
 800c122:	23fa      	movs	r3, #250	@ 0xfa
 800c124:	011b      	lsls	r3, r3, #4
 800c126:	0018      	movs	r0, r3
 800c128:	f005 fd12 	bl	8011b50 <SetStatusLED>
    SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800c12c:	4a0e      	ldr	r2, [pc, #56]	@ (800c168 <FlashLEDs+0x64>)
 800c12e:	23fa      	movs	r3, #250	@ 0xfa
 800c130:	0119      	lsls	r1, r3, #4
 800c132:	23fa      	movs	r3, #250	@ 0xfa
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	0018      	movs	r0, r3
 800c138:	f005 fd88 	bl	8011c4c <SetVocLED>
    HAL_Delay(250);
 800c13c:	20fa      	movs	r0, #250	@ 0xfa
 800c13e:	f007 fd33 	bl	8013ba8 <HAL_Delay>
    SetLEDsOff();
 800c142:	f005 fec3 	bl	8011ecc <SetLEDsOff>
    HAL_Delay(250);
 800c146:	20fa      	movs	r0, #250	@ 0xfa
 800c148:	f007 fd2e 	bl	8013ba8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 800c14c:	1dfb      	adds	r3, r7, #7
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	1dfb      	adds	r3, r7, #7
 800c152:	3201      	adds	r2, #1
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	1dfb      	adds	r3, r7, #7
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d9d9      	bls.n	800c112 <FlashLEDs+0xe>
  }
}
 800c15e:	46c0      	nop			@ (mov r8, r8)
 800c160:	46c0      	nop			@ (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	b002      	add	sp, #8
 800c166:	bd80      	pop	{r7, pc}
 800c168:	00000bb8 	.word	0x00000bb8

0800c16c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800c172:	f007 fca9 	bl	8013ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800c176:	f000 fa1b 	bl	800c5b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800c17a:	f7ff fc01 	bl	800b980 <MX_GPIO_Init>
  MX_DMA_Init();
 800c17e:	f7ff fa29 	bl	800b5d4 <MX_DMA_Init>
  MX_I2C1_Init();
 800c182:	f7ff fd99 	bl	800bcb8 <MX_I2C1_Init>
  MX_I2S2_Init();
 800c186:	f7ff fef1 	bl	800bf6c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800c18a:	f006 fdd5 	bl	8012d38 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800c18e:	f7ff fdd3 	bl	800bd38 <MX_I2C2_Init>
  MX_TIM2_Init();
 800c192:	f006 fbc9 	bl	8012928 <MX_TIM2_Init>
  MX_TIM3_Init();
 800c196:	f006 fc3b 	bl	8012a10 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800c19a:	f006 fdfd 	bl	8012d98 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800c19e:	f7fd feed 	bl	8009f7c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800c1a2:	f015 ff6b 	bl	802207c <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800c1a6:	f001 fb6b 	bl	800d880 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800c1aa:	f006 fd8f 	bl	8012ccc <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800c1ae:	f006 fcad 	bl	8012b0c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800c1b2:	4ac5      	ldr	r2, [pc, #788]	@ (800c4c8 <main+0x35c>)
 800c1b4:	4bc5      	ldr	r3, [pc, #788]	@ (800c4cc <main+0x360>)
 800c1b6:	0011      	movs	r1, r2
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f7ff fd11 	bl	800bbe0 <GPIO_InitPWMLEDs>
  BinaryReleaseInfo();
 800c1be:	f007 f82d 	bl	801321c <BinaryReleaseInfo>
  charge = Battery_Upkeep();
 800c1c2:	f006 fa39 	bl	8012638 <Battery_Upkeep>
 800c1c6:	0003      	movs	r3, r0
 800c1c8:	001a      	movs	r2, r3
 800c1ca:	4bc1      	ldr	r3, [pc, #772]	@ (800c4d0 <main+0x364>)
 800c1cc:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800c1ce:	4bc0      	ldr	r3, [pc, #768]	@ (800c4d0 <main+0x364>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d113      	bne.n	800c1fe <main+0x92>
    SetAllREDLED();
 800c1d6:	f005 fe95 	bl	8011f04 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800c1da:	f7fc ffd9 	bl	8009190 <ReadBatteryVoltage>
 800c1de:	1c03      	adds	r3, r0, #0
 800c1e0:	1c18      	adds	r0, r3, #0
 800c1e2:	f7f7 fb57 	bl	8003894 <__aeabi_f2d>
 800c1e6:	0002      	movs	r2, r0
 800c1e8:	000b      	movs	r3, r1
 800c1ea:	48ba      	ldr	r0, [pc, #744]	@ (800c4d4 <main+0x368>)
 800c1ec:	49ba      	ldr	r1, [pc, #744]	@ (800c4d8 <main+0x36c>)
 800c1ee:	9200      	str	r2, [sp, #0]
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	0002      	movs	r2, r0
 800c1f4:	2002      	movs	r0, #2
 800c1f6:	f006 ff8d 	bl	8013114 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800c1fa:	f7fd fbeb 	bl	80099d4 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800c1fe:	f7fd f89d 	bl	800933c <UserButton_Pressed>
 800c202:	1e03      	subs	r3, r0, #0
 800c204:	d004      	beq.n	800c210 <main+0xa4>
    EnableESPProg();
 800c206:	f016 f809 	bl	802221c <EnableESPProg>
    ESP_Programming = true;
 800c20a:	4bb4      	ldr	r3, [pc, #720]	@ (800c4dc <main+0x370>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800c210:	2003      	movs	r0, #3
 800c212:	f006 ffe9 	bl	80131e8 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c216:	49b2      	ldr	r1, [pc, #712]	@ (800c4e0 <main+0x374>)
 800c218:	4bb2      	ldr	r3, [pc, #712]	@ (800c4e4 <main+0x378>)
 800c21a:	2201      	movs	r2, #1
 800c21c:	0018      	movs	r0, r3
 800c21e:	f010 fa91 	bl	801c744 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800c222:	4bb1      	ldr	r3, [pc, #708]	@ (800c4e8 <main+0x37c>)
 800c224:	0018      	movs	r0, r3
 800c226:	f7fd fcaf 	bl	8009b88 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800c22a:	4ab0      	ldr	r2, [pc, #704]	@ (800c4ec <main+0x380>)
 800c22c:	49b0      	ldr	r1, [pc, #704]	@ (800c4f0 <main+0x384>)
 800c22e:	48b1      	ldr	r0, [pc, #708]	@ (800c4f4 <main+0x388>)
 800c230:	230b      	movs	r3, #11
 800c232:	f004 fd57 	bl	8010ce4 <soundInit>
 800c236:	0003      	movs	r3, r0
 800c238:	001a      	movs	r2, r3
 800c23a:	2301      	movs	r3, #1
 800c23c:	4053      	eors	r3, r2
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <main+0xe4>
    errorHandler(__func__, __LINE__, __FILE__);
 800c244:	4aac      	ldr	r2, [pc, #688]	@ (800c4f8 <main+0x38c>)
 800c246:	4bad      	ldr	r3, [pc, #692]	@ (800c4fc <main+0x390>)
 800c248:	21f9      	movs	r1, #249	@ 0xf9
 800c24a:	0018      	movs	r0, r3
 800c24c:	f007 f81a 	bl	8013284 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800c250:	4bab      	ldr	r3, [pc, #684]	@ (800c500 <main+0x394>)
 800c252:	4aac      	ldr	r2, [pc, #688]	@ (800c504 <main+0x398>)
 800c254:	49a6      	ldr	r1, [pc, #664]	@ (800c4f0 <main+0x384>)
 800c256:	48ac      	ldr	r0, [pc, #688]	@ (800c508 <main+0x39c>)
 800c258:	f000 fbec 	bl	800ca34 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800c25c:	f007 fc9a 	bl	8013b94 <HAL_GetTick>
 800c260:	0003      	movs	r3, r0
 800c262:	4aaa      	ldr	r2, [pc, #680]	@ (800c50c <main+0x3a0>)
 800c264:	189a      	adds	r2, r3, r2
 800c266:	4baa      	ldr	r3, [pc, #680]	@ (800c510 <main+0x3a4>)
 800c268:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800c26a:	f7fd f847 	bl	80092fc <Check_USB_PowerOn>
 800c26e:	0003      	movs	r3, r0
 800c270:	1e5a      	subs	r2, r3, #1
 800c272:	4193      	sbcs	r3, r2
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2201      	movs	r2, #1
 800c278:	4053      	eors	r3, r2
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	1c1a      	adds	r2, r3, #0
 800c27e:	2301      	movs	r3, #1
 800c280:	4013      	ands	r3, r2
 800c282:	b2da      	uxtb	r2, r3
 800c284:	4ba3      	ldr	r3, [pc, #652]	@ (800c514 <main+0x3a8>)
 800c286:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800c288:	f7fd f838 	bl	80092fc <Check_USB_PowerOn>
 800c28c:	1e03      	subs	r3, r0, #0
 800c28e:	d003      	beq.n	800c298 <main+0x12c>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800c290:	4ba1      	ldr	r3, [pc, #644]	@ (800c518 <main+0x3ac>)
 800c292:	0018      	movs	r0, r3
 800c294:	f7fc f986 	bl	80085a4 <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800c298:	4ba0      	ldr	r3, [pc, #640]	@ (800c51c <main+0x3b0>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	0018      	movs	r0, r3
 800c29e:	f006 fee3 	bl	8013068 <TimestampIsReached>
 800c2a2:	1e03      	subs	r3, r0, #0
 800c2a4:	d00e      	beq.n	800c2c4 <main+0x158>
      charge = Battery_Upkeep();
 800c2a6:	f006 f9c7 	bl	8012638 <Battery_Upkeep>
 800c2aa:	0003      	movs	r3, r0
 800c2ac:	001a      	movs	r2, r3
 800c2ae:	4b88      	ldr	r3, [pc, #544]	@ (800c4d0 <main+0x364>)
 800c2b0:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800c2b2:	f007 fc6f 	bl	8013b94 <HAL_GetTick>
 800c2b6:	0003      	movs	r3, r0
 800c2b8:	4a99      	ldr	r2, [pc, #612]	@ (800c520 <main+0x3b4>)
 800c2ba:	189a      	adds	r2, r3, r2
 800c2bc:	4b97      	ldr	r3, [pc, #604]	@ (800c51c <main+0x3b0>)
 800c2be:	601a      	str	r2, [r3, #0]
      showTime();
 800c2c0:	f7fd f84c 	bl	800935c <showTime>

    }
    configCheck();
 800c2c4:	f006 f814 	bl	80122f0 <configCheck>
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800c2c8:	4b96      	ldr	r3, [pc, #600]	@ (800c524 <main+0x3b8>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800c2ce:	4b80      	ldr	r3, [pc, #512]	@ (800c4d0 <main+0x364>)
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d003      	beq.n	800c2de <main+0x172>
 800c2d6:	4b7e      	ldr	r3, [pc, #504]	@ (800c4d0 <main+0x364>)
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <main+0x17c>
      FlashLEDs();
 800c2de:	f7ff ff11 	bl	800c104 <FlashLEDs>
      Sensor.PM_measurementEnabled = false;
 800c2e2:	4b91      	ldr	r3, [pc, #580]	@ (800c528 <main+0x3bc>)
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	709a      	strb	r2, [r3, #2]
    }
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800c2e8:	4b79      	ldr	r3, [pc, #484]	@ (800c4d0 <main+0x364>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d109      	bne.n	800c304 <main+0x198>
 800c2f0:	4b8e      	ldr	r3, [pc, #568]	@ (800c52c <main+0x3c0>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d105      	bne.n	800c304 <main+0x198>
       batteryEmpty = true;
 800c2f8:	4b8d      	ldr	r3, [pc, #564]	@ (800c530 <main+0x3c4>)
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	701a      	strb	r2, [r3, #0]
       Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 800c2fe:	f7fd fb69 	bl	80099d4 <Enter_Standby_Mode>
 800c302:	e002      	b.n	800c30a <main+0x19e>
    }
    else{
      batteryEmpty = false;
 800c304:	4b8a      	ldr	r3, [pc, #552]	@ (800c530 <main+0x3c4>)
 800c306:	2200      	movs	r2, #0
 800c308:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800c30a:	4b8a      	ldr	r3, [pc, #552]	@ (800c534 <main+0x3c8>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d100      	bne.n	800c314 <main+0x1a8>
 800c312:	e0a2      	b.n	800c45a <main+0x2ee>
 800c314:	4b71      	ldr	r3, [pc, #452]	@ (800c4dc <main+0x370>)
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2201      	movs	r2, #1
 800c31a:	4053      	eors	r3, r2
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d100      	bne.n	800c324 <main+0x1b8>
 800c322:	e09a      	b.n	800c45a <main+0x2ee>
 800c324:	4b82      	ldr	r3, [pc, #520]	@ (800c530 <main+0x3c4>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2201      	movs	r2, #1
 800c32a:	4053      	eors	r3, r2
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d100      	bne.n	800c334 <main+0x1c8>
 800c332:	e092      	b.n	800c45a <main+0x2ee>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800c334:	4b77      	ldr	r3, [pc, #476]	@ (800c514 <main+0x3a8>)
 800c336:	781a      	ldrb	r2, [r3, #0]
 800c338:	4b7f      	ldr	r3, [pc, #508]	@ (800c538 <main+0x3cc>)
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d03a      	beq.n	800c3b6 <main+0x24a>
        if (IsSGPPresent() && !usbPluggedIn) {
 800c340:	f000 fb0a 	bl	800c958 <IsSGPPresent>
 800c344:	1e03      	subs	r3, r0, #0
 800c346:	d009      	beq.n	800c35c <main+0x1f0>
 800c348:	4b7b      	ldr	r3, [pc, #492]	@ (800c538 <main+0x3cc>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2201      	movs	r2, #1
 800c34e:	4053      	eors	r3, r2
 800c350:	b2db      	uxtb	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d002      	beq.n	800c35c <main+0x1f0>
          SetVOCSensorDIS_ENA(true);
 800c356:	2001      	movs	r0, #1
 800c358:	f000 fb08 	bl	800c96c <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800c35c:	4b77      	ldr	r3, [pc, #476]	@ (800c53c <main+0x3d0>)
 800c35e:	791b      	ldrb	r3, [r3, #4]
 800c360:	2b34      	cmp	r3, #52	@ 0x34
 800c362:	d003      	beq.n	800c36c <main+0x200>
 800c364:	4b75      	ldr	r3, [pc, #468]	@ (800c53c <main+0x3d0>)
 800c366:	791b      	ldrb	r3, [r3, #4]
 800c368:	2b35      	cmp	r3, #53	@ 0x35
 800c36a:	d106      	bne.n	800c37a <main+0x20e>
 800c36c:	4b72      	ldr	r3, [pc, #456]	@ (800c538 <main+0x3cc>)
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <main+0x20e>
          SetVOCSensorDIS_ENA(false);
 800c374:	2000      	movs	r0, #0
 800c376:	f000 faf9 	bl	800c96c <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800c37a:	4b6f      	ldr	r3, [pc, #444]	@ (800c538 <main+0x3cc>)
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	2201      	movs	r2, #1
 800c380:	4053      	eors	r3, r2
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d012      	beq.n	800c3ae <main+0x242>
 800c388:	f007 fc04 	bl	8013b94 <HAL_GetTick>
 800c38c:	0003      	movs	r3, r0
 800c38e:	4a5f      	ldr	r2, [pc, #380]	@ (800c50c <main+0x3a0>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d90c      	bls.n	800c3ae <main+0x242>
          Debug("Device time out set in main due to powerstatus shift");
 800c394:	4a6a      	ldr	r2, [pc, #424]	@ (800c540 <main+0x3d4>)
 800c396:	4b6b      	ldr	r3, [pc, #428]	@ (800c544 <main+0x3d8>)
 800c398:	0019      	movs	r1, r3
 800c39a:	2003      	movs	r0, #3
 800c39c:	f006 feba 	bl	8013114 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800c3a0:	f007 fbf8 	bl	8013b94 <HAL_GetTick>
 800c3a4:	0003      	movs	r3, r0
 800c3a6:	4a68      	ldr	r2, [pc, #416]	@ (800c548 <main+0x3dc>)
 800c3a8:	189a      	adds	r2, r3, r2
 800c3aa:	4b59      	ldr	r3, [pc, #356]	@ (800c510 <main+0x3a4>)
 800c3ac:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800c3ae:	4b62      	ldr	r3, [pc, #392]	@ (800c538 <main+0x3cc>)
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	4b58      	ldr	r3, [pc, #352]	@ (800c514 <main+0x3a8>)
 800c3b4:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800c3b6:	f000 ff45 	bl	800d244 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800c3ba:	4b5b      	ldr	r3, [pc, #364]	@ (800c528 <main+0x3bc>)
 800c3bc:	78db      	ldrb	r3, [r3, #3]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d005      	beq.n	800c3ce <main+0x262>
        MICstate = Mic_Upkeep();
 800c3c2:	f001 f949 	bl	800d658 <Mic_Upkeep>
 800c3c6:	0003      	movs	r3, r0
 800c3c8:	001a      	movs	r2, r3
 800c3ca:	4b60      	ldr	r3, [pc, #384]	@ (800c54c <main+0x3e0>)
 800c3cc:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800c3ce:	4b40      	ldr	r3, [pc, #256]	@ (800c4d0 <main+0x364>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d803      	bhi.n	800c3de <main+0x272>
 800c3d6:	4b53      	ldr	r3, [pc, #332]	@ (800c524 <main+0x3b8>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d016      	beq.n	800c40c <main+0x2a0>
 800c3de:	4b52      	ldr	r3, [pc, #328]	@ (800c528 <main+0x3bc>)
 800c3e0:	789b      	ldrb	r3, [r3, #2]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d012      	beq.n	800c40c <main+0x2a0>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800c3e6:	f001 fad9 	bl	800d99c <sen5x_Get_sen5x_enable_state>
 800c3ea:	0003      	movs	r3, r0
 800c3ec:	001a      	movs	r2, r3
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	4053      	eors	r3, r2
 800c3f2:	b2db      	uxtb	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <main+0x29a>
 800c3f8:	4b4f      	ldr	r3, [pc, #316]	@ (800c538 <main+0x3cc>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d002      	beq.n	800c406 <main+0x29a>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800c400:	2000      	movs	r0, #0
 800c402:	f001 fb07 	bl	800da14 <sen5x_enable>
        }
        sen5x_statemachine();
 800c406:	f002 f883 	bl	800e510 <sen5x_statemachine>
 800c40a:	e020      	b.n	800c44e <main+0x2e2>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800c40c:	4b30      	ldr	r3, [pc, #192]	@ (800c4d0 <main+0x364>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d81c      	bhi.n	800c44e <main+0x2e2>
 800c414:	4b43      	ldr	r3, [pc, #268]	@ (800c524 <main+0x3b8>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	2201      	movs	r2, #1
 800c41a:	4053      	eors	r3, r2
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d015      	beq.n	800c44e <main+0x2e2>
 800c422:	4b41      	ldr	r3, [pc, #260]	@ (800c528 <main+0x3bc>)
 800c424:	789b      	ldrb	r3, [r3, #2]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d011      	beq.n	800c44e <main+0x2e2>
        Info("Battery level insufficient for sen5x operation");
 800c42a:	4a49      	ldr	r2, [pc, #292]	@ (800c550 <main+0x3e4>)
 800c42c:	4b2a      	ldr	r3, [pc, #168]	@ (800c4d8 <main+0x36c>)
 800c42e:	0019      	movs	r1, r3
 800c430:	2002      	movs	r0, #2
 800c432:	f006 fe6f 	bl	8013114 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800c436:	4b3c      	ldr	r3, [pc, #240]	@ (800c528 <main+0x3bc>)
 800c438:	2200      	movs	r2, #0
 800c43a:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800c43c:	4b45      	ldr	r3, [pc, #276]	@ (800c554 <main+0x3e8>)
 800c43e:	2200      	movs	r2, #0
 800c440:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800c442:	4b45      	ldr	r3, [pc, #276]	@ (800c558 <main+0x3ec>)
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <main+0x2e2>
          sen5x_Power_Off();
 800c44a:	f001 fb6f 	bl	800db2c <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800c44e:	f7fa ffed 	bl	800742c <ESP_Upkeep>
 800c452:	0003      	movs	r3, r0
 800c454:	001a      	movs	r2, r3
 800c456:	4b35      	ldr	r3, [pc, #212]	@ (800c52c <main+0x3c0>)
 800c458:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800c45a:	4b36      	ldr	r3, [pc, #216]	@ (800c534 <main+0x3c8>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	2201      	movs	r2, #1
 800c460:	4053      	eors	r3, r2
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00f      	beq.n	800c488 <main+0x31c>
 800c468:	4b1c      	ldr	r3, [pc, #112]	@ (800c4dc <main+0x370>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2201      	movs	r2, #1
 800c46e:	4053      	eors	r3, r2
 800c470:	b2db      	uxtb	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d008      	beq.n	800c488 <main+0x31c>
 800c476:	4b2e      	ldr	r3, [pc, #184]	@ (800c530 <main+0x3c4>)
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2201      	movs	r2, #1
 800c47c:	4053      	eors	r3, r2
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <main+0x31c>
      Device_Test();  // for device with startup time
 800c484:	f000 fcae 	bl	800cde4 <Device_Test>
    }
    if (!usbPluggedIn) {
 800c488:	4b2b      	ldr	r3, [pc, #172]	@ (800c538 <main+0x3cc>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	2201      	movs	r2, #1
 800c48e:	4053      	eors	r3, r2
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d06d      	beq.n	800c572 <main+0x406>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800c496:	4b31      	ldr	r3, [pc, #196]	@ (800c55c <main+0x3f0>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2201      	movs	r2, #1
 800c49c:	4053      	eors	r3, r2
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d066      	beq.n	800c572 <main+0x406>
 800c4a4:	f000 fd1c 	bl	800cee0 <AllDevicesReady>
 800c4a8:	1e03      	subs	r3, r0, #0
 800c4aa:	d062      	beq.n	800c572 <main+0x406>
 800c4ac:	4b2c      	ldr	r3, [pc, #176]	@ (800c560 <main+0x3f4>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d05e      	beq.n	800c572 <main+0x406>
        EnabledConnectedDevices();
 800c4b4:	f000 fe2a 	bl	800d10c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800c4b8:	4b2a      	ldr	r3, [pc, #168]	@ (800c564 <main+0x3f8>)
 800c4ba:	795b      	ldrb	r3, [r3, #5]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d053      	beq.n	800c568 <main+0x3fc>
 800c4c0:	23d7      	movs	r3, #215	@ 0xd7
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	e052      	b.n	800c56c <main+0x400>
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	20001ec0 	.word	0x20001ec0
 800c4cc:	20001e80 	.word	0x20001e80
 800c4d0:	20000e2c 	.word	0x20000e2c
 800c4d4:	0802bff4 	.word	0x0802bff4
 800c4d8:	0802c018 	.word	0x0802c018
 800c4dc:	20000e11 	.word	0x20000e11
 800c4e0:	20000e18 	.word	0x20000e18
 800c4e4:	20001ff8 	.word	0x20001ff8
 800c4e8:	20000eac 	.word	0x20000eac
 800c4ec:	20001f00 	.word	0x20001f00
 800c4f0:	20000d8c 	.word	0x20000d8c
 800c4f4:	20000dc8 	.word	0x20000dc8
 800c4f8:	0802c01c 	.word	0x0802c01c
 800c4fc:	0802d9e0 	.word	0x0802d9e0
 800c500:	200020b0 	.word	0x200020b0
 800c504:	20000b8c 	.word	0x20000b8c
 800c508:	20000c54 	.word	0x20000c54
 800c50c:	000061a8 	.word	0x000061a8
 800c510:	20000e28 	.word	0x20000e28
 800c514:	20000e13 	.word	0x20000e13
 800c518:	0802c030 	.word	0x0802c030
 800c51c:	20000098 	.word	0x20000098
 800c520:	0000c350 	.word	0x0000c350
 800c524:	20000097 	.word	0x20000097
 800c528:	20000e30 	.word	0x20000e30
 800c52c:	20000e15 	.word	0x20000e15
 800c530:	20000e12 	.word	0x20000e12
 800c534:	20000e10 	.word	0x20000e10
 800c538:	20001e61 	.word	0x20001e61
 800c53c:	20000ed4 	.word	0x20000ed4
 800c540:	0802c064 	.word	0x0802c064
 800c544:	0802c09c 	.word	0x0802c09c
 800c548:	00001194 	.word	0x00001194
 800c54c:	20000e14 	.word	0x20000e14
 800c550:	0802c0a0 	.word	0x0802c0a0
 800c554:	20000ed2 	.word	0x20000ed2
 800c558:	20000ed1 	.word	0x20000ed1
 800c55c:	20001e62 	.word	0x20001e62
 800c560:	200005a8 	.word	0x200005a8
 800c564:	20000e38 	.word	0x20000e38
 800c568:	23dc      	movs	r3, #220	@ 0xdc
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	0018      	movs	r0, r3
 800c56e:	f7fd fa51 	bl	8009a14 <Enter_Stop_Mode>
    int len = vcp_recv (u1_rx_buff, 3);
    if (len > 0) {
      check_cli_command();
    }
#endif
    if (u1_rx_buff[0] != '\0') {
 800c572:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a8 <main+0x43c>)
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <main+0x412>
      check_cli_command();
 800c57a:	f000 f8a3 	bl	800c6c4 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800c57e:	f7fc febd 	bl	80092fc <Check_USB_PowerOn>
 800c582:	1e03      	subs	r3, r0, #0
 800c584:	d100      	bne.n	800c588 <main+0x41c>
 800c586:	e687      	b.n	800c298 <main+0x12c>
 800c588:	4b08      	ldr	r3, [pc, #32]	@ (800c5ac <main+0x440>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2201      	movs	r2, #1
 800c58e:	4053      	eors	r3, r2
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d100      	bne.n	800c598 <main+0x42c>
 800c596:	e67f      	b.n	800c298 <main+0x12c>
      Process_USB_input(GetUsbRxPointer());
 800c598:	f015 fe4a 	bl	8022230 <GetUsbRxPointer>
 800c59c:	0003      	movs	r3, r0
 800c59e:	0018      	movs	r0, r3
 800c5a0:	f7fc fc02 	bl	8008da8 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800c5a4:	e678      	b.n	800c298 <main+0x12c>
 800c5a6:	46c0      	nop			@ (mov r8, r8)
 800c5a8:	20000e18 	.word	0x20000e18
 800c5ac:	200005a3 	.word	0x200005a3

0800c5b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800c5b0:	b590      	push	{r4, r7, lr}
 800c5b2:	b09d      	sub	sp, #116	@ 0x74
 800c5b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800c5b6:	2438      	movs	r4, #56	@ 0x38
 800c5b8:	193b      	adds	r3, r7, r4
 800c5ba:	0018      	movs	r0, r3
 800c5bc:	2338      	movs	r3, #56	@ 0x38
 800c5be:	001a      	movs	r2, r3
 800c5c0:	2100      	movs	r1, #0
 800c5c2:	f019 f87d 	bl	80256c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800c5c6:	2324      	movs	r3, #36	@ 0x24
 800c5c8:	18fb      	adds	r3, r7, r3
 800c5ca:	0018      	movs	r0, r3
 800c5cc:	2314      	movs	r3, #20
 800c5ce:	001a      	movs	r2, r3
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	f019 f875 	bl	80256c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c5d6:	003b      	movs	r3, r7
 800c5d8:	0018      	movs	r0, r3
 800c5da:	2324      	movs	r3, #36	@ 0x24
 800c5dc:	001a      	movs	r2, r3
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f019 f86e 	bl	80256c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c5e4:	4b34      	ldr	r3, [pc, #208]	@ (800c6b8 <SystemClock_Config+0x108>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a34      	ldr	r2, [pc, #208]	@ (800c6bc <SystemClock_Config+0x10c>)
 800c5ea:	401a      	ands	r2, r3
 800c5ec:	4b32      	ldr	r3, [pc, #200]	@ (800c6b8 <SystemClock_Config+0x108>)
 800c5ee:	2180      	movs	r1, #128	@ 0x80
 800c5f0:	0109      	lsls	r1, r1, #4
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800c5f6:	f00d fe79 	bl	801a2ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800c5fa:	4b31      	ldr	r3, [pc, #196]	@ (800c6c0 <SystemClock_Config+0x110>)
 800c5fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5fe:	4a2f      	ldr	r2, [pc, #188]	@ (800c6bc <SystemClock_Config+0x10c>)
 800c600:	401a      	ands	r2, r3
 800c602:	4b2f      	ldr	r3, [pc, #188]	@ (800c6c0 <SystemClock_Config+0x110>)
 800c604:	2180      	movs	r1, #128	@ 0x80
 800c606:	0149      	lsls	r1, r1, #5
 800c608:	430a      	orrs	r2, r1
 800c60a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800c60c:	193b      	adds	r3, r7, r4
 800c60e:	2226      	movs	r2, #38	@ 0x26
 800c610:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c612:	193b      	adds	r3, r7, r4
 800c614:	2280      	movs	r2, #128	@ 0x80
 800c616:	0052      	lsls	r2, r2, #1
 800c618:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c61a:	0021      	movs	r1, r4
 800c61c:	187b      	adds	r3, r7, r1
 800c61e:	2201      	movs	r2, #1
 800c620:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c622:	187b      	adds	r3, r7, r1
 800c624:	2210      	movs	r2, #16
 800c626:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800c628:	187b      	adds	r3, r7, r1
 800c62a:	2201      	movs	r2, #1
 800c62c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c62e:	187b      	adds	r3, r7, r1
 800c630:	2200      	movs	r2, #0
 800c632:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800c634:	187b      	adds	r3, r7, r1
 800c636:	0018      	movs	r0, r3
 800c638:	f00d fee8 	bl	801a40c <HAL_RCC_OscConfig>
 800c63c:	1e03      	subs	r3, r0, #0
 800c63e:	d001      	beq.n	800c644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800c640:	f000 f906 	bl	800c850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800c644:	2124      	movs	r1, #36	@ 0x24
 800c646:	187b      	adds	r3, r7, r1
 800c648:	220f      	movs	r2, #15
 800c64a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c64c:	187b      	adds	r3, r7, r1
 800c64e:	2201      	movs	r2, #1
 800c650:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c652:	187b      	adds	r3, r7, r1
 800c654:	2200      	movs	r2, #0
 800c656:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c658:	187b      	adds	r3, r7, r1
 800c65a:	2200      	movs	r2, #0
 800c65c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800c65e:	187b      	adds	r3, r7, r1
 800c660:	2200      	movs	r2, #0
 800c662:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800c664:	187b      	adds	r3, r7, r1
 800c666:	2100      	movs	r1, #0
 800c668:	0018      	movs	r0, r3
 800c66a:	f00e faa3 	bl	801abb4 <HAL_RCC_ClockConfig>
 800c66e:	1e03      	subs	r3, r0, #0
 800c670:	d001      	beq.n	800c676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800c672:	f000 f8ed 	bl	800c850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800c676:	003b      	movs	r3, r7
 800c678:	226d      	movs	r2, #109	@ 0x6d
 800c67a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c67c:	003b      	movs	r3, r7
 800c67e:	2200      	movs	r2, #0
 800c680:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800c682:	003b      	movs	r3, r7
 800c684:	2200      	movs	r2, #0
 800c686:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800c688:	003b      	movs	r3, r7
 800c68a:	2200      	movs	r2, #0
 800c68c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800c68e:	003b      	movs	r3, r7
 800c690:	2280      	movs	r2, #128	@ 0x80
 800c692:	0252      	lsls	r2, r2, #9
 800c694:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c696:	003b      	movs	r3, r7
 800c698:	2280      	movs	r2, #128	@ 0x80
 800c69a:	04d2      	lsls	r2, r2, #19
 800c69c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c69e:	003b      	movs	r3, r7
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	f00e fcab 	bl	801affc <HAL_RCCEx_PeriphCLKConfig>
 800c6a6:	1e03      	subs	r3, r0, #0
 800c6a8:	d001      	beq.n	800c6ae <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800c6aa:	f000 f8d1 	bl	800c850 <Error_Handler>
  }
}
 800c6ae:	46c0      	nop			@ (mov r8, r8)
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	b01d      	add	sp, #116	@ 0x74
 800c6b4:	bd90      	pop	{r4, r7, pc}
 800c6b6:	46c0      	nop			@ (mov r8, r8)
 800c6b8:	40007000 	.word	0x40007000
 800c6bc:	ffffe7ff 	.word	0xffffe7ff
 800c6c0:	40021000 	.word	0x40021000

0800c6c4 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800c6c8:	4b34      	ldr	r3, [pc, #208]	@ (800c79c <check_cli_command+0xd8>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	3b61      	subs	r3, #97	@ 0x61
 800c6ce:	2b13      	cmp	r3, #19
 800c6d0:	d833      	bhi.n	800c73a <check_cli_command+0x76>
 800c6d2:	009a      	lsls	r2, r3, #2
 800c6d4:	4b32      	ldr	r3, [pc, #200]	@ (800c7a0 <check_cli_command+0xdc>)
 800c6d6:	18d3      	adds	r3, r2, r3
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800c6dc:	4b31      	ldr	r3, [pc, #196]	@ (800c7a4 <check_cli_command+0xe0>)
 800c6de:	0018      	movs	r0, r3
 800c6e0:	f018 fe7a 	bl	80253d8 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800c6e4:	2003      	movs	r0, #3
 800c6e6:	f006 fd7f 	bl	80131e8 <SetVerboseLevel>
      break;
 800c6ea:	e051      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800c6ec:	f7fb ff9a 	bl	8008624 <PC_show_Keys>
    break;
 800c6f0:	e04e      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800c6f2:	f7f8 f8f7 	bl	80048e4 <forceNTPupdate>
    break;
 800c6f6:	e04b      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800c6f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c7a8 <check_cli_command+0xe4>)
 800c6fa:	0018      	movs	r0, r3
 800c6fc:	f018 fe6c 	bl	80253d8 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800c700:	2002      	movs	r0, #2
 800c702:	f006 fd71 	bl	80131e8 <SetVerboseLevel>
      break;
 800c706:	e043      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800c708:	4b28      	ldr	r3, [pc, #160]	@ (800c7ac <check_cli_command+0xe8>)
 800c70a:	0018      	movs	r0, r3
 800c70c:	f018 fe64 	bl	80253d8 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800c710:	2001      	movs	r0, #1
 800c712:	f006 fd69 	bl	80131e8 <SetVerboseLevel>
      break;
 800c716:	e03b      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800c718:	4b25      	ldr	r3, [pc, #148]	@ (800c7b0 <check_cli_command+0xec>)
 800c71a:	0018      	movs	r0, r3
 800c71c:	f018 fe5c 	bl	80253d8 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800c720:	2000      	movs	r0, #0
 800c722:	f006 fd61 	bl	80131e8 <SetVerboseLevel>
      break;
 800c726:	e033      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800c728:	f007 fa34 	bl	8013b94 <HAL_GetTick>
 800c72c:	0002      	movs	r2, r0
 800c72e:	4b21      	ldr	r3, [pc, #132]	@ (800c7b4 <check_cli_command+0xf0>)
 800c730:	601a      	str	r2, [r3, #0]
      break;
 800c732:	e02d      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800c734:	f7fc fe12 	bl	800935c <showTime>
      break;
 800c738:	e02a      	b.n	800c790 <check_cli_command+0xcc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
      break;
#endif
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 800c73a:	4a1f      	ldr	r2, [pc, #124]	@ (800c7b8 <check_cli_command+0xf4>)
 800c73c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <check_cli_command+0xf8>)
 800c73e:	0019      	movs	r1, r3
 800c740:	2001      	movs	r0, #1
 800c742:	f006 fce7 	bl	8013114 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 800c746:	4b1e      	ldr	r3, [pc, #120]	@ (800c7c0 <check_cli_command+0xfc>)
 800c748:	0018      	movs	r0, r3
 800c74a:	f018 fe45 	bl	80253d8 <puts>
      printf("a - VerboseLevel set to all\r\n");
 800c74e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7c4 <check_cli_command+0x100>)
 800c750:	0018      	movs	r0, r3
 800c752:	f018 fe41 	bl	80253d8 <puts>
      printf("e - show EEPROM\r\n");
 800c756:	4b1c      	ldr	r3, [pc, #112]	@ (800c7c8 <check_cli_command+0x104>)
 800c758:	0018      	movs	r0, r3
 800c75a:	f018 fe3d 	bl	80253d8 <puts>
      printf("f - Force NTP time synchronization\r\n");
 800c75e:	4b1b      	ldr	r3, [pc, #108]	@ (800c7cc <check_cli_command+0x108>)
 800c760:	0018      	movs	r0, r3
 800c762:	f018 fe39 	bl	80253d8 <puts>
      printf("i - VerboseLevel set to info\r\n");
 800c766:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d0 <check_cli_command+0x10c>)
 800c768:	0018      	movs	r0, r3
 800c76a:	f018 fe35 	bl	80253d8 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800c76e:	4b19      	ldr	r3, [pc, #100]	@ (800c7d4 <check_cli_command+0x110>)
 800c770:	0018      	movs	r0, r3
 800c772:	f018 fe31 	bl	80253d8 <puts>
      printf("n - VerboseLevel set to none\r\n");
 800c776:	4b18      	ldr	r3, [pc, #96]	@ (800c7d8 <check_cli_command+0x114>)
 800c778:	0018      	movs	r0, r3
 800c77a:	f018 fe2d 	bl	80253d8 <puts>
      printf("s - Start particle measurement\r\n");
 800c77e:	4b17      	ldr	r3, [pc, #92]	@ (800c7dc <check_cli_command+0x118>)
 800c780:	0018      	movs	r0, r3
 800c782:	f018 fe29 	bl	80253d8 <puts>
      printf("t - Show actual systemtime\r\n");
 800c786:	4b16      	ldr	r3, [pc, #88]	@ (800c7e0 <check_cli_command+0x11c>)
 800c788:	0018      	movs	r0, r3
 800c78a:	f018 fe25 	bl	80253d8 <puts>
#ifdef USBLOGGING
      printf("u - USB logging toggle\r\n");
#endif
  break;
 800c78e:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800c790:	4b02      	ldr	r3, [pc, #8]	@ (800c79c <check_cli_command+0xd8>)
 800c792:	2200      	movs	r2, #0
 800c794:	701a      	strb	r2, [r3, #0]
}
 800c796:	46c0      	nop			@ (mov r8, r8)
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	20000e18 	.word	0x20000e18
 800c7a0:	0802d990 	.word	0x0802d990
 800c7a4:	0802c0d0 	.word	0x0802c0d0
 800c7a8:	0802c0ec 	.word	0x0802c0ec
 800c7ac:	0802c108 	.word	0x0802c108
 800c7b0:	0802c128 	.word	0x0802c128
 800c7b4:	20000ee0 	.word	0x20000ee0
 800c7b8:	0802c144 	.word	0x0802c144
 800c7bc:	0802c174 	.word	0x0802c174
 800c7c0:	0802c178 	.word	0x0802c178
 800c7c4:	0802c190 	.word	0x0802c190
 800c7c8:	0802c1b0 	.word	0x0802c1b0
 800c7cc:	0802c1c4 	.word	0x0802c1c4
 800c7d0:	0802c1e8 	.word	0x0802c1e8
 800c7d4:	0802c208 	.word	0x0802c208
 800c7d8:	0802c22c 	.word	0x0802c22c
 800c7dc:	0802c24c 	.word	0x0802c24c
 800c7e0:	0802c26c 	.word	0x0802c26c

0800c7e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800c7ec:	4907      	ldr	r1, [pc, #28]	@ (800c80c <HAL_UART_RxCpltCallback+0x28>)
 800c7ee:	4b08      	ldr	r3, [pc, #32]	@ (800c810 <HAL_UART_RxCpltCallback+0x2c>)
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	f00f ffa6 	bl	801c744 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800c7f8:	4904      	ldr	r1, [pc, #16]	@ (800c80c <HAL_UART_RxCpltCallback+0x28>)
 800c7fa:	4b05      	ldr	r3, [pc, #20]	@ (800c810 <HAL_UART_RxCpltCallback+0x2c>)
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	0018      	movs	r0, r3
 800c800:	f00f ffa0 	bl	801c744 <HAL_UART_Receive_IT>
}
 800c804:	46c0      	nop			@ (mov r8, r8)
 800c806:	46bd      	mov	sp, r7
 800c808:	b002      	add	sp, #8
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	20000e18 	.word	0x20000e18
 800c810:	20001ff8 	.word	0x20001ff8

0800c814 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	0002      	movs	r2, r0
 800c81c:	1dbb      	adds	r3, r7, #6
 800c81e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800c820:	1dbb      	adds	r3, r7, #6
 800c822:	881a      	ldrh	r2, [r3, #0]
 800c824:	2380      	movs	r3, #128	@ 0x80
 800c826:	021b      	lsls	r3, r3, #8
 800c828:	429a      	cmp	r2, r3
 800c82a:	d10b      	bne.n	800c844 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800c82c:	f005 ff18 	bl	8012660 <setuserToggle>
    if (GetPMSensorPresence()) {
 800c830:	f000 f860 	bl	800c8f4 <GetPMSensorPresence>
 800c834:	1e03      	subs	r3, r0, #0
 800c836:	d005      	beq.n	800c844 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800c838:	4b04      	ldr	r3, [pc, #16]	@ (800c84c <HAL_GPIO_EXTI_Callback+0x38>)
 800c83a:	2201      	movs	r2, #1
 800c83c:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800c83e:	2000      	movs	r0, #0
 800c840:	f001 f8b6 	bl	800d9b0 <sen5x_Set_sen5x_state>
    }
  }
}
 800c844:	46c0      	nop			@ (mov r8, r8)
 800c846:	46bd      	mov	sp, r7
 800c848:	b002      	add	sp, #8
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	20000e30 	.word	0x20000e30

0800c850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800c854:	f005 fb56 	bl	8011f04 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c858:	b672      	cpsid	i
}
 800c85a:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800c85c:	4a05      	ldr	r2, [pc, #20]	@ (800c874 <Error_Handler+0x24>)
 800c85e:	4b06      	ldr	r3, [pc, #24]	@ (800c878 <Error_Handler+0x28>)
 800c860:	0019      	movs	r1, r3
 800c862:	2001      	movs	r0, #1
 800c864:	f006 fc56 	bl	8013114 <CreateLine>

    HAL_Delay(2500);
 800c868:	4b04      	ldr	r3, [pc, #16]	@ (800c87c <Error_Handler+0x2c>)
 800c86a:	0018      	movs	r0, r3
 800c86c:	f007 f99c 	bl	8013ba8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800c870:	46c0      	nop			@ (mov r8, r8)
 800c872:	e7f3      	b.n	800c85c <Error_Handler+0xc>
 800c874:	0802c288 	.word	0x0802c288
 800c878:	0802c174 	.word	0x0802c174
 800c87c:	000009c4 	.word	0x000009c4

0800c880 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800c884:	4b19      	ldr	r3, [pc, #100]	@ (800c8ec <testInit+0x6c>)
 800c886:	2200      	movs	r2, #0
 800c888:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800c88a:	4b18      	ldr	r3, [pc, #96]	@ (800c8ec <testInit+0x6c>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800c890:	4b16      	ldr	r3, [pc, #88]	@ (800c8ec <testInit+0x6c>)
 800c892:	2200      	movs	r2, #0
 800c894:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800c896:	4b15      	ldr	r3, [pc, #84]	@ (800c8ec <testInit+0x6c>)
 800c898:	2200      	movs	r2, #0
 800c89a:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800c89c:	4b13      	ldr	r3, [pc, #76]	@ (800c8ec <testInit+0x6c>)
 800c89e:	2200      	movs	r2, #0
 800c8a0:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800c8a2:	4b12      	ldr	r3, [pc, #72]	@ (800c8ec <testInit+0x6c>)
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800c8a8:	4b10      	ldr	r3, [pc, #64]	@ (800c8ec <testInit+0x6c>)
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800c8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c8ec <testInit+0x6c>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800c8ec <testInit+0x6c>)
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <testInit+0x70>)
 800c8bc:	2201      	movs	r2, #1
 800c8be:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800c8c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f0 <testInit+0x70>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800c8c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f0 <testInit+0x70>)
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800c8cc:	4b08      	ldr	r3, [pc, #32]	@ (800c8f0 <testInit+0x70>)
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800c8d2:	4b07      	ldr	r3, [pc, #28]	@ (800c8f0 <testInit+0x70>)
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800c8d8:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <testInit+0x70>)
 800c8da:	2201      	movs	r2, #1
 800c8dc:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800c8de:	4b04      	ldr	r3, [pc, #16]	@ (800c8f0 <testInit+0x70>)
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	719a      	strb	r2, [r3, #6]
}
 800c8e4:	46c0      	nop			@ (mov r8, r8)
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	46c0      	nop			@ (mov r8, r8)
 800c8ec:	20000e38 	.word	0x20000e38
 800c8f0:	20000e30 	.word	0x20000e30

0800c8f4 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800c8f8:	4b02      	ldr	r3, [pc, #8]	@ (800c904 <GetPMSensorPresence+0x10>)
 800c8fa:	795b      	ldrb	r3, [r3, #5]
}
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	46c0      	nop			@ (mov r8, r8)
 800c904:	20000e38 	.word	0x20000e38

0800c908 <DisablePMSensor>:

void DisablePMSensor() {
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800c90c:	4b02      	ldr	r3, [pc, #8]	@ (800c918 <DisablePMSensor+0x10>)
 800c90e:	2200      	movs	r2, #0
 800c910:	715a      	strb	r2, [r3, #5]
}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	20000e38 	.word	0x20000e38

0800c91c <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800c91c:	b580      	push	{r7, lr}
 800c91e:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800c920:	4b02      	ldr	r3, [pc, #8]	@ (800c92c <IsAHT20SensorPresent+0x10>)
 800c922:	789b      	ldrb	r3, [r3, #2]
}
 800c924:	0018      	movs	r0, r3
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	46c0      	nop			@ (mov r8, r8)
 800c92c:	20000e38 	.word	0x20000e38

0800c930 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800c934:	4b02      	ldr	r3, [pc, #8]	@ (800c940 <IsBMP280SensorPresent+0x10>)
 800c936:	791b      	ldrb	r3, [r3, #4]
}
 800c938:	0018      	movs	r0, r3
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	46c0      	nop			@ (mov r8, r8)
 800c940:	20000e38 	.word	0x20000e38

0800c944 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800c944:	b580      	push	{r7, lr}
 800c946:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800c948:	4b02      	ldr	r3, [pc, #8]	@ (800c954 <IsENS160SensorPresent+0x10>)
 800c94a:	78db      	ldrb	r3, [r3, #3]
}
 800c94c:	0018      	movs	r0, r3
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	46c0      	nop			@ (mov r8, r8)
 800c954:	20000e38 	.word	0x20000e38

0800c958 <IsSGPPresent>:

bool IsSGPPresent() {
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800c95c:	4b02      	ldr	r3, [pc, #8]	@ (800c968 <IsSGPPresent+0x10>)
 800c95e:	785b      	ldrb	r3, [r3, #1]
}
 800c960:	0018      	movs	r0, r3
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	46c0      	nop			@ (mov r8, r8)
 800c968:	20000e38 	.word	0x20000e38

0800c96c <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	0002      	movs	r2, r0
 800c974:	1dfb      	adds	r3, r7, #7
 800c976:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800c978:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a8 <SetVOCSensorDIS_ENA+0x3c>)
 800c97a:	1dfa      	adds	r2, r7, #7
 800c97c:	7812      	ldrb	r2, [r2, #0]
 800c97e:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800c980:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <SetVOCSensorDIS_ENA+0x40>)
 800c982:	1dfa      	adds	r2, r7, #7
 800c984:	7812      	ldrb	r2, [r2, #0]
 800c986:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800c988:	1dfb      	adds	r3, r7, #7
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <SetVOCSensorDIS_ENA+0x28>
 800c990:	4b07      	ldr	r3, [pc, #28]	@ (800c9b0 <SetVOCSensorDIS_ENA+0x44>)
 800c992:	e000      	b.n	800c996 <SetVOCSensorDIS_ENA+0x2a>
 800c994:	4b07      	ldr	r3, [pc, #28]	@ (800c9b4 <SetVOCSensorDIS_ENA+0x48>)
 800c996:	4a08      	ldr	r2, [pc, #32]	@ (800c9b8 <SetVOCSensorDIS_ENA+0x4c>)
 800c998:	4908      	ldr	r1, [pc, #32]	@ (800c9bc <SetVOCSensorDIS_ENA+0x50>)
 800c99a:	2003      	movs	r0, #3
 800c99c:	f006 fbba 	bl	8013114 <CreateLine>
}
 800c9a0:	46c0      	nop			@ (mov r8, r8)
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	20000e38 	.word	0x20000e38
 800c9ac:	20000e30 	.word	0x20000e30
 800c9b0:	0802c2b4 	.word	0x0802c2b4
 800c9b4:	0802c2bc 	.word	0x0802c2bc
 800c9b8:	0802c2c8 	.word	0x0802c2c8
 800c9bc:	0802c2dc 	.word	0x0802c2dc

0800c9c0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800c9c4:	4b02      	ldr	r3, [pc, #8]	@ (800c9d0 <IsPMSensorEnabled+0x10>)
 800c9c6:	789b      	ldrb	r3, [r3, #2]
}
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	46c0      	nop			@ (mov r8, r8)
 800c9d0:	20000e30 	.word	0x20000e30

0800c9d4 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	0002      	movs	r2, r0
 800c9dc:	1dfb      	adds	r3, r7, #7
 800c9de:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800c9e0:	4b05      	ldr	r3, [pc, #20]	@ (800c9f8 <SetVOCSensorStatus+0x24>)
 800c9e2:	7a1b      	ldrb	r3, [r3, #8]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d003      	beq.n	800c9f0 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800c9e8:	4b04      	ldr	r3, [pc, #16]	@ (800c9fc <SetVOCSensorStatus+0x28>)
 800c9ea:	1dfa      	adds	r2, r7, #7
 800c9ec:	7812      	ldrb	r2, [r2, #0]
 800c9ee:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800c9f0:	46c0      	nop			@ (mov r8, r8)
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	b002      	add	sp, #8
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20000e38 	.word	0x20000e38
 800c9fc:	20000e30 	.word	0x20000e30

0800ca00 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	0002      	movs	r2, r0
 800ca08:	1dfb      	adds	r3, r7, #7
 800ca0a:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800ca0c:	4b03      	ldr	r3, [pc, #12]	@ (800ca1c <SetPMSensorStatus+0x1c>)
 800ca0e:	1dfa      	adds	r2, r7, #7
 800ca10:	7812      	ldrb	r2, [r2, #0]
 800ca12:	709a      	strb	r2, [r3, #2]
}
 800ca14:	46c0      	nop			@ (mov r8, r8)
 800ca16:	46bd      	mov	sp, r7
 800ca18:	b002      	add	sp, #8
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20000e30 	.word	0x20000e30

0800ca20 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800ca24:	4b02      	ldr	r3, [pc, #8]	@ (800ca30 <SetESPMeasurementDone+0x10>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	71da      	strb	r2, [r3, #7]
}
 800ca2a:	46c0      	nop			@ (mov r8, r8)
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	20000e38 	.word	0x20000e38

0800ca34 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  testInit();
 800ca42:	f7ff ff1d 	bl	800c880 <testInit>
  I2CSensors_Init(sensorI2C);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f7fb f9c9 	bl	8007de0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800ca4e:	f006 fe2d 	bl	80136ac <HIDS_DeviceConnected>
 800ca52:	0003      	movs	r3, r0
 800ca54:	001a      	movs	r2, r3
 800ca56:	2301      	movs	r3, #1
 800ca58:	4053      	eors	r3, r2
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00c      	beq.n	800ca7a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800ca60:	4abf      	ldr	r2, [pc, #764]	@ (800cd60 <Device_Init+0x32c>)
 800ca62:	4bc0      	ldr	r3, [pc, #768]	@ (800cd64 <Device_Init+0x330>)
 800ca64:	0019      	movs	r1, r3
 800ca66:	2001      	movs	r0, #1
 800ca68:	f006 fb54 	bl	8013114 <CreateLine>
     SensorProbe.HT_Present = false;
 800ca6c:	4bbe      	ldr	r3, [pc, #760]	@ (800cd68 <Device_Init+0x334>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800ca72:	4bbe      	ldr	r3, [pc, #760]	@ (800cd6c <Device_Init+0x338>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	701a      	strb	r2, [r3, #0]
 800ca78:	e008      	b.n	800ca8c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800ca7a:	4bbb      	ldr	r3, [pc, #748]	@ (800cd68 <Device_Init+0x334>)
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800ca80:	4abb      	ldr	r2, [pc, #748]	@ (800cd70 <Device_Init+0x33c>)
 800ca82:	4bbc      	ldr	r3, [pc, #752]	@ (800cd74 <Device_Init+0x340>)
 800ca84:	0019      	movs	r1, r3
 800ca86:	2003      	movs	r0, #3
 800ca88:	f006 fb44 	bl	8013114 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800ca8c:	f7fe f9ba 	bl	800ae04 <BMP280_DeviceConnected>
 800ca90:	0003      	movs	r3, r0
 800ca92:	001a      	movs	r2, r3
 800ca94:	2301      	movs	r3, #1
 800ca96:	4053      	eors	r3, r2
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00c      	beq.n	800cab8 <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800ca9e:	4ab6      	ldr	r2, [pc, #728]	@ (800cd78 <Device_Init+0x344>)
 800caa0:	4bb0      	ldr	r3, [pc, #704]	@ (800cd64 <Device_Init+0x330>)
 800caa2:	0019      	movs	r1, r3
 800caa4:	2001      	movs	r0, #1
 800caa6:	f006 fb35 	bl	8013114 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800caaa:	4baf      	ldr	r3, [pc, #700]	@ (800cd68 <Device_Init+0x334>)
 800caac:	2200      	movs	r2, #0
 800caae:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800cab0:	4bae      	ldr	r3, [pc, #696]	@ (800cd6c <Device_Init+0x338>)
 800cab2:	2200      	movs	r2, #0
 800cab4:	715a      	strb	r2, [r3, #5]
 800cab6:	e008      	b.n	800caca <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800cab8:	4bab      	ldr	r3, [pc, #684]	@ (800cd68 <Device_Init+0x334>)
 800caba:	2201      	movs	r2, #1
 800cabc:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800cabe:	4aaf      	ldr	r2, [pc, #700]	@ (800cd7c <Device_Init+0x348>)
 800cac0:	4bac      	ldr	r3, [pc, #688]	@ (800cd74 <Device_Init+0x340>)
 800cac2:	0019      	movs	r1, r3
 800cac4:	2003      	movs	r0, #3
 800cac6:	f006 fb25 	bl	8013114 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800caca:	f003 fd3d 	bl	8010548 <SGP_DeviceConnected>
 800cace:	0003      	movs	r3, r0
 800cad0:	001a      	movs	r2, r3
 800cad2:	2301      	movs	r3, #1
 800cad4:	4053      	eors	r3, r2
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800cadc:	4ba2      	ldr	r3, [pc, #648]	@ (800cd68 <Device_Init+0x334>)
 800cade:	2200      	movs	r2, #0
 800cae0:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800cae2:	4aa7      	ldr	r2, [pc, #668]	@ (800cd80 <Device_Init+0x34c>)
 800cae4:	4b9f      	ldr	r3, [pc, #636]	@ (800cd64 <Device_Init+0x330>)
 800cae6:	0019      	movs	r1, r3
 800cae8:	2001      	movs	r0, #1
 800caea:	f006 fb13 	bl	8013114 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800caee:	4b9f      	ldr	r3, [pc, #636]	@ (800cd6c <Device_Init+0x338>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	705a      	strb	r2, [r3, #1]
 800caf4:	e00b      	b.n	800cb0e <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800caf6:	4b9c      	ldr	r3, [pc, #624]	@ (800cd68 <Device_Init+0x334>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800cafc:	4b9a      	ldr	r3, [pc, #616]	@ (800cd68 <Device_Init+0x334>)
 800cafe:	2201      	movs	r2, #1
 800cb00:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800cb02:	4aa0      	ldr	r2, [pc, #640]	@ (800cd84 <Device_Init+0x350>)
 800cb04:	4b9b      	ldr	r3, [pc, #620]	@ (800cd74 <Device_Init+0x340>)
 800cb06:	0019      	movs	r1, r3
 800cb08:	2003      	movs	r0, #3
 800cb0a:	f006 fb03 	bl	8013114 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800cb0e:	f7f7 f9ab 	bl	8003e68 <ENS_DeviceConnected>
 800cb12:	0003      	movs	r3, r0
 800cb14:	001a      	movs	r2, r3
 800cb16:	2301      	movs	r3, #1
 800cb18:	4053      	eors	r3, r2
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00c      	beq.n	800cb3a <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800cb20:	4b91      	ldr	r3, [pc, #580]	@ (800cd68 <Device_Init+0x334>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800cb26:	4a98      	ldr	r2, [pc, #608]	@ (800cd88 <Device_Init+0x354>)
 800cb28:	4b8e      	ldr	r3, [pc, #568]	@ (800cd64 <Device_Init+0x330>)
 800cb2a:	0019      	movs	r1, r3
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	f006 faf1 	bl	8013114 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800cb32:	4b8e      	ldr	r3, [pc, #568]	@ (800cd6c <Device_Init+0x338>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	719a      	strb	r2, [r3, #6]
 800cb38:	e008      	b.n	800cb4c <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800cb3a:	4b8b      	ldr	r3, [pc, #556]	@ (800cd68 <Device_Init+0x334>)
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800cb40:	4a92      	ldr	r2, [pc, #584]	@ (800cd8c <Device_Init+0x358>)
 800cb42:	4b8c      	ldr	r3, [pc, #560]	@ (800cd74 <Device_Init+0x340>)
 800cb44:	0019      	movs	r1, r3
 800cb46:	2003      	movs	r0, #3
 800cb48:	f006 fae4 	bl	8013114 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800cb4c:	f7fd fc86 	bl	800a45c <AHT20_DeviceConnected>
 800cb50:	0003      	movs	r3, r0
 800cb52:	001a      	movs	r2, r3
 800cb54:	2301      	movs	r3, #1
 800cb56:	4053      	eors	r3, r2
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00c      	beq.n	800cb78 <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800cb5e:	4a8c      	ldr	r2, [pc, #560]	@ (800cd90 <Device_Init+0x35c>)
 800cb60:	4b80      	ldr	r3, [pc, #512]	@ (800cd64 <Device_Init+0x330>)
 800cb62:	0019      	movs	r1, r3
 800cb64:	2001      	movs	r0, #1
 800cb66:	f006 fad5 	bl	8013114 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800cb6a:	4b7f      	ldr	r3, [pc, #508]	@ (800cd68 <Device_Init+0x334>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800cb70:	4b7e      	ldr	r3, [pc, #504]	@ (800cd6c <Device_Init+0x338>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	711a      	strb	r2, [r3, #4]
 800cb76:	e008      	b.n	800cb8a <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800cb78:	4b7b      	ldr	r3, [pc, #492]	@ (800cd68 <Device_Init+0x334>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800cb7e:	4a85      	ldr	r2, [pc, #532]	@ (800cd94 <Device_Init+0x360>)
 800cb80:	4b7c      	ldr	r3, [pc, #496]	@ (800cd74 <Device_Init+0x340>)
 800cb82:	0019      	movs	r1, r3
 800cb84:	2003      	movs	r0, #3
 800cb86:	f006 fac5 	bl	8013114 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800cb8a:	4b77      	ldr	r3, [pc, #476]	@ (800cd68 <Device_Init+0x334>)
 800cb8c:	785b      	ldrb	r3, [r3, #1]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d009      	beq.n	800cba6 <Device_Init+0x172>
 800cb92:	4b75      	ldr	r3, [pc, #468]	@ (800cd68 <Device_Init+0x334>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <Device_Init+0x172>
    SetDBLED(false, true, false);
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f005 f80a 	bl	8011bb8 <SetDBLED>
 800cba4:	e018      	b.n	800cbd8 <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	2001      	movs	r0, #1
 800cbac:	f005 f804 	bl	8011bb8 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800cbb0:	4b79      	ldr	r3, [pc, #484]	@ (800cd98 <Device_Init+0x364>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	0018      	movs	r0, r3
 800cbb8:	f008 fa7d 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800cbbc:	2380      	movs	r3, #128	@ 0x80
 800cbbe:	005b      	lsls	r3, r3, #1
 800cbc0:	4875      	ldr	r0, [pc, #468]	@ (800cd98 <Device_Init+0x364>)
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	0019      	movs	r1, r3
 800cbc6:	f008 fa76 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800cbca:	2380      	movs	r3, #128	@ 0x80
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4872      	ldr	r0, [pc, #456]	@ (800cd98 <Device_Init+0x364>)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	0019      	movs	r1, r3
 800cbd4:	f008 fa6f 	bl	80150b6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800cbd8:	4b64      	ldr	r3, [pc, #400]	@ (800cd6c <Device_Init+0x338>)
 800cbda:	78db      	ldrb	r3, [r3, #3]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d028      	beq.n	800cc32 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800cbe0:	4a6e      	ldr	r2, [pc, #440]	@ (800cd9c <Device_Init+0x368>)
 800cbe2:	4b6f      	ldr	r3, [pc, #444]	@ (800cda0 <Device_Init+0x36c>)
 800cbe4:	0019      	movs	r1, r3
 800cbe6:	2002      	movs	r0, #2
 800cbe8:	f006 fa94 	bl	8013114 <CreateLine>
    if (!enableMicrophone(true)) {
 800cbec:	2001      	movs	r0, #1
 800cbee:	f004 f8e1 	bl	8010db4 <enableMicrophone>
 800cbf2:	0003      	movs	r3, r0
 800cbf4:	001a      	movs	r2, r3
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4053      	eors	r3, r2
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d00c      	beq.n	800cc1a <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800cc00:	4a68      	ldr	r2, [pc, #416]	@ (800cda4 <Device_Init+0x370>)
 800cc02:	4b58      	ldr	r3, [pc, #352]	@ (800cd64 <Device_Init+0x330>)
 800cc04:	0019      	movs	r1, r3
 800cc06:	2001      	movs	r0, #1
 800cc08:	f006 fa84 	bl	8013114 <CreateLine>
      SensorProbe.MIC_Present = false;
 800cc0c:	4b56      	ldr	r3, [pc, #344]	@ (800cd68 <Device_Init+0x334>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800cc12:	4b56      	ldr	r3, [pc, #344]	@ (800cd6c <Device_Init+0x338>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	70da      	strb	r2, [r3, #3]
 800cc18:	e00b      	b.n	800cc32 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800cc1a:	4b53      	ldr	r3, [pc, #332]	@ (800cd68 <Device_Init+0x334>)
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800cc20:	4b52      	ldr	r3, [pc, #328]	@ (800cd6c <Device_Init+0x338>)
 800cc22:	2201      	movs	r2, #1
 800cc24:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800cc26:	4a60      	ldr	r2, [pc, #384]	@ (800cda8 <Device_Init+0x374>)
 800cc28:	4b52      	ldr	r3, [pc, #328]	@ (800cd74 <Device_Init+0x340>)
 800cc2a:	0019      	movs	r1, r3
 800cc2c:	2003      	movs	r0, #3
 800cc2e:	f006 fa71 	bl	8013114 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800cc32:	f000 ffb1 	bl	800db98 <probe_sen5x>
 800cc36:	1e03      	subs	r3, r0, #0
 800cc38:	d122      	bne.n	800cc80 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800cc3a:	4a5c      	ldr	r2, [pc, #368]	@ (800cdac <Device_Init+0x378>)
 800cc3c:	4b4d      	ldr	r3, [pc, #308]	@ (800cd74 <Device_Init+0x340>)
 800cc3e:	0019      	movs	r1, r3
 800cc40:	2003      	movs	r0, #3
 800cc42:	f006 fa67 	bl	8013114 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800cc46:	4b48      	ldr	r3, [pc, #288]	@ (800cd68 <Device_Init+0x334>)
 800cc48:	2201      	movs	r2, #1
 800cc4a:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800cc4c:	4b47      	ldr	r3, [pc, #284]	@ (800cd6c <Device_Init+0x338>)
 800cc4e:	2201      	movs	r2, #1
 800cc50:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800cc52:	4b57      	ldr	r3, [pc, #348]	@ (800cdb0 <Device_Init+0x37c>)
 800cc54:	791b      	ldrb	r3, [r3, #4]
 800cc56:	2b34      	cmp	r3, #52	@ 0x34
 800cc58:	d003      	beq.n	800cc62 <Device_Init+0x22e>
 800cc5a:	4b55      	ldr	r3, [pc, #340]	@ (800cdb0 <Device_Init+0x37c>)
 800cc5c:	791b      	ldrb	r3, [r3, #4]
 800cc5e:	2b35      	cmp	r3, #53	@ 0x35
 800cc60:	d11c      	bne.n	800cc9c <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800cc62:	4a54      	ldr	r2, [pc, #336]	@ (800cdb4 <Device_Init+0x380>)
 800cc64:	4b4e      	ldr	r3, [pc, #312]	@ (800cda0 <Device_Init+0x36c>)
 800cc66:	0019      	movs	r1, r3
 800cc68:	2002      	movs	r0, #2
 800cc6a:	f006 fa53 	bl	8013114 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800cc6e:	4b3f      	ldr	r3, [pc, #252]	@ (800cd6c <Device_Init+0x338>)
 800cc70:	2200      	movs	r2, #0
 800cc72:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800cc74:	4b3c      	ldr	r3, [pc, #240]	@ (800cd68 <Device_Init+0x334>)
 800cc76:	2200      	movs	r2, #0
 800cc78:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800cc7a:	f003 fe4b 	bl	8010914 <SGP_SoftReset>
 800cc7e:	e00d      	b.n	800cc9c <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800cc80:	f000 ff54 	bl	800db2c <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800cc84:	4a4c      	ldr	r2, [pc, #304]	@ (800cdb8 <Device_Init+0x384>)
 800cc86:	4b3b      	ldr	r3, [pc, #236]	@ (800cd74 <Device_Init+0x340>)
 800cc88:	0019      	movs	r1, r3
 800cc8a:	2003      	movs	r0, #3
 800cc8c:	f006 fa42 	bl	8013114 <CreateLine>
    SensorProbe.PM_Present = false;
 800cc90:	4b35      	ldr	r3, [pc, #212]	@ (800cd68 <Device_Init+0x334>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800cc96:	4b35      	ldr	r3, [pc, #212]	@ (800cd6c <Device_Init+0x338>)
 800cc98:	2200      	movs	r2, #0
 800cc9a:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800cc9c:	4b32      	ldr	r3, [pc, #200]	@ (800cd68 <Device_Init+0x334>)
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <Device_Init+0x274>
 800cca4:	4b45      	ldr	r3, [pc, #276]	@ (800cdbc <Device_Init+0x388>)
 800cca6:	e000      	b.n	800ccaa <Device_Init+0x276>
 800cca8:	4b45      	ldr	r3, [pc, #276]	@ (800cdc0 <Device_Init+0x38c>)
 800ccaa:	4a46      	ldr	r2, [pc, #280]	@ (800cdc4 <Device_Init+0x390>)
 800ccac:	493c      	ldr	r1, [pc, #240]	@ (800cda0 <Device_Init+0x36c>)
 800ccae:	2002      	movs	r0, #2
 800ccb0:	f006 fa30 	bl	8013114 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800ccb4:	4b2c      	ldr	r3, [pc, #176]	@ (800cd68 <Device_Init+0x334>)
 800ccb6:	785b      	ldrb	r3, [r3, #1]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <Device_Init+0x28c>
 800ccbc:	4b3f      	ldr	r3, [pc, #252]	@ (800cdbc <Device_Init+0x388>)
 800ccbe:	e000      	b.n	800ccc2 <Device_Init+0x28e>
 800ccc0:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc0 <Device_Init+0x38c>)
 800ccc2:	4a41      	ldr	r2, [pc, #260]	@ (800cdc8 <Device_Init+0x394>)
 800ccc4:	4936      	ldr	r1, [pc, #216]	@ (800cda0 <Device_Init+0x36c>)
 800ccc6:	2002      	movs	r0, #2
 800ccc8:	f006 fa24 	bl	8013114 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800cccc:	4b26      	ldr	r3, [pc, #152]	@ (800cd68 <Device_Init+0x334>)
 800ccce:	789b      	ldrb	r3, [r3, #2]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <Device_Init+0x2a4>
 800ccd4:	4b39      	ldr	r3, [pc, #228]	@ (800cdbc <Device_Init+0x388>)
 800ccd6:	e000      	b.n	800ccda <Device_Init+0x2a6>
 800ccd8:	4b39      	ldr	r3, [pc, #228]	@ (800cdc0 <Device_Init+0x38c>)
 800ccda:	4a3c      	ldr	r2, [pc, #240]	@ (800cdcc <Device_Init+0x398>)
 800ccdc:	4930      	ldr	r1, [pc, #192]	@ (800cda0 <Device_Init+0x36c>)
 800ccde:	2002      	movs	r0, #2
 800cce0:	f006 fa18 	bl	8013114 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800cce4:	4b20      	ldr	r3, [pc, #128]	@ (800cd68 <Device_Init+0x334>)
 800cce6:	791b      	ldrb	r3, [r3, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <Device_Init+0x2bc>
 800ccec:	4b33      	ldr	r3, [pc, #204]	@ (800cdbc <Device_Init+0x388>)
 800ccee:	e000      	b.n	800ccf2 <Device_Init+0x2be>
 800ccf0:	4b33      	ldr	r3, [pc, #204]	@ (800cdc0 <Device_Init+0x38c>)
 800ccf2:	4a37      	ldr	r2, [pc, #220]	@ (800cdd0 <Device_Init+0x39c>)
 800ccf4:	492a      	ldr	r1, [pc, #168]	@ (800cda0 <Device_Init+0x36c>)
 800ccf6:	2002      	movs	r0, #2
 800ccf8:	f006 fa0c 	bl	8013114 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800ccfc:	4b1a      	ldr	r3, [pc, #104]	@ (800cd68 <Device_Init+0x334>)
 800ccfe:	78db      	ldrb	r3, [r3, #3]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d001      	beq.n	800cd08 <Device_Init+0x2d4>
 800cd04:	4b2d      	ldr	r3, [pc, #180]	@ (800cdbc <Device_Init+0x388>)
 800cd06:	e000      	b.n	800cd0a <Device_Init+0x2d6>
 800cd08:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc0 <Device_Init+0x38c>)
 800cd0a:	4a32      	ldr	r2, [pc, #200]	@ (800cdd4 <Device_Init+0x3a0>)
 800cd0c:	4924      	ldr	r1, [pc, #144]	@ (800cda0 <Device_Init+0x36c>)
 800cd0e:	2002      	movs	r0, #2
 800cd10:	f006 fa00 	bl	8013114 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800cd14:	4b14      	ldr	r3, [pc, #80]	@ (800cd68 <Device_Init+0x334>)
 800cd16:	795b      	ldrb	r3, [r3, #5]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <Device_Init+0x2ec>
 800cd1c:	4b27      	ldr	r3, [pc, #156]	@ (800cdbc <Device_Init+0x388>)
 800cd1e:	e000      	b.n	800cd22 <Device_Init+0x2ee>
 800cd20:	4b27      	ldr	r3, [pc, #156]	@ (800cdc0 <Device_Init+0x38c>)
 800cd22:	4a2d      	ldr	r2, [pc, #180]	@ (800cdd8 <Device_Init+0x3a4>)
 800cd24:	491e      	ldr	r1, [pc, #120]	@ (800cda0 <Device_Init+0x36c>)
 800cd26:	2002      	movs	r0, #2
 800cd28:	f006 f9f4 	bl	8013114 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800cd2c:	4b0e      	ldr	r3, [pc, #56]	@ (800cd68 <Device_Init+0x334>)
 800cd2e:	799b      	ldrb	r3, [r3, #6]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d001      	beq.n	800cd38 <Device_Init+0x304>
 800cd34:	4b21      	ldr	r3, [pc, #132]	@ (800cdbc <Device_Init+0x388>)
 800cd36:	e000      	b.n	800cd3a <Device_Init+0x306>
 800cd38:	4b21      	ldr	r3, [pc, #132]	@ (800cdc0 <Device_Init+0x38c>)
 800cd3a:	4a28      	ldr	r2, [pc, #160]	@ (800cddc <Device_Init+0x3a8>)
 800cd3c:	4918      	ldr	r1, [pc, #96]	@ (800cda0 <Device_Init+0x36c>)
 800cd3e:	2002      	movs	r0, #2
 800cd40:	f006 f9e8 	bl	8013114 <CreateLine>
  ESP_Init(espUart);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	0018      	movs	r0, r3
 800cd48:	f7f8 f8b8 	bl	8004ebc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800cd4c:	4a24      	ldr	r2, [pc, #144]	@ (800cde0 <Device_Init+0x3ac>)
 800cd4e:	4b09      	ldr	r3, [pc, #36]	@ (800cd74 <Device_Init+0x340>)
 800cd50:	0019      	movs	r1, r3
 800cd52:	2003      	movs	r0, #3
 800cd54:	f006 f9de 	bl	8013114 <CreateLine>
}
 800cd58:	46c0      	nop			@ (mov r8, r8)
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	b004      	add	sp, #16
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	0802c2e0 	.word	0x0802c2e0
 800cd64:	0802c310 	.word	0x0802c310
 800cd68:	20000e38 	.word	0x20000e38
 800cd6c:	20000e30 	.word	0x20000e30
 800cd70:	0802c314 	.word	0x0802c314
 800cd74:	0802c2dc 	.word	0x0802c2dc
 800cd78:	0802c340 	.word	0x0802c340
 800cd7c:	0802c374 	.word	0x0802c374
 800cd80:	0802c3a4 	.word	0x0802c3a4
 800cd84:	0802c3c0 	.word	0x0802c3c0
 800cd88:	0802c3d8 	.word	0x0802c3d8
 800cd8c:	0802c3f4 	.word	0x0802c3f4
 800cd90:	0802c40c 	.word	0x0802c40c
 800cd94:	0802c440 	.word	0x0802c440
 800cd98:	50000400 	.word	0x50000400
 800cd9c:	0802c474 	.word	0x0802c474
 800cda0:	0802c498 	.word	0x0802c498
 800cda4:	0802c49c 	.word	0x0802c49c
 800cda8:	0802c4c8 	.word	0x0802c4c8
 800cdac:	0802c4f4 	.word	0x0802c4f4
 800cdb0:	20000ed4 	.word	0x20000ed4
 800cdb4:	0802c50c 	.word	0x0802c50c
 800cdb8:	0802c55c 	.word	0x0802c55c
 800cdbc:	0802c580 	.word	0x0802c580
 800cdc0:	0802c584 	.word	0x0802c584
 800cdc4:	0802c588 	.word	0x0802c588
 800cdc8:	0802c5a4 	.word	0x0802c5a4
 800cdcc:	0802c5c0 	.word	0x0802c5c0
 800cdd0:	0802c5e0 	.word	0x0802c5e0
 800cdd4:	0802c600 	.word	0x0802c600
 800cdd8:	0802c620 	.word	0x0802c620
 800cddc:	0802c63c 	.word	0x0802c63c
 800cde0:	0802c658 	.word	0x0802c658

0800cde4 <Device_Test>:

void Device_Test(){
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800cde8:	4b34      	ldr	r3, [pc, #208]	@ (800cebc <Device_Test+0xd8>)
 800cdea:	799b      	ldrb	r3, [r3, #6]
 800cdec:	2201      	movs	r2, #1
 800cdee:	4053      	eors	r3, r2
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d027      	beq.n	800ce46 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800cdf6:	f000 fbff 	bl	800d5f8 <MIC_TestMeasurementDone>
 800cdfa:	1e03      	subs	r3, r0, #0
 800cdfc:	d011      	beq.n	800ce22 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800cdfe:	4b2f      	ldr	r3, [pc, #188]	@ (800cebc <Device_Test+0xd8>)
 800ce00:	2201      	movs	r2, #1
 800ce02:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800ce04:	4b2e      	ldr	r3, [pc, #184]	@ (800cec0 <Device_Test+0xdc>)
 800ce06:	2201      	movs	r2, #1
 800ce08:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800ce0a:	f004 fe59 	bl	8011ac0 <Calculate_LED_ON>
 800ce0e:	0003      	movs	r3, r0
 800ce10:	0019      	movs	r1, r3
 800ce12:	23fa      	movs	r3, #250	@ 0xfa
 800ce14:	011a      	lsls	r2, r3, #4
 800ce16:	23fa      	movs	r3, #250	@ 0xfa
 800ce18:	011b      	lsls	r3, r3, #4
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	f004 fe98 	bl	8011b50 <SetStatusLED>
 800ce20:	e011      	b.n	800ce46 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800ce22:	f003 ffa3 	bl	8010d6c <micSettlingComplete>
 800ce26:	1e03      	subs	r3, r0, #0
 800ce28:	d00d      	beq.n	800ce46 <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800ce2a:	4b25      	ldr	r3, [pc, #148]	@ (800cec0 <Device_Test+0xdc>)
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800ce30:	f004 fe46 	bl	8011ac0 <Calculate_LED_ON>
 800ce34:	0003      	movs	r3, r0
 800ce36:	0018      	movs	r0, r3
 800ce38:	23fa      	movs	r3, #250	@ 0xfa
 800ce3a:	011a      	lsls	r2, r3, #4
 800ce3c:	23fa      	movs	r3, #250	@ 0xfa
 800ce3e:	011b      	lsls	r3, r3, #4
 800ce40:	0019      	movs	r1, r3
 800ce42:	f004 fe85 	bl	8011b50 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800ce46:	4b1d      	ldr	r3, [pc, #116]	@ (800cebc <Device_Test+0xd8>)
 800ce48:	79db      	ldrb	r3, [r3, #7]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4053      	eors	r3, r2
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800ce54:	f7fa f9d0 	bl	80071f8 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800ce58:	4b18      	ldr	r3, [pc, #96]	@ (800cebc <Device_Test+0xd8>)
 800ce5a:	79db      	ldrb	r3, [r3, #7]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d003      	beq.n	800ce68 <Device_Test+0x84>
 800ce60:	4b16      	ldr	r3, [pc, #88]	@ (800cebc <Device_Test+0xd8>)
 800ce62:	799b      	ldrb	r3, [r3, #6]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <Device_Test+0x92>
 800ce68:	4b16      	ldr	r3, [pc, #88]	@ (800cec4 <Device_Test+0xe0>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	0018      	movs	r0, r3
 800ce6e:	f006 f8fb 	bl	8013068 <TimestampIsReached>
 800ce72:	1e03      	subs	r3, r0, #0
 800ce74:	d01f      	beq.n	800ceb6 <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800ce76:	4b11      	ldr	r3, [pc, #68]	@ (800cebc <Device_Test+0xd8>)
 800ce78:	79db      	ldrb	r3, [r3, #7]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <Device_Test+0x9e>
 800ce7e:	4b12      	ldr	r3, [pc, #72]	@ (800cec8 <Device_Test+0xe4>)
 800ce80:	e000      	b.n	800ce84 <Device_Test+0xa0>
 800ce82:	4b12      	ldr	r3, [pc, #72]	@ (800cecc <Device_Test+0xe8>)
 800ce84:	4a12      	ldr	r2, [pc, #72]	@ (800ced0 <Device_Test+0xec>)
 800ce86:	4913      	ldr	r1, [pc, #76]	@ (800ced4 <Device_Test+0xf0>)
 800ce88:	2002      	movs	r0, #2
 800ce8a:	f006 f943 	bl	8013114 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800ce8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cebc <Device_Test+0xd8>)
 800ce90:	799b      	ldrb	r3, [r3, #6]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <Device_Test+0xb6>
 800ce96:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <Device_Test+0xe4>)
 800ce98:	e000      	b.n	800ce9c <Device_Test+0xb8>
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cecc <Device_Test+0xe8>)
 800ce9c:	4a0e      	ldr	r2, [pc, #56]	@ (800ced8 <Device_Test+0xf4>)
 800ce9e:	490d      	ldr	r1, [pc, #52]	@ (800ced4 <Device_Test+0xf0>)
 800cea0:	2002      	movs	r0, #2
 800cea2:	f006 f937 	bl	8013114 <CreateLine>
    Info("Test completed");
 800cea6:	4a0d      	ldr	r2, [pc, #52]	@ (800cedc <Device_Test+0xf8>)
 800cea8:	4b0a      	ldr	r3, [pc, #40]	@ (800ced4 <Device_Test+0xf0>)
 800ceaa:	0019      	movs	r1, r3
 800ceac:	2002      	movs	r0, #2
 800ceae:	f006 f931 	bl	8013114 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800ceb2:	f7ff f8f7 	bl	800c0a4 <SetTestDone>
  }
}
 800ceb6:	46c0      	nop			@ (mov r8, r8)
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	20000e38 	.word	0x20000e38
 800cec0:	20000e30 	.word	0x20000e30
 800cec4:	20000e28 	.word	0x20000e28
 800cec8:	0802c67c 	.word	0x0802c67c
 800cecc:	0802c684 	.word	0x0802c684
 800ced0:	0802c68c 	.word	0x0802c68c
 800ced4:	0802c498 	.word	0x0802c498
 800ced8:	0802c6a0 	.word	0x0802c6a0
 800cedc:	0802c6b4 	.word	0x0802c6b4

0800cee0 <AllDevicesReady>:

bool AllDevicesReady() {
 800cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee2:	46de      	mov	lr, fp
 800cee4:	4657      	mov	r7, sl
 800cee6:	464e      	mov	r6, r9
 800cee8:	4645      	mov	r5, r8
 800ceea:	b5e0      	push	{r5, r6, r7, lr}
 800ceec:	b08b      	sub	sp, #44	@ 0x2c
 800ceee:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  if (TimestampIsReached(deviceTimeOut)) {
 800cef0:	4b75      	ldr	r3, [pc, #468]	@ (800d0c8 <AllDevicesReady+0x1e8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	0018      	movs	r0, r3
 800cef6:	f006 f8b7 	bl	8013068 <TimestampIsReached>
 800cefa:	1e03      	subs	r3, r0, #0
 800cefc:	d100      	bne.n	800cf00 <AllDevicesReady+0x20>
 800cefe:	e0d9      	b.n	800d0b4 <AllDevicesReady+0x1d4>
    if (!sensorsdisablereq) {
 800cf00:	4b72      	ldr	r3, [pc, #456]	@ (800d0cc <AllDevicesReady+0x1ec>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2201      	movs	r2, #1
 800cf06:	4053      	eors	r3, r2
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d008      	beq.n	800cf20 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800cf0e:	4a70      	ldr	r2, [pc, #448]	@ (800d0d0 <AllDevicesReady+0x1f0>)
 800cf10:	4b70      	ldr	r3, [pc, #448]	@ (800d0d4 <AllDevicesReady+0x1f4>)
 800cf12:	0019      	movs	r1, r3
 800cf14:	2003      	movs	r0, #3
 800cf16:	f006 f8fd 	bl	8013114 <CreateLine>
      sensorsdisablereq = true;
 800cf1a:	4b6c      	ldr	r3, [pc, #432]	@ (800d0cc <AllDevicesReady+0x1ec>)
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800cf20:	4b6d      	ldr	r3, [pc, #436]	@ (800d0d8 <AllDevicesReady+0x1f8>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	2b06      	cmp	r3, #6
 800cf26:	d102      	bne.n	800cf2e <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800cf28:	4b6c      	ldr	r3, [pc, #432]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800cf2e:	4b6c      	ldr	r3, [pc, #432]	@ (800d0e0 <AllDevicesReady+0x200>)
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	d006      	beq.n	800cf44 <AllDevicesReady+0x64>
 800cf36:	4b6b      	ldr	r3, [pc, #428]	@ (800d0e4 <AllDevicesReady+0x204>)
 800cf38:	789b      	ldrb	r3, [r3, #2]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	4053      	eors	r3, r2
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800cf44:	4b65      	ldr	r3, [pc, #404]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cf46:	2200      	movs	r2, #0
 800cf48:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800cf4a:	4b67      	ldr	r3, [pc, #412]	@ (800d0e8 <AllDevicesReady+0x208>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d006      	beq.n	800cf60 <AllDevicesReady+0x80>
 800cf52:	4b64      	ldr	r3, [pc, #400]	@ (800d0e4 <AllDevicesReady+0x204>)
 800cf54:	791b      	ldrb	r3, [r3, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	4053      	eors	r3, r2
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800cf60:	4b5e      	ldr	r3, [pc, #376]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800cf66:	4b61      	ldr	r3, [pc, #388]	@ (800d0ec <AllDevicesReady+0x20c>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b08      	cmp	r3, #8
 800cf6c:	d006      	beq.n	800cf7c <AllDevicesReady+0x9c>
 800cf6e:	4b5d      	ldr	r3, [pc, #372]	@ (800d0e4 <AllDevicesReady+0x204>)
 800cf70:	78db      	ldrb	r3, [r3, #3]
 800cf72:	2201      	movs	r2, #1
 800cf74:	4053      	eors	r3, r2
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800cf7c:	4b57      	ldr	r3, [pc, #348]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800cf82:	4b5b      	ldr	r3, [pc, #364]	@ (800d0f0 <AllDevicesReady+0x210>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b07      	cmp	r3, #7
 800cf88:	d006      	beq.n	800cf98 <AllDevicesReady+0xb8>
 800cf8a:	4b56      	ldr	r3, [pc, #344]	@ (800d0e4 <AllDevicesReady+0x204>)
 800cf8c:	7a1b      	ldrb	r3, [r3, #8]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	4053      	eors	r3, r2
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800cf98:	4b50      	ldr	r3, [pc, #320]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800cf9e:	4b55      	ldr	r3, [pc, #340]	@ (800d0f4 <AllDevicesReady+0x214>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d003      	beq.n	800cfae <AllDevicesReady+0xce>
 800cfa6:	4b53      	ldr	r3, [pc, #332]	@ (800d0f4 <AllDevicesReady+0x214>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d102      	bne.n	800cfb4 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800cfae:	4b4b      	ldr	r3, [pc, #300]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800cfb4:	4b50      	ldr	r3, [pc, #320]	@ (800d0f8 <AllDevicesReady+0x218>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d102      	bne.n	800cfc2 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800cfbc:	4b47      	ldr	r3, [pc, #284]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800cfc2:	4b4e      	ldr	r3, [pc, #312]	@ (800d0fc <AllDevicesReady+0x21c>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b09      	cmp	r3, #9
 800cfc8:	d003      	beq.n	800cfd2 <AllDevicesReady+0xf2>
 800cfca:	4b4c      	ldr	r3, [pc, #304]	@ (800d0fc <AllDevicesReady+0x21c>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d170      	bne.n	800d0b4 <AllDevicesReady+0x1d4>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cfd2:	4b42      	ldr	r3, [pc, #264]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfd4:	781a      	ldrb	r2, [r3, #0]
 800cfd6:	4b41      	ldr	r3, [pc, #260]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfd8:	785b      	ldrb	r3, [r3, #1]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	b2da      	uxtb	r2, r3
 800cfde:	4b3f      	ldr	r3, [pc, #252]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfe0:	791b      	ldrb	r3, [r3, #4]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	4b3d      	ldr	r3, [pc, #244]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cfe8:	795b      	ldrb	r3, [r3, #5]
 800cfea:	4313      	orrs	r3, r2
 800cfec:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cfee:	4b3b      	ldr	r3, [pc, #236]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cff0:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800cff2:	4313      	orrs	r3, r2
 800cff4:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800cff6:	4b39      	ldr	r3, [pc, #228]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800cff8:	789b      	ldrb	r3, [r3, #2]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	b2da      	uxtb	r2, r3
 800cffe:	4b37      	ldr	r3, [pc, #220]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d000:	78db      	ldrb	r3, [r3, #3]
 800d002:	4313      	orrs	r3, r2
 800d004:	b2db      	uxtb	r3, r3
 800d006:	1e5a      	subs	r2, r3, #1
 800d008:	4193      	sbcs	r3, r2
 800d00a:	b2db      	uxtb	r3, r3
 800d00c:	2201      	movs	r2, #1
 800d00e:	4053      	eors	r3, r2
 800d010:	b2db      	uxtb	r3, r3
 800d012:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800d014:	1dfb      	adds	r3, r7, #7
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	781a      	ldrb	r2, [r3, #0]
 800d01a:	2101      	movs	r1, #1
 800d01c:	400a      	ands	r2, r1
 800d01e:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800d020:	1dfb      	adds	r3, r7, #7
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2201      	movs	r2, #1
 800d026:	4053      	eors	r3, r2
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d031      	beq.n	800d092 <AllDevicesReady+0x1b2>
 800d02e:	4b34      	ldr	r3, [pc, #208]	@ (800d100 <AllDevicesReady+0x220>)
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	1dfa      	adds	r2, r7, #7
 800d034:	7812      	ldrb	r2, [r2, #0]
 800d036:	429a      	cmp	r2, r3
 800d038:	d02b      	beq.n	800d092 <AllDevicesReady+0x1b2>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800d03a:	4b28      	ldr	r3, [pc, #160]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	469b      	mov	fp, r3
 800d040:	4b26      	ldr	r3, [pc, #152]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d042:	791b      	ldrb	r3, [r3, #4]
 800d044:	001c      	movs	r4, r3
 800d046:	4b25      	ldr	r3, [pc, #148]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d048:	795b      	ldrb	r3, [r3, #5]
 800d04a:	001d      	movs	r5, r3
 800d04c:	4b23      	ldr	r3, [pc, #140]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d04e:	799b      	ldrb	r3, [r3, #6]
 800d050:	001e      	movs	r6, r3
 800d052:	4b22      	ldr	r3, [pc, #136]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d054:	785b      	ldrb	r3, [r3, #1]
 800d056:	4698      	mov	r8, r3
 800d058:	4b20      	ldr	r3, [pc, #128]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d05a:	789b      	ldrb	r3, [r3, #2]
 800d05c:	4699      	mov	r9, r3
 800d05e:	4b1f      	ldr	r3, [pc, #124]	@ (800d0dc <AllDevicesReady+0x1fc>)
 800d060:	78db      	ldrb	r3, [r3, #3]
 800d062:	469a      	mov	sl, r3
 800d064:	f000 f8e4 	bl	800d230 <getSensorLock>
 800d068:	0003      	movs	r3, r0
 800d06a:	4a26      	ldr	r2, [pc, #152]	@ (800d104 <AllDevicesReady+0x224>)
 800d06c:	4919      	ldr	r1, [pc, #100]	@ (800d0d4 <AllDevicesReady+0x1f4>)
 800d06e:	9306      	str	r3, [sp, #24]
 800d070:	4653      	mov	r3, sl
 800d072:	9305      	str	r3, [sp, #20]
 800d074:	464b      	mov	r3, r9
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	4643      	mov	r3, r8
 800d07a:	9303      	str	r3, [sp, #12]
 800d07c:	9602      	str	r6, [sp, #8]
 800d07e:	9501      	str	r5, [sp, #4]
 800d080:	9400      	str	r4, [sp, #0]
 800d082:	465b      	mov	r3, fp
 800d084:	2003      	movs	r0, #3
 800d086:	f006 f845 	bl	8013114 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800d08a:	4b1d      	ldr	r3, [pc, #116]	@ (800d100 <AllDevicesReady+0x220>)
 800d08c:	1dfa      	adds	r2, r7, #7
 800d08e:	7812      	ldrb	r2, [r2, #0]
 800d090:	701a      	strb	r2, [r3, #0]
      }
      if (status) {
 800d092:	1dfb      	adds	r3, r7, #7
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d009      	beq.n	800d0ae <AllDevicesReady+0x1ce>
        Debug("All sensors in wait");
 800d09a:	4a1b      	ldr	r2, [pc, #108]	@ (800d108 <AllDevicesReady+0x228>)
 800d09c:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d4 <AllDevicesReady+0x1f4>)
 800d09e:	0019      	movs	r1, r3
 800d0a0:	2003      	movs	r0, #3
 800d0a2:	f006 f837 	bl	8013114 <CreateLine>
        prevstatus = status;
 800d0a6:	4b16      	ldr	r3, [pc, #88]	@ (800d100 <AllDevicesReady+0x220>)
 800d0a8:	1dfa      	adds	r2, r7, #7
 800d0aa:	7812      	ldrb	r2, [r2, #0]
 800d0ac:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800d0ae:	1dfb      	adds	r3, r7, #7
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	e000      	b.n	800d0b6 <AllDevicesReady+0x1d6>
    }
  }
  return false;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	0018      	movs	r0, r3
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	b003      	add	sp, #12
 800d0bc:	bcf0      	pop	{r4, r5, r6, r7}
 800d0be:	46bb      	mov	fp, r7
 800d0c0:	46b2      	mov	sl, r6
 800d0c2:	46a9      	mov	r9, r5
 800d0c4:	46a0      	mov	r8, r4
 800d0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0c8:	20000e28 	.word	0x20000e28
 800d0cc:	20000e47 	.word	0x20000e47
 800d0d0:	0802c6c4 	.word	0x0802c6c4
 800d0d4:	0802c2dc 	.word	0x0802c2dc
 800d0d8:	20000e43 	.word	0x20000e43
 800d0dc:	20000e30 	.word	0x20000e30
 800d0e0:	20000e44 	.word	0x20000e44
 800d0e4:	20000e38 	.word	0x20000e38
 800d0e8:	20000e45 	.word	0x20000e45
 800d0ec:	20000e46 	.word	0x20000e46
 800d0f0:	20000e42 	.word	0x20000e42
 800d0f4:	2000009e 	.word	0x2000009e
 800d0f8:	20000e14 	.word	0x20000e14
 800d0fc:	20000e15 	.word	0x20000e15
 800d100:	2000009c 	.word	0x2000009c
 800d104:	0802c6e4 	.word	0x0802c6e4
 800d108:	0802c748 	.word	0x0802c748

0800d10c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800d10c:	b580      	push	{r7, lr}
 800d10e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800d110:	4b23      	ldr	r3, [pc, #140]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800d118:	4b22      	ldr	r3, [pc, #136]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d11a:	2201      	movs	r2, #1
 800d11c:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.AHT20_Present) {
 800d11e:	4b20      	ldr	r3, [pc, #128]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d120:	789b      	ldrb	r3, [r3, #2]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d002      	beq.n	800d12c <EnabledConnectedDevices+0x20>
    Sensor.AHT_measurementEnabled = true;
 800d126:	4b1f      	ldr	r3, [pc, #124]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d128:	2201      	movs	r2, #1
 800d12a:	711a      	strb	r2, [r3, #4]
  }
  if (SensorProbe.BMP280_Present) {
 800d12c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d12e:	791b      	ldrb	r3, [r3, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <EnabledConnectedDevices+0x2e>
    Sensor.BMP_measurementEnabled = true;
 800d134:	4b1b      	ldr	r3, [pc, #108]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d136:	2201      	movs	r2, #1
 800d138:	715a      	strb	r2, [r3, #5]
  }
  if (SensorProbe.ENS160_Present) {
 800d13a:	4b19      	ldr	r3, [pc, #100]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d13c:	78db      	ldrb	r3, [r3, #3]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d002      	beq.n	800d148 <EnabledConnectedDevices+0x3c>
    Sensor.ENS_measurementEnabled = true;
 800d142:	4b18      	ldr	r3, [pc, #96]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d144:	2201      	movs	r2, #1
 800d146:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800d148:	4b15      	ldr	r3, [pc, #84]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d14a:	785b      	ldrb	r3, [r3, #1]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <EnabledConnectedDevices+0x52>
 800d150:	4b13      	ldr	r3, [pc, #76]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d152:	7a1b      	ldrb	r3, [r3, #8]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d002      	beq.n	800d15e <EnabledConnectedDevices+0x52>
    Sensor.VOC_measurementEnabled = true;
 800d158:	4b12      	ldr	r3, [pc, #72]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800d15e:	4b10      	ldr	r3, [pc, #64]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d160:	795b      	ldrb	r3, [r3, #5]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <EnabledConnectedDevices+0x60>
    Sensor.PM_measurementEnabled = true;
 800d166:	4b0f      	ldr	r3, [pc, #60]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d168:	2201      	movs	r2, #1
 800d16a:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800d16c:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a0 <EnabledConnectedDevices+0x94>)
 800d16e:	799b      	ldrb	r3, [r3, #6]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <EnabledConnectedDevices+0x6e>
    Sensor.MIC_measurementEnabled = true;
 800d174:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a4 <EnabledConnectedDevices+0x98>)
 800d176:	2201      	movs	r2, #1
 800d178:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800d17a:	f006 fd0b 	bl	8013b94 <HAL_GetTick>
 800d17e:	0003      	movs	r3, r0
 800d180:	4a09      	ldr	r2, [pc, #36]	@ (800d1a8 <EnabledConnectedDevices+0x9c>)
 800d182:	189a      	adds	r2, r3, r2
 800d184:	4b09      	ldr	r3, [pc, #36]	@ (800d1ac <EnabledConnectedDevices+0xa0>)
 800d186:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800d188:	4b09      	ldr	r3, [pc, #36]	@ (800d1b0 <EnabledConnectedDevices+0xa4>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800d18e:	4a09      	ldr	r2, [pc, #36]	@ (800d1b4 <EnabledConnectedDevices+0xa8>)
 800d190:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <EnabledConnectedDevices+0xac>)
 800d192:	0019      	movs	r1, r3
 800d194:	2003      	movs	r0, #3
 800d196:	f005 ffbd 	bl	8013114 <CreateLine>
}
 800d19a:	46c0      	nop			@ (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000e38 	.word	0x20000e38
 800d1a4:	20000e30 	.word	0x20000e30
 800d1a8:	00124f80 	.word	0x00124f80
 800d1ac:	20000e28 	.word	0x20000e28
 800d1b0:	20000e47 	.word	0x20000e47
 800d1b4:	0802c75c 	.word	0x0802c75c
 800d1b8:	0802c2dc 	.word	0x0802c2dc

0800d1bc <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800d1c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800d1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800d1cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800d1d8:	4b08      	ldr	r3, [pc, #32]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800d1de:	4b07      	ldr	r3, [pc, #28]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800d1e4:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <DisableConnectedDevices+0x40>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800d1ea:	4a05      	ldr	r2, [pc, #20]	@ (800d200 <DisableConnectedDevices+0x44>)
 800d1ec:	4b05      	ldr	r3, [pc, #20]	@ (800d204 <DisableConnectedDevices+0x48>)
 800d1ee:	0019      	movs	r1, r3
 800d1f0:	2003      	movs	r0, #3
 800d1f2:	f005 ff8f 	bl	8013114 <CreateLine>
}
 800d1f6:	46c0      	nop			@ (mov r8, r8)
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	20000e30 	.word	0x20000e30
 800d200:	0802c76c 	.word	0x0802c76c
 800d204:	0802c2dc 	.word	0x0802c2dc

0800d208 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	0002      	movs	r2, r0
 800d210:	1dfb      	adds	r3, r7, #7
 800d212:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800d214:	4b05      	ldr	r3, [pc, #20]	@ (800d22c <setSensorLock+0x24>)
 800d216:	1dfa      	adds	r2, r7, #7
 800d218:	7812      	ldrb	r2, [r2, #0]
 800d21a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800d21c:	200a      	movs	r0, #10
 800d21e:	f006 fcc3 	bl	8013ba8 <HAL_Delay>
}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	46bd      	mov	sp, r7
 800d226:	b002      	add	sp, #8
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	46c0      	nop			@ (mov r8, r8)
 800d22c:	20000e41 	.word	0x20000e41

0800d230 <getSensorLock>:

uint8_t getSensorLock() {
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800d234:	4b02      	ldr	r3, [pc, #8]	@ (800d240 <getSensorLock+0x10>)
 800d236:	781b      	ldrb	r3, [r3, #0]
}
 800d238:	0018      	movs	r0, r3
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	46c0      	nop			@ (mov r8, r8)
 800d240:	20000e41 	.word	0x20000e41

0800d244 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800d248:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b4 <UpkeepI2Csensors+0x70>)
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800d250:	f006 fb1e 	bl	8013890 <HIDS_Upkeep>
 800d254:	0003      	movs	r3, r0
 800d256:	001a      	movs	r2, r3
 800d258:	4b17      	ldr	r3, [pc, #92]	@ (800d2b8 <UpkeepI2Csensors+0x74>)
 800d25a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800d25c:	4b15      	ldr	r3, [pc, #84]	@ (800d2b4 <UpkeepI2Csensors+0x70>)
 800d25e:	785b      	ldrb	r3, [r3, #1]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800d264:	f003 fb7c 	bl	8010960 <SGP_Upkeep>
 800d268:	0003      	movs	r3, r0
 800d26a:	001a      	movs	r2, r3
 800d26c:	4b13      	ldr	r3, [pc, #76]	@ (800d2bc <UpkeepI2Csensors+0x78>)
 800d26e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800d270:	4b10      	ldr	r3, [pc, #64]	@ (800d2b4 <UpkeepI2Csensors+0x70>)
 800d272:	791b      	ldrb	r3, [r3, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d005      	beq.n	800d284 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800d278:	f7fd fa7a 	bl	800a770 <AHT_Upkeep>
 800d27c:	0003      	movs	r3, r0
 800d27e:	001a      	movs	r2, r3
 800d280:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c0 <UpkeepI2Csensors+0x7c>)
 800d282:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800d284:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b4 <UpkeepI2Csensors+0x70>)
 800d286:	795b      	ldrb	r3, [r3, #5]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d005      	beq.n	800d298 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800d28c:	f7fd fffa 	bl	800b284 <BMP_Upkeep>
 800d290:	0003      	movs	r3, r0
 800d292:	001a      	movs	r2, r3
 800d294:	4b0b      	ldr	r3, [pc, #44]	@ (800d2c4 <UpkeepI2Csensors+0x80>)
 800d296:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800d298:	4b06      	ldr	r3, [pc, #24]	@ (800d2b4 <UpkeepI2Csensors+0x70>)
 800d29a:	799b      	ldrb	r3, [r3, #6]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d005      	beq.n	800d2ac <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800d2a0:	f7f7 f8da 	bl	8004458 <ENS_Upkeep>
 800d2a4:	0003      	movs	r3, r0
 800d2a6:	001a      	movs	r2, r3
 800d2a8:	4b07      	ldr	r3, [pc, #28]	@ (800d2c8 <UpkeepI2Csensors+0x84>)
 800d2aa:	701a      	strb	r2, [r3, #0]
  }
}
 800d2ac:	46c0      	nop			@ (mov r8, r8)
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	46c0      	nop			@ (mov r8, r8)
 800d2b4:	20000e30 	.word	0x20000e30
 800d2b8:	20000e43 	.word	0x20000e43
 800d2bc:	20000e42 	.word	0x20000e42
 800d2c0:	20000e44 	.word	0x20000e44
 800d2c4:	20000e45 	.word	0x20000e45
 800d2c8:	20000e46 	.word	0x20000e46

0800d2cc <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800d2d0:	4b02      	ldr	r3, [pc, #8]	@ (800d2dc <ResetdBAmax+0x10>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	601a      	str	r2, [r3, #0]
}
 800d2d6:	46c0      	nop			@ (mov r8, r8)
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	20000e8c 	.word	0x20000e8c

0800d2e0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800d2e8:	f006 fc54 	bl	8013b94 <HAL_GetTick>
 800d2ec:	0002      	movs	r2, r0
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	18d2      	adds	r2, r2, r3
 800d2f2:	4b03      	ldr	r3, [pc, #12]	@ (800d300 <setMICTimeStamp+0x20>)
 800d2f4:	601a      	str	r2, [r3, #0]
}
 800d2f6:	46c0      	nop			@ (mov r8, r8)
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	b002      	add	sp, #8
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	46c0      	nop			@ (mov r8, r8)
 800d300:	20000e94 	.word	0x20000e94

0800d304 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  counter = 0;
 800d308:	4b05      	ldr	r3, [pc, #20]	@ (800d320 <ResetDBACalculator+0x1c>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800d30e:	4b05      	ldr	r3, [pc, #20]	@ (800d324 <ResetDBACalculator+0x20>)
 800d310:	2201      	movs	r2, #1
 800d312:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800d314:	4b04      	ldr	r3, [pc, #16]	@ (800d328 <ResetDBACalculator+0x24>)
 800d316:	2200      	movs	r2, #0
 800d318:	701a      	strb	r2, [r3, #0]
}
 800d31a:	46c0      	nop			@ (mov r8, r8)
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20000e90 	.word	0x20000e90
 800d324:	2000009d 	.word	0x2000009d
 800d328:	20000e91 	.word	0x20000e91

0800d32c <MIC_Print>:

void MIC_Print(void) {
 800d32c:	b5b0      	push	{r4, r5, r7, lr}
 800d32e:	b08a      	sub	sp, #40	@ 0x28
 800d330:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800d332:	4b9f      	ldr	r3, [pc, #636]	@ (800d5b0 <MIC_Print+0x284>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b9f      	ldr	r3, [pc, #636]	@ (800d5b4 <MIC_Print+0x288>)
 800d338:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800d33a:	4b9f      	ldr	r3, [pc, #636]	@ (800d5b8 <MIC_Print+0x28c>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	001a      	movs	r2, r3
 800d340:	4b9c      	ldr	r3, [pc, #624]	@ (800d5b4 <MIC_Print+0x288>)
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	4b9d      	ldr	r3, [pc, #628]	@ (800d5bc <MIC_Print+0x290>)
 800d346:	0092      	lsls	r2, r2, #2
 800d348:	50d1      	str	r1, [r2, r3]
  counter++;
 800d34a:	4b9b      	ldr	r3, [pc, #620]	@ (800d5b8 <MIC_Print+0x28c>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	3301      	adds	r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	4b99      	ldr	r3, [pc, #612]	@ (800d5b8 <MIC_Print+0x28c>)
 800d354:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800d356:	4b98      	ldr	r3, [pc, #608]	@ (800d5b8 <MIC_Print+0x28c>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b09      	cmp	r3, #9
 800d35c:	d80b      	bhi.n	800d376 <MIC_Print+0x4a>
 800d35e:	4b98      	ldr	r3, [pc, #608]	@ (800d5c0 <MIC_Print+0x294>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2201      	movs	r2, #1
 800d364:	4053      	eors	r3, r2
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d004      	beq.n	800d376 <MIC_Print+0x4a>
    denominator = counter;
 800d36c:	4b92      	ldr	r3, [pc, #584]	@ (800d5b8 <MIC_Print+0x28c>)
 800d36e:	781a      	ldrb	r2, [r3, #0]
 800d370:	4b94      	ldr	r3, [pc, #592]	@ (800d5c4 <MIC_Print+0x298>)
 800d372:	701a      	strb	r2, [r3, #0]
 800d374:	e005      	b.n	800d382 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800d376:	4b93      	ldr	r3, [pc, #588]	@ (800d5c4 <MIC_Print+0x298>)
 800d378:	220a      	movs	r2, #10
 800d37a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800d37c:	4b90      	ldr	r3, [pc, #576]	@ (800d5c0 <MIC_Print+0x294>)
 800d37e:	2201      	movs	r2, #1
 800d380:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800d382:	4b91      	ldr	r3, [pc, #580]	@ (800d5c8 <MIC_Print+0x29c>)
 800d384:	2200      	movs	r2, #0
 800d386:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800d388:	230f      	movs	r3, #15
 800d38a:	18fb      	adds	r3, r7, r3
 800d38c:	2200      	movs	r2, #0
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	e042      	b.n	800d418 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800d392:	240f      	movs	r4, #15
 800d394:	193b      	adds	r3, r7, r4
 800d396:	781a      	ldrb	r2, [r3, #0]
 800d398:	4b88      	ldr	r3, [pc, #544]	@ (800d5bc <MIC_Print+0x290>)
 800d39a:	0092      	lsls	r2, r2, #2
 800d39c:	58d2      	ldr	r2, [r2, r3]
 800d39e:	4b8a      	ldr	r3, [pc, #552]	@ (800d5c8 <MIC_Print+0x29c>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	1c19      	adds	r1, r3, #0
 800d3a4:	1c10      	adds	r0, r2, #0
 800d3a6:	f7f3 fa8b 	bl	80008c0 <__aeabi_fadd>
 800d3aa:	1c03      	adds	r3, r0, #0
 800d3ac:	1c1a      	adds	r2, r3, #0
 800d3ae:	4b86      	ldr	r3, [pc, #536]	@ (800d5c8 <MIC_Print+0x29c>)
 800d3b0:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800d3b2:	193b      	adds	r3, r7, r4
 800d3b4:	781a      	ldrb	r2, [r3, #0]
 800d3b6:	4b81      	ldr	r3, [pc, #516]	@ (800d5bc <MIC_Print+0x290>)
 800d3b8:	0092      	lsls	r2, r2, #2
 800d3ba:	58d2      	ldr	r2, [r2, r3]
 800d3bc:	4b83      	ldr	r3, [pc, #524]	@ (800d5cc <MIC_Print+0x2a0>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	1c19      	adds	r1, r3, #0
 800d3c2:	1c10      	adds	r0, r2, #0
 800d3c4:	f7f3 f8c8 	bl	8000558 <__aeabi_fcmpgt>
 800d3c8:	1e03      	subs	r3, r0, #0
 800d3ca:	d006      	beq.n	800d3da <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800d3cc:	193b      	adds	r3, r7, r4
 800d3ce:	781a      	ldrb	r2, [r3, #0]
 800d3d0:	4b7a      	ldr	r3, [pc, #488]	@ (800d5bc <MIC_Print+0x290>)
 800d3d2:	0092      	lsls	r2, r2, #2
 800d3d4:	58d2      	ldr	r2, [r2, r3]
 800d3d6:	4b7d      	ldr	r3, [pc, #500]	@ (800d5cc <MIC_Print+0x2a0>)
 800d3d8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800d3da:	4b7b      	ldr	r3, [pc, #492]	@ (800d5c8 <MIC_Print+0x29c>)
 800d3dc:	681c      	ldr	r4, [r3, #0]
 800d3de:	4b79      	ldr	r3, [pc, #484]	@ (800d5c4 <MIC_Print+0x298>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	0018      	movs	r0, r3
 800d3e4:	f7f4 fa70 	bl	80018c8 <__aeabi_ui2f>
 800d3e8:	1c03      	adds	r3, r0, #0
 800d3ea:	1c19      	adds	r1, r3, #0
 800d3ec:	1c20      	adds	r0, r4, #0
 800d3ee:	f7f3 fc59 	bl	8000ca4 <__aeabi_fdiv>
 800d3f2:	1c03      	adds	r3, r0, #0
 800d3f4:	1c1a      	adds	r2, r3, #0
 800d3f6:	4b76      	ldr	r3, [pc, #472]	@ (800d5d0 <MIC_Print+0x2a4>)
 800d3f8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800d3fa:	4b6e      	ldr	r3, [pc, #440]	@ (800d5b4 <MIC_Print+0x288>)
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	4b73      	ldr	r3, [pc, #460]	@ (800d5cc <MIC_Print+0x2a0>)
 800d400:	6819      	ldr	r1, [r3, #0]
 800d402:	4b73      	ldr	r3, [pc, #460]	@ (800d5d0 <MIC_Print+0x2a4>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	1c1a      	adds	r2, r3, #0
 800d408:	f7f7 fbe2 	bl	8004bd0 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800d40c:	210f      	movs	r1, #15
 800d40e:	187b      	adds	r3, r7, r1
 800d410:	781a      	ldrb	r2, [r3, #0]
 800d412:	187b      	adds	r3, r7, r1
 800d414:	3201      	adds	r2, #1
 800d416:	701a      	strb	r2, [r3, #0]
 800d418:	4b6a      	ldr	r3, [pc, #424]	@ (800d5c4 <MIC_Print+0x298>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	220f      	movs	r2, #15
 800d41e:	18ba      	adds	r2, r7, r2
 800d420:	7812      	ldrb	r2, [r2, #0]
 800d422:	429a      	cmp	r2, r3
 800d424:	d3b5      	bcc.n	800d392 <MIC_Print+0x66>
  }
  printf("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800d426:	4b63      	ldr	r3, [pc, #396]	@ (800d5b4 <MIC_Print+0x288>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	1c18      	adds	r0, r3, #0
 800d42c:	f7f6 fa32 	bl	8003894 <__aeabi_f2d>
 800d430:	6038      	str	r0, [r7, #0]
 800d432:	6079      	str	r1, [r7, #4]
 800d434:	4b65      	ldr	r3, [pc, #404]	@ (800d5cc <MIC_Print+0x2a0>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	1c18      	adds	r0, r3, #0
 800d43a:	f7f6 fa2b 	bl	8003894 <__aeabi_f2d>
 800d43e:	0004      	movs	r4, r0
 800d440:	000d      	movs	r5, r1
 800d442:	4b63      	ldr	r3, [pc, #396]	@ (800d5d0 <MIC_Print+0x2a4>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	1c18      	adds	r0, r3, #0
 800d448:	f7f6 fa24 	bl	8003894 <__aeabi_f2d>
 800d44c:	0002      	movs	r2, r0
 800d44e:	000b      	movs	r3, r1
 800d450:	4960      	ldr	r1, [pc, #384]	@ (800d5d4 <MIC_Print+0x2a8>)
 800d452:	9204      	str	r2, [sp, #16]
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	9402      	str	r4, [sp, #8]
 800d458:	9503      	str	r5, [sp, #12]
 800d45a:	4b5f      	ldr	r3, [pc, #380]	@ (800d5d8 <MIC_Print+0x2ac>)
 800d45c:	9300      	str	r3, [sp, #0]
 800d45e:	683a      	ldr	r2, [r7, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	0008      	movs	r0, r1
 800d464:	f017 ff52 	bl	802530c <iprintf>

  if(counter > NUMBER_OF_SAMPLES){
 800d468:	4b53      	ldr	r3, [pc, #332]	@ (800d5b8 <MIC_Print+0x28c>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b0a      	cmp	r3, #10
 800d46e:	d902      	bls.n	800d476 <MIC_Print+0x14a>
    counter = 0;
 800d470:	4b51      	ldr	r3, [pc, #324]	@ (800d5b8 <MIC_Print+0x28c>)
 800d472:	2200      	movs	r2, #0
 800d474:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800d476:	4b4f      	ldr	r3, [pc, #316]	@ (800d5b4 <MIC_Print+0x288>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4958      	ldr	r1, [pc, #352]	@ (800d5dc <MIC_Print+0x2b0>)
 800d47c:	1c18      	adds	r0, r3, #0
 800d47e:	f7f3 f875 	bl	800056c <__aeabi_fcmpge>
 800d482:	1e03      	subs	r3, r0, #0
 800d484:	d004      	beq.n	800d490 <MIC_Print+0x164>
    SetDBLED(true, true, true);
 800d486:	2201      	movs	r2, #1
 800d488:	2101      	movs	r1, #1
 800d48a:	2001      	movs	r0, #1
 800d48c:	f004 fb94 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800d490:	4b48      	ldr	r3, [pc, #288]	@ (800d5b4 <MIC_Print+0x288>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4952      	ldr	r1, [pc, #328]	@ (800d5e0 <MIC_Print+0x2b4>)
 800d496:	1c18      	adds	r0, r3, #0
 800d498:	f7f3 f868 	bl	800056c <__aeabi_fcmpge>
 800d49c:	1e03      	subs	r3, r0, #0
 800d49e:	d00c      	beq.n	800d4ba <MIC_Print+0x18e>
 800d4a0:	4b44      	ldr	r3, [pc, #272]	@ (800d5b4 <MIC_Print+0x288>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	494d      	ldr	r1, [pc, #308]	@ (800d5dc <MIC_Print+0x2b0>)
 800d4a6:	1c18      	adds	r0, r3, #0
 800d4a8:	f7f3 f842 	bl	8000530 <__aeabi_fcmplt>
 800d4ac:	1e03      	subs	r3, r0, #0
 800d4ae:	d004      	beq.n	800d4ba <MIC_Print+0x18e>
    SetDBLED(true, false, false);
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	f004 fb7f 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800d4ba:	4b3e      	ldr	r3, [pc, #248]	@ (800d5b4 <MIC_Print+0x288>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	4949      	ldr	r1, [pc, #292]	@ (800d5e4 <MIC_Print+0x2b8>)
 800d4c0:	1c18      	adds	r0, r3, #0
 800d4c2:	f7f3 f853 	bl	800056c <__aeabi_fcmpge>
 800d4c6:	1e03      	subs	r3, r0, #0
 800d4c8:	d00c      	beq.n	800d4e4 <MIC_Print+0x1b8>
 800d4ca:	4b3a      	ldr	r3, [pc, #232]	@ (800d5b4 <MIC_Print+0x288>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4944      	ldr	r1, [pc, #272]	@ (800d5e0 <MIC_Print+0x2b4>)
 800d4d0:	1c18      	adds	r0, r3, #0
 800d4d2:	f7f3 f82d 	bl	8000530 <__aeabi_fcmplt>
 800d4d6:	1e03      	subs	r3, r0, #0
 800d4d8:	d004      	beq.n	800d4e4 <MIC_Print+0x1b8>
    SetDBLED(true, true, false);
 800d4da:	2200      	movs	r2, #0
 800d4dc:	2101      	movs	r1, #1
 800d4de:	2001      	movs	r0, #1
 800d4e0:	f004 fb6a 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800d4e4:	4b33      	ldr	r3, [pc, #204]	@ (800d5b4 <MIC_Print+0x288>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	493f      	ldr	r1, [pc, #252]	@ (800d5e8 <MIC_Print+0x2bc>)
 800d4ea:	1c18      	adds	r0, r3, #0
 800d4ec:	f7f3 f83e 	bl	800056c <__aeabi_fcmpge>
 800d4f0:	1e03      	subs	r3, r0, #0
 800d4f2:	d00c      	beq.n	800d50e <MIC_Print+0x1e2>
 800d4f4:	4b2f      	ldr	r3, [pc, #188]	@ (800d5b4 <MIC_Print+0x288>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	493a      	ldr	r1, [pc, #232]	@ (800d5e4 <MIC_Print+0x2b8>)
 800d4fa:	1c18      	adds	r0, r3, #0
 800d4fc:	f7f3 f818 	bl	8000530 <__aeabi_fcmplt>
 800d500:	1e03      	subs	r3, r0, #0
 800d502:	d004      	beq.n	800d50e <MIC_Print+0x1e2>
    SetDBLED(false, true, false);
 800d504:	2200      	movs	r2, #0
 800d506:	2101      	movs	r1, #1
 800d508:	2000      	movs	r0, #0
 800d50a:	f004 fb55 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800d50e:	4b29      	ldr	r3, [pc, #164]	@ (800d5b4 <MIC_Print+0x288>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4936      	ldr	r1, [pc, #216]	@ (800d5ec <MIC_Print+0x2c0>)
 800d514:	1c18      	adds	r0, r3, #0
 800d516:	f7f3 f829 	bl	800056c <__aeabi_fcmpge>
 800d51a:	1e03      	subs	r3, r0, #0
 800d51c:	d00c      	beq.n	800d538 <MIC_Print+0x20c>
 800d51e:	4b25      	ldr	r3, [pc, #148]	@ (800d5b4 <MIC_Print+0x288>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4931      	ldr	r1, [pc, #196]	@ (800d5e8 <MIC_Print+0x2bc>)
 800d524:	1c18      	adds	r0, r3, #0
 800d526:	f7f3 f803 	bl	8000530 <__aeabi_fcmplt>
 800d52a:	1e03      	subs	r3, r0, #0
 800d52c:	d004      	beq.n	800d538 <MIC_Print+0x20c>
    SetDBLED(false, true, true);
 800d52e:	2201      	movs	r2, #1
 800d530:	2101      	movs	r1, #1
 800d532:	2000      	movs	r0, #0
 800d534:	f004 fb40 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800d538:	4b1e      	ldr	r3, [pc, #120]	@ (800d5b4 <MIC_Print+0x288>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	492c      	ldr	r1, [pc, #176]	@ (800d5f0 <MIC_Print+0x2c4>)
 800d53e:	1c18      	adds	r0, r3, #0
 800d540:	f7f3 f814 	bl	800056c <__aeabi_fcmpge>
 800d544:	1e03      	subs	r3, r0, #0
 800d546:	d00c      	beq.n	800d562 <MIC_Print+0x236>
 800d548:	4b1a      	ldr	r3, [pc, #104]	@ (800d5b4 <MIC_Print+0x288>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4927      	ldr	r1, [pc, #156]	@ (800d5ec <MIC_Print+0x2c0>)
 800d54e:	1c18      	adds	r0, r3, #0
 800d550:	f7f2 ffee 	bl	8000530 <__aeabi_fcmplt>
 800d554:	1e03      	subs	r3, r0, #0
 800d556:	d004      	beq.n	800d562 <MIC_Print+0x236>
    SetDBLED(false, false, true);
 800d558:	2201      	movs	r2, #1
 800d55a:	2100      	movs	r1, #0
 800d55c:	2000      	movs	r0, #0
 800d55e:	f004 fb2b 	bl	8011bb8 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800d562:	4b14      	ldr	r3, [pc, #80]	@ (800d5b4 <MIC_Print+0x288>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4923      	ldr	r1, [pc, #140]	@ (800d5f4 <MIC_Print+0x2c8>)
 800d568:	1c18      	adds	r0, r3, #0
 800d56a:	f7f2 ffff 	bl	800056c <__aeabi_fcmpge>
 800d56e:	1e03      	subs	r3, r0, #0
 800d570:	d00c      	beq.n	800d58c <MIC_Print+0x260>
 800d572:	4b10      	ldr	r3, [pc, #64]	@ (800d5b4 <MIC_Print+0x288>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	491e      	ldr	r1, [pc, #120]	@ (800d5f0 <MIC_Print+0x2c4>)
 800d578:	1c18      	adds	r0, r3, #0
 800d57a:	f7f2 ffd9 	bl	8000530 <__aeabi_fcmplt>
 800d57e:	1e03      	subs	r3, r0, #0
 800d580:	d004      	beq.n	800d58c <MIC_Print+0x260>
    SetDBLED(true, false, true);
 800d582:	2201      	movs	r2, #1
 800d584:	2100      	movs	r1, #0
 800d586:	2001      	movs	r0, #1
 800d588:	f004 fb16 	bl	8011bb8 <SetDBLED>
  }
  if(dBA < 35){//off
 800d58c:	4b09      	ldr	r3, [pc, #36]	@ (800d5b4 <MIC_Print+0x288>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4918      	ldr	r1, [pc, #96]	@ (800d5f4 <MIC_Print+0x2c8>)
 800d592:	1c18      	adds	r0, r3, #0
 800d594:	f7f2 ffcc 	bl	8000530 <__aeabi_fcmplt>
 800d598:	1e03      	subs	r3, r0, #0
 800d59a:	d100      	bne.n	800d59e <MIC_Print+0x272>
    SetDBLED(false, false, false);
  }
}
 800d59c:	e004      	b.n	800d5a8 <MIC_Print+0x27c>
    SetDBLED(false, false, false);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	f004 fb08 	bl	8011bb8 <SetDBLED>
}
 800d5a8:	46c0      	nop			@ (mov r8, r8)
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	b004      	add	sp, #16
 800d5ae:	bdb0      	pop	{r4, r5, r7, pc}
 800d5b0:	20000e88 	.word	0x20000e88
 800d5b4:	20000e54 	.word	0x20000e54
 800d5b8:	20000e90 	.word	0x20000e90
 800d5bc:	20000e58 	.word	0x20000e58
 800d5c0:	20000e91 	.word	0x20000e91
 800d5c4:	2000009d 	.word	0x2000009d
 800d5c8:	20000e84 	.word	0x20000e84
 800d5cc:	20000e8c 	.word	0x20000e8c
 800d5d0:	20000e80 	.word	0x20000e80
 800d5d4:	0802c780 	.word	0x0802c780
 800d5d8:	20000e48 	.word	0x20000e48
 800d5dc:	42b40000 	.word	0x42b40000
 800d5e0:	42a00000 	.word	0x42a00000
 800d5e4:	428c0000 	.word	0x428c0000
 800d5e8:	42700000 	.word	0x42700000
 800d5ec:	42480000 	.word	0x42480000
 800d5f0:	42200000 	.word	0x42200000
 800d5f4:	420c0000 	.word	0x420c0000

0800d5f8 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800d5fe:	4b11      	ldr	r3, [pc, #68]	@ (800d644 <MIC_TestMeasurementDone+0x4c>)
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	b2db      	uxtb	r3, r3
 800d604:	4a10      	ldr	r2, [pc, #64]	@ (800d648 <MIC_TestMeasurementDone+0x50>)
 800d606:	4911      	ldr	r1, [pc, #68]	@ (800d64c <MIC_TestMeasurementDone+0x54>)
 800d608:	2002      	movs	r0, #2
 800d60a:	f005 fd83 	bl	8013114 <CreateLine>
  if(DataReady) {
 800d60e:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <MIC_TestMeasurementDone+0x4c>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d010      	beq.n	800d63a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800d618:	1dfb      	adds	r3, r7, #7
 800d61a:	4a0d      	ldr	r2, [pc, #52]	@ (800d650 <MIC_TestMeasurementDone+0x58>)
 800d61c:	7812      	ldrb	r2, [r2, #0]
 800d61e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800d620:	4b0b      	ldr	r3, [pc, #44]	@ (800d650 <MIC_TestMeasurementDone+0x58>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4a0b      	ldr	r2, [pc, #44]	@ (800d654 <MIC_TestMeasurementDone+0x5c>)
 800d628:	4908      	ldr	r1, [pc, #32]	@ (800d64c <MIC_TestMeasurementDone+0x54>)
 800d62a:	2002      	movs	r0, #2
 800d62c:	f005 fd72 	bl	8013114 <CreateLine>
    ResetMICIndicator();
 800d630:	f004 fbb0 	bl	8011d94 <ResetMICIndicator>
    return Check;
 800d634:	1dfb      	adds	r3, r7, #7
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	e000      	b.n	800d63c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	0018      	movs	r0, r3
 800d63e:	46bd      	mov	sp, r7
 800d640:	b002      	add	sp, #8
 800d642:	bd80      	pop	{r7, pc}
 800d644:	20000fc5 	.word	0x20000fc5
 800d648:	0802c7c8 	.word	0x0802c7c8
 800d64c:	0802c7f4 	.word	0x0802c7f4
 800d650:	20000fc6 	.word	0x20000fc6
 800d654:	0802c7f8 	.word	0x0802c7f8

0800d658 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800d65e:	4b78      	ldr	r3, [pc, #480]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b03      	cmp	r3, #3
 800d664:	d100      	bne.n	800d668 <Mic_Upkeep+0x10>
 800d666:	e0b8      	b.n	800d7da <Mic_Upkeep+0x182>
 800d668:	dd00      	ble.n	800d66c <Mic_Upkeep+0x14>
 800d66a:	e0d3      	b.n	800d814 <Mic_Upkeep+0x1bc>
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d037      	beq.n	800d6e0 <Mic_Upkeep+0x88>
 800d670:	dd00      	ble.n	800d674 <Mic_Upkeep+0x1c>
 800d672:	e0cf      	b.n	800d814 <Mic_Upkeep+0x1bc>
 800d674:	2b00      	cmp	r3, #0
 800d676:	d002      	beq.n	800d67e <Mic_Upkeep+0x26>
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d014      	beq.n	800d6a6 <Mic_Upkeep+0x4e>
 800d67c:	e0ca      	b.n	800d814 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800d67e:	2001      	movs	r0, #1
 800d680:	f003 fb98 	bl	8010db4 <enableMicrophone>
 800d684:	0003      	movs	r3, r0
 800d686:	001a      	movs	r2, r3
 800d688:	2301      	movs	r3, #1
 800d68a:	4053      	eors	r3, r2
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d005      	beq.n	800d69e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800d692:	4a6c      	ldr	r2, [pc, #432]	@ (800d844 <Mic_Upkeep+0x1ec>)
 800d694:	4b6c      	ldr	r3, [pc, #432]	@ (800d848 <Mic_Upkeep+0x1f0>)
 800d696:	217f      	movs	r1, #127	@ 0x7f
 800d698:	0018      	movs	r0, r3
 800d69a:	f005 fdf3 	bl	8013284 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800d69e:	4b68      	ldr	r3, [pc, #416]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	701a      	strb	r2, [r3, #0]
    break;
 800d6a4:	e0c5      	b.n	800d832 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800d6a6:	f003 fb61 	bl	8010d6c <micSettlingComplete>
 800d6aa:	1e03      	subs	r3, r0, #0
 800d6ac:	d105      	bne.n	800d6ba <Mic_Upkeep+0x62>
 800d6ae:	4b67      	ldr	r3, [pc, #412]	@ (800d84c <Mic_Upkeep+0x1f4>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d100      	bne.n	800d6ba <Mic_Upkeep+0x62>
 800d6b8:	e0b6      	b.n	800d828 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800d6ba:	f003 fbe5 	bl	8010e88 <startSPLcalculation>
 800d6be:	0003      	movs	r3, r0
 800d6c0:	001a      	movs	r2, r3
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	4053      	eors	r3, r2
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d005      	beq.n	800d6d8 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800d6cc:	4a5d      	ldr	r2, [pc, #372]	@ (800d844 <Mic_Upkeep+0x1ec>)
 800d6ce:	4b5e      	ldr	r3, [pc, #376]	@ (800d848 <Mic_Upkeep+0x1f0>)
 800d6d0:	2188      	movs	r1, #136	@ 0x88
 800d6d2:	0018      	movs	r0, r3
 800d6d4:	f005 fdd6 	bl	8013284 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800d6d8:	4b59      	ldr	r3, [pc, #356]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d6da:	2202      	movs	r2, #2
 800d6dc:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d6de:	e0a3      	b.n	800d828 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800d6e0:	4b5b      	ldr	r3, [pc, #364]	@ (800d850 <Mic_Upkeep+0x1f8>)
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f003 fa22 	bl	8010b30 <getSoundData>
 800d6ec:	1e03      	subs	r3, r0, #0
 800d6ee:	d100      	bne.n	800d6f2 <Mic_Upkeep+0x9a>
 800d6f0:	e09c      	b.n	800d82c <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800d6f2:	f003 fb1b 	bl	8010d2c <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800d6f6:	4b56      	ldr	r3, [pc, #344]	@ (800d850 <Mic_Upkeep+0x1f8>)
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	001a      	movs	r2, r3
 800d6fc:	4b54      	ldr	r3, [pc, #336]	@ (800d850 <Mic_Upkeep+0x1f8>)
 800d6fe:	785b      	ldrb	r3, [r3, #1]
 800d700:	4954      	ldr	r1, [pc, #336]	@ (800d854 <Mic_Upkeep+0x1fc>)
 800d702:	0038      	movs	r0, r7
 800d704:	f017 fe72 	bl	80253ec <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800d708:	4b51      	ldr	r3, [pc, #324]	@ (800d850 <Mic_Upkeep+0x1f8>)
 800d70a:	89db      	ldrh	r3, [r3, #14]
 800d70c:	001a      	movs	r2, r3
 800d70e:	4b50      	ldr	r3, [pc, #320]	@ (800d850 <Mic_Upkeep+0x1f8>)
 800d710:	7c1b      	ldrb	r3, [r3, #16]
 800d712:	4951      	ldr	r1, [pc, #324]	@ (800d858 <Mic_Upkeep+0x200>)
 800d714:	4851      	ldr	r0, [pc, #324]	@ (800d85c <Mic_Upkeep+0x204>)
 800d716:	f017 fe69 	bl	80253ec <siprintf>
      dBValue = atof(dBbuffer);
 800d71a:	003b      	movs	r3, r7
 800d71c:	0018      	movs	r0, r3
 800d71e:	f016 fa0b 	bl	8023b38 <atof>
 800d722:	0002      	movs	r2, r0
 800d724:	000b      	movs	r3, r1
 800d726:	0010      	movs	r0, r2
 800d728:	0019      	movs	r1, r3
 800d72a:	f7f6 f8fb 	bl	8003924 <__aeabi_d2f>
 800d72e:	1c02      	adds	r2, r0, #0
 800d730:	4b4b      	ldr	r3, [pc, #300]	@ (800d860 <Mic_Upkeep+0x208>)
 800d732:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800d734:	4b4a      	ldr	r3, [pc, #296]	@ (800d860 <Mic_Upkeep+0x208>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	494a      	ldr	r1, [pc, #296]	@ (800d864 <Mic_Upkeep+0x20c>)
 800d73a:	1c18      	adds	r0, r3, #0
 800d73c:	f7f3 fc80 	bl	8001040 <__aeabi_fmul>
 800d740:	1c03      	adds	r3, r0, #0
 800d742:	1c18      	adds	r0, r3, #0
 800d744:	f7f6 f8a6 	bl	8003894 <__aeabi_f2d>
 800d748:	2200      	movs	r2, #0
 800d74a:	4b47      	ldr	r3, [pc, #284]	@ (800d868 <Mic_Upkeep+0x210>)
 800d74c:	f7f4 f902 	bl	8001954 <__aeabi_dadd>
 800d750:	0002      	movs	r2, r0
 800d752:	000b      	movs	r3, r1
 800d754:	0010      	movs	r0, r2
 800d756:	0019      	movs	r1, r3
 800d758:	f7f6 f80e 	bl	8003778 <__aeabi_d2iz>
 800d75c:	0003      	movs	r3, r0
 800d75e:	0018      	movs	r0, r3
 800d760:	f7f6 f846 	bl	80037f0 <__aeabi_i2d>
 800d764:	2200      	movs	r2, #0
 800d766:	4b41      	ldr	r3, [pc, #260]	@ (800d86c <Mic_Upkeep+0x214>)
 800d768:	f7f4 fcba 	bl	80020e0 <__aeabi_ddiv>
 800d76c:	0002      	movs	r2, r0
 800d76e:	000b      	movs	r3, r1
 800d770:	0010      	movs	r0, r2
 800d772:	0019      	movs	r1, r3
 800d774:	f7f6 f8d6 	bl	8003924 <__aeabi_d2f>
 800d778:	1c02      	adds	r2, r0, #0
 800d77a:	4b39      	ldr	r3, [pc, #228]	@ (800d860 <Mic_Upkeep+0x208>)
 800d77c:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800d77e:	f7ff fdd5 	bl	800d32c <MIC_Print>
      if (!startSPLcalculation()) {
 800d782:	f003 fb81 	bl	8010e88 <startSPLcalculation>
 800d786:	0003      	movs	r3, r0
 800d788:	001a      	movs	r2, r3
 800d78a:	2301      	movs	r3, #1
 800d78c:	4053      	eors	r3, r2
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800d794:	4a2b      	ldr	r2, [pc, #172]	@ (800d844 <Mic_Upkeep+0x1ec>)
 800d796:	4b2c      	ldr	r3, [pc, #176]	@ (800d848 <Mic_Upkeep+0x1f0>)
 800d798:	2198      	movs	r1, #152	@ 0x98
 800d79a:	0018      	movs	r0, r3
 800d79c:	f005 fd72 	bl	8013284 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f003 fb07 	bl	8010db4 <enableMicrophone>
 800d7a6:	0003      	movs	r3, r0
 800d7a8:	001a      	movs	r2, r3
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	4053      	eors	r3, r2
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d005      	beq.n	800d7c0 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800d7b4:	4a23      	ldr	r2, [pc, #140]	@ (800d844 <Mic_Upkeep+0x1ec>)
 800d7b6:	4b24      	ldr	r3, [pc, #144]	@ (800d848 <Mic_Upkeep+0x1f0>)
 800d7b8:	219b      	movs	r1, #155	@ 0x9b
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	f005 fd62 	bl	8013284 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800d7c0:	f006 f9e8 	bl	8013b94 <HAL_GetTick>
 800d7c4:	0003      	movs	r3, r0
 800d7c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d870 <Mic_Upkeep+0x218>)
 800d7c8:	189a      	adds	r2, r3, r2
 800d7ca:	4b2a      	ldr	r3, [pc, #168]	@ (800d874 <Mic_Upkeep+0x21c>)
 800d7cc:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800d7ce:	4b1c      	ldr	r3, [pc, #112]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d7d0:	2203      	movs	r2, #3
 800d7d2:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800d7d4:	f004 fade 	bl	8011d94 <ResetMICIndicator>
    }
    break;
 800d7d8:	e028      	b.n	800d82c <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800d7da:	4b26      	ldr	r3, [pc, #152]	@ (800d874 <Mic_Upkeep+0x21c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f005 fc42 	bl	8013068 <TimestampIsReached>
 800d7e4:	1e03      	subs	r3, r0, #0
 800d7e6:	d023      	beq.n	800d830 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	f003 fae3 	bl	8010db4 <enableMicrophone>
 800d7ee:	0003      	movs	r3, r0
 800d7f0:	001a      	movs	r2, r3
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4053      	eors	r3, r2
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d005      	beq.n	800d808 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800d7fc:	4a11      	ldr	r2, [pc, #68]	@ (800d844 <Mic_Upkeep+0x1ec>)
 800d7fe:	4b12      	ldr	r3, [pc, #72]	@ (800d848 <Mic_Upkeep+0x1f0>)
 800d800:	21a6      	movs	r1, #166	@ 0xa6
 800d802:	0018      	movs	r0, r3
 800d804:	f005 fd3e 	bl	8013284 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800d808:	4b0d      	ldr	r3, [pc, #52]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d80a:	2201      	movs	r2, #1
 800d80c:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800d80e:	f004 fa7f 	bl	8011d10 <SetMICIndicator>
    }
    break;
 800d812:	e00d      	b.n	800d830 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800d814:	4a18      	ldr	r2, [pc, #96]	@ (800d878 <Mic_Upkeep+0x220>)
 800d816:	4b19      	ldr	r3, [pc, #100]	@ (800d87c <Mic_Upkeep+0x224>)
 800d818:	0019      	movs	r1, r3
 800d81a:	2003      	movs	r0, #3
 800d81c:	f005 fc7a 	bl	8013114 <CreateLine>
    MicState = MIC_STATE_INIT;
 800d820:	4b07      	ldr	r3, [pc, #28]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d822:	2200      	movs	r2, #0
 800d824:	701a      	strb	r2, [r3, #0]
    break;
 800d826:	e004      	b.n	800d832 <Mic_Upkeep+0x1da>
    break;
 800d828:	46c0      	nop			@ (mov r8, r8)
 800d82a:	e002      	b.n	800d832 <Mic_Upkeep+0x1da>
    break;
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	e000      	b.n	800d832 <Mic_Upkeep+0x1da>
    break;
 800d830:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800d832:	4b03      	ldr	r3, [pc, #12]	@ (800d840 <Mic_Upkeep+0x1e8>)
 800d834:	781b      	ldrb	r3, [r3, #0]
}
 800d836:	0018      	movs	r0, r3
 800d838:	46bd      	mov	sp, r7
 800d83a:	b002      	add	sp, #8
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	46c0      	nop			@ (mov r8, r8)
 800d840:	20000eaa 	.word	0x20000eaa
 800d844:	0802c810 	.word	0x0802c810
 800d848:	0802d9e8 	.word	0x0802d9e8
 800d84c:	20000fc5 	.word	0x20000fc5
 800d850:	20000e98 	.word	0x20000e98
 800d854:	0802c82c 	.word	0x0802c82c
 800d858:	0802c834 	.word	0x0802c834
 800d85c:	20000e48 	.word	0x20000e48
 800d860:	20000e88 	.word	0x20000e88
 800d864:	42c80000 	.word	0x42c80000
 800d868:	3fe00000 	.word	0x3fe00000
 800d86c:	40590000 	.word	0x40590000
 800d870:	000002f3 	.word	0x000002f3
 800d874:	20000e94 	.word	0x20000e94
 800d878:	0802c83c 	.word	0x0802c83c
 800d87c:	0802c85c 	.word	0x0802c85c

0800d880 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800d886:	1d3b      	adds	r3, r7, #4
 800d888:	0018      	movs	r0, r3
 800d88a:	2314      	movs	r3, #20
 800d88c:	001a      	movs	r2, r3
 800d88e:	2100      	movs	r1, #0
 800d890:	f017 ff16 	bl	80256c0 <memset>
  RTC_DateTypeDef sDate = {0};
 800d894:	003b      	movs	r3, r7
 800d896:	2200      	movs	r2, #0
 800d898:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800d89a:	4b2e      	ldr	r3, [pc, #184]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d89c:	4a2e      	ldr	r2, [pc, #184]	@ (800d958 <MX_RTC_Init+0xd8>)
 800d89e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800d8a0:	4b2c      	ldr	r3, [pc, #176]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800d8a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8a8:	227f      	movs	r2, #127	@ 0x7f
 800d8aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800d8ac:	4b29      	ldr	r3, [pc, #164]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8ae:	22ff      	movs	r2, #255	@ 0xff
 800d8b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d8b2:	4b28      	ldr	r3, [pc, #160]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800d8b8:	4b26      	ldr	r3, [pc, #152]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d8be:	4b25      	ldr	r3, [pc, #148]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d8c4:	4b23      	ldr	r3, [pc, #140]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800d8ca:	4b22      	ldr	r3, [pc, #136]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8cc:	0018      	movs	r0, r3
 800d8ce:	f00d fcf1 	bl	801b2b4 <HAL_RTC_Init>
 800d8d2:	1e03      	subs	r3, r0, #0
 800d8d4:	d001      	beq.n	800d8da <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800d8d6:	f7fe ffbb 	bl	800c850 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800d8da:	1d3b      	adds	r3, r7, #4
 800d8dc:	220d      	movs	r2, #13
 800d8de:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800d8e0:	1d3b      	adds	r3, r7, #4
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800d8e6:	1d3b      	adds	r3, r7, #4
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d8ec:	1d3b      	adds	r3, r7, #4
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d8f2:	1d3b      	adds	r3, r7, #4
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800d8f8:	1d39      	adds	r1, r7, #4
 800d8fa:	4b16      	ldr	r3, [pc, #88]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	0018      	movs	r0, r3
 800d900:	f00d fd74 	bl	801b3ec <HAL_RTC_SetTime>
 800d904:	1e03      	subs	r3, r0, #0
 800d906:	d001      	beq.n	800d90c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800d908:	f7fe ffa2 	bl	800c850 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800d90c:	003b      	movs	r3, r7
 800d90e:	2206      	movs	r2, #6
 800d910:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800d912:	003b      	movs	r3, r7
 800d914:	2211      	movs	r2, #17
 800d916:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800d918:	003b      	movs	r3, r7
 800d91a:	2217      	movs	r2, #23
 800d91c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800d91e:	003b      	movs	r3, r7
 800d920:	2218      	movs	r2, #24
 800d922:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800d924:	0039      	movs	r1, r7
 800d926:	4b0b      	ldr	r3, [pc, #44]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d928:	2200      	movs	r2, #0
 800d92a:	0018      	movs	r0, r3
 800d92c:	f00d fe66 	bl	801b5fc <HAL_RTC_SetDate>
 800d930:	1e03      	subs	r3, r0, #0
 800d932:	d001      	beq.n	800d938 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800d934:	f7fe ff8c 	bl	800c850 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800d938:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <MX_RTC_Init+0xd4>)
 800d93a:	2200      	movs	r2, #0
 800d93c:	2100      	movs	r1, #0
 800d93e:	0018      	movs	r0, r3
 800d940:	f00e f816 	bl	801b970 <HAL_RTCEx_SetWakeUpTimer_IT>
 800d944:	1e03      	subs	r3, r0, #0
 800d946:	d001      	beq.n	800d94c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800d948:	f7fe ff82 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800d94c:	46c0      	nop			@ (mov r8, r8)
 800d94e:	46bd      	mov	sp, r7
 800d950:	b006      	add	sp, #24
 800d952:	bd80      	pop	{r7, pc}
 800d954:	20000eac 	.word	0x20000eac
 800d958:	40002800 	.word	0x40002800

0800d95c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a0a      	ldr	r2, [pc, #40]	@ (800d994 <HAL_RTC_MspInit+0x38>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d10e      	bne.n	800d98c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800d96e:	4b0a      	ldr	r3, [pc, #40]	@ (800d998 <HAL_RTC_MspInit+0x3c>)
 800d970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d972:	4b09      	ldr	r3, [pc, #36]	@ (800d998 <HAL_RTC_MspInit+0x3c>)
 800d974:	2180      	movs	r1, #128	@ 0x80
 800d976:	02c9      	lsls	r1, r1, #11
 800d978:	430a      	orrs	r2, r1
 800d97a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800d97c:	2200      	movs	r2, #0
 800d97e:	2100      	movs	r1, #0
 800d980:	2002      	movs	r0, #2
 800d982:	f006 fdab 	bl	80144dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800d986:	2002      	movs	r0, #2
 800d988:	f006 fdbd 	bl	8014506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800d98c:	46c0      	nop			@ (mov r8, r8)
 800d98e:	46bd      	mov	sp, r7
 800d990:	b002      	add	sp, #8
 800d992:	bd80      	pop	{r7, pc}
 800d994:	40002800 	.word	0x40002800
 800d998:	40021000 	.word	0x40021000

0800d99c <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800d9a0:	4b02      	ldr	r3, [pc, #8]	@ (800d9ac <sen5x_Get_sen5x_enable_state+0x10>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
}
 800d9a4:	0018      	movs	r0, r3
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	20000ed3 	.word	0x20000ed3

0800d9b0 <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	0002      	movs	r2, r0
 800d9b8:	1dfb      	adds	r3, r7, #7
 800d9ba:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800d9bc:	4b03      	ldr	r3, [pc, #12]	@ (800d9cc <sen5x_Set_sen5x_state+0x1c>)
 800d9be:	1dfa      	adds	r2, r7, #7
 800d9c0:	7812      	ldrb	r2, [r2, #0]
 800d9c2:	701a      	strb	r2, [r3, #0]
}
 800d9c4:	46c0      	nop			@ (mov r8, r8)
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	b002      	add	sp, #8
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	20000ed3 	.word	0x20000ed3

0800d9d0 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800d9d8:	f006 f8dc 	bl	8013b94 <HAL_GetTick>
 800d9dc:	0002      	movs	r2, r0
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	18d2      	adds	r2, r2, r3
 800d9e2:	4b03      	ldr	r3, [pc, #12]	@ (800d9f0 <setsen5xReadTimer+0x20>)
 800d9e4:	601a      	str	r2, [r3, #0]
}
 800d9e6:	46c0      	nop			@ (mov r8, r8)
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	b002      	add	sp, #8
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	46c0      	nop			@ (mov r8, r8)
 800d9f0:	20000ee0 	.word	0x20000ee0

0800d9f4 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	0002      	movs	r2, r0
 800d9fc:	1dfb      	adds	r3, r7, #7
 800d9fe:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800da00:	4b03      	ldr	r3, [pc, #12]	@ (800da10 <setsen5xSamplecounter+0x1c>)
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
}
 800da06:	46c0      	nop			@ (mov r8, r8)
 800da08:	46bd      	mov	sp, r7
 800da0a:	b002      	add	sp, #8
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	46c0      	nop			@ (mov r8, r8)
 800da10:	20000edc 	.word	0x20000edc

0800da14 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800da1c:	f7fe ffd0 	bl	800c9c0 <IsPMSensorEnabled>
 800da20:	1e03      	subs	r3, r0, #0
 800da22:	d035      	beq.n	800da90 <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800da24:	f003 fff2 	bl	8011a0c <batteryChargeCheck>
 800da28:	0003      	movs	r3, r0
 800da2a:	2b03      	cmp	r3, #3
 800da2c:	d103      	bne.n	800da36 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800da2e:	4b20      	ldr	r3, [pc, #128]	@ (800dab0 <sen5x_enable+0x9c>)
 800da30:	2201      	movs	r2, #1
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	e00d      	b.n	800da52 <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800da36:	4b1e      	ldr	r3, [pc, #120]	@ (800dab0 <sen5x_enable+0x9c>)
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	1e5a      	subs	r2, r3, #1
 800da3c:	4193      	sbcs	r3, r2
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2201      	movs	r2, #1
 800da42:	4053      	eors	r3, r2
 800da44:	b2db      	uxtb	r3, r3
 800da46:	1c1a      	adds	r2, r3, #0
 800da48:	2301      	movs	r3, #1
 800da4a:	4013      	ands	r3, r2
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	4b18      	ldr	r3, [pc, #96]	@ (800dab0 <sen5x_enable+0x9c>)
 800da50:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800da52:	4b17      	ldr	r3, [pc, #92]	@ (800dab0 <sen5x_enable+0x9c>)
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d003      	beq.n	800da62 <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800da5a:	2000      	movs	r0, #0
 800da5c:	f7ff ffb8 	bl	800d9d0 <setsen5xReadTimer>
 800da60:	e009      	b.n	800da76 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800da62:	f006 f897 	bl	8013b94 <HAL_GetTick>
 800da66:	0002      	movs	r2, r0
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2164      	movs	r1, #100	@ 0x64
 800da6c:	434b      	muls	r3, r1
 800da6e:	18d3      	adds	r3, r2, r3
 800da70:	0018      	movs	r0, r3
 800da72:	f7ff ffad 	bl	800d9d0 <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800da76:	4b0e      	ldr	r3, [pc, #56]	@ (800dab0 <sen5x_enable+0x9c>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <sen5x_enable+0x6e>
 800da7e:	4b0d      	ldr	r3, [pc, #52]	@ (800dab4 <sen5x_enable+0xa0>)
 800da80:	e000      	b.n	800da84 <sen5x_enable+0x70>
 800da82:	4b0d      	ldr	r3, [pc, #52]	@ (800dab8 <sen5x_enable+0xa4>)
 800da84:	4a0d      	ldr	r2, [pc, #52]	@ (800dabc <sen5x_enable+0xa8>)
 800da86:	490e      	ldr	r1, [pc, #56]	@ (800dac0 <sen5x_enable+0xac>)
 800da88:	2002      	movs	r0, #2
 800da8a:	f005 fb43 	bl	8013114 <CreateLine>
 800da8e:	e005      	b.n	800da9c <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800da90:	4a0c      	ldr	r2, [pc, #48]	@ (800dac4 <sen5x_enable+0xb0>)
 800da92:	4b0b      	ldr	r3, [pc, #44]	@ (800dac0 <sen5x_enable+0xac>)
 800da94:	0019      	movs	r1, r3
 800da96:	2002      	movs	r0, #2
 800da98:	f005 fb3c 	bl	8013114 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800da9c:	4b0a      	ldr	r3, [pc, #40]	@ (800dac8 <sen5x_enable+0xb4>)
 800da9e:	2201      	movs	r2, #1
 800daa0:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800daa2:	4b03      	ldr	r3, [pc, #12]	@ (800dab0 <sen5x_enable+0x9c>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
}
 800daa6:	0018      	movs	r0, r3
 800daa8:	46bd      	mov	sp, r7
 800daaa:	b002      	add	sp, #8
 800daac:	bd80      	pop	{r7, pc}
 800daae:	46c0      	nop			@ (mov r8, r8)
 800dab0:	20000ed3 	.word	0x20000ed3
 800dab4:	0802c860 	.word	0x0802c860
 800dab8:	0802c868 	.word	0x0802c868
 800dabc:	0802c874 	.word	0x0802c874
 800dac0:	0802c890 	.word	0x0802c890
 800dac4:	0802c894 	.word	0x0802c894
 800dac8:	2000009e 	.word	0x2000009e

0800dacc <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800dad0:	2380      	movs	r3, #128	@ 0x80
 800dad2:	015b      	lsls	r3, r3, #5
 800dad4:	480f      	ldr	r0, [pc, #60]	@ (800db14 <sen5x_Power_On+0x48>)
 800dad6:	2201      	movs	r2, #1
 800dad8:	0019      	movs	r1, r3
 800dada:	f007 faec 	bl	80150b6 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800dade:	4a0e      	ldr	r2, [pc, #56]	@ (800db18 <sen5x_Power_On+0x4c>)
 800dae0:	4b0e      	ldr	r3, [pc, #56]	@ (800db1c <sen5x_Power_On+0x50>)
 800dae2:	0019      	movs	r1, r3
 800dae4:	2003      	movs	r0, #3
 800dae6:	f005 fb15 	bl	8013114 <CreateLine>
  HAL_Delay(150);
 800daea:	2096      	movs	r0, #150	@ 0x96
 800daec:	f006 f85c 	bl	8013ba8 <HAL_Delay>
  if (sen5x_device_reset()) {
 800daf0:	f001 f9da 	bl	800eea8 <sen5x_device_reset>
 800daf4:	1e03      	subs	r3, r0, #0
 800daf6:	d006      	beq.n	800db06 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800daf8:	4a09      	ldr	r2, [pc, #36]	@ (800db20 <sen5x_Power_On+0x54>)
 800dafa:	4b0a      	ldr	r3, [pc, #40]	@ (800db24 <sen5x_Power_On+0x58>)
 800dafc:	0019      	movs	r1, r3
 800dafe:	2001      	movs	r0, #1
 800db00:	f005 fb08 	bl	8013114 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800db04:	e002      	b.n	800db0c <sen5x_Power_On+0x40>
    sen5x_On = true;
 800db06:	4b08      	ldr	r3, [pc, #32]	@ (800db28 <sen5x_Power_On+0x5c>)
 800db08:	2201      	movs	r2, #1
 800db0a:	701a      	strb	r2, [r3, #0]
}
 800db0c:	46c0      	nop			@ (mov r8, r8)
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	46c0      	nop			@ (mov r8, r8)
 800db14:	50000800 	.word	0x50000800
 800db18:	0802c8b4 	.word	0x0802c8b4
 800db1c:	0802c8d0 	.word	0x0802c8d0
 800db20:	0802c8d4 	.word	0x0802c8d4
 800db24:	0802c8fc 	.word	0x0802c8fc
 800db28:	20000ed1 	.word	0x20000ed1

0800db2c <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800db30:	4b0e      	ldr	r3, [pc, #56]	@ (800db6c <sen5x_Power_Off+0x40>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800db38:	4a0d      	ldr	r2, [pc, #52]	@ (800db70 <sen5x_Power_Off+0x44>)
 800db3a:	4b0e      	ldr	r3, [pc, #56]	@ (800db74 <sen5x_Power_Off+0x48>)
 800db3c:	0019      	movs	r1, r3
 800db3e:	2003      	movs	r0, #3
 800db40:	f005 fae8 	bl	8013114 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800db44:	e00f      	b.n	800db66 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800db46:	4a0c      	ldr	r2, [pc, #48]	@ (800db78 <sen5x_Power_Off+0x4c>)
 800db48:	4b0a      	ldr	r3, [pc, #40]	@ (800db74 <sen5x_Power_Off+0x48>)
 800db4a:	0019      	movs	r1, r3
 800db4c:	2003      	movs	r0, #3
 800db4e:	f005 fae1 	bl	8013114 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800db52:	2380      	movs	r3, #128	@ 0x80
 800db54:	015b      	lsls	r3, r3, #5
 800db56:	4809      	ldr	r0, [pc, #36]	@ (800db7c <sen5x_Power_Off+0x50>)
 800db58:	2200      	movs	r2, #0
 800db5a:	0019      	movs	r1, r3
 800db5c:	f007 faab 	bl	80150b6 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800db60:	4b07      	ldr	r3, [pc, #28]	@ (800db80 <sen5x_Power_Off+0x54>)
 800db62:	2200      	movs	r2, #0
 800db64:	701a      	strb	r2, [r3, #0]
}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	20000ed2 	.word	0x20000ed2
 800db70:	0802c900 	.word	0x0802c900
 800db74:	0802c8d0 	.word	0x0802c8d0
 800db78:	0802c930 	.word	0x0802c930
 800db7c:	50000800 	.word	0x50000800
 800db80:	20000ed1 	.word	0x20000ed1

0800db84 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800db84:	b580      	push	{r7, lr}
 800db86:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800db88:	4b02      	ldr	r3, [pc, #8]	@ (800db94 <reset_fanCleaningDone+0x10>)
 800db8a:	2200      	movs	r2, #0
 800db8c:	701a      	strb	r2, [r3, #0]
}
 800db8e:	46c0      	nop			@ (mov r8, r8)
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	20000ed0 	.word	0x20000ed0

0800db98 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800db98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9a:	b093      	sub	sp, #76	@ 0x4c
 800db9c:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800db9e:	2436      	movs	r4, #54	@ 0x36
 800dba0:	193b      	adds	r3, r7, r4
 800dba2:	2200      	movs	r2, #0
 800dba4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800dba6:	2335      	movs	r3, #53	@ 0x35
 800dba8:	18fb      	adds	r3, r7, r3
 800dbaa:	2220      	movs	r2, #32
 800dbac:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800dbae:	2334      	movs	r3, #52	@ 0x34
 800dbb0:	18fb      	adds	r3, r7, r3
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800dbb6:	f7ff ff89 	bl	800dacc <sen5x_Power_On>
  error = sen5x_device_reset();
 800dbba:	0025      	movs	r5, r4
 800dbbc:	193c      	adds	r4, r7, r4
 800dbbe:	f001 f973 	bl	800eea8 <sen5x_device_reset>
 800dbc2:	0003      	movs	r3, r0
 800dbc4:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dbc6:	002c      	movs	r4, r5
 800dbc8:	193b      	adds	r3, r7, r4
 800dbca:	2200      	movs	r2, #0
 800dbcc:	5e9b      	ldrsh	r3, [r3, r2]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00b      	beq.n	800dbea <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800dbd2:	193b      	adds	r3, r7, r4
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	5e9b      	ldrsh	r3, [r3, r2]
 800dbd8:	4a75      	ldr	r2, [pc, #468]	@ (800ddb0 <probe_sen5x+0x218>)
 800dbda:	4976      	ldr	r1, [pc, #472]	@ (800ddb4 <probe_sen5x+0x21c>)
 800dbdc:	2001      	movs	r0, #1
 800dbde:	f005 fa99 	bl	8013114 <CreateLine>
      return error;
 800dbe2:	193b      	adds	r3, r7, r4
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	5e9b      	ldrsh	r3, [r3, r2]
 800dbe8:	e0de      	b.n	800dda8 <probe_sen5x+0x210>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800dbea:	2536      	movs	r5, #54	@ 0x36
 800dbec:	197c      	adds	r4, r7, r5
 800dbee:	2335      	movs	r3, #53	@ 0x35
 800dbf0:	18fb      	adds	r3, r7, r3
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	230c      	movs	r3, #12
 800dbf6:	18fb      	adds	r3, r7, r3
 800dbf8:	0011      	movs	r1, r2
 800dbfa:	0018      	movs	r0, r3
 800dbfc:	f001 f840 	bl	800ec80 <sen5x_get_serial_number>
 800dc00:	0003      	movs	r3, r0
 800dc02:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dc04:	197b      	adds	r3, r7, r5
 800dc06:	2200      	movs	r2, #0
 800dc08:	5e9b      	ldrsh	r3, [r3, r2]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00b      	beq.n	800dc26 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800dc0e:	197b      	adds	r3, r7, r5
 800dc10:	2200      	movs	r2, #0
 800dc12:	5e9a      	ldrsh	r2, [r3, r2]
 800dc14:	4b68      	ldr	r3, [pc, #416]	@ (800ddb8 <probe_sen5x+0x220>)
 800dc16:	0011      	movs	r1, r2
 800dc18:	0018      	movs	r0, r3
 800dc1a:	f017 fb77 	bl	802530c <iprintf>
      return error;
 800dc1e:	197b      	adds	r3, r7, r5
 800dc20:	2200      	movs	r2, #0
 800dc22:	5e9b      	ldrsh	r3, [r3, r2]
 800dc24:	e0c0      	b.n	800dda8 <probe_sen5x+0x210>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800dc26:	230c      	movs	r3, #12
 800dc28:	18fa      	adds	r2, r7, r3
 800dc2a:	4b64      	ldr	r3, [pc, #400]	@ (800ddbc <probe_sen5x+0x224>)
 800dc2c:	0011      	movs	r1, r2
 800dc2e:	0018      	movs	r0, r3
 800dc30:	f017 fb6c 	bl	802530c <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800dc34:	2536      	movs	r5, #54	@ 0x36
 800dc36:	197c      	adds	r4, r7, r5
 800dc38:	2334      	movs	r3, #52	@ 0x34
 800dc3a:	18fb      	adds	r3, r7, r3
 800dc3c:	781a      	ldrb	r2, [r3, #0]
 800dc3e:	4b60      	ldr	r3, [pc, #384]	@ (800ddc0 <probe_sen5x+0x228>)
 800dc40:	0011      	movs	r1, r2
 800dc42:	0018      	movs	r0, r3
 800dc44:	f000 ffc6 	bl	800ebd4 <sen5x_get_product_name>
 800dc48:	0003      	movs	r3, r0
 800dc4a:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dc4c:	197b      	adds	r3, r7, r5
 800dc4e:	2200      	movs	r2, #0
 800dc50:	5e9b      	ldrsh	r3, [r3, r2]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800dc56:	197b      	adds	r3, r7, r5
 800dc58:	2200      	movs	r2, #0
 800dc5a:	5e9a      	ldrsh	r2, [r3, r2]
 800dc5c:	4b59      	ldr	r3, [pc, #356]	@ (800ddc4 <probe_sen5x+0x22c>)
 800dc5e:	0011      	movs	r1, r2
 800dc60:	0018      	movs	r0, r3
 800dc62:	f017 fb53 	bl	802530c <iprintf>
      return error;
 800dc66:	197b      	adds	r3, r7, r5
 800dc68:	2200      	movs	r2, #0
 800dc6a:	5e9b      	ldrsh	r3, [r3, r2]
 800dc6c:	e09c      	b.n	800dda8 <probe_sen5x+0x210>
  } else {
      printf("Product name: %s\r\n", product_name);
 800dc6e:	4a54      	ldr	r2, [pc, #336]	@ (800ddc0 <probe_sen5x+0x228>)
 800dc70:	4b55      	ldr	r3, [pc, #340]	@ (800ddc8 <probe_sen5x+0x230>)
 800dc72:	0011      	movs	r1, r2
 800dc74:	0018      	movs	r0, r3
 800dc76:	f017 fb49 	bl	802530c <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800dc7a:	2636      	movs	r6, #54	@ 0x36
 800dc7c:	19bc      	adds	r4, r7, r6
 800dc7e:	2308      	movs	r3, #8
 800dc80:	18fd      	adds	r5, r7, r3
 800dc82:	2309      	movs	r3, #9
 800dc84:	18fa      	adds	r2, r7, r3
 800dc86:	230a      	movs	r3, #10
 800dc88:	18f9      	adds	r1, r7, r3
 800dc8a:	230b      	movs	r3, #11
 800dc8c:	18f8      	adds	r0, r7, r3
 800dc8e:	1d7b      	adds	r3, r7, #5
 800dc90:	9302      	str	r3, [sp, #8]
 800dc92:	1dbb      	adds	r3, r7, #6
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	1dfb      	adds	r3, r7, #7
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	002b      	movs	r3, r5
 800dc9c:	f001 f846 	bl	800ed2c <sen5x_get_version>
 800dca0:	0003      	movs	r3, r0
 800dca2:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800dca4:	19bb      	adds	r3, r7, r6
 800dca6:	2200      	movs	r2, #0
 800dca8:	5e9b      	ldrsh	r3, [r3, r2]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00b      	beq.n	800dcc6 <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 800dcae:	19bb      	adds	r3, r7, r6
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	5e9a      	ldrsh	r2, [r3, r2]
 800dcb4:	4b45      	ldr	r3, [pc, #276]	@ (800ddcc <probe_sen5x+0x234>)
 800dcb6:	0011      	movs	r1, r2
 800dcb8:	0018      	movs	r0, r3
 800dcba:	f017 fb27 	bl	802530c <iprintf>
      return error;
 800dcbe:	19bb      	adds	r3, r7, r6
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	5e9b      	ldrsh	r3, [r3, r2]
 800dcc4:	e070      	b.n	800dda8 <probe_sen5x+0x210>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800dcc6:	230b      	movs	r3, #11
 800dcc8:	18fb      	adds	r3, r7, r3
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	0019      	movs	r1, r3
 800dcce:	230a      	movs	r3, #10
 800dcd0:	18fb      	adds	r3, r7, r3
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	001a      	movs	r2, r3
 800dcd6:	2308      	movs	r3, #8
 800dcd8:	18fb      	adds	r3, r7, r3
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	001c      	movs	r4, r3
 800dcde:	1dfb      	adds	r3, r7, #7
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	483b      	ldr	r0, [pc, #236]	@ (800ddd0 <probe_sen5x+0x238>)
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	0023      	movs	r3, r4
 800dce8:	f017 fb10 	bl	802530c <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800dcec:	2300      	movs	r3, #0
 800dcee:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800dcf0:	262e      	movs	r6, #46	@ 0x2e
 800dcf2:	19bb      	adds	r3, r7, r6
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800dcf8:	232c      	movs	r3, #44	@ 0x2c
 800dcfa:	18fb      	adds	r3, r7, r3
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800dd00:	4934      	ldr	r1, [pc, #208]	@ (800ddd4 <probe_sen5x+0x23c>)
 800dd02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd04:	f7f3 f99c 	bl	8001040 <__aeabi_fmul>
 800dd08:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800dd0a:	1c18      	adds	r0, r3, #0
 800dd0c:	f7f3 fd6c 	bl	80017e8 <__aeabi_f2iz>
 800dd10:	0003      	movs	r3, r0
 800dd12:	b218      	sxth	r0, r3
 800dd14:	2536      	movs	r5, #54	@ 0x36
 800dd16:	197c      	adds	r4, r7, r5
 800dd18:	232c      	movs	r3, #44	@ 0x2c
 800dd1a:	18fb      	adds	r3, r7, r3
 800dd1c:	881a      	ldrh	r2, [r3, #0]
 800dd1e:	19bb      	adds	r3, r7, r6
 800dd20:	2100      	movs	r1, #0
 800dd22:	5e5b      	ldrsh	r3, [r3, r1]
 800dd24:	0019      	movs	r1, r3
 800dd26:	f000 fef1 	bl	800eb0c <sen5x_set_temperature_offset_parameters>
 800dd2a:	0003      	movs	r3, r0
 800dd2c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800dd2e:	197b      	adds	r3, r7, r5
 800dd30:	2200      	movs	r2, #0
 800dd32:	5e9b      	ldrsh	r3, [r3, r2]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800dd38:	197b      	adds	r3, r7, r5
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	5e9b      	ldrsh	r3, [r3, r2]
 800dd3e:	4a26      	ldr	r2, [pc, #152]	@ (800ddd8 <probe_sen5x+0x240>)
 800dd40:	491c      	ldr	r1, [pc, #112]	@ (800ddb4 <probe_sen5x+0x21c>)
 800dd42:	2001      	movs	r0, #1
 800dd44:	f005 f9e6 	bl	8013114 <CreateLine>
      return error;
 800dd48:	197b      	adds	r3, r7, r5
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	5e9b      	ldrsh	r3, [r3, r2]
 800dd4e:	e02b      	b.n	800dda8 <probe_sen5x+0x210>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800dd50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd52:	f7f5 fd9f 	bl	8003894 <__aeabi_f2d>
 800dd56:	0002      	movs	r2, r0
 800dd58:	000b      	movs	r3, r1
 800dd5a:	4820      	ldr	r0, [pc, #128]	@ (800dddc <probe_sen5x+0x244>)
 800dd5c:	4920      	ldr	r1, [pc, #128]	@ (800dde0 <probe_sen5x+0x248>)
 800dd5e:	9200      	str	r2, [sp, #0]
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	0002      	movs	r2, r0
 800dd64:	2002      	movs	r0, #2
 800dd66:	f005 f9d5 	bl	8013114 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800dd6a:	f7fb fac7 	bl	80092fc <Check_USB_PowerOn>
 800dd6e:	0003      	movs	r3, r0
 800dd70:	001a      	movs	r2, r3
 800dd72:	2301      	movs	r3, #1
 800dd74:	4053      	eors	r3, r2
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d00a      	beq.n	800dd92 <probe_sen5x+0x1fa>
    sen5x_Power_Off();
 800dd7c:	f7ff fed6 	bl	800db2c <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800dd80:	f005 ff08 	bl	8013b94 <HAL_GetTick>
 800dd84:	0003      	movs	r3, r0
 800dd86:	22fa      	movs	r2, #250	@ 0xfa
 800dd88:	00d2      	lsls	r2, r2, #3
 800dd8a:	189a      	adds	r2, r3, r2
 800dd8c:	4b15      	ldr	r3, [pc, #84]	@ (800dde4 <probe_sen5x+0x24c>)
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	e006      	b.n	800dda0 <probe_sen5x+0x208>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800dd92:	f005 feff 	bl	8013b94 <HAL_GetTick>
 800dd96:	0003      	movs	r3, r0
 800dd98:	4a13      	ldr	r2, [pc, #76]	@ (800dde8 <probe_sen5x+0x250>)
 800dd9a:	189a      	adds	r2, r3, r2
 800dd9c:	4b11      	ldr	r3, [pc, #68]	@ (800dde4 <probe_sen5x+0x24c>)
 800dd9e:	601a      	str	r2, [r3, #0]
  }
  return error;
 800dda0:	2336      	movs	r3, #54	@ 0x36
 800dda2:	18fb      	adds	r3, r7, r3
 800dda4:	2200      	movs	r2, #0
 800dda6:	5e9b      	ldrsh	r3, [r3, r2]
}
 800dda8:	0018      	movs	r0, r3
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	b00f      	add	sp, #60	@ 0x3c
 800ddae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddb0:	0802c94c 	.word	0x0802c94c
 800ddb4:	0802c8fc 	.word	0x0802c8fc
 800ddb8:	0802c978 	.word	0x0802c978
 800ddbc:	0802c9a8 	.word	0x0802c9a8
 800ddc0:	20000ed4 	.word	0x20000ed4
 800ddc4:	0802c9bc 	.word	0x0802c9bc
 800ddc8:	0802c9ec 	.word	0x0802c9ec
 800ddcc:	0802ca00 	.word	0x0802ca00
 800ddd0:	0802ca2c 	.word	0x0802ca2c
 800ddd4:	43480000 	.word	0x43480000
 800ddd8:	0802ca50 	.word	0x0802ca50
 800dddc:	0802ca90 	.word	0x0802ca90
 800dde0:	0802c890 	.word	0x0802c890
 800dde4:	20000ee0 	.word	0x20000ee0
 800dde8:	00006d60 	.word	0x00006d60

0800ddec <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800ddf2:	1dbb      	adds	r3, r7, #6
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800ddf8:	4b1b      	ldr	r3, [pc, #108]	@ (800de68 <sen5x_lightup_measurement+0x7c>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00b      	beq.n	800de18 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800de00:	4a1a      	ldr	r2, [pc, #104]	@ (800de6c <sen5x_lightup_measurement+0x80>)
 800de02:	4b1b      	ldr	r3, [pc, #108]	@ (800de70 <sen5x_lightup_measurement+0x84>)
 800de04:	0019      	movs	r1, r3
 800de06:	2002      	movs	r0, #2
 800de08:	f005 f984 	bl	8013114 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800de0c:	1dbc      	adds	r4, r7, #6
 800de0e:	f000 fd09 	bl	800e824 <sen5x_start_measurement_without_pm>
 800de12:	0003      	movs	r3, r0
 800de14:	8023      	strh	r3, [r4, #0]
 800de16:	e00a      	b.n	800de2e <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800de18:	4a16      	ldr	r2, [pc, #88]	@ (800de74 <sen5x_lightup_measurement+0x88>)
 800de1a:	4b15      	ldr	r3, [pc, #84]	@ (800de70 <sen5x_lightup_measurement+0x84>)
 800de1c:	0019      	movs	r1, r3
 800de1e:	2002      	movs	r0, #2
 800de20:	f005 f978 	bl	8013114 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800de24:	1dbc      	adds	r4, r7, #6
 800de26:	f000 fccf 	bl	800e7c8 <sen5x_start_measurement>
 800de2a:	0003      	movs	r3, r0
 800de2c:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800de2e:	1dbb      	adds	r3, r7, #6
 800de30:	2200      	movs	r2, #0
 800de32:	5e9b      	ldrsh	r3, [r3, r2]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d008      	beq.n	800de4a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800de38:	1dbb      	adds	r3, r7, #6
 800de3a:	2200      	movs	r2, #0
 800de3c:	5e9b      	ldrsh	r3, [r3, r2]
 800de3e:	4a0e      	ldr	r2, [pc, #56]	@ (800de78 <sen5x_lightup_measurement+0x8c>)
 800de40:	490e      	ldr	r1, [pc, #56]	@ (800de7c <sen5x_lightup_measurement+0x90>)
 800de42:	2001      	movs	r0, #1
 800de44:	f005 f966 	bl	8013114 <CreateLine>
 800de48:	e007      	b.n	800de5a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800de4a:	f7fb fa87 	bl	800935c <showTime>
    Info("sen5x_start_measurement executed");
 800de4e:	4a0c      	ldr	r2, [pc, #48]	@ (800de80 <sen5x_lightup_measurement+0x94>)
 800de50:	4b07      	ldr	r3, [pc, #28]	@ (800de70 <sen5x_lightup_measurement+0x84>)
 800de52:	0019      	movs	r1, r3
 800de54:	2002      	movs	r0, #2
 800de56:	f005 f95d 	bl	8013114 <CreateLine>
  }
  return error;
 800de5a:	1dbb      	adds	r3, r7, #6
 800de5c:	2200      	movs	r2, #0
 800de5e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800de60:	0018      	movs	r0, r3
 800de62:	46bd      	mov	sp, r7
 800de64:	b003      	add	sp, #12
 800de66:	bd90      	pop	{r4, r7, pc}
 800de68:	20000ed2 	.word	0x20000ed2
 800de6c:	0802cac8 	.word	0x0802cac8
 800de70:	0802c890 	.word	0x0802c890
 800de74:	0802caf4 	.word	0x0802caf4
 800de78:	0802cb14 	.word	0x0802cb14
 800de7c:	0802c8fc 	.word	0x0802c8fc
 800de80:	0802cb44 	.word	0x0802cb44

0800de84 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800de8a:	1dbb      	adds	r3, r7, #6
 800de8c:	2200      	movs	r2, #0
 800de8e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800de90:	4b21      	ldr	r3, [pc, #132]	@ (800df18 <sen5x_extinguish_measurement+0x94>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d01e      	beq.n	800ded6 <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800de98:	4a20      	ldr	r2, [pc, #128]	@ (800df1c <sen5x_extinguish_measurement+0x98>)
 800de9a:	4b21      	ldr	r3, [pc, #132]	@ (800df20 <sen5x_extinguish_measurement+0x9c>)
 800de9c:	0019      	movs	r1, r3
 800de9e:	2002      	movs	r0, #2
 800dea0:	f005 f938 	bl	8013114 <CreateLine>
    Info("PM measurement is disabled");
 800dea4:	4a1f      	ldr	r2, [pc, #124]	@ (800df24 <sen5x_extinguish_measurement+0xa0>)
 800dea6:	4b1e      	ldr	r3, [pc, #120]	@ (800df20 <sen5x_extinguish_measurement+0x9c>)
 800dea8:	0019      	movs	r1, r3
 800deaa:	2002      	movs	r0, #2
 800deac:	f005 f932 	bl	8013114 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800deb0:	1dbc      	adds	r4, r7, #6
 800deb2:	f000 fcb7 	bl	800e824 <sen5x_start_measurement_without_pm>
 800deb6:	0003      	movs	r3, r0
 800deb8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800deba:	1dbb      	adds	r3, r7, #6
 800debc:	2200      	movs	r2, #0
 800debe:	5e9b      	ldrsh	r3, [r3, r2]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d022      	beq.n	800df0a <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800dec4:	1dbb      	adds	r3, r7, #6
 800dec6:	2200      	movs	r2, #0
 800dec8:	5e9b      	ldrsh	r3, [r3, r2]
 800deca:	4a17      	ldr	r2, [pc, #92]	@ (800df28 <sen5x_extinguish_measurement+0xa4>)
 800decc:	4917      	ldr	r1, [pc, #92]	@ (800df2c <sen5x_extinguish_measurement+0xa8>)
 800dece:	2001      	movs	r0, #1
 800ded0:	f005 f920 	bl	8013114 <CreateLine>
 800ded4:	e019      	b.n	800df0a <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800ded6:	1dbc      	adds	r4, r7, #6
 800ded8:	f000 fcd2 	bl	800e880 <sen5x_stop_measurement>
 800dedc:	0003      	movs	r3, r0
 800dede:	8023      	strh	r3, [r4, #0]
    showTime();
 800dee0:	f7fb fa3c 	bl	800935c <showTime>
    Info("sen5x_stop_measurement executed");
 800dee4:	4a12      	ldr	r2, [pc, #72]	@ (800df30 <sen5x_extinguish_measurement+0xac>)
 800dee6:	4b0e      	ldr	r3, [pc, #56]	@ (800df20 <sen5x_extinguish_measurement+0x9c>)
 800dee8:	0019      	movs	r1, r3
 800deea:	2002      	movs	r0, #2
 800deec:	f005 f912 	bl	8013114 <CreateLine>
    if (error) {
 800def0:	1dbb      	adds	r3, r7, #6
 800def2:	2200      	movs	r2, #0
 800def4:	5e9b      	ldrsh	r3, [r3, r2]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800defa:	1dbb      	adds	r3, r7, #6
 800defc:	2200      	movs	r2, #0
 800defe:	5e9b      	ldrsh	r3, [r3, r2]
 800df00:	4a0c      	ldr	r2, [pc, #48]	@ (800df34 <sen5x_extinguish_measurement+0xb0>)
 800df02:	490a      	ldr	r1, [pc, #40]	@ (800df2c <sen5x_extinguish_measurement+0xa8>)
 800df04:	2001      	movs	r0, #1
 800df06:	f005 f905 	bl	8013114 <CreateLine>
    }
  }
  return error;
 800df0a:	1dbb      	adds	r3, r7, #6
 800df0c:	2200      	movs	r2, #0
 800df0e:	5e9b      	ldrsh	r3, [r3, r2]
}
 800df10:	0018      	movs	r0, r3
 800df12:	46bd      	mov	sp, r7
 800df14:	b003      	add	sp, #12
 800df16:	bd90      	pop	{r4, r7, pc}
 800df18:	20000ed2 	.word	0x20000ed2
 800df1c:	0802cb68 	.word	0x0802cb68
 800df20:	0802c890 	.word	0x0802c890
 800df24:	0802cba0 	.word	0x0802cba0
 800df28:	0802cbbc 	.word	0x0802cbbc
 800df2c:	0802c8fc 	.word	0x0802c8fc
 800df30:	0802cbfc 	.word	0x0802cbfc
 800df34:	0802cc1c 	.word	0x0802cc1c

0800df38 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800df38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df3a:	b08d      	sub	sp, #52	@ 0x34
 800df3c:	af04      	add	r7, sp, #16
 800df3e:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800df40:	261e      	movs	r6, #30
 800df42:	19bb      	adds	r3, r7, r6
 800df44:	2200      	movs	r2, #0
 800df46:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800df48:	19bc      	adds	r4, r7, r6
 800df4a:	2316      	movs	r3, #22
 800df4c:	18fd      	adds	r5, r7, r3
 800df4e:	2318      	movs	r3, #24
 800df50:	18fa      	adds	r2, r7, r3
 800df52:	231a      	movs	r3, #26
 800df54:	18f9      	adds	r1, r7, r3
 800df56:	231c      	movs	r3, #28
 800df58:	18f8      	adds	r0, r7, r3
 800df5a:	230e      	movs	r3, #14
 800df5c:	18fb      	adds	r3, r7, r3
 800df5e:	9303      	str	r3, [sp, #12]
 800df60:	2310      	movs	r3, #16
 800df62:	18fb      	adds	r3, r7, r3
 800df64:	9302      	str	r3, [sp, #8]
 800df66:	2312      	movs	r3, #18
 800df68:	18fb      	adds	r3, r7, r3
 800df6a:	9301      	str	r3, [sp, #4]
 800df6c:	2314      	movs	r3, #20
 800df6e:	18fb      	adds	r3, r7, r3
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	002b      	movs	r3, r5
 800df74:	f000 fd06 	bl	800e984 <sen5x_read_measured_values>
 800df78:	0003      	movs	r3, r0
 800df7a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800df7c:	19bb      	adds	r3, r7, r6
 800df7e:	2200      	movs	r2, #0
 800df80:	5e9b      	ldrsh	r3, [r3, r2]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d003      	beq.n	800df8e <sen5x_read_measurement+0x56>
    return error;
 800df86:	19bb      	adds	r3, r7, r6
 800df88:	2200      	movs	r2, #0
 800df8a:	5e9b      	ldrsh	r3, [r3, r2]
 800df8c:	e02c      	b.n	800dfe8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800df8e:	231c      	movs	r3, #28
 800df90:	18fb      	adds	r3, r7, r3
 800df92:	881a      	ldrh	r2, [r3, #0]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800df98:	231a      	movs	r3, #26
 800df9a:	18fb      	adds	r3, r7, r3
 800df9c:	881a      	ldrh	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800dfa2:	2318      	movs	r3, #24
 800dfa4:	18fb      	adds	r3, r7, r3
 800dfa6:	881a      	ldrh	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800dfac:	2316      	movs	r3, #22
 800dfae:	18fb      	adds	r3, r7, r3
 800dfb0:	881a      	ldrh	r2, [r3, #0]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800dfb6:	2314      	movs	r3, #20
 800dfb8:	18fb      	adds	r3, r7, r3
 800dfba:	2200      	movs	r2, #0
 800dfbc:	5e9a      	ldrsh	r2, [r3, r2]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800dfc2:	2312      	movs	r3, #18
 800dfc4:	18fb      	adds	r3, r7, r3
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	5e9a      	ldrsh	r2, [r3, r2]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800dfce:	2310      	movs	r3, #16
 800dfd0:	18fb      	adds	r3, r7, r3
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	5e9a      	ldrsh	r2, [r3, r2]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800dfda:	230e      	movs	r3, #14
 800dfdc:	18fb      	adds	r3, r7, r3
 800dfde:	2200      	movs	r2, #0
 800dfe0:	5e9a      	ldrsh	r2, [r3, r2]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	81da      	strh	r2, [r3, #14]
  return 0;
 800dfe6:	2300      	movs	r3, #0
}
 800dfe8:	0018      	movs	r0, r3
 800dfea:	46bd      	mov	sp, r7
 800dfec:	b009      	add	sp, #36	@ 0x24
 800dfee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dff0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800dff0:	b580      	push	{r7, lr}
 800dff2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800dff4:	4b63      	ldr	r3, [pc, #396]	@ (800e184 <sen5x_printvalues+0x194>)
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	4a63      	ldr	r2, [pc, #396]	@ (800e188 <sen5x_printvalues+0x198>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d013      	beq.n	800e026 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800dffe:	4b61      	ldr	r3, [pc, #388]	@ (800e184 <sen5x_printvalues+0x194>)
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	0018      	movs	r0, r3
 800e004:	f7f3 fc10 	bl	8001828 <__aeabi_i2f>
 800e008:	1c03      	adds	r3, r0, #0
 800e00a:	4960      	ldr	r1, [pc, #384]	@ (800e18c <sen5x_printvalues+0x19c>)
 800e00c:	1c18      	adds	r0, r3, #0
 800e00e:	f7f2 fe49 	bl	8000ca4 <__aeabi_fdiv>
 800e012:	1c03      	adds	r3, r0, #0
 800e014:	1c18      	adds	r0, r3, #0
 800e016:	f7f5 fc3d 	bl	8003894 <__aeabi_f2d>
 800e01a:	0002      	movs	r2, r0
 800e01c:	000b      	movs	r3, r1
 800e01e:	495c      	ldr	r1, [pc, #368]	@ (800e190 <sen5x_printvalues+0x1a0>)
 800e020:	0008      	movs	r0, r1
 800e022:	f017 f973 	bl	802530c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e026:	4b57      	ldr	r3, [pc, #348]	@ (800e184 <sen5x_printvalues+0x194>)
 800e028:	885b      	ldrh	r3, [r3, #2]
 800e02a:	4a57      	ldr	r2, [pc, #348]	@ (800e188 <sen5x_printvalues+0x198>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d013      	beq.n	800e058 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800e030:	4b54      	ldr	r3, [pc, #336]	@ (800e184 <sen5x_printvalues+0x194>)
 800e032:	885b      	ldrh	r3, [r3, #2]
 800e034:	0018      	movs	r0, r3
 800e036:	f7f3 fbf7 	bl	8001828 <__aeabi_i2f>
 800e03a:	1c03      	adds	r3, r0, #0
 800e03c:	4953      	ldr	r1, [pc, #332]	@ (800e18c <sen5x_printvalues+0x19c>)
 800e03e:	1c18      	adds	r0, r3, #0
 800e040:	f7f2 fe30 	bl	8000ca4 <__aeabi_fdiv>
 800e044:	1c03      	adds	r3, r0, #0
 800e046:	1c18      	adds	r0, r3, #0
 800e048:	f7f5 fc24 	bl	8003894 <__aeabi_f2d>
 800e04c:	0002      	movs	r2, r0
 800e04e:	000b      	movs	r3, r1
 800e050:	4950      	ldr	r1, [pc, #320]	@ (800e194 <sen5x_printvalues+0x1a4>)
 800e052:	0008      	movs	r0, r1
 800e054:	f017 f95a 	bl	802530c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e058:	4b4a      	ldr	r3, [pc, #296]	@ (800e184 <sen5x_printvalues+0x194>)
 800e05a:	889b      	ldrh	r3, [r3, #4]
 800e05c:	4a4a      	ldr	r2, [pc, #296]	@ (800e188 <sen5x_printvalues+0x198>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d013      	beq.n	800e08a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800e062:	4b48      	ldr	r3, [pc, #288]	@ (800e184 <sen5x_printvalues+0x194>)
 800e064:	889b      	ldrh	r3, [r3, #4]
 800e066:	0018      	movs	r0, r3
 800e068:	f7f3 fbde 	bl	8001828 <__aeabi_i2f>
 800e06c:	1c03      	adds	r3, r0, #0
 800e06e:	4947      	ldr	r1, [pc, #284]	@ (800e18c <sen5x_printvalues+0x19c>)
 800e070:	1c18      	adds	r0, r3, #0
 800e072:	f7f2 fe17 	bl	8000ca4 <__aeabi_fdiv>
 800e076:	1c03      	adds	r3, r0, #0
 800e078:	1c18      	adds	r0, r3, #0
 800e07a:	f7f5 fc0b 	bl	8003894 <__aeabi_f2d>
 800e07e:	0002      	movs	r2, r0
 800e080:	000b      	movs	r3, r1
 800e082:	4945      	ldr	r1, [pc, #276]	@ (800e198 <sen5x_printvalues+0x1a8>)
 800e084:	0008      	movs	r0, r1
 800e086:	f017 f941 	bl	802530c <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e08a:	4b3e      	ldr	r3, [pc, #248]	@ (800e184 <sen5x_printvalues+0x194>)
 800e08c:	88db      	ldrh	r3, [r3, #6]
 800e08e:	4a3e      	ldr	r2, [pc, #248]	@ (800e188 <sen5x_printvalues+0x198>)
 800e090:	4293      	cmp	r3, r2
 800e092:	d013      	beq.n	800e0bc <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800e094:	4b3b      	ldr	r3, [pc, #236]	@ (800e184 <sen5x_printvalues+0x194>)
 800e096:	88db      	ldrh	r3, [r3, #6]
 800e098:	0018      	movs	r0, r3
 800e09a:	f7f3 fbc5 	bl	8001828 <__aeabi_i2f>
 800e09e:	1c03      	adds	r3, r0, #0
 800e0a0:	493a      	ldr	r1, [pc, #232]	@ (800e18c <sen5x_printvalues+0x19c>)
 800e0a2:	1c18      	adds	r0, r3, #0
 800e0a4:	f7f2 fdfe 	bl	8000ca4 <__aeabi_fdiv>
 800e0a8:	1c03      	adds	r3, r0, #0
 800e0aa:	1c18      	adds	r0, r3, #0
 800e0ac:	f7f5 fbf2 	bl	8003894 <__aeabi_f2d>
 800e0b0:	0002      	movs	r2, r0
 800e0b2:	000b      	movs	r3, r1
 800e0b4:	4939      	ldr	r1, [pc, #228]	@ (800e19c <sen5x_printvalues+0x1ac>)
 800e0b6:	0008      	movs	r0, r1
 800e0b8:	f017 f928 	bl	802530c <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800e0bc:	4b31      	ldr	r3, [pc, #196]	@ (800e184 <sen5x_printvalues+0x194>)
 800e0be:	2208      	movs	r2, #8
 800e0c0:	5e9b      	ldrsh	r3, [r3, r2]
 800e0c2:	4a37      	ldr	r2, [pc, #220]	@ (800e1a0 <sen5x_printvalues+0x1b0>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d014      	beq.n	800e0f2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 800e0c8:	4b2e      	ldr	r3, [pc, #184]	@ (800e184 <sen5x_printvalues+0x194>)
 800e0ca:	2208      	movs	r2, #8
 800e0cc:	5e9b      	ldrsh	r3, [r3, r2]
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	f7f3 fbaa 	bl	8001828 <__aeabi_i2f>
 800e0d4:	1c03      	adds	r3, r0, #0
 800e0d6:	4933      	ldr	r1, [pc, #204]	@ (800e1a4 <sen5x_printvalues+0x1b4>)
 800e0d8:	1c18      	adds	r0, r3, #0
 800e0da:	f7f2 fde3 	bl	8000ca4 <__aeabi_fdiv>
 800e0de:	1c03      	adds	r3, r0, #0
 800e0e0:	1c18      	adds	r0, r3, #0
 800e0e2:	f7f5 fbd7 	bl	8003894 <__aeabi_f2d>
 800e0e6:	0002      	movs	r2, r0
 800e0e8:	000b      	movs	r3, r1
 800e0ea:	492f      	ldr	r1, [pc, #188]	@ (800e1a8 <sen5x_printvalues+0x1b8>)
 800e0ec:	0008      	movs	r0, r1
 800e0ee:	f017 f90d 	bl	802530c <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800e0f2:	4b24      	ldr	r3, [pc, #144]	@ (800e184 <sen5x_printvalues+0x194>)
 800e0f4:	220a      	movs	r2, #10
 800e0f6:	5e9b      	ldrsh	r3, [r3, r2]
 800e0f8:	4a29      	ldr	r2, [pc, #164]	@ (800e1a0 <sen5x_printvalues+0x1b0>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d014      	beq.n	800e128 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 800e0fe:	4b21      	ldr	r3, [pc, #132]	@ (800e184 <sen5x_printvalues+0x194>)
 800e100:	220a      	movs	r2, #10
 800e102:	5e9b      	ldrsh	r3, [r3, r2]
 800e104:	0018      	movs	r0, r3
 800e106:	f7f3 fb8f 	bl	8001828 <__aeabi_i2f>
 800e10a:	1c03      	adds	r3, r0, #0
 800e10c:	4927      	ldr	r1, [pc, #156]	@ (800e1ac <sen5x_printvalues+0x1bc>)
 800e10e:	1c18      	adds	r0, r3, #0
 800e110:	f7f2 fdc8 	bl	8000ca4 <__aeabi_fdiv>
 800e114:	1c03      	adds	r3, r0, #0
 800e116:	1c18      	adds	r0, r3, #0
 800e118:	f7f5 fbbc 	bl	8003894 <__aeabi_f2d>
 800e11c:	0002      	movs	r2, r0
 800e11e:	000b      	movs	r3, r1
 800e120:	4923      	ldr	r1, [pc, #140]	@ (800e1b0 <sen5x_printvalues+0x1c0>)
 800e122:	0008      	movs	r0, r1
 800e124:	f017 f8f2 	bl	802530c <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800e128:	4b16      	ldr	r3, [pc, #88]	@ (800e184 <sen5x_printvalues+0x194>)
 800e12a:	220c      	movs	r2, #12
 800e12c:	5e9b      	ldrsh	r3, [r3, r2]
 800e12e:	4a1c      	ldr	r2, [pc, #112]	@ (800e1a0 <sen5x_printvalues+0x1b0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d00e      	beq.n	800e152 <sen5x_printvalues+0x162>
        printf("sen55 VOC index: %d\r\n", sen5x_data.voc_index / 10);
 800e134:	4b13      	ldr	r3, [pc, #76]	@ (800e184 <sen5x_printvalues+0x194>)
 800e136:	220c      	movs	r2, #12
 800e138:	5e9b      	ldrsh	r3, [r3, r2]
 800e13a:	210a      	movs	r1, #10
 800e13c:	0018      	movs	r0, r3
 800e13e:	f7f2 f8bb 	bl	80002b8 <__divsi3>
 800e142:	0003      	movs	r3, r0
 800e144:	b21b      	sxth	r3, r3
 800e146:	001a      	movs	r2, r3
 800e148:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b4 <sen5x_printvalues+0x1c4>)
 800e14a:	0011      	movs	r1, r2
 800e14c:	0018      	movs	r0, r3
 800e14e:	f017 f8dd 	bl	802530c <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800e152:	4b0c      	ldr	r3, [pc, #48]	@ (800e184 <sen5x_printvalues+0x194>)
 800e154:	220e      	movs	r2, #14
 800e156:	5e9b      	ldrsh	r3, [r3, r2]
 800e158:	4a11      	ldr	r2, [pc, #68]	@ (800e1a0 <sen5x_printvalues+0x1b0>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d00e      	beq.n	800e17c <sen5x_printvalues+0x18c>
        printf("sen55 NOx index: %d\r\n", sen5x_data.nox_index / 10);
 800e15e:	4b09      	ldr	r3, [pc, #36]	@ (800e184 <sen5x_printvalues+0x194>)
 800e160:	220e      	movs	r2, #14
 800e162:	5e9b      	ldrsh	r3, [r3, r2]
 800e164:	210a      	movs	r1, #10
 800e166:	0018      	movs	r0, r3
 800e168:	f7f2 f8a6 	bl	80002b8 <__divsi3>
 800e16c:	0003      	movs	r3, r0
 800e16e:	b21b      	sxth	r3, r3
 800e170:	001a      	movs	r2, r3
 800e172:	4b11      	ldr	r3, [pc, #68]	@ (800e1b8 <sen5x_printvalues+0x1c8>)
 800e174:	0011      	movs	r1, r2
 800e176:	0018      	movs	r0, r3
 800e178:	f017 f8c8 	bl	802530c <iprintf>
  }
}
 800e17c:	46c0      	nop			@ (mov r8, r8)
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	46c0      	nop			@ (mov r8, r8)
 800e184:	20000ee4 	.word	0x20000ee4
 800e188:	0000ffff 	.word	0x0000ffff
 800e18c:	41200000 	.word	0x41200000
 800e190:	0802cc4c 	.word	0x0802cc4c
 800e194:	0802cc78 	.word	0x0802cc78
 800e198:	0802cca4 	.word	0x0802cca4
 800e19c:	0802ccd0 	.word	0x0802ccd0
 800e1a0:	00007fff 	.word	0x00007fff
 800e1a4:	42c80000 	.word	0x42c80000
 800e1a8:	0802ccfc 	.word	0x0802ccfc
 800e1ac:	43480000 	.word	0x43480000
 800e1b0:	0802cd20 	.word	0x0802cd20
 800e1b4:	0802cd48 	.word	0x0802cd48
 800e1b8:	0802cd60 	.word	0x0802cd60

0800e1bc <sen5xStore>:

void sen5xStore() {
 800e1bc:	b5b0      	push	{r4, r5, r7, lr}
 800e1be:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800e1c0:	4b41      	ldr	r3, [pc, #260]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1c2:	881b      	ldrh	r3, [r3, #0]
 800e1c4:	4a41      	ldr	r2, [pc, #260]	@ (800e2cc <sen5xStore+0x110>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d004      	beq.n	800e1d4 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800e1ca:	4b3f      	ldr	r3, [pc, #252]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	0018      	movs	r0, r3
 800e1d0:	f7f6 fd14 	bl	8004bfc <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800e1d4:	4b3c      	ldr	r3, [pc, #240]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1d6:	885b      	ldrh	r3, [r3, #2]
 800e1d8:	4a3c      	ldr	r2, [pc, #240]	@ (800e2cc <sen5xStore+0x110>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d004      	beq.n	800e1e8 <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800e1de:	4b3a      	ldr	r3, [pc, #232]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1e0:	885b      	ldrh	r3, [r3, #2]
 800e1e2:	0018      	movs	r0, r3
 800e1e4:	f7f6 fd36 	bl	8004c54 <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800e1e8:	4b37      	ldr	r3, [pc, #220]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1ea:	889b      	ldrh	r3, [r3, #4]
 800e1ec:	4a37      	ldr	r2, [pc, #220]	@ (800e2cc <sen5xStore+0x110>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d004      	beq.n	800e1fc <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800e1f2:	4b35      	ldr	r3, [pc, #212]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1f4:	889b      	ldrh	r3, [r3, #4]
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	f7f6 fd58 	bl	8004cac <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800e1fc:	4b32      	ldr	r3, [pc, #200]	@ (800e2c8 <sen5xStore+0x10c>)
 800e1fe:	88db      	ldrh	r3, [r3, #6]
 800e200:	4a32      	ldr	r2, [pc, #200]	@ (800e2cc <sen5xStore+0x110>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d004      	beq.n	800e210 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800e206:	4b30      	ldr	r3, [pc, #192]	@ (800e2c8 <sen5xStore+0x10c>)
 800e208:	88db      	ldrh	r3, [r3, #6]
 800e20a:	0018      	movs	r0, r3
 800e20c:	f7f6 fd7a 	bl	8004d04 <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800e210:	4b2f      	ldr	r3, [pc, #188]	@ (800e2d0 <sen5xStore+0x114>)
 800e212:	791b      	ldrb	r3, [r3, #4]
 800e214:	2b34      	cmp	r3, #52	@ 0x34
 800e216:	d003      	beq.n	800e220 <sen5xStore+0x64>
 800e218:	4b2d      	ldr	r3, [pc, #180]	@ (800e2d0 <sen5xStore+0x114>)
 800e21a:	791b      	ldrb	r3, [r3, #4]
 800e21c:	2b35      	cmp	r3, #53	@ 0x35
 800e21e:	d14f      	bne.n	800e2c0 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800e220:	4b29      	ldr	r3, [pc, #164]	@ (800e2c8 <sen5xStore+0x10c>)
 800e222:	220a      	movs	r2, #10
 800e224:	5e9b      	ldrsh	r3, [r3, r2]
 800e226:	0018      	movs	r0, r3
 800e228:	f7f3 fafe 	bl	8001828 <__aeabi_i2f>
 800e22c:	1c04      	adds	r4, r0, #0
 800e22e:	4b26      	ldr	r3, [pc, #152]	@ (800e2c8 <sen5xStore+0x10c>)
 800e230:	2208      	movs	r2, #8
 800e232:	5e9b      	ldrsh	r3, [r3, r2]
 800e234:	0018      	movs	r0, r3
 800e236:	f7f3 faf7 	bl	8001828 <__aeabi_i2f>
 800e23a:	1c03      	adds	r3, r0, #0
 800e23c:	1c19      	adds	r1, r3, #0
 800e23e:	1c20      	adds	r0, r4, #0
 800e240:	f7f6 fdaa 	bl	8004d98 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800e244:	4b23      	ldr	r3, [pc, #140]	@ (800e2d4 <sen5xStore+0x118>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	2201      	movs	r2, #1
 800e24a:	4053      	eors	r3, r2
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <sen5xStore+0x9e>
 800e252:	4b21      	ldr	r3, [pc, #132]	@ (800e2d8 <sen5xStore+0x11c>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d032      	beq.n	800e2c0 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800e25a:	4b1b      	ldr	r3, [pc, #108]	@ (800e2c8 <sen5xStore+0x10c>)
 800e25c:	220c      	movs	r2, #12
 800e25e:	5e9b      	ldrsh	r3, [r3, r2]
 800e260:	4a1e      	ldr	r2, [pc, #120]	@ (800e2dc <sen5xStore+0x120>)
 800e262:	4293      	cmp	r3, r2
 800e264:	d019      	beq.n	800e29a <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800e266:	4b18      	ldr	r3, [pc, #96]	@ (800e2c8 <sen5xStore+0x10c>)
 800e268:	220c      	movs	r2, #12
 800e26a:	5e9b      	ldrsh	r3, [r3, r2]
 800e26c:	210a      	movs	r1, #10
 800e26e:	0018      	movs	r0, r3
 800e270:	f7f2 f822 	bl	80002b8 <__divsi3>
 800e274:	0003      	movs	r3, r0
 800e276:	b21b      	sxth	r3, r3
 800e278:	b29b      	uxth	r3, r3
 800e27a:	0018      	movs	r0, r3
 800e27c:	f003 fee2 	bl	8012044 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800e280:	4b11      	ldr	r3, [pc, #68]	@ (800e2c8 <sen5xStore+0x10c>)
 800e282:	220c      	movs	r2, #12
 800e284:	5e9b      	ldrsh	r3, [r3, r2]
 800e286:	210a      	movs	r1, #10
 800e288:	0018      	movs	r0, r3
 800e28a:	f7f2 f815 	bl	80002b8 <__divsi3>
 800e28e:	0003      	movs	r3, r0
 800e290:	b21b      	sxth	r3, r3
 800e292:	b29b      	uxth	r3, r3
 800e294:	0018      	movs	r0, r3
 800e296:	f7f6 fbe3 	bl	8004a60 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800e29a:	4b0b      	ldr	r3, [pc, #44]	@ (800e2c8 <sen5xStore+0x10c>)
 800e29c:	220e      	movs	r2, #14
 800e29e:	5e9b      	ldrsh	r3, [r3, r2]
 800e2a0:	4a0e      	ldr	r2, [pc, #56]	@ (800e2dc <sen5xStore+0x120>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d00c      	beq.n	800e2c0 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800e2a6:	4b08      	ldr	r3, [pc, #32]	@ (800e2c8 <sen5xStore+0x10c>)
 800e2a8:	220e      	movs	r2, #14
 800e2aa:	5e9b      	ldrsh	r3, [r3, r2]
 800e2ac:	210a      	movs	r1, #10
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	f7f2 f802 	bl	80002b8 <__divsi3>
 800e2b4:	0003      	movs	r3, r0
 800e2b6:	b21b      	sxth	r3, r3
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f7f6 fd4e 	bl	8004d5c <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800e2c0:	46c0      	nop			@ (mov r8, r8)
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e2c6:	46c0      	nop			@ (mov r8, r8)
 800e2c8:	20000ee4 	.word	0x20000ee4
 800e2cc:	0000ffff 	.word	0x0000ffff
 800e2d0:	20000ed4 	.word	0x20000ed4
 800e2d4:	20000ed2 	.word	0x20000ed2
 800e2d8:	20001e61 	.word	0x20001e61
 800e2dc:	00007fff 	.word	0x00007fff

0800e2e0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800e2e0:	b590      	push	{r4, r7, lr}
 800e2e2:	b085      	sub	sp, #20
 800e2e4:	af02      	add	r7, sp, #8
 800e2e6:	6039      	str	r1, [r7, #0]
 800e2e8:	0011      	movs	r1, r2
 800e2ea:	1dfb      	adds	r3, r7, #7
 800e2ec:	1c02      	adds	r2, r0, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	1d3b      	adds	r3, r7, #4
 800e2f2:	1c0a      	adds	r2, r1, #0
 800e2f4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800e2f6:	1dfb      	adds	r3, r7, #7
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	18db      	adds	r3, r3, r3
 800e2fe:	b299      	uxth	r1, r3
 800e300:	1d3b      	adds	r3, r7, #4
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	4805      	ldr	r0, [pc, #20]	@ (800e31c <sensirion_i2c_hal_read+0x3c>)
 800e308:	2464      	movs	r4, #100	@ 0x64
 800e30a:	9400      	str	r4, [sp, #0]
 800e30c:	f007 f8aa 	bl	8015464 <HAL_I2C_Master_Receive>
 800e310:	0003      	movs	r3, r0
 800e312:	b25b      	sxtb	r3, r3
}
 800e314:	0018      	movs	r0, r3
 800e316:	46bd      	mov	sp, r7
 800e318:	b003      	add	sp, #12
 800e31a:	bd90      	pop	{r4, r7, pc}
 800e31c:	20000ca8 	.word	0x20000ca8

0800e320 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800e320:	b590      	push	{r4, r7, lr}
 800e322:	b085      	sub	sp, #20
 800e324:	af02      	add	r7, sp, #8
 800e326:	6039      	str	r1, [r7, #0]
 800e328:	0011      	movs	r1, r2
 800e32a:	1dfb      	adds	r3, r7, #7
 800e32c:	1c02      	adds	r2, r0, #0
 800e32e:	701a      	strb	r2, [r3, #0]
 800e330:	1d3b      	adds	r3, r7, #4
 800e332:	1c0a      	adds	r2, r1, #0
 800e334:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800e336:	1dfb      	adds	r3, r7, #7
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	18db      	adds	r3, r3, r3
 800e33e:	b299      	uxth	r1, r3
 800e340:	1d3b      	adds	r3, r7, #4
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	4805      	ldr	r0, [pc, #20]	@ (800e35c <sensirion_i2c_hal_write+0x3c>)
 800e348:	2464      	movs	r4, #100	@ 0x64
 800e34a:	9400      	str	r4, [sp, #0]
 800e34c:	f006 ff82 	bl	8015254 <HAL_I2C_Master_Transmit>
 800e350:	0003      	movs	r3, r0
 800e352:	b25b      	sxtb	r3, r3
}
 800e354:	0018      	movs	r0, r3
 800e356:	46bd      	mov	sp, r7
 800e358:	b003      	add	sp, #12
 800e35a:	bd90      	pop	{r4, r7, pc}
 800e35c:	20000ca8 	.word	0x20000ca8

0800e360 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	22fa      	movs	r2, #250	@ 0xfa
 800e36c:	0091      	lsls	r1, r2, #2
 800e36e:	0018      	movs	r0, r3
 800e370:	f7f1 ff18 	bl	80001a4 <__udivsi3>
 800e374:	0003      	movs	r3, r0
 800e376:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	22fa      	movs	r2, #250	@ 0xfa
 800e37c:	0091      	lsls	r1, r2, #2
 800e37e:	0018      	movs	r0, r3
 800e380:	f7f1 ff96 	bl	80002b0 <__aeabi_uidivmod>
 800e384:	1e0b      	subs	r3, r1, #0
 800e386:	d002      	beq.n	800e38e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	3301      	adds	r3, #1
 800e38c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	0018      	movs	r0, r3
 800e392:	f005 fc09 	bl	8013ba8 <HAL_Delay>
}
 800e396:	46c0      	nop			@ (mov r8, r8)
 800e398:	46bd      	mov	sp, r7
 800e39a:	b004      	add	sp, #16
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800e3a6:	1d3b      	adds	r3, r7, #4
 800e3a8:	0018      	movs	r0, r3
 800e3aa:	f000 fd2b 	bl	800ee04 <sen5x_read_device_status>
 800e3ae:	0003      	movs	r3, r0
 800e3b0:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a2c      	ldr	r2, [pc, #176]	@ (800e468 <sen5x_check_for_errors+0xc8>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d107      	bne.n	800e3ca <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800e3ba:	4a2c      	ldr	r2, [pc, #176]	@ (800e46c <sen5x_check_for_errors+0xcc>)
 800e3bc:	4b2c      	ldr	r3, [pc, #176]	@ (800e470 <sen5x_check_for_errors+0xd0>)
 800e3be:	0019      	movs	r1, r3
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f004 fea7 	bl	8013114 <CreateLine>
    return true;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e049      	b.n	800e45e <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d101      	bne.n	800e3d4 <sen5x_check_for_errors+0x34>
    return false;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	e044      	b.n	800e45e <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	2380      	movs	r3, #128	@ 0x80
 800e3d8:	039b      	lsls	r3, r3, #14
 800e3da:	4013      	ands	r3, r2
 800e3dc:	d005      	beq.n	800e3ea <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800e3de:	4a25      	ldr	r2, [pc, #148]	@ (800e474 <sen5x_check_for_errors+0xd4>)
 800e3e0:	4b25      	ldr	r3, [pc, #148]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e3e2:	0019      	movs	r1, r3
 800e3e4:	2003      	movs	r0, #3
 800e3e6:	f004 fe95 	bl	8013114 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	2380      	movs	r3, #128	@ 0x80
 800e3ee:	031b      	lsls	r3, r3, #12
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	d005      	beq.n	800e400 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800e3f4:	4a21      	ldr	r2, [pc, #132]	@ (800e47c <sen5x_check_for_errors+0xdc>)
 800e3f6:	4b20      	ldr	r3, [pc, #128]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e3f8:	0019      	movs	r1, r3
 800e3fa:	2003      	movs	r0, #3
 800e3fc:	f004 fe8a 	bl	8013114 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2280      	movs	r2, #128	@ 0x80
 800e404:	4013      	ands	r3, r2
 800e406:	d005      	beq.n	800e414 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800e408:	4a1d      	ldr	r2, [pc, #116]	@ (800e480 <sen5x_check_for_errors+0xe0>)
 800e40a:	4b1b      	ldr	r3, [pc, #108]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e40c:	0019      	movs	r1, r3
 800e40e:	2003      	movs	r0, #3
 800e410:	f004 fe80 	bl	8013114 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2240      	movs	r2, #64	@ 0x40
 800e418:	4013      	ands	r3, r2
 800e41a:	d005      	beq.n	800e428 <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800e41c:	4a19      	ldr	r2, [pc, #100]	@ (800e484 <sen5x_check_for_errors+0xe4>)
 800e41e:	4b16      	ldr	r3, [pc, #88]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e420:	0019      	movs	r1, r3
 800e422:	2003      	movs	r0, #3
 800e424:	f004 fe76 	bl	8013114 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2220      	movs	r2, #32
 800e42c:	4013      	ands	r3, r2
 800e42e:	d005      	beq.n	800e43c <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800e430:	4a15      	ldr	r2, [pc, #84]	@ (800e488 <sen5x_check_for_errors+0xe8>)
 800e432:	4b11      	ldr	r3, [pc, #68]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e434:	0019      	movs	r1, r3
 800e436:	2003      	movs	r0, #3
 800e438:	f004 fe6c 	bl	8013114 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2210      	movs	r2, #16
 800e440:	4013      	ands	r3, r2
 800e442:	d005      	beq.n	800e450 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800e444:	4a11      	ldr	r2, [pc, #68]	@ (800e48c <sen5x_check_for_errors+0xec>)
 800e446:	4b0c      	ldr	r3, [pc, #48]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e448:	0019      	movs	r1, r3
 800e44a:	2003      	movs	r0, #3
 800e44c:	f004 fe62 	bl	8013114 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4a0f      	ldr	r2, [pc, #60]	@ (800e490 <sen5x_check_for_errors+0xf0>)
 800e454:	4908      	ldr	r1, [pc, #32]	@ (800e478 <sen5x_check_for_errors+0xd8>)
 800e456:	2003      	movs	r0, #3
 800e458:	f004 fe5c 	bl	8013114 <CreateLine>
  return true;
 800e45c:	2301      	movs	r3, #1
}
 800e45e:	0018      	movs	r0, r3
 800e460:	46bd      	mov	sp, r7
 800e462:	b002      	add	sp, #8
 800e464:	bd80      	pop	{r7, pc}
 800e466:	46c0      	nop			@ (mov r8, r8)
 800e468:	0000d206 	.word	0x0000d206
 800e46c:	0802cd78 	.word	0x0802cd78
 800e470:	0802c8fc 	.word	0x0802c8fc
 800e474:	0802cdb8 	.word	0x0802cdb8
 800e478:	0802c8d0 	.word	0x0802c8d0
 800e47c:	0802cdd8 	.word	0x0802cdd8
 800e480:	0802cdf4 	.word	0x0802cdf4
 800e484:	0802ce18 	.word	0x0802ce18
 800e488:	0802ce38 	.word	0x0802ce38
 800e48c:	0802ce4c 	.word	0x0802ce4c
 800e490:	0802ce88 	.word	0x0802ce88

0800e494 <set_light_on_state>:

void set_light_on_state(void) {
 800e494:	b580      	push	{r7, lr}
 800e496:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800e498:	4b15      	ldr	r3, [pc, #84]	@ (800e4f0 <set_light_on_state+0x5c>)
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	2201      	movs	r2, #1
 800e49e:	4053      	eors	r3, r2
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d008      	beq.n	800e4b8 <set_light_on_state+0x24>
    sen5x_Power_On();
 800e4a6:	f7ff fb11 	bl	800dacc <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800e4aa:	4a12      	ldr	r2, [pc, #72]	@ (800e4f4 <set_light_on_state+0x60>)
 800e4ac:	4b12      	ldr	r3, [pc, #72]	@ (800e4f8 <set_light_on_state+0x64>)
 800e4ae:	0019      	movs	r1, r3
 800e4b0:	2003      	movs	r0, #3
 800e4b2:	f004 fe2f 	bl	8013114 <CreateLine>
 800e4b6:	e00a      	b.n	800e4ce <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800e4b8:	f005 fb6c 	bl	8013b94 <HAL_GetTick>
 800e4bc:	0002      	movs	r2, r0
 800e4be:	4b0f      	ldr	r3, [pc, #60]	@ (800e4fc <set_light_on_state+0x68>)
 800e4c0:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800e4c2:	4a0f      	ldr	r2, [pc, #60]	@ (800e500 <set_light_on_state+0x6c>)
 800e4c4:	4b0c      	ldr	r3, [pc, #48]	@ (800e4f8 <set_light_on_state+0x64>)
 800e4c6:	0019      	movs	r1, r3
 800e4c8:	2003      	movs	r0, #3
 800e4ca:	f004 fe23 	bl	8013114 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800e4ce:	f7ff fc8d 	bl	800ddec <sen5x_lightup_measurement>
 800e4d2:	1e03      	subs	r3, r0, #0
 800e4d4:	d005      	beq.n	800e4e2 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800e4d6:	4a0b      	ldr	r2, [pc, #44]	@ (800e504 <set_light_on_state+0x70>)
 800e4d8:	4b0b      	ldr	r3, [pc, #44]	@ (800e508 <set_light_on_state+0x74>)
 800e4da:	0019      	movs	r1, r3
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f004 fe19 	bl	8013114 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800e4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e50c <set_light_on_state+0x78>)
 800e4e4:	2203      	movs	r2, #3
 800e4e6:	701a      	strb	r2, [r3, #0]
}
 800e4e8:	46c0      	nop			@ (mov r8, r8)
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	46c0      	nop			@ (mov r8, r8)
 800e4f0:	20000ed1 	.word	0x20000ed1
 800e4f4:	0802ceb8 	.word	0x0802ceb8
 800e4f8:	0802c8d0 	.word	0x0802c8d0
 800e4fc:	20000ee0 	.word	0x20000ee0
 800e500:	0802ced8 	.word	0x0802ced8
 800e504:	0802cef0 	.word	0x0802cef0
 800e508:	0802c8fc 	.word	0x0802c8fc
 800e50c:	2000009e 	.word	0x2000009e

0800e510 <sen5x_statemachine>:

void sen5x_statemachine() {
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800e516:	1dfb      	adds	r3, r7, #7
 800e518:	2200      	movs	r2, #0
 800e51a:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800e51c:	4b92      	ldr	r3, [pc, #584]	@ (800e768 <sen5x_statemachine+0x258>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	0018      	movs	r0, r3
 800e522:	f004 fda1 	bl	8013068 <TimestampIsReached>
 800e526:	1e03      	subs	r3, r0, #0
 800e528:	d100      	bne.n	800e52c <sen5x_statemachine+0x1c>
 800e52a:	e118      	b.n	800e75e <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800e52c:	4b8f      	ldr	r3, [pc, #572]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b05      	cmp	r3, #5
 800e532:	d900      	bls.n	800e536 <sen5x_statemachine+0x26>
 800e534:	e113      	b.n	800e75e <sen5x_statemachine+0x24e>
 800e536:	009a      	lsls	r2, r3, #2
 800e538:	4b8d      	ldr	r3, [pc, #564]	@ (800e770 <sen5x_statemachine+0x260>)
 800e53a:	18d3      	adds	r3, r2, r3
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800e540:	4a8c      	ldr	r2, [pc, #560]	@ (800e774 <sen5x_statemachine+0x264>)
 800e542:	4b8d      	ldr	r3, [pc, #564]	@ (800e778 <sen5x_statemachine+0x268>)
 800e544:	0019      	movs	r1, r3
 800e546:	2001      	movs	r0, #1
 800e548:	f004 fde4 	bl	8013114 <CreateLine>
      SetPMSensorStatus(false);
 800e54c:	2000      	movs	r0, #0
 800e54e:	f7fe fa57 	bl	800ca00 <SetPMSensorStatus>
      DisablePMSensor();
 800e552:	f7fe f9d9 	bl	800c908 <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800e556:	f005 fb1d 	bl	8013b94 <HAL_GetTick>
 800e55a:	0003      	movs	r3, r0
 800e55c:	4a87      	ldr	r2, [pc, #540]	@ (800e77c <sen5x_statemachine+0x26c>)
 800e55e:	189a      	adds	r2, r3, r2
 800e560:	4b81      	ldr	r3, [pc, #516]	@ (800e768 <sen5x_statemachine+0x258>)
 800e562:	601a      	str	r2, [r3, #0]
      break;
 800e564:	e0fb      	b.n	800e75e <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e566:	f005 fb15 	bl	8013b94 <HAL_GetTick>
 800e56a:	0003      	movs	r3, r0
 800e56c:	4a84      	ldr	r2, [pc, #528]	@ (800e780 <sen5x_statemachine+0x270>)
 800e56e:	189a      	adds	r2, r3, r2
 800e570:	4b7d      	ldr	r3, [pc, #500]	@ (800e768 <sen5x_statemachine+0x258>)
 800e572:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800e574:	f7ff ff8e 	bl	800e494 <set_light_on_state>
      break;
 800e578:	e0f1      	b.n	800e75e <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800e57a:	4b7c      	ldr	r3, [pc, #496]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e57c:	2202      	movs	r2, #2
 800e57e:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800e580:	4b80      	ldr	r3, [pc, #512]	@ (800e784 <sen5x_statemachine+0x274>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	2b05      	cmp	r3, #5
 800e586:	d905      	bls.n	800e594 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800e588:	4b78      	ldr	r3, [pc, #480]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e58e:	f7ff facd 	bl	800db2c <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800e592:	e0e1      	b.n	800e758 <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800e594:	f7ff ff04 	bl	800e3a0 <sen5x_check_for_errors>
 800e598:	1e03      	subs	r3, r0, #0
 800e59a:	d028      	beq.n	800e5ee <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800e59c:	f000 fc84 	bl	800eea8 <sen5x_device_reset>
 800e5a0:	1e03      	subs	r3, r0, #0
 800e5a2:	d018      	beq.n	800e5d6 <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800e5a4:	4a78      	ldr	r2, [pc, #480]	@ (800e788 <sen5x_statemachine+0x278>)
 800e5a6:	4b74      	ldr	r3, [pc, #464]	@ (800e778 <sen5x_statemachine+0x268>)
 800e5a8:	0019      	movs	r1, r3
 800e5aa:	2001      	movs	r0, #1
 800e5ac:	f004 fdb2 	bl	8013114 <CreateLine>
            sen5xErrors++;
 800e5b0:	4b74      	ldr	r3, [pc, #464]	@ (800e784 <sen5x_statemachine+0x274>)
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	4b72      	ldr	r3, [pc, #456]	@ (800e784 <sen5x_statemachine+0x274>)
 800e5ba:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800e5bc:	f7ff fab6 	bl	800db2c <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e5c0:	f005 fae8 	bl	8013b94 <HAL_GetTick>
 800e5c4:	0003      	movs	r3, r0
 800e5c6:	4a6e      	ldr	r2, [pc, #440]	@ (800e780 <sen5x_statemachine+0x270>)
 800e5c8:	189a      	adds	r2, r3, r2
 800e5ca:	4b67      	ldr	r3, [pc, #412]	@ (800e768 <sen5x_statemachine+0x258>)
 800e5cc:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800e5ce:	4b67      	ldr	r3, [pc, #412]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e5d0:	2205      	movs	r2, #5
 800e5d2:	701a      	strb	r2, [r3, #0]
 800e5d4:	e005      	b.n	800e5e2 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800e5d6:	4a6d      	ldr	r2, [pc, #436]	@ (800e78c <sen5x_statemachine+0x27c>)
 800e5d8:	4b6d      	ldr	r3, [pc, #436]	@ (800e790 <sen5x_statemachine+0x280>)
 800e5da:	0019      	movs	r1, r3
 800e5dc:	2002      	movs	r0, #2
 800e5de:	f004 fd99 	bl	8013114 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800e5e2:	f005 fad7 	bl	8013b94 <HAL_GetTick>
 800e5e6:	0002      	movs	r2, r0
 800e5e8:	4b5f      	ldr	r3, [pc, #380]	@ (800e768 <sen5x_statemachine+0x258>)
 800e5ea:	601a      	str	r2, [r3, #0]
      break;
 800e5ec:	e0b4      	b.n	800e758 <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800e5ee:	4b65      	ldr	r3, [pc, #404]	@ (800e784 <sen5x_statemachine+0x274>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d100      	bne.n	800e5f8 <sen5x_statemachine+0xe8>
 800e5f6:	e0af      	b.n	800e758 <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800e5f8:	4b62      	ldr	r3, [pc, #392]	@ (800e784 <sen5x_statemachine+0x274>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800e5fe:	4a65      	ldr	r2, [pc, #404]	@ (800e794 <sen5x_statemachine+0x284>)
 800e600:	4b65      	ldr	r3, [pc, #404]	@ (800e798 <sen5x_statemachine+0x288>)
 800e602:	0019      	movs	r1, r3
 800e604:	2003      	movs	r0, #3
 800e606:	f004 fd85 	bl	8013114 <CreateLine>
      break;
 800e60a:	e0a5      	b.n	800e758 <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800e60c:	1dfb      	adds	r3, r7, #7
 800e60e:	0018      	movs	r0, r3
 800e610:	f000 f966 	bl	800e8e0 <sen5x_read_data_ready>
      if (data_ready) {
 800e614:	1dfb      	adds	r3, r7, #7
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d038      	beq.n	800e68e <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800e61c:	f003 fc10 	bl	8011e40 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800e620:	4b5e      	ldr	r3, [pc, #376]	@ (800e79c <sen5x_statemachine+0x28c>)
 800e622:	0018      	movs	r0, r3
 800e624:	f7ff fc88 	bl	800df38 <sen5x_read_measurement>
 800e628:	1e03      	subs	r3, r0, #0
 800e62a:	d017      	beq.n	800e65c <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800e62c:	4a5c      	ldr	r2, [pc, #368]	@ (800e7a0 <sen5x_statemachine+0x290>)
 800e62e:	4b52      	ldr	r3, [pc, #328]	@ (800e778 <sen5x_statemachine+0x268>)
 800e630:	0019      	movs	r1, r3
 800e632:	2001      	movs	r0, #1
 800e634:	f004 fd6e 	bl	8013114 <CreateLine>
          sen5xErrors++;
 800e638:	4b52      	ldr	r3, [pc, #328]	@ (800e784 <sen5x_statemachine+0x274>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	3301      	adds	r3, #1
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	4b50      	ldr	r3, [pc, #320]	@ (800e784 <sen5x_statemachine+0x274>)
 800e642:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800e644:	f7ff fa72 	bl	800db2c <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800e648:	f005 faa4 	bl	8013b94 <HAL_GetTick>
 800e64c:	0003      	movs	r3, r0
 800e64e:	4a4c      	ldr	r2, [pc, #304]	@ (800e780 <sen5x_statemachine+0x270>)
 800e650:	189a      	adds	r2, r3, r2
 800e652:	4b45      	ldr	r3, [pc, #276]	@ (800e768 <sen5x_statemachine+0x258>)
 800e654:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800e656:	4b45      	ldr	r3, [pc, #276]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e658:	2205      	movs	r2, #5
 800e65a:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800e65c:	4b51      	ldr	r3, [pc, #324]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	3301      	adds	r3, #1
 800e662:	b2da      	uxtb	r2, r3
 800e664:	4b4f      	ldr	r3, [pc, #316]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e666:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800e668:	4b4e      	ldr	r3, [pc, #312]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	2b1f      	cmp	r3, #31
 800e66e:	d102      	bne.n	800e676 <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800e670:	4b4c      	ldr	r3, [pc, #304]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e672:	2200      	movs	r2, #0
 800e674:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800e676:	4b4b      	ldr	r3, [pc, #300]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d901      	bls.n	800e682 <sen5x_statemachine+0x172>
          sen5xStore();
 800e67e:	f7ff fd9d 	bl	800e1bc <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800e682:	4b48      	ldr	r3, [pc, #288]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d101      	bne.n	800e68e <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800e68a:	f7ff fcb1 	bl	800dff0 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800e68e:	4b46      	ldr	r3, [pc, #280]	@ (800e7a8 <sen5x_statemachine+0x298>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d103      	bne.n	800e69e <sen5x_statemachine+0x18e>
 800e696:	4b43      	ldr	r3, [pc, #268]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d95e      	bls.n	800e75c <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800e69e:	4b33      	ldr	r3, [pc, #204]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e6a0:	2204      	movs	r2, #4
 800e6a2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e6a4:	e05a      	b.n	800e75c <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800e6a6:	4b41      	ldr	r3, [pc, #260]	@ (800e7ac <sen5x_statemachine+0x29c>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d11e      	bne.n	800e6ec <sen5x_statemachine+0x1dc>
 800e6ae:	4b40      	ldr	r3, [pc, #256]	@ (800e7b0 <sen5x_statemachine+0x2a0>)
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d11a      	bne.n	800e6ec <sen5x_statemachine+0x1dc>
 800e6b6:	4b3f      	ldr	r3, [pc, #252]	@ (800e7b4 <sen5x_statemachine+0x2a4>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	4053      	eors	r3, r2
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d013      	beq.n	800e6ec <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800e6c4:	f000 f9f2 	bl	800eaac <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800e6c8:	4a3b      	ldr	r2, [pc, #236]	@ (800e7b8 <sen5x_statemachine+0x2a8>)
 800e6ca:	4b31      	ldr	r3, [pc, #196]	@ (800e790 <sen5x_statemachine+0x280>)
 800e6cc:	0019      	movs	r1, r3
 800e6ce:	2002      	movs	r0, #2
 800e6d0:	f004 fd20 	bl	8013114 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800e6d4:	f005 fa5e 	bl	8013b94 <HAL_GetTick>
 800e6d8:	0003      	movs	r3, r0
 800e6da:	4a38      	ldr	r2, [pc, #224]	@ (800e7bc <sen5x_statemachine+0x2ac>)
 800e6dc:	189a      	adds	r2, r3, r2
 800e6de:	4b22      	ldr	r3, [pc, #136]	@ (800e768 <sen5x_statemachine+0x258>)
 800e6e0:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800e6e2:	4b34      	ldr	r3, [pc, #208]	@ (800e7b4 <sen5x_statemachine+0x2a4>)
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800e6e8:	f7ff fb80 	bl	800ddec <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800e6ec:	4b1f      	ldr	r3, [pc, #124]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e6ee:	2205      	movs	r2, #5
 800e6f0:	701a      	strb	r2, [r3, #0]
      break;
 800e6f2:	e034      	b.n	800e75e <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800e6f4:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a8 <sen5x_statemachine+0x298>)
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	4053      	eors	r3, r2
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d01c      	beq.n	800e73c <sen5x_statemachine+0x22c>
 800e702:	4b2f      	ldr	r3, [pc, #188]	@ (800e7c0 <sen5x_statemachine+0x2b0>)
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2201      	movs	r2, #1
 800e708:	4053      	eors	r3, r2
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d015      	beq.n	800e73c <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800e710:	f7ff fbb8 	bl	800de84 <sen5x_extinguish_measurement>
 800e714:	1e03      	subs	r3, r0, #0
 800e716:	d005      	beq.n	800e724 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800e718:	4a2a      	ldr	r2, [pc, #168]	@ (800e7c4 <sen5x_statemachine+0x2b4>)
 800e71a:	4b17      	ldr	r3, [pc, #92]	@ (800e778 <sen5x_statemachine+0x268>)
 800e71c:	0019      	movs	r1, r3
 800e71e:	2001      	movs	r0, #1
 800e720:	f004 fcf8 	bl	8013114 <CreateLine>
        }
        sen5xSamples = 0;
 800e724:	4b1f      	ldr	r3, [pc, #124]	@ (800e7a4 <sen5x_statemachine+0x294>)
 800e726:	2200      	movs	r2, #0
 800e728:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800e72a:	f7ff f9ff 	bl	800db2c <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800e72e:	2000      	movs	r0, #0
 800e730:	f7fe f966 	bl	800ca00 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800e734:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e736:	2201      	movs	r2, #1
 800e738:	701a      	strb	r2, [r3, #0]
 800e73a:	e002      	b.n	800e742 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800e73c:	4b0b      	ldr	r3, [pc, #44]	@ (800e76c <sen5x_statemachine+0x25c>)
 800e73e:	2203      	movs	r2, #3
 800e740:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800e742:	f003 fba3 	bl	8011e8c <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800e746:	f005 fa25 	bl	8013b94 <HAL_GetTick>
 800e74a:	0003      	movs	r3, r0
 800e74c:	22fa      	movs	r2, #250	@ 0xfa
 800e74e:	0092      	lsls	r2, r2, #2
 800e750:	189a      	adds	r2, r3, r2
 800e752:	4b05      	ldr	r3, [pc, #20]	@ (800e768 <sen5x_statemachine+0x258>)
 800e754:	601a      	str	r2, [r3, #0]
    }
  }
}
 800e756:	e002      	b.n	800e75e <sen5x_statemachine+0x24e>
      break;
 800e758:	46c0      	nop			@ (mov r8, r8)
 800e75a:	e000      	b.n	800e75e <sen5x_statemachine+0x24e>
      break;
 800e75c:	46c0      	nop			@ (mov r8, r8)
}
 800e75e:	46c0      	nop			@ (mov r8, r8)
 800e760:	46bd      	mov	sp, r7
 800e762:	b002      	add	sp, #8
 800e764:	bd80      	pop	{r7, pc}
 800e766:	46c0      	nop			@ (mov r8, r8)
 800e768:	20000ee0 	.word	0x20000ee0
 800e76c:	2000009e 	.word	0x2000009e
 800e770:	0802d9f4 	.word	0x0802d9f4
 800e774:	0802cf1c 	.word	0x0802cf1c
 800e778:	0802c8fc 	.word	0x0802c8fc
 800e77c:	002fefd8 	.word	0x002fefd8
 800e780:	00005910 	.word	0x00005910
 800e784:	20000edd 	.word	0x20000edd
 800e788:	0802cf4c 	.word	0x0802cf4c
 800e78c:	0802cf64 	.word	0x0802cf64
 800e790:	0802c890 	.word	0x0802c890
 800e794:	0802cf7c 	.word	0x0802cf7c
 800e798:	0802c8d0 	.word	0x0802c8d0
 800e79c:	20000ee4 	.word	0x20000ee4
 800e7a0:	0802cf90 	.word	0x0802cf90
 800e7a4:	20000edc 	.word	0x20000edc
 800e7a8:	20001e61 	.word	0x20001e61
 800e7ac:	20000b61 	.word	0x20000b61
 800e7b0:	20000b60 	.word	0x20000b60
 800e7b4:	20000ed0 	.word	0x20000ed0
 800e7b8:	0802cfc0 	.word	0x0802cfc0
 800e7bc:	00002710 	.word	0x00002710
 800e7c0:	20001e62 	.word	0x20001e62
 800e7c4:	0802cfd8 	.word	0x0802cfd8

0800e7c8 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800e7c8:	b590      	push	{r4, r7, lr}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e7ce:	1dbb      	adds	r3, r7, #6
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800e7d4:	1dbc      	adds	r4, r7, #6
 800e7d6:	1dbb      	adds	r3, r7, #6
 800e7d8:	8819      	ldrh	r1, [r3, #0]
 800e7da:	003b      	movs	r3, r7
 800e7dc:	2221      	movs	r2, #33	@ 0x21
 800e7de:	0018      	movs	r0, r3
 800e7e0:	f001 fb57 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800e7e4:	0003      	movs	r3, r0
 800e7e6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e7e8:	1d3c      	adds	r4, r7, #4
 800e7ea:	1dbb      	adds	r3, r7, #6
 800e7ec:	881a      	ldrh	r2, [r3, #0]
 800e7ee:	003b      	movs	r3, r7
 800e7f0:	0019      	movs	r1, r3
 800e7f2:	2069      	movs	r0, #105	@ 0x69
 800e7f4:	f001 fbd1 	bl	800ff9a <sensirion_i2c_write_data>
 800e7f8:	0003      	movs	r3, r0
 800e7fa:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e7fc:	1d3b      	adds	r3, r7, #4
 800e7fe:	2200      	movs	r2, #0
 800e800:	5e9b      	ldrsh	r3, [r3, r2]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <sen5x_start_measurement+0x46>
        return error;
 800e806:	1d3b      	adds	r3, r7, #4
 800e808:	2200      	movs	r2, #0
 800e80a:	5e9b      	ldrsh	r3, [r3, r2]
 800e80c:	e004      	b.n	800e818 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e80e:	4b04      	ldr	r3, [pc, #16]	@ (800e820 <sen5x_start_measurement+0x58>)
 800e810:	0018      	movs	r0, r3
 800e812:	f7ff fda5 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e816:	2300      	movs	r3, #0
}
 800e818:	0018      	movs	r0, r3
 800e81a:	46bd      	mov	sp, r7
 800e81c:	b003      	add	sp, #12
 800e81e:	bd90      	pop	{r4, r7, pc}
 800e820:	0000c350 	.word	0x0000c350

0800e824 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e82a:	1dbb      	adds	r3, r7, #6
 800e82c:	2200      	movs	r2, #0
 800e82e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800e830:	1dbc      	adds	r4, r7, #6
 800e832:	1dbb      	adds	r3, r7, #6
 800e834:	8819      	ldrh	r1, [r3, #0]
 800e836:	003b      	movs	r3, r7
 800e838:	2237      	movs	r2, #55	@ 0x37
 800e83a:	0018      	movs	r0, r3
 800e83c:	f001 fb29 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800e840:	0003      	movs	r3, r0
 800e842:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e844:	1d3c      	adds	r4, r7, #4
 800e846:	1dbb      	adds	r3, r7, #6
 800e848:	881a      	ldrh	r2, [r3, #0]
 800e84a:	003b      	movs	r3, r7
 800e84c:	0019      	movs	r1, r3
 800e84e:	2069      	movs	r0, #105	@ 0x69
 800e850:	f001 fba3 	bl	800ff9a <sensirion_i2c_write_data>
 800e854:	0003      	movs	r3, r0
 800e856:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e858:	1d3b      	adds	r3, r7, #4
 800e85a:	2200      	movs	r2, #0
 800e85c:	5e9b      	ldrsh	r3, [r3, r2]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <sen5x_start_measurement_without_pm+0x46>
        return error;
 800e862:	1d3b      	adds	r3, r7, #4
 800e864:	2200      	movs	r2, #0
 800e866:	5e9b      	ldrsh	r3, [r3, r2]
 800e868:	e004      	b.n	800e874 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800e86a:	4b04      	ldr	r3, [pc, #16]	@ (800e87c <sen5x_start_measurement_without_pm+0x58>)
 800e86c:	0018      	movs	r0, r3
 800e86e:	f7ff fd77 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e872:	2300      	movs	r3, #0
}
 800e874:	0018      	movs	r0, r3
 800e876:	46bd      	mov	sp, r7
 800e878:	b003      	add	sp, #12
 800e87a:	bd90      	pop	{r4, r7, pc}
 800e87c:	0000c350 	.word	0x0000c350

0800e880 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800e880:	b590      	push	{r4, r7, lr}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800e886:	1dbb      	adds	r3, r7, #6
 800e888:	2200      	movs	r2, #0
 800e88a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800e88c:	1dbc      	adds	r4, r7, #6
 800e88e:	2382      	movs	r3, #130	@ 0x82
 800e890:	005a      	lsls	r2, r3, #1
 800e892:	1dbb      	adds	r3, r7, #6
 800e894:	8819      	ldrh	r1, [r3, #0]
 800e896:	003b      	movs	r3, r7
 800e898:	0018      	movs	r0, r3
 800e89a:	f001 fafa 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800e89e:	0003      	movs	r3, r0
 800e8a0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e8a2:	1d3c      	adds	r4, r7, #4
 800e8a4:	1dbb      	adds	r3, r7, #6
 800e8a6:	881a      	ldrh	r2, [r3, #0]
 800e8a8:	003b      	movs	r3, r7
 800e8aa:	0019      	movs	r1, r3
 800e8ac:	2069      	movs	r0, #105	@ 0x69
 800e8ae:	f001 fb74 	bl	800ff9a <sensirion_i2c_write_data>
 800e8b2:	0003      	movs	r3, r0
 800e8b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e8b6:	1d3b      	adds	r3, r7, #4
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	5e9b      	ldrsh	r3, [r3, r2]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d003      	beq.n	800e8c8 <sen5x_stop_measurement+0x48>
        return error;
 800e8c0:	1d3b      	adds	r3, r7, #4
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	5e9b      	ldrsh	r3, [r3, r2]
 800e8c6:	e004      	b.n	800e8d2 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800e8c8:	4b04      	ldr	r3, [pc, #16]	@ (800e8dc <sen5x_stop_measurement+0x5c>)
 800e8ca:	0018      	movs	r0, r3
 800e8cc:	f7ff fd48 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	0018      	movs	r0, r3
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	b003      	add	sp, #12
 800e8d8:	bd90      	pop	{r4, r7, pc}
 800e8da:	46c0      	nop			@ (mov r8, r8)
 800e8dc:	00030d40 	.word	0x00030d40

0800e8e0 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800e8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e2:	b085      	sub	sp, #20
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800e8e8:	250e      	movs	r5, #14
 800e8ea:	197b      	adds	r3, r7, r5
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800e8f0:	197c      	adds	r4, r7, r5
 800e8f2:	4a22      	ldr	r2, [pc, #136]	@ (800e97c <sen5x_read_data_ready+0x9c>)
 800e8f4:	197b      	adds	r3, r7, r5
 800e8f6:	8819      	ldrh	r1, [r3, #0]
 800e8f8:	2308      	movs	r3, #8
 800e8fa:	18fb      	adds	r3, r7, r3
 800e8fc:	0018      	movs	r0, r3
 800e8fe:	f001 fac8 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800e902:	0003      	movs	r3, r0
 800e904:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e906:	260c      	movs	r6, #12
 800e908:	19bc      	adds	r4, r7, r6
 800e90a:	197b      	adds	r3, r7, r5
 800e90c:	881a      	ldrh	r2, [r3, #0]
 800e90e:	2308      	movs	r3, #8
 800e910:	18fb      	adds	r3, r7, r3
 800e912:	0019      	movs	r1, r3
 800e914:	2069      	movs	r0, #105	@ 0x69
 800e916:	f001 fb40 	bl	800ff9a <sensirion_i2c_write_data>
 800e91a:	0003      	movs	r3, r0
 800e91c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e91e:	19bb      	adds	r3, r7, r6
 800e920:	2200      	movs	r2, #0
 800e922:	5e9b      	ldrsh	r3, [r3, r2]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <sen5x_read_data_ready+0x50>
        return error;
 800e928:	19bb      	adds	r3, r7, r6
 800e92a:	2200      	movs	r2, #0
 800e92c:	5e9b      	ldrsh	r3, [r3, r2]
 800e92e:	e020      	b.n	800e972 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e930:	4b13      	ldr	r3, [pc, #76]	@ (800e980 <sen5x_read_data_ready+0xa0>)
 800e932:	0018      	movs	r0, r3
 800e934:	f7ff fd14 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800e938:	250c      	movs	r5, #12
 800e93a:	197c      	adds	r4, r7, r5
 800e93c:	2308      	movs	r3, #8
 800e93e:	18fb      	adds	r3, r7, r3
 800e940:	2202      	movs	r2, #2
 800e942:	0019      	movs	r1, r3
 800e944:	2069      	movs	r0, #105	@ 0x69
 800e946:	f001 fb40 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800e94a:	0003      	movs	r3, r0
 800e94c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e94e:	197b      	adds	r3, r7, r5
 800e950:	2200      	movs	r2, #0
 800e952:	5e9b      	ldrsh	r3, [r3, r2]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <sen5x_read_data_ready+0x80>
        return error;
 800e958:	197b      	adds	r3, r7, r5
 800e95a:	2200      	movs	r2, #0
 800e95c:	5e9b      	ldrsh	r3, [r3, r2]
 800e95e:	e008      	b.n	800e972 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800e960:	2308      	movs	r3, #8
 800e962:	18fb      	adds	r3, r7, r3
 800e964:	785b      	ldrb	r3, [r3, #1]
 800e966:	1e5a      	subs	r2, r3, #1
 800e968:	4193      	sbcs	r3, r2
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800e970:	2300      	movs	r3, #0
}
 800e972:	0018      	movs	r0, r3
 800e974:	46bd      	mov	sp, r7
 800e976:	b005      	add	sp, #20
 800e978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e97a:	46c0      	nop			@ (mov r8, r8)
 800e97c:	00000202 	.word	0x00000202
 800e980:	00004e20 	.word	0x00004e20

0800e984 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800e984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e986:	b08d      	sub	sp, #52	@ 0x34
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800e992:	252e      	movs	r5, #46	@ 0x2e
 800e994:	197b      	adds	r3, r7, r5
 800e996:	2200      	movs	r2, #0
 800e998:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800e99a:	197c      	adds	r4, r7, r5
 800e99c:	23f1      	movs	r3, #241	@ 0xf1
 800e99e:	009a      	lsls	r2, r3, #2
 800e9a0:	197b      	adds	r3, r7, r5
 800e9a2:	8819      	ldrh	r1, [r3, #0]
 800e9a4:	2314      	movs	r3, #20
 800e9a6:	18fb      	adds	r3, r7, r3
 800e9a8:	0018      	movs	r0, r3
 800e9aa:	f001 fa72 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800e9ae:	0003      	movs	r3, r0
 800e9b0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800e9b2:	262c      	movs	r6, #44	@ 0x2c
 800e9b4:	19bc      	adds	r4, r7, r6
 800e9b6:	197b      	adds	r3, r7, r5
 800e9b8:	881a      	ldrh	r2, [r3, #0]
 800e9ba:	2314      	movs	r3, #20
 800e9bc:	18fb      	adds	r3, r7, r3
 800e9be:	0019      	movs	r1, r3
 800e9c0:	2069      	movs	r0, #105	@ 0x69
 800e9c2:	f001 faea 	bl	800ff9a <sensirion_i2c_write_data>
 800e9c6:	0003      	movs	r3, r0
 800e9c8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e9ca:	19bb      	adds	r3, r7, r6
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	5e9b      	ldrsh	r3, [r3, r2]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d003      	beq.n	800e9dc <sen5x_read_measured_values+0x58>
        return error;
 800e9d4:	19bb      	adds	r3, r7, r6
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	5e9b      	ldrsh	r3, [r3, r2]
 800e9da:	e060      	b.n	800ea9e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800e9dc:	4b32      	ldr	r3, [pc, #200]	@ (800eaa8 <sen5x_read_measured_values+0x124>)
 800e9de:	0018      	movs	r0, r3
 800e9e0:	f7ff fcbe 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800e9e4:	252c      	movs	r5, #44	@ 0x2c
 800e9e6:	197c      	adds	r4, r7, r5
 800e9e8:	2314      	movs	r3, #20
 800e9ea:	18fb      	adds	r3, r7, r3
 800e9ec:	2210      	movs	r2, #16
 800e9ee:	0019      	movs	r1, r3
 800e9f0:	2069      	movs	r0, #105	@ 0x69
 800e9f2:	f001 faea 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800e9f6:	0003      	movs	r3, r0
 800e9f8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800e9fa:	197b      	adds	r3, r7, r5
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	5e9b      	ldrsh	r3, [r3, r2]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <sen5x_read_measured_values+0x88>
        return error;
 800ea04:	197b      	adds	r3, r7, r5
 800ea06:	2200      	movs	r2, #0
 800ea08:	5e9b      	ldrsh	r3, [r3, r2]
 800ea0a:	e048      	b.n	800ea9e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800ea0c:	2414      	movs	r4, #20
 800ea0e:	193b      	adds	r3, r7, r4
 800ea10:	0018      	movs	r0, r3
 800ea12:	f000 fa79 	bl	800ef08 <sensirion_common_bytes_to_uint16_t>
 800ea16:	0003      	movs	r3, r0
 800ea18:	001a      	movs	r2, r3
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800ea1e:	193b      	adds	r3, r7, r4
 800ea20:	3302      	adds	r3, #2
 800ea22:	0018      	movs	r0, r3
 800ea24:	f000 fa70 	bl	800ef08 <sensirion_common_bytes_to_uint16_t>
 800ea28:	0003      	movs	r3, r0
 800ea2a:	001a      	movs	r2, r3
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800ea30:	193b      	adds	r3, r7, r4
 800ea32:	3304      	adds	r3, #4
 800ea34:	0018      	movs	r0, r3
 800ea36:	f000 fa67 	bl	800ef08 <sensirion_common_bytes_to_uint16_t>
 800ea3a:	0003      	movs	r3, r0
 800ea3c:	001a      	movs	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800ea42:	193b      	adds	r3, r7, r4
 800ea44:	3306      	adds	r3, #6
 800ea46:	0018      	movs	r0, r3
 800ea48:	f000 fa5e 	bl	800ef08 <sensirion_common_bytes_to_uint16_t>
 800ea4c:	0003      	movs	r3, r0
 800ea4e:	001a      	movs	r2, r3
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800ea54:	193b      	adds	r3, r7, r4
 800ea56:	3308      	adds	r3, #8
 800ea58:	0018      	movs	r0, r3
 800ea5a:	f000 fa82 	bl	800ef62 <sensirion_common_bytes_to_int16_t>
 800ea5e:	0003      	movs	r3, r0
 800ea60:	001a      	movs	r2, r3
 800ea62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea64:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800ea66:	193b      	adds	r3, r7, r4
 800ea68:	330a      	adds	r3, #10
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	f000 fa79 	bl	800ef62 <sensirion_common_bytes_to_int16_t>
 800ea70:	0003      	movs	r3, r0
 800ea72:	001a      	movs	r2, r3
 800ea74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea76:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800ea78:	193b      	adds	r3, r7, r4
 800ea7a:	330c      	adds	r3, #12
 800ea7c:	0018      	movs	r0, r3
 800ea7e:	f000 fa70 	bl	800ef62 <sensirion_common_bytes_to_int16_t>
 800ea82:	0003      	movs	r3, r0
 800ea84:	001a      	movs	r2, r3
 800ea86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea88:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800ea8a:	193b      	adds	r3, r7, r4
 800ea8c:	330e      	adds	r3, #14
 800ea8e:	0018      	movs	r0, r3
 800ea90:	f000 fa67 	bl	800ef62 <sensirion_common_bytes_to_int16_t>
 800ea94:	0003      	movs	r3, r0
 800ea96:	001a      	movs	r2, r3
 800ea98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	0018      	movs	r0, r3
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	b00d      	add	sp, #52	@ 0x34
 800eaa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaa6:	46c0      	nop			@ (mov r8, r8)
 800eaa8:	00004e20 	.word	0x00004e20

0800eaac <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800eaac:	b590      	push	{r4, r7, lr}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800eab2:	1dbb      	adds	r3, r7, #6
 800eab4:	2200      	movs	r2, #0
 800eab6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800eab8:	1dbc      	adds	r4, r7, #6
 800eaba:	4a12      	ldr	r2, [pc, #72]	@ (800eb04 <sen5x_start_fan_cleaning+0x58>)
 800eabc:	1dbb      	adds	r3, r7, #6
 800eabe:	8819      	ldrh	r1, [r3, #0]
 800eac0:	003b      	movs	r3, r7
 800eac2:	0018      	movs	r0, r3
 800eac4:	f001 f9e5 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800eac8:	0003      	movs	r3, r0
 800eaca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eacc:	1d3c      	adds	r4, r7, #4
 800eace:	1dbb      	adds	r3, r7, #6
 800ead0:	881a      	ldrh	r2, [r3, #0]
 800ead2:	003b      	movs	r3, r7
 800ead4:	0019      	movs	r1, r3
 800ead6:	2069      	movs	r0, #105	@ 0x69
 800ead8:	f001 fa5f 	bl	800ff9a <sensirion_i2c_write_data>
 800eadc:	0003      	movs	r3, r0
 800eade:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eae0:	1d3b      	adds	r3, r7, #4
 800eae2:	2200      	movs	r2, #0
 800eae4:	5e9b      	ldrsh	r3, [r3, r2]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d003      	beq.n	800eaf2 <sen5x_start_fan_cleaning+0x46>
        return error;
 800eaea:	1d3b      	adds	r3, r7, #4
 800eaec:	2200      	movs	r2, #0
 800eaee:	5e9b      	ldrsh	r3, [r3, r2]
 800eaf0:	e004      	b.n	800eafc <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800eaf2:	4b05      	ldr	r3, [pc, #20]	@ (800eb08 <sen5x_start_fan_cleaning+0x5c>)
 800eaf4:	0018      	movs	r0, r3
 800eaf6:	f7ff fc33 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	0018      	movs	r0, r3
 800eafe:	46bd      	mov	sp, r7
 800eb00:	b003      	add	sp, #12
 800eb02:	bd90      	pop	{r4, r7, pc}
 800eb04:	00005607 	.word	0x00005607
 800eb08:	00004e20 	.word	0x00004e20

0800eb0c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb0e:	b087      	sub	sp, #28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	0004      	movs	r4, r0
 800eb14:	0008      	movs	r0, r1
 800eb16:	0011      	movs	r1, r2
 800eb18:	1dbb      	adds	r3, r7, #6
 800eb1a:	1c22      	adds	r2, r4, #0
 800eb1c:	801a      	strh	r2, [r3, #0]
 800eb1e:	1d3b      	adds	r3, r7, #4
 800eb20:	1c02      	adds	r2, r0, #0
 800eb22:	801a      	strh	r2, [r3, #0]
 800eb24:	1cbb      	adds	r3, r7, #2
 800eb26:	1c0a      	adds	r2, r1, #0
 800eb28:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800eb2a:	2516      	movs	r5, #22
 800eb2c:	197b      	adds	r3, r7, r5
 800eb2e:	2200      	movs	r2, #0
 800eb30:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800eb32:	197c      	adds	r4, r7, r5
 800eb34:	4a25      	ldr	r2, [pc, #148]	@ (800ebcc <sen5x_set_temperature_offset_parameters+0xc0>)
 800eb36:	197b      	adds	r3, r7, r5
 800eb38:	8819      	ldrh	r1, [r3, #0]
 800eb3a:	2608      	movs	r6, #8
 800eb3c:	19bb      	adds	r3, r7, r6
 800eb3e:	0018      	movs	r0, r3
 800eb40:	f001 f9a7 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800eb44:	0003      	movs	r3, r0
 800eb46:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800eb48:	197c      	adds	r4, r7, r5
 800eb4a:	1dbb      	adds	r3, r7, #6
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	5e9a      	ldrsh	r2, [r3, r2]
 800eb50:	197b      	adds	r3, r7, r5
 800eb52:	8819      	ldrh	r1, [r3, #0]
 800eb54:	19bb      	adds	r3, r7, r6
 800eb56:	0018      	movs	r0, r3
 800eb58:	f001 fa06 	bl	800ff68 <sensirion_i2c_add_int16_t_to_buffer>
 800eb5c:	0003      	movs	r3, r0
 800eb5e:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800eb60:	197c      	adds	r4, r7, r5
 800eb62:	1d3b      	adds	r3, r7, #4
 800eb64:	2200      	movs	r2, #0
 800eb66:	5e9a      	ldrsh	r2, [r3, r2]
 800eb68:	197b      	adds	r3, r7, r5
 800eb6a:	8819      	ldrh	r1, [r3, #0]
 800eb6c:	19bb      	adds	r3, r7, r6
 800eb6e:	0018      	movs	r0, r3
 800eb70:	f001 f9fa 	bl	800ff68 <sensirion_i2c_add_int16_t_to_buffer>
 800eb74:	0003      	movs	r3, r0
 800eb76:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800eb78:	197c      	adds	r4, r7, r5
 800eb7a:	1cbb      	adds	r3, r7, #2
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	197b      	adds	r3, r7, r5
 800eb80:	8819      	ldrh	r1, [r3, #0]
 800eb82:	19bb      	adds	r3, r7, r6
 800eb84:	0018      	movs	r0, r3
 800eb86:	f001 f9b0 	bl	800feea <sensirion_i2c_add_uint16_t_to_buffer>
 800eb8a:	0003      	movs	r3, r0
 800eb8c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eb8e:	2214      	movs	r2, #20
 800eb90:	18bc      	adds	r4, r7, r2
 800eb92:	197b      	adds	r3, r7, r5
 800eb94:	881a      	ldrh	r2, [r3, #0]
 800eb96:	19bb      	adds	r3, r7, r6
 800eb98:	0019      	movs	r1, r3
 800eb9a:	2069      	movs	r0, #105	@ 0x69
 800eb9c:	f001 f9fd 	bl	800ff9a <sensirion_i2c_write_data>
 800eba0:	0003      	movs	r3, r0
 800eba2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eba4:	2214      	movs	r2, #20
 800eba6:	18bb      	adds	r3, r7, r2
 800eba8:	2100      	movs	r1, #0
 800ebaa:	5e5b      	ldrsh	r3, [r3, r1]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800ebb0:	18bb      	adds	r3, r7, r2
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	5e9b      	ldrsh	r3, [r3, r2]
 800ebb6:	e004      	b.n	800ebc2 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800ebb8:	4b05      	ldr	r3, [pc, #20]	@ (800ebd0 <sen5x_set_temperature_offset_parameters+0xc4>)
 800ebba:	0018      	movs	r0, r3
 800ebbc:	f7ff fbd0 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	0018      	movs	r0, r3
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	b007      	add	sp, #28
 800ebc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebca:	46c0      	nop			@ (mov r8, r8)
 800ebcc:	000060b2 	.word	0x000060b2
 800ebd0:	00004e20 	.word	0x00004e20

0800ebd4 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800ebd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebd6:	b091      	sub	sp, #68	@ 0x44
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	000a      	movs	r2, r1
 800ebde:	1cfb      	adds	r3, r7, #3
 800ebe0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ebe2:	253e      	movs	r5, #62	@ 0x3e
 800ebe4:	197b      	adds	r3, r7, r5
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800ebea:	197c      	adds	r4, r7, r5
 800ebec:	4a22      	ldr	r2, [pc, #136]	@ (800ec78 <sen5x_get_product_name+0xa4>)
 800ebee:	197b      	adds	r3, r7, r5
 800ebf0:	8819      	ldrh	r1, [r3, #0]
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	18fb      	adds	r3, r7, r3
 800ebf6:	0018      	movs	r0, r3
 800ebf8:	f001 f94b 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800ebfc:	0003      	movs	r3, r0
 800ebfe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ec00:	263c      	movs	r6, #60	@ 0x3c
 800ec02:	19bc      	adds	r4, r7, r6
 800ec04:	197b      	adds	r3, r7, r5
 800ec06:	881a      	ldrh	r2, [r3, #0]
 800ec08:	230c      	movs	r3, #12
 800ec0a:	18fb      	adds	r3, r7, r3
 800ec0c:	0019      	movs	r1, r3
 800ec0e:	2069      	movs	r0, #105	@ 0x69
 800ec10:	f001 f9c3 	bl	800ff9a <sensirion_i2c_write_data>
 800ec14:	0003      	movs	r3, r0
 800ec16:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec18:	19bb      	adds	r3, r7, r6
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <sen5x_get_product_name+0x56>
        return error;
 800ec22:	19bb      	adds	r3, r7, r6
 800ec24:	2200      	movs	r2, #0
 800ec26:	5e9b      	ldrsh	r3, [r3, r2]
 800ec28:	e021      	b.n	800ec6e <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ec2a:	4b14      	ldr	r3, [pc, #80]	@ (800ec7c <sen5x_get_product_name+0xa8>)
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f7ff fb97 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ec32:	253c      	movs	r5, #60	@ 0x3c
 800ec34:	197c      	adds	r4, r7, r5
 800ec36:	230c      	movs	r3, #12
 800ec38:	18fb      	adds	r3, r7, r3
 800ec3a:	2220      	movs	r2, #32
 800ec3c:	0019      	movs	r1, r3
 800ec3e:	2069      	movs	r0, #105	@ 0x69
 800ec40:	f001 f9c3 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800ec44:	0003      	movs	r3, r0
 800ec46:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ec48:	197b      	adds	r3, r7, r5
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	5e9b      	ldrsh	r3, [r3, r2]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d003      	beq.n	800ec5a <sen5x_get_product_name+0x86>
        return error;
 800ec52:	197b      	adds	r3, r7, r5
 800ec54:	2200      	movs	r2, #0
 800ec56:	5e9b      	ldrsh	r3, [r3, r2]
 800ec58:	e009      	b.n	800ec6e <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800ec5a:	1cfb      	adds	r3, r7, #3
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	b29a      	uxth	r2, r3
 800ec60:	6879      	ldr	r1, [r7, #4]
 800ec62:	230c      	movs	r3, #12
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	0018      	movs	r0, r3
 800ec68:	f000 f989 	bl	800ef7e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	0018      	movs	r0, r3
 800ec70:	46bd      	mov	sp, r7
 800ec72:	b011      	add	sp, #68	@ 0x44
 800ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec76:	46c0      	nop			@ (mov r8, r8)
 800ec78:	0000d014 	.word	0x0000d014
 800ec7c:	0000c350 	.word	0x0000c350

0800ec80 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800ec80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec82:	b091      	sub	sp, #68	@ 0x44
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
 800ec88:	000a      	movs	r2, r1
 800ec8a:	1cfb      	adds	r3, r7, #3
 800ec8c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800ec8e:	253e      	movs	r5, #62	@ 0x3e
 800ec90:	197b      	adds	r3, r7, r5
 800ec92:	2200      	movs	r2, #0
 800ec94:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800ec96:	197c      	adds	r4, r7, r5
 800ec98:	4a22      	ldr	r2, [pc, #136]	@ (800ed24 <sen5x_get_serial_number+0xa4>)
 800ec9a:	197b      	adds	r3, r7, r5
 800ec9c:	8819      	ldrh	r1, [r3, #0]
 800ec9e:	230c      	movs	r3, #12
 800eca0:	18fb      	adds	r3, r7, r3
 800eca2:	0018      	movs	r0, r3
 800eca4:	f001 f8f5 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800eca8:	0003      	movs	r3, r0
 800ecaa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ecac:	263c      	movs	r6, #60	@ 0x3c
 800ecae:	19bc      	adds	r4, r7, r6
 800ecb0:	197b      	adds	r3, r7, r5
 800ecb2:	881a      	ldrh	r2, [r3, #0]
 800ecb4:	230c      	movs	r3, #12
 800ecb6:	18fb      	adds	r3, r7, r3
 800ecb8:	0019      	movs	r1, r3
 800ecba:	2069      	movs	r0, #105	@ 0x69
 800ecbc:	f001 f96d 	bl	800ff9a <sensirion_i2c_write_data>
 800ecc0:	0003      	movs	r3, r0
 800ecc2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ecc4:	19bb      	adds	r3, r7, r6
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d003      	beq.n	800ecd6 <sen5x_get_serial_number+0x56>
        return error;
 800ecce:	19bb      	adds	r3, r7, r6
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecd4:	e021      	b.n	800ed1a <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800ecd6:	4b14      	ldr	r3, [pc, #80]	@ (800ed28 <sen5x_get_serial_number+0xa8>)
 800ecd8:	0018      	movs	r0, r3
 800ecda:	f7ff fb41 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800ecde:	253c      	movs	r5, #60	@ 0x3c
 800ece0:	197c      	adds	r4, r7, r5
 800ece2:	230c      	movs	r3, #12
 800ece4:	18fb      	adds	r3, r7, r3
 800ece6:	2220      	movs	r2, #32
 800ece8:	0019      	movs	r1, r3
 800ecea:	2069      	movs	r0, #105	@ 0x69
 800ecec:	f001 f96d 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800ecf0:	0003      	movs	r3, r0
 800ecf2:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ecf4:	197b      	adds	r3, r7, r5
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d003      	beq.n	800ed06 <sen5x_get_serial_number+0x86>
        return error;
 800ecfe:	197b      	adds	r3, r7, r5
 800ed00:	2200      	movs	r2, #0
 800ed02:	5e9b      	ldrsh	r3, [r3, r2]
 800ed04:	e009      	b.n	800ed1a <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800ed06:	1cfb      	adds	r3, r7, #3
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	230c      	movs	r3, #12
 800ed10:	18fb      	adds	r3, r7, r3
 800ed12:	0018      	movs	r0, r3
 800ed14:	f000 f933 	bl	800ef7e <sensirion_common_copy_bytes>
    return NO_ERROR;
 800ed18:	2300      	movs	r3, #0
}
 800ed1a:	0018      	movs	r0, r3
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	b011      	add	sp, #68	@ 0x44
 800ed20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed22:	46c0      	nop			@ (mov r8, r8)
 800ed24:	0000d033 	.word	0x0000d033
 800ed28:	0000c350 	.word	0x0000c350

0800ed2c <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800ed2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed2e:	b089      	sub	sp, #36	@ 0x24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800ed3a:	251e      	movs	r5, #30
 800ed3c:	197b      	adds	r3, r7, r5
 800ed3e:	2200      	movs	r2, #0
 800ed40:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800ed42:	197c      	adds	r4, r7, r5
 800ed44:	23d1      	movs	r3, #209	@ 0xd1
 800ed46:	021a      	lsls	r2, r3, #8
 800ed48:	197b      	adds	r3, r7, r5
 800ed4a:	8819      	ldrh	r1, [r3, #0]
 800ed4c:	2310      	movs	r3, #16
 800ed4e:	18fb      	adds	r3, r7, r3
 800ed50:	0018      	movs	r0, r3
 800ed52:	f001 f89e 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800ed56:	0003      	movs	r3, r0
 800ed58:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ed5a:	261c      	movs	r6, #28
 800ed5c:	19bc      	adds	r4, r7, r6
 800ed5e:	197b      	adds	r3, r7, r5
 800ed60:	881a      	ldrh	r2, [r3, #0]
 800ed62:	2310      	movs	r3, #16
 800ed64:	18fb      	adds	r3, r7, r3
 800ed66:	0019      	movs	r1, r3
 800ed68:	2069      	movs	r0, #105	@ 0x69
 800ed6a:	f001 f916 	bl	800ff9a <sensirion_i2c_write_data>
 800ed6e:	0003      	movs	r3, r0
 800ed70:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ed72:	19bb      	adds	r3, r7, r6
 800ed74:	2200      	movs	r2, #0
 800ed76:	5e9b      	ldrsh	r3, [r3, r2]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <sen5x_get_version+0x58>
        return error;
 800ed7c:	19bb      	adds	r3, r7, r6
 800ed7e:	2200      	movs	r2, #0
 800ed80:	5e9b      	ldrsh	r3, [r3, r2]
 800ed82:	e038      	b.n	800edf6 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ed84:	4b1e      	ldr	r3, [pc, #120]	@ (800ee00 <sen5x_get_version+0xd4>)
 800ed86:	0018      	movs	r0, r3
 800ed88:	f7ff faea 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800ed8c:	251c      	movs	r5, #28
 800ed8e:	197c      	adds	r4, r7, r5
 800ed90:	2310      	movs	r3, #16
 800ed92:	18fb      	adds	r3, r7, r3
 800ed94:	2208      	movs	r2, #8
 800ed96:	0019      	movs	r1, r3
 800ed98:	2069      	movs	r0, #105	@ 0x69
 800ed9a:	f001 f916 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800ed9e:	0003      	movs	r3, r0
 800eda0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eda2:	197b      	adds	r3, r7, r5
 800eda4:	2200      	movs	r2, #0
 800eda6:	5e9b      	ldrsh	r3, [r3, r2]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d003      	beq.n	800edb4 <sen5x_get_version+0x88>
        return error;
 800edac:	197b      	adds	r3, r7, r5
 800edae:	2200      	movs	r2, #0
 800edb0:	5e9b      	ldrsh	r3, [r3, r2]
 800edb2:	e020      	b.n	800edf6 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800edb4:	2110      	movs	r1, #16
 800edb6:	187b      	adds	r3, r7, r1
 800edb8:	781a      	ldrb	r2, [r3, #0]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800edbe:	187b      	adds	r3, r7, r1
 800edc0:	785a      	ldrb	r2, [r3, #1]
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800edc6:	187b      	adds	r3, r7, r1
 800edc8:	789b      	ldrb	r3, [r3, #2]
 800edca:	1e5a      	subs	r2, r3, #1
 800edcc:	4193      	sbcs	r3, r2
 800edce:	b2da      	uxtb	r2, r3
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800edd4:	187b      	adds	r3, r7, r1
 800edd6:	78da      	ldrb	r2, [r3, #3]
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800eddc:	187b      	adds	r3, r7, r1
 800edde:	791a      	ldrb	r2, [r3, #4]
 800ede0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede2:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800ede4:	187b      	adds	r3, r7, r1
 800ede6:	795a      	ldrb	r2, [r3, #5]
 800ede8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edea:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800edec:	187b      	adds	r3, r7, r1
 800edee:	799a      	ldrb	r2, [r3, #6]
 800edf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edf2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	0018      	movs	r0, r3
 800edf8:	46bd      	mov	sp, r7
 800edfa:	b009      	add	sp, #36	@ 0x24
 800edfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edfe:	46c0      	nop			@ (mov r8, r8)
 800ee00:	00004e20 	.word	0x00004e20

0800ee04 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800ee04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee06:	b087      	sub	sp, #28
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800ee0c:	2516      	movs	r5, #22
 800ee0e:	197b      	adds	r3, r7, r5
 800ee10:	2200      	movs	r2, #0
 800ee12:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800ee14:	197c      	adds	r4, r7, r5
 800ee16:	4a21      	ldr	r2, [pc, #132]	@ (800ee9c <sen5x_read_device_status+0x98>)
 800ee18:	197b      	adds	r3, r7, r5
 800ee1a:	8819      	ldrh	r1, [r3, #0]
 800ee1c:	260c      	movs	r6, #12
 800ee1e:	19bb      	adds	r3, r7, r6
 800ee20:	0018      	movs	r0, r3
 800ee22:	f001 f836 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800ee26:	0003      	movs	r3, r0
 800ee28:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800ee2a:	2314      	movs	r3, #20
 800ee2c:	18fc      	adds	r4, r7, r3
 800ee2e:	197b      	adds	r3, r7, r5
 800ee30:	881a      	ldrh	r2, [r3, #0]
 800ee32:	19bb      	adds	r3, r7, r6
 800ee34:	0019      	movs	r1, r3
 800ee36:	2069      	movs	r0, #105	@ 0x69
 800ee38:	f001 f8af 	bl	800ff9a <sensirion_i2c_write_data>
 800ee3c:	0003      	movs	r3, r0
 800ee3e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee40:	2314      	movs	r3, #20
 800ee42:	18fb      	adds	r3, r7, r3
 800ee44:	2200      	movs	r2, #0
 800ee46:	5e9b      	ldrsh	r3, [r3, r2]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800ee4c:	4b14      	ldr	r3, [pc, #80]	@ (800eea0 <sen5x_read_device_status+0x9c>)
 800ee4e:	e020      	b.n	800ee92 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800ee50:	4b14      	ldr	r3, [pc, #80]	@ (800eea4 <sen5x_read_device_status+0xa0>)
 800ee52:	0018      	movs	r0, r3
 800ee54:	f7ff fa84 	bl	800e360 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800ee58:	2514      	movs	r5, #20
 800ee5a:	197c      	adds	r4, r7, r5
 800ee5c:	230c      	movs	r3, #12
 800ee5e:	18fb      	adds	r3, r7, r3
 800ee60:	2204      	movs	r2, #4
 800ee62:	0019      	movs	r1, r3
 800ee64:	2069      	movs	r0, #105	@ 0x69
 800ee66:	f001 f8b0 	bl	800ffca <sensirion_i2c_read_data_inplace>
 800ee6a:	0003      	movs	r3, r0
 800ee6c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ee6e:	197b      	adds	r3, r7, r5
 800ee70:	2200      	movs	r2, #0
 800ee72:	5e9b      	ldrsh	r3, [r3, r2]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <sen5x_read_device_status+0x7c>
        return error;
 800ee78:	197b      	adds	r3, r7, r5
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	5e9b      	ldrsh	r3, [r3, r2]
 800ee7e:	e008      	b.n	800ee92 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800ee80:	230c      	movs	r3, #12
 800ee82:	18fb      	adds	r3, r7, r3
 800ee84:	0018      	movs	r0, r3
 800ee86:	f000 f853 	bl	800ef30 <sensirion_common_bytes_to_uint32_t>
 800ee8a:	0002      	movs	r2, r0
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	0018      	movs	r0, r3
 800ee94:	46bd      	mov	sp, r7
 800ee96:	b007      	add	sp, #28
 800ee98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee9a:	46c0      	nop			@ (mov r8, r8)
 800ee9c:	0000d206 	.word	0x0000d206
 800eea0:	ffffd206 	.word	0xffffd206
 800eea4:	00004e20 	.word	0x00004e20

0800eea8 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800eea8:	b590      	push	{r4, r7, lr}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800eeae:	1dbb      	adds	r3, r7, #6
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800eeb4:	1dbc      	adds	r4, r7, #6
 800eeb6:	4a12      	ldr	r2, [pc, #72]	@ (800ef00 <sen5x_device_reset+0x58>)
 800eeb8:	1dbb      	adds	r3, r7, #6
 800eeba:	8819      	ldrh	r1, [r3, #0]
 800eebc:	003b      	movs	r3, r7
 800eebe:	0018      	movs	r0, r3
 800eec0:	f000 ffe7 	bl	800fe92 <sensirion_i2c_add_command_to_buffer>
 800eec4:	0003      	movs	r3, r0
 800eec6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800eec8:	1d3c      	adds	r4, r7, #4
 800eeca:	1dbb      	adds	r3, r7, #6
 800eecc:	881a      	ldrh	r2, [r3, #0]
 800eece:	003b      	movs	r3, r7
 800eed0:	0019      	movs	r1, r3
 800eed2:	2069      	movs	r0, #105	@ 0x69
 800eed4:	f001 f861 	bl	800ff9a <sensirion_i2c_write_data>
 800eed8:	0003      	movs	r3, r0
 800eeda:	8023      	strh	r3, [r4, #0]
    if (error) {
 800eedc:	1d3b      	adds	r3, r7, #4
 800eede:	2200      	movs	r2, #0
 800eee0:	5e9b      	ldrsh	r3, [r3, r2]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d003      	beq.n	800eeee <sen5x_device_reset+0x46>
        return error;
 800eee6:	1d3b      	adds	r3, r7, #4
 800eee8:	2200      	movs	r2, #0
 800eeea:	5e9b      	ldrsh	r3, [r3, r2]
 800eeec:	e004      	b.n	800eef8 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800eeee:	4b05      	ldr	r3, [pc, #20]	@ (800ef04 <sen5x_device_reset+0x5c>)
 800eef0:	0018      	movs	r0, r3
 800eef2:	f7ff fa35 	bl	800e360 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	0018      	movs	r0, r3
 800eefa:	46bd      	mov	sp, r7
 800eefc:	b003      	add	sp, #12
 800eefe:	bd90      	pop	{r4, r7, pc}
 800ef00:	0000d304 	.word	0x0000d304
 800ef04:	00030d40 	.word	0x00030d40

0800ef08 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	781b      	ldrb	r3, [r3, #0]
 800ef14:	b21b      	sxth	r3, r3
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	b21a      	sxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	b21b      	sxth	r3, r3
 800ef22:	4313      	orrs	r3, r2
 800ef24:	b21b      	sxth	r3, r3
 800ef26:	b29b      	uxth	r3, r3
}
 800ef28:	0018      	movs	r0, r3
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	b002      	add	sp, #8
 800ef2e:	bd80      	pop	{r7, pc}

0800ef30 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	061a      	lsls	r2, r3, #24
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3301      	adds	r3, #1
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	041b      	lsls	r3, r3, #16
 800ef46:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	3302      	adds	r3, #2
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800ef50:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800ef52:	687a      	ldr	r2, [r7, #4]
 800ef54:	3203      	adds	r2, #3
 800ef56:	7812      	ldrb	r2, [r2, #0]
 800ef58:	4313      	orrs	r3, r2
}
 800ef5a:	0018      	movs	r0, r3
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	b002      	add	sp, #8
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	0018      	movs	r0, r3
 800ef6e:	f7ff ffcb 	bl	800ef08 <sensirion_common_bytes_to_uint16_t>
 800ef72:	0003      	movs	r3, r0
 800ef74:	b21b      	sxth	r3, r3
}
 800ef76:	0018      	movs	r0, r3
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	b002      	add	sp, #8
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b086      	sub	sp, #24
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	60f8      	str	r0, [r7, #12]
 800ef86:	60b9      	str	r1, [r7, #8]
 800ef88:	1dbb      	adds	r3, r7, #6
 800ef8a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800ef8c:	2316      	movs	r3, #22
 800ef8e:	18fb      	adds	r3, r7, r3
 800ef90:	2200      	movs	r2, #0
 800ef92:	801a      	strh	r2, [r3, #0]
 800ef94:	e00f      	b.n	800efb6 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800ef96:	2016      	movs	r0, #22
 800ef98:	183b      	adds	r3, r7, r0
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	18d2      	adds	r2, r2, r3
 800efa0:	183b      	adds	r3, r7, r0
 800efa2:	881b      	ldrh	r3, [r3, #0]
 800efa4:	68b9      	ldr	r1, [r7, #8]
 800efa6:	18cb      	adds	r3, r1, r3
 800efa8:	7812      	ldrb	r2, [r2, #0]
 800efaa:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800efac:	183b      	adds	r3, r7, r0
 800efae:	881a      	ldrh	r2, [r3, #0]
 800efb0:	183b      	adds	r3, r7, r0
 800efb2:	3201      	adds	r2, #1
 800efb4:	801a      	strh	r2, [r3, #0]
 800efb6:	2316      	movs	r3, #22
 800efb8:	18fa      	adds	r2, r7, r3
 800efba:	1dbb      	adds	r3, r7, #6
 800efbc:	8812      	ldrh	r2, [r2, #0]
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d3e8      	bcc.n	800ef96 <sensirion_common_copy_bytes+0x18>
    }
}
 800efc4:	46c0      	nop			@ (mov r8, r8)
 800efc6:	46c0      	nop			@ (mov r8, r8)
 800efc8:	46bd      	mov	sp, r7
 800efca:	b006      	add	sp, #24
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2b01      	cmp	r3, #1
 800efec:	d113      	bne.n	800f016 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	22fe      	movs	r2, #254	@ 0xfe
 800eff2:	0592      	lsls	r2, r2, #22
 800eff4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	4a1a      	ldr	r2, [pc, #104]	@ (800f064 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800effa:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4a1a      	ldr	r2, [pc, #104]	@ (800f068 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800f000:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	4a19      	ldr	r2, [pc, #100]	@ (800f06c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800f006:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	4a19      	ldr	r2, [pc, #100]	@ (800f070 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800f00c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	4a18      	ldr	r2, [pc, #96]	@ (800f074 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800f012:	61da      	str	r2, [r3, #28]
 800f014:	e011      	b.n	800f03a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	4a17      	ldr	r2, [pc, #92]	@ (800f078 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800f01a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4a17      	ldr	r2, [pc, #92]	@ (800f07c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800f020:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	4a16      	ldr	r2, [pc, #88]	@ (800f080 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800f026:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4a16      	ldr	r2, [pc, #88]	@ (800f084 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800f02c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	4a15      	ldr	r2, [pc, #84]	@ (800f088 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800f032:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a15      	ldr	r2, [pc, #84]	@ (800f08c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800f038:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	4a14      	ldr	r2, [pc, #80]	@ (800f090 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800f03e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	4a14      	ldr	r2, [pc, #80]	@ (800f094 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f044:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	4a12      	ldr	r2, [pc, #72]	@ (800f094 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800f04a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	4a12      	ldr	r2, [pc, #72]	@ (800f098 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800f050:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	0018      	movs	r0, r3
 800f056:	f000 f831 	bl	800f0bc <GasIndexAlgorithm_reset>
}
 800f05a:	46c0      	nop			@ (mov r8, r8)
 800f05c:	46bd      	mov	sp, r7
 800f05e:	b004      	add	sp, #16
 800f060:	bd80      	pop	{r7, pc}
 800f062:	46c0      	nop			@ (mov r8, r8)
 800f064:	00002710 	.word	0x00002710
 800f068:	44340000 	.word	0x44340000
 800f06c:	46859800 	.word	0x46859800
 800f070:	46a05000 	.word	0x46a05000
 800f074:	41f00000 	.word	0x41f00000
 800f078:	42c80000 	.word	0x42c80000
 800f07c:	00004e20 	.word	0x00004e20
 800f080:	43340000 	.word	0x43340000
 800f084:	4528c000 	.word	0x4528c000
 800f088:	45a32000 	.word	0x45a32000
 800f08c:	43aa0000 	.word	0x43aa0000
 800f090:	43660000 	.word	0x43660000
 800f094:	41400000 	.word	0x41400000
 800f098:	42480000 	.word	0x42480000

0800f09c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800f0a6:	22fe      	movs	r2, #254	@ 0xfe
 800f0a8:	0592      	lsls	r2, r2, #22
 800f0aa:	6839      	ldr	r1, [r7, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f7ff ff8e 	bl	800efd0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800f0b4:	46c0      	nop			@ (mov r8, r8)
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	b002      	add	sp, #8
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f000 f805 	bl	800f0e8 <GasIndexAlgorithm__init_instances>
}
 800f0de:	46c0      	nop			@ (mov r8, r8)
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	b002      	add	sp, #8
 800f0e4:	bd80      	pop	{r7, pc}
	...

0800f0e8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800f0e8:	b590      	push	{r4, r7, lr}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	0018      	movs	r0, r3
 800f0f4:	f000 f8e8 	bl	800f2c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	0018      	movs	r0, r3
 800f0fc:	f000 f9a6 	bl	800f44c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f100:	1c04      	adds	r4, r0, #0
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	0018      	movs	r0, r3
 800f106:	f000 f9ab 	bl	800f460 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f10a:	1c02      	adds	r2, r0, #0
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	1c21      	adds	r1, r4, #0
 800f110:	0018      	movs	r0, r3
 800f112:	f000 fc3b 	bl	800f98c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d107      	bne.n	800f12e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f11e:	23fe      	movs	r3, #254	@ 0xfe
 800f120:	059b      	lsls	r3, r3, #22
 800f122:	4a0a      	ldr	r2, [pc, #40]	@ (800f14c <GasIndexAlgorithm__init_instances+0x64>)
 800f124:	490a      	ldr	r1, [pc, #40]	@ (800f150 <GasIndexAlgorithm__init_instances+0x68>)
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 fc86 	bl	800fa38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800f12c:	e005      	b.n	800f13a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800f12e:	4b09      	ldr	r3, [pc, #36]	@ (800f154 <GasIndexAlgorithm__init_instances+0x6c>)
 800f130:	4a09      	ldr	r2, [pc, #36]	@ (800f158 <GasIndexAlgorithm__init_instances+0x70>)
 800f132:	490a      	ldr	r1, [pc, #40]	@ (800f15c <GasIndexAlgorithm__init_instances+0x74>)
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 fc7f 	bl	800fa38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	0018      	movs	r0, r3
 800f13e:	f000 fd35 	bl	800fbac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800f142:	46c0      	nop			@ (mov r8, r8)
 800f144:	46bd      	mov	sp, r7
 800f146:	b003      	add	sp, #12
 800f148:	bd90      	pop	{r4, r7, pc}
 800f14a:	46c0      	nop			@ (mov r8, r8)
 800f14c:	bc257a78 	.word	0xbc257a78
 800f150:	44198000 	.word	0x44198000
 800f154:	42c80000 	.word	0x42c80000
 800f158:	bbd4fdf4 	.word	0xbbd4fdf4
 800f15c:	43550000 	.word	0x43550000

0800f160 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800f160:	b590      	push	{r4, r7, lr}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	60f8      	str	r0, [r7, #12]
 800f168:	60b9      	str	r1, [r7, #8]
 800f16a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f170:	4952      	ldr	r1, [pc, #328]	@ (800f2bc <GasIndexAlgorithm_process+0x15c>)
 800f172:	1c18      	adds	r0, r3, #0
 800f174:	f7f1 f9e6 	bl	8000544 <__aeabi_fcmple>
 800f178:	1e03      	subs	r3, r0, #0
 800f17a:	d00c      	beq.n	800f196 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	1c19      	adds	r1, r3, #0
 800f186:	1c10      	adds	r0, r2, #0
 800f188:	f7f1 fb9a 	bl	80008c0 <__aeabi_fadd>
 800f18c:	1c03      	adds	r3, r0, #0
 800f18e:	1c1a      	adds	r2, r3, #0
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	631a      	str	r2, [r3, #48]	@ 0x30
 800f194:	e080      	b.n	800f298 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	dd25      	ble.n	800f1e8 <GasIndexAlgorithm_process+0x88>
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	4a48      	ldr	r2, [pc, #288]	@ (800f2c0 <GasIndexAlgorithm_process+0x160>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	dc21      	bgt.n	800f1e8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	68ba      	ldr	r2, [r7, #8]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	dc04      	bgt.n	800f1b8 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	60bb      	str	r3, [r7, #8]
 800f1b6:	e00d      	b.n	800f1d4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	4a41      	ldr	r2, [pc, #260]	@ (800f2c4 <GasIndexAlgorithm_process+0x164>)
 800f1be:	4694      	mov	ip, r2
 800f1c0:	4463      	add	r3, ip
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	dd05      	ble.n	800f1d4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	4a3d      	ldr	r2, [pc, #244]	@ (800f2c4 <GasIndexAlgorithm_process+0x164>)
 800f1ce:	4694      	mov	ip, r2
 800f1d0:	4463      	add	r3, ip
 800f1d2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	0018      	movs	r0, r3
 800f1de:	f7f2 fb23 	bl	8001828 <__aeabi_i2f>
 800f1e2:	1c02      	adds	r2, r0, #0
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d005      	beq.n	800f1fc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	0018      	movs	r0, r3
 800f1f4:	f000 f945 	bl	800f482 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800f1f8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800f1fa:	d014      	beq.n	800f226 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	1c11      	adds	r1, r2, #0
 800f204:	0018      	movs	r0, r3
 800f206:	f000 fbd1 	bl	800f9ac <GasIndexAlgorithm__mox_model__process>
 800f20a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	1c11      	adds	r1, r2, #0
 800f218:	0018      	movs	r0, r3
 800f21a:	f000 fc25 	bl	800fa68 <GasIndexAlgorithm__sigmoid_scaled__process>
 800f21e:	1c02      	adds	r2, r0, #0
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	639a      	str	r2, [r3, #56]	@ 0x38
 800f224:	e003      	b.n	800f22e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689a      	ldr	r2, [r3, #8]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	1c11      	adds	r1, r2, #0
 800f236:	0018      	movs	r0, r3
 800f238:	f000 fcec 	bl	800fc14 <GasIndexAlgorithm__adaptive_lowpass__process>
 800f23c:	1c02      	adds	r2, r0, #0
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f246:	21fc      	movs	r1, #252	@ 0xfc
 800f248:	0589      	lsls	r1, r1, #22
 800f24a:	1c18      	adds	r0, r3, #0
 800f24c:	f7f1 f970 	bl	8000530 <__aeabi_fcmplt>
 800f250:	1e03      	subs	r3, r0, #0
 800f252:	d003      	beq.n	800f25c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	22fc      	movs	r2, #252	@ 0xfc
 800f258:	0592      	lsls	r2, r2, #22
 800f25a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f260:	2100      	movs	r1, #0
 800f262:	1c18      	adds	r0, r3, #0
 800f264:	f7f1 f978 	bl	8000558 <__aeabi_fcmpgt>
 800f268:	1e03      	subs	r3, r0, #0
 800f26a:	d015      	beq.n	800f298 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	1c11      	adds	r1, r2, #0
 800f274:	0018      	movs	r0, r3
 800f276:	f000 fa4f 	bl	800f718 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	0018      	movs	r0, r3
 800f27e:	f000 f8e5 	bl	800f44c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800f282:	1c04      	adds	r4, r0, #0
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	0018      	movs	r0, r3
 800f288:	f000 f8ea 	bl	800f460 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800f28c:	1c02      	adds	r2, r0, #0
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	1c21      	adds	r1, r4, #0
 800f292:	0018      	movs	r0, r3
 800f294:	f000 fb7a 	bl	800f98c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f29c:	21fc      	movs	r1, #252	@ 0xfc
 800f29e:	0589      	lsls	r1, r1, #22
 800f2a0:	1c18      	adds	r0, r3, #0
 800f2a2:	f7f1 fb0d 	bl	80008c0 <__aeabi_fadd>
 800f2a6:	1c03      	adds	r3, r0, #0
 800f2a8:	1c18      	adds	r0, r3, #0
 800f2aa:	f7f2 fa9d 	bl	80017e8 <__aeabi_f2iz>
 800f2ae:	0002      	movs	r2, r0
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	601a      	str	r2, [r3, #0]
    return;
 800f2b4:	46c0      	nop			@ (mov r8, r8)
}
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	b005      	add	sp, #20
 800f2ba:	bd90      	pop	{r4, r7, pc}
 800f2bc:	42340000 	.word	0x42340000
 800f2c0:	0000fde7 	.word	0x0000fde7
 800f2c4:	00007fff 	.word	0x00007fff

0800f2c8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800f2c8:	b5b0      	push	{r4, r5, r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	223c      	movs	r2, #60	@ 0x3c
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4952      	ldr	r1, [pc, #328]	@ (800f43c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f2f2:	1c18      	adds	r0, r3, #0
 800f2f4:	f7f1 fcd6 	bl	8000ca4 <__aeabi_fdiv>
 800f2f8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f2fa:	2188      	movs	r1, #136	@ 0x88
 800f2fc:	05c9      	lsls	r1, r1, #23
 800f2fe:	1c18      	adds	r0, r3, #0
 800f300:	f7f1 fe9e 	bl	8001040 <__aeabi_fmul>
 800f304:	1c03      	adds	r3, r0, #0
 800f306:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	494a      	ldr	r1, [pc, #296]	@ (800f43c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f312:	1c18      	adds	r0, r3, #0
 800f314:	f7f1 fcc6 	bl	8000ca4 <__aeabi_fdiv>
 800f318:	1c03      	adds	r3, r0, #0
 800f31a:	1c19      	adds	r1, r3, #0
 800f31c:	1c20      	adds	r0, r4, #0
 800f31e:	f7f1 facf 	bl	80008c0 <__aeabi_fadd>
 800f322:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f324:	1c19      	adds	r1, r3, #0
 800f326:	1c28      	adds	r0, r5, #0
 800f328:	f7f1 fcbc 	bl	8000ca4 <__aeabi_fdiv>
 800f32c:	1c03      	adds	r3, r0, #0
 800f32e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	4940      	ldr	r1, [pc, #256]	@ (800f43c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f33a:	1c18      	adds	r0, r3, #0
 800f33c:	f7f1 fcb2 	bl	8000ca4 <__aeabi_fdiv>
 800f340:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f342:	2185      	movs	r1, #133	@ 0x85
 800f344:	05c9      	lsls	r1, r1, #23
 800f346:	1c18      	adds	r0, r3, #0
 800f348:	f7f1 fe7a 	bl	8001040 <__aeabi_fmul>
 800f34c:	1c03      	adds	r3, r0, #0
 800f34e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	4938      	ldr	r1, [pc, #224]	@ (800f43c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800f35a:	1c18      	adds	r0, r3, #0
 800f35c:	f7f1 fca2 	bl	8000ca4 <__aeabi_fdiv>
 800f360:	1c03      	adds	r3, r0, #0
 800f362:	1c19      	adds	r1, r3, #0
 800f364:	1c20      	adds	r0, r4, #0
 800f366:	f7f1 faab 	bl	80008c0 <__aeabi_fadd>
 800f36a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800f36c:	1c19      	adds	r1, r3, #0
 800f36e:	1c28      	adds	r0, r5, #0
 800f370:	f7f1 fc98 	bl	8000ca4 <__aeabi_fdiv>
 800f374:	1c03      	adds	r3, r0, #0
 800f376:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d118      	bne.n	800f3b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f388:	2188      	movs	r1, #136	@ 0x88
 800f38a:	05c9      	lsls	r1, r1, #23
 800f38c:	1c18      	adds	r0, r3, #0
 800f38e:	f7f1 fe57 	bl	8001040 <__aeabi_fmul>
 800f392:	1c03      	adds	r3, r0, #0
 800f394:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800f39a:	4929      	ldr	r1, [pc, #164]	@ (800f440 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800f39c:	1c18      	adds	r0, r3, #0
 800f39e:	f7f1 fa8f 	bl	80008c0 <__aeabi_fadd>
 800f3a2:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f3a4:	1c19      	adds	r1, r3, #0
 800f3a6:	1c20      	adds	r0, r4, #0
 800f3a8:	f7f1 fc7c 	bl	8000ca4 <__aeabi_fdiv>
 800f3ac:	1c03      	adds	r3, r0, #0
 800f3ae:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f3b4:	e017      	b.n	800f3e6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800f3ba:	2188      	movs	r1, #136	@ 0x88
 800f3bc:	05c9      	lsls	r1, r1, #23
 800f3be:	1c18      	adds	r0, r3, #0
 800f3c0:	f7f1 fe3e 	bl	8001040 <__aeabi_fmul>
 800f3c4:	1c03      	adds	r3, r0, #0
 800f3c6:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800f3cc:	491d      	ldr	r1, [pc, #116]	@ (800f444 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800f3ce:	1c18      	adds	r0, r3, #0
 800f3d0:	f7f1 fa76 	bl	80008c0 <__aeabi_fadd>
 800f3d4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800f3d6:	1c19      	adds	r1, r3, #0
 800f3d8:	1c20      	adds	r0, r4, #0
 800f3da:	f7f1 fc63 	bl	8000ca4 <__aeabi_fdiv>
 800f3de:	1c03      	adds	r3, r0, #0
 800f3e0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f3ea:	2185      	movs	r1, #133	@ 0x85
 800f3ec:	05c9      	lsls	r1, r1, #23
 800f3ee:	1c18      	adds	r0, r3, #0
 800f3f0:	f7f1 fe26 	bl	8001040 <__aeabi_fmul>
 800f3f4:	1c03      	adds	r3, r0, #0
 800f3f6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	4912      	ldr	r1, [pc, #72]	@ (800f448 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800f3fe:	1c18      	adds	r0, r3, #0
 800f400:	f7f1 fa5e 	bl	80008c0 <__aeabi_fadd>
 800f404:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800f406:	1c19      	adds	r1, r3, #0
 800f408:	1c20      	adds	r0, r4, #0
 800f40a:	f7f1 fc4b 	bl	8000ca4 <__aeabi_fdiv>
 800f40e:	1c03      	adds	r3, r0, #0
 800f410:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2200      	movs	r2, #0
 800f426:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2200      	movs	r2, #0
 800f432:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800f434:	46c0      	nop			@ (mov r8, r8)
 800f436:	46bd      	mov	sp, r7
 800f438:	b002      	add	sp, #8
 800f43a:	bdb0      	pop	{r4, r5, r7, pc}
 800f43c:	45610000 	.word	0x45610000
 800f440:	44960000 	.word	0x44960000
 800f444:	41a00000 	.word	0x41a00000
 800f448:	451c4000 	.word	0x451c4000

0800f44c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800f458:	1c18      	adds	r0, r3, #0
 800f45a:	46bd      	mov	sp, r7
 800f45c:	b002      	add	sp, #8
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800f470:	1c19      	adds	r1, r3, #0
 800f472:	1c10      	adds	r0, r2, #0
 800f474:	f7f1 fa24 	bl	80008c0 <__aeabi_fadd>
 800f478:	1c03      	adds	r3, r0, #0
}
 800f47a:	1c18      	adds	r0, r3, #0
 800f47c:	46bd      	mov	sp, r7
 800f47e:	b002      	add	sp, #8
 800f480:	bd80      	pop	{r7, pc}

0800f482 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800f482:	b580      	push	{r7, lr}
 800f484:	b082      	sub	sp, #8
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	223c      	movs	r2, #60	@ 0x3c
 800f48e:	5c9b      	ldrb	r3, [r3, r2]
}
 800f490:	0018      	movs	r0, r3
 800f492:	46bd      	mov	sp, r7
 800f494:	b002      	add	sp, #8
 800f496:	bd80      	pop	{r7, pc}

0800f498 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800f498:	b5b0      	push	{r4, r5, r7, lr}
 800f49a:	b08c      	sub	sp, #48	@ 0x30
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800f4a4:	1c19      	adds	r1, r3, #0
 800f4a6:	4895      	ldr	r0, [pc, #596]	@ (800f6fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800f4a8:	f7f1 ff24 	bl	80012f4 <__aeabi_fsub>
 800f4ac:	1c03      	adds	r3, r0, #0
 800f4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f4b4:	1c19      	adds	r1, r3, #0
 800f4b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4b8:	f7f1 f84e 	bl	8000558 <__aeabi_fcmpgt>
 800f4bc:	1e03      	subs	r3, r0, #0
 800f4be:	d00b      	beq.n	800f4d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800f4c8:	1c19      	adds	r1, r3, #0
 800f4ca:	1c10      	adds	r0, r2, #0
 800f4cc:	f7f1 f9f8 	bl	80008c0 <__aeabi_fadd>
 800f4d0:	1c03      	adds	r3, r0, #0
 800f4d2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f4dc:	1c19      	adds	r1, r3, #0
 800f4de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4e0:	f7f1 f83a 	bl	8000558 <__aeabi_fcmpgt>
 800f4e4:	1e03      	subs	r3, r0, #0
 800f4e6:	d00b      	beq.n	800f500 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800f4f0:	1c19      	adds	r1, r3, #0
 800f4f2:	1c10      	adds	r0, r2, #0
 800f4f4:	f7f1 f9e4 	bl	80008c0 <__aeabi_fadd>
 800f4f8:	1c03      	adds	r3, r0, #0
 800f4fa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6959      	ldr	r1, [r3, #20]
 800f504:	4a7e      	ldr	r2, [pc, #504]	@ (800f700 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	0018      	movs	r0, r3
 800f50a:	f000 f9f1 	bl	800f8f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	1c11      	adds	r1, r2, #0
 800f516:	0018      	movs	r0, r3
 800f518:	f000 f9fa 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f51c:	1c03      	adds	r3, r0, #0
 800f51e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800f52c:	1c19      	adds	r1, r3, #0
 800f52e:	1c10      	adds	r0, r2, #0
 800f530:	f7f1 fee0 	bl	80012f4 <__aeabi_fsub>
 800f534:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800f536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f538:	1c18      	adds	r0, r3, #0
 800f53a:	f7f1 fd81 	bl	8001040 <__aeabi_fmul>
 800f53e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800f540:	1c19      	adds	r1, r3, #0
 800f542:	1c20      	adds	r0, r4, #0
 800f544:	f7f1 f9bc 	bl	80008c0 <__aeabi_fadd>
 800f548:	1c03      	adds	r3, r0, #0
 800f54a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f554:	1c19      	adds	r1, r3, #0
 800f556:	486b      	ldr	r0, [pc, #428]	@ (800f704 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f558:	f7f1 fecc 	bl	80012f4 <__aeabi_fsub>
 800f55c:	1c03      	adds	r3, r0, #0
 800f55e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	1c11      	adds	r1, r2, #0
 800f568:	0018      	movs	r0, r3
 800f56a:	f000 f9d1 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f56e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f570:	1c19      	adds	r1, r3, #0
 800f572:	1c28      	adds	r0, r5, #0
 800f574:	f7f1 fd64 	bl	8001040 <__aeabi_fmul>
 800f578:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800f57a:	1c19      	adds	r1, r3, #0
 800f57c:	1c20      	adds	r0, r4, #0
 800f57e:	f7f1 f99f 	bl	80008c0 <__aeabi_fadd>
 800f582:	1c03      	adds	r3, r0, #0
 800f584:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f586:	4a60      	ldr	r2, [pc, #384]	@ (800f708 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f588:	6a39      	ldr	r1, [r7, #32]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	0018      	movs	r0, r3
 800f58e:	f000 f9af 	bl	800f8f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	1c11      	adds	r1, r2, #0
 800f59a:	0018      	movs	r0, r3
 800f59c:	f000 f9b8 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f5a0:	1c03      	adds	r3, r0, #0
 800f5a2:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800f5a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5a6:	69f8      	ldr	r0, [r7, #28]
 800f5a8:	f7f1 fd4a 	bl	8001040 <__aeabi_fmul>
 800f5ac:	1c03      	adds	r3, r0, #0
 800f5ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6999      	ldr	r1, [r3, #24]
 800f5b8:	4a51      	ldr	r2, [pc, #324]	@ (800f700 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	0018      	movs	r0, r3
 800f5be:	f000 f997 	bl	800f8f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	1c11      	adds	r1, r2, #0
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f000 f9a0 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f5d0:	1c03      	adds	r3, r0, #0
 800f5d2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800f5e0:	1c19      	adds	r1, r3, #0
 800f5e2:	1c10      	adds	r0, r2, #0
 800f5e4:	f7f1 fe86 	bl	80012f4 <__aeabi_fsub>
 800f5e8:	1c03      	adds	r3, r0, #0
 800f5ea:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800f5ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5ee:	69b8      	ldr	r0, [r7, #24]
 800f5f0:	f7f1 fe80 	bl	80012f4 <__aeabi_fsub>
 800f5f4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800f5f6:	1c19      	adds	r1, r3, #0
 800f5f8:	1c28      	adds	r0, r5, #0
 800f5fa:	f7f1 fd21 	bl	8001040 <__aeabi_fmul>
 800f5fe:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800f600:	1c19      	adds	r1, r3, #0
 800f602:	1c20      	adds	r0, r4, #0
 800f604:	f7f1 f95c 	bl	80008c0 <__aeabi_fadd>
 800f608:	1c03      	adds	r3, r0, #0
 800f60a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800f614:	1c19      	adds	r1, r3, #0
 800f616:	483b      	ldr	r0, [pc, #236]	@ (800f704 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800f618:	f7f1 fe6c 	bl	80012f4 <__aeabi_fsub>
 800f61c:	1c03      	adds	r3, r0, #0
 800f61e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	1c11      	adds	r1, r2, #0
 800f628:	0018      	movs	r0, r3
 800f62a:	f000 f971 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f62e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800f630:	1c19      	adds	r1, r3, #0
 800f632:	1c28      	adds	r0, r5, #0
 800f634:	f7f1 fd04 	bl	8001040 <__aeabi_fmul>
 800f638:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800f63a:	1c19      	adds	r1, r3, #0
 800f63c:	1c20      	adds	r0, r4, #0
 800f63e:	f7f1 f93f 	bl	80008c0 <__aeabi_fadd>
 800f642:	1c03      	adds	r3, r0, #0
 800f644:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800f646:	4a30      	ldr	r2, [pc, #192]	@ (800f708 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800f648:	6939      	ldr	r1, [r7, #16]
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	0018      	movs	r0, r3
 800f64e:	f000 f94f 	bl	800f8f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	1c11      	adds	r1, r2, #0
 800f65a:	0018      	movs	r0, r3
 800f65c:	f000 f958 	bl	800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800f660:	1c03      	adds	r3, r0, #0
 800f662:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800f664:	6979      	ldr	r1, [r7, #20]
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f7f1 fcea 	bl	8001040 <__aeabi_fmul>
 800f66c:	1c03      	adds	r3, r0, #0
 800f66e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	4923      	ldr	r1, [pc, #140]	@ (800f70c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800f67e:	1c18      	adds	r0, r3, #0
 800f680:	f7f1 fb10 	bl	8000ca4 <__aeabi_fdiv>
 800f684:	1c03      	adds	r3, r0, #0
 800f686:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800f688:	69f9      	ldr	r1, [r7, #28]
 800f68a:	20fe      	movs	r0, #254	@ 0xfe
 800f68c:	0580      	lsls	r0, r0, #22
 800f68e:	f7f1 fe31 	bl	80012f4 <__aeabi_fsub>
 800f692:	1c03      	adds	r3, r0, #0
 800f694:	491e      	ldr	r1, [pc, #120]	@ (800f710 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800f696:	1c18      	adds	r0, r3, #0
 800f698:	f7f1 fcd2 	bl	8001040 <__aeabi_fmul>
 800f69c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800f69e:	491d      	ldr	r1, [pc, #116]	@ (800f714 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800f6a0:	1c18      	adds	r0, r3, #0
 800f6a2:	f7f1 fe27 	bl	80012f4 <__aeabi_fsub>
 800f6a6:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800f6a8:	1c19      	adds	r1, r3, #0
 800f6aa:	1c28      	adds	r0, r5, #0
 800f6ac:	f7f1 fcc8 	bl	8001040 <__aeabi_fmul>
 800f6b0:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800f6b2:	1c19      	adds	r1, r3, #0
 800f6b4:	1c20      	adds	r0, r4, #0
 800f6b6:	f7f1 f903 	bl	80008c0 <__aeabi_fadd>
 800f6ba:	1c03      	adds	r3, r0, #0
 800f6bc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	1c18      	adds	r0, r3, #0
 800f6ca:	f7f0 ff31 	bl	8000530 <__aeabi_fcmplt>
 800f6ce:	1e03      	subs	r3, r0, #0
 800f6d0:	d002      	beq.n	800f6d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800f6e0:	1c19      	adds	r1, r3, #0
 800f6e2:	1c10      	adds	r0, r2, #0
 800f6e4:	f7f0 ff38 	bl	8000558 <__aeabi_fcmpgt>
 800f6e8:	1e03      	subs	r3, r0, #0
 800f6ea:	d100      	bne.n	800f6ee <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800f6ec:	e002      	b.n	800f6f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f6f4:	46c0      	nop			@ (mov r8, r8)
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	b00c      	add	sp, #48	@ 0x30
 800f6fa:	bdb0      	pop	{r4, r5, r7, pc}
 800f6fc:	46fffe00 	.word	0x46fffe00
 800f700:	3c23d70a 	.word	0x3c23d70a
 800f704:	43ff0000 	.word	0x43ff0000
 800f708:	3db851ec 	.word	0x3db851ec
 800f70c:	42700000 	.word	0x42700000
 800f710:	3fa66666 	.word	0x3fa66666
 800f714:	3e99999a 	.word	0x3e99999a

0800f718 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800f718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71a:	b087      	sub	sp, #28
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	223c      	movs	r2, #60	@ 0x3c
 800f726:	5c9b      	ldrb	r3, [r3, r2]
 800f728:	2201      	movs	r2, #1
 800f72a:	4053      	eors	r3, r2
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00a      	beq.n	800f748 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	223c      	movs	r2, #60	@ 0x3c
 800f736:	2101      	movs	r1, #1
 800f738:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800f746:	e0c8      	b.n	800f8da <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f74c:	4965      	ldr	r1, [pc, #404]	@ (800f8e4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800f74e:	1c18      	adds	r0, r3, #0
 800f750:	f7f0 ff0c 	bl	800056c <__aeabi_fcmpge>
 800f754:	1e03      	subs	r3, r0, #0
 800f756:	d107      	bne.n	800f768 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800f75c:	4962      	ldr	r1, [pc, #392]	@ (800f8e8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800f75e:	1c18      	adds	r0, r3, #0
 800f760:	f7f0 fef0 	bl	8000544 <__aeabi_fcmple>
 800f764:	1e03      	subs	r3, r0, #0
 800f766:	d00e      	beq.n	800f786 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800f770:	1c19      	adds	r1, r3, #0
 800f772:	1c10      	adds	r0, r2, #0
 800f774:	f7f1 f8a4 	bl	80008c0 <__aeabi_fadd>
 800f778:	1c03      	adds	r3, r0, #0
 800f77a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f78a:	1c19      	adds	r1, r3, #0
 800f78c:	6838      	ldr	r0, [r7, #0]
 800f78e:	f7f1 fdb1 	bl	80012f4 <__aeabi_fsub>
 800f792:	1c03      	adds	r3, r0, #0
 800f794:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	0018      	movs	r0, r3
 800f79a:	f7ff fe7d 	bl	800f498 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7a2:	1c19      	adds	r1, r3, #0
 800f7a4:	6838      	ldr	r0, [r7, #0]
 800f7a6:	f7f1 fda5 	bl	80012f4 <__aeabi_fsub>
 800f7aa:	1c03      	adds	r3, r0, #0
 800f7ac:	2185      	movs	r1, #133	@ 0x85
 800f7ae:	05c9      	lsls	r1, r1, #23
 800f7b0:	1c18      	adds	r0, r3, #0
 800f7b2:	f7f1 fa77 	bl	8000ca4 <__aeabi_fdiv>
 800f7b6:	1c03      	adds	r3, r0, #0
 800f7b8:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7f0 feb7 	bl	8000530 <__aeabi_fcmplt>
 800f7c2:	1e03      	subs	r3, r0, #0
 800f7c4:	d008      	beq.n	800f7d8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7ca:	68f9      	ldr	r1, [r7, #12]
 800f7cc:	1c18      	adds	r0, r3, #0
 800f7ce:	f7f1 fd91 	bl	80012f4 <__aeabi_fsub>
 800f7d2:	1c03      	adds	r3, r0, #0
 800f7d4:	617b      	str	r3, [r7, #20]
 800f7d6:	e007      	b.n	800f7e8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7dc:	1c19      	adds	r1, r3, #0
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f7f1 f86e 	bl	80008c0 <__aeabi_fadd>
 800f7e4:	1c03      	adds	r3, r0, #0
 800f7e6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800f7e8:	23fe      	movs	r3, #254	@ 0xfe
 800f7ea:	059b      	lsls	r3, r3, #22
 800f7ec:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800f7ee:	493f      	ldr	r1, [pc, #252]	@ (800f8ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f7f0:	6978      	ldr	r0, [r7, #20]
 800f7f2:	f7f0 feb1 	bl	8000558 <__aeabi_fcmpgt>
 800f7f6:	1e03      	subs	r3, r0, #0
 800f7f8:	d010      	beq.n	800f81c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800f7fa:	493c      	ldr	r1, [pc, #240]	@ (800f8ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f7fc:	6978      	ldr	r0, [r7, #20]
 800f7fe:	f7f1 fa51 	bl	8000ca4 <__aeabi_fdiv>
 800f802:	1c03      	adds	r3, r0, #0
 800f804:	1c1c      	adds	r4, r3, #0
 800f806:	4939      	ldr	r1, [pc, #228]	@ (800f8ec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800f808:	6978      	ldr	r0, [r7, #20]
 800f80a:	f7f1 fa4b 	bl	8000ca4 <__aeabi_fdiv>
 800f80e:	1c03      	adds	r3, r0, #0
 800f810:	1c19      	adds	r1, r3, #0
 800f812:	1c20      	adds	r0, r4, #0
 800f814:	f7f1 fc14 	bl	8001040 <__aeabi_fmul>
 800f818:	1c03      	adds	r3, r0, #0
 800f81a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800f820:	1c19      	adds	r1, r3, #0
 800f822:	2085      	movs	r0, #133	@ 0x85
 800f824:	05c0      	lsls	r0, r0, #23
 800f826:	f7f1 fd65 	bl	80012f4 <__aeabi_fsub>
 800f82a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800f82c:	6939      	ldr	r1, [r7, #16]
 800f82e:	1c18      	adds	r0, r3, #0
 800f830:	f7f1 fc06 	bl	8001040 <__aeabi_fmul>
 800f834:	1c03      	adds	r3, r0, #0
 800f836:	1c18      	adds	r0, r3, #0
 800f838:	f018 fd9e 	bl	8028378 <sqrtf>
 800f83c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800f846:	2185      	movs	r1, #133	@ 0x85
 800f848:	05c9      	lsls	r1, r1, #23
 800f84a:	6938      	ldr	r0, [r7, #16]
 800f84c:	f7f1 fbf8 	bl	8001040 <__aeabi_fmul>
 800f850:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800f852:	1c19      	adds	r1, r3, #0
 800f854:	1c28      	adds	r0, r5, #0
 800f856:	f7f1 fa25 	bl	8000ca4 <__aeabi_fdiv>
 800f85a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800f85c:	1c19      	adds	r1, r3, #0
 800f85e:	1c20      	adds	r0, r4, #0
 800f860:	f7f1 fbee 	bl	8001040 <__aeabi_fmul>
 800f864:	1c03      	adds	r3, r0, #0
 800f866:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f86c:	68f9      	ldr	r1, [r7, #12]
 800f86e:	1c18      	adds	r0, r3, #0
 800f870:	f7f1 fbe6 	bl	8001040 <__aeabi_fmul>
 800f874:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800f876:	6939      	ldr	r1, [r7, #16]
 800f878:	1c18      	adds	r0, r3, #0
 800f87a:	f7f1 fa13 	bl	8000ca4 <__aeabi_fdiv>
 800f87e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800f880:	68f9      	ldr	r1, [r7, #12]
 800f882:	1c18      	adds	r0, r3, #0
 800f884:	f7f1 fbdc 	bl	8001040 <__aeabi_fmul>
 800f888:	1c03      	adds	r3, r0, #0
             sqrtf(
 800f88a:	1c19      	adds	r1, r3, #0
 800f88c:	1c20      	adds	r0, r4, #0
 800f88e:	f7f1 f817 	bl	80008c0 <__aeabi_fadd>
 800f892:	1c03      	adds	r3, r0, #0
 800f894:	1c18      	adds	r0, r3, #0
 800f896:	f018 fd6f 	bl	8028378 <sqrtf>
 800f89a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800f89c:	1c19      	adds	r1, r3, #0
 800f89e:	1c30      	adds	r0, r6, #0
 800f8a0:	f7f1 fbce 	bl	8001040 <__aeabi_fmul>
 800f8a4:	1c03      	adds	r3, r0, #0
 800f8a6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f8b4:	68f9      	ldr	r1, [r7, #12]
 800f8b6:	1c18      	adds	r0, r3, #0
 800f8b8:	f7f1 fbc2 	bl	8001040 <__aeabi_fmul>
 800f8bc:	1c03      	adds	r3, r0, #0
 800f8be:	2182      	movs	r1, #130	@ 0x82
 800f8c0:	05c9      	lsls	r1, r1, #23
 800f8c2:	1c18      	adds	r0, r3, #0
 800f8c4:	f7f1 f9ee 	bl	8000ca4 <__aeabi_fdiv>
 800f8c8:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800f8ca:	1c19      	adds	r1, r3, #0
 800f8cc:	1c20      	adds	r0, r4, #0
 800f8ce:	f7f0 fff7 	bl	80008c0 <__aeabi_fadd>
 800f8d2:	1c03      	adds	r3, r0, #0
 800f8d4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	b007      	add	sp, #28
 800f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e2:	46c0      	nop			@ (mov r8, r8)
 800f8e4:	42c80000 	.word	0x42c80000
 800f8e8:	c2c80000 	.word	0xc2c80000
 800f8ec:	44b40000 	.word	0x44b40000

0800f8f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	68ba      	ldr	r2, [r7, #8]
 800f906:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f908:	46c0      	nop			@ (mov r8, r8)
 800f90a:	46bd      	mov	sp, r7
 800f90c:	b004      	add	sp, #16
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f922:	1c19      	adds	r1, r3, #0
 800f924:	6838      	ldr	r0, [r7, #0]
 800f926:	f7f1 fce5 	bl	80012f4 <__aeabi_fsub>
 800f92a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800f92c:	1c19      	adds	r1, r3, #0
 800f92e:	1c20      	adds	r0, r4, #0
 800f930:	f7f1 fb86 	bl	8001040 <__aeabi_fmul>
 800f934:	1c03      	adds	r3, r0, #0
 800f936:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800f938:	4912      	ldr	r1, [pc, #72]	@ (800f984 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7f0 fdf8 	bl	8000530 <__aeabi_fcmplt>
 800f940:	1e03      	subs	r3, r0, #0
 800f942:	d002      	beq.n	800f94a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800f944:	23fe      	movs	r3, #254	@ 0xfe
 800f946:	059b      	lsls	r3, r3, #22
 800f948:	e018      	b.n	800f97c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800f94a:	490f      	ldr	r1, [pc, #60]	@ (800f988 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800f94c:	68f8      	ldr	r0, [r7, #12]
 800f94e:	f7f0 fe03 	bl	8000558 <__aeabi_fcmpgt>
 800f952:	1e03      	subs	r3, r0, #0
 800f954:	d001      	beq.n	800f95a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800f956:	2300      	movs	r3, #0
 800f958:	e010      	b.n	800f97c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	1c18      	adds	r0, r3, #0
 800f95e:	f018 fce3 	bl	8028328 <expf>
 800f962:	1c03      	adds	r3, r0, #0
 800f964:	21fe      	movs	r1, #254	@ 0xfe
 800f966:	0589      	lsls	r1, r1, #22
 800f968:	1c18      	adds	r0, r3, #0
 800f96a:	f7f0 ffa9 	bl	80008c0 <__aeabi_fadd>
 800f96e:	1c03      	adds	r3, r0, #0
 800f970:	1c19      	adds	r1, r3, #0
 800f972:	20fe      	movs	r0, #254	@ 0xfe
 800f974:	0580      	lsls	r0, r0, #22
 800f976:	f7f1 f995 	bl	8000ca4 <__aeabi_fdiv>
 800f97a:	1c03      	adds	r3, r0, #0
    }
}
 800f97c:	1c18      	adds	r0, r3, #0
 800f97e:	46bd      	mov	sp, r7
 800f980:	b005      	add	sp, #20
 800f982:	bd90      	pop	{r4, r7, pc}
 800f984:	c2480000 	.word	0xc2480000
 800f988:	42480000 	.word	0x42480000

0800f98c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b084      	sub	sp, #16
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	68ba      	ldr	r2, [r7, #8]
 800f99c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	687a      	ldr	r2, [r7, #4]
 800f9a2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f9a4:	46c0      	nop			@ (mov r8, r8)
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	b004      	add	sp, #16
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800f9ac:	b590      	push	{r4, r7, lr}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2b01      	cmp	r3, #1
 800f9bc:	d114      	bne.n	800f9e8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9c2:	1c19      	adds	r1, r3, #0
 800f9c4:	6838      	ldr	r0, [r7, #0]
 800f9c6:	f7f1 fc95 	bl	80012f4 <__aeabi_fsub>
 800f9ca:	1c03      	adds	r3, r0, #0
 800f9cc:	4918      	ldr	r1, [pc, #96]	@ (800fa30 <GasIndexAlgorithm__mox_model__process+0x84>)
 800f9ce:	1c18      	adds	r0, r3, #0
 800f9d0:	f7f1 f968 	bl	8000ca4 <__aeabi_fdiv>
 800f9d4:	1c03      	adds	r3, r0, #0
 800f9d6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800f9dc:	1c19      	adds	r1, r3, #0
 800f9de:	1c10      	adds	r0, r2, #0
 800f9e0:	f7f1 fb2e 	bl	8001040 <__aeabi_fmul>
 800f9e4:	1c03      	adds	r3, r0, #0
 800f9e6:	e01f      	b.n	800fa28 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9ec:	1c19      	adds	r1, r3, #0
 800f9ee:	6838      	ldr	r0, [r7, #0]
 800f9f0:	f7f1 fc80 	bl	80012f4 <__aeabi_fsub>
 800f9f4:	1c03      	adds	r3, r0, #0
 800f9f6:	1c1a      	adds	r2, r3, #0
 800f9f8:	2380      	movs	r3, #128	@ 0x80
 800f9fa:	061b      	lsls	r3, r3, #24
 800f9fc:	4053      	eors	r3, r2
 800f9fe:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa04:	490b      	ldr	r1, [pc, #44]	@ (800fa34 <GasIndexAlgorithm__mox_model__process+0x88>)
 800fa06:	1c18      	adds	r0, r3, #0
 800fa08:	f7f0 ff5a 	bl	80008c0 <__aeabi_fadd>
 800fa0c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800fa0e:	1c19      	adds	r1, r3, #0
 800fa10:	1c20      	adds	r0, r4, #0
 800fa12:	f7f1 f947 	bl	8000ca4 <__aeabi_fdiv>
 800fa16:	1c03      	adds	r3, r0, #0
 800fa18:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800fa1e:	1c19      	adds	r1, r3, #0
 800fa20:	1c10      	adds	r0, r2, #0
 800fa22:	f7f1 fb0d 	bl	8001040 <__aeabi_fmul>
 800fa26:	1c03      	adds	r3, r0, #0
    }
}
 800fa28:	1c18      	adds	r0, r3, #0
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	b003      	add	sp, #12
 800fa2e:	bd90      	pop	{r4, r7, pc}
 800fa30:	44fa0000 	.word	0x44fa0000
 800fa34:	435c0000 	.word	0x435c0000

0800fa38 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2180      	movs	r1, #128	@ 0x80
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2184      	movs	r1, #132	@ 0x84
 800fa52:	68ba      	ldr	r2, [r7, #8]
 800fa54:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2188      	movs	r1, #136	@ 0x88
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	505a      	str	r2, [r3, r1]
}
 800fa5e:	46c0      	nop			@ (mov r8, r8)
 800fa60:	46bd      	mov	sp, r7
 800fa62:	b004      	add	sp, #16
 800fa64:	bd80      	pop	{r7, pc}
	...

0800fa68 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2280      	movs	r2, #128	@ 0x80
 800fa76:	589c      	ldr	r4, [r3, r2]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2284      	movs	r2, #132	@ 0x84
 800fa7c:	589b      	ldr	r3, [r3, r2]
 800fa7e:	1c19      	adds	r1, r3, #0
 800fa80:	6838      	ldr	r0, [r7, #0]
 800fa82:	f7f1 fc37 	bl	80012f4 <__aeabi_fsub>
 800fa86:	1c03      	adds	r3, r0, #0
 800fa88:	1c19      	adds	r1, r3, #0
 800fa8a:	1c20      	adds	r0, r4, #0
 800fa8c:	f7f1 fad8 	bl	8001040 <__aeabi_fmul>
 800fa90:	1c03      	adds	r3, r0, #0
 800fa92:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800fa94:	4940      	ldr	r1, [pc, #256]	@ (800fb98 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800fa96:	68b8      	ldr	r0, [r7, #8]
 800fa98:	f7f0 fd4a 	bl	8000530 <__aeabi_fcmplt>
 800fa9c:	1e03      	subs	r3, r0, #0
 800fa9e:	d001      	beq.n	800faa4 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800faa0:	4b3e      	ldr	r3, [pc, #248]	@ (800fb9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800faa2:	e075      	b.n	800fb90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800faa4:	493e      	ldr	r1, [pc, #248]	@ (800fba0 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800faa6:	68b8      	ldr	r0, [r7, #8]
 800faa8:	f7f0 fd56 	bl	8000558 <__aeabi_fcmpgt>
 800faac:	1e03      	subs	r3, r0, #0
 800faae:	d001      	beq.n	800fab4 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800fab0:	2300      	movs	r3, #0
 800fab2:	e06d      	b.n	800fb90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800fab4:	2100      	movs	r1, #0
 800fab6:	6838      	ldr	r0, [r7, #0]
 800fab8:	f7f0 fd58 	bl	800056c <__aeabi_fcmpge>
 800fabc:	1e03      	subs	r3, r0, #0
 800fabe:	d047      	beq.n	800fb50 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2288      	movs	r2, #136	@ 0x88
 800fac4:	589b      	ldr	r3, [r3, r2]
 800fac6:	21fe      	movs	r1, #254	@ 0xfe
 800fac8:	0589      	lsls	r1, r1, #22
 800faca:	1c18      	adds	r0, r3, #0
 800facc:	f7f0 fd2a 	bl	8000524 <__aeabi_fcmpeq>
 800fad0:	1e03      	subs	r3, r0, #0
 800fad2:	d00e      	beq.n	800faf2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	1c19      	adds	r1, r3, #0
 800fada:	20fe      	movs	r0, #254	@ 0xfe
 800fadc:	0580      	lsls	r0, r0, #22
 800fade:	f7f1 fc09 	bl	80012f4 <__aeabi_fsub>
 800fae2:	1c03      	adds	r3, r0, #0
 800fae4:	492f      	ldr	r1, [pc, #188]	@ (800fba4 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800fae6:	1c18      	adds	r0, r3, #0
 800fae8:	f7f1 faaa 	bl	8001040 <__aeabi_fmul>
 800faec:	1c03      	adds	r3, r0, #0
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	e012      	b.n	800fb18 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	689b      	ldr	r3, [r3, #8]
 800faf6:	492c      	ldr	r1, [pc, #176]	@ (800fba8 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800faf8:	1c18      	adds	r0, r3, #0
 800fafa:	f7f1 faa1 	bl	8001040 <__aeabi_fmul>
 800fafe:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800fb00:	1c19      	adds	r1, r3, #0
 800fb02:	4826      	ldr	r0, [pc, #152]	@ (800fb9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb04:	f7f1 fbf6 	bl	80012f4 <__aeabi_fsub>
 800fb08:	1c03      	adds	r3, r0, #0
 800fb0a:	2181      	movs	r1, #129	@ 0x81
 800fb0c:	05c9      	lsls	r1, r1, #23
 800fb0e:	1c18      	adds	r0, r3, #0
 800fb10:	f7f1 f8c8 	bl	8000ca4 <__aeabi_fdiv>
 800fb14:	1c03      	adds	r3, r0, #0
 800fb16:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800fb18:	4920      	ldr	r1, [pc, #128]	@ (800fb9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb1a:	68f8      	ldr	r0, [r7, #12]
 800fb1c:	f7f0 fed0 	bl	80008c0 <__aeabi_fadd>
 800fb20:	1c03      	adds	r3, r0, #0
 800fb22:	1c1c      	adds	r4, r3, #0
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	1c18      	adds	r0, r3, #0
 800fb28:	f018 fbfe 	bl	8028328 <expf>
 800fb2c:	1c03      	adds	r3, r0, #0
 800fb2e:	21fe      	movs	r1, #254	@ 0xfe
 800fb30:	0589      	lsls	r1, r1, #22
 800fb32:	1c18      	adds	r0, r3, #0
 800fb34:	f7f0 fec4 	bl	80008c0 <__aeabi_fadd>
 800fb38:	1c03      	adds	r3, r0, #0
 800fb3a:	1c19      	adds	r1, r3, #0
 800fb3c:	1c20      	adds	r0, r4, #0
 800fb3e:	f7f1 f8b1 	bl	8000ca4 <__aeabi_fdiv>
 800fb42:	1c03      	adds	r3, r0, #0
 800fb44:	68f9      	ldr	r1, [r7, #12]
 800fb46:	1c18      	adds	r0, r3, #0
 800fb48:	f7f1 fbd4 	bl	80012f4 <__aeabi_fsub>
 800fb4c:	1c03      	adds	r3, r0, #0
 800fb4e:	e01f      	b.n	800fb90 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2188      	movs	r1, #136	@ 0x88
 800fb58:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800fb5a:	1c19      	adds	r1, r3, #0
 800fb5c:	1c10      	adds	r0, r2, #0
 800fb5e:	f7f1 f8a1 	bl	8000ca4 <__aeabi_fdiv>
 800fb62:	1c03      	adds	r3, r0, #0
 800fb64:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	1c18      	adds	r0, r3, #0
 800fb6a:	f018 fbdd 	bl	8028328 <expf>
 800fb6e:	1c03      	adds	r3, r0, #0
 800fb70:	21fe      	movs	r1, #254	@ 0xfe
 800fb72:	0589      	lsls	r1, r1, #22
 800fb74:	1c18      	adds	r0, r3, #0
 800fb76:	f7f0 fea3 	bl	80008c0 <__aeabi_fadd>
 800fb7a:	1c03      	adds	r3, r0, #0
 800fb7c:	1c19      	adds	r1, r3, #0
 800fb7e:	4807      	ldr	r0, [pc, #28]	@ (800fb9c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800fb80:	f7f1 f890 	bl	8000ca4 <__aeabi_fdiv>
 800fb84:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800fb86:	1c19      	adds	r1, r3, #0
 800fb88:	1c20      	adds	r0, r4, #0
 800fb8a:	f7f1 fa59 	bl	8001040 <__aeabi_fmul>
 800fb8e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800fb90:	1c18      	adds	r0, r3, #0
 800fb92:	46bd      	mov	sp, r7
 800fb94:	b005      	add	sp, #20
 800fb96:	bd90      	pop	{r4, r7, pc}
 800fb98:	c2480000 	.word	0xc2480000
 800fb9c:	43fa0000 	.word	0x43fa0000
 800fba0:	42480000 	.word	0x42480000
 800fba4:	3f8041ab 	.word	0x3f8041ab
 800fba8:	40a00000 	.word	0x40a00000

0800fbac <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b083      	sub	sp, #12
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	4913      	ldr	r1, [pc, #76]	@ (800fc0c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800fbbe:	1c18      	adds	r0, r3, #0
 800fbc0:	f7f0 fe7e 	bl	80008c0 <__aeabi_fadd>
 800fbc4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fbc6:	1c19      	adds	r1, r3, #0
 800fbc8:	1c20      	adds	r0, r4, #0
 800fbca:	f7f1 f86b 	bl	8000ca4 <__aeabi_fdiv>
 800fbce:	1c03      	adds	r3, r0, #0
 800fbd0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	228c      	movs	r2, #140	@ 0x8c
 800fbd6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	490b      	ldr	r1, [pc, #44]	@ (800fc10 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800fbe2:	1c18      	adds	r0, r3, #0
 800fbe4:	f7f0 fe6c 	bl	80008c0 <__aeabi_fadd>
 800fbe8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800fbea:	1c19      	adds	r1, r3, #0
 800fbec:	1c20      	adds	r0, r4, #0
 800fbee:	f7f1 f859 	bl	8000ca4 <__aeabi_fdiv>
 800fbf2:	1c03      	adds	r3, r0, #0
 800fbf4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2290      	movs	r2, #144	@ 0x90
 800fbfa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2294      	movs	r2, #148	@ 0x94
 800fc00:	2100      	movs	r1, #0
 800fc02:	5499      	strb	r1, [r3, r2]
}
 800fc04:	46c0      	nop			@ (mov r8, r8)
 800fc06:	46bd      	mov	sp, r7
 800fc08:	b003      	add	sp, #12
 800fc0a:	bd90      	pop	{r4, r7, pc}
 800fc0c:	41a00000 	.word	0x41a00000
 800fc10:	43fa0000 	.word	0x43fa0000

0800fc14 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800fc14:	b590      	push	{r4, r7, lr}
 800fc16:	b087      	sub	sp, #28
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2294      	movs	r2, #148	@ 0x94
 800fc22:	5c9b      	ldrb	r3, [r3, r2]
 800fc24:	2201      	movs	r2, #1
 800fc26:	4053      	eors	r3, r2
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00f      	beq.n	800fc4e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2198      	movs	r1, #152	@ 0x98
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	219c      	movs	r1, #156	@ 0x9c
 800fc3a:	683a      	ldr	r2, [r7, #0]
 800fc3c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	21a0      	movs	r1, #160	@ 0xa0
 800fc42:	683a      	ldr	r2, [r7, #0]
 800fc44:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2294      	movs	r2, #148	@ 0x94
 800fc4a:	2101      	movs	r1, #1
 800fc4c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	228c      	movs	r2, #140	@ 0x8c
 800fc52:	589b      	ldr	r3, [r3, r2]
 800fc54:	1c19      	adds	r1, r3, #0
 800fc56:	20fe      	movs	r0, #254	@ 0xfe
 800fc58:	0580      	lsls	r0, r0, #22
 800fc5a:	f7f1 fb4b 	bl	80012f4 <__aeabi_fsub>
 800fc5e:	1c03      	adds	r3, r0, #0
 800fc60:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2298      	movs	r2, #152	@ 0x98
 800fc66:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800fc68:	1c19      	adds	r1, r3, #0
 800fc6a:	f7f1 f9e9 	bl	8001040 <__aeabi_fmul>
 800fc6e:	1c03      	adds	r3, r0, #0
 800fc70:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	228c      	movs	r2, #140	@ 0x8c
 800fc76:	589b      	ldr	r3, [r3, r2]
 800fc78:	6839      	ldr	r1, [r7, #0]
 800fc7a:	1c18      	adds	r0, r3, #0
 800fc7c:	f7f1 f9e0 	bl	8001040 <__aeabi_fmul>
 800fc80:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800fc82:	1c19      	adds	r1, r3, #0
 800fc84:	1c20      	adds	r0, r4, #0
 800fc86:	f7f0 fe1b 	bl	80008c0 <__aeabi_fadd>
 800fc8a:	1c03      	adds	r3, r0, #0
 800fc8c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2298      	movs	r2, #152	@ 0x98
 800fc92:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2290      	movs	r2, #144	@ 0x90
 800fc98:	589b      	ldr	r3, [r3, r2]
 800fc9a:	1c19      	adds	r1, r3, #0
 800fc9c:	20fe      	movs	r0, #254	@ 0xfe
 800fc9e:	0580      	lsls	r0, r0, #22
 800fca0:	f7f1 fb28 	bl	80012f4 <__aeabi_fsub>
 800fca4:	1c03      	adds	r3, r0, #0
 800fca6:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	229c      	movs	r2, #156	@ 0x9c
 800fcac:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800fcae:	1c19      	adds	r1, r3, #0
 800fcb0:	f7f1 f9c6 	bl	8001040 <__aeabi_fmul>
 800fcb4:	1c03      	adds	r3, r0, #0
 800fcb6:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2290      	movs	r2, #144	@ 0x90
 800fcbc:	589b      	ldr	r3, [r3, r2]
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	1c18      	adds	r0, r3, #0
 800fcc2:	f7f1 f9bd 	bl	8001040 <__aeabi_fmul>
 800fcc6:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800fcc8:	1c19      	adds	r1, r3, #0
 800fcca:	1c20      	adds	r0, r4, #0
 800fccc:	f7f0 fdf8 	bl	80008c0 <__aeabi_fadd>
 800fcd0:	1c03      	adds	r3, r0, #0
 800fcd2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	229c      	movs	r2, #156	@ 0x9c
 800fcd8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2298      	movs	r2, #152	@ 0x98
 800fcde:	589a      	ldr	r2, [r3, r2]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	219c      	movs	r1, #156	@ 0x9c
 800fce4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800fce6:	1c19      	adds	r1, r3, #0
 800fce8:	1c10      	adds	r0, r2, #0
 800fcea:	f7f1 fb03 	bl	80012f4 <__aeabi_fsub>
 800fcee:	1c03      	adds	r3, r0, #0
 800fcf0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800fcf2:	2100      	movs	r1, #0
 800fcf4:	6978      	ldr	r0, [r7, #20]
 800fcf6:	f7f0 fc1b 	bl	8000530 <__aeabi_fcmplt>
 800fcfa:	1e03      	subs	r3, r0, #0
 800fcfc:	d004      	beq.n	800fd08 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2280      	movs	r2, #128	@ 0x80
 800fd02:	0612      	lsls	r2, r2, #24
 800fd04:	4053      	eors	r3, r2
 800fd06:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800fd08:	4923      	ldr	r1, [pc, #140]	@ (800fd98 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800fd0a:	6978      	ldr	r0, [r7, #20]
 800fd0c:	f7f1 f998 	bl	8001040 <__aeabi_fmul>
 800fd10:	1c03      	adds	r3, r0, #0
 800fd12:	1c18      	adds	r0, r3, #0
 800fd14:	f018 fb08 	bl	8028328 <expf>
 800fd18:	1c03      	adds	r3, r0, #0
 800fd1a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800fd1c:	491f      	ldr	r1, [pc, #124]	@ (800fd9c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800fd1e:	6938      	ldr	r0, [r7, #16]
 800fd20:	f7f1 f98e 	bl	8001040 <__aeabi_fmul>
 800fd24:	1c03      	adds	r3, r0, #0
 800fd26:	491e      	ldr	r1, [pc, #120]	@ (800fda0 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800fd28:	1c18      	adds	r0, r3, #0
 800fd2a:	f7f0 fdc9 	bl	80008c0 <__aeabi_fadd>
 800fd2e:	1c03      	adds	r3, r0, #0
 800fd30:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685c      	ldr	r4, [r3, #4]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	68f9      	ldr	r1, [r7, #12]
 800fd3c:	1c18      	adds	r0, r3, #0
 800fd3e:	f7f0 fdbf 	bl	80008c0 <__aeabi_fadd>
 800fd42:	1c03      	adds	r3, r0, #0
 800fd44:	1c19      	adds	r1, r3, #0
 800fd46:	1c20      	adds	r0, r4, #0
 800fd48:	f7f0 ffac 	bl	8000ca4 <__aeabi_fdiv>
 800fd4c:	1c03      	adds	r3, r0, #0
 800fd4e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800fd50:	68b9      	ldr	r1, [r7, #8]
 800fd52:	20fe      	movs	r0, #254	@ 0xfe
 800fd54:	0580      	lsls	r0, r0, #22
 800fd56:	f7f1 facd 	bl	80012f4 <__aeabi_fsub>
 800fd5a:	1c03      	adds	r3, r0, #0
 800fd5c:	1c18      	adds	r0, r3, #0
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	22a0      	movs	r2, #160	@ 0xa0
 800fd62:	589b      	ldr	r3, [r3, r2]
 800fd64:	1c19      	adds	r1, r3, #0
 800fd66:	f7f1 f96b 	bl	8001040 <__aeabi_fmul>
 800fd6a:	1c03      	adds	r3, r0, #0
 800fd6c:	1c1c      	adds	r4, r3, #0
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	68b8      	ldr	r0, [r7, #8]
 800fd72:	f7f1 f965 	bl	8001040 <__aeabi_fmul>
 800fd76:	1c03      	adds	r3, r0, #0
 800fd78:	1c19      	adds	r1, r3, #0
 800fd7a:	1c20      	adds	r0, r4, #0
 800fd7c:	f7f0 fda0 	bl	80008c0 <__aeabi_fadd>
 800fd80:	1c03      	adds	r3, r0, #0
 800fd82:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	22a0      	movs	r2, #160	@ 0xa0
 800fd88:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	22a0      	movs	r2, #160	@ 0xa0
 800fd8e:	589b      	ldr	r3, [r3, r2]
}
 800fd90:	1c18      	adds	r0, r3, #0
 800fd92:	46bd      	mov	sp, r7
 800fd94:	b007      	add	sp, #28
 800fd96:	bd90      	pop	{r4, r7, pc}
 800fd98:	be4ccccd 	.word	0xbe4ccccd
 800fd9c:	43f00000 	.word	0x43f00000
 800fda0:	41a00000 	.word	0x41a00000

0800fda4 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	000a      	movs	r2, r1
 800fdae:	1cbb      	adds	r3, r7, #2
 800fdb0:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800fdb2:	230d      	movs	r3, #13
 800fdb4:	18fb      	adds	r3, r7, r3
 800fdb6:	22ff      	movs	r2, #255	@ 0xff
 800fdb8:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800fdba:	230e      	movs	r3, #14
 800fdbc:	18fb      	adds	r3, r7, r3
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	801a      	strh	r2, [r3, #0]
 800fdc2:	e038      	b.n	800fe36 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800fdc4:	230e      	movs	r3, #14
 800fdc6:	18fb      	adds	r3, r7, r3
 800fdc8:	881b      	ldrh	r3, [r3, #0]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	18d3      	adds	r3, r2, r3
 800fdce:	7819      	ldrb	r1, [r3, #0]
 800fdd0:	220d      	movs	r2, #13
 800fdd2:	18bb      	adds	r3, r7, r2
 800fdd4:	18ba      	adds	r2, r7, r2
 800fdd6:	7812      	ldrb	r2, [r2, #0]
 800fdd8:	404a      	eors	r2, r1
 800fdda:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fddc:	230c      	movs	r3, #12
 800fdde:	18fb      	adds	r3, r7, r3
 800fde0:	2208      	movs	r2, #8
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	e01c      	b.n	800fe20 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800fde6:	210d      	movs	r1, #13
 800fde8:	187b      	adds	r3, r7, r1
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	b25b      	sxtb	r3, r3
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	da0a      	bge.n	800fe08 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800fdf2:	187b      	adds	r3, r7, r1
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	b25b      	sxtb	r3, r3
 800fdf8:	18db      	adds	r3, r3, r3
 800fdfa:	b25b      	sxtb	r3, r3
 800fdfc:	2231      	movs	r2, #49	@ 0x31
 800fdfe:	4053      	eors	r3, r2
 800fe00:	b25a      	sxtb	r2, r3
 800fe02:	187b      	adds	r3, r7, r1
 800fe04:	701a      	strb	r2, [r3, #0]
 800fe06:	e005      	b.n	800fe14 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 800fe08:	230d      	movs	r3, #13
 800fe0a:	18fa      	adds	r2, r7, r3
 800fe0c:	18fb      	adds	r3, r7, r3
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	18db      	adds	r3, r3, r3
 800fe12:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800fe14:	220c      	movs	r2, #12
 800fe16:	18bb      	adds	r3, r7, r2
 800fe18:	18ba      	adds	r2, r7, r2
 800fe1a:	7812      	ldrb	r2, [r2, #0]
 800fe1c:	3a01      	subs	r2, #1
 800fe1e:	701a      	strb	r2, [r3, #0]
 800fe20:	230c      	movs	r3, #12
 800fe22:	18fb      	adds	r3, r7, r3
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1dd      	bne.n	800fde6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800fe2a:	220e      	movs	r2, #14
 800fe2c:	18bb      	adds	r3, r7, r2
 800fe2e:	18ba      	adds	r2, r7, r2
 800fe30:	8812      	ldrh	r2, [r2, #0]
 800fe32:	3201      	adds	r2, #1
 800fe34:	801a      	strh	r2, [r3, #0]
 800fe36:	230e      	movs	r3, #14
 800fe38:	18fa      	adds	r2, r7, r3
 800fe3a:	1cbb      	adds	r3, r7, #2
 800fe3c:	8812      	ldrh	r2, [r2, #0]
 800fe3e:	881b      	ldrh	r3, [r3, #0]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d3bf      	bcc.n	800fdc4 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800fe44:	230d      	movs	r3, #13
 800fe46:	18fb      	adds	r3, r7, r3
 800fe48:	781b      	ldrb	r3, [r3, #0]
}
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	b004      	add	sp, #16
 800fe50:	bd80      	pop	{r7, pc}

0800fe52 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800fe52:	b580      	push	{r7, lr}
 800fe54:	b082      	sub	sp, #8
 800fe56:	af00      	add	r7, sp, #0
 800fe58:	6078      	str	r0, [r7, #4]
 800fe5a:	0008      	movs	r0, r1
 800fe5c:	0011      	movs	r1, r2
 800fe5e:	1cbb      	adds	r3, r7, #2
 800fe60:	1c02      	adds	r2, r0, #0
 800fe62:	801a      	strh	r2, [r3, #0]
 800fe64:	1c7b      	adds	r3, r7, #1
 800fe66:	1c0a      	adds	r2, r1, #0
 800fe68:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800fe6a:	1cbb      	adds	r3, r7, #2
 800fe6c:	881a      	ldrh	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	0011      	movs	r1, r2
 800fe72:	0018      	movs	r0, r3
 800fe74:	f7ff ff96 	bl	800fda4 <sensirion_i2c_generate_crc>
 800fe78:	0003      	movs	r3, r0
 800fe7a:	001a      	movs	r2, r3
 800fe7c:	1c7b      	adds	r3, r7, #1
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d001      	beq.n	800fe88 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	e000      	b.n	800fe8a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	0018      	movs	r0, r3
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	b002      	add	sp, #8
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b082      	sub	sp, #8
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	0008      	movs	r0, r1
 800fe9c:	0011      	movs	r1, r2
 800fe9e:	1cbb      	adds	r3, r7, #2
 800fea0:	1c02      	adds	r2, r0, #0
 800fea2:	801a      	strh	r2, [r3, #0]
 800fea4:	003b      	movs	r3, r7
 800fea6:	1c0a      	adds	r2, r1, #0
 800fea8:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800feaa:	003b      	movs	r3, r7
 800feac:	881b      	ldrh	r3, [r3, #0]
 800feae:	0a1b      	lsrs	r3, r3, #8
 800feb0:	b299      	uxth	r1, r3
 800feb2:	1cbb      	adds	r3, r7, #2
 800feb4:	881b      	ldrh	r3, [r3, #0]
 800feb6:	1cba      	adds	r2, r7, #2
 800feb8:	1c58      	adds	r0, r3, #1
 800feba:	8010      	strh	r0, [r2, #0]
 800febc:	001a      	movs	r2, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	189b      	adds	r3, r3, r2
 800fec2:	b2ca      	uxtb	r2, r1
 800fec4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800fec6:	1cbb      	adds	r3, r7, #2
 800fec8:	881b      	ldrh	r3, [r3, #0]
 800feca:	1cba      	adds	r2, r7, #2
 800fecc:	1c59      	adds	r1, r3, #1
 800fece:	8011      	strh	r1, [r2, #0]
 800fed0:	001a      	movs	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	189b      	adds	r3, r3, r2
 800fed6:	003a      	movs	r2, r7
 800fed8:	8812      	ldrh	r2, [r2, #0]
 800feda:	b2d2      	uxtb	r2, r2
 800fedc:	701a      	strb	r2, [r3, #0]
    return offset;
 800fede:	1cbb      	adds	r3, r7, #2
 800fee0:	881b      	ldrh	r3, [r3, #0]
}
 800fee2:	0018      	movs	r0, r3
 800fee4:	46bd      	mov	sp, r7
 800fee6:	b002      	add	sp, #8
 800fee8:	bd80      	pop	{r7, pc}

0800feea <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800feea:	b590      	push	{r4, r7, lr}
 800feec:	b083      	sub	sp, #12
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	0008      	movs	r0, r1
 800fef4:	0011      	movs	r1, r2
 800fef6:	1cbb      	adds	r3, r7, #2
 800fef8:	1c02      	adds	r2, r0, #0
 800fefa:	801a      	strh	r2, [r3, #0]
 800fefc:	003b      	movs	r3, r7
 800fefe:	1c0a      	adds	r2, r1, #0
 800ff00:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ff02:	003b      	movs	r3, r7
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	0a1b      	lsrs	r3, r3, #8
 800ff08:	b299      	uxth	r1, r3
 800ff0a:	1cbb      	adds	r3, r7, #2
 800ff0c:	881b      	ldrh	r3, [r3, #0]
 800ff0e:	1cba      	adds	r2, r7, #2
 800ff10:	1c58      	adds	r0, r3, #1
 800ff12:	8010      	strh	r0, [r2, #0]
 800ff14:	001a      	movs	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	189b      	adds	r3, r3, r2
 800ff1a:	b2ca      	uxtb	r2, r1
 800ff1c:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ff1e:	1cbb      	adds	r3, r7, #2
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	1cba      	adds	r2, r7, #2
 800ff24:	1c59      	adds	r1, r3, #1
 800ff26:	8011      	strh	r1, [r2, #0]
 800ff28:	001a      	movs	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	189b      	adds	r3, r3, r2
 800ff2e:	003a      	movs	r2, r7
 800ff30:	8812      	ldrh	r2, [r2, #0]
 800ff32:	b2d2      	uxtb	r2, r2
 800ff34:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ff36:	1cbb      	adds	r3, r7, #2
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	3b02      	subs	r3, #2
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ff40:	1cbb      	adds	r3, r7, #2
 800ff42:	881b      	ldrh	r3, [r3, #0]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	18d4      	adds	r4, r2, r3
 800ff48:	2102      	movs	r1, #2
 800ff4a:	f7ff ff2b 	bl	800fda4 <sensirion_i2c_generate_crc>
 800ff4e:	0003      	movs	r3, r0
 800ff50:	7023      	strb	r3, [r4, #0]
    offset++;
 800ff52:	1cbb      	adds	r3, r7, #2
 800ff54:	881a      	ldrh	r2, [r3, #0]
 800ff56:	1cbb      	adds	r3, r7, #2
 800ff58:	3201      	adds	r2, #1
 800ff5a:	801a      	strh	r2, [r3, #0]

    return offset;
 800ff5c:	1cbb      	adds	r3, r7, #2
 800ff5e:	881b      	ldrh	r3, [r3, #0]
}
 800ff60:	0018      	movs	r0, r3
 800ff62:	46bd      	mov	sp, r7
 800ff64:	b003      	add	sp, #12
 800ff66:	bd90      	pop	{r4, r7, pc}

0800ff68 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b082      	sub	sp, #8
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	0008      	movs	r0, r1
 800ff72:	0011      	movs	r1, r2
 800ff74:	1cbb      	adds	r3, r7, #2
 800ff76:	1c02      	adds	r2, r0, #0
 800ff78:	801a      	strh	r2, [r3, #0]
 800ff7a:	003b      	movs	r3, r7
 800ff7c:	1c0a      	adds	r2, r1, #0
 800ff7e:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800ff80:	003b      	movs	r3, r7
 800ff82:	881a      	ldrh	r2, [r3, #0]
 800ff84:	1cbb      	adds	r3, r7, #2
 800ff86:	8819      	ldrh	r1, [r3, #0]
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	0018      	movs	r0, r3
 800ff8c:	f7ff ffad 	bl	800feea <sensirion_i2c_add_uint16_t_to_buffer>
 800ff90:	0003      	movs	r3, r0
}
 800ff92:	0018      	movs	r0, r3
 800ff94:	46bd      	mov	sp, r7
 800ff96:	b002      	add	sp, #8
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6039      	str	r1, [r7, #0]
 800ffa2:	0011      	movs	r1, r2
 800ffa4:	1dfb      	adds	r3, r7, #7
 800ffa6:	1c02      	adds	r2, r0, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
 800ffaa:	1d3b      	adds	r3, r7, #4
 800ffac:	1c0a      	adds	r2, r1, #0
 800ffae:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800ffb0:	1d3b      	adds	r3, r7, #4
 800ffb2:	881a      	ldrh	r2, [r3, #0]
 800ffb4:	6839      	ldr	r1, [r7, #0]
 800ffb6:	1dfb      	adds	r3, r7, #7
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	0018      	movs	r0, r3
 800ffbc:	f7fe f9b0 	bl	800e320 <sensirion_i2c_hal_write>
 800ffc0:	0003      	movs	r3, r0
}
 800ffc2:	0018      	movs	r0, r3
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	b002      	add	sp, #8
 800ffc8:	bd80      	pop	{r7, pc}

0800ffca <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800ffca:	b5b0      	push	{r4, r5, r7, lr}
 800ffcc:	b084      	sub	sp, #16
 800ffce:	af00      	add	r7, sp, #0
 800ffd0:	6039      	str	r1, [r7, #0]
 800ffd2:	0011      	movs	r1, r2
 800ffd4:	1dfb      	adds	r3, r7, #7
 800ffd6:	1c02      	adds	r2, r0, #0
 800ffd8:	701a      	strb	r2, [r3, #0]
 800ffda:	1d3b      	adds	r3, r7, #4
 800ffdc:	1c0a      	adds	r2, r1, #0
 800ffde:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800ffe0:	1d3b      	adds	r3, r7, #4
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	085b      	lsrs	r3, r3, #1
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	220a      	movs	r2, #10
 800ffea:	18ba      	adds	r2, r7, r2
 800ffec:	1c19      	adds	r1, r3, #0
 800ffee:	1c0b      	adds	r3, r1, #0
 800fff0:	18db      	adds	r3, r3, r3
 800fff2:	185b      	adds	r3, r3, r1
 800fff4:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800fff6:	1d3b      	adds	r3, r7, #4
 800fff8:	881b      	ldrh	r3, [r3, #0]
 800fffa:	2201      	movs	r2, #1
 800fffc:	4013      	ands	r3, r2
 800fffe:	b29b      	uxth	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d001      	beq.n	8010008 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010004:	2304      	movs	r3, #4
 8010006:	e06b      	b.n	80100e0 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010008:	230a      	movs	r3, #10
 801000a:	18fb      	adds	r3, r7, r3
 801000c:	881a      	ldrh	r2, [r3, #0]
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	1dfb      	adds	r3, r7, #7
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	0018      	movs	r0, r3
 8010016:	f7fe f963 	bl	800e2e0 <sensirion_i2c_hal_read>
 801001a:	0003      	movs	r3, r0
 801001c:	001a      	movs	r2, r3
 801001e:	2108      	movs	r1, #8
 8010020:	187b      	adds	r3, r7, r1
 8010022:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010024:	000a      	movs	r2, r1
 8010026:	18bb      	adds	r3, r7, r2
 8010028:	2100      	movs	r1, #0
 801002a:	5e5b      	ldrsh	r3, [r3, r1]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d003      	beq.n	8010038 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010030:	18bb      	adds	r3, r7, r2
 8010032:	2200      	movs	r2, #0
 8010034:	5e9b      	ldrsh	r3, [r3, r2]
 8010036:	e053      	b.n	80100e0 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010038:	230e      	movs	r3, #14
 801003a:	18fb      	adds	r3, r7, r3
 801003c:	2200      	movs	r2, #0
 801003e:	801a      	strh	r2, [r3, #0]
 8010040:	230c      	movs	r3, #12
 8010042:	18fb      	adds	r3, r7, r3
 8010044:	2200      	movs	r2, #0
 8010046:	801a      	strh	r2, [r3, #0]
 8010048:	e041      	b.n	80100ce <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801004a:	210e      	movs	r1, #14
 801004c:	187b      	adds	r3, r7, r1
 801004e:	881b      	ldrh	r3, [r3, #0]
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010054:	187b      	adds	r3, r7, r1
 8010056:	881b      	ldrh	r3, [r3, #0]
 8010058:	3302      	adds	r3, #2
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	001a      	movs	r2, r3
 8010062:	2102      	movs	r1, #2
 8010064:	f7ff fef5 	bl	800fe52 <sensirion_i2c_check_crc>
 8010068:	0003      	movs	r3, r0
 801006a:	001a      	movs	r2, r3
 801006c:	2108      	movs	r1, #8
 801006e:	187b      	adds	r3, r7, r1
 8010070:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010072:	000a      	movs	r2, r1
 8010074:	18bb      	adds	r3, r7, r2
 8010076:	2100      	movs	r1, #0
 8010078:	5e5b      	ldrsh	r3, [r3, r1]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 801007e:	18bb      	adds	r3, r7, r2
 8010080:	2200      	movs	r2, #0
 8010082:	5e9b      	ldrsh	r3, [r3, r2]
 8010084:	e02c      	b.n	80100e0 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010086:	240e      	movs	r4, #14
 8010088:	193b      	adds	r3, r7, r4
 801008a:	881b      	ldrh	r3, [r3, #0]
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	18d2      	adds	r2, r2, r3
 8010090:	250c      	movs	r5, #12
 8010092:	197b      	adds	r3, r7, r5
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	1979      	adds	r1, r7, r5
 8010098:	1c58      	adds	r0, r3, #1
 801009a:	8008      	strh	r0, [r1, #0]
 801009c:	0019      	movs	r1, r3
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	185b      	adds	r3, r3, r1
 80100a2:	7812      	ldrb	r2, [r2, #0]
 80100a4:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80100a6:	193b      	adds	r3, r7, r4
 80100a8:	881b      	ldrh	r3, [r3, #0]
 80100aa:	3301      	adds	r3, #1
 80100ac:	683a      	ldr	r2, [r7, #0]
 80100ae:	18d2      	adds	r2, r2, r3
 80100b0:	197b      	adds	r3, r7, r5
 80100b2:	881b      	ldrh	r3, [r3, #0]
 80100b4:	1979      	adds	r1, r7, r5
 80100b6:	1c58      	adds	r0, r3, #1
 80100b8:	8008      	strh	r0, [r1, #0]
 80100ba:	0019      	movs	r1, r3
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	185b      	adds	r3, r3, r1
 80100c0:	7812      	ldrb	r2, [r2, #0]
 80100c2:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80100c4:	193b      	adds	r3, r7, r4
 80100c6:	193a      	adds	r2, r7, r4
 80100c8:	8812      	ldrh	r2, [r2, #0]
 80100ca:	3203      	adds	r2, #3
 80100cc:	801a      	strh	r2, [r3, #0]
 80100ce:	230e      	movs	r3, #14
 80100d0:	18fa      	adds	r2, r7, r3
 80100d2:	230a      	movs	r3, #10
 80100d4:	18fb      	adds	r3, r7, r3
 80100d6:	8812      	ldrh	r2, [r2, #0]
 80100d8:	881b      	ldrh	r3, [r3, #0]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d3b5      	bcc.n	801004a <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	0018      	movs	r0, r3
 80100e2:	46bd      	mov	sp, r7
 80100e4:	b004      	add	sp, #16
 80100e6:	bdb0      	pop	{r4, r5, r7, pc}

080100e8 <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80100e8:	b590      	push	{r4, r7, lr}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6039      	str	r1, [r7, #0]
 80100f0:	0011      	movs	r1, r2
 80100f2:	1dfb      	adds	r3, r7, #7
 80100f4:	1c02      	adds	r2, r0, #0
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	1dbb      	adds	r3, r7, #6
 80100fa:	1c0a      	adds	r2, r1, #0
 80100fc:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80100fe:	4b08      	ldr	r3, [pc, #32]	@ (8010120 <ReadRegister+0x38>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d008      	beq.n	8010118 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010106:	4b06      	ldr	r3, [pc, #24]	@ (8010120 <ReadRegister+0x38>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	1dba      	adds	r2, r7, #6
 801010c:	7814      	ldrb	r4, [r2, #0]
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	1dfa      	adds	r2, r7, #7
 8010112:	7810      	ldrb	r0, [r2, #0]
 8010114:	0022      	movs	r2, r4
 8010116:	4798      	blx	r3
  }
}
 8010118:	46c0      	nop			@ (mov r8, r8)
 801011a:	46bd      	mov	sp, r7
 801011c:	b003      	add	sp, #12
 801011e:	bd90      	pop	{r4, r7, pc}
 8010120:	20000ef8 	.word	0x20000ef8

08010124 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010124:	b590      	push	{r4, r7, lr}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6039      	str	r1, [r7, #0]
 801012c:	0011      	movs	r1, r2
 801012e:	1dfb      	adds	r3, r7, #7
 8010130:	1c02      	adds	r2, r0, #0
 8010132:	701a      	strb	r2, [r3, #0]
 8010134:	1dbb      	adds	r3, r7, #6
 8010136:	1c0a      	adds	r2, r1, #0
 8010138:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 801013a:	4b08      	ldr	r3, [pc, #32]	@ (801015c <WriteRegister+0x38>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d008      	beq.n	8010154 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010142:	4b06      	ldr	r3, [pc, #24]	@ (801015c <WriteRegister+0x38>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	1dba      	adds	r2, r7, #6
 8010148:	7814      	ldrb	r4, [r2, #0]
 801014a:	6839      	ldr	r1, [r7, #0]
 801014c:	1dfa      	adds	r2, r7, #7
 801014e:	7810      	ldrb	r0, [r2, #0]
 8010150:	0022      	movs	r2, r4
 8010152:	4798      	blx	r3
  }
}
 8010154:	46c0      	nop			@ (mov r8, r8)
 8010156:	46bd      	mov	sp, r7
 8010158:	b003      	add	sp, #12
 801015a:	bd90      	pop	{r4, r7, pc}
 801015c:	20000efc 	.word	0x20000efc

08010160 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010168:	f003 fd14 	bl	8013b94 <HAL_GetTick>
 801016c:	0002      	movs	r2, r0
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	18d2      	adds	r2, r2, r3
 8010172:	4b03      	ldr	r3, [pc, #12]	@ (8010180 <setSGP40TimeStamp+0x20>)
 8010174:	601a      	str	r2, [r3, #0]
}
 8010176:	46c0      	nop			@ (mov r8, r8)
 8010178:	46bd      	mov	sp, r7
 801017a:	b002      	add	sp, #8
 801017c:	bd80      	pop	{r7, pc}
 801017e:	46c0      	nop			@ (mov r8, r8)
 8010180:	20000f0c 	.word	0x20000f0c

08010184 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010184:	b580      	push	{r7, lr}
 8010186:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010188:	4b02      	ldr	r3, [pc, #8]	@ (8010194 <ResetSGP40samplecounter+0x10>)
 801018a:	2200      	movs	r2, #0
 801018c:	701a      	strb	r2, [r3, #0]
}
 801018e:	46c0      	nop			@ (mov r8, r8)
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	20000f0a 	.word	0x20000f0a

08010198 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80101a2:	4b07      	ldr	r3, [pc, #28]	@ (80101c0 <SGP_Init+0x28>)
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80101a8:	4b06      	ldr	r3, [pc, #24]	@ (80101c4 <SGP_Init+0x2c>)
 80101aa:	683a      	ldr	r2, [r7, #0]
 80101ac:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80101ae:	4b06      	ldr	r3, [pc, #24]	@ (80101c8 <SGP_Init+0x30>)
 80101b0:	2100      	movs	r1, #0
 80101b2:	0018      	movs	r0, r3
 80101b4:	f7fe ff72 	bl	800f09c <GasIndexAlgorithm_init>
}
 80101b8:	46c0      	nop			@ (mov r8, r8)
 80101ba:	46bd      	mov	sp, r7
 80101bc:	b002      	add	sp, #8
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	20000ef8 	.word	0x20000ef8
 80101c4:	20000efc 	.word	0x20000efc
 80101c8:	20000f14 	.word	0x20000f14

080101cc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 80101cc:	b580      	push	{r7, lr}
 80101ce:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 80101d0:	4b07      	ldr	r3, [pc, #28]	@ (80101f0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d004      	beq.n	80101e2 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 80101d8:	4b06      	ldr	r3, [pc, #24]	@ (80101f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80101da:	22fe      	movs	r2, #254	@ 0xfe
 80101dc:	0592      	lsls	r2, r2, #22
 80101de:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 80101e0:	e002      	b.n	80101e8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 80101e2:	4b04      	ldr	r3, [pc, #16]	@ (80101f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 80101e4:	4a04      	ldr	r2, [pc, #16]	@ (80101f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 80101e6:	605a      	str	r2, [r3, #4]
}
 80101e8:	46c0      	nop			@ (mov r8, r8)
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	46c0      	nop			@ (mov r8, r8)
 80101f0:	20001e61 	.word	0x20001e61
 80101f4:	20000f14 	.word	0x20000f14
 80101f8:	44610000 	.word	0x44610000

080101fc <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80101fc:	b580      	push	{r7, lr}
 80101fe:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8010200:	4b13      	ldr	r3, [pc, #76]	@ (8010250 <SGP_StartMeasurement+0x54>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00d      	beq.n	8010224 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010208:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <SGP_StartMeasurement+0x58>)
 801020a:	2208      	movs	r2, #8
 801020c:	0019      	movs	r1, r3
 801020e:	2059      	movs	r0, #89	@ 0x59
 8010210:	f7ff ff88 	bl	8010124 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010214:	f003 fcbe 	bl	8013b94 <HAL_GetTick>
 8010218:	0003      	movs	r3, r0
 801021a:	331e      	adds	r3, #30
 801021c:	001a      	movs	r2, r3
 801021e:	4b0e      	ldr	r3, [pc, #56]	@ (8010258 <SGP_StartMeasurement+0x5c>)
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	e00c      	b.n	801023e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010224:	4b0d      	ldr	r3, [pc, #52]	@ (801025c <SGP_StartMeasurement+0x60>)
 8010226:	2208      	movs	r2, #8
 8010228:	0019      	movs	r1, r3
 801022a:	2059      	movs	r0, #89	@ 0x59
 801022c:	f7ff ff7a 	bl	8010124 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8010230:	f003 fcb0 	bl	8013b94 <HAL_GetTick>
 8010234:	0003      	movs	r3, r0
 8010236:	33aa      	adds	r3, #170	@ 0xaa
 8010238:	001a      	movs	r2, r3
 801023a:	4b09      	ldr	r3, [pc, #36]	@ (8010260 <SGP_StartMeasurement+0x64>)
 801023c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 801023e:	4b09      	ldr	r3, [pc, #36]	@ (8010264 <SGP_StartMeasurement+0x68>)
 8010240:	2200      	movs	r2, #0
 8010242:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8010244:	4b08      	ldr	r3, [pc, #32]	@ (8010268 <SGP_StartMeasurement+0x6c>)
 8010246:	2200      	movs	r2, #0
 8010248:	701a      	strb	r2, [r3, #0]
}
 801024a:	46c0      	nop			@ (mov r8, r8)
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	20000fbc 	.word	0x20000fbc
 8010254:	200000b0 	.word	0x200000b0
 8010258:	200000c4 	.word	0x200000c4
 801025c:	200000a8 	.word	0x200000a8
 8010260:	200000bc 	.word	0x200000bc
 8010264:	20000f10 	.word	0x20000f10
 8010268:	20000f11 	.word	0x20000f11

0801026c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 801026c:	b580      	push	{r7, lr}
 801026e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 8010270:	4b04      	ldr	r3, [pc, #16]	@ (8010284 <SGP_HeatedUp+0x18>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	0018      	movs	r0, r3
 8010276:	f002 fef7 	bl	8013068 <TimestampIsReached>
 801027a:	0003      	movs	r3, r0
}
 801027c:	0018      	movs	r0, r3
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	46c0      	nop			@ (mov r8, r8)
 8010284:	200000bc 	.word	0x200000bc

08010288 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 801028c:	4b04      	ldr	r3, [pc, #16]	@ (80102a0 <SGP_MeasurementReady+0x18>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	0018      	movs	r0, r3
 8010292:	f002 fee9 	bl	8013068 <TimestampIsReached>
 8010296:	0003      	movs	r3, r0
}
 8010298:	0018      	movs	r0, r3
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	46c0      	nop			@ (mov r8, r8)
 80102a0:	200000c4 	.word	0x200000c4

080102a4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80102a4:	b580      	push	{r7, lr}
 80102a6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80102a8:	4b04      	ldr	r3, [pc, #16]	@ (80102bc <SGP_MeasurementDone+0x18>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	0018      	movs	r0, r3
 80102ae:	f002 fedb 	bl	8013068 <TimestampIsReached>
 80102b2:	0003      	movs	r3, r0
}
 80102b4:	0018      	movs	r0, r3
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	46c0      	nop			@ (mov r8, r8)
 80102bc:	200000c0 	.word	0x200000c0

080102c0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80102c0:	b580      	push	{r7, lr}
 80102c2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80102c4:	4b04      	ldr	r3, [pc, #16]	@ (80102d8 <SGP_TurnHeaterOff+0x18>)
 80102c6:	2202      	movs	r2, #2
 80102c8:	0019      	movs	r1, r3
 80102ca:	2059      	movs	r0, #89	@ 0x59
 80102cc:	f7ff ff2a 	bl	8010124 <WriteRegister>
}
 80102d0:	46c0      	nop			@ (mov r8, r8)
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	46c0      	nop			@ (mov r8, r8)
 80102d8:	200000a0 	.word	0x200000a0

080102dc <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b087      	sub	sp, #28
 80102e0:	af02      	add	r7, sp, #8
 80102e2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80102e4:	f7ff ffc2 	bl	801026c <SGP_HeatedUp>
 80102e8:	1e03      	subs	r3, r0, #0
 80102ea:	d032      	beq.n	8010352 <SGP_GetMeasurementValues+0x76>
 80102ec:	4b80      	ldr	r3, [pc, #512]	@ (80104f0 <SGP_GetMeasurementValues+0x214>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	2201      	movs	r2, #1
 80102f2:	4053      	eors	r3, r2
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d02b      	beq.n	8010352 <SGP_GetMeasurementValues+0x76>
 80102fa:	4b7e      	ldr	r3, [pc, #504]	@ (80104f4 <SGP_GetMeasurementValues+0x218>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	2201      	movs	r2, #1
 8010300:	4053      	eors	r3, r2
 8010302:	b2db      	uxtb	r3, r3
 8010304:	2b00      	cmp	r3, #0
 8010306:	d024      	beq.n	8010352 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 8010308:	4b79      	ldr	r3, [pc, #484]	@ (80104f0 <SGP_GetMeasurementValues+0x214>)
 801030a:	2201      	movs	r2, #1
 801030c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 801030e:	4b7a      	ldr	r3, [pc, #488]	@ (80104f8 <SGP_GetMeasurementValues+0x21c>)
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00d      	beq.n	8010332 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010316:	4b79      	ldr	r3, [pc, #484]	@ (80104fc <SGP_GetMeasurementValues+0x220>)
 8010318:	2208      	movs	r2, #8
 801031a:	0019      	movs	r1, r3
 801031c:	2059      	movs	r0, #89	@ 0x59
 801031e:	f7ff ff01 	bl	8010124 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8010322:	f003 fc37 	bl	8013b94 <HAL_GetTick>
 8010326:	0003      	movs	r3, r0
 8010328:	331e      	adds	r3, #30
 801032a:	001a      	movs	r2, r3
 801032c:	4b74      	ldr	r3, [pc, #464]	@ (8010500 <SGP_GetMeasurementValues+0x224>)
 801032e:	601a      	str	r2, [r3, #0]
 8010330:	e00c      	b.n	801034c <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8010332:	4b74      	ldr	r3, [pc, #464]	@ (8010504 <SGP_GetMeasurementValues+0x228>)
 8010334:	2208      	movs	r2, #8
 8010336:	0019      	movs	r1, r3
 8010338:	2059      	movs	r0, #89	@ 0x59
 801033a:	f7ff fef3 	bl	8010124 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 801033e:	f003 fc29 	bl	8013b94 <HAL_GetTick>
 8010342:	0003      	movs	r3, r0
 8010344:	331e      	adds	r3, #30
 8010346:	001a      	movs	r2, r3
 8010348:	4b6d      	ldr	r3, [pc, #436]	@ (8010500 <SGP_GetMeasurementValues+0x224>)
 801034a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 801034c:	4b69      	ldr	r3, [pc, #420]	@ (80104f4 <SGP_GetMeasurementValues+0x218>)
 801034e:	2201      	movs	r2, #1
 8010350:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8010352:	4b67      	ldr	r3, [pc, #412]	@ (80104f0 <SGP_GetMeasurementValues+0x214>)
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d100      	bne.n	801035c <SGP_GetMeasurementValues+0x80>
 801035a:	e0ac      	b.n	80104b6 <SGP_GetMeasurementValues+0x1da>
 801035c:	f7ff ff94 	bl	8010288 <SGP_MeasurementReady>
 8010360:	1e03      	subs	r3, r0, #0
 8010362:	d100      	bne.n	8010366 <SGP_GetMeasurementValues+0x8a>
 8010364:	e0a7      	b.n	80104b6 <SGP_GetMeasurementValues+0x1da>
 8010366:	4b68      	ldr	r3, [pc, #416]	@ (8010508 <SGP_GetMeasurementValues+0x22c>)
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	2201      	movs	r2, #1
 801036c:	4053      	eors	r3, r2
 801036e:	b2db      	uxtb	r3, r3
 8010370:	2b00      	cmp	r3, #0
 8010372:	d100      	bne.n	8010376 <SGP_GetMeasurementValues+0x9a>
 8010374:	e09f      	b.n	80104b6 <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 8010376:	4b64      	ldr	r3, [pc, #400]	@ (8010508 <SGP_GetMeasurementValues+0x22c>)
 8010378:	2201      	movs	r2, #1
 801037a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 801037c:	4b63      	ldr	r3, [pc, #396]	@ (801050c <SGP_GetMeasurementValues+0x230>)
 801037e:	2203      	movs	r2, #3
 8010380:	0019      	movs	r1, r3
 8010382:	2059      	movs	r0, #89	@ 0x59
 8010384:	f7ff feb0 	bl	80100e8 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8010388:	4b60      	ldr	r3, [pc, #384]	@ (801050c <SGP_GetMeasurementValues+0x230>)
 801038a:	2203      	movs	r2, #3
 801038c:	2103      	movs	r1, #3
 801038e:	0018      	movs	r0, r3
 8010390:	f000 f91a 	bl	80105c8 <CheckCRC>
 8010394:	0003      	movs	r3, r0
 8010396:	001a      	movs	r2, r3
 8010398:	2301      	movs	r3, #1
 801039a:	4053      	eors	r3, r2
 801039c:	b2db      	uxtb	r3, r3
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d02a      	beq.n	80103f8 <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 80103a2:	4a5b      	ldr	r2, [pc, #364]	@ (8010510 <SGP_GetMeasurementValues+0x234>)
 80103a4:	4b5b      	ldr	r3, [pc, #364]	@ (8010514 <SGP_GetMeasurementValues+0x238>)
 80103a6:	0019      	movs	r1, r3
 80103a8:	2001      	movs	r0, #1
 80103aa:	f002 feb3 	bl	8013114 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80103ae:	4a5a      	ldr	r2, [pc, #360]	@ (8010518 <SGP_GetMeasurementValues+0x23c>)
 80103b0:	4b5a      	ldr	r3, [pc, #360]	@ (801051c <SGP_GetMeasurementValues+0x240>)
 80103b2:	0019      	movs	r1, r3
 80103b4:	2002      	movs	r0, #2
 80103b6:	f002 fead 	bl	8013114 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80103ba:	230f      	movs	r3, #15
 80103bc:	18fb      	adds	r3, r7, r3
 80103be:	2200      	movs	r2, #0
 80103c0:	701a      	strb	r2, [r3, #0]
 80103c2:	e012      	b.n	80103ea <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80103c4:	240f      	movs	r4, #15
 80103c6:	193b      	adds	r3, r7, r4
 80103c8:	7818      	ldrb	r0, [r3, #0]
 80103ca:	193b      	adds	r3, r7, r4
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	4a4f      	ldr	r2, [pc, #316]	@ (801050c <SGP_GetMeasurementValues+0x230>)
 80103d0:	5cd3      	ldrb	r3, [r2, r3]
 80103d2:	4a53      	ldr	r2, [pc, #332]	@ (8010520 <SGP_GetMeasurementValues+0x244>)
 80103d4:	4953      	ldr	r1, [pc, #332]	@ (8010524 <SGP_GetMeasurementValues+0x248>)
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	0003      	movs	r3, r0
 80103da:	2003      	movs	r0, #3
 80103dc:	f002 fe9a 	bl	8013114 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80103e0:	193b      	adds	r3, r7, r4
 80103e2:	781a      	ldrb	r2, [r3, #0]
 80103e4:	193b      	adds	r3, r7, r4
 80103e6:	3201      	adds	r2, #1
 80103e8:	701a      	strb	r2, [r3, #0]
 80103ea:	230f      	movs	r3, #15
 80103ec:	18fb      	adds	r3, r7, r3
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d9e7      	bls.n	80103c4 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 80103f4:	2300      	movs	r3, #0
 80103f6:	e076      	b.n	80104e6 <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 80103f8:	f003 fbcc 	bl	8013b94 <HAL_GetTick>
 80103fc:	0003      	movs	r3, r0
 80103fe:	22fa      	movs	r2, #250	@ 0xfa
 8010400:	0092      	lsls	r2, r2, #2
 8010402:	189a      	adds	r2, r3, r2
 8010404:	4b48      	ldr	r3, [pc, #288]	@ (8010528 <SGP_GetMeasurementValues+0x24c>)
 8010406:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8010408:	f7ff ff5a 	bl	80102c0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 801040c:	4b47      	ldr	r3, [pc, #284]	@ (801052c <SGP_GetMeasurementValues+0x250>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	3301      	adds	r3, #1
 8010412:	b2da      	uxtb	r2, r3
 8010414:	4b45      	ldr	r3, [pc, #276]	@ (801052c <SGP_GetMeasurementValues+0x250>)
 8010416:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8010418:	4b44      	ldr	r3, [pc, #272]	@ (801052c <SGP_GetMeasurementValues+0x250>)
 801041a:	781a      	ldrb	r2, [r3, #0]
 801041c:	4b44      	ldr	r3, [pc, #272]	@ (8010530 <SGP_GetMeasurementValues+0x254>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	429a      	cmp	r2, r3
 8010422:	d348      	bcc.n	80104b6 <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8010424:	4b39      	ldr	r3, [pc, #228]	@ (801050c <SGP_GetMeasurementValues+0x230>)
 8010426:	785b      	ldrb	r3, [r3, #1]
 8010428:	b21b      	sxth	r3, r3
 801042a:	021b      	lsls	r3, r3, #8
 801042c:	b21a      	sxth	r2, r3
 801042e:	4b37      	ldr	r3, [pc, #220]	@ (801050c <SGP_GetMeasurementValues+0x230>)
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	b21b      	sxth	r3, r3
 8010434:	4313      	orrs	r3, r2
 8010436:	b21a      	sxth	r2, r3
 8010438:	240c      	movs	r4, #12
 801043a:	193b      	adds	r3, r7, r4
 801043c:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8010442:	193b      	adds	r3, r7, r4
 8010444:	8819      	ldrh	r1, [r3, #0]
 8010446:	2308      	movs	r3, #8
 8010448:	18fa      	adds	r2, r7, r3
 801044a:	4b3a      	ldr	r3, [pc, #232]	@ (8010534 <SGP_GetMeasurementValues+0x258>)
 801044c:	0018      	movs	r0, r3
 801044e:	f7fe fe87 	bl	800f160 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 8010458:	4b37      	ldr	r3, [pc, #220]	@ (8010538 <SGP_GetMeasurementValues+0x25c>)
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	3301      	adds	r3, #1
 801045e:	b2da      	uxtb	r2, r3
 8010460:	4b35      	ldr	r3, [pc, #212]	@ (8010538 <SGP_GetMeasurementValues+0x25c>)
 8010462:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8010464:	4b34      	ldr	r3, [pc, #208]	@ (8010538 <SGP_GetMeasurementValues+0x25c>)
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b01      	cmp	r3, #1
 801046a:	d10d      	bne.n	8010488 <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 801046c:	193b      	adds	r3, r7, r4
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	4a32      	ldr	r2, [pc, #200]	@ (801053c <SGP_GetMeasurementValues+0x260>)
 8010472:	492c      	ldr	r1, [pc, #176]	@ (8010524 <SGP_GetMeasurementValues+0x248>)
 8010474:	2003      	movs	r0, #3
 8010476:	f002 fe4d 	bl	8013114 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	4a30      	ldr	r2, [pc, #192]	@ (8010540 <SGP_GetMeasurementValues+0x264>)
 801047e:	4929      	ldr	r1, [pc, #164]	@ (8010524 <SGP_GetMeasurementValues+0x248>)
 8010480:	2003      	movs	r0, #3
 8010482:	f002 fe47 	bl	8013114 <CreateLine>
 8010486:	e006      	b.n	8010496 <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 8010488:	4b2b      	ldr	r3, [pc, #172]	@ (8010538 <SGP_GetMeasurementValues+0x25c>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2b0b      	cmp	r3, #11
 801048e:	d102      	bne.n	8010496 <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 8010490:	4b29      	ldr	r3, [pc, #164]	@ (8010538 <SGP_GetMeasurementValues+0x25c>)
 8010492:	2200      	movs	r2, #0
 8010494:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	b29b      	uxth	r3, r3
 801049a:	0018      	movs	r0, r3
 801049c:	f001 fdd2 	bl	8012044 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80104a0:	4b22      	ldr	r3, [pc, #136]	@ (801052c <SGP_GetMeasurementValues+0x250>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80104a6:	4b14      	ldr	r3, [pc, #80]	@ (80104f8 <SGP_GetMeasurementValues+0x21c>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80104ac:	4b11      	ldr	r3, [pc, #68]	@ (80104f4 <SGP_GetMeasurementValues+0x218>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	701a      	strb	r2, [r3, #0]
      return true;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e017      	b.n	80104e6 <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80104b6:	f7ff fef5 	bl	80102a4 <SGP_MeasurementDone>
 80104ba:	1e03      	subs	r3, r0, #0
 80104bc:	d012      	beq.n	80104e4 <SGP_GetMeasurementValues+0x208>
 80104be:	4b0c      	ldr	r3, [pc, #48]	@ (80104f0 <SGP_GetMeasurementValues+0x214>)
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00e      	beq.n	80104e4 <SGP_GetMeasurementValues+0x208>
 80104c6:	4b10      	ldr	r3, [pc, #64]	@ (8010508 <SGP_GetMeasurementValues+0x22c>)
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00a      	beq.n	80104e4 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80104ce:	4a1d      	ldr	r2, [pc, #116]	@ (8010544 <SGP_GetMeasurementValues+0x268>)
 80104d0:	4b14      	ldr	r3, [pc, #80]	@ (8010524 <SGP_GetMeasurementValues+0x248>)
 80104d2:	0019      	movs	r1, r3
 80104d4:	2003      	movs	r0, #3
 80104d6:	f002 fe1d 	bl	8013114 <CreateLine>
    SGP_StartMeasurement();
 80104da:	f7ff fe8f 	bl	80101fc <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80104de:	4b05      	ldr	r3, [pc, #20]	@ (80104f4 <SGP_GetMeasurementValues+0x218>)
 80104e0:	2200      	movs	r2, #0
 80104e2:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80104e4:	2300      	movs	r3, #0
}
 80104e6:	0018      	movs	r0, r3
 80104e8:	46bd      	mov	sp, r7
 80104ea:	b005      	add	sp, #20
 80104ec:	bd90      	pop	{r4, r7, pc}
 80104ee:	46c0      	nop			@ (mov r8, r8)
 80104f0:	20000f10 	.word	0x20000f10
 80104f4:	20000fbd 	.word	0x20000fbd
 80104f8:	20000fbc 	.word	0x20000fbc
 80104fc:	200000b0 	.word	0x200000b0
 8010500:	200000c4 	.word	0x200000c4
 8010504:	200000a8 	.word	0x200000a8
 8010508:	20000f11 	.word	0x20000f11
 801050c:	20000f00 	.word	0x20000f00
 8010510:	0802d008 	.word	0x0802d008
 8010514:	0802d030 	.word	0x0802d030
 8010518:	0802d034 	.word	0x0802d034
 801051c:	0802d054 	.word	0x0802d054
 8010520:	0802d058 	.word	0x0802d058
 8010524:	0802d078 	.word	0x0802d078
 8010528:	200000c0 	.word	0x200000c0
 801052c:	20000f09 	.word	0x20000f09
 8010530:	200000ba 	.word	0x200000ba
 8010534:	20000f14 	.word	0x20000f14
 8010538:	20000f0a 	.word	0x20000f0a
 801053c:	0802d07c 	.word	0x0802d07c
 8010540:	0802d098 	.word	0x0802d098
 8010544:	0802d0b4 	.word	0x0802d0b4

08010548 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801054e:	4b1a      	ldr	r3, [pc, #104]	@ (80105b8 <SGP_DeviceConnected+0x70>)
 8010550:	2202      	movs	r2, #2
 8010552:	0019      	movs	r1, r3
 8010554:	2059      	movs	r0, #89	@ 0x59
 8010556:	f7ff fde5 	bl	8010124 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801055a:	2001      	movs	r0, #1
 801055c:	f003 fb24 	bl	8013ba8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8010560:	4b16      	ldr	r3, [pc, #88]	@ (80105bc <SGP_DeviceConnected+0x74>)
 8010562:	2209      	movs	r2, #9
 8010564:	0019      	movs	r1, r3
 8010566:	2059      	movs	r0, #89	@ 0x59
 8010568:	f7ff fdbe 	bl	80100e8 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801056c:	1dfb      	adds	r3, r7, #7
 801056e:	2200      	movs	r2, #0
 8010570:	701a      	strb	r2, [r3, #0]
 8010572:	e011      	b.n	8010598 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8010574:	1dfb      	adds	r3, r7, #7
 8010576:	7818      	ldrb	r0, [r3, #0]
 8010578:	1dfb      	adds	r3, r7, #7
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	4a0f      	ldr	r2, [pc, #60]	@ (80105bc <SGP_DeviceConnected+0x74>)
 801057e:	5cd3      	ldrb	r3, [r2, r3]
 8010580:	4a0f      	ldr	r2, [pc, #60]	@ (80105c0 <SGP_DeviceConnected+0x78>)
 8010582:	4910      	ldr	r1, [pc, #64]	@ (80105c4 <SGP_DeviceConnected+0x7c>)
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	0003      	movs	r3, r0
 8010588:	2002      	movs	r0, #2
 801058a:	f002 fdc3 	bl	8013114 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 801058e:	1dfb      	adds	r3, r7, #7
 8010590:	781a      	ldrb	r2, [r3, #0]
 8010592:	1dfb      	adds	r3, r7, #7
 8010594:	3201      	adds	r2, #1
 8010596:	701a      	strb	r2, [r3, #0]
 8010598:	1dfb      	adds	r3, r7, #7
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b08      	cmp	r3, #8
 801059e:	d9e9      	bls.n	8010574 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80105a0:	4b06      	ldr	r3, [pc, #24]	@ (80105bc <SGP_DeviceConnected+0x74>)
 80105a2:	2203      	movs	r2, #3
 80105a4:	2109      	movs	r1, #9
 80105a6:	0018      	movs	r0, r3
 80105a8:	f000 f80e 	bl	80105c8 <CheckCRC>
 80105ac:	0003      	movs	r3, r0
}
 80105ae:	0018      	movs	r0, r3
 80105b0:	46bd      	mov	sp, r7
 80105b2:	b002      	add	sp, #8
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	46c0      	nop			@ (mov r8, r8)
 80105b8:	200000a4 	.word	0x200000a4
 80105bc:	20000f00 	.word	0x20000f00
 80105c0:	0802d0d4 	.word	0x0802d0d4
 80105c4:	0802d054 	.word	0x0802d054

080105c8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80105c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ca:	b08f      	sub	sp, #60	@ 0x3c
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80105d0:	0008      	movs	r0, r1
 80105d2:	0011      	movs	r1, r2
 80105d4:	2323      	movs	r3, #35	@ 0x23
 80105d6:	18fb      	adds	r3, r7, r3
 80105d8:	1c02      	adds	r2, r0, #0
 80105da:	701a      	strb	r2, [r3, #0]
 80105dc:	2322      	movs	r3, #34	@ 0x22
 80105de:	18fb      	adds	r3, r7, r3
 80105e0:	1c0a      	adds	r2, r1, #0
 80105e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80105e4:	2317      	movs	r3, #23
 80105e6:	2220      	movs	r2, #32
 80105e8:	189b      	adds	r3, r3, r2
 80105ea:	19db      	adds	r3, r3, r7
 80105ec:	2200      	movs	r2, #0
 80105ee:	701a      	strb	r2, [r3, #0]
 80105f0:	e09f      	b.n	8010732 <CheckCRC+0x16a>
 80105f2:	466b      	mov	r3, sp
 80105f4:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80105f6:	2322      	movs	r3, #34	@ 0x22
 80105f8:	18fb      	adds	r3, r7, r3
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	001a      	movs	r2, r3
 80105fe:	3a01      	subs	r2, #1
 8010600:	633a      	str	r2, [r7, #48]	@ 0x30
 8010602:	60bb      	str	r3, [r7, #8]
 8010604:	2200      	movs	r2, #0
 8010606:	60fa      	str	r2, [r7, #12]
 8010608:	68b8      	ldr	r0, [r7, #8]
 801060a:	68f9      	ldr	r1, [r7, #12]
 801060c:	0002      	movs	r2, r0
 801060e:	0f52      	lsrs	r2, r2, #29
 8010610:	000c      	movs	r4, r1
 8010612:	00e4      	lsls	r4, r4, #3
 8010614:	61fc      	str	r4, [r7, #28]
 8010616:	69fc      	ldr	r4, [r7, #28]
 8010618:	4314      	orrs	r4, r2
 801061a:	61fc      	str	r4, [r7, #28]
 801061c:	0002      	movs	r2, r0
 801061e:	00d2      	lsls	r2, r2, #3
 8010620:	61ba      	str	r2, [r7, #24]
 8010622:	603b      	str	r3, [r7, #0]
 8010624:	2200      	movs	r2, #0
 8010626:	607a      	str	r2, [r7, #4]
 8010628:	6838      	ldr	r0, [r7, #0]
 801062a:	6879      	ldr	r1, [r7, #4]
 801062c:	0002      	movs	r2, r0
 801062e:	0f52      	lsrs	r2, r2, #29
 8010630:	000c      	movs	r4, r1
 8010632:	00e4      	lsls	r4, r4, #3
 8010634:	617c      	str	r4, [r7, #20]
 8010636:	697c      	ldr	r4, [r7, #20]
 8010638:	4314      	orrs	r4, r2
 801063a:	617c      	str	r4, [r7, #20]
 801063c:	0002      	movs	r2, r0
 801063e:	00d2      	lsls	r2, r2, #3
 8010640:	613a      	str	r2, [r7, #16]
 8010642:	3307      	adds	r3, #7
 8010644:	08db      	lsrs	r3, r3, #3
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	466a      	mov	r2, sp
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	469d      	mov	sp, r3
 801064e:	466b      	mov	r3, sp
 8010650:	3300      	adds	r3, #0
 8010652:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8010654:	2316      	movs	r3, #22
 8010656:	2220      	movs	r2, #32
 8010658:	189b      	adds	r3, r3, r2
 801065a:	19db      	adds	r3, r3, r7
 801065c:	2200      	movs	r2, #0
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e01e      	b.n	80106a0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8010662:	2317      	movs	r3, #23
 8010664:	2220      	movs	r2, #32
 8010666:	189b      	adds	r3, r3, r2
 8010668:	19db      	adds	r3, r3, r7
 801066a:	781a      	ldrb	r2, [r3, #0]
 801066c:	2116      	movs	r1, #22
 801066e:	2320      	movs	r3, #32
 8010670:	18cb      	adds	r3, r1, r3
 8010672:	19db      	adds	r3, r3, r7
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	18d3      	adds	r3, r2, r3
 8010678:	001a      	movs	r2, r3
 801067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801067c:	189a      	adds	r2, r3, r2
 801067e:	0008      	movs	r0, r1
 8010680:	2320      	movs	r3, #32
 8010682:	18cb      	adds	r3, r1, r3
 8010684:	19db      	adds	r3, r3, r7
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	7811      	ldrb	r1, [r2, #0]
 801068a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801068c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 801068e:	2320      	movs	r3, #32
 8010690:	18c3      	adds	r3, r0, r3
 8010692:	19db      	adds	r3, r3, r7
 8010694:	781a      	ldrb	r2, [r3, #0]
 8010696:	2320      	movs	r3, #32
 8010698:	18c3      	adds	r3, r0, r3
 801069a:	19db      	adds	r3, r3, r7
 801069c:	3201      	adds	r2, #1
 801069e:	701a      	strb	r2, [r3, #0]
 80106a0:	2316      	movs	r3, #22
 80106a2:	2220      	movs	r2, #32
 80106a4:	189b      	adds	r3, r3, r2
 80106a6:	19da      	adds	r2, r3, r7
 80106a8:	2322      	movs	r3, #34	@ 0x22
 80106aa:	18fb      	adds	r3, r7, r3
 80106ac:	7812      	ldrb	r2, [r2, #0]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d3d6      	bcc.n	8010662 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80106b4:	2417      	movs	r4, #23
 80106b6:	2320      	movs	r3, #32
 80106b8:	18e3      	adds	r3, r4, r3
 80106ba:	19db      	adds	r3, r3, r7
 80106bc:	781a      	ldrb	r2, [r3, #0]
 80106be:	2322      	movs	r3, #34	@ 0x22
 80106c0:	18fb      	adds	r3, r7, r3
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	18d3      	adds	r3, r2, r3
 80106c6:	3b01      	subs	r3, #1
 80106c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80106ca:	18d2      	adds	r2, r2, r3
 80106cc:	250b      	movs	r5, #11
 80106ce:	2320      	movs	r3, #32
 80106d0:	18eb      	adds	r3, r5, r3
 80106d2:	19db      	adds	r3, r3, r7
 80106d4:	7812      	ldrb	r2, [r2, #0]
 80106d6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80106d8:	2322      	movs	r3, #34	@ 0x22
 80106da:	18fb      	adds	r3, r7, r3
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	3b01      	subs	r3, #1
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e4:	0011      	movs	r1, r2
 80106e6:	0018      	movs	r0, r3
 80106e8:	f000 f838 	bl	801075c <CalculateCRC>
 80106ec:	0003      	movs	r3, r0
 80106ee:	001a      	movs	r2, r3
 80106f0:	2320      	movs	r3, #32
 80106f2:	18eb      	adds	r3, r5, r3
 80106f4:	19db      	adds	r3, r3, r7
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d00c      	beq.n	8010716 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80106fc:	2320      	movs	r3, #32
 80106fe:	18e3      	adds	r3, r4, r3
 8010700:	19db      	adds	r3, r3, r7
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	3301      	adds	r3, #1
 8010706:	4a13      	ldr	r2, [pc, #76]	@ (8010754 <CheckCRC+0x18c>)
 8010708:	4913      	ldr	r1, [pc, #76]	@ (8010758 <CheckCRC+0x190>)
 801070a:	2001      	movs	r0, #1
 801070c:	f002 fd02 	bl	8013114 <CreateLine>
      return false;
 8010710:	2300      	movs	r3, #0
 8010712:	46b5      	mov	sp, r6
 8010714:	e019      	b.n	801074a <CheckCRC+0x182>
 8010716:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8010718:	2217      	movs	r2, #23
 801071a:	2320      	movs	r3, #32
 801071c:	18d3      	adds	r3, r2, r3
 801071e:	19db      	adds	r3, r3, r7
 8010720:	2120      	movs	r1, #32
 8010722:	1852      	adds	r2, r2, r1
 8010724:	19d1      	adds	r1, r2, r7
 8010726:	2222      	movs	r2, #34	@ 0x22
 8010728:	18ba      	adds	r2, r7, r2
 801072a:	7809      	ldrb	r1, [r1, #0]
 801072c:	7812      	ldrb	r2, [r2, #0]
 801072e:	188a      	adds	r2, r1, r2
 8010730:	701a      	strb	r2, [r3, #0]
 8010732:	2317      	movs	r3, #23
 8010734:	2220      	movs	r2, #32
 8010736:	189b      	adds	r3, r3, r2
 8010738:	19da      	adds	r2, r3, r7
 801073a:	2323      	movs	r3, #35	@ 0x23
 801073c:	18fb      	adds	r3, r7, r3
 801073e:	7812      	ldrb	r2, [r2, #0]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	429a      	cmp	r2, r3
 8010744:	d200      	bcs.n	8010748 <CheckCRC+0x180>
 8010746:	e754      	b.n	80105f2 <CheckCRC+0x2a>
    }
  }
  return true;
 8010748:	2301      	movs	r3, #1
}
 801074a:	0018      	movs	r0, r3
 801074c:	46bd      	mov	sp, r7
 801074e:	b00f      	add	sp, #60	@ 0x3c
 8010750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010752:	46c0      	nop			@ (mov r8, r8)
 8010754:	0802d0f4 	.word	0x0802d0f4
 8010758:	0802d030 	.word	0x0802d030

0801075c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	000a      	movs	r2, r1
 8010766:	1cfb      	adds	r3, r7, #3
 8010768:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801076a:	230f      	movs	r3, #15
 801076c:	18fb      	adds	r3, r7, r3
 801076e:	22ff      	movs	r2, #255	@ 0xff
 8010770:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8010772:	230e      	movs	r3, #14
 8010774:	18fb      	adds	r3, r7, r3
 8010776:	2200      	movs	r2, #0
 8010778:	701a      	strb	r2, [r3, #0]
 801077a:	e038      	b.n	80107ee <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 801077c:	230e      	movs	r3, #14
 801077e:	18fb      	adds	r3, r7, r3
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	687a      	ldr	r2, [r7, #4]
 8010784:	18d3      	adds	r3, r2, r3
 8010786:	7819      	ldrb	r1, [r3, #0]
 8010788:	220f      	movs	r2, #15
 801078a:	18bb      	adds	r3, r7, r2
 801078c:	18ba      	adds	r2, r7, r2
 801078e:	7812      	ldrb	r2, [r2, #0]
 8010790:	404a      	eors	r2, r1
 8010792:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8010794:	230d      	movs	r3, #13
 8010796:	18fb      	adds	r3, r7, r3
 8010798:	2200      	movs	r2, #0
 801079a:	701a      	strb	r2, [r3, #0]
 801079c:	e01c      	b.n	80107d8 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 801079e:	210f      	movs	r1, #15
 80107a0:	187b      	adds	r3, r7, r1
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	b25b      	sxtb	r3, r3
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	da0a      	bge.n	80107c0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80107aa:	187b      	adds	r3, r7, r1
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	b25b      	sxtb	r3, r3
 80107b0:	18db      	adds	r3, r3, r3
 80107b2:	b25b      	sxtb	r3, r3
 80107b4:	2231      	movs	r2, #49	@ 0x31
 80107b6:	4053      	eors	r3, r2
 80107b8:	b25a      	sxtb	r2, r3
 80107ba:	187b      	adds	r3, r7, r1
 80107bc:	701a      	strb	r2, [r3, #0]
 80107be:	e005      	b.n	80107cc <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80107c0:	230f      	movs	r3, #15
 80107c2:	18fa      	adds	r2, r7, r3
 80107c4:	18fb      	adds	r3, r7, r3
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	18db      	adds	r3, r3, r3
 80107ca:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80107cc:	210d      	movs	r1, #13
 80107ce:	187b      	adds	r3, r7, r1
 80107d0:	781a      	ldrb	r2, [r3, #0]
 80107d2:	187b      	adds	r3, r7, r1
 80107d4:	3201      	adds	r2, #1
 80107d6:	701a      	strb	r2, [r3, #0]
 80107d8:	230d      	movs	r3, #13
 80107da:	18fb      	adds	r3, r7, r3
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	2b07      	cmp	r3, #7
 80107e0:	d9dd      	bls.n	801079e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80107e2:	210e      	movs	r1, #14
 80107e4:	187b      	adds	r3, r7, r1
 80107e6:	781a      	ldrb	r2, [r3, #0]
 80107e8:	187b      	adds	r3, r7, r1
 80107ea:	3201      	adds	r2, #1
 80107ec:	701a      	strb	r2, [r3, #0]
 80107ee:	230e      	movs	r3, #14
 80107f0:	18fa      	adds	r2, r7, r3
 80107f2:	1cfb      	adds	r3, r7, #3
 80107f4:	7812      	ldrb	r2, [r2, #0]
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d3bf      	bcc.n	801077c <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80107fc:	230f      	movs	r3, #15
 80107fe:	18fb      	adds	r3, r7, r3
 8010800:	781b      	ldrb	r3, [r3, #0]
}
 8010802:	0018      	movs	r0, r3
 8010804:	46bd      	mov	sp, r7
 8010806:	b004      	add	sp, #16
 8010808:	bd80      	pop	{r7, pc}
	...

0801080c <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	4936      	ldr	r1, [pc, #216]	@ (80108f4 <SGP_SetHT+0xe8>)
 801081c:	1c18      	adds	r0, r3, #0
 801081e:	f7f0 f84f 	bl	80008c0 <__aeabi_fadd>
 8010822:	1c03      	adds	r3, r0, #0
 8010824:	4934      	ldr	r1, [pc, #208]	@ (80108f8 <SGP_SetHT+0xec>)
 8010826:	1c18      	adds	r0, r3, #0
 8010828:	f7f0 fa3c 	bl	8000ca4 <__aeabi_fdiv>
 801082c:	1c03      	adds	r3, r0, #0
 801082e:	4933      	ldr	r1, [pc, #204]	@ (80108fc <SGP_SetHT+0xf0>)
 8010830:	1c18      	adds	r0, r3, #0
 8010832:	f7f0 fc05 	bl	8001040 <__aeabi_fmul>
 8010836:	1c03      	adds	r3, r0, #0
 8010838:	1c18      	adds	r0, r3, #0
 801083a:	f7ef feef 	bl	800061c <__aeabi_f2uiz>
 801083e:	0003      	movs	r3, r0
 8010840:	b29a      	uxth	r2, r3
 8010842:	4b2f      	ldr	r3, [pc, #188]	@ (8010900 <SGP_SetHT+0xf4>)
 8010844:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	492e      	ldr	r1, [pc, #184]	@ (8010904 <SGP_SetHT+0xf8>)
 801084c:	1c18      	adds	r0, r3, #0
 801084e:	f7f0 fa29 	bl	8000ca4 <__aeabi_fdiv>
 8010852:	1c03      	adds	r3, r0, #0
 8010854:	4929      	ldr	r1, [pc, #164]	@ (80108fc <SGP_SetHT+0xf0>)
 8010856:	1c18      	adds	r0, r3, #0
 8010858:	f7f0 fbf2 	bl	8001040 <__aeabi_fmul>
 801085c:	1c03      	adds	r3, r0, #0
 801085e:	1c18      	adds	r0, r3, #0
 8010860:	f7ef fedc 	bl	800061c <__aeabi_f2uiz>
 8010864:	0003      	movs	r3, r0
 8010866:	b29a      	uxth	r2, r3
 8010868:	4b27      	ldr	r3, [pc, #156]	@ (8010908 <SGP_SetHT+0xfc>)
 801086a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 801086c:	4b26      	ldr	r3, [pc, #152]	@ (8010908 <SGP_SetHT+0xfc>)
 801086e:	881b      	ldrh	r3, [r3, #0]
 8010870:	0a1b      	lsrs	r3, r3, #8
 8010872:	b29b      	uxth	r3, r3
 8010874:	b2da      	uxtb	r2, r3
 8010876:	4b25      	ldr	r3, [pc, #148]	@ (801090c <SGP_SetHT+0x100>)
 8010878:	709a      	strb	r2, [r3, #2]
 801087a:	4b24      	ldr	r3, [pc, #144]	@ (801090c <SGP_SetHT+0x100>)
 801087c:	789a      	ldrb	r2, [r3, #2]
 801087e:	210c      	movs	r1, #12
 8010880:	187b      	adds	r3, r7, r1
 8010882:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8010884:	4b20      	ldr	r3, [pc, #128]	@ (8010908 <SGP_SetHT+0xfc>)
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	b2da      	uxtb	r2, r3
 801088a:	4b20      	ldr	r3, [pc, #128]	@ (801090c <SGP_SetHT+0x100>)
 801088c:	70da      	strb	r2, [r3, #3]
 801088e:	4b1f      	ldr	r3, [pc, #124]	@ (801090c <SGP_SetHT+0x100>)
 8010890:	78da      	ldrb	r2, [r3, #3]
 8010892:	187b      	adds	r3, r7, r1
 8010894:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8010896:	187b      	adds	r3, r7, r1
 8010898:	2102      	movs	r1, #2
 801089a:	0018      	movs	r0, r3
 801089c:	f7ff ff5e 	bl	801075c <CalculateCRC>
 80108a0:	0003      	movs	r3, r0
 80108a2:	001a      	movs	r2, r3
 80108a4:	4b19      	ldr	r3, [pc, #100]	@ (801090c <SGP_SetHT+0x100>)
 80108a6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80108a8:	4b15      	ldr	r3, [pc, #84]	@ (8010900 <SGP_SetHT+0xf4>)
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	0a1b      	lsrs	r3, r3, #8
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	4b16      	ldr	r3, [pc, #88]	@ (801090c <SGP_SetHT+0x100>)
 80108b4:	715a      	strb	r2, [r3, #5]
 80108b6:	4b15      	ldr	r3, [pc, #84]	@ (801090c <SGP_SetHT+0x100>)
 80108b8:	795a      	ldrb	r2, [r3, #5]
 80108ba:	2108      	movs	r1, #8
 80108bc:	187b      	adds	r3, r7, r1
 80108be:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80108c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010900 <SGP_SetHT+0xf4>)
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	b2da      	uxtb	r2, r3
 80108c6:	4b11      	ldr	r3, [pc, #68]	@ (801090c <SGP_SetHT+0x100>)
 80108c8:	719a      	strb	r2, [r3, #6]
 80108ca:	4b10      	ldr	r3, [pc, #64]	@ (801090c <SGP_SetHT+0x100>)
 80108cc:	799a      	ldrb	r2, [r3, #6]
 80108ce:	187b      	adds	r3, r7, r1
 80108d0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80108d2:	187b      	adds	r3, r7, r1
 80108d4:	2102      	movs	r1, #2
 80108d6:	0018      	movs	r0, r3
 80108d8:	f7ff ff40 	bl	801075c <CalculateCRC>
 80108dc:	0003      	movs	r3, r0
 80108de:	001a      	movs	r2, r3
 80108e0:	4b0a      	ldr	r3, [pc, #40]	@ (801090c <SGP_SetHT+0x100>)
 80108e2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80108e4:	4b0a      	ldr	r3, [pc, #40]	@ (8010910 <SGP_SetHT+0x104>)
 80108e6:	2201      	movs	r2, #1
 80108e8:	701a      	strb	r2, [r3, #0]
}
 80108ea:	46c0      	nop			@ (mov r8, r8)
 80108ec:	46bd      	mov	sp, r7
 80108ee:	b004      	add	sp, #16
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	46c0      	nop			@ (mov r8, r8)
 80108f4:	42340000 	.word	0x42340000
 80108f8:	432f0000 	.word	0x432f0000
 80108fc:	477fff00 	.word	0x477fff00
 8010900:	20000fba 	.word	0x20000fba
 8010904:	42c80000 	.word	0x42c80000
 8010908:	20000fb8 	.word	0x20000fb8
 801090c:	200000b0 	.word	0x200000b0
 8010910:	20000fbc 	.word	0x20000fbc

08010914 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8010914:	b580      	push	{r7, lr}
 8010916:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 8010918:	4a09      	ldr	r2, [pc, #36]	@ (8010940 <SGP_SoftReset+0x2c>)
 801091a:	4b0a      	ldr	r3, [pc, #40]	@ (8010944 <SGP_SoftReset+0x30>)
 801091c:	0019      	movs	r1, r3
 801091e:	2003      	movs	r0, #3
 8010920:	f002 fbf8 	bl	8013114 <CreateLine>
  SGP_TurnHeaterOff();
 8010924:	f7ff fccc 	bl	80102c0 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 8010928:	200a      	movs	r0, #10
 801092a:	f003 f93d 	bl	8013ba8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 801092e:	4b06      	ldr	r3, [pc, #24]	@ (8010948 <SGP_SoftReset+0x34>)
 8010930:	2202      	movs	r2, #2
 8010932:	0019      	movs	r1, r3
 8010934:	2059      	movs	r0, #89	@ 0x59
 8010936:	f7ff fbf5 	bl	8010124 <WriteRegister>
}
 801093a:	46c0      	nop			@ (mov r8, r8)
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	0802d19c 	.word	0x0802d19c
 8010944:	0802d078 	.word	0x0802d078
 8010948:	200000b8 	.word	0x200000b8

0801094c <ResetVOCresult>:

void ResetVOCresult(void) {
 801094c:	b580      	push	{r7, lr}
 801094e:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8010950:	4b02      	ldr	r3, [pc, #8]	@ (801095c <ResetVOCresult+0x10>)
 8010952:	2200      	movs	r2, #0
 8010954:	601a      	str	r2, [r3, #0]
}
 8010956:	46c0      	nop			@ (mov r8, r8)
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	20000fc0 	.word	0x20000fc0

08010960 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8010960:	b580      	push	{r7, lr}
 8010962:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8010964:	4b4b      	ldr	r3, [pc, #300]	@ (8010a94 <SGP_Upkeep+0x134>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	2b07      	cmp	r3, #7
 801096a:	d900      	bls.n	801096e <SGP_Upkeep+0xe>
 801096c:	e07a      	b.n	8010a64 <SGP_Upkeep+0x104>
 801096e:	009a      	lsls	r2, r3, #2
 8010970:	4b49      	ldr	r3, [pc, #292]	@ (8010a98 <SGP_Upkeep+0x138>)
 8010972:	18d3      	adds	r3, r2, r3
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 8010978:	4a48      	ldr	r2, [pc, #288]	@ (8010a9c <SGP_Upkeep+0x13c>)
 801097a:	4b49      	ldr	r3, [pc, #292]	@ (8010aa0 <SGP_Upkeep+0x140>)
 801097c:	0019      	movs	r1, r3
 801097e:	2003      	movs	r0, #3
 8010980:	f002 fbc8 	bl	8013114 <CreateLine>
    break;
 8010984:	e081      	b.n	8010a8a <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 8010986:	f7ff ffe1 	bl	801094c <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 801098a:	4b42      	ldr	r3, [pc, #264]	@ (8010a94 <SGP_Upkeep+0x134>)
 801098c:	2201      	movs	r2, #1
 801098e:	701a      	strb	r2, [r3, #0]
    break;
 8010990:	e07b      	b.n	8010a8a <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 8010992:	f7fc fc4d 	bl	800d230 <getSensorLock>
 8010996:	1e03      	subs	r3, r0, #0
 8010998:	d000      	beq.n	801099c <SGP_Upkeep+0x3c>
 801099a:	e06f      	b.n	8010a7c <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 801099c:	2005      	movs	r0, #5
 801099e:	f7fc fc33 	bl	800d208 <setSensorLock>
    SetMeasurementIndicator();
 80109a2:	f001 f987 	bl	8011cb4 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80109a6:	f7ff fc29 	bl	80101fc <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80109aa:	200a      	movs	r0, #10
 80109ac:	f003 f8fc 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 80109b0:	2000      	movs	r0, #0
 80109b2:	f7fc fc29 	bl	800d208 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80109b6:	4b37      	ldr	r3, [pc, #220]	@ (8010a94 <SGP_Upkeep+0x134>)
 80109b8:	2202      	movs	r2, #2
 80109ba:	701a      	strb	r2, [r3, #0]
    break;
 80109bc:	e065      	b.n	8010a8a <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80109be:	f7fc fc37 	bl	800d230 <getSensorLock>
 80109c2:	1e03      	subs	r3, r0, #0
 80109c4:	d15c      	bne.n	8010a80 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80109c6:	2005      	movs	r0, #5
 80109c8:	f7fc fc1e 	bl	800d208 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 80109cc:	4b35      	ldr	r3, [pc, #212]	@ (8010aa4 <SGP_Upkeep+0x144>)
 80109ce:	0018      	movs	r0, r3
 80109d0:	f7ff fc84 	bl	80102dc <SGP_GetMeasurementValues>
 80109d4:	1e03      	subs	r3, r0, #0
 80109d6:	d002      	beq.n	80109de <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 80109d8:	4b2e      	ldr	r3, [pc, #184]	@ (8010a94 <SGP_Upkeep+0x134>)
 80109da:	2203      	movs	r2, #3
 80109dc:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 80109de:	200a      	movs	r0, #10
 80109e0:	f003 f8e2 	bl	8013ba8 <HAL_Delay>
    setSensorLock(FREE);
 80109e4:	2000      	movs	r0, #0
 80109e6:	f7fc fc0f 	bl	800d208 <setSensorLock>
    break;
 80109ea:	e04e      	b.n	8010a8a <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 80109ec:	4b2d      	ldr	r3, [pc, #180]	@ (8010aa4 <SGP_Upkeep+0x144>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	0018      	movs	r0, r3
 80109f4:	f7f4 f834 	bl	8004a60 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 80109f8:	4b26      	ldr	r3, [pc, #152]	@ (8010a94 <SGP_Upkeep+0x134>)
 80109fa:	2206      	movs	r2, #6
 80109fc:	701a      	strb	r2, [r3, #0]
    break;
 80109fe:	e044      	b.n	8010a8a <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8010a00:	4b24      	ldr	r3, [pc, #144]	@ (8010a94 <SGP_Upkeep+0x134>)
 8010a02:	2207      	movs	r2, #7
 8010a04:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 8010a06:	4b28      	ldr	r3, [pc, #160]	@ (8010aa8 <SGP_Upkeep+0x148>)
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	2b03      	cmp	r3, #3
 8010a0c:	d912      	bls.n	8010a34 <SGP_Upkeep+0xd4>
 8010a0e:	4b27      	ldr	r3, [pc, #156]	@ (8010aac <SGP_Upkeep+0x14c>)
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	2201      	movs	r2, #1
 8010a14:	4053      	eors	r3, r2
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00b      	beq.n	8010a34 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8010a1c:	4b24      	ldr	r3, [pc, #144]	@ (8010ab0 <SGP_Upkeep+0x150>)
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d004      	beq.n	8010a2e <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8010a24:	f7ff ff76 	bl	8010914 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 8010a28:	2000      	movs	r0, #0
 8010a2a:	f7fb ffd3 	bl	800c9d4 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8010a2e:	4b20      	ldr	r3, [pc, #128]	@ (8010ab0 <SGP_Upkeep+0x150>)
 8010a30:	2201      	movs	r2, #1
 8010a32:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8010a34:	f003 f8ae 	bl	8013b94 <HAL_GetTick>
 8010a38:	0003      	movs	r3, r0
 8010a3a:	22c8      	movs	r2, #200	@ 0xc8
 8010a3c:	0092      	lsls	r2, r2, #2
 8010a3e:	189a      	adds	r2, r3, r2
 8010a40:	4b1c      	ldr	r3, [pc, #112]	@ (8010ab4 <SGP_Upkeep+0x154>)
 8010a42:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8010a44:	f001 f94e 	bl	8011ce4 <ResetMeasurementIndicator>
  break;
 8010a48:	e01f      	b.n	8010a8a <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 8010a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ab4 <SGP_Upkeep+0x154>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	0018      	movs	r0, r3
 8010a50:	f002 fb0a 	bl	8013068 <TimestampIsReached>
 8010a54:	1e03      	subs	r3, r0, #0
 8010a56:	d015      	beq.n	8010a84 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 8010a58:	f7ff fbb8 	bl	80101cc <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8010a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8010a94 <SGP_Upkeep+0x134>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010a62:	e00f      	b.n	8010a84 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8010a64:	4b0b      	ldr	r3, [pc, #44]	@ (8010a94 <SGP_Upkeep+0x134>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 8010a6a:	f7fc fbe1 	bl	800d230 <getSensorLock>
 8010a6e:	0003      	movs	r3, r0
 8010a70:	2b05      	cmp	r3, #5
 8010a72:	d109      	bne.n	8010a88 <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 8010a74:	2000      	movs	r0, #0
 8010a76:	f7fc fbc7 	bl	800d208 <setSensorLock>
    }
    break;
 8010a7a:	e005      	b.n	8010a88 <SGP_Upkeep+0x128>
      break;
 8010a7c:	46c0      	nop			@ (mov r8, r8)
 8010a7e:	e004      	b.n	8010a8a <SGP_Upkeep+0x12a>
      break;
 8010a80:	46c0      	nop			@ (mov r8, r8)
 8010a82:	e002      	b.n	8010a8a <SGP_Upkeep+0x12a>
    break;
 8010a84:	46c0      	nop			@ (mov r8, r8)
 8010a86:	e000      	b.n	8010a8a <SGP_Upkeep+0x12a>
    break;
 8010a88:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 8010a8a:	4b02      	ldr	r3, [pc, #8]	@ (8010a94 <SGP_Upkeep+0x134>)
 8010a8c:	781b      	ldrb	r3, [r3, #0]
}
 8010a8e:	0018      	movs	r0, r3
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	20000fc4 	.word	0x20000fc4
 8010a98:	0802da0c 	.word	0x0802da0c
 8010a9c:	0802d1b4 	.word	0x0802d1b4
 8010aa0:	0802d078 	.word	0x0802d078
 8010aa4:	20000fc0 	.word	0x20000fc0
 8010aa8:	20000f0a 	.word	0x20000f0a
 8010aac:	20001e61 	.word	0x20001e61
 8010ab0:	20000ef4 	.word	0x20000ef4
 8010ab4:	20000f0c 	.word	0x20000f0c

08010ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b082      	sub	sp, #8
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	0002      	movs	r2, r0
 8010ac0:	1dfb      	adds	r3, r7, #7
 8010ac2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010ac4:	1dfb      	adds	r3, r7, #7
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8010aca:	d809      	bhi.n	8010ae0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010acc:	1dfb      	adds	r3, r7, #7
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	001a      	movs	r2, r3
 8010ad2:	231f      	movs	r3, #31
 8010ad4:	401a      	ands	r2, r3
 8010ad6:	4b04      	ldr	r3, [pc, #16]	@ (8010ae8 <__NVIC_EnableIRQ+0x30>)
 8010ad8:	2101      	movs	r1, #1
 8010ada:	4091      	lsls	r1, r2
 8010adc:	000a      	movs	r2, r1
 8010ade:	601a      	str	r2, [r3, #0]
  }
}
 8010ae0:	46c0      	nop			@ (mov r8, r8)
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	b002      	add	sp, #8
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	e000e100 	.word	0xe000e100

08010aec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	0002      	movs	r2, r0
 8010af4:	1dfb      	adds	r3, r7, #7
 8010af6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8010af8:	1dfb      	adds	r3, r7, #7
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8010afe:	d810      	bhi.n	8010b22 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010b00:	1dfb      	adds	r3, r7, #7
 8010b02:	781b      	ldrb	r3, [r3, #0]
 8010b04:	001a      	movs	r2, r3
 8010b06:	231f      	movs	r3, #31
 8010b08:	4013      	ands	r3, r2
 8010b0a:	4908      	ldr	r1, [pc, #32]	@ (8010b2c <__NVIC_DisableIRQ+0x40>)
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	409a      	lsls	r2, r3
 8010b10:	0013      	movs	r3, r2
 8010b12:	2280      	movs	r2, #128	@ 0x80
 8010b14:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010b16:	f3bf 8f4f 	dsb	sy
}
 8010b1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010b1c:	f3bf 8f6f 	isb	sy
}
 8010b20:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8010b22:	46c0      	nop			@ (mov r8, r8)
 8010b24:	46bd      	mov	sp, r7
 8010b26:	b002      	add	sp, #8
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	46c0      	nop			@ (mov r8, r8)
 8010b2c:	e000e100 	.word	0xe000e100

08010b30 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8010b30:	b5b0      	push	{r4, r5, r7, lr}
 8010b32:	b088      	sub	sp, #32
 8010b34:	af02      	add	r7, sp, #8
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	0008      	movs	r0, r1
 8010b3a:	0011      	movs	r1, r2
 8010b3c:	1cfb      	adds	r3, r7, #3
 8010b3e:	1c02      	adds	r2, r0, #0
 8010b40:	701a      	strb	r2, [r3, #0]
 8010b42:	1cbb      	adds	r3, r7, #2
 8010b44:	1c0a      	adds	r2, r1, #0
 8010b46:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8010b48:	4b5b      	ldr	r3, [pc, #364]	@ (8010cb8 <getSoundData+0x188>)
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	2201      	movs	r2, #1
 8010b50:	4053      	eors	r3, r2
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d107      	bne.n	8010b68 <getSoundData+0x38>
 8010b58:	4b58      	ldr	r3, [pc, #352]	@ (8010cbc <getSoundData+0x18c>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	b2db      	uxtb	r3, r3
 8010b5e:	2201      	movs	r2, #1
 8010b60:	4053      	eors	r3, r2
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <getSoundData+0x3c>
    {
        return false;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e0a0      	b.n	8010cae <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 8010b6c:	4b54      	ldr	r3, [pc, #336]	@ (8010cc0 <getSoundData+0x190>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	b2db      	uxtb	r3, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d005      	beq.n	8010b82 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010b76:	4b53      	ldr	r3, [pc, #332]	@ (8010cc4 <getSoundData+0x194>)
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	b25b      	sxtb	r3, r3
 8010b7c:	0018      	movs	r0, r3
 8010b7e:	f7ff ffb5 	bl	8010aec <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8010b82:	f3bf 8f4f 	dsb	sy
}
 8010b86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8010b88:	f3bf 8f6f 	isb	sy
}
 8010b8c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 8010b8e:	1cfb      	adds	r3, r7, #3
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d04c      	beq.n	8010c30 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8010b96:	4b4c      	ldr	r3, [pc, #304]	@ (8010cc8 <getSoundData+0x198>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d11b      	bne.n	8010bd6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010baa:	2300      	movs	r3, #0
 8010bac:	617b      	str	r3, [r7, #20]
 8010bae:	e00e      	b.n	8010bce <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 8010bb0:	687a      	ldr	r2, [r7, #4]
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	18d3      	adds	r3, r2, r3
 8010bb6:	3302      	adds	r3, #2
 8010bb8:	2200      	movs	r2, #0
 8010bba:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 8010bbc:	687a      	ldr	r2, [r7, #4]
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	18d3      	adds	r3, r2, r3
 8010bc2:	3308      	adds	r3, #8
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	617b      	str	r3, [r7, #20]
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2b05      	cmp	r3, #5
 8010bd2:	d9ed      	bls.n	8010bb0 <getSoundData+0x80>
 8010bd4:	e02c      	b.n	8010c30 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	1c59      	adds	r1, r3, #1
 8010bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8010ccc <getSoundData+0x19c>)
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	4b3b      	ldr	r3, [pc, #236]	@ (8010cd0 <getSoundData+0x1a0>)
 8010be2:	681c      	ldr	r4, [r3, #0]
 8010be4:	4b38      	ldr	r3, [pc, #224]	@ (8010cc8 <getSoundData+0x198>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	0023      	movs	r3, r4
 8010bec:	f000 fde8 	bl	80117c0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	613b      	str	r3, [r7, #16]
 8010bf4:	e019      	b.n	8010c2a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	18d3      	adds	r3, r2, r3
 8010bfc:	1c98      	adds	r0, r3, #2
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	3308      	adds	r3, #8
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8010c06:	4b33      	ldr	r3, [pc, #204]	@ (8010cd4 <getSoundData+0x1a4>)
 8010c08:	693a      	ldr	r2, [r7, #16]
 8010c0a:	0092      	lsls	r2, r2, #2
 8010c0c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8010c0e:	4b32      	ldr	r3, [pc, #200]	@ (8010cd8 <getSoundData+0x1a8>)
 8010c10:	693a      	ldr	r2, [r7, #16]
 8010c12:	0092      	lsls	r2, r2, #2
 8010c14:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8010c16:	4b2c      	ldr	r3, [pc, #176]	@ (8010cc8 <getSoundData+0x198>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	0013      	movs	r3, r2
 8010c1e:	0022      	movs	r2, r4
 8010c20:	f000 fdce 	bl	80117c0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	3301      	adds	r3, #1
 8010c28:	613b      	str	r3, [r7, #16]
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	2b05      	cmp	r3, #5
 8010c2e:	d9e2      	bls.n	8010bf6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8010c30:	1cbb      	adds	r3, r7, #2
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d028      	beq.n	8010c8a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8010c38:	240e      	movs	r4, #14
 8010c3a:	193b      	adds	r3, r7, r4
 8010c3c:	2200      	movs	r2, #0
 8010c3e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8010c40:	250d      	movs	r5, #13
 8010c42:	197b      	adds	r3, r7, r5
 8010c44:	2200      	movs	r2, #0
 8010c46:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8010c48:	4b24      	ldr	r3, [pc, #144]	@ (8010cdc <getSoundData+0x1ac>)
 8010c4a:	6818      	ldr	r0, [r3, #0]
 8010c4c:	4924      	ldr	r1, [pc, #144]	@ (8010ce0 <getSoundData+0x1b0>)
 8010c4e:	197b      	adds	r3, r7, r5
 8010c50:	193a      	adds	r2, r7, r4
 8010c52:	f000 fe59 	bl	8011908 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8010c56:	193b      	adds	r3, r7, r4
 8010c58:	881a      	ldrh	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	21ff      	movs	r1, #255	@ 0xff
 8010c5e:	4011      	ands	r1, r2
 8010c60:	000c      	movs	r4, r1
 8010c62:	7b99      	ldrb	r1, [r3, #14]
 8010c64:	2000      	movs	r0, #0
 8010c66:	4001      	ands	r1, r0
 8010c68:	1c08      	adds	r0, r1, #0
 8010c6a:	1c21      	adds	r1, r4, #0
 8010c6c:	4301      	orrs	r1, r0
 8010c6e:	7399      	strb	r1, [r3, #14]
 8010c70:	0a12      	lsrs	r2, r2, #8
 8010c72:	b290      	uxth	r0, r2
 8010c74:	7bda      	ldrb	r2, [r3, #15]
 8010c76:	2100      	movs	r1, #0
 8010c78:	400a      	ands	r2, r1
 8010c7a:	1c11      	adds	r1, r2, #0
 8010c7c:	1c02      	adds	r2, r0, #0
 8010c7e:	430a      	orrs	r2, r1
 8010c80:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8010c82:	197b      	adds	r3, r7, r5
 8010c84:	781a      	ldrb	r2, [r3, #0]
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8010c8a:	f000 f86f 	bl	8010d6c <micSettlingComplete>
 8010c8e:	0003      	movs	r3, r0
 8010c90:	001a      	movs	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8010c96:	4b0a      	ldr	r3, [pc, #40]	@ (8010cc0 <getSoundData+0x190>)
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d005      	beq.n	8010cac <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010ca0:	4b08      	ldr	r3, [pc, #32]	@ (8010cc4 <getSoundData+0x194>)
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	b25b      	sxtb	r3, r3
 8010ca6:	0018      	movs	r0, r3
 8010ca8:	f7ff ff06 	bl	8010ab8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8010cac:	2301      	movs	r3, #1
}
 8010cae:	0018      	movs	r0, r3
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	b006      	add	sp, #24
 8010cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010cb6:	46c0      	nop			@ (mov r8, r8)
 8010cb8:	20000fc6 	.word	0x20000fc6
 8010cbc:	20000fc9 	.word	0x20000fc9
 8010cc0:	20000fc8 	.word	0x20000fc8
 8010cc4:	20001a18 	.word	0x20001a18
 8010cc8:	20001a54 	.word	0x20001a54
 8010ccc:	20001a1c 	.word	0x20001a1c
 8010cd0:	20001a20 	.word	0x20001a20
 8010cd4:	20001a24 	.word	0x20001a24
 8010cd8:	20001a3c 	.word	0x20001a3c
 8010cdc:	20000fd0 	.word	0x20000fd0
 8010ce0:	3b5c7333 	.word	0x3b5c7333

08010ce4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	607a      	str	r2, [r7, #4]
 8010cf0:	001a      	movs	r2, r3
 8010cf2:	1cfb      	adds	r3, r7, #3
 8010cf4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8010cf6:	4b09      	ldr	r3, [pc, #36]	@ (8010d1c <soundInit+0x38>)
 8010cf8:	68ba      	ldr	r2, [r7, #8]
 8010cfa:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8010cfc:	4b08      	ldr	r3, [pc, #32]	@ (8010d20 <soundInit+0x3c>)
 8010cfe:	687a      	ldr	r2, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8010d02:	4b08      	ldr	r3, [pc, #32]	@ (8010d24 <soundInit+0x40>)
 8010d04:	68fa      	ldr	r2, [r7, #12]
 8010d06:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8010d08:	4b07      	ldr	r3, [pc, #28]	@ (8010d28 <soundInit+0x44>)
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	569a      	ldrsb	r2, [r3, r2]
 8010d0e:	4b06      	ldr	r3, [pc, #24]	@ (8010d28 <soundInit+0x44>)
 8010d10:	701a      	strb	r2, [r3, #0]

    return true;
 8010d12:	2301      	movs	r3, #1
}
 8010d14:	0018      	movs	r0, r3
 8010d16:	46bd      	mov	sp, r7
 8010d18:	b004      	add	sp, #16
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	20001a10 	.word	0x20001a10
 8010d20:	20001a0c 	.word	0x20001a0c
 8010d24:	20001a14 	.word	0x20001a14
 8010d28:	20001a18 	.word	0x20001a18

08010d2c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8010d30:	4b02      	ldr	r3, [pc, #8]	@ (8010d3c <clearMaximumAmplitude+0x10>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]
}
 8010d36:	46c0      	nop			@ (mov r8, r8)
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	20000fd0 	.word	0x20000fd0

08010d40 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8010d44:	4b08      	ldr	r3, [pc, #32]	@ (8010d68 <startMicSettlingPeriod+0x28>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8010d4e:	4b06      	ldr	r3, [pc, #24]	@ (8010d68 <startMicSettlingPeriod+0x28>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	0018      	movs	r0, r3
 8010d54:	f00a ffee 	bl	801bd34 <HAL_TIM_Base_Start>
 8010d58:	1e03      	subs	r3, r0, #0
 8010d5a:	d001      	beq.n	8010d60 <startMicSettlingPeriod+0x20>
    {
        return false;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	e000      	b.n	8010d62 <startMicSettlingPeriod+0x22>
    }
    return true;
 8010d60:	2301      	movs	r3, #1
}
 8010d62:	0018      	movs	r0, r3
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20001a0c 	.word	0x20001a0c

08010d6c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8010d72:	4b0e      	ldr	r3, [pc, #56]	@ (8010dac <micSettlingComplete+0x40>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	691b      	ldr	r3, [r3, #16]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	401a      	ands	r2, r3
 8010d7e:	1dfb      	adds	r3, r7, #7
 8010d80:	3a01      	subs	r2, #1
 8010d82:	4251      	negs	r1, r2
 8010d84:	414a      	adcs	r2, r1
 8010d86:	701a      	strb	r2, [r3, #0]
    if (complete)
 8010d88:	1dfb      	adds	r3, r7, #7
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d007      	beq.n	8010da0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8010d90:	4b06      	ldr	r3, [pc, #24]	@ (8010dac <micSettlingComplete+0x40>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	0018      	movs	r0, r3
 8010d96:	f00b f817 	bl	801bdc8 <HAL_TIM_Base_Stop>
      DataReady = true;
 8010d9a:	4b05      	ldr	r3, [pc, #20]	@ (8010db0 <micSettlingComplete+0x44>)
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8010da0:	1dfb      	adds	r3, r7, #7
 8010da2:	781b      	ldrb	r3, [r3, #0]
}
 8010da4:	0018      	movs	r0, r3
 8010da6:	46bd      	mov	sp, r7
 8010da8:	b002      	add	sp, #8
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	20001a0c 	.word	0x20001a0c
 8010db0:	20000fc5 	.word	0x20000fc5

08010db4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	0002      	movs	r2, r0
 8010dbc:	1dfb      	adds	r3, r7, #7
 8010dbe:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8010dc0:	4b29      	ldr	r3, [pc, #164]	@ (8010e68 <enableMicrophone+0xb4>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	1dfa      	adds	r2, r7, #7
 8010dc8:	7812      	ldrb	r2, [r2, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d101      	bne.n	8010dd2 <enableMicrophone+0x1e>
    {
        return true;
 8010dce:	2301      	movs	r3, #1
 8010dd0:	e045      	b.n	8010e5e <enableMicrophone+0xaa>
    }
    if (bEnable)
 8010dd2:	1dfb      	adds	r3, r7, #7
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d025      	beq.n	8010e26 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8010dda:	f7ff ffb1 	bl	8010d40 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8010dde:	4b23      	ldr	r3, [pc, #140]	@ (8010e6c <enableMicrophone+0xb8>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2280      	movs	r2, #128	@ 0x80
 8010de4:	0092      	lsls	r2, r2, #2
 8010de6:	4922      	ldr	r1, [pc, #136]	@ (8010e70 <enableMicrophone+0xbc>)
 8010de8:	0018      	movs	r0, r3
 8010dea:	f007 fa0d 	bl	8018208 <HAL_I2S_Receive_DMA>
 8010dee:	1e03      	subs	r3, r0, #0
 8010df0:	d001      	beq.n	8010df6 <enableMicrophone+0x42>
        {
            return false;
 8010df2:	2300      	movs	r3, #0
 8010df4:	e033      	b.n	8010e5e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8010df6:	f7ff ff99 	bl	8010d2c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8010dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8010e74 <enableMicrophone+0xc0>)
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8010e00:	4b1d      	ldr	r3, [pc, #116]	@ (8010e78 <enableMicrophone+0xc4>)
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	b25b      	sxtb	r3, r3
 8010e06:	0018      	movs	r0, r3
 8010e08:	f7ff fe56 	bl	8010ab8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8010e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8010e7c <enableMicrophone+0xc8>)
 8010e0e:	2201      	movs	r2, #1
 8010e10:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8010e12:	4b15      	ldr	r3, [pc, #84]	@ (8010e68 <enableMicrophone+0xb4>)
 8010e14:	2201      	movs	r2, #1
 8010e16:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010e18:	4b19      	ldr	r3, [pc, #100]	@ (8010e80 <enableMicrophone+0xcc>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010e1e:	4b19      	ldr	r3, [pc, #100]	@ (8010e84 <enableMicrophone+0xd0>)
 8010e20:	2200      	movs	r2, #0
 8010e22:	701a      	strb	r2, [r3, #0]
 8010e24:	e01a      	b.n	8010e5c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8010e26:	4b14      	ldr	r3, [pc, #80]	@ (8010e78 <enableMicrophone+0xc4>)
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	b25b      	sxtb	r3, r3
 8010e2c:	0018      	movs	r0, r3
 8010e2e:	f7ff fe5d 	bl	8010aec <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8010e32:	4b12      	ldr	r3, [pc, #72]	@ (8010e7c <enableMicrophone+0xc8>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8010e38:	4b11      	ldr	r3, [pc, #68]	@ (8010e80 <enableMicrophone+0xcc>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8010e3e:	4b11      	ldr	r3, [pc, #68]	@ (8010e84 <enableMicrophone+0xd0>)
 8010e40:	2200      	movs	r2, #0
 8010e42:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8010e44:	4b09      	ldr	r3, [pc, #36]	@ (8010e6c <enableMicrophone+0xb8>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f007 fa9f 	bl	801838c <HAL_I2S_DMAStop>
 8010e4e:	1e03      	subs	r3, r0, #0
 8010e50:	d001      	beq.n	8010e56 <enableMicrophone+0xa2>
        {
            return false;
 8010e52:	2300      	movs	r3, #0
 8010e54:	e003      	b.n	8010e5e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8010e56:	4b04      	ldr	r3, [pc, #16]	@ (8010e68 <enableMicrophone+0xb4>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8010e5c:	2301      	movs	r3, #1
}
 8010e5e:	0018      	movs	r0, r3
 8010e60:	46bd      	mov	sp, r7
 8010e62:	b002      	add	sp, #8
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	46c0      	nop			@ (mov r8, r8)
 8010e68:	20000fc6 	.word	0x20000fc6
 8010e6c:	20001a10 	.word	0x20001a10
 8010e70:	2000100c 	.word	0x2000100c
 8010e74:	20000fcc 	.word	0x20000fcc
 8010e78:	20001a18 	.word	0x20001a18
 8010e7c:	20000fc8 	.word	0x20000fc8
 8010e80:	20000fc7 	.word	0x20000fc7
 8010e84:	20000fc9 	.word	0x20000fc9

08010e88 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8010e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8010ec0 <startSPLcalculation+0x38>)
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	2201      	movs	r2, #1
 8010e94:	4053      	eors	r3, r2
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <startSPLcalculation+0x18>
    {
        return false;
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	e00c      	b.n	8010eba <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8010ea0:	4b08      	ldr	r3, [pc, #32]	@ (8010ec4 <startSPLcalculation+0x3c>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d001      	beq.n	8010eae <startSPLcalculation+0x26>
    {
        return true;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e005      	b.n	8010eba <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8010eae:	f000 fb63 	bl	8011578 <resetSPLstate>
    SPLcalcEnabled = true;
 8010eb2:	4b04      	ldr	r3, [pc, #16]	@ (8010ec4 <startSPLcalculation+0x3c>)
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	701a      	strb	r2, [r3, #0]
    return true;
 8010eb8:	2301      	movs	r3, #1
}
 8010eba:	0018      	movs	r0, r3
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	20000fc6 	.word	0x20000fc6
 8010ec4:	20000fc7 	.word	0x20000fc7

08010ec8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b082      	sub	sp, #8
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010ed0:	4b05      	ldr	r3, [pc, #20]	@ (8010ee8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d102      	bne.n	8010ee0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8010eda:	2000      	movs	r0, #0
 8010edc:	f000 f81a 	bl	8010f14 <processHalfDMAbuffer>
  }
}
 8010ee0:	46c0      	nop			@ (mov r8, r8)
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	b002      	add	sp, #8
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	20001a10 	.word	0x20001a10

08010eec <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010ef4:	4b06      	ldr	r3, [pc, #24]	@ (8010f10 <HAL_I2S_RxCpltCallback+0x24>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d104      	bne.n	8010f08 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8010efe:	2380      	movs	r3, #128	@ 0x80
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	0018      	movs	r0, r3
 8010f04:	f000 f806 	bl	8010f14 <processHalfDMAbuffer>
  }
}
 8010f08:	46c0      	nop			@ (mov r8, r8)
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	b002      	add	sp, #8
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	20001a10 	.word	0x20001a10

08010f14 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	005a      	lsls	r2, r3, #1
 8010f20:	4b15      	ldr	r3, [pc, #84]	@ (8010f78 <processHalfDMAbuffer+0x64>)
 8010f22:	18d3      	adds	r3, r2, r3
 8010f24:	4a15      	ldr	r2, [pc, #84]	@ (8010f7c <processHalfDMAbuffer+0x68>)
 8010f26:	2180      	movs	r1, #128	@ 0x80
 8010f28:	0089      	lsls	r1, r1, #2
 8010f2a:	0018      	movs	r0, r3
 8010f2c:	f000 fd35 	bl	801199a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8010f30:	4b13      	ldr	r3, [pc, #76]	@ (8010f80 <processHalfDMAbuffer+0x6c>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	425a      	negs	r2, r3
 8010f36:	4153      	adcs	r3, r2
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	4b11      	ldr	r3, [pc, #68]	@ (8010f80 <processHalfDMAbuffer+0x6c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2109      	movs	r1, #9
 8010f40:	4299      	cmp	r1, r3
 8010f42:	419b      	sbcs	r3, r3
 8010f44:	425b      	negs	r3, r3
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	480c      	ldr	r0, [pc, #48]	@ (8010f7c <processHalfDMAbuffer+0x68>)
 8010f4a:	2180      	movs	r1, #128	@ 0x80
 8010f4c:	f000 fb46 	bl	80115dc <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8010f50:	4b0b      	ldr	r3, [pc, #44]	@ (8010f80 <processHalfDMAbuffer+0x6c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b09      	cmp	r3, #9
 8010f56:	d804      	bhi.n	8010f62 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8010f58:	4b09      	ldr	r3, [pc, #36]	@ (8010f80 <processHalfDMAbuffer+0x6c>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	1c5a      	adds	r2, r3, #1
 8010f5e:	4b08      	ldr	r3, [pc, #32]	@ (8010f80 <processHalfDMAbuffer+0x6c>)
 8010f60:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8010f62:	4b08      	ldr	r3, [pc, #32]	@ (8010f84 <processHalfDMAbuffer+0x70>)
 8010f64:	781b      	ldrb	r3, [r3, #0]
 8010f66:	b2db      	uxtb	r3, r3
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d001      	beq.n	8010f70 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8010f6c:	f000 f826 	bl	8010fbc <calculateSPLQ31>
    }
}
 8010f70:	46c0      	nop			@ (mov r8, r8)
 8010f72:	46bd      	mov	sp, r7
 8010f74:	b002      	add	sp, #8
 8010f76:	bd80      	pop	{r7, pc}
 8010f78:	2000100c 	.word	0x2000100c
 8010f7c:	2000180c 	.word	0x2000180c
 8010f80:	20000fcc 	.word	0x20000fcc
 8010f84:	20000fc7 	.word	0x20000fc7

08010f88 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8010f90:	4b07      	ldr	r3, [pc, #28]	@ (8010fb0 <HAL_I2S_ErrorCallback+0x28>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d106      	bne.n	8010fa8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8010f9a:	4a06      	ldr	r2, [pc, #24]	@ (8010fb4 <HAL_I2S_ErrorCallback+0x2c>)
 8010f9c:	239e      	movs	r3, #158	@ 0x9e
 8010f9e:	0059      	lsls	r1, r3, #1
 8010fa0:	4b05      	ldr	r3, [pc, #20]	@ (8010fb8 <HAL_I2S_ErrorCallback+0x30>)
 8010fa2:	0018      	movs	r0, r3
 8010fa4:	f002 f96e 	bl	8013284 <errorHandler>
  }
}
 8010fa8:	46c0      	nop			@ (mov r8, r8)
 8010faa:	46bd      	mov	sp, r7
 8010fac:	b002      	add	sp, #8
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	20001a10 	.word	0x20001a10
 8010fb4:	0802d1dc 	.word	0x0802d1dc
 8010fb8:	0802dafc 	.word	0x0802dafc

08010fbc <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8010fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fbe:	b0b3      	sub	sp, #204	@ 0xcc
 8010fc0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8010fc2:	4ae2      	ldr	r2, [pc, #904]	@ (801134c <calculateSPLQ31+0x390>)
 8010fc4:	2338      	movs	r3, #56	@ 0x38
 8010fc6:	2030      	movs	r0, #48	@ 0x30
 8010fc8:	181b      	adds	r3, r3, r0
 8010fca:	19d9      	adds	r1, r3, r7
 8010fcc:	2334      	movs	r3, #52	@ 0x34
 8010fce:	181b      	adds	r3, r3, r0
 8010fd0:	19d8      	adds	r0, r3, r7
 8010fd2:	2380      	movs	r3, #128	@ 0x80
 8010fd4:	f000 fc36 	bl	8011844 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8010fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	da00      	bge.n	8010fe0 <calculateSPLQ31+0x24>
 8010fde:	3301      	adds	r3, #1
 8010fe0:	105b      	asrs	r3, r3, #1
 8010fe2:	001a      	movs	r2, r3
 8010fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	da00      	bge.n	8010fec <calculateSPLQ31+0x30>
 8010fea:	3301      	adds	r3, #1
 8010fec:	105b      	asrs	r3, r3, #1
 8010fee:	18d3      	adds	r3, r2, r3
 8010ff0:	2188      	movs	r1, #136	@ 0x88
 8010ff2:	187a      	adds	r2, r7, r1
 8010ff4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8010ff6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010ff8:	187b      	adds	r3, r7, r1
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	3304      	adds	r3, #4
 8011000:	2284      	movs	r2, #132	@ 0x84
 8011002:	18b9      	adds	r1, r7, r2
 8011004:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011006:	18bb      	adds	r3, r7, r2
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4ad1      	ldr	r2, [pc, #836]	@ (8011350 <calculateSPLQ31+0x394>)
 801100c:	0019      	movs	r1, r3
 801100e:	0010      	movs	r0, r2
 8011010:	f000 fc58 	bl	80118c4 <getPo2factor>
 8011014:	0003      	movs	r3, r0
 8011016:	2280      	movs	r2, #128	@ 0x80
 8011018:	18ba      	adds	r2, r7, r2
 801101a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 801101c:	2300      	movs	r3, #0
 801101e:	2284      	movs	r2, #132	@ 0x84
 8011020:	2130      	movs	r1, #48	@ 0x30
 8011022:	1852      	adds	r2, r2, r1
 8011024:	19d2      	adds	r2, r2, r7
 8011026:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011028:	2300      	movs	r3, #0
 801102a:	2280      	movs	r2, #128	@ 0x80
 801102c:	1852      	adds	r2, r2, r1
 801102e:	19d2      	adds	r2, r2, r7
 8011030:	6013      	str	r3, [r2, #0]
 8011032:	e032      	b.n	801109a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011034:	4ac5      	ldr	r2, [pc, #788]	@ (801134c <calculateSPLQ31+0x390>)
 8011036:	2680      	movs	r6, #128	@ 0x80
 8011038:	2330      	movs	r3, #48	@ 0x30
 801103a:	18f1      	adds	r1, r6, r3
 801103c:	19cb      	adds	r3, r1, r7
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	589a      	ldr	r2, [r3, r2]
 8011044:	2188      	movs	r1, #136	@ 0x88
 8011046:	1879      	adds	r1, r7, r1
 8011048:	680b      	ldr	r3, [r1, #0]
 801104a:	1ad2      	subs	r2, r2, r3
 801104c:	2180      	movs	r1, #128	@ 0x80
 801104e:	1879      	adds	r1, r7, r1
 8011050:	680b      	ldr	r3, [r1, #0]
 8011052:	409a      	lsls	r2, r3
 8011054:	0011      	movs	r1, r2
 8011056:	4abf      	ldr	r2, [pc, #764]	@ (8011354 <calculateSPLQ31+0x398>)
 8011058:	2084      	movs	r0, #132	@ 0x84
 801105a:	2330      	movs	r3, #48	@ 0x30
 801105c:	18c3      	adds	r3, r0, r3
 801105e:	19db      	adds	r3, r3, r7
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011066:	2230      	movs	r2, #48	@ 0x30
 8011068:	1883      	adds	r3, r0, r2
 801106a:	19db      	adds	r3, r3, r7
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	3301      	adds	r3, #1
 8011070:	49b8      	ldr	r1, [pc, #736]	@ (8011354 <calculateSPLQ31+0x398>)
 8011072:	009a      	lsls	r2, r3, #2
 8011074:	2300      	movs	r3, #0
 8011076:	5053      	str	r3, [r2, r1]
        count += 2;
 8011078:	2230      	movs	r2, #48	@ 0x30
 801107a:	1883      	adds	r3, r0, r2
 801107c:	19db      	adds	r3, r3, r7
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3302      	adds	r3, #2
 8011082:	0011      	movs	r1, r2
 8011084:	1882      	adds	r2, r0, r2
 8011086:	19d2      	adds	r2, r2, r7
 8011088:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 801108a:	000a      	movs	r2, r1
 801108c:	18b3      	adds	r3, r6, r2
 801108e:	19db      	adds	r3, r3, r7
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3301      	adds	r3, #1
 8011094:	18b2      	adds	r2, r6, r2
 8011096:	19d2      	adds	r2, r2, r7
 8011098:	6013      	str	r3, [r2, #0]
 801109a:	2380      	movs	r3, #128	@ 0x80
 801109c:	2630      	movs	r6, #48	@ 0x30
 801109e:	199b      	adds	r3, r3, r6
 80110a0:	19db      	adds	r3, r3, r7
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80110a6:	d9c5      	bls.n	8011034 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 80110a8:	4bab      	ldr	r3, [pc, #684]	@ (8011358 <calculateSPLQ31+0x39c>)
 80110aa:	6818      	ldr	r0, [r3, #0]
 80110ac:	49a9      	ldr	r1, [pc, #676]	@ (8011354 <calculateSPLQ31+0x398>)
 80110ae:	2301      	movs	r3, #1
 80110b0:	2200      	movs	r2, #0
 80110b2:	f011 ff07 	bl	8022ec4 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 80110b6:	4aa9      	ldr	r2, [pc, #676]	@ (801135c <calculateSPLQ31+0x3a0>)
 80110b8:	2338      	movs	r3, #56	@ 0x38
 80110ba:	199b      	adds	r3, r3, r6
 80110bc:	19d9      	adds	r1, r3, r7
 80110be:	2334      	movs	r3, #52	@ 0x34
 80110c0:	199b      	adds	r3, r3, r6
 80110c2:	19d8      	adds	r0, r3, r7
 80110c4:	237e      	movs	r3, #126	@ 0x7e
 80110c6:	f000 fbbd 	bl	8011844 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 80110ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80110cc:	2380      	movs	r3, #128	@ 0x80
 80110ce:	061b      	lsls	r3, r3, #24
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d101      	bne.n	80110d8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 80110d4:	4b9e      	ldr	r3, [pc, #632]	@ (8011350 <calculateSPLQ31+0x394>)
 80110d6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 80110d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80110da:	2380      	movs	r3, #128	@ 0x80
 80110dc:	061b      	lsls	r3, r3, #24
 80110de:	429a      	cmp	r2, r3
 80110e0:	d101      	bne.n	80110e6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 80110e2:	4b9b      	ldr	r3, [pc, #620]	@ (8011350 <calculateSPLQ31+0x394>)
 80110e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 80110e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110e8:	17da      	asrs	r2, r3, #31
 80110ea:	189b      	adds	r3, r3, r2
 80110ec:	4053      	eors	r3, r2
 80110ee:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 80110f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110f2:	17da      	asrs	r2, r3, #31
 80110f4:	189b      	adds	r3, r3, r2
 80110f6:	4053      	eors	r3, r2
 80110f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 80110fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80110fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80110fe:	429a      	cmp	r2, r3
 8011100:	dd01      	ble.n	8011106 <calculateSPLQ31+0x14a>
    {
        max = min;
 8011102:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011104:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011108:	3304      	adds	r3, #4
 801110a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 801110c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801110e:	4a90      	ldr	r2, [pc, #576]	@ (8011350 <calculateSPLQ31+0x394>)
 8011110:	0019      	movs	r1, r3
 8011112:	0010      	movs	r0, r2
 8011114:	f000 fbd6 	bl	80118c4 <getPo2factor>
 8011118:	0003      	movs	r3, r0
 801111a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 801111c:	2302      	movs	r3, #2
 801111e:	22ac      	movs	r2, #172	@ 0xac
 8011120:	18ba      	adds	r2, r7, r2
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	e012      	b.n	801114c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011126:	4a8b      	ldr	r2, [pc, #556]	@ (8011354 <calculateSPLQ31+0x398>)
 8011128:	20ac      	movs	r0, #172	@ 0xac
 801112a:	183b      	adds	r3, r7, r0
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	589a      	ldr	r2, [r3, r2]
 8011132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011134:	409a      	lsls	r2, r3
 8011136:	0011      	movs	r1, r2
 8011138:	4a86      	ldr	r2, [pc, #536]	@ (8011354 <calculateSPLQ31+0x398>)
 801113a:	183b      	adds	r3, r7, r0
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011142:	183b      	adds	r3, r7, r0
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	3301      	adds	r3, #1
 8011148:	183a      	adds	r2, r7, r0
 801114a:	6013      	str	r3, [r2, #0]
 801114c:	23ac      	movs	r3, #172	@ 0xac
 801114e:	18fb      	adds	r3, r7, r3
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2b7f      	cmp	r3, #127	@ 0x7f
 8011154:	d9e7      	bls.n	8011126 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011156:	4b7d      	ldr	r3, [pc, #500]	@ (801134c <calculateSPLQ31+0x390>)
 8011158:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 801115a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801115c:	4b7d      	ldr	r3, [pc, #500]	@ (8011354 <calculateSPLQ31+0x398>)
 801115e:	2240      	movs	r2, #64	@ 0x40
 8011160:	0018      	movs	r0, r3
 8011162:	f012 fc59 	bl	8023a18 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011166:	2330      	movs	r3, #48	@ 0x30
 8011168:	18fb      	adds	r3, r7, r3
 801116a:	0018      	movs	r0, r3
 801116c:	2330      	movs	r3, #48	@ 0x30
 801116e:	001a      	movs	r2, r3
 8011170:	2100      	movs	r1, #0
 8011172:	f014 faa5 	bl	80256c0 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011176:	2200      	movs	r2, #0
 8011178:	2300      	movs	r3, #0
 801117a:	21a0      	movs	r1, #160	@ 0xa0
 801117c:	1879      	adds	r1, r7, r1
 801117e:	600a      	str	r2, [r1, #0]
 8011180:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011182:	2301      	movs	r3, #1
 8011184:	229c      	movs	r2, #156	@ 0x9c
 8011186:	18ba      	adds	r2, r7, r2
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	e05b      	b.n	8011244 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 801118c:	269c      	movs	r6, #156	@ 0x9c
 801118e:	19bb      	adds	r3, r7, r6
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	009a      	lsls	r2, r3, #2
 8011194:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011196:	189b      	adds	r3, r3, r2
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	613b      	str	r3, [r7, #16]
 801119c:	17db      	asrs	r3, r3, #31
 801119e:	617b      	str	r3, [r7, #20]
 80111a0:	4b6f      	ldr	r3, [pc, #444]	@ (8011360 <calculateSPLQ31+0x3a4>)
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	19bb      	adds	r3, r7, r6
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	005b      	lsls	r3, r3, #1
 80111aa:	18d3      	adds	r3, r2, r3
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	60bb      	str	r3, [r7, #8]
 80111b0:	2300      	movs	r3, #0
 80111b2:	60fb      	str	r3, [r7, #12]
 80111b4:	68ba      	ldr	r2, [r7, #8]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6938      	ldr	r0, [r7, #16]
 80111ba:	6979      	ldr	r1, [r7, #20]
 80111bc:	f7ef fa00 	bl	80005c0 <__aeabi_lmul>
 80111c0:	0002      	movs	r2, r0
 80111c2:	000b      	movs	r3, r1
 80111c4:	0010      	movs	r0, r2
 80111c6:	0019      	movs	r1, r3
 80111c8:	23a0      	movs	r3, #160	@ 0xa0
 80111ca:	18fa      	adds	r2, r7, r3
 80111cc:	6853      	ldr	r3, [r2, #4]
 80111ce:	6812      	ldr	r2, [r2, #0]
 80111d0:	1812      	adds	r2, r2, r0
 80111d2:	414b      	adcs	r3, r1
 80111d4:	21a0      	movs	r1, #160	@ 0xa0
 80111d6:	1879      	adds	r1, r7, r1
 80111d8:	600a      	str	r2, [r1, #0]
 80111da:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 80111dc:	4b61      	ldr	r3, [pc, #388]	@ (8011364 <calculateSPLQ31+0x3a8>)
 80111de:	681a      	ldr	r2, [r3, #0]
 80111e0:	19bb      	adds	r3, r7, r6
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	18d3      	adds	r3, r2, r3
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	2b06      	cmp	r3, #6
 80111ea:	d025      	beq.n	8011238 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 80111ec:	4b5d      	ldr	r3, [pc, #372]	@ (8011364 <calculateSPLQ31+0x3a8>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	19bb      	adds	r3, r7, r6
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	18d3      	adds	r3, r2, r3
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2230      	movs	r2, #48	@ 0x30
 80111fa:	18ba      	adds	r2, r7, r2
 80111fc:	00db      	lsls	r3, r3, #3
 80111fe:	18d3      	adds	r3, r2, r3
 8011200:	6818      	ldr	r0, [r3, #0]
 8011202:	6859      	ldr	r1, [r3, #4]
 8011204:	19bb      	adds	r3, r7, r6
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	009a      	lsls	r2, r3, #2
 801120a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801120c:	189b      	adds	r3, r3, r2
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	603b      	str	r3, [r7, #0]
 8011212:	17db      	asrs	r3, r3, #31
 8011214:	607b      	str	r3, [r7, #4]
 8011216:	4b53      	ldr	r3, [pc, #332]	@ (8011364 <calculateSPLQ31+0x3a8>)
 8011218:	681a      	ldr	r2, [r3, #0]
 801121a:	19be      	adds	r6, r7, r6
 801121c:	6833      	ldr	r3, [r6, #0]
 801121e:	18d3      	adds	r3, r2, r3
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	001e      	movs	r6, r3
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	1880      	adds	r0, r0, r2
 801122a:	4159      	adcs	r1, r3
 801122c:	2330      	movs	r3, #48	@ 0x30
 801122e:	18fa      	adds	r2, r7, r3
 8011230:	00f3      	lsls	r3, r6, #3
 8011232:	18d3      	adds	r3, r2, r3
 8011234:	6018      	str	r0, [r3, #0]
 8011236:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011238:	229c      	movs	r2, #156	@ 0x9c
 801123a:	18bb      	adds	r3, r7, r2
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3301      	adds	r3, #1
 8011240:	18ba      	adds	r2, r7, r2
 8011242:	6013      	str	r3, [r2, #0]
 8011244:	239c      	movs	r3, #156	@ 0x9c
 8011246:	18fb      	adds	r3, r7, r3
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	2b3f      	cmp	r3, #63	@ 0x3f
 801124c:	d99e      	bls.n	801118c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 801124e:	2380      	movs	r3, #128	@ 0x80
 8011250:	18fb      	adds	r3, r7, r3
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	005b      	lsls	r3, r3, #1
 8011256:	001a      	movs	r2, r3
 8011258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801125a:	005b      	lsls	r3, r3, #1
 801125c:	18d3      	adds	r3, r2, r3
 801125e:	3b22      	subs	r3, #34	@ 0x22
 8011260:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8011262:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011264:	17da      	asrs	r2, r3, #31
 8011266:	189b      	adds	r3, r3, r2
 8011268:	4053      	eors	r3, r2
 801126a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 801126c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801126e:	2b00      	cmp	r3, #0
 8011270:	da62      	bge.n	8011338 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8011272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011274:	3b20      	subs	r3, #32
 8011276:	2b00      	cmp	r3, #0
 8011278:	db05      	blt.n	8011286 <calculateSPLQ31+0x2ca>
 801127a:	22a0      	movs	r2, #160	@ 0xa0
 801127c:	18ba      	adds	r2, r7, r2
 801127e:	6812      	ldr	r2, [r2, #0]
 8011280:	409a      	lsls	r2, r3
 8011282:	627a      	str	r2, [r7, #36]	@ 0x24
 8011284:	e010      	b.n	80112a8 <calculateSPLQ31+0x2ec>
 8011286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011288:	2220      	movs	r2, #32
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	22a0      	movs	r2, #160	@ 0xa0
 801128e:	18ba      	adds	r2, r7, r2
 8011290:	6812      	ldr	r2, [r2, #0]
 8011292:	40da      	lsrs	r2, r3
 8011294:	0013      	movs	r3, r2
 8011296:	22a4      	movs	r2, #164	@ 0xa4
 8011298:	18ba      	adds	r2, r7, r2
 801129a:	6811      	ldr	r1, [r2, #0]
 801129c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801129e:	4091      	lsls	r1, r2
 80112a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80112a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112a4:	431a      	orrs	r2, r3
 80112a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80112a8:	21a0      	movs	r1, #160	@ 0xa0
 80112aa:	187b      	adds	r3, r7, r1
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112b0:	409a      	lsls	r2, r3
 80112b2:	623a      	str	r2, [r7, #32]
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80112b8:	187a      	adds	r2, r7, r1
 80112ba:	6013      	str	r3, [r2, #0]
 80112bc:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80112be:	2300      	movs	r3, #0
 80112c0:	2298      	movs	r2, #152	@ 0x98
 80112c2:	18ba      	adds	r2, r7, r2
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	e031      	b.n	801132c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 80112c8:	2330      	movs	r3, #48	@ 0x30
 80112ca:	18fa      	adds	r2, r7, r3
 80112cc:	2398      	movs	r3, #152	@ 0x98
 80112ce:	18fb      	adds	r3, r7, r3
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	00db      	lsls	r3, r3, #3
 80112d4:	18d3      	adds	r3, r2, r3
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	685b      	ldr	r3, [r3, #4]
 80112da:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80112dc:	3920      	subs	r1, #32
 80112de:	2900      	cmp	r1, #0
 80112e0:	db03      	blt.n	80112ea <calculateSPLQ31+0x32e>
 80112e2:	0010      	movs	r0, r2
 80112e4:	4088      	lsls	r0, r1
 80112e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80112e8:	e00c      	b.n	8011304 <calculateSPLQ31+0x348>
 80112ea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80112ec:	2020      	movs	r0, #32
 80112ee:	1a41      	subs	r1, r0, r1
 80112f0:	0010      	movs	r0, r2
 80112f2:	40c8      	lsrs	r0, r1
 80112f4:	0001      	movs	r1, r0
 80112f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80112f8:	001c      	movs	r4, r3
 80112fa:	4084      	lsls	r4, r0
 80112fc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 80112fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011300:	4308      	orrs	r0, r1
 8011302:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8011304:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011306:	0013      	movs	r3, r2
 8011308:	408b      	lsls	r3, r1
 801130a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801130c:	2330      	movs	r3, #48	@ 0x30
 801130e:	18fa      	adds	r2, r7, r3
 8011310:	2098      	movs	r0, #152	@ 0x98
 8011312:	183b      	adds	r3, r7, r0
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	00db      	lsls	r3, r3, #3
 8011318:	18d3      	adds	r3, r2, r3
 801131a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801131c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801131e:	6019      	str	r1, [r3, #0]
 8011320:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011322:	183b      	adds	r3, r7, r0
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	3301      	adds	r3, #1
 8011328:	183a      	adds	r2, r7, r0
 801132a:	6013      	str	r3, [r2, #0]
 801132c:	2398      	movs	r3, #152	@ 0x98
 801132e:	18fb      	adds	r3, r7, r3
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b05      	cmp	r3, #5
 8011334:	d9c8      	bls.n	80112c8 <calculateSPLQ31+0x30c>
 8011336:	e06b      	b.n	8011410 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 8011338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801133a:	3b20      	subs	r3, #32
 801133c:	2b00      	cmp	r3, #0
 801133e:	db13      	blt.n	8011368 <calculateSPLQ31+0x3ac>
 8011340:	22a4      	movs	r2, #164	@ 0xa4
 8011342:	18ba      	adds	r2, r7, r2
 8011344:	6812      	ldr	r2, [r2, #0]
 8011346:	40da      	lsrs	r2, r3
 8011348:	61ba      	str	r2, [r7, #24]
 801134a:	e01e      	b.n	801138a <calculateSPLQ31+0x3ce>
 801134c:	2000180c 	.word	0x2000180c
 8011350:	7fffffff 	.word	0x7fffffff
 8011354:	20001a58 	.word	0x20001a58
 8011358:	200000c8 	.word	0x200000c8
 801135c:	20001a60 	.word	0x20001a60
 8011360:	200000cc 	.word	0x200000cc
 8011364:	200000d8 	.word	0x200000d8
 8011368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801136a:	2220      	movs	r2, #32
 801136c:	1ad3      	subs	r3, r2, r3
 801136e:	22a4      	movs	r2, #164	@ 0xa4
 8011370:	18ba      	adds	r2, r7, r2
 8011372:	6812      	ldr	r2, [r2, #0]
 8011374:	409a      	lsls	r2, r3
 8011376:	0013      	movs	r3, r2
 8011378:	22a0      	movs	r2, #160	@ 0xa0
 801137a:	18ba      	adds	r2, r7, r2
 801137c:	6811      	ldr	r1, [r2, #0]
 801137e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011380:	40d1      	lsrs	r1, r2
 8011382:	61b9      	str	r1, [r7, #24]
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	431a      	orrs	r2, r3
 8011388:	61ba      	str	r2, [r7, #24]
 801138a:	23a4      	movs	r3, #164	@ 0xa4
 801138c:	18fb      	adds	r3, r7, r3
 801138e:	681a      	ldr	r2, [r3, #0]
 8011390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011392:	40da      	lsrs	r2, r3
 8011394:	61fa      	str	r2, [r7, #28]
 8011396:	69ba      	ldr	r2, [r7, #24]
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	21a0      	movs	r1, #160	@ 0xa0
 801139c:	1879      	adds	r1, r7, r1
 801139e:	600a      	str	r2, [r1, #0]
 80113a0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80113a2:	2300      	movs	r3, #0
 80113a4:	2294      	movs	r2, #148	@ 0x94
 80113a6:	18ba      	adds	r2, r7, r2
 80113a8:	6013      	str	r3, [r2, #0]
 80113aa:	e02c      	b.n	8011406 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 80113ac:	2330      	movs	r3, #48	@ 0x30
 80113ae:	18fa      	adds	r2, r7, r3
 80113b0:	2394      	movs	r3, #148	@ 0x94
 80113b2:	18fb      	adds	r3, r7, r3
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	18d3      	adds	r3, r2, r3
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80113c0:	3920      	subs	r1, #32
 80113c2:	2900      	cmp	r1, #0
 80113c4:	db03      	blt.n	80113ce <calculateSPLQ31+0x412>
 80113c6:	0018      	movs	r0, r3
 80113c8:	40c8      	lsrs	r0, r1
 80113ca:	0004      	movs	r4, r0
 80113cc:	e00a      	b.n	80113e4 <calculateSPLQ31+0x428>
 80113ce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80113d0:	2020      	movs	r0, #32
 80113d2:	1a41      	subs	r1, r0, r1
 80113d4:	0018      	movs	r0, r3
 80113d6:	4088      	lsls	r0, r1
 80113d8:	0001      	movs	r1, r0
 80113da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80113dc:	0016      	movs	r6, r2
 80113de:	40c6      	lsrs	r6, r0
 80113e0:	0034      	movs	r4, r6
 80113e2:	430c      	orrs	r4, r1
 80113e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80113e6:	40cb      	lsrs	r3, r1
 80113e8:	001d      	movs	r5, r3
 80113ea:	2330      	movs	r3, #48	@ 0x30
 80113ec:	18fa      	adds	r2, r7, r3
 80113ee:	2194      	movs	r1, #148	@ 0x94
 80113f0:	187b      	adds	r3, r7, r1
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	18d3      	adds	r3, r2, r3
 80113f8:	601c      	str	r4, [r3, #0]
 80113fa:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80113fc:	187b      	adds	r3, r7, r1
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	3301      	adds	r3, #1
 8011402:	187a      	adds	r2, r7, r1
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	2394      	movs	r3, #148	@ 0x94
 8011408:	18fb      	adds	r3, r7, r3
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b05      	cmp	r3, #5
 801140e:	d9cd      	bls.n	80113ac <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8011410:	230f      	movs	r3, #15
 8011412:	425d      	negs	r5, r3
 8011414:	2305      	movs	r3, #5
 8011416:	425e      	negs	r6, r3
 8011418:	4b4a      	ldr	r3, [pc, #296]	@ (8011544 <calculateSPLQ31+0x588>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	4b4a      	ldr	r3, [pc, #296]	@ (8011548 <calculateSPLQ31+0x58c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	21a0      	movs	r1, #160	@ 0xa0
 8011426:	1879      	adds	r1, r7, r1
 8011428:	6808      	ldr	r0, [r1, #0]
 801142a:	6849      	ldr	r1, [r1, #4]
 801142c:	4c47      	ldr	r4, [pc, #284]	@ (801154c <calculateSPLQ31+0x590>)
 801142e:	9403      	str	r4, [sp, #12]
 8011430:	4c47      	ldr	r4, [pc, #284]	@ (8011550 <calculateSPLQ31+0x594>)
 8011432:	9402      	str	r4, [sp, #8]
 8011434:	9301      	str	r3, [sp, #4]
 8011436:	9200      	str	r2, [sp, #0]
 8011438:	0033      	movs	r3, r6
 801143a:	002a      	movs	r2, r5
 801143c:	f000 fa86 	bl	801194c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011440:	2300      	movs	r3, #0
 8011442:	2290      	movs	r2, #144	@ 0x90
 8011444:	18ba      	adds	r2, r7, r2
 8011446:	6013      	str	r3, [r2, #0]
 8011448:	e026      	b.n	8011498 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801144a:	2330      	movs	r3, #48	@ 0x30
 801144c:	18fa      	adds	r2, r7, r3
 801144e:	2490      	movs	r4, #144	@ 0x90
 8011450:	193b      	adds	r3, r7, r4
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	00db      	lsls	r3, r3, #3
 8011456:	18d3      	adds	r3, r2, r3
 8011458:	6818      	ldr	r0, [r3, #0]
 801145a:	6859      	ldr	r1, [r3, #4]
 801145c:	230f      	movs	r3, #15
 801145e:	425d      	negs	r5, r3
 8011460:	2305      	movs	r3, #5
 8011462:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8011464:	193b      	adds	r3, r7, r4
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	009a      	lsls	r2, r3, #2
 801146a:	4b3a      	ldr	r3, [pc, #232]	@ (8011554 <calculateSPLQ31+0x598>)
 801146c:	18d3      	adds	r3, r2, r3
 801146e:	193a      	adds	r2, r7, r4
 8011470:	6812      	ldr	r2, [r2, #0]
 8011472:	0094      	lsls	r4, r2, #2
 8011474:	4a38      	ldr	r2, [pc, #224]	@ (8011558 <calculateSPLQ31+0x59c>)
 8011476:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 8011478:	9203      	str	r2, [sp, #12]
 801147a:	9302      	str	r3, [sp, #8]
 801147c:	2300      	movs	r3, #0
 801147e:	9301      	str	r3, [sp, #4]
 8011480:	2300      	movs	r3, #0
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	0033      	movs	r3, r6
 8011486:	002a      	movs	r2, r5
 8011488:	f000 fa60 	bl	801194c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 801148c:	2490      	movs	r4, #144	@ 0x90
 801148e:	193b      	adds	r3, r7, r4
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	3301      	adds	r3, #1
 8011494:	193a      	adds	r2, r7, r4
 8011496:	6013      	str	r3, [r2, #0]
 8011498:	2390      	movs	r3, #144	@ 0x90
 801149a:	18fb      	adds	r3, r7, r3
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b05      	cmp	r3, #5
 80114a0:	d9d3      	bls.n	801144a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80114a2:	4b2b      	ldr	r3, [pc, #172]	@ (8011550 <calculateSPLQ31+0x594>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	4b2d      	ldr	r3, [pc, #180]	@ (801155c <calculateSPLQ31+0x5a0>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	18d2      	adds	r2, r2, r3
 80114ac:	4b2b      	ldr	r3, [pc, #172]	@ (801155c <calculateSPLQ31+0x5a0>)
 80114ae:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80114b0:	4b26      	ldr	r3, [pc, #152]	@ (801154c <calculateSPLQ31+0x590>)
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011560 <calculateSPLQ31+0x5a4>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	18d2      	adds	r2, r2, r3
 80114ba:	4b29      	ldr	r3, [pc, #164]	@ (8011560 <calculateSPLQ31+0x5a4>)
 80114bc:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80114be:	2300      	movs	r3, #0
 80114c0:	228c      	movs	r2, #140	@ 0x8c
 80114c2:	18ba      	adds	r2, r7, r2
 80114c4:	6013      	str	r3, [r2, #0]
 80114c6:	e025      	b.n	8011514 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80114c8:	4b22      	ldr	r3, [pc, #136]	@ (8011554 <calculateSPLQ31+0x598>)
 80114ca:	208c      	movs	r0, #140	@ 0x8c
 80114cc:	183a      	adds	r2, r7, r0
 80114ce:	6812      	ldr	r2, [r2, #0]
 80114d0:	0092      	lsls	r2, r2, #2
 80114d2:	58d2      	ldr	r2, [r2, r3]
 80114d4:	4b23      	ldr	r3, [pc, #140]	@ (8011564 <calculateSPLQ31+0x5a8>)
 80114d6:	1839      	adds	r1, r7, r0
 80114d8:	6809      	ldr	r1, [r1, #0]
 80114da:	0089      	lsls	r1, r1, #2
 80114dc:	58cb      	ldr	r3, [r1, r3]
 80114de:	18d1      	adds	r1, r2, r3
 80114e0:	4b20      	ldr	r3, [pc, #128]	@ (8011564 <calculateSPLQ31+0x5a8>)
 80114e2:	183a      	adds	r2, r7, r0
 80114e4:	6812      	ldr	r2, [r2, #0]
 80114e6:	0092      	lsls	r2, r2, #2
 80114e8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 80114ea:	4b1b      	ldr	r3, [pc, #108]	@ (8011558 <calculateSPLQ31+0x59c>)
 80114ec:	183a      	adds	r2, r7, r0
 80114ee:	6812      	ldr	r2, [r2, #0]
 80114f0:	0092      	lsls	r2, r2, #2
 80114f2:	58d2      	ldr	r2, [r2, r3]
 80114f4:	4b1c      	ldr	r3, [pc, #112]	@ (8011568 <calculateSPLQ31+0x5ac>)
 80114f6:	1839      	adds	r1, r7, r0
 80114f8:	6809      	ldr	r1, [r1, #0]
 80114fa:	0089      	lsls	r1, r1, #2
 80114fc:	58cb      	ldr	r3, [r1, r3]
 80114fe:	18d1      	adds	r1, r2, r3
 8011500:	4b19      	ldr	r3, [pc, #100]	@ (8011568 <calculateSPLQ31+0x5ac>)
 8011502:	183a      	adds	r2, r7, r0
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	0092      	lsls	r2, r2, #2
 8011508:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801150a:	183b      	adds	r3, r7, r0
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	3301      	adds	r3, #1
 8011510:	183a      	adds	r2, r7, r0
 8011512:	6013      	str	r3, [r2, #0]
 8011514:	238c      	movs	r3, #140	@ 0x8c
 8011516:	18fb      	adds	r3, r7, r3
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b05      	cmp	r3, #5
 801151c:	d9d4      	bls.n	80114c8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 801151e:	4b13      	ldr	r3, [pc, #76]	@ (801156c <calculateSPLQ31+0x5b0>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	1c5a      	adds	r2, r3, #1
 8011524:	4b11      	ldr	r3, [pc, #68]	@ (801156c <calculateSPLQ31+0x5b0>)
 8011526:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 8011528:	4b10      	ldr	r3, [pc, #64]	@ (801156c <calculateSPLQ31+0x5b0>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b0f      	cmp	r3, #15
 801152e:	d905      	bls.n	801153c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8011530:	4b0f      	ldr	r3, [pc, #60]	@ (8011570 <calculateSPLQ31+0x5b4>)
 8011532:	2201      	movs	r2, #1
 8011534:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011536:	4b0f      	ldr	r3, [pc, #60]	@ (8011574 <calculateSPLQ31+0x5b8>)
 8011538:	2200      	movs	r2, #0
 801153a:	701a      	strb	r2, [r3, #0]
    }
}
 801153c:	46c0      	nop			@ (mov r8, r8)
 801153e:	46bd      	mov	sp, r7
 8011540:	b02f      	add	sp, #188	@ 0xbc
 8011542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011544:	200000d0 	.word	0x200000d0
 8011548:	200000d4 	.word	0x200000d4
 801154c:	20000fd8 	.word	0x20000fd8
 8011550:	20000fd4 	.word	0x20000fd4
 8011554:	20000fdc 	.word	0x20000fdc
 8011558:	20000ff4 	.word	0x20000ff4
 801155c:	20001a1c 	.word	0x20001a1c
 8011560:	20001a20 	.word	0x20001a20
 8011564:	20001a24 	.word	0x20001a24
 8011568:	20001a3c 	.word	0x20001a3c
 801156c:	20001a54 	.word	0x20001a54
 8011570:	20000fc9 	.word	0x20000fc9
 8011574:	20000fc7 	.word	0x20000fc7

08011578 <resetSPLstate>:

static void resetSPLstate(void)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 801157e:	4b11      	ldr	r3, [pc, #68]	@ (80115c4 <resetSPLstate+0x4c>)
 8011580:	2200      	movs	r2, #0
 8011582:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 8011584:	4b10      	ldr	r3, [pc, #64]	@ (80115c8 <resetSPLstate+0x50>)
 8011586:	2200      	movs	r2, #0
 8011588:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 801158a:	4b10      	ldr	r3, [pc, #64]	@ (80115cc <resetSPLstate+0x54>)
 801158c:	2200      	movs	r2, #0
 801158e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8011590:	2300      	movs	r3, #0
 8011592:	607b      	str	r3, [r7, #4]
 8011594:	e00c      	b.n	80115b0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 8011596:	4b0e      	ldr	r3, [pc, #56]	@ (80115d0 <resetSPLstate+0x58>)
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	0092      	lsls	r2, r2, #2
 801159c:	2100      	movs	r1, #0
 801159e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80115a0:	4b0c      	ldr	r3, [pc, #48]	@ (80115d4 <resetSPLstate+0x5c>)
 80115a2:	687a      	ldr	r2, [r7, #4]
 80115a4:	0092      	lsls	r2, r2, #2
 80115a6:	2100      	movs	r1, #0
 80115a8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3301      	adds	r3, #1
 80115ae:	607b      	str	r3, [r7, #4]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b05      	cmp	r3, #5
 80115b4:	d9ef      	bls.n	8011596 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80115b6:	4b08      	ldr	r3, [pc, #32]	@ (80115d8 <resetSPLstate+0x60>)
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
}
 80115bc:	46c0      	nop			@ (mov r8, r8)
 80115be:	46bd      	mov	sp, r7
 80115c0:	b002      	add	sp, #8
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20001a1c 	.word	0x20001a1c
 80115c8:	20001a20 	.word	0x20001a20
 80115cc:	20001a54 	.word	0x20001a54
 80115d0:	20001a24 	.word	0x20001a24
 80115d4:	20001a3c 	.word	0x20001a3c
 80115d8:	20000fc9 	.word	0x20000fc9

080115dc <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 80115dc:	b5b0      	push	{r4, r5, r7, lr}
 80115de:	b090      	sub	sp, #64	@ 0x40
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	0019      	movs	r1, r3
 80115e8:	1dfb      	adds	r3, r7, #7
 80115ea:	701a      	strb	r2, [r3, #0]
 80115ec:	1dbb      	adds	r3, r7, #6
 80115ee:	1c0a      	adds	r2, r1, #0
 80115f0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 80115f2:	1dfb      	adds	r3, r7, #7
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d005      	beq.n	8011606 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 80115fa:	4b3b      	ldr	r3, [pc, #236]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8011600:	4b3a      	ldr	r3, [pc, #232]	@ (80116ec <getFilteredMaxAmplitudeQ31+0x110>)
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 801160e:	2305      	movs	r3, #5
 8011610:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8011612:	2300      	movs	r3, #0
 8011614:	637b      	str	r3, [r7, #52]	@ 0x34
 8011616:	e040      	b.n	801169a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 8011618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	68fa      	ldr	r2, [r7, #12]
 801161e:	18d3      	adds	r3, r2, r3
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011624:	409a      	lsls	r2, r3
 8011626:	0013      	movs	r3, r2
 8011628:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801162a:	4b30      	ldr	r3, [pc, #192]	@ (80116ec <getFilteredMaxAmplitudeQ31+0x110>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	425a      	negs	r2, r3
 8011630:	4b2e      	ldr	r3, [pc, #184]	@ (80116ec <getFilteredMaxAmplitudeQ31+0x110>)
 8011632:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8011634:	2418      	movs	r4, #24
 8011636:	193a      	adds	r2, r7, r4
 8011638:	492c      	ldr	r1, [pc, #176]	@ (80116ec <getFilteredMaxAmplitudeQ31+0x110>)
 801163a:	231c      	movs	r3, #28
 801163c:	18f8      	adds	r0, r7, r3
 801163e:	2301      	movs	r3, #1
 8011640:	f012 fa42 	bl	8023ac8 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8011644:	2514      	movs	r5, #20
 8011646:	197a      	adds	r2, r7, r5
 8011648:	1939      	adds	r1, r7, r4
 801164a:	4829      	ldr	r0, [pc, #164]	@ (80116f0 <getFilteredMaxAmplitudeQ31+0x114>)
 801164c:	2301      	movs	r3, #1
 801164e:	f012 fa09 	bl	8023a64 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8011652:	2410      	movs	r4, #16
 8011654:	193a      	adds	r2, r7, r4
 8011656:	4924      	ldr	r1, [pc, #144]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011658:	4826      	ldr	r0, [pc, #152]	@ (80116f4 <getFilteredMaxAmplitudeQ31+0x118>)
 801165a:	2301      	movs	r3, #1
 801165c:	f012 fa02 	bl	8023a64 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8011660:	4a21      	ldr	r2, [pc, #132]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011662:	1939      	adds	r1, r7, r4
 8011664:	1978      	adds	r0, r7, r5
 8011666:	2301      	movs	r3, #1
 8011668:	f012 fa2e 	bl	8023ac8 <arm_add_q31>

        lastData = fx;
 801166c:	69fa      	ldr	r2, [r7, #28]
 801166e:	4b1f      	ldr	r3, [pc, #124]	@ (80116ec <getFilteredMaxAmplitudeQ31+0x110>)
 8011670:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 8011672:	4b1d      	ldr	r3, [pc, #116]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011678:	429a      	cmp	r2, r3
 801167a:	da03      	bge.n	8011684 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 801167c:	4b1a      	ldr	r3, [pc, #104]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011682:	e007      	b.n	8011694 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 8011684:	4b18      	ldr	r3, [pc, #96]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801168a:	429a      	cmp	r2, r3
 801168c:	dd02      	ble.n	8011694 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 801168e:	4b16      	ldr	r3, [pc, #88]	@ (80116e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 8011694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011696:	3301      	adds	r3, #1
 8011698:	637b      	str	r3, [r7, #52]	@ 0x34
 801169a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d3ba      	bcc.n	8011618 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80116a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a4:	17da      	asrs	r2, r3, #31
 80116a6:	189b      	adds	r3, r3, r2
 80116a8:	4053      	eors	r3, r2
 80116aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80116ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80116b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80116b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d200      	bcs.n	80116ba <getFilteredMaxAmplitudeQ31+0xde>
 80116b8:	0013      	movs	r3, r2
 80116ba:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80116bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c0:	40da      	lsrs	r2, r3
 80116c2:	0013      	movs	r3, r2
 80116c4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80116c6:	1dbb      	adds	r3, r7, #6
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d007      	beq.n	80116de <getFilteredMaxAmplitudeQ31+0x102>
 80116ce:	4b0a      	ldr	r3, [pc, #40]	@ (80116f8 <getFilteredMaxAmplitudeQ31+0x11c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	6a3a      	ldr	r2, [r7, #32]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d902      	bls.n	80116de <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 80116d8:	4b07      	ldr	r3, [pc, #28]	@ (80116f8 <getFilteredMaxAmplitudeQ31+0x11c>)
 80116da:	6a3a      	ldr	r2, [r7, #32]
 80116dc:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 80116de:	6a3b      	ldr	r3, [r7, #32]
}
 80116e0:	0018      	movs	r0, r3
 80116e2:	46bd      	mov	sp, r7
 80116e4:	b010      	add	sp, #64	@ 0x40
 80116e6:	bdb0      	pop	{r4, r5, r7, pc}
 80116e8:	20001e58 	.word	0x20001e58
 80116ec:	20001e5c 	.word	0x20001e5c
 80116f0:	0802daf4 	.word	0x0802daf4
 80116f4:	0802daf8 	.word	0x0802daf8
 80116f8:	20000fd0 	.word	0x20000fd0

080116fc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b086      	sub	sp, #24
 8011700:	af00      	add	r7, sp, #0
 8011702:	60f8      	str	r0, [r7, #12]
 8011704:	60b9      	str	r1, [r7, #8]
 8011706:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 8011708:	4913      	ldr	r1, [pc, #76]	@ (8011758 <floatToIntAndFrac2dp+0x5c>)
 801170a:	68f8      	ldr	r0, [r7, #12]
 801170c:	f7ef fc98 	bl	8001040 <__aeabi_fmul>
 8011710:	1c03      	adds	r3, r0, #0
 8011712:	1c18      	adds	r0, r3, #0
 8011714:	f016 fed2 	bl	80284bc <roundf>
 8011718:	1c03      	adds	r3, r0, #0
 801171a:	1c18      	adds	r0, r3, #0
 801171c:	f7ee ff7e 	bl	800061c <__aeabi_f2uiz>
 8011720:	0003      	movs	r3, r0
 8011722:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	2164      	movs	r1, #100	@ 0x64
 8011728:	0018      	movs	r0, r3
 801172a:	f7ee fd3b 	bl	80001a4 <__udivsi3>
 801172e:	0003      	movs	r3, r0
 8011730:	001a      	movs	r2, r3
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	b2da      	uxtb	r2, r3
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2164      	movs	r1, #100	@ 0x64
 8011742:	434b      	muls	r3, r1
 8011744:	b2db      	uxtb	r3, r3
 8011746:	1ad3      	subs	r3, r2, r3
 8011748:	b2da      	uxtb	r2, r3
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	701a      	strb	r2, [r3, #0]
}
 801174e:	46c0      	nop			@ (mov r8, r8)
 8011750:	46bd      	mov	sp, r7
 8011752:	b006      	add	sp, #24
 8011754:	bd80      	pop	{r7, pc}
 8011756:	46c0      	nop			@ (mov r8, r8)
 8011758:	42c80000 	.word	0x42c80000

0801175c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 8011768:	4914      	ldr	r1, [pc, #80]	@ (80117bc <floatToIntAndFrac1dp+0x60>)
 801176a:	68f8      	ldr	r0, [r7, #12]
 801176c:	f7ef fc68 	bl	8001040 <__aeabi_fmul>
 8011770:	1c03      	adds	r3, r0, #0
 8011772:	1c18      	adds	r0, r3, #0
 8011774:	f016 fea2 	bl	80284bc <roundf>
 8011778:	1c03      	adds	r3, r0, #0
 801177a:	1c18      	adds	r0, r3, #0
 801177c:	f7ee ff4e 	bl	800061c <__aeabi_f2uiz>
 8011780:	0003      	movs	r3, r0
 8011782:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	210a      	movs	r1, #10
 8011788:	0018      	movs	r0, r3
 801178a:	f7ee fd0b 	bl	80001a4 <__udivsi3>
 801178e:	0003      	movs	r3, r0
 8011790:	001a      	movs	r2, r3
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	b2da      	uxtb	r2, r3
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	1c19      	adds	r1, r3, #0
 80117a2:	0089      	lsls	r1, r1, #2
 80117a4:	18cb      	adds	r3, r1, r3
 80117a6:	18db      	adds	r3, r3, r3
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	b2da      	uxtb	r2, r3
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	701a      	strb	r2, [r3, #0]
}
 80117b2:	46c0      	nop			@ (mov r8, r8)
 80117b4:	46bd      	mov	sp, r7
 80117b6:	b006      	add	sp, #24
 80117b8:	bd80      	pop	{r7, pc}
 80117ba:	46c0      	nop			@ (mov r8, r8)
 80117bc:	41200000 	.word	0x41200000

080117c0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80117c0:	b590      	push	{r4, r7, lr}
 80117c2:	b087      	sub	sp, #28
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	607a      	str	r2, [r7, #4]
 80117cc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7f0 f82a 	bl	8001828 <__aeabi_i2f>
 80117d4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80117d6:	6838      	ldr	r0, [r7, #0]
 80117d8:	f7f0 f826 	bl	8001828 <__aeabi_i2f>
 80117dc:	1c03      	adds	r3, r0, #0
 80117de:	4918      	ldr	r1, [pc, #96]	@ (8011840 <sumToIntAverage+0x80>)
 80117e0:	1c18      	adds	r0, r3, #0
 80117e2:	f7ef fa5f 	bl	8000ca4 <__aeabi_fdiv>
 80117e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80117e8:	1c19      	adds	r1, r3, #0
 80117ea:	1c20      	adds	r0, r4, #0
 80117ec:	f7ef f868 	bl	80008c0 <__aeabi_fadd>
 80117f0:	1c03      	adds	r3, r0, #0
 80117f2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 80117f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80117f6:	f7f0 f867 	bl	80018c8 <__aeabi_ui2f>
 80117fa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 80117fc:	1c19      	adds	r1, r3, #0
 80117fe:	1c20      	adds	r0, r4, #0
 8011800:	f7ef fa50 	bl	8000ca4 <__aeabi_fdiv>
 8011804:	1c03      	adds	r3, r0, #0
 8011806:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 8011808:	2300      	movs	r3, #0
 801180a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 801180c:	68ba      	ldr	r2, [r7, #8]
 801180e:	2310      	movs	r3, #16
 8011810:	18f9      	adds	r1, r7, r3
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	1c18      	adds	r0, r3, #0
 8011816:	f7ff ffa1 	bl	801175c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	2bff      	cmp	r3, #255	@ 0xff
 801181e:	d906      	bls.n	801182e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	22ff      	movs	r2, #255	@ 0xff
 8011824:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	2209      	movs	r2, #9
 801182a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 801182c:	e003      	b.n	8011836 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	b2da      	uxtb	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	701a      	strb	r2, [r3, #0]
}
 8011836:	46c0      	nop			@ (mov r8, r8)
 8011838:	46bd      	mov	sp, r7
 801183a:	b007      	add	sp, #28
 801183c:	bd90      	pop	{r4, r7, pc}
 801183e:	46c0      	nop			@ (mov r8, r8)
 8011840:	41200000 	.word	0x41200000

08011844 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b086      	sub	sp, #24
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	60b9      	str	r1, [r7, #8]
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	2280      	movs	r2, #128	@ 0x80
 8011856:	0612      	lsls	r2, r2, #24
 8011858:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	4a18      	ldr	r2, [pc, #96]	@ (80118c0 <findMinMax+0x7c>)
 801185e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8011860:	2300      	movs	r3, #0
 8011862:	617b      	str	r3, [r7, #20]
 8011864:	e022      	b.n	80118ac <findMinMax+0x68>
    {
        if (array[i] < min[0])
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	18d3      	adds	r3, r2, r3
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	429a      	cmp	r2, r3
 8011876:	da06      	bge.n	8011886 <findMinMax+0x42>
        {
            min[0] = array[i];
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	18d3      	adds	r3, r2, r3
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	687a      	ldr	r2, [r7, #4]
 801188c:	18d3      	adds	r3, r2, r3
 801188e:	681a      	ldr	r2, [r3, #0]
 8011890:	68bb      	ldr	r3, [r7, #8]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	429a      	cmp	r2, r3
 8011896:	dd06      	ble.n	80118a6 <findMinMax+0x62>
        {
            max[0] = array[i];
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	009b      	lsls	r3, r3, #2
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	18d3      	adds	r3, r2, r3
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	3301      	adds	r3, #1
 80118aa:	617b      	str	r3, [r7, #20]
 80118ac:	697a      	ldr	r2, [r7, #20]
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d3d8      	bcc.n	8011866 <findMinMax+0x22>
        }
    }
}
 80118b4:	46c0      	nop			@ (mov r8, r8)
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	46bd      	mov	sp, r7
 80118ba:	b006      	add	sp, #24
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	46c0      	nop			@ (mov r8, r8)
 80118c0:	7fffffff 	.word	0x7fffffff

080118c4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 80118d2:	687a      	ldr	r2, [r7, #4]
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d302      	bcc.n	80118e0 <getPo2factor+0x1c>
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d107      	bne.n	80118f0 <getPo2factor+0x2c>
    {
        return 0;
 80118e0:	2300      	movs	r3, #0
 80118e2:	e00d      	b.n	8011900 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	085b      	lsrs	r3, r3, #1
 80118e8:	607b      	str	r3, [r7, #4]
        bitShift++;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	3301      	adds	r3, #1
 80118ee:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d2f5      	bcs.n	80118e4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	3b01      	subs	r3, #1
 80118fc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 80118fe:	68fb      	ldr	r3, [r7, #12]
}
 8011900:	0018      	movs	r0, r3
 8011902:	46bd      	mov	sp, r7
 8011904:	b004      	add	sp, #16
 8011906:	bd80      	pop	{r7, pc}

08011908 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
 8011914:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	f7ef ffd6 	bl	80018c8 <__aeabi_ui2f>
 801191c:	1c03      	adds	r3, r0, #0
 801191e:	1c19      	adds	r1, r3, #0
 8011920:	68b8      	ldr	r0, [r7, #8]
 8011922:	f7ef fb8d 	bl	8001040 <__aeabi_fmul>
 8011926:	1c03      	adds	r3, r0, #0
 8011928:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	2310      	movs	r3, #16
 8011932:	18f9      	adds	r1, r7, r3
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	1c18      	adds	r0, r3, #0
 8011938:	f7ff fee0 	bl	80116fc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	801a      	strh	r2, [r3, #0]
}
 8011944:	46c0      	nop			@ (mov r8, r8)
 8011946:	46bd      	mov	sp, r7
 8011948:	b006      	add	sp, #24
 801194a:	bd80      	pop	{r7, pc}

0801194c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	60b8      	str	r0, [r7, #8]
 8011954:	60f9      	str	r1, [r7, #12]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195c:	6a3a      	ldr	r2, [r7, #32]
 801195e:	68b8      	ldr	r0, [r7, #8]
 8011960:	68f9      	ldr	r1, [r7, #12]
 8011962:	f7f9 ff2d 	bl	800b7c0 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 8011966:	6a3b      	ldr	r3, [r7, #32]
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	18d2      	adds	r2, r2, r3
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	18d2      	adds	r2, r2, r3
 8011972:	6a3b      	ldr	r3, [r7, #32]
 8011974:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 8011976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	18d2      	adds	r2, r2, r3
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	18d2      	adds	r2, r2, r3
 8011982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011984:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 8011986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011988:	6a3b      	ldr	r3, [r7, #32]
 801198a:	0011      	movs	r1, r2
 801198c:	0018      	movs	r0, r3
 801198e:	f7f9 ffa7 	bl	800b8e0 <correctIntFracNumber>
}
 8011992:	46c0      	nop			@ (mov r8, r8)
 8011994:	46bd      	mov	sp, r7
 8011996:	b004      	add	sp, #16
 8011998:	bd80      	pop	{r7, pc}

0801199a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 801199a:	b580      	push	{r7, lr}
 801199c:	b086      	sub	sp, #24
 801199e:	af00      	add	r7, sp, #0
 80119a0:	60f8      	str	r0, [r7, #12]
 80119a2:	60b9      	str	r1, [r7, #8]
 80119a4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80119a6:	2300      	movs	r3, #0
 80119a8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80119aa:	2300      	movs	r3, #0
 80119ac:	613b      	str	r3, [r7, #16]
 80119ae:	e019      	b.n	80119e4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	18d3      	adds	r3, r2, r3
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80119bc:	693a      	ldr	r2, [r7, #16]
 80119be:	3201      	adds	r2, #1
 80119c0:	0052      	lsls	r2, r2, #1
 80119c2:	68f9      	ldr	r1, [r7, #12]
 80119c4:	188a      	adds	r2, r1, r2
 80119c6:	8812      	ldrh	r2, [r2, #0]
 80119c8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80119ca:	0019      	movs	r1, r3
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80119d4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80119d6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	3301      	adds	r3, #1
 80119dc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	3304      	adds	r3, #4
 80119e2:	613b      	str	r3, [r7, #16]
 80119e4:	693a      	ldr	r2, [r7, #16]
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d3e1      	bcc.n	80119b0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 80119ec:	46c0      	nop			@ (mov r8, r8)
 80119ee:	46c0      	nop			@ (mov r8, r8)
 80119f0:	46bd      	mov	sp, r7
 80119f2:	b006      	add	sp, #24
 80119f4:	bd80      	pop	{r7, pc}
	...

080119f8 <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
  init = false;
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <InitDone+0x10>)
 80119fe:	2200      	movs	r2, #0
 8011a00:	701a      	strb	r2, [r3, #0]
}
 8011a02:	46c0      	nop			@ (mov r8, r8)
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	200000dc 	.word	0x200000dc

08011a0c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8011a12:	f7f7 fbbd 	bl	8009190 <ReadBatteryVoltage>
 8011a16:	1c02      	adds	r2, r0, #0
 8011a18:	4b25      	ldr	r3, [pc, #148]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a1a:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.50){
 8011a1c:	4b24      	ldr	r3, [pc, #144]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4924      	ldr	r1, [pc, #144]	@ (8011ab4 <batteryChargeCheck+0xa8>)
 8011a22:	1c18      	adds	r0, r3, #0
 8011a24:	f7ee fd84 	bl	8000530 <__aeabi_fcmplt>
 8011a28:	1e03      	subs	r3, r0, #0
 8011a2a:	d002      	beq.n	8011a32 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 8011a2c:	1dfb      	adds	r3, r7, #7
 8011a2e:	2200      	movs	r2, #0
 8011a30:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.50 && batteryCharge < 3.70){
 8011a32:	4b1f      	ldr	r3, [pc, #124]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	491f      	ldr	r1, [pc, #124]	@ (8011ab4 <batteryChargeCheck+0xa8>)
 8011a38:	1c18      	adds	r0, r3, #0
 8011a3a:	f7ee fd97 	bl	800056c <__aeabi_fcmpge>
 8011a3e:	1e03      	subs	r3, r0, #0
 8011a40:	d00d      	beq.n	8011a5e <batteryChargeCheck+0x52>
 8011a42:	4b1b      	ldr	r3, [pc, #108]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	1c18      	adds	r0, r3, #0
 8011a48:	f7f1 ff24 	bl	8003894 <__aeabi_f2d>
 8011a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8011ab8 <batteryChargeCheck+0xac>)
 8011a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8011abc <batteryChargeCheck+0xb0>)
 8011a50:	f7ee fd34 	bl	80004bc <__aeabi_dcmplt>
 8011a54:	1e03      	subs	r3, r0, #0
 8011a56:	d002      	beq.n	8011a5e <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 8011a58:	1dfb      	adds	r3, r7, #7
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.70 && batteryCharge < 4.00){
 8011a5e:	4b14      	ldr	r3, [pc, #80]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	1c18      	adds	r0, r3, #0
 8011a64:	f7f1 ff16 	bl	8003894 <__aeabi_f2d>
 8011a68:	4a13      	ldr	r2, [pc, #76]	@ (8011ab8 <batteryChargeCheck+0xac>)
 8011a6a:	4b14      	ldr	r3, [pc, #80]	@ (8011abc <batteryChargeCheck+0xb0>)
 8011a6c:	f7ee fd44 	bl	80004f8 <__aeabi_dcmpge>
 8011a70:	1e03      	subs	r3, r0, #0
 8011a72:	d00b      	beq.n	8011a8c <batteryChargeCheck+0x80>
 8011a74:	4b0e      	ldr	r3, [pc, #56]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	2181      	movs	r1, #129	@ 0x81
 8011a7a:	05c9      	lsls	r1, r1, #23
 8011a7c:	1c18      	adds	r0, r3, #0
 8011a7e:	f7ee fd57 	bl	8000530 <__aeabi_fcmplt>
 8011a82:	1e03      	subs	r3, r0, #0
 8011a84:	d002      	beq.n	8011a8c <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 8011a86:	1dfb      	adds	r3, r7, #7
 8011a88:	2202      	movs	r2, #2
 8011a8a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 8011a8c:	4b08      	ldr	r3, [pc, #32]	@ (8011ab0 <batteryChargeCheck+0xa4>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2181      	movs	r1, #129	@ 0x81
 8011a92:	05c9      	lsls	r1, r1, #23
 8011a94:	1c18      	adds	r0, r3, #0
 8011a96:	f7ee fd69 	bl	800056c <__aeabi_fcmpge>
 8011a9a:	1e03      	subs	r3, r0, #0
 8011a9c:	d002      	beq.n	8011aa4 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 8011a9e:	1dfb      	adds	r3, r7, #7
 8011aa0:	2203      	movs	r2, #3
 8011aa2:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8011aa4:	1dfb      	adds	r3, r7, #7
 8011aa6:	781b      	ldrb	r3, [r3, #0]
}
 8011aa8:	0018      	movs	r0, r3
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	b002      	add	sp, #8
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	20001e70 	.word	0x20001e70
 8011ab4:	40600000 	.word	0x40600000
 8011ab8:	9999999a 	.word	0x9999999a
 8011abc:	400d9999 	.word	0x400d9999

08011ac0 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8011ac0:	b5b0      	push	{r4, r5, r7, lr}
 8011ac2:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8011ac4:	f7f7 fbc6 	bl	8009254 <ReadSolarVoltage>
 8011ac8:	0003      	movs	r3, r0
 8011aca:	001a      	movs	r2, r3
 8011acc:	4b1a      	ldr	r3, [pc, #104]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011ace:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8011ad0:	4b19      	ldr	r3, [pc, #100]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	4a19      	ldr	r2, [pc, #100]	@ (8011b3c <Calculate_LED_ON+0x7c>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d802      	bhi.n	8011ae0 <Calculate_LED_ON+0x20>
    solmV = 2900;
 8011ada:	4b17      	ldr	r3, [pc, #92]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011adc:	4a18      	ldr	r2, [pc, #96]	@ (8011b40 <Calculate_LED_ON+0x80>)
 8011ade:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8011ae0:	4b15      	ldr	r3, [pc, #84]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	4a17      	ldr	r2, [pc, #92]	@ (8011b44 <Calculate_LED_ON+0x84>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d902      	bls.n	8011af0 <Calculate_LED_ON+0x30>
    solmV = 4700;
 8011aea:	4b13      	ldr	r3, [pc, #76]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011aec:	4a15      	ldr	r2, [pc, #84]	@ (8011b44 <Calculate_LED_ON+0x84>)
 8011aee:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8011af0:	4b11      	ldr	r3, [pc, #68]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	0018      	movs	r0, r3
 8011af6:	f7f1 fe7b 	bl	80037f0 <__aeabi_i2d>
 8011afa:	0004      	movs	r4, r0
 8011afc:	000d      	movs	r5, r1
 8011afe:	4b0e      	ldr	r3, [pc, #56]	@ (8011b38 <Calculate_LED_ON+0x78>)
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	001a      	movs	r2, r3
 8011b04:	4b10      	ldr	r3, [pc, #64]	@ (8011b48 <Calculate_LED_ON+0x88>)
 8011b06:	1a9b      	subs	r3, r3, r2
 8011b08:	0018      	movs	r0, r3
 8011b0a:	f7f1 fe71 	bl	80037f0 <__aeabi_i2d>
 8011b0e:	2200      	movs	r2, #0
 8011b10:	4b0e      	ldr	r3, [pc, #56]	@ (8011b4c <Calculate_LED_ON+0x8c>)
 8011b12:	f7f0 ff1f 	bl	8002954 <__aeabi_dmul>
 8011b16:	0002      	movs	r2, r0
 8011b18:	000b      	movs	r3, r1
 8011b1a:	0020      	movs	r0, r4
 8011b1c:	0029      	movs	r1, r5
 8011b1e:	f7ef ff19 	bl	8001954 <__aeabi_dadd>
 8011b22:	0002      	movs	r2, r0
 8011b24:	000b      	movs	r3, r1
 8011b26:	0010      	movs	r0, r2
 8011b28:	0019      	movs	r1, r3
 8011b2a:	f7ee fd8f 	bl	800064c <__aeabi_d2uiz>
 8011b2e:	0003      	movs	r3, r0
 8011b30:	b29b      	uxth	r3, r3
}
 8011b32:	0018      	movs	r0, r3
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bdb0      	pop	{r4, r5, r7, pc}
 8011b38:	20001e74 	.word	0x20001e74
 8011b3c:	00000b53 	.word	0x00000b53
 8011b40:	00000b54 	.word	0x00000b54
 8011b44:	0000125c 	.word	0x0000125c
 8011b48:	00000dee 	.word	0x00000dee
 8011b4c:	3ff80000 	.word	0x3ff80000

08011b50 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8011b50:	b590      	push	{r4, r7, lr}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	0004      	movs	r4, r0
 8011b58:	0008      	movs	r0, r1
 8011b5a:	0011      	movs	r1, r2
 8011b5c:	1dbb      	adds	r3, r7, #6
 8011b5e:	1c22      	adds	r2, r4, #0
 8011b60:	801a      	strh	r2, [r3, #0]
 8011b62:	1d3b      	adds	r3, r7, #4
 8011b64:	1c02      	adds	r2, r0, #0
 8011b66:	801a      	strh	r2, [r3, #0]
 8011b68:	1cbb      	adds	r3, r7, #2
 8011b6a:	1c0a      	adds	r2, r1, #0
 8011b6c:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011bac <SetStatusLED+0x5c>)
 8011b70:	781b      	ldrb	r3, [r3, #0]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d107      	bne.n	8011b86 <SetStatusLED+0x36>
 8011b76:	4b0e      	ldr	r3, [pc, #56]	@ (8011bb0 <SetStatusLED+0x60>)
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d103      	bne.n	8011b86 <SetStatusLED+0x36>
 8011b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011bb4 <SetStatusLED+0x64>)
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00e      	beq.n	8011ba4 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8011b86:	2380      	movs	r3, #128	@ 0x80
 8011b88:	05db      	lsls	r3, r3, #23
 8011b8a:	1dba      	adds	r2, r7, #6
 8011b8c:	8812      	ldrh	r2, [r2, #0]
 8011b8e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8011b90:	2380      	movs	r3, #128	@ 0x80
 8011b92:	05db      	lsls	r3, r3, #23
 8011b94:	1d3a      	adds	r2, r7, #4
 8011b96:	8812      	ldrh	r2, [r2, #0]
 8011b98:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8011b9a:	2380      	movs	r3, #128	@ 0x80
 8011b9c:	05db      	lsls	r3, r3, #23
 8011b9e:	1cba      	adds	r2, r7, #2
 8011ba0:	8812      	ldrh	r2, [r2, #0]
 8011ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011ba4:	46c0      	nop			@ (mov r8, r8)
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	b003      	add	sp, #12
 8011baa:	bd90      	pop	{r4, r7, pc}
 8011bac:	20001e61 	.word	0x20001e61
 8011bb0:	200000dc 	.word	0x200000dc
 8011bb4:	20001e62 	.word	0x20001e62

08011bb8 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8011bb8:	b590      	push	{r4, r7, lr}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	0004      	movs	r4, r0
 8011bc0:	0008      	movs	r0, r1
 8011bc2:	0011      	movs	r1, r2
 8011bc4:	1dfb      	adds	r3, r7, #7
 8011bc6:	1c22      	adds	r2, r4, #0
 8011bc8:	701a      	strb	r2, [r3, #0]
 8011bca:	1dbb      	adds	r3, r7, #6
 8011bcc:	1c02      	adds	r2, r0, #0
 8011bce:	701a      	strb	r2, [r3, #0]
 8011bd0:	1d7b      	adds	r3, r7, #5
 8011bd2:	1c0a      	adds	r2, r1, #0
 8011bd4:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8011bd6:	4b19      	ldr	r3, [pc, #100]	@ (8011c3c <SetDBLED+0x84>)
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d107      	bne.n	8011bee <SetDBLED+0x36>
 8011bde:	4b18      	ldr	r3, [pc, #96]	@ (8011c40 <SetDBLED+0x88>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d103      	bne.n	8011bee <SetDBLED+0x36>
 8011be6:	4b17      	ldr	r3, [pc, #92]	@ (8011c44 <SetDBLED+0x8c>)
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d022      	beq.n	8011c34 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8011bee:	1dfb      	adds	r3, r7, #7
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	4053      	eors	r3, r2
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	001a      	movs	r2, r3
 8011bfa:	4b13      	ldr	r3, [pc, #76]	@ (8011c48 <SetDBLED+0x90>)
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	0018      	movs	r0, r3
 8011c00:	f003 fa59 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8011c04:	1dbb      	adds	r3, r7, #6
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2201      	movs	r2, #1
 8011c0a:	4053      	eors	r3, r2
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	001a      	movs	r2, r3
 8011c10:	2380      	movs	r3, #128	@ 0x80
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	480c      	ldr	r0, [pc, #48]	@ (8011c48 <SetDBLED+0x90>)
 8011c16:	0019      	movs	r1, r3
 8011c18:	f003 fa4d 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8011c1c:	1d7b      	adds	r3, r7, #5
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	2201      	movs	r2, #1
 8011c22:	4053      	eors	r3, r2
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	001a      	movs	r2, r3
 8011c28:	2380      	movs	r3, #128	@ 0x80
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	4806      	ldr	r0, [pc, #24]	@ (8011c48 <SetDBLED+0x90>)
 8011c2e:	0019      	movs	r1, r3
 8011c30:	f003 fa41 	bl	80150b6 <HAL_GPIO_WritePin>
  }
}
 8011c34:	46c0      	nop			@ (mov r8, r8)
 8011c36:	46bd      	mov	sp, r7
 8011c38:	b003      	add	sp, #12
 8011c3a:	bd90      	pop	{r4, r7, pc}
 8011c3c:	20001e61 	.word	0x20001e61
 8011c40:	200000dc 	.word	0x200000dc
 8011c44:	20001e62 	.word	0x20001e62
 8011c48:	50000400 	.word	0x50000400

08011c4c <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8011c4c:	b590      	push	{r4, r7, lr}
 8011c4e:	b083      	sub	sp, #12
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	0004      	movs	r4, r0
 8011c54:	0008      	movs	r0, r1
 8011c56:	0011      	movs	r1, r2
 8011c58:	1dbb      	adds	r3, r7, #6
 8011c5a:	1c22      	adds	r2, r4, #0
 8011c5c:	801a      	strh	r2, [r3, #0]
 8011c5e:	1d3b      	adds	r3, r7, #4
 8011c60:	1c02      	adds	r2, r0, #0
 8011c62:	801a      	strh	r2, [r3, #0]
 8011c64:	1cbb      	adds	r3, r7, #2
 8011c66:	1c0a      	adds	r2, r1, #0
 8011c68:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8011c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011ca4 <SetVocLED+0x58>)
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d107      	bne.n	8011c82 <SetVocLED+0x36>
 8011c72:	4b0d      	ldr	r3, [pc, #52]	@ (8011ca8 <SetVocLED+0x5c>)
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d103      	bne.n	8011c82 <SetVocLED+0x36>
 8011c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8011cac <SetVocLED+0x60>)
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00b      	beq.n	8011c9a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8011c82:	4b0b      	ldr	r3, [pc, #44]	@ (8011cb0 <SetVocLED+0x64>)
 8011c84:	1dba      	adds	r2, r7, #6
 8011c86:	8812      	ldrh	r2, [r2, #0]
 8011c88:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8011c8a:	4b09      	ldr	r3, [pc, #36]	@ (8011cb0 <SetVocLED+0x64>)
 8011c8c:	1d3a      	adds	r2, r7, #4
 8011c8e:	8812      	ldrh	r2, [r2, #0]
 8011c90:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8011c92:	4b07      	ldr	r3, [pc, #28]	@ (8011cb0 <SetVocLED+0x64>)
 8011c94:	1cba      	adds	r2, r7, #2
 8011c96:	8812      	ldrh	r2, [r2, #0]
 8011c98:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011c9a:	46c0      	nop			@ (mov r8, r8)
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	b003      	add	sp, #12
 8011ca0:	bd90      	pop	{r4, r7, pc}
 8011ca2:	46c0      	nop			@ (mov r8, r8)
 8011ca4:	20001e61 	.word	0x20001e61
 8011ca8:	200000dc 	.word	0x200000dc
 8011cac:	20001e62 	.word	0x20001e62
 8011cb0:	40000400 	.word	0x40000400

08011cb4 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011cb8:	4b08      	ldr	r3, [pc, #32]	@ (8011cdc <SetMeasurementIndicator+0x28>)
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d103      	bne.n	8011cc8 <SetMeasurementIndicator+0x14>
 8011cc0:	4b07      	ldr	r3, [pc, #28]	@ (8011ce0 <SetMeasurementIndicator+0x2c>)
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d006      	beq.n	8011cd6 <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011cc8:	f7ff fefa 	bl	8011ac0 <Calculate_LED_ON>
 8011ccc:	0003      	movs	r3, r0
 8011cce:	001a      	movs	r2, r3
 8011cd0:	2380      	movs	r3, #128	@ 0x80
 8011cd2:	05db      	lsls	r3, r3, #23
 8011cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011cd6:	46c0      	nop			@ (mov r8, r8)
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	20001e61 	.word	0x20001e61
 8011ce0:	20001e62 	.word	0x20001e62

08011ce4 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011ce8:	4b07      	ldr	r3, [pc, #28]	@ (8011d08 <ResetMeasurementIndicator+0x24>)
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d103      	bne.n	8011cf8 <ResetMeasurementIndicator+0x14>
 8011cf0:	4b06      	ldr	r3, [pc, #24]	@ (8011d0c <ResetMeasurementIndicator+0x28>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d004      	beq.n	8011d02 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8011cf8:	2380      	movs	r3, #128	@ 0x80
 8011cfa:	05db      	lsls	r3, r3, #23
 8011cfc:	22fa      	movs	r2, #250	@ 0xfa
 8011cfe:	0112      	lsls	r2, r2, #4
 8011d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011d02:	46c0      	nop			@ (mov r8, r8)
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	20001e61 	.word	0x20001e61
 8011d0c:	20001e62 	.word	0x20001e62

08011d10 <SetMICIndicator>:
void SetMICIndicator(){
 8011d10:	b580      	push	{r7, lr}
 8011d12:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d14:	4b19      	ldr	r3, [pc, #100]	@ (8011d7c <SetMICIndicator+0x6c>)
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d103      	bne.n	8011d24 <SetMICIndicator+0x14>
 8011d1c:	4b18      	ldr	r3, [pc, #96]	@ (8011d80 <SetMICIndicator+0x70>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d007      	beq.n	8011d34 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011d24:	f7ff fecc 	bl	8011ac0 <Calculate_LED_ON>
 8011d28:	0003      	movs	r3, r0
 8011d2a:	001a      	movs	r2, r3
 8011d2c:	2380      	movs	r3, #128	@ 0x80
 8011d2e:	05db      	lsls	r3, r3, #23
 8011d30:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8011d32:	e01f      	b.n	8011d74 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8011d34:	4b13      	ldr	r3, [pc, #76]	@ (8011d84 <SetMICIndicator+0x74>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	1c18      	adds	r0, r3, #0
 8011d3a:	f7f1 fdab 	bl	8003894 <__aeabi_f2d>
 8011d3e:	4a12      	ldr	r2, [pc, #72]	@ (8011d88 <SetMICIndicator+0x78>)
 8011d40:	4b12      	ldr	r3, [pc, #72]	@ (8011d8c <SetMICIndicator+0x7c>)
 8011d42:	f7ee fbcf 	bl	80004e4 <__aeabi_dcmpgt>
 8011d46:	1e03      	subs	r3, r0, #0
 8011d48:	d00a      	beq.n	8011d60 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8011d4a:	f7ff feb9 	bl	8011ac0 <Calculate_LED_ON>
 8011d4e:	0003      	movs	r3, r0
 8011d50:	001a      	movs	r2, r3
 8011d52:	2380      	movs	r3, #128	@ 0x80
 8011d54:	05db      	lsls	r3, r3, #23
 8011d56:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8011d58:	4b0d      	ldr	r3, [pc, #52]	@ (8011d90 <SetMICIndicator+0x80>)
 8011d5a:	2202      	movs	r2, #2
 8011d5c:	701a      	strb	r2, [r3, #0]
}
 8011d5e:	e009      	b.n	8011d74 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8011d60:	f7ff feae 	bl	8011ac0 <Calculate_LED_ON>
 8011d64:	0003      	movs	r3, r0
 8011d66:	001a      	movs	r2, r3
 8011d68:	2380      	movs	r3, #128	@ 0x80
 8011d6a:	05db      	lsls	r3, r3, #23
 8011d6c:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8011d6e:	4b08      	ldr	r3, [pc, #32]	@ (8011d90 <SetMICIndicator+0x80>)
 8011d70:	2201      	movs	r2, #1
 8011d72:	701a      	strb	r2, [r3, #0]
}
 8011d74:	46c0      	nop			@ (mov r8, r8)
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	46c0      	nop			@ (mov r8, r8)
 8011d7c:	20001e61 	.word	0x20001e61
 8011d80:	20001e62 	.word	0x20001e62
 8011d84:	20001e70 	.word	0x20001e70
 8011d88:	9999999a 	.word	0x9999999a
 8011d8c:	400d9999 	.word	0x400d9999
 8011d90:	20001e64 	.word	0x20001e64

08011d94 <ResetMICIndicator>:
void ResetMICIndicator(){
 8011d94:	b580      	push	{r7, lr}
 8011d96:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011d98:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd8 <ResetMICIndicator+0x44>)
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d103      	bne.n	8011da8 <ResetMICIndicator+0x14>
 8011da0:	4b0e      	ldr	r3, [pc, #56]	@ (8011ddc <ResetMICIndicator+0x48>)
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d005      	beq.n	8011db4 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8011da8:	2380      	movs	r3, #128	@ 0x80
 8011daa:	05db      	lsls	r3, r3, #23
 8011dac:	22fa      	movs	r2, #250	@ 0xfa
 8011dae:	0112      	lsls	r2, r2, #4
 8011db0:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8011db2:	e00e      	b.n	8011dd2 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8011db4:	4b0a      	ldr	r3, [pc, #40]	@ (8011de0 <ResetMICIndicator+0x4c>)
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	2b02      	cmp	r3, #2
 8011dba:	d105      	bne.n	8011dc8 <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8011dbc:	2380      	movs	r3, #128	@ 0x80
 8011dbe:	05db      	lsls	r3, r3, #23
 8011dc0:	22fa      	movs	r2, #250	@ 0xfa
 8011dc2:	0112      	lsls	r2, r2, #4
 8011dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8011dc6:	e004      	b.n	8011dd2 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8011dc8:	2380      	movs	r3, #128	@ 0x80
 8011dca:	05db      	lsls	r3, r3, #23
 8011dcc:	22fa      	movs	r2, #250	@ 0xfa
 8011dce:	0112      	lsls	r2, r2, #4
 8011dd0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011dd2:	46c0      	nop			@ (mov r8, r8)
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	20001e61 	.word	0x20001e61
 8011ddc:	20001e62 	.word	0x20001e62
 8011de0:	20001e64 	.word	0x20001e64

08011de4 <SetESPIndicator>:
void SetESPIndicator(){
 8011de4:	b580      	push	{r7, lr}
 8011de6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011de8:	4b08      	ldr	r3, [pc, #32]	@ (8011e0c <SetESPIndicator+0x28>)
 8011dea:	781b      	ldrb	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d103      	bne.n	8011df8 <SetESPIndicator+0x14>
 8011df0:	4b07      	ldr	r3, [pc, #28]	@ (8011e10 <SetESPIndicator+0x2c>)
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d006      	beq.n	8011e06 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011df8:	f7ff fe62 	bl	8011ac0 <Calculate_LED_ON>
 8011dfc:	0003      	movs	r3, r0
 8011dfe:	001a      	movs	r2, r3
 8011e00:	2380      	movs	r3, #128	@ 0x80
 8011e02:	05db      	lsls	r3, r3, #23
 8011e04:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011e06:	46c0      	nop			@ (mov r8, r8)
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	20001e61 	.word	0x20001e61
 8011e10:	20001e62 	.word	0x20001e62

08011e14 <ResetESPIndicator>:
void ResetESPIndicator(){
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e18:	4b07      	ldr	r3, [pc, #28]	@ (8011e38 <ResetESPIndicator+0x24>)
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d103      	bne.n	8011e28 <ResetESPIndicator+0x14>
 8011e20:	4b06      	ldr	r3, [pc, #24]	@ (8011e3c <ResetESPIndicator+0x28>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d004      	beq.n	8011e32 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8011e28:	2380      	movs	r3, #128	@ 0x80
 8011e2a:	05db      	lsls	r3, r3, #23
 8011e2c:	22fa      	movs	r2, #250	@ 0xfa
 8011e2e:	0112      	lsls	r2, r2, #4
 8011e30:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8011e32:	46c0      	nop			@ (mov r8, r8)
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	20001e61 	.word	0x20001e61
 8011e3c:	20001e62 	.word	0x20001e62

08011e40 <SetPMIndicator>:

void SetPMIndicator() {
 8011e40:	b580      	push	{r7, lr}
 8011e42:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e44:	4b0f      	ldr	r3, [pc, #60]	@ (8011e84 <SetPMIndicator+0x44>)
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d103      	bne.n	8011e54 <SetPMIndicator+0x14>
 8011e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8011e88 <SetPMIndicator+0x48>)
 8011e4e:	781b      	ldrb	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d014      	beq.n	8011e7e <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8011e54:	f7ff fe34 	bl	8011ac0 <Calculate_LED_ON>
 8011e58:	0003      	movs	r3, r0
 8011e5a:	001a      	movs	r2, r3
 8011e5c:	2380      	movs	r3, #128	@ 0x80
 8011e5e:	05db      	lsls	r3, r3, #23
 8011e60:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8011e62:	f7ff fe2d 	bl	8011ac0 <Calculate_LED_ON>
 8011e66:	0003      	movs	r3, r0
 8011e68:	001a      	movs	r2, r3
 8011e6a:	2380      	movs	r3, #128	@ 0x80
 8011e6c:	05db      	lsls	r3, r3, #23
 8011e6e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8011e70:	f7ff fe26 	bl	8011ac0 <Calculate_LED_ON>
 8011e74:	0003      	movs	r3, r0
 8011e76:	001a      	movs	r2, r3
 8011e78:	2380      	movs	r3, #128	@ 0x80
 8011e7a:	05db      	lsls	r3, r3, #23
 8011e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011e7e:	46c0      	nop			@ (mov r8, r8)
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	20001e61 	.word	0x20001e61
 8011e88:	20001e62 	.word	0x20001e62

08011e8c <ResetPMIndicator>:

void ResetPMIndicator() {
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8011e90:	4b0c      	ldr	r3, [pc, #48]	@ (8011ec4 <ResetPMIndicator+0x38>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d103      	bne.n	8011ea0 <ResetPMIndicator+0x14>
 8011e98:	4b0b      	ldr	r3, [pc, #44]	@ (8011ec8 <ResetPMIndicator+0x3c>)
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d00e      	beq.n	8011ebe <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8011ea0:	2380      	movs	r3, #128	@ 0x80
 8011ea2:	05db      	lsls	r3, r3, #23
 8011ea4:	22fa      	movs	r2, #250	@ 0xfa
 8011ea6:	0112      	lsls	r2, r2, #4
 8011ea8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8011eaa:	2380      	movs	r3, #128	@ 0x80
 8011eac:	05db      	lsls	r3, r3, #23
 8011eae:	22fa      	movs	r2, #250	@ 0xfa
 8011eb0:	0112      	lsls	r2, r2, #4
 8011eb2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011eb4:	2380      	movs	r3, #128	@ 0x80
 8011eb6:	05db      	lsls	r3, r3, #23
 8011eb8:	22fa      	movs	r2, #250	@ 0xfa
 8011eba:	0112      	lsls	r2, r2, #4
 8011ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8011ebe:	46c0      	nop			@ (mov r8, r8)
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}
 8011ec4:	20001e61 	.word	0x20001e61
 8011ec8:	20001e62 	.word	0x20001e62

08011ecc <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8011ed0:	23fa      	movs	r3, #250	@ 0xfa
 8011ed2:	011a      	lsls	r2, r3, #4
 8011ed4:	23fa      	movs	r3, #250	@ 0xfa
 8011ed6:	0119      	lsls	r1, r3, #4
 8011ed8:	23fa      	movs	r3, #250	@ 0xfa
 8011eda:	011b      	lsls	r3, r3, #4
 8011edc:	0018      	movs	r0, r3
 8011ede:	f7ff fe37 	bl	8011b50 <SetStatusLED>
  SetDBLED(false,false,false);
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	2000      	movs	r0, #0
 8011ee8:	f7ff fe66 	bl	8011bb8 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8011eec:	23fa      	movs	r3, #250	@ 0xfa
 8011eee:	011a      	lsls	r2, r3, #4
 8011ef0:	23fa      	movs	r3, #250	@ 0xfa
 8011ef2:	0119      	lsls	r1, r3, #4
 8011ef4:	23fa      	movs	r3, #250	@ 0xfa
 8011ef6:	011b      	lsls	r3, r3, #4
 8011ef8:	0018      	movs	r0, r3
 8011efa:	f7ff fea7 	bl	8011c4c <SetVocLED>
return;
 8011efe:	46c0      	nop			@ (mov r8, r8)
}
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <SetAllREDLED>:

void SetAllREDLED() {
 8011f04:	b580      	push	{r7, lr}
 8011f06:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8011f08:	2380      	movs	r3, #128	@ 0x80
 8011f0a:	05db      	lsls	r3, r3, #23
 8011f0c:	4a19      	ldr	r2, [pc, #100]	@ (8011f74 <SetAllREDLED+0x70>)
 8011f0e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8011f10:	2380      	movs	r3, #128	@ 0x80
 8011f12:	05db      	lsls	r3, r3, #23
 8011f14:	22fa      	movs	r2, #250	@ 0xfa
 8011f16:	0112      	lsls	r2, r2, #4
 8011f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8011f1a:	2380      	movs	r3, #128	@ 0x80
 8011f1c:	05db      	lsls	r3, r3, #23
 8011f1e:	22fa      	movs	r2, #250	@ 0xfa
 8011f20:	0112      	lsls	r2, r2, #4
 8011f22:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8011f24:	4b14      	ldr	r3, [pc, #80]	@ (8011f78 <SetAllREDLED+0x74>)
 8011f26:	4a13      	ldr	r2, [pc, #76]	@ (8011f74 <SetAllREDLED+0x70>)
 8011f28:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8011f2a:	4b13      	ldr	r3, [pc, #76]	@ (8011f78 <SetAllREDLED+0x74>)
 8011f2c:	22fa      	movs	r2, #250	@ 0xfa
 8011f2e:	0112      	lsls	r2, r2, #4
 8011f30:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8011f32:	4b11      	ldr	r3, [pc, #68]	@ (8011f78 <SetAllREDLED+0x74>)
 8011f34:	22fa      	movs	r2, #250	@ 0xfa
 8011f36:	0112      	lsls	r2, r2, #4
 8011f38:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8011f3a:	4b10      	ldr	r3, [pc, #64]	@ (8011f7c <SetAllREDLED+0x78>)
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	2101      	movs	r1, #1
 8011f40:	0018      	movs	r0, r3
 8011f42:	f003 f8b8 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011f46:	2380      	movs	r3, #128	@ 0x80
 8011f48:	005b      	lsls	r3, r3, #1
 8011f4a:	480c      	ldr	r0, [pc, #48]	@ (8011f7c <SetAllREDLED+0x78>)
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	0019      	movs	r1, r3
 8011f50:	f003 f8b1 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8011f54:	2380      	movs	r3, #128	@ 0x80
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4808      	ldr	r0, [pc, #32]	@ (8011f7c <SetAllREDLED+0x78>)
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	0019      	movs	r1, r3
 8011f5e:	f003 f8aa 	bl	80150b6 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8011f62:	23fa      	movs	r3, #250	@ 0xfa
 8011f64:	009b      	lsls	r3, r3, #2
 8011f66:	0018      	movs	r0, r3
 8011f68:	f001 fe1e 	bl	8013ba8 <HAL_Delay>
}
 8011f6c:	46c0      	nop			@ (mov r8, r8)
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	46c0      	nop			@ (mov r8, r8)
 8011f74:	00000bb8 	.word	0x00000bb8
 8011f78:	40000400 	.word	0x40000400
 8011f7c:	50000400 	.word	0x50000400

08011f80 <SetAllBlueLED>:

void SetAllBlueLED() {
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8011f86:	1dfb      	adds	r3, r7, #7
 8011f88:	2200      	movs	r2, #0
 8011f8a:	701a      	strb	r2, [r3, #0]
 8011f8c:	e04b      	b.n	8012026 <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 8011f8e:	2380      	movs	r3, #128	@ 0x80
 8011f90:	05db      	lsls	r3, r3, #23
 8011f92:	22fa      	movs	r2, #250	@ 0xfa
 8011f94:	0112      	lsls	r2, r2, #4
 8011f96:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8011f98:	2380      	movs	r3, #128	@ 0x80
 8011f9a:	05db      	lsls	r3, r3, #23
 8011f9c:	22fa      	movs	r2, #250	@ 0xfa
 8011f9e:	0112      	lsls	r2, r2, #4
 8011fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8011fa2:	2380      	movs	r3, #128	@ 0x80
 8011fa4:	05db      	lsls	r3, r3, #23
 8011fa6:	4a24      	ldr	r2, [pc, #144]	@ (8012038 <SetAllBlueLED+0xb8>)
 8011fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8011faa:	4b24      	ldr	r3, [pc, #144]	@ (801203c <SetAllBlueLED+0xbc>)
 8011fac:	22fa      	movs	r2, #250	@ 0xfa
 8011fae:	0112      	lsls	r2, r2, #4
 8011fb0:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8011fb2:	4b22      	ldr	r3, [pc, #136]	@ (801203c <SetAllBlueLED+0xbc>)
 8011fb4:	22fa      	movs	r2, #250	@ 0xfa
 8011fb6:	0112      	lsls	r2, r2, #4
 8011fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8011fba:	4b20      	ldr	r3, [pc, #128]	@ (801203c <SetAllBlueLED+0xbc>)
 8011fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8012038 <SetAllBlueLED+0xb8>)
 8011fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8011fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8012040 <SetAllBlueLED+0xc0>)
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	0018      	movs	r0, r3
 8011fc8:	f003 f875 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8011fcc:	2380      	movs	r3, #128	@ 0x80
 8011fce:	005b      	lsls	r3, r3, #1
 8011fd0:	481b      	ldr	r0, [pc, #108]	@ (8012040 <SetAllBlueLED+0xc0>)
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	0019      	movs	r1, r3
 8011fd6:	f003 f86e 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8011fda:	2380      	movs	r3, #128	@ 0x80
 8011fdc:	009b      	lsls	r3, r3, #2
 8011fde:	4818      	ldr	r0, [pc, #96]	@ (8012040 <SetAllBlueLED+0xc0>)
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	0019      	movs	r1, r3
 8011fe4:	f003 f867 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8011fe8:	23fa      	movs	r3, #250	@ 0xfa
 8011fea:	009b      	lsls	r3, r3, #2
 8011fec:	0018      	movs	r0, r3
 8011fee:	f001 fddb 	bl	8013ba8 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8011ff2:	2380      	movs	r3, #128	@ 0x80
 8011ff4:	05db      	lsls	r3, r3, #23
 8011ff6:	22fa      	movs	r2, #250	@ 0xfa
 8011ff8:	0112      	lsls	r2, r2, #4
 8011ffa:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8011ffc:	4b0f      	ldr	r3, [pc, #60]	@ (801203c <SetAllBlueLED+0xbc>)
 8011ffe:	22fa      	movs	r2, #250	@ 0xfa
 8012000:	0112      	lsls	r2, r2, #4
 8012002:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012004:	2380      	movs	r3, #128	@ 0x80
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	480d      	ldr	r0, [pc, #52]	@ (8012040 <SetAllBlueLED+0xc0>)
 801200a:	2201      	movs	r2, #1
 801200c:	0019      	movs	r1, r3
 801200e:	f003 f852 	bl	80150b6 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8012012:	23fa      	movs	r3, #250	@ 0xfa
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	0018      	movs	r0, r3
 8012018:	f001 fdc6 	bl	8013ba8 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 801201c:	1dfb      	adds	r3, r7, #7
 801201e:	781a      	ldrb	r2, [r3, #0]
 8012020:	1dfb      	adds	r3, r7, #7
 8012022:	3201      	adds	r2, #1
 8012024:	701a      	strb	r2, [r3, #0]
 8012026:	1dfb      	adds	r3, r7, #7
 8012028:	781b      	ldrb	r3, [r3, #0]
 801202a:	2b02      	cmp	r3, #2
 801202c:	d9af      	bls.n	8011f8e <SetAllBlueLED+0xe>
  }
}
 801202e:	46c0      	nop			@ (mov r8, r8)
 8012030:	46c0      	nop			@ (mov r8, r8)
 8012032:	46bd      	mov	sp, r7
 8012034:	b002      	add	sp, #8
 8012036:	bd80      	pop	{r7, pc}
 8012038:	00000bb8 	.word	0x00000bb8
 801203c:	40000400 	.word	0x40000400
 8012040:	50000400 	.word	0x50000400

08012044 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012044:	b5b0      	push	{r4, r5, r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	0002      	movs	r2, r0
 801204c:	1dbb      	adds	r3, r7, #6
 801204e:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012050:	1dbb      	adds	r3, r7, #6
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d05a      	beq.n	801210e <SetVOCindicator+0xca>
 8012058:	1dbb      	adds	r3, r7, #6
 801205a:	881b      	ldrh	r3, [r3, #0]
 801205c:	2b64      	cmp	r3, #100	@ 0x64
 801205e:	d856      	bhi.n	801210e <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012060:	1dbb      	adds	r3, r7, #6
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	0018      	movs	r0, r3
 8012066:	f7f1 fbc3 	bl	80037f0 <__aeabi_i2d>
 801206a:	2200      	movs	r2, #0
 801206c:	4b5f      	ldr	r3, [pc, #380]	@ (80121ec <SetVOCindicator+0x1a8>)
 801206e:	f7f0 f837 	bl	80020e0 <__aeabi_ddiv>
 8012072:	0002      	movs	r2, r0
 8012074:	000b      	movs	r3, r1
 8012076:	2000      	movs	r0, #0
 8012078:	495d      	ldr	r1, [pc, #372]	@ (80121f0 <SetVOCindicator+0x1ac>)
 801207a:	f7f0 ff51 	bl	8002f20 <__aeabi_dsub>
 801207e:	0002      	movs	r2, r0
 8012080:	000b      	movs	r3, r1
 8012082:	0014      	movs	r4, r2
 8012084:	001d      	movs	r5, r3
 8012086:	4b5b      	ldr	r3, [pc, #364]	@ (80121f4 <SetVOCindicator+0x1b0>)
 8012088:	881b      	ldrh	r3, [r3, #0]
 801208a:	0018      	movs	r0, r3
 801208c:	f7f1 fbb0 	bl	80037f0 <__aeabi_i2d>
 8012090:	0002      	movs	r2, r0
 8012092:	000b      	movs	r3, r1
 8012094:	0020      	movs	r0, r4
 8012096:	0029      	movs	r1, r5
 8012098:	f7f0 fc5c 	bl	8002954 <__aeabi_dmul>
 801209c:	0002      	movs	r2, r0
 801209e:	000b      	movs	r3, r1
 80120a0:	0010      	movs	r0, r2
 80120a2:	0019      	movs	r1, r3
 80120a4:	f7ee fad2 	bl	800064c <__aeabi_d2uiz>
 80120a8:	0003      	movs	r3, r0
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	4b52      	ldr	r3, [pc, #328]	@ (80121f8 <SetVOCindicator+0x1b4>)
 80120ae:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 80120b0:	1dbb      	adds	r3, r7, #6
 80120b2:	881b      	ldrh	r3, [r3, #0]
 80120b4:	0018      	movs	r0, r3
 80120b6:	f7f1 fb9b 	bl	80037f0 <__aeabi_i2d>
 80120ba:	2200      	movs	r2, #0
 80120bc:	4b4b      	ldr	r3, [pc, #300]	@ (80121ec <SetVOCindicator+0x1a8>)
 80120be:	f7f0 f80f 	bl	80020e0 <__aeabi_ddiv>
 80120c2:	0002      	movs	r2, r0
 80120c4:	000b      	movs	r3, r1
 80120c6:	0014      	movs	r4, r2
 80120c8:	001d      	movs	r5, r3
 80120ca:	4b4a      	ldr	r3, [pc, #296]	@ (80121f4 <SetVOCindicator+0x1b0>)
 80120cc:	881b      	ldrh	r3, [r3, #0]
 80120ce:	0018      	movs	r0, r3
 80120d0:	f7f1 fb8e 	bl	80037f0 <__aeabi_i2d>
 80120d4:	0002      	movs	r2, r0
 80120d6:	000b      	movs	r3, r1
 80120d8:	0020      	movs	r0, r4
 80120da:	0029      	movs	r1, r5
 80120dc:	f7f0 fc3a 	bl	8002954 <__aeabi_dmul>
 80120e0:	0002      	movs	r2, r0
 80120e2:	000b      	movs	r3, r1
 80120e4:	0010      	movs	r0, r2
 80120e6:	0019      	movs	r1, r3
 80120e8:	f7ee fab0 	bl	800064c <__aeabi_d2uiz>
 80120ec:	0003      	movs	r3, r0
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	4b42      	ldr	r3, [pc, #264]	@ (80121fc <SetVOCindicator+0x1b8>)
 80120f2:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 80120f4:	4b3f      	ldr	r3, [pc, #252]	@ (80121f4 <SetVOCindicator+0x1b0>)
 80120f6:	881a      	ldrh	r2, [r3, #0]
 80120f8:	4b41      	ldr	r3, [pc, #260]	@ (8012200 <SetVOCindicator+0x1bc>)
 80120fa:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80120fc:	4b40      	ldr	r3, [pc, #256]	@ (8012200 <SetVOCindicator+0x1bc>)
 80120fe:	8818      	ldrh	r0, [r3, #0]
 8012100:	4b3d      	ldr	r3, [pc, #244]	@ (80121f8 <SetVOCindicator+0x1b4>)
 8012102:	8819      	ldrh	r1, [r3, #0]
 8012104:	4b3d      	ldr	r3, [pc, #244]	@ (80121fc <SetVOCindicator+0x1b8>)
 8012106:	881b      	ldrh	r3, [r3, #0]
 8012108:	001a      	movs	r2, r3
 801210a:	f7ff fd9f 	bl	8011c4c <SetVocLED>
  }
  if(VOCi > 100){
 801210e:	1dbb      	adds	r3, r7, #6
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	2b64      	cmp	r3, #100	@ 0x64
 8012114:	d966      	bls.n	80121e4 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 8012116:	1dbb      	adds	r3, r7, #6
 8012118:	881b      	ldrh	r3, [r3, #0]
 801211a:	0018      	movs	r0, r3
 801211c:	f7f1 fb68 	bl	80037f0 <__aeabi_i2d>
 8012120:	2200      	movs	r2, #0
 8012122:	4b32      	ldr	r3, [pc, #200]	@ (80121ec <SetVOCindicator+0x1a8>)
 8012124:	f7f0 fefc 	bl	8002f20 <__aeabi_dsub>
 8012128:	0002      	movs	r2, r0
 801212a:	000b      	movs	r3, r1
 801212c:	0010      	movs	r0, r2
 801212e:	0019      	movs	r1, r3
 8012130:	2200      	movs	r2, #0
 8012132:	4b34      	ldr	r3, [pc, #208]	@ (8012204 <SetVOCindicator+0x1c0>)
 8012134:	f7ef ffd4 	bl	80020e0 <__aeabi_ddiv>
 8012138:	0002      	movs	r2, r0
 801213a:	000b      	movs	r3, r1
 801213c:	0014      	movs	r4, r2
 801213e:	001d      	movs	r5, r3
 8012140:	4b2c      	ldr	r3, [pc, #176]	@ (80121f4 <SetVOCindicator+0x1b0>)
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	0018      	movs	r0, r3
 8012146:	f7f1 fb53 	bl	80037f0 <__aeabi_i2d>
 801214a:	0002      	movs	r2, r0
 801214c:	000b      	movs	r3, r1
 801214e:	0020      	movs	r0, r4
 8012150:	0029      	movs	r1, r5
 8012152:	f7f0 fbff 	bl	8002954 <__aeabi_dmul>
 8012156:	0002      	movs	r2, r0
 8012158:	000b      	movs	r3, r1
 801215a:	0010      	movs	r0, r2
 801215c:	0019      	movs	r1, r3
 801215e:	f7ee fa75 	bl	800064c <__aeabi_d2uiz>
 8012162:	0003      	movs	r3, r0
 8012164:	b29a      	uxth	r2, r3
 8012166:	4b24      	ldr	r3, [pc, #144]	@ (80121f8 <SetVOCindicator+0x1b4>)
 8012168:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 801216a:	1dbb      	adds	r3, r7, #6
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	0018      	movs	r0, r3
 8012170:	f7f1 fb3e 	bl	80037f0 <__aeabi_i2d>
 8012174:	2200      	movs	r2, #0
 8012176:	4b1d      	ldr	r3, [pc, #116]	@ (80121ec <SetVOCindicator+0x1a8>)
 8012178:	f7f0 fed2 	bl	8002f20 <__aeabi_dsub>
 801217c:	0002      	movs	r2, r0
 801217e:	000b      	movs	r3, r1
 8012180:	0010      	movs	r0, r2
 8012182:	0019      	movs	r1, r3
 8012184:	2200      	movs	r2, #0
 8012186:	4b1f      	ldr	r3, [pc, #124]	@ (8012204 <SetVOCindicator+0x1c0>)
 8012188:	f7ef ffaa 	bl	80020e0 <__aeabi_ddiv>
 801218c:	0002      	movs	r2, r0
 801218e:	000b      	movs	r3, r1
 8012190:	2000      	movs	r0, #0
 8012192:	4917      	ldr	r1, [pc, #92]	@ (80121f0 <SetVOCindicator+0x1ac>)
 8012194:	f7f0 fec4 	bl	8002f20 <__aeabi_dsub>
 8012198:	0002      	movs	r2, r0
 801219a:	000b      	movs	r3, r1
 801219c:	0014      	movs	r4, r2
 801219e:	001d      	movs	r5, r3
 80121a0:	4b14      	ldr	r3, [pc, #80]	@ (80121f4 <SetVOCindicator+0x1b0>)
 80121a2:	881b      	ldrh	r3, [r3, #0]
 80121a4:	0018      	movs	r0, r3
 80121a6:	f7f1 fb23 	bl	80037f0 <__aeabi_i2d>
 80121aa:	0002      	movs	r2, r0
 80121ac:	000b      	movs	r3, r1
 80121ae:	0020      	movs	r0, r4
 80121b0:	0029      	movs	r1, r5
 80121b2:	f7f0 fbcf 	bl	8002954 <__aeabi_dmul>
 80121b6:	0002      	movs	r2, r0
 80121b8:	000b      	movs	r3, r1
 80121ba:	0010      	movs	r0, r2
 80121bc:	0019      	movs	r1, r3
 80121be:	f7ee fa45 	bl	800064c <__aeabi_d2uiz>
 80121c2:	0003      	movs	r3, r0
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012200 <SetVOCindicator+0x1bc>)
 80121c8:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 80121ca:	4b0a      	ldr	r3, [pc, #40]	@ (80121f4 <SetVOCindicator+0x1b0>)
 80121cc:	881a      	ldrh	r2, [r3, #0]
 80121ce:	4b0b      	ldr	r3, [pc, #44]	@ (80121fc <SetVOCindicator+0x1b8>)
 80121d0:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80121d2:	4b0b      	ldr	r3, [pc, #44]	@ (8012200 <SetVOCindicator+0x1bc>)
 80121d4:	8818      	ldrh	r0, [r3, #0]
 80121d6:	4b08      	ldr	r3, [pc, #32]	@ (80121f8 <SetVOCindicator+0x1b4>)
 80121d8:	8819      	ldrh	r1, [r3, #0]
 80121da:	4b08      	ldr	r3, [pc, #32]	@ (80121fc <SetVOCindicator+0x1b8>)
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	001a      	movs	r2, r3
 80121e0:	f7ff fd34 	bl	8011c4c <SetVocLED>
  }

}
 80121e4:	46c0      	nop			@ (mov r8, r8)
 80121e6:	46bd      	mov	sp, r7
 80121e8:	b002      	add	sp, #8
 80121ea:	bdb0      	pop	{r4, r5, r7, pc}
 80121ec:	40590000 	.word	0x40590000
 80121f0:	3ff00000 	.word	0x3ff00000
 80121f4:	200000de 	.word	0x200000de
 80121f8:	20001e76 	.word	0x20001e76
 80121fc:	20001e78 	.word	0x20001e78
 8012200:	20001e7a 	.word	0x20001e7a
 8012204:	40790000 	.word	0x40790000

08012208 <powerCheck>:

Battery_Status powerCheck(){
 8012208:	b590      	push	{r4, r7, lr}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 801220e:	f7f7 f875 	bl	80092fc <Check_USB_PowerOn>
 8012212:	0003      	movs	r3, r0
 8012214:	001a      	movs	r2, r3
 8012216:	2301      	movs	r3, #1
 8012218:	4053      	eors	r3, r2
 801221a:	b2db      	uxtb	r3, r3
 801221c:	2b00      	cmp	r3, #0
 801221e:	d005      	beq.n	801222c <powerCheck+0x24>
    status = batteryChargeCheck();
 8012220:	1dfc      	adds	r4, r7, #7
 8012222:	f7ff fbf3 	bl	8011a0c <batteryChargeCheck>
 8012226:	0003      	movs	r3, r0
 8012228:	7023      	strb	r3, [r4, #0]
 801222a:	e002      	b.n	8012232 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 801222c:	1dfb      	adds	r3, r7, #7
 801222e:	2204      	movs	r2, #4
 8012230:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8012232:	1dfb      	adds	r3, r7, #7
 8012234:	781b      	ldrb	r3, [r3, #0]
}
 8012236:	0018      	movs	r0, r3
 8012238:	46bd      	mov	sp, r7
 801223a:	b003      	add	sp, #12
 801223c:	bd90      	pop	{r4, r7, pc}
	...

08012240 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8012240:	b5b0      	push	{r4, r5, r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af04      	add	r7, sp, #16
 8012246:	0002      	movs	r2, r0
 8012248:	1dfb      	adds	r3, r7, #7
 801224a:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 801224c:	1dfb      	adds	r3, r7, #7
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b04      	cmp	r3, #4
 8012252:	d114      	bne.n	801227e <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8012254:	f7f6 ff9c 	bl	8009190 <ReadBatteryVoltage>
 8012258:	1c03      	adds	r3, r0, #0
 801225a:	1c18      	adds	r0, r3, #0
 801225c:	f7f1 fb1a 	bl	8003894 <__aeabi_f2d>
 8012260:	0004      	movs	r4, r0
 8012262:	000d      	movs	r5, r1
 8012264:	f7f6 fff6 	bl	8009254 <ReadSolarVoltage>
 8012268:	0003      	movs	r3, r0
 801226a:	0019      	movs	r1, r3
 801226c:	4a1a      	ldr	r2, [pc, #104]	@ (80122d8 <powerDisplay+0x98>)
 801226e:	4b1b      	ldr	r3, [pc, #108]	@ (80122dc <powerDisplay+0x9c>)
 8012270:	9102      	str	r1, [sp, #8]
 8012272:	9400      	str	r4, [sp, #0]
 8012274:	9501      	str	r5, [sp, #4]
 8012276:	0019      	movs	r1, r3
 8012278:	2003      	movs	r0, #3
 801227a:	f000 ff4b 	bl	8013114 <CreateLine>
  }
  if(status == BATTERY_FULL){
 801227e:	1dfb      	adds	r3, r7, #7
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b03      	cmp	r3, #3
 8012284:	d105      	bne.n	8012292 <powerDisplay+0x52>
    Debug("Battery fully charged");
 8012286:	4a16      	ldr	r2, [pc, #88]	@ (80122e0 <powerDisplay+0xa0>)
 8012288:	4b14      	ldr	r3, [pc, #80]	@ (80122dc <powerDisplay+0x9c>)
 801228a:	0019      	movs	r1, r3
 801228c:	2003      	movs	r0, #3
 801228e:	f000 ff41 	bl	8013114 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8012292:	1dfb      	adds	r3, r7, #7
 8012294:	781b      	ldrb	r3, [r3, #0]
 8012296:	2b02      	cmp	r3, #2
 8012298:	d105      	bne.n	80122a6 <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 801229a:	4a12      	ldr	r2, [pc, #72]	@ (80122e4 <powerDisplay+0xa4>)
 801229c:	4b0f      	ldr	r3, [pc, #60]	@ (80122dc <powerDisplay+0x9c>)
 801229e:	0019      	movs	r1, r3
 80122a0:	2003      	movs	r0, #3
 80122a2:	f000 ff37 	bl	8013114 <CreateLine>
  }
  if(status == BATTERY_LOW){
 80122a6:	1dfb      	adds	r3, r7, #7
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d105      	bne.n	80122ba <powerDisplay+0x7a>
    Debug("Battery is getting low");
 80122ae:	4a0e      	ldr	r2, [pc, #56]	@ (80122e8 <powerDisplay+0xa8>)
 80122b0:	4b0a      	ldr	r3, [pc, #40]	@ (80122dc <powerDisplay+0x9c>)
 80122b2:	0019      	movs	r1, r3
 80122b4:	2003      	movs	r0, #3
 80122b6:	f000 ff2d 	bl	8013114 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80122ba:	1dfb      	adds	r3, r7, #7
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d105      	bne.n	80122ce <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 80122c2:	4a0a      	ldr	r2, [pc, #40]	@ (80122ec <powerDisplay+0xac>)
 80122c4:	4b05      	ldr	r3, [pc, #20]	@ (80122dc <powerDisplay+0x9c>)
 80122c6:	0019      	movs	r1, r3
 80122c8:	2003      	movs	r0, #3
 80122ca:	f000 ff23 	bl	8013114 <CreateLine>
  }
}
 80122ce:	46c0      	nop			@ (mov r8, r8)
 80122d0:	46bd      	mov	sp, r7
 80122d2:	b002      	add	sp, #8
 80122d4:	bdb0      	pop	{r4, r5, r7, pc}
 80122d6:	46c0      	nop			@ (mov r8, r8)
 80122d8:	0802d1fc 	.word	0x0802d1fc
 80122dc:	0802d23c 	.word	0x0802d23c
 80122e0:	0802d240 	.word	0x0802d240
 80122e4:	0802d258 	.word	0x0802d258
 80122e8:	0802d278 	.word	0x0802d278
 80122ec:	0802d290 	.word	0x0802d290

080122f0 <configCheck>:

void configCheck(){
 80122f0:	b590      	push	{r4, r7, lr}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 80122f6:	f7f7 f810 	bl	800931a <BootButton_Pressed>
 80122fa:	1e03      	subs	r3, r0, #0
 80122fc:	d007      	beq.n	801230e <configCheck+0x1e>
 80122fe:	f7f7 f81d 	bl	800933c <UserButton_Pressed>
 8012302:	1e03      	subs	r3, r0, #0
 8012304:	d003      	beq.n	801230e <configCheck+0x1e>
    configSet = true;
 8012306:	4bb5      	ldr	r3, [pc, #724]	@ (80125dc <configCheck+0x2ec>)
 8012308:	2201      	movs	r2, #1
 801230a:	701a      	strb	r2, [r3, #0]
 801230c:	e00a      	b.n	8012324 <configCheck+0x34>
  }
  else{
    configSet = false;
 801230e:	4bb3      	ldr	r3, [pc, #716]	@ (80125dc <configCheck+0x2ec>)
 8012310:	2200      	movs	r2, #0
 8012312:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8012314:	f001 fc3e 	bl	8013b94 <HAL_GetTick>
 8012318:	0003      	movs	r3, r0
 801231a:	22fa      	movs	r2, #250	@ 0xfa
 801231c:	00d2      	lsls	r2, r2, #3
 801231e:	189a      	adds	r2, r3, r2
 8012320:	4baf      	ldr	r3, [pc, #700]	@ (80125e0 <configCheck+0x2f0>)
 8012322:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8012324:	4bad      	ldr	r3, [pc, #692]	@ (80125dc <configCheck+0x2ec>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d00d      	beq.n	8012348 <configCheck+0x58>
 801232c:	4bac      	ldr	r3, [pc, #688]	@ (80125e0 <configCheck+0x2f0>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	0018      	movs	r0, r3
 8012332:	f000 fe99 	bl	8013068 <TimestampIsReached>
 8012336:	1e03      	subs	r3, r0, #0
 8012338:	d006      	beq.n	8012348 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 801233a:	f7f2 fd7f 	bl	8004e3c <SetConfigMode>
    SetDBLED(true, true, true);
 801233e:	2201      	movs	r2, #1
 8012340:	2101      	movs	r1, #1
 8012342:	2001      	movs	r0, #1
 8012344:	f7ff fc38 	bl	8011bb8 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8012348:	f7f6 ffe7 	bl	800931a <BootButton_Pressed>
 801234c:	0003      	movs	r3, r0
 801234e:	001a      	movs	r2, r3
 8012350:	2301      	movs	r3, #1
 8012352:	4053      	eors	r3, r2
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	d05a      	beq.n	8012410 <configCheck+0x120>
 801235a:	f7f6 ffef 	bl	800933c <UserButton_Pressed>
 801235e:	1e03      	subs	r3, r0, #0
 8012360:	d056      	beq.n	8012410 <configCheck+0x120>
 8012362:	4ba0      	ldr	r3, [pc, #640]	@ (80125e4 <configCheck+0x2f4>)
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	2201      	movs	r2, #1
 8012368:	4053      	eors	r3, r2
 801236a:	b2db      	uxtb	r3, r3
 801236c:	2b00      	cmp	r3, #0
 801236e:	d04f      	beq.n	8012410 <configCheck+0x120>
 8012370:	f7f2 fd84 	bl	8004e7c <GetReconfigMode>
 8012374:	0003      	movs	r3, r0
 8012376:	001a      	movs	r2, r3
 8012378:	2301      	movs	r3, #1
 801237a:	4053      	eors	r3, r2
 801237c:	b2db      	uxtb	r3, r3
 801237e:	2b00      	cmp	r3, #0
 8012380:	d046      	beq.n	8012410 <configCheck+0x120>
    SetLEDsOff();
 8012382:	f7ff fda3 	bl	8011ecc <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 8012386:	4a98      	ldr	r2, [pc, #608]	@ (80125e8 <configCheck+0x2f8>)
 8012388:	4997      	ldr	r1, [pc, #604]	@ (80125e8 <configCheck+0x2f8>)
 801238a:	4b97      	ldr	r3, [pc, #604]	@ (80125e8 <configCheck+0x2f8>)
 801238c:	0018      	movs	r0, r3
 801238e:	f7ff fc5d 	bl	8011c4c <SetVocLED>
    HAL_Delay(1500);
 8012392:	4b96      	ldr	r3, [pc, #600]	@ (80125ec <configCheck+0x2fc>)
 8012394:	0018      	movs	r0, r3
 8012396:	f001 fc07 	bl	8013ba8 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 801239a:	23fa      	movs	r3, #250	@ 0xfa
 801239c:	011a      	lsls	r2, r3, #4
 801239e:	23fa      	movs	r3, #250	@ 0xfa
 80123a0:	0119      	lsls	r1, r3, #4
 80123a2:	23fa      	movs	r3, #250	@ 0xfa
 80123a4:	011b      	lsls	r3, r3, #4
 80123a6:	0018      	movs	r0, r3
 80123a8:	f7ff fc50 	bl	8011c4c <SetVocLED>
    userToggle = !userToggle;
 80123ac:	4b90      	ldr	r3, [pc, #576]	@ (80125f0 <configCheck+0x300>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	1e5a      	subs	r2, r3, #1
 80123b2:	4193      	sbcs	r3, r2
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	2201      	movs	r2, #1
 80123b8:	4053      	eors	r3, r2
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	1c1a      	adds	r2, r3, #0
 80123be:	2301      	movs	r3, #1
 80123c0:	4013      	ands	r3, r2
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	4b8a      	ldr	r3, [pc, #552]	@ (80125f0 <configCheck+0x300>)
 80123c6:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 80123c8:	4b89      	ldr	r3, [pc, #548]	@ (80125f0 <configCheck+0x300>)
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d002      	beq.n	80123d6 <configCheck+0xe6>
      EnabledConnectedDevices();
 80123d0:	f7fa fe9c 	bl	800d10c <EnabledConnectedDevices>
 80123d4:	e004      	b.n	80123e0 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 80123d6:	f001 fbdd 	bl	8013b94 <HAL_GetTick>
 80123da:	0002      	movs	r2, r0
 80123dc:	4b85      	ldr	r3, [pc, #532]	@ (80125f4 <configCheck+0x304>)
 80123de:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 80123e0:	4b83      	ldr	r3, [pc, #524]	@ (80125f0 <configCheck+0x300>)
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d001      	beq.n	80123ec <configCheck+0xfc>
 80123e8:	4b83      	ldr	r3, [pc, #524]	@ (80125f8 <configCheck+0x308>)
 80123ea:	e000      	b.n	80123ee <configCheck+0xfe>
 80123ec:	4b83      	ldr	r3, [pc, #524]	@ (80125fc <configCheck+0x30c>)
 80123ee:	4a84      	ldr	r2, [pc, #528]	@ (8012600 <configCheck+0x310>)
 80123f0:	4984      	ldr	r1, [pc, #528]	@ (8012604 <configCheck+0x314>)
 80123f2:	2003      	movs	r0, #3
 80123f4:	f000 fe8e 	bl	8013114 <CreateLine>
    userbuttonHeld = true;
 80123f8:	4b7a      	ldr	r3, [pc, #488]	@ (80125e4 <configCheck+0x2f4>)
 80123fa:	2201      	movs	r2, #1
 80123fc:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 80123fe:	f001 fbc9 	bl	8013b94 <HAL_GetTick>
 8012402:	0003      	movs	r3, r0
 8012404:	22fa      	movs	r2, #250	@ 0xfa
 8012406:	00d2      	lsls	r2, r2, #3
 8012408:	189a      	adds	r2, r3, r2
 801240a:	4b7f      	ldr	r3, [pc, #508]	@ (8012608 <configCheck+0x318>)
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	e002      	b.n	8012416 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8012410:	4b74      	ldr	r3, [pc, #464]	@ (80125e4 <configCheck+0x2f4>)
 8012412:	2200      	movs	r2, #0
 8012414:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8012416:	f7f6 ff80 	bl	800931a <BootButton_Pressed>
 801241a:	0003      	movs	r3, r0
 801241c:	001a      	movs	r2, r3
 801241e:	2301      	movs	r3, #1
 8012420:	4053      	eors	r3, r2
 8012422:	b2db      	uxtb	r3, r3
 8012424:	2b00      	cmp	r3, #0
 8012426:	d100      	bne.n	801242a <configCheck+0x13a>
 8012428:	e0a4      	b.n	8012574 <configCheck+0x284>
 801242a:	4b6e      	ldr	r3, [pc, #440]	@ (80125e4 <configCheck+0x2f4>)
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d100      	bne.n	8012434 <configCheck+0x144>
 8012432:	e09f      	b.n	8012574 <configCheck+0x284>
 8012434:	4b74      	ldr	r3, [pc, #464]	@ (8012608 <configCheck+0x318>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	0018      	movs	r0, r3
 801243a:	f000 fe15 	bl	8013068 <TimestampIsReached>
 801243e:	1e03      	subs	r3, r0, #0
 8012440:	d100      	bne.n	8012444 <configCheck+0x154>
 8012442:	e097      	b.n	8012574 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012444:	f7fa fa56 	bl	800c8f4 <GetPMSensorPresence>
 8012448:	1e03      	subs	r3, r0, #0
 801244a:	d100      	bne.n	801244e <configCheck+0x15e>
 801244c:	e082      	b.n	8012554 <configCheck+0x264>
 801244e:	4b6f      	ldr	r3, [pc, #444]	@ (801260c <configCheck+0x31c>)
 8012450:	791b      	ldrb	r3, [r3, #4]
 8012452:	2b34      	cmp	r3, #52	@ 0x34
 8012454:	d004      	beq.n	8012460 <configCheck+0x170>
 8012456:	4b6d      	ldr	r3, [pc, #436]	@ (801260c <configCheck+0x31c>)
 8012458:	791b      	ldrb	r3, [r3, #4]
 801245a:	2b35      	cmp	r3, #53	@ 0x35
 801245c:	d000      	beq.n	8012460 <configCheck+0x170>
 801245e:	e079      	b.n	8012554 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 8012460:	4b6b      	ldr	r3, [pc, #428]	@ (8012610 <configCheck+0x320>)
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	1e5a      	subs	r2, r3, #1
 8012466:	4193      	sbcs	r3, r2
 8012468:	b2db      	uxtb	r3, r3
 801246a:	2201      	movs	r2, #1
 801246c:	4053      	eors	r3, r2
 801246e:	b2db      	uxtb	r3, r3
 8012470:	1c1a      	adds	r2, r3, #0
 8012472:	2301      	movs	r3, #1
 8012474:	4013      	ands	r3, r2
 8012476:	b2da      	uxtb	r2, r3
 8012478:	4b65      	ldr	r3, [pc, #404]	@ (8012610 <configCheck+0x320>)
 801247a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 801247c:	4b64      	ldr	r3, [pc, #400]	@ (8012610 <configCheck+0x320>)
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d005      	beq.n	8012490 <configCheck+0x1a0>
 8012484:	1dbc      	adds	r4, r7, #6
 8012486:	f7ff fb1b 	bl	8011ac0 <Calculate_LED_ON>
 801248a:	0003      	movs	r3, r0
 801248c:	8023      	strh	r3, [r4, #0]
 801248e:	e003      	b.n	8012498 <configCheck+0x1a8>
        else color = 4000;
 8012490:	1dbb      	adds	r3, r7, #6
 8012492:	22fa      	movs	r2, #250	@ 0xfa
 8012494:	0112      	lsls	r2, r2, #4
 8012496:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 8012498:	4b5d      	ldr	r3, [pc, #372]	@ (8012610 <configCheck+0x320>)
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d001      	beq.n	80124a4 <configCheck+0x1b4>
 80124a0:	4b5c      	ldr	r3, [pc, #368]	@ (8012614 <configCheck+0x324>)
 80124a2:	e000      	b.n	80124a6 <configCheck+0x1b6>
 80124a4:	4b5c      	ldr	r3, [pc, #368]	@ (8012618 <configCheck+0x328>)
 80124a6:	4a5d      	ldr	r2, [pc, #372]	@ (801261c <configCheck+0x32c>)
 80124a8:	495d      	ldr	r1, [pc, #372]	@ (8012620 <configCheck+0x330>)
 80124aa:	2002      	movs	r0, #2
 80124ac:	f000 fe32 	bl	8013114 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80124b0:	1d7b      	adds	r3, r7, #5
 80124b2:	2200      	movs	r2, #0
 80124b4:	701a      	strb	r2, [r3, #0]
 80124b6:	e028      	b.n	801250a <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 80124b8:	f7ff fb02 	bl	8011ac0 <Calculate_LED_ON>
 80124bc:	0003      	movs	r3, r0
 80124be:	001a      	movs	r2, r3
 80124c0:	4b58      	ldr	r3, [pc, #352]	@ (8012624 <configCheck+0x334>)
 80124c2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 80124c4:	4b57      	ldr	r3, [pc, #348]	@ (8012624 <configCheck+0x334>)
 80124c6:	1dba      	adds	r2, r7, #6
 80124c8:	8812      	ldrh	r2, [r2, #0]
 80124ca:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 80124cc:	4b55      	ldr	r3, [pc, #340]	@ (8012624 <configCheck+0x334>)
 80124ce:	1dba      	adds	r2, r7, #6
 80124d0:	8812      	ldrh	r2, [r2, #0]
 80124d2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80124d4:	23c8      	movs	r3, #200	@ 0xc8
 80124d6:	005b      	lsls	r3, r3, #1
 80124d8:	0018      	movs	r0, r3
 80124da:	f001 fb65 	bl	8013ba8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 80124de:	4b51      	ldr	r3, [pc, #324]	@ (8012624 <configCheck+0x334>)
 80124e0:	22fa      	movs	r2, #250	@ 0xfa
 80124e2:	0112      	lsls	r2, r2, #4
 80124e4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 80124e6:	4b4f      	ldr	r3, [pc, #316]	@ (8012624 <configCheck+0x334>)
 80124e8:	22fa      	movs	r2, #250	@ 0xfa
 80124ea:	0112      	lsls	r2, r2, #4
 80124ec:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 80124ee:	4b4d      	ldr	r3, [pc, #308]	@ (8012624 <configCheck+0x334>)
 80124f0:	22fa      	movs	r2, #250	@ 0xfa
 80124f2:	0112      	lsls	r2, r2, #4
 80124f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 80124f6:	23c8      	movs	r3, #200	@ 0xc8
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	0018      	movs	r0, r3
 80124fc:	f001 fb54 	bl	8013ba8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8012500:	1d7b      	adds	r3, r7, #5
 8012502:	781a      	ldrb	r2, [r3, #0]
 8012504:	1d7b      	adds	r3, r7, #5
 8012506:	3201      	adds	r2, #1
 8012508:	701a      	strb	r2, [r3, #0]
 801250a:	1d7b      	adds	r3, r7, #5
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	2b01      	cmp	r3, #1
 8012510:	d9d2      	bls.n	80124b8 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8012512:	4b37      	ldr	r3, [pc, #220]	@ (80125f0 <configCheck+0x300>)
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	1e5a      	subs	r2, r3, #1
 8012518:	4193      	sbcs	r3, r2
 801251a:	b2db      	uxtb	r3, r3
 801251c:	2201      	movs	r2, #1
 801251e:	4053      	eors	r3, r2
 8012520:	b2db      	uxtb	r3, r3
 8012522:	1c1a      	adds	r2, r3, #0
 8012524:	2301      	movs	r3, #1
 8012526:	4013      	ands	r3, r2
 8012528:	b2da      	uxtb	r2, r3
 801252a:	4b31      	ldr	r3, [pc, #196]	@ (80125f0 <configCheck+0x300>)
 801252c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 801252e:	4b30      	ldr	r3, [pc, #192]	@ (80125f0 <configCheck+0x300>)
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d001      	beq.n	801253a <configCheck+0x24a>
 8012536:	4b37      	ldr	r3, [pc, #220]	@ (8012614 <configCheck+0x324>)
 8012538:	e000      	b.n	801253c <configCheck+0x24c>
 801253a:	4b37      	ldr	r3, [pc, #220]	@ (8012618 <configCheck+0x328>)
 801253c:	4a3a      	ldr	r2, [pc, #232]	@ (8012628 <configCheck+0x338>)
 801253e:	4938      	ldr	r1, [pc, #224]	@ (8012620 <configCheck+0x330>)
 8012540:	2002      	movs	r0, #2
 8012542:	f000 fde7 	bl	8013114 <CreateLine>
      if (usbPluggedIn) {
 8012546:	4b39      	ldr	r3, [pc, #228]	@ (801262c <configCheck+0x33c>)
 8012548:	781b      	ldrb	r3, [r3, #0]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d009      	beq.n	8012562 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801254e:	f7fb ffa1 	bl	800e494 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012552:	e006      	b.n	8012562 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8012554:	4a36      	ldr	r2, [pc, #216]	@ (8012630 <configCheck+0x340>)
 8012556:	4b32      	ldr	r3, [pc, #200]	@ (8012620 <configCheck+0x330>)
 8012558:	0019      	movs	r1, r3
 801255a:	2002      	movs	r0, #2
 801255c:	f000 fdda 	bl	8013114 <CreateLine>
 8012560:	e000      	b.n	8012564 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8012562:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 8012564:	46c0      	nop			@ (mov r8, r8)
 8012566:	f7f6 fee9 	bl	800933c <UserButton_Pressed>
 801256a:	1e03      	subs	r3, r0, #0
 801256c:	d1fb      	bne.n	8012566 <configCheck+0x276>
    }
    userbuttonHeld = false;
 801256e:	4b1d      	ldr	r3, [pc, #116]	@ (80125e4 <configCheck+0x2f4>)
 8012570:	2200      	movs	r2, #0
 8012572:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 8012574:	f7f6 fed1 	bl	800931a <BootButton_Pressed>
 8012578:	0003      	movs	r3, r0
 801257a:	001a      	movs	r2, r3
 801257c:	2301      	movs	r3, #1
 801257e:	4053      	eors	r3, r2
 8012580:	b2db      	uxtb	r3, r3
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00b      	beq.n	801259e <configCheck+0x2ae>
 8012586:	f7f6 fed9 	bl	800933c <UserButton_Pressed>
 801258a:	0003      	movs	r3, r0
 801258c:	001a      	movs	r2, r3
 801258e:	2301      	movs	r3, #1
 8012590:	4053      	eors	r3, r2
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <configCheck+0x2ae>
    userbuttonHeld = false;
 8012598:	4b12      	ldr	r3, [pc, #72]	@ (80125e4 <configCheck+0x2f4>)
 801259a:	2200      	movs	r2, #0
 801259c:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 801259e:	f7f6 fead 	bl	80092fc <Check_USB_PowerOn>
 80125a2:	1e03      	subs	r3, r0, #0
 80125a4:	d003      	beq.n	80125ae <configCheck+0x2be>
    usbPluggedIn = true;
 80125a6:	4b21      	ldr	r3, [pc, #132]	@ (801262c <configCheck+0x33c>)
 80125a8:	2201      	movs	r2, #1
 80125aa:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80125ac:	e012      	b.n	80125d4 <configCheck+0x2e4>
    if(!userToggle && !init){
 80125ae:	4b10      	ldr	r3, [pc, #64]	@ (80125f0 <configCheck+0x300>)
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	2201      	movs	r2, #1
 80125b4:	4053      	eors	r3, r2
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d008      	beq.n	80125ce <configCheck+0x2de>
 80125bc:	4b1d      	ldr	r3, [pc, #116]	@ (8012634 <configCheck+0x344>)
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	2201      	movs	r2, #1
 80125c2:	4053      	eors	r3, r2
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d001      	beq.n	80125ce <configCheck+0x2de>
      SetLEDsOff();
 80125ca:	f7ff fc7f 	bl	8011ecc <SetLEDsOff>
    usbPluggedIn = false;
 80125ce:	4b17      	ldr	r3, [pc, #92]	@ (801262c <configCheck+0x33c>)
 80125d0:	2200      	movs	r2, #0
 80125d2:	701a      	strb	r2, [r3, #0]
}
 80125d4:	46c0      	nop			@ (mov r8, r8)
 80125d6:	46bd      	mov	sp, r7
 80125d8:	b003      	add	sp, #12
 80125da:	bd90      	pop	{r4, r7, pc}
 80125dc:	20001e60 	.word	0x20001e60
 80125e0:	20001e68 	.word	0x20001e68
 80125e4:	20001e63 	.word	0x20001e63
 80125e8:	00000bb8 	.word	0x00000bb8
 80125ec:	000005dc 	.word	0x000005dc
 80125f0:	20001e62 	.word	0x20001e62
 80125f4:	20000e28 	.word	0x20000e28
 80125f8:	0802d2b4 	.word	0x0802d2b4
 80125fc:	0802d2b8 	.word	0x0802d2b8
 8012600:	0802d2bc 	.word	0x0802d2bc
 8012604:	0802d23c 	.word	0x0802d23c
 8012608:	20001e6c 	.word	0x20001e6c
 801260c:	20000ed4 	.word	0x20000ed4
 8012610:	20000ed2 	.word	0x20000ed2
 8012614:	0802d2dc 	.word	0x0802d2dc
 8012618:	0802d2e4 	.word	0x0802d2e4
 801261c:	0802d2f0 	.word	0x0802d2f0
 8012620:	0802d310 	.word	0x0802d310
 8012624:	40000400 	.word	0x40000400
 8012628:	0802d314 	.word	0x0802d314
 801262c:	20001e61 	.word	0x20001e61
 8012630:	0802d32c 	.word	0x0802d32c
 8012634:	200000dc 	.word	0x200000dc

08012638 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8012638:	b590      	push	{r4, r7, lr}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 801263e:	1dfc      	adds	r4, r7, #7
 8012640:	f7ff fde2 	bl	8012208 <powerCheck>
 8012644:	0003      	movs	r3, r0
 8012646:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8012648:	1dfb      	adds	r3, r7, #7
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	0018      	movs	r0, r3
 801264e:	f7ff fdf7 	bl	8012240 <powerDisplay>
  return status;
 8012652:	1dfb      	adds	r3, r7, #7
 8012654:	781b      	ldrb	r3, [r3, #0]
}
 8012656:	0018      	movs	r0, r3
 8012658:	46bd      	mov	sp, r7
 801265a:	b003      	add	sp, #12
 801265c:	bd90      	pop	{r4, r7, pc}
	...

08012660 <setuserToggle>:

void setuserToggle(void) {
 8012660:	b580      	push	{r7, lr}
 8012662:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 8012664:	f7ff fdd0 	bl	8012208 <powerCheck>
 8012668:	0003      	movs	r3, r0
 801266a:	2b04      	cmp	r3, #4
 801266c:	d004      	beq.n	8012678 <setuserToggle+0x18>
    userToggle = true;
 801266e:	4b04      	ldr	r3, [pc, #16]	@ (8012680 <setuserToggle+0x20>)
 8012670:	2201      	movs	r2, #1
 8012672:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 8012674:	f7fa fd4a 	bl	800d10c <EnabledConnectedDevices>
  }
}
 8012678:	46c0      	nop			@ (mov r8, r8)
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	46c0      	nop			@ (mov r8, r8)
 8012680:	20001e62 	.word	0x20001e62

08012684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012688:	4b07      	ldr	r3, [pc, #28]	@ (80126a8 <HAL_MspInit+0x24>)
 801268a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801268c:	4b06      	ldr	r3, [pc, #24]	@ (80126a8 <HAL_MspInit+0x24>)
 801268e:	2101      	movs	r1, #1
 8012690:	430a      	orrs	r2, r1
 8012692:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8012694:	4b04      	ldr	r3, [pc, #16]	@ (80126a8 <HAL_MspInit+0x24>)
 8012696:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012698:	4b03      	ldr	r3, [pc, #12]	@ (80126a8 <HAL_MspInit+0x24>)
 801269a:	2180      	movs	r1, #128	@ 0x80
 801269c:	0549      	lsls	r1, r1, #21
 801269e:	430a      	orrs	r2, r1
 80126a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80126a2:	46c0      	nop			@ (mov r8, r8)
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	40021000 	.word	0x40021000

080126ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80126b0:	46c0      	nop			@ (mov r8, r8)
 80126b2:	e7fd      	b.n	80126b0 <NMI_Handler+0x4>

080126b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80126b8:	46c0      	nop			@ (mov r8, r8)
 80126ba:	e7fd      	b.n	80126b8 <HardFault_Handler+0x4>

080126bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80126c0:	46c0      	nop			@ (mov r8, r8)
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80126ca:	46c0      	nop			@ (mov r8, r8)
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80126d4:	f001 fa4c 	bl	8013b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
#ifdef USBLOGGING
  vcp_service();
#endif
  /* USER CODE END SysTick_IRQn 1 */
}
 80126d8:	46c0      	nop			@ (mov r8, r8)
 80126da:	46bd      	mov	sp, r7
 80126dc:	bd80      	pop	{r7, pc}
	...

080126e0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80126e4:	4b03      	ldr	r3, [pc, #12]	@ (80126f4 <RTC_IRQHandler+0x14>)
 80126e6:	0018      	movs	r0, r3
 80126e8:	f009 fa7e 	bl	801bbe8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80126ec:	46c0      	nop			@ (mov r8, r8)
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	46c0      	nop			@ (mov r8, r8)
 80126f4:	20000eac 	.word	0x20000eac

080126f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 80126fc:	2380      	movs	r3, #128	@ 0x80
 80126fe:	021b      	lsls	r3, r3, #8
 8012700:	0018      	movs	r0, r3
 8012702:	f002 fcf5 	bl	80150f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8012706:	46c0      	nop			@ (mov r8, r8)
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}

0801270c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8012710:	4b05      	ldr	r3, [pc, #20]	@ (8012728 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8012712:	0018      	movs	r0, r3
 8012714:	f002 f87d 	bl	8014812 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8012718:	4b04      	ldr	r3, [pc, #16]	@ (801272c <DMA1_Channel2_3_IRQHandler+0x20>)
 801271a:	0018      	movs	r0, r3
 801271c:	f002 f879 	bl	8014812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8012720:	46c0      	nop			@ (mov r8, r8)
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	46c0      	nop			@ (mov r8, r8)
 8012728:	20000d44 	.word	0x20000d44
 801272c:	20000cfc 	.word	0x20000cfc

08012730 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8012734:	4b07      	ldr	r3, [pc, #28]	@ (8012754 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8012736:	0018      	movs	r0, r3
 8012738:	f002 f86b 	bl	8014812 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 801273c:	4b06      	ldr	r3, [pc, #24]	@ (8012758 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 801273e:	0018      	movs	r0, r3
 8012740:	f002 f867 	bl	8014812 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8012744:	4b05      	ldr	r3, [pc, #20]	@ (801275c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8012746:	0018      	movs	r0, r3
 8012748:	f002 f863 	bl	8014812 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 801274c:	46c0      	nop			@ (mov r8, r8)
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
 8012752:	46c0      	nop			@ (mov r8, r8)
 8012754:	20000dc8 	.word	0x20000dc8
 8012758:	20002168 	.word	0x20002168
 801275c:	200021b0 	.word	0x200021b0

08012760 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8012764:	4b03      	ldr	r3, [pc, #12]	@ (8012774 <USART4_5_IRQHandler+0x14>)
 8012766:	0018      	movs	r0, r3
 8012768:	f00a f938 	bl	801c9dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 801276c:	46c0      	nop			@ (mov r8, r8)
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	46c0      	nop			@ (mov r8, r8)
 8012774:	200020b0 	.word	0x200020b0

08012778 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 801277c:	4b09      	ldr	r3, [pc, #36]	@ (80127a4 <I2C1_IRQHandler+0x2c>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	699a      	ldr	r2, [r3, #24]
 8012782:	23e0      	movs	r3, #224	@ 0xe0
 8012784:	00db      	lsls	r3, r3, #3
 8012786:	4013      	ands	r3, r2
 8012788:	d004      	beq.n	8012794 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 801278a:	4b06      	ldr	r3, [pc, #24]	@ (80127a4 <I2C1_IRQHandler+0x2c>)
 801278c:	0018      	movs	r0, r3
 801278e:	f003 fbcd 	bl	8015f2c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8012792:	e003      	b.n	801279c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8012794:	4b03      	ldr	r3, [pc, #12]	@ (80127a4 <I2C1_IRQHandler+0x2c>)
 8012796:	0018      	movs	r0, r3
 8012798:	f003 fbae 	bl	8015ef8 <HAL_I2C_EV_IRQHandler>
}
 801279c:	46c0      	nop			@ (mov r8, r8)
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}
 80127a2:	46c0      	nop			@ (mov r8, r8)
 80127a4:	20000c54 	.word	0x20000c54

080127a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80127ac:	4b03      	ldr	r3, [pc, #12]	@ (80127bc <USART1_IRQHandler+0x14>)
 80127ae:	0018      	movs	r0, r3
 80127b0:	f00a f914 	bl	801c9dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80127b4:	46c0      	nop			@ (mov r8, r8)
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	46c0      	nop			@ (mov r8, r8)
 80127bc:	20001ff8 	.word	0x20001ff8

080127c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80127c4:	4b03      	ldr	r3, [pc, #12]	@ (80127d4 <USB_IRQHandler+0x14>)
 80127c6:	0018      	movs	r0, r3
 80127c8:	f006 f864 	bl	8018894 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80127cc:	46c0      	nop			@ (mov r8, r8)
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	46c0      	nop			@ (mov r8, r8)
 80127d4:	20002fcc 	.word	0x20002fcc

080127d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	af00      	add	r7, sp, #0
  return 1;
 80127dc:	2301      	movs	r3, #1
}
 80127de:	0018      	movs	r0, r3
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <_kill>:

int _kill(int pid, int sig)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80127ee:	f013 f80b 	bl	8025808 <__errno>
 80127f2:	0003      	movs	r3, r0
 80127f4:	2216      	movs	r2, #22
 80127f6:	601a      	str	r2, [r3, #0]
  return -1;
 80127f8:	2301      	movs	r3, #1
 80127fa:	425b      	negs	r3, r3
}
 80127fc:	0018      	movs	r0, r3
 80127fe:	46bd      	mov	sp, r7
 8012800:	b002      	add	sp, #8
 8012802:	bd80      	pop	{r7, pc}

08012804 <_exit>:

void _exit (int status)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801280c:	2301      	movs	r3, #1
 801280e:	425a      	negs	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	0011      	movs	r1, r2
 8012814:	0018      	movs	r0, r3
 8012816:	f7ff ffe5 	bl	80127e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 801281a:	46c0      	nop			@ (mov r8, r8)
 801281c:	e7fd      	b.n	801281a <_exit+0x16>

0801281e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b086      	sub	sp, #24
 8012822:	af00      	add	r7, sp, #0
 8012824:	60f8      	str	r0, [r7, #12]
 8012826:	60b9      	str	r1, [r7, #8]
 8012828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801282a:	2300      	movs	r3, #0
 801282c:	617b      	str	r3, [r7, #20]
 801282e:	e00a      	b.n	8012846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012830:	e000      	b.n	8012834 <_read+0x16>
 8012832:	bf00      	nop
 8012834:	0001      	movs	r1, r0
 8012836:	68bb      	ldr	r3, [r7, #8]
 8012838:	1c5a      	adds	r2, r3, #1
 801283a:	60ba      	str	r2, [r7, #8]
 801283c:	b2ca      	uxtb	r2, r1
 801283e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	3301      	adds	r3, #1
 8012844:	617b      	str	r3, [r7, #20]
 8012846:	697a      	ldr	r2, [r7, #20]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	429a      	cmp	r2, r3
 801284c:	dbf0      	blt.n	8012830 <_read+0x12>
  }

  return len;
 801284e:	687b      	ldr	r3, [r7, #4]
}
 8012850:	0018      	movs	r0, r3
 8012852:	46bd      	mov	sp, r7
 8012854:	b006      	add	sp, #24
 8012856:	bd80      	pop	{r7, pc}

08012858 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012860:	2301      	movs	r3, #1
 8012862:	425b      	negs	r3, r3
}
 8012864:	0018      	movs	r0, r3
 8012866:	46bd      	mov	sp, r7
 8012868:	b002      	add	sp, #8
 801286a:	bd80      	pop	{r7, pc}

0801286c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	2280      	movs	r2, #128	@ 0x80
 801287a:	0192      	lsls	r2, r2, #6
 801287c:	605a      	str	r2, [r3, #4]
  return 0;
 801287e:	2300      	movs	r3, #0
}
 8012880:	0018      	movs	r0, r3
 8012882:	46bd      	mov	sp, r7
 8012884:	b002      	add	sp, #8
 8012886:	bd80      	pop	{r7, pc}

08012888 <_isatty>:

int _isatty(int file)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012890:	2301      	movs	r3, #1
}
 8012892:	0018      	movs	r0, r3
 8012894:	46bd      	mov	sp, r7
 8012896:	b002      	add	sp, #8
 8012898:	bd80      	pop	{r7, pc}

0801289a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801289a:	b580      	push	{r7, lr}
 801289c:	b084      	sub	sp, #16
 801289e:	af00      	add	r7, sp, #0
 80128a0:	60f8      	str	r0, [r7, #12]
 80128a2:	60b9      	str	r1, [r7, #8]
 80128a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80128a6:	2300      	movs	r3, #0
}
 80128a8:	0018      	movs	r0, r3
 80128aa:	46bd      	mov	sp, r7
 80128ac:	b004      	add	sp, #16
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b086      	sub	sp, #24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80128b8:	4a14      	ldr	r2, [pc, #80]	@ (801290c <_sbrk+0x5c>)
 80128ba:	4b15      	ldr	r3, [pc, #84]	@ (8012910 <_sbrk+0x60>)
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80128c4:	4b13      	ldr	r3, [pc, #76]	@ (8012914 <_sbrk+0x64>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d102      	bne.n	80128d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80128cc:	4b11      	ldr	r3, [pc, #68]	@ (8012914 <_sbrk+0x64>)
 80128ce:	4a12      	ldr	r2, [pc, #72]	@ (8012918 <_sbrk+0x68>)
 80128d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80128d2:	4b10      	ldr	r3, [pc, #64]	@ (8012914 <_sbrk+0x64>)
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	18d3      	adds	r3, r2, r3
 80128da:	693a      	ldr	r2, [r7, #16]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d207      	bcs.n	80128f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80128e0:	f012 ff92 	bl	8025808 <__errno>
 80128e4:	0003      	movs	r3, r0
 80128e6:	220c      	movs	r2, #12
 80128e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80128ea:	2301      	movs	r3, #1
 80128ec:	425b      	negs	r3, r3
 80128ee:	e009      	b.n	8012904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80128f0:	4b08      	ldr	r3, [pc, #32]	@ (8012914 <_sbrk+0x64>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80128f6:	4b07      	ldr	r3, [pc, #28]	@ (8012914 <_sbrk+0x64>)
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	18d2      	adds	r2, r2, r3
 80128fe:	4b05      	ldr	r3, [pc, #20]	@ (8012914 <_sbrk+0x64>)
 8012900:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8012902:	68fb      	ldr	r3, [r7, #12]
}
 8012904:	0018      	movs	r0, r3
 8012906:	46bd      	mov	sp, r7
 8012908:	b006      	add	sp, #24
 801290a:	bd80      	pop	{r7, pc}
 801290c:	20005000 	.word	0x20005000
 8012910:	00000400 	.word	0x00000400
 8012914:	20001e7c 	.word	0x20001e7c
 8012918:	20003630 	.word	0x20003630

0801291c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012920:	46c0      	nop			@ (mov r8, r8)
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b086      	sub	sp, #24
 801292c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801292e:	2310      	movs	r3, #16
 8012930:	18fb      	adds	r3, r7, r3
 8012932:	0018      	movs	r0, r3
 8012934:	2308      	movs	r3, #8
 8012936:	001a      	movs	r2, r3
 8012938:	2100      	movs	r1, #0
 801293a:	f012 fec1 	bl	80256c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801293e:	003b      	movs	r3, r7
 8012940:	0018      	movs	r0, r3
 8012942:	2310      	movs	r3, #16
 8012944:	001a      	movs	r2, r3
 8012946:	2100      	movs	r1, #0
 8012948:	f012 feba 	bl	80256c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801294c:	4b2e      	ldr	r3, [pc, #184]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 801294e:	2280      	movs	r2, #128	@ 0x80
 8012950:	05d2      	lsls	r2, r2, #23
 8012952:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8012954:	4b2c      	ldr	r3, [pc, #176]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 8012956:	2200      	movs	r2, #0
 8012958:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801295a:	4b2b      	ldr	r3, [pc, #172]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 801295c:	2200      	movs	r2, #0
 801295e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8012960:	4b29      	ldr	r3, [pc, #164]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 8012962:	4a2a      	ldr	r2, [pc, #168]	@ (8012a0c <MX_TIM2_Init+0xe4>)
 8012964:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012966:	4b28      	ldr	r3, [pc, #160]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 8012968:	2200      	movs	r2, #0
 801296a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801296c:	4b26      	ldr	r3, [pc, #152]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 801296e:	2200      	movs	r2, #0
 8012970:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8012972:	4b25      	ldr	r3, [pc, #148]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 8012974:	0018      	movs	r0, r3
 8012976:	f009 fa45 	bl	801be04 <HAL_TIM_PWM_Init>
 801297a:	1e03      	subs	r3, r0, #0
 801297c:	d001      	beq.n	8012982 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 801297e:	f7f9 ff67 	bl	800c850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012982:	2110      	movs	r1, #16
 8012984:	187b      	adds	r3, r7, r1
 8012986:	2200      	movs	r2, #0
 8012988:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801298a:	187b      	adds	r3, r7, r1
 801298c:	2200      	movs	r2, #0
 801298e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8012990:	187a      	adds	r2, r7, r1
 8012992:	4b1d      	ldr	r3, [pc, #116]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 8012994:	0011      	movs	r1, r2
 8012996:	0018      	movs	r0, r3
 8012998:	f009 fd52 	bl	801c440 <HAL_TIMEx_MasterConfigSynchronization>
 801299c:	1e03      	subs	r3, r0, #0
 801299e:	d001      	beq.n	80129a4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80129a0:	f7f9 ff56 	bl	800c850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80129a4:	003b      	movs	r3, r7
 80129a6:	2260      	movs	r2, #96	@ 0x60
 80129a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80129aa:	003b      	movs	r3, r7
 80129ac:	2200      	movs	r2, #0
 80129ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80129b0:	003b      	movs	r3, r7
 80129b2:	2200      	movs	r2, #0
 80129b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80129b6:	003b      	movs	r3, r7
 80129b8:	2200      	movs	r2, #0
 80129ba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80129bc:	0039      	movs	r1, r7
 80129be:	4b12      	ldr	r3, [pc, #72]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	0018      	movs	r0, r3
 80129c4:	f009 faf0 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 80129c8:	1e03      	subs	r3, r0, #0
 80129ca:	d001      	beq.n	80129d0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80129cc:	f7f9 ff40 	bl	800c850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80129d0:	0039      	movs	r1, r7
 80129d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 80129d4:	2208      	movs	r2, #8
 80129d6:	0018      	movs	r0, r3
 80129d8:	f009 fae6 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 80129dc:	1e03      	subs	r3, r0, #0
 80129de:	d001      	beq.n	80129e4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80129e0:	f7f9 ff36 	bl	800c850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80129e4:	0039      	movs	r1, r7
 80129e6:	4b08      	ldr	r3, [pc, #32]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 80129e8:	220c      	movs	r2, #12
 80129ea:	0018      	movs	r0, r3
 80129ec:	f009 fadc 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 80129f0:	1e03      	subs	r3, r0, #0
 80129f2:	d001      	beq.n	80129f8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80129f4:	f7f9 ff2c 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80129f8:	4b03      	ldr	r3, [pc, #12]	@ (8012a08 <MX_TIM2_Init+0xe0>)
 80129fa:	0018      	movs	r0, r3
 80129fc:	f000 f8fe 	bl	8012bfc <HAL_TIM_MspPostInit>

}
 8012a00:	46c0      	nop			@ (mov r8, r8)
 8012a02:	46bd      	mov	sp, r7
 8012a04:	b006      	add	sp, #24
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	20001e80 	.word	0x20001e80
 8012a0c:	0000ffff 	.word	0x0000ffff

08012a10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b086      	sub	sp, #24
 8012a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012a16:	2310      	movs	r3, #16
 8012a18:	18fb      	adds	r3, r7, r3
 8012a1a:	0018      	movs	r0, r3
 8012a1c:	2308      	movs	r3, #8
 8012a1e:	001a      	movs	r2, r3
 8012a20:	2100      	movs	r1, #0
 8012a22:	f012 fe4d 	bl	80256c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8012a26:	003b      	movs	r3, r7
 8012a28:	0018      	movs	r0, r3
 8012a2a:	2310      	movs	r3, #16
 8012a2c:	001a      	movs	r2, r3
 8012a2e:	2100      	movs	r1, #0
 8012a30:	f012 fe46 	bl	80256c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8012a34:	4b32      	ldr	r3, [pc, #200]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a36:	4a33      	ldr	r2, [pc, #204]	@ (8012b04 <MX_TIM3_Init+0xf4>)
 8012a38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8012a3a:	4b31      	ldr	r3, [pc, #196]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012a40:	4b2f      	ldr	r3, [pc, #188]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a42:	2200      	movs	r2, #0
 8012a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8012a46:	4b2e      	ldr	r3, [pc, #184]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a48:	4a2f      	ldr	r2, [pc, #188]	@ (8012b08 <MX_TIM3_Init+0xf8>)
 8012a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a4e:	2200      	movs	r2, #0
 8012a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012a52:	4b2b      	ldr	r3, [pc, #172]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a54:	2200      	movs	r2, #0
 8012a56:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8012a58:	4b29      	ldr	r3, [pc, #164]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a5a:	0018      	movs	r0, r3
 8012a5c:	f009 f9d2 	bl	801be04 <HAL_TIM_PWM_Init>
 8012a60:	1e03      	subs	r3, r0, #0
 8012a62:	d001      	beq.n	8012a68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8012a64:	f7f9 fef4 	bl	800c850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012a68:	2110      	movs	r1, #16
 8012a6a:	187b      	adds	r3, r7, r1
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012a70:	187b      	adds	r3, r7, r1
 8012a72:	2200      	movs	r2, #0
 8012a74:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8012a76:	187a      	adds	r2, r7, r1
 8012a78:	4b21      	ldr	r3, [pc, #132]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012a7a:	0011      	movs	r1, r2
 8012a7c:	0018      	movs	r0, r3
 8012a7e:	f009 fcdf 	bl	801c440 <HAL_TIMEx_MasterConfigSynchronization>
 8012a82:	1e03      	subs	r3, r0, #0
 8012a84:	d001      	beq.n	8012a8a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8012a86:	f7f9 fee3 	bl	800c850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012a8a:	003b      	movs	r3, r7
 8012a8c:	2260      	movs	r2, #96	@ 0x60
 8012a8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8012a90:	003b      	movs	r3, r7
 8012a92:	2200      	movs	r2, #0
 8012a94:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012a96:	003b      	movs	r3, r7
 8012a98:	2200      	movs	r2, #0
 8012a9a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8012a9c:	003b      	movs	r3, r7
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012aa2:	0039      	movs	r1, r7
 8012aa4:	4b16      	ldr	r3, [pc, #88]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	0018      	movs	r0, r3
 8012aaa:	f009 fa7d 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 8012aae:	1e03      	subs	r3, r0, #0
 8012ab0:	d001      	beq.n	8012ab6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8012ab2:	f7f9 fecd 	bl	800c850 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8012ab6:	4b12      	ldr	r3, [pc, #72]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012ab8:	2104      	movs	r1, #4
 8012aba:	0018      	movs	r0, r3
 8012abc:	f009 fd1e 	bl	801c4fc <HAL_TIMEx_RemapConfig>
 8012ac0:	1e03      	subs	r3, r0, #0
 8012ac2:	d001      	beq.n	8012ac8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8012ac4:	f7f9 fec4 	bl	800c850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8012ac8:	0039      	movs	r1, r7
 8012aca:	4b0d      	ldr	r3, [pc, #52]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012acc:	2204      	movs	r2, #4
 8012ace:	0018      	movs	r0, r3
 8012ad0:	f009 fa6a 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 8012ad4:	1e03      	subs	r3, r0, #0
 8012ad6:	d001      	beq.n	8012adc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8012ad8:	f7f9 feba 	bl	800c850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012adc:	0039      	movs	r1, r7
 8012ade:	4b08      	ldr	r3, [pc, #32]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012ae0:	2208      	movs	r2, #8
 8012ae2:	0018      	movs	r0, r3
 8012ae4:	f009 fa60 	bl	801bfa8 <HAL_TIM_PWM_ConfigChannel>
 8012ae8:	1e03      	subs	r3, r0, #0
 8012aea:	d001      	beq.n	8012af0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8012aec:	f7f9 feb0 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8012af0:	4b03      	ldr	r3, [pc, #12]	@ (8012b00 <MX_TIM3_Init+0xf0>)
 8012af2:	0018      	movs	r0, r3
 8012af4:	f000 f882 	bl	8012bfc <HAL_TIM_MspPostInit>

}
 8012af8:	46c0      	nop			@ (mov r8, r8)
 8012afa:	46bd      	mov	sp, r7
 8012afc:	b006      	add	sp, #24
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	20001ec0 	.word	0x20001ec0
 8012b04:	40000400 	.word	0x40000400
 8012b08:	0000ffff 	.word	0x0000ffff

08012b0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012b12:	003b      	movs	r3, r7
 8012b14:	0018      	movs	r0, r3
 8012b16:	2308      	movs	r3, #8
 8012b18:	001a      	movs	r2, r3
 8012b1a:	2100      	movs	r1, #0
 8012b1c:	f012 fdd0 	bl	80256c0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8012b20:	4b15      	ldr	r3, [pc, #84]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b22:	4a16      	ldr	r2, [pc, #88]	@ (8012b7c <MX_TIM6_Init+0x70>)
 8012b24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8012b26:	4b14      	ldr	r3, [pc, #80]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b28:	220a      	movs	r2, #10
 8012b2a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b2c:	4b12      	ldr	r3, [pc, #72]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b2e:	2200      	movs	r2, #0
 8012b30:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8012b32:	4b11      	ldr	r3, [pc, #68]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b34:	4a12      	ldr	r2, [pc, #72]	@ (8012b80 <MX_TIM6_Init+0x74>)
 8012b36:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b38:	4b0f      	ldr	r3, [pc, #60]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8012b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b40:	0018      	movs	r0, r3
 8012b42:	f009 f8b7 	bl	801bcb4 <HAL_TIM_Base_Init>
 8012b46:	1e03      	subs	r3, r0, #0
 8012b48:	d001      	beq.n	8012b4e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8012b4a:	f7f9 fe81 	bl	800c850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012b4e:	003b      	movs	r3, r7
 8012b50:	2200      	movs	r2, #0
 8012b52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012b54:	003b      	movs	r3, r7
 8012b56:	2200      	movs	r2, #0
 8012b58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8012b5a:	003a      	movs	r2, r7
 8012b5c:	4b06      	ldr	r3, [pc, #24]	@ (8012b78 <MX_TIM6_Init+0x6c>)
 8012b5e:	0011      	movs	r1, r2
 8012b60:	0018      	movs	r0, r3
 8012b62:	f009 fc6d 	bl	801c440 <HAL_TIMEx_MasterConfigSynchronization>
 8012b66:	1e03      	subs	r3, r0, #0
 8012b68:	d001      	beq.n	8012b6e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8012b6a:	f7f9 fe71 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8012b6e:	46c0      	nop			@ (mov r8, r8)
 8012b70:	46bd      	mov	sp, r7
 8012b72:	b002      	add	sp, #8
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	46c0      	nop			@ (mov r8, r8)
 8012b78:	20001f00 	.word	0x20001f00
 8012b7c:	40001000 	.word	0x40001000
 8012b80:	0000ffff 	.word	0x0000ffff

08012b84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b082      	sub	sp, #8
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	2380      	movs	r3, #128	@ 0x80
 8012b92:	05db      	lsls	r3, r3, #23
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d106      	bne.n	8012ba6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012b98:	4b0a      	ldr	r3, [pc, #40]	@ (8012bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8012b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b9c:	4b09      	ldr	r3, [pc, #36]	@ (8012bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8012b9e:	2101      	movs	r1, #1
 8012ba0:	430a      	orrs	r2, r1
 8012ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8012ba4:	e00a      	b.n	8012bbc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a07      	ldr	r2, [pc, #28]	@ (8012bc8 <HAL_TIM_PWM_MspInit+0x44>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d105      	bne.n	8012bbc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8012bb0:	4b04      	ldr	r3, [pc, #16]	@ (8012bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8012bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012bb4:	4b03      	ldr	r3, [pc, #12]	@ (8012bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8012bb6:	2102      	movs	r1, #2
 8012bb8:	430a      	orrs	r2, r1
 8012bba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8012bbc:	46c0      	nop			@ (mov r8, r8)
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	b002      	add	sp, #8
 8012bc2:	bd80      	pop	{r7, pc}
 8012bc4:	40021000 	.word	0x40021000
 8012bc8:	40000400 	.word	0x40000400

08012bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b082      	sub	sp, #8
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	4a06      	ldr	r2, [pc, #24]	@ (8012bf4 <HAL_TIM_Base_MspInit+0x28>)
 8012bda:	4293      	cmp	r3, r2
 8012bdc:	d105      	bne.n	8012bea <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8012bde:	4b06      	ldr	r3, [pc, #24]	@ (8012bf8 <HAL_TIM_Base_MspInit+0x2c>)
 8012be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012be2:	4b05      	ldr	r3, [pc, #20]	@ (8012bf8 <HAL_TIM_Base_MspInit+0x2c>)
 8012be4:	2110      	movs	r1, #16
 8012be6:	430a      	orrs	r2, r1
 8012be8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8012bea:	46c0      	nop			@ (mov r8, r8)
 8012bec:	46bd      	mov	sp, r7
 8012bee:	b002      	add	sp, #8
 8012bf0:	bd80      	pop	{r7, pc}
 8012bf2:	46c0      	nop			@ (mov r8, r8)
 8012bf4:	40001000 	.word	0x40001000
 8012bf8:	40021000 	.word	0x40021000

08012bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012bfc:	b590      	push	{r4, r7, lr}
 8012bfe:	b08b      	sub	sp, #44	@ 0x2c
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c04:	2414      	movs	r4, #20
 8012c06:	193b      	adds	r3, r7, r4
 8012c08:	0018      	movs	r0, r3
 8012c0a:	2314      	movs	r3, #20
 8012c0c:	001a      	movs	r2, r3
 8012c0e:	2100      	movs	r1, #0
 8012c10:	f012 fd56 	bl	80256c0 <memset>
  if(timHandle->Instance==TIM2)
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	2380      	movs	r3, #128	@ 0x80
 8012c1a:	05db      	lsls	r3, r3, #23
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d123      	bne.n	8012c68 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c20:	4b27      	ldr	r3, [pc, #156]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c24:	4b26      	ldr	r3, [pc, #152]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c26:	2101      	movs	r1, #1
 8012c28:	430a      	orrs	r2, r1
 8012c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012c2c:	4b24      	ldr	r3, [pc, #144]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c30:	2201      	movs	r2, #1
 8012c32:	4013      	ands	r3, r2
 8012c34:	613b      	str	r3, [r7, #16]
 8012c36:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8012c38:	0021      	movs	r1, r4
 8012c3a:	187b      	adds	r3, r7, r1
 8012c3c:	220d      	movs	r2, #13
 8012c3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c40:	187b      	adds	r3, r7, r1
 8012c42:	2202      	movs	r2, #2
 8012c44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c46:	187b      	adds	r3, r7, r1
 8012c48:	2200      	movs	r2, #0
 8012c4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c4c:	187b      	adds	r3, r7, r1
 8012c4e:	2200      	movs	r2, #0
 8012c50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8012c52:	187b      	adds	r3, r7, r1
 8012c54:	2202      	movs	r2, #2
 8012c56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c58:	187a      	adds	r2, r7, r1
 8012c5a:	23a0      	movs	r3, #160	@ 0xa0
 8012c5c:	05db      	lsls	r3, r3, #23
 8012c5e:	0011      	movs	r1, r2
 8012c60:	0018      	movs	r0, r3
 8012c62:	f002 f88d 	bl	8014d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8012c66:	e027      	b.n	8012cb8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4a15      	ldr	r2, [pc, #84]	@ (8012cc4 <HAL_TIM_MspPostInit+0xc8>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d122      	bne.n	8012cb8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c72:	4b13      	ldr	r3, [pc, #76]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c76:	4b12      	ldr	r3, [pc, #72]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c78:	2104      	movs	r1, #4
 8012c7a:	430a      	orrs	r2, r1
 8012c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012c7e:	4b10      	ldr	r3, [pc, #64]	@ (8012cc0 <HAL_TIM_MspPostInit+0xc4>)
 8012c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c82:	2204      	movs	r2, #4
 8012c84:	4013      	ands	r3, r2
 8012c86:	60fb      	str	r3, [r7, #12]
 8012c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8012c8a:	2114      	movs	r1, #20
 8012c8c:	187b      	adds	r3, r7, r1
 8012c8e:	22e0      	movs	r2, #224	@ 0xe0
 8012c90:	0052      	lsls	r2, r2, #1
 8012c92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c94:	187b      	adds	r3, r7, r1
 8012c96:	2202      	movs	r2, #2
 8012c98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c9a:	187b      	adds	r3, r7, r1
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ca0:	187b      	adds	r3, r7, r1
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012ca6:	187b      	adds	r3, r7, r1
 8012ca8:	2202      	movs	r2, #2
 8012caa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012cac:	187b      	adds	r3, r7, r1
 8012cae:	4a06      	ldr	r2, [pc, #24]	@ (8012cc8 <HAL_TIM_MspPostInit+0xcc>)
 8012cb0:	0019      	movs	r1, r3
 8012cb2:	0010      	movs	r0, r2
 8012cb4:	f002 f864 	bl	8014d80 <HAL_GPIO_Init>
}
 8012cb8:	46c0      	nop			@ (mov r8, r8)
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	b00b      	add	sp, #44	@ 0x2c
 8012cbe:	bd90      	pop	{r4, r7, pc}
 8012cc0:	40021000 	.word	0x40021000
 8012cc4:	40000400 	.word	0x40000400
 8012cc8:	50000800 	.word	0x50000800

08012ccc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012cd0:	4b17      	ldr	r3, [pc, #92]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cd2:	4a18      	ldr	r2, [pc, #96]	@ (8012d34 <MX_LPUART1_UART_Init+0x68>)
 8012cd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8012cd6:	4b16      	ldr	r3, [pc, #88]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cd8:	22e1      	movs	r2, #225	@ 0xe1
 8012cda:	0252      	lsls	r2, r2, #9
 8012cdc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012cde:	4b14      	ldr	r3, [pc, #80]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012ce4:	4b12      	ldr	r3, [pc, #72]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012cea:	4b11      	ldr	r3, [pc, #68]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cec:	2200      	movs	r2, #0
 8012cee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cf2:	220c      	movs	r2, #12
 8012cf4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8012d02:	4b0b      	ldr	r3, [pc, #44]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012d04:	2218      	movs	r2, #24
 8012d06:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8012d08:	4b09      	ldr	r3, [pc, #36]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012d0a:	2280      	movs	r2, #128	@ 0x80
 8012d0c:	0212      	lsls	r2, r2, #8
 8012d0e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8012d10:	4b07      	ldr	r3, [pc, #28]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012d12:	2280      	movs	r2, #128	@ 0x80
 8012d14:	0152      	lsls	r2, r2, #5
 8012d16:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012d18:	4b05      	ldr	r3, [pc, #20]	@ (8012d30 <MX_LPUART1_UART_Init+0x64>)
 8012d1a:	0018      	movs	r0, r3
 8012d1c:	f009 fc0c 	bl	801c538 <HAL_UART_Init>
 8012d20:	1e03      	subs	r3, r0, #0
 8012d22:	d001      	beq.n	8012d28 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8012d24:	f7f9 fd94 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012d28:	46c0      	nop			@ (mov r8, r8)
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	46c0      	nop			@ (mov r8, r8)
 8012d30:	20001f40 	.word	0x20001f40
 8012d34:	40004800 	.word	0x40004800

08012d38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012d3c:	4b14      	ldr	r3, [pc, #80]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d3e:	4a15      	ldr	r2, [pc, #84]	@ (8012d94 <MX_USART1_UART_Init+0x5c>)
 8012d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8012d42:	4b13      	ldr	r3, [pc, #76]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d44:	22e1      	movs	r2, #225	@ 0xe1
 8012d46:	0252      	lsls	r2, r2, #9
 8012d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012d4a:	4b11      	ldr	r3, [pc, #68]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012d50:	4b0f      	ldr	r3, [pc, #60]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8012d56:	4b0e      	ldr	r3, [pc, #56]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d58:	2200      	movs	r2, #0
 8012d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d5e:	220c      	movs	r2, #12
 8012d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012d62:	4b0b      	ldr	r3, [pc, #44]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012d68:	4b09      	ldr	r3, [pc, #36]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012d6e:	4b08      	ldr	r3, [pc, #32]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012d74:	4b06      	ldr	r3, [pc, #24]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d76:	2200      	movs	r2, #0
 8012d78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012d7a:	4b05      	ldr	r3, [pc, #20]	@ (8012d90 <MX_USART1_UART_Init+0x58>)
 8012d7c:	0018      	movs	r0, r3
 8012d7e:	f009 fbdb 	bl	801c538 <HAL_UART_Init>
 8012d82:	1e03      	subs	r3, r0, #0
 8012d84:	d001      	beq.n	8012d8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8012d86:	f7f9 fd63 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8012d8a:	46c0      	nop			@ (mov r8, r8)
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	20001ff8 	.word	0x20001ff8
 8012d94:	40013800 	.word	0x40013800

08012d98 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8012d9c:	4b14      	ldr	r3, [pc, #80]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012d9e:	4a15      	ldr	r2, [pc, #84]	@ (8012df4 <MX_USART4_UART_Init+0x5c>)
 8012da0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8012da2:	4b13      	ldr	r3, [pc, #76]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012da4:	22e1      	movs	r2, #225	@ 0xe1
 8012da6:	0252      	lsls	r2, r2, #9
 8012da8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8012daa:	4b11      	ldr	r3, [pc, #68]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dac:	2200      	movs	r2, #0
 8012dae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8012db0:	4b0f      	ldr	r3, [pc, #60]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8012db6:	4b0e      	ldr	r3, [pc, #56]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012db8:	2200      	movs	r2, #0
 8012dba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8012dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dbe:	220c      	movs	r2, #12
 8012dc0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8012dc8:	4b09      	ldr	r3, [pc, #36]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012dce:	4b08      	ldr	r3, [pc, #32]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012dd4:	4b06      	ldr	r3, [pc, #24]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8012dda:	4b05      	ldr	r3, [pc, #20]	@ (8012df0 <MX_USART4_UART_Init+0x58>)
 8012ddc:	0018      	movs	r0, r3
 8012dde:	f009 fbab 	bl	801c538 <HAL_UART_Init>
 8012de2:	1e03      	subs	r3, r0, #0
 8012de4:	d001      	beq.n	8012dea <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8012de6:	f7f9 fd33 	bl	800c850 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8012dea:	46c0      	nop			@ (mov r8, r8)
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	200020b0 	.word	0x200020b0
 8012df4:	40004c00 	.word	0x40004c00

08012df8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012df8:	b590      	push	{r4, r7, lr}
 8012dfa:	b08d      	sub	sp, #52	@ 0x34
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e00:	241c      	movs	r4, #28
 8012e02:	193b      	adds	r3, r7, r4
 8012e04:	0018      	movs	r0, r3
 8012e06:	2314      	movs	r3, #20
 8012e08:	001a      	movs	r2, r3
 8012e0a:	2100      	movs	r1, #0
 8012e0c:	f012 fc58 	bl	80256c0 <memset>
  if(uartHandle->Instance==LPUART1)
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a8b      	ldr	r2, [pc, #556]	@ (8013044 <HAL_UART_MspInit+0x24c>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d129      	bne.n	8012e6e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012e1a:	4b8b      	ldr	r3, [pc, #556]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e20:	2180      	movs	r1, #128	@ 0x80
 8012e22:	02c9      	lsls	r1, r1, #11
 8012e24:	430a      	orrs	r2, r1
 8012e26:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012e28:	4b87      	ldr	r3, [pc, #540]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e2c:	4b86      	ldr	r3, [pc, #536]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e2e:	2104      	movs	r1, #4
 8012e30:	430a      	orrs	r2, r1
 8012e32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012e34:	4b84      	ldr	r3, [pc, #528]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e38:	2204      	movs	r2, #4
 8012e3a:	4013      	ands	r3, r2
 8012e3c:	61bb      	str	r3, [r7, #24]
 8012e3e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012e40:	0021      	movs	r1, r4
 8012e42:	187b      	adds	r3, r7, r1
 8012e44:	2203      	movs	r2, #3
 8012e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012e48:	187b      	adds	r3, r7, r1
 8012e4a:	2202      	movs	r2, #2
 8012e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e4e:	187b      	adds	r3, r7, r1
 8012e50:	2200      	movs	r2, #0
 8012e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e54:	187b      	adds	r3, r7, r1
 8012e56:	2203      	movs	r2, #3
 8012e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8012e5a:	187b      	adds	r3, r7, r1
 8012e5c:	2206      	movs	r2, #6
 8012e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012e60:	187b      	adds	r3, r7, r1
 8012e62:	4a7a      	ldr	r2, [pc, #488]	@ (801304c <HAL_UART_MspInit+0x254>)
 8012e64:	0019      	movs	r1, r3
 8012e66:	0010      	movs	r0, r2
 8012e68:	f001 ff8a 	bl	8014d80 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8012e6c:	e0e5      	b.n	801303a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	4a77      	ldr	r2, [pc, #476]	@ (8013050 <HAL_UART_MspInit+0x258>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d133      	bne.n	8012ee0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8012e78:	4b73      	ldr	r3, [pc, #460]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012e7c:	4b72      	ldr	r3, [pc, #456]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e7e:	2180      	movs	r1, #128	@ 0x80
 8012e80:	01c9      	lsls	r1, r1, #7
 8012e82:	430a      	orrs	r2, r1
 8012e84:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012e86:	4b70      	ldr	r3, [pc, #448]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e8c:	2101      	movs	r1, #1
 8012e8e:	430a      	orrs	r2, r1
 8012e90:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012e92:	4b6d      	ldr	r3, [pc, #436]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e96:	2201      	movs	r2, #1
 8012e98:	4013      	ands	r3, r2
 8012e9a:	617b      	str	r3, [r7, #20]
 8012e9c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8012e9e:	211c      	movs	r1, #28
 8012ea0:	187b      	adds	r3, r7, r1
 8012ea2:	22c0      	movs	r2, #192	@ 0xc0
 8012ea4:	00d2      	lsls	r2, r2, #3
 8012ea6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ea8:	187b      	adds	r3, r7, r1
 8012eaa:	2202      	movs	r2, #2
 8012eac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012eae:	187b      	adds	r3, r7, r1
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012eb4:	187b      	adds	r3, r7, r1
 8012eb6:	2203      	movs	r2, #3
 8012eb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012eba:	187b      	adds	r3, r7, r1
 8012ebc:	2204      	movs	r2, #4
 8012ebe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ec0:	187a      	adds	r2, r7, r1
 8012ec2:	23a0      	movs	r3, #160	@ 0xa0
 8012ec4:	05db      	lsls	r3, r3, #23
 8012ec6:	0011      	movs	r1, r2
 8012ec8:	0018      	movs	r0, r3
 8012eca:	f001 ff59 	bl	8014d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	201b      	movs	r0, #27
 8012ed4:	f001 fb02 	bl	80144dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8012ed8:	201b      	movs	r0, #27
 8012eda:	f001 fb14 	bl	8014506 <HAL_NVIC_EnableIRQ>
}
 8012ede:	e0ac      	b.n	801303a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a5b      	ldr	r2, [pc, #364]	@ (8013054 <HAL_UART_MspInit+0x25c>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d000      	beq.n	8012eec <HAL_UART_MspInit+0xf4>
 8012eea:	e0a6      	b.n	801303a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8012eec:	4b56      	ldr	r3, [pc, #344]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ef0:	4b55      	ldr	r3, [pc, #340]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012ef2:	2180      	movs	r1, #128	@ 0x80
 8012ef4:	0309      	lsls	r1, r1, #12
 8012ef6:	430a      	orrs	r2, r1
 8012ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012efa:	4b53      	ldr	r3, [pc, #332]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012efe:	4b52      	ldr	r3, [pc, #328]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012f00:	2101      	movs	r1, #1
 8012f02:	430a      	orrs	r2, r1
 8012f04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f06:	4b50      	ldr	r3, [pc, #320]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	613b      	str	r3, [r7, #16]
 8012f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f12:	4b4d      	ldr	r3, [pc, #308]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f16:	4b4c      	ldr	r3, [pc, #304]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012f18:	2104      	movs	r1, #4
 8012f1a:	430a      	orrs	r2, r1
 8012f1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8013048 <HAL_UART_MspInit+0x250>)
 8012f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f22:	2204      	movs	r2, #4
 8012f24:	4013      	ands	r3, r2
 8012f26:	60fb      	str	r3, [r7, #12]
 8012f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012f2a:	241c      	movs	r4, #28
 8012f2c:	193b      	adds	r3, r7, r4
 8012f2e:	2202      	movs	r2, #2
 8012f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f32:	193b      	adds	r3, r7, r4
 8012f34:	2202      	movs	r2, #2
 8012f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f38:	193b      	adds	r3, r7, r4
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f3e:	193b      	adds	r3, r7, r4
 8012f40:	2203      	movs	r2, #3
 8012f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012f44:	193b      	adds	r3, r7, r4
 8012f46:	2206      	movs	r2, #6
 8012f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f4a:	193a      	adds	r2, r7, r4
 8012f4c:	23a0      	movs	r3, #160	@ 0xa0
 8012f4e:	05db      	lsls	r3, r3, #23
 8012f50:	0011      	movs	r1, r2
 8012f52:	0018      	movs	r0, r3
 8012f54:	f001 ff14 	bl	8014d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8012f58:	0021      	movs	r1, r4
 8012f5a:	187b      	adds	r3, r7, r1
 8012f5c:	2280      	movs	r2, #128	@ 0x80
 8012f5e:	00d2      	lsls	r2, r2, #3
 8012f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f62:	187b      	adds	r3, r7, r1
 8012f64:	2202      	movs	r2, #2
 8012f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f68:	187b      	adds	r3, r7, r1
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f6e:	187b      	adds	r3, r7, r1
 8012f70:	2203      	movs	r2, #3
 8012f72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8012f74:	187b      	adds	r3, r7, r1
 8012f76:	2206      	movs	r2, #6
 8012f78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012f7a:	187b      	adds	r3, r7, r1
 8012f7c:	4a33      	ldr	r2, [pc, #204]	@ (801304c <HAL_UART_MspInit+0x254>)
 8012f7e:	0019      	movs	r1, r3
 8012f80:	0010      	movs	r0, r2
 8012f82:	f001 fefd 	bl	8014d80 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8012f86:	4b34      	ldr	r3, [pc, #208]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012f88:	4a34      	ldr	r2, [pc, #208]	@ (801305c <HAL_UART_MspInit+0x264>)
 8012f8a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8012f8c:	4b32      	ldr	r3, [pc, #200]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012f8e:	220c      	movs	r2, #12
 8012f90:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012f92:	4b31      	ldr	r3, [pc, #196]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012f98:	4b2f      	ldr	r3, [pc, #188]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fa0:	2280      	movs	r2, #128	@ 0x80
 8012fa2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012faa:	4b2b      	ldr	r3, [pc, #172]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8012fb0:	4b29      	ldr	r3, [pc, #164]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fb2:	2220      	movs	r2, #32
 8012fb4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012fb6:	4b28      	ldr	r3, [pc, #160]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8012fbc:	4b26      	ldr	r3, [pc, #152]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fbe:	0018      	movs	r0, r3
 8012fc0:	f001 fac2 	bl	8014548 <HAL_DMA_Init>
 8012fc4:	1e03      	subs	r3, r0, #0
 8012fc6:	d001      	beq.n	8012fcc <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8012fc8:	f7f9 fc42 	bl	800c850 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	4a22      	ldr	r2, [pc, #136]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fd0:	675a      	str	r2, [r3, #116]	@ 0x74
 8012fd2:	4b21      	ldr	r3, [pc, #132]	@ (8013058 <HAL_UART_MspInit+0x260>)
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8012fd8:	4b21      	ldr	r3, [pc, #132]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012fda:	4a22      	ldr	r2, [pc, #136]	@ (8013064 <HAL_UART_MspInit+0x26c>)
 8012fdc:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8012fde:	4b20      	ldr	r3, [pc, #128]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012fe0:	220c      	movs	r2, #12
 8012fe2:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012fe6:	2210      	movs	r2, #16
 8012fe8:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012fea:	4b1d      	ldr	r3, [pc, #116]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8012ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012ff2:	2280      	movs	r2, #128	@ 0x80
 8012ff4:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012ffc:	4b18      	ldr	r3, [pc, #96]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8012ffe:	2200      	movs	r2, #0
 8013000:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013002:	4b17      	ldr	r3, [pc, #92]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8013004:	2200      	movs	r2, #0
 8013006:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013008:	4b15      	ldr	r3, [pc, #84]	@ (8013060 <HAL_UART_MspInit+0x268>)
 801300a:	2200      	movs	r2, #0
 801300c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 801300e:	4b14      	ldr	r3, [pc, #80]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8013010:	0018      	movs	r0, r3
 8013012:	f001 fa99 	bl	8014548 <HAL_DMA_Init>
 8013016:	1e03      	subs	r3, r0, #0
 8013018:	d001      	beq.n	801301e <HAL_UART_MspInit+0x226>
      Error_Handler();
 801301a:	f7f9 fc19 	bl	800c850 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4a0f      	ldr	r2, [pc, #60]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8013022:	671a      	str	r2, [r3, #112]	@ 0x70
 8013024:	4b0e      	ldr	r3, [pc, #56]	@ (8013060 <HAL_UART_MspInit+0x268>)
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 801302a:	2200      	movs	r2, #0
 801302c:	2100      	movs	r1, #0
 801302e:	200e      	movs	r0, #14
 8013030:	f001 fa54 	bl	80144dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013034:	200e      	movs	r0, #14
 8013036:	f001 fa66 	bl	8014506 <HAL_NVIC_EnableIRQ>
}
 801303a:	46c0      	nop			@ (mov r8, r8)
 801303c:	46bd      	mov	sp, r7
 801303e:	b00d      	add	sp, #52	@ 0x34
 8013040:	bd90      	pop	{r4, r7, pc}
 8013042:	46c0      	nop			@ (mov r8, r8)
 8013044:	40004800 	.word	0x40004800
 8013048:	40021000 	.word	0x40021000
 801304c:	50000800 	.word	0x50000800
 8013050:	40013800 	.word	0x40013800
 8013054:	40004c00 	.word	0x40004c00
 8013058:	20002168 	.word	0x20002168
 801305c:	4002006c 	.word	0x4002006c
 8013060:	200021b0 	.word	0x200021b0
 8013064:	40020080 	.word	0x40020080

08013068 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013070:	f000 fd90 	bl	8013b94 <HAL_GetTick>
 8013074:	0003      	movs	r3, r0
 8013076:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013078:	4b1c      	ldr	r3, [pc, #112]	@ (80130ec <TimestampIsReached+0x84>)
 801307a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 801307c:	697a      	ldr	r2, [r7, #20]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	429a      	cmp	r2, r3
 8013082:	d307      	bcc.n	8013094 <TimestampIsReached+0x2c>
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	1ad3      	subs	r3, r2, r3
 801308a:	693a      	ldr	r2, [r7, #16]
 801308c:	429a      	cmp	r2, r3
 801308e:	d901      	bls.n	8013094 <TimestampIsReached+0x2c>
 8013090:	2201      	movs	r2, #1
 8013092:	e000      	b.n	8013096 <TimestampIsReached+0x2e>
 8013094:	2200      	movs	r2, #0
 8013096:	230f      	movs	r3, #15
 8013098:	18fb      	adds	r3, r7, r3
 801309a:	701a      	strb	r2, [r3, #0]
 801309c:	781a      	ldrb	r2, [r3, #0]
 801309e:	2101      	movs	r1, #1
 80130a0:	400a      	ands	r2, r1
 80130a2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80130a4:	697a      	ldr	r2, [r7, #20]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d207      	bcs.n	80130bc <TimestampIsReached+0x54>
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	1ad3      	subs	r3, r2, r3
 80130b2:	693a      	ldr	r2, [r7, #16]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d201      	bcs.n	80130bc <TimestampIsReached+0x54>
 80130b8:	2201      	movs	r2, #1
 80130ba:	e000      	b.n	80130be <TimestampIsReached+0x56>
 80130bc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 80130be:	200e      	movs	r0, #14
 80130c0:	183b      	adds	r3, r7, r0
 80130c2:	701a      	strb	r2, [r3, #0]
 80130c4:	781a      	ldrb	r2, [r3, #0]
 80130c6:	2101      	movs	r1, #1
 80130c8:	400a      	ands	r2, r1
 80130ca:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80130cc:	230f      	movs	r3, #15
 80130ce:	18fb      	adds	r3, r7, r3
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d103      	bne.n	80130de <TimestampIsReached+0x76>
 80130d6:	183b      	adds	r3, r7, r0
 80130d8:	781b      	ldrb	r3, [r3, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d001      	beq.n	80130e2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80130de:	2301      	movs	r3, #1
 80130e0:	e000      	b.n	80130e4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80130e2:	2300      	movs	r3, #0
}
 80130e4:	0018      	movs	r0, r3
 80130e6:	46bd      	mov	sp, r7
 80130e8:	b006      	add	sp, #24
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	7fffffff 	.word	0x7fffffff

080130f0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b082      	sub	sp, #8
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80130f8:	f000 fd4c 	bl	8013b94 <HAL_GetTick>
 80130fc:	0002      	movs	r2, r0
 80130fe:	4904      	ldr	r1, [pc, #16]	@ (8013110 <AddTimestamp+0x20>)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	0018      	movs	r0, r3
 8013104:	f012 f972 	bl	80253ec <siprintf>
}
 8013108:	46c0      	nop			@ (mov r8, r8)
 801310a:	46bd      	mov	sp, r7
 801310c:	b002      	add	sp, #8
 801310e:	bd80      	pop	{r7, pc}
 8013110:	0802d360 	.word	0x0802d360

08013114 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8013114:	b40c      	push	{r2, r3}
 8013116:	b5b0      	push	{r4, r5, r7, lr}
 8013118:	b0a4      	sub	sp, #144	@ 0x90
 801311a:	af00      	add	r7, sp, #0
 801311c:	0002      	movs	r2, r0
 801311e:	6039      	str	r1, [r7, #0]
 8013120:	1dfb      	adds	r3, r7, #7
 8013122:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8013124:	4b23      	ldr	r3, [pc, #140]	@ (80131b4 <CreateLine+0xa0>)
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	1dfa      	adds	r2, r7, #7
 801312a:	7812      	ldrb	r2, [r2, #0]
 801312c:	429a      	cmp	r2, r3
 801312e:	d839      	bhi.n	80131a4 <CreateLine+0x90>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8013130:	683a      	ldr	r2, [r7, #0]
 8013132:	4921      	ldr	r1, [pc, #132]	@ (80131b8 <CreateLine+0xa4>)
 8013134:	240c      	movs	r4, #12
 8013136:	193b      	adds	r3, r7, r4
 8013138:	0018      	movs	r0, r3
 801313a:	f012 f957 	bl	80253ec <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 801313e:	4b1d      	ldr	r3, [pc, #116]	@ (80131b4 <CreateLine+0xa0>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	2b01      	cmp	r3, #1
 8013144:	d909      	bls.n	801315a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8013146:	193b      	adds	r3, r7, r4
 8013148:	0018      	movs	r0, r3
 801314a:	f7ed f80f 	bl	800016c <strlen>
 801314e:	0002      	movs	r2, r0
 8013150:	193b      	adds	r3, r7, r4
 8013152:	189b      	adds	r3, r3, r2
 8013154:	0018      	movs	r0, r3
 8013156:	f7ff ffcb 	bl	80130f0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 801315a:	240c      	movs	r4, #12
 801315c:	193b      	adds	r3, r7, r4
 801315e:	0018      	movs	r0, r3
 8013160:	f7ed f804 	bl	800016c <strlen>
 8013164:	0003      	movs	r3, r0
 8013166:	218c      	movs	r1, #140	@ 0x8c
 8013168:	187a      	adds	r2, r7, r1
 801316a:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 801316c:	239c      	movs	r3, #156	@ 0x9c
 801316e:	2508      	movs	r5, #8
 8013170:	195b      	adds	r3, r3, r5
 8013172:	19db      	adds	r3, r3, r7
 8013174:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8013176:	193a      	adds	r2, r7, r4
 8013178:	187b      	adds	r3, r7, r1
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	18d0      	adds	r0, r2, r3
 801317e:	187b      	adds	r3, r7, r1
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2280      	movs	r2, #128	@ 0x80
 8013184:	1ad3      	subs	r3, r2, r3
 8013186:	0019      	movs	r1, r3
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2298      	movs	r2, #152	@ 0x98
 801318c:	1952      	adds	r2, r2, r5
 801318e:	19d2      	adds	r2, r2, r7
 8013190:	6812      	ldr	r2, [r2, #0]
 8013192:	f012 f9c7 	bl	8025524 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8013196:	193a      	adds	r2, r7, r4
 8013198:	4b08      	ldr	r3, [pc, #32]	@ (80131bc <CreateLine+0xa8>)
 801319a:	0011      	movs	r1, r2
 801319c:	0018      	movs	r0, r3
 801319e:	f012 f8b5 	bl	802530c <iprintf>
 80131a2:	e000      	b.n	80131a6 <CreateLine+0x92>
    return;
 80131a4:	46c0      	nop			@ (mov r8, r8)
}
 80131a6:	46bd      	mov	sp, r7
 80131a8:	b024      	add	sp, #144	@ 0x90
 80131aa:	bcb0      	pop	{r4, r5, r7}
 80131ac:	bc08      	pop	{r3}
 80131ae:	b002      	add	sp, #8
 80131b0:	4718      	bx	r3
 80131b2:	46c0      	nop			@ (mov r8, r8)
 80131b4:	200000e4 	.word	0x200000e4
 80131b8:	0802d36c 	.word	0x0802d36c
 80131bc:	0802d370 	.word	0x0802d370

080131c0 <_write>:

int _write(int fd, void *buf, size_t count) {
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	60f8      	str	r0, [r7, #12]
 80131c8:	60b9      	str	r1, [r7, #8]
 80131ca:	607a      	str	r2, [r7, #4]
//  int _write(int fd, const void *buf, size_t count) {  // conflict with usb logging during test
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	68b9      	ldr	r1, [r7, #8]
 80131d2:	4804      	ldr	r0, [pc, #16]	@ (80131e4 <_write+0x24>)
 80131d4:	2364      	movs	r3, #100	@ 0x64
 80131d6:	f009 fa15 	bl	801c604 <HAL_UART_Transmit>
      usboutmsg[99] = '\0';
      count = vcp_send(usboutmsg, 100);
    }
  }
#endif
  return count;
 80131da:	687b      	ldr	r3, [r7, #4]
}
 80131dc:	0018      	movs	r0, r3
 80131de:	46bd      	mov	sp, r7
 80131e0:	b004      	add	sp, #16
 80131e2:	bd80      	pop	{r7, pc}
 80131e4:	20001ff8 	.word	0x20001ff8

080131e8 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	0002      	movs	r2, r0
 80131f0:	1dfb      	adds	r3, r7, #7
 80131f2:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 80131f4:	4b03      	ldr	r3, [pc, #12]	@ (8013204 <SetVerboseLevel+0x1c>)
 80131f6:	1dfa      	adds	r2, r7, #7
 80131f8:	7812      	ldrb	r2, [r2, #0]
 80131fa:	701a      	strb	r2, [r3, #0]
}
 80131fc:	46c0      	nop			@ (mov r8, r8)
 80131fe:	46bd      	mov	sp, r7
 8013200:	b002      	add	sp, #8
 8013202:	bd80      	pop	{r7, pc}
 8013204:	200000e4 	.word	0x200000e4

08013208 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8013208:	b580      	push	{r7, lr}
 801320a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 801320c:	4b02      	ldr	r3, [pc, #8]	@ (8013218 <GetVerboseLevel+0x10>)
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	0018      	movs	r0, r3
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	46c0      	nop			@ (mov r8, r8)
 8013218:	200000e4 	.word	0x200000e4

0801321c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8013222:	4a0f      	ldr	r2, [pc, #60]	@ (8013260 <BinaryReleaseInfo+0x44>)
 8013224:	4b0f      	ldr	r3, [pc, #60]	@ (8013264 <BinaryReleaseInfo+0x48>)
 8013226:	0019      	movs	r1, r3
 8013228:	2002      	movs	r0, #2
 801322a:	f7ff ff73 	bl	8013114 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 801322e:	480e      	ldr	r0, [pc, #56]	@ (8013268 <BinaryReleaseInfo+0x4c>)
 8013230:	4a0e      	ldr	r2, [pc, #56]	@ (801326c <BinaryReleaseInfo+0x50>)
 8013232:	490c      	ldr	r1, [pc, #48]	@ (8013264 <BinaryReleaseInfo+0x48>)
 8013234:	4b0e      	ldr	r3, [pc, #56]	@ (8013270 <BinaryReleaseInfo+0x54>)
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	0003      	movs	r3, r0
 801323a:	2002      	movs	r0, #2
 801323c:	f7ff ff6a 	bl	8013114 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 8013240:	4b0c      	ldr	r3, [pc, #48]	@ (8013274 <BinaryReleaseInfo+0x58>)
 8013242:	4a0d      	ldr	r2, [pc, #52]	@ (8013278 <BinaryReleaseInfo+0x5c>)
 8013244:	4907      	ldr	r1, [pc, #28]	@ (8013264 <BinaryReleaseInfo+0x48>)
 8013246:	2002      	movs	r0, #2
 8013248:	f7ff ff64 	bl	8013114 <CreateLine>
#ifdef DEBUG
  Info("Software version: %s, Debug build", SRC_VERSION);
 801324c:	4b0b      	ldr	r3, [pc, #44]	@ (801327c <BinaryReleaseInfo+0x60>)
 801324e:	4a0c      	ldr	r2, [pc, #48]	@ (8013280 <BinaryReleaseInfo+0x64>)
 8013250:	4904      	ldr	r1, [pc, #16]	@ (8013264 <BinaryReleaseInfo+0x48>)
 8013252:	2002      	movs	r0, #2
 8013254:	f7ff ff5e 	bl	8013114 <CreateLine>
#else
  Info("Software version: %s, Release build", SRC_VERSION);
#endif
}
 8013258:	46c0      	nop			@ (mov r8, r8)
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	46c0      	nop			@ (mov r8, r8)
 8013260:	0802d378 	.word	0x0802d378
 8013264:	0802d3a4 	.word	0x0802d3a4
 8013268:	0802d3a8 	.word	0x0802d3a8
 801326c:	0802d3b4 	.word	0x0802d3b4
 8013270:	0802d3c8 	.word	0x0802d3c8
 8013274:	0802d3d4 	.word	0x0802d3d4
 8013278:	0802d3e0 	.word	0x0802d3e0
 801327c:	0802d3e8 	.word	0x0802d3e8
 8013280:	0802d3f0 	.word	0x0802d3f0

08013284 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b084      	sub	sp, #16
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	68f9      	ldr	r1, [r7, #12]
 8013296:	4803      	ldr	r0, [pc, #12]	@ (80132a4 <errorHandler+0x20>)
 8013298:	f012 f838 	bl	802530c <iprintf>
//    while (true)
//    {
//    }
}
 801329c:	46c0      	nop			@ (mov r8, r8)
 801329e:	46bd      	mov	sp, r7
 80132a0:	b004      	add	sp, #16
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	0802d414 	.word	0x0802d414

080132a8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80132a8:	b590      	push	{r4, r7, lr}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6039      	str	r1, [r7, #0]
 80132b0:	0011      	movs	r1, r2
 80132b2:	1dfb      	adds	r3, r7, #7
 80132b4:	1c02      	adds	r2, r0, #0
 80132b6:	701a      	strb	r2, [r3, #0]
 80132b8:	1dbb      	adds	r3, r7, #6
 80132ba:	1c0a      	adds	r2, r1, #0
 80132bc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 80132be:	4b0a      	ldr	r3, [pc, #40]	@ (80132e8 <ReadRegister+0x40>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00a      	beq.n	80132dc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 80132c6:	4b08      	ldr	r3, [pc, #32]	@ (80132e8 <ReadRegister+0x40>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	1dba      	adds	r2, r7, #6
 80132cc:	7814      	ldrb	r4, [r2, #0]
 80132ce:	6839      	ldr	r1, [r7, #0]
 80132d0:	1dfa      	adds	r2, r7, #7
 80132d2:	7810      	ldrb	r0, [r2, #0]
 80132d4:	0022      	movs	r2, r4
 80132d6:	4798      	blx	r3
 80132d8:	0003      	movs	r3, r0
 80132da:	e000      	b.n	80132de <ReadRegister+0x36>
	}
	return false;
 80132dc:	2300      	movs	r3, #0
}
 80132de:	0018      	movs	r0, r3
 80132e0:	46bd      	mov	sp, r7
 80132e2:	b003      	add	sp, #12
 80132e4:	bd90      	pop	{r4, r7, pc}
 80132e6:	46c0      	nop			@ (mov r8, r8)
 80132e8:	20002200 	.word	0x20002200

080132ec <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80132ec:	b590      	push	{r4, r7, lr}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6039      	str	r1, [r7, #0]
 80132f4:	0011      	movs	r1, r2
 80132f6:	1dfb      	adds	r3, r7, #7
 80132f8:	1c02      	adds	r2, r0, #0
 80132fa:	701a      	strb	r2, [r3, #0]
 80132fc:	1dbb      	adds	r3, r7, #6
 80132fe:	1c0a      	adds	r2, r1, #0
 8013300:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8013302:	4b0a      	ldr	r3, [pc, #40]	@ (801332c <WriteRegister+0x40>)
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d00a      	beq.n	8013320 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 801330a:	4b08      	ldr	r3, [pc, #32]	@ (801332c <WriteRegister+0x40>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	1dba      	adds	r2, r7, #6
 8013310:	7814      	ldrb	r4, [r2, #0]
 8013312:	6839      	ldr	r1, [r7, #0]
 8013314:	1dfa      	adds	r2, r7, #7
 8013316:	7810      	ldrb	r0, [r2, #0]
 8013318:	0022      	movs	r2, r4
 801331a:	4798      	blx	r3
 801331c:	0003      	movs	r3, r0
 801331e:	e000      	b.n	8013322 <WriteRegister+0x36>
  }
  return false;
 8013320:	2300      	movs	r3, #0
}
 8013322:	0018      	movs	r0, r3
 8013324:	46bd      	mov	sp, r7
 8013326:	b003      	add	sp, #12
 8013328:	bd90      	pop	{r4, r7, pc}
 801332a:	46c0      	nop			@ (mov r8, r8)
 801332c:	20002204 	.word	0x20002204

08013330 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	000a      	movs	r2, r1
 801333a:	1cfb      	adds	r3, r7, #3
 801333c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 801333e:	230f      	movs	r3, #15
 8013340:	18fb      	adds	r3, r7, r3
 8013342:	22ff      	movs	r2, #255	@ 0xff
 8013344:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8013346:	230e      	movs	r3, #14
 8013348:	18fb      	adds	r3, r7, r3
 801334a:	2200      	movs	r2, #0
 801334c:	701a      	strb	r2, [r3, #0]
 801334e:	e038      	b.n	80133c2 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8013350:	230e      	movs	r3, #14
 8013352:	18fb      	adds	r3, r7, r3
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	18d3      	adds	r3, r2, r3
 801335a:	7819      	ldrb	r1, [r3, #0]
 801335c:	220f      	movs	r2, #15
 801335e:	18bb      	adds	r3, r7, r2
 8013360:	18ba      	adds	r2, r7, r2
 8013362:	7812      	ldrb	r2, [r2, #0]
 8013364:	404a      	eors	r2, r1
 8013366:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8013368:	230d      	movs	r3, #13
 801336a:	18fb      	adds	r3, r7, r3
 801336c:	2200      	movs	r2, #0
 801336e:	701a      	strb	r2, [r3, #0]
 8013370:	e01c      	b.n	80133ac <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8013372:	210f      	movs	r1, #15
 8013374:	187b      	adds	r3, r7, r1
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	b25b      	sxtb	r3, r3
 801337a:	2b00      	cmp	r3, #0
 801337c:	da0a      	bge.n	8013394 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801337e:	187b      	adds	r3, r7, r1
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	b25b      	sxtb	r3, r3
 8013384:	18db      	adds	r3, r3, r3
 8013386:	b25b      	sxtb	r3, r3
 8013388:	2231      	movs	r2, #49	@ 0x31
 801338a:	4053      	eors	r3, r2
 801338c:	b25a      	sxtb	r2, r3
 801338e:	187b      	adds	r3, r7, r1
 8013390:	701a      	strb	r2, [r3, #0]
 8013392:	e005      	b.n	80133a0 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8013394:	230f      	movs	r3, #15
 8013396:	18fa      	adds	r2, r7, r3
 8013398:	18fb      	adds	r3, r7, r3
 801339a:	781b      	ldrb	r3, [r3, #0]
 801339c:	18db      	adds	r3, r3, r3
 801339e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80133a0:	210d      	movs	r1, #13
 80133a2:	187b      	adds	r3, r7, r1
 80133a4:	781a      	ldrb	r2, [r3, #0]
 80133a6:	187b      	adds	r3, r7, r1
 80133a8:	3201      	adds	r2, #1
 80133aa:	701a      	strb	r2, [r3, #0]
 80133ac:	230d      	movs	r3, #13
 80133ae:	18fb      	adds	r3, r7, r3
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	2b07      	cmp	r3, #7
 80133b4:	d9dd      	bls.n	8013372 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80133b6:	210e      	movs	r1, #14
 80133b8:	187b      	adds	r3, r7, r1
 80133ba:	781a      	ldrb	r2, [r3, #0]
 80133bc:	187b      	adds	r3, r7, r1
 80133be:	3201      	adds	r2, #1
 80133c0:	701a      	strb	r2, [r3, #0]
 80133c2:	230e      	movs	r3, #14
 80133c4:	18fa      	adds	r2, r7, r3
 80133c6:	1cfb      	adds	r3, r7, #3
 80133c8:	7812      	ldrb	r2, [r2, #0]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d3bf      	bcc.n	8013350 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 80133d0:	230f      	movs	r3, #15
 80133d2:	18fb      	adds	r3, r7, r3
 80133d4:	781b      	ldrb	r3, [r3, #0]
}
 80133d6:	0018      	movs	r0, r3
 80133d8:	46bd      	mov	sp, r7
 80133da:	b004      	add	sp, #16
 80133dc:	bd80      	pop	{r7, pc}
	...

080133e0 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 80133e0:	b5b0      	push	{r4, r5, r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	6078      	str	r0, [r7, #4]
 80133e8:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	1c18      	adds	r0, r3, #0
 80133f0:	f7f0 fa50 	bl	8003894 <__aeabi_f2d>
 80133f4:	4a2e      	ldr	r2, [pc, #184]	@ (80134b0 <HIDS_DewPointCalculation+0xd0>)
 80133f6:	4b2f      	ldr	r3, [pc, #188]	@ (80134b4 <HIDS_DewPointCalculation+0xd4>)
 80133f8:	f7ef faac 	bl	8002954 <__aeabi_dmul>
 80133fc:	0002      	movs	r2, r0
 80133fe:	000b      	movs	r3, r1
 8013400:	0014      	movs	r4, r2
 8013402:	001d      	movs	r5, r3
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	1c18      	adds	r0, r3, #0
 801340a:	f7f0 fa43 	bl	8003894 <__aeabi_f2d>
 801340e:	4a2a      	ldr	r2, [pc, #168]	@ (80134b8 <HIDS_DewPointCalculation+0xd8>)
 8013410:	4b2a      	ldr	r3, [pc, #168]	@ (80134bc <HIDS_DewPointCalculation+0xdc>)
 8013412:	f7ee fa9f 	bl	8001954 <__aeabi_dadd>
 8013416:	0002      	movs	r2, r0
 8013418:	000b      	movs	r3, r1
 801341a:	0020      	movs	r0, r4
 801341c:	0029      	movs	r1, r5
 801341e:	f7ee fe5f 	bl	80020e0 <__aeabi_ddiv>
 8013422:	0002      	movs	r2, r0
 8013424:	000b      	movs	r3, r1
 8013426:	0014      	movs	r4, r2
 8013428:	001d      	movs	r5, r3
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	1c18      	adds	r0, r3, #0
 8013430:	f7f0 fa30 	bl	8003894 <__aeabi_f2d>
 8013434:	2200      	movs	r2, #0
 8013436:	4b22      	ldr	r3, [pc, #136]	@ (80134c0 <HIDS_DewPointCalculation+0xe0>)
 8013438:	f7ee fe52 	bl	80020e0 <__aeabi_ddiv>
 801343c:	0002      	movs	r2, r0
 801343e:	000b      	movs	r3, r1
 8013440:	0010      	movs	r0, r2
 8013442:	0019      	movs	r1, r3
 8013444:	f014 fecc 	bl	80281e0 <log>
 8013448:	0002      	movs	r2, r0
 801344a:	000b      	movs	r3, r1
 801344c:	0020      	movs	r0, r4
 801344e:	0029      	movs	r1, r5
 8013450:	f7ee fa80 	bl	8001954 <__aeabi_dadd>
 8013454:	0002      	movs	r2, r0
 8013456:	000b      	movs	r3, r1
 8013458:	0010      	movs	r0, r2
 801345a:	0019      	movs	r1, r3
 801345c:	f7f0 fa62 	bl	8003924 <__aeabi_d2f>
 8013460:	1c03      	adds	r3, r0, #0
 8013462:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f7f0 fa15 	bl	8003894 <__aeabi_f2d>
 801346a:	4a13      	ldr	r2, [pc, #76]	@ (80134b8 <HIDS_DewPointCalculation+0xd8>)
 801346c:	4b13      	ldr	r3, [pc, #76]	@ (80134bc <HIDS_DewPointCalculation+0xdc>)
 801346e:	f7ef fa71 	bl	8002954 <__aeabi_dmul>
 8013472:	0002      	movs	r2, r0
 8013474:	000b      	movs	r3, r1
 8013476:	0014      	movs	r4, r2
 8013478:	001d      	movs	r5, r3
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f7f0 fa0a 	bl	8003894 <__aeabi_f2d>
 8013480:	0002      	movs	r2, r0
 8013482:	000b      	movs	r3, r1
 8013484:	480a      	ldr	r0, [pc, #40]	@ (80134b0 <HIDS_DewPointCalculation+0xd0>)
 8013486:	490b      	ldr	r1, [pc, #44]	@ (80134b4 <HIDS_DewPointCalculation+0xd4>)
 8013488:	f7ef fd4a 	bl	8002f20 <__aeabi_dsub>
 801348c:	0002      	movs	r2, r0
 801348e:	000b      	movs	r3, r1
 8013490:	0020      	movs	r0, r4
 8013492:	0029      	movs	r1, r5
 8013494:	f7ee fe24 	bl	80020e0 <__aeabi_ddiv>
 8013498:	0002      	movs	r2, r0
 801349a:	000b      	movs	r3, r1
 801349c:	0010      	movs	r0, r2
 801349e:	0019      	movs	r1, r3
 80134a0:	f7f0 fa40 	bl	8003924 <__aeabi_d2f>
 80134a4:	1c03      	adds	r3, r0, #0
}
 80134a6:	1c18      	adds	r0, r3, #0
 80134a8:	46bd      	mov	sp, r7
 80134aa:	b004      	add	sp, #16
 80134ac:	bdb0      	pop	{r4, r5, r7, pc}
 80134ae:	46c0      	nop			@ (mov r8, r8)
 80134b0:	b851eb85 	.word	0xb851eb85
 80134b4:	4031451e 	.word	0x4031451e
 80134b8:	66666666 	.word	0x66666666
 80134bc:	406db666 	.word	0x406db666
 80134c0:	40590000 	.word	0x40590000

080134c4 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b082      	sub	sp, #8
 80134c8:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 80134ca:	4b0d      	ldr	r3, [pc, #52]	@ (8013500 <HIDS_EnableHeater+0x3c>)
 80134cc:	781a      	ldrb	r2, [r3, #0]
 80134ce:	1dfb      	adds	r3, r7, #7
 80134d0:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 80134d2:	1dfb      	adds	r3, r7, #7
 80134d4:	2201      	movs	r2, #1
 80134d6:	0019      	movs	r1, r3
 80134d8:	2044      	movs	r0, #68	@ 0x44
 80134da:	f7ff ff07 	bl	80132ec <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 80134de:	1dfb      	adds	r3, r7, #7
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	4a08      	ldr	r2, [pc, #32]	@ (8013504 <HIDS_EnableHeater+0x40>)
 80134e4:	4908      	ldr	r1, [pc, #32]	@ (8013508 <HIDS_EnableHeater+0x44>)
 80134e6:	2002      	movs	r0, #2
 80134e8:	f7ff fe14 	bl	8013114 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 80134ec:	f7f6 fa02 	bl	80098f4 <getPosixTime>
 80134f0:	0002      	movs	r2, r0
 80134f2:	4b06      	ldr	r3, [pc, #24]	@ (801350c <HIDS_EnableHeater+0x48>)
 80134f4:	601a      	str	r2, [r3, #0]
}
 80134f6:	46c0      	nop			@ (mov r8, r8)
 80134f8:	46bd      	mov	sp, r7
 80134fa:	b002      	add	sp, #8
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	46c0      	nop			@ (mov r8, r8)
 8013500:	200000e5 	.word	0x200000e5
 8013504:	0802d43c 	.word	0x0802d43c
 8013508:	0802d45c 	.word	0x0802d45c
 801350c:	20002218 	.word	0x20002218

08013510 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8013510:	b580      	push	{r7, lr}
 8013512:	b082      	sub	sp, #8
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 801351a:	4b0a      	ldr	r3, [pc, #40]	@ (8013544 <HIDS_Init+0x34>)
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8013520:	4b09      	ldr	r3, [pc, #36]	@ (8013548 <HIDS_Init+0x38>)
 8013522:	683a      	ldr	r2, [r7, #0]
 8013524:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8013526:	4b09      	ldr	r3, [pc, #36]	@ (801354c <HIDS_Init+0x3c>)
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	0018      	movs	r0, r3
 801352c:	f000 f840 	bl	80135b0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8013530:	4b07      	ldr	r3, [pc, #28]	@ (8013550 <HIDS_Init+0x40>)
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	0018      	movs	r0, r3
 8013536:	f000 f82b 	bl	8013590 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 801353a:	46c0      	nop			@ (mov r8, r8)
 801353c:	46bd      	mov	sp, r7
 801353e:	b002      	add	sp, #8
 8013540:	bd80      	pop	{r7, pc}
 8013542:	46c0      	nop			@ (mov r8, r8)
 8013544:	20002200 	.word	0x20002200
 8013548:	20002204 	.word	0x20002204
 801354c:	200000e6 	.word	0x200000e6
 8013550:	200000e5 	.word	0x200000e5

08013554 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8013554:	b580      	push	{r7, lr}
 8013556:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8013558:	f000 fb1c 	bl	8013b94 <HAL_GetTick>
 801355c:	0002      	movs	r2, r0
 801355e:	4b08      	ldr	r3, [pc, #32]	@ (8013580 <HIDS_StartMeasurement+0x2c>)
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	18d2      	adds	r2, r2, r3
 8013564:	4b07      	ldr	r3, [pc, #28]	@ (8013584 <HIDS_StartMeasurement+0x30>)
 8013566:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8013568:	4b07      	ldr	r3, [pc, #28]	@ (8013588 <HIDS_StartMeasurement+0x34>)
 801356a:	2201      	movs	r2, #1
 801356c:	0019      	movs	r1, r3
 801356e:	2044      	movs	r0, #68	@ 0x44
 8013570:	f7ff febc 	bl	80132ec <WriteRegister>
  MeasurementDone = false;
 8013574:	4b05      	ldr	r3, [pc, #20]	@ (801358c <HIDS_StartMeasurement+0x38>)
 8013576:	2200      	movs	r2, #0
 8013578:	701a      	strb	r2, [r3, #0]
}
 801357a:	46c0      	nop			@ (mov r8, r8)
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}
 8013580:	200000ec 	.word	0x200000ec
 8013584:	200000e8 	.word	0x200000e8
 8013588:	200000e6 	.word	0x200000e6
 801358c:	2000221c 	.word	0x2000221c

08013590 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8013590:	b580      	push	{r7, lr}
 8013592:	b082      	sub	sp, #8
 8013594:	af00      	add	r7, sp, #0
 8013596:	0002      	movs	r2, r0
 8013598:	1dfb      	adds	r3, r7, #7
 801359a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801359c:	4b03      	ldr	r3, [pc, #12]	@ (80135ac <HIDS_SetHeaterMode+0x1c>)
 801359e:	1dfa      	adds	r2, r7, #7
 80135a0:	7812      	ldrb	r2, [r2, #0]
 80135a2:	701a      	strb	r2, [r3, #0]
}
 80135a4:	46c0      	nop			@ (mov r8, r8)
 80135a6:	46bd      	mov	sp, r7
 80135a8:	b002      	add	sp, #8
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	200000e5 	.word	0x200000e5

080135b0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	0002      	movs	r2, r0
 80135b8:	1dfb      	adds	r3, r7, #7
 80135ba:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 80135bc:	4b03      	ldr	r3, [pc, #12]	@ (80135cc <HIDS_SetMeasurementMode+0x1c>)
 80135be:	1dfa      	adds	r2, r7, #7
 80135c0:	7812      	ldrb	r2, [r2, #0]
 80135c2:	701a      	strb	r2, [r3, #0]
}
 80135c4:	46c0      	nop			@ (mov r8, r8)
 80135c6:	46bd      	mov	sp, r7
 80135c8:	b002      	add	sp, #8
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	200000e6 	.word	0x200000e6

080135d0 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b082      	sub	sp, #8
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 80135d8:	f000 fadc 	bl	8013b94 <HAL_GetTick>
 80135dc:	0002      	movs	r2, r0
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	18d2      	adds	r2, r2, r3
 80135e2:	4b03      	ldr	r3, [pc, #12]	@ (80135f0 <setHIDSTimeStamp+0x20>)
 80135e4:	601a      	str	r2, [r3, #0]
}
 80135e6:	46c0      	nop			@ (mov r8, r8)
 80135e8:	46bd      	mov	sp, r7
 80135ea:	b002      	add	sp, #8
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	46c0      	nop			@ (mov r8, r8)
 80135f0:	20002220 	.word	0x20002220

080135f4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80135f4:	b590      	push	{r4, r7, lr}
 80135f6:	b085      	sub	sp, #20
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	781a      	ldrb	r2, [r3, #0]
 8013600:	210c      	movs	r1, #12
 8013602:	187b      	adds	r3, r7, r1
 8013604:	701a      	strb	r2, [r3, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	785a      	ldrb	r2, [r3, #1]
 801360a:	187b      	adds	r3, r7, r1
 801360c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 801360e:	240f      	movs	r4, #15
 8013610:	193b      	adds	r3, r7, r4
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	7892      	ldrb	r2, [r2, #2]
 8013616:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8013618:	187b      	adds	r3, r7, r1
 801361a:	2102      	movs	r1, #2
 801361c:	0018      	movs	r0, r3
 801361e:	f7ff fe87 	bl	8013330 <CalculateCRC>
 8013622:	0003      	movs	r3, r0
 8013624:	001a      	movs	r2, r3
 8013626:	193b      	adds	r3, r7, r4
 8013628:	781b      	ldrb	r3, [r3, #0]
 801362a:	4293      	cmp	r3, r2
 801362c:	d007      	beq.n	801363e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 801362e:	4a1a      	ldr	r2, [pc, #104]	@ (8013698 <CheckCRC+0xa4>)
 8013630:	4b1a      	ldr	r3, [pc, #104]	@ (801369c <CheckCRC+0xa8>)
 8013632:	0019      	movs	r1, r3
 8013634:	2001      	movs	r0, #1
 8013636:	f7ff fd6d 	bl	8013114 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 801363a:	2300      	movs	r3, #0
 801363c:	e027      	b.n	801368e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	78da      	ldrb	r2, [r3, #3]
 8013642:	2108      	movs	r1, #8
 8013644:	187b      	adds	r3, r7, r1
 8013646:	701a      	strb	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	791a      	ldrb	r2, [r3, #4]
 801364c:	187b      	adds	r3, r7, r1
 801364e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8013650:	240e      	movs	r4, #14
 8013652:	193b      	adds	r3, r7, r4
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	7952      	ldrb	r2, [r2, #5]
 8013658:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801365a:	187b      	adds	r3, r7, r1
 801365c:	2102      	movs	r1, #2
 801365e:	0018      	movs	r0, r3
 8013660:	f7ff fe66 	bl	8013330 <CalculateCRC>
 8013664:	0003      	movs	r3, r0
 8013666:	001a      	movs	r2, r3
 8013668:	193b      	adds	r3, r7, r4
 801366a:	781b      	ldrb	r3, [r3, #0]
 801366c:	4293      	cmp	r3, r2
 801366e:	d00d      	beq.n	801368c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8013670:	4a0b      	ldr	r2, [pc, #44]	@ (80136a0 <CheckCRC+0xac>)
 8013672:	4b0a      	ldr	r3, [pc, #40]	@ (801369c <CheckCRC+0xa8>)
 8013674:	0019      	movs	r1, r3
 8013676:	2001      	movs	r0, #1
 8013678:	f7ff fd4c 	bl	8013114 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 801367c:	4a09      	ldr	r2, [pc, #36]	@ (80136a4 <CheckCRC+0xb0>)
 801367e:	4b0a      	ldr	r3, [pc, #40]	@ (80136a8 <CheckCRC+0xb4>)
 8013680:	2185      	movs	r1, #133	@ 0x85
 8013682:	0018      	movs	r0, r3
 8013684:	f7ff fdfe 	bl	8013284 <errorHandler>
		return false;
 8013688:	2300      	movs	r3, #0
 801368a:	e000      	b.n	801368e <CheckCRC+0x9a>
	}
	return true;
 801368c:	2301      	movs	r3, #1
}
 801368e:	0018      	movs	r0, r3
 8013690:	46bd      	mov	sp, r7
 8013692:	b005      	add	sp, #20
 8013694:	bd90      	pop	{r4, r7, pc}
 8013696:	46c0      	nop			@ (mov r8, r8)
 8013698:	0802d460 	.word	0x0802d460
 801369c:	0802d488 	.word	0x0802d488
 80136a0:	0802d48c 	.word	0x0802d48c
 80136a4:	0802d4b8 	.word	0x0802d4b8
 80136a8:	0802db54 	.word	0x0802db54

080136ac <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80136b2:	1dbb      	adds	r3, r7, #6
 80136b4:	2289      	movs	r2, #137	@ 0x89
 80136b6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80136b8:	1dbb      	adds	r3, r7, #6
 80136ba:	2201      	movs	r2, #1
 80136bc:	0019      	movs	r1, r3
 80136be:	2044      	movs	r0, #68	@ 0x44
 80136c0:	f7ff fe14 	bl	80132ec <WriteRegister>
	HAL_Delay(30);
 80136c4:	201e      	movs	r0, #30
 80136c6:	f000 fa6f 	bl	8013ba8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80136ca:	4b14      	ldr	r3, [pc, #80]	@ (801371c <HIDS_DeviceConnected+0x70>)
 80136cc:	2206      	movs	r2, #6
 80136ce:	0019      	movs	r1, r3
 80136d0:	2044      	movs	r0, #68	@ 0x44
 80136d2:	f7ff fde9 	bl	80132a8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80136d6:	1dfb      	adds	r3, r7, #7
 80136d8:	2200      	movs	r2, #0
 80136da:	701a      	strb	r2, [r3, #0]
 80136dc:	e011      	b.n	8013702 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80136de:	1dfb      	adds	r3, r7, #7
 80136e0:	7818      	ldrb	r0, [r3, #0]
 80136e2:	1dfb      	adds	r3, r7, #7
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	4a0d      	ldr	r2, [pc, #52]	@ (801371c <HIDS_DeviceConnected+0x70>)
 80136e8:	5cd3      	ldrb	r3, [r2, r3]
 80136ea:	4a0d      	ldr	r2, [pc, #52]	@ (8013720 <HIDS_DeviceConnected+0x74>)
 80136ec:	490d      	ldr	r1, [pc, #52]	@ (8013724 <HIDS_DeviceConnected+0x78>)
 80136ee:	9300      	str	r3, [sp, #0]
 80136f0:	0003      	movs	r3, r0
 80136f2:	2002      	movs	r0, #2
 80136f4:	f7ff fd0e 	bl	8013114 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80136f8:	1dfb      	adds	r3, r7, #7
 80136fa:	781a      	ldrb	r2, [r3, #0]
 80136fc:	1dfb      	adds	r3, r7, #7
 80136fe:	3201      	adds	r2, #1
 8013700:	701a      	strb	r2, [r3, #0]
 8013702:	1dfb      	adds	r3, r7, #7
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	2b05      	cmp	r3, #5
 8013708:	d9e9      	bls.n	80136de <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 801370a:	4b04      	ldr	r3, [pc, #16]	@ (801371c <HIDS_DeviceConnected+0x70>)
 801370c:	0018      	movs	r0, r3
 801370e:	f7ff ff71 	bl	80135f4 <CheckCRC>
 8013712:	0003      	movs	r3, r0
}
 8013714:	0018      	movs	r0, r3
 8013716:	46bd      	mov	sp, r7
 8013718:	b002      	add	sp, #8
 801371a:	bd80      	pop	{r7, pc}
 801371c:	20002208 	.word	0x20002208
 8013720:	0802d4d0 	.word	0x0802d4d0
 8013724:	0802d45c 	.word	0x0802d45c

08013728 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8013728:	b580      	push	{r7, lr}
 801372a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 801372c:	4b04      	ldr	r3, [pc, #16]	@ (8013740 <HIDS_MeasurementReady+0x18>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	0018      	movs	r0, r3
 8013732:	f7ff fc99 	bl	8013068 <TimestampIsReached>
 8013736:	0003      	movs	r3, r0
}
 8013738:	0018      	movs	r0, r3
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}
 801373e:	46c0      	nop			@ (mov r8, r8)
 8013740:	200000e8 	.word	0x200000e8

08013744 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8013744:	b580      	push	{r7, lr}
 8013746:	b084      	sub	sp, #16
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 801374e:	4b41      	ldr	r3, [pc, #260]	@ (8013854 <HIDS_GetMeasurementValues+0x110>)
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <HIDS_GetMeasurementValues+0x16>
 8013756:	2301      	movs	r3, #1
 8013758:	e077      	b.n	801384a <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801375a:	f7ff ffe5 	bl	8013728 <HIDS_MeasurementReady>
 801375e:	0003      	movs	r3, r0
 8013760:	001a      	movs	r2, r3
 8013762:	2301      	movs	r3, #1
 8013764:	4053      	eors	r3, r2
 8013766:	b2db      	uxtb	r3, r3
 8013768:	2b00      	cmp	r3, #0
 801376a:	d001      	beq.n	8013770 <HIDS_GetMeasurementValues+0x2c>
 801376c:	2300      	movs	r3, #0
 801376e:	e06c      	b.n	801384a <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8013770:	4b39      	ldr	r3, [pc, #228]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 8013772:	2206      	movs	r2, #6
 8013774:	0019      	movs	r1, r3
 8013776:	2044      	movs	r0, #68	@ 0x44
 8013778:	f7ff fd96 	bl	80132a8 <ReadRegister>
 801377c:	0003      	movs	r3, r0
 801377e:	001a      	movs	r2, r3
 8013780:	2301      	movs	r3, #1
 8013782:	4053      	eors	r3, r2
 8013784:	b2db      	uxtb	r3, r3
 8013786:	2b00      	cmp	r3, #0
 8013788:	d005      	beq.n	8013796 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801378a:	4a34      	ldr	r2, [pc, #208]	@ (801385c <HIDS_GetMeasurementValues+0x118>)
 801378c:	4b34      	ldr	r3, [pc, #208]	@ (8013860 <HIDS_GetMeasurementValues+0x11c>)
 801378e:	0019      	movs	r1, r3
 8013790:	2001      	movs	r0, #1
 8013792:	f7ff fcbf 	bl	8013114 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8013796:	4b30      	ldr	r3, [pc, #192]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 8013798:	0018      	movs	r0, r3
 801379a:	f7ff ff2b 	bl	80135f4 <CheckCRC>
 801379e:	0003      	movs	r3, r0
 80137a0:	001a      	movs	r2, r3
 80137a2:	2301      	movs	r3, #1
 80137a4:	4053      	eors	r3, r2
 80137a6:	b2db      	uxtb	r3, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d001      	beq.n	80137b0 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 80137ac:	2300      	movs	r3, #0
 80137ae:	e04c      	b.n	801384a <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 80137b0:	4b29      	ldr	r3, [pc, #164]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	021b      	lsls	r3, r3, #8
 80137b6:	4a28      	ldr	r2, [pc, #160]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 80137b8:	7852      	ldrb	r2, [r2, #1]
 80137ba:	4313      	orrs	r3, r2
 80137bc:	22af      	movs	r2, #175	@ 0xaf
 80137be:	4353      	muls	r3, r2
 80137c0:	0018      	movs	r0, r3
 80137c2:	f7f0 f815 	bl	80037f0 <__aeabi_i2d>
 80137c6:	2200      	movs	r2, #0
 80137c8:	4b26      	ldr	r3, [pc, #152]	@ (8013864 <HIDS_GetMeasurementValues+0x120>)
 80137ca:	f7ee fc89 	bl	80020e0 <__aeabi_ddiv>
 80137ce:	0002      	movs	r2, r0
 80137d0:	000b      	movs	r3, r1
 80137d2:	0010      	movs	r0, r2
 80137d4:	0019      	movs	r1, r3
 80137d6:	f7f0 f8a5 	bl	8003924 <__aeabi_d2f>
 80137da:	1c03      	adds	r3, r0, #0
 80137dc:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 80137de:	4922      	ldr	r1, [pc, #136]	@ (8013868 <HIDS_GetMeasurementValues+0x124>)
 80137e0:	68f8      	ldr	r0, [r7, #12]
 80137e2:	f7ed fd87 	bl	80012f4 <__aeabi_fsub>
 80137e6:	1c03      	adds	r3, r0, #0
 80137e8:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80137ea:	4b1b      	ldr	r3, [pc, #108]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 80137ec:	78db      	ldrb	r3, [r3, #3]
 80137ee:	021b      	lsls	r3, r3, #8
 80137f0:	4a19      	ldr	r2, [pc, #100]	@ (8013858 <HIDS_GetMeasurementValues+0x114>)
 80137f2:	7912      	ldrb	r2, [r2, #4]
 80137f4:	431a      	orrs	r2, r3
 80137f6:	0013      	movs	r3, r2
 80137f8:	015b      	lsls	r3, r3, #5
 80137fa:	1a9b      	subs	r3, r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	189b      	adds	r3, r3, r2
 8013800:	0018      	movs	r0, r3
 8013802:	f7ef fff5 	bl	80037f0 <__aeabi_i2d>
 8013806:	2200      	movs	r2, #0
 8013808:	4b16      	ldr	r3, [pc, #88]	@ (8013864 <HIDS_GetMeasurementValues+0x120>)
 801380a:	f7ee fc69 	bl	80020e0 <__aeabi_ddiv>
 801380e:	0002      	movs	r2, r0
 8013810:	000b      	movs	r3, r1
 8013812:	0010      	movs	r0, r2
 8013814:	0019      	movs	r1, r3
 8013816:	f7f0 f885 	bl	8003924 <__aeabi_d2f>
 801381a:	1c03      	adds	r3, r0, #0
 801381c:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 801381e:	4913      	ldr	r1, [pc, #76]	@ (801386c <HIDS_GetMeasurementValues+0x128>)
 8013820:	68b8      	ldr	r0, [r7, #8]
 8013822:	f7ed fd67 	bl	80012f4 <__aeabi_fsub>
 8013826:	1c03      	adds	r3, r0, #0
 8013828:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	68ba      	ldr	r2, [r7, #8]
 8013834:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	0011      	movs	r1, r2
 801383c:	0018      	movs	r0, r3
 801383e:	f7fc ffe5 	bl	801080c <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 8013842:	4b04      	ldr	r3, [pc, #16]	@ (8013854 <HIDS_GetMeasurementValues+0x110>)
 8013844:	2201      	movs	r2, #1
 8013846:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 8013848:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 801384a:	0018      	movs	r0, r3
 801384c:	46bd      	mov	sp, r7
 801384e:	b004      	add	sp, #16
 8013850:	bd80      	pop	{r7, pc}
 8013852:	46c0      	nop			@ (mov r8, r8)
 8013854:	2000221c 	.word	0x2000221c
 8013858:	20002210 	.word	0x20002210
 801385c:	0802d4f0 	.word	0x0802d4f0
 8013860:	0802d488 	.word	0x0802d488
 8013864:	40efffe0 	.word	0x40efffe0
 8013868:	42340000 	.word	0x42340000
 801386c:	40c00000 	.word	0x40c00000

08013870 <ResetHIDSresults>:

void ResetHIDSresults() {
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
  humid = 0.0;
 8013874:	4b04      	ldr	r3, [pc, #16]	@ (8013888 <ResetHIDSresults+0x18>)
 8013876:	2200      	movs	r2, #0
 8013878:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801387a:	4b04      	ldr	r3, [pc, #16]	@ (801388c <ResetHIDSresults+0x1c>)
 801387c:	2200      	movs	r2, #0
 801387e:	601a      	str	r2, [r3, #0]
}
 8013880:	46c0      	nop			@ (mov r8, r8)
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	46c0      	nop			@ (mov r8, r8)
 8013888:	200021f8 	.word	0x200021f8
 801388c:	200021fc 	.word	0x200021fc

08013890 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8013890:	b5b0      	push	{r4, r5, r7, lr}
 8013892:	b084      	sub	sp, #16
 8013894:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8013896:	4b69      	ldr	r3, [pc, #420]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013898:	781b      	ldrb	r3, [r3, #0]
 801389a:	2b06      	cmp	r3, #6
 801389c:	d900      	bls.n	80138a0 <HIDS_Upkeep+0x10>
 801389e:	e0bd      	b.n	8013a1c <HIDS_Upkeep+0x18c>
 80138a0:	009a      	lsls	r2, r3, #2
 80138a2:	4b67      	ldr	r3, [pc, #412]	@ (8013a40 <HIDS_Upkeep+0x1b0>)
 80138a4:	18d3      	adds	r3, r2, r3
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 80138aa:	4a66      	ldr	r2, [pc, #408]	@ (8013a44 <HIDS_Upkeep+0x1b4>)
 80138ac:	4b66      	ldr	r3, [pc, #408]	@ (8013a48 <HIDS_Upkeep+0x1b8>)
 80138ae:	0019      	movs	r1, r3
 80138b0:	2003      	movs	r0, #3
 80138b2:	f7ff fc2f 	bl	8013114 <CreateLine>
      break;
 80138b6:	e0bc      	b.n	8013a32 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 80138b8:	f7ff ffda 	bl	8013870 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 80138bc:	4b5f      	ldr	r3, [pc, #380]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 80138be:	2201      	movs	r2, #1
 80138c0:	701a      	strb	r2, [r3, #0]
      break;
 80138c2:	e0b6      	b.n	8013a32 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 80138c4:	f7f9 fcb4 	bl	800d230 <getSensorLock>
 80138c8:	1e03      	subs	r3, r0, #0
 80138ca:	d000      	beq.n	80138ce <HIDS_Upkeep+0x3e>
 80138cc:	e0aa      	b.n	8013a24 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 80138ce:	2001      	movs	r0, #1
 80138d0:	f7f9 fc9a 	bl	800d208 <setSensorLock>
      SetMeasurementIndicator();
 80138d4:	f7fe f9ee 	bl	8011cb4 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 80138d8:	f7ff fe3c 	bl	8013554 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 80138dc:	200a      	movs	r0, #10
 80138de:	f000 f963 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 80138e2:	2000      	movs	r0, #0
 80138e4:	f7f9 fc90 	bl	800d208 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 80138e8:	4b54      	ldr	r3, [pc, #336]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 80138ea:	2202      	movs	r2, #2
 80138ec:	701a      	strb	r2, [r3, #0]
      break;
 80138ee:	e0a0      	b.n	8013a32 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 80138f0:	f7f9 fc9e 	bl	800d230 <getSensorLock>
 80138f4:	1e03      	subs	r3, r0, #0
 80138f6:	d000      	beq.n	80138fa <HIDS_Upkeep+0x6a>
 80138f8:	e096      	b.n	8013a28 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 80138fa:	2001      	movs	r0, #1
 80138fc:	f7f9 fc84 	bl	800d208 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 8013900:	4a52      	ldr	r2, [pc, #328]	@ (8013a4c <HIDS_Upkeep+0x1bc>)
 8013902:	4b53      	ldr	r3, [pc, #332]	@ (8013a50 <HIDS_Upkeep+0x1c0>)
 8013904:	0011      	movs	r1, r2
 8013906:	0018      	movs	r0, r3
 8013908:	f7ff ff1c 	bl	8013744 <HIDS_GetMeasurementValues>
 801390c:	1e03      	subs	r3, r0, #0
 801390e:	d002      	beq.n	8013916 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 8013910:	4b4a      	ldr	r3, [pc, #296]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013912:	2203      	movs	r2, #3
 8013914:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8013916:	200a      	movs	r0, #10
 8013918:	f000 f946 	bl	8013ba8 <HAL_Delay>
      setSensorLock(FREE);
 801391c:	2000      	movs	r0, #0
 801391e:	f7f9 fc73 	bl	800d208 <setSensorLock>
      break;
 8013922:	e086      	b.n	8013a32 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 8013924:	4b4a      	ldr	r3, [pc, #296]	@ (8013a50 <HIDS_Upkeep+0x1c0>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	1c18      	adds	r0, r3, #0
 801392a:	f7ef ffb3 	bl	8003894 <__aeabi_f2d>
 801392e:	0004      	movs	r4, r0
 8013930:	000d      	movs	r5, r1
 8013932:	4b46      	ldr	r3, [pc, #280]	@ (8013a4c <HIDS_Upkeep+0x1bc>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	1c18      	adds	r0, r3, #0
 8013938:	f7ef ffac 	bl	8003894 <__aeabi_f2d>
 801393c:	0002      	movs	r2, r0
 801393e:	000b      	movs	r3, r1
 8013940:	4844      	ldr	r0, [pc, #272]	@ (8013a54 <HIDS_Upkeep+0x1c4>)
 8013942:	4941      	ldr	r1, [pc, #260]	@ (8013a48 <HIDS_Upkeep+0x1b8>)
 8013944:	9202      	str	r2, [sp, #8]
 8013946:	9303      	str	r3, [sp, #12]
 8013948:	9400      	str	r4, [sp, #0]
 801394a:	9501      	str	r5, [sp, #4]
 801394c:	0002      	movs	r2, r0
 801394e:	2003      	movs	r0, #3
 8013950:	f7ff fbe0 	bl	8013114 <CreateLine>
      setHIDS(temp, humid);
 8013954:	4b3d      	ldr	r3, [pc, #244]	@ (8013a4c <HIDS_Upkeep+0x1bc>)
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	4b3d      	ldr	r3, [pc, #244]	@ (8013a50 <HIDS_Upkeep+0x1c0>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	1c19      	adds	r1, r3, #0
 801395e:	1c10      	adds	r0, r2, #0
 8013960:	f7f1 f86c 	bl	8004a3c <setHIDS>
      ResetMeasurementIndicator();
 8013964:	f7fe f9be 	bl	8011ce4 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8013968:	4b38      	ldr	r3, [pc, #224]	@ (8013a4c <HIDS_Upkeep+0x1bc>)
 801396a:	681c      	ldr	r4, [r3, #0]
 801396c:	4a37      	ldr	r2, [pc, #220]	@ (8013a4c <HIDS_Upkeep+0x1bc>)
 801396e:	4b38      	ldr	r3, [pc, #224]	@ (8013a50 <HIDS_Upkeep+0x1c0>)
 8013970:	0011      	movs	r1, r2
 8013972:	0018      	movs	r0, r3
 8013974:	f7ff fd34 	bl	80133e0 <HIDS_DewPointCalculation>
 8013978:	1c03      	adds	r3, r0, #0
 801397a:	1c19      	adds	r1, r3, #0
 801397c:	1c20      	adds	r0, r4, #0
 801397e:	f7ed fcb9 	bl	80012f4 <__aeabi_fsub>
 8013982:	1c03      	adds	r3, r0, #0
 8013984:	21fe      	movs	r1, #254	@ 0xfe
 8013986:	0589      	lsls	r1, r1, #22
 8013988:	1c18      	adds	r0, r3, #0
 801398a:	f7ec fdd1 	bl	8000530 <__aeabi_fcmplt>
 801398e:	1e03      	subs	r3, r0, #0
 8013990:	d023      	beq.n	80139da <HIDS_Upkeep+0x14a>
 8013992:	f7f5 ffaf 	bl	80098f4 <getPosixTime>
 8013996:	0002      	movs	r2, r0
 8013998:	4b2f      	ldr	r3, [pc, #188]	@ (8013a58 <HIDS_Upkeep+0x1c8>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	1ad2      	subs	r2, r2, r3
 801399e:	23e1      	movs	r3, #225	@ 0xe1
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d919      	bls.n	80139da <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 80139a6:	4a2d      	ldr	r2, [pc, #180]	@ (8013a5c <HIDS_Upkeep+0x1cc>)
 80139a8:	4b2d      	ldr	r3, [pc, #180]	@ (8013a60 <HIDS_Upkeep+0x1d0>)
 80139aa:	0019      	movs	r1, r3
 80139ac:	2002      	movs	r0, #2
 80139ae:	f7ff fbb1 	bl	8013114 <CreateLine>
        if (getSensorLock() != FREE) {
 80139b2:	f7f9 fc3d 	bl	800d230 <getSensorLock>
 80139b6:	1e03      	subs	r3, r0, #0
 80139b8:	d138      	bne.n	8013a2c <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 80139ba:	f7ff fd83 	bl	80134c4 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 80139be:	200a      	movs	r0, #10
 80139c0:	f000 f8f2 	bl	8013ba8 <HAL_Delay>
        setSensorLock(FREE);
 80139c4:	2000      	movs	r0, #0
 80139c6:	f7f9 fc1f 	bl	800d208 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 80139ca:	f000 f8e3 	bl	8013b94 <HAL_GetTick>
 80139ce:	0003      	movs	r3, r0
 80139d0:	4a24      	ldr	r2, [pc, #144]	@ (8013a64 <HIDS_Upkeep+0x1d4>)
 80139d2:	189a      	adds	r2, r3, r2
 80139d4:	4b24      	ldr	r3, [pc, #144]	@ (8013a68 <HIDS_Upkeep+0x1d8>)
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	e011      	b.n	80139fe <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 80139da:	f000 f8db 	bl	8013b94 <HAL_GetTick>
 80139de:	0004      	movs	r4, r0
 80139e0:	f7f5 fc8c 	bl	80092fc <Check_USB_PowerOn>
 80139e4:	1e03      	subs	r3, r0, #0
 80139e6:	d103      	bne.n	80139f0 <HIDS_Upkeep+0x160>
 80139e8:	4b20      	ldr	r3, [pc, #128]	@ (8013a6c <HIDS_Upkeep+0x1dc>)
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d001      	beq.n	80139f4 <HIDS_Upkeep+0x164>
 80139f0:	4b1f      	ldr	r3, [pc, #124]	@ (8013a70 <HIDS_Upkeep+0x1e0>)
 80139f2:	e001      	b.n	80139f8 <HIDS_Upkeep+0x168>
 80139f4:	23fa      	movs	r3, #250	@ 0xfa
 80139f6:	009b      	lsls	r3, r3, #2
 80139f8:	191a      	adds	r2, r3, r4
 80139fa:	4b1b      	ldr	r3, [pc, #108]	@ (8013a68 <HIDS_Upkeep+0x1d8>)
 80139fc:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 80139fe:	4b0f      	ldr	r3, [pc, #60]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013a00:	2206      	movs	r2, #6
 8013a02:	701a      	strb	r2, [r3, #0]
      break;
 8013a04:	e015      	b.n	8013a32 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 8013a06:	4b18      	ldr	r3, [pc, #96]	@ (8013a68 <HIDS_Upkeep+0x1d8>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	0018      	movs	r0, r3
 8013a0c:	f7ff fb2c 	bl	8013068 <TimestampIsReached>
 8013a10:	1e03      	subs	r3, r0, #0
 8013a12:	d00d      	beq.n	8013a30 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 8013a14:	4b09      	ldr	r3, [pc, #36]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013a16:	2200      	movs	r2, #0
 8013a18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013a1a:	e009      	b.n	8013a30 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 8013a1c:	4b07      	ldr	r3, [pc, #28]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	701a      	strb	r2, [r3, #0]
      break;
 8013a22:	e006      	b.n	8013a32 <HIDS_Upkeep+0x1a2>
        break;
 8013a24:	46c0      	nop			@ (mov r8, r8)
 8013a26:	e004      	b.n	8013a32 <HIDS_Upkeep+0x1a2>
        break;
 8013a28:	46c0      	nop			@ (mov r8, r8)
 8013a2a:	e002      	b.n	8013a32 <HIDS_Upkeep+0x1a2>
          break;
 8013a2c:	46c0      	nop			@ (mov r8, r8)
 8013a2e:	e000      	b.n	8013a32 <HIDS_Upkeep+0x1a2>
      break;
 8013a30:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 8013a32:	4b02      	ldr	r3, [pc, #8]	@ (8013a3c <HIDS_Upkeep+0x1ac>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
}
 8013a36:	0018      	movs	r0, r3
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a3c:	20002224 	.word	0x20002224
 8013a40:	0802db38 	.word	0x0802db38
 8013a44:	0802d524 	.word	0x0802d524
 8013a48:	0802d558 	.word	0x0802d558
 8013a4c:	200021fc 	.word	0x200021fc
 8013a50:	200021f8 	.word	0x200021f8
 8013a54:	0802d55c 	.word	0x0802d55c
 8013a58:	20002218 	.word	0x20002218
 8013a5c:	0802d590 	.word	0x0802d590
 8013a60:	0802d45c 	.word	0x0802d45c
 8013a64:	00002ee0 	.word	0x00002ee0
 8013a68:	20002220 	.word	0x20002220
 8013a6c:	20001e62 	.word	0x20001e62
 8013a70:	00002710 	.word	0x00002710

08013a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8013a74:	480d      	ldr	r0, [pc, #52]	@ (8013aac <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8013a76:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8013a78:	f7fe ff50 	bl	801291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013a7c:	480c      	ldr	r0, [pc, #48]	@ (8013ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8013a7e:	490d      	ldr	r1, [pc, #52]	@ (8013ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8013a80:	4a0d      	ldr	r2, [pc, #52]	@ (8013ab8 <LoopForever+0xe>)
  movs r3, #0
 8013a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013a84:	e002      	b.n	8013a8c <LoopCopyDataInit>

08013a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013a8a:	3304      	adds	r3, #4

08013a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013a90:	d3f9      	bcc.n	8013a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013a92:	4a0a      	ldr	r2, [pc, #40]	@ (8013abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8013a94:	4c0a      	ldr	r4, [pc, #40]	@ (8013ac0 <LoopForever+0x16>)
  movs r3, #0
 8013a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013a98:	e001      	b.n	8013a9e <LoopFillZerobss>

08013a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013a9c:	3204      	adds	r2, #4

08013a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013aa0:	d3fb      	bcc.n	8013a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8013aa2:	f011 feb7 	bl	8025814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013aa6:	f7f8 fb61 	bl	800c16c <main>

08013aaa <LoopForever>:

LoopForever:
    b LoopForever
 8013aaa:	e7fe      	b.n	8013aaa <LoopForever>
   ldr   r0, =_estack
 8013aac:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8013ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013ab4:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8013ab8:	0802e520 	.word	0x0802e520
  ldr r2, =_sbss
 8013abc:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8013ac0:	2000362c 	.word	0x2000362c

08013ac4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013ac4:	e7fe      	b.n	8013ac4 <ADC1_COMP_IRQHandler>
	...

08013ac8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8013ace:	1dfb      	adds	r3, r7, #7
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8013ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8013b04 <HAL_Init+0x3c>)
 8013ad6:	681a      	ldr	r2, [r3, #0]
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8013b04 <HAL_Init+0x3c>)
 8013ada:	2140      	movs	r1, #64	@ 0x40
 8013adc:	430a      	orrs	r2, r1
 8013ade:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013ae0:	2003      	movs	r0, #3
 8013ae2:	f000 f811 	bl	8013b08 <HAL_InitTick>
 8013ae6:	1e03      	subs	r3, r0, #0
 8013ae8:	d003      	beq.n	8013af2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8013aea:	1dfb      	adds	r3, r7, #7
 8013aec:	2201      	movs	r2, #1
 8013aee:	701a      	strb	r2, [r3, #0]
 8013af0:	e001      	b.n	8013af6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8013af2:	f7fe fdc7 	bl	8012684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8013af6:	1dfb      	adds	r3, r7, #7
 8013af8:	781b      	ldrb	r3, [r3, #0]
}
 8013afa:	0018      	movs	r0, r3
 8013afc:	46bd      	mov	sp, r7
 8013afe:	b002      	add	sp, #8
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	46c0      	nop			@ (mov r8, r8)
 8013b04:	40022000 	.word	0x40022000

08013b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8013b08:	b590      	push	{r4, r7, lr}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8013b10:	4b14      	ldr	r3, [pc, #80]	@ (8013b64 <HAL_InitTick+0x5c>)
 8013b12:	681c      	ldr	r4, [r3, #0]
 8013b14:	4b14      	ldr	r3, [pc, #80]	@ (8013b68 <HAL_InitTick+0x60>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	0019      	movs	r1, r3
 8013b1a:	23fa      	movs	r3, #250	@ 0xfa
 8013b1c:	0098      	lsls	r0, r3, #2
 8013b1e:	f7ec fb41 	bl	80001a4 <__udivsi3>
 8013b22:	0003      	movs	r3, r0
 8013b24:	0019      	movs	r1, r3
 8013b26:	0020      	movs	r0, r4
 8013b28:	f7ec fb3c 	bl	80001a4 <__udivsi3>
 8013b2c:	0003      	movs	r3, r0
 8013b2e:	0018      	movs	r0, r3
 8013b30:	f000 fcfd 	bl	801452e <HAL_SYSTICK_Config>
 8013b34:	1e03      	subs	r3, r0, #0
 8013b36:	d001      	beq.n	8013b3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e00f      	b.n	8013b5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2b03      	cmp	r3, #3
 8013b40:	d80b      	bhi.n	8013b5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8013b42:	6879      	ldr	r1, [r7, #4]
 8013b44:	2301      	movs	r3, #1
 8013b46:	425b      	negs	r3, r3
 8013b48:	2200      	movs	r2, #0
 8013b4a:	0018      	movs	r0, r3
 8013b4c:	f000 fcc6 	bl	80144dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8013b50:	4b06      	ldr	r3, [pc, #24]	@ (8013b6c <HAL_InitTick+0x64>)
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8013b56:	2300      	movs	r3, #0
 8013b58:	e000      	b.n	8013b5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8013b5a:	2301      	movs	r3, #1
}
 8013b5c:	0018      	movs	r0, r3
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	b003      	add	sp, #12
 8013b62:	bd90      	pop	{r4, r7, pc}
 8013b64:	200000e0 	.word	0x200000e0
 8013b68:	200000f4 	.word	0x200000f4
 8013b6c:	200000f0 	.word	0x200000f0

08013b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8013b74:	4b05      	ldr	r3, [pc, #20]	@ (8013b8c <HAL_IncTick+0x1c>)
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	001a      	movs	r2, r3
 8013b7a:	4b05      	ldr	r3, [pc, #20]	@ (8013b90 <HAL_IncTick+0x20>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	18d2      	adds	r2, r2, r3
 8013b80:	4b03      	ldr	r3, [pc, #12]	@ (8013b90 <HAL_IncTick+0x20>)
 8013b82:	601a      	str	r2, [r3, #0]
}
 8013b84:	46c0      	nop			@ (mov r8, r8)
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	46c0      	nop			@ (mov r8, r8)
 8013b8c:	200000f4 	.word	0x200000f4
 8013b90:	20002228 	.word	0x20002228

08013b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	af00      	add	r7, sp, #0
  return uwTick;
 8013b98:	4b02      	ldr	r3, [pc, #8]	@ (8013ba4 <HAL_GetTick+0x10>)
 8013b9a:	681b      	ldr	r3, [r3, #0]
}
 8013b9c:	0018      	movs	r0, r3
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	46c0      	nop			@ (mov r8, r8)
 8013ba4:	20002228 	.word	0x20002228

08013ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8013bb0:	f7ff fff0 	bl	8013b94 <HAL_GetTick>
 8013bb4:	0003      	movs	r3, r0
 8013bb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	d005      	beq.n	8013bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8013bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8013bec <HAL_Delay+0x44>)
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	001a      	movs	r2, r3
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	189b      	adds	r3, r3, r2
 8013bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8013bce:	46c0      	nop			@ (mov r8, r8)
 8013bd0:	f7ff ffe0 	bl	8013b94 <HAL_GetTick>
 8013bd4:	0002      	movs	r2, r0
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d8f7      	bhi.n	8013bd0 <HAL_Delay+0x28>
  {
  }
}
 8013be0:	46c0      	nop			@ (mov r8, r8)
 8013be2:	46c0      	nop			@ (mov r8, r8)
 8013be4:	46bd      	mov	sp, r7
 8013be6:	b004      	add	sp, #16
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	46c0      	nop			@ (mov r8, r8)
 8013bec:	200000f4 	.word	0x200000f4

08013bf0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8013bf4:	4b04      	ldr	r3, [pc, #16]	@ (8013c08 <HAL_SuspendTick+0x18>)
 8013bf6:	681a      	ldr	r2, [r3, #0]
 8013bf8:	4b03      	ldr	r3, [pc, #12]	@ (8013c08 <HAL_SuspendTick+0x18>)
 8013bfa:	2102      	movs	r1, #2
 8013bfc:	438a      	bics	r2, r1
 8013bfe:	601a      	str	r2, [r3, #0]
}
 8013c00:	46c0      	nop			@ (mov r8, r8)
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	46c0      	nop			@ (mov r8, r8)
 8013c08:	e000e010 	.word	0xe000e010

08013c0c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8013c10:	4b04      	ldr	r3, [pc, #16]	@ (8013c24 <HAL_ResumeTick+0x18>)
 8013c12:	681a      	ldr	r2, [r3, #0]
 8013c14:	4b03      	ldr	r3, [pc, #12]	@ (8013c24 <HAL_ResumeTick+0x18>)
 8013c16:	2102      	movs	r1, #2
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	601a      	str	r2, [r3, #0]
}
 8013c1c:	46c0      	nop			@ (mov r8, r8)
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	bd80      	pop	{r7, pc}
 8013c22:	46c0      	nop			@ (mov r8, r8)
 8013c24:	e000e010 	.word	0xe000e010

08013c28 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8013c2c:	4b02      	ldr	r3, [pc, #8]	@ (8013c38 <HAL_GetUIDw0+0x10>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
}
 8013c30:	0018      	movs	r0, r3
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	46c0      	nop			@ (mov r8, r8)
 8013c38:	1ff80050 	.word	0x1ff80050

08013c3c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8013c40:	4b02      	ldr	r3, [pc, #8]	@ (8013c4c <HAL_GetUIDw1+0x10>)
 8013c42:	681b      	ldr	r3, [r3, #0]
}
 8013c44:	0018      	movs	r0, r3
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	46c0      	nop			@ (mov r8, r8)
 8013c4c:	1ff80054 	.word	0x1ff80054

08013c50 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8013c54:	4b02      	ldr	r3, [pc, #8]	@ (8013c60 <HAL_GetUIDw2+0x10>)
 8013c56:	681b      	ldr	r3, [r3, #0]
}
 8013c58:	0018      	movs	r0, r3
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	46c0      	nop			@ (mov r8, r8)
 8013c60:	1ff80064 	.word	0x1ff80064

08013c64 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d101      	bne.n	8013c76 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8013c72:	2301      	movs	r3, #1
 8013c74:	e159      	b.n	8013f2a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d10a      	bne.n	8013c94 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2200      	movs	r2, #0
 8013c82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2250      	movs	r2, #80	@ 0x50
 8013c88:	2100      	movs	r1, #0
 8013c8a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	0018      	movs	r0, r3
 8013c90:	f7f6 f9e8 	bl	800a064 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013c98:	2210      	movs	r2, #16
 8013c9a:	4013      	ands	r3, r2
 8013c9c:	2b10      	cmp	r3, #16
 8013c9e:	d005      	beq.n	8013cac <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	2204      	movs	r2, #4
 8013ca8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8013caa:	d00b      	beq.n	8013cc4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cb0:	2210      	movs	r2, #16
 8013cb2:	431a      	orrs	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2250      	movs	r2, #80	@ 0x50
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	e132      	b.n	8013f2a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013cc8:	4a9a      	ldr	r2, [pc, #616]	@ (8013f34 <HAL_ADC_Init+0x2d0>)
 8013cca:	4013      	ands	r3, r2
 8013ccc:	2202      	movs	r2, #2
 8013cce:	431a      	orrs	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	2203      	movs	r2, #3
 8013cdc:	4013      	ands	r3, r2
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d108      	bne.n	8013cf4 <HAL_ADC_Init+0x90>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2201      	movs	r2, #1
 8013cea:	4013      	ands	r3, r2
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d101      	bne.n	8013cf4 <HAL_ADC_Init+0x90>
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e000      	b.n	8013cf6 <HAL_ADC_Init+0x92>
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d149      	bne.n	8013d8e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	685a      	ldr	r2, [r3, #4]
 8013cfe:	23c0      	movs	r3, #192	@ 0xc0
 8013d00:	061b      	lsls	r3, r3, #24
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d00b      	beq.n	8013d1e <HAL_ADC_Init+0xba>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	685a      	ldr	r2, [r3, #4]
 8013d0a:	2380      	movs	r3, #128	@ 0x80
 8013d0c:	05db      	lsls	r3, r3, #23
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d005      	beq.n	8013d1e <HAL_ADC_Init+0xba>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	685a      	ldr	r2, [r3, #4]
 8013d16:	2380      	movs	r3, #128	@ 0x80
 8013d18:	061b      	lsls	r3, r3, #24
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d111      	bne.n	8013d42 <HAL_ADC_Init+0xde>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	691a      	ldr	r2, [r3, #16]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	0092      	lsls	r2, r2, #2
 8013d2a:	0892      	lsrs	r2, r2, #2
 8013d2c:	611a      	str	r2, [r3, #16]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	6919      	ldr	r1, [r3, #16]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	685a      	ldr	r2, [r3, #4]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	430a      	orrs	r2, r1
 8013d3e:	611a      	str	r2, [r3, #16]
 8013d40:	e014      	b.n	8013d6c <HAL_ADC_Init+0x108>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	691a      	ldr	r2, [r3, #16]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	0092      	lsls	r2, r2, #2
 8013d4e:	0892      	lsrs	r2, r2, #2
 8013d50:	611a      	str	r2, [r3, #16]
 8013d52:	4b79      	ldr	r3, [pc, #484]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	4b78      	ldr	r3, [pc, #480]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d58:	4978      	ldr	r1, [pc, #480]	@ (8013f3c <HAL_ADC_Init+0x2d8>)
 8013d5a:	400a      	ands	r2, r1
 8013d5c:	601a      	str	r2, [r3, #0]
 8013d5e:	4b76      	ldr	r3, [pc, #472]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d60:	6819      	ldr	r1, [r3, #0]
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	685a      	ldr	r2, [r3, #4]
 8013d66:	4b74      	ldr	r3, [pc, #464]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d68:	430a      	orrs	r2, r1
 8013d6a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	68da      	ldr	r2, [r3, #12]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2118      	movs	r1, #24
 8013d78:	438a      	bics	r2, r1
 8013d7a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68d9      	ldr	r1, [r3, #12]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	689a      	ldr	r2, [r3, #8]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	430a      	orrs	r2, r1
 8013d8c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8013d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	4b69      	ldr	r3, [pc, #420]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d94:	496a      	ldr	r1, [pc, #424]	@ (8013f40 <HAL_ADC_Init+0x2dc>)
 8013d96:	400a      	ands	r2, r1
 8013d98:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8013d9a:	4b67      	ldr	r3, [pc, #412]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013d9c:	6819      	ldr	r1, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013da2:	065a      	lsls	r2, r3, #25
 8013da4:	4b64      	ldr	r3, [pc, #400]	@ (8013f38 <HAL_ADC_Init+0x2d4>)
 8013da6:	430a      	orrs	r2, r1
 8013da8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	689a      	ldr	r2, [r3, #8]
 8013db0:	2380      	movs	r3, #128	@ 0x80
 8013db2:	055b      	lsls	r3, r3, #21
 8013db4:	4013      	ands	r3, r2
 8013db6:	d108      	bne.n	8013dca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	689a      	ldr	r2, [r3, #8]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2180      	movs	r1, #128	@ 0x80
 8013dc4:	0549      	lsls	r1, r1, #21
 8013dc6:	430a      	orrs	r2, r1
 8013dc8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	68da      	ldr	r2, [r3, #12]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	495b      	ldr	r1, [pc, #364]	@ (8013f44 <HAL_ADC_Init+0x2e0>)
 8013dd6:	400a      	ands	r2, r1
 8013dd8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	68d9      	ldr	r1, [r3, #12]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	691b      	ldr	r3, [r3, #16]
 8013de8:	2b02      	cmp	r3, #2
 8013dea:	d101      	bne.n	8013df0 <HAL_ADC_Init+0x18c>
 8013dec:	2304      	movs	r3, #4
 8013dee:	e000      	b.n	8013df2 <HAL_ADC_Init+0x18e>
 8013df0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013df2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2020      	movs	r0, #32
 8013df8:	5c1b      	ldrb	r3, [r3, r0]
 8013dfa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8013dfc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	202c      	movs	r0, #44	@ 0x2c
 8013e02:	5c1b      	ldrb	r3, [r3, r0]
 8013e04:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8013e06:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8013e0c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	699b      	ldr	r3, [r3, #24]
 8013e12:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8013e14:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	69db      	ldr	r3, [r3, #28]
 8013e1a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8013e1c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	430a      	orrs	r2, r1
 8013e24:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e2a:	23c2      	movs	r3, #194	@ 0xc2
 8013e2c:	33ff      	adds	r3, #255	@ 0xff
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d00b      	beq.n	8013e4a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	68d9      	ldr	r1, [r3, #12]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8013e40:	431a      	orrs	r2, r3
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	430a      	orrs	r2, r1
 8013e48:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2221      	movs	r2, #33	@ 0x21
 8013e4e:	5c9b      	ldrb	r3, [r3, r2]
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d11a      	bne.n	8013e8a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2220      	movs	r2, #32
 8013e58:	5c9b      	ldrb	r3, [r3, r2]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d109      	bne.n	8013e72 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	68da      	ldr	r2, [r3, #12]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2180      	movs	r1, #128	@ 0x80
 8013e6a:	0249      	lsls	r1, r1, #9
 8013e6c:	430a      	orrs	r2, r1
 8013e6e:	60da      	str	r2, [r3, #12]
 8013e70:	e00b      	b.n	8013e8a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013e76:	2220      	movs	r2, #32
 8013e78:	431a      	orrs	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e82:	2201      	movs	r2, #1
 8013e84:	431a      	orrs	r2, r3
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d11f      	bne.n	8013ed2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	691a      	ldr	r2, [r3, #16]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	492a      	ldr	r1, [pc, #168]	@ (8013f48 <HAL_ADC_Init+0x2e4>)
 8013e9e:	400a      	ands	r2, r1
 8013ea0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	6919      	ldr	r1, [r3, #16]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013eb0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8013eb6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	430a      	orrs	r2, r1
 8013ebe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	691a      	ldr	r2, [r3, #16]
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2101      	movs	r1, #1
 8013ecc:	430a      	orrs	r2, r1
 8013ece:	611a      	str	r2, [r3, #16]
 8013ed0:	e00e      	b.n	8013ef0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	691b      	ldr	r3, [r3, #16]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	4013      	ands	r3, r2
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d107      	bne.n	8013ef0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	691a      	ldr	r2, [r3, #16]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2101      	movs	r1, #1
 8013eec:	438a      	bics	r2, r1
 8013eee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	695a      	ldr	r2, [r3, #20]
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	2107      	movs	r1, #7
 8013efc:	438a      	bics	r2, r1
 8013efe:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	6959      	ldr	r1, [r3, #20]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	430a      	orrs	r2, r1
 8013f10:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2200      	movs	r2, #0
 8013f16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013f1c:	2203      	movs	r2, #3
 8013f1e:	4393      	bics	r3, r2
 8013f20:	2201      	movs	r2, #1
 8013f22:	431a      	orrs	r2, r3
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	0018      	movs	r0, r3
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	b002      	add	sp, #8
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	46c0      	nop			@ (mov r8, r8)
 8013f34:	fffffefd 	.word	0xfffffefd
 8013f38:	40012708 	.word	0x40012708
 8013f3c:	ffc3ffff 	.word	0xffc3ffff
 8013f40:	fdffffff 	.word	0xfdffffff
 8013f44:	fffe0219 	.word	0xfffe0219
 8013f48:	fffffc03 	.word	0xfffffc03

08013f4c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8013f4c:	b590      	push	{r4, r7, lr}
 8013f4e:	b085      	sub	sp, #20
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013f54:	230f      	movs	r3, #15
 8013f56:	18fb      	adds	r3, r7, r3
 8013f58:	2200      	movs	r2, #0
 8013f5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	689b      	ldr	r3, [r3, #8]
 8013f62:	2204      	movs	r2, #4
 8013f64:	4013      	ands	r3, r2
 8013f66:	d138      	bne.n	8013fda <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2250      	movs	r2, #80	@ 0x50
 8013f6c:	5c9b      	ldrb	r3, [r3, r2]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d101      	bne.n	8013f76 <HAL_ADC_Start+0x2a>
 8013f72:	2302      	movs	r3, #2
 8013f74:	e038      	b.n	8013fe8 <HAL_ADC_Start+0x9c>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2250      	movs	r2, #80	@ 0x50
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	69db      	ldr	r3, [r3, #28]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d007      	beq.n	8013f96 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8013f86:	230f      	movs	r3, #15
 8013f88:	18fc      	adds	r4, r7, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	0018      	movs	r0, r3
 8013f8e:	f000 f95f 	bl	8014250 <ADC_Enable>
 8013f92:	0003      	movs	r3, r0
 8013f94:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8013f96:	230f      	movs	r3, #15
 8013f98:	18fb      	adds	r3, r7, r3
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d120      	bne.n	8013fe2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013fa4:	4a12      	ldr	r2, [pc, #72]	@ (8013ff0 <HAL_ADC_Start+0xa4>)
 8013fa6:	4013      	ands	r3, r2
 8013fa8:	2280      	movs	r2, #128	@ 0x80
 8013faa:	0052      	lsls	r2, r2, #1
 8013fac:	431a      	orrs	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2250      	movs	r2, #80	@ 0x50
 8013fbc:	2100      	movs	r1, #0
 8013fbe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	221c      	movs	r2, #28
 8013fc6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	689a      	ldr	r2, [r3, #8]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2104      	movs	r1, #4
 8013fd4:	430a      	orrs	r2, r1
 8013fd6:	609a      	str	r2, [r3, #8]
 8013fd8:	e003      	b.n	8013fe2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8013fda:	230f      	movs	r3, #15
 8013fdc:	18fb      	adds	r3, r7, r3
 8013fde:	2202      	movs	r2, #2
 8013fe0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8013fe2:	230f      	movs	r3, #15
 8013fe4:	18fb      	adds	r3, r7, r3
 8013fe6:	781b      	ldrb	r3, [r3, #0]
}
 8013fe8:	0018      	movs	r0, r3
 8013fea:	46bd      	mov	sp, r7
 8013fec:	b005      	add	sp, #20
 8013fee:	bd90      	pop	{r4, r7, pc}
 8013ff0:	fffff0fe 	.word	0xfffff0fe

08013ff4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8013ffe:	2300      	movs	r3, #0
 8014000:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014002:	2300      	movs	r3, #0
 8014004:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	695b      	ldr	r3, [r3, #20]
 801400a:	2b08      	cmp	r3, #8
 801400c:	d102      	bne.n	8014014 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 801400e:	2308      	movs	r3, #8
 8014010:	60fb      	str	r3, [r7, #12]
 8014012:	e014      	b.n	801403e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	2201      	movs	r2, #1
 801401c:	4013      	ands	r3, r2
 801401e:	2b01      	cmp	r3, #1
 8014020:	d10b      	bne.n	801403a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014026:	2220      	movs	r2, #32
 8014028:	431a      	orrs	r2, r3
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2250      	movs	r2, #80	@ 0x50
 8014032:	2100      	movs	r1, #0
 8014034:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014036:	2301      	movs	r3, #1
 8014038:	e072      	b.n	8014120 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 801403a:	230c      	movs	r3, #12
 801403c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801403e:	f7ff fda9 	bl	8013b94 <HAL_GetTick>
 8014042:	0003      	movs	r3, r0
 8014044:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014046:	e01f      	b.n	8014088 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	3301      	adds	r3, #1
 801404c:	d01c      	beq.n	8014088 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801404e:	683b      	ldr	r3, [r7, #0]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d007      	beq.n	8014064 <HAL_ADC_PollForConversion+0x70>
 8014054:	f7ff fd9e 	bl	8013b94 <HAL_GetTick>
 8014058:	0002      	movs	r2, r0
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	429a      	cmp	r2, r3
 8014062:	d211      	bcs.n	8014088 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	4013      	ands	r3, r2
 801406e:	d10b      	bne.n	8014088 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014074:	2204      	movs	r2, #4
 8014076:	431a      	orrs	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	2250      	movs	r2, #80	@ 0x50
 8014080:	2100      	movs	r1, #0
 8014082:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014084:	2303      	movs	r3, #3
 8014086:	e04b      	b.n	8014120 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	68fa      	ldr	r2, [r7, #12]
 8014090:	4013      	ands	r3, r2
 8014092:	d0d9      	beq.n	8014048 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014098:	2280      	movs	r2, #128	@ 0x80
 801409a:	0092      	lsls	r2, r2, #2
 801409c:	431a      	orrs	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	68da      	ldr	r2, [r3, #12]
 80140a8:	23c0      	movs	r3, #192	@ 0xc0
 80140aa:	011b      	lsls	r3, r3, #4
 80140ac:	4013      	ands	r3, r2
 80140ae:	d12e      	bne.n	801410e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2220      	movs	r2, #32
 80140b4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d129      	bne.n	801410e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2208      	movs	r2, #8
 80140c2:	4013      	ands	r3, r2
 80140c4:	2b08      	cmp	r3, #8
 80140c6:	d122      	bne.n	801410e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	2204      	movs	r2, #4
 80140d0:	4013      	ands	r3, r2
 80140d2:	d110      	bne.n	80140f6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	685a      	ldr	r2, [r3, #4]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	210c      	movs	r1, #12
 80140e0:	438a      	bics	r2, r1
 80140e2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140e8:	4a0f      	ldr	r2, [pc, #60]	@ (8014128 <HAL_ADC_PollForConversion+0x134>)
 80140ea:	4013      	ands	r3, r2
 80140ec:	2201      	movs	r2, #1
 80140ee:	431a      	orrs	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80140f4:	e00b      	b.n	801410e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80140fa:	2220      	movs	r2, #32
 80140fc:	431a      	orrs	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014106:	2201      	movs	r2, #1
 8014108:	431a      	orrs	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	699b      	ldr	r3, [r3, #24]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d103      	bne.n	801411e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	220c      	movs	r2, #12
 801411c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801411e:	2300      	movs	r3, #0
}
 8014120:	0018      	movs	r0, r3
 8014122:	46bd      	mov	sp, r7
 8014124:	b004      	add	sp, #16
 8014126:	bd80      	pop	{r7, pc}
 8014128:	fffffefe 	.word	0xfffffefe

0801412c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 801413a:	0018      	movs	r0, r3
 801413c:	46bd      	mov	sp, r7
 801413e:	b002      	add	sp, #8
 8014140:	bd80      	pop	{r7, pc}
	...

08014144 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2250      	movs	r2, #80	@ 0x50
 8014152:	5c9b      	ldrb	r3, [r3, r2]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d101      	bne.n	801415c <HAL_ADC_ConfigChannel+0x18>
 8014158:	2302      	movs	r3, #2
 801415a:	e06c      	b.n	8014236 <HAL_ADC_ConfigChannel+0xf2>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2250      	movs	r2, #80	@ 0x50
 8014160:	2101      	movs	r1, #1
 8014162:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	2204      	movs	r2, #4
 801416c:	4013      	ands	r3, r2
 801416e:	d00b      	beq.n	8014188 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014174:	2220      	movs	r2, #32
 8014176:	431a      	orrs	r2, r3
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2250      	movs	r2, #80	@ 0x50
 8014180:	2100      	movs	r1, #0
 8014182:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014184:	2301      	movs	r3, #1
 8014186:	e056      	b.n	8014236 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	4a2c      	ldr	r2, [pc, #176]	@ (8014240 <HAL_ADC_ConfigChannel+0xfc>)
 801418e:	4293      	cmp	r3, r2
 8014190:	d028      	beq.n	80141e4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	035b      	lsls	r3, r3, #13
 801419e:	0b5a      	lsrs	r2, r3, #13
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	430a      	orrs	r2, r1
 80141a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	2380      	movs	r3, #128	@ 0x80
 80141ae:	02db      	lsls	r3, r3, #11
 80141b0:	4013      	ands	r3, r2
 80141b2:	d009      	beq.n	80141c8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80141b4:	4b23      	ldr	r3, [pc, #140]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	4b22      	ldr	r3, [pc, #136]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 80141ba:	2180      	movs	r1, #128	@ 0x80
 80141bc:	0409      	lsls	r1, r1, #16
 80141be:	430a      	orrs	r2, r1
 80141c0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80141c2:	200a      	movs	r0, #10
 80141c4:	f000 f8ac 	bl	8014320 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	681a      	ldr	r2, [r3, #0]
 80141cc:	2380      	movs	r3, #128	@ 0x80
 80141ce:	029b      	lsls	r3, r3, #10
 80141d0:	4013      	ands	r3, r2
 80141d2:	d02b      	beq.n	801422c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80141d4:	4b1b      	ldr	r3, [pc, #108]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	4b1a      	ldr	r3, [pc, #104]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 80141da:	2180      	movs	r1, #128	@ 0x80
 80141dc:	03c9      	lsls	r1, r1, #15
 80141de:	430a      	orrs	r2, r1
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e023      	b.n	801422c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	035b      	lsls	r3, r3, #13
 80141f0:	0b5b      	lsrs	r3, r3, #13
 80141f2:	43d9      	mvns	r1, r3
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	400a      	ands	r2, r1
 80141fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	2380      	movs	r3, #128	@ 0x80
 8014202:	02db      	lsls	r3, r3, #11
 8014204:	4013      	ands	r3, r2
 8014206:	d005      	beq.n	8014214 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8014208:	4b0e      	ldr	r3, [pc, #56]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	4b0d      	ldr	r3, [pc, #52]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 801420e:	490e      	ldr	r1, [pc, #56]	@ (8014248 <HAL_ADC_ConfigChannel+0x104>)
 8014210:	400a      	ands	r2, r1
 8014212:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	681a      	ldr	r2, [r3, #0]
 8014218:	2380      	movs	r3, #128	@ 0x80
 801421a:	029b      	lsls	r3, r3, #10
 801421c:	4013      	ands	r3, r2
 801421e:	d005      	beq.n	801422c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8014220:	4b08      	ldr	r3, [pc, #32]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	4b07      	ldr	r3, [pc, #28]	@ (8014244 <HAL_ADC_ConfigChannel+0x100>)
 8014226:	4909      	ldr	r1, [pc, #36]	@ (801424c <HAL_ADC_ConfigChannel+0x108>)
 8014228:	400a      	ands	r2, r1
 801422a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2250      	movs	r2, #80	@ 0x50
 8014230:	2100      	movs	r1, #0
 8014232:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014234:	2300      	movs	r3, #0
}
 8014236:	0018      	movs	r0, r3
 8014238:	46bd      	mov	sp, r7
 801423a:	b002      	add	sp, #8
 801423c:	bd80      	pop	{r7, pc}
 801423e:	46c0      	nop			@ (mov r8, r8)
 8014240:	00001001 	.word	0x00001001
 8014244:	40012708 	.word	0x40012708
 8014248:	ff7fffff 	.word	0xff7fffff
 801424c:	ffbfffff 	.word	0xffbfffff

08014250 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b084      	sub	sp, #16
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014258:	2300      	movs	r3, #0
 801425a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	689b      	ldr	r3, [r3, #8]
 8014262:	2203      	movs	r2, #3
 8014264:	4013      	ands	r3, r2
 8014266:	2b01      	cmp	r3, #1
 8014268:	d108      	bne.n	801427c <ADC_Enable+0x2c>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	2201      	movs	r2, #1
 8014272:	4013      	ands	r3, r2
 8014274:	2b01      	cmp	r3, #1
 8014276:	d101      	bne.n	801427c <ADC_Enable+0x2c>
 8014278:	2301      	movs	r3, #1
 801427a:	e000      	b.n	801427e <ADC_Enable+0x2e>
 801427c:	2300      	movs	r3, #0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d146      	bne.n	8014310 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	689b      	ldr	r3, [r3, #8]
 8014288:	4a24      	ldr	r2, [pc, #144]	@ (801431c <ADC_Enable+0xcc>)
 801428a:	4013      	ands	r3, r2
 801428c:	d00d      	beq.n	80142aa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014292:	2210      	movs	r2, #16
 8014294:	431a      	orrs	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801429e:	2201      	movs	r2, #1
 80142a0:	431a      	orrs	r2, r3
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80142a6:	2301      	movs	r3, #1
 80142a8:	e033      	b.n	8014312 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	689a      	ldr	r2, [r3, #8]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2101      	movs	r1, #1
 80142b6:	430a      	orrs	r2, r1
 80142b8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80142ba:	2001      	movs	r0, #1
 80142bc:	f000 f830 	bl	8014320 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80142c0:	f7ff fc68 	bl	8013b94 <HAL_GetTick>
 80142c4:	0003      	movs	r3, r0
 80142c6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80142c8:	e01b      	b.n	8014302 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80142ca:	f7ff fc63 	bl	8013b94 <HAL_GetTick>
 80142ce:	0002      	movs	r2, r0
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	2b0a      	cmp	r3, #10
 80142d6:	d914      	bls.n	8014302 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2201      	movs	r2, #1
 80142e0:	4013      	ands	r3, r2
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d00d      	beq.n	8014302 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80142ea:	2210      	movs	r2, #16
 80142ec:	431a      	orrs	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80142f6:	2201      	movs	r2, #1
 80142f8:	431a      	orrs	r2, r3
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80142fe:	2301      	movs	r3, #1
 8014300:	e007      	b.n	8014312 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2201      	movs	r2, #1
 801430a:	4013      	ands	r3, r2
 801430c:	2b01      	cmp	r3, #1
 801430e:	d1dc      	bne.n	80142ca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8014310:	2300      	movs	r3, #0
}
 8014312:	0018      	movs	r0, r3
 8014314:	46bd      	mov	sp, r7
 8014316:	b004      	add	sp, #16
 8014318:	bd80      	pop	{r7, pc}
 801431a:	46c0      	nop			@ (mov r8, r8)
 801431c:	80000017 	.word	0x80000017

08014320 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b084      	sub	sp, #16
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8014328:	4b0b      	ldr	r3, [pc, #44]	@ (8014358 <ADC_DelayMicroSecond+0x38>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	490b      	ldr	r1, [pc, #44]	@ (801435c <ADC_DelayMicroSecond+0x3c>)
 801432e:	0018      	movs	r0, r3
 8014330:	f7eb ff38 	bl	80001a4 <__udivsi3>
 8014334:	0003      	movs	r3, r0
 8014336:	001a      	movs	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	4353      	muls	r3, r2
 801433c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 801433e:	e002      	b.n	8014346 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	3b01      	subs	r3, #1
 8014344:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1f9      	bne.n	8014340 <ADC_DelayMicroSecond+0x20>
  }
}
 801434c:	46c0      	nop			@ (mov r8, r8)
 801434e:	46c0      	nop			@ (mov r8, r8)
 8014350:	46bd      	mov	sp, r7
 8014352:	b004      	add	sp, #16
 8014354:	bd80      	pop	{r7, pc}
 8014356:	46c0      	nop			@ (mov r8, r8)
 8014358:	200000e0 	.word	0x200000e0
 801435c:	000f4240 	.word	0x000f4240

08014360 <__NVIC_EnableIRQ>:
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	0002      	movs	r2, r0
 8014368:	1dfb      	adds	r3, r7, #7
 801436a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801436c:	1dfb      	adds	r3, r7, #7
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b7f      	cmp	r3, #127	@ 0x7f
 8014372:	d809      	bhi.n	8014388 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014374:	1dfb      	adds	r3, r7, #7
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	001a      	movs	r2, r3
 801437a:	231f      	movs	r3, #31
 801437c:	401a      	ands	r2, r3
 801437e:	4b04      	ldr	r3, [pc, #16]	@ (8014390 <__NVIC_EnableIRQ+0x30>)
 8014380:	2101      	movs	r1, #1
 8014382:	4091      	lsls	r1, r2
 8014384:	000a      	movs	r2, r1
 8014386:	601a      	str	r2, [r3, #0]
}
 8014388:	46c0      	nop			@ (mov r8, r8)
 801438a:	46bd      	mov	sp, r7
 801438c:	b002      	add	sp, #8
 801438e:	bd80      	pop	{r7, pc}
 8014390:	e000e100 	.word	0xe000e100

08014394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014394:	b590      	push	{r4, r7, lr}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	0002      	movs	r2, r0
 801439c:	6039      	str	r1, [r7, #0]
 801439e:	1dfb      	adds	r3, r7, #7
 80143a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80143a2:	1dfb      	adds	r3, r7, #7
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80143a8:	d828      	bhi.n	80143fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143aa:	4a2f      	ldr	r2, [pc, #188]	@ (8014468 <__NVIC_SetPriority+0xd4>)
 80143ac:	1dfb      	adds	r3, r7, #7
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	b25b      	sxtb	r3, r3
 80143b2:	089b      	lsrs	r3, r3, #2
 80143b4:	33c0      	adds	r3, #192	@ 0xc0
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	589b      	ldr	r3, [r3, r2]
 80143ba:	1dfa      	adds	r2, r7, #7
 80143bc:	7812      	ldrb	r2, [r2, #0]
 80143be:	0011      	movs	r1, r2
 80143c0:	2203      	movs	r2, #3
 80143c2:	400a      	ands	r2, r1
 80143c4:	00d2      	lsls	r2, r2, #3
 80143c6:	21ff      	movs	r1, #255	@ 0xff
 80143c8:	4091      	lsls	r1, r2
 80143ca:	000a      	movs	r2, r1
 80143cc:	43d2      	mvns	r2, r2
 80143ce:	401a      	ands	r2, r3
 80143d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	019b      	lsls	r3, r3, #6
 80143d6:	22ff      	movs	r2, #255	@ 0xff
 80143d8:	401a      	ands	r2, r3
 80143da:	1dfb      	adds	r3, r7, #7
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	0018      	movs	r0, r3
 80143e0:	2303      	movs	r3, #3
 80143e2:	4003      	ands	r3, r0
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143e8:	481f      	ldr	r0, [pc, #124]	@ (8014468 <__NVIC_SetPriority+0xd4>)
 80143ea:	1dfb      	adds	r3, r7, #7
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	b25b      	sxtb	r3, r3
 80143f0:	089b      	lsrs	r3, r3, #2
 80143f2:	430a      	orrs	r2, r1
 80143f4:	33c0      	adds	r3, #192	@ 0xc0
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80143fa:	e031      	b.n	8014460 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80143fc:	4a1b      	ldr	r2, [pc, #108]	@ (801446c <__NVIC_SetPriority+0xd8>)
 80143fe:	1dfb      	adds	r3, r7, #7
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	0019      	movs	r1, r3
 8014404:	230f      	movs	r3, #15
 8014406:	400b      	ands	r3, r1
 8014408:	3b08      	subs	r3, #8
 801440a:	089b      	lsrs	r3, r3, #2
 801440c:	3306      	adds	r3, #6
 801440e:	009b      	lsls	r3, r3, #2
 8014410:	18d3      	adds	r3, r2, r3
 8014412:	3304      	adds	r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	1dfa      	adds	r2, r7, #7
 8014418:	7812      	ldrb	r2, [r2, #0]
 801441a:	0011      	movs	r1, r2
 801441c:	2203      	movs	r2, #3
 801441e:	400a      	ands	r2, r1
 8014420:	00d2      	lsls	r2, r2, #3
 8014422:	21ff      	movs	r1, #255	@ 0xff
 8014424:	4091      	lsls	r1, r2
 8014426:	000a      	movs	r2, r1
 8014428:	43d2      	mvns	r2, r2
 801442a:	401a      	ands	r2, r3
 801442c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	019b      	lsls	r3, r3, #6
 8014432:	22ff      	movs	r2, #255	@ 0xff
 8014434:	401a      	ands	r2, r3
 8014436:	1dfb      	adds	r3, r7, #7
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	0018      	movs	r0, r3
 801443c:	2303      	movs	r3, #3
 801443e:	4003      	ands	r3, r0
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014444:	4809      	ldr	r0, [pc, #36]	@ (801446c <__NVIC_SetPriority+0xd8>)
 8014446:	1dfb      	adds	r3, r7, #7
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	001c      	movs	r4, r3
 801444c:	230f      	movs	r3, #15
 801444e:	4023      	ands	r3, r4
 8014450:	3b08      	subs	r3, #8
 8014452:	089b      	lsrs	r3, r3, #2
 8014454:	430a      	orrs	r2, r1
 8014456:	3306      	adds	r3, #6
 8014458:	009b      	lsls	r3, r3, #2
 801445a:	18c3      	adds	r3, r0, r3
 801445c:	3304      	adds	r3, #4
 801445e:	601a      	str	r2, [r3, #0]
}
 8014460:	46c0      	nop			@ (mov r8, r8)
 8014462:	46bd      	mov	sp, r7
 8014464:	b003      	add	sp, #12
 8014466:	bd90      	pop	{r4, r7, pc}
 8014468:	e000e100 	.word	0xe000e100
 801446c:	e000ed00 	.word	0xe000ed00

08014470 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014474:	f3bf 8f4f 	dsb	sy
}
 8014478:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801447a:	4b04      	ldr	r3, [pc, #16]	@ (801448c <__NVIC_SystemReset+0x1c>)
 801447c:	4a04      	ldr	r2, [pc, #16]	@ (8014490 <__NVIC_SystemReset+0x20>)
 801447e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014480:	f3bf 8f4f 	dsb	sy
}
 8014484:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014486:	46c0      	nop			@ (mov r8, r8)
 8014488:	e7fd      	b.n	8014486 <__NVIC_SystemReset+0x16>
 801448a:	46c0      	nop			@ (mov r8, r8)
 801448c:	e000ed00 	.word	0xe000ed00
 8014490:	05fa0004 	.word	0x05fa0004

08014494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	1e5a      	subs	r2, r3, #1
 80144a0:	2380      	movs	r3, #128	@ 0x80
 80144a2:	045b      	lsls	r3, r3, #17
 80144a4:	429a      	cmp	r2, r3
 80144a6:	d301      	bcc.n	80144ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80144a8:	2301      	movs	r3, #1
 80144aa:	e010      	b.n	80144ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80144ac:	4b0a      	ldr	r3, [pc, #40]	@ (80144d8 <SysTick_Config+0x44>)
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	3a01      	subs	r2, #1
 80144b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80144b4:	2301      	movs	r3, #1
 80144b6:	425b      	negs	r3, r3
 80144b8:	2103      	movs	r1, #3
 80144ba:	0018      	movs	r0, r3
 80144bc:	f7ff ff6a 	bl	8014394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80144c0:	4b05      	ldr	r3, [pc, #20]	@ (80144d8 <SysTick_Config+0x44>)
 80144c2:	2200      	movs	r2, #0
 80144c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80144c6:	4b04      	ldr	r3, [pc, #16]	@ (80144d8 <SysTick_Config+0x44>)
 80144c8:	2207      	movs	r2, #7
 80144ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80144cc:	2300      	movs	r3, #0
}
 80144ce:	0018      	movs	r0, r3
 80144d0:	46bd      	mov	sp, r7
 80144d2:	b002      	add	sp, #8
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	46c0      	nop			@ (mov r8, r8)
 80144d8:	e000e010 	.word	0xe000e010

080144dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80144dc:	b580      	push	{r7, lr}
 80144de:	b084      	sub	sp, #16
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60b9      	str	r1, [r7, #8]
 80144e4:	607a      	str	r2, [r7, #4]
 80144e6:	210f      	movs	r1, #15
 80144e8:	187b      	adds	r3, r7, r1
 80144ea:	1c02      	adds	r2, r0, #0
 80144ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80144ee:	68ba      	ldr	r2, [r7, #8]
 80144f0:	187b      	adds	r3, r7, r1
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	b25b      	sxtb	r3, r3
 80144f6:	0011      	movs	r1, r2
 80144f8:	0018      	movs	r0, r3
 80144fa:	f7ff ff4b 	bl	8014394 <__NVIC_SetPriority>
}
 80144fe:	46c0      	nop			@ (mov r8, r8)
 8014500:	46bd      	mov	sp, r7
 8014502:	b004      	add	sp, #16
 8014504:	bd80      	pop	{r7, pc}

08014506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014506:	b580      	push	{r7, lr}
 8014508:	b082      	sub	sp, #8
 801450a:	af00      	add	r7, sp, #0
 801450c:	0002      	movs	r2, r0
 801450e:	1dfb      	adds	r3, r7, #7
 8014510:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014512:	1dfb      	adds	r3, r7, #7
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	b25b      	sxtb	r3, r3
 8014518:	0018      	movs	r0, r3
 801451a:	f7ff ff21 	bl	8014360 <__NVIC_EnableIRQ>
}
 801451e:	46c0      	nop			@ (mov r8, r8)
 8014520:	46bd      	mov	sp, r7
 8014522:	b002      	add	sp, #8
 8014524:	bd80      	pop	{r7, pc}

08014526 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014526:	b580      	push	{r7, lr}
 8014528:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801452a:	f7ff ffa1 	bl	8014470 <__NVIC_SystemReset>

0801452e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801452e:	b580      	push	{r7, lr}
 8014530:	b082      	sub	sp, #8
 8014532:	af00      	add	r7, sp, #0
 8014534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	0018      	movs	r0, r3
 801453a:	f7ff ffab 	bl	8014494 <SysTick_Config>
 801453e:	0003      	movs	r3, r0
}
 8014540:	0018      	movs	r0, r3
 8014542:	46bd      	mov	sp, r7
 8014544:	b002      	add	sp, #8
 8014546:	bd80      	pop	{r7, pc}

08014548 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d101      	bne.n	801455a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8014556:	2301      	movs	r3, #1
 8014558:	e061      	b.n	801461e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	4a32      	ldr	r2, [pc, #200]	@ (8014628 <HAL_DMA_Init+0xe0>)
 8014560:	4694      	mov	ip, r2
 8014562:	4463      	add	r3, ip
 8014564:	2114      	movs	r1, #20
 8014566:	0018      	movs	r0, r3
 8014568:	f7eb fe1c 	bl	80001a4 <__udivsi3>
 801456c:	0003      	movs	r3, r0
 801456e:	009a      	lsls	r2, r3, #2
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	4a2d      	ldr	r2, [pc, #180]	@ (801462c <HAL_DMA_Init+0xe4>)
 8014578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	2225      	movs	r2, #37	@ 0x25
 801457e:	2102      	movs	r1, #2
 8014580:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	4a28      	ldr	r2, [pc, #160]	@ (8014630 <HAL_DMA_Init+0xe8>)
 801458e:	4013      	ands	r3, r2
 8014590:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801459a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	691b      	ldr	r3, [r3, #16]
 80145a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80145a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	699b      	ldr	r3, [r3, #24]
 80145ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80145b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6a1b      	ldr	r3, [r3, #32]
 80145b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80145ba:	68fa      	ldr	r2, [r7, #12]
 80145bc:	4313      	orrs	r3, r2
 80145be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	68fa      	ldr	r2, [r7, #12]
 80145c6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	689a      	ldr	r2, [r3, #8]
 80145cc:	2380      	movs	r3, #128	@ 0x80
 80145ce:	01db      	lsls	r3, r3, #7
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d018      	beq.n	8014606 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80145d4:	4b17      	ldr	r3, [pc, #92]	@ (8014634 <HAL_DMA_Init+0xec>)
 80145d6:	681a      	ldr	r2, [r3, #0]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145dc:	211c      	movs	r1, #28
 80145de:	400b      	ands	r3, r1
 80145e0:	210f      	movs	r1, #15
 80145e2:	4099      	lsls	r1, r3
 80145e4:	000b      	movs	r3, r1
 80145e6:	43d9      	mvns	r1, r3
 80145e8:	4b12      	ldr	r3, [pc, #72]	@ (8014634 <HAL_DMA_Init+0xec>)
 80145ea:	400a      	ands	r2, r1
 80145ec:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80145ee:	4b11      	ldr	r3, [pc, #68]	@ (8014634 <HAL_DMA_Init+0xec>)
 80145f0:	6819      	ldr	r1, [r3, #0]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	685a      	ldr	r2, [r3, #4]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80145fa:	201c      	movs	r0, #28
 80145fc:	4003      	ands	r3, r0
 80145fe:	409a      	lsls	r2, r3
 8014600:	4b0c      	ldr	r3, [pc, #48]	@ (8014634 <HAL_DMA_Init+0xec>)
 8014602:	430a      	orrs	r2, r1
 8014604:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2225      	movs	r2, #37	@ 0x25
 8014610:	2101      	movs	r1, #1
 8014612:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2224      	movs	r2, #36	@ 0x24
 8014618:	2100      	movs	r1, #0
 801461a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801461c:	2300      	movs	r3, #0
}
 801461e:	0018      	movs	r0, r3
 8014620:	46bd      	mov	sp, r7
 8014622:	b004      	add	sp, #16
 8014624:	bd80      	pop	{r7, pc}
 8014626:	46c0      	nop			@ (mov r8, r8)
 8014628:	bffdfff8 	.word	0xbffdfff8
 801462c:	40020000 	.word	0x40020000
 8014630:	ffff800f 	.word	0xffff800f
 8014634:	400200a8 	.word	0x400200a8

08014638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
 8014644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014646:	2317      	movs	r3, #23
 8014648:	18fb      	adds	r3, r7, r3
 801464a:	2200      	movs	r2, #0
 801464c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2224      	movs	r2, #36	@ 0x24
 8014652:	5c9b      	ldrb	r3, [r3, r2]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d101      	bne.n	801465c <HAL_DMA_Start_IT+0x24>
 8014658:	2302      	movs	r3, #2
 801465a:	e04f      	b.n	80146fc <HAL_DMA_Start_IT+0xc4>
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2224      	movs	r2, #36	@ 0x24
 8014660:	2101      	movs	r1, #1
 8014662:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	2225      	movs	r2, #37	@ 0x25
 8014668:	5c9b      	ldrb	r3, [r3, r2]
 801466a:	b2db      	uxtb	r3, r3
 801466c:	2b01      	cmp	r3, #1
 801466e:	d13a      	bne.n	80146e6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	2225      	movs	r2, #37	@ 0x25
 8014674:	2102      	movs	r1, #2
 8014676:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2200      	movs	r2, #0
 801467c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	2101      	movs	r1, #1
 801468a:	438a      	bics	r2, r1
 801468c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801468e:	683b      	ldr	r3, [r7, #0]
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	68b9      	ldr	r1, [r7, #8]
 8014694:	68f8      	ldr	r0, [r7, #12]
 8014696:	f000 f976 	bl	8014986 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d008      	beq.n	80146b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	210e      	movs	r1, #14
 80146ae:	430a      	orrs	r2, r1
 80146b0:	601a      	str	r2, [r3, #0]
 80146b2:	e00f      	b.n	80146d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2104      	movs	r1, #4
 80146c0:	438a      	bics	r2, r1
 80146c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	681a      	ldr	r2, [r3, #0]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	210a      	movs	r1, #10
 80146d0:	430a      	orrs	r2, r1
 80146d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	681a      	ldr	r2, [r3, #0]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2101      	movs	r1, #1
 80146e0:	430a      	orrs	r2, r1
 80146e2:	601a      	str	r2, [r3, #0]
 80146e4:	e007      	b.n	80146f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2224      	movs	r2, #36	@ 0x24
 80146ea:	2100      	movs	r1, #0
 80146ec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80146ee:	2317      	movs	r3, #23
 80146f0:	18fb      	adds	r3, r7, r3
 80146f2:	2202      	movs	r2, #2
 80146f4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80146f6:	2317      	movs	r3, #23
 80146f8:	18fb      	adds	r3, r7, r3
 80146fa:	781b      	ldrb	r3, [r3, #0]
}
 80146fc:	0018      	movs	r0, r3
 80146fe:	46bd      	mov	sp, r7
 8014700:	b006      	add	sp, #24
 8014702:	bd80      	pop	{r7, pc}

08014704 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801470c:	230f      	movs	r3, #15
 801470e:	18fb      	adds	r3, r7, r3
 8014710:	2200      	movs	r2, #0
 8014712:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2225      	movs	r2, #37	@ 0x25
 8014718:	5c9b      	ldrb	r3, [r3, r2]
 801471a:	b2db      	uxtb	r3, r3
 801471c:	2b02      	cmp	r3, #2
 801471e:	d008      	beq.n	8014732 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2204      	movs	r2, #4
 8014724:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2224      	movs	r2, #36	@ 0x24
 801472a:	2100      	movs	r1, #0
 801472c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 801472e:	2301      	movs	r3, #1
 8014730:	e024      	b.n	801477c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	210e      	movs	r1, #14
 801473e:	438a      	bics	r2, r1
 8014740:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2101      	movs	r1, #1
 801474e:	438a      	bics	r2, r1
 8014750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014756:	221c      	movs	r2, #28
 8014758:	401a      	ands	r2, r3
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801475e:	2101      	movs	r1, #1
 8014760:	4091      	lsls	r1, r2
 8014762:	000a      	movs	r2, r1
 8014764:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	2225      	movs	r2, #37	@ 0x25
 801476a:	2101      	movs	r1, #1
 801476c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2224      	movs	r2, #36	@ 0x24
 8014772:	2100      	movs	r1, #0
 8014774:	5499      	strb	r1, [r3, r2]

    return status;
 8014776:	230f      	movs	r3, #15
 8014778:	18fb      	adds	r3, r7, r3
 801477a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801477c:	0018      	movs	r0, r3
 801477e:	46bd      	mov	sp, r7
 8014780:	b004      	add	sp, #16
 8014782:	bd80      	pop	{r7, pc}

08014784 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801478c:	210f      	movs	r1, #15
 801478e:	187b      	adds	r3, r7, r1
 8014790:	2200      	movs	r2, #0
 8014792:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2225      	movs	r2, #37	@ 0x25
 8014798:	5c9b      	ldrb	r3, [r3, r2]
 801479a:	b2db      	uxtb	r3, r3
 801479c:	2b02      	cmp	r3, #2
 801479e:	d006      	beq.n	80147ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2204      	movs	r2, #4
 80147a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80147a6:	187b      	adds	r3, r7, r1
 80147a8:	2201      	movs	r2, #1
 80147aa:	701a      	strb	r2, [r3, #0]
 80147ac:	e02a      	b.n	8014804 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	210e      	movs	r1, #14
 80147ba:	438a      	bics	r2, r1
 80147bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	681a      	ldr	r2, [r3, #0]
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2101      	movs	r1, #1
 80147ca:	438a      	bics	r2, r1
 80147cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147d2:	221c      	movs	r2, #28
 80147d4:	401a      	ands	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147da:	2101      	movs	r1, #1
 80147dc:	4091      	lsls	r1, r2
 80147de:	000a      	movs	r2, r1
 80147e0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	2225      	movs	r2, #37	@ 0x25
 80147e6:	2101      	movs	r1, #1
 80147e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2224      	movs	r2, #36	@ 0x24
 80147ee:	2100      	movs	r1, #0
 80147f0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d004      	beq.n	8014804 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80147fe:	687a      	ldr	r2, [r7, #4]
 8014800:	0010      	movs	r0, r2
 8014802:	4798      	blx	r3
    }
  }
  return status;
 8014804:	230f      	movs	r3, #15
 8014806:	18fb      	adds	r3, r7, r3
 8014808:	781b      	ldrb	r3, [r3, #0]
}
 801480a:	0018      	movs	r0, r3
 801480c:	46bd      	mov	sp, r7
 801480e:	b004      	add	sp, #16
 8014810:	bd80      	pop	{r7, pc}

08014812 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014812:	b580      	push	{r7, lr}
 8014814:	b084      	sub	sp, #16
 8014816:	af00      	add	r7, sp, #0
 8014818:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801482e:	221c      	movs	r2, #28
 8014830:	4013      	ands	r3, r2
 8014832:	2204      	movs	r2, #4
 8014834:	409a      	lsls	r2, r3
 8014836:	0013      	movs	r3, r2
 8014838:	68fa      	ldr	r2, [r7, #12]
 801483a:	4013      	ands	r3, r2
 801483c:	d026      	beq.n	801488c <HAL_DMA_IRQHandler+0x7a>
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	2204      	movs	r2, #4
 8014842:	4013      	ands	r3, r2
 8014844:	d022      	beq.n	801488c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	2220      	movs	r2, #32
 801484e:	4013      	ands	r3, r2
 8014850:	d107      	bne.n	8014862 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	2104      	movs	r1, #4
 801485e:	438a      	bics	r2, r1
 8014860:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014866:	221c      	movs	r2, #28
 8014868:	401a      	ands	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801486e:	2104      	movs	r1, #4
 8014870:	4091      	lsls	r1, r2
 8014872:	000a      	movs	r2, r1
 8014874:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801487a:	2b00      	cmp	r3, #0
 801487c:	d100      	bne.n	8014880 <HAL_DMA_IRQHandler+0x6e>
 801487e:	e071      	b.n	8014964 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014884:	687a      	ldr	r2, [r7, #4]
 8014886:	0010      	movs	r0, r2
 8014888:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801488a:	e06b      	b.n	8014964 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014890:	221c      	movs	r2, #28
 8014892:	4013      	ands	r3, r2
 8014894:	2202      	movs	r2, #2
 8014896:	409a      	lsls	r2, r3
 8014898:	0013      	movs	r3, r2
 801489a:	68fa      	ldr	r2, [r7, #12]
 801489c:	4013      	ands	r3, r2
 801489e:	d02d      	beq.n	80148fc <HAL_DMA_IRQHandler+0xea>
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	2202      	movs	r2, #2
 80148a4:	4013      	ands	r3, r2
 80148a6:	d029      	beq.n	80148fc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	2220      	movs	r2, #32
 80148b0:	4013      	ands	r3, r2
 80148b2:	d10b      	bne.n	80148cc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	210a      	movs	r1, #10
 80148c0:	438a      	bics	r2, r1
 80148c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2225      	movs	r2, #37	@ 0x25
 80148c8:	2101      	movs	r1, #1
 80148ca:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148d0:	221c      	movs	r2, #28
 80148d2:	401a      	ands	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148d8:	2102      	movs	r1, #2
 80148da:	4091      	lsls	r1, r2
 80148dc:	000a      	movs	r2, r1
 80148de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2224      	movs	r2, #36	@ 0x24
 80148e4:	2100      	movs	r1, #0
 80148e6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d039      	beq.n	8014964 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f4:	687a      	ldr	r2, [r7, #4]
 80148f6:	0010      	movs	r0, r2
 80148f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80148fa:	e033      	b.n	8014964 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014900:	221c      	movs	r2, #28
 8014902:	4013      	ands	r3, r2
 8014904:	2208      	movs	r2, #8
 8014906:	409a      	lsls	r2, r3
 8014908:	0013      	movs	r3, r2
 801490a:	68fa      	ldr	r2, [r7, #12]
 801490c:	4013      	ands	r3, r2
 801490e:	d02a      	beq.n	8014966 <HAL_DMA_IRQHandler+0x154>
 8014910:	68bb      	ldr	r3, [r7, #8]
 8014912:	2208      	movs	r2, #8
 8014914:	4013      	ands	r3, r2
 8014916:	d026      	beq.n	8014966 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	681a      	ldr	r2, [r3, #0]
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	210e      	movs	r1, #14
 8014924:	438a      	bics	r2, r1
 8014926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801492c:	221c      	movs	r2, #28
 801492e:	401a      	ands	r2, r3
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014934:	2101      	movs	r1, #1
 8014936:	4091      	lsls	r1, r2
 8014938:	000a      	movs	r2, r1
 801493a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2201      	movs	r2, #1
 8014940:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	2225      	movs	r2, #37	@ 0x25
 8014946:	2101      	movs	r1, #1
 8014948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2224      	movs	r2, #36	@ 0x24
 801494e:	2100      	movs	r1, #0
 8014950:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014956:	2b00      	cmp	r3, #0
 8014958:	d005      	beq.n	8014966 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	0010      	movs	r0, r2
 8014962:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8014964:	46c0      	nop			@ (mov r8, r8)
 8014966:	46c0      	nop			@ (mov r8, r8)
}
 8014968:	46bd      	mov	sp, r7
 801496a:	b004      	add	sp, #16
 801496c:	bd80      	pop	{r7, pc}

0801496e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801496e:	b580      	push	{r7, lr}
 8014970:	b082      	sub	sp, #8
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2225      	movs	r2, #37	@ 0x25
 801497a:	5c9b      	ldrb	r3, [r3, r2]
 801497c:	b2db      	uxtb	r3, r3
}
 801497e:	0018      	movs	r0, r3
 8014980:	46bd      	mov	sp, r7
 8014982:	b002      	add	sp, #8
 8014984:	bd80      	pop	{r7, pc}

08014986 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8014986:	b580      	push	{r7, lr}
 8014988:	b084      	sub	sp, #16
 801498a:	af00      	add	r7, sp, #0
 801498c:	60f8      	str	r0, [r7, #12]
 801498e:	60b9      	str	r1, [r7, #8]
 8014990:	607a      	str	r2, [r7, #4]
 8014992:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014998:	221c      	movs	r2, #28
 801499a:	401a      	ands	r2, r3
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80149a0:	2101      	movs	r1, #1
 80149a2:	4091      	lsls	r1, r2
 80149a4:	000a      	movs	r2, r1
 80149a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	683a      	ldr	r2, [r7, #0]
 80149ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	689b      	ldr	r3, [r3, #8]
 80149b4:	2b10      	cmp	r3, #16
 80149b6:	d108      	bne.n	80149ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80149c8:	e007      	b.n	80149da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	68ba      	ldr	r2, [r7, #8]
 80149d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	60da      	str	r2, [r3, #12]
}
 80149da:	46c0      	nop			@ (mov r8, r8)
 80149dc:	46bd      	mov	sp, r7
 80149de:	b004      	add	sp, #16
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80149ec:	f7ff f8d2 	bl	8013b94 <HAL_GetTick>
 80149f0:	0003      	movs	r3, r0
 80149f2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80149f4:	e00f      	b.n	8014a16 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	3301      	adds	r3, #1
 80149fa:	d00c      	beq.n	8014a16 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d007      	beq.n	8014a12 <FLASH_WaitForLastOperation+0x2e>
 8014a02:	f7ff f8c7 	bl	8013b94 <HAL_GetTick>
 8014a06:	0002      	movs	r2, r0
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	687a      	ldr	r2, [r7, #4]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d201      	bcs.n	8014a16 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8014a12:	2303      	movs	r3, #3
 8014a14:	e052      	b.n	8014abc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8014a16:	4b2b      	ldr	r3, [pc, #172]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a18:	699b      	ldr	r3, [r3, #24]
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	2b01      	cmp	r3, #1
 8014a20:	d0e9      	beq.n	80149f6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8014a22:	4b28      	ldr	r3, [pc, #160]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a24:	699b      	ldr	r3, [r3, #24]
 8014a26:	2202      	movs	r2, #2
 8014a28:	4013      	ands	r3, r2
 8014a2a:	2b02      	cmp	r3, #2
 8014a2c:	d102      	bne.n	8014a34 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8014a2e:	4b25      	ldr	r3, [pc, #148]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a30:	2202      	movs	r2, #2
 8014a32:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014a34:	4b23      	ldr	r3, [pc, #140]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a36:	699a      	ldr	r2, [r3, #24]
 8014a38:	2380      	movs	r3, #128	@ 0x80
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	401a      	ands	r2, r3
 8014a3e:	2380      	movs	r3, #128	@ 0x80
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d035      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014a46:	4b1f      	ldr	r3, [pc, #124]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a48:	699a      	ldr	r2, [r3, #24]
 8014a4a:	2380      	movs	r3, #128	@ 0x80
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8014a50:	2380      	movs	r3, #128	@ 0x80
 8014a52:	009b      	lsls	r3, r3, #2
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d02c      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014a58:	4b1a      	ldr	r3, [pc, #104]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a5a:	699a      	ldr	r2, [r3, #24]
 8014a5c:	2380      	movs	r3, #128	@ 0x80
 8014a5e:	00db      	lsls	r3, r3, #3
 8014a60:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8014a62:	2380      	movs	r3, #128	@ 0x80
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	429a      	cmp	r2, r3
 8014a68:	d023      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014a6a:	4b16      	ldr	r3, [pc, #88]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a6c:	699a      	ldr	r2, [r3, #24]
 8014a6e:	2380      	movs	r3, #128	@ 0x80
 8014a70:	011b      	lsls	r3, r3, #4
 8014a72:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8014a74:	2380      	movs	r3, #128	@ 0x80
 8014a76:	011b      	lsls	r3, r3, #4
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d01a      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014a7c:	4b11      	ldr	r3, [pc, #68]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a7e:	699a      	ldr	r2, [r3, #24]
 8014a80:	2380      	movs	r3, #128	@ 0x80
 8014a82:	019b      	lsls	r3, r3, #6
 8014a84:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8014a86:	2380      	movs	r3, #128	@ 0x80
 8014a88:	019b      	lsls	r3, r3, #6
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d011      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014a90:	699a      	ldr	r2, [r3, #24]
 8014a92:	2380      	movs	r3, #128	@ 0x80
 8014a94:	029b      	lsls	r3, r3, #10
 8014a96:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8014a98:	2380      	movs	r3, #128	@ 0x80
 8014a9a:	029b      	lsls	r3, r3, #10
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	d008      	beq.n	8014ab2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8014aa0:	4b08      	ldr	r3, [pc, #32]	@ (8014ac4 <FLASH_WaitForLastOperation+0xe0>)
 8014aa2:	699a      	ldr	r2, [r3, #24]
 8014aa4:	2380      	movs	r3, #128	@ 0x80
 8014aa6:	025b      	lsls	r3, r3, #9
 8014aa8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8014aaa:	2380      	movs	r3, #128	@ 0x80
 8014aac:	025b      	lsls	r3, r3, #9
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d103      	bne.n	8014aba <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8014ab2:	f000 f809 	bl	8014ac8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	e000      	b.n	8014abc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	0018      	movs	r0, r3
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	b004      	add	sp, #16
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	40022000 	.word	0x40022000

08014ac8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8014ad2:	4b49      	ldr	r3, [pc, #292]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014ad4:	699a      	ldr	r2, [r3, #24]
 8014ad6:	2380      	movs	r3, #128	@ 0x80
 8014ad8:	005b      	lsls	r3, r3, #1
 8014ada:	401a      	ands	r2, r3
 8014adc:	2380      	movs	r3, #128	@ 0x80
 8014ade:	005b      	lsls	r3, r3, #1
 8014ae0:	429a      	cmp	r2, r3
 8014ae2:	d10a      	bne.n	8014afa <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8014ae4:	4b45      	ldr	r3, [pc, #276]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014ae6:	695b      	ldr	r3, [r3, #20]
 8014ae8:	2202      	movs	r2, #2
 8014aea:	431a      	orrs	r2, r3
 8014aec:	4b43      	ldr	r3, [pc, #268]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014aee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2280      	movs	r2, #128	@ 0x80
 8014af4:	0052      	lsls	r2, r2, #1
 8014af6:	4313      	orrs	r3, r2
 8014af8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8014afa:	4b3f      	ldr	r3, [pc, #252]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014afc:	699a      	ldr	r2, [r3, #24]
 8014afe:	2380      	movs	r3, #128	@ 0x80
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	401a      	ands	r2, r3
 8014b04:	2380      	movs	r3, #128	@ 0x80
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d10a      	bne.n	8014b22 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8014b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b0e:	695b      	ldr	r3, [r3, #20]
 8014b10:	2201      	movs	r2, #1
 8014b12:	431a      	orrs	r2, r3
 8014b14:	4b39      	ldr	r3, [pc, #228]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b16:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2280      	movs	r2, #128	@ 0x80
 8014b1c:	0092      	lsls	r2, r2, #2
 8014b1e:	4313      	orrs	r3, r2
 8014b20:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8014b22:	4b35      	ldr	r3, [pc, #212]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014b24:	699a      	ldr	r2, [r3, #24]
 8014b26:	2380      	movs	r3, #128	@ 0x80
 8014b28:	00db      	lsls	r3, r3, #3
 8014b2a:	401a      	ands	r2, r3
 8014b2c:	2380      	movs	r3, #128	@ 0x80
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d10a      	bne.n	8014b4a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8014b34:	4b31      	ldr	r3, [pc, #196]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b36:	695b      	ldr	r3, [r3, #20]
 8014b38:	2208      	movs	r2, #8
 8014b3a:	431a      	orrs	r2, r3
 8014b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2280      	movs	r2, #128	@ 0x80
 8014b44:	00d2      	lsls	r2, r2, #3
 8014b46:	4313      	orrs	r3, r2
 8014b48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8014b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014b4c:	699a      	ldr	r2, [r3, #24]
 8014b4e:	2380      	movs	r3, #128	@ 0x80
 8014b50:	011b      	lsls	r3, r3, #4
 8014b52:	401a      	ands	r2, r3
 8014b54:	2380      	movs	r3, #128	@ 0x80
 8014b56:	011b      	lsls	r3, r3, #4
 8014b58:	429a      	cmp	r2, r3
 8014b5a:	d10a      	bne.n	8014b72 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8014b5c:	4b27      	ldr	r3, [pc, #156]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b5e:	695b      	ldr	r3, [r3, #20]
 8014b60:	2204      	movs	r2, #4
 8014b62:	431a      	orrs	r2, r3
 8014b64:	4b25      	ldr	r3, [pc, #148]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b66:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2280      	movs	r2, #128	@ 0x80
 8014b6c:	0112      	lsls	r2, r2, #4
 8014b6e:	4313      	orrs	r3, r2
 8014b70:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8014b72:	4b21      	ldr	r3, [pc, #132]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014b74:	699a      	ldr	r2, [r3, #24]
 8014b76:	2380      	movs	r3, #128	@ 0x80
 8014b78:	019b      	lsls	r3, r3, #6
 8014b7a:	401a      	ands	r2, r3
 8014b7c:	2380      	movs	r3, #128	@ 0x80
 8014b7e:	019b      	lsls	r3, r3, #6
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d10a      	bne.n	8014b9a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8014b84:	4b1d      	ldr	r3, [pc, #116]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b86:	695b      	ldr	r3, [r3, #20]
 8014b88:	2210      	movs	r2, #16
 8014b8a:	431a      	orrs	r2, r3
 8014b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014b8e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2280      	movs	r2, #128	@ 0x80
 8014b94:	0192      	lsls	r2, r2, #6
 8014b96:	4313      	orrs	r3, r2
 8014b98:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8014b9a:	4b17      	ldr	r3, [pc, #92]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014b9c:	699a      	ldr	r2, [r3, #24]
 8014b9e:	2380      	movs	r3, #128	@ 0x80
 8014ba0:	029b      	lsls	r3, r3, #10
 8014ba2:	401a      	ands	r2, r3
 8014ba4:	2380      	movs	r3, #128	@ 0x80
 8014ba6:	029b      	lsls	r3, r3, #10
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	d109      	bne.n	8014bc0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8014bac:	4b13      	ldr	r3, [pc, #76]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014bae:	695b      	ldr	r3, [r3, #20]
 8014bb0:	2220      	movs	r2, #32
 8014bb2:	431a      	orrs	r2, r3
 8014bb4:	4b11      	ldr	r3, [pc, #68]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014bb6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2220      	movs	r2, #32
 8014bbc:	4313      	orrs	r3, r2
 8014bbe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8014bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014bc2:	699a      	ldr	r2, [r3, #24]
 8014bc4:	2380      	movs	r3, #128	@ 0x80
 8014bc6:	025b      	lsls	r3, r3, #9
 8014bc8:	401a      	ands	r2, r3
 8014bca:	2380      	movs	r3, #128	@ 0x80
 8014bcc:	025b      	lsls	r3, r3, #9
 8014bce:	429a      	cmp	r2, r3
 8014bd0:	d10a      	bne.n	8014be8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8014bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014bd4:	695b      	ldr	r3, [r3, #20]
 8014bd6:	2240      	movs	r2, #64	@ 0x40
 8014bd8:	431a      	orrs	r2, r3
 8014bda:	4b08      	ldr	r3, [pc, #32]	@ (8014bfc <FLASH_SetErrorCode+0x134>)
 8014bdc:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2280      	movs	r2, #128	@ 0x80
 8014be2:	0252      	lsls	r2, r2, #9
 8014be4:	4313      	orrs	r3, r2
 8014be6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8014be8:	4b03      	ldr	r3, [pc, #12]	@ (8014bf8 <FLASH_SetErrorCode+0x130>)
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	619a      	str	r2, [r3, #24]
}  
 8014bee:	46c0      	nop			@ (mov r8, r8)
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	b002      	add	sp, #8
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	46c0      	nop			@ (mov r8, r8)
 8014bf8:	40022000 	.word	0x40022000
 8014bfc:	2000222c 	.word	0x2000222c

08014c00 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	b084      	sub	sp, #16
 8014c04:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014c06:	4b12      	ldr	r3, [pc, #72]	@ (8014c50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	2201      	movs	r2, #1
 8014c0c:	4013      	ands	r3, r2
 8014c0e:	d019      	beq.n	8014c44 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c10:	f3ef 8310 	mrs	r3, PRIMASK
 8014c14:	607b      	str	r3, [r7, #4]
  return(result);
 8014c16:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8014c18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8014c1a:	b672      	cpsid	i
}
 8014c1c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8014c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8014c50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014c20:	4a0c      	ldr	r2, [pc, #48]	@ (8014c54 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8014c22:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8014c24:	4b0a      	ldr	r3, [pc, #40]	@ (8014c50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014c26:	4a0c      	ldr	r2, [pc, #48]	@ (8014c58 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8014c28:	60da      	str	r2, [r3, #12]
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	f383 8810 	msr	PRIMASK, r3
}
 8014c34:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8014c36:	4b06      	ldr	r3, [pc, #24]	@ (8014c50 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8014c38:	685b      	ldr	r3, [r3, #4]
 8014c3a:	2201      	movs	r2, #1
 8014c3c:	4013      	ands	r3, r2
 8014c3e:	d001      	beq.n	8014c44 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8014c40:	2301      	movs	r3, #1
 8014c42:	e000      	b.n	8014c46 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8014c44:	2300      	movs	r3, #0
}
 8014c46:	0018      	movs	r0, r3
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	b004      	add	sp, #16
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	46c0      	nop			@ (mov r8, r8)
 8014c50:	40022000 	.word	0x40022000
 8014c54:	89abcdef 	.word	0x89abcdef
 8014c58:	02030405 	.word	0x02030405

08014c5c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8014c60:	4b04      	ldr	r3, [pc, #16]	@ (8014c74 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014c62:	685a      	ldr	r2, [r3, #4]
 8014c64:	4b03      	ldr	r3, [pc, #12]	@ (8014c74 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8014c66:	2101      	movs	r1, #1
 8014c68:	430a      	orrs	r2, r1
 8014c6a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	0018      	movs	r0, r3
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	40022000 	.word	0x40022000

08014c78 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8014c78:	b5b0      	push	{r4, r5, r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014c80:	250f      	movs	r5, #15
 8014c82:	197b      	adds	r3, r7, r5
 8014c84:	2200      	movs	r2, #0
 8014c86:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014c88:	197c      	adds	r4, r7, r5
 8014c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8014cc8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014c8c:	0018      	movs	r0, r3
 8014c8e:	f7ff fea9 	bl	80149e4 <FLASH_WaitForLastOperation>
 8014c92:	0003      	movs	r3, r0
 8014c94:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014c96:	0029      	movs	r1, r5
 8014c98:	187b      	adds	r3, r7, r1
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d10c      	bne.n	8014cba <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8014ccc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	2200      	movs	r2, #0
 8014caa:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014cac:	187c      	adds	r4, r7, r1
 8014cae:	4b06      	ldr	r3, [pc, #24]	@ (8014cc8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8014cb0:	0018      	movs	r0, r3
 8014cb2:	f7ff fe97 	bl	80149e4 <FLASH_WaitForLastOperation>
 8014cb6:	0003      	movs	r3, r0
 8014cb8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8014cba:	230f      	movs	r3, #15
 8014cbc:	18fb      	adds	r3, r7, r3
 8014cbe:	781b      	ldrb	r3, [r3, #0]
}  
 8014cc0:	0018      	movs	r0, r3
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	b004      	add	sp, #16
 8014cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8014cc8:	0000c350 	.word	0x0000c350
 8014ccc:	2000222c 	.word	0x2000222c

08014cd0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8014cd0:	b5b0      	push	{r4, r5, r7, lr}
 8014cd2:	b086      	sub	sp, #24
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014cdc:	2317      	movs	r3, #23
 8014cde:	18fb      	adds	r3, r7, r3
 8014ce0:	2201      	movs	r2, #1
 8014ce2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8014ce4:	4b24      	ldr	r3, [pc, #144]	@ (8014d78 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014ce6:	7c1b      	ldrb	r3, [r3, #16]
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d101      	bne.n	8014cf0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8014cec:	2302      	movs	r3, #2
 8014cee:	e03e      	b.n	8014d6e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8014cf0:	4b21      	ldr	r3, [pc, #132]	@ (8014d78 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014cf6:	2517      	movs	r5, #23
 8014cf8:	197c      	adds	r4, r7, r5
 8014cfa:	4b20      	ldr	r3, [pc, #128]	@ (8014d7c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014cfc:	0018      	movs	r0, r3
 8014cfe:	f7ff fe71 	bl	80149e4 <FLASH_WaitForLastOperation>
 8014d02:	0003      	movs	r3, r0
 8014d04:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8014d06:	197b      	adds	r3, r7, r5
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d129      	bne.n	8014d62 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8014d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8014d78 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014d10:	2200      	movs	r2, #0
 8014d12:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2b02      	cmp	r3, #2
 8014d18:	d103      	bne.n	8014d22 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	687a      	ldr	r2, [r7, #4]
 8014d1e:	601a      	str	r2, [r3, #0]
 8014d20:	e013      	b.n	8014d4a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	d104      	bne.n	8014d32 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	b292      	uxth	r2, r2
 8014d2e:	801a      	strh	r2, [r3, #0]
 8014d30:	e00b      	b.n	8014d4a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d104      	bne.n	8014d42 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	b2d2      	uxtb	r2, r2
 8014d3e:	701a      	strb	r2, [r3, #0]
 8014d40:	e003      	b.n	8014d4a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8014d42:	2317      	movs	r3, #23
 8014d44:	18fb      	adds	r3, r7, r3
 8014d46:	2201      	movs	r2, #1
 8014d48:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8014d4a:	2217      	movs	r2, #23
 8014d4c:	18bb      	adds	r3, r7, r2
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d106      	bne.n	8014d62 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8014d54:	18bc      	adds	r4, r7, r2
 8014d56:	4b09      	ldr	r3, [pc, #36]	@ (8014d7c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8014d58:	0018      	movs	r0, r3
 8014d5a:	f7ff fe43 	bl	80149e4 <FLASH_WaitForLastOperation>
 8014d5e:	0003      	movs	r3, r0
 8014d60:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8014d62:	4b05      	ldr	r3, [pc, #20]	@ (8014d78 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8014d64:	2200      	movs	r2, #0
 8014d66:	741a      	strb	r2, [r3, #16]

  return status;
 8014d68:	2317      	movs	r3, #23
 8014d6a:	18fb      	adds	r3, r7, r3
 8014d6c:	781b      	ldrb	r3, [r3, #0]
}
 8014d6e:	0018      	movs	r0, r3
 8014d70:	46bd      	mov	sp, r7
 8014d72:	b006      	add	sp, #24
 8014d74:	bdb0      	pop	{r4, r5, r7, pc}
 8014d76:	46c0      	nop			@ (mov r8, r8)
 8014d78:	2000222c 	.word	0x2000222c
 8014d7c:	0000c350 	.word	0x0000c350

08014d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b086      	sub	sp, #24
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8014d92:	2300      	movs	r3, #0
 8014d94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8014d96:	e155      	b.n	8015044 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	697a      	ldr	r2, [r7, #20]
 8014da0:	4091      	lsls	r1, r2
 8014da2:	000a      	movs	r2, r1
 8014da4:	4013      	ands	r3, r2
 8014da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d100      	bne.n	8014db0 <HAL_GPIO_Init+0x30>
 8014dae:	e146      	b.n	801503e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	2203      	movs	r2, #3
 8014db6:	4013      	ands	r3, r2
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d005      	beq.n	8014dc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	2203      	movs	r2, #3
 8014dc2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d130      	bne.n	8014e2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	689b      	ldr	r3, [r3, #8]
 8014dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	005b      	lsls	r3, r3, #1
 8014dd2:	2203      	movs	r2, #3
 8014dd4:	409a      	lsls	r2, r3
 8014dd6:	0013      	movs	r3, r2
 8014dd8:	43da      	mvns	r2, r3
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	4013      	ands	r3, r2
 8014dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8014de0:	683b      	ldr	r3, [r7, #0]
 8014de2:	68da      	ldr	r2, [r3, #12]
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	005b      	lsls	r3, r3, #1
 8014de8:	409a      	lsls	r2, r3
 8014dea:	0013      	movs	r3, r2
 8014dec:	693a      	ldr	r2, [r7, #16]
 8014dee:	4313      	orrs	r3, r2
 8014df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	693a      	ldr	r2, [r7, #16]
 8014df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014dfe:	2201      	movs	r2, #1
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	409a      	lsls	r2, r3
 8014e04:	0013      	movs	r3, r2
 8014e06:	43da      	mvns	r2, r3
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	091b      	lsrs	r3, r3, #4
 8014e14:	2201      	movs	r2, #1
 8014e16:	401a      	ands	r2, r3
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	409a      	lsls	r2, r3
 8014e1c:	0013      	movs	r3, r2
 8014e1e:	693a      	ldr	r2, [r7, #16]
 8014e20:	4313      	orrs	r3, r2
 8014e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	693a      	ldr	r2, [r7, #16]
 8014e28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	2203      	movs	r2, #3
 8014e30:	4013      	ands	r3, r2
 8014e32:	2b03      	cmp	r3, #3
 8014e34:	d017      	beq.n	8014e66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	2203      	movs	r2, #3
 8014e42:	409a      	lsls	r2, r3
 8014e44:	0013      	movs	r3, r2
 8014e46:	43da      	mvns	r2, r3
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	4013      	ands	r3, r2
 8014e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8014e4e:	683b      	ldr	r3, [r7, #0]
 8014e50:	689a      	ldr	r2, [r3, #8]
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	409a      	lsls	r2, r3
 8014e58:	0013      	movs	r3, r2
 8014e5a:	693a      	ldr	r2, [r7, #16]
 8014e5c:	4313      	orrs	r3, r2
 8014e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	693a      	ldr	r2, [r7, #16]
 8014e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	2203      	movs	r2, #3
 8014e6c:	4013      	ands	r3, r2
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	d123      	bne.n	8014eba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8014e72:	697b      	ldr	r3, [r7, #20]
 8014e74:	08da      	lsrs	r2, r3, #3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	3208      	adds	r2, #8
 8014e7a:	0092      	lsls	r2, r2, #2
 8014e7c:	58d3      	ldr	r3, [r2, r3]
 8014e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	2207      	movs	r2, #7
 8014e84:	4013      	ands	r3, r2
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	220f      	movs	r2, #15
 8014e8a:	409a      	lsls	r2, r3
 8014e8c:	0013      	movs	r3, r2
 8014e8e:	43da      	mvns	r2, r3
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	4013      	ands	r3, r2
 8014e94:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	691a      	ldr	r2, [r3, #16]
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2107      	movs	r1, #7
 8014e9e:	400b      	ands	r3, r1
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	409a      	lsls	r2, r3
 8014ea4:	0013      	movs	r3, r2
 8014ea6:	693a      	ldr	r2, [r7, #16]
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	08da      	lsrs	r2, r3, #3
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	3208      	adds	r2, #8
 8014eb4:	0092      	lsls	r2, r2, #2
 8014eb6:	6939      	ldr	r1, [r7, #16]
 8014eb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	2203      	movs	r2, #3
 8014ec6:	409a      	lsls	r2, r3
 8014ec8:	0013      	movs	r3, r2
 8014eca:	43da      	mvns	r2, r3
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	4013      	ands	r3, r2
 8014ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	2203      	movs	r2, #3
 8014ed8:	401a      	ands	r2, r3
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	005b      	lsls	r3, r3, #1
 8014ede:	409a      	lsls	r2, r3
 8014ee0:	0013      	movs	r3, r2
 8014ee2:	693a      	ldr	r2, [r7, #16]
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	693a      	ldr	r2, [r7, #16]
 8014eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	685a      	ldr	r2, [r3, #4]
 8014ef2:	23c0      	movs	r3, #192	@ 0xc0
 8014ef4:	029b      	lsls	r3, r3, #10
 8014ef6:	4013      	ands	r3, r2
 8014ef8:	d100      	bne.n	8014efc <HAL_GPIO_Init+0x17c>
 8014efa:	e0a0      	b.n	801503e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014efc:	4b57      	ldr	r3, [pc, #348]	@ (801505c <HAL_GPIO_Init+0x2dc>)
 8014efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014f00:	4b56      	ldr	r3, [pc, #344]	@ (801505c <HAL_GPIO_Init+0x2dc>)
 8014f02:	2101      	movs	r1, #1
 8014f04:	430a      	orrs	r2, r1
 8014f06:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8014f08:	4a55      	ldr	r2, [pc, #340]	@ (8015060 <HAL_GPIO_Init+0x2e0>)
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	089b      	lsrs	r3, r3, #2
 8014f0e:	3302      	adds	r3, #2
 8014f10:	009b      	lsls	r3, r3, #2
 8014f12:	589b      	ldr	r3, [r3, r2]
 8014f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	2203      	movs	r2, #3
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	009b      	lsls	r3, r3, #2
 8014f1e:	220f      	movs	r2, #15
 8014f20:	409a      	lsls	r2, r3
 8014f22:	0013      	movs	r3, r2
 8014f24:	43da      	mvns	r2, r3
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	4013      	ands	r3, r2
 8014f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	23a0      	movs	r3, #160	@ 0xa0
 8014f30:	05db      	lsls	r3, r3, #23
 8014f32:	429a      	cmp	r2, r3
 8014f34:	d01f      	beq.n	8014f76 <HAL_GPIO_Init+0x1f6>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	4a4a      	ldr	r2, [pc, #296]	@ (8015064 <HAL_GPIO_Init+0x2e4>)
 8014f3a:	4293      	cmp	r3, r2
 8014f3c:	d019      	beq.n	8014f72 <HAL_GPIO_Init+0x1f2>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4a49      	ldr	r2, [pc, #292]	@ (8015068 <HAL_GPIO_Init+0x2e8>)
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d013      	beq.n	8014f6e <HAL_GPIO_Init+0x1ee>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4a48      	ldr	r2, [pc, #288]	@ (801506c <HAL_GPIO_Init+0x2ec>)
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	d00d      	beq.n	8014f6a <HAL_GPIO_Init+0x1ea>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4a47      	ldr	r2, [pc, #284]	@ (8015070 <HAL_GPIO_Init+0x2f0>)
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d007      	beq.n	8014f66 <HAL_GPIO_Init+0x1e6>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4a46      	ldr	r2, [pc, #280]	@ (8015074 <HAL_GPIO_Init+0x2f4>)
 8014f5a:	4293      	cmp	r3, r2
 8014f5c:	d101      	bne.n	8014f62 <HAL_GPIO_Init+0x1e2>
 8014f5e:	2305      	movs	r3, #5
 8014f60:	e00a      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f62:	2306      	movs	r3, #6
 8014f64:	e008      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f66:	2304      	movs	r3, #4
 8014f68:	e006      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f6a:	2303      	movs	r3, #3
 8014f6c:	e004      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f6e:	2302      	movs	r3, #2
 8014f70:	e002      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f72:	2301      	movs	r3, #1
 8014f74:	e000      	b.n	8014f78 <HAL_GPIO_Init+0x1f8>
 8014f76:	2300      	movs	r3, #0
 8014f78:	697a      	ldr	r2, [r7, #20]
 8014f7a:	2103      	movs	r1, #3
 8014f7c:	400a      	ands	r2, r1
 8014f7e:	0092      	lsls	r2, r2, #2
 8014f80:	4093      	lsls	r3, r2
 8014f82:	693a      	ldr	r2, [r7, #16]
 8014f84:	4313      	orrs	r3, r2
 8014f86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8014f88:	4935      	ldr	r1, [pc, #212]	@ (8015060 <HAL_GPIO_Init+0x2e0>)
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	089b      	lsrs	r3, r3, #2
 8014f8e:	3302      	adds	r3, #2
 8014f90:	009b      	lsls	r3, r3, #2
 8014f92:	693a      	ldr	r2, [r7, #16]
 8014f94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8014f96:	4b38      	ldr	r3, [pc, #224]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8014f98:	689b      	ldr	r3, [r3, #8]
 8014f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	43da      	mvns	r2, r3
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	4013      	ands	r3, r2
 8014fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	685a      	ldr	r2, [r3, #4]
 8014faa:	2380      	movs	r3, #128	@ 0x80
 8014fac:	035b      	lsls	r3, r3, #13
 8014fae:	4013      	ands	r3, r2
 8014fb0:	d003      	beq.n	8014fba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8014fb2:	693a      	ldr	r2, [r7, #16]
 8014fb4:	68fb      	ldr	r3, [r7, #12]
 8014fb6:	4313      	orrs	r3, r2
 8014fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8014fba:	4b2f      	ldr	r3, [pc, #188]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8014fbc:	693a      	ldr	r2, [r7, #16]
 8014fbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8014fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	43da      	mvns	r2, r3
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	4013      	ands	r3, r2
 8014fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	2380      	movs	r3, #128	@ 0x80
 8014fd6:	039b      	lsls	r3, r3, #14
 8014fd8:	4013      	ands	r3, r2
 8014fda:	d003      	beq.n	8014fe4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8014fdc:	693a      	ldr	r2, [r7, #16]
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	4313      	orrs	r3, r2
 8014fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8014fe4:	4b24      	ldr	r3, [pc, #144]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8014fe6:	693a      	ldr	r2, [r7, #16]
 8014fe8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8014fea:	4b23      	ldr	r3, [pc, #140]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8014fec:	685b      	ldr	r3, [r3, #4]
 8014fee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	43da      	mvns	r2, r3
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	4013      	ands	r3, r2
 8014ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	685a      	ldr	r2, [r3, #4]
 8014ffe:	2380      	movs	r3, #128	@ 0x80
 8015000:	029b      	lsls	r3, r3, #10
 8015002:	4013      	ands	r3, r2
 8015004:	d003      	beq.n	801500e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015006:	693a      	ldr	r2, [r7, #16]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	4313      	orrs	r3, r2
 801500c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801500e:	4b1a      	ldr	r3, [pc, #104]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8015010:	693a      	ldr	r2, [r7, #16]
 8015012:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015014:	4b18      	ldr	r3, [pc, #96]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	43da      	mvns	r2, r3
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	4013      	ands	r3, r2
 8015022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	685a      	ldr	r2, [r3, #4]
 8015028:	2380      	movs	r3, #128	@ 0x80
 801502a:	025b      	lsls	r3, r3, #9
 801502c:	4013      	ands	r3, r2
 801502e:	d003      	beq.n	8015038 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015030:	693a      	ldr	r2, [r7, #16]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	4313      	orrs	r3, r2
 8015036:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015038:	4b0f      	ldr	r3, [pc, #60]	@ (8015078 <HAL_GPIO_Init+0x2f8>)
 801503a:	693a      	ldr	r2, [r7, #16]
 801503c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	3301      	adds	r3, #1
 8015042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	40da      	lsrs	r2, r3
 801504c:	1e13      	subs	r3, r2, #0
 801504e:	d000      	beq.n	8015052 <HAL_GPIO_Init+0x2d2>
 8015050:	e6a2      	b.n	8014d98 <HAL_GPIO_Init+0x18>
  }
}
 8015052:	46c0      	nop			@ (mov r8, r8)
 8015054:	46c0      	nop			@ (mov r8, r8)
 8015056:	46bd      	mov	sp, r7
 8015058:	b006      	add	sp, #24
 801505a:	bd80      	pop	{r7, pc}
 801505c:	40021000 	.word	0x40021000
 8015060:	40010000 	.word	0x40010000
 8015064:	50000400 	.word	0x50000400
 8015068:	50000800 	.word	0x50000800
 801506c:	50000c00 	.word	0x50000c00
 8015070:	50001000 	.word	0x50001000
 8015074:	50001c00 	.word	0x50001c00
 8015078:	40010400 	.word	0x40010400

0801507c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	000a      	movs	r2, r1
 8015086:	1cbb      	adds	r3, r7, #2
 8015088:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	691b      	ldr	r3, [r3, #16]
 801508e:	1cba      	adds	r2, r7, #2
 8015090:	8812      	ldrh	r2, [r2, #0]
 8015092:	4013      	ands	r3, r2
 8015094:	d004      	beq.n	80150a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8015096:	230f      	movs	r3, #15
 8015098:	18fb      	adds	r3, r7, r3
 801509a:	2201      	movs	r2, #1
 801509c:	701a      	strb	r2, [r3, #0]
 801509e:	e003      	b.n	80150a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80150a0:	230f      	movs	r3, #15
 80150a2:	18fb      	adds	r3, r7, r3
 80150a4:	2200      	movs	r2, #0
 80150a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80150a8:	230f      	movs	r3, #15
 80150aa:	18fb      	adds	r3, r7, r3
 80150ac:	781b      	ldrb	r3, [r3, #0]
}
 80150ae:	0018      	movs	r0, r3
 80150b0:	46bd      	mov	sp, r7
 80150b2:	b004      	add	sp, #16
 80150b4:	bd80      	pop	{r7, pc}

080150b6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80150b6:	b580      	push	{r7, lr}
 80150b8:	b082      	sub	sp, #8
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6078      	str	r0, [r7, #4]
 80150be:	0008      	movs	r0, r1
 80150c0:	0011      	movs	r1, r2
 80150c2:	1cbb      	adds	r3, r7, #2
 80150c4:	1c02      	adds	r2, r0, #0
 80150c6:	801a      	strh	r2, [r3, #0]
 80150c8:	1c7b      	adds	r3, r7, #1
 80150ca:	1c0a      	adds	r2, r1, #0
 80150cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80150ce:	1c7b      	adds	r3, r7, #1
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d004      	beq.n	80150e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80150d6:	1cbb      	adds	r3, r7, #2
 80150d8:	881a      	ldrh	r2, [r3, #0]
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80150de:	e003      	b.n	80150e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80150e0:	1cbb      	adds	r3, r7, #2
 80150e2:	881a      	ldrh	r2, [r3, #0]
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80150e8:	46c0      	nop			@ (mov r8, r8)
 80150ea:	46bd      	mov	sp, r7
 80150ec:	b002      	add	sp, #8
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	0002      	movs	r2, r0
 80150f8:	1dbb      	adds	r3, r7, #6
 80150fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80150fc:	4b09      	ldr	r3, [pc, #36]	@ (8015124 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80150fe:	695b      	ldr	r3, [r3, #20]
 8015100:	1dba      	adds	r2, r7, #6
 8015102:	8812      	ldrh	r2, [r2, #0]
 8015104:	4013      	ands	r3, r2
 8015106:	d008      	beq.n	801511a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8015108:	4b06      	ldr	r3, [pc, #24]	@ (8015124 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801510a:	1dba      	adds	r2, r7, #6
 801510c:	8812      	ldrh	r2, [r2, #0]
 801510e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8015110:	1dbb      	adds	r3, r7, #6
 8015112:	881b      	ldrh	r3, [r3, #0]
 8015114:	0018      	movs	r0, r3
 8015116:	f7f7 fb7d 	bl	800c814 <HAL_GPIO_EXTI_Callback>
  }
}
 801511a:	46c0      	nop			@ (mov r8, r8)
 801511c:	46bd      	mov	sp, r7
 801511e:	b002      	add	sp, #8
 8015120:	bd80      	pop	{r7, pc}
 8015122:	46c0      	nop			@ (mov r8, r8)
 8015124:	40010400 	.word	0x40010400

08015128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d101      	bne.n	801513a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015136:	2301      	movs	r3, #1
 8015138:	e082      	b.n	8015240 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2241      	movs	r2, #65	@ 0x41
 801513e:	5c9b      	ldrb	r3, [r3, r2]
 8015140:	b2db      	uxtb	r3, r3
 8015142:	2b00      	cmp	r3, #0
 8015144:	d107      	bne.n	8015156 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2240      	movs	r2, #64	@ 0x40
 801514a:	2100      	movs	r1, #0
 801514c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	0018      	movs	r0, r3
 8015152:	f7f6 fe31 	bl	800bdb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2241      	movs	r2, #65	@ 0x41
 801515a:	2124      	movs	r1, #36	@ 0x24
 801515c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	681a      	ldr	r2, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2101      	movs	r1, #1
 801516a:	438a      	bics	r2, r1
 801516c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	685a      	ldr	r2, [r3, #4]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	4934      	ldr	r1, [pc, #208]	@ (8015248 <HAL_I2C_Init+0x120>)
 8015178:	400a      	ands	r2, r1
 801517a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	689a      	ldr	r2, [r3, #8]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	4931      	ldr	r1, [pc, #196]	@ (801524c <HAL_I2C_Init+0x124>)
 8015188:	400a      	ands	r2, r1
 801518a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	2b01      	cmp	r3, #1
 8015192:	d108      	bne.n	80151a6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	689a      	ldr	r2, [r3, #8]
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2180      	movs	r1, #128	@ 0x80
 801519e:	0209      	lsls	r1, r1, #8
 80151a0:	430a      	orrs	r2, r1
 80151a2:	609a      	str	r2, [r3, #8]
 80151a4:	e007      	b.n	80151b6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	689a      	ldr	r2, [r3, #8]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2184      	movs	r1, #132	@ 0x84
 80151b0:	0209      	lsls	r1, r1, #8
 80151b2:	430a      	orrs	r2, r1
 80151b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	68db      	ldr	r3, [r3, #12]
 80151ba:	2b02      	cmp	r3, #2
 80151bc:	d104      	bne.n	80151c8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2280      	movs	r2, #128	@ 0x80
 80151c4:	0112      	lsls	r2, r2, #4
 80151c6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	685a      	ldr	r2, [r3, #4]
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	491f      	ldr	r1, [pc, #124]	@ (8015250 <HAL_I2C_Init+0x128>)
 80151d4:	430a      	orrs	r2, r1
 80151d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	68da      	ldr	r2, [r3, #12]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	491a      	ldr	r1, [pc, #104]	@ (801524c <HAL_I2C_Init+0x124>)
 80151e4:	400a      	ands	r2, r1
 80151e6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	691a      	ldr	r2, [r3, #16]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	695b      	ldr	r3, [r3, #20]
 80151f0:	431a      	orrs	r2, r3
 80151f2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	699b      	ldr	r3, [r3, #24]
 80151f8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	430a      	orrs	r2, r1
 8015200:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	69d9      	ldr	r1, [r3, #28]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	6a1a      	ldr	r2, [r3, #32]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	430a      	orrs	r2, r1
 8015210:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2101      	movs	r1, #1
 801521e:	430a      	orrs	r2, r1
 8015220:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2200      	movs	r2, #0
 8015226:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	2241      	movs	r2, #65	@ 0x41
 801522c:	2120      	movs	r1, #32
 801522e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	2242      	movs	r2, #66	@ 0x42
 801523a:	2100      	movs	r1, #0
 801523c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801523e:	2300      	movs	r3, #0
}
 8015240:	0018      	movs	r0, r3
 8015242:	46bd      	mov	sp, r7
 8015244:	b002      	add	sp, #8
 8015246:	bd80      	pop	{r7, pc}
 8015248:	f0ffffff 	.word	0xf0ffffff
 801524c:	ffff7fff 	.word	0xffff7fff
 8015250:	02008000 	.word	0x02008000

08015254 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015254:	b590      	push	{r4, r7, lr}
 8015256:	b089      	sub	sp, #36	@ 0x24
 8015258:	af02      	add	r7, sp, #8
 801525a:	60f8      	str	r0, [r7, #12]
 801525c:	0008      	movs	r0, r1
 801525e:	607a      	str	r2, [r7, #4]
 8015260:	0019      	movs	r1, r3
 8015262:	230a      	movs	r3, #10
 8015264:	18fb      	adds	r3, r7, r3
 8015266:	1c02      	adds	r2, r0, #0
 8015268:	801a      	strh	r2, [r3, #0]
 801526a:	2308      	movs	r3, #8
 801526c:	18fb      	adds	r3, r7, r3
 801526e:	1c0a      	adds	r2, r1, #0
 8015270:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	2241      	movs	r2, #65	@ 0x41
 8015276:	5c9b      	ldrb	r3, [r3, r2]
 8015278:	b2db      	uxtb	r3, r3
 801527a:	2b20      	cmp	r3, #32
 801527c:	d000      	beq.n	8015280 <HAL_I2C_Master_Transmit+0x2c>
 801527e:	e0e7      	b.n	8015450 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	2240      	movs	r2, #64	@ 0x40
 8015284:	5c9b      	ldrb	r3, [r3, r2]
 8015286:	2b01      	cmp	r3, #1
 8015288:	d101      	bne.n	801528e <HAL_I2C_Master_Transmit+0x3a>
 801528a:	2302      	movs	r3, #2
 801528c:	e0e1      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2240      	movs	r2, #64	@ 0x40
 8015292:	2101      	movs	r1, #1
 8015294:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015296:	f7fe fc7d 	bl	8013b94 <HAL_GetTick>
 801529a:	0003      	movs	r3, r0
 801529c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801529e:	2380      	movs	r3, #128	@ 0x80
 80152a0:	0219      	lsls	r1, r3, #8
 80152a2:	68f8      	ldr	r0, [r7, #12]
 80152a4:	697b      	ldr	r3, [r7, #20]
 80152a6:	9300      	str	r3, [sp, #0]
 80152a8:	2319      	movs	r3, #25
 80152aa:	2201      	movs	r2, #1
 80152ac:	f002 faa4 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 80152b0:	1e03      	subs	r3, r0, #0
 80152b2:	d001      	beq.n	80152b8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80152b4:	2301      	movs	r3, #1
 80152b6:	e0cc      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2241      	movs	r2, #65	@ 0x41
 80152bc:	2121      	movs	r1, #33	@ 0x21
 80152be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	2242      	movs	r2, #66	@ 0x42
 80152c4:	2110      	movs	r1, #16
 80152c6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	687a      	ldr	r2, [r7, #4]
 80152d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2208      	movs	r2, #8
 80152d8:	18ba      	adds	r2, r7, r2
 80152da:	8812      	ldrh	r2, [r2, #0]
 80152dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	2200      	movs	r2, #0
 80152e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80152e8:	b29b      	uxth	r3, r3
 80152ea:	2bff      	cmp	r3, #255	@ 0xff
 80152ec:	d911      	bls.n	8015312 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	22ff      	movs	r2, #255	@ 0xff
 80152f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80152f8:	b2da      	uxtb	r2, r3
 80152fa:	2380      	movs	r3, #128	@ 0x80
 80152fc:	045c      	lsls	r4, r3, #17
 80152fe:	230a      	movs	r3, #10
 8015300:	18fb      	adds	r3, r7, r3
 8015302:	8819      	ldrh	r1, [r3, #0]
 8015304:	68f8      	ldr	r0, [r7, #12]
 8015306:	4b55      	ldr	r3, [pc, #340]	@ (801545c <HAL_I2C_Master_Transmit+0x208>)
 8015308:	9300      	str	r3, [sp, #0]
 801530a:	0023      	movs	r3, r4
 801530c:	f002 fcc6 	bl	8017c9c <I2C_TransferConfig>
 8015310:	e075      	b.n	80153fe <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015316:	b29a      	uxth	r2, r3
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015320:	b2da      	uxtb	r2, r3
 8015322:	2380      	movs	r3, #128	@ 0x80
 8015324:	049c      	lsls	r4, r3, #18
 8015326:	230a      	movs	r3, #10
 8015328:	18fb      	adds	r3, r7, r3
 801532a:	8819      	ldrh	r1, [r3, #0]
 801532c:	68f8      	ldr	r0, [r7, #12]
 801532e:	4b4b      	ldr	r3, [pc, #300]	@ (801545c <HAL_I2C_Master_Transmit+0x208>)
 8015330:	9300      	str	r3, [sp, #0]
 8015332:	0023      	movs	r3, r4
 8015334:	f002 fcb2 	bl	8017c9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015338:	e061      	b.n	80153fe <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801533a:	697a      	ldr	r2, [r7, #20]
 801533c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	0018      	movs	r0, r3
 8015342:	f002 faa7 	bl	8017894 <I2C_WaitOnTXISFlagUntilTimeout>
 8015346:	1e03      	subs	r3, r0, #0
 8015348:	d001      	beq.n	801534e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801534a:	2301      	movs	r3, #1
 801534c:	e081      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015352:	781a      	ldrb	r2, [r3, #0]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801535e:	1c5a      	adds	r2, r3, #1
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015368:	b29b      	uxth	r3, r3
 801536a:	3b01      	subs	r3, #1
 801536c:	b29a      	uxth	r2, r3
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015376:	3b01      	subs	r3, #1
 8015378:	b29a      	uxth	r2, r3
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015382:	b29b      	uxth	r3, r3
 8015384:	2b00      	cmp	r3, #0
 8015386:	d03a      	beq.n	80153fe <HAL_I2C_Master_Transmit+0x1aa>
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801538c:	2b00      	cmp	r3, #0
 801538e:	d136      	bne.n	80153fe <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	0013      	movs	r3, r2
 801539a:	2200      	movs	r2, #0
 801539c:	2180      	movs	r1, #128	@ 0x80
 801539e:	f002 fa2b 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 80153a2:	1e03      	subs	r3, r0, #0
 80153a4:	d001      	beq.n	80153aa <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80153a6:	2301      	movs	r3, #1
 80153a8:	e053      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	2bff      	cmp	r3, #255	@ 0xff
 80153b2:	d911      	bls.n	80153d8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	22ff      	movs	r2, #255	@ 0xff
 80153b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153be:	b2da      	uxtb	r2, r3
 80153c0:	2380      	movs	r3, #128	@ 0x80
 80153c2:	045c      	lsls	r4, r3, #17
 80153c4:	230a      	movs	r3, #10
 80153c6:	18fb      	adds	r3, r7, r3
 80153c8:	8819      	ldrh	r1, [r3, #0]
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	2300      	movs	r3, #0
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	0023      	movs	r3, r4
 80153d2:	f002 fc63 	bl	8017c9c <I2C_TransferConfig>
 80153d6:	e012      	b.n	80153fe <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80153dc:	b29a      	uxth	r2, r3
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153e6:	b2da      	uxtb	r2, r3
 80153e8:	2380      	movs	r3, #128	@ 0x80
 80153ea:	049c      	lsls	r4, r3, #18
 80153ec:	230a      	movs	r3, #10
 80153ee:	18fb      	adds	r3, r7, r3
 80153f0:	8819      	ldrh	r1, [r3, #0]
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	2300      	movs	r3, #0
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	0023      	movs	r3, r4
 80153fa:	f002 fc4f 	bl	8017c9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015402:	b29b      	uxth	r3, r3
 8015404:	2b00      	cmp	r3, #0
 8015406:	d198      	bne.n	801533a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015408:	697a      	ldr	r2, [r7, #20]
 801540a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	0018      	movs	r0, r3
 8015410:	f002 fa86 	bl	8017920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015414:	1e03      	subs	r3, r0, #0
 8015416:	d001      	beq.n	801541c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8015418:	2301      	movs	r3, #1
 801541a:	e01a      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	2220      	movs	r2, #32
 8015422:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	685a      	ldr	r2, [r3, #4]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	490c      	ldr	r1, [pc, #48]	@ (8015460 <HAL_I2C_Master_Transmit+0x20c>)
 8015430:	400a      	ands	r2, r1
 8015432:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	2241      	movs	r2, #65	@ 0x41
 8015438:	2120      	movs	r1, #32
 801543a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	2242      	movs	r2, #66	@ 0x42
 8015440:	2100      	movs	r1, #0
 8015442:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2240      	movs	r2, #64	@ 0x40
 8015448:	2100      	movs	r1, #0
 801544a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801544c:	2300      	movs	r3, #0
 801544e:	e000      	b.n	8015452 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8015450:	2302      	movs	r3, #2
  }
}
 8015452:	0018      	movs	r0, r3
 8015454:	46bd      	mov	sp, r7
 8015456:	b007      	add	sp, #28
 8015458:	bd90      	pop	{r4, r7, pc}
 801545a:	46c0      	nop			@ (mov r8, r8)
 801545c:	80002000 	.word	0x80002000
 8015460:	fe00e800 	.word	0xfe00e800

08015464 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015464:	b590      	push	{r4, r7, lr}
 8015466:	b089      	sub	sp, #36	@ 0x24
 8015468:	af02      	add	r7, sp, #8
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	0008      	movs	r0, r1
 801546e:	607a      	str	r2, [r7, #4]
 8015470:	0019      	movs	r1, r3
 8015472:	230a      	movs	r3, #10
 8015474:	18fb      	adds	r3, r7, r3
 8015476:	1c02      	adds	r2, r0, #0
 8015478:	801a      	strh	r2, [r3, #0]
 801547a:	2308      	movs	r3, #8
 801547c:	18fb      	adds	r3, r7, r3
 801547e:	1c0a      	adds	r2, r1, #0
 8015480:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2241      	movs	r2, #65	@ 0x41
 8015486:	5c9b      	ldrb	r3, [r3, r2]
 8015488:	b2db      	uxtb	r3, r3
 801548a:	2b20      	cmp	r3, #32
 801548c:	d000      	beq.n	8015490 <HAL_I2C_Master_Receive+0x2c>
 801548e:	e0e8      	b.n	8015662 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2240      	movs	r2, #64	@ 0x40
 8015494:	5c9b      	ldrb	r3, [r3, r2]
 8015496:	2b01      	cmp	r3, #1
 8015498:	d101      	bne.n	801549e <HAL_I2C_Master_Receive+0x3a>
 801549a:	2302      	movs	r3, #2
 801549c:	e0e2      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2240      	movs	r2, #64	@ 0x40
 80154a2:	2101      	movs	r1, #1
 80154a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80154a6:	f7fe fb75 	bl	8013b94 <HAL_GetTick>
 80154aa:	0003      	movs	r3, r0
 80154ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80154ae:	2380      	movs	r3, #128	@ 0x80
 80154b0:	0219      	lsls	r1, r3, #8
 80154b2:	68f8      	ldr	r0, [r7, #12]
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	9300      	str	r3, [sp, #0]
 80154b8:	2319      	movs	r3, #25
 80154ba:	2201      	movs	r2, #1
 80154bc:	f002 f99c 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 80154c0:	1e03      	subs	r3, r0, #0
 80154c2:	d001      	beq.n	80154c8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80154c4:	2301      	movs	r3, #1
 80154c6:	e0cd      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2241      	movs	r2, #65	@ 0x41
 80154cc:	2122      	movs	r1, #34	@ 0x22
 80154ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	2242      	movs	r2, #66	@ 0x42
 80154d4:	2110      	movs	r1, #16
 80154d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2200      	movs	r2, #0
 80154dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	687a      	ldr	r2, [r7, #4]
 80154e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	2208      	movs	r2, #8
 80154e8:	18ba      	adds	r2, r7, r2
 80154ea:	8812      	ldrh	r2, [r2, #0]
 80154ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2200      	movs	r2, #0
 80154f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80154f8:	b29b      	uxth	r3, r3
 80154fa:	2bff      	cmp	r3, #255	@ 0xff
 80154fc:	d911      	bls.n	8015522 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	22ff      	movs	r2, #255	@ 0xff
 8015502:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015508:	b2da      	uxtb	r2, r3
 801550a:	2380      	movs	r3, #128	@ 0x80
 801550c:	045c      	lsls	r4, r3, #17
 801550e:	230a      	movs	r3, #10
 8015510:	18fb      	adds	r3, r7, r3
 8015512:	8819      	ldrh	r1, [r3, #0]
 8015514:	68f8      	ldr	r0, [r7, #12]
 8015516:	4b55      	ldr	r3, [pc, #340]	@ (801566c <HAL_I2C_Master_Receive+0x208>)
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	0023      	movs	r3, r4
 801551c:	f002 fbbe 	bl	8017c9c <I2C_TransferConfig>
 8015520:	e076      	b.n	8015610 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015526:	b29a      	uxth	r2, r3
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015530:	b2da      	uxtb	r2, r3
 8015532:	2380      	movs	r3, #128	@ 0x80
 8015534:	049c      	lsls	r4, r3, #18
 8015536:	230a      	movs	r3, #10
 8015538:	18fb      	adds	r3, r7, r3
 801553a:	8819      	ldrh	r1, [r3, #0]
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	4b4b      	ldr	r3, [pc, #300]	@ (801566c <HAL_I2C_Master_Receive+0x208>)
 8015540:	9300      	str	r3, [sp, #0]
 8015542:	0023      	movs	r3, r4
 8015544:	f002 fbaa 	bl	8017c9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015548:	e062      	b.n	8015610 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801554a:	697a      	ldr	r2, [r7, #20]
 801554c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	0018      	movs	r0, r3
 8015552:	f002 fa29 	bl	80179a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8015556:	1e03      	subs	r3, r0, #0
 8015558:	d001      	beq.n	801555e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801555a:	2301      	movs	r3, #1
 801555c:	e082      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015568:	b2d2      	uxtb	r2, r2
 801556a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015570:	1c5a      	adds	r2, r3, #1
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801557a:	3b01      	subs	r3, #1
 801557c:	b29a      	uxth	r2, r3
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015586:	b29b      	uxth	r3, r3
 8015588:	3b01      	subs	r3, #1
 801558a:	b29a      	uxth	r2, r3
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015594:	b29b      	uxth	r3, r3
 8015596:	2b00      	cmp	r3, #0
 8015598:	d03a      	beq.n	8015610 <HAL_I2C_Master_Receive+0x1ac>
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d136      	bne.n	8015610 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80155a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	9300      	str	r3, [sp, #0]
 80155aa:	0013      	movs	r3, r2
 80155ac:	2200      	movs	r2, #0
 80155ae:	2180      	movs	r1, #128	@ 0x80
 80155b0:	f002 f922 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 80155b4:	1e03      	subs	r3, r0, #0
 80155b6:	d001      	beq.n	80155bc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80155b8:	2301      	movs	r3, #1
 80155ba:	e053      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155c0:	b29b      	uxth	r3, r3
 80155c2:	2bff      	cmp	r3, #255	@ 0xff
 80155c4:	d911      	bls.n	80155ea <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	22ff      	movs	r2, #255	@ 0xff
 80155ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	2380      	movs	r3, #128	@ 0x80
 80155d4:	045c      	lsls	r4, r3, #17
 80155d6:	230a      	movs	r3, #10
 80155d8:	18fb      	adds	r3, r7, r3
 80155da:	8819      	ldrh	r1, [r3, #0]
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	2300      	movs	r3, #0
 80155e0:	9300      	str	r3, [sp, #0]
 80155e2:	0023      	movs	r3, r4
 80155e4:	f002 fb5a 	bl	8017c9c <I2C_TransferConfig>
 80155e8:	e012      	b.n	8015610 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155f8:	b2da      	uxtb	r2, r3
 80155fa:	2380      	movs	r3, #128	@ 0x80
 80155fc:	049c      	lsls	r4, r3, #18
 80155fe:	230a      	movs	r3, #10
 8015600:	18fb      	adds	r3, r7, r3
 8015602:	8819      	ldrh	r1, [r3, #0]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	2300      	movs	r3, #0
 8015608:	9300      	str	r3, [sp, #0]
 801560a:	0023      	movs	r3, r4
 801560c:	f002 fb46 	bl	8017c9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015614:	b29b      	uxth	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	d197      	bne.n	801554a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801561a:	697a      	ldr	r2, [r7, #20]
 801561c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	0018      	movs	r0, r3
 8015622:	f002 f97d 	bl	8017920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015626:	1e03      	subs	r3, r0, #0
 8015628:	d001      	beq.n	801562e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801562a:	2301      	movs	r3, #1
 801562c:	e01a      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	2220      	movs	r2, #32
 8015634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	490b      	ldr	r1, [pc, #44]	@ (8015670 <HAL_I2C_Master_Receive+0x20c>)
 8015642:	400a      	ands	r2, r1
 8015644:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	2241      	movs	r2, #65	@ 0x41
 801564a:	2120      	movs	r1, #32
 801564c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	2242      	movs	r2, #66	@ 0x42
 8015652:	2100      	movs	r1, #0
 8015654:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2240      	movs	r2, #64	@ 0x40
 801565a:	2100      	movs	r1, #0
 801565c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801565e:	2300      	movs	r3, #0
 8015660:	e000      	b.n	8015664 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8015662:	2302      	movs	r3, #2
  }
}
 8015664:	0018      	movs	r0, r3
 8015666:	46bd      	mov	sp, r7
 8015668:	b007      	add	sp, #28
 801566a:	bd90      	pop	{r4, r7, pc}
 801566c:	80002400 	.word	0x80002400
 8015670:	fe00e800 	.word	0xfe00e800

08015674 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8015674:	b5b0      	push	{r4, r5, r7, lr}
 8015676:	b088      	sub	sp, #32
 8015678:	af02      	add	r7, sp, #8
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	0008      	movs	r0, r1
 801567e:	607a      	str	r2, [r7, #4]
 8015680:	0019      	movs	r1, r3
 8015682:	230a      	movs	r3, #10
 8015684:	18fb      	adds	r3, r7, r3
 8015686:	1c02      	adds	r2, r0, #0
 8015688:	801a      	strh	r2, [r3, #0]
 801568a:	2308      	movs	r3, #8
 801568c:	18fb      	adds	r3, r7, r3
 801568e:	1c0a      	adds	r2, r1, #0
 8015690:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	2241      	movs	r2, #65	@ 0x41
 8015696:	5c9b      	ldrb	r3, [r3, r2]
 8015698:	b2db      	uxtb	r3, r3
 801569a:	2b20      	cmp	r3, #32
 801569c:	d000      	beq.n	80156a0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801569e:	e0dd      	b.n	801585c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	699a      	ldr	r2, [r3, #24]
 80156a6:	2380      	movs	r3, #128	@ 0x80
 80156a8:	021b      	lsls	r3, r3, #8
 80156aa:	401a      	ands	r2, r3
 80156ac:	2380      	movs	r3, #128	@ 0x80
 80156ae:	021b      	lsls	r3, r3, #8
 80156b0:	429a      	cmp	r2, r3
 80156b2:	d101      	bne.n	80156b8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80156b4:	2302      	movs	r3, #2
 80156b6:	e0d2      	b.n	801585e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2240      	movs	r2, #64	@ 0x40
 80156bc:	5c9b      	ldrb	r3, [r3, r2]
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d101      	bne.n	80156c6 <HAL_I2C_Master_Transmit_DMA+0x52>
 80156c2:	2302      	movs	r3, #2
 80156c4:	e0cb      	b.n	801585e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2240      	movs	r2, #64	@ 0x40
 80156ca:	2101      	movs	r1, #1
 80156cc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2241      	movs	r2, #65	@ 0x41
 80156d2:	2121      	movs	r1, #33	@ 0x21
 80156d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	2242      	movs	r2, #66	@ 0x42
 80156da:	2110      	movs	r1, #16
 80156dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2200      	movs	r2, #0
 80156e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	2208      	movs	r2, #8
 80156ee:	18ba      	adds	r2, r7, r2
 80156f0:	8812      	ldrh	r2, [r2, #0]
 80156f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	4a5c      	ldr	r2, [pc, #368]	@ (8015868 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80156f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	4a5b      	ldr	r2, [pc, #364]	@ (801586c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80156fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015704:	b29b      	uxth	r3, r3
 8015706:	2bff      	cmp	r3, #255	@ 0xff
 8015708:	d906      	bls.n	8015718 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	22ff      	movs	r2, #255	@ 0xff
 801570e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8015710:	2380      	movs	r3, #128	@ 0x80
 8015712:	045b      	lsls	r3, r3, #17
 8015714:	617b      	str	r3, [r7, #20]
 8015716:	e007      	b.n	8015728 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801571c:	b29a      	uxth	r2, r3
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8015722:	2380      	movs	r3, #128	@ 0x80
 8015724:	049b      	lsls	r3, r3, #18
 8015726:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801572c:	2b00      	cmp	r3, #0
 801572e:	d100      	bne.n	8015732 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8015730:	e078      	b.n	8015824 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015736:	2b00      	cmp	r3, #0
 8015738:	d023      	beq.n	8015782 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801573e:	4a4c      	ldr	r2, [pc, #304]	@ (8015870 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8015740:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015746:	4a4b      	ldr	r2, [pc, #300]	@ (8015874 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8015748:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801574e:	2200      	movs	r2, #0
 8015750:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015756:	2200      	movs	r2, #0
 8015758:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801575e:	6879      	ldr	r1, [r7, #4]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	3328      	adds	r3, #40	@ 0x28
 8015766:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801576c:	2513      	movs	r5, #19
 801576e:	197c      	adds	r4, r7, r5
 8015770:	f7fe ff62 	bl	8014638 <HAL_DMA_Start_IT>
 8015774:	0003      	movs	r3, r0
 8015776:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015778:	197b      	adds	r3, r7, r5
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d13d      	bne.n	80157fc <HAL_I2C_Master_Transmit_DMA+0x188>
 8015780:	e013      	b.n	80157aa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	2241      	movs	r2, #65	@ 0x41
 8015786:	2120      	movs	r1, #32
 8015788:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2242      	movs	r2, #66	@ 0x42
 801578e:	2100      	movs	r1, #0
 8015790:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015796:	2280      	movs	r2, #128	@ 0x80
 8015798:	431a      	orrs	r2, r3
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2240      	movs	r2, #64	@ 0x40
 80157a2:	2100      	movs	r1, #0
 80157a4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80157a6:	2301      	movs	r3, #1
 80157a8:	e059      	b.n	801585e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	697c      	ldr	r4, [r7, #20]
 80157b2:	230a      	movs	r3, #10
 80157b4:	18fb      	adds	r3, r7, r3
 80157b6:	8819      	ldrh	r1, [r3, #0]
 80157b8:	68f8      	ldr	r0, [r7, #12]
 80157ba:	4b2f      	ldr	r3, [pc, #188]	@ (8015878 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80157bc:	9300      	str	r3, [sp, #0]
 80157be:	0023      	movs	r3, r4
 80157c0:	f002 fa6c 	bl	8017c9c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80157c8:	b29a      	uxth	r2, r3
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80157ce:	1ad3      	subs	r3, r2, r3
 80157d0:	b29a      	uxth	r2, r3
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	2240      	movs	r2, #64	@ 0x40
 80157da:	2100      	movs	r1, #0
 80157dc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	2110      	movs	r1, #16
 80157e2:	0018      	movs	r0, r3
 80157e4:	f002 fa94 	bl	8017d10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	681a      	ldr	r2, [r3, #0]
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	2180      	movs	r1, #128	@ 0x80
 80157f4:	01c9      	lsls	r1, r1, #7
 80157f6:	430a      	orrs	r2, r1
 80157f8:	601a      	str	r2, [r3, #0]
 80157fa:	e02d      	b.n	8015858 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2241      	movs	r2, #65	@ 0x41
 8015800:	2120      	movs	r1, #32
 8015802:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2242      	movs	r2, #66	@ 0x42
 8015808:	2100      	movs	r1, #0
 801580a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015810:	2210      	movs	r2, #16
 8015812:	431a      	orrs	r2, r3
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	2240      	movs	r2, #64	@ 0x40
 801581c:	2100      	movs	r1, #0
 801581e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015820:	2301      	movs	r3, #1
 8015822:	e01c      	b.n	801585e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	4a15      	ldr	r2, [pc, #84]	@ (801587c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8015828:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801582e:	b2da      	uxtb	r2, r3
 8015830:	2380      	movs	r3, #128	@ 0x80
 8015832:	049c      	lsls	r4, r3, #18
 8015834:	230a      	movs	r3, #10
 8015836:	18fb      	adds	r3, r7, r3
 8015838:	8819      	ldrh	r1, [r3, #0]
 801583a:	68f8      	ldr	r0, [r7, #12]
 801583c:	4b0e      	ldr	r3, [pc, #56]	@ (8015878 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801583e:	9300      	str	r3, [sp, #0]
 8015840:	0023      	movs	r3, r4
 8015842:	f002 fa2b 	bl	8017c9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2240      	movs	r2, #64	@ 0x40
 801584a:	2100      	movs	r1, #0
 801584c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2101      	movs	r1, #1
 8015852:	0018      	movs	r0, r3
 8015854:	f002 fa5c 	bl	8017d10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	e000      	b.n	801585e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801585c:	2302      	movs	r3, #2
  }
}
 801585e:	0018      	movs	r0, r3
 8015860:	46bd      	mov	sp, r7
 8015862:	b006      	add	sp, #24
 8015864:	bdb0      	pop	{r4, r5, r7, pc}
 8015866:	46c0      	nop			@ (mov r8, r8)
 8015868:	ffff0000 	.word	0xffff0000
 801586c:	0801654d 	.word	0x0801654d
 8015870:	08017649 	.word	0x08017649
 8015874:	08017789 	.word	0x08017789
 8015878:	80002000 	.word	0x80002000
 801587c:	080160a1 	.word	0x080160a1

08015880 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8015880:	b5b0      	push	{r4, r5, r7, lr}
 8015882:	b088      	sub	sp, #32
 8015884:	af02      	add	r7, sp, #8
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	0008      	movs	r0, r1
 801588a:	607a      	str	r2, [r7, #4]
 801588c:	0019      	movs	r1, r3
 801588e:	230a      	movs	r3, #10
 8015890:	18fb      	adds	r3, r7, r3
 8015892:	1c02      	adds	r2, r0, #0
 8015894:	801a      	strh	r2, [r3, #0]
 8015896:	2308      	movs	r3, #8
 8015898:	18fb      	adds	r3, r7, r3
 801589a:	1c0a      	adds	r2, r1, #0
 801589c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2241      	movs	r2, #65	@ 0x41
 80158a2:	5c9b      	ldrb	r3, [r3, r2]
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	2b20      	cmp	r3, #32
 80158a8:	d000      	beq.n	80158ac <HAL_I2C_Master_Receive_DMA+0x2c>
 80158aa:	e0dd      	b.n	8015a68 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	699a      	ldr	r2, [r3, #24]
 80158b2:	2380      	movs	r3, #128	@ 0x80
 80158b4:	021b      	lsls	r3, r3, #8
 80158b6:	401a      	ands	r2, r3
 80158b8:	2380      	movs	r3, #128	@ 0x80
 80158ba:	021b      	lsls	r3, r3, #8
 80158bc:	429a      	cmp	r2, r3
 80158be:	d101      	bne.n	80158c4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80158c0:	2302      	movs	r3, #2
 80158c2:	e0d2      	b.n	8015a6a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	2240      	movs	r2, #64	@ 0x40
 80158c8:	5c9b      	ldrb	r3, [r3, r2]
 80158ca:	2b01      	cmp	r3, #1
 80158cc:	d101      	bne.n	80158d2 <HAL_I2C_Master_Receive_DMA+0x52>
 80158ce:	2302      	movs	r3, #2
 80158d0:	e0cb      	b.n	8015a6a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	2240      	movs	r2, #64	@ 0x40
 80158d6:	2101      	movs	r1, #1
 80158d8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	2241      	movs	r2, #65	@ 0x41
 80158de:	2122      	movs	r1, #34	@ 0x22
 80158e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2242      	movs	r2, #66	@ 0x42
 80158e6:	2110      	movs	r1, #16
 80158e8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2200      	movs	r2, #0
 80158ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	687a      	ldr	r2, [r7, #4]
 80158f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2208      	movs	r2, #8
 80158fa:	18ba      	adds	r2, r7, r2
 80158fc:	8812      	ldrh	r2, [r2, #0]
 80158fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	4a5c      	ldr	r2, [pc, #368]	@ (8015a74 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8015904:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	4a5b      	ldr	r2, [pc, #364]	@ (8015a78 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 801590a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015910:	b29b      	uxth	r3, r3
 8015912:	2bff      	cmp	r3, #255	@ 0xff
 8015914:	d906      	bls.n	8015924 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	22ff      	movs	r2, #255	@ 0xff
 801591a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 801591c:	2380      	movs	r3, #128	@ 0x80
 801591e:	045b      	lsls	r3, r3, #17
 8015920:	617b      	str	r3, [r7, #20]
 8015922:	e007      	b.n	8015934 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015928:	b29a      	uxth	r2, r3
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 801592e:	2380      	movs	r3, #128	@ 0x80
 8015930:	049b      	lsls	r3, r3, #18
 8015932:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015938:	2b00      	cmp	r3, #0
 801593a:	d100      	bne.n	801593e <HAL_I2C_Master_Receive_DMA+0xbe>
 801593c:	e078      	b.n	8015a30 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015942:	2b00      	cmp	r3, #0
 8015944:	d023      	beq.n	801598e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801594a:	4a4c      	ldr	r2, [pc, #304]	@ (8015a7c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 801594c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015952:	4a4b      	ldr	r2, [pc, #300]	@ (8015a80 <HAL_I2C_Master_Receive_DMA+0x200>)
 8015954:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801595a:	2200      	movs	r2, #0
 801595c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015962:	2200      	movs	r2, #0
 8015964:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	3324      	adds	r3, #36	@ 0x24
 8015970:	0019      	movs	r1, r3
 8015972:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8015978:	2513      	movs	r5, #19
 801597a:	197c      	adds	r4, r7, r5
 801597c:	f7fe fe5c 	bl	8014638 <HAL_DMA_Start_IT>
 8015980:	0003      	movs	r3, r0
 8015982:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8015984:	197b      	adds	r3, r7, r5
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d13d      	bne.n	8015a08 <HAL_I2C_Master_Receive_DMA+0x188>
 801598c:	e013      	b.n	80159b6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	2241      	movs	r2, #65	@ 0x41
 8015992:	2120      	movs	r1, #32
 8015994:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2242      	movs	r2, #66	@ 0x42
 801599a:	2100      	movs	r1, #0
 801599c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80159a2:	2280      	movs	r2, #128	@ 0x80
 80159a4:	431a      	orrs	r2, r3
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	2240      	movs	r2, #64	@ 0x40
 80159ae:	2100      	movs	r1, #0
 80159b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80159b2:	2301      	movs	r3, #1
 80159b4:	e059      	b.n	8015a6a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159ba:	b2da      	uxtb	r2, r3
 80159bc:	697c      	ldr	r4, [r7, #20]
 80159be:	230a      	movs	r3, #10
 80159c0:	18fb      	adds	r3, r7, r3
 80159c2:	8819      	ldrh	r1, [r3, #0]
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	4b2f      	ldr	r3, [pc, #188]	@ (8015a84 <HAL_I2C_Master_Receive_DMA+0x204>)
 80159c8:	9300      	str	r3, [sp, #0]
 80159ca:	0023      	movs	r3, r4
 80159cc:	f002 f966 	bl	8017c9c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159da:	1ad3      	subs	r3, r2, r3
 80159dc:	b29a      	uxth	r2, r3
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2240      	movs	r2, #64	@ 0x40
 80159e6:	2100      	movs	r1, #0
 80159e8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2110      	movs	r1, #16
 80159ee:	0018      	movs	r0, r3
 80159f0:	f002 f98e 	bl	8017d10 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	2180      	movs	r1, #128	@ 0x80
 8015a00:	0209      	lsls	r1, r1, #8
 8015a02:	430a      	orrs	r2, r1
 8015a04:	601a      	str	r2, [r3, #0]
 8015a06:	e02d      	b.n	8015a64 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2241      	movs	r2, #65	@ 0x41
 8015a0c:	2120      	movs	r1, #32
 8015a0e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2242      	movs	r2, #66	@ 0x42
 8015a14:	2100      	movs	r1, #0
 8015a16:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a1c:	2210      	movs	r2, #16
 8015a1e:	431a      	orrs	r2, r3
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	2240      	movs	r2, #64	@ 0x40
 8015a28:	2100      	movs	r1, #0
 8015a2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e01c      	b.n	8015a6a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	4a15      	ldr	r2, [pc, #84]	@ (8015a88 <HAL_I2C_Master_Receive_DMA+0x208>)
 8015a34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015a3a:	b2da      	uxtb	r2, r3
 8015a3c:	2380      	movs	r3, #128	@ 0x80
 8015a3e:	049c      	lsls	r4, r3, #18
 8015a40:	230a      	movs	r3, #10
 8015a42:	18fb      	adds	r3, r7, r3
 8015a44:	8819      	ldrh	r1, [r3, #0]
 8015a46:	68f8      	ldr	r0, [r7, #12]
 8015a48:	4b0e      	ldr	r3, [pc, #56]	@ (8015a84 <HAL_I2C_Master_Receive_DMA+0x204>)
 8015a4a:	9300      	str	r3, [sp, #0]
 8015a4c:	0023      	movs	r3, r4
 8015a4e:	f002 f925 	bl	8017c9c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2240      	movs	r2, #64	@ 0x40
 8015a56:	2100      	movs	r1, #0
 8015a58:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2101      	movs	r1, #1
 8015a5e:	0018      	movs	r0, r3
 8015a60:	f002 f956 	bl	8017d10 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8015a64:	2300      	movs	r3, #0
 8015a66:	e000      	b.n	8015a6a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8015a68:	2302      	movs	r3, #2
  }
}
 8015a6a:	0018      	movs	r0, r3
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	b006      	add	sp, #24
 8015a70:	bdb0      	pop	{r4, r5, r7, pc}
 8015a72:	46c0      	nop			@ (mov r8, r8)
 8015a74:	ffff0000 	.word	0xffff0000
 8015a78:	0801654d 	.word	0x0801654d
 8015a7c:	080176e9 	.word	0x080176e9
 8015a80:	08017789 	.word	0x08017789
 8015a84:	80002400 	.word	0x80002400
 8015a88:	080160a1 	.word	0x080160a1

08015a8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015a8c:	b590      	push	{r4, r7, lr}
 8015a8e:	b089      	sub	sp, #36	@ 0x24
 8015a90:	af02      	add	r7, sp, #8
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	000c      	movs	r4, r1
 8015a96:	0010      	movs	r0, r2
 8015a98:	0019      	movs	r1, r3
 8015a9a:	230a      	movs	r3, #10
 8015a9c:	18fb      	adds	r3, r7, r3
 8015a9e:	1c22      	adds	r2, r4, #0
 8015aa0:	801a      	strh	r2, [r3, #0]
 8015aa2:	2308      	movs	r3, #8
 8015aa4:	18fb      	adds	r3, r7, r3
 8015aa6:	1c02      	adds	r2, r0, #0
 8015aa8:	801a      	strh	r2, [r3, #0]
 8015aaa:	1dbb      	adds	r3, r7, #6
 8015aac:	1c0a      	adds	r2, r1, #0
 8015aae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2241      	movs	r2, #65	@ 0x41
 8015ab4:	5c9b      	ldrb	r3, [r3, r2]
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	2b20      	cmp	r3, #32
 8015aba:	d000      	beq.n	8015abe <HAL_I2C_Mem_Read+0x32>
 8015abc:	e110      	b.n	8015ce0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8015abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d004      	beq.n	8015ace <HAL_I2C_Mem_Read+0x42>
 8015ac4:	232c      	movs	r3, #44	@ 0x2c
 8015ac6:	18fb      	adds	r3, r7, r3
 8015ac8:	881b      	ldrh	r3, [r3, #0]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d105      	bne.n	8015ada <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2280      	movs	r2, #128	@ 0x80
 8015ad2:	0092      	lsls	r2, r2, #2
 8015ad4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	e103      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	2240      	movs	r2, #64	@ 0x40
 8015ade:	5c9b      	ldrb	r3, [r3, r2]
 8015ae0:	2b01      	cmp	r3, #1
 8015ae2:	d101      	bne.n	8015ae8 <HAL_I2C_Mem_Read+0x5c>
 8015ae4:	2302      	movs	r3, #2
 8015ae6:	e0fc      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2240      	movs	r2, #64	@ 0x40
 8015aec:	2101      	movs	r1, #1
 8015aee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015af0:	f7fe f850 	bl	8013b94 <HAL_GetTick>
 8015af4:	0003      	movs	r3, r0
 8015af6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015af8:	2380      	movs	r3, #128	@ 0x80
 8015afa:	0219      	lsls	r1, r3, #8
 8015afc:	68f8      	ldr	r0, [r7, #12]
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	9300      	str	r3, [sp, #0]
 8015b02:	2319      	movs	r3, #25
 8015b04:	2201      	movs	r2, #1
 8015b06:	f001 fe77 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 8015b0a:	1e03      	subs	r3, r0, #0
 8015b0c:	d001      	beq.n	8015b12 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e0e7      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	2241      	movs	r2, #65	@ 0x41
 8015b16:	2122      	movs	r1, #34	@ 0x22
 8015b18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	2242      	movs	r2, #66	@ 0x42
 8015b1e:	2140      	movs	r1, #64	@ 0x40
 8015b20:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	2200      	movs	r2, #0
 8015b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	222c      	movs	r2, #44	@ 0x2c
 8015b32:	18ba      	adds	r2, r7, r2
 8015b34:	8812      	ldrh	r2, [r2, #0]
 8015b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8015b3e:	1dbb      	adds	r3, r7, #6
 8015b40:	881c      	ldrh	r4, [r3, #0]
 8015b42:	2308      	movs	r3, #8
 8015b44:	18fb      	adds	r3, r7, r3
 8015b46:	881a      	ldrh	r2, [r3, #0]
 8015b48:	230a      	movs	r3, #10
 8015b4a:	18fb      	adds	r3, r7, r3
 8015b4c:	8819      	ldrh	r1, [r3, #0]
 8015b4e:	68f8      	ldr	r0, [r7, #12]
 8015b50:	697b      	ldr	r3, [r7, #20]
 8015b52:	9301      	str	r3, [sp, #4]
 8015b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	0023      	movs	r3, r4
 8015b5a:	f001 f829 	bl	8016bb0 <I2C_RequestMemoryRead>
 8015b5e:	1e03      	subs	r3, r0, #0
 8015b60:	d005      	beq.n	8015b6e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	2240      	movs	r2, #64	@ 0x40
 8015b66:	2100      	movs	r1, #0
 8015b68:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e0b9      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	2bff      	cmp	r3, #255	@ 0xff
 8015b76:	d911      	bls.n	8015b9c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	22ff      	movs	r2, #255	@ 0xff
 8015b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015b82:	b2da      	uxtb	r2, r3
 8015b84:	2380      	movs	r3, #128	@ 0x80
 8015b86:	045c      	lsls	r4, r3, #17
 8015b88:	230a      	movs	r3, #10
 8015b8a:	18fb      	adds	r3, r7, r3
 8015b8c:	8819      	ldrh	r1, [r3, #0]
 8015b8e:	68f8      	ldr	r0, [r7, #12]
 8015b90:	4b56      	ldr	r3, [pc, #344]	@ (8015cec <HAL_I2C_Mem_Read+0x260>)
 8015b92:	9300      	str	r3, [sp, #0]
 8015b94:	0023      	movs	r3, r4
 8015b96:	f002 f881 	bl	8017c9c <I2C_TransferConfig>
 8015b9a:	e012      	b.n	8015bc2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015baa:	b2da      	uxtb	r2, r3
 8015bac:	2380      	movs	r3, #128	@ 0x80
 8015bae:	049c      	lsls	r4, r3, #18
 8015bb0:	230a      	movs	r3, #10
 8015bb2:	18fb      	adds	r3, r7, r3
 8015bb4:	8819      	ldrh	r1, [r3, #0]
 8015bb6:	68f8      	ldr	r0, [r7, #12]
 8015bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8015cec <HAL_I2C_Mem_Read+0x260>)
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	0023      	movs	r3, r4
 8015bbe:	f002 f86d 	bl	8017c9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8015bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bc4:	68f8      	ldr	r0, [r7, #12]
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	9300      	str	r3, [sp, #0]
 8015bca:	0013      	movs	r3, r2
 8015bcc:	2200      	movs	r2, #0
 8015bce:	2104      	movs	r1, #4
 8015bd0:	f001 fe12 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 8015bd4:	1e03      	subs	r3, r0, #0
 8015bd6:	d001      	beq.n	8015bdc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	e082      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015be6:	b2d2      	uxtb	r2, r2
 8015be8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bee:	1c5a      	adds	r2, r3, #1
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	b29a      	uxth	r2, r3
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	3b01      	subs	r3, #1
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d03a      	beq.n	8015c8e <HAL_I2C_Mem_Read+0x202>
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d136      	bne.n	8015c8e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c22:	68f8      	ldr	r0, [r7, #12]
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	9300      	str	r3, [sp, #0]
 8015c28:	0013      	movs	r3, r2
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	2180      	movs	r1, #128	@ 0x80
 8015c2e:	f001 fde3 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 8015c32:	1e03      	subs	r3, r0, #0
 8015c34:	d001      	beq.n	8015c3a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8015c36:	2301      	movs	r3, #1
 8015c38:	e053      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	2bff      	cmp	r3, #255	@ 0xff
 8015c42:	d911      	bls.n	8015c68 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	22ff      	movs	r2, #255	@ 0xff
 8015c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c4e:	b2da      	uxtb	r2, r3
 8015c50:	2380      	movs	r3, #128	@ 0x80
 8015c52:	045c      	lsls	r4, r3, #17
 8015c54:	230a      	movs	r3, #10
 8015c56:	18fb      	adds	r3, r7, r3
 8015c58:	8819      	ldrh	r1, [r3, #0]
 8015c5a:	68f8      	ldr	r0, [r7, #12]
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	0023      	movs	r3, r4
 8015c62:	f002 f81b 	bl	8017c9c <I2C_TransferConfig>
 8015c66:	e012      	b.n	8015c8e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015c76:	b2da      	uxtb	r2, r3
 8015c78:	2380      	movs	r3, #128	@ 0x80
 8015c7a:	049c      	lsls	r4, r3, #18
 8015c7c:	230a      	movs	r3, #10
 8015c7e:	18fb      	adds	r3, r7, r3
 8015c80:	8819      	ldrh	r1, [r3, #0]
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	2300      	movs	r3, #0
 8015c86:	9300      	str	r3, [sp, #0]
 8015c88:	0023      	movs	r3, r4
 8015c8a:	f002 f807 	bl	8017c9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d194      	bne.n	8015bc2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c98:	697a      	ldr	r2, [r7, #20]
 8015c9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	0018      	movs	r0, r3
 8015ca0:	f001 fe3e 	bl	8017920 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015ca4:	1e03      	subs	r3, r0, #0
 8015ca6:	d001      	beq.n	8015cac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8015ca8:	2301      	movs	r3, #1
 8015caa:	e01a      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	2220      	movs	r2, #32
 8015cb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	685a      	ldr	r2, [r3, #4]
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	490c      	ldr	r1, [pc, #48]	@ (8015cf0 <HAL_I2C_Mem_Read+0x264>)
 8015cc0:	400a      	ands	r2, r1
 8015cc2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	2241      	movs	r2, #65	@ 0x41
 8015cc8:	2120      	movs	r1, #32
 8015cca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2242      	movs	r2, #66	@ 0x42
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	2240      	movs	r2, #64	@ 0x40
 8015cd8:	2100      	movs	r1, #0
 8015cda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	e000      	b.n	8015ce2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8015ce0:	2302      	movs	r3, #2
  }
}
 8015ce2:	0018      	movs	r0, r3
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	b007      	add	sp, #28
 8015ce8:	bd90      	pop	{r4, r7, pc}
 8015cea:	46c0      	nop			@ (mov r8, r8)
 8015cec:	80002400 	.word	0x80002400
 8015cf0:	fe00e800 	.word	0xfe00e800

08015cf4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8015cf4:	b5b0      	push	{r4, r5, r7, lr}
 8015cf6:	b088      	sub	sp, #32
 8015cf8:	af02      	add	r7, sp, #8
 8015cfa:	60f8      	str	r0, [r7, #12]
 8015cfc:	000c      	movs	r4, r1
 8015cfe:	0010      	movs	r0, r2
 8015d00:	0019      	movs	r1, r3
 8015d02:	230a      	movs	r3, #10
 8015d04:	18fb      	adds	r3, r7, r3
 8015d06:	1c22      	adds	r2, r4, #0
 8015d08:	801a      	strh	r2, [r3, #0]
 8015d0a:	2308      	movs	r3, #8
 8015d0c:	18fb      	adds	r3, r7, r3
 8015d0e:	1c02      	adds	r2, r0, #0
 8015d10:	801a      	strh	r2, [r3, #0]
 8015d12:	1dbb      	adds	r3, r7, #6
 8015d14:	1c0a      	adds	r2, r1, #0
 8015d16:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	2241      	movs	r2, #65	@ 0x41
 8015d1c:	5c9b      	ldrb	r3, [r3, r2]
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	2b20      	cmp	r3, #32
 8015d22:	d000      	beq.n	8015d26 <HAL_I2C_Mem_Write_DMA+0x32>
 8015d24:	e0d8      	b.n	8015ed8 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8015d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d004      	beq.n	8015d36 <HAL_I2C_Mem_Write_DMA+0x42>
 8015d2c:	232c      	movs	r3, #44	@ 0x2c
 8015d2e:	18fb      	adds	r3, r7, r3
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d105      	bne.n	8015d42 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2280      	movs	r2, #128	@ 0x80
 8015d3a:	0092      	lsls	r2, r2, #2
 8015d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e0cb      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	699a      	ldr	r2, [r3, #24]
 8015d48:	2380      	movs	r3, #128	@ 0x80
 8015d4a:	021b      	lsls	r3, r3, #8
 8015d4c:	401a      	ands	r2, r3
 8015d4e:	2380      	movs	r3, #128	@ 0x80
 8015d50:	021b      	lsls	r3, r3, #8
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d101      	bne.n	8015d5a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8015d56:	2302      	movs	r3, #2
 8015d58:	e0bf      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	2240      	movs	r2, #64	@ 0x40
 8015d5e:	5c9b      	ldrb	r3, [r3, r2]
 8015d60:	2b01      	cmp	r3, #1
 8015d62:	d101      	bne.n	8015d68 <HAL_I2C_Mem_Write_DMA+0x74>
 8015d64:	2302      	movs	r3, #2
 8015d66:	e0b8      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2240      	movs	r2, #64	@ 0x40
 8015d6c:	2101      	movs	r1, #1
 8015d6e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2241      	movs	r2, #65	@ 0x41
 8015d74:	2121      	movs	r1, #33	@ 0x21
 8015d76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	2242      	movs	r2, #66	@ 0x42
 8015d7c:	2140      	movs	r1, #64	@ 0x40
 8015d7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	2200      	movs	r2, #0
 8015d84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	222c      	movs	r2, #44	@ 0x2c
 8015d90:	18ba      	adds	r2, r7, r2
 8015d92:	8812      	ldrh	r2, [r2, #0]
 8015d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	4a52      	ldr	r2, [pc, #328]	@ (8015ee4 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8015d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	4a52      	ldr	r2, [pc, #328]	@ (8015ee8 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8015da0:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8015da2:	230a      	movs	r3, #10
 8015da4:	18fb      	adds	r3, r7, r3
 8015da6:	881a      	ldrh	r2, [r3, #0]
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015db0:	b29b      	uxth	r3, r3
 8015db2:	2bff      	cmp	r3, #255	@ 0xff
 8015db4:	d903      	bls.n	8015dbe <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	22ff      	movs	r2, #255	@ 0xff
 8015dba:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015dbc:	e004      	b.n	8015dc8 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015dc2:	b29a      	uxth	r2, r3
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015dc8:	1dbb      	adds	r3, r7, #6
 8015dca:	881b      	ldrh	r3, [r3, #0]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	d10b      	bne.n	8015de8 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8015dd0:	2308      	movs	r3, #8
 8015dd2:	18fb      	adds	r3, r7, r3
 8015dd4:	881b      	ldrh	r3, [r3, #0]
 8015dd6:	b2da      	uxtb	r2, r3
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	2201      	movs	r2, #1
 8015de2:	4252      	negs	r2, r2
 8015de4:	651a      	str	r2, [r3, #80]	@ 0x50
 8015de6:	e00e      	b.n	8015e06 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015de8:	2108      	movs	r1, #8
 8015dea:	187b      	adds	r3, r7, r1
 8015dec:	881b      	ldrh	r3, [r3, #0]
 8015dee:	0a1b      	lsrs	r3, r3, #8
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	b2da      	uxtb	r2, r3
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8015dfa:	187b      	adds	r3, r7, r1
 8015dfc:	881b      	ldrh	r3, [r3, #0]
 8015dfe:	b2db      	uxtb	r3, r3
 8015e00:	001a      	movs	r2, r3
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d023      	beq.n	8015e56 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e12:	4a36      	ldr	r2, [pc, #216]	@ (8015eec <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8015e14:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e1a:	4a35      	ldr	r2, [pc, #212]	@ (8015ef0 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8015e1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e22:	2200      	movs	r2, #0
 8015e24:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015e32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	3328      	adds	r3, #40	@ 0x28
 8015e3a:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8015e40:	2517      	movs	r5, #23
 8015e42:	197c      	adds	r4, r7, r5
 8015e44:	f7fe fbf8 	bl	8014638 <HAL_DMA_Start_IT>
 8015e48:	0003      	movs	r3, r0
 8015e4a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8015e4c:	197b      	adds	r3, r7, r5
 8015e4e:	781b      	ldrb	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d12d      	bne.n	8015eb0 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8015e54:	e013      	b.n	8015e7e <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2241      	movs	r2, #65	@ 0x41
 8015e5a:	2120      	movs	r1, #32
 8015e5c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2242      	movs	r2, #66	@ 0x42
 8015e62:	2100      	movs	r1, #0
 8015e64:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015e6a:	2280      	movs	r2, #128	@ 0x80
 8015e6c:	431a      	orrs	r2, r3
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2240      	movs	r2, #64	@ 0x40
 8015e76:	2100      	movs	r1, #0
 8015e78:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	e02d      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8015e7e:	1dbb      	adds	r3, r7, #6
 8015e80:	881b      	ldrh	r3, [r3, #0]
 8015e82:	b2da      	uxtb	r2, r3
 8015e84:	2380      	movs	r3, #128	@ 0x80
 8015e86:	045c      	lsls	r4, r3, #17
 8015e88:	230a      	movs	r3, #10
 8015e8a:	18fb      	adds	r3, r7, r3
 8015e8c:	8819      	ldrh	r1, [r3, #0]
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	4b18      	ldr	r3, [pc, #96]	@ (8015ef4 <HAL_I2C_Mem_Write_DMA+0x200>)
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	0023      	movs	r3, r4
 8015e96:	f001 ff01 	bl	8017c9c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	2240      	movs	r2, #64	@ 0x40
 8015e9e:	2100      	movs	r1, #0
 8015ea0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	2101      	movs	r1, #1
 8015ea6:	0018      	movs	r0, r3
 8015ea8:	f001 ff32 	bl	8017d10 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8015eac:	2300      	movs	r3, #0
 8015eae:	e014      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	2241      	movs	r2, #65	@ 0x41
 8015eb4:	2120      	movs	r1, #32
 8015eb6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2242      	movs	r2, #66	@ 0x42
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ec4:	2210      	movs	r2, #16
 8015ec6:	431a      	orrs	r2, r3
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	2240      	movs	r2, #64	@ 0x40
 8015ed0:	2100      	movs	r1, #0
 8015ed2:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8015ed4:	2301      	movs	r3, #1
 8015ed6:	e000      	b.n	8015eda <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8015ed8:	2302      	movs	r3, #2
  }
}
 8015eda:	0018      	movs	r0, r3
 8015edc:	46bd      	mov	sp, r7
 8015ede:	b006      	add	sp, #24
 8015ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ee2:	46c0      	nop			@ (mov r8, r8)
 8015ee4:	ffff0000 	.word	0xffff0000
 8015ee8:	08016765 	.word	0x08016765
 8015eec:	08017649 	.word	0x08017649
 8015ef0:	08017789 	.word	0x08017789
 8015ef4:	80002000 	.word	0x80002000

08015ef8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	699b      	ldr	r3, [r3, #24]
 8015f06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d005      	beq.n	8015f24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	68f9      	ldr	r1, [r7, #12]
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	4798      	blx	r3
  }
}
 8015f24:	46c0      	nop			@ (mov r8, r8)
 8015f26:	46bd      	mov	sp, r7
 8015f28:	b004      	add	sp, #16
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b086      	sub	sp, #24
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	699b      	ldr	r3, [r3, #24]
 8015f3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	0a1b      	lsrs	r3, r3, #8
 8015f48:	001a      	movs	r2, r3
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	4013      	ands	r3, r2
 8015f4e:	d010      	beq.n	8015f72 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	09db      	lsrs	r3, r3, #7
 8015f54:	001a      	movs	r2, r3
 8015f56:	2301      	movs	r3, #1
 8015f58:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8015f5a:	d00a      	beq.n	8015f72 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f60:	2201      	movs	r2, #1
 8015f62:	431a      	orrs	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2280      	movs	r2, #128	@ 0x80
 8015f6e:	0052      	lsls	r2, r2, #1
 8015f70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	0a9b      	lsrs	r3, r3, #10
 8015f76:	001a      	movs	r2, r3
 8015f78:	2301      	movs	r3, #1
 8015f7a:	4013      	ands	r3, r2
 8015f7c:	d010      	beq.n	8015fa0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	09db      	lsrs	r3, r3, #7
 8015f82:	001a      	movs	r2, r3
 8015f84:	2301      	movs	r3, #1
 8015f86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8015f88:	d00a      	beq.n	8015fa0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f8e:	2208      	movs	r2, #8
 8015f90:	431a      	orrs	r2, r3
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2280      	movs	r2, #128	@ 0x80
 8015f9c:	00d2      	lsls	r2, r2, #3
 8015f9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	0a5b      	lsrs	r3, r3, #9
 8015fa4:	001a      	movs	r2, r3
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	4013      	ands	r3, r2
 8015faa:	d010      	beq.n	8015fce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	09db      	lsrs	r3, r3, #7
 8015fb0:	001a      	movs	r2, r3
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8015fb6:	d00a      	beq.n	8015fce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	431a      	orrs	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	2280      	movs	r2, #128	@ 0x80
 8015fca:	0092      	lsls	r2, r2, #2
 8015fcc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fd2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	220b      	movs	r2, #11
 8015fd8:	4013      	ands	r3, r2
 8015fda:	d005      	beq.n	8015fe8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8015fdc:	68fa      	ldr	r2, [r7, #12]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	0011      	movs	r1, r2
 8015fe2:	0018      	movs	r0, r3
 8015fe4:	f001 f9e2 	bl	80173ac <I2C_ITError>
  }
}
 8015fe8:	46c0      	nop			@ (mov r8, r8)
 8015fea:	46bd      	mov	sp, r7
 8015fec:	b006      	add	sp, #24
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8015ff8:	46c0      	nop			@ (mov r8, r8)
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	b002      	add	sp, #8
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016008:	46c0      	nop			@ (mov r8, r8)
 801600a:	46bd      	mov	sp, r7
 801600c:	b002      	add	sp, #8
 801600e:	bd80      	pop	{r7, pc}

08016010 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b082      	sub	sp, #8
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016018:	46c0      	nop			@ (mov r8, r8)
 801601a:	46bd      	mov	sp, r7
 801601c:	b002      	add	sp, #8
 801601e:	bd80      	pop	{r7, pc}

08016020 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016028:	46c0      	nop			@ (mov r8, r8)
 801602a:	46bd      	mov	sp, r7
 801602c:	b002      	add	sp, #8
 801602e:	bd80      	pop	{r7, pc}

08016030 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b082      	sub	sp, #8
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	0008      	movs	r0, r1
 801603a:	0011      	movs	r1, r2
 801603c:	1cfb      	adds	r3, r7, #3
 801603e:	1c02      	adds	r2, r0, #0
 8016040:	701a      	strb	r2, [r3, #0]
 8016042:	003b      	movs	r3, r7
 8016044:	1c0a      	adds	r2, r1, #0
 8016046:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016048:	46c0      	nop			@ (mov r8, r8)
 801604a:	46bd      	mov	sp, r7
 801604c:	b002      	add	sp, #8
 801604e:	bd80      	pop	{r7, pc}

08016050 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8016058:	46c0      	nop			@ (mov r8, r8)
 801605a:	46bd      	mov	sp, r7
 801605c:	b002      	add	sp, #8
 801605e:	bd80      	pop	{r7, pc}

08016060 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b082      	sub	sp, #8
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8016068:	46c0      	nop			@ (mov r8, r8)
 801606a:	46bd      	mov	sp, r7
 801606c:	b002      	add	sp, #8
 801606e:	bd80      	pop	{r7, pc}

08016070 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8016078:	46c0      	nop			@ (mov r8, r8)
 801607a:	46bd      	mov	sp, r7
 801607c:	b002      	add	sp, #8
 801607e:	bd80      	pop	{r7, pc}

08016080 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8016088:	46c0      	nop			@ (mov r8, r8)
 801608a:	46bd      	mov	sp, r7
 801608c:	b002      	add	sp, #8
 801608e:	bd80      	pop	{r7, pc}

08016090 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b082      	sub	sp, #8
 8016094:	af00      	add	r7, sp, #0
 8016096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8016098:	46c0      	nop			@ (mov r8, r8)
 801609a:	46bd      	mov	sp, r7
 801609c:	b002      	add	sp, #8
 801609e:	bd80      	pop	{r7, pc}

080160a0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80160a0:	b590      	push	{r4, r7, lr}
 80160a2:	b089      	sub	sp, #36	@ 0x24
 80160a4:	af02      	add	r7, sp, #8
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2240      	movs	r2, #64	@ 0x40
 80160b4:	5c9b      	ldrb	r3, [r3, r2]
 80160b6:	2b01      	cmp	r3, #1
 80160b8:	d101      	bne.n	80160be <I2C_Master_ISR_IT+0x1e>
 80160ba:	2302      	movs	r3, #2
 80160bc:	e12b      	b.n	8016316 <I2C_Master_ISR_IT+0x276>
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	2240      	movs	r2, #64	@ 0x40
 80160c2:	2101      	movs	r1, #1
 80160c4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80160c6:	697b      	ldr	r3, [r7, #20]
 80160c8:	091b      	lsrs	r3, r3, #4
 80160ca:	001a      	movs	r2, r3
 80160cc:	2301      	movs	r3, #1
 80160ce:	4013      	ands	r3, r2
 80160d0:	d014      	beq.n	80160fc <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	091b      	lsrs	r3, r3, #4
 80160d6:	001a      	movs	r2, r3
 80160d8:	2301      	movs	r3, #1
 80160da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80160dc:	d00e      	beq.n	80160fc <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	2210      	movs	r2, #16
 80160e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160ea:	2204      	movs	r2, #4
 80160ec:	431a      	orrs	r2, r3
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	0018      	movs	r0, r3
 80160f6:	f001 fa84 	bl	8017602 <I2C_Flush_TXDR>
 80160fa:	e0f5      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	089b      	lsrs	r3, r3, #2
 8016100:	001a      	movs	r2, r3
 8016102:	2301      	movs	r3, #1
 8016104:	4013      	ands	r3, r2
 8016106:	d023      	beq.n	8016150 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	089b      	lsrs	r3, r3, #2
 801610c:	001a      	movs	r2, r3
 801610e:	2301      	movs	r3, #1
 8016110:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016112:	d01d      	beq.n	8016150 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8016114:	697b      	ldr	r3, [r7, #20]
 8016116:	2204      	movs	r2, #4
 8016118:	4393      	bics	r3, r2
 801611a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016126:	b2d2      	uxtb	r2, r2
 8016128:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801612e:	1c5a      	adds	r2, r3, #1
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016138:	3b01      	subs	r3, #1
 801613a:	b29a      	uxth	r2, r3
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016144:	b29b      	uxth	r3, r3
 8016146:	3b01      	subs	r3, #1
 8016148:	b29a      	uxth	r2, r3
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801614e:	e0cb      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	085b      	lsrs	r3, r3, #1
 8016154:	001a      	movs	r2, r3
 8016156:	2301      	movs	r3, #1
 8016158:	4013      	ands	r3, r2
 801615a:	d01e      	beq.n	801619a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	085b      	lsrs	r3, r3, #1
 8016160:	001a      	movs	r2, r3
 8016162:	2301      	movs	r3, #1
 8016164:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8016166:	d018      	beq.n	801619a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801616c:	781a      	ldrb	r2, [r3, #0]
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016178:	1c5a      	adds	r2, r3, #1
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016182:	3b01      	subs	r3, #1
 8016184:	b29a      	uxth	r2, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801618e:	b29b      	uxth	r3, r3
 8016190:	3b01      	subs	r3, #1
 8016192:	b29a      	uxth	r2, r3
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016198:	e0a6      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	09db      	lsrs	r3, r3, #7
 801619e:	001a      	movs	r2, r3
 80161a0:	2301      	movs	r3, #1
 80161a2:	4013      	ands	r3, r2
 80161a4:	d100      	bne.n	80161a8 <I2C_Master_ISR_IT+0x108>
 80161a6:	e06b      	b.n	8016280 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	099b      	lsrs	r3, r3, #6
 80161ac:	001a      	movs	r2, r3
 80161ae:	2301      	movs	r3, #1
 80161b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80161b2:	d065      	beq.n	8016280 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d04a      	beq.n	8016254 <I2C_Master_ISR_IT+0x1b4>
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d146      	bne.n	8016254 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	685b      	ldr	r3, [r3, #4]
 80161cc:	b29a      	uxth	r2, r3
 80161ce:	2112      	movs	r1, #18
 80161d0:	187b      	adds	r3, r7, r1
 80161d2:	0592      	lsls	r2, r2, #22
 80161d4:	0d92      	lsrs	r2, r2, #22
 80161d6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80161dc:	b29b      	uxth	r3, r3
 80161de:	2bff      	cmp	r3, #255	@ 0xff
 80161e0:	d910      	bls.n	8016204 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	22ff      	movs	r2, #255	@ 0xff
 80161e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80161ec:	b2da      	uxtb	r2, r3
 80161ee:	2380      	movs	r3, #128	@ 0x80
 80161f0:	045c      	lsls	r4, r3, #17
 80161f2:	187b      	adds	r3, r7, r1
 80161f4:	8819      	ldrh	r1, [r3, #0]
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	2300      	movs	r3, #0
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	0023      	movs	r3, r4
 80161fe:	f001 fd4d 	bl	8017c9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016202:	e03c      	b.n	801627e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016208:	b29a      	uxth	r2, r3
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016212:	4a43      	ldr	r2, [pc, #268]	@ (8016320 <I2C_Master_ISR_IT+0x280>)
 8016214:	4293      	cmp	r3, r2
 8016216:	d00e      	beq.n	8016236 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801621c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016222:	2312      	movs	r3, #18
 8016224:	18fb      	adds	r3, r7, r3
 8016226:	8819      	ldrh	r1, [r3, #0]
 8016228:	68f8      	ldr	r0, [r7, #12]
 801622a:	2300      	movs	r3, #0
 801622c:	9300      	str	r3, [sp, #0]
 801622e:	0023      	movs	r3, r4
 8016230:	f001 fd34 	bl	8017c9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016234:	e023      	b.n	801627e <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801623a:	b2da      	uxtb	r2, r3
 801623c:	2380      	movs	r3, #128	@ 0x80
 801623e:	049c      	lsls	r4, r3, #18
 8016240:	2312      	movs	r3, #18
 8016242:	18fb      	adds	r3, r7, r3
 8016244:	8819      	ldrh	r1, [r3, #0]
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	2300      	movs	r3, #0
 801624a:	9300      	str	r3, [sp, #0]
 801624c:	0023      	movs	r3, r4
 801624e:	f001 fd25 	bl	8017c9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016252:	e014      	b.n	801627e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	685a      	ldr	r2, [r3, #4]
 801625a:	2380      	movs	r3, #128	@ 0x80
 801625c:	049b      	lsls	r3, r3, #18
 801625e:	401a      	ands	r2, r3
 8016260:	2380      	movs	r3, #128	@ 0x80
 8016262:	049b      	lsls	r3, r3, #18
 8016264:	429a      	cmp	r2, r3
 8016266:	d004      	beq.n	8016272 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	0018      	movs	r0, r3
 801626c:	f000 fda6 	bl	8016dbc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016270:	e03a      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2140      	movs	r1, #64	@ 0x40
 8016276:	0018      	movs	r0, r3
 8016278:	f001 f898 	bl	80173ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801627c:	e034      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
 801627e:	e033      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016280:	697b      	ldr	r3, [r7, #20]
 8016282:	099b      	lsrs	r3, r3, #6
 8016284:	001a      	movs	r2, r3
 8016286:	2301      	movs	r3, #1
 8016288:	4013      	ands	r3, r2
 801628a:	d02d      	beq.n	80162e8 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	099b      	lsrs	r3, r3, #6
 8016290:	001a      	movs	r2, r3
 8016292:	2301      	movs	r3, #1
 8016294:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8016296:	d027      	beq.n	80162e8 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801629c:	b29b      	uxth	r3, r3
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d11d      	bne.n	80162de <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	685a      	ldr	r2, [r3, #4]
 80162a8:	2380      	movs	r3, #128	@ 0x80
 80162aa:	049b      	lsls	r3, r3, #18
 80162ac:	401a      	ands	r2, r3
 80162ae:	2380      	movs	r3, #128	@ 0x80
 80162b0:	049b      	lsls	r3, r3, #18
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d018      	beq.n	80162e8 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162ba:	4a19      	ldr	r2, [pc, #100]	@ (8016320 <I2C_Master_ISR_IT+0x280>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	d109      	bne.n	80162d4 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	685a      	ldr	r2, [r3, #4]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2180      	movs	r1, #128	@ 0x80
 80162cc:	01c9      	lsls	r1, r1, #7
 80162ce:	430a      	orrs	r2, r1
 80162d0:	605a      	str	r2, [r3, #4]
 80162d2:	e009      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	0018      	movs	r0, r3
 80162d8:	f000 fd70 	bl	8016dbc <I2C_ITMasterSeqCplt>
 80162dc:	e004      	b.n	80162e8 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2140      	movs	r1, #64	@ 0x40
 80162e2:	0018      	movs	r0, r3
 80162e4:	f001 f862 	bl	80173ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	095b      	lsrs	r3, r3, #5
 80162ec:	001a      	movs	r2, r3
 80162ee:	2301      	movs	r3, #1
 80162f0:	4013      	ands	r3, r2
 80162f2:	d00b      	beq.n	801630c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	095b      	lsrs	r3, r3, #5
 80162f8:	001a      	movs	r2, r3
 80162fa:	2301      	movs	r3, #1
 80162fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80162fe:	d005      	beq.n	801630c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8016300:	697a      	ldr	r2, [r7, #20]
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	0011      	movs	r1, r2
 8016306:	0018      	movs	r0, r3
 8016308:	f000 fe00 	bl	8016f0c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801630c:	68fb      	ldr	r3, [r7, #12]
 801630e:	2240      	movs	r2, #64	@ 0x40
 8016310:	2100      	movs	r1, #0
 8016312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016314:	2300      	movs	r3, #0
}
 8016316:	0018      	movs	r0, r3
 8016318:	46bd      	mov	sp, r7
 801631a:	b007      	add	sp, #28
 801631c:	bd90      	pop	{r4, r7, pc}
 801631e:	46c0      	nop			@ (mov r8, r8)
 8016320:	ffff0000 	.word	0xffff0000

08016324 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b086      	sub	sp, #24
 8016328:	af00      	add	r7, sp, #0
 801632a:	60f8      	str	r0, [r7, #12]
 801632c:	60b9      	str	r1, [r7, #8]
 801632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016334:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8016336:	68bb      	ldr	r3, [r7, #8]
 8016338:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2240      	movs	r2, #64	@ 0x40
 801633e:	5c9b      	ldrb	r3, [r3, r2]
 8016340:	2b01      	cmp	r3, #1
 8016342:	d101      	bne.n	8016348 <I2C_Slave_ISR_IT+0x24>
 8016344:	2302      	movs	r3, #2
 8016346:	e0fa      	b.n	801653e <I2C_Slave_ISR_IT+0x21a>
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2240      	movs	r2, #64	@ 0x40
 801634c:	2101      	movs	r1, #1
 801634e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	095b      	lsrs	r3, r3, #5
 8016354:	001a      	movs	r2, r3
 8016356:	2301      	movs	r3, #1
 8016358:	4013      	ands	r3, r2
 801635a:	d00b      	beq.n	8016374 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	095b      	lsrs	r3, r3, #5
 8016360:	001a      	movs	r2, r3
 8016362:	2301      	movs	r3, #1
 8016364:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016366:	d005      	beq.n	8016374 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8016368:	693a      	ldr	r2, [r7, #16]
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	0011      	movs	r1, r2
 801636e:	0018      	movs	r0, r3
 8016370:	f000 fe9e 	bl	80170b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8016374:	693b      	ldr	r3, [r7, #16]
 8016376:	091b      	lsrs	r3, r3, #4
 8016378:	001a      	movs	r2, r3
 801637a:	2301      	movs	r3, #1
 801637c:	4013      	ands	r3, r2
 801637e:	d054      	beq.n	801642a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	091b      	lsrs	r3, r3, #4
 8016384:	001a      	movs	r2, r3
 8016386:	2301      	movs	r3, #1
 8016388:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801638a:	d04e      	beq.n	801642a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016390:	b29b      	uxth	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d12d      	bne.n	80163f2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	2241      	movs	r2, #65	@ 0x41
 801639a:	5c9b      	ldrb	r3, [r3, r2]
 801639c:	b2db      	uxtb	r3, r3
 801639e:	2b28      	cmp	r3, #40	@ 0x28
 80163a0:	d10b      	bne.n	80163ba <I2C_Slave_ISR_IT+0x96>
 80163a2:	697a      	ldr	r2, [r7, #20]
 80163a4:	2380      	movs	r3, #128	@ 0x80
 80163a6:	049b      	lsls	r3, r3, #18
 80163a8:	429a      	cmp	r2, r3
 80163aa:	d106      	bne.n	80163ba <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80163ac:	693a      	ldr	r2, [r7, #16]
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	0011      	movs	r1, r2
 80163b2:	0018      	movs	r0, r3
 80163b4:	f000 ffa0 	bl	80172f8 <I2C_ITListenCplt>
 80163b8:	e036      	b.n	8016428 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2241      	movs	r2, #65	@ 0x41
 80163be:	5c9b      	ldrb	r3, [r3, r2]
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	2b29      	cmp	r3, #41	@ 0x29
 80163c4:	d110      	bne.n	80163e8 <I2C_Slave_ISR_IT+0xc4>
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	4a5f      	ldr	r2, [pc, #380]	@ (8016548 <I2C_Slave_ISR_IT+0x224>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d00c      	beq.n	80163e8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2210      	movs	r2, #16
 80163d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	0018      	movs	r0, r3
 80163da:	f001 f912 	bl	8017602 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	0018      	movs	r0, r3
 80163e2:	f000 fd2d 	bl	8016e40 <I2C_ITSlaveSeqCplt>
 80163e6:	e01f      	b.n	8016428 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2210      	movs	r2, #16
 80163ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80163f0:	e09d      	b.n	801652e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	2210      	movs	r2, #16
 80163f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163fe:	2204      	movs	r2, #4
 8016400:	431a      	orrs	r2, r3
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d005      	beq.n	8016418 <I2C_Slave_ISR_IT+0xf4>
 801640c:	697a      	ldr	r2, [r7, #20]
 801640e:	2380      	movs	r3, #128	@ 0x80
 8016410:	045b      	lsls	r3, r3, #17
 8016412:	429a      	cmp	r2, r3
 8016414:	d000      	beq.n	8016418 <I2C_Slave_ISR_IT+0xf4>
 8016416:	e08a      	b.n	801652e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	0011      	movs	r1, r2
 8016420:	0018      	movs	r0, r3
 8016422:	f000 ffc3 	bl	80173ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016426:	e082      	b.n	801652e <I2C_Slave_ISR_IT+0x20a>
 8016428:	e081      	b.n	801652e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	089b      	lsrs	r3, r3, #2
 801642e:	001a      	movs	r2, r3
 8016430:	2301      	movs	r3, #1
 8016432:	4013      	ands	r3, r2
 8016434:	d031      	beq.n	801649a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	089b      	lsrs	r3, r3, #2
 801643a:	001a      	movs	r2, r3
 801643c:	2301      	movs	r3, #1
 801643e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8016440:	d02b      	beq.n	801649a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016446:	b29b      	uxth	r3, r3
 8016448:	2b00      	cmp	r3, #0
 801644a:	d018      	beq.n	801647e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016456:	b2d2      	uxtb	r2, r2
 8016458:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801645e:	1c5a      	adds	r2, r3, #1
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016468:	3b01      	subs	r3, #1
 801646a:	b29a      	uxth	r2, r3
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016474:	b29b      	uxth	r3, r3
 8016476:	3b01      	subs	r3, #1
 8016478:	b29a      	uxth	r2, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016482:	b29b      	uxth	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d154      	bne.n	8016532 <I2C_Slave_ISR_IT+0x20e>
 8016488:	697b      	ldr	r3, [r7, #20]
 801648a:	4a2f      	ldr	r2, [pc, #188]	@ (8016548 <I2C_Slave_ISR_IT+0x224>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d050      	beq.n	8016532 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	0018      	movs	r0, r3
 8016494:	f000 fcd4 	bl	8016e40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8016498:	e04b      	b.n	8016532 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	08db      	lsrs	r3, r3, #3
 801649e:	001a      	movs	r2, r3
 80164a0:	2301      	movs	r3, #1
 80164a2:	4013      	ands	r3, r2
 80164a4:	d00c      	beq.n	80164c0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	08db      	lsrs	r3, r3, #3
 80164aa:	001a      	movs	r2, r3
 80164ac:	2301      	movs	r3, #1
 80164ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80164b0:	d006      	beq.n	80164c0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80164b2:	693a      	ldr	r2, [r7, #16]
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	0011      	movs	r1, r2
 80164b8:	0018      	movs	r0, r3
 80164ba:	f000 fbdb 	bl	8016c74 <I2C_ITAddrCplt>
 80164be:	e039      	b.n	8016534 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	085b      	lsrs	r3, r3, #1
 80164c4:	001a      	movs	r2, r3
 80164c6:	2301      	movs	r3, #1
 80164c8:	4013      	ands	r3, r2
 80164ca:	d033      	beq.n	8016534 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	085b      	lsrs	r3, r3, #1
 80164d0:	001a      	movs	r2, r3
 80164d2:	2301      	movs	r3, #1
 80164d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80164d6:	d02d      	beq.n	8016534 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164dc:	b29b      	uxth	r3, r3
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d018      	beq.n	8016514 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164e6:	781a      	ldrb	r2, [r3, #0]
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164f2:	1c5a      	adds	r2, r3, #1
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	3b01      	subs	r3, #1
 8016500:	b29a      	uxth	r2, r3
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801650a:	3b01      	subs	r3, #1
 801650c:	b29a      	uxth	r2, r3
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016512:	e00f      	b.n	8016534 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8016514:	697a      	ldr	r2, [r7, #20]
 8016516:	2380      	movs	r3, #128	@ 0x80
 8016518:	045b      	lsls	r3, r3, #17
 801651a:	429a      	cmp	r2, r3
 801651c:	d002      	beq.n	8016524 <I2C_Slave_ISR_IT+0x200>
 801651e:	697b      	ldr	r3, [r7, #20]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d107      	bne.n	8016534 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	0018      	movs	r0, r3
 8016528:	f000 fc8a 	bl	8016e40 <I2C_ITSlaveSeqCplt>
 801652c:	e002      	b.n	8016534 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 801652e:	46c0      	nop			@ (mov r8, r8)
 8016530:	e000      	b.n	8016534 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8016532:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	2240      	movs	r2, #64	@ 0x40
 8016538:	2100      	movs	r1, #0
 801653a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801653c:	2300      	movs	r3, #0
}
 801653e:	0018      	movs	r0, r3
 8016540:	46bd      	mov	sp, r7
 8016542:	b006      	add	sp, #24
 8016544:	bd80      	pop	{r7, pc}
 8016546:	46c0      	nop			@ (mov r8, r8)
 8016548:	ffff0000 	.word	0xffff0000

0801654c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 801654c:	b590      	push	{r4, r7, lr}
 801654e:	b089      	sub	sp, #36	@ 0x24
 8016550:	af02      	add	r7, sp, #8
 8016552:	60f8      	str	r0, [r7, #12]
 8016554:	60b9      	str	r1, [r7, #8]
 8016556:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2240      	movs	r2, #64	@ 0x40
 801655c:	5c9b      	ldrb	r3, [r3, r2]
 801655e:	2b01      	cmp	r3, #1
 8016560:	d101      	bne.n	8016566 <I2C_Master_ISR_DMA+0x1a>
 8016562:	2302      	movs	r3, #2
 8016564:	e0f7      	b.n	8016756 <I2C_Master_ISR_DMA+0x20a>
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	2240      	movs	r2, #64	@ 0x40
 801656a:	2101      	movs	r1, #1
 801656c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	091b      	lsrs	r3, r3, #4
 8016572:	001a      	movs	r2, r3
 8016574:	2301      	movs	r3, #1
 8016576:	4013      	ands	r3, r2
 8016578:	d019      	beq.n	80165ae <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	091b      	lsrs	r3, r3, #4
 801657e:	001a      	movs	r2, r3
 8016580:	2301      	movs	r3, #1
 8016582:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016584:	d013      	beq.n	80165ae <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	2210      	movs	r2, #16
 801658c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016592:	2204      	movs	r2, #4
 8016594:	431a      	orrs	r2, r3
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	2120      	movs	r1, #32
 801659e:	0018      	movs	r0, r3
 80165a0:	f001 fbb6 	bl	8017d10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	0018      	movs	r0, r3
 80165a8:	f001 f82b 	bl	8017602 <I2C_Flush_TXDR>
 80165ac:	e0ce      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80165ae:	68bb      	ldr	r3, [r7, #8]
 80165b0:	09db      	lsrs	r3, r3, #7
 80165b2:	001a      	movs	r2, r3
 80165b4:	2301      	movs	r3, #1
 80165b6:	4013      	ands	r3, r2
 80165b8:	d100      	bne.n	80165bc <I2C_Master_ISR_DMA+0x70>
 80165ba:	e07e      	b.n	80166ba <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	099b      	lsrs	r3, r3, #6
 80165c0:	001a      	movs	r2, r3
 80165c2:	2301      	movs	r3, #1
 80165c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80165c6:	d100      	bne.n	80165ca <I2C_Master_ISR_DMA+0x7e>
 80165c8:	e077      	b.n	80166ba <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	681a      	ldr	r2, [r3, #0]
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2140      	movs	r1, #64	@ 0x40
 80165d6:	438a      	bics	r2, r1
 80165d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165de:	b29b      	uxth	r3, r3
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d055      	beq.n	8016690 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	b29a      	uxth	r2, r3
 80165ec:	2312      	movs	r3, #18
 80165ee:	18fb      	adds	r3, r7, r3
 80165f0:	0592      	lsls	r2, r2, #22
 80165f2:	0d92      	lsrs	r2, r2, #22
 80165f4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	2bff      	cmp	r3, #255	@ 0xff
 80165fe:	d906      	bls.n	801660e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	22ff      	movs	r2, #255	@ 0xff
 8016604:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8016606:	2380      	movs	r3, #128	@ 0x80
 8016608:	045b      	lsls	r3, r3, #17
 801660a:	617b      	str	r3, [r7, #20]
 801660c:	e010      	b.n	8016630 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016612:	b29a      	uxth	r2, r3
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801661c:	4a50      	ldr	r2, [pc, #320]	@ (8016760 <I2C_Master_ISR_DMA+0x214>)
 801661e:	4293      	cmp	r3, r2
 8016620:	d003      	beq.n	801662a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016626:	617b      	str	r3, [r7, #20]
 8016628:	e002      	b.n	8016630 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801662a:	2380      	movs	r3, #128	@ 0x80
 801662c:	049b      	lsls	r3, r3, #18
 801662e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016634:	b2da      	uxtb	r2, r3
 8016636:	697c      	ldr	r4, [r7, #20]
 8016638:	2312      	movs	r3, #18
 801663a:	18fb      	adds	r3, r7, r3
 801663c:	8819      	ldrh	r1, [r3, #0]
 801663e:	68f8      	ldr	r0, [r7, #12]
 8016640:	2300      	movs	r3, #0
 8016642:	9300      	str	r3, [sp, #0]
 8016644:	0023      	movs	r3, r4
 8016646:	f001 fb29 	bl	8017c9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801664e:	b29a      	uxth	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016654:	1ad3      	subs	r3, r2, r3
 8016656:	b29a      	uxth	r2, r3
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	2241      	movs	r2, #65	@ 0x41
 8016660:	5c9b      	ldrb	r3, [r3, r2]
 8016662:	b2db      	uxtb	r3, r3
 8016664:	2b22      	cmp	r3, #34	@ 0x22
 8016666:	d109      	bne.n	801667c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	681a      	ldr	r2, [r3, #0]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	2180      	movs	r1, #128	@ 0x80
 8016674:	0209      	lsls	r1, r1, #8
 8016676:	430a      	orrs	r2, r1
 8016678:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801667a:	e067      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	2180      	movs	r1, #128	@ 0x80
 8016688:	01c9      	lsls	r1, r1, #7
 801668a:	430a      	orrs	r2, r1
 801668c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801668e:	e05d      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	685a      	ldr	r2, [r3, #4]
 8016696:	2380      	movs	r3, #128	@ 0x80
 8016698:	049b      	lsls	r3, r3, #18
 801669a:	401a      	ands	r2, r3
 801669c:	2380      	movs	r3, #128	@ 0x80
 801669e:	049b      	lsls	r3, r3, #18
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d004      	beq.n	80166ae <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	0018      	movs	r0, r3
 80166a8:	f000 fb88 	bl	8016dbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80166ac:	e04e      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2140      	movs	r1, #64	@ 0x40
 80166b2:	0018      	movs	r0, r3
 80166b4:	f000 fe7a 	bl	80173ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80166b8:	e048      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80166ba:	68bb      	ldr	r3, [r7, #8]
 80166bc:	099b      	lsrs	r3, r3, #6
 80166be:	001a      	movs	r2, r3
 80166c0:	2301      	movs	r3, #1
 80166c2:	4013      	ands	r3, r2
 80166c4:	d02e      	beq.n	8016724 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	099b      	lsrs	r3, r3, #6
 80166ca:	001a      	movs	r2, r3
 80166cc:	2301      	movs	r3, #1
 80166ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80166d0:	d028      	beq.n	8016724 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d11d      	bne.n	8016718 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	685a      	ldr	r2, [r3, #4]
 80166e2:	2380      	movs	r3, #128	@ 0x80
 80166e4:	049b      	lsls	r3, r3, #18
 80166e6:	401a      	ands	r2, r3
 80166e8:	2380      	movs	r3, #128	@ 0x80
 80166ea:	049b      	lsls	r3, r3, #18
 80166ec:	429a      	cmp	r2, r3
 80166ee:	d02c      	beq.n	801674a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166f4:	4a1a      	ldr	r2, [pc, #104]	@ (8016760 <I2C_Master_ISR_DMA+0x214>)
 80166f6:	4293      	cmp	r3, r2
 80166f8:	d109      	bne.n	801670e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	685a      	ldr	r2, [r3, #4]
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2180      	movs	r1, #128	@ 0x80
 8016706:	01c9      	lsls	r1, r1, #7
 8016708:	430a      	orrs	r2, r1
 801670a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 801670c:	e01d      	b.n	801674a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	0018      	movs	r0, r3
 8016712:	f000 fb53 	bl	8016dbc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8016716:	e018      	b.n	801674a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	2140      	movs	r1, #64	@ 0x40
 801671c:	0018      	movs	r0, r3
 801671e:	f000 fe45 	bl	80173ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8016722:	e012      	b.n	801674a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	095b      	lsrs	r3, r3, #5
 8016728:	001a      	movs	r2, r3
 801672a:	2301      	movs	r3, #1
 801672c:	4013      	ands	r3, r2
 801672e:	d00d      	beq.n	801674c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	095b      	lsrs	r3, r3, #5
 8016734:	001a      	movs	r2, r3
 8016736:	2301      	movs	r3, #1
 8016738:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801673a:	d007      	beq.n	801674c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801673c:	68ba      	ldr	r2, [r7, #8]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	0011      	movs	r1, r2
 8016742:	0018      	movs	r0, r3
 8016744:	f000 fbe2 	bl	8016f0c <I2C_ITMasterCplt>
 8016748:	e000      	b.n	801674c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 801674a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	2240      	movs	r2, #64	@ 0x40
 8016750:	2100      	movs	r1, #0
 8016752:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016754:	2300      	movs	r3, #0
}
 8016756:	0018      	movs	r0, r3
 8016758:	46bd      	mov	sp, r7
 801675a:	b007      	add	sp, #28
 801675c:	bd90      	pop	{r4, r7, pc}
 801675e:	46c0      	nop			@ (mov r8, r8)
 8016760:	ffff0000 	.word	0xffff0000

08016764 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8016764:	b590      	push	{r4, r7, lr}
 8016766:	b089      	sub	sp, #36	@ 0x24
 8016768:	af02      	add	r7, sp, #8
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	60b9      	str	r1, [r7, #8]
 801676e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8016770:	4b92      	ldr	r3, [pc, #584]	@ (80169bc <I2C_Mem_ISR_DMA+0x258>)
 8016772:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	2240      	movs	r2, #64	@ 0x40
 8016778:	5c9b      	ldrb	r3, [r3, r2]
 801677a:	2b01      	cmp	r3, #1
 801677c:	d101      	bne.n	8016782 <I2C_Mem_ISR_DMA+0x1e>
 801677e:	2302      	movs	r3, #2
 8016780:	e118      	b.n	80169b4 <I2C_Mem_ISR_DMA+0x250>
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	2240      	movs	r2, #64	@ 0x40
 8016786:	2101      	movs	r1, #1
 8016788:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801678a:	68bb      	ldr	r3, [r7, #8]
 801678c:	091b      	lsrs	r3, r3, #4
 801678e:	001a      	movs	r2, r3
 8016790:	2301      	movs	r3, #1
 8016792:	4013      	ands	r3, r2
 8016794:	d019      	beq.n	80167ca <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	091b      	lsrs	r3, r3, #4
 801679a:	001a      	movs	r2, r3
 801679c:	2301      	movs	r3, #1
 801679e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80167a0:	d013      	beq.n	80167ca <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	2210      	movs	r2, #16
 80167a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167ae:	2204      	movs	r2, #4
 80167b0:	431a      	orrs	r2, r3
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	2120      	movs	r1, #32
 80167ba:	0018      	movs	r0, r3
 80167bc:	f001 faa8 	bl	8017d10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	0018      	movs	r0, r3
 80167c4:	f000 ff1d 	bl	8017602 <I2C_Flush_TXDR>
 80167c8:	e0ef      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	085b      	lsrs	r3, r3, #1
 80167ce:	001a      	movs	r2, r3
 80167d0:	2301      	movs	r3, #1
 80167d2:	4013      	ands	r3, r2
 80167d4:	d00f      	beq.n	80167f6 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	085b      	lsrs	r3, r3, #1
 80167da:	001a      	movs	r2, r3
 80167dc:	2301      	movs	r3, #1
 80167de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80167e0:	d009      	beq.n	80167f6 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	68fa      	ldr	r2, [r7, #12]
 80167e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80167ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2201      	movs	r2, #1
 80167f0:	4252      	negs	r2, r2
 80167f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80167f4:	e0d9      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	09db      	lsrs	r3, r3, #7
 80167fa:	001a      	movs	r2, r3
 80167fc:	2301      	movs	r3, #1
 80167fe:	4013      	ands	r3, r2
 8016800:	d060      	beq.n	80168c4 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	099b      	lsrs	r3, r3, #6
 8016806:	001a      	movs	r2, r3
 8016808:	2301      	movs	r3, #1
 801680a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801680c:	d05a      	beq.n	80168c4 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2110      	movs	r1, #16
 8016812:	0018      	movs	r0, r3
 8016814:	f001 fa7c 	bl	8017d10 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801681c:	b29b      	uxth	r3, r3
 801681e:	2b00      	cmp	r3, #0
 8016820:	d04a      	beq.n	80168b8 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016826:	b29b      	uxth	r3, r3
 8016828:	2bff      	cmp	r3, #255	@ 0xff
 801682a:	d910      	bls.n	801684e <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	22ff      	movs	r2, #255	@ 0xff
 8016830:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016836:	b299      	uxth	r1, r3
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801683c:	b2da      	uxtb	r2, r3
 801683e:	2380      	movs	r3, #128	@ 0x80
 8016840:	045b      	lsls	r3, r3, #17
 8016842:	68f8      	ldr	r0, [r7, #12]
 8016844:	2400      	movs	r4, #0
 8016846:	9400      	str	r4, [sp, #0]
 8016848:	f001 fa28 	bl	8017c9c <I2C_TransferConfig>
 801684c:	e011      	b.n	8016872 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016852:	b29a      	uxth	r2, r3
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801685c:	b299      	uxth	r1, r3
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016862:	b2da      	uxtb	r2, r3
 8016864:	2380      	movs	r3, #128	@ 0x80
 8016866:	049b      	lsls	r3, r3, #18
 8016868:	68f8      	ldr	r0, [r7, #12]
 801686a:	2400      	movs	r4, #0
 801686c:	9400      	str	r4, [sp, #0]
 801686e:	f001 fa15 	bl	8017c9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016876:	b29a      	uxth	r2, r3
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801687c:	1ad3      	subs	r3, r2, r3
 801687e:	b29a      	uxth	r2, r3
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	2241      	movs	r2, #65	@ 0x41
 8016888:	5c9b      	ldrb	r3, [r3, r2]
 801688a:	b2db      	uxtb	r3, r3
 801688c:	2b22      	cmp	r3, #34	@ 0x22
 801688e:	d109      	bne.n	80168a4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	681a      	ldr	r2, [r3, #0]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	2180      	movs	r1, #128	@ 0x80
 801689c:	0209      	lsls	r1, r1, #8
 801689e:	430a      	orrs	r2, r1
 80168a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80168a2:	e082      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	2180      	movs	r1, #128	@ 0x80
 80168b0:	01c9      	lsls	r1, r1, #7
 80168b2:	430a      	orrs	r2, r1
 80168b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80168b6:	e078      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2140      	movs	r1, #64	@ 0x40
 80168bc:	0018      	movs	r0, r3
 80168be:	f000 fd75 	bl	80173ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80168c2:	e072      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	099b      	lsrs	r3, r3, #6
 80168c8:	001a      	movs	r2, r3
 80168ca:	2301      	movs	r3, #1
 80168cc:	4013      	ands	r3, r2
 80168ce:	d05a      	beq.n	8016986 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	099b      	lsrs	r3, r3, #6
 80168d4:	001a      	movs	r2, r3
 80168d6:	2301      	movs	r3, #1
 80168d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80168da:	d054      	beq.n	8016986 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	2241      	movs	r2, #65	@ 0x41
 80168e0:	5c9b      	ldrb	r3, [r3, r2]
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	2b22      	cmp	r3, #34	@ 0x22
 80168e6:	d101      	bne.n	80168ec <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 80168e8:	4b35      	ldr	r3, [pc, #212]	@ (80169c0 <I2C_Mem_ISR_DMA+0x25c>)
 80168ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168f0:	b29b      	uxth	r3, r3
 80168f2:	2bff      	cmp	r3, #255	@ 0xff
 80168f4:	d911      	bls.n	801691a <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	22ff      	movs	r2, #255	@ 0xff
 80168fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016900:	b299      	uxth	r1, r3
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016906:	b2da      	uxtb	r2, r3
 8016908:	2380      	movs	r3, #128	@ 0x80
 801690a:	045c      	lsls	r4, r3, #17
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	9300      	str	r3, [sp, #0]
 8016912:	0023      	movs	r3, r4
 8016914:	f001 f9c2 	bl	8017c9c <I2C_TransferConfig>
 8016918:	e012      	b.n	8016940 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801691e:	b29a      	uxth	r2, r3
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016928:	b299      	uxth	r1, r3
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801692e:	b2da      	uxtb	r2, r3
 8016930:	2380      	movs	r3, #128	@ 0x80
 8016932:	049c      	lsls	r4, r3, #18
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	697b      	ldr	r3, [r7, #20]
 8016938:	9300      	str	r3, [sp, #0]
 801693a:	0023      	movs	r3, r4
 801693c:	f001 f9ae 	bl	8017c9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016944:	b29a      	uxth	r2, r3
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801694a:	1ad3      	subs	r3, r2, r3
 801694c:	b29a      	uxth	r2, r3
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	2241      	movs	r2, #65	@ 0x41
 8016956:	5c9b      	ldrb	r3, [r3, r2]
 8016958:	b2db      	uxtb	r3, r3
 801695a:	2b22      	cmp	r3, #34	@ 0x22
 801695c:	d109      	bne.n	8016972 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2180      	movs	r1, #128	@ 0x80
 801696a:	0209      	lsls	r1, r1, #8
 801696c:	430a      	orrs	r2, r1
 801696e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016970:	e01b      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	681a      	ldr	r2, [r3, #0]
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	2180      	movs	r1, #128	@ 0x80
 801697e:	01c9      	lsls	r1, r1, #7
 8016980:	430a      	orrs	r2, r1
 8016982:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016984:	e011      	b.n	80169aa <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	095b      	lsrs	r3, r3, #5
 801698a:	001a      	movs	r2, r3
 801698c:	2301      	movs	r3, #1
 801698e:	4013      	ands	r3, r2
 8016990:	d00b      	beq.n	80169aa <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	095b      	lsrs	r3, r3, #5
 8016996:	001a      	movs	r2, r3
 8016998:	2301      	movs	r3, #1
 801699a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801699c:	d005      	beq.n	80169aa <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	0011      	movs	r1, r2
 80169a4:	0018      	movs	r0, r3
 80169a6:	f000 fab1 	bl	8016f0c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	2240      	movs	r2, #64	@ 0x40
 80169ae:	2100      	movs	r1, #0
 80169b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80169b2:	2300      	movs	r3, #0
}
 80169b4:	0018      	movs	r0, r3
 80169b6:	46bd      	mov	sp, r7
 80169b8:	b007      	add	sp, #28
 80169ba:	bd90      	pop	{r4, r7, pc}
 80169bc:	80002000 	.word	0x80002000
 80169c0:	80002400 	.word	0x80002400

080169c4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b088      	sub	sp, #32
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169d4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80169d6:	2300      	movs	r3, #0
 80169d8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	2240      	movs	r2, #64	@ 0x40
 80169de:	5c9b      	ldrb	r3, [r3, r2]
 80169e0:	2b01      	cmp	r3, #1
 80169e2:	d101      	bne.n	80169e8 <I2C_Slave_ISR_DMA+0x24>
 80169e4:	2302      	movs	r3, #2
 80169e6:	e0dd      	b.n	8016ba4 <I2C_Slave_ISR_DMA+0x1e0>
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2240      	movs	r2, #64	@ 0x40
 80169ec:	2101      	movs	r1, #1
 80169ee:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	095b      	lsrs	r3, r3, #5
 80169f4:	001a      	movs	r2, r3
 80169f6:	2301      	movs	r3, #1
 80169f8:	4013      	ands	r3, r2
 80169fa:	d00b      	beq.n	8016a14 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	095b      	lsrs	r3, r3, #5
 8016a00:	001a      	movs	r2, r3
 8016a02:	2301      	movs	r3, #1
 8016a04:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8016a06:	d005      	beq.n	8016a14 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8016a08:	68ba      	ldr	r2, [r7, #8]
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	0011      	movs	r1, r2
 8016a0e:	0018      	movs	r0, r3
 8016a10:	f000 fb4e 	bl	80170b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	091b      	lsrs	r3, r3, #4
 8016a18:	001a      	movs	r2, r3
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	4013      	ands	r3, r2
 8016a1e:	d100      	bne.n	8016a22 <I2C_Slave_ISR_DMA+0x5e>
 8016a20:	e0a9      	b.n	8016b76 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	091b      	lsrs	r3, r3, #4
 8016a26:	001a      	movs	r2, r3
 8016a28:	2301      	movs	r3, #1
 8016a2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8016a2c:	d100      	bne.n	8016a30 <I2C_Slave_ISR_DMA+0x6c>
 8016a2e:	e0a2      	b.n	8016b76 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	0b9b      	lsrs	r3, r3, #14
 8016a34:	001a      	movs	r2, r3
 8016a36:	2301      	movs	r3, #1
 8016a38:	4013      	ands	r3, r2
 8016a3a:	d106      	bne.n	8016a4a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	0bdb      	lsrs	r3, r3, #15
 8016a40:	001a      	movs	r2, r3
 8016a42:	2301      	movs	r3, #1
 8016a44:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016a46:	d100      	bne.n	8016a4a <I2C_Slave_ISR_DMA+0x86>
 8016a48:	e08e      	b.n	8016b68 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00d      	beq.n	8016a6e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	0bdb      	lsrs	r3, r3, #15
 8016a56:	001a      	movs	r2, r3
 8016a58:	2301      	movs	r3, #1
 8016a5a:	4013      	ands	r3, r2
 8016a5c:	d007      	beq.n	8016a6e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	685b      	ldr	r3, [r3, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d101      	bne.n	8016a6e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00d      	beq.n	8016a92 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	0b9b      	lsrs	r3, r3, #14
 8016a7a:	001a      	movs	r2, r3
 8016a7c:	2301      	movs	r3, #1
 8016a7e:	4013      	ands	r3, r2
 8016a80:	d007      	beq.n	8016a92 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	685b      	ldr	r3, [r3, #4]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d101      	bne.n	8016a92 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8016a92:	69fb      	ldr	r3, [r7, #28]
 8016a94:	2b01      	cmp	r3, #1
 8016a96:	d12d      	bne.n	8016af4 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	2241      	movs	r2, #65	@ 0x41
 8016a9c:	5c9b      	ldrb	r3, [r3, r2]
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	2b28      	cmp	r3, #40	@ 0x28
 8016aa2:	d10b      	bne.n	8016abc <I2C_Slave_ISR_DMA+0xf8>
 8016aa4:	69ba      	ldr	r2, [r7, #24]
 8016aa6:	2380      	movs	r3, #128	@ 0x80
 8016aa8:	049b      	lsls	r3, r3, #18
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d106      	bne.n	8016abc <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8016aae:	68ba      	ldr	r2, [r7, #8]
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	0011      	movs	r1, r2
 8016ab4:	0018      	movs	r0, r3
 8016ab6:	f000 fc1f 	bl	80172f8 <I2C_ITListenCplt>
 8016aba:	e054      	b.n	8016b66 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	2241      	movs	r2, #65	@ 0x41
 8016ac0:	5c9b      	ldrb	r3, [r3, r2]
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	2b29      	cmp	r3, #41	@ 0x29
 8016ac6:	d110      	bne.n	8016aea <I2C_Slave_ISR_DMA+0x126>
 8016ac8:	69bb      	ldr	r3, [r7, #24]
 8016aca:	4a38      	ldr	r2, [pc, #224]	@ (8016bac <I2C_Slave_ISR_DMA+0x1e8>)
 8016acc:	4293      	cmp	r3, r2
 8016ace:	d00c      	beq.n	8016aea <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2210      	movs	r2, #16
 8016ad6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	0018      	movs	r0, r3
 8016adc:	f000 fd91 	bl	8017602 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	0018      	movs	r0, r3
 8016ae4:	f000 f9ac 	bl	8016e40 <I2C_ITSlaveSeqCplt>
 8016ae8:	e03d      	b.n	8016b66 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	2210      	movs	r2, #16
 8016af0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8016af2:	e03e      	b.n	8016b72 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2210      	movs	r2, #16
 8016afa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b00:	2204      	movs	r2, #4
 8016b02:	431a      	orrs	r2, r3
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8016b08:	2317      	movs	r3, #23
 8016b0a:	18fb      	adds	r3, r7, r3
 8016b0c:	68fa      	ldr	r2, [r7, #12]
 8016b0e:	2141      	movs	r1, #65	@ 0x41
 8016b10:	5c52      	ldrb	r2, [r2, r1]
 8016b12:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8016b14:	69bb      	ldr	r3, [r7, #24]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d004      	beq.n	8016b24 <I2C_Slave_ISR_DMA+0x160>
 8016b1a:	69ba      	ldr	r2, [r7, #24]
 8016b1c:	2380      	movs	r3, #128	@ 0x80
 8016b1e:	045b      	lsls	r3, r3, #17
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d126      	bne.n	8016b72 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8016b24:	2217      	movs	r2, #23
 8016b26:	18bb      	adds	r3, r7, r2
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	2b21      	cmp	r3, #33	@ 0x21
 8016b2c:	d003      	beq.n	8016b36 <I2C_Slave_ISR_DMA+0x172>
 8016b2e:	18bb      	adds	r3, r7, r2
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	2b29      	cmp	r3, #41	@ 0x29
 8016b34:	d103      	bne.n	8016b3e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	2221      	movs	r2, #33	@ 0x21
 8016b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8016b3c:	e00b      	b.n	8016b56 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8016b3e:	2217      	movs	r2, #23
 8016b40:	18bb      	adds	r3, r7, r2
 8016b42:	781b      	ldrb	r3, [r3, #0]
 8016b44:	2b22      	cmp	r3, #34	@ 0x22
 8016b46:	d003      	beq.n	8016b50 <I2C_Slave_ISR_DMA+0x18c>
 8016b48:	18bb      	adds	r3, r7, r2
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b4e:	d102      	bne.n	8016b56 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	2222      	movs	r2, #34	@ 0x22
 8016b54:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	0011      	movs	r1, r2
 8016b5e:	0018      	movs	r0, r3
 8016b60:	f000 fc24 	bl	80173ac <I2C_ITError>
      if (treatdmanack == 1U)
 8016b64:	e005      	b.n	8016b72 <I2C_Slave_ISR_DMA+0x1ae>
 8016b66:	e004      	b.n	8016b72 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	2210      	movs	r2, #16
 8016b6e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016b70:	e013      	b.n	8016b9a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8016b72:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8016b74:	e011      	b.n	8016b9a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	08db      	lsrs	r3, r3, #3
 8016b7a:	001a      	movs	r2, r3
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	4013      	ands	r3, r2
 8016b80:	d00b      	beq.n	8016b9a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	08db      	lsrs	r3, r3, #3
 8016b86:	001a      	movs	r2, r3
 8016b88:	2301      	movs	r3, #1
 8016b8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8016b8c:	d005      	beq.n	8016b9a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	0011      	movs	r1, r2
 8016b94:	0018      	movs	r0, r3
 8016b96:	f000 f86d 	bl	8016c74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2240      	movs	r2, #64	@ 0x40
 8016b9e:	2100      	movs	r1, #0
 8016ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	0018      	movs	r0, r3
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	b008      	add	sp, #32
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	ffff0000 	.word	0xffff0000

08016bb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8016bb0:	b5b0      	push	{r4, r5, r7, lr}
 8016bb2:	b086      	sub	sp, #24
 8016bb4:	af02      	add	r7, sp, #8
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	000c      	movs	r4, r1
 8016bba:	0010      	movs	r0, r2
 8016bbc:	0019      	movs	r1, r3
 8016bbe:	250a      	movs	r5, #10
 8016bc0:	197b      	adds	r3, r7, r5
 8016bc2:	1c22      	adds	r2, r4, #0
 8016bc4:	801a      	strh	r2, [r3, #0]
 8016bc6:	2308      	movs	r3, #8
 8016bc8:	18fb      	adds	r3, r7, r3
 8016bca:	1c02      	adds	r2, r0, #0
 8016bcc:	801a      	strh	r2, [r3, #0]
 8016bce:	1dbb      	adds	r3, r7, #6
 8016bd0:	1c0a      	adds	r2, r1, #0
 8016bd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8016bd4:	1dbb      	adds	r3, r7, #6
 8016bd6:	881b      	ldrh	r3, [r3, #0]
 8016bd8:	b2da      	uxtb	r2, r3
 8016bda:	197b      	adds	r3, r7, r5
 8016bdc:	8819      	ldrh	r1, [r3, #0]
 8016bde:	68f8      	ldr	r0, [r7, #12]
 8016be0:	4b23      	ldr	r3, [pc, #140]	@ (8016c70 <I2C_RequestMemoryRead+0xc0>)
 8016be2:	9300      	str	r3, [sp, #0]
 8016be4:	2300      	movs	r3, #0
 8016be6:	f001 f859 	bl	8017c9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bec:	6a39      	ldr	r1, [r7, #32]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	0018      	movs	r0, r3
 8016bf2:	f000 fe4f 	bl	8017894 <I2C_WaitOnTXISFlagUntilTimeout>
 8016bf6:	1e03      	subs	r3, r0, #0
 8016bf8:	d001      	beq.n	8016bfe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	e033      	b.n	8016c66 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016bfe:	1dbb      	adds	r3, r7, #6
 8016c00:	881b      	ldrh	r3, [r3, #0]
 8016c02:	2b01      	cmp	r3, #1
 8016c04:	d107      	bne.n	8016c16 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016c06:	2308      	movs	r3, #8
 8016c08:	18fb      	adds	r3, r7, r3
 8016c0a:	881b      	ldrh	r3, [r3, #0]
 8016c0c:	b2da      	uxtb	r2, r3
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	629a      	str	r2, [r3, #40]	@ 0x28
 8016c14:	e019      	b.n	8016c4a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016c16:	2308      	movs	r3, #8
 8016c18:	18fb      	adds	r3, r7, r3
 8016c1a:	881b      	ldrh	r3, [r3, #0]
 8016c1c:	0a1b      	lsrs	r3, r3, #8
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	b2da      	uxtb	r2, r3
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8016c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c2a:	6a39      	ldr	r1, [r7, #32]
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	0018      	movs	r0, r3
 8016c30:	f000 fe30 	bl	8017894 <I2C_WaitOnTXISFlagUntilTimeout>
 8016c34:	1e03      	subs	r3, r0, #0
 8016c36:	d001      	beq.n	8016c3c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	e014      	b.n	8016c66 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016c3c:	2308      	movs	r3, #8
 8016c3e:	18fb      	adds	r3, r7, r3
 8016c40:	881b      	ldrh	r3, [r3, #0]
 8016c42:	b2da      	uxtb	r2, r3
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8016c4a:	6a3a      	ldr	r2, [r7, #32]
 8016c4c:	68f8      	ldr	r0, [r7, #12]
 8016c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	0013      	movs	r3, r2
 8016c54:	2200      	movs	r2, #0
 8016c56:	2140      	movs	r1, #64	@ 0x40
 8016c58:	f000 fdce 	bl	80177f8 <I2C_WaitOnFlagUntilTimeout>
 8016c5c:	1e03      	subs	r3, r0, #0
 8016c5e:	d001      	beq.n	8016c64 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8016c60:	2301      	movs	r3, #1
 8016c62:	e000      	b.n	8016c66 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8016c64:	2300      	movs	r3, #0
}
 8016c66:	0018      	movs	r0, r3
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	b004      	add	sp, #16
 8016c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8016c6e:	46c0      	nop			@ (mov r8, r8)
 8016c70:	80002000 	.word	0x80002000

08016c74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016c74:	b5b0      	push	{r4, r5, r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
 8016c7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2241      	movs	r2, #65	@ 0x41
 8016c82:	5c9b      	ldrb	r3, [r3, r2]
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	001a      	movs	r2, r3
 8016c88:	2328      	movs	r3, #40	@ 0x28
 8016c8a:	4013      	ands	r3, r2
 8016c8c:	2b28      	cmp	r3, #40	@ 0x28
 8016c8e:	d000      	beq.n	8016c92 <I2C_ITAddrCplt+0x1e>
 8016c90:	e088      	b.n	8016da4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	699b      	ldr	r3, [r3, #24]
 8016c98:	0c1b      	lsrs	r3, r3, #16
 8016c9a:	b2da      	uxtb	r2, r3
 8016c9c:	250f      	movs	r5, #15
 8016c9e:	197b      	adds	r3, r7, r5
 8016ca0:	2101      	movs	r1, #1
 8016ca2:	400a      	ands	r2, r1
 8016ca4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	699b      	ldr	r3, [r3, #24]
 8016cac:	0c1b      	lsrs	r3, r3, #16
 8016cae:	b29a      	uxth	r2, r3
 8016cb0:	200c      	movs	r0, #12
 8016cb2:	183b      	adds	r3, r7, r0
 8016cb4:	21fe      	movs	r1, #254	@ 0xfe
 8016cb6:	400a      	ands	r2, r1
 8016cb8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	689b      	ldr	r3, [r3, #8]
 8016cc0:	b29a      	uxth	r2, r3
 8016cc2:	240a      	movs	r4, #10
 8016cc4:	193b      	adds	r3, r7, r4
 8016cc6:	0592      	lsls	r2, r2, #22
 8016cc8:	0d92      	lsrs	r2, r2, #22
 8016cca:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	68db      	ldr	r3, [r3, #12]
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	2308      	movs	r3, #8
 8016cd6:	18fb      	adds	r3, r7, r3
 8016cd8:	21fe      	movs	r1, #254	@ 0xfe
 8016cda:	400a      	ands	r2, r1
 8016cdc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	68db      	ldr	r3, [r3, #12]
 8016ce2:	2b02      	cmp	r3, #2
 8016ce4:	d148      	bne.n	8016d78 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8016ce6:	0021      	movs	r1, r4
 8016ce8:	187b      	adds	r3, r7, r1
 8016cea:	881b      	ldrh	r3, [r3, #0]
 8016cec:	09db      	lsrs	r3, r3, #7
 8016cee:	b29a      	uxth	r2, r3
 8016cf0:	183b      	adds	r3, r7, r0
 8016cf2:	881b      	ldrh	r3, [r3, #0]
 8016cf4:	4053      	eors	r3, r2
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	001a      	movs	r2, r3
 8016cfa:	2306      	movs	r3, #6
 8016cfc:	4013      	ands	r3, r2
 8016cfe:	d120      	bne.n	8016d42 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8016d00:	183b      	adds	r3, r7, r0
 8016d02:	187a      	adds	r2, r7, r1
 8016d04:	8812      	ldrh	r2, [r2, #0]
 8016d06:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d0c:	1c5a      	adds	r2, r3, #1
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016d16:	2b02      	cmp	r3, #2
 8016d18:	d14c      	bne.n	8016db4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2208      	movs	r2, #8
 8016d26:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	2240      	movs	r2, #64	@ 0x40
 8016d2c:	2100      	movs	r1, #0
 8016d2e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016d30:	183b      	adds	r3, r7, r0
 8016d32:	881a      	ldrh	r2, [r3, #0]
 8016d34:	197b      	adds	r3, r7, r5
 8016d36:	7819      	ldrb	r1, [r3, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	0018      	movs	r0, r3
 8016d3c:	f7ff f978 	bl	8016030 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8016d40:	e038      	b.n	8016db4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8016d42:	240c      	movs	r4, #12
 8016d44:	193b      	adds	r3, r7, r4
 8016d46:	2208      	movs	r2, #8
 8016d48:	18ba      	adds	r2, r7, r2
 8016d4a:	8812      	ldrh	r2, [r2, #0]
 8016d4c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016d4e:	2380      	movs	r3, #128	@ 0x80
 8016d50:	021a      	lsls	r2, r3, #8
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	0011      	movs	r1, r2
 8016d56:	0018      	movs	r0, r3
 8016d58:	f001 f868 	bl	8017e2c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2240      	movs	r2, #64	@ 0x40
 8016d60:	2100      	movs	r1, #0
 8016d62:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016d64:	193b      	adds	r3, r7, r4
 8016d66:	881a      	ldrh	r2, [r3, #0]
 8016d68:	230f      	movs	r3, #15
 8016d6a:	18fb      	adds	r3, r7, r3
 8016d6c:	7819      	ldrb	r1, [r3, #0]
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	0018      	movs	r0, r3
 8016d72:	f7ff f95d 	bl	8016030 <HAL_I2C_AddrCallback>
}
 8016d76:	e01d      	b.n	8016db4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8016d78:	2380      	movs	r3, #128	@ 0x80
 8016d7a:	021a      	lsls	r2, r3, #8
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	0011      	movs	r1, r2
 8016d80:	0018      	movs	r0, r3
 8016d82:	f001 f853 	bl	8017e2c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2240      	movs	r2, #64	@ 0x40
 8016d8a:	2100      	movs	r1, #0
 8016d8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8016d8e:	230c      	movs	r3, #12
 8016d90:	18fb      	adds	r3, r7, r3
 8016d92:	881a      	ldrh	r2, [r3, #0]
 8016d94:	230f      	movs	r3, #15
 8016d96:	18fb      	adds	r3, r7, r3
 8016d98:	7819      	ldrb	r1, [r3, #0]
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	0018      	movs	r0, r3
 8016d9e:	f7ff f947 	bl	8016030 <HAL_I2C_AddrCallback>
}
 8016da2:	e007      	b.n	8016db4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	2208      	movs	r2, #8
 8016daa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	2240      	movs	r2, #64	@ 0x40
 8016db0:	2100      	movs	r1, #0
 8016db2:	5499      	strb	r1, [r3, r2]
}
 8016db4:	46c0      	nop			@ (mov r8, r8)
 8016db6:	46bd      	mov	sp, r7
 8016db8:	b004      	add	sp, #16
 8016dba:	bdb0      	pop	{r4, r5, r7, pc}

08016dbc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b082      	sub	sp, #8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2242      	movs	r2, #66	@ 0x42
 8016dc8:	2100      	movs	r1, #0
 8016dca:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	2241      	movs	r2, #65	@ 0x41
 8016dd0:	5c9b      	ldrb	r3, [r3, r2]
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	2b21      	cmp	r3, #33	@ 0x21
 8016dd6:	d117      	bne.n	8016e08 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2241      	movs	r2, #65	@ 0x41
 8016ddc:	2120      	movs	r1, #32
 8016dde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2211      	movs	r2, #17
 8016de4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	2200      	movs	r2, #0
 8016dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2101      	movs	r1, #1
 8016df0:	0018      	movs	r0, r3
 8016df2:	f001 f81b 	bl	8017e2c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2240      	movs	r2, #64	@ 0x40
 8016dfa:	2100      	movs	r1, #0
 8016dfc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	0018      	movs	r0, r3
 8016e02:	f7ff f8f5 	bl	8015ff0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016e06:	e016      	b.n	8016e36 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2241      	movs	r2, #65	@ 0x41
 8016e0c:	2120      	movs	r1, #32
 8016e0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2212      	movs	r2, #18
 8016e14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2200      	movs	r2, #0
 8016e1a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2102      	movs	r1, #2
 8016e20:	0018      	movs	r0, r3
 8016e22:	f001 f803 	bl	8017e2c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2240      	movs	r2, #64	@ 0x40
 8016e2a:	2100      	movs	r1, #0
 8016e2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	0018      	movs	r0, r3
 8016e32:	f7ff f8e5 	bl	8016000 <HAL_I2C_MasterRxCpltCallback>
}
 8016e36:	46c0      	nop			@ (mov r8, r8)
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	b002      	add	sp, #8
 8016e3c:	bd80      	pop	{r7, pc}
	...

08016e40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b084      	sub	sp, #16
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2242      	movs	r2, #66	@ 0x42
 8016e54:	2100      	movs	r1, #0
 8016e56:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	0b9b      	lsrs	r3, r3, #14
 8016e5c:	001a      	movs	r2, r3
 8016e5e:	2301      	movs	r3, #1
 8016e60:	4013      	ands	r3, r2
 8016e62:	d008      	beq.n	8016e76 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	4925      	ldr	r1, [pc, #148]	@ (8016f04 <I2C_ITSlaveSeqCplt+0xc4>)
 8016e70:	400a      	ands	r2, r1
 8016e72:	601a      	str	r2, [r3, #0]
 8016e74:	e00d      	b.n	8016e92 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	0bdb      	lsrs	r3, r3, #15
 8016e7a:	001a      	movs	r2, r3
 8016e7c:	2301      	movs	r3, #1
 8016e7e:	4013      	ands	r3, r2
 8016e80:	d007      	beq.n	8016e92 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681a      	ldr	r2, [r3, #0]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	491e      	ldr	r1, [pc, #120]	@ (8016f08 <I2C_ITSlaveSeqCplt+0xc8>)
 8016e8e:	400a      	ands	r2, r1
 8016e90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2241      	movs	r2, #65	@ 0x41
 8016e96:	5c9b      	ldrb	r3, [r3, r2]
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	2b29      	cmp	r3, #41	@ 0x29
 8016e9c:	d114      	bne.n	8016ec8 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2241      	movs	r2, #65	@ 0x41
 8016ea2:	2128      	movs	r1, #40	@ 0x28
 8016ea4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2221      	movs	r2, #33	@ 0x21
 8016eaa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2101      	movs	r1, #1
 8016eb0:	0018      	movs	r0, r3
 8016eb2:	f000 ffbb 	bl	8017e2c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2240      	movs	r2, #64	@ 0x40
 8016eba:	2100      	movs	r1, #0
 8016ebc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	0018      	movs	r0, r3
 8016ec2:	f7ff f8a5 	bl	8016010 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016ec6:	e019      	b.n	8016efc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2241      	movs	r2, #65	@ 0x41
 8016ecc:	5c9b      	ldrb	r3, [r3, r2]
 8016ece:	b2db      	uxtb	r3, r3
 8016ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ed2:	d113      	bne.n	8016efc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2241      	movs	r2, #65	@ 0x41
 8016ed8:	2128      	movs	r1, #40	@ 0x28
 8016eda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2222      	movs	r2, #34	@ 0x22
 8016ee0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2102      	movs	r1, #2
 8016ee6:	0018      	movs	r0, r3
 8016ee8:	f000 ffa0 	bl	8017e2c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2240      	movs	r2, #64	@ 0x40
 8016ef0:	2100      	movs	r1, #0
 8016ef2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	0018      	movs	r0, r3
 8016ef8:	f7ff f892 	bl	8016020 <HAL_I2C_SlaveRxCpltCallback>
}
 8016efc:	46c0      	nop			@ (mov r8, r8)
 8016efe:	46bd      	mov	sp, r7
 8016f00:	b004      	add	sp, #16
 8016f02:	bd80      	pop	{r7, pc}
 8016f04:	ffffbfff 	.word	0xffffbfff
 8016f08:	ffff7fff 	.word	0xffff7fff

08016f0c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b086      	sub	sp, #24
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8016f16:	683b      	ldr	r3, [r7, #0]
 8016f18:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	2220      	movs	r2, #32
 8016f20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2241      	movs	r2, #65	@ 0x41
 8016f26:	5c9b      	ldrb	r3, [r3, r2]
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	2b21      	cmp	r3, #33	@ 0x21
 8016f2c:	d108      	bne.n	8016f40 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2101      	movs	r1, #1
 8016f32:	0018      	movs	r0, r3
 8016f34:	f000 ff7a 	bl	8017e2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	2211      	movs	r2, #17
 8016f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8016f3e:	e00d      	b.n	8016f5c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2241      	movs	r2, #65	@ 0x41
 8016f44:	5c9b      	ldrb	r3, [r3, r2]
 8016f46:	b2db      	uxtb	r3, r3
 8016f48:	2b22      	cmp	r3, #34	@ 0x22
 8016f4a:	d107      	bne.n	8016f5c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	2102      	movs	r1, #2
 8016f50:	0018      	movs	r0, r3
 8016f52:	f000 ff6b 	bl	8017e2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2212      	movs	r2, #18
 8016f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	685a      	ldr	r2, [r3, #4]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	4950      	ldr	r1, [pc, #320]	@ (80170a8 <I2C_ITMasterCplt+0x19c>)
 8016f68:	400a      	ands	r2, r1
 8016f6a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	4a4d      	ldr	r2, [pc, #308]	@ (80170ac <I2C_ITMasterCplt+0x1a0>)
 8016f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8016f78:	697b      	ldr	r3, [r7, #20]
 8016f7a:	091b      	lsrs	r3, r3, #4
 8016f7c:	001a      	movs	r2, r3
 8016f7e:	2301      	movs	r3, #1
 8016f80:	4013      	ands	r3, r2
 8016f82:	d009      	beq.n	8016f98 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2210      	movs	r2, #16
 8016f8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f90:	2204      	movs	r2, #4
 8016f92:	431a      	orrs	r2, r3
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2241      	movs	r2, #65	@ 0x41
 8016f9c:	5c9b      	ldrb	r3, [r3, r2]
 8016f9e:	b2db      	uxtb	r3, r3
 8016fa0:	2b60      	cmp	r3, #96	@ 0x60
 8016fa2:	d10b      	bne.n	8016fbc <I2C_ITMasterCplt+0xb0>
 8016fa4:	697b      	ldr	r3, [r7, #20]
 8016fa6:	089b      	lsrs	r3, r3, #2
 8016fa8:	001a      	movs	r2, r3
 8016faa:	2301      	movs	r3, #1
 8016fac:	4013      	ands	r3, r2
 8016fae:	d005      	beq.n	8016fbc <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fb6:	b2db      	uxtb	r3, r3
 8016fb8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8016fba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	0018      	movs	r0, r3
 8016fc0:	f000 fb1f 	bl	8017602 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016fc8:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	2241      	movs	r2, #65	@ 0x41
 8016fce:	5c9b      	ldrb	r3, [r3, r2]
 8016fd0:	b2db      	uxtb	r3, r3
 8016fd2:	2b60      	cmp	r3, #96	@ 0x60
 8016fd4:	d002      	beq.n	8016fdc <I2C_ITMasterCplt+0xd0>
 8016fd6:	693b      	ldr	r3, [r7, #16]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d007      	beq.n	8016fec <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	0011      	movs	r1, r2
 8016fe4:	0018      	movs	r0, r3
 8016fe6:	f000 f9e1 	bl	80173ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8016fea:	e058      	b.n	801709e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	2241      	movs	r2, #65	@ 0x41
 8016ff0:	5c9b      	ldrb	r3, [r3, r2]
 8016ff2:	b2db      	uxtb	r3, r3
 8016ff4:	2b21      	cmp	r3, #33	@ 0x21
 8016ff6:	d126      	bne.n	8017046 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	2241      	movs	r2, #65	@ 0x41
 8016ffc:	2120      	movs	r1, #32
 8016ffe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	2200      	movs	r2, #0
 8017004:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2242      	movs	r2, #66	@ 0x42
 801700a:	5c9b      	ldrb	r3, [r3, r2]
 801700c:	b2db      	uxtb	r3, r3
 801700e:	2b40      	cmp	r3, #64	@ 0x40
 8017010:	d10c      	bne.n	801702c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2242      	movs	r2, #66	@ 0x42
 8017016:	2100      	movs	r1, #0
 8017018:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2240      	movs	r2, #64	@ 0x40
 801701e:	2100      	movs	r1, #0
 8017020:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	0018      	movs	r0, r3
 8017026:	f7ff f81b 	bl	8016060 <HAL_I2C_MemTxCpltCallback>
}
 801702a:	e038      	b.n	801709e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2242      	movs	r2, #66	@ 0x42
 8017030:	2100      	movs	r1, #0
 8017032:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2240      	movs	r2, #64	@ 0x40
 8017038:	2100      	movs	r1, #0
 801703a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	0018      	movs	r0, r3
 8017040:	f7fe ffd6 	bl	8015ff0 <HAL_I2C_MasterTxCpltCallback>
}
 8017044:	e02b      	b.n	801709e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	2241      	movs	r2, #65	@ 0x41
 801704a:	5c9b      	ldrb	r3, [r3, r2]
 801704c:	b2db      	uxtb	r3, r3
 801704e:	2b22      	cmp	r3, #34	@ 0x22
 8017050:	d125      	bne.n	801709e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	2241      	movs	r2, #65	@ 0x41
 8017056:	2120      	movs	r1, #32
 8017058:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2200      	movs	r2, #0
 801705e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2242      	movs	r2, #66	@ 0x42
 8017064:	5c9b      	ldrb	r3, [r3, r2]
 8017066:	b2db      	uxtb	r3, r3
 8017068:	2b40      	cmp	r3, #64	@ 0x40
 801706a:	d10c      	bne.n	8017086 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2242      	movs	r2, #66	@ 0x42
 8017070:	2100      	movs	r1, #0
 8017072:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2240      	movs	r2, #64	@ 0x40
 8017078:	2100      	movs	r1, #0
 801707a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	0018      	movs	r0, r3
 8017080:	f7fe fff6 	bl	8016070 <HAL_I2C_MemRxCpltCallback>
}
 8017084:	e00b      	b.n	801709e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2242      	movs	r2, #66	@ 0x42
 801708a:	2100      	movs	r1, #0
 801708c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2240      	movs	r2, #64	@ 0x40
 8017092:	2100      	movs	r1, #0
 8017094:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	0018      	movs	r0, r3
 801709a:	f7fe ffb1 	bl	8016000 <HAL_I2C_MasterRxCpltCallback>
}
 801709e:	46c0      	nop			@ (mov r8, r8)
 80170a0:	46bd      	mov	sp, r7
 80170a2:	b006      	add	sp, #24
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	46c0      	nop			@ (mov r8, r8)
 80170a8:	fe00e800 	.word	0xfe00e800
 80170ac:	ffff0000 	.word	0xffff0000

080170b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80170b0:	b580      	push	{r7, lr}
 80170b2:	b086      	sub	sp, #24
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
 80170b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80170c6:	200f      	movs	r0, #15
 80170c8:	183b      	adds	r3, r7, r0
 80170ca:	687a      	ldr	r2, [r7, #4]
 80170cc:	2141      	movs	r1, #65	@ 0x41
 80170ce:	5c52      	ldrb	r2, [r2, r1]
 80170d0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	2220      	movs	r2, #32
 80170d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80170da:	183b      	adds	r3, r7, r0
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	2b21      	cmp	r3, #33	@ 0x21
 80170e0:	d003      	beq.n	80170ea <I2C_ITSlaveCplt+0x3a>
 80170e2:	183b      	adds	r3, r7, r0
 80170e4:	781b      	ldrb	r3, [r3, #0]
 80170e6:	2b29      	cmp	r3, #41	@ 0x29
 80170e8:	d109      	bne.n	80170fe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80170ea:	4a7d      	ldr	r2, [pc, #500]	@ (80172e0 <I2C_ITSlaveCplt+0x230>)
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	0011      	movs	r1, r2
 80170f0:	0018      	movs	r0, r3
 80170f2:	f000 fe9b 	bl	8017e2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2221      	movs	r2, #33	@ 0x21
 80170fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80170fc:	e011      	b.n	8017122 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80170fe:	220f      	movs	r2, #15
 8017100:	18bb      	adds	r3, r7, r2
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	2b22      	cmp	r3, #34	@ 0x22
 8017106:	d003      	beq.n	8017110 <I2C_ITSlaveCplt+0x60>
 8017108:	18bb      	adds	r3, r7, r2
 801710a:	781b      	ldrb	r3, [r3, #0]
 801710c:	2b2a      	cmp	r3, #42	@ 0x2a
 801710e:	d108      	bne.n	8017122 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8017110:	4a74      	ldr	r2, [pc, #464]	@ (80172e4 <I2C_ITSlaveCplt+0x234>)
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	0011      	movs	r1, r2
 8017116:	0018      	movs	r0, r3
 8017118:	f000 fe88 	bl	8017e2c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2222      	movs	r2, #34	@ 0x22
 8017120:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	685a      	ldr	r2, [r3, #4]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	2180      	movs	r1, #128	@ 0x80
 801712e:	0209      	lsls	r1, r1, #8
 8017130:	430a      	orrs	r2, r1
 8017132:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	685a      	ldr	r2, [r3, #4]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	496a      	ldr	r1, [pc, #424]	@ (80172e8 <I2C_ITSlaveCplt+0x238>)
 8017140:	400a      	ands	r2, r1
 8017142:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	0018      	movs	r0, r3
 8017148:	f000 fa5b 	bl	8017602 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801714c:	693b      	ldr	r3, [r7, #16]
 801714e:	0b9b      	lsrs	r3, r3, #14
 8017150:	001a      	movs	r2, r3
 8017152:	2301      	movs	r3, #1
 8017154:	4013      	ands	r3, r2
 8017156:	d013      	beq.n	8017180 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	681a      	ldr	r2, [r3, #0]
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	4962      	ldr	r1, [pc, #392]	@ (80172ec <I2C_ITSlaveCplt+0x23c>)
 8017164:	400a      	ands	r2, r1
 8017166:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801716c:	2b00      	cmp	r3, #0
 801716e:	d020      	beq.n	80171b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	b29a      	uxth	r2, r3
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801717e:	e018      	b.n	80171b2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	0bdb      	lsrs	r3, r3, #15
 8017184:	001a      	movs	r2, r3
 8017186:	2301      	movs	r3, #1
 8017188:	4013      	ands	r3, r2
 801718a:	d012      	beq.n	80171b2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	4956      	ldr	r1, [pc, #344]	@ (80172f0 <I2C_ITSlaveCplt+0x240>)
 8017198:	400a      	ands	r2, r1
 801719a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d006      	beq.n	80171b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	685b      	ldr	r3, [r3, #4]
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80171b2:	697b      	ldr	r3, [r7, #20]
 80171b4:	089b      	lsrs	r3, r3, #2
 80171b6:	001a      	movs	r2, r3
 80171b8:	2301      	movs	r3, #1
 80171ba:	4013      	ands	r3, r2
 80171bc:	d020      	beq.n	8017200 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	2204      	movs	r2, #4
 80171c2:	4393      	bics	r3, r2
 80171c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171d0:	b2d2      	uxtb	r2, r2
 80171d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171d8:	1c5a      	adds	r2, r3, #1
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d00c      	beq.n	8017200 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171ea:	3b01      	subs	r3, #1
 80171ec:	b29a      	uxth	r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	3b01      	subs	r3, #1
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017204:	b29b      	uxth	r3, r3
 8017206:	2b00      	cmp	r3, #0
 8017208:	d005      	beq.n	8017216 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801720e:	2204      	movs	r2, #4
 8017210:	431a      	orrs	r2, r3
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2242      	movs	r2, #66	@ 0x42
 801721a:	2100      	movs	r1, #0
 801721c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	2200      	movs	r2, #0
 8017222:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017228:	2b00      	cmp	r3, #0
 801722a:	d013      	beq.n	8017254 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	0011      	movs	r1, r2
 8017234:	0018      	movs	r0, r3
 8017236:	f000 f8b9 	bl	80173ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2241      	movs	r2, #65	@ 0x41
 801723e:	5c9b      	ldrb	r3, [r3, r2]
 8017240:	b2db      	uxtb	r3, r3
 8017242:	2b28      	cmp	r3, #40	@ 0x28
 8017244:	d147      	bne.n	80172d6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8017246:	697a      	ldr	r2, [r7, #20]
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	0011      	movs	r1, r2
 801724c:	0018      	movs	r0, r3
 801724e:	f000 f853 	bl	80172f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017252:	e040      	b.n	80172d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017258:	4a26      	ldr	r2, [pc, #152]	@ (80172f4 <I2C_ITSlaveCplt+0x244>)
 801725a:	4293      	cmp	r3, r2
 801725c:	d016      	beq.n	801728c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	0018      	movs	r0, r3
 8017262:	f7ff fded 	bl	8016e40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	4a22      	ldr	r2, [pc, #136]	@ (80172f4 <I2C_ITSlaveCplt+0x244>)
 801726a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	2241      	movs	r2, #65	@ 0x41
 8017270:	2120      	movs	r1, #32
 8017272:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2200      	movs	r2, #0
 8017278:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	2240      	movs	r2, #64	@ 0x40
 801727e:	2100      	movs	r1, #0
 8017280:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	0018      	movs	r0, r3
 8017286:	f7fe fee3 	bl	8016050 <HAL_I2C_ListenCpltCallback>
}
 801728a:	e024      	b.n	80172d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	2241      	movs	r2, #65	@ 0x41
 8017290:	5c9b      	ldrb	r3, [r3, r2]
 8017292:	b2db      	uxtb	r3, r3
 8017294:	2b22      	cmp	r3, #34	@ 0x22
 8017296:	d10f      	bne.n	80172b8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2241      	movs	r2, #65	@ 0x41
 801729c:	2120      	movs	r1, #32
 801729e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2200      	movs	r2, #0
 80172a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	2240      	movs	r2, #64	@ 0x40
 80172aa:	2100      	movs	r1, #0
 80172ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	0018      	movs	r0, r3
 80172b2:	f7fe feb5 	bl	8016020 <HAL_I2C_SlaveRxCpltCallback>
}
 80172b6:	e00e      	b.n	80172d6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2241      	movs	r2, #65	@ 0x41
 80172bc:	2120      	movs	r1, #32
 80172be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2200      	movs	r2, #0
 80172c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2240      	movs	r2, #64	@ 0x40
 80172ca:	2100      	movs	r1, #0
 80172cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	0018      	movs	r0, r3
 80172d2:	f7fe fe9d 	bl	8016010 <HAL_I2C_SlaveTxCpltCallback>
}
 80172d6:	46c0      	nop			@ (mov r8, r8)
 80172d8:	46bd      	mov	sp, r7
 80172da:	b006      	add	sp, #24
 80172dc:	bd80      	pop	{r7, pc}
 80172de:	46c0      	nop			@ (mov r8, r8)
 80172e0:	00008001 	.word	0x00008001
 80172e4:	00008002 	.word	0x00008002
 80172e8:	fe00e800 	.word	0xfe00e800
 80172ec:	ffffbfff 	.word	0xffffbfff
 80172f0:	ffff7fff 	.word	0xffff7fff
 80172f4:	ffff0000 	.word	0xffff0000

080172f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	4a27      	ldr	r2, [pc, #156]	@ (80173a4 <I2C_ITListenCplt+0xac>)
 8017306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2200      	movs	r2, #0
 801730c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2241      	movs	r2, #65	@ 0x41
 8017312:	2120      	movs	r1, #32
 8017314:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2242      	movs	r2, #66	@ 0x42
 801731a:	2100      	movs	r1, #0
 801731c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2200      	movs	r2, #0
 8017322:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	089b      	lsrs	r3, r3, #2
 8017328:	001a      	movs	r2, r3
 801732a:	2301      	movs	r3, #1
 801732c:	4013      	ands	r3, r2
 801732e:	d022      	beq.n	8017376 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801733a:	b2d2      	uxtb	r2, r2
 801733c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017342:	1c5a      	adds	r2, r3, #1
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801734c:	2b00      	cmp	r3, #0
 801734e:	d012      	beq.n	8017376 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017354:	3b01      	subs	r3, #1
 8017356:	b29a      	uxth	r2, r3
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017360:	b29b      	uxth	r3, r3
 8017362:	3b01      	subs	r3, #1
 8017364:	b29a      	uxth	r2, r3
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801736e:	2204      	movs	r2, #4
 8017370:	431a      	orrs	r2, r3
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017376:	4a0c      	ldr	r2, [pc, #48]	@ (80173a8 <I2C_ITListenCplt+0xb0>)
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	0011      	movs	r1, r2
 801737c:	0018      	movs	r0, r3
 801737e:	f000 fd55 	bl	8017e2c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	2210      	movs	r2, #16
 8017388:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	2240      	movs	r2, #64	@ 0x40
 801738e:	2100      	movs	r1, #0
 8017390:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	0018      	movs	r0, r3
 8017396:	f7fe fe5b 	bl	8016050 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801739a:	46c0      	nop			@ (mov r8, r8)
 801739c:	46bd      	mov	sp, r7
 801739e:	b002      	add	sp, #8
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	46c0      	nop			@ (mov r8, r8)
 80173a4:	ffff0000 	.word	0xffff0000
 80173a8:	00008003 	.word	0x00008003

080173ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b084      	sub	sp, #16
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
 80173b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80173b6:	200f      	movs	r0, #15
 80173b8:	183b      	adds	r3, r7, r0
 80173ba:	687a      	ldr	r2, [r7, #4]
 80173bc:	2141      	movs	r1, #65	@ 0x41
 80173be:	5c52      	ldrb	r2, [r2, r1]
 80173c0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	2242      	movs	r2, #66	@ 0x42
 80173c6:	2100      	movs	r1, #0
 80173c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	4a72      	ldr	r2, [pc, #456]	@ (8017598 <I2C_ITError+0x1ec>)
 80173ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	2200      	movs	r2, #0
 80173d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	431a      	orrs	r2, r3
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80173e2:	183b      	adds	r3, r7, r0
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	2b28      	cmp	r3, #40	@ 0x28
 80173e8:	d007      	beq.n	80173fa <I2C_ITError+0x4e>
 80173ea:	183b      	adds	r3, r7, r0
 80173ec:	781b      	ldrb	r3, [r3, #0]
 80173ee:	2b29      	cmp	r3, #41	@ 0x29
 80173f0:	d003      	beq.n	80173fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80173f2:	183b      	adds	r3, r7, r0
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80173f8:	d10c      	bne.n	8017414 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2103      	movs	r1, #3
 80173fe:	0018      	movs	r0, r3
 8017400:	f000 fd14 	bl	8017e2c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2241      	movs	r2, #65	@ 0x41
 8017408:	2128      	movs	r1, #40	@ 0x28
 801740a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	4a63      	ldr	r2, [pc, #396]	@ (801759c <I2C_ITError+0x1f0>)
 8017410:	635a      	str	r2, [r3, #52]	@ 0x34
 8017412:	e032      	b.n	801747a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8017414:	4a62      	ldr	r2, [pc, #392]	@ (80175a0 <I2C_ITError+0x1f4>)
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	0011      	movs	r1, r2
 801741a:	0018      	movs	r0, r3
 801741c:	f000 fd06 	bl	8017e2c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	0018      	movs	r0, r3
 8017424:	f000 f8ed 	bl	8017602 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	2241      	movs	r2, #65	@ 0x41
 801742c:	5c9b      	ldrb	r3, [r3, r2]
 801742e:	b2db      	uxtb	r3, r3
 8017430:	2b60      	cmp	r3, #96	@ 0x60
 8017432:	d01f      	beq.n	8017474 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2241      	movs	r2, #65	@ 0x41
 8017438:	2120      	movs	r1, #32
 801743a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	699b      	ldr	r3, [r3, #24]
 8017442:	2220      	movs	r2, #32
 8017444:	4013      	ands	r3, r2
 8017446:	2b20      	cmp	r3, #32
 8017448:	d114      	bne.n	8017474 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	699b      	ldr	r3, [r3, #24]
 8017450:	2210      	movs	r2, #16
 8017452:	4013      	ands	r3, r2
 8017454:	2b10      	cmp	r3, #16
 8017456:	d109      	bne.n	801746c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	2210      	movs	r2, #16
 801745e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017464:	2204      	movs	r2, #4
 8017466:	431a      	orrs	r2, r3
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	2220      	movs	r2, #32
 8017472:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801747e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017484:	2b00      	cmp	r3, #0
 8017486:	d03b      	beq.n	8017500 <I2C_ITError+0x154>
 8017488:	68bb      	ldr	r3, [r7, #8]
 801748a:	2b11      	cmp	r3, #17
 801748c:	d002      	beq.n	8017494 <I2C_ITError+0xe8>
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	2b21      	cmp	r3, #33	@ 0x21
 8017492:	d135      	bne.n	8017500 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	681a      	ldr	r2, [r3, #0]
 801749a:	2380      	movs	r3, #128	@ 0x80
 801749c:	01db      	lsls	r3, r3, #7
 801749e:	401a      	ands	r2, r3
 80174a0:	2380      	movs	r3, #128	@ 0x80
 80174a2:	01db      	lsls	r3, r3, #7
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d107      	bne.n	80174b8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	681a      	ldr	r2, [r3, #0]
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	493c      	ldr	r1, [pc, #240]	@ (80175a4 <I2C_ITError+0x1f8>)
 80174b4:	400a      	ands	r2, r1
 80174b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174bc:	0018      	movs	r0, r3
 80174be:	f7fd fa56 	bl	801496e <HAL_DMA_GetState>
 80174c2:	0003      	movs	r3, r0
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d016      	beq.n	80174f6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174cc:	4a36      	ldr	r2, [pc, #216]	@ (80175a8 <I2C_ITError+0x1fc>)
 80174ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2240      	movs	r2, #64	@ 0x40
 80174d4:	2100      	movs	r1, #0
 80174d6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174dc:	0018      	movs	r0, r3
 80174de:	f7fd f951 	bl	8014784 <HAL_DMA_Abort_IT>
 80174e2:	1e03      	subs	r3, r0, #0
 80174e4:	d051      	beq.n	801758a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174f0:	0018      	movs	r0, r3
 80174f2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80174f4:	e049      	b.n	801758a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	0018      	movs	r0, r3
 80174fa:	f000 f859 	bl	80175b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80174fe:	e044      	b.n	801758a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017504:	2b00      	cmp	r3, #0
 8017506:	d03b      	beq.n	8017580 <I2C_ITError+0x1d4>
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	2b12      	cmp	r3, #18
 801750c:	d002      	beq.n	8017514 <I2C_ITError+0x168>
 801750e:	68bb      	ldr	r3, [r7, #8]
 8017510:	2b22      	cmp	r3, #34	@ 0x22
 8017512:	d135      	bne.n	8017580 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	681a      	ldr	r2, [r3, #0]
 801751a:	2380      	movs	r3, #128	@ 0x80
 801751c:	021b      	lsls	r3, r3, #8
 801751e:	401a      	ands	r2, r3
 8017520:	2380      	movs	r3, #128	@ 0x80
 8017522:	021b      	lsls	r3, r3, #8
 8017524:	429a      	cmp	r2, r3
 8017526:	d107      	bne.n	8017538 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	491e      	ldr	r1, [pc, #120]	@ (80175ac <I2C_ITError+0x200>)
 8017534:	400a      	ands	r2, r1
 8017536:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801753c:	0018      	movs	r0, r3
 801753e:	f7fd fa16 	bl	801496e <HAL_DMA_GetState>
 8017542:	0003      	movs	r3, r0
 8017544:	2b01      	cmp	r3, #1
 8017546:	d016      	beq.n	8017576 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801754c:	4a16      	ldr	r2, [pc, #88]	@ (80175a8 <I2C_ITError+0x1fc>)
 801754e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2240      	movs	r2, #64	@ 0x40
 8017554:	2100      	movs	r1, #0
 8017556:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801755c:	0018      	movs	r0, r3
 801755e:	f7fd f911 	bl	8014784 <HAL_DMA_Abort_IT>
 8017562:	1e03      	subs	r3, r0, #0
 8017564:	d013      	beq.n	801758e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801756a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017570:	0018      	movs	r0, r3
 8017572:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8017574:	e00b      	b.n	801758e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	0018      	movs	r0, r3
 801757a:	f000 f819 	bl	80175b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801757e:	e006      	b.n	801758e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	0018      	movs	r0, r3
 8017584:	f000 f814 	bl	80175b0 <I2C_TreatErrorCallback>
  }
}
 8017588:	e002      	b.n	8017590 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801758a:	46c0      	nop			@ (mov r8, r8)
 801758c:	e000      	b.n	8017590 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801758e:	46c0      	nop			@ (mov r8, r8)
}
 8017590:	46c0      	nop			@ (mov r8, r8)
 8017592:	46bd      	mov	sp, r7
 8017594:	b004      	add	sp, #16
 8017596:	bd80      	pop	{r7, pc}
 8017598:	ffff0000 	.word	0xffff0000
 801759c:	08016325 	.word	0x08016325
 80175a0:	00008003 	.word	0x00008003
 80175a4:	ffffbfff 	.word	0xffffbfff
 80175a8:	080177bb 	.word	0x080177bb
 80175ac:	ffff7fff 	.word	0xffff7fff

080175b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	2241      	movs	r2, #65	@ 0x41
 80175bc:	5c9b      	ldrb	r3, [r3, r2]
 80175be:	b2db      	uxtb	r3, r3
 80175c0:	2b60      	cmp	r3, #96	@ 0x60
 80175c2:	d10f      	bne.n	80175e4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2241      	movs	r2, #65	@ 0x41
 80175c8:	2120      	movs	r1, #32
 80175ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	2200      	movs	r2, #0
 80175d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	2240      	movs	r2, #64	@ 0x40
 80175d6:	2100      	movs	r1, #0
 80175d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	0018      	movs	r0, r3
 80175de:	f7fe fd57 	bl	8016090 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80175e2:	e00a      	b.n	80175fa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2200      	movs	r2, #0
 80175e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2240      	movs	r2, #64	@ 0x40
 80175ee:	2100      	movs	r1, #0
 80175f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	0018      	movs	r0, r3
 80175f6:	f7fe fd43 	bl	8016080 <HAL_I2C_ErrorCallback>
}
 80175fa:	46c0      	nop			@ (mov r8, r8)
 80175fc:	46bd      	mov	sp, r7
 80175fe:	b002      	add	sp, #8
 8017600:	bd80      	pop	{r7, pc}

08017602 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8017602:	b580      	push	{r7, lr}
 8017604:	b082      	sub	sp, #8
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	699b      	ldr	r3, [r3, #24]
 8017610:	2202      	movs	r2, #2
 8017612:	4013      	ands	r3, r2
 8017614:	2b02      	cmp	r3, #2
 8017616:	d103      	bne.n	8017620 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	2200      	movs	r2, #0
 801761e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	699b      	ldr	r3, [r3, #24]
 8017626:	2201      	movs	r2, #1
 8017628:	4013      	ands	r3, r2
 801762a:	2b01      	cmp	r3, #1
 801762c:	d007      	beq.n	801763e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	699a      	ldr	r2, [r3, #24]
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	2101      	movs	r1, #1
 801763a:	430a      	orrs	r2, r1
 801763c:	619a      	str	r2, [r3, #24]
  }
}
 801763e:	46c0      	nop			@ (mov r8, r8)
 8017640:	46bd      	mov	sp, r7
 8017642:	b002      	add	sp, #8
 8017644:	bd80      	pop	{r7, pc}
	...

08017648 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b084      	sub	sp, #16
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017654:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	681a      	ldr	r2, [r3, #0]
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	4920      	ldr	r1, [pc, #128]	@ (80176e4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8017662:	400a      	ands	r2, r1
 8017664:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801766a:	b29b      	uxth	r3, r3
 801766c:	2b00      	cmp	r3, #0
 801766e:	d105      	bne.n	801767c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	2120      	movs	r1, #32
 8017674:	0018      	movs	r0, r3
 8017676:	f000 fb4b 	bl	8017d10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801767a:	e02e      	b.n	80176da <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017680:	68fa      	ldr	r2, [r7, #12]
 8017682:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017684:	189a      	adds	r2, r3, r2
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801768e:	b29b      	uxth	r3, r3
 8017690:	2bff      	cmp	r3, #255	@ 0xff
 8017692:	d903      	bls.n	801769c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	22ff      	movs	r2, #255	@ 0xff
 8017698:	851a      	strh	r2, [r3, #40]	@ 0x28
 801769a:	e004      	b.n	80176a6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ae:	0019      	movs	r1, r3
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	3328      	adds	r3, #40	@ 0x28
 80176b6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80176bc:	f7fc ffbc 	bl	8014638 <HAL_DMA_Start_IT>
 80176c0:	1e03      	subs	r3, r0, #0
 80176c2:	d005      	beq.n	80176d0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	2110      	movs	r1, #16
 80176c8:	0018      	movs	r0, r3
 80176ca:	f7ff fe6f 	bl	80173ac <I2C_ITError>
}
 80176ce:	e004      	b.n	80176da <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80176d0:	68fb      	ldr	r3, [r7, #12]
 80176d2:	2140      	movs	r1, #64	@ 0x40
 80176d4:	0018      	movs	r0, r3
 80176d6:	f000 fb1b 	bl	8017d10 <I2C_Enable_IRQ>
}
 80176da:	46c0      	nop			@ (mov r8, r8)
 80176dc:	46bd      	mov	sp, r7
 80176de:	b004      	add	sp, #16
 80176e0:	bd80      	pop	{r7, pc}
 80176e2:	46c0      	nop			@ (mov r8, r8)
 80176e4:	ffffbfff 	.word	0xffffbfff

080176e8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b084      	sub	sp, #16
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176f4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	681a      	ldr	r2, [r3, #0]
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4920      	ldr	r1, [pc, #128]	@ (8017784 <I2C_DMAMasterReceiveCplt+0x9c>)
 8017702:	400a      	ands	r2, r1
 8017704:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8017706:	68fb      	ldr	r3, [r7, #12]
 8017708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801770a:	b29b      	uxth	r3, r3
 801770c:	2b00      	cmp	r3, #0
 801770e:	d105      	bne.n	801771c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	2120      	movs	r1, #32
 8017714:	0018      	movs	r0, r3
 8017716:	f000 fafb 	bl	8017d10 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801771a:	e02e      	b.n	801777a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017720:	68fa      	ldr	r2, [r7, #12]
 8017722:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8017724:	189a      	adds	r2, r3, r2
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801772e:	b29b      	uxth	r3, r3
 8017730:	2bff      	cmp	r3, #255	@ 0xff
 8017732:	d903      	bls.n	801773c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	22ff      	movs	r2, #255	@ 0xff
 8017738:	851a      	strh	r2, [r3, #40]	@ 0x28
 801773a:	e004      	b.n	8017746 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017740:	b29a      	uxth	r2, r3
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	3324      	adds	r3, #36	@ 0x24
 8017750:	0019      	movs	r1, r3
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017756:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801775c:	f7fc ff6c 	bl	8014638 <HAL_DMA_Start_IT>
 8017760:	1e03      	subs	r3, r0, #0
 8017762:	d005      	beq.n	8017770 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	2110      	movs	r1, #16
 8017768:	0018      	movs	r0, r3
 801776a:	f7ff fe1f 	bl	80173ac <I2C_ITError>
}
 801776e:	e004      	b.n	801777a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	2140      	movs	r1, #64	@ 0x40
 8017774:	0018      	movs	r0, r3
 8017776:	f000 facb 	bl	8017d10 <I2C_Enable_IRQ>
}
 801777a:	46c0      	nop			@ (mov r8, r8)
 801777c:	46bd      	mov	sp, r7
 801777e:	b004      	add	sp, #16
 8017780:	bd80      	pop	{r7, pc}
 8017782:	46c0      	nop			@ (mov r8, r8)
 8017784:	ffff7fff 	.word	0xffff7fff

08017788 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017794:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	685a      	ldr	r2, [r3, #4]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2180      	movs	r1, #128	@ 0x80
 80177a2:	0209      	lsls	r1, r1, #8
 80177a4:	430a      	orrs	r2, r1
 80177a6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	2110      	movs	r1, #16
 80177ac:	0018      	movs	r0, r3
 80177ae:	f7ff fdfd 	bl	80173ac <I2C_ITError>
}
 80177b2:	46c0      	nop			@ (mov r8, r8)
 80177b4:	46bd      	mov	sp, r7
 80177b6:	b004      	add	sp, #16
 80177b8:	bd80      	pop	{r7, pc}

080177ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80177ba:	b580      	push	{r7, lr}
 80177bc:	b084      	sub	sp, #16
 80177be:	af00      	add	r7, sp, #0
 80177c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d003      	beq.n	80177d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177d4:	2200      	movs	r2, #0
 80177d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d003      	beq.n	80177e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177e4:	2200      	movs	r2, #0
 80177e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	0018      	movs	r0, r3
 80177ec:	f7ff fee0 	bl	80175b0 <I2C_TreatErrorCallback>
}
 80177f0:	46c0      	nop			@ (mov r8, r8)
 80177f2:	46bd      	mov	sp, r7
 80177f4:	b004      	add	sp, #16
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b084      	sub	sp, #16
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	60f8      	str	r0, [r7, #12]
 8017800:	60b9      	str	r1, [r7, #8]
 8017802:	603b      	str	r3, [r7, #0]
 8017804:	1dfb      	adds	r3, r7, #7
 8017806:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8017808:	e030      	b.n	801786c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	3301      	adds	r3, #1
 801780e:	d02d      	beq.n	801786c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017810:	f7fc f9c0 	bl	8013b94 <HAL_GetTick>
 8017814:	0002      	movs	r2, r0
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	1ad3      	subs	r3, r2, r3
 801781a:	683a      	ldr	r2, [r7, #0]
 801781c:	429a      	cmp	r2, r3
 801781e:	d302      	bcc.n	8017826 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d122      	bne.n	801786c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	699b      	ldr	r3, [r3, #24]
 801782c:	68ba      	ldr	r2, [r7, #8]
 801782e:	4013      	ands	r3, r2
 8017830:	68ba      	ldr	r2, [r7, #8]
 8017832:	1ad3      	subs	r3, r2, r3
 8017834:	425a      	negs	r2, r3
 8017836:	4153      	adcs	r3, r2
 8017838:	b2db      	uxtb	r3, r3
 801783a:	001a      	movs	r2, r3
 801783c:	1dfb      	adds	r3, r7, #7
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	429a      	cmp	r2, r3
 8017842:	d113      	bne.n	801786c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017848:	2220      	movs	r2, #32
 801784a:	431a      	orrs	r2, r3
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	2241      	movs	r2, #65	@ 0x41
 8017854:	2120      	movs	r1, #32
 8017856:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	2242      	movs	r2, #66	@ 0x42
 801785c:	2100      	movs	r1, #0
 801785e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	2240      	movs	r2, #64	@ 0x40
 8017864:	2100      	movs	r1, #0
 8017866:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8017868:	2301      	movs	r3, #1
 801786a:	e00f      	b.n	801788c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	699b      	ldr	r3, [r3, #24]
 8017872:	68ba      	ldr	r2, [r7, #8]
 8017874:	4013      	ands	r3, r2
 8017876:	68ba      	ldr	r2, [r7, #8]
 8017878:	1ad3      	subs	r3, r2, r3
 801787a:	425a      	negs	r2, r3
 801787c:	4153      	adcs	r3, r2
 801787e:	b2db      	uxtb	r3, r3
 8017880:	001a      	movs	r2, r3
 8017882:	1dfb      	adds	r3, r7, #7
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	429a      	cmp	r2, r3
 8017888:	d0bf      	beq.n	801780a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801788a:	2300      	movs	r3, #0
}
 801788c:	0018      	movs	r0, r3
 801788e:	46bd      	mov	sp, r7
 8017890:	b004      	add	sp, #16
 8017892:	bd80      	pop	{r7, pc}

08017894 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	60f8      	str	r0, [r7, #12]
 801789c:	60b9      	str	r1, [r7, #8]
 801789e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80178a0:	e032      	b.n	8017908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80178a2:	687a      	ldr	r2, [r7, #4]
 80178a4:	68b9      	ldr	r1, [r7, #8]
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	0018      	movs	r0, r3
 80178aa:	f000 f8ff 	bl	8017aac <I2C_IsErrorOccurred>
 80178ae:	1e03      	subs	r3, r0, #0
 80178b0:	d001      	beq.n	80178b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80178b2:	2301      	movs	r3, #1
 80178b4:	e030      	b.n	8017918 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	3301      	adds	r3, #1
 80178ba:	d025      	beq.n	8017908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80178bc:	f7fc f96a 	bl	8013b94 <HAL_GetTick>
 80178c0:	0002      	movs	r2, r0
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	1ad3      	subs	r3, r2, r3
 80178c6:	68ba      	ldr	r2, [r7, #8]
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d302      	bcc.n	80178d2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80178cc:	68bb      	ldr	r3, [r7, #8]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d11a      	bne.n	8017908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	699b      	ldr	r3, [r3, #24]
 80178d8:	2202      	movs	r2, #2
 80178da:	4013      	ands	r3, r2
 80178dc:	2b02      	cmp	r3, #2
 80178de:	d013      	beq.n	8017908 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178e4:	2220      	movs	r2, #32
 80178e6:	431a      	orrs	r2, r3
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2241      	movs	r2, #65	@ 0x41
 80178f0:	2120      	movs	r1, #32
 80178f2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	2242      	movs	r2, #66	@ 0x42
 80178f8:	2100      	movs	r1, #0
 80178fa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	2240      	movs	r2, #64	@ 0x40
 8017900:	2100      	movs	r1, #0
 8017902:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8017904:	2301      	movs	r3, #1
 8017906:	e007      	b.n	8017918 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	699b      	ldr	r3, [r3, #24]
 801790e:	2202      	movs	r2, #2
 8017910:	4013      	ands	r3, r2
 8017912:	2b02      	cmp	r3, #2
 8017914:	d1c5      	bne.n	80178a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8017916:	2300      	movs	r3, #0
}
 8017918:	0018      	movs	r0, r3
 801791a:	46bd      	mov	sp, r7
 801791c:	b004      	add	sp, #16
 801791e:	bd80      	pop	{r7, pc}

08017920 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b084      	sub	sp, #16
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801792c:	e02f      	b.n	801798e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801792e:	687a      	ldr	r2, [r7, #4]
 8017930:	68b9      	ldr	r1, [r7, #8]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	0018      	movs	r0, r3
 8017936:	f000 f8b9 	bl	8017aac <I2C_IsErrorOccurred>
 801793a:	1e03      	subs	r3, r0, #0
 801793c:	d001      	beq.n	8017942 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801793e:	2301      	movs	r3, #1
 8017940:	e02d      	b.n	801799e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017942:	f7fc f927 	bl	8013b94 <HAL_GetTick>
 8017946:	0002      	movs	r2, r0
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	1ad3      	subs	r3, r2, r3
 801794c:	68ba      	ldr	r2, [r7, #8]
 801794e:	429a      	cmp	r2, r3
 8017950:	d302      	bcc.n	8017958 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d11a      	bne.n	801798e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	699b      	ldr	r3, [r3, #24]
 801795e:	2220      	movs	r2, #32
 8017960:	4013      	ands	r3, r2
 8017962:	2b20      	cmp	r3, #32
 8017964:	d013      	beq.n	801798e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801796a:	2220      	movs	r2, #32
 801796c:	431a      	orrs	r2, r3
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	2241      	movs	r2, #65	@ 0x41
 8017976:	2120      	movs	r1, #32
 8017978:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	2242      	movs	r2, #66	@ 0x42
 801797e:	2100      	movs	r1, #0
 8017980:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	2240      	movs	r2, #64	@ 0x40
 8017986:	2100      	movs	r1, #0
 8017988:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801798a:	2301      	movs	r3, #1
 801798c:	e007      	b.n	801799e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	699b      	ldr	r3, [r3, #24]
 8017994:	2220      	movs	r2, #32
 8017996:	4013      	ands	r3, r2
 8017998:	2b20      	cmp	r3, #32
 801799a:	d1c8      	bne.n	801792e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801799c:	2300      	movs	r3, #0
}
 801799e:	0018      	movs	r0, r3
 80179a0:	46bd      	mov	sp, r7
 80179a2:	b004      	add	sp, #16
 80179a4:	bd80      	pop	{r7, pc}
	...

080179a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80179b4:	e06b      	b.n	8017a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	68b9      	ldr	r1, [r7, #8]
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	0018      	movs	r0, r3
 80179be:	f000 f875 	bl	8017aac <I2C_IsErrorOccurred>
 80179c2:	1e03      	subs	r3, r0, #0
 80179c4:	d001      	beq.n	80179ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80179c6:	2301      	movs	r3, #1
 80179c8:	e069      	b.n	8017a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	699b      	ldr	r3, [r3, #24]
 80179d0:	2220      	movs	r2, #32
 80179d2:	4013      	ands	r3, r2
 80179d4:	2b20      	cmp	r3, #32
 80179d6:	d138      	bne.n	8017a4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	699b      	ldr	r3, [r3, #24]
 80179de:	2204      	movs	r2, #4
 80179e0:	4013      	ands	r3, r2
 80179e2:	2b04      	cmp	r3, #4
 80179e4:	d105      	bne.n	80179f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d001      	beq.n	80179f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80179ee:	2300      	movs	r3, #0
 80179f0:	e055      	b.n	8017a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	699b      	ldr	r3, [r3, #24]
 80179f8:	2210      	movs	r2, #16
 80179fa:	4013      	ands	r3, r2
 80179fc:	2b10      	cmp	r3, #16
 80179fe:	d107      	bne.n	8017a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	2210      	movs	r2, #16
 8017a06:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2204      	movs	r2, #4
 8017a0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8017a0e:	e002      	b.n	8017a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	2200      	movs	r2, #0
 8017a14:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	2220      	movs	r2, #32
 8017a1c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	685a      	ldr	r2, [r3, #4]
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	491f      	ldr	r1, [pc, #124]	@ (8017aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8017a2a:	400a      	ands	r2, r1
 8017a2c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	2241      	movs	r2, #65	@ 0x41
 8017a32:	2120      	movs	r1, #32
 8017a34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	2242      	movs	r2, #66	@ 0x42
 8017a3a:	2100      	movs	r1, #0
 8017a3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	2240      	movs	r2, #64	@ 0x40
 8017a42:	2100      	movs	r1, #0
 8017a44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017a46:	2301      	movs	r3, #1
 8017a48:	e029      	b.n	8017a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017a4a:	f7fc f8a3 	bl	8013b94 <HAL_GetTick>
 8017a4e:	0002      	movs	r2, r0
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	1ad3      	subs	r3, r2, r3
 8017a54:	68ba      	ldr	r2, [r7, #8]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	d302      	bcc.n	8017a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d116      	bne.n	8017a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	699b      	ldr	r3, [r3, #24]
 8017a66:	2204      	movs	r2, #4
 8017a68:	4013      	ands	r3, r2
 8017a6a:	2b04      	cmp	r3, #4
 8017a6c:	d00f      	beq.n	8017a8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017a72:	2220      	movs	r2, #32
 8017a74:	431a      	orrs	r2, r3
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	2241      	movs	r2, #65	@ 0x41
 8017a7e:	2120      	movs	r1, #32
 8017a80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	2240      	movs	r2, #64	@ 0x40
 8017a86:	2100      	movs	r1, #0
 8017a88:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	e007      	b.n	8017a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	699b      	ldr	r3, [r3, #24]
 8017a94:	2204      	movs	r2, #4
 8017a96:	4013      	ands	r3, r2
 8017a98:	2b04      	cmp	r3, #4
 8017a9a:	d18c      	bne.n	80179b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8017a9c:	2300      	movs	r3, #0
}
 8017a9e:	0018      	movs	r0, r3
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	b004      	add	sp, #16
 8017aa4:	bd80      	pop	{r7, pc}
 8017aa6:	46c0      	nop			@ (mov r8, r8)
 8017aa8:	fe00e800 	.word	0xfe00e800

08017aac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b08a      	sub	sp, #40	@ 0x28
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8017ab8:	2327      	movs	r3, #39	@ 0x27
 8017aba:	18fb      	adds	r3, r7, r3
 8017abc:	2200      	movs	r2, #0
 8017abe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	699b      	ldr	r3, [r3, #24]
 8017ac6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8017ad0:	69bb      	ldr	r3, [r7, #24]
 8017ad2:	2210      	movs	r2, #16
 8017ad4:	4013      	ands	r3, r2
 8017ad6:	d100      	bne.n	8017ada <I2C_IsErrorOccurred+0x2e>
 8017ad8:	e079      	b.n	8017bce <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	2210      	movs	r2, #16
 8017ae0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017ae2:	e057      	b.n	8017b94 <I2C_IsErrorOccurred+0xe8>
 8017ae4:	2227      	movs	r2, #39	@ 0x27
 8017ae6:	18bb      	adds	r3, r7, r2
 8017ae8:	18ba      	adds	r2, r7, r2
 8017aea:	7812      	ldrb	r2, [r2, #0]
 8017aec:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	3301      	adds	r3, #1
 8017af2:	d04f      	beq.n	8017b94 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8017af4:	f7fc f84e 	bl	8013b94 <HAL_GetTick>
 8017af8:	0002      	movs	r2, r0
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	1ad3      	subs	r3, r2, r3
 8017afe:	68ba      	ldr	r2, [r7, #8]
 8017b00:	429a      	cmp	r2, r3
 8017b02:	d302      	bcc.n	8017b0a <I2C_IsErrorOccurred+0x5e>
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d144      	bne.n	8017b94 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	685a      	ldr	r2, [r3, #4]
 8017b10:	2380      	movs	r3, #128	@ 0x80
 8017b12:	01db      	lsls	r3, r3, #7
 8017b14:	4013      	ands	r3, r2
 8017b16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8017b18:	2013      	movs	r0, #19
 8017b1a:	183b      	adds	r3, r7, r0
 8017b1c:	68fa      	ldr	r2, [r7, #12]
 8017b1e:	2142      	movs	r1, #66	@ 0x42
 8017b20:	5c52      	ldrb	r2, [r2, r1]
 8017b22:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	699a      	ldr	r2, [r3, #24]
 8017b2a:	2380      	movs	r3, #128	@ 0x80
 8017b2c:	021b      	lsls	r3, r3, #8
 8017b2e:	401a      	ands	r2, r3
 8017b30:	2380      	movs	r3, #128	@ 0x80
 8017b32:	021b      	lsls	r3, r3, #8
 8017b34:	429a      	cmp	r2, r3
 8017b36:	d126      	bne.n	8017b86 <I2C_IsErrorOccurred+0xda>
 8017b38:	697a      	ldr	r2, [r7, #20]
 8017b3a:	2380      	movs	r3, #128	@ 0x80
 8017b3c:	01db      	lsls	r3, r3, #7
 8017b3e:	429a      	cmp	r2, r3
 8017b40:	d021      	beq.n	8017b86 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8017b42:	183b      	adds	r3, r7, r0
 8017b44:	781b      	ldrb	r3, [r3, #0]
 8017b46:	2b20      	cmp	r3, #32
 8017b48:	d01d      	beq.n	8017b86 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	685a      	ldr	r2, [r3, #4]
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	2180      	movs	r1, #128	@ 0x80
 8017b56:	01c9      	lsls	r1, r1, #7
 8017b58:	430a      	orrs	r2, r1
 8017b5a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8017b5c:	f7fc f81a 	bl	8013b94 <HAL_GetTick>
 8017b60:	0003      	movs	r3, r0
 8017b62:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b64:	e00f      	b.n	8017b86 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8017b66:	f7fc f815 	bl	8013b94 <HAL_GetTick>
 8017b6a:	0002      	movs	r2, r0
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	1ad3      	subs	r3, r2, r3
 8017b70:	2b19      	cmp	r3, #25
 8017b72:	d908      	bls.n	8017b86 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8017b74:	6a3b      	ldr	r3, [r7, #32]
 8017b76:	2220      	movs	r2, #32
 8017b78:	4313      	orrs	r3, r2
 8017b7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8017b7c:	2327      	movs	r3, #39	@ 0x27
 8017b7e:	18fb      	adds	r3, r7, r3
 8017b80:	2201      	movs	r2, #1
 8017b82:	701a      	strb	r2, [r3, #0]

              break;
 8017b84:	e006      	b.n	8017b94 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	699b      	ldr	r3, [r3, #24]
 8017b8c:	2220      	movs	r2, #32
 8017b8e:	4013      	ands	r3, r2
 8017b90:	2b20      	cmp	r3, #32
 8017b92:	d1e8      	bne.n	8017b66 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	699b      	ldr	r3, [r3, #24]
 8017b9a:	2220      	movs	r2, #32
 8017b9c:	4013      	ands	r3, r2
 8017b9e:	2b20      	cmp	r3, #32
 8017ba0:	d004      	beq.n	8017bac <I2C_IsErrorOccurred+0x100>
 8017ba2:	2327      	movs	r3, #39	@ 0x27
 8017ba4:	18fb      	adds	r3, r7, r3
 8017ba6:	781b      	ldrb	r3, [r3, #0]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d09b      	beq.n	8017ae4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8017bac:	2327      	movs	r3, #39	@ 0x27
 8017bae:	18fb      	adds	r3, r7, r3
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d103      	bne.n	8017bbe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	2220      	movs	r2, #32
 8017bbc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8017bbe:	6a3b      	ldr	r3, [r7, #32]
 8017bc0:	2204      	movs	r2, #4
 8017bc2:	4313      	orrs	r3, r2
 8017bc4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8017bc6:	2327      	movs	r3, #39	@ 0x27
 8017bc8:	18fb      	adds	r3, r7, r3
 8017bca:	2201      	movs	r2, #1
 8017bcc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	699b      	ldr	r3, [r3, #24]
 8017bd4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8017bd6:	69ba      	ldr	r2, [r7, #24]
 8017bd8:	2380      	movs	r3, #128	@ 0x80
 8017bda:	005b      	lsls	r3, r3, #1
 8017bdc:	4013      	ands	r3, r2
 8017bde:	d00c      	beq.n	8017bfa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8017be0:	6a3b      	ldr	r3, [r7, #32]
 8017be2:	2201      	movs	r2, #1
 8017be4:	4313      	orrs	r3, r2
 8017be6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	2280      	movs	r2, #128	@ 0x80
 8017bee:	0052      	lsls	r2, r2, #1
 8017bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017bf2:	2327      	movs	r3, #39	@ 0x27
 8017bf4:	18fb      	adds	r3, r7, r3
 8017bf6:	2201      	movs	r2, #1
 8017bf8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8017bfa:	69ba      	ldr	r2, [r7, #24]
 8017bfc:	2380      	movs	r3, #128	@ 0x80
 8017bfe:	00db      	lsls	r3, r3, #3
 8017c00:	4013      	ands	r3, r2
 8017c02:	d00c      	beq.n	8017c1e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8017c04:	6a3b      	ldr	r3, [r7, #32]
 8017c06:	2208      	movs	r2, #8
 8017c08:	4313      	orrs	r3, r2
 8017c0a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2280      	movs	r2, #128	@ 0x80
 8017c12:	00d2      	lsls	r2, r2, #3
 8017c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017c16:	2327      	movs	r3, #39	@ 0x27
 8017c18:	18fb      	adds	r3, r7, r3
 8017c1a:	2201      	movs	r2, #1
 8017c1c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8017c1e:	69ba      	ldr	r2, [r7, #24]
 8017c20:	2380      	movs	r3, #128	@ 0x80
 8017c22:	009b      	lsls	r3, r3, #2
 8017c24:	4013      	ands	r3, r2
 8017c26:	d00c      	beq.n	8017c42 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8017c28:	6a3b      	ldr	r3, [r7, #32]
 8017c2a:	2202      	movs	r2, #2
 8017c2c:	4313      	orrs	r3, r2
 8017c2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	2280      	movs	r2, #128	@ 0x80
 8017c36:	0092      	lsls	r2, r2, #2
 8017c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8017c3a:	2327      	movs	r3, #39	@ 0x27
 8017c3c:	18fb      	adds	r3, r7, r3
 8017c3e:	2201      	movs	r2, #1
 8017c40:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8017c42:	2327      	movs	r3, #39	@ 0x27
 8017c44:	18fb      	adds	r3, r7, r3
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d01d      	beq.n	8017c88 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	0018      	movs	r0, r3
 8017c50:	f7ff fcd7 	bl	8017602 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	685a      	ldr	r2, [r3, #4]
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	490e      	ldr	r1, [pc, #56]	@ (8017c98 <I2C_IsErrorOccurred+0x1ec>)
 8017c60:	400a      	ands	r2, r1
 8017c62:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017c68:	6a3b      	ldr	r3, [r7, #32]
 8017c6a:	431a      	orrs	r2, r3
 8017c6c:	68fb      	ldr	r3, [r7, #12]
 8017c6e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2241      	movs	r2, #65	@ 0x41
 8017c74:	2120      	movs	r1, #32
 8017c76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	2242      	movs	r2, #66	@ 0x42
 8017c7c:	2100      	movs	r1, #0
 8017c7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	2240      	movs	r2, #64	@ 0x40
 8017c84:	2100      	movs	r1, #0
 8017c86:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8017c88:	2327      	movs	r3, #39	@ 0x27
 8017c8a:	18fb      	adds	r3, r7, r3
 8017c8c:	781b      	ldrb	r3, [r3, #0]
}
 8017c8e:	0018      	movs	r0, r3
 8017c90:	46bd      	mov	sp, r7
 8017c92:	b00a      	add	sp, #40	@ 0x28
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	46c0      	nop			@ (mov r8, r8)
 8017c98:	fe00e800 	.word	0xfe00e800

08017c9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8017c9c:	b590      	push	{r4, r7, lr}
 8017c9e:	b087      	sub	sp, #28
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	0008      	movs	r0, r1
 8017ca6:	0011      	movs	r1, r2
 8017ca8:	607b      	str	r3, [r7, #4]
 8017caa:	240a      	movs	r4, #10
 8017cac:	193b      	adds	r3, r7, r4
 8017cae:	1c02      	adds	r2, r0, #0
 8017cb0:	801a      	strh	r2, [r3, #0]
 8017cb2:	2009      	movs	r0, #9
 8017cb4:	183b      	adds	r3, r7, r0
 8017cb6:	1c0a      	adds	r2, r1, #0
 8017cb8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017cba:	193b      	adds	r3, r7, r4
 8017cbc:	881b      	ldrh	r3, [r3, #0]
 8017cbe:	059b      	lsls	r3, r3, #22
 8017cc0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017cc2:	183b      	adds	r3, r7, r0
 8017cc4:	781b      	ldrb	r3, [r3, #0]
 8017cc6:	0419      	lsls	r1, r3, #16
 8017cc8:	23ff      	movs	r3, #255	@ 0xff
 8017cca:	041b      	lsls	r3, r3, #16
 8017ccc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017cce:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8017cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cd6:	4313      	orrs	r3, r2
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	085b      	lsrs	r3, r3, #1
 8017cdc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	685b      	ldr	r3, [r3, #4]
 8017ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ce6:	0d51      	lsrs	r1, r2, #21
 8017ce8:	2280      	movs	r2, #128	@ 0x80
 8017cea:	00d2      	lsls	r2, r2, #3
 8017cec:	400a      	ands	r2, r1
 8017cee:	4907      	ldr	r1, [pc, #28]	@ (8017d0c <I2C_TransferConfig+0x70>)
 8017cf0:	430a      	orrs	r2, r1
 8017cf2:	43d2      	mvns	r2, r2
 8017cf4:	401a      	ands	r2, r3
 8017cf6:	0011      	movs	r1, r2
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	697a      	ldr	r2, [r7, #20]
 8017cfe:	430a      	orrs	r2, r1
 8017d00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8017d02:	46c0      	nop			@ (mov r8, r8)
 8017d04:	46bd      	mov	sp, r7
 8017d06:	b007      	add	sp, #28
 8017d08:	bd90      	pop	{r4, r7, pc}
 8017d0a:	46c0      	nop			@ (mov r8, r8)
 8017d0c:	03ff63ff 	.word	0x03ff63ff

08017d10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	000a      	movs	r2, r1
 8017d1a:	1cbb      	adds	r3, r7, #2
 8017d1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017d1e:	2300      	movs	r3, #0
 8017d20:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017d26:	4b3e      	ldr	r3, [pc, #248]	@ (8017e20 <I2C_Enable_IRQ+0x110>)
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d035      	beq.n	8017d98 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8017d30:	4b3c      	ldr	r3, [pc, #240]	@ (8017e24 <I2C_Enable_IRQ+0x114>)
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d030      	beq.n	8017d98 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8017d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8017e28 <I2C_Enable_IRQ+0x118>)
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d02b      	beq.n	8017d98 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017d40:	1cbb      	adds	r3, r7, #2
 8017d42:	2200      	movs	r2, #0
 8017d44:	5e9b      	ldrsh	r3, [r3, r2]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	da03      	bge.n	8017d52 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	22b8      	movs	r2, #184	@ 0xb8
 8017d4e:	4313      	orrs	r3, r2
 8017d50:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017d52:	1cbb      	adds	r3, r7, #2
 8017d54:	881b      	ldrh	r3, [r3, #0]
 8017d56:	2201      	movs	r2, #1
 8017d58:	4013      	ands	r3, r2
 8017d5a:	d003      	beq.n	8017d64 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	22f2      	movs	r2, #242	@ 0xf2
 8017d60:	4313      	orrs	r3, r2
 8017d62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017d64:	1cbb      	adds	r3, r7, #2
 8017d66:	881b      	ldrh	r3, [r3, #0]
 8017d68:	2202      	movs	r2, #2
 8017d6a:	4013      	ands	r3, r2
 8017d6c:	d003      	beq.n	8017d76 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	22f4      	movs	r2, #244	@ 0xf4
 8017d72:	4313      	orrs	r3, r2
 8017d74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017d76:	1cbb      	adds	r3, r7, #2
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	2b10      	cmp	r3, #16
 8017d7c:	d103      	bne.n	8017d86 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	2290      	movs	r2, #144	@ 0x90
 8017d82:	4313      	orrs	r3, r2
 8017d84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017d86:	1cbb      	adds	r3, r7, #2
 8017d88:	881b      	ldrh	r3, [r3, #0]
 8017d8a:	2b20      	cmp	r3, #32
 8017d8c:	d13c      	bne.n	8017e08 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	2220      	movs	r2, #32
 8017d92:	4313      	orrs	r3, r2
 8017d94:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017d96:	e037      	b.n	8017e08 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017d98:	1cbb      	adds	r3, r7, #2
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	5e9b      	ldrsh	r3, [r3, r2]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	da03      	bge.n	8017daa <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	22b8      	movs	r2, #184	@ 0xb8
 8017da6:	4313      	orrs	r3, r2
 8017da8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017daa:	1cbb      	adds	r3, r7, #2
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	2201      	movs	r2, #1
 8017db0:	4013      	ands	r3, r2
 8017db2:	d003      	beq.n	8017dbc <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	22f2      	movs	r2, #242	@ 0xf2
 8017db8:	4313      	orrs	r3, r2
 8017dba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017dbc:	1cbb      	adds	r3, r7, #2
 8017dbe:	881b      	ldrh	r3, [r3, #0]
 8017dc0:	2202      	movs	r2, #2
 8017dc2:	4013      	ands	r3, r2
 8017dc4:	d003      	beq.n	8017dce <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	22f4      	movs	r2, #244	@ 0xf4
 8017dca:	4313      	orrs	r3, r2
 8017dcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017dce:	1cbb      	adds	r3, r7, #2
 8017dd0:	881b      	ldrh	r3, [r3, #0]
 8017dd2:	2b10      	cmp	r3, #16
 8017dd4:	d103      	bne.n	8017dde <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	2290      	movs	r2, #144	@ 0x90
 8017dda:	4313      	orrs	r3, r2
 8017ddc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017dde:	1cbb      	adds	r3, r7, #2
 8017de0:	881b      	ldrh	r3, [r3, #0]
 8017de2:	2b20      	cmp	r3, #32
 8017de4:	d103      	bne.n	8017dee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	2260      	movs	r2, #96	@ 0x60
 8017dea:	4313      	orrs	r3, r2
 8017dec:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017df2:	4b0d      	ldr	r3, [pc, #52]	@ (8017e28 <I2C_Enable_IRQ+0x118>)
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d007      	beq.n	8017e08 <I2C_Enable_IRQ+0xf8>
 8017df8:	1cbb      	adds	r3, r7, #2
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	2b40      	cmp	r3, #64	@ 0x40
 8017dfe:	d103      	bne.n	8017e08 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8017e00:	68fb      	ldr	r3, [r7, #12]
 8017e02:	2240      	movs	r2, #64	@ 0x40
 8017e04:	4313      	orrs	r3, r2
 8017e06:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	6819      	ldr	r1, [r3, #0]
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	68fa      	ldr	r2, [r7, #12]
 8017e14:	430a      	orrs	r2, r1
 8017e16:	601a      	str	r2, [r3, #0]
}
 8017e18:	46c0      	nop			@ (mov r8, r8)
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	b004      	add	sp, #16
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	0801654d 	.word	0x0801654d
 8017e24:	080169c5 	.word	0x080169c5
 8017e28:	08016765 	.word	0x08016765

08017e2c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b084      	sub	sp, #16
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
 8017e34:	000a      	movs	r2, r1
 8017e36:	1cbb      	adds	r3, r7, #2
 8017e38:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8017e3e:	1cbb      	adds	r3, r7, #2
 8017e40:	881b      	ldrh	r3, [r3, #0]
 8017e42:	2201      	movs	r2, #1
 8017e44:	4013      	ands	r3, r2
 8017e46:	d010      	beq.n	8017e6a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	2242      	movs	r2, #66	@ 0x42
 8017e4c:	4313      	orrs	r3, r2
 8017e4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2241      	movs	r2, #65	@ 0x41
 8017e54:	5c9b      	ldrb	r3, [r3, r2]
 8017e56:	b2db      	uxtb	r3, r3
 8017e58:	001a      	movs	r2, r3
 8017e5a:	2328      	movs	r3, #40	@ 0x28
 8017e5c:	4013      	ands	r3, r2
 8017e5e:	2b28      	cmp	r3, #40	@ 0x28
 8017e60:	d003      	beq.n	8017e6a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	22b0      	movs	r2, #176	@ 0xb0
 8017e66:	4313      	orrs	r3, r2
 8017e68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8017e6a:	1cbb      	adds	r3, r7, #2
 8017e6c:	881b      	ldrh	r3, [r3, #0]
 8017e6e:	2202      	movs	r2, #2
 8017e70:	4013      	ands	r3, r2
 8017e72:	d010      	beq.n	8017e96 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	2244      	movs	r2, #68	@ 0x44
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	2241      	movs	r2, #65	@ 0x41
 8017e80:	5c9b      	ldrb	r3, [r3, r2]
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	001a      	movs	r2, r3
 8017e86:	2328      	movs	r3, #40	@ 0x28
 8017e88:	4013      	ands	r3, r2
 8017e8a:	2b28      	cmp	r3, #40	@ 0x28
 8017e8c:	d003      	beq.n	8017e96 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	22b0      	movs	r2, #176	@ 0xb0
 8017e92:	4313      	orrs	r3, r2
 8017e94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8017e96:	1cbb      	adds	r3, r7, #2
 8017e98:	2200      	movs	r2, #0
 8017e9a:	5e9b      	ldrsh	r3, [r3, r2]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	da03      	bge.n	8017ea8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	22b8      	movs	r2, #184	@ 0xb8
 8017ea4:	4313      	orrs	r3, r2
 8017ea6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8017ea8:	1cbb      	adds	r3, r7, #2
 8017eaa:	881b      	ldrh	r3, [r3, #0]
 8017eac:	2b10      	cmp	r3, #16
 8017eae:	d103      	bne.n	8017eb8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	2290      	movs	r2, #144	@ 0x90
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8017eb8:	1cbb      	adds	r3, r7, #2
 8017eba:	881b      	ldrh	r3, [r3, #0]
 8017ebc:	2b20      	cmp	r3, #32
 8017ebe:	d103      	bne.n	8017ec8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2220      	movs	r2, #32
 8017ec4:	4313      	orrs	r3, r2
 8017ec6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8017ec8:	1cbb      	adds	r3, r7, #2
 8017eca:	881b      	ldrh	r3, [r3, #0]
 8017ecc:	2b40      	cmp	r3, #64	@ 0x40
 8017ece:	d103      	bne.n	8017ed8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	2240      	movs	r2, #64	@ 0x40
 8017ed4:	4313      	orrs	r3, r2
 8017ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	43d9      	mvns	r1, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	400a      	ands	r2, r1
 8017ee8:	601a      	str	r2, [r3, #0]
}
 8017eea:	46c0      	nop			@ (mov r8, r8)
 8017eec:	46bd      	mov	sp, r7
 8017eee:	b004      	add	sp, #16
 8017ef0:	bd80      	pop	{r7, pc}
	...

08017ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b082      	sub	sp, #8
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
 8017efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2241      	movs	r2, #65	@ 0x41
 8017f02:	5c9b      	ldrb	r3, [r3, r2]
 8017f04:	b2db      	uxtb	r3, r3
 8017f06:	2b20      	cmp	r3, #32
 8017f08:	d138      	bne.n	8017f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	2240      	movs	r2, #64	@ 0x40
 8017f0e:	5c9b      	ldrb	r3, [r3, r2]
 8017f10:	2b01      	cmp	r3, #1
 8017f12:	d101      	bne.n	8017f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8017f14:	2302      	movs	r3, #2
 8017f16:	e032      	b.n	8017f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2240      	movs	r2, #64	@ 0x40
 8017f1c:	2101      	movs	r1, #1
 8017f1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2241      	movs	r2, #65	@ 0x41
 8017f24:	2124      	movs	r1, #36	@ 0x24
 8017f26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	681a      	ldr	r2, [r3, #0]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	2101      	movs	r1, #1
 8017f34:	438a      	bics	r2, r1
 8017f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4911      	ldr	r1, [pc, #68]	@ (8017f88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8017f44:	400a      	ands	r2, r1
 8017f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	6819      	ldr	r1, [r3, #0]
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	683a      	ldr	r2, [r7, #0]
 8017f54:	430a      	orrs	r2, r1
 8017f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	681a      	ldr	r2, [r3, #0]
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	2101      	movs	r1, #1
 8017f64:	430a      	orrs	r2, r1
 8017f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2241      	movs	r2, #65	@ 0x41
 8017f6c:	2120      	movs	r1, #32
 8017f6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	2240      	movs	r2, #64	@ 0x40
 8017f74:	2100      	movs	r1, #0
 8017f76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8017f78:	2300      	movs	r3, #0
 8017f7a:	e000      	b.n	8017f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8017f7c:	2302      	movs	r3, #2
  }
}
 8017f7e:	0018      	movs	r0, r3
 8017f80:	46bd      	mov	sp, r7
 8017f82:	b002      	add	sp, #8
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	46c0      	nop			@ (mov r8, r8)
 8017f88:	ffffefff 	.word	0xffffefff

08017f8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b084      	sub	sp, #16
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	2241      	movs	r2, #65	@ 0x41
 8017f9a:	5c9b      	ldrb	r3, [r3, r2]
 8017f9c:	b2db      	uxtb	r3, r3
 8017f9e:	2b20      	cmp	r3, #32
 8017fa0:	d139      	bne.n	8018016 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2240      	movs	r2, #64	@ 0x40
 8017fa6:	5c9b      	ldrb	r3, [r3, r2]
 8017fa8:	2b01      	cmp	r3, #1
 8017faa:	d101      	bne.n	8017fb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8017fac:	2302      	movs	r3, #2
 8017fae:	e033      	b.n	8018018 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2240      	movs	r2, #64	@ 0x40
 8017fb4:	2101      	movs	r1, #1
 8017fb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2241      	movs	r2, #65	@ 0x41
 8017fbc:	2124      	movs	r1, #36	@ 0x24
 8017fbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	681a      	ldr	r2, [r3, #0]
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	2101      	movs	r1, #1
 8017fcc:	438a      	bics	r2, r1
 8017fce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	4a11      	ldr	r2, [pc, #68]	@ (8018020 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8017fdc:	4013      	ands	r3, r2
 8017fde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	021b      	lsls	r3, r3, #8
 8017fe4:	68fa      	ldr	r2, [r7, #12]
 8017fe6:	4313      	orrs	r3, r2
 8017fe8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	68fa      	ldr	r2, [r7, #12]
 8017ff0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	681a      	ldr	r2, [r3, #0]
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	2101      	movs	r1, #1
 8017ffe:	430a      	orrs	r2, r1
 8018000:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2241      	movs	r2, #65	@ 0x41
 8018006:	2120      	movs	r1, #32
 8018008:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2240      	movs	r2, #64	@ 0x40
 801800e:	2100      	movs	r1, #0
 8018010:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018012:	2300      	movs	r3, #0
 8018014:	e000      	b.n	8018018 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018016:	2302      	movs	r3, #2
  }
}
 8018018:	0018      	movs	r0, r3
 801801a:	46bd      	mov	sp, r7
 801801c:	b004      	add	sp, #16
 801801e:	bd80      	pop	{r7, pc}
 8018020:	fffff0ff 	.word	0xfffff0ff

08018024 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b088      	sub	sp, #32
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	2b00      	cmp	r3, #0
 8018030:	d101      	bne.n	8018036 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018032:	2301      	movs	r3, #1
 8018034:	e0e1      	b.n	80181fa <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2235      	movs	r2, #53	@ 0x35
 801803a:	5c9b      	ldrb	r3, [r3, r2]
 801803c:	b2db      	uxtb	r3, r3
 801803e:	2b00      	cmp	r3, #0
 8018040:	d107      	bne.n	8018052 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	2234      	movs	r2, #52	@ 0x34
 8018046:	2100      	movs	r1, #0
 8018048:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	0018      	movs	r0, r3
 801804e:	f7f3 ffb5 	bl	800bfbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	2235      	movs	r2, #53	@ 0x35
 8018056:	2102      	movs	r1, #2
 8018058:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	69da      	ldr	r2, [r3, #28]
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	4967      	ldr	r1, [pc, #412]	@ (8018204 <HAL_I2S_Init+0x1e0>)
 8018066:	400a      	ands	r2, r1
 8018068:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	2202      	movs	r2, #2
 8018070:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	695b      	ldr	r3, [r3, #20]
 8018076:	2b02      	cmp	r3, #2
 8018078:	d073      	beq.n	8018162 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	68db      	ldr	r3, [r3, #12]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d102      	bne.n	8018088 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8018082:	2310      	movs	r3, #16
 8018084:	617b      	str	r3, [r7, #20]
 8018086:	e001      	b.n	801808c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8018088:	2320      	movs	r3, #32
 801808a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	689b      	ldr	r3, [r3, #8]
 8018090:	2b20      	cmp	r3, #32
 8018092:	d802      	bhi.n	801809a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	005b      	lsls	r3, r3, #1
 8018098:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801809a:	f002 fed3 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801809e:	0003      	movs	r3, r0
 80180a0:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	691a      	ldr	r2, [r3, #16]
 80180a6:	2380      	movs	r3, #128	@ 0x80
 80180a8:	009b      	lsls	r3, r3, #2
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d131      	bne.n	8018112 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d016      	beq.n	80180e4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	009b      	lsls	r3, r3, #2
 80180ba:	0019      	movs	r1, r3
 80180bc:	68f8      	ldr	r0, [r7, #12]
 80180be:	f7e8 f871 	bl	80001a4 <__udivsi3>
 80180c2:	0003      	movs	r3, r0
 80180c4:	001a      	movs	r2, r3
 80180c6:	0013      	movs	r3, r2
 80180c8:	009b      	lsls	r3, r3, #2
 80180ca:	189b      	adds	r3, r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	001a      	movs	r2, r3
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	695b      	ldr	r3, [r3, #20]
 80180d4:	0019      	movs	r1, r3
 80180d6:	0010      	movs	r0, r2
 80180d8:	f7e8 f864 	bl	80001a4 <__udivsi3>
 80180dc:	0003      	movs	r3, r0
 80180de:	3305      	adds	r3, #5
 80180e0:	613b      	str	r3, [r7, #16]
 80180e2:	e02a      	b.n	801813a <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80180e4:	697b      	ldr	r3, [r7, #20]
 80180e6:	00db      	lsls	r3, r3, #3
 80180e8:	0019      	movs	r1, r3
 80180ea:	68f8      	ldr	r0, [r7, #12]
 80180ec:	f7e8 f85a 	bl	80001a4 <__udivsi3>
 80180f0:	0003      	movs	r3, r0
 80180f2:	001a      	movs	r2, r3
 80180f4:	0013      	movs	r3, r2
 80180f6:	009b      	lsls	r3, r3, #2
 80180f8:	189b      	adds	r3, r3, r2
 80180fa:	005b      	lsls	r3, r3, #1
 80180fc:	001a      	movs	r2, r3
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	695b      	ldr	r3, [r3, #20]
 8018102:	0019      	movs	r1, r3
 8018104:	0010      	movs	r0, r2
 8018106:	f7e8 f84d 	bl	80001a4 <__udivsi3>
 801810a:	0003      	movs	r3, r0
 801810c:	3305      	adds	r3, #5
 801810e:	613b      	str	r3, [r7, #16]
 8018110:	e013      	b.n	801813a <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8018112:	6979      	ldr	r1, [r7, #20]
 8018114:	68f8      	ldr	r0, [r7, #12]
 8018116:	f7e8 f845 	bl	80001a4 <__udivsi3>
 801811a:	0003      	movs	r3, r0
 801811c:	001a      	movs	r2, r3
 801811e:	0013      	movs	r3, r2
 8018120:	009b      	lsls	r3, r3, #2
 8018122:	189b      	adds	r3, r3, r2
 8018124:	005b      	lsls	r3, r3, #1
 8018126:	001a      	movs	r2, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	695b      	ldr	r3, [r3, #20]
 801812c:	0019      	movs	r1, r3
 801812e:	0010      	movs	r0, r2
 8018130:	f7e8 f838 	bl	80001a4 <__udivsi3>
 8018134:	0003      	movs	r3, r0
 8018136:	3305      	adds	r3, #5
 8018138:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	210a      	movs	r1, #10
 801813e:	0018      	movs	r0, r3
 8018140:	f7e8 f830 	bl	80001a4 <__udivsi3>
 8018144:	0003      	movs	r3, r0
 8018146:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	2201      	movs	r2, #1
 801814c:	4013      	ands	r3, r2
 801814e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8018150:	693a      	ldr	r2, [r7, #16]
 8018152:	69bb      	ldr	r3, [r7, #24]
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	085b      	lsrs	r3, r3, #1
 8018158:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	021b      	lsls	r3, r3, #8
 801815e:	61bb      	str	r3, [r7, #24]
 8018160:	e003      	b.n	801816a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8018162:	2302      	movs	r3, #2
 8018164:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8018166:	2300      	movs	r3, #0
 8018168:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801816a:	69fb      	ldr	r3, [r7, #28]
 801816c:	2b01      	cmp	r3, #1
 801816e:	d902      	bls.n	8018176 <HAL_I2S_Init+0x152>
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	2bff      	cmp	r3, #255	@ 0xff
 8018174:	d907      	bls.n	8018186 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801817a:	2210      	movs	r2, #16
 801817c:	431a      	orrs	r2, r3
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8018182:	2301      	movs	r3, #1
 8018184:	e039      	b.n	80181fa <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	691a      	ldr	r2, [r3, #16]
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	431a      	orrs	r2, r3
 801818e:	0011      	movs	r1, r2
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	69fa      	ldr	r2, [r7, #28]
 8018196:	430a      	orrs	r2, r1
 8018198:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	69db      	ldr	r3, [r3, #28]
 80181a0:	4a18      	ldr	r2, [pc, #96]	@ (8018204 <HAL_I2S_Init+0x1e0>)
 80181a2:	401a      	ands	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6859      	ldr	r1, [r3, #4]
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	689b      	ldr	r3, [r3, #8]
 80181ac:	4319      	orrs	r1, r3
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	4319      	orrs	r1, r3
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	699b      	ldr	r3, [r3, #24]
 80181b8:	430b      	orrs	r3, r1
 80181ba:	431a      	orrs	r2, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	2180      	movs	r1, #128	@ 0x80
 80181c2:	0109      	lsls	r1, r1, #4
 80181c4:	430a      	orrs	r2, r1
 80181c6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	689b      	ldr	r3, [r3, #8]
 80181cc:	2b30      	cmp	r3, #48	@ 0x30
 80181ce:	d003      	beq.n	80181d8 <HAL_I2S_Init+0x1b4>
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	689b      	ldr	r3, [r3, #8]
 80181d4:	2bb0      	cmp	r3, #176	@ 0xb0
 80181d6:	d108      	bne.n	80181ea <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	69da      	ldr	r2, [r3, #28]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	2180      	movs	r1, #128	@ 0x80
 80181e4:	0149      	lsls	r1, r1, #5
 80181e6:	430a      	orrs	r2, r1
 80181e8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2200      	movs	r2, #0
 80181ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2235      	movs	r2, #53	@ 0x35
 80181f4:	2101      	movs	r1, #1
 80181f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80181f8:	2300      	movs	r3, #0
}
 80181fa:	0018      	movs	r0, r3
 80181fc:	46bd      	mov	sp, r7
 80181fe:	b008      	add	sp, #32
 8018200:	bd80      	pop	{r7, pc}
 8018202:	46c0      	nop			@ (mov r8, r8)
 8018204:	fffff040 	.word	0xfffff040

08018208 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b086      	sub	sp, #24
 801820c:	af00      	add	r7, sp, #0
 801820e:	60f8      	str	r0, [r7, #12]
 8018210:	60b9      	str	r1, [r7, #8]
 8018212:	1dbb      	adds	r3, r7, #6
 8018214:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d003      	beq.n	8018224 <HAL_I2S_Receive_DMA+0x1c>
 801821c:	1dbb      	adds	r3, r7, #6
 801821e:	881b      	ldrh	r3, [r3, #0]
 8018220:	2b00      	cmp	r3, #0
 8018222:	d101      	bne.n	8018228 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8018224:	2301      	movs	r3, #1
 8018226:	e0a6      	b.n	8018376 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	2234      	movs	r2, #52	@ 0x34
 801822c:	5c9b      	ldrb	r3, [r3, r2]
 801822e:	b2db      	uxtb	r3, r3
 8018230:	2b01      	cmp	r3, #1
 8018232:	d101      	bne.n	8018238 <HAL_I2S_Receive_DMA+0x30>
 8018234:	2302      	movs	r3, #2
 8018236:	e09e      	b.n	8018376 <HAL_I2S_Receive_DMA+0x16e>
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	2234      	movs	r2, #52	@ 0x34
 801823c:	2101      	movs	r1, #1
 801823e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	2235      	movs	r2, #53	@ 0x35
 8018244:	5c9b      	ldrb	r3, [r3, r2]
 8018246:	b2db      	uxtb	r3, r3
 8018248:	2b01      	cmp	r3, #1
 801824a:	d005      	beq.n	8018258 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	2234      	movs	r2, #52	@ 0x34
 8018250:	2100      	movs	r1, #0
 8018252:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8018254:	2302      	movs	r3, #2
 8018256:	e08e      	b.n	8018376 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	2235      	movs	r2, #53	@ 0x35
 801825c:	2104      	movs	r1, #4
 801825e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	2200      	movs	r2, #0
 8018264:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	68ba      	ldr	r2, [r7, #8]
 801826a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	69db      	ldr	r3, [r3, #28]
 8018272:	2207      	movs	r2, #7
 8018274:	4013      	ands	r3, r2
 8018276:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	2b03      	cmp	r3, #3
 801827c:	d002      	beq.n	8018284 <HAL_I2S_Receive_DMA+0x7c>
 801827e:	697b      	ldr	r3, [r7, #20]
 8018280:	2b05      	cmp	r3, #5
 8018282:	d10c      	bne.n	801829e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8018284:	1dbb      	adds	r3, r7, #6
 8018286:	881b      	ldrh	r3, [r3, #0]
 8018288:	18db      	adds	r3, r3, r3
 801828a:	b29a      	uxth	r2, r3
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8018290:	1dbb      	adds	r3, r7, #6
 8018292:	881b      	ldrh	r3, [r3, #0]
 8018294:	18db      	adds	r3, r3, r3
 8018296:	b29a      	uxth	r2, r3
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801829c:	e007      	b.n	80182ae <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	1dba      	adds	r2, r7, #6
 80182a2:	8812      	ldrh	r2, [r2, #0]
 80182a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	1dba      	adds	r2, r7, #6
 80182aa:	8812      	ldrh	r2, [r2, #0]
 80182ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182b2:	4a33      	ldr	r2, [pc, #204]	@ (8018380 <HAL_I2S_Receive_DMA+0x178>)
 80182b4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182ba:	4a32      	ldr	r2, [pc, #200]	@ (8018384 <HAL_I2S_Receive_DMA+0x17c>)
 80182bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80182c2:	4a31      	ldr	r2, [pc, #196]	@ (8018388 <HAL_I2S_Receive_DMA+0x180>)
 80182c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	69da      	ldr	r2, [r3, #28]
 80182cc:	23c0      	movs	r3, #192	@ 0xc0
 80182ce:	009b      	lsls	r3, r3, #2
 80182d0:	401a      	ands	r2, r3
 80182d2:	23c0      	movs	r3, #192	@ 0xc0
 80182d4:	009b      	lsls	r3, r3, #2
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d10a      	bne.n	80182f0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80182da:	2300      	movs	r3, #0
 80182dc:	613b      	str	r3, [r7, #16]
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	613b      	str	r3, [r7, #16]
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	689b      	ldr	r3, [r3, #8]
 80182ec:	613b      	str	r3, [r7, #16]
 80182ee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	330c      	adds	r3, #12
 80182fa:	0019      	movs	r1, r3
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018300:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018306:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8018308:	f7fc f996 	bl	8014638 <HAL_DMA_Start_IT>
 801830c:	1e03      	subs	r3, r0, #0
 801830e:	d00f      	beq.n	8018330 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018314:	2208      	movs	r2, #8
 8018316:	431a      	orrs	r2, r3
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	2235      	movs	r2, #53	@ 0x35
 8018320:	2101      	movs	r1, #1
 8018322:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2234      	movs	r2, #52	@ 0x34
 8018328:	2100      	movs	r1, #0
 801832a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 801832c:	2301      	movs	r3, #1
 801832e:	e022      	b.n	8018376 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	69da      	ldr	r2, [r3, #28]
 8018336:	2380      	movs	r3, #128	@ 0x80
 8018338:	00db      	lsls	r3, r3, #3
 801833a:	4013      	ands	r3, r2
 801833c:	d108      	bne.n	8018350 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	69da      	ldr	r2, [r3, #28]
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2180      	movs	r1, #128	@ 0x80
 801834a:	00c9      	lsls	r1, r1, #3
 801834c:	430a      	orrs	r2, r1
 801834e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	2201      	movs	r2, #1
 8018358:	4013      	ands	r3, r2
 801835a:	d107      	bne.n	801836c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	685a      	ldr	r2, [r3, #4]
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	2101      	movs	r1, #1
 8018368:	430a      	orrs	r2, r1
 801836a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	2234      	movs	r2, #52	@ 0x34
 8018370:	2100      	movs	r1, #0
 8018372:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8018374:	2300      	movs	r3, #0
}
 8018376:	0018      	movs	r0, r3
 8018378:	46bd      	mov	sp, r7
 801837a:	b006      	add	sp, #24
 801837c:	bd80      	pop	{r7, pc}
 801837e:	46c0      	nop			@ (mov r8, r8)
 8018380:	08018569 	.word	0x08018569
 8018384:	08018525 	.word	0x08018525
 8018388:	08018587 	.word	0x08018587

0801838c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b086      	sub	sp, #24
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8018394:	2317      	movs	r3, #23
 8018396:	18fb      	adds	r3, r7, r3
 8018398:	2200      	movs	r2, #0
 801839a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	685a      	ldr	r2, [r3, #4]
 80183a0:	2380      	movs	r3, #128	@ 0x80
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	429a      	cmp	r2, r3
 80183a6:	d003      	beq.n	80183b0 <HAL_I2S_DMAStop+0x24>
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	685b      	ldr	r3, [r3, #4]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d158      	bne.n	8018462 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d010      	beq.n	80183da <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183bc:	0018      	movs	r0, r3
 80183be:	f7fc f9a1 	bl	8014704 <HAL_DMA_Abort>
 80183c2:	1e03      	subs	r3, r0, #0
 80183c4:	d009      	beq.n	80183da <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ca:	2208      	movs	r2, #8
 80183cc:	431a      	orrs	r2, r3
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80183d2:	2317      	movs	r3, #23
 80183d4:	18fb      	adds	r3, r7, r3
 80183d6:	2201      	movs	r2, #1
 80183d8:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	2364      	movs	r3, #100	@ 0x64
 80183de:	2201      	movs	r2, #1
 80183e0:	2102      	movs	r1, #2
 80183e2:	f000 f8f7 	bl	80185d4 <I2S_WaitFlagStateUntilTimeout>
 80183e6:	1e03      	subs	r3, r0, #0
 80183e8:	d00d      	beq.n	8018406 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ee:	2201      	movs	r2, #1
 80183f0:	431a      	orrs	r2, r3
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	2235      	movs	r2, #53	@ 0x35
 80183fa:	2101      	movs	r1, #1
 80183fc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80183fe:	2317      	movs	r3, #23
 8018400:	18fb      	adds	r3, r7, r3
 8018402:	2201      	movs	r2, #1
 8018404:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8018406:	6878      	ldr	r0, [r7, #4]
 8018408:	2364      	movs	r3, #100	@ 0x64
 801840a:	2200      	movs	r2, #0
 801840c:	2180      	movs	r1, #128	@ 0x80
 801840e:	f000 f8e1 	bl	80185d4 <I2S_WaitFlagStateUntilTimeout>
 8018412:	1e03      	subs	r3, r0, #0
 8018414:	d00d      	beq.n	8018432 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801841a:	2201      	movs	r2, #1
 801841c:	431a      	orrs	r2, r3
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	2235      	movs	r2, #53	@ 0x35
 8018426:	2101      	movs	r1, #1
 8018428:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 801842a:	2317      	movs	r3, #23
 801842c:	18fb      	adds	r3, r7, r3
 801842e:	2201      	movs	r2, #1
 8018430:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	69da      	ldr	r2, [r3, #28]
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	4938      	ldr	r1, [pc, #224]	@ (8018520 <HAL_I2S_DMAStop+0x194>)
 801843e:	400a      	ands	r2, r1
 8018440:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8018442:	2300      	movs	r3, #0
 8018444:	613b      	str	r3, [r7, #16]
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	689b      	ldr	r3, [r3, #8]
 801844c:	613b      	str	r3, [r7, #16]
 801844e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	685a      	ldr	r2, [r3, #4]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	2102      	movs	r1, #2
 801845c:	438a      	bics	r2, r1
 801845e:	605a      	str	r2, [r3, #4]
 8018460:	e053      	b.n	801850a <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	685a      	ldr	r2, [r3, #4]
 8018466:	23c0      	movs	r3, #192	@ 0xc0
 8018468:	009b      	lsls	r3, r3, #2
 801846a:	429a      	cmp	r2, r3
 801846c:	d005      	beq.n	801847a <HAL_I2S_DMAStop+0xee>
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	685a      	ldr	r2, [r3, #4]
 8018472:	2380      	movs	r3, #128	@ 0x80
 8018474:	005b      	lsls	r3, r3, #1
 8018476:	429a      	cmp	r2, r3
 8018478:	d147      	bne.n	801850a <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801847e:	2b00      	cmp	r3, #0
 8018480:	d010      	beq.n	80184a4 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018486:	0018      	movs	r0, r3
 8018488:	f7fc f93c 	bl	8014704 <HAL_DMA_Abort>
 801848c:	1e03      	subs	r3, r0, #0
 801848e:	d009      	beq.n	80184a4 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018494:	2208      	movs	r2, #8
 8018496:	431a      	orrs	r2, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801849c:	2317      	movs	r3, #23
 801849e:	18fb      	adds	r3, r7, r3
 80184a0:	2201      	movs	r2, #1
 80184a2:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	69da      	ldr	r2, [r3, #28]
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	491c      	ldr	r1, [pc, #112]	@ (8018520 <HAL_I2S_DMAStop+0x194>)
 80184b0:	400a      	ands	r2, r1
 80184b2:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80184b4:	2300      	movs	r3, #0
 80184b6:	60fb      	str	r3, [r7, #12]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	60fb      	str	r3, [r7, #12]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	689b      	ldr	r3, [r3, #8]
 80184c6:	60fb      	str	r3, [r7, #12]
 80184c8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	685a      	ldr	r2, [r3, #4]
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	2101      	movs	r1, #1
 80184d6:	438a      	bics	r2, r1
 80184d8:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	685a      	ldr	r2, [r3, #4]
 80184de:	2380      	movs	r3, #128	@ 0x80
 80184e0:	005b      	lsls	r3, r3, #1
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d10e      	bne.n	8018504 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80184ea:	2240      	movs	r2, #64	@ 0x40
 80184ec:	431a      	orrs	r2, r3
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	2235      	movs	r2, #53	@ 0x35
 80184f6:	2101      	movs	r1, #1
 80184f8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80184fa:	2317      	movs	r3, #23
 80184fc:	18fb      	adds	r3, r7, r3
 80184fe:	2201      	movs	r2, #1
 8018500:	701a      	strb	r2, [r3, #0]
 8018502:	e002      	b.n	801850a <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	2235      	movs	r2, #53	@ 0x35
 801850e:	2101      	movs	r1, #1
 8018510:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8018512:	2317      	movs	r3, #23
 8018514:	18fb      	adds	r3, r7, r3
 8018516:	781b      	ldrb	r3, [r3, #0]
}
 8018518:	0018      	movs	r0, r3
 801851a:	46bd      	mov	sp, r7
 801851c:	b006      	add	sp, #24
 801851e:	bd80      	pop	{r7, pc}
 8018520:	fffffbff 	.word	0xfffffbff

08018524 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018530:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	69db      	ldr	r3, [r3, #28]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d10e      	bne.n	8018558 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	685a      	ldr	r2, [r3, #4]
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	2101      	movs	r1, #1
 8018546:	438a      	bics	r2, r1
 8018548:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	2200      	movs	r2, #0
 801854e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	2235      	movs	r2, #53	@ 0x35
 8018554:	2101      	movs	r1, #1
 8018556:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	0018      	movs	r0, r3
 801855c:	f7f8 fcc6 	bl	8010eec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8018560:	46c0      	nop			@ (mov r8, r8)
 8018562:	46bd      	mov	sp, r7
 8018564:	b004      	add	sp, #16
 8018566:	bd80      	pop	{r7, pc}

08018568 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018574:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	0018      	movs	r0, r3
 801857a:	f7f8 fca5 	bl	8010ec8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801857e:	46c0      	nop			@ (mov r8, r8)
 8018580:	46bd      	mov	sp, r7
 8018582:	b004      	add	sp, #16
 8018584:	bd80      	pop	{r7, pc}

08018586 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8018586:	b580      	push	{r7, lr}
 8018588:	b084      	sub	sp, #16
 801858a:	af00      	add	r7, sp, #0
 801858c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018592:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	685a      	ldr	r2, [r3, #4]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	2103      	movs	r1, #3
 80185a0:	438a      	bics	r2, r1
 80185a2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	2200      	movs	r2, #0
 80185a8:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	2200      	movs	r2, #0
 80185ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	2235      	movs	r2, #53	@ 0x35
 80185b4:	2101      	movs	r1, #1
 80185b6:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185bc:	2208      	movs	r2, #8
 80185be:	431a      	orrs	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	0018      	movs	r0, r3
 80185c8:	f7f8 fcde 	bl	8010f88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80185cc:	46c0      	nop			@ (mov r8, r8)
 80185ce:	46bd      	mov	sp, r7
 80185d0:	b004      	add	sp, #16
 80185d2:	bd80      	pop	{r7, pc}

080185d4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b086      	sub	sp, #24
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	603b      	str	r3, [r7, #0]
 80185e0:	1dfb      	adds	r3, r7, #7
 80185e2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80185e4:	f7fb fad6 	bl	8013b94 <HAL_GetTick>
 80185e8:	0003      	movs	r3, r0
 80185ea:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80185ec:	e017      	b.n	801861e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80185ee:	683b      	ldr	r3, [r7, #0]
 80185f0:	3301      	adds	r3, #1
 80185f2:	d014      	beq.n	801861e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80185f4:	f7fb face 	bl	8013b94 <HAL_GetTick>
 80185f8:	0002      	movs	r2, r0
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	1ad3      	subs	r3, r2, r3
 80185fe:	683a      	ldr	r2, [r7, #0]
 8018600:	429a      	cmp	r2, r3
 8018602:	d902      	bls.n	801860a <I2S_WaitFlagStateUntilTimeout+0x36>
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d109      	bne.n	801861e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2235      	movs	r2, #53	@ 0x35
 801860e:	2101      	movs	r1, #1
 8018610:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	2234      	movs	r2, #52	@ 0x34
 8018616:	2100      	movs	r1, #0
 8018618:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801861a:	2303      	movs	r3, #3
 801861c:	e00f      	b.n	801863e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	689b      	ldr	r3, [r3, #8]
 8018624:	68ba      	ldr	r2, [r7, #8]
 8018626:	4013      	ands	r3, r2
 8018628:	68ba      	ldr	r2, [r7, #8]
 801862a:	1ad3      	subs	r3, r2, r3
 801862c:	425a      	negs	r2, r3
 801862e:	4153      	adcs	r3, r2
 8018630:	b2db      	uxtb	r3, r3
 8018632:	001a      	movs	r2, r3
 8018634:	1dfb      	adds	r3, r7, #7
 8018636:	781b      	ldrb	r3, [r3, #0]
 8018638:	429a      	cmp	r2, r3
 801863a:	d1d8      	bne.n	80185ee <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 801863c:	2300      	movs	r3, #0
}
 801863e:	0018      	movs	r0, r3
 8018640:	46bd      	mov	sp, r7
 8018642:	b006      	add	sp, #24
 8018644:	bd80      	pop	{r7, pc}
	...

08018648 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8018648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801864a:	b08b      	sub	sp, #44	@ 0x2c
 801864c:	af06      	add	r7, sp, #24
 801864e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d101      	bne.n	801865a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8018656:	2301      	movs	r3, #1
 8018658:	e0f0      	b.n	801883c <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	4a79      	ldr	r2, [pc, #484]	@ (8018844 <HAL_PCD_Init+0x1fc>)
 801865e:	5c9b      	ldrb	r3, [r3, r2]
 8018660:	b2db      	uxtb	r3, r3
 8018662:	2b00      	cmp	r3, #0
 8018664:	d108      	bne.n	8018678 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8018666:	687a      	ldr	r2, [r7, #4]
 8018668:	23aa      	movs	r3, #170	@ 0xaa
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	2100      	movs	r1, #0
 801866e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	0018      	movs	r0, r3
 8018674:	f009 ff4c 	bl	8022510 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	4a72      	ldr	r2, [pc, #456]	@ (8018844 <HAL_PCD_Init+0x1fc>)
 801867c:	2103      	movs	r1, #3
 801867e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	0018      	movs	r0, r3
 8018686:	f005 fefd 	bl	801e484 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801868a:	230f      	movs	r3, #15
 801868c:	18fb      	adds	r3, r7, r3
 801868e:	2200      	movs	r2, #0
 8018690:	701a      	strb	r2, [r3, #0]
 8018692:	e049      	b.n	8018728 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8018694:	200f      	movs	r0, #15
 8018696:	183b      	adds	r3, r7, r0
 8018698:	781b      	ldrb	r3, [r3, #0]
 801869a:	6879      	ldr	r1, [r7, #4]
 801869c:	1c5a      	adds	r2, r3, #1
 801869e:	0013      	movs	r3, r2
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	189b      	adds	r3, r3, r2
 80186a4:	00db      	lsls	r3, r3, #3
 80186a6:	18cb      	adds	r3, r1, r3
 80186a8:	3301      	adds	r3, #1
 80186aa:	2201      	movs	r2, #1
 80186ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80186ae:	183b      	adds	r3, r7, r0
 80186b0:	781b      	ldrb	r3, [r3, #0]
 80186b2:	6879      	ldr	r1, [r7, #4]
 80186b4:	1c5a      	adds	r2, r3, #1
 80186b6:	0013      	movs	r3, r2
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	189b      	adds	r3, r3, r2
 80186bc:	00db      	lsls	r3, r3, #3
 80186be:	183a      	adds	r2, r7, r0
 80186c0:	7812      	ldrb	r2, [r2, #0]
 80186c2:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80186c4:	183b      	adds	r3, r7, r0
 80186c6:	781b      	ldrb	r3, [r3, #0]
 80186c8:	6879      	ldr	r1, [r7, #4]
 80186ca:	1c5a      	adds	r2, r3, #1
 80186cc:	0013      	movs	r3, r2
 80186ce:	009b      	lsls	r3, r3, #2
 80186d0:	189b      	adds	r3, r3, r2
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	18cb      	adds	r3, r1, r3
 80186d6:	3303      	adds	r3, #3
 80186d8:	2200      	movs	r2, #0
 80186da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80186dc:	183b      	adds	r3, r7, r0
 80186de:	781a      	ldrb	r2, [r3, #0]
 80186e0:	6879      	ldr	r1, [r7, #4]
 80186e2:	0013      	movs	r3, r2
 80186e4:	009b      	lsls	r3, r3, #2
 80186e6:	189b      	adds	r3, r3, r2
 80186e8:	00db      	lsls	r3, r3, #3
 80186ea:	18cb      	adds	r3, r1, r3
 80186ec:	3338      	adds	r3, #56	@ 0x38
 80186ee:	2200      	movs	r2, #0
 80186f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80186f2:	183b      	adds	r3, r7, r0
 80186f4:	781a      	ldrb	r2, [r3, #0]
 80186f6:	6879      	ldr	r1, [r7, #4]
 80186f8:	0013      	movs	r3, r2
 80186fa:	009b      	lsls	r3, r3, #2
 80186fc:	189b      	adds	r3, r3, r2
 80186fe:	00db      	lsls	r3, r3, #3
 8018700:	18cb      	adds	r3, r1, r3
 8018702:	333c      	adds	r3, #60	@ 0x3c
 8018704:	2200      	movs	r2, #0
 8018706:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8018708:	183b      	adds	r3, r7, r0
 801870a:	781a      	ldrb	r2, [r3, #0]
 801870c:	6879      	ldr	r1, [r7, #4]
 801870e:	0013      	movs	r3, r2
 8018710:	009b      	lsls	r3, r3, #2
 8018712:	189b      	adds	r3, r3, r2
 8018714:	00db      	lsls	r3, r3, #3
 8018716:	18cb      	adds	r3, r1, r3
 8018718:	3340      	adds	r3, #64	@ 0x40
 801871a:	2200      	movs	r2, #0
 801871c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801871e:	183b      	adds	r3, r7, r0
 8018720:	781a      	ldrb	r2, [r3, #0]
 8018722:	183b      	adds	r3, r7, r0
 8018724:	3201      	adds	r2, #1
 8018726:	701a      	strb	r2, [r3, #0]
 8018728:	210f      	movs	r1, #15
 801872a:	187b      	adds	r3, r7, r1
 801872c:	781a      	ldrb	r2, [r3, #0]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	685b      	ldr	r3, [r3, #4]
 8018732:	429a      	cmp	r2, r3
 8018734:	d3ae      	bcc.n	8018694 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8018736:	187b      	adds	r3, r7, r1
 8018738:	2200      	movs	r2, #0
 801873a:	701a      	strb	r2, [r3, #0]
 801873c:	e056      	b.n	80187ec <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801873e:	240f      	movs	r4, #15
 8018740:	193b      	adds	r3, r7, r4
 8018742:	781a      	ldrb	r2, [r3, #0]
 8018744:	6878      	ldr	r0, [r7, #4]
 8018746:	236a      	movs	r3, #106	@ 0x6a
 8018748:	33ff      	adds	r3, #255	@ 0xff
 801874a:	0019      	movs	r1, r3
 801874c:	0013      	movs	r3, r2
 801874e:	009b      	lsls	r3, r3, #2
 8018750:	189b      	adds	r3, r3, r2
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	18c3      	adds	r3, r0, r3
 8018756:	185b      	adds	r3, r3, r1
 8018758:	2200      	movs	r2, #0
 801875a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801875c:	193b      	adds	r3, r7, r4
 801875e:	781a      	ldrb	r2, [r3, #0]
 8018760:	6878      	ldr	r0, [r7, #4]
 8018762:	23b4      	movs	r3, #180	@ 0xb4
 8018764:	0059      	lsls	r1, r3, #1
 8018766:	0013      	movs	r3, r2
 8018768:	009b      	lsls	r3, r3, #2
 801876a:	189b      	adds	r3, r3, r2
 801876c:	00db      	lsls	r3, r3, #3
 801876e:	18c3      	adds	r3, r0, r3
 8018770:	185b      	adds	r3, r3, r1
 8018772:	193a      	adds	r2, r7, r4
 8018774:	7812      	ldrb	r2, [r2, #0]
 8018776:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8018778:	193b      	adds	r3, r7, r4
 801877a:	781a      	ldrb	r2, [r3, #0]
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	236c      	movs	r3, #108	@ 0x6c
 8018780:	33ff      	adds	r3, #255	@ 0xff
 8018782:	0019      	movs	r1, r3
 8018784:	0013      	movs	r3, r2
 8018786:	009b      	lsls	r3, r3, #2
 8018788:	189b      	adds	r3, r3, r2
 801878a:	00db      	lsls	r3, r3, #3
 801878c:	18c3      	adds	r3, r0, r3
 801878e:	185b      	adds	r3, r3, r1
 8018790:	2200      	movs	r2, #0
 8018792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8018794:	193b      	adds	r3, r7, r4
 8018796:	781a      	ldrb	r2, [r3, #0]
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	23bc      	movs	r3, #188	@ 0xbc
 801879c:	0059      	lsls	r1, r3, #1
 801879e:	0013      	movs	r3, r2
 80187a0:	009b      	lsls	r3, r3, #2
 80187a2:	189b      	adds	r3, r3, r2
 80187a4:	00db      	lsls	r3, r3, #3
 80187a6:	18c3      	adds	r3, r0, r3
 80187a8:	185b      	adds	r3, r3, r1
 80187aa:	2200      	movs	r2, #0
 80187ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80187ae:	193b      	adds	r3, r7, r4
 80187b0:	781a      	ldrb	r2, [r3, #0]
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	23be      	movs	r3, #190	@ 0xbe
 80187b6:	0059      	lsls	r1, r3, #1
 80187b8:	0013      	movs	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	189b      	adds	r3, r3, r2
 80187be:	00db      	lsls	r3, r3, #3
 80187c0:	18c3      	adds	r3, r0, r3
 80187c2:	185b      	adds	r3, r3, r1
 80187c4:	2200      	movs	r2, #0
 80187c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80187c8:	193b      	adds	r3, r7, r4
 80187ca:	781a      	ldrb	r2, [r3, #0]
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	23c0      	movs	r3, #192	@ 0xc0
 80187d0:	0059      	lsls	r1, r3, #1
 80187d2:	0013      	movs	r3, r2
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	189b      	adds	r3, r3, r2
 80187d8:	00db      	lsls	r3, r3, #3
 80187da:	18c3      	adds	r3, r0, r3
 80187dc:	185b      	adds	r3, r3, r1
 80187de:	2200      	movs	r2, #0
 80187e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80187e2:	193b      	adds	r3, r7, r4
 80187e4:	781a      	ldrb	r2, [r3, #0]
 80187e6:	193b      	adds	r3, r7, r4
 80187e8:	3201      	adds	r2, #1
 80187ea:	701a      	strb	r2, [r3, #0]
 80187ec:	230f      	movs	r3, #15
 80187ee:	18fb      	adds	r3, r7, r3
 80187f0:	781a      	ldrb	r2, [r3, #0]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	685b      	ldr	r3, [r3, #4]
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d3a1      	bcc.n	801873e <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6818      	ldr	r0, [r3, #0]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	466a      	mov	r2, sp
 8018802:	0011      	movs	r1, r2
 8018804:	001a      	movs	r2, r3
 8018806:	3210      	adds	r2, #16
 8018808:	ca70      	ldmia	r2!, {r4, r5, r6}
 801880a:	c170      	stmia	r1!, {r4, r5, r6}
 801880c:	ca30      	ldmia	r2!, {r4, r5}
 801880e:	c130      	stmia	r1!, {r4, r5}
 8018810:	6859      	ldr	r1, [r3, #4]
 8018812:	689a      	ldr	r2, [r3, #8]
 8018814:	68db      	ldr	r3, [r3, #12]
 8018816:	f005 fe4f 	bl	801e4b8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	2224      	movs	r2, #36	@ 0x24
 801881e:	2100      	movs	r1, #0
 8018820:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	4a07      	ldr	r2, [pc, #28]	@ (8018844 <HAL_PCD_Init+0x1fc>)
 8018826:	2101      	movs	r1, #1
 8018828:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	69db      	ldr	r3, [r3, #28]
 801882e:	2b01      	cmp	r3, #1
 8018830:	d103      	bne.n	801883a <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	0018      	movs	r0, r3
 8018836:	f001 fd23 	bl	801a280 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801883a:	2300      	movs	r3, #0
}
 801883c:	0018      	movs	r0, r3
 801883e:	46bd      	mov	sp, r7
 8018840:	b005      	add	sp, #20
 8018842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018844:	000002a9 	.word	0x000002a9

08018848 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8018850:	687a      	ldr	r2, [r7, #4]
 8018852:	23aa      	movs	r3, #170	@ 0xaa
 8018854:	009b      	lsls	r3, r3, #2
 8018856:	5cd3      	ldrb	r3, [r2, r3]
 8018858:	2b01      	cmp	r3, #1
 801885a:	d101      	bne.n	8018860 <HAL_PCD_Start+0x18>
 801885c:	2302      	movs	r3, #2
 801885e:	e014      	b.n	801888a <HAL_PCD_Start+0x42>
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	23aa      	movs	r3, #170	@ 0xaa
 8018864:	009b      	lsls	r3, r3, #2
 8018866:	2101      	movs	r1, #1
 8018868:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	0018      	movs	r0, r3
 8018870:	f005 fdf2 	bl	801e458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	0018      	movs	r0, r3
 801887a:	f007 fdf5 	bl	8020468 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801887e:	687a      	ldr	r2, [r7, #4]
 8018880:	23aa      	movs	r3, #170	@ 0xaa
 8018882:	009b      	lsls	r3, r3, #2
 8018884:	2100      	movs	r1, #0
 8018886:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018888:	2300      	movs	r3, #0
}
 801888a:	0018      	movs	r0, r3
 801888c:	46bd      	mov	sp, r7
 801888e:	b002      	add	sp, #8
 8018890:	bd80      	pop	{r7, pc}
	...

08018894 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b084      	sub	sp, #16
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	0018      	movs	r0, r3
 80188a2:	f007 fdf7 	bl	8020494 <USB_ReadInterrupts>
 80188a6:	0003      	movs	r3, r0
 80188a8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80188aa:	68fa      	ldr	r2, [r7, #12]
 80188ac:	2380      	movs	r3, #128	@ 0x80
 80188ae:	021b      	lsls	r3, r3, #8
 80188b0:	4013      	ands	r3, r2
 80188b2:	d004      	beq.n	80188be <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	0018      	movs	r0, r3
 80188b8:	f000 fb62 	bl	8018f80 <PCD_EP_ISR_Handler>

    return;
 80188bc:	e11d      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80188be:	68fa      	ldr	r2, [r7, #12]
 80188c0:	2380      	movs	r3, #128	@ 0x80
 80188c2:	00db      	lsls	r3, r3, #3
 80188c4:	4013      	ands	r3, r2
 80188c6:	d015      	beq.n	80188f4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	2244      	movs	r2, #68	@ 0x44
 80188ce:	5a9b      	ldrh	r3, [r3, r2]
 80188d0:	b29a      	uxth	r2, r3
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	498a      	ldr	r1, [pc, #552]	@ (8018b00 <HAL_PCD_IRQHandler+0x26c>)
 80188d8:	400a      	ands	r2, r1
 80188da:	b291      	uxth	r1, r2
 80188dc:	2244      	movs	r2, #68	@ 0x44
 80188de:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	0018      	movs	r0, r3
 80188e4:	f009 fe97 	bl	8022616 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2100      	movs	r1, #0
 80188ec:	0018      	movs	r0, r3
 80188ee:	f000 f915 	bl	8018b1c <HAL_PCD_SetAddress>

    return;
 80188f2:	e102      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80188f4:	68fa      	ldr	r2, [r7, #12]
 80188f6:	2380      	movs	r3, #128	@ 0x80
 80188f8:	01db      	lsls	r3, r3, #7
 80188fa:	4013      	ands	r3, r2
 80188fc:	d00c      	beq.n	8018918 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	2244      	movs	r2, #68	@ 0x44
 8018904:	5a9b      	ldrh	r3, [r3, r2]
 8018906:	b29a      	uxth	r2, r3
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	497d      	ldr	r1, [pc, #500]	@ (8018b04 <HAL_PCD_IRQHandler+0x270>)
 801890e:	400a      	ands	r2, r1
 8018910:	b291      	uxth	r1, r2
 8018912:	2244      	movs	r2, #68	@ 0x44
 8018914:	5299      	strh	r1, [r3, r2]

    return;
 8018916:	e0f0      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8018918:	68fa      	ldr	r2, [r7, #12]
 801891a:	2380      	movs	r3, #128	@ 0x80
 801891c:	019b      	lsls	r3, r3, #6
 801891e:	4013      	ands	r3, r2
 8018920:	d00c      	beq.n	801893c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	2244      	movs	r2, #68	@ 0x44
 8018928:	5a9b      	ldrh	r3, [r3, r2]
 801892a:	b29a      	uxth	r2, r3
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	4975      	ldr	r1, [pc, #468]	@ (8018b08 <HAL_PCD_IRQHandler+0x274>)
 8018932:	400a      	ands	r2, r1
 8018934:	b291      	uxth	r1, r2
 8018936:	2244      	movs	r2, #68	@ 0x44
 8018938:	5299      	strh	r1, [r3, r2]

    return;
 801893a:	e0de      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 801893c:	68fa      	ldr	r2, [r7, #12]
 801893e:	2380      	movs	r3, #128	@ 0x80
 8018940:	015b      	lsls	r3, r3, #5
 8018942:	4013      	ands	r3, r2
 8018944:	d038      	beq.n	80189b8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	2240      	movs	r2, #64	@ 0x40
 801894c:	5a9b      	ldrh	r3, [r3, r2]
 801894e:	b29a      	uxth	r2, r3
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	2104      	movs	r1, #4
 8018956:	438a      	bics	r2, r1
 8018958:	b291      	uxth	r1, r2
 801895a:	2240      	movs	r2, #64	@ 0x40
 801895c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	2240      	movs	r2, #64	@ 0x40
 8018964:	5a9b      	ldrh	r3, [r3, r2]
 8018966:	b29a      	uxth	r2, r3
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2108      	movs	r1, #8
 801896e:	438a      	bics	r2, r1
 8018970:	b291      	uxth	r1, r2
 8018972:	2240      	movs	r2, #64	@ 0x40
 8018974:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8018976:	687a      	ldr	r2, [r7, #4]
 8018978:	23b8      	movs	r3, #184	@ 0xb8
 801897a:	009b      	lsls	r3, r3, #2
 801897c:	5cd3      	ldrb	r3, [r2, r3]
 801897e:	2b01      	cmp	r3, #1
 8018980:	d109      	bne.n	8018996 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8018982:	687a      	ldr	r2, [r7, #4]
 8018984:	23b8      	movs	r3, #184	@ 0xb8
 8018986:	009b      	lsls	r3, r3, #2
 8018988:	2100      	movs	r1, #0
 801898a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	2100      	movs	r1, #0
 8018990:	0018      	movs	r0, r3
 8018992:	f001 fc9f 	bl	801a2d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	0018      	movs	r0, r3
 801899a:	f009 fe7d 	bl	8022698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	681b      	ldr	r3, [r3, #0]
 80189a2:	2244      	movs	r2, #68	@ 0x44
 80189a4:	5a9b      	ldrh	r3, [r3, r2]
 80189a6:	b29a      	uxth	r2, r3
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	4957      	ldr	r1, [pc, #348]	@ (8018b0c <HAL_PCD_IRQHandler+0x278>)
 80189ae:	400a      	ands	r2, r1
 80189b0:	b291      	uxth	r1, r2
 80189b2:	2244      	movs	r2, #68	@ 0x44
 80189b4:	5299      	strh	r1, [r3, r2]

    return;
 80189b6:	e0a0      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80189b8:	68fa      	ldr	r2, [r7, #12]
 80189ba:	2380      	movs	r3, #128	@ 0x80
 80189bc:	011b      	lsls	r3, r3, #4
 80189be:	4013      	ands	r3, r2
 80189c0:	d028      	beq.n	8018a14 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	2240      	movs	r2, #64	@ 0x40
 80189c8:	5a9b      	ldrh	r3, [r3, r2]
 80189ca:	b29a      	uxth	r2, r3
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	2108      	movs	r1, #8
 80189d2:	430a      	orrs	r2, r1
 80189d4:	b291      	uxth	r1, r2
 80189d6:	2240      	movs	r2, #64	@ 0x40
 80189d8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	2244      	movs	r2, #68	@ 0x44
 80189e0:	5a9b      	ldrh	r3, [r3, r2]
 80189e2:	b29a      	uxth	r2, r3
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4949      	ldr	r1, [pc, #292]	@ (8018b10 <HAL_PCD_IRQHandler+0x27c>)
 80189ea:	400a      	ands	r2, r1
 80189ec:	b291      	uxth	r1, r2
 80189ee:	2244      	movs	r2, #68	@ 0x44
 80189f0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2240      	movs	r2, #64	@ 0x40
 80189f8:	5a9b      	ldrh	r3, [r3, r2]
 80189fa:	b29a      	uxth	r2, r3
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2104      	movs	r1, #4
 8018a02:	430a      	orrs	r2, r1
 8018a04:	b291      	uxth	r1, r2
 8018a06:	2240      	movs	r2, #64	@ 0x40
 8018a08:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	0018      	movs	r0, r3
 8018a0e:	f009 fe27 	bl	8022660 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018a12:	e072      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8018a14:	68fb      	ldr	r3, [r7, #12]
 8018a16:	2280      	movs	r2, #128	@ 0x80
 8018a18:	4013      	ands	r3, r2
 8018a1a:	d046      	beq.n	8018aaa <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	2244      	movs	r2, #68	@ 0x44
 8018a22:	5a9b      	ldrh	r3, [r3, r2]
 8018a24:	b29a      	uxth	r2, r3
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	2180      	movs	r1, #128	@ 0x80
 8018a2c:	438a      	bics	r2, r1
 8018a2e:	b291      	uxth	r1, r2
 8018a30:	2244      	movs	r2, #68	@ 0x44
 8018a32:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8018a34:	687a      	ldr	r2, [r7, #4]
 8018a36:	23b8      	movs	r3, #184	@ 0xb8
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	5cd3      	ldrb	r3, [r2, r3]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d12f      	bne.n	8018aa0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2240      	movs	r2, #64	@ 0x40
 8018a46:	5a9b      	ldrh	r3, [r3, r2]
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	2104      	movs	r1, #4
 8018a50:	430a      	orrs	r2, r1
 8018a52:	b291      	uxth	r1, r2
 8018a54:	2240      	movs	r2, #64	@ 0x40
 8018a56:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	2240      	movs	r2, #64	@ 0x40
 8018a5e:	5a9b      	ldrh	r3, [r3, r2]
 8018a60:	b29a      	uxth	r2, r3
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	2108      	movs	r1, #8
 8018a68:	430a      	orrs	r2, r1
 8018a6a:	b291      	uxth	r1, r2
 8018a6c:	2240      	movs	r2, #64	@ 0x40
 8018a6e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	23b8      	movs	r3, #184	@ 0xb8
 8018a74:	009b      	lsls	r3, r3, #2
 8018a76:	2101      	movs	r1, #1
 8018a78:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	2254      	movs	r2, #84	@ 0x54
 8018a80:	5a9b      	ldrh	r3, [r3, r2]
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	089b      	lsrs	r3, r3, #2
 8018a86:	223c      	movs	r2, #60	@ 0x3c
 8018a88:	4013      	ands	r3, r2
 8018a8a:	0019      	movs	r1, r3
 8018a8c:	687a      	ldr	r2, [r7, #4]
 8018a8e:	23b9      	movs	r3, #185	@ 0xb9
 8018a90:	009b      	lsls	r3, r3, #2
 8018a92:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2101      	movs	r1, #1
 8018a98:	0018      	movs	r0, r3
 8018a9a:	f001 fc1b 	bl	801a2d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8018a9e:	e02c      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	0018      	movs	r0, r3
 8018aa4:	f009 fddc 	bl	8022660 <HAL_PCD_SuspendCallback>
    return;
 8018aa8:	e027      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8018aaa:	68fa      	ldr	r2, [r7, #12]
 8018aac:	2380      	movs	r3, #128	@ 0x80
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	4013      	ands	r3, r2
 8018ab2:	d010      	beq.n	8018ad6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	2244      	movs	r2, #68	@ 0x44
 8018aba:	5a9b      	ldrh	r3, [r3, r2]
 8018abc:	b29a      	uxth	r2, r3
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	4914      	ldr	r1, [pc, #80]	@ (8018b14 <HAL_PCD_IRQHandler+0x280>)
 8018ac4:	400a      	ands	r2, r1
 8018ac6:	b291      	uxth	r1, r2
 8018ac8:	2244      	movs	r2, #68	@ 0x44
 8018aca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	0018      	movs	r0, r3
 8018ad0:	f009 fd92 	bl	80225f8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8018ad4:	e011      	b.n	8018afa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8018ad6:	68fa      	ldr	r2, [r7, #12]
 8018ad8:	2380      	movs	r3, #128	@ 0x80
 8018ada:	005b      	lsls	r3, r3, #1
 8018adc:	4013      	ands	r3, r2
 8018ade:	d00c      	beq.n	8018afa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	2244      	movs	r2, #68	@ 0x44
 8018ae6:	5a9b      	ldrh	r3, [r3, r2]
 8018ae8:	b29a      	uxth	r2, r3
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	490a      	ldr	r1, [pc, #40]	@ (8018b18 <HAL_PCD_IRQHandler+0x284>)
 8018af0:	400a      	ands	r2, r1
 8018af2:	b291      	uxth	r1, r2
 8018af4:	2244      	movs	r2, #68	@ 0x44
 8018af6:	5299      	strh	r1, [r3, r2]

    return;
 8018af8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018afa:	46bd      	mov	sp, r7
 8018afc:	b004      	add	sp, #16
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	fffffbff 	.word	0xfffffbff
 8018b04:	ffffbfff 	.word	0xffffbfff
 8018b08:	ffffdfff 	.word	0xffffdfff
 8018b0c:	ffffefff 	.word	0xffffefff
 8018b10:	fffff7ff 	.word	0xfffff7ff
 8018b14:	fffffdff 	.word	0xfffffdff
 8018b18:	fffffeff 	.word	0xfffffeff

08018b1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b082      	sub	sp, #8
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
 8018b24:	000a      	movs	r2, r1
 8018b26:	1cfb      	adds	r3, r7, #3
 8018b28:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8018b2a:	687a      	ldr	r2, [r7, #4]
 8018b2c:	23aa      	movs	r3, #170	@ 0xaa
 8018b2e:	009b      	lsls	r3, r3, #2
 8018b30:	5cd3      	ldrb	r3, [r2, r3]
 8018b32:	2b01      	cmp	r3, #1
 8018b34:	d101      	bne.n	8018b3a <HAL_PCD_SetAddress+0x1e>
 8018b36:	2302      	movs	r3, #2
 8018b38:	e017      	b.n	8018b6a <HAL_PCD_SetAddress+0x4e>
 8018b3a:	687a      	ldr	r2, [r7, #4]
 8018b3c:	23aa      	movs	r3, #170	@ 0xaa
 8018b3e:	009b      	lsls	r3, r3, #2
 8018b40:	2101      	movs	r1, #1
 8018b42:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	1cfa      	adds	r2, r7, #3
 8018b48:	2124      	movs	r1, #36	@ 0x24
 8018b4a:	7812      	ldrb	r2, [r2, #0]
 8018b4c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681a      	ldr	r2, [r3, #0]
 8018b52:	1cfb      	adds	r3, r7, #3
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	0019      	movs	r1, r3
 8018b58:	0010      	movs	r0, r2
 8018b5a:	f007 fc71 	bl	8020440 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	23aa      	movs	r3, #170	@ 0xaa
 8018b62:	009b      	lsls	r3, r3, #2
 8018b64:	2100      	movs	r1, #0
 8018b66:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018b68:	2300      	movs	r3, #0
}
 8018b6a:	0018      	movs	r0, r3
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	b002      	add	sp, #8
 8018b70:	bd80      	pop	{r7, pc}

08018b72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8018b72:	b590      	push	{r4, r7, lr}
 8018b74:	b085      	sub	sp, #20
 8018b76:	af00      	add	r7, sp, #0
 8018b78:	6078      	str	r0, [r7, #4]
 8018b7a:	000c      	movs	r4, r1
 8018b7c:	0010      	movs	r0, r2
 8018b7e:	0019      	movs	r1, r3
 8018b80:	1cfb      	adds	r3, r7, #3
 8018b82:	1c22      	adds	r2, r4, #0
 8018b84:	701a      	strb	r2, [r3, #0]
 8018b86:	003b      	movs	r3, r7
 8018b88:	1c02      	adds	r2, r0, #0
 8018b8a:	801a      	strh	r2, [r3, #0]
 8018b8c:	1cbb      	adds	r3, r7, #2
 8018b8e:	1c0a      	adds	r2, r1, #0
 8018b90:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8018b92:	230b      	movs	r3, #11
 8018b94:	18fb      	adds	r3, r7, r3
 8018b96:	2200      	movs	r2, #0
 8018b98:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018b9a:	1cfb      	adds	r3, r7, #3
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	b25b      	sxtb	r3, r3
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	da0f      	bge.n	8018bc4 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018ba4:	1cfb      	adds	r3, r7, #3
 8018ba6:	781b      	ldrb	r3, [r3, #0]
 8018ba8:	2207      	movs	r2, #7
 8018baa:	4013      	ands	r3, r2
 8018bac:	1c5a      	adds	r2, r3, #1
 8018bae:	0013      	movs	r3, r2
 8018bb0:	009b      	lsls	r3, r3, #2
 8018bb2:	189b      	adds	r3, r3, r2
 8018bb4:	00db      	lsls	r3, r3, #3
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	18d3      	adds	r3, r2, r3
 8018bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	2201      	movs	r2, #1
 8018bc0:	705a      	strb	r2, [r3, #1]
 8018bc2:	e00f      	b.n	8018be4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018bc4:	1cfb      	adds	r3, r7, #3
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	2207      	movs	r2, #7
 8018bca:	401a      	ands	r2, r3
 8018bcc:	0013      	movs	r3, r2
 8018bce:	009b      	lsls	r3, r3, #2
 8018bd0:	189b      	adds	r3, r3, r2
 8018bd2:	00db      	lsls	r3, r3, #3
 8018bd4:	3369      	adds	r3, #105	@ 0x69
 8018bd6:	33ff      	adds	r3, #255	@ 0xff
 8018bd8:	687a      	ldr	r2, [r7, #4]
 8018bda:	18d3      	adds	r3, r2, r3
 8018bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	2200      	movs	r2, #0
 8018be2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8018be4:	1cfb      	adds	r3, r7, #3
 8018be6:	781b      	ldrb	r3, [r3, #0]
 8018be8:	2207      	movs	r2, #7
 8018bea:	4013      	ands	r3, r2
 8018bec:	b2da      	uxtb	r2, r3
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8018bf2:	003b      	movs	r3, r7
 8018bf4:	881a      	ldrh	r2, [r3, #0]
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	1cba      	adds	r2, r7, #2
 8018bfe:	7812      	ldrb	r2, [r2, #0]
 8018c00:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8018c02:	1cbb      	adds	r3, r7, #2
 8018c04:	781b      	ldrb	r3, [r3, #0]
 8018c06:	2b02      	cmp	r3, #2
 8018c08:	d102      	bne.n	8018c10 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8018c10:	687a      	ldr	r2, [r7, #4]
 8018c12:	23aa      	movs	r3, #170	@ 0xaa
 8018c14:	009b      	lsls	r3, r3, #2
 8018c16:	5cd3      	ldrb	r3, [r2, r3]
 8018c18:	2b01      	cmp	r3, #1
 8018c1a:	d101      	bne.n	8018c20 <HAL_PCD_EP_Open+0xae>
 8018c1c:	2302      	movs	r3, #2
 8018c1e:	e013      	b.n	8018c48 <HAL_PCD_EP_Open+0xd6>
 8018c20:	687a      	ldr	r2, [r7, #4]
 8018c22:	23aa      	movs	r3, #170	@ 0xaa
 8018c24:	009b      	lsls	r3, r3, #2
 8018c26:	2101      	movs	r1, #1
 8018c28:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	68fa      	ldr	r2, [r7, #12]
 8018c30:	0011      	movs	r1, r2
 8018c32:	0018      	movs	r0, r3
 8018c34:	f005 fc68 	bl	801e508 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018c38:	687a      	ldr	r2, [r7, #4]
 8018c3a:	23aa      	movs	r3, #170	@ 0xaa
 8018c3c:	009b      	lsls	r3, r3, #2
 8018c3e:	2100      	movs	r1, #0
 8018c40:	54d1      	strb	r1, [r2, r3]

  return ret;
 8018c42:	230b      	movs	r3, #11
 8018c44:	18fb      	adds	r3, r7, r3
 8018c46:	781b      	ldrb	r3, [r3, #0]
}
 8018c48:	0018      	movs	r0, r3
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	b005      	add	sp, #20
 8018c4e:	bd90      	pop	{r4, r7, pc}

08018c50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b084      	sub	sp, #16
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	000a      	movs	r2, r1
 8018c5a:	1cfb      	adds	r3, r7, #3
 8018c5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8018c5e:	1cfb      	adds	r3, r7, #3
 8018c60:	781b      	ldrb	r3, [r3, #0]
 8018c62:	b25b      	sxtb	r3, r3
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	da0f      	bge.n	8018c88 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018c68:	1cfb      	adds	r3, r7, #3
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	2207      	movs	r2, #7
 8018c6e:	4013      	ands	r3, r2
 8018c70:	1c5a      	adds	r2, r3, #1
 8018c72:	0013      	movs	r3, r2
 8018c74:	009b      	lsls	r3, r3, #2
 8018c76:	189b      	adds	r3, r3, r2
 8018c78:	00db      	lsls	r3, r3, #3
 8018c7a:	687a      	ldr	r2, [r7, #4]
 8018c7c:	18d3      	adds	r3, r2, r3
 8018c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2201      	movs	r2, #1
 8018c84:	705a      	strb	r2, [r3, #1]
 8018c86:	e00f      	b.n	8018ca8 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018c88:	1cfb      	adds	r3, r7, #3
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	2207      	movs	r2, #7
 8018c8e:	401a      	ands	r2, r3
 8018c90:	0013      	movs	r3, r2
 8018c92:	009b      	lsls	r3, r3, #2
 8018c94:	189b      	adds	r3, r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	3369      	adds	r3, #105	@ 0x69
 8018c9a:	33ff      	adds	r3, #255	@ 0xff
 8018c9c:	687a      	ldr	r2, [r7, #4]
 8018c9e:	18d3      	adds	r3, r2, r3
 8018ca0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8018ca8:	1cfb      	adds	r3, r7, #3
 8018caa:	781b      	ldrb	r3, [r3, #0]
 8018cac:	2207      	movs	r2, #7
 8018cae:	4013      	ands	r3, r2
 8018cb0:	b2da      	uxtb	r2, r3
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018cb6:	687a      	ldr	r2, [r7, #4]
 8018cb8:	23aa      	movs	r3, #170	@ 0xaa
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	5cd3      	ldrb	r3, [r2, r3]
 8018cbe:	2b01      	cmp	r3, #1
 8018cc0:	d101      	bne.n	8018cc6 <HAL_PCD_EP_Close+0x76>
 8018cc2:	2302      	movs	r3, #2
 8018cc4:	e011      	b.n	8018cea <HAL_PCD_EP_Close+0x9a>
 8018cc6:	687a      	ldr	r2, [r7, #4]
 8018cc8:	23aa      	movs	r3, #170	@ 0xaa
 8018cca:	009b      	lsls	r3, r3, #2
 8018ccc:	2101      	movs	r1, #1
 8018cce:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	68fa      	ldr	r2, [r7, #12]
 8018cd6:	0011      	movs	r1, r2
 8018cd8:	0018      	movs	r0, r3
 8018cda:	f005 ffb7 	bl	801ec4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	23aa      	movs	r3, #170	@ 0xaa
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	2100      	movs	r1, #0
 8018ce6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8018ce8:	2300      	movs	r3, #0
}
 8018cea:	0018      	movs	r0, r3
 8018cec:	46bd      	mov	sp, r7
 8018cee:	b004      	add	sp, #16
 8018cf0:	bd80      	pop	{r7, pc}

08018cf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018cf2:	b580      	push	{r7, lr}
 8018cf4:	b086      	sub	sp, #24
 8018cf6:	af00      	add	r7, sp, #0
 8018cf8:	60f8      	str	r0, [r7, #12]
 8018cfa:	607a      	str	r2, [r7, #4]
 8018cfc:	603b      	str	r3, [r7, #0]
 8018cfe:	200b      	movs	r0, #11
 8018d00:	183b      	adds	r3, r7, r0
 8018d02:	1c0a      	adds	r2, r1, #0
 8018d04:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018d06:	0001      	movs	r1, r0
 8018d08:	187b      	adds	r3, r7, r1
 8018d0a:	781b      	ldrb	r3, [r3, #0]
 8018d0c:	2207      	movs	r2, #7
 8018d0e:	401a      	ands	r2, r3
 8018d10:	0013      	movs	r3, r2
 8018d12:	009b      	lsls	r3, r3, #2
 8018d14:	189b      	adds	r3, r3, r2
 8018d16:	00db      	lsls	r3, r3, #3
 8018d18:	3369      	adds	r3, #105	@ 0x69
 8018d1a:	33ff      	adds	r3, #255	@ 0xff
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	18d3      	adds	r3, r2, r3
 8018d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018d22:	697b      	ldr	r3, [r7, #20]
 8018d24:	687a      	ldr	r2, [r7, #4]
 8018d26:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	683a      	ldr	r2, [r7, #0]
 8018d2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8018d2e:	697b      	ldr	r3, [r7, #20]
 8018d30:	2200      	movs	r2, #0
 8018d32:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8018d34:	697b      	ldr	r3, [r7, #20]
 8018d36:	2200      	movs	r2, #0
 8018d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018d3a:	187b      	adds	r3, r7, r1
 8018d3c:	781b      	ldrb	r3, [r3, #0]
 8018d3e:	2207      	movs	r2, #7
 8018d40:	4013      	ands	r3, r2
 8018d42:	b2da      	uxtb	r2, r3
 8018d44:	697b      	ldr	r3, [r7, #20]
 8018d46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	697a      	ldr	r2, [r7, #20]
 8018d4e:	0011      	movs	r1, r2
 8018d50:	0018      	movs	r0, r3
 8018d52:	f006 f93b 	bl	801efcc <USB_EPStartXfer>

  return HAL_OK;
 8018d56:	2300      	movs	r3, #0
}
 8018d58:	0018      	movs	r0, r3
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	b006      	add	sp, #24
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b082      	sub	sp, #8
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	000a      	movs	r2, r1
 8018d6a:	1cfb      	adds	r3, r7, #3
 8018d6c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8018d6e:	1cfb      	adds	r3, r7, #3
 8018d70:	781b      	ldrb	r3, [r3, #0]
 8018d72:	2207      	movs	r2, #7
 8018d74:	401a      	ands	r2, r3
 8018d76:	6878      	ldr	r0, [r7, #4]
 8018d78:	23c2      	movs	r3, #194	@ 0xc2
 8018d7a:	0059      	lsls	r1, r3, #1
 8018d7c:	0013      	movs	r3, r2
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	189b      	adds	r3, r3, r2
 8018d82:	00db      	lsls	r3, r3, #3
 8018d84:	18c3      	adds	r3, r0, r3
 8018d86:	185b      	adds	r3, r3, r1
 8018d88:	681b      	ldr	r3, [r3, #0]
}
 8018d8a:	0018      	movs	r0, r3
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	b002      	add	sp, #8
 8018d90:	bd80      	pop	{r7, pc}

08018d92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8018d92:	b580      	push	{r7, lr}
 8018d94:	b086      	sub	sp, #24
 8018d96:	af00      	add	r7, sp, #0
 8018d98:	60f8      	str	r0, [r7, #12]
 8018d9a:	607a      	str	r2, [r7, #4]
 8018d9c:	603b      	str	r3, [r7, #0]
 8018d9e:	200b      	movs	r0, #11
 8018da0:	183b      	adds	r3, r7, r0
 8018da2:	1c0a      	adds	r2, r1, #0
 8018da4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018da6:	183b      	adds	r3, r7, r0
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	2207      	movs	r2, #7
 8018dac:	4013      	ands	r3, r2
 8018dae:	1c5a      	adds	r2, r3, #1
 8018db0:	0013      	movs	r3, r2
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	189b      	adds	r3, r3, r2
 8018db6:	00db      	lsls	r3, r3, #3
 8018db8:	68fa      	ldr	r2, [r7, #12]
 8018dba:	18d3      	adds	r3, r2, r3
 8018dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	687a      	ldr	r2, [r7, #4]
 8018dc2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	683a      	ldr	r2, [r7, #0]
 8018dc8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	2224      	movs	r2, #36	@ 0x24
 8018dce:	2101      	movs	r1, #1
 8018dd0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8018dd2:	697b      	ldr	r3, [r7, #20]
 8018dd4:	683a      	ldr	r2, [r7, #0]
 8018dd6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8018dde:	697b      	ldr	r3, [r7, #20]
 8018de0:	2201      	movs	r2, #1
 8018de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018de4:	183b      	adds	r3, r7, r0
 8018de6:	781b      	ldrb	r3, [r3, #0]
 8018de8:	2207      	movs	r2, #7
 8018dea:	4013      	ands	r3, r2
 8018dec:	b2da      	uxtb	r2, r3
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	697a      	ldr	r2, [r7, #20]
 8018df8:	0011      	movs	r1, r2
 8018dfa:	0018      	movs	r0, r3
 8018dfc:	f006 f8e6 	bl	801efcc <USB_EPStartXfer>

  return HAL_OK;
 8018e00:	2300      	movs	r3, #0
}
 8018e02:	0018      	movs	r0, r3
 8018e04:	46bd      	mov	sp, r7
 8018e06:	b006      	add	sp, #24
 8018e08:	bd80      	pop	{r7, pc}

08018e0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018e0a:	b580      	push	{r7, lr}
 8018e0c:	b084      	sub	sp, #16
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	6078      	str	r0, [r7, #4]
 8018e12:	000a      	movs	r2, r1
 8018e14:	1cfb      	adds	r3, r7, #3
 8018e16:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8018e18:	1cfb      	adds	r3, r7, #3
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	2207      	movs	r2, #7
 8018e1e:	401a      	ands	r2, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	685b      	ldr	r3, [r3, #4]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d901      	bls.n	8018e2c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8018e28:	2301      	movs	r3, #1
 8018e2a:	e046      	b.n	8018eba <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018e2c:	1cfb      	adds	r3, r7, #3
 8018e2e:	781b      	ldrb	r3, [r3, #0]
 8018e30:	b25b      	sxtb	r3, r3
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	da0f      	bge.n	8018e56 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018e36:	1cfb      	adds	r3, r7, #3
 8018e38:	781b      	ldrb	r3, [r3, #0]
 8018e3a:	2207      	movs	r2, #7
 8018e3c:	4013      	ands	r3, r2
 8018e3e:	1c5a      	adds	r2, r3, #1
 8018e40:	0013      	movs	r3, r2
 8018e42:	009b      	lsls	r3, r3, #2
 8018e44:	189b      	adds	r3, r3, r2
 8018e46:	00db      	lsls	r3, r3, #3
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	18d3      	adds	r3, r2, r3
 8018e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	2201      	movs	r2, #1
 8018e52:	705a      	strb	r2, [r3, #1]
 8018e54:	e00d      	b.n	8018e72 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8018e56:	1cfb      	adds	r3, r7, #3
 8018e58:	781a      	ldrb	r2, [r3, #0]
 8018e5a:	0013      	movs	r3, r2
 8018e5c:	009b      	lsls	r3, r3, #2
 8018e5e:	189b      	adds	r3, r3, r2
 8018e60:	00db      	lsls	r3, r3, #3
 8018e62:	3369      	adds	r3, #105	@ 0x69
 8018e64:	33ff      	adds	r3, #255	@ 0xff
 8018e66:	687a      	ldr	r2, [r7, #4]
 8018e68:	18d3      	adds	r3, r2, r3
 8018e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	2200      	movs	r2, #0
 8018e70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	2201      	movs	r2, #1
 8018e76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018e78:	1cfb      	adds	r3, r7, #3
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	2207      	movs	r2, #7
 8018e7e:	4013      	ands	r3, r2
 8018e80:	b2da      	uxtb	r2, r3
 8018e82:	68fb      	ldr	r3, [r7, #12]
 8018e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	23aa      	movs	r3, #170	@ 0xaa
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	5cd3      	ldrb	r3, [r2, r3]
 8018e8e:	2b01      	cmp	r3, #1
 8018e90:	d101      	bne.n	8018e96 <HAL_PCD_EP_SetStall+0x8c>
 8018e92:	2302      	movs	r3, #2
 8018e94:	e011      	b.n	8018eba <HAL_PCD_EP_SetStall+0xb0>
 8018e96:	687a      	ldr	r2, [r7, #4]
 8018e98:	23aa      	movs	r3, #170	@ 0xaa
 8018e9a:	009b      	lsls	r3, r3, #2
 8018e9c:	2101      	movs	r1, #1
 8018e9e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	68fa      	ldr	r2, [r7, #12]
 8018ea6:	0011      	movs	r1, r2
 8018ea8:	0018      	movs	r0, r3
 8018eaa:	f007 f9c7 	bl	802023c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8018eae:	687a      	ldr	r2, [r7, #4]
 8018eb0:	23aa      	movs	r3, #170	@ 0xaa
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	2100      	movs	r1, #0
 8018eb6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018eb8:	2300      	movs	r3, #0
}
 8018eba:	0018      	movs	r0, r3
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	b004      	add	sp, #16
 8018ec0:	bd80      	pop	{r7, pc}

08018ec2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8018ec2:	b580      	push	{r7, lr}
 8018ec4:	b084      	sub	sp, #16
 8018ec6:	af00      	add	r7, sp, #0
 8018ec8:	6078      	str	r0, [r7, #4]
 8018eca:	000a      	movs	r2, r1
 8018ecc:	1cfb      	adds	r3, r7, #3
 8018ece:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8018ed0:	1cfb      	adds	r3, r7, #3
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	220f      	movs	r2, #15
 8018ed6:	401a      	ands	r2, r3
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	429a      	cmp	r2, r3
 8018ede:	d901      	bls.n	8018ee4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	e048      	b.n	8018f76 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8018ee4:	1cfb      	adds	r3, r7, #3
 8018ee6:	781b      	ldrb	r3, [r3, #0]
 8018ee8:	b25b      	sxtb	r3, r3
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	da0f      	bge.n	8018f0e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8018eee:	1cfb      	adds	r3, r7, #3
 8018ef0:	781b      	ldrb	r3, [r3, #0]
 8018ef2:	2207      	movs	r2, #7
 8018ef4:	4013      	ands	r3, r2
 8018ef6:	1c5a      	adds	r2, r3, #1
 8018ef8:	0013      	movs	r3, r2
 8018efa:	009b      	lsls	r3, r3, #2
 8018efc:	189b      	adds	r3, r3, r2
 8018efe:	00db      	lsls	r3, r3, #3
 8018f00:	687a      	ldr	r2, [r7, #4]
 8018f02:	18d3      	adds	r3, r2, r3
 8018f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	2201      	movs	r2, #1
 8018f0a:	705a      	strb	r2, [r3, #1]
 8018f0c:	e00f      	b.n	8018f2e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8018f0e:	1cfb      	adds	r3, r7, #3
 8018f10:	781b      	ldrb	r3, [r3, #0]
 8018f12:	2207      	movs	r2, #7
 8018f14:	401a      	ands	r2, r3
 8018f16:	0013      	movs	r3, r2
 8018f18:	009b      	lsls	r3, r3, #2
 8018f1a:	189b      	adds	r3, r3, r2
 8018f1c:	00db      	lsls	r3, r3, #3
 8018f1e:	3369      	adds	r3, #105	@ 0x69
 8018f20:	33ff      	adds	r3, #255	@ 0xff
 8018f22:	687a      	ldr	r2, [r7, #4]
 8018f24:	18d3      	adds	r3, r2, r3
 8018f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	2200      	movs	r2, #0
 8018f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8018f34:	1cfb      	adds	r3, r7, #3
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	2207      	movs	r2, #7
 8018f3a:	4013      	ands	r3, r2
 8018f3c:	b2da      	uxtb	r2, r3
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8018f42:	687a      	ldr	r2, [r7, #4]
 8018f44:	23aa      	movs	r3, #170	@ 0xaa
 8018f46:	009b      	lsls	r3, r3, #2
 8018f48:	5cd3      	ldrb	r3, [r2, r3]
 8018f4a:	2b01      	cmp	r3, #1
 8018f4c:	d101      	bne.n	8018f52 <HAL_PCD_EP_ClrStall+0x90>
 8018f4e:	2302      	movs	r3, #2
 8018f50:	e011      	b.n	8018f76 <HAL_PCD_EP_ClrStall+0xb4>
 8018f52:	687a      	ldr	r2, [r7, #4]
 8018f54:	23aa      	movs	r3, #170	@ 0xaa
 8018f56:	009b      	lsls	r3, r3, #2
 8018f58:	2101      	movs	r1, #1
 8018f5a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	68fa      	ldr	r2, [r7, #12]
 8018f62:	0011      	movs	r1, r2
 8018f64:	0018      	movs	r0, r3
 8018f66:	f007 f9b9 	bl	80202dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8018f6a:	687a      	ldr	r2, [r7, #4]
 8018f6c:	23aa      	movs	r3, #170	@ 0xaa
 8018f6e:	009b      	lsls	r3, r3, #2
 8018f70:	2100      	movs	r1, #0
 8018f72:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8018f74:	2300      	movs	r3, #0
}
 8018f76:	0018      	movs	r0, r3
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	b004      	add	sp, #16
 8018f7c:	bd80      	pop	{r7, pc}
	...

08018f80 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8018f80:	b5b0      	push	{r4, r5, r7, lr}
 8018f82:	b096      	sub	sp, #88	@ 0x58
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8018f88:	f000 fbec 	bl	8019764 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	681a      	ldr	r2, [r3, #0]
 8018f90:	204e      	movs	r0, #78	@ 0x4e
 8018f92:	183b      	adds	r3, r7, r0
 8018f94:	2144      	movs	r1, #68	@ 0x44
 8018f96:	5a52      	ldrh	r2, [r2, r1]
 8018f98:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8018f9a:	183b      	adds	r3, r7, r0
 8018f9c:	881b      	ldrh	r3, [r3, #0]
 8018f9e:	b2da      	uxtb	r2, r3
 8018fa0:	244d      	movs	r4, #77	@ 0x4d
 8018fa2:	193b      	adds	r3, r7, r4
 8018fa4:	210f      	movs	r1, #15
 8018fa6:	400a      	ands	r2, r1
 8018fa8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8018faa:	193b      	adds	r3, r7, r4
 8018fac:	781b      	ldrb	r3, [r3, #0]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d000      	beq.n	8018fb4 <PCD_EP_ISR_Handler+0x34>
 8018fb2:	e18f      	b.n	80192d4 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8018fb4:	183b      	adds	r3, r7, r0
 8018fb6:	881b      	ldrh	r3, [r3, #0]
 8018fb8:	2210      	movs	r2, #16
 8018fba:	4013      	ands	r3, r2
 8018fbc:	d155      	bne.n	801906a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	881b      	ldrh	r3, [r3, #0]
 8018fc4:	b29a      	uxth	r2, r3
 8018fc6:	200e      	movs	r0, #14
 8018fc8:	183b      	adds	r3, r7, r0
 8018fca:	49bb      	ldr	r1, [pc, #748]	@ (80192b8 <PCD_EP_ISR_Handler+0x338>)
 8018fcc:	400a      	ands	r2, r1
 8018fce:	801a      	strh	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	183a      	adds	r2, r7, r0
 8018fd6:	8812      	ldrh	r2, [r2, #0]
 8018fd8:	49b8      	ldr	r1, [pc, #736]	@ (80192bc <PCD_EP_ISR_Handler+0x33c>)
 8018fda:	430a      	orrs	r2, r1
 8018fdc:	b292      	uxth	r2, r2
 8018fde:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	3328      	adds	r3, #40	@ 0x28
 8018fe4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	2250      	movs	r2, #80	@ 0x50
 8018fec:	5a9b      	ldrh	r3, [r3, r2]
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	001a      	movs	r2, r3
 8018ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018ff4:	781b      	ldrb	r3, [r3, #0]
 8018ff6:	00db      	lsls	r3, r3, #3
 8018ff8:	18d2      	adds	r2, r2, r3
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	18d3      	adds	r3, r2, r3
 8019000:	4aaf      	ldr	r2, [pc, #700]	@ (80192c0 <PCD_EP_ISR_Handler+0x340>)
 8019002:	4694      	mov	ip, r2
 8019004:	4463      	add	r3, ip
 8019006:	881b      	ldrh	r3, [r3, #0]
 8019008:	059b      	lsls	r3, r3, #22
 801900a:	0d9a      	lsrs	r2, r3, #22
 801900c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801900e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019012:	695a      	ldr	r2, [r3, #20]
 8019014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019016:	69db      	ldr	r3, [r3, #28]
 8019018:	18d2      	adds	r2, r2, r3
 801901a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801901c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	2100      	movs	r1, #0
 8019022:	0018      	movs	r0, r3
 8019024:	f009 faca 	bl	80225bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2224      	movs	r2, #36	@ 0x24
 801902c:	5c9b      	ldrb	r3, [r3, r2]
 801902e:	b2db      	uxtb	r3, r3
 8019030:	2b00      	cmp	r3, #0
 8019032:	d101      	bne.n	8019038 <PCD_EP_ISR_Handler+0xb8>
 8019034:	f000 fb96 	bl	8019764 <PCD_EP_ISR_Handler+0x7e4>
 8019038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801903a:	699b      	ldr	r3, [r3, #24]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d001      	beq.n	8019044 <PCD_EP_ISR_Handler+0xc4>
 8019040:	f000 fb90 	bl	8019764 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2224      	movs	r2, #36	@ 0x24
 8019048:	5c9b      	ldrb	r3, [r3, r2]
 801904a:	b2db      	uxtb	r3, r3
 801904c:	2280      	movs	r2, #128	@ 0x80
 801904e:	4252      	negs	r2, r2
 8019050:	4313      	orrs	r3, r2
 8019052:	b2da      	uxtb	r2, r3
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	681b      	ldr	r3, [r3, #0]
 8019058:	0011      	movs	r1, r2
 801905a:	224c      	movs	r2, #76	@ 0x4c
 801905c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	2224      	movs	r2, #36	@ 0x24
 8019062:	2100      	movs	r1, #0
 8019064:	5499      	strb	r1, [r3, r2]
 8019066:	f000 fb7d 	bl	8019764 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	3369      	adds	r3, #105	@ 0x69
 801906e:	33ff      	adds	r3, #255	@ 0xff
 8019070:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	681a      	ldr	r2, [r3, #0]
 8019076:	214a      	movs	r1, #74	@ 0x4a
 8019078:	187b      	adds	r3, r7, r1
 801907a:	8812      	ldrh	r2, [r2, #0]
 801907c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801907e:	187b      	adds	r3, r7, r1
 8019080:	881a      	ldrh	r2, [r3, #0]
 8019082:	2380      	movs	r3, #128	@ 0x80
 8019084:	011b      	lsls	r3, r3, #4
 8019086:	4013      	ands	r3, r2
 8019088:	d037      	beq.n	80190fa <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	2250      	movs	r2, #80	@ 0x50
 8019090:	5a9b      	ldrh	r3, [r3, r2]
 8019092:	b29b      	uxth	r3, r3
 8019094:	001a      	movs	r2, r3
 8019096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019098:	781b      	ldrb	r3, [r3, #0]
 801909a:	00db      	lsls	r3, r3, #3
 801909c:	18d2      	adds	r2, r2, r3
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	18d3      	adds	r3, r2, r3
 80190a4:	4a87      	ldr	r2, [pc, #540]	@ (80192c4 <PCD_EP_ISR_Handler+0x344>)
 80190a6:	4694      	mov	ip, r2
 80190a8:	4463      	add	r3, ip
 80190aa:	881b      	ldrh	r3, [r3, #0]
 80190ac:	059b      	lsls	r3, r3, #22
 80190ae:	0d9a      	lsrs	r2, r3, #22
 80190b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	6818      	ldr	r0, [r3, #0]
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	22ac      	movs	r2, #172	@ 0xac
 80190bc:	0092      	lsls	r2, r2, #2
 80190be:	1899      	adds	r1, r3, r2
 80190c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80190c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80190c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	f007 fa3b 	bl	8020544 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	881b      	ldrh	r3, [r3, #0]
 80190d4:	b29a      	uxth	r2, r3
 80190d6:	2010      	movs	r0, #16
 80190d8:	183b      	adds	r3, r7, r0
 80190da:	497b      	ldr	r1, [pc, #492]	@ (80192c8 <PCD_EP_ISR_Handler+0x348>)
 80190dc:	400a      	ands	r2, r1
 80190de:	801a      	strh	r2, [r3, #0]
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	183a      	adds	r2, r7, r0
 80190e6:	8812      	ldrh	r2, [r2, #0]
 80190e8:	2180      	movs	r1, #128	@ 0x80
 80190ea:	430a      	orrs	r2, r1
 80190ec:	b292      	uxth	r2, r2
 80190ee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	0018      	movs	r0, r3
 80190f4:	f009 fa2c 	bl	8022550 <HAL_PCD_SetupStageCallback>
 80190f8:	e334      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80190fa:	234a      	movs	r3, #74	@ 0x4a
 80190fc:	18fb      	adds	r3, r7, r3
 80190fe:	2200      	movs	r2, #0
 8019100:	5e9b      	ldrsh	r3, [r3, r2]
 8019102:	2b00      	cmp	r3, #0
 8019104:	db00      	blt.n	8019108 <PCD_EP_ISR_Handler+0x188>
 8019106:	e32d      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	881b      	ldrh	r3, [r3, #0]
 801910e:	b29a      	uxth	r2, r3
 8019110:	201e      	movs	r0, #30
 8019112:	183b      	adds	r3, r7, r0
 8019114:	496c      	ldr	r1, [pc, #432]	@ (80192c8 <PCD_EP_ISR_Handler+0x348>)
 8019116:	400a      	ands	r2, r1
 8019118:	801a      	strh	r2, [r3, #0]
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	183a      	adds	r2, r7, r0
 8019120:	8812      	ldrh	r2, [r2, #0]
 8019122:	2180      	movs	r1, #128	@ 0x80
 8019124:	430a      	orrs	r2, r1
 8019126:	b292      	uxth	r2, r2
 8019128:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	2250      	movs	r2, #80	@ 0x50
 8019130:	5a9b      	ldrh	r3, [r3, r2]
 8019132:	b29b      	uxth	r3, r3
 8019134:	001a      	movs	r2, r3
 8019136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	00db      	lsls	r3, r3, #3
 801913c:	18d2      	adds	r2, r2, r3
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	18d3      	adds	r3, r2, r3
 8019144:	4a5f      	ldr	r2, [pc, #380]	@ (80192c4 <PCD_EP_ISR_Handler+0x344>)
 8019146:	4694      	mov	ip, r2
 8019148:	4463      	add	r3, ip
 801914a:	881b      	ldrh	r3, [r3, #0]
 801914c:	059b      	lsls	r3, r3, #22
 801914e:	0d9a      	lsrs	r2, r3, #22
 8019150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019152:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8019154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019156:	69db      	ldr	r3, [r3, #28]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d01a      	beq.n	8019192 <PCD_EP_ISR_Handler+0x212>
 801915c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801915e:	695b      	ldr	r3, [r3, #20]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d016      	beq.n	8019192 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6818      	ldr	r0, [r3, #0]
 8019168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801916a:	6959      	ldr	r1, [r3, #20]
 801916c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801916e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8019170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019172:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8019174:	b29b      	uxth	r3, r3
 8019176:	f007 f9e5 	bl	8020544 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801917a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801917c:	695a      	ldr	r2, [r3, #20]
 801917e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019180:	69db      	ldr	r3, [r3, #28]
 8019182:	18d2      	adds	r2, r2, r3
 8019184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019186:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2100      	movs	r1, #0
 801918c:	0018      	movs	r0, r3
 801918e:	f009 f9f4 	bl	802257a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	681a      	ldr	r2, [r3, #0]
 8019196:	214a      	movs	r1, #74	@ 0x4a
 8019198:	187b      	adds	r3, r7, r1
 801919a:	8812      	ldrh	r2, [r2, #0]
 801919c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801919e:	187b      	adds	r3, r7, r1
 80191a0:	881a      	ldrh	r2, [r3, #0]
 80191a2:	2380      	movs	r3, #128	@ 0x80
 80191a4:	011b      	lsls	r3, r3, #4
 80191a6:	4013      	ands	r3, r2
 80191a8:	d000      	beq.n	80191ac <PCD_EP_ISR_Handler+0x22c>
 80191aa:	e2db      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
 80191ac:	187b      	adds	r3, r7, r1
 80191ae:	881a      	ldrh	r2, [r3, #0]
 80191b0:	23c0      	movs	r3, #192	@ 0xc0
 80191b2:	019b      	lsls	r3, r3, #6
 80191b4:	401a      	ands	r2, r3
 80191b6:	23c0      	movs	r3, #192	@ 0xc0
 80191b8:	019b      	lsls	r3, r3, #6
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d100      	bne.n	80191c0 <PCD_EP_ISR_Handler+0x240>
 80191be:	e2d1      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	61bb      	str	r3, [r7, #24]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2250      	movs	r2, #80	@ 0x50
 80191cc:	5a9b      	ldrh	r3, [r3, r2]
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	001a      	movs	r2, r3
 80191d2:	69bb      	ldr	r3, [r7, #24]
 80191d4:	189b      	adds	r3, r3, r2
 80191d6:	61bb      	str	r3, [r7, #24]
 80191d8:	69bb      	ldr	r3, [r7, #24]
 80191da:	4a3a      	ldr	r2, [pc, #232]	@ (80192c4 <PCD_EP_ISR_Handler+0x344>)
 80191dc:	4694      	mov	ip, r2
 80191de:	4463      	add	r3, ip
 80191e0:	617b      	str	r3, [r7, #20]
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	881b      	ldrh	r3, [r3, #0]
 80191e6:	b29b      	uxth	r3, r3
 80191e8:	059b      	lsls	r3, r3, #22
 80191ea:	0d9b      	lsrs	r3, r3, #22
 80191ec:	b29a      	uxth	r2, r3
 80191ee:	697b      	ldr	r3, [r7, #20]
 80191f0:	801a      	strh	r2, [r3, #0]
 80191f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191f4:	691b      	ldr	r3, [r3, #16]
 80191f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80191f8:	d91a      	bls.n	8019230 <PCD_EP_ISR_Handler+0x2b0>
 80191fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80191fc:	691b      	ldr	r3, [r3, #16]
 80191fe:	095b      	lsrs	r3, r3, #5
 8019200:	647b      	str	r3, [r7, #68]	@ 0x44
 8019202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019204:	691b      	ldr	r3, [r3, #16]
 8019206:	221f      	movs	r2, #31
 8019208:	4013      	ands	r3, r2
 801920a:	d102      	bne.n	8019212 <PCD_EP_ISR_Handler+0x292>
 801920c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801920e:	3b01      	subs	r3, #1
 8019210:	647b      	str	r3, [r7, #68]	@ 0x44
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	881b      	ldrh	r3, [r3, #0]
 8019216:	b29a      	uxth	r2, r3
 8019218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801921a:	b29b      	uxth	r3, r3
 801921c:	029b      	lsls	r3, r3, #10
 801921e:	b29b      	uxth	r3, r3
 8019220:	4313      	orrs	r3, r2
 8019222:	b29b      	uxth	r3, r3
 8019224:	4a25      	ldr	r2, [pc, #148]	@ (80192bc <PCD_EP_ISR_Handler+0x33c>)
 8019226:	4313      	orrs	r3, r2
 8019228:	b29a      	uxth	r2, r3
 801922a:	697b      	ldr	r3, [r7, #20]
 801922c:	801a      	strh	r2, [r3, #0]
 801922e:	e023      	b.n	8019278 <PCD_EP_ISR_Handler+0x2f8>
 8019230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019232:	691b      	ldr	r3, [r3, #16]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d108      	bne.n	801924a <PCD_EP_ISR_Handler+0x2ca>
 8019238:	697b      	ldr	r3, [r7, #20]
 801923a:	881b      	ldrh	r3, [r3, #0]
 801923c:	b29b      	uxth	r3, r3
 801923e:	4a1f      	ldr	r2, [pc, #124]	@ (80192bc <PCD_EP_ISR_Handler+0x33c>)
 8019240:	4313      	orrs	r3, r2
 8019242:	b29a      	uxth	r2, r3
 8019244:	697b      	ldr	r3, [r7, #20]
 8019246:	801a      	strh	r2, [r3, #0]
 8019248:	e016      	b.n	8019278 <PCD_EP_ISR_Handler+0x2f8>
 801924a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801924c:	691b      	ldr	r3, [r3, #16]
 801924e:	085b      	lsrs	r3, r3, #1
 8019250:	647b      	str	r3, [r7, #68]	@ 0x44
 8019252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019254:	691b      	ldr	r3, [r3, #16]
 8019256:	2201      	movs	r2, #1
 8019258:	4013      	ands	r3, r2
 801925a:	d002      	beq.n	8019262 <PCD_EP_ISR_Handler+0x2e2>
 801925c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801925e:	3301      	adds	r3, #1
 8019260:	647b      	str	r3, [r7, #68]	@ 0x44
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	881b      	ldrh	r3, [r3, #0]
 8019266:	b29a      	uxth	r2, r3
 8019268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801926a:	b29b      	uxth	r3, r3
 801926c:	029b      	lsls	r3, r3, #10
 801926e:	b29b      	uxth	r3, r3
 8019270:	4313      	orrs	r3, r2
 8019272:	b29a      	uxth	r2, r3
 8019274:	697b      	ldr	r3, [r7, #20]
 8019276:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	881b      	ldrh	r3, [r3, #0]
 801927e:	b29a      	uxth	r2, r3
 8019280:	2012      	movs	r0, #18
 8019282:	183b      	adds	r3, r7, r0
 8019284:	4911      	ldr	r1, [pc, #68]	@ (80192cc <PCD_EP_ISR_Handler+0x34c>)
 8019286:	400a      	ands	r2, r1
 8019288:	801a      	strh	r2, [r3, #0]
 801928a:	183b      	adds	r3, r7, r0
 801928c:	183a      	adds	r2, r7, r0
 801928e:	8812      	ldrh	r2, [r2, #0]
 8019290:	2180      	movs	r1, #128	@ 0x80
 8019292:	0149      	lsls	r1, r1, #5
 8019294:	404a      	eors	r2, r1
 8019296:	801a      	strh	r2, [r3, #0]
 8019298:	183b      	adds	r3, r7, r0
 801929a:	183a      	adds	r2, r7, r0
 801929c:	8812      	ldrh	r2, [r2, #0]
 801929e:	2180      	movs	r1, #128	@ 0x80
 80192a0:	0189      	lsls	r1, r1, #6
 80192a2:	404a      	eors	r2, r1
 80192a4:	801a      	strh	r2, [r3, #0]
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	183a      	adds	r2, r7, r0
 80192ac:	8812      	ldrh	r2, [r2, #0]
 80192ae:	4908      	ldr	r1, [pc, #32]	@ (80192d0 <PCD_EP_ISR_Handler+0x350>)
 80192b0:	430a      	orrs	r2, r1
 80192b2:	b292      	uxth	r2, r2
 80192b4:	801a      	strh	r2, [r3, #0]
 80192b6:	e255      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
 80192b8:	ffff8f0f 	.word	0xffff8f0f
 80192bc:	ffff8000 	.word	0xffff8000
 80192c0:	00000402 	.word	0x00000402
 80192c4:	00000406 	.word	0x00000406
 80192c8:	00000f8f 	.word	0x00000f8f
 80192cc:	ffffbf8f 	.word	0xffffbf8f
 80192d0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	001a      	movs	r2, r3
 80192da:	204d      	movs	r0, #77	@ 0x4d
 80192dc:	183b      	adds	r3, r7, r0
 80192de:	781b      	ldrb	r3, [r3, #0]
 80192e0:	009b      	lsls	r3, r3, #2
 80192e2:	18d2      	adds	r2, r2, r3
 80192e4:	214a      	movs	r1, #74	@ 0x4a
 80192e6:	187b      	adds	r3, r7, r1
 80192e8:	8812      	ldrh	r2, [r2, #0]
 80192ea:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80192ec:	187b      	adds	r3, r7, r1
 80192ee:	2200      	movs	r2, #0
 80192f0:	5e9b      	ldrsh	r3, [r3, r2]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	db00      	blt.n	80192f8 <PCD_EP_ISR_Handler+0x378>
 80192f6:	e0fa      	b.n	80194ee <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	001a      	movs	r2, r3
 80192fe:	183b      	adds	r3, r7, r0
 8019300:	781b      	ldrb	r3, [r3, #0]
 8019302:	009b      	lsls	r3, r3, #2
 8019304:	18d3      	adds	r3, r2, r3
 8019306:	881b      	ldrh	r3, [r3, #0]
 8019308:	b29a      	uxth	r2, r3
 801930a:	2448      	movs	r4, #72	@ 0x48
 801930c:	193b      	adds	r3, r7, r4
 801930e:	49d1      	ldr	r1, [pc, #836]	@ (8019654 <PCD_EP_ISR_Handler+0x6d4>)
 8019310:	400a      	ands	r2, r1
 8019312:	801a      	strh	r2, [r3, #0]
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	001a      	movs	r2, r3
 801931a:	183b      	adds	r3, r7, r0
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	18d3      	adds	r3, r2, r3
 8019322:	193a      	adds	r2, r7, r4
 8019324:	8812      	ldrh	r2, [r2, #0]
 8019326:	2180      	movs	r1, #128	@ 0x80
 8019328:	430a      	orrs	r2, r1
 801932a:	b292      	uxth	r2, r2
 801932c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801932e:	183b      	adds	r3, r7, r0
 8019330:	781a      	ldrb	r2, [r3, #0]
 8019332:	0013      	movs	r3, r2
 8019334:	009b      	lsls	r3, r3, #2
 8019336:	189b      	adds	r3, r3, r2
 8019338:	00db      	lsls	r3, r3, #3
 801933a:	3369      	adds	r3, #105	@ 0x69
 801933c:	33ff      	adds	r3, #255	@ 0xff
 801933e:	687a      	ldr	r2, [r7, #4]
 8019340:	18d3      	adds	r3, r2, r3
 8019342:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8019344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019346:	7b1b      	ldrb	r3, [r3, #12]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d125      	bne.n	8019398 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	2250      	movs	r2, #80	@ 0x50
 8019352:	5a9b      	ldrh	r3, [r3, r2]
 8019354:	b29b      	uxth	r3, r3
 8019356:	001a      	movs	r2, r3
 8019358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	00db      	lsls	r3, r3, #3
 801935e:	18d2      	adds	r2, r2, r3
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	18d3      	adds	r3, r2, r3
 8019366:	4abc      	ldr	r2, [pc, #752]	@ (8019658 <PCD_EP_ISR_Handler+0x6d8>)
 8019368:	4694      	mov	ip, r2
 801936a:	4463      	add	r3, ip
 801936c:	881a      	ldrh	r2, [r3, #0]
 801936e:	2450      	movs	r4, #80	@ 0x50
 8019370:	193b      	adds	r3, r7, r4
 8019372:	0592      	lsls	r2, r2, #22
 8019374:	0d92      	lsrs	r2, r2, #22
 8019376:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8019378:	193b      	adds	r3, r7, r4
 801937a:	881b      	ldrh	r3, [r3, #0]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d100      	bne.n	8019382 <PCD_EP_ISR_Handler+0x402>
 8019380:	e08d      	b.n	801949e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	6818      	ldr	r0, [r3, #0]
 8019386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019388:	6959      	ldr	r1, [r3, #20]
 801938a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801938c:	88da      	ldrh	r2, [r3, #6]
 801938e:	193b      	adds	r3, r7, r4
 8019390:	881b      	ldrh	r3, [r3, #0]
 8019392:	f007 f8d7 	bl	8020544 <USB_ReadPMA>
 8019396:	e082      	b.n	801949e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8019398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801939a:	78db      	ldrb	r3, [r3, #3]
 801939c:	2b02      	cmp	r3, #2
 801939e:	d10c      	bne.n	80193ba <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80193a0:	2350      	movs	r3, #80	@ 0x50
 80193a2:	18fc      	adds	r4, r7, r3
 80193a4:	234a      	movs	r3, #74	@ 0x4a
 80193a6:	18fb      	adds	r3, r7, r3
 80193a8:	881a      	ldrh	r2, [r3, #0]
 80193aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	0018      	movs	r0, r3
 80193b0:	f000 f9ec 	bl	801978c <HAL_PCD_EP_DB_Receive>
 80193b4:	0003      	movs	r3, r0
 80193b6:	8023      	strh	r3, [r4, #0]
 80193b8:	e071      	b.n	801949e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	001a      	movs	r2, r3
 80193c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	009b      	lsls	r3, r3, #2
 80193c6:	18d3      	adds	r3, r2, r3
 80193c8:	881b      	ldrh	r3, [r3, #0]
 80193ca:	b29a      	uxth	r2, r3
 80193cc:	2052      	movs	r0, #82	@ 0x52
 80193ce:	183b      	adds	r3, r7, r0
 80193d0:	49a2      	ldr	r1, [pc, #648]	@ (801965c <PCD_EP_ISR_Handler+0x6dc>)
 80193d2:	400a      	ands	r2, r1
 80193d4:	801a      	strh	r2, [r3, #0]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	001a      	movs	r2, r3
 80193dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193de:	781b      	ldrb	r3, [r3, #0]
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	18d3      	adds	r3, r2, r3
 80193e4:	183a      	adds	r2, r7, r0
 80193e6:	8812      	ldrh	r2, [r2, #0]
 80193e8:	499d      	ldr	r1, [pc, #628]	@ (8019660 <PCD_EP_ISR_Handler+0x6e0>)
 80193ea:	430a      	orrs	r2, r1
 80193ec:	b292      	uxth	r2, r2
 80193ee:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	001a      	movs	r2, r3
 80193f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80193f8:	781b      	ldrb	r3, [r3, #0]
 80193fa:	009b      	lsls	r3, r3, #2
 80193fc:	18d3      	adds	r3, r2, r3
 80193fe:	881b      	ldrh	r3, [r3, #0]
 8019400:	b29b      	uxth	r3, r3
 8019402:	001a      	movs	r2, r3
 8019404:	2380      	movs	r3, #128	@ 0x80
 8019406:	01db      	lsls	r3, r3, #7
 8019408:	4013      	ands	r3, r2
 801940a:	d024      	beq.n	8019456 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	2250      	movs	r2, #80	@ 0x50
 8019412:	5a9b      	ldrh	r3, [r3, r2]
 8019414:	b29b      	uxth	r3, r3
 8019416:	001a      	movs	r2, r3
 8019418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	00db      	lsls	r3, r3, #3
 801941e:	18d2      	adds	r2, r2, r3
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	18d3      	adds	r3, r2, r3
 8019426:	4a8f      	ldr	r2, [pc, #572]	@ (8019664 <PCD_EP_ISR_Handler+0x6e4>)
 8019428:	4694      	mov	ip, r2
 801942a:	4463      	add	r3, ip
 801942c:	881a      	ldrh	r2, [r3, #0]
 801942e:	2450      	movs	r4, #80	@ 0x50
 8019430:	193b      	adds	r3, r7, r4
 8019432:	0592      	lsls	r2, r2, #22
 8019434:	0d92      	lsrs	r2, r2, #22
 8019436:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019438:	193b      	adds	r3, r7, r4
 801943a:	881b      	ldrh	r3, [r3, #0]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d02e      	beq.n	801949e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	6818      	ldr	r0, [r3, #0]
 8019444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019446:	6959      	ldr	r1, [r3, #20]
 8019448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801944a:	891a      	ldrh	r2, [r3, #8]
 801944c:	193b      	adds	r3, r7, r4
 801944e:	881b      	ldrh	r3, [r3, #0]
 8019450:	f007 f878 	bl	8020544 <USB_ReadPMA>
 8019454:	e023      	b.n	801949e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	2250      	movs	r2, #80	@ 0x50
 801945c:	5a9b      	ldrh	r3, [r3, r2]
 801945e:	b29b      	uxth	r3, r3
 8019460:	001a      	movs	r2, r3
 8019462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	00db      	lsls	r3, r3, #3
 8019468:	18d2      	adds	r2, r2, r3
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	18d3      	adds	r3, r2, r3
 8019470:	4a79      	ldr	r2, [pc, #484]	@ (8019658 <PCD_EP_ISR_Handler+0x6d8>)
 8019472:	4694      	mov	ip, r2
 8019474:	4463      	add	r3, ip
 8019476:	881a      	ldrh	r2, [r3, #0]
 8019478:	2450      	movs	r4, #80	@ 0x50
 801947a:	193b      	adds	r3, r7, r4
 801947c:	0592      	lsls	r2, r2, #22
 801947e:	0d92      	lsrs	r2, r2, #22
 8019480:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8019482:	193b      	adds	r3, r7, r4
 8019484:	881b      	ldrh	r3, [r3, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d009      	beq.n	801949e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6818      	ldr	r0, [r3, #0]
 801948e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019490:	6959      	ldr	r1, [r3, #20]
 8019492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019494:	895a      	ldrh	r2, [r3, #10]
 8019496:	193b      	adds	r3, r7, r4
 8019498:	881b      	ldrh	r3, [r3, #0]
 801949a:	f007 f853 	bl	8020544 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801949e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194a0:	69da      	ldr	r2, [r3, #28]
 80194a2:	2150      	movs	r1, #80	@ 0x50
 80194a4:	187b      	adds	r3, r7, r1
 80194a6:	881b      	ldrh	r3, [r3, #0]
 80194a8:	18d2      	adds	r2, r2, r3
 80194aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80194ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194b0:	695a      	ldr	r2, [r3, #20]
 80194b2:	187b      	adds	r3, r7, r1
 80194b4:	881b      	ldrh	r3, [r3, #0]
 80194b6:	18d2      	adds	r2, r2, r3
 80194b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80194bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194be:	699b      	ldr	r3, [r3, #24]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d005      	beq.n	80194d0 <PCD_EP_ISR_Handler+0x550>
 80194c4:	187b      	adds	r3, r7, r1
 80194c6:	881a      	ldrh	r2, [r3, #0]
 80194c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194ca:	691b      	ldr	r3, [r3, #16]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d207      	bcs.n	80194e0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80194d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80194d2:	781a      	ldrb	r2, [r3, #0]
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	0011      	movs	r1, r2
 80194d8:	0018      	movs	r0, r3
 80194da:	f009 f84e 	bl	802257a <HAL_PCD_DataOutStageCallback>
 80194de:	e006      	b.n	80194ee <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80194e6:	0011      	movs	r1, r2
 80194e8:	0018      	movs	r0, r3
 80194ea:	f005 fd6f 	bl	801efcc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80194ee:	244a      	movs	r4, #74	@ 0x4a
 80194f0:	193b      	adds	r3, r7, r4
 80194f2:	881b      	ldrh	r3, [r3, #0]
 80194f4:	2280      	movs	r2, #128	@ 0x80
 80194f6:	4013      	ands	r3, r2
 80194f8:	d100      	bne.n	80194fc <PCD_EP_ISR_Handler+0x57c>
 80194fa:	e133      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80194fc:	204d      	movs	r0, #77	@ 0x4d
 80194fe:	183b      	adds	r3, r7, r0
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	1c5a      	adds	r2, r3, #1
 8019504:	0013      	movs	r3, r2
 8019506:	009b      	lsls	r3, r3, #2
 8019508:	189b      	adds	r3, r3, r2
 801950a:	00db      	lsls	r3, r3, #3
 801950c:	687a      	ldr	r2, [r7, #4]
 801950e:	18d3      	adds	r3, r2, r3
 8019510:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	001a      	movs	r2, r3
 8019518:	183b      	adds	r3, r7, r0
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	009b      	lsls	r3, r3, #2
 801951e:	18d3      	adds	r3, r2, r3
 8019520:	881b      	ldrh	r3, [r3, #0]
 8019522:	b29a      	uxth	r2, r3
 8019524:	2542      	movs	r5, #66	@ 0x42
 8019526:	197b      	adds	r3, r7, r5
 8019528:	494f      	ldr	r1, [pc, #316]	@ (8019668 <PCD_EP_ISR_Handler+0x6e8>)
 801952a:	400a      	ands	r2, r1
 801952c:	801a      	strh	r2, [r3, #0]
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	001a      	movs	r2, r3
 8019534:	183b      	adds	r3, r7, r0
 8019536:	781b      	ldrb	r3, [r3, #0]
 8019538:	009b      	lsls	r3, r3, #2
 801953a:	18d3      	adds	r3, r2, r3
 801953c:	197a      	adds	r2, r7, r5
 801953e:	8812      	ldrh	r2, [r2, #0]
 8019540:	494a      	ldr	r1, [pc, #296]	@ (801966c <PCD_EP_ISR_Handler+0x6ec>)
 8019542:	430a      	orrs	r2, r1
 8019544:	b292      	uxth	r2, r2
 8019546:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8019548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801954a:	78db      	ldrb	r3, [r3, #3]
 801954c:	2b01      	cmp	r3, #1
 801954e:	d000      	beq.n	8019552 <PCD_EP_ISR_Handler+0x5d2>
 8019550:	e0af      	b.n	80196b2 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8019552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019554:	2200      	movs	r2, #0
 8019556:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8019558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801955a:	7b1b      	ldrb	r3, [r3, #12]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d100      	bne.n	8019562 <PCD_EP_ISR_Handler+0x5e2>
 8019560:	e09f      	b.n	80196a2 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019562:	193b      	adds	r3, r7, r4
 8019564:	881b      	ldrh	r3, [r3, #0]
 8019566:	2240      	movs	r2, #64	@ 0x40
 8019568:	4013      	ands	r3, r2
 801956a:	d046      	beq.n	80195fa <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801956c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801956e:	785b      	ldrb	r3, [r3, #1]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d125      	bne.n	80195c0 <PCD_EP_ISR_Handler+0x640>
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	627b      	str	r3, [r7, #36]	@ 0x24
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	2250      	movs	r2, #80	@ 0x50
 8019580:	5a9b      	ldrh	r3, [r3, r2]
 8019582:	b29b      	uxth	r3, r3
 8019584:	001a      	movs	r2, r3
 8019586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019588:	189b      	adds	r3, r3, r2
 801958a:	627b      	str	r3, [r7, #36]	@ 0x24
 801958c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801958e:	781b      	ldrb	r3, [r3, #0]
 8019590:	00da      	lsls	r2, r3, #3
 8019592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019594:	18d3      	adds	r3, r2, r3
 8019596:	4a33      	ldr	r2, [pc, #204]	@ (8019664 <PCD_EP_ISR_Handler+0x6e4>)
 8019598:	4694      	mov	ip, r2
 801959a:	4463      	add	r3, ip
 801959c:	623b      	str	r3, [r7, #32]
 801959e:	6a3b      	ldr	r3, [r7, #32]
 80195a0:	881b      	ldrh	r3, [r3, #0]
 80195a2:	b29b      	uxth	r3, r3
 80195a4:	059b      	lsls	r3, r3, #22
 80195a6:	0d9b      	lsrs	r3, r3, #22
 80195a8:	b29a      	uxth	r2, r3
 80195aa:	6a3b      	ldr	r3, [r7, #32]
 80195ac:	801a      	strh	r2, [r3, #0]
 80195ae:	6a3b      	ldr	r3, [r7, #32]
 80195b0:	881b      	ldrh	r3, [r3, #0]
 80195b2:	b29b      	uxth	r3, r3
 80195b4:	4a2d      	ldr	r2, [pc, #180]	@ (801966c <PCD_EP_ISR_Handler+0x6ec>)
 80195b6:	4313      	orrs	r3, r2
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	6a3b      	ldr	r3, [r7, #32]
 80195bc:	801a      	strh	r2, [r3, #0]
 80195be:	e070      	b.n	80196a2 <PCD_EP_ISR_Handler+0x722>
 80195c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195c2:	785b      	ldrb	r3, [r3, #1]
 80195c4:	2b01      	cmp	r3, #1
 80195c6:	d16c      	bne.n	80196a2 <PCD_EP_ISR_Handler+0x722>
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	2250      	movs	r2, #80	@ 0x50
 80195d4:	5a9b      	ldrh	r3, [r3, r2]
 80195d6:	b29b      	uxth	r3, r3
 80195d8:	001a      	movs	r2, r3
 80195da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195dc:	189b      	adds	r3, r3, r2
 80195de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80195e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80195e2:	781b      	ldrb	r3, [r3, #0]
 80195e4:	00da      	lsls	r2, r3, #3
 80195e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80195e8:	18d3      	adds	r3, r2, r3
 80195ea:	4a1e      	ldr	r2, [pc, #120]	@ (8019664 <PCD_EP_ISR_Handler+0x6e4>)
 80195ec:	4694      	mov	ip, r2
 80195ee:	4463      	add	r3, ip
 80195f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195f4:	2200      	movs	r2, #0
 80195f6:	801a      	strh	r2, [r3, #0]
 80195f8:	e053      	b.n	80196a2 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019602:	785b      	ldrb	r3, [r3, #1]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d133      	bne.n	8019670 <PCD_EP_ISR_Handler+0x6f0>
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	637b      	str	r3, [r7, #52]	@ 0x34
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	2250      	movs	r2, #80	@ 0x50
 8019614:	5a9b      	ldrh	r3, [r3, r2]
 8019616:	b29b      	uxth	r3, r3
 8019618:	001a      	movs	r2, r3
 801961a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801961c:	189b      	adds	r3, r3, r2
 801961e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019622:	781b      	ldrb	r3, [r3, #0]
 8019624:	00da      	lsls	r2, r3, #3
 8019626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019628:	18d3      	adds	r3, r2, r3
 801962a:	4a0b      	ldr	r2, [pc, #44]	@ (8019658 <PCD_EP_ISR_Handler+0x6d8>)
 801962c:	4694      	mov	ip, r2
 801962e:	4463      	add	r3, ip
 8019630:	633b      	str	r3, [r7, #48]	@ 0x30
 8019632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019634:	881b      	ldrh	r3, [r3, #0]
 8019636:	b29b      	uxth	r3, r3
 8019638:	059b      	lsls	r3, r3, #22
 801963a:	0d9b      	lsrs	r3, r3, #22
 801963c:	b29a      	uxth	r2, r3
 801963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019640:	801a      	strh	r2, [r3, #0]
 8019642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	b29b      	uxth	r3, r3
 8019648:	4a08      	ldr	r2, [pc, #32]	@ (801966c <PCD_EP_ISR_Handler+0x6ec>)
 801964a:	4313      	orrs	r3, r2
 801964c:	b29a      	uxth	r2, r3
 801964e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019650:	801a      	strh	r2, [r3, #0]
 8019652:	e026      	b.n	80196a2 <PCD_EP_ISR_Handler+0x722>
 8019654:	00000f8f 	.word	0x00000f8f
 8019658:	00000406 	.word	0x00000406
 801965c:	ffff8f8f 	.word	0xffff8f8f
 8019660:	ffff80c0 	.word	0xffff80c0
 8019664:	00000402 	.word	0x00000402
 8019668:	ffff8f0f 	.word	0xffff8f0f
 801966c:	ffff8000 	.word	0xffff8000
 8019670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019672:	785b      	ldrb	r3, [r3, #1]
 8019674:	2b01      	cmp	r3, #1
 8019676:	d114      	bne.n	80196a2 <PCD_EP_ISR_Handler+0x722>
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	681b      	ldr	r3, [r3, #0]
 801967c:	2250      	movs	r2, #80	@ 0x50
 801967e:	5a9b      	ldrh	r3, [r3, r2]
 8019680:	b29b      	uxth	r3, r3
 8019682:	001a      	movs	r2, r3
 8019684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019686:	189b      	adds	r3, r3, r2
 8019688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801968a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801968c:	781b      	ldrb	r3, [r3, #0]
 801968e:	00da      	lsls	r2, r3, #3
 8019690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019692:	18d3      	adds	r3, r2, r3
 8019694:	4a3b      	ldr	r2, [pc, #236]	@ (8019784 <PCD_EP_ISR_Handler+0x804>)
 8019696:	4694      	mov	ip, r2
 8019698:	4463      	add	r3, ip
 801969a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801969c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801969e:	2200      	movs	r2, #0
 80196a0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80196a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196a4:	781a      	ldrb	r2, [r3, #0]
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	0011      	movs	r1, r2
 80196aa:	0018      	movs	r0, r3
 80196ac:	f008 ff86 	bl	80225bc <HAL_PCD_DataInStageCallback>
 80196b0:	e058      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80196b2:	234a      	movs	r3, #74	@ 0x4a
 80196b4:	18fb      	adds	r3, r7, r3
 80196b6:	881a      	ldrh	r2, [r3, #0]
 80196b8:	2380      	movs	r3, #128	@ 0x80
 80196ba:	005b      	lsls	r3, r3, #1
 80196bc:	4013      	ands	r3, r2
 80196be:	d149      	bne.n	8019754 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	2250      	movs	r2, #80	@ 0x50
 80196c6:	5a9b      	ldrh	r3, [r3, r2]
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	001a      	movs	r2, r3
 80196cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	00db      	lsls	r3, r3, #3
 80196d2:	18d2      	adds	r2, r2, r3
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	18d3      	adds	r3, r2, r3
 80196da:	4a2b      	ldr	r2, [pc, #172]	@ (8019788 <PCD_EP_ISR_Handler+0x808>)
 80196dc:	4694      	mov	ip, r2
 80196de:	4463      	add	r3, ip
 80196e0:	881a      	ldrh	r2, [r3, #0]
 80196e2:	2140      	movs	r1, #64	@ 0x40
 80196e4:	187b      	adds	r3, r7, r1
 80196e6:	0592      	lsls	r2, r2, #22
 80196e8:	0d92      	lsrs	r2, r2, #22
 80196ea:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80196ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196ee:	699a      	ldr	r2, [r3, #24]
 80196f0:	187b      	adds	r3, r7, r1
 80196f2:	881b      	ldrh	r3, [r3, #0]
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d907      	bls.n	8019708 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80196f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196fa:	699a      	ldr	r2, [r3, #24]
 80196fc:	187b      	adds	r3, r7, r1
 80196fe:	881b      	ldrh	r3, [r3, #0]
 8019700:	1ad2      	subs	r2, r2, r3
 8019702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019704:	619a      	str	r2, [r3, #24]
 8019706:	e002      	b.n	801970e <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8019708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801970a:	2200      	movs	r2, #0
 801970c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801970e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019710:	699b      	ldr	r3, [r3, #24]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d107      	bne.n	8019726 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019718:	781a      	ldrb	r2, [r3, #0]
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	0011      	movs	r1, r2
 801971e:	0018      	movs	r0, r3
 8019720:	f008 ff4c 	bl	80225bc <HAL_PCD_DataInStageCallback>
 8019724:	e01e      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8019726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019728:	695a      	ldr	r2, [r3, #20]
 801972a:	2140      	movs	r1, #64	@ 0x40
 801972c:	187b      	adds	r3, r7, r1
 801972e:	881b      	ldrh	r3, [r3, #0]
 8019730:	18d2      	adds	r2, r2, r3
 8019732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019734:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8019736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019738:	69da      	ldr	r2, [r3, #28]
 801973a:	187b      	adds	r3, r7, r1
 801973c:	881b      	ldrh	r3, [r3, #0]
 801973e:	18d2      	adds	r2, r2, r3
 8019740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019742:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801974a:	0011      	movs	r1, r2
 801974c:	0018      	movs	r0, r3
 801974e:	f005 fc3d 	bl	801efcc <USB_EPStartXfer>
 8019752:	e007      	b.n	8019764 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8019754:	234a      	movs	r3, #74	@ 0x4a
 8019756:	18fb      	adds	r3, r7, r3
 8019758:	881a      	ldrh	r2, [r3, #0]
 801975a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	0018      	movs	r0, r3
 8019760:	f000 f930 	bl	80199c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2244      	movs	r2, #68	@ 0x44
 801976a:	5a9b      	ldrh	r3, [r3, r2]
 801976c:	b29b      	uxth	r3, r3
 801976e:	b21b      	sxth	r3, r3
 8019770:	2b00      	cmp	r3, #0
 8019772:	da01      	bge.n	8019778 <PCD_EP_ISR_Handler+0x7f8>
 8019774:	f7ff fc0a 	bl	8018f8c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8019778:	2300      	movs	r3, #0
}
 801977a:	0018      	movs	r0, r3
 801977c:	46bd      	mov	sp, r7
 801977e:	b016      	add	sp, #88	@ 0x58
 8019780:	bdb0      	pop	{r4, r5, r7, pc}
 8019782:	46c0      	nop			@ (mov r8, r8)
 8019784:	00000406 	.word	0x00000406
 8019788:	00000402 	.word	0x00000402

0801978c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801978c:	b590      	push	{r4, r7, lr}
 801978e:	b089      	sub	sp, #36	@ 0x24
 8019790:	af00      	add	r7, sp, #0
 8019792:	60f8      	str	r0, [r7, #12]
 8019794:	60b9      	str	r1, [r7, #8]
 8019796:	1dbb      	adds	r3, r7, #6
 8019798:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801979a:	1dbb      	adds	r3, r7, #6
 801979c:	881a      	ldrh	r2, [r3, #0]
 801979e:	2380      	movs	r3, #128	@ 0x80
 80197a0:	01db      	lsls	r3, r3, #7
 80197a2:	4013      	ands	r3, r2
 80197a4:	d100      	bne.n	80197a8 <HAL_PCD_EP_DB_Receive+0x1c>
 80197a6:	e07d      	b.n	80198a4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	2250      	movs	r2, #80	@ 0x50
 80197ae:	5a9b      	ldrh	r3, [r3, r2]
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	001a      	movs	r2, r3
 80197b4:	68bb      	ldr	r3, [r7, #8]
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	00db      	lsls	r3, r3, #3
 80197ba:	18d2      	adds	r2, r2, r3
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	18d3      	adds	r3, r2, r3
 80197c2:	4a7a      	ldr	r2, [pc, #488]	@ (80199ac <HAL_PCD_EP_DB_Receive+0x220>)
 80197c4:	4694      	mov	ip, r2
 80197c6:	4463      	add	r3, ip
 80197c8:	881a      	ldrh	r2, [r3, #0]
 80197ca:	211a      	movs	r1, #26
 80197cc:	187b      	adds	r3, r7, r1
 80197ce:	0592      	lsls	r2, r2, #22
 80197d0:	0d92      	lsrs	r2, r2, #22
 80197d2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80197d4:	68bb      	ldr	r3, [r7, #8]
 80197d6:	699a      	ldr	r2, [r3, #24]
 80197d8:	187b      	adds	r3, r7, r1
 80197da:	881b      	ldrh	r3, [r3, #0]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d307      	bcc.n	80197f0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	699a      	ldr	r2, [r3, #24]
 80197e4:	187b      	adds	r3, r7, r1
 80197e6:	881b      	ldrh	r3, [r3, #0]
 80197e8:	1ad2      	subs	r2, r2, r3
 80197ea:	68bb      	ldr	r3, [r7, #8]
 80197ec:	619a      	str	r2, [r3, #24]
 80197ee:	e002      	b.n	80197f6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	2200      	movs	r2, #0
 80197f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80197f6:	68bb      	ldr	r3, [r7, #8]
 80197f8:	699b      	ldr	r3, [r3, #24]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d121      	bne.n	8019842 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80197fe:	68fb      	ldr	r3, [r7, #12]
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	001a      	movs	r2, r3
 8019804:	68bb      	ldr	r3, [r7, #8]
 8019806:	781b      	ldrb	r3, [r3, #0]
 8019808:	009b      	lsls	r3, r3, #2
 801980a:	18d3      	adds	r3, r2, r3
 801980c:	881b      	ldrh	r3, [r3, #0]
 801980e:	b29a      	uxth	r2, r3
 8019810:	2018      	movs	r0, #24
 8019812:	183b      	adds	r3, r7, r0
 8019814:	4966      	ldr	r1, [pc, #408]	@ (80199b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8019816:	400a      	ands	r2, r1
 8019818:	801a      	strh	r2, [r3, #0]
 801981a:	183b      	adds	r3, r7, r0
 801981c:	183a      	adds	r2, r7, r0
 801981e:	8812      	ldrh	r2, [r2, #0]
 8019820:	2180      	movs	r1, #128	@ 0x80
 8019822:	0189      	lsls	r1, r1, #6
 8019824:	404a      	eors	r2, r1
 8019826:	801a      	strh	r2, [r3, #0]
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	001a      	movs	r2, r3
 801982e:	68bb      	ldr	r3, [r7, #8]
 8019830:	781b      	ldrb	r3, [r3, #0]
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	18d3      	adds	r3, r2, r3
 8019836:	183a      	adds	r2, r7, r0
 8019838:	8812      	ldrh	r2, [r2, #0]
 801983a:	495e      	ldr	r1, [pc, #376]	@ (80199b4 <HAL_PCD_EP_DB_Receive+0x228>)
 801983c:	430a      	orrs	r2, r1
 801983e:	b292      	uxth	r2, r2
 8019840:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8019842:	1dbb      	adds	r3, r7, #6
 8019844:	881b      	ldrh	r3, [r3, #0]
 8019846:	2240      	movs	r2, #64	@ 0x40
 8019848:	4013      	ands	r3, r2
 801984a:	d01a      	beq.n	8019882 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	001a      	movs	r2, r3
 8019852:	68bb      	ldr	r3, [r7, #8]
 8019854:	781b      	ldrb	r3, [r3, #0]
 8019856:	009b      	lsls	r3, r3, #2
 8019858:	18d3      	adds	r3, r2, r3
 801985a:	881b      	ldrh	r3, [r3, #0]
 801985c:	b29a      	uxth	r2, r3
 801985e:	2016      	movs	r0, #22
 8019860:	183b      	adds	r3, r7, r0
 8019862:	4955      	ldr	r1, [pc, #340]	@ (80199b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019864:	400a      	ands	r2, r1
 8019866:	801a      	strh	r2, [r3, #0]
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	001a      	movs	r2, r3
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	781b      	ldrb	r3, [r3, #0]
 8019872:	009b      	lsls	r3, r3, #2
 8019874:	18d3      	adds	r3, r2, r3
 8019876:	183a      	adds	r2, r7, r0
 8019878:	8812      	ldrh	r2, [r2, #0]
 801987a:	4950      	ldr	r1, [pc, #320]	@ (80199bc <HAL_PCD_EP_DB_Receive+0x230>)
 801987c:	430a      	orrs	r2, r1
 801987e:	b292      	uxth	r2, r2
 8019880:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8019882:	241a      	movs	r4, #26
 8019884:	193b      	adds	r3, r7, r4
 8019886:	881b      	ldrh	r3, [r3, #0]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d100      	bne.n	801988e <HAL_PCD_EP_DB_Receive+0x102>
 801988c:	e086      	b.n	801999c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801988e:	68fb      	ldr	r3, [r7, #12]
 8019890:	6818      	ldr	r0, [r3, #0]
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	6959      	ldr	r1, [r3, #20]
 8019896:	68bb      	ldr	r3, [r7, #8]
 8019898:	891a      	ldrh	r2, [r3, #8]
 801989a:	193b      	adds	r3, r7, r4
 801989c:	881b      	ldrh	r3, [r3, #0]
 801989e:	f006 fe51 	bl	8020544 <USB_ReadPMA>
 80198a2:	e07b      	b.n	801999c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	2250      	movs	r2, #80	@ 0x50
 80198aa:	5a9b      	ldrh	r3, [r3, r2]
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	001a      	movs	r2, r3
 80198b0:	68bb      	ldr	r3, [r7, #8]
 80198b2:	781b      	ldrb	r3, [r3, #0]
 80198b4:	00db      	lsls	r3, r3, #3
 80198b6:	18d2      	adds	r2, r2, r3
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	18d3      	adds	r3, r2, r3
 80198be:	4a40      	ldr	r2, [pc, #256]	@ (80199c0 <HAL_PCD_EP_DB_Receive+0x234>)
 80198c0:	4694      	mov	ip, r2
 80198c2:	4463      	add	r3, ip
 80198c4:	881a      	ldrh	r2, [r3, #0]
 80198c6:	211a      	movs	r1, #26
 80198c8:	187b      	adds	r3, r7, r1
 80198ca:	0592      	lsls	r2, r2, #22
 80198cc:	0d92      	lsrs	r2, r2, #22
 80198ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80198d0:	68bb      	ldr	r3, [r7, #8]
 80198d2:	699a      	ldr	r2, [r3, #24]
 80198d4:	187b      	adds	r3, r7, r1
 80198d6:	881b      	ldrh	r3, [r3, #0]
 80198d8:	429a      	cmp	r2, r3
 80198da:	d307      	bcc.n	80198ec <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80198dc:	68bb      	ldr	r3, [r7, #8]
 80198de:	699a      	ldr	r2, [r3, #24]
 80198e0:	187b      	adds	r3, r7, r1
 80198e2:	881b      	ldrh	r3, [r3, #0]
 80198e4:	1ad2      	subs	r2, r2, r3
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	619a      	str	r2, [r3, #24]
 80198ea:	e002      	b.n	80198f2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80198ec:	68bb      	ldr	r3, [r7, #8]
 80198ee:	2200      	movs	r2, #0
 80198f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	699b      	ldr	r3, [r3, #24]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d121      	bne.n	801993e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	001a      	movs	r2, r3
 8019900:	68bb      	ldr	r3, [r7, #8]
 8019902:	781b      	ldrb	r3, [r3, #0]
 8019904:	009b      	lsls	r3, r3, #2
 8019906:	18d3      	adds	r3, r2, r3
 8019908:	881b      	ldrh	r3, [r3, #0]
 801990a:	b29a      	uxth	r2, r3
 801990c:	201e      	movs	r0, #30
 801990e:	183b      	adds	r3, r7, r0
 8019910:	4927      	ldr	r1, [pc, #156]	@ (80199b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8019912:	400a      	ands	r2, r1
 8019914:	801a      	strh	r2, [r3, #0]
 8019916:	183b      	adds	r3, r7, r0
 8019918:	183a      	adds	r2, r7, r0
 801991a:	8812      	ldrh	r2, [r2, #0]
 801991c:	2180      	movs	r1, #128	@ 0x80
 801991e:	0189      	lsls	r1, r1, #6
 8019920:	404a      	eors	r2, r1
 8019922:	801a      	strh	r2, [r3, #0]
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	001a      	movs	r2, r3
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	781b      	ldrb	r3, [r3, #0]
 801992e:	009b      	lsls	r3, r3, #2
 8019930:	18d3      	adds	r3, r2, r3
 8019932:	183a      	adds	r2, r7, r0
 8019934:	8812      	ldrh	r2, [r2, #0]
 8019936:	491f      	ldr	r1, [pc, #124]	@ (80199b4 <HAL_PCD_EP_DB_Receive+0x228>)
 8019938:	430a      	orrs	r2, r1
 801993a:	b292      	uxth	r2, r2
 801993c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801993e:	1dbb      	adds	r3, r7, #6
 8019940:	881b      	ldrh	r3, [r3, #0]
 8019942:	2240      	movs	r2, #64	@ 0x40
 8019944:	4013      	ands	r3, r2
 8019946:	d11a      	bne.n	801997e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	001a      	movs	r2, r3
 801994e:	68bb      	ldr	r3, [r7, #8]
 8019950:	781b      	ldrb	r3, [r3, #0]
 8019952:	009b      	lsls	r3, r3, #2
 8019954:	18d3      	adds	r3, r2, r3
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	b29a      	uxth	r2, r3
 801995a:	201c      	movs	r0, #28
 801995c:	183b      	adds	r3, r7, r0
 801995e:	4916      	ldr	r1, [pc, #88]	@ (80199b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8019960:	400a      	ands	r2, r1
 8019962:	801a      	strh	r2, [r3, #0]
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	001a      	movs	r2, r3
 801996a:	68bb      	ldr	r3, [r7, #8]
 801996c:	781b      	ldrb	r3, [r3, #0]
 801996e:	009b      	lsls	r3, r3, #2
 8019970:	18d3      	adds	r3, r2, r3
 8019972:	183a      	adds	r2, r7, r0
 8019974:	8812      	ldrh	r2, [r2, #0]
 8019976:	4911      	ldr	r1, [pc, #68]	@ (80199bc <HAL_PCD_EP_DB_Receive+0x230>)
 8019978:	430a      	orrs	r2, r1
 801997a:	b292      	uxth	r2, r2
 801997c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801997e:	241a      	movs	r4, #26
 8019980:	193b      	adds	r3, r7, r4
 8019982:	881b      	ldrh	r3, [r3, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d009      	beq.n	801999c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	6818      	ldr	r0, [r3, #0]
 801998c:	68bb      	ldr	r3, [r7, #8]
 801998e:	6959      	ldr	r1, [r3, #20]
 8019990:	68bb      	ldr	r3, [r7, #8]
 8019992:	895a      	ldrh	r2, [r3, #10]
 8019994:	193b      	adds	r3, r7, r4
 8019996:	881b      	ldrh	r3, [r3, #0]
 8019998:	f006 fdd4 	bl	8020544 <USB_ReadPMA>
    }
  }

  return count;
 801999c:	231a      	movs	r3, #26
 801999e:	18fb      	adds	r3, r7, r3
 80199a0:	881b      	ldrh	r3, [r3, #0]
}
 80199a2:	0018      	movs	r0, r3
 80199a4:	46bd      	mov	sp, r7
 80199a6:	b009      	add	sp, #36	@ 0x24
 80199a8:	bd90      	pop	{r4, r7, pc}
 80199aa:	46c0      	nop			@ (mov r8, r8)
 80199ac:	00000402 	.word	0x00000402
 80199b0:	ffffbf8f 	.word	0xffffbf8f
 80199b4:	ffff8080 	.word	0xffff8080
 80199b8:	ffff8f8f 	.word	0xffff8f8f
 80199bc:	ffff80c0 	.word	0xffff80c0
 80199c0:	00000406 	.word	0x00000406

080199c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b0a4      	sub	sp, #144	@ 0x90
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	60f8      	str	r0, [r7, #12]
 80199cc:	60b9      	str	r1, [r7, #8]
 80199ce:	1dbb      	adds	r3, r7, #6
 80199d0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80199d2:	1dbb      	adds	r3, r7, #6
 80199d4:	881b      	ldrh	r3, [r3, #0]
 80199d6:	2240      	movs	r2, #64	@ 0x40
 80199d8:	4013      	ands	r3, r2
 80199da:	d100      	bne.n	80199de <HAL_PCD_EP_DB_Transmit+0x1a>
 80199dc:	e1e4      	b.n	8019da8 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	2250      	movs	r2, #80	@ 0x50
 80199e4:	5a9b      	ldrh	r3, [r3, r2]
 80199e6:	b29b      	uxth	r3, r3
 80199e8:	001a      	movs	r2, r3
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	781b      	ldrb	r3, [r3, #0]
 80199ee:	00db      	lsls	r3, r3, #3
 80199f0:	18d2      	adds	r2, r2, r3
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	18d3      	adds	r3, r2, r3
 80199f8:	4ad0      	ldr	r2, [pc, #832]	@ (8019d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 80199fa:	4694      	mov	ip, r2
 80199fc:	4463      	add	r3, ip
 80199fe:	881a      	ldrh	r2, [r3, #0]
 8019a00:	2186      	movs	r1, #134	@ 0x86
 8019a02:	187b      	adds	r3, r7, r1
 8019a04:	0592      	lsls	r2, r2, #22
 8019a06:	0d92      	lsrs	r2, r2, #22
 8019a08:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8019a0a:	68bb      	ldr	r3, [r7, #8]
 8019a0c:	699a      	ldr	r2, [r3, #24]
 8019a0e:	187b      	adds	r3, r7, r1
 8019a10:	881b      	ldrh	r3, [r3, #0]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d907      	bls.n	8019a26 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8019a16:	68bb      	ldr	r3, [r7, #8]
 8019a18:	699a      	ldr	r2, [r3, #24]
 8019a1a:	187b      	adds	r3, r7, r1
 8019a1c:	881b      	ldrh	r3, [r3, #0]
 8019a1e:	1ad2      	subs	r2, r2, r3
 8019a20:	68bb      	ldr	r3, [r7, #8]
 8019a22:	619a      	str	r2, [r3, #24]
 8019a24:	e002      	b.n	8019a2c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8019a26:	68bb      	ldr	r3, [r7, #8]
 8019a28:	2200      	movs	r2, #0
 8019a2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	699b      	ldr	r3, [r3, #24]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d000      	beq.n	8019a36 <HAL_PCD_EP_DB_Transmit+0x72>
 8019a34:	e0b5      	b.n	8019ba2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019a36:	68bb      	ldr	r3, [r7, #8]
 8019a38:	785b      	ldrb	r3, [r3, #1]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d125      	bne.n	8019a8a <HAL_PCD_EP_DB_Transmit+0xc6>
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2250      	movs	r2, #80	@ 0x50
 8019a4a:	5a9b      	ldrh	r3, [r3, r2]
 8019a4c:	b29b      	uxth	r3, r3
 8019a4e:	001a      	movs	r2, r3
 8019a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a52:	189b      	adds	r3, r3, r2
 8019a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	781b      	ldrb	r3, [r3, #0]
 8019a5a:	00da      	lsls	r2, r3, #3
 8019a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a5e:	18d3      	adds	r3, r2, r3
 8019a60:	4ab6      	ldr	r2, [pc, #728]	@ (8019d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019a62:	4694      	mov	ip, r2
 8019a64:	4463      	add	r3, ip
 8019a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a6a:	881b      	ldrh	r3, [r3, #0]
 8019a6c:	b29b      	uxth	r3, r3
 8019a6e:	059b      	lsls	r3, r3, #22
 8019a70:	0d9b      	lsrs	r3, r3, #22
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a76:	801a      	strh	r2, [r3, #0]
 8019a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a7a:	881b      	ldrh	r3, [r3, #0]
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	4ab0      	ldr	r2, [pc, #704]	@ (8019d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019a80:	4313      	orrs	r3, r2
 8019a82:	b29a      	uxth	r2, r3
 8019a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a86:	801a      	strh	r2, [r3, #0]
 8019a88:	e01b      	b.n	8019ac2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019a8a:	68bb      	ldr	r3, [r7, #8]
 8019a8c:	785b      	ldrb	r3, [r3, #1]
 8019a8e:	2b01      	cmp	r3, #1
 8019a90:	d117      	bne.n	8019ac2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	2250      	movs	r2, #80	@ 0x50
 8019a9e:	5a9b      	ldrh	r3, [r3, r2]
 8019aa0:	b29b      	uxth	r3, r3
 8019aa2:	001a      	movs	r2, r3
 8019aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aa6:	189b      	adds	r3, r3, r2
 8019aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019aaa:	68bb      	ldr	r3, [r7, #8]
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	00da      	lsls	r2, r3, #3
 8019ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019ab2:	18d3      	adds	r3, r2, r3
 8019ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8019d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019ab6:	4694      	mov	ip, r2
 8019ab8:	4463      	add	r3, ip
 8019aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8019abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019abe:	2200      	movs	r2, #0
 8019ac0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	785b      	ldrb	r3, [r3, #1]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d125      	bne.n	8019b1c <HAL_PCD_EP_DB_Transmit+0x158>
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	61fb      	str	r3, [r7, #28]
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2250      	movs	r2, #80	@ 0x50
 8019adc:	5a9b      	ldrh	r3, [r3, r2]
 8019ade:	b29b      	uxth	r3, r3
 8019ae0:	001a      	movs	r2, r3
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	189b      	adds	r3, r3, r2
 8019ae6:	61fb      	str	r3, [r7, #28]
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	00da      	lsls	r2, r3, #3
 8019aee:	69fb      	ldr	r3, [r7, #28]
 8019af0:	18d3      	adds	r3, r2, r3
 8019af2:	4a94      	ldr	r2, [pc, #592]	@ (8019d44 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019af4:	4694      	mov	ip, r2
 8019af6:	4463      	add	r3, ip
 8019af8:	61bb      	str	r3, [r7, #24]
 8019afa:	69bb      	ldr	r3, [r7, #24]
 8019afc:	881b      	ldrh	r3, [r3, #0]
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	059b      	lsls	r3, r3, #22
 8019b02:	0d9b      	lsrs	r3, r3, #22
 8019b04:	b29a      	uxth	r2, r3
 8019b06:	69bb      	ldr	r3, [r7, #24]
 8019b08:	801a      	strh	r2, [r3, #0]
 8019b0a:	69bb      	ldr	r3, [r7, #24]
 8019b0c:	881b      	ldrh	r3, [r3, #0]
 8019b0e:	b29b      	uxth	r3, r3
 8019b10:	4a8b      	ldr	r2, [pc, #556]	@ (8019d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019b12:	4313      	orrs	r3, r2
 8019b14:	b29a      	uxth	r2, r3
 8019b16:	69bb      	ldr	r3, [r7, #24]
 8019b18:	801a      	strh	r2, [r3, #0]
 8019b1a:	e018      	b.n	8019b4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8019b1c:	68bb      	ldr	r3, [r7, #8]
 8019b1e:	785b      	ldrb	r3, [r3, #1]
 8019b20:	2b01      	cmp	r3, #1
 8019b22:	d114      	bne.n	8019b4e <HAL_PCD_EP_DB_Transmit+0x18a>
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	2250      	movs	r2, #80	@ 0x50
 8019b2a:	5a9b      	ldrh	r3, [r3, r2]
 8019b2c:	b29b      	uxth	r3, r3
 8019b2e:	001a      	movs	r2, r3
 8019b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b32:	189b      	adds	r3, r3, r2
 8019b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8019b36:	68bb      	ldr	r3, [r7, #8]
 8019b38:	781b      	ldrb	r3, [r3, #0]
 8019b3a:	00da      	lsls	r2, r3, #3
 8019b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b3e:	18d3      	adds	r3, r2, r3
 8019b40:	4a80      	ldr	r2, [pc, #512]	@ (8019d44 <HAL_PCD_EP_DB_Transmit+0x380>)
 8019b42:	4694      	mov	ip, r2
 8019b44:	4463      	add	r3, ip
 8019b46:	623b      	str	r3, [r7, #32]
 8019b48:	6a3b      	ldr	r3, [r7, #32]
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	781a      	ldrb	r2, [r3, #0]
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	0011      	movs	r1, r2
 8019b56:	0018      	movs	r0, r3
 8019b58:	f008 fd30 	bl	80225bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019b5c:	1dbb      	adds	r3, r7, #6
 8019b5e:	881a      	ldrh	r2, [r3, #0]
 8019b60:	2380      	movs	r3, #128	@ 0x80
 8019b62:	01db      	lsls	r3, r3, #7
 8019b64:	4013      	ands	r3, r2
 8019b66:	d100      	bne.n	8019b6a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8019b68:	e309      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	001a      	movs	r2, r3
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	781b      	ldrb	r3, [r3, #0]
 8019b74:	009b      	lsls	r3, r3, #2
 8019b76:	18d3      	adds	r3, r2, r3
 8019b78:	881b      	ldrh	r3, [r3, #0]
 8019b7a:	b29a      	uxth	r2, r3
 8019b7c:	2016      	movs	r0, #22
 8019b7e:	183b      	adds	r3, r7, r0
 8019b80:	4971      	ldr	r1, [pc, #452]	@ (8019d48 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019b82:	400a      	ands	r2, r1
 8019b84:	801a      	strh	r2, [r3, #0]
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	001a      	movs	r2, r3
 8019b8c:	68bb      	ldr	r3, [r7, #8]
 8019b8e:	781b      	ldrb	r3, [r3, #0]
 8019b90:	009b      	lsls	r3, r3, #2
 8019b92:	18d3      	adds	r3, r2, r3
 8019b94:	183a      	adds	r2, r7, r0
 8019b96:	8812      	ldrh	r2, [r2, #0]
 8019b98:	496c      	ldr	r1, [pc, #432]	@ (8019d4c <HAL_PCD_EP_DB_Transmit+0x388>)
 8019b9a:	430a      	orrs	r2, r1
 8019b9c:	b292      	uxth	r2, r2
 8019b9e:	801a      	strh	r2, [r3, #0]
 8019ba0:	e2ed      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8019ba2:	1dbb      	adds	r3, r7, #6
 8019ba4:	881a      	ldrh	r2, [r3, #0]
 8019ba6:	2380      	movs	r3, #128	@ 0x80
 8019ba8:	01db      	lsls	r3, r3, #7
 8019baa:	4013      	ands	r3, r2
 8019bac:	d01a      	beq.n	8019be4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	001a      	movs	r2, r3
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	781b      	ldrb	r3, [r3, #0]
 8019bb8:	009b      	lsls	r3, r3, #2
 8019bba:	18d3      	adds	r3, r2, r3
 8019bbc:	881b      	ldrh	r3, [r3, #0]
 8019bbe:	b29a      	uxth	r2, r3
 8019bc0:	208a      	movs	r0, #138	@ 0x8a
 8019bc2:	183b      	adds	r3, r7, r0
 8019bc4:	4960      	ldr	r1, [pc, #384]	@ (8019d48 <HAL_PCD_EP_DB_Transmit+0x384>)
 8019bc6:	400a      	ands	r2, r1
 8019bc8:	801a      	strh	r2, [r3, #0]
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	001a      	movs	r2, r3
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	781b      	ldrb	r3, [r3, #0]
 8019bd4:	009b      	lsls	r3, r3, #2
 8019bd6:	18d3      	adds	r3, r2, r3
 8019bd8:	183a      	adds	r2, r7, r0
 8019bda:	8812      	ldrh	r2, [r2, #0]
 8019bdc:	495b      	ldr	r1, [pc, #364]	@ (8019d4c <HAL_PCD_EP_DB_Transmit+0x388>)
 8019bde:	430a      	orrs	r2, r1
 8019be0:	b292      	uxth	r2, r2
 8019be2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	2224      	movs	r2, #36	@ 0x24
 8019be8:	5c9b      	ldrb	r3, [r3, r2]
 8019bea:	2b01      	cmp	r3, #1
 8019bec:	d000      	beq.n	8019bf0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8019bee:	e2c6      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	695a      	ldr	r2, [r3, #20]
 8019bf4:	2186      	movs	r1, #134	@ 0x86
 8019bf6:	187b      	adds	r3, r7, r1
 8019bf8:	881b      	ldrh	r3, [r3, #0]
 8019bfa:	18d2      	adds	r2, r2, r3
 8019bfc:	68bb      	ldr	r3, [r7, #8]
 8019bfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	69da      	ldr	r2, [r3, #28]
 8019c04:	187b      	adds	r3, r7, r1
 8019c06:	881b      	ldrh	r3, [r3, #0]
 8019c08:	18d2      	adds	r2, r2, r3
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019c0e:	68bb      	ldr	r3, [r7, #8]
 8019c10:	6a1a      	ldr	r2, [r3, #32]
 8019c12:	68bb      	ldr	r3, [r7, #8]
 8019c14:	691b      	ldr	r3, [r3, #16]
 8019c16:	429a      	cmp	r2, r3
 8019c18:	d30c      	bcc.n	8019c34 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	691b      	ldr	r3, [r3, #16]
 8019c1e:	218c      	movs	r1, #140	@ 0x8c
 8019c20:	187a      	adds	r2, r7, r1
 8019c22:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019c24:	68bb      	ldr	r3, [r7, #8]
 8019c26:	6a1a      	ldr	r2, [r3, #32]
 8019c28:	187b      	adds	r3, r7, r1
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	1ad2      	subs	r2, r2, r3
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	621a      	str	r2, [r3, #32]
 8019c32:	e01a      	b.n	8019c6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	6a1b      	ldr	r3, [r3, #32]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d10a      	bne.n	8019c52 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8019c3c:	2386      	movs	r3, #134	@ 0x86
 8019c3e:	18fb      	adds	r3, r7, r3
 8019c40:	881b      	ldrh	r3, [r3, #0]
 8019c42:	228c      	movs	r2, #140	@ 0x8c
 8019c44:	18ba      	adds	r2, r7, r2
 8019c46:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	2224      	movs	r2, #36	@ 0x24
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	5499      	strb	r1, [r3, r2]
 8019c50:	e00b      	b.n	8019c6a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	2224      	movs	r2, #36	@ 0x24
 8019c56:	2100      	movs	r1, #0
 8019c58:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8019c5a:	68bb      	ldr	r3, [r7, #8]
 8019c5c:	6a1b      	ldr	r3, [r3, #32]
 8019c5e:	228c      	movs	r2, #140	@ 0x8c
 8019c60:	18ba      	adds	r2, r7, r2
 8019c62:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8019c64:	68bb      	ldr	r3, [r7, #8]
 8019c66:	2200      	movs	r2, #0
 8019c68:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8019c6a:	68bb      	ldr	r3, [r7, #8]
 8019c6c:	785b      	ldrb	r3, [r3, #1]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d000      	beq.n	8019c74 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8019c72:	e06d      	b.n	8019d50 <HAL_PCD_EP_DB_Transmit+0x38c>
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	2250      	movs	r2, #80	@ 0x50
 8019c80:	5a9b      	ldrh	r3, [r3, r2]
 8019c82:	b29b      	uxth	r3, r3
 8019c84:	001a      	movs	r2, r3
 8019c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c88:	189b      	adds	r3, r3, r2
 8019c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c8c:	68bb      	ldr	r3, [r7, #8]
 8019c8e:	781b      	ldrb	r3, [r3, #0]
 8019c90:	00da      	lsls	r2, r3, #3
 8019c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c94:	18d3      	adds	r3, r2, r3
 8019c96:	4a29      	ldr	r2, [pc, #164]	@ (8019d3c <HAL_PCD_EP_DB_Transmit+0x378>)
 8019c98:	4694      	mov	ip, r2
 8019c9a:	4463      	add	r3, ip
 8019c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019ca0:	881b      	ldrh	r3, [r3, #0]
 8019ca2:	b29b      	uxth	r3, r3
 8019ca4:	059b      	lsls	r3, r3, #22
 8019ca6:	0d9b      	lsrs	r3, r3, #22
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cac:	801a      	strh	r2, [r3, #0]
 8019cae:	228c      	movs	r2, #140	@ 0x8c
 8019cb0:	18bb      	adds	r3, r7, r2
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8019cb6:	d91a      	bls.n	8019cee <HAL_PCD_EP_DB_Transmit+0x32a>
 8019cb8:	18bb      	adds	r3, r7, r2
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	095b      	lsrs	r3, r3, #5
 8019cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cc0:	18bb      	adds	r3, r7, r2
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	221f      	movs	r2, #31
 8019cc6:	4013      	ands	r3, r2
 8019cc8:	d102      	bne.n	8019cd0 <HAL_PCD_EP_DB_Transmit+0x30c>
 8019cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ccc:	3b01      	subs	r3, #1
 8019cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cd2:	881b      	ldrh	r3, [r3, #0]
 8019cd4:	b29a      	uxth	r2, r3
 8019cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019cd8:	b29b      	uxth	r3, r3
 8019cda:	029b      	lsls	r3, r3, #10
 8019cdc:	b29b      	uxth	r3, r3
 8019cde:	4313      	orrs	r3, r2
 8019ce0:	b29b      	uxth	r3, r3
 8019ce2:	4a17      	ldr	r2, [pc, #92]	@ (8019d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019ce4:	4313      	orrs	r3, r2
 8019ce6:	b29a      	uxth	r2, r3
 8019ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cea:	801a      	strh	r2, [r3, #0]
 8019cec:	e04f      	b.n	8019d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019cee:	238c      	movs	r3, #140	@ 0x8c
 8019cf0:	18fb      	adds	r3, r7, r3
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d108      	bne.n	8019d0a <HAL_PCD_EP_DB_Transmit+0x346>
 8019cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019cfa:	881b      	ldrh	r3, [r3, #0]
 8019cfc:	b29b      	uxth	r3, r3
 8019cfe:	4a10      	ldr	r2, [pc, #64]	@ (8019d40 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8019d00:	4313      	orrs	r3, r2
 8019d02:	b29a      	uxth	r2, r3
 8019d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d06:	801a      	strh	r2, [r3, #0]
 8019d08:	e041      	b.n	8019d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019d0a:	228c      	movs	r2, #140	@ 0x8c
 8019d0c:	18bb      	adds	r3, r7, r2
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	085b      	lsrs	r3, r3, #1
 8019d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d14:	18bb      	adds	r3, r7, r2
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	2201      	movs	r2, #1
 8019d1a:	4013      	ands	r3, r2
 8019d1c:	d002      	beq.n	8019d24 <HAL_PCD_EP_DB_Transmit+0x360>
 8019d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d20:	3301      	adds	r3, #1
 8019d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d26:	881b      	ldrh	r3, [r3, #0]
 8019d28:	b29a      	uxth	r2, r3
 8019d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d2c:	b29b      	uxth	r3, r3
 8019d2e:	029b      	lsls	r3, r3, #10
 8019d30:	b29b      	uxth	r3, r3
 8019d32:	4313      	orrs	r3, r2
 8019d34:	b29a      	uxth	r2, r3
 8019d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019d38:	801a      	strh	r2, [r3, #0]
 8019d3a:	e028      	b.n	8019d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019d3c:	00000402 	.word	0x00000402
 8019d40:	ffff8000 	.word	0xffff8000
 8019d44:	00000406 	.word	0x00000406
 8019d48:	ffff8f8f 	.word	0xffff8f8f
 8019d4c:	ffffc080 	.word	0xffffc080
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	785b      	ldrb	r3, [r3, #1]
 8019d54:	2b01      	cmp	r3, #1
 8019d56:	d11a      	bne.n	8019d8e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	2250      	movs	r2, #80	@ 0x50
 8019d64:	5a9b      	ldrh	r3, [r3, r2]
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	001a      	movs	r2, r3
 8019d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d6c:	189b      	adds	r3, r3, r2
 8019d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d70:	68bb      	ldr	r3, [r7, #8]
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	00da      	lsls	r2, r3, #3
 8019d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019d78:	18d3      	adds	r3, r2, r3
 8019d7a:	4adb      	ldr	r2, [pc, #876]	@ (801a0e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019d7c:	4694      	mov	ip, r2
 8019d7e:	4463      	add	r3, ip
 8019d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8019d82:	238c      	movs	r3, #140	@ 0x8c
 8019d84:	18fb      	adds	r3, r7, r3
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	b29a      	uxth	r2, r3
 8019d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019d8c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	6818      	ldr	r0, [r3, #0]
 8019d92:	68bb      	ldr	r3, [r7, #8]
 8019d94:	6959      	ldr	r1, [r3, #20]
 8019d96:	68bb      	ldr	r3, [r7, #8]
 8019d98:	891a      	ldrh	r2, [r3, #8]
 8019d9a:	238c      	movs	r3, #140	@ 0x8c
 8019d9c:	18fb      	adds	r3, r7, r3
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	b29b      	uxth	r3, r3
 8019da2:	f006 fb85 	bl	80204b0 <USB_WritePMA>
 8019da6:	e1ea      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	2250      	movs	r2, #80	@ 0x50
 8019dae:	5a9b      	ldrh	r3, [r3, r2]
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	001a      	movs	r2, r3
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	781b      	ldrb	r3, [r3, #0]
 8019db8:	00db      	lsls	r3, r3, #3
 8019dba:	18d2      	adds	r2, r2, r3
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	18d3      	adds	r3, r2, r3
 8019dc2:	4aca      	ldr	r2, [pc, #808]	@ (801a0ec <HAL_PCD_EP_DB_Transmit+0x728>)
 8019dc4:	4694      	mov	ip, r2
 8019dc6:	4463      	add	r3, ip
 8019dc8:	881a      	ldrh	r2, [r3, #0]
 8019dca:	2186      	movs	r1, #134	@ 0x86
 8019dcc:	187b      	adds	r3, r7, r1
 8019dce:	0592      	lsls	r2, r2, #22
 8019dd0:	0d92      	lsrs	r2, r2, #22
 8019dd2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8019dd4:	68bb      	ldr	r3, [r7, #8]
 8019dd6:	699a      	ldr	r2, [r3, #24]
 8019dd8:	187b      	adds	r3, r7, r1
 8019dda:	881b      	ldrh	r3, [r3, #0]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d307      	bcc.n	8019df0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8019de0:	68bb      	ldr	r3, [r7, #8]
 8019de2:	699a      	ldr	r2, [r3, #24]
 8019de4:	187b      	adds	r3, r7, r1
 8019de6:	881b      	ldrh	r3, [r3, #0]
 8019de8:	1ad2      	subs	r2, r2, r3
 8019dea:	68bb      	ldr	r3, [r7, #8]
 8019dec:	619a      	str	r2, [r3, #24]
 8019dee:	e002      	b.n	8019df6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8019df0:	68bb      	ldr	r3, [r7, #8]
 8019df2:	2200      	movs	r2, #0
 8019df4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8019df6:	68bb      	ldr	r3, [r7, #8]
 8019df8:	699b      	ldr	r3, [r3, #24]
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d000      	beq.n	8019e00 <HAL_PCD_EP_DB_Transmit+0x43c>
 8019dfe:	e0bb      	b.n	8019f78 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	785b      	ldrb	r3, [r3, #1]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d125      	bne.n	8019e54 <HAL_PCD_EP_DB_Transmit+0x490>
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	2250      	movs	r2, #80	@ 0x50
 8019e14:	5a9b      	ldrh	r3, [r3, r2]
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	001a      	movs	r2, r3
 8019e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019e1c:	189b      	adds	r3, r3, r2
 8019e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8019e20:	68bb      	ldr	r3, [r7, #8]
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	00da      	lsls	r2, r3, #3
 8019e26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019e28:	18d3      	adds	r3, r2, r3
 8019e2a:	4aaf      	ldr	r2, [pc, #700]	@ (801a0e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019e2c:	4694      	mov	ip, r2
 8019e2e:	4463      	add	r3, ip
 8019e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019e32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e34:	881b      	ldrh	r3, [r3, #0]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	059b      	lsls	r3, r3, #22
 8019e3a:	0d9b      	lsrs	r3, r3, #22
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e40:	801a      	strh	r2, [r3, #0]
 8019e42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e44:	881b      	ldrh	r3, [r3, #0]
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	4aa9      	ldr	r2, [pc, #676]	@ (801a0f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e50:	801a      	strh	r2, [r3, #0]
 8019e52:	e01b      	b.n	8019e8c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	785b      	ldrb	r3, [r3, #1]
 8019e58:	2b01      	cmp	r3, #1
 8019e5a:	d117      	bne.n	8019e8c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	2250      	movs	r2, #80	@ 0x50
 8019e68:	5a9b      	ldrh	r3, [r3, r2]
 8019e6a:	b29b      	uxth	r3, r3
 8019e6c:	001a      	movs	r2, r3
 8019e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019e70:	189b      	adds	r3, r3, r2
 8019e72:	667b      	str	r3, [r7, #100]	@ 0x64
 8019e74:	68bb      	ldr	r3, [r7, #8]
 8019e76:	781b      	ldrb	r3, [r3, #0]
 8019e78:	00da      	lsls	r2, r3, #3
 8019e7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019e7c:	18d3      	adds	r3, r2, r3
 8019e7e:	4a9a      	ldr	r2, [pc, #616]	@ (801a0e8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8019e80:	4694      	mov	ip, r2
 8019e82:	4463      	add	r3, ip
 8019e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8019e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019e88:	2200      	movs	r2, #0
 8019e8a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	677b      	str	r3, [r7, #116]	@ 0x74
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	785b      	ldrb	r3, [r3, #1]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d12b      	bne.n	8019ef2 <HAL_PCD_EP_DB_Transmit+0x52e>
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	2250      	movs	r2, #80	@ 0x50
 8019ea6:	5a9b      	ldrh	r3, [r3, r2]
 8019ea8:	b29b      	uxth	r3, r3
 8019eaa:	001a      	movs	r2, r3
 8019eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019eae:	189b      	adds	r3, r3, r2
 8019eb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019eb2:	68bb      	ldr	r3, [r7, #8]
 8019eb4:	781b      	ldrb	r3, [r3, #0]
 8019eb6:	00da      	lsls	r2, r3, #3
 8019eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019eba:	18d3      	adds	r3, r2, r3
 8019ebc:	4a8b      	ldr	r2, [pc, #556]	@ (801a0ec <HAL_PCD_EP_DB_Transmit+0x728>)
 8019ebe:	4694      	mov	ip, r2
 8019ec0:	4463      	add	r3, ip
 8019ec2:	2180      	movs	r1, #128	@ 0x80
 8019ec4:	187a      	adds	r2, r7, r1
 8019ec6:	6013      	str	r3, [r2, #0]
 8019ec8:	187b      	adds	r3, r7, r1
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	881b      	ldrh	r3, [r3, #0]
 8019ece:	b29b      	uxth	r3, r3
 8019ed0:	059b      	lsls	r3, r3, #22
 8019ed2:	0d9b      	lsrs	r3, r3, #22
 8019ed4:	b29a      	uxth	r2, r3
 8019ed6:	187b      	adds	r3, r7, r1
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	801a      	strh	r2, [r3, #0]
 8019edc:	187b      	adds	r3, r7, r1
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	881b      	ldrh	r3, [r3, #0]
 8019ee2:	b29b      	uxth	r3, r3
 8019ee4:	4a82      	ldr	r2, [pc, #520]	@ (801a0f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8019ee6:	4313      	orrs	r3, r2
 8019ee8:	b29a      	uxth	r2, r3
 8019eea:	187b      	adds	r3, r7, r1
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	801a      	strh	r2, [r3, #0]
 8019ef0:	e018      	b.n	8019f24 <HAL_PCD_EP_DB_Transmit+0x560>
 8019ef2:	68bb      	ldr	r3, [r7, #8]
 8019ef4:	785b      	ldrb	r3, [r3, #1]
 8019ef6:	2b01      	cmp	r3, #1
 8019ef8:	d114      	bne.n	8019f24 <HAL_PCD_EP_DB_Transmit+0x560>
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	2250      	movs	r2, #80	@ 0x50
 8019f00:	5a9b      	ldrh	r3, [r3, r2]
 8019f02:	b29b      	uxth	r3, r3
 8019f04:	001a      	movs	r2, r3
 8019f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019f08:	189b      	adds	r3, r3, r2
 8019f0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8019f0c:	68bb      	ldr	r3, [r7, #8]
 8019f0e:	781b      	ldrb	r3, [r3, #0]
 8019f10:	00da      	lsls	r2, r3, #3
 8019f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019f14:	18d3      	adds	r3, r2, r3
 8019f16:	4a75      	ldr	r2, [pc, #468]	@ (801a0ec <HAL_PCD_EP_DB_Transmit+0x728>)
 8019f18:	4694      	mov	ip, r2
 8019f1a:	4463      	add	r3, ip
 8019f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8019f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019f20:	2200      	movs	r2, #0
 8019f22:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	781a      	ldrb	r2, [r3, #0]
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	0011      	movs	r1, r2
 8019f2c:	0018      	movs	r0, r3
 8019f2e:	f008 fb45 	bl	80225bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019f32:	1dbb      	adds	r3, r7, #6
 8019f34:	881a      	ldrh	r2, [r3, #0]
 8019f36:	2380      	movs	r3, #128	@ 0x80
 8019f38:	01db      	lsls	r3, r3, #7
 8019f3a:	4013      	ands	r3, r2
 8019f3c:	d000      	beq.n	8019f40 <HAL_PCD_EP_DB_Transmit+0x57c>
 8019f3e:	e11e      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019f40:	68fb      	ldr	r3, [r7, #12]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	001a      	movs	r2, r3
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	781b      	ldrb	r3, [r3, #0]
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	18d3      	adds	r3, r2, r3
 8019f4e:	881b      	ldrh	r3, [r3, #0]
 8019f50:	b29a      	uxth	r2, r3
 8019f52:	2088      	movs	r0, #136	@ 0x88
 8019f54:	183b      	adds	r3, r7, r0
 8019f56:	4967      	ldr	r1, [pc, #412]	@ (801a0f4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019f58:	400a      	ands	r2, r1
 8019f5a:	801a      	strh	r2, [r3, #0]
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	001a      	movs	r2, r3
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	009b      	lsls	r3, r3, #2
 8019f68:	18d3      	adds	r3, r2, r3
 8019f6a:	183a      	adds	r2, r7, r0
 8019f6c:	8812      	ldrh	r2, [r2, #0]
 8019f6e:	4962      	ldr	r1, [pc, #392]	@ (801a0f8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019f70:	430a      	orrs	r2, r1
 8019f72:	b292      	uxth	r2, r2
 8019f74:	801a      	strh	r2, [r3, #0]
 8019f76:	e102      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8019f78:	1dbb      	adds	r3, r7, #6
 8019f7a:	881a      	ldrh	r2, [r3, #0]
 8019f7c:	2380      	movs	r3, #128	@ 0x80
 8019f7e:	01db      	lsls	r3, r3, #7
 8019f80:	4013      	ands	r3, r2
 8019f82:	d11a      	bne.n	8019fba <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	001a      	movs	r2, r3
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	781b      	ldrb	r3, [r3, #0]
 8019f8e:	009b      	lsls	r3, r3, #2
 8019f90:	18d3      	adds	r3, r2, r3
 8019f92:	881b      	ldrh	r3, [r3, #0]
 8019f94:	b29a      	uxth	r2, r3
 8019f96:	204e      	movs	r0, #78	@ 0x4e
 8019f98:	183b      	adds	r3, r7, r0
 8019f9a:	4956      	ldr	r1, [pc, #344]	@ (801a0f4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8019f9c:	400a      	ands	r2, r1
 8019f9e:	801a      	strh	r2, [r3, #0]
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	001a      	movs	r2, r3
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	781b      	ldrb	r3, [r3, #0]
 8019faa:	009b      	lsls	r3, r3, #2
 8019fac:	18d3      	adds	r3, r2, r3
 8019fae:	183a      	adds	r2, r7, r0
 8019fb0:	8812      	ldrh	r2, [r2, #0]
 8019fb2:	4951      	ldr	r1, [pc, #324]	@ (801a0f8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8019fb4:	430a      	orrs	r2, r1
 8019fb6:	b292      	uxth	r2, r2
 8019fb8:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	2224      	movs	r2, #36	@ 0x24
 8019fbe:	5c9b      	ldrb	r3, [r3, r2]
 8019fc0:	2b01      	cmp	r3, #1
 8019fc2:	d000      	beq.n	8019fc6 <HAL_PCD_EP_DB_Transmit+0x602>
 8019fc4:	e0db      	b.n	801a17e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8019fc6:	68bb      	ldr	r3, [r7, #8]
 8019fc8:	695a      	ldr	r2, [r3, #20]
 8019fca:	2186      	movs	r1, #134	@ 0x86
 8019fcc:	187b      	adds	r3, r7, r1
 8019fce:	881b      	ldrh	r3, [r3, #0]
 8019fd0:	18d2      	adds	r2, r2, r3
 8019fd2:	68bb      	ldr	r3, [r7, #8]
 8019fd4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8019fd6:	68bb      	ldr	r3, [r7, #8]
 8019fd8:	69da      	ldr	r2, [r3, #28]
 8019fda:	187b      	adds	r3, r7, r1
 8019fdc:	881b      	ldrh	r3, [r3, #0]
 8019fde:	18d2      	adds	r2, r2, r3
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	6a1a      	ldr	r2, [r3, #32]
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	691b      	ldr	r3, [r3, #16]
 8019fec:	429a      	cmp	r2, r3
 8019fee:	d30c      	bcc.n	801a00a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	691b      	ldr	r3, [r3, #16]
 8019ff4:	218c      	movs	r1, #140	@ 0x8c
 8019ff6:	187a      	adds	r2, r7, r1
 8019ff8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8019ffa:	68bb      	ldr	r3, [r7, #8]
 8019ffc:	6a1a      	ldr	r2, [r3, #32]
 8019ffe:	187b      	adds	r3, r7, r1
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	1ad2      	subs	r2, r2, r3
 801a004:	68bb      	ldr	r3, [r7, #8]
 801a006:	621a      	str	r2, [r3, #32]
 801a008:	e01a      	b.n	801a040 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801a00a:	68bb      	ldr	r3, [r7, #8]
 801a00c:	6a1b      	ldr	r3, [r3, #32]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d10a      	bne.n	801a028 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801a012:	2386      	movs	r3, #134	@ 0x86
 801a014:	18fb      	adds	r3, r7, r3
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	228c      	movs	r2, #140	@ 0x8c
 801a01a:	18ba      	adds	r2, r7, r2
 801a01c:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801a01e:	68bb      	ldr	r3, [r7, #8]
 801a020:	2224      	movs	r2, #36	@ 0x24
 801a022:	2100      	movs	r1, #0
 801a024:	5499      	strb	r1, [r3, r2]
 801a026:	e00b      	b.n	801a040 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	6a1b      	ldr	r3, [r3, #32]
 801a02c:	228c      	movs	r2, #140	@ 0x8c
 801a02e:	18ba      	adds	r2, r7, r2
 801a030:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	2200      	movs	r2, #0
 801a036:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801a038:	68bb      	ldr	r3, [r7, #8]
 801a03a:	2224      	movs	r2, #36	@ 0x24
 801a03c:	2100      	movs	r1, #0
 801a03e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	657b      	str	r3, [r7, #84]	@ 0x54
 801a046:	68bb      	ldr	r3, [r7, #8]
 801a048:	785b      	ldrb	r3, [r3, #1]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d000      	beq.n	801a050 <HAL_PCD_EP_DB_Transmit+0x68c>
 801a04e:	e06e      	b.n	801a12e <HAL_PCD_EP_DB_Transmit+0x76a>
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	2250      	movs	r2, #80	@ 0x50
 801a05c:	5a9b      	ldrh	r3, [r3, r2]
 801a05e:	b29b      	uxth	r3, r3
 801a060:	001a      	movs	r2, r3
 801a062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a064:	189b      	adds	r3, r3, r2
 801a066:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	781b      	ldrb	r3, [r3, #0]
 801a06c:	00da      	lsls	r2, r3, #3
 801a06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a070:	18d3      	adds	r3, r2, r3
 801a072:	4a1e      	ldr	r2, [pc, #120]	@ (801a0ec <HAL_PCD_EP_DB_Transmit+0x728>)
 801a074:	4694      	mov	ip, r2
 801a076:	4463      	add	r3, ip
 801a078:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a07a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a07c:	881b      	ldrh	r3, [r3, #0]
 801a07e:	b29b      	uxth	r3, r3
 801a080:	059b      	lsls	r3, r3, #22
 801a082:	0d9b      	lsrs	r3, r3, #22
 801a084:	b29a      	uxth	r2, r3
 801a086:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a088:	801a      	strh	r2, [r3, #0]
 801a08a:	228c      	movs	r2, #140	@ 0x8c
 801a08c:	18bb      	adds	r3, r7, r2
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	2b3e      	cmp	r3, #62	@ 0x3e
 801a092:	d91a      	bls.n	801a0ca <HAL_PCD_EP_DB_Transmit+0x706>
 801a094:	18bb      	adds	r3, r7, r2
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	095b      	lsrs	r3, r3, #5
 801a09a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a09c:	18bb      	adds	r3, r7, r2
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	221f      	movs	r2, #31
 801a0a2:	4013      	ands	r3, r2
 801a0a4:	d102      	bne.n	801a0ac <HAL_PCD_EP_DB_Transmit+0x6e8>
 801a0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a0a8:	3b01      	subs	r3, #1
 801a0aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a0ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0ae:	881b      	ldrh	r3, [r3, #0]
 801a0b0:	b29a      	uxth	r2, r3
 801a0b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a0b4:	b29b      	uxth	r3, r3
 801a0b6:	029b      	lsls	r3, r3, #10
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	4313      	orrs	r3, r2
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	4a0c      	ldr	r2, [pc, #48]	@ (801a0f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a0c0:	4313      	orrs	r3, r2
 801a0c2:	b29a      	uxth	r2, r3
 801a0c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0c6:	801a      	strh	r2, [r3, #0]
 801a0c8:	e04d      	b.n	801a166 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a0ca:	238c      	movs	r3, #140	@ 0x8c
 801a0cc:	18fb      	adds	r3, r7, r3
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d113      	bne.n	801a0fc <HAL_PCD_EP_DB_Transmit+0x738>
 801a0d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0d6:	881b      	ldrh	r3, [r3, #0]
 801a0d8:	b29b      	uxth	r3, r3
 801a0da:	4a05      	ldr	r2, [pc, #20]	@ (801a0f0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801a0dc:	4313      	orrs	r3, r2
 801a0de:	b29a      	uxth	r2, r3
 801a0e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a0e2:	801a      	strh	r2, [r3, #0]
 801a0e4:	e03f      	b.n	801a166 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a0e6:	46c0      	nop			@ (mov r8, r8)
 801a0e8:	00000402 	.word	0x00000402
 801a0ec:	00000406 	.word	0x00000406
 801a0f0:	ffff8000 	.word	0xffff8000
 801a0f4:	ffff8f8f 	.word	0xffff8f8f
 801a0f8:	ffffc080 	.word	0xffffc080
 801a0fc:	228c      	movs	r2, #140	@ 0x8c
 801a0fe:	18bb      	adds	r3, r7, r2
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	085b      	lsrs	r3, r3, #1
 801a104:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a106:	18bb      	adds	r3, r7, r2
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	2201      	movs	r2, #1
 801a10c:	4013      	ands	r3, r2
 801a10e:	d002      	beq.n	801a116 <HAL_PCD_EP_DB_Transmit+0x752>
 801a110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a112:	3301      	adds	r3, #1
 801a114:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a118:	881b      	ldrh	r3, [r3, #0]
 801a11a:	b29a      	uxth	r2, r3
 801a11c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a11e:	b29b      	uxth	r3, r3
 801a120:	029b      	lsls	r3, r3, #10
 801a122:	b29b      	uxth	r3, r3
 801a124:	4313      	orrs	r3, r2
 801a126:	b29a      	uxth	r2, r3
 801a128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a12a:	801a      	strh	r2, [r3, #0]
 801a12c:	e01b      	b.n	801a166 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	785b      	ldrb	r3, [r3, #1]
 801a132:	2b01      	cmp	r3, #1
 801a134:	d117      	bne.n	801a166 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801a136:	68fb      	ldr	r3, [r7, #12]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	2250      	movs	r2, #80	@ 0x50
 801a13c:	5a9b      	ldrh	r3, [r3, r2]
 801a13e:	b29b      	uxth	r3, r3
 801a140:	001a      	movs	r2, r3
 801a142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a144:	189b      	adds	r3, r3, r2
 801a146:	657b      	str	r3, [r7, #84]	@ 0x54
 801a148:	68bb      	ldr	r3, [r7, #8]
 801a14a:	781b      	ldrb	r3, [r3, #0]
 801a14c:	00da      	lsls	r2, r3, #3
 801a14e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a150:	18d3      	adds	r3, r2, r3
 801a152:	4a21      	ldr	r2, [pc, #132]	@ (801a1d8 <HAL_PCD_EP_DB_Transmit+0x814>)
 801a154:	4694      	mov	ip, r2
 801a156:	4463      	add	r3, ip
 801a158:	653b      	str	r3, [r7, #80]	@ 0x50
 801a15a:	238c      	movs	r3, #140	@ 0x8c
 801a15c:	18fb      	adds	r3, r7, r3
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	b29a      	uxth	r2, r3
 801a162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a164:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	6818      	ldr	r0, [r3, #0]
 801a16a:	68bb      	ldr	r3, [r7, #8]
 801a16c:	6959      	ldr	r1, [r3, #20]
 801a16e:	68bb      	ldr	r3, [r7, #8]
 801a170:	895a      	ldrh	r2, [r3, #10]
 801a172:	238c      	movs	r3, #140	@ 0x8c
 801a174:	18fb      	adds	r3, r7, r3
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	b29b      	uxth	r3, r3
 801a17a:	f006 f999 	bl	80204b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	001a      	movs	r2, r3
 801a184:	68bb      	ldr	r3, [r7, #8]
 801a186:	781b      	ldrb	r3, [r3, #0]
 801a188:	009b      	lsls	r3, r3, #2
 801a18a:	18d3      	adds	r3, r2, r3
 801a18c:	881b      	ldrh	r3, [r3, #0]
 801a18e:	b29a      	uxth	r2, r3
 801a190:	2014      	movs	r0, #20
 801a192:	183b      	adds	r3, r7, r0
 801a194:	4911      	ldr	r1, [pc, #68]	@ (801a1dc <HAL_PCD_EP_DB_Transmit+0x818>)
 801a196:	400a      	ands	r2, r1
 801a198:	801a      	strh	r2, [r3, #0]
 801a19a:	183b      	adds	r3, r7, r0
 801a19c:	183a      	adds	r2, r7, r0
 801a19e:	8812      	ldrh	r2, [r2, #0]
 801a1a0:	2110      	movs	r1, #16
 801a1a2:	404a      	eors	r2, r1
 801a1a4:	801a      	strh	r2, [r3, #0]
 801a1a6:	183b      	adds	r3, r7, r0
 801a1a8:	183a      	adds	r2, r7, r0
 801a1aa:	8812      	ldrh	r2, [r2, #0]
 801a1ac:	2120      	movs	r1, #32
 801a1ae:	404a      	eors	r2, r1
 801a1b0:	801a      	strh	r2, [r3, #0]
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	001a      	movs	r2, r3
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	781b      	ldrb	r3, [r3, #0]
 801a1bc:	009b      	lsls	r3, r3, #2
 801a1be:	18d3      	adds	r3, r2, r3
 801a1c0:	183a      	adds	r2, r7, r0
 801a1c2:	8812      	ldrh	r2, [r2, #0]
 801a1c4:	4906      	ldr	r1, [pc, #24]	@ (801a1e0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801a1c6:	430a      	orrs	r2, r1
 801a1c8:	b292      	uxth	r2, r2
 801a1ca:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801a1cc:	2300      	movs	r3, #0
}
 801a1ce:	0018      	movs	r0, r3
 801a1d0:	46bd      	mov	sp, r7
 801a1d2:	b024      	add	sp, #144	@ 0x90
 801a1d4:	bd80      	pop	{r7, pc}
 801a1d6:	46c0      	nop			@ (mov r8, r8)
 801a1d8:	00000406 	.word	0x00000406
 801a1dc:	ffff8fbf 	.word	0xffff8fbf
 801a1e0:	ffff8080 	.word	0xffff8080

0801a1e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801a1e4:	b590      	push	{r4, r7, lr}
 801a1e6:	b087      	sub	sp, #28
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	60f8      	str	r0, [r7, #12]
 801a1ec:	0008      	movs	r0, r1
 801a1ee:	0011      	movs	r1, r2
 801a1f0:	607b      	str	r3, [r7, #4]
 801a1f2:	240a      	movs	r4, #10
 801a1f4:	193b      	adds	r3, r7, r4
 801a1f6:	1c02      	adds	r2, r0, #0
 801a1f8:	801a      	strh	r2, [r3, #0]
 801a1fa:	2308      	movs	r3, #8
 801a1fc:	18fb      	adds	r3, r7, r3
 801a1fe:	1c0a      	adds	r2, r1, #0
 801a200:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801a202:	0021      	movs	r1, r4
 801a204:	187b      	adds	r3, r7, r1
 801a206:	881b      	ldrh	r3, [r3, #0]
 801a208:	2280      	movs	r2, #128	@ 0x80
 801a20a:	4013      	ands	r3, r2
 801a20c:	b29b      	uxth	r3, r3
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d00c      	beq.n	801a22c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801a212:	187b      	adds	r3, r7, r1
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	2207      	movs	r2, #7
 801a218:	4013      	ands	r3, r2
 801a21a:	1c5a      	adds	r2, r3, #1
 801a21c:	0013      	movs	r3, r2
 801a21e:	009b      	lsls	r3, r3, #2
 801a220:	189b      	adds	r3, r3, r2
 801a222:	00db      	lsls	r3, r3, #3
 801a224:	68fa      	ldr	r2, [r7, #12]
 801a226:	18d3      	adds	r3, r2, r3
 801a228:	617b      	str	r3, [r7, #20]
 801a22a:	e00b      	b.n	801a244 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801a22c:	230a      	movs	r3, #10
 801a22e:	18fb      	adds	r3, r7, r3
 801a230:	881a      	ldrh	r2, [r3, #0]
 801a232:	0013      	movs	r3, r2
 801a234:	009b      	lsls	r3, r3, #2
 801a236:	189b      	adds	r3, r3, r2
 801a238:	00db      	lsls	r3, r3, #3
 801a23a:	3369      	adds	r3, #105	@ 0x69
 801a23c:	33ff      	adds	r3, #255	@ 0xff
 801a23e:	68fa      	ldr	r2, [r7, #12]
 801a240:	18d3      	adds	r3, r2, r3
 801a242:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801a244:	2308      	movs	r3, #8
 801a246:	18fb      	adds	r3, r7, r3
 801a248:	881b      	ldrh	r3, [r3, #0]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d107      	bne.n	801a25e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801a24e:	697b      	ldr	r3, [r7, #20]
 801a250:	2200      	movs	r2, #0
 801a252:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	b29a      	uxth	r2, r3
 801a258:	697b      	ldr	r3, [r7, #20]
 801a25a:	80da      	strh	r2, [r3, #6]
 801a25c:	e00b      	b.n	801a276 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801a25e:	697b      	ldr	r3, [r7, #20]
 801a260:	2201      	movs	r2, #1
 801a262:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	b29a      	uxth	r2, r3
 801a268:	697b      	ldr	r3, [r7, #20]
 801a26a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	0c1b      	lsrs	r3, r3, #16
 801a270:	b29a      	uxth	r2, r3
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801a276:	2300      	movs	r3, #0
}
 801a278:	0018      	movs	r0, r3
 801a27a:	46bd      	mov	sp, r7
 801a27c:	b007      	add	sp, #28
 801a27e:	bd90      	pop	{r4, r7, pc}

0801a280 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b084      	sub	sp, #16
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	681b      	ldr	r3, [r3, #0]
 801a28c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801a28e:	687a      	ldr	r2, [r7, #4]
 801a290:	23ba      	movs	r3, #186	@ 0xba
 801a292:	009b      	lsls	r3, r3, #2
 801a294:	2101      	movs	r1, #1
 801a296:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801a298:	687a      	ldr	r2, [r7, #4]
 801a29a:	23b8      	movs	r3, #184	@ 0xb8
 801a29c:	009b      	lsls	r3, r3, #2
 801a29e:	2100      	movs	r1, #0
 801a2a0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	2254      	movs	r2, #84	@ 0x54
 801a2a6:	5a9b      	ldrh	r3, [r3, r2]
 801a2a8:	b29b      	uxth	r3, r3
 801a2aa:	2201      	movs	r2, #1
 801a2ac:	4313      	orrs	r3, r2
 801a2ae:	b299      	uxth	r1, r3
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	2254      	movs	r2, #84	@ 0x54
 801a2b4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	2254      	movs	r2, #84	@ 0x54
 801a2ba:	5a9b      	ldrh	r3, [r3, r2]
 801a2bc:	b29b      	uxth	r3, r3
 801a2be:	2202      	movs	r2, #2
 801a2c0:	4313      	orrs	r3, r2
 801a2c2:	b299      	uxth	r1, r3
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	2254      	movs	r2, #84	@ 0x54
 801a2c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a2ca:	2300      	movs	r3, #0
}
 801a2cc:	0018      	movs	r0, r3
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	b004      	add	sp, #16
 801a2d2:	bd80      	pop	{r7, pc}

0801a2d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b082      	sub	sp, #8
 801a2d8:	af00      	add	r7, sp, #0
 801a2da:	6078      	str	r0, [r7, #4]
 801a2dc:	000a      	movs	r2, r1
 801a2de:	1cfb      	adds	r3, r7, #3
 801a2e0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801a2e2:	46c0      	nop			@ (mov r8, r8)
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	b002      	add	sp, #8
 801a2e8:	bd80      	pop	{r7, pc}
	...

0801a2ec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801a2f0:	4b04      	ldr	r3, [pc, #16]	@ (801a304 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a2f2:	681a      	ldr	r2, [r3, #0]
 801a2f4:	4b03      	ldr	r3, [pc, #12]	@ (801a304 <HAL_PWR_EnableBkUpAccess+0x18>)
 801a2f6:	2180      	movs	r1, #128	@ 0x80
 801a2f8:	0049      	lsls	r1, r1, #1
 801a2fa:	430a      	orrs	r2, r1
 801a2fc:	601a      	str	r2, [r3, #0]
}
 801a2fe:	46c0      	nop			@ (mov r8, r8)
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	40007000 	.word	0x40007000

0801a308 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801a30c:	4b04      	ldr	r3, [pc, #16]	@ (801a320 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a30e:	681a      	ldr	r2, [r3, #0]
 801a310:	4b03      	ldr	r3, [pc, #12]	@ (801a320 <HAL_PWR_DisableBkUpAccess+0x18>)
 801a312:	4904      	ldr	r1, [pc, #16]	@ (801a324 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801a314:	400a      	ands	r2, r1
 801a316:	601a      	str	r2, [r3, #0]
}
 801a318:	46c0      	nop			@ (mov r8, r8)
 801a31a:	46bd      	mov	sp, r7
 801a31c:	bd80      	pop	{r7, pc}
 801a31e:	46c0      	nop			@ (mov r8, r8)
 801a320:	40007000 	.word	0x40007000
 801a324:	fffffeff 	.word	0xfffffeff

0801a328 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b086      	sub	sp, #24
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
 801a330:	000a      	movs	r2, r1
 801a332:	1cfb      	adds	r3, r7, #3
 801a334:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801a336:	2300      	movs	r3, #0
 801a338:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801a33a:	4b25      	ldr	r3, [pc, #148]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a33c:	681a      	ldr	r2, [r3, #0]
 801a33e:	2380      	movs	r3, #128	@ 0x80
 801a340:	009b      	lsls	r3, r3, #2
 801a342:	4013      	ands	r3, r2
 801a344:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801a346:	4b23      	ldr	r3, [pc, #140]	@ (801a3d4 <HAL_PWR_EnterSTOPMode+0xac>)
 801a348:	6a1b      	ldr	r3, [r3, #32]
 801a34a:	2201      	movs	r2, #1
 801a34c:	4013      	ands	r3, r2
 801a34e:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d008      	beq.n	801a368 <HAL_PWR_EnterSTOPMode+0x40>
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	2b00      	cmp	r3, #0
 801a35a:	d005      	beq.n	801a368 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801a35c:	4b1c      	ldr	r3, [pc, #112]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a35e:	681a      	ldr	r2, [r3, #0]
 801a360:	4b1b      	ldr	r3, [pc, #108]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a362:	491d      	ldr	r1, [pc, #116]	@ (801a3d8 <HAL_PWR_EnterSTOPMode+0xb0>)
 801a364:	400a      	ands	r2, r1
 801a366:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801a368:	4b19      	ldr	r3, [pc, #100]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	2203      	movs	r2, #3
 801a372:	4393      	bics	r3, r2
 801a374:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801a376:	697a      	ldr	r2, [r7, #20]
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	4313      	orrs	r3, r2
 801a37c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801a37e:	4b14      	ldr	r3, [pc, #80]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a380:	697a      	ldr	r2, [r7, #20]
 801a382:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a384:	4b15      	ldr	r3, [pc, #84]	@ (801a3dc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a386:	691a      	ldr	r2, [r3, #16]
 801a388:	4b14      	ldr	r3, [pc, #80]	@ (801a3dc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a38a:	2104      	movs	r1, #4
 801a38c:	430a      	orrs	r2, r1
 801a38e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801a390:	1cfb      	adds	r3, r7, #3
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	2b01      	cmp	r3, #1
 801a396:	d101      	bne.n	801a39c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801a398:	bf30      	wfi
 801a39a:	e002      	b.n	801a3a2 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801a39c:	bf40      	sev
    __WFE();
 801a39e:	bf20      	wfe
    __WFE();
 801a3a0:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a3a2:	4b0e      	ldr	r3, [pc, #56]	@ (801a3dc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a3a4:	691a      	ldr	r2, [r3, #16]
 801a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (801a3dc <HAL_PWR_EnterSTOPMode+0xb4>)
 801a3a8:	2104      	movs	r1, #4
 801a3aa:	438a      	bics	r2, r1
 801a3ac:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801a3ae:	693b      	ldr	r3, [r7, #16]
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d009      	beq.n	801a3c8 <HAL_PWR_EnterSTOPMode+0xa0>
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d006      	beq.n	801a3c8 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801a3ba:	4b05      	ldr	r3, [pc, #20]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3bc:	681a      	ldr	r2, [r3, #0]
 801a3be:	4b04      	ldr	r3, [pc, #16]	@ (801a3d0 <HAL_PWR_EnterSTOPMode+0xa8>)
 801a3c0:	2180      	movs	r1, #128	@ 0x80
 801a3c2:	0089      	lsls	r1, r1, #2
 801a3c4:	430a      	orrs	r2, r1
 801a3c6:	601a      	str	r2, [r3, #0]
  }
}
 801a3c8:	46c0      	nop			@ (mov r8, r8)
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	b006      	add	sp, #24
 801a3ce:	bd80      	pop	{r7, pc}
 801a3d0:	40007000 	.word	0x40007000
 801a3d4:	40010000 	.word	0x40010000
 801a3d8:	fffffdff 	.word	0xfffffdff
 801a3dc:	e000ed00 	.word	0xe000ed00

0801a3e0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801a3e4:	4b07      	ldr	r3, [pc, #28]	@ (801a404 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a3e6:	681a      	ldr	r2, [r3, #0]
 801a3e8:	4b06      	ldr	r3, [pc, #24]	@ (801a404 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801a3ea:	2102      	movs	r1, #2
 801a3ec:	430a      	orrs	r2, r1
 801a3ee:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801a3f0:	4b05      	ldr	r3, [pc, #20]	@ (801a408 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a3f2:	691a      	ldr	r2, [r3, #16]
 801a3f4:	4b04      	ldr	r3, [pc, #16]	@ (801a408 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801a3f6:	2104      	movs	r1, #4
 801a3f8:	430a      	orrs	r2, r1
 801a3fa:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801a3fc:	bf30      	wfi
}
 801a3fe:	46c0      	nop			@ (mov r8, r8)
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	40007000 	.word	0x40007000
 801a408:	e000ed00 	.word	0xe000ed00

0801a40c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a40c:	b5b0      	push	{r4, r5, r7, lr}
 801a40e:	b08a      	sub	sp, #40	@ 0x28
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d102      	bne.n	801a420 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a41a:	2301      	movs	r3, #1
 801a41c:	f000 fbbf 	bl	801ab9e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a420:	4bc9      	ldr	r3, [pc, #804]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a422:	68db      	ldr	r3, [r3, #12]
 801a424:	220c      	movs	r2, #12
 801a426:	4013      	ands	r3, r2
 801a428:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801a42a:	4bc7      	ldr	r3, [pc, #796]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a42c:	68da      	ldr	r2, [r3, #12]
 801a42e:	2380      	movs	r3, #128	@ 0x80
 801a430:	025b      	lsls	r3, r3, #9
 801a432:	4013      	ands	r3, r2
 801a434:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2201      	movs	r2, #1
 801a43c:	4013      	ands	r3, r2
 801a43e:	d100      	bne.n	801a442 <HAL_RCC_OscConfig+0x36>
 801a440:	e07e      	b.n	801a540 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a442:	69fb      	ldr	r3, [r7, #28]
 801a444:	2b08      	cmp	r3, #8
 801a446:	d007      	beq.n	801a458 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801a448:	69fb      	ldr	r3, [r7, #28]
 801a44a:	2b0c      	cmp	r3, #12
 801a44c:	d112      	bne.n	801a474 <HAL_RCC_OscConfig+0x68>
 801a44e:	69ba      	ldr	r2, [r7, #24]
 801a450:	2380      	movs	r3, #128	@ 0x80
 801a452:	025b      	lsls	r3, r3, #9
 801a454:	429a      	cmp	r2, r3
 801a456:	d10d      	bne.n	801a474 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a458:	4bbb      	ldr	r3, [pc, #748]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a45a:	681a      	ldr	r2, [r3, #0]
 801a45c:	2380      	movs	r3, #128	@ 0x80
 801a45e:	029b      	lsls	r3, r3, #10
 801a460:	4013      	ands	r3, r2
 801a462:	d100      	bne.n	801a466 <HAL_RCC_OscConfig+0x5a>
 801a464:	e06b      	b.n	801a53e <HAL_RCC_OscConfig+0x132>
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	685b      	ldr	r3, [r3, #4]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d167      	bne.n	801a53e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801a46e:	2301      	movs	r3, #1
 801a470:	f000 fb95 	bl	801ab9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	685a      	ldr	r2, [r3, #4]
 801a478:	2380      	movs	r3, #128	@ 0x80
 801a47a:	025b      	lsls	r3, r3, #9
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d107      	bne.n	801a490 <HAL_RCC_OscConfig+0x84>
 801a480:	4bb1      	ldr	r3, [pc, #708]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a482:	681a      	ldr	r2, [r3, #0]
 801a484:	4bb0      	ldr	r3, [pc, #704]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a486:	2180      	movs	r1, #128	@ 0x80
 801a488:	0249      	lsls	r1, r1, #9
 801a48a:	430a      	orrs	r2, r1
 801a48c:	601a      	str	r2, [r3, #0]
 801a48e:	e027      	b.n	801a4e0 <HAL_RCC_OscConfig+0xd4>
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	685a      	ldr	r2, [r3, #4]
 801a494:	23a0      	movs	r3, #160	@ 0xa0
 801a496:	02db      	lsls	r3, r3, #11
 801a498:	429a      	cmp	r2, r3
 801a49a:	d10e      	bne.n	801a4ba <HAL_RCC_OscConfig+0xae>
 801a49c:	4baa      	ldr	r3, [pc, #680]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a49e:	681a      	ldr	r2, [r3, #0]
 801a4a0:	4ba9      	ldr	r3, [pc, #676]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4a2:	2180      	movs	r1, #128	@ 0x80
 801a4a4:	02c9      	lsls	r1, r1, #11
 801a4a6:	430a      	orrs	r2, r1
 801a4a8:	601a      	str	r2, [r3, #0]
 801a4aa:	4ba7      	ldr	r3, [pc, #668]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4ac:	681a      	ldr	r2, [r3, #0]
 801a4ae:	4ba6      	ldr	r3, [pc, #664]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4b0:	2180      	movs	r1, #128	@ 0x80
 801a4b2:	0249      	lsls	r1, r1, #9
 801a4b4:	430a      	orrs	r2, r1
 801a4b6:	601a      	str	r2, [r3, #0]
 801a4b8:	e012      	b.n	801a4e0 <HAL_RCC_OscConfig+0xd4>
 801a4ba:	4ba3      	ldr	r3, [pc, #652]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4bc:	681a      	ldr	r2, [r3, #0]
 801a4be:	4ba2      	ldr	r3, [pc, #648]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4c0:	49a2      	ldr	r1, [pc, #648]	@ (801a74c <HAL_RCC_OscConfig+0x340>)
 801a4c2:	400a      	ands	r2, r1
 801a4c4:	601a      	str	r2, [r3, #0]
 801a4c6:	4ba0      	ldr	r3, [pc, #640]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4c8:	681a      	ldr	r2, [r3, #0]
 801a4ca:	2380      	movs	r3, #128	@ 0x80
 801a4cc:	025b      	lsls	r3, r3, #9
 801a4ce:	4013      	ands	r3, r2
 801a4d0:	60fb      	str	r3, [r7, #12]
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	4b9c      	ldr	r3, [pc, #624]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4d6:	681a      	ldr	r2, [r3, #0]
 801a4d8:	4b9b      	ldr	r3, [pc, #620]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a4da:	499d      	ldr	r1, [pc, #628]	@ (801a750 <HAL_RCC_OscConfig+0x344>)
 801a4dc:	400a      	ands	r2, r1
 801a4de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d015      	beq.n	801a514 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a4e8:	f7f9 fb54 	bl	8013b94 <HAL_GetTick>
 801a4ec:	0003      	movs	r3, r0
 801a4ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a4f0:	e009      	b.n	801a506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a4f2:	f7f9 fb4f 	bl	8013b94 <HAL_GetTick>
 801a4f6:	0002      	movs	r2, r0
 801a4f8:	697b      	ldr	r3, [r7, #20]
 801a4fa:	1ad3      	subs	r3, r2, r3
 801a4fc:	2b64      	cmp	r3, #100	@ 0x64
 801a4fe:	d902      	bls.n	801a506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a500:	2303      	movs	r3, #3
 801a502:	f000 fb4c 	bl	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a506:	4b90      	ldr	r3, [pc, #576]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a508:	681a      	ldr	r2, [r3, #0]
 801a50a:	2380      	movs	r3, #128	@ 0x80
 801a50c:	029b      	lsls	r3, r3, #10
 801a50e:	4013      	ands	r3, r2
 801a510:	d0ef      	beq.n	801a4f2 <HAL_RCC_OscConfig+0xe6>
 801a512:	e015      	b.n	801a540 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a514:	f7f9 fb3e 	bl	8013b94 <HAL_GetTick>
 801a518:	0003      	movs	r3, r0
 801a51a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a51c:	e008      	b.n	801a530 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801a51e:	f7f9 fb39 	bl	8013b94 <HAL_GetTick>
 801a522:	0002      	movs	r2, r0
 801a524:	697b      	ldr	r3, [r7, #20]
 801a526:	1ad3      	subs	r3, r2, r3
 801a528:	2b64      	cmp	r3, #100	@ 0x64
 801a52a:	d901      	bls.n	801a530 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801a52c:	2303      	movs	r3, #3
 801a52e:	e336      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a530:	4b85      	ldr	r3, [pc, #532]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a532:	681a      	ldr	r2, [r3, #0]
 801a534:	2380      	movs	r3, #128	@ 0x80
 801a536:	029b      	lsls	r3, r3, #10
 801a538:	4013      	ands	r3, r2
 801a53a:	d1f0      	bne.n	801a51e <HAL_RCC_OscConfig+0x112>
 801a53c:	e000      	b.n	801a540 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a53e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	2202      	movs	r2, #2
 801a546:	4013      	ands	r3, r2
 801a548:	d100      	bne.n	801a54c <HAL_RCC_OscConfig+0x140>
 801a54a:	e099      	b.n	801a680 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	68db      	ldr	r3, [r3, #12]
 801a550:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801a552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a554:	2220      	movs	r2, #32
 801a556:	4013      	ands	r3, r2
 801a558:	d009      	beq.n	801a56e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801a55a:	4b7b      	ldr	r3, [pc, #492]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a55c:	681a      	ldr	r2, [r3, #0]
 801a55e:	4b7a      	ldr	r3, [pc, #488]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a560:	2120      	movs	r1, #32
 801a562:	430a      	orrs	r2, r1
 801a564:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a568:	2220      	movs	r2, #32
 801a56a:	4393      	bics	r3, r2
 801a56c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801a56e:	69fb      	ldr	r3, [r7, #28]
 801a570:	2b04      	cmp	r3, #4
 801a572:	d005      	beq.n	801a580 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801a574:	69fb      	ldr	r3, [r7, #28]
 801a576:	2b0c      	cmp	r3, #12
 801a578:	d13e      	bne.n	801a5f8 <HAL_RCC_OscConfig+0x1ec>
 801a57a:	69bb      	ldr	r3, [r7, #24]
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d13b      	bne.n	801a5f8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801a580:	4b71      	ldr	r3, [pc, #452]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	2204      	movs	r2, #4
 801a586:	4013      	ands	r3, r2
 801a588:	d004      	beq.n	801a594 <HAL_RCC_OscConfig+0x188>
 801a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d101      	bne.n	801a594 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801a590:	2301      	movs	r3, #1
 801a592:	e304      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a594:	4b6c      	ldr	r3, [pc, #432]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a596:	685b      	ldr	r3, [r3, #4]
 801a598:	4a6e      	ldr	r2, [pc, #440]	@ (801a754 <HAL_RCC_OscConfig+0x348>)
 801a59a:	4013      	ands	r3, r2
 801a59c:	0019      	movs	r1, r3
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	691b      	ldr	r3, [r3, #16]
 801a5a2:	021a      	lsls	r2, r3, #8
 801a5a4:	4b68      	ldr	r3, [pc, #416]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a5a6:	430a      	orrs	r2, r1
 801a5a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a5aa:	4b67      	ldr	r3, [pc, #412]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	2209      	movs	r2, #9
 801a5b0:	4393      	bics	r3, r2
 801a5b2:	0019      	movs	r1, r3
 801a5b4:	4b64      	ldr	r3, [pc, #400]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a5b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5b8:	430a      	orrs	r2, r1
 801a5ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801a5bc:	f000 fc42 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801a5c0:	0001      	movs	r1, r0
 801a5c2:	4b61      	ldr	r3, [pc, #388]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a5c4:	68db      	ldr	r3, [r3, #12]
 801a5c6:	091b      	lsrs	r3, r3, #4
 801a5c8:	220f      	movs	r2, #15
 801a5ca:	4013      	ands	r3, r2
 801a5cc:	4a62      	ldr	r2, [pc, #392]	@ (801a758 <HAL_RCC_OscConfig+0x34c>)
 801a5ce:	5cd3      	ldrb	r3, [r2, r3]
 801a5d0:	000a      	movs	r2, r1
 801a5d2:	40da      	lsrs	r2, r3
 801a5d4:	4b61      	ldr	r3, [pc, #388]	@ (801a75c <HAL_RCC_OscConfig+0x350>)
 801a5d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801a5d8:	4b61      	ldr	r3, [pc, #388]	@ (801a760 <HAL_RCC_OscConfig+0x354>)
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	2513      	movs	r5, #19
 801a5de:	197c      	adds	r4, r7, r5
 801a5e0:	0018      	movs	r0, r3
 801a5e2:	f7f9 fa91 	bl	8013b08 <HAL_InitTick>
 801a5e6:	0003      	movs	r3, r0
 801a5e8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801a5ea:	197b      	adds	r3, r7, r5
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d046      	beq.n	801a680 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801a5f2:	197b      	adds	r3, r7, r5
 801a5f4:	781b      	ldrb	r3, [r3, #0]
 801a5f6:	e2d2      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801a5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d027      	beq.n	801a64e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801a5fe:	4b52      	ldr	r3, [pc, #328]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	2209      	movs	r2, #9
 801a604:	4393      	bics	r3, r2
 801a606:	0019      	movs	r1, r3
 801a608:	4b4f      	ldr	r3, [pc, #316]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a60a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a60c:	430a      	orrs	r2, r1
 801a60e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a610:	f7f9 fac0 	bl	8013b94 <HAL_GetTick>
 801a614:	0003      	movs	r3, r0
 801a616:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a618:	e008      	b.n	801a62c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a61a:	f7f9 fabb 	bl	8013b94 <HAL_GetTick>
 801a61e:	0002      	movs	r2, r0
 801a620:	697b      	ldr	r3, [r7, #20]
 801a622:	1ad3      	subs	r3, r2, r3
 801a624:	2b02      	cmp	r3, #2
 801a626:	d901      	bls.n	801a62c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801a628:	2303      	movs	r3, #3
 801a62a:	e2b8      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a62c:	4b46      	ldr	r3, [pc, #280]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	2204      	movs	r2, #4
 801a632:	4013      	ands	r3, r2
 801a634:	d0f1      	beq.n	801a61a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a636:	4b44      	ldr	r3, [pc, #272]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a638:	685b      	ldr	r3, [r3, #4]
 801a63a:	4a46      	ldr	r2, [pc, #280]	@ (801a754 <HAL_RCC_OscConfig+0x348>)
 801a63c:	4013      	ands	r3, r2
 801a63e:	0019      	movs	r1, r3
 801a640:	687b      	ldr	r3, [r7, #4]
 801a642:	691b      	ldr	r3, [r3, #16]
 801a644:	021a      	lsls	r2, r3, #8
 801a646:	4b40      	ldr	r3, [pc, #256]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a648:	430a      	orrs	r2, r1
 801a64a:	605a      	str	r2, [r3, #4]
 801a64c:	e018      	b.n	801a680 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a64e:	4b3e      	ldr	r3, [pc, #248]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	4b3d      	ldr	r3, [pc, #244]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a654:	2101      	movs	r1, #1
 801a656:	438a      	bics	r2, r1
 801a658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a65a:	f7f9 fa9b 	bl	8013b94 <HAL_GetTick>
 801a65e:	0003      	movs	r3, r0
 801a660:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a662:	e008      	b.n	801a676 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801a664:	f7f9 fa96 	bl	8013b94 <HAL_GetTick>
 801a668:	0002      	movs	r2, r0
 801a66a:	697b      	ldr	r3, [r7, #20]
 801a66c:	1ad3      	subs	r3, r2, r3
 801a66e:	2b02      	cmp	r3, #2
 801a670:	d901      	bls.n	801a676 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801a672:	2303      	movs	r3, #3
 801a674:	e293      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a676:	4b34      	ldr	r3, [pc, #208]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	2204      	movs	r2, #4
 801a67c:	4013      	ands	r3, r2
 801a67e:	d1f1      	bne.n	801a664 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2210      	movs	r2, #16
 801a686:	4013      	ands	r3, r2
 801a688:	d100      	bne.n	801a68c <HAL_RCC_OscConfig+0x280>
 801a68a:	e0a2      	b.n	801a7d2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801a68c:	69fb      	ldr	r3, [r7, #28]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d140      	bne.n	801a714 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801a692:	4b2d      	ldr	r3, [pc, #180]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a694:	681a      	ldr	r2, [r3, #0]
 801a696:	2380      	movs	r3, #128	@ 0x80
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	4013      	ands	r3, r2
 801a69c:	d005      	beq.n	801a6aa <HAL_RCC_OscConfig+0x29e>
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	69db      	ldr	r3, [r3, #28]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	d101      	bne.n	801a6aa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801a6a6:	2301      	movs	r3, #1
 801a6a8:	e279      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a6aa:	4b27      	ldr	r3, [pc, #156]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a6ac:	685b      	ldr	r3, [r3, #4]
 801a6ae:	4a2d      	ldr	r2, [pc, #180]	@ (801a764 <HAL_RCC_OscConfig+0x358>)
 801a6b0:	4013      	ands	r3, r2
 801a6b2:	0019      	movs	r1, r3
 801a6b4:	687b      	ldr	r3, [r7, #4]
 801a6b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a6b8:	4b23      	ldr	r3, [pc, #140]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a6ba:	430a      	orrs	r2, r1
 801a6bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a6be:	4b22      	ldr	r3, [pc, #136]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	021b      	lsls	r3, r3, #8
 801a6c4:	0a19      	lsrs	r1, r3, #8
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	6a1b      	ldr	r3, [r3, #32]
 801a6ca:	061a      	lsls	r2, r3, #24
 801a6cc:	4b1e      	ldr	r3, [pc, #120]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a6ce:	430a      	orrs	r2, r1
 801a6d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6d6:	0b5b      	lsrs	r3, r3, #13
 801a6d8:	3301      	adds	r3, #1
 801a6da:	2280      	movs	r2, #128	@ 0x80
 801a6dc:	0212      	lsls	r2, r2, #8
 801a6de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801a6e0:	4b19      	ldr	r3, [pc, #100]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a6e2:	68db      	ldr	r3, [r3, #12]
 801a6e4:	091b      	lsrs	r3, r3, #4
 801a6e6:	210f      	movs	r1, #15
 801a6e8:	400b      	ands	r3, r1
 801a6ea:	491b      	ldr	r1, [pc, #108]	@ (801a758 <HAL_RCC_OscConfig+0x34c>)
 801a6ec:	5ccb      	ldrb	r3, [r1, r3]
 801a6ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801a6f0:	4b1a      	ldr	r3, [pc, #104]	@ (801a75c <HAL_RCC_OscConfig+0x350>)
 801a6f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801a6f4:	4b1a      	ldr	r3, [pc, #104]	@ (801a760 <HAL_RCC_OscConfig+0x354>)
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	2513      	movs	r5, #19
 801a6fa:	197c      	adds	r4, r7, r5
 801a6fc:	0018      	movs	r0, r3
 801a6fe:	f7f9 fa03 	bl	8013b08 <HAL_InitTick>
 801a702:	0003      	movs	r3, r0
 801a704:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801a706:	197b      	adds	r3, r7, r5
 801a708:	781b      	ldrb	r3, [r3, #0]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d061      	beq.n	801a7d2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801a70e:	197b      	adds	r3, r7, r5
 801a710:	781b      	ldrb	r3, [r3, #0]
 801a712:	e244      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	69db      	ldr	r3, [r3, #28]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d040      	beq.n	801a79e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801a71c:	4b0a      	ldr	r3, [pc, #40]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a71e:	681a      	ldr	r2, [r3, #0]
 801a720:	4b09      	ldr	r3, [pc, #36]	@ (801a748 <HAL_RCC_OscConfig+0x33c>)
 801a722:	2180      	movs	r1, #128	@ 0x80
 801a724:	0049      	lsls	r1, r1, #1
 801a726:	430a      	orrs	r2, r1
 801a728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a72a:	f7f9 fa33 	bl	8013b94 <HAL_GetTick>
 801a72e:	0003      	movs	r3, r0
 801a730:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a732:	e019      	b.n	801a768 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a734:	f7f9 fa2e 	bl	8013b94 <HAL_GetTick>
 801a738:	0002      	movs	r2, r0
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	1ad3      	subs	r3, r2, r3
 801a73e:	2b02      	cmp	r3, #2
 801a740:	d912      	bls.n	801a768 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801a742:	2303      	movs	r3, #3
 801a744:	e22b      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
 801a746:	46c0      	nop			@ (mov r8, r8)
 801a748:	40021000 	.word	0x40021000
 801a74c:	fffeffff 	.word	0xfffeffff
 801a750:	fffbffff 	.word	0xfffbffff
 801a754:	ffffe0ff 	.word	0xffffe0ff
 801a758:	0802db14 	.word	0x0802db14
 801a75c:	200000e0 	.word	0x200000e0
 801a760:	200000f0 	.word	0x200000f0
 801a764:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801a768:	4bca      	ldr	r3, [pc, #808]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a76a:	681a      	ldr	r2, [r3, #0]
 801a76c:	2380      	movs	r3, #128	@ 0x80
 801a76e:	009b      	lsls	r3, r3, #2
 801a770:	4013      	ands	r3, r2
 801a772:	d0df      	beq.n	801a734 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801a774:	4bc7      	ldr	r3, [pc, #796]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a776:	685b      	ldr	r3, [r3, #4]
 801a778:	4ac7      	ldr	r2, [pc, #796]	@ (801aa98 <HAL_RCC_OscConfig+0x68c>)
 801a77a:	4013      	ands	r3, r2
 801a77c:	0019      	movs	r1, r3
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a782:	4bc4      	ldr	r3, [pc, #784]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a784:	430a      	orrs	r2, r1
 801a786:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801a788:	4bc2      	ldr	r3, [pc, #776]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a78a:	685b      	ldr	r3, [r3, #4]
 801a78c:	021b      	lsls	r3, r3, #8
 801a78e:	0a19      	lsrs	r1, r3, #8
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	6a1b      	ldr	r3, [r3, #32]
 801a794:	061a      	lsls	r2, r3, #24
 801a796:	4bbf      	ldr	r3, [pc, #764]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a798:	430a      	orrs	r2, r1
 801a79a:	605a      	str	r2, [r3, #4]
 801a79c:	e019      	b.n	801a7d2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801a79e:	4bbd      	ldr	r3, [pc, #756]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a7a0:	681a      	ldr	r2, [r3, #0]
 801a7a2:	4bbc      	ldr	r3, [pc, #752]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a7a4:	49bd      	ldr	r1, [pc, #756]	@ (801aa9c <HAL_RCC_OscConfig+0x690>)
 801a7a6:	400a      	ands	r2, r1
 801a7a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a7aa:	f7f9 f9f3 	bl	8013b94 <HAL_GetTick>
 801a7ae:	0003      	movs	r3, r0
 801a7b0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a7b2:	e008      	b.n	801a7c6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801a7b4:	f7f9 f9ee 	bl	8013b94 <HAL_GetTick>
 801a7b8:	0002      	movs	r2, r0
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	2b02      	cmp	r3, #2
 801a7c0:	d901      	bls.n	801a7c6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801a7c2:	2303      	movs	r3, #3
 801a7c4:	e1eb      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801a7c6:	4bb3      	ldr	r3, [pc, #716]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a7c8:	681a      	ldr	r2, [r3, #0]
 801a7ca:	2380      	movs	r3, #128	@ 0x80
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	4013      	ands	r3, r2
 801a7d0:	d1f0      	bne.n	801a7b4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2208      	movs	r2, #8
 801a7d8:	4013      	ands	r3, r2
 801a7da:	d036      	beq.n	801a84a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	695b      	ldr	r3, [r3, #20]
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d019      	beq.n	801a818 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a7e4:	4bab      	ldr	r3, [pc, #684]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a7e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a7e8:	4baa      	ldr	r3, [pc, #680]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a7ea:	2101      	movs	r1, #1
 801a7ec:	430a      	orrs	r2, r1
 801a7ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a7f0:	f7f9 f9d0 	bl	8013b94 <HAL_GetTick>
 801a7f4:	0003      	movs	r3, r0
 801a7f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a7f8:	e008      	b.n	801a80c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a7fa:	f7f9 f9cb 	bl	8013b94 <HAL_GetTick>
 801a7fe:	0002      	movs	r2, r0
 801a800:	697b      	ldr	r3, [r7, #20]
 801a802:	1ad3      	subs	r3, r2, r3
 801a804:	2b02      	cmp	r3, #2
 801a806:	d901      	bls.n	801a80c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801a808:	2303      	movs	r3, #3
 801a80a:	e1c8      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a80c:	4ba1      	ldr	r3, [pc, #644]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a80e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a810:	2202      	movs	r2, #2
 801a812:	4013      	ands	r3, r2
 801a814:	d0f1      	beq.n	801a7fa <HAL_RCC_OscConfig+0x3ee>
 801a816:	e018      	b.n	801a84a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a818:	4b9e      	ldr	r3, [pc, #632]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a81a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a81c:	4b9d      	ldr	r3, [pc, #628]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a81e:	2101      	movs	r1, #1
 801a820:	438a      	bics	r2, r1
 801a822:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a824:	f7f9 f9b6 	bl	8013b94 <HAL_GetTick>
 801a828:	0003      	movs	r3, r0
 801a82a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a82c:	e008      	b.n	801a840 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801a82e:	f7f9 f9b1 	bl	8013b94 <HAL_GetTick>
 801a832:	0002      	movs	r2, r0
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	1ad3      	subs	r3, r2, r3
 801a838:	2b02      	cmp	r3, #2
 801a83a:	d901      	bls.n	801a840 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801a83c:	2303      	movs	r3, #3
 801a83e:	e1ae      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a840:	4b94      	ldr	r3, [pc, #592]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a844:	2202      	movs	r2, #2
 801a846:	4013      	ands	r3, r2
 801a848:	d1f1      	bne.n	801a82e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2204      	movs	r2, #4
 801a850:	4013      	ands	r3, r2
 801a852:	d100      	bne.n	801a856 <HAL_RCC_OscConfig+0x44a>
 801a854:	e0ae      	b.n	801a9b4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801a856:	2023      	movs	r0, #35	@ 0x23
 801a858:	183b      	adds	r3, r7, r0
 801a85a:	2200      	movs	r2, #0
 801a85c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801a85e:	4b8d      	ldr	r3, [pc, #564]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a862:	2380      	movs	r3, #128	@ 0x80
 801a864:	055b      	lsls	r3, r3, #21
 801a866:	4013      	ands	r3, r2
 801a868:	d109      	bne.n	801a87e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801a86a:	4b8a      	ldr	r3, [pc, #552]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a86c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a86e:	4b89      	ldr	r3, [pc, #548]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a870:	2180      	movs	r1, #128	@ 0x80
 801a872:	0549      	lsls	r1, r1, #21
 801a874:	430a      	orrs	r2, r1
 801a876:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801a878:	183b      	adds	r3, r7, r0
 801a87a:	2201      	movs	r2, #1
 801a87c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a87e:	4b88      	ldr	r3, [pc, #544]	@ (801aaa0 <HAL_RCC_OscConfig+0x694>)
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	2380      	movs	r3, #128	@ 0x80
 801a884:	005b      	lsls	r3, r3, #1
 801a886:	4013      	ands	r3, r2
 801a888:	d11a      	bne.n	801a8c0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801a88a:	4b85      	ldr	r3, [pc, #532]	@ (801aaa0 <HAL_RCC_OscConfig+0x694>)
 801a88c:	681a      	ldr	r2, [r3, #0]
 801a88e:	4b84      	ldr	r3, [pc, #528]	@ (801aaa0 <HAL_RCC_OscConfig+0x694>)
 801a890:	2180      	movs	r1, #128	@ 0x80
 801a892:	0049      	lsls	r1, r1, #1
 801a894:	430a      	orrs	r2, r1
 801a896:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801a898:	f7f9 f97c 	bl	8013b94 <HAL_GetTick>
 801a89c:	0003      	movs	r3, r0
 801a89e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a8a0:	e008      	b.n	801a8b4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a8a2:	f7f9 f977 	bl	8013b94 <HAL_GetTick>
 801a8a6:	0002      	movs	r2, r0
 801a8a8:	697b      	ldr	r3, [r7, #20]
 801a8aa:	1ad3      	subs	r3, r2, r3
 801a8ac:	2b64      	cmp	r3, #100	@ 0x64
 801a8ae:	d901      	bls.n	801a8b4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801a8b0:	2303      	movs	r3, #3
 801a8b2:	e174      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801a8b4:	4b7a      	ldr	r3, [pc, #488]	@ (801aaa0 <HAL_RCC_OscConfig+0x694>)
 801a8b6:	681a      	ldr	r2, [r3, #0]
 801a8b8:	2380      	movs	r3, #128	@ 0x80
 801a8ba:	005b      	lsls	r3, r3, #1
 801a8bc:	4013      	ands	r3, r2
 801a8be:	d0f0      	beq.n	801a8a2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	689a      	ldr	r2, [r3, #8]
 801a8c4:	2380      	movs	r3, #128	@ 0x80
 801a8c6:	005b      	lsls	r3, r3, #1
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	d107      	bne.n	801a8dc <HAL_RCC_OscConfig+0x4d0>
 801a8cc:	4b71      	ldr	r3, [pc, #452]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8d0:	4b70      	ldr	r3, [pc, #448]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8d2:	2180      	movs	r1, #128	@ 0x80
 801a8d4:	0049      	lsls	r1, r1, #1
 801a8d6:	430a      	orrs	r2, r1
 801a8d8:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8da:	e031      	b.n	801a940 <HAL_RCC_OscConfig+0x534>
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	689b      	ldr	r3, [r3, #8]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d10c      	bne.n	801a8fe <HAL_RCC_OscConfig+0x4f2>
 801a8e4:	4b6b      	ldr	r3, [pc, #428]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8e8:	4b6a      	ldr	r3, [pc, #424]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8ea:	496c      	ldr	r1, [pc, #432]	@ (801aa9c <HAL_RCC_OscConfig+0x690>)
 801a8ec:	400a      	ands	r2, r1
 801a8ee:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8f0:	4b68      	ldr	r3, [pc, #416]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a8f4:	4b67      	ldr	r3, [pc, #412]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a8f6:	496b      	ldr	r1, [pc, #428]	@ (801aaa4 <HAL_RCC_OscConfig+0x698>)
 801a8f8:	400a      	ands	r2, r1
 801a8fa:	651a      	str	r2, [r3, #80]	@ 0x50
 801a8fc:	e020      	b.n	801a940 <HAL_RCC_OscConfig+0x534>
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	689a      	ldr	r2, [r3, #8]
 801a902:	23a0      	movs	r3, #160	@ 0xa0
 801a904:	00db      	lsls	r3, r3, #3
 801a906:	429a      	cmp	r2, r3
 801a908:	d10e      	bne.n	801a928 <HAL_RCC_OscConfig+0x51c>
 801a90a:	4b62      	ldr	r3, [pc, #392]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a90c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a90e:	4b61      	ldr	r3, [pc, #388]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a910:	2180      	movs	r1, #128	@ 0x80
 801a912:	00c9      	lsls	r1, r1, #3
 801a914:	430a      	orrs	r2, r1
 801a916:	651a      	str	r2, [r3, #80]	@ 0x50
 801a918:	4b5e      	ldr	r3, [pc, #376]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a91a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a91c:	4b5d      	ldr	r3, [pc, #372]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a91e:	2180      	movs	r1, #128	@ 0x80
 801a920:	0049      	lsls	r1, r1, #1
 801a922:	430a      	orrs	r2, r1
 801a924:	651a      	str	r2, [r3, #80]	@ 0x50
 801a926:	e00b      	b.n	801a940 <HAL_RCC_OscConfig+0x534>
 801a928:	4b5a      	ldr	r3, [pc, #360]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a92a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a92c:	4b59      	ldr	r3, [pc, #356]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a92e:	495b      	ldr	r1, [pc, #364]	@ (801aa9c <HAL_RCC_OscConfig+0x690>)
 801a930:	400a      	ands	r2, r1
 801a932:	651a      	str	r2, [r3, #80]	@ 0x50
 801a934:	4b57      	ldr	r3, [pc, #348]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a938:	4b56      	ldr	r3, [pc, #344]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a93a:	495a      	ldr	r1, [pc, #360]	@ (801aaa4 <HAL_RCC_OscConfig+0x698>)
 801a93c:	400a      	ands	r2, r1
 801a93e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	689b      	ldr	r3, [r3, #8]
 801a944:	2b00      	cmp	r3, #0
 801a946:	d015      	beq.n	801a974 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a948:	f7f9 f924 	bl	8013b94 <HAL_GetTick>
 801a94c:	0003      	movs	r3, r0
 801a94e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a950:	e009      	b.n	801a966 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a952:	f7f9 f91f 	bl	8013b94 <HAL_GetTick>
 801a956:	0002      	movs	r2, r0
 801a958:	697b      	ldr	r3, [r7, #20]
 801a95a:	1ad3      	subs	r3, r2, r3
 801a95c:	4a52      	ldr	r2, [pc, #328]	@ (801aaa8 <HAL_RCC_OscConfig+0x69c>)
 801a95e:	4293      	cmp	r3, r2
 801a960:	d901      	bls.n	801a966 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801a962:	2303      	movs	r3, #3
 801a964:	e11b      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a966:	4b4b      	ldr	r3, [pc, #300]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a96a:	2380      	movs	r3, #128	@ 0x80
 801a96c:	009b      	lsls	r3, r3, #2
 801a96e:	4013      	ands	r3, r2
 801a970:	d0ef      	beq.n	801a952 <HAL_RCC_OscConfig+0x546>
 801a972:	e014      	b.n	801a99e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801a974:	f7f9 f90e 	bl	8013b94 <HAL_GetTick>
 801a978:	0003      	movs	r3, r0
 801a97a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a97c:	e009      	b.n	801a992 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801a97e:	f7f9 f909 	bl	8013b94 <HAL_GetTick>
 801a982:	0002      	movs	r2, r0
 801a984:	697b      	ldr	r3, [r7, #20]
 801a986:	1ad3      	subs	r3, r2, r3
 801a988:	4a47      	ldr	r2, [pc, #284]	@ (801aaa8 <HAL_RCC_OscConfig+0x69c>)
 801a98a:	4293      	cmp	r3, r2
 801a98c:	d901      	bls.n	801a992 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801a98e:	2303      	movs	r3, #3
 801a990:	e105      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a992:	4b40      	ldr	r3, [pc, #256]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a994:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a996:	2380      	movs	r3, #128	@ 0x80
 801a998:	009b      	lsls	r3, r3, #2
 801a99a:	4013      	ands	r3, r2
 801a99c:	d1ef      	bne.n	801a97e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801a99e:	2323      	movs	r3, #35	@ 0x23
 801a9a0:	18fb      	adds	r3, r7, r3
 801a9a2:	781b      	ldrb	r3, [r3, #0]
 801a9a4:	2b01      	cmp	r3, #1
 801a9a6:	d105      	bne.n	801a9b4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801a9a8:	4b3a      	ldr	r3, [pc, #232]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a9ac:	4b39      	ldr	r3, [pc, #228]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9ae:	493f      	ldr	r1, [pc, #252]	@ (801aaac <HAL_RCC_OscConfig+0x6a0>)
 801a9b0:	400a      	ands	r2, r1
 801a9b2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	2220      	movs	r2, #32
 801a9ba:	4013      	ands	r3, r2
 801a9bc:	d049      	beq.n	801aa52 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	699b      	ldr	r3, [r3, #24]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d026      	beq.n	801aa14 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801a9c6:	4b33      	ldr	r3, [pc, #204]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9c8:	689a      	ldr	r2, [r3, #8]
 801a9ca:	4b32      	ldr	r3, [pc, #200]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9cc:	2101      	movs	r1, #1
 801a9ce:	430a      	orrs	r2, r1
 801a9d0:	609a      	str	r2, [r3, #8]
 801a9d2:	4b30      	ldr	r3, [pc, #192]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a9d6:	4b2f      	ldr	r3, [pc, #188]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801a9d8:	2101      	movs	r1, #1
 801a9da:	430a      	orrs	r2, r1
 801a9dc:	635a      	str	r2, [r3, #52]	@ 0x34
 801a9de:	4b34      	ldr	r3, [pc, #208]	@ (801aab0 <HAL_RCC_OscConfig+0x6a4>)
 801a9e0:	6a1a      	ldr	r2, [r3, #32]
 801a9e2:	4b33      	ldr	r3, [pc, #204]	@ (801aab0 <HAL_RCC_OscConfig+0x6a4>)
 801a9e4:	2180      	movs	r1, #128	@ 0x80
 801a9e6:	0189      	lsls	r1, r1, #6
 801a9e8:	430a      	orrs	r2, r1
 801a9ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801a9ec:	f7f9 f8d2 	bl	8013b94 <HAL_GetTick>
 801a9f0:	0003      	movs	r3, r0
 801a9f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a9f4:	e008      	b.n	801aa08 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a9f6:	f7f9 f8cd 	bl	8013b94 <HAL_GetTick>
 801a9fa:	0002      	movs	r2, r0
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	1ad3      	subs	r3, r2, r3
 801aa00:	2b02      	cmp	r3, #2
 801aa02:	d901      	bls.n	801aa08 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801aa04:	2303      	movs	r3, #3
 801aa06:	e0ca      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801aa08:	4b22      	ldr	r3, [pc, #136]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa0a:	689b      	ldr	r3, [r3, #8]
 801aa0c:	2202      	movs	r2, #2
 801aa0e:	4013      	ands	r3, r2
 801aa10:	d0f1      	beq.n	801a9f6 <HAL_RCC_OscConfig+0x5ea>
 801aa12:	e01e      	b.n	801aa52 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801aa14:	4b1f      	ldr	r3, [pc, #124]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa16:	689a      	ldr	r2, [r3, #8]
 801aa18:	4b1e      	ldr	r3, [pc, #120]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa1a:	2101      	movs	r1, #1
 801aa1c:	438a      	bics	r2, r1
 801aa1e:	609a      	str	r2, [r3, #8]
 801aa20:	4b23      	ldr	r3, [pc, #140]	@ (801aab0 <HAL_RCC_OscConfig+0x6a4>)
 801aa22:	6a1a      	ldr	r2, [r3, #32]
 801aa24:	4b22      	ldr	r3, [pc, #136]	@ (801aab0 <HAL_RCC_OscConfig+0x6a4>)
 801aa26:	4923      	ldr	r1, [pc, #140]	@ (801aab4 <HAL_RCC_OscConfig+0x6a8>)
 801aa28:	400a      	ands	r2, r1
 801aa2a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa2c:	f7f9 f8b2 	bl	8013b94 <HAL_GetTick>
 801aa30:	0003      	movs	r3, r0
 801aa32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801aa34:	e008      	b.n	801aa48 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801aa36:	f7f9 f8ad 	bl	8013b94 <HAL_GetTick>
 801aa3a:	0002      	movs	r2, r0
 801aa3c:	697b      	ldr	r3, [r7, #20]
 801aa3e:	1ad3      	subs	r3, r2, r3
 801aa40:	2b02      	cmp	r3, #2
 801aa42:	d901      	bls.n	801aa48 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801aa44:	2303      	movs	r3, #3
 801aa46:	e0aa      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801aa48:	4b12      	ldr	r3, [pc, #72]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa4a:	689b      	ldr	r3, [r3, #8]
 801aa4c:	2202      	movs	r2, #2
 801aa4e:	4013      	ands	r3, r2
 801aa50:	d1f1      	bne.n	801aa36 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d100      	bne.n	801aa5c <HAL_RCC_OscConfig+0x650>
 801aa5a:	e09f      	b.n	801ab9c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801aa5c:	69fb      	ldr	r3, [r7, #28]
 801aa5e:	2b0c      	cmp	r3, #12
 801aa60:	d100      	bne.n	801aa64 <HAL_RCC_OscConfig+0x658>
 801aa62:	e078      	b.n	801ab56 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aa68:	2b02      	cmp	r3, #2
 801aa6a:	d159      	bne.n	801ab20 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801aa6c:	4b09      	ldr	r3, [pc, #36]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa6e:	681a      	ldr	r2, [r3, #0]
 801aa70:	4b08      	ldr	r3, [pc, #32]	@ (801aa94 <HAL_RCC_OscConfig+0x688>)
 801aa72:	4911      	ldr	r1, [pc, #68]	@ (801aab8 <HAL_RCC_OscConfig+0x6ac>)
 801aa74:	400a      	ands	r2, r1
 801aa76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa78:	f7f9 f88c 	bl	8013b94 <HAL_GetTick>
 801aa7c:	0003      	movs	r3, r0
 801aa7e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aa80:	e01c      	b.n	801aabc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801aa82:	f7f9 f887 	bl	8013b94 <HAL_GetTick>
 801aa86:	0002      	movs	r2, r0
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	1ad3      	subs	r3, r2, r3
 801aa8c:	2b02      	cmp	r3, #2
 801aa8e:	d915      	bls.n	801aabc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801aa90:	2303      	movs	r3, #3
 801aa92:	e084      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
 801aa94:	40021000 	.word	0x40021000
 801aa98:	ffff1fff 	.word	0xffff1fff
 801aa9c:	fffffeff 	.word	0xfffffeff
 801aaa0:	40007000 	.word	0x40007000
 801aaa4:	fffffbff 	.word	0xfffffbff
 801aaa8:	00001388 	.word	0x00001388
 801aaac:	efffffff 	.word	0xefffffff
 801aab0:	40010000 	.word	0x40010000
 801aab4:	ffffdfff 	.word	0xffffdfff
 801aab8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801aabc:	4b3a      	ldr	r3, [pc, #232]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801aabe:	681a      	ldr	r2, [r3, #0]
 801aac0:	2380      	movs	r3, #128	@ 0x80
 801aac2:	049b      	lsls	r3, r3, #18
 801aac4:	4013      	ands	r3, r2
 801aac6:	d1dc      	bne.n	801aa82 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801aac8:	4b37      	ldr	r3, [pc, #220]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801aaca:	68db      	ldr	r3, [r3, #12]
 801aacc:	4a37      	ldr	r2, [pc, #220]	@ (801abac <HAL_RCC_OscConfig+0x7a0>)
 801aace:	4013      	ands	r3, r2
 801aad0:	0019      	movs	r1, r3
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aada:	431a      	orrs	r2, r3
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aae0:	431a      	orrs	r2, r3
 801aae2:	4b31      	ldr	r3, [pc, #196]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801aae4:	430a      	orrs	r2, r1
 801aae6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801aae8:	4b2f      	ldr	r3, [pc, #188]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801aaea:	681a      	ldr	r2, [r3, #0]
 801aaec:	4b2e      	ldr	r3, [pc, #184]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801aaee:	2180      	movs	r1, #128	@ 0x80
 801aaf0:	0449      	lsls	r1, r1, #17
 801aaf2:	430a      	orrs	r2, r1
 801aaf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aaf6:	f7f9 f84d 	bl	8013b94 <HAL_GetTick>
 801aafa:	0003      	movs	r3, r0
 801aafc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801aafe:	e008      	b.n	801ab12 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ab00:	f7f9 f848 	bl	8013b94 <HAL_GetTick>
 801ab04:	0002      	movs	r2, r0
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	1ad3      	subs	r3, r2, r3
 801ab0a:	2b02      	cmp	r3, #2
 801ab0c:	d901      	bls.n	801ab12 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801ab0e:	2303      	movs	r3, #3
 801ab10:	e045      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801ab12:	4b25      	ldr	r3, [pc, #148]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801ab14:	681a      	ldr	r2, [r3, #0]
 801ab16:	2380      	movs	r3, #128	@ 0x80
 801ab18:	049b      	lsls	r3, r3, #18
 801ab1a:	4013      	ands	r3, r2
 801ab1c:	d0f0      	beq.n	801ab00 <HAL_RCC_OscConfig+0x6f4>
 801ab1e:	e03d      	b.n	801ab9c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ab20:	4b21      	ldr	r3, [pc, #132]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801ab22:	681a      	ldr	r2, [r3, #0]
 801ab24:	4b20      	ldr	r3, [pc, #128]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801ab26:	4922      	ldr	r1, [pc, #136]	@ (801abb0 <HAL_RCC_OscConfig+0x7a4>)
 801ab28:	400a      	ands	r2, r1
 801ab2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab2c:	f7f9 f832 	bl	8013b94 <HAL_GetTick>
 801ab30:	0003      	movs	r3, r0
 801ab32:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ab34:	e008      	b.n	801ab48 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ab36:	f7f9 f82d 	bl	8013b94 <HAL_GetTick>
 801ab3a:	0002      	movs	r2, r0
 801ab3c:	697b      	ldr	r3, [r7, #20]
 801ab3e:	1ad3      	subs	r3, r2, r3
 801ab40:	2b02      	cmp	r3, #2
 801ab42:	d901      	bls.n	801ab48 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801ab44:	2303      	movs	r3, #3
 801ab46:	e02a      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ab48:	4b17      	ldr	r3, [pc, #92]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	2380      	movs	r3, #128	@ 0x80
 801ab4e:	049b      	lsls	r3, r3, #18
 801ab50:	4013      	ands	r3, r2
 801ab52:	d1f0      	bne.n	801ab36 <HAL_RCC_OscConfig+0x72a>
 801ab54:	e022      	b.n	801ab9c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ab5a:	2b01      	cmp	r3, #1
 801ab5c:	d101      	bne.n	801ab62 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801ab5e:	2301      	movs	r3, #1
 801ab60:	e01d      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801ab62:	4b11      	ldr	r3, [pc, #68]	@ (801aba8 <HAL_RCC_OscConfig+0x79c>)
 801ab64:	68db      	ldr	r3, [r3, #12]
 801ab66:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ab68:	69ba      	ldr	r2, [r7, #24]
 801ab6a:	2380      	movs	r3, #128	@ 0x80
 801ab6c:	025b      	lsls	r3, r3, #9
 801ab6e:	401a      	ands	r2, r3
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ab74:	429a      	cmp	r2, r3
 801ab76:	d10f      	bne.n	801ab98 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ab78:	69ba      	ldr	r2, [r7, #24]
 801ab7a:	23f0      	movs	r3, #240	@ 0xf0
 801ab7c:	039b      	lsls	r3, r3, #14
 801ab7e:	401a      	ands	r2, r3
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ab84:	429a      	cmp	r2, r3
 801ab86:	d107      	bne.n	801ab98 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801ab88:	69ba      	ldr	r2, [r7, #24]
 801ab8a:	23c0      	movs	r3, #192	@ 0xc0
 801ab8c:	041b      	lsls	r3, r3, #16
 801ab8e:	401a      	ands	r2, r3
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d001      	beq.n	801ab9c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801ab98:	2301      	movs	r3, #1
 801ab9a:	e000      	b.n	801ab9e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801ab9c:	2300      	movs	r3, #0
}
 801ab9e:	0018      	movs	r0, r3
 801aba0:	46bd      	mov	sp, r7
 801aba2:	b00a      	add	sp, #40	@ 0x28
 801aba4:	bdb0      	pop	{r4, r5, r7, pc}
 801aba6:	46c0      	nop			@ (mov r8, r8)
 801aba8:	40021000 	.word	0x40021000
 801abac:	ff02ffff 	.word	0xff02ffff
 801abb0:	feffffff 	.word	0xfeffffff

0801abb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801abb4:	b5b0      	push	{r4, r5, r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2b00      	cmp	r3, #0
 801abc2:	d101      	bne.n	801abc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801abc4:	2301      	movs	r3, #1
 801abc6:	e128      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801abc8:	4b96      	ldr	r3, [pc, #600]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	2201      	movs	r2, #1
 801abce:	4013      	ands	r3, r2
 801abd0:	683a      	ldr	r2, [r7, #0]
 801abd2:	429a      	cmp	r2, r3
 801abd4:	d91e      	bls.n	801ac14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801abd6:	4b93      	ldr	r3, [pc, #588]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	2201      	movs	r2, #1
 801abdc:	4393      	bics	r3, r2
 801abde:	0019      	movs	r1, r3
 801abe0:	4b90      	ldr	r3, [pc, #576]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801abe2:	683a      	ldr	r2, [r7, #0]
 801abe4:	430a      	orrs	r2, r1
 801abe6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801abe8:	f7f8 ffd4 	bl	8013b94 <HAL_GetTick>
 801abec:	0003      	movs	r3, r0
 801abee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801abf0:	e009      	b.n	801ac06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801abf2:	f7f8 ffcf 	bl	8013b94 <HAL_GetTick>
 801abf6:	0002      	movs	r2, r0
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	1ad3      	subs	r3, r2, r3
 801abfc:	4a8a      	ldr	r2, [pc, #552]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801abfe:	4293      	cmp	r3, r2
 801ac00:	d901      	bls.n	801ac06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801ac02:	2303      	movs	r3, #3
 801ac04:	e109      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ac06:	4b87      	ldr	r3, [pc, #540]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2201      	movs	r2, #1
 801ac0c:	4013      	ands	r3, r2
 801ac0e:	683a      	ldr	r2, [r7, #0]
 801ac10:	429a      	cmp	r2, r3
 801ac12:	d1ee      	bne.n	801abf2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	2202      	movs	r2, #2
 801ac1a:	4013      	ands	r3, r2
 801ac1c:	d009      	beq.n	801ac32 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ac1e:	4b83      	ldr	r3, [pc, #524]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac20:	68db      	ldr	r3, [r3, #12]
 801ac22:	22f0      	movs	r2, #240	@ 0xf0
 801ac24:	4393      	bics	r3, r2
 801ac26:	0019      	movs	r1, r3
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	689a      	ldr	r2, [r3, #8]
 801ac2c:	4b7f      	ldr	r3, [pc, #508]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac2e:	430a      	orrs	r2, r1
 801ac30:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	2201      	movs	r2, #1
 801ac38:	4013      	ands	r3, r2
 801ac3a:	d100      	bne.n	801ac3e <HAL_RCC_ClockConfig+0x8a>
 801ac3c:	e089      	b.n	801ad52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	685b      	ldr	r3, [r3, #4]
 801ac42:	2b02      	cmp	r3, #2
 801ac44:	d107      	bne.n	801ac56 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ac46:	4b79      	ldr	r3, [pc, #484]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac48:	681a      	ldr	r2, [r3, #0]
 801ac4a:	2380      	movs	r3, #128	@ 0x80
 801ac4c:	029b      	lsls	r3, r3, #10
 801ac4e:	4013      	ands	r3, r2
 801ac50:	d120      	bne.n	801ac94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac52:	2301      	movs	r3, #1
 801ac54:	e0e1      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	685b      	ldr	r3, [r3, #4]
 801ac5a:	2b03      	cmp	r3, #3
 801ac5c:	d107      	bne.n	801ac6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ac5e:	4b73      	ldr	r3, [pc, #460]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac60:	681a      	ldr	r2, [r3, #0]
 801ac62:	2380      	movs	r3, #128	@ 0x80
 801ac64:	049b      	lsls	r3, r3, #18
 801ac66:	4013      	ands	r3, r2
 801ac68:	d114      	bne.n	801ac94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac6a:	2301      	movs	r3, #1
 801ac6c:	e0d5      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	685b      	ldr	r3, [r3, #4]
 801ac72:	2b01      	cmp	r3, #1
 801ac74:	d106      	bne.n	801ac84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ac76:	4b6d      	ldr	r3, [pc, #436]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	2204      	movs	r2, #4
 801ac7c:	4013      	ands	r3, r2
 801ac7e:	d109      	bne.n	801ac94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac80:	2301      	movs	r3, #1
 801ac82:	e0ca      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801ac84:	4b69      	ldr	r3, [pc, #420]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac86:	681a      	ldr	r2, [r3, #0]
 801ac88:	2380      	movs	r3, #128	@ 0x80
 801ac8a:	009b      	lsls	r3, r3, #2
 801ac8c:	4013      	ands	r3, r2
 801ac8e:	d101      	bne.n	801ac94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801ac90:	2301      	movs	r3, #1
 801ac92:	e0c2      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ac94:	4b65      	ldr	r3, [pc, #404]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ac96:	68db      	ldr	r3, [r3, #12]
 801ac98:	2203      	movs	r2, #3
 801ac9a:	4393      	bics	r3, r2
 801ac9c:	0019      	movs	r1, r3
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	685a      	ldr	r2, [r3, #4]
 801aca2:	4b62      	ldr	r3, [pc, #392]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801aca4:	430a      	orrs	r2, r1
 801aca6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801aca8:	f7f8 ff74 	bl	8013b94 <HAL_GetTick>
 801acac:	0003      	movs	r3, r0
 801acae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	685b      	ldr	r3, [r3, #4]
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d111      	bne.n	801acdc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801acb8:	e009      	b.n	801acce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801acba:	f7f8 ff6b 	bl	8013b94 <HAL_GetTick>
 801acbe:	0002      	movs	r2, r0
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	1ad3      	subs	r3, r2, r3
 801acc4:	4a58      	ldr	r2, [pc, #352]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801acc6:	4293      	cmp	r3, r2
 801acc8:	d901      	bls.n	801acce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801acca:	2303      	movs	r3, #3
 801accc:	e0a5      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801acce:	4b57      	ldr	r3, [pc, #348]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801acd0:	68db      	ldr	r3, [r3, #12]
 801acd2:	220c      	movs	r2, #12
 801acd4:	4013      	ands	r3, r2
 801acd6:	2b08      	cmp	r3, #8
 801acd8:	d1ef      	bne.n	801acba <HAL_RCC_ClockConfig+0x106>
 801acda:	e03a      	b.n	801ad52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	685b      	ldr	r3, [r3, #4]
 801ace0:	2b03      	cmp	r3, #3
 801ace2:	d111      	bne.n	801ad08 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ace4:	e009      	b.n	801acfa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ace6:	f7f8 ff55 	bl	8013b94 <HAL_GetTick>
 801acea:	0002      	movs	r2, r0
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	1ad3      	subs	r3, r2, r3
 801acf0:	4a4d      	ldr	r2, [pc, #308]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801acf2:	4293      	cmp	r3, r2
 801acf4:	d901      	bls.n	801acfa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801acf6:	2303      	movs	r3, #3
 801acf8:	e08f      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801acfa:	4b4c      	ldr	r3, [pc, #304]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801acfc:	68db      	ldr	r3, [r3, #12]
 801acfe:	220c      	movs	r2, #12
 801ad00:	4013      	ands	r3, r2
 801ad02:	2b0c      	cmp	r3, #12
 801ad04:	d1ef      	bne.n	801ace6 <HAL_RCC_ClockConfig+0x132>
 801ad06:	e024      	b.n	801ad52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	685b      	ldr	r3, [r3, #4]
 801ad0c:	2b01      	cmp	r3, #1
 801ad0e:	d11b      	bne.n	801ad48 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801ad10:	e009      	b.n	801ad26 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad12:	f7f8 ff3f 	bl	8013b94 <HAL_GetTick>
 801ad16:	0002      	movs	r2, r0
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	1ad3      	subs	r3, r2, r3
 801ad1c:	4a42      	ldr	r2, [pc, #264]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801ad1e:	4293      	cmp	r3, r2
 801ad20:	d901      	bls.n	801ad26 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801ad22:	2303      	movs	r3, #3
 801ad24:	e079      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801ad26:	4b41      	ldr	r3, [pc, #260]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ad28:	68db      	ldr	r3, [r3, #12]
 801ad2a:	220c      	movs	r2, #12
 801ad2c:	4013      	ands	r3, r2
 801ad2e:	2b04      	cmp	r3, #4
 801ad30:	d1ef      	bne.n	801ad12 <HAL_RCC_ClockConfig+0x15e>
 801ad32:	e00e      	b.n	801ad52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad34:	f7f8 ff2e 	bl	8013b94 <HAL_GetTick>
 801ad38:	0002      	movs	r2, r0
 801ad3a:	68fb      	ldr	r3, [r7, #12]
 801ad3c:	1ad3      	subs	r3, r2, r3
 801ad3e:	4a3a      	ldr	r2, [pc, #232]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801ad40:	4293      	cmp	r3, r2
 801ad42:	d901      	bls.n	801ad48 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801ad44:	2303      	movs	r3, #3
 801ad46:	e068      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801ad48:	4b38      	ldr	r3, [pc, #224]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	220c      	movs	r2, #12
 801ad4e:	4013      	ands	r3, r2
 801ad50:	d1f0      	bne.n	801ad34 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801ad52:	4b34      	ldr	r3, [pc, #208]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	2201      	movs	r2, #1
 801ad58:	4013      	ands	r3, r2
 801ad5a:	683a      	ldr	r2, [r7, #0]
 801ad5c:	429a      	cmp	r2, r3
 801ad5e:	d21e      	bcs.n	801ad9e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ad60:	4b30      	ldr	r3, [pc, #192]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	2201      	movs	r2, #1
 801ad66:	4393      	bics	r3, r2
 801ad68:	0019      	movs	r1, r3
 801ad6a:	4b2e      	ldr	r3, [pc, #184]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801ad6c:	683a      	ldr	r2, [r7, #0]
 801ad6e:	430a      	orrs	r2, r1
 801ad70:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801ad72:	f7f8 ff0f 	bl	8013b94 <HAL_GetTick>
 801ad76:	0003      	movs	r3, r0
 801ad78:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad7a:	e009      	b.n	801ad90 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ad7c:	f7f8 ff0a 	bl	8013b94 <HAL_GetTick>
 801ad80:	0002      	movs	r2, r0
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	1ad3      	subs	r3, r2, r3
 801ad86:	4a28      	ldr	r2, [pc, #160]	@ (801ae28 <HAL_RCC_ClockConfig+0x274>)
 801ad88:	4293      	cmp	r3, r2
 801ad8a:	d901      	bls.n	801ad90 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801ad8c:	2303      	movs	r3, #3
 801ad8e:	e044      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ad90:	4b24      	ldr	r3, [pc, #144]	@ (801ae24 <HAL_RCC_ClockConfig+0x270>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	2201      	movs	r2, #1
 801ad96:	4013      	ands	r3, r2
 801ad98:	683a      	ldr	r2, [r7, #0]
 801ad9a:	429a      	cmp	r2, r3
 801ad9c:	d1ee      	bne.n	801ad7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	2204      	movs	r2, #4
 801ada4:	4013      	ands	r3, r2
 801ada6:	d009      	beq.n	801adbc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801ada8:	4b20      	ldr	r3, [pc, #128]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801adaa:	68db      	ldr	r3, [r3, #12]
 801adac:	4a20      	ldr	r2, [pc, #128]	@ (801ae30 <HAL_RCC_ClockConfig+0x27c>)
 801adae:	4013      	ands	r3, r2
 801adb0:	0019      	movs	r1, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	68da      	ldr	r2, [r3, #12]
 801adb6:	4b1d      	ldr	r3, [pc, #116]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801adb8:	430a      	orrs	r2, r1
 801adba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	2208      	movs	r2, #8
 801adc2:	4013      	ands	r3, r2
 801adc4:	d00a      	beq.n	801addc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801adc6:	4b19      	ldr	r3, [pc, #100]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801adc8:	68db      	ldr	r3, [r3, #12]
 801adca:	4a1a      	ldr	r2, [pc, #104]	@ (801ae34 <HAL_RCC_ClockConfig+0x280>)
 801adcc:	4013      	ands	r3, r2
 801adce:	0019      	movs	r1, r3
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	691b      	ldr	r3, [r3, #16]
 801add4:	00da      	lsls	r2, r3, #3
 801add6:	4b15      	ldr	r3, [pc, #84]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801add8:	430a      	orrs	r2, r1
 801adda:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801addc:	f000 f832 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801ade0:	0001      	movs	r1, r0
 801ade2:	4b12      	ldr	r3, [pc, #72]	@ (801ae2c <HAL_RCC_ClockConfig+0x278>)
 801ade4:	68db      	ldr	r3, [r3, #12]
 801ade6:	091b      	lsrs	r3, r3, #4
 801ade8:	220f      	movs	r2, #15
 801adea:	4013      	ands	r3, r2
 801adec:	4a12      	ldr	r2, [pc, #72]	@ (801ae38 <HAL_RCC_ClockConfig+0x284>)
 801adee:	5cd3      	ldrb	r3, [r2, r3]
 801adf0:	000a      	movs	r2, r1
 801adf2:	40da      	lsrs	r2, r3
 801adf4:	4b11      	ldr	r3, [pc, #68]	@ (801ae3c <HAL_RCC_ClockConfig+0x288>)
 801adf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801adf8:	4b11      	ldr	r3, [pc, #68]	@ (801ae40 <HAL_RCC_ClockConfig+0x28c>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	250b      	movs	r5, #11
 801adfe:	197c      	adds	r4, r7, r5
 801ae00:	0018      	movs	r0, r3
 801ae02:	f7f8 fe81 	bl	8013b08 <HAL_InitTick>
 801ae06:	0003      	movs	r3, r0
 801ae08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801ae0a:	197b      	adds	r3, r7, r5
 801ae0c:	781b      	ldrb	r3, [r3, #0]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d002      	beq.n	801ae18 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801ae12:	197b      	adds	r3, r7, r5
 801ae14:	781b      	ldrb	r3, [r3, #0]
 801ae16:	e000      	b.n	801ae1a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801ae18:	2300      	movs	r3, #0
}
 801ae1a:	0018      	movs	r0, r3
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	b004      	add	sp, #16
 801ae20:	bdb0      	pop	{r4, r5, r7, pc}
 801ae22:	46c0      	nop			@ (mov r8, r8)
 801ae24:	40022000 	.word	0x40022000
 801ae28:	00001388 	.word	0x00001388
 801ae2c:	40021000 	.word	0x40021000
 801ae30:	fffff8ff 	.word	0xfffff8ff
 801ae34:	ffffc7ff 	.word	0xffffc7ff
 801ae38:	0802db14 	.word	0x0802db14
 801ae3c:	200000e0 	.word	0x200000e0
 801ae40:	200000f0 	.word	0x200000f0

0801ae44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ae44:	b5b0      	push	{r4, r5, r7, lr}
 801ae46:	b08e      	sub	sp, #56	@ 0x38
 801ae48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801ae4a:	4b4c      	ldr	r3, [pc, #304]	@ (801af7c <HAL_RCC_GetSysClockFreq+0x138>)
 801ae4c:	68db      	ldr	r3, [r3, #12]
 801ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801ae50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae52:	230c      	movs	r3, #12
 801ae54:	4013      	ands	r3, r2
 801ae56:	2b0c      	cmp	r3, #12
 801ae58:	d014      	beq.n	801ae84 <HAL_RCC_GetSysClockFreq+0x40>
 801ae5a:	d900      	bls.n	801ae5e <HAL_RCC_GetSysClockFreq+0x1a>
 801ae5c:	e07b      	b.n	801af56 <HAL_RCC_GetSysClockFreq+0x112>
 801ae5e:	2b04      	cmp	r3, #4
 801ae60:	d002      	beq.n	801ae68 <HAL_RCC_GetSysClockFreq+0x24>
 801ae62:	2b08      	cmp	r3, #8
 801ae64:	d00b      	beq.n	801ae7e <HAL_RCC_GetSysClockFreq+0x3a>
 801ae66:	e076      	b.n	801af56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801ae68:	4b44      	ldr	r3, [pc, #272]	@ (801af7c <HAL_RCC_GetSysClockFreq+0x138>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	2210      	movs	r2, #16
 801ae6e:	4013      	ands	r3, r2
 801ae70:	d002      	beq.n	801ae78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801ae72:	4b43      	ldr	r3, [pc, #268]	@ (801af80 <HAL_RCC_GetSysClockFreq+0x13c>)
 801ae74:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801ae76:	e07c      	b.n	801af72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801ae78:	4b42      	ldr	r3, [pc, #264]	@ (801af84 <HAL_RCC_GetSysClockFreq+0x140>)
 801ae7a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801ae7c:	e079      	b.n	801af72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801ae7e:	4b42      	ldr	r3, [pc, #264]	@ (801af88 <HAL_RCC_GetSysClockFreq+0x144>)
 801ae80:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801ae82:	e076      	b.n	801af72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801ae84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae86:	0c9a      	lsrs	r2, r3, #18
 801ae88:	230f      	movs	r3, #15
 801ae8a:	401a      	ands	r2, r3
 801ae8c:	4b3f      	ldr	r3, [pc, #252]	@ (801af8c <HAL_RCC_GetSysClockFreq+0x148>)
 801ae8e:	5c9b      	ldrb	r3, [r3, r2]
 801ae90:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae94:	0d9a      	lsrs	r2, r3, #22
 801ae96:	2303      	movs	r3, #3
 801ae98:	4013      	ands	r3, r2
 801ae9a:	3301      	adds	r3, #1
 801ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801ae9e:	4b37      	ldr	r3, [pc, #220]	@ (801af7c <HAL_RCC_GetSysClockFreq+0x138>)
 801aea0:	68da      	ldr	r2, [r3, #12]
 801aea2:	2380      	movs	r3, #128	@ 0x80
 801aea4:	025b      	lsls	r3, r3, #9
 801aea6:	4013      	ands	r3, r2
 801aea8:	d01a      	beq.n	801aee0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801aeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeac:	61bb      	str	r3, [r7, #24]
 801aeae:	2300      	movs	r3, #0
 801aeb0:	61fb      	str	r3, [r7, #28]
 801aeb2:	4a35      	ldr	r2, [pc, #212]	@ (801af88 <HAL_RCC_GetSysClockFreq+0x144>)
 801aeb4:	2300      	movs	r3, #0
 801aeb6:	69b8      	ldr	r0, [r7, #24]
 801aeb8:	69f9      	ldr	r1, [r7, #28]
 801aeba:	f7e5 fb81 	bl	80005c0 <__aeabi_lmul>
 801aebe:	0002      	movs	r2, r0
 801aec0:	000b      	movs	r3, r1
 801aec2:	0010      	movs	r0, r2
 801aec4:	0019      	movs	r1, r3
 801aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aec8:	613b      	str	r3, [r7, #16]
 801aeca:	2300      	movs	r3, #0
 801aecc:	617b      	str	r3, [r7, #20]
 801aece:	693a      	ldr	r2, [r7, #16]
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	f7e5 fb55 	bl	8000580 <__aeabi_uldivmod>
 801aed6:	0002      	movs	r2, r0
 801aed8:	000b      	movs	r3, r1
 801aeda:	0013      	movs	r3, r2
 801aedc:	637b      	str	r3, [r7, #52]	@ 0x34
 801aede:	e037      	b.n	801af50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801aee0:	4b26      	ldr	r3, [pc, #152]	@ (801af7c <HAL_RCC_GetSysClockFreq+0x138>)
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	2210      	movs	r2, #16
 801aee6:	4013      	ands	r3, r2
 801aee8:	d01a      	beq.n	801af20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801aeea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeec:	60bb      	str	r3, [r7, #8]
 801aeee:	2300      	movs	r3, #0
 801aef0:	60fb      	str	r3, [r7, #12]
 801aef2:	4a23      	ldr	r2, [pc, #140]	@ (801af80 <HAL_RCC_GetSysClockFreq+0x13c>)
 801aef4:	2300      	movs	r3, #0
 801aef6:	68b8      	ldr	r0, [r7, #8]
 801aef8:	68f9      	ldr	r1, [r7, #12]
 801aefa:	f7e5 fb61 	bl	80005c0 <__aeabi_lmul>
 801aefe:	0002      	movs	r2, r0
 801af00:	000b      	movs	r3, r1
 801af02:	0010      	movs	r0, r2
 801af04:	0019      	movs	r1, r3
 801af06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af08:	603b      	str	r3, [r7, #0]
 801af0a:	2300      	movs	r3, #0
 801af0c:	607b      	str	r3, [r7, #4]
 801af0e:	683a      	ldr	r2, [r7, #0]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	f7e5 fb35 	bl	8000580 <__aeabi_uldivmod>
 801af16:	0002      	movs	r2, r0
 801af18:	000b      	movs	r3, r1
 801af1a:	0013      	movs	r3, r2
 801af1c:	637b      	str	r3, [r7, #52]	@ 0x34
 801af1e:	e017      	b.n	801af50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801af20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af22:	0018      	movs	r0, r3
 801af24:	2300      	movs	r3, #0
 801af26:	0019      	movs	r1, r3
 801af28:	4a16      	ldr	r2, [pc, #88]	@ (801af84 <HAL_RCC_GetSysClockFreq+0x140>)
 801af2a:	2300      	movs	r3, #0
 801af2c:	f7e5 fb48 	bl	80005c0 <__aeabi_lmul>
 801af30:	0002      	movs	r2, r0
 801af32:	000b      	movs	r3, r1
 801af34:	0010      	movs	r0, r2
 801af36:	0019      	movs	r1, r3
 801af38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af3a:	001c      	movs	r4, r3
 801af3c:	2300      	movs	r3, #0
 801af3e:	001d      	movs	r5, r3
 801af40:	0022      	movs	r2, r4
 801af42:	002b      	movs	r3, r5
 801af44:	f7e5 fb1c 	bl	8000580 <__aeabi_uldivmod>
 801af48:	0002      	movs	r2, r0
 801af4a:	000b      	movs	r3, r1
 801af4c:	0013      	movs	r3, r2
 801af4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801af50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801af52:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801af54:	e00d      	b.n	801af72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801af56:	4b09      	ldr	r3, [pc, #36]	@ (801af7c <HAL_RCC_GetSysClockFreq+0x138>)
 801af58:	685b      	ldr	r3, [r3, #4]
 801af5a:	0b5b      	lsrs	r3, r3, #13
 801af5c:	2207      	movs	r2, #7
 801af5e:	4013      	ands	r3, r2
 801af60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801af62:	6a3b      	ldr	r3, [r7, #32]
 801af64:	3301      	adds	r3, #1
 801af66:	2280      	movs	r2, #128	@ 0x80
 801af68:	0212      	lsls	r2, r2, #8
 801af6a:	409a      	lsls	r2, r3
 801af6c:	0013      	movs	r3, r2
 801af6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801af70:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801af74:	0018      	movs	r0, r3
 801af76:	46bd      	mov	sp, r7
 801af78:	b00e      	add	sp, #56	@ 0x38
 801af7a:	bdb0      	pop	{r4, r5, r7, pc}
 801af7c:	40021000 	.word	0x40021000
 801af80:	003d0900 	.word	0x003d0900
 801af84:	00f42400 	.word	0x00f42400
 801af88:	007a1200 	.word	0x007a1200
 801af8c:	0802db2c 	.word	0x0802db2c

0801af90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801af90:	b580      	push	{r7, lr}
 801af92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801af94:	4b02      	ldr	r3, [pc, #8]	@ (801afa0 <HAL_RCC_GetHCLKFreq+0x10>)
 801af96:	681b      	ldr	r3, [r3, #0]
}
 801af98:	0018      	movs	r0, r3
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bd80      	pop	{r7, pc}
 801af9e:	46c0      	nop			@ (mov r8, r8)
 801afa0:	200000e0 	.word	0x200000e0

0801afa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801afa8:	f7ff fff2 	bl	801af90 <HAL_RCC_GetHCLKFreq>
 801afac:	0001      	movs	r1, r0
 801afae:	4b06      	ldr	r3, [pc, #24]	@ (801afc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801afb0:	68db      	ldr	r3, [r3, #12]
 801afb2:	0a1b      	lsrs	r3, r3, #8
 801afb4:	2207      	movs	r2, #7
 801afb6:	4013      	ands	r3, r2
 801afb8:	4a04      	ldr	r2, [pc, #16]	@ (801afcc <HAL_RCC_GetPCLK1Freq+0x28>)
 801afba:	5cd3      	ldrb	r3, [r2, r3]
 801afbc:	40d9      	lsrs	r1, r3
 801afbe:	000b      	movs	r3, r1
}
 801afc0:	0018      	movs	r0, r3
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	46c0      	nop			@ (mov r8, r8)
 801afc8:	40021000 	.word	0x40021000
 801afcc:	0802db24 	.word	0x0802db24

0801afd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801afd4:	f7ff ffdc 	bl	801af90 <HAL_RCC_GetHCLKFreq>
 801afd8:	0001      	movs	r1, r0
 801afda:	4b06      	ldr	r3, [pc, #24]	@ (801aff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801afdc:	68db      	ldr	r3, [r3, #12]
 801afde:	0adb      	lsrs	r3, r3, #11
 801afe0:	2207      	movs	r2, #7
 801afe2:	4013      	ands	r3, r2
 801afe4:	4a04      	ldr	r2, [pc, #16]	@ (801aff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801afe6:	5cd3      	ldrb	r3, [r2, r3]
 801afe8:	40d9      	lsrs	r1, r3
 801afea:	000b      	movs	r3, r1
}
 801afec:	0018      	movs	r0, r3
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
 801aff2:	46c0      	nop			@ (mov r8, r8)
 801aff4:	40021000 	.word	0x40021000
 801aff8:	0802db24 	.word	0x0802db24

0801affc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b086      	sub	sp, #24
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801b004:	2017      	movs	r0, #23
 801b006:	183b      	adds	r3, r7, r0
 801b008:	2200      	movs	r2, #0
 801b00a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	2220      	movs	r2, #32
 801b012:	4013      	ands	r3, r2
 801b014:	d100      	bne.n	801b018 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801b016:	e0c7      	b.n	801b1a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b018:	4b9b      	ldr	r3, [pc, #620]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b01a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b01c:	2380      	movs	r3, #128	@ 0x80
 801b01e:	055b      	lsls	r3, r3, #21
 801b020:	4013      	ands	r3, r2
 801b022:	d109      	bne.n	801b038 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b024:	4b98      	ldr	r3, [pc, #608]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b028:	4b97      	ldr	r3, [pc, #604]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b02a:	2180      	movs	r1, #128	@ 0x80
 801b02c:	0549      	lsls	r1, r1, #21
 801b02e:	430a      	orrs	r2, r1
 801b030:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b032:	183b      	adds	r3, r7, r0
 801b034:	2201      	movs	r2, #1
 801b036:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b038:	4b94      	ldr	r3, [pc, #592]	@ (801b28c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	2380      	movs	r3, #128	@ 0x80
 801b03e:	005b      	lsls	r3, r3, #1
 801b040:	4013      	ands	r3, r2
 801b042:	d11a      	bne.n	801b07a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b044:	4b91      	ldr	r3, [pc, #580]	@ (801b28c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b046:	681a      	ldr	r2, [r3, #0]
 801b048:	4b90      	ldr	r3, [pc, #576]	@ (801b28c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b04a:	2180      	movs	r1, #128	@ 0x80
 801b04c:	0049      	lsls	r1, r1, #1
 801b04e:	430a      	orrs	r2, r1
 801b050:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b052:	f7f8 fd9f 	bl	8013b94 <HAL_GetTick>
 801b056:	0003      	movs	r3, r0
 801b058:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b05a:	e008      	b.n	801b06e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b05c:	f7f8 fd9a 	bl	8013b94 <HAL_GetTick>
 801b060:	0002      	movs	r2, r0
 801b062:	693b      	ldr	r3, [r7, #16]
 801b064:	1ad3      	subs	r3, r2, r3
 801b066:	2b64      	cmp	r3, #100	@ 0x64
 801b068:	d901      	bls.n	801b06e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801b06a:	2303      	movs	r3, #3
 801b06c:	e107      	b.n	801b27e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b06e:	4b87      	ldr	r3, [pc, #540]	@ (801b28c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	2380      	movs	r3, #128	@ 0x80
 801b074:	005b      	lsls	r3, r3, #1
 801b076:	4013      	ands	r3, r2
 801b078:	d0f0      	beq.n	801b05c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801b07a:	4b83      	ldr	r3, [pc, #524]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b07c:	681a      	ldr	r2, [r3, #0]
 801b07e:	23c0      	movs	r3, #192	@ 0xc0
 801b080:	039b      	lsls	r3, r3, #14
 801b082:	4013      	ands	r3, r2
 801b084:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	685a      	ldr	r2, [r3, #4]
 801b08a:	23c0      	movs	r3, #192	@ 0xc0
 801b08c:	039b      	lsls	r3, r3, #14
 801b08e:	4013      	ands	r3, r2
 801b090:	68fa      	ldr	r2, [r7, #12]
 801b092:	429a      	cmp	r2, r3
 801b094:	d013      	beq.n	801b0be <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	685a      	ldr	r2, [r3, #4]
 801b09a:	23c0      	movs	r3, #192	@ 0xc0
 801b09c:	029b      	lsls	r3, r3, #10
 801b09e:	401a      	ands	r2, r3
 801b0a0:	23c0      	movs	r3, #192	@ 0xc0
 801b0a2:	029b      	lsls	r3, r3, #10
 801b0a4:	429a      	cmp	r2, r3
 801b0a6:	d10a      	bne.n	801b0be <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801b0a8:	4b77      	ldr	r3, [pc, #476]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0aa:	681a      	ldr	r2, [r3, #0]
 801b0ac:	2380      	movs	r3, #128	@ 0x80
 801b0ae:	029b      	lsls	r3, r3, #10
 801b0b0:	401a      	ands	r2, r3
 801b0b2:	2380      	movs	r3, #128	@ 0x80
 801b0b4:	029b      	lsls	r3, r3, #10
 801b0b6:	429a      	cmp	r2, r3
 801b0b8:	d101      	bne.n	801b0be <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801b0ba:	2301      	movs	r3, #1
 801b0bc:	e0df      	b.n	801b27e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801b0be:	4b72      	ldr	r3, [pc, #456]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b0c2:	23c0      	movs	r3, #192	@ 0xc0
 801b0c4:	029b      	lsls	r3, r3, #10
 801b0c6:	4013      	ands	r3, r2
 801b0c8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d03b      	beq.n	801b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	685a      	ldr	r2, [r3, #4]
 801b0d4:	23c0      	movs	r3, #192	@ 0xc0
 801b0d6:	029b      	lsls	r3, r3, #10
 801b0d8:	4013      	ands	r3, r2
 801b0da:	68fa      	ldr	r2, [r7, #12]
 801b0dc:	429a      	cmp	r2, r3
 801b0de:	d033      	beq.n	801b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	2220      	movs	r2, #32
 801b0e6:	4013      	ands	r3, r2
 801b0e8:	d02e      	beq.n	801b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801b0ea:	4b67      	ldr	r3, [pc, #412]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b0ee:	4a68      	ldr	r2, [pc, #416]	@ (801b290 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b0f0:	4013      	ands	r3, r2
 801b0f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801b0f4:	4b64      	ldr	r3, [pc, #400]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b0f8:	4b63      	ldr	r3, [pc, #396]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b0fa:	2180      	movs	r1, #128	@ 0x80
 801b0fc:	0309      	lsls	r1, r1, #12
 801b0fe:	430a      	orrs	r2, r1
 801b100:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801b102:	4b61      	ldr	r3, [pc, #388]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b106:	4b60      	ldr	r3, [pc, #384]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b108:	4962      	ldr	r1, [pc, #392]	@ (801b294 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801b10a:	400a      	ands	r2, r1
 801b10c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801b10e:	4b5e      	ldr	r3, [pc, #376]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b110:	68fa      	ldr	r2, [r7, #12]
 801b112:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801b114:	68fa      	ldr	r2, [r7, #12]
 801b116:	2380      	movs	r3, #128	@ 0x80
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	4013      	ands	r3, r2
 801b11c:	d014      	beq.n	801b148 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b11e:	f7f8 fd39 	bl	8013b94 <HAL_GetTick>
 801b122:	0003      	movs	r3, r0
 801b124:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b126:	e009      	b.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b128:	f7f8 fd34 	bl	8013b94 <HAL_GetTick>
 801b12c:	0002      	movs	r2, r0
 801b12e:	693b      	ldr	r3, [r7, #16]
 801b130:	1ad3      	subs	r3, r2, r3
 801b132:	4a59      	ldr	r2, [pc, #356]	@ (801b298 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801b134:	4293      	cmp	r3, r2
 801b136:	d901      	bls.n	801b13c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801b138:	2303      	movs	r3, #3
 801b13a:	e0a0      	b.n	801b27e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b13c:	4b52      	ldr	r3, [pc, #328]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b13e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b140:	2380      	movs	r3, #128	@ 0x80
 801b142:	009b      	lsls	r3, r3, #2
 801b144:	4013      	ands	r3, r2
 801b146:	d0ef      	beq.n	801b128 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	2220      	movs	r2, #32
 801b14e:	4013      	ands	r3, r2
 801b150:	d01f      	beq.n	801b192 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	685a      	ldr	r2, [r3, #4]
 801b156:	23c0      	movs	r3, #192	@ 0xc0
 801b158:	029b      	lsls	r3, r3, #10
 801b15a:	401a      	ands	r2, r3
 801b15c:	23c0      	movs	r3, #192	@ 0xc0
 801b15e:	029b      	lsls	r3, r3, #10
 801b160:	429a      	cmp	r2, r3
 801b162:	d10c      	bne.n	801b17e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801b164:	4b48      	ldr	r3, [pc, #288]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	4a4c      	ldr	r2, [pc, #304]	@ (801b29c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801b16a:	4013      	ands	r3, r2
 801b16c:	0019      	movs	r1, r3
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	685a      	ldr	r2, [r3, #4]
 801b172:	23c0      	movs	r3, #192	@ 0xc0
 801b174:	039b      	lsls	r3, r3, #14
 801b176:	401a      	ands	r2, r3
 801b178:	4b43      	ldr	r3, [pc, #268]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b17a:	430a      	orrs	r2, r1
 801b17c:	601a      	str	r2, [r3, #0]
 801b17e:	4b42      	ldr	r3, [pc, #264]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b180:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	685a      	ldr	r2, [r3, #4]
 801b186:	23c0      	movs	r3, #192	@ 0xc0
 801b188:	029b      	lsls	r3, r3, #10
 801b18a:	401a      	ands	r2, r3
 801b18c:	4b3e      	ldr	r3, [pc, #248]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b18e:	430a      	orrs	r2, r1
 801b190:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b192:	2317      	movs	r3, #23
 801b194:	18fb      	adds	r3, r7, r3
 801b196:	781b      	ldrb	r3, [r3, #0]
 801b198:	2b01      	cmp	r3, #1
 801b19a:	d105      	bne.n	801b1a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b19c:	4b3a      	ldr	r3, [pc, #232]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b19e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b1a0:	4b39      	ldr	r3, [pc, #228]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1a2:	493f      	ldr	r1, [pc, #252]	@ (801b2a0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801b1a4:	400a      	ands	r2, r1
 801b1a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	2201      	movs	r2, #1
 801b1ae:	4013      	ands	r3, r2
 801b1b0:	d009      	beq.n	801b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b1b2:	4b35      	ldr	r3, [pc, #212]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1b6:	2203      	movs	r2, #3
 801b1b8:	4393      	bics	r3, r2
 801b1ba:	0019      	movs	r1, r3
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	689a      	ldr	r2, [r3, #8]
 801b1c0:	4b31      	ldr	r3, [pc, #196]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1c2:	430a      	orrs	r2, r1
 801b1c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	2202      	movs	r2, #2
 801b1cc:	4013      	ands	r3, r2
 801b1ce:	d009      	beq.n	801b1e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b1d0:	4b2d      	ldr	r3, [pc, #180]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1d4:	220c      	movs	r2, #12
 801b1d6:	4393      	bics	r3, r2
 801b1d8:	0019      	movs	r1, r3
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	68da      	ldr	r2, [r3, #12]
 801b1de:	4b2a      	ldr	r3, [pc, #168]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1e0:	430a      	orrs	r2, r1
 801b1e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	2204      	movs	r2, #4
 801b1ea:	4013      	ands	r3, r2
 801b1ec:	d009      	beq.n	801b202 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b1ee:	4b26      	ldr	r3, [pc, #152]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1f2:	4a2c      	ldr	r2, [pc, #176]	@ (801b2a4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801b1f4:	4013      	ands	r3, r2
 801b1f6:	0019      	movs	r1, r3
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	691a      	ldr	r2, [r3, #16]
 801b1fc:	4b22      	ldr	r3, [pc, #136]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b1fe:	430a      	orrs	r2, r1
 801b200:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2208      	movs	r2, #8
 801b208:	4013      	ands	r3, r2
 801b20a:	d009      	beq.n	801b220 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b20c:	4b1e      	ldr	r3, [pc, #120]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b20e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b210:	4a25      	ldr	r2, [pc, #148]	@ (801b2a8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801b212:	4013      	ands	r3, r2
 801b214:	0019      	movs	r1, r3
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	695a      	ldr	r2, [r3, #20]
 801b21a:	4b1b      	ldr	r3, [pc, #108]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b21c:	430a      	orrs	r2, r1
 801b21e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	2380      	movs	r3, #128	@ 0x80
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	4013      	ands	r3, r2
 801b22a:	d009      	beq.n	801b240 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801b22c:	4b16      	ldr	r3, [pc, #88]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b22e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b230:	4a17      	ldr	r2, [pc, #92]	@ (801b290 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801b232:	4013      	ands	r3, r2
 801b234:	0019      	movs	r1, r3
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	699a      	ldr	r2, [r3, #24]
 801b23a:	4b13      	ldr	r3, [pc, #76]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b23c:	430a      	orrs	r2, r1
 801b23e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	2240      	movs	r2, #64	@ 0x40
 801b246:	4013      	ands	r3, r2
 801b248:	d009      	beq.n	801b25e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801b24a:	4b0f      	ldr	r3, [pc, #60]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b24c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b24e:	4a17      	ldr	r2, [pc, #92]	@ (801b2ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801b250:	4013      	ands	r3, r2
 801b252:	0019      	movs	r1, r3
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	6a1a      	ldr	r2, [r3, #32]
 801b258:	4b0b      	ldr	r3, [pc, #44]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b25a:	430a      	orrs	r2, r1
 801b25c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	2280      	movs	r2, #128	@ 0x80
 801b264:	4013      	ands	r3, r2
 801b266:	d009      	beq.n	801b27c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801b268:	4b07      	ldr	r3, [pc, #28]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b26a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b26c:	4a10      	ldr	r2, [pc, #64]	@ (801b2b0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801b26e:	4013      	ands	r3, r2
 801b270:	0019      	movs	r1, r3
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	69da      	ldr	r2, [r3, #28]
 801b276:	4b04      	ldr	r3, [pc, #16]	@ (801b288 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801b278:	430a      	orrs	r2, r1
 801b27a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801b27c:	2300      	movs	r3, #0
}
 801b27e:	0018      	movs	r0, r3
 801b280:	46bd      	mov	sp, r7
 801b282:	b006      	add	sp, #24
 801b284:	bd80      	pop	{r7, pc}
 801b286:	46c0      	nop			@ (mov r8, r8)
 801b288:	40021000 	.word	0x40021000
 801b28c:	40007000 	.word	0x40007000
 801b290:	fffcffff 	.word	0xfffcffff
 801b294:	fff7ffff 	.word	0xfff7ffff
 801b298:	00001388 	.word	0x00001388
 801b29c:	ffcfffff 	.word	0xffcfffff
 801b2a0:	efffffff 	.word	0xefffffff
 801b2a4:	fffff3ff 	.word	0xfffff3ff
 801b2a8:	ffffcfff 	.word	0xffffcfff
 801b2ac:	fbffffff 	.word	0xfbffffff
 801b2b0:	fff3ffff 	.word	0xfff3ffff

0801b2b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801b2b4:	b5b0      	push	{r4, r5, r7, lr}
 801b2b6:	b084      	sub	sp, #16
 801b2b8:	af00      	add	r7, sp, #0
 801b2ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801b2bc:	230f      	movs	r3, #15
 801b2be:	18fb      	adds	r3, r7, r3
 801b2c0:	2201      	movs	r2, #1
 801b2c2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d101      	bne.n	801b2ce <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801b2ca:	2301      	movs	r3, #1
 801b2cc:	e088      	b.n	801b3e0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	2221      	movs	r2, #33	@ 0x21
 801b2d2:	5c9b      	ldrb	r3, [r3, r2]
 801b2d4:	b2db      	uxtb	r3, r3
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d107      	bne.n	801b2ea <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	2220      	movs	r2, #32
 801b2de:	2100      	movs	r1, #0
 801b2e0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	0018      	movs	r0, r3
 801b2e6:	f7f2 fb39 	bl	800d95c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	2221      	movs	r2, #33	@ 0x21
 801b2ee:	2102      	movs	r1, #2
 801b2f0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	68db      	ldr	r3, [r3, #12]
 801b2f8:	2210      	movs	r2, #16
 801b2fa:	4013      	ands	r3, r2
 801b2fc:	2b10      	cmp	r3, #16
 801b2fe:	d05f      	beq.n	801b3c0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	681b      	ldr	r3, [r3, #0]
 801b304:	22ca      	movs	r2, #202	@ 0xca
 801b306:	625a      	str	r2, [r3, #36]	@ 0x24
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	2253      	movs	r2, #83	@ 0x53
 801b30e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801b310:	250f      	movs	r5, #15
 801b312:	197c      	adds	r4, r7, r5
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	0018      	movs	r0, r3
 801b318:	f000 fa7c 	bl	801b814 <RTC_EnterInitMode>
 801b31c:	0003      	movs	r3, r0
 801b31e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801b320:	0028      	movs	r0, r5
 801b322:	183b      	adds	r3, r7, r0
 801b324:	781b      	ldrb	r3, [r3, #0]
 801b326:	2b00      	cmp	r3, #0
 801b328:	d12c      	bne.n	801b384 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	689a      	ldr	r2, [r3, #8]
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	492c      	ldr	r1, [pc, #176]	@ (801b3e8 <HAL_RTC_Init+0x134>)
 801b336:	400a      	ands	r2, r1
 801b338:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	6899      	ldr	r1, [r3, #8]
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	685a      	ldr	r2, [r3, #4]
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	691b      	ldr	r3, [r3, #16]
 801b348:	431a      	orrs	r2, r3
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	699b      	ldr	r3, [r3, #24]
 801b34e:	431a      	orrs	r2, r3
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	430a      	orrs	r2, r1
 801b356:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	68d2      	ldr	r2, [r2, #12]
 801b360:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	6919      	ldr	r1, [r3, #16]
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	689b      	ldr	r3, [r3, #8]
 801b36c:	041a      	lsls	r2, r3, #16
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	430a      	orrs	r2, r1
 801b374:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801b376:	183c      	adds	r4, r7, r0
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	0018      	movs	r0, r3
 801b37c:	f000 fa8e 	bl	801b89c <RTC_ExitInitMode>
 801b380:	0003      	movs	r3, r0
 801b382:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801b384:	230f      	movs	r3, #15
 801b386:	18fb      	adds	r3, r7, r3
 801b388:	781b      	ldrb	r3, [r3, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d113      	bne.n	801b3b6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	2103      	movs	r1, #3
 801b39a:	438a      	bics	r2, r1
 801b39c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	69da      	ldr	r2, [r3, #28]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	695b      	ldr	r3, [r3, #20]
 801b3ac:	431a      	orrs	r2, r3
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	430a      	orrs	r2, r1
 801b3b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	22ff      	movs	r2, #255	@ 0xff
 801b3bc:	625a      	str	r2, [r3, #36]	@ 0x24
 801b3be:	e003      	b.n	801b3c8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801b3c0:	230f      	movs	r3, #15
 801b3c2:	18fb      	adds	r3, r7, r3
 801b3c4:	2200      	movs	r2, #0
 801b3c6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801b3c8:	230f      	movs	r3, #15
 801b3ca:	18fb      	adds	r3, r7, r3
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d103      	bne.n	801b3da <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	2221      	movs	r2, #33	@ 0x21
 801b3d6:	2101      	movs	r1, #1
 801b3d8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801b3da:	230f      	movs	r3, #15
 801b3dc:	18fb      	adds	r3, r7, r3
 801b3de:	781b      	ldrb	r3, [r3, #0]
}
 801b3e0:	0018      	movs	r0, r3
 801b3e2:	46bd      	mov	sp, r7
 801b3e4:	b004      	add	sp, #16
 801b3e6:	bdb0      	pop	{r4, r5, r7, pc}
 801b3e8:	ff8fffbf 	.word	0xff8fffbf

0801b3ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b3ec:	b5b0      	push	{r4, r5, r7, lr}
 801b3ee:	b086      	sub	sp, #24
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	60f8      	str	r0, [r7, #12]
 801b3f4:	60b9      	str	r1, [r7, #8]
 801b3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	2220      	movs	r2, #32
 801b400:	5c9b      	ldrb	r3, [r3, r2]
 801b402:	2b01      	cmp	r3, #1
 801b404:	d101      	bne.n	801b40a <HAL_RTC_SetTime+0x1e>
 801b406:	2302      	movs	r3, #2
 801b408:	e092      	b.n	801b530 <HAL_RTC_SetTime+0x144>
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	2220      	movs	r2, #32
 801b40e:	2101      	movs	r1, #1
 801b410:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	2221      	movs	r2, #33	@ 0x21
 801b416:	2102      	movs	r1, #2
 801b418:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d125      	bne.n	801b46c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	689b      	ldr	r3, [r3, #8]
 801b426:	2240      	movs	r2, #64	@ 0x40
 801b428:	4013      	ands	r3, r2
 801b42a:	d102      	bne.n	801b432 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b42c:	68bb      	ldr	r3, [r7, #8]
 801b42e:	2200      	movs	r2, #0
 801b430:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	781b      	ldrb	r3, [r3, #0]
 801b436:	0018      	movs	r0, r3
 801b438:	f000 fa5a 	bl	801b8f0 <RTC_ByteToBcd2>
 801b43c:	0003      	movs	r3, r0
 801b43e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	785b      	ldrb	r3, [r3, #1]
 801b444:	0018      	movs	r0, r3
 801b446:	f000 fa53 	bl	801b8f0 <RTC_ByteToBcd2>
 801b44a:	0003      	movs	r3, r0
 801b44c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b44e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	789b      	ldrb	r3, [r3, #2]
 801b454:	0018      	movs	r0, r3
 801b456:	f000 fa4b 	bl	801b8f0 <RTC_ByteToBcd2>
 801b45a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801b45c:	0022      	movs	r2, r4
 801b45e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801b460:	68bb      	ldr	r3, [r7, #8]
 801b462:	78db      	ldrb	r3, [r3, #3]
 801b464:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801b466:	4313      	orrs	r3, r2
 801b468:	617b      	str	r3, [r7, #20]
 801b46a:	e017      	b.n	801b49c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801b46c:	68fb      	ldr	r3, [r7, #12]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	689b      	ldr	r3, [r3, #8]
 801b472:	2240      	movs	r2, #64	@ 0x40
 801b474:	4013      	ands	r3, r2
 801b476:	d102      	bne.n	801b47e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801b478:	68bb      	ldr	r3, [r7, #8]
 801b47a:	2200      	movs	r2, #0
 801b47c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b47e:	68bb      	ldr	r3, [r7, #8]
 801b480:	781b      	ldrb	r3, [r3, #0]
 801b482:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b484:	68bb      	ldr	r3, [r7, #8]
 801b486:	785b      	ldrb	r3, [r3, #1]
 801b488:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b48a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801b48c:	68ba      	ldr	r2, [r7, #8]
 801b48e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801b490:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801b492:	68bb      	ldr	r3, [r7, #8]
 801b494:	78db      	ldrb	r3, [r3, #3]
 801b496:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801b498:	4313      	orrs	r3, r2
 801b49a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	22ca      	movs	r2, #202	@ 0xca
 801b4a2:	625a      	str	r2, [r3, #36]	@ 0x24
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	2253      	movs	r2, #83	@ 0x53
 801b4aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b4ac:	2513      	movs	r5, #19
 801b4ae:	197c      	adds	r4, r7, r5
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	0018      	movs	r0, r3
 801b4b4:	f000 f9ae 	bl	801b814 <RTC_EnterInitMode>
 801b4b8:	0003      	movs	r3, r0
 801b4ba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b4bc:	0028      	movs	r0, r5
 801b4be:	183b      	adds	r3, r7, r0
 801b4c0:	781b      	ldrb	r3, [r3, #0]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d120      	bne.n	801b508 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	697a      	ldr	r2, [r7, #20]
 801b4cc:	491a      	ldr	r1, [pc, #104]	@ (801b538 <HAL_RTC_SetTime+0x14c>)
 801b4ce:	400a      	ands	r2, r1
 801b4d0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	689a      	ldr	r2, [r3, #8]
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	4917      	ldr	r1, [pc, #92]	@ (801b53c <HAL_RTC_SetTime+0x150>)
 801b4de:	400a      	ands	r2, r1
 801b4e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801b4e2:	68fb      	ldr	r3, [r7, #12]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	6899      	ldr	r1, [r3, #8]
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	68da      	ldr	r2, [r3, #12]
 801b4ec:	68bb      	ldr	r3, [r7, #8]
 801b4ee:	691b      	ldr	r3, [r3, #16]
 801b4f0:	431a      	orrs	r2, r3
 801b4f2:	68fb      	ldr	r3, [r7, #12]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	430a      	orrs	r2, r1
 801b4f8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b4fa:	183c      	adds	r4, r7, r0
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	0018      	movs	r0, r3
 801b500:	f000 f9cc 	bl	801b89c <RTC_ExitInitMode>
 801b504:	0003      	movs	r3, r0
 801b506:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b508:	2313      	movs	r3, #19
 801b50a:	18fb      	adds	r3, r7, r3
 801b50c:	781b      	ldrb	r3, [r3, #0]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d103      	bne.n	801b51a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	2221      	movs	r2, #33	@ 0x21
 801b516:	2101      	movs	r1, #1
 801b518:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	22ff      	movs	r2, #255	@ 0xff
 801b520:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b522:	68fb      	ldr	r3, [r7, #12]
 801b524:	2220      	movs	r2, #32
 801b526:	2100      	movs	r1, #0
 801b528:	5499      	strb	r1, [r3, r2]

  return status;
 801b52a:	2313      	movs	r3, #19
 801b52c:	18fb      	adds	r3, r7, r3
 801b52e:	781b      	ldrb	r3, [r3, #0]
}
 801b530:	0018      	movs	r0, r3
 801b532:	46bd      	mov	sp, r7
 801b534:	b006      	add	sp, #24
 801b536:	bdb0      	pop	{r4, r5, r7, pc}
 801b538:	007f7f7f 	.word	0x007f7f7f
 801b53c:	fffbffff 	.word	0xfffbffff

0801b540 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b086      	sub	sp, #24
 801b544:	af00      	add	r7, sp, #0
 801b546:	60f8      	str	r0, [r7, #12]
 801b548:	60b9      	str	r1, [r7, #8]
 801b54a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801b54c:	2300      	movs	r3, #0
 801b54e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801b556:	68bb      	ldr	r3, [r7, #8]
 801b558:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	691b      	ldr	r3, [r3, #16]
 801b560:	045b      	lsls	r3, r3, #17
 801b562:	0c5a      	lsrs	r2, r3, #17
 801b564:	68bb      	ldr	r3, [r7, #8]
 801b566:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801b568:	68fb      	ldr	r3, [r7, #12]
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	4a22      	ldr	r2, [pc, #136]	@ (801b5f8 <HAL_RTC_GetTime+0xb8>)
 801b570:	4013      	ands	r3, r2
 801b572:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	0c1b      	lsrs	r3, r3, #16
 801b578:	b2db      	uxtb	r3, r3
 801b57a:	223f      	movs	r2, #63	@ 0x3f
 801b57c:	4013      	ands	r3, r2
 801b57e:	b2da      	uxtb	r2, r3
 801b580:	68bb      	ldr	r3, [r7, #8]
 801b582:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	0a1b      	lsrs	r3, r3, #8
 801b588:	b2db      	uxtb	r3, r3
 801b58a:	227f      	movs	r2, #127	@ 0x7f
 801b58c:	4013      	ands	r3, r2
 801b58e:	b2da      	uxtb	r2, r3
 801b590:	68bb      	ldr	r3, [r7, #8]
 801b592:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	b2db      	uxtb	r3, r3
 801b598:	227f      	movs	r2, #127	@ 0x7f
 801b59a:	4013      	ands	r3, r2
 801b59c:	b2da      	uxtb	r2, r3
 801b59e:	68bb      	ldr	r3, [r7, #8]
 801b5a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	0d9b      	lsrs	r3, r3, #22
 801b5a6:	b2db      	uxtb	r3, r3
 801b5a8:	2201      	movs	r2, #1
 801b5aa:	4013      	ands	r3, r2
 801b5ac:	b2da      	uxtb	r2, r3
 801b5ae:	68bb      	ldr	r3, [r7, #8]
 801b5b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d11a      	bne.n	801b5ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	0018      	movs	r0, r3
 801b5be:	f000 f9b8 	bl	801b932 <RTC_Bcd2ToByte>
 801b5c2:	0003      	movs	r3, r0
 801b5c4:	001a      	movs	r2, r3
 801b5c6:	68bb      	ldr	r3, [r7, #8]
 801b5c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801b5ca:	68bb      	ldr	r3, [r7, #8]
 801b5cc:	785b      	ldrb	r3, [r3, #1]
 801b5ce:	0018      	movs	r0, r3
 801b5d0:	f000 f9af 	bl	801b932 <RTC_Bcd2ToByte>
 801b5d4:	0003      	movs	r3, r0
 801b5d6:	001a      	movs	r2, r3
 801b5d8:	68bb      	ldr	r3, [r7, #8]
 801b5da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801b5dc:	68bb      	ldr	r3, [r7, #8]
 801b5de:	789b      	ldrb	r3, [r3, #2]
 801b5e0:	0018      	movs	r0, r3
 801b5e2:	f000 f9a6 	bl	801b932 <RTC_Bcd2ToByte>
 801b5e6:	0003      	movs	r3, r0
 801b5e8:	001a      	movs	r2, r3
 801b5ea:	68bb      	ldr	r3, [r7, #8]
 801b5ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801b5ee:	2300      	movs	r3, #0
}
 801b5f0:	0018      	movs	r0, r3
 801b5f2:	46bd      	mov	sp, r7
 801b5f4:	b006      	add	sp, #24
 801b5f6:	bd80      	pop	{r7, pc}
 801b5f8:	007f7f7f 	.word	0x007f7f7f

0801b5fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b5fc:	b5b0      	push	{r4, r5, r7, lr}
 801b5fe:	b086      	sub	sp, #24
 801b600:	af00      	add	r7, sp, #0
 801b602:	60f8      	str	r0, [r7, #12]
 801b604:	60b9      	str	r1, [r7, #8]
 801b606:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b608:	2300      	movs	r3, #0
 801b60a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b60c:	68fb      	ldr	r3, [r7, #12]
 801b60e:	2220      	movs	r2, #32
 801b610:	5c9b      	ldrb	r3, [r3, r2]
 801b612:	2b01      	cmp	r3, #1
 801b614:	d101      	bne.n	801b61a <HAL_RTC_SetDate+0x1e>
 801b616:	2302      	movs	r3, #2
 801b618:	e07e      	b.n	801b718 <HAL_RTC_SetDate+0x11c>
 801b61a:	68fb      	ldr	r3, [r7, #12]
 801b61c:	2220      	movs	r2, #32
 801b61e:	2101      	movs	r1, #1
 801b620:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	2221      	movs	r2, #33	@ 0x21
 801b626:	2102      	movs	r1, #2
 801b628:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	d10e      	bne.n	801b64e <HAL_RTC_SetDate+0x52>
 801b630:	68bb      	ldr	r3, [r7, #8]
 801b632:	785b      	ldrb	r3, [r3, #1]
 801b634:	001a      	movs	r2, r3
 801b636:	2310      	movs	r3, #16
 801b638:	4013      	ands	r3, r2
 801b63a:	d008      	beq.n	801b64e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801b63c:	68bb      	ldr	r3, [r7, #8]
 801b63e:	785b      	ldrb	r3, [r3, #1]
 801b640:	2210      	movs	r2, #16
 801b642:	4393      	bics	r3, r2
 801b644:	b2db      	uxtb	r3, r3
 801b646:	330a      	adds	r3, #10
 801b648:	b2da      	uxtb	r2, r3
 801b64a:	68bb      	ldr	r3, [r7, #8]
 801b64c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d11c      	bne.n	801b68e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	78db      	ldrb	r3, [r3, #3]
 801b658:	0018      	movs	r0, r3
 801b65a:	f000 f949 	bl	801b8f0 <RTC_ByteToBcd2>
 801b65e:	0003      	movs	r3, r0
 801b660:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	785b      	ldrb	r3, [r3, #1]
 801b666:	0018      	movs	r0, r3
 801b668:	f000 f942 	bl	801b8f0 <RTC_ByteToBcd2>
 801b66c:	0003      	movs	r3, r0
 801b66e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b670:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	789b      	ldrb	r3, [r3, #2]
 801b676:	0018      	movs	r0, r3
 801b678:	f000 f93a 	bl	801b8f0 <RTC_ByteToBcd2>
 801b67c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801b67e:	0022      	movs	r2, r4
 801b680:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801b682:	68bb      	ldr	r3, [r7, #8]
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801b688:	4313      	orrs	r3, r2
 801b68a:	617b      	str	r3, [r7, #20]
 801b68c:	e00e      	b.n	801b6ac <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	78db      	ldrb	r3, [r3, #3]
 801b692:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b694:	68bb      	ldr	r3, [r7, #8]
 801b696:	785b      	ldrb	r3, [r3, #1]
 801b698:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b69a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801b69c:	68ba      	ldr	r2, [r7, #8]
 801b69e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801b6a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801b6a2:	68bb      	ldr	r3, [r7, #8]
 801b6a4:	781b      	ldrb	r3, [r3, #0]
 801b6a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801b6a8:	4313      	orrs	r3, r2
 801b6aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	22ca      	movs	r2, #202	@ 0xca
 801b6b2:	625a      	str	r2, [r3, #36]	@ 0x24
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	2253      	movs	r2, #83	@ 0x53
 801b6ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801b6bc:	2513      	movs	r5, #19
 801b6be:	197c      	adds	r4, r7, r5
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	0018      	movs	r0, r3
 801b6c4:	f000 f8a6 	bl	801b814 <RTC_EnterInitMode>
 801b6c8:	0003      	movs	r3, r0
 801b6ca:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801b6cc:	0028      	movs	r0, r5
 801b6ce:	183b      	adds	r3, r7, r0
 801b6d0:	781b      	ldrb	r3, [r3, #0]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d10c      	bne.n	801b6f0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801b6d6:	68fb      	ldr	r3, [r7, #12]
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	697a      	ldr	r2, [r7, #20]
 801b6dc:	4910      	ldr	r1, [pc, #64]	@ (801b720 <HAL_RTC_SetDate+0x124>)
 801b6de:	400a      	ands	r2, r1
 801b6e0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801b6e2:	183c      	adds	r4, r7, r0
 801b6e4:	68fb      	ldr	r3, [r7, #12]
 801b6e6:	0018      	movs	r0, r3
 801b6e8:	f000 f8d8 	bl	801b89c <RTC_ExitInitMode>
 801b6ec:	0003      	movs	r3, r0
 801b6ee:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801b6f0:	2313      	movs	r3, #19
 801b6f2:	18fb      	adds	r3, r7, r3
 801b6f4:	781b      	ldrb	r3, [r3, #0]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d103      	bne.n	801b702 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801b6fa:	68fb      	ldr	r3, [r7, #12]
 801b6fc:	2221      	movs	r2, #33	@ 0x21
 801b6fe:	2101      	movs	r1, #1
 801b700:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b702:	68fb      	ldr	r3, [r7, #12]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	22ff      	movs	r2, #255	@ 0xff
 801b708:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801b70a:	68fb      	ldr	r3, [r7, #12]
 801b70c:	2220      	movs	r2, #32
 801b70e:	2100      	movs	r1, #0
 801b710:	5499      	strb	r1, [r3, r2]

  return status;
 801b712:	2313      	movs	r3, #19
 801b714:	18fb      	adds	r3, r7, r3
 801b716:	781b      	ldrb	r3, [r3, #0]
}
 801b718:	0018      	movs	r0, r3
 801b71a:	46bd      	mov	sp, r7
 801b71c:	b006      	add	sp, #24
 801b71e:	bdb0      	pop	{r4, r5, r7, pc}
 801b720:	00ffff3f 	.word	0x00ffff3f

0801b724 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b086      	sub	sp, #24
 801b728:	af00      	add	r7, sp, #0
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	60b9      	str	r1, [r7, #8]
 801b72e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801b730:	2300      	movs	r3, #0
 801b732:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801b734:	68fb      	ldr	r3, [r7, #12]
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	685b      	ldr	r3, [r3, #4]
 801b73a:	4a21      	ldr	r2, [pc, #132]	@ (801b7c0 <HAL_RTC_GetDate+0x9c>)
 801b73c:	4013      	ands	r3, r2
 801b73e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	0c1b      	lsrs	r3, r3, #16
 801b744:	b2da      	uxtb	r2, r3
 801b746:	68bb      	ldr	r3, [r7, #8]
 801b748:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801b74a:	697b      	ldr	r3, [r7, #20]
 801b74c:	0a1b      	lsrs	r3, r3, #8
 801b74e:	b2db      	uxtb	r3, r3
 801b750:	221f      	movs	r2, #31
 801b752:	4013      	ands	r3, r2
 801b754:	b2da      	uxtb	r2, r3
 801b756:	68bb      	ldr	r3, [r7, #8]
 801b758:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801b75a:	697b      	ldr	r3, [r7, #20]
 801b75c:	b2db      	uxtb	r3, r3
 801b75e:	223f      	movs	r2, #63	@ 0x3f
 801b760:	4013      	ands	r3, r2
 801b762:	b2da      	uxtb	r2, r3
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	0b5b      	lsrs	r3, r3, #13
 801b76c:	b2db      	uxtb	r3, r3
 801b76e:	2207      	movs	r2, #7
 801b770:	4013      	ands	r3, r2
 801b772:	b2da      	uxtb	r2, r3
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801b778:	687b      	ldr	r3, [r7, #4]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d11a      	bne.n	801b7b4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	78db      	ldrb	r3, [r3, #3]
 801b782:	0018      	movs	r0, r3
 801b784:	f000 f8d5 	bl	801b932 <RTC_Bcd2ToByte>
 801b788:	0003      	movs	r3, r0
 801b78a:	001a      	movs	r2, r3
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	785b      	ldrb	r3, [r3, #1]
 801b794:	0018      	movs	r0, r3
 801b796:	f000 f8cc 	bl	801b932 <RTC_Bcd2ToByte>
 801b79a:	0003      	movs	r3, r0
 801b79c:	001a      	movs	r2, r3
 801b79e:	68bb      	ldr	r3, [r7, #8]
 801b7a0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801b7a2:	68bb      	ldr	r3, [r7, #8]
 801b7a4:	789b      	ldrb	r3, [r3, #2]
 801b7a6:	0018      	movs	r0, r3
 801b7a8:	f000 f8c3 	bl	801b932 <RTC_Bcd2ToByte>
 801b7ac:	0003      	movs	r3, r0
 801b7ae:	001a      	movs	r2, r3
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801b7b4:	2300      	movs	r3, #0
}
 801b7b6:	0018      	movs	r0, r3
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	b006      	add	sp, #24
 801b7bc:	bd80      	pop	{r7, pc}
 801b7be:	46c0      	nop			@ (mov r8, r8)
 801b7c0:	00ffff3f 	.word	0x00ffff3f

0801b7c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b084      	sub	sp, #16
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	4a0e      	ldr	r2, [pc, #56]	@ (801b810 <HAL_RTC_WaitForSynchro+0x4c>)
 801b7d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801b7d8:	f7f8 f9dc 	bl	8013b94 <HAL_GetTick>
 801b7dc:	0003      	movs	r3, r0
 801b7de:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b7e0:	e00a      	b.n	801b7f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b7e2:	f7f8 f9d7 	bl	8013b94 <HAL_GetTick>
 801b7e6:	0002      	movs	r2, r0
 801b7e8:	68fb      	ldr	r3, [r7, #12]
 801b7ea:	1ad2      	subs	r2, r2, r3
 801b7ec:	23fa      	movs	r3, #250	@ 0xfa
 801b7ee:	009b      	lsls	r3, r3, #2
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	d901      	bls.n	801b7f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801b7f4:	2303      	movs	r3, #3
 801b7f6:	e006      	b.n	801b806 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	68db      	ldr	r3, [r3, #12]
 801b7fe:	2220      	movs	r2, #32
 801b800:	4013      	ands	r3, r2
 801b802:	d0ee      	beq.n	801b7e2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801b804:	2300      	movs	r3, #0
}
 801b806:	0018      	movs	r0, r3
 801b808:	46bd      	mov	sp, r7
 801b80a:	b004      	add	sp, #16
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	46c0      	nop			@ (mov r8, r8)
 801b810:	0001ff5f 	.word	0x0001ff5f

0801b814 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801b81c:	2300      	movs	r3, #0
 801b81e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801b820:	230f      	movs	r3, #15
 801b822:	18fb      	adds	r3, r7, r3
 801b824:	2200      	movs	r2, #0
 801b826:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	68db      	ldr	r3, [r3, #12]
 801b82e:	2240      	movs	r2, #64	@ 0x40
 801b830:	4013      	ands	r3, r2
 801b832:	d12c      	bne.n	801b88e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	68da      	ldr	r2, [r3, #12]
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	2180      	movs	r1, #128	@ 0x80
 801b840:	430a      	orrs	r2, r1
 801b842:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801b844:	f7f8 f9a6 	bl	8013b94 <HAL_GetTick>
 801b848:	0003      	movs	r3, r0
 801b84a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b84c:	e014      	b.n	801b878 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801b84e:	f7f8 f9a1 	bl	8013b94 <HAL_GetTick>
 801b852:	0002      	movs	r2, r0
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	1ad2      	subs	r2, r2, r3
 801b858:	200f      	movs	r0, #15
 801b85a:	183b      	adds	r3, r7, r0
 801b85c:	1839      	adds	r1, r7, r0
 801b85e:	7809      	ldrb	r1, [r1, #0]
 801b860:	7019      	strb	r1, [r3, #0]
 801b862:	23fa      	movs	r3, #250	@ 0xfa
 801b864:	009b      	lsls	r3, r3, #2
 801b866:	429a      	cmp	r2, r3
 801b868:	d906      	bls.n	801b878 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	2221      	movs	r2, #33	@ 0x21
 801b86e:	2104      	movs	r1, #4
 801b870:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801b872:	183b      	adds	r3, r7, r0
 801b874:	2201      	movs	r2, #1
 801b876:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801b878:	687b      	ldr	r3, [r7, #4]
 801b87a:	681b      	ldr	r3, [r3, #0]
 801b87c:	68db      	ldr	r3, [r3, #12]
 801b87e:	2240      	movs	r2, #64	@ 0x40
 801b880:	4013      	ands	r3, r2
 801b882:	d104      	bne.n	801b88e <RTC_EnterInitMode+0x7a>
 801b884:	230f      	movs	r3, #15
 801b886:	18fb      	adds	r3, r7, r3
 801b888:	781b      	ldrb	r3, [r3, #0]
 801b88a:	2b01      	cmp	r3, #1
 801b88c:	d1df      	bne.n	801b84e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801b88e:	230f      	movs	r3, #15
 801b890:	18fb      	adds	r3, r7, r3
 801b892:	781b      	ldrb	r3, [r3, #0]
}
 801b894:	0018      	movs	r0, r3
 801b896:	46bd      	mov	sp, r7
 801b898:	b004      	add	sp, #16
 801b89a:	bd80      	pop	{r7, pc}

0801b89c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801b89c:	b590      	push	{r4, r7, lr}
 801b89e:	b085      	sub	sp, #20
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b8a4:	240f      	movs	r4, #15
 801b8a6:	193b      	adds	r3, r7, r4
 801b8a8:	2200      	movs	r2, #0
 801b8aa:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	68da      	ldr	r2, [r3, #12]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	2180      	movs	r1, #128	@ 0x80
 801b8b8:	438a      	bics	r2, r1
 801b8ba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	689b      	ldr	r3, [r3, #8]
 801b8c2:	2220      	movs	r2, #32
 801b8c4:	4013      	ands	r3, r2
 801b8c6:	d10c      	bne.n	801b8e2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	0018      	movs	r0, r3
 801b8cc:	f7ff ff7a 	bl	801b7c4 <HAL_RTC_WaitForSynchro>
 801b8d0:	1e03      	subs	r3, r0, #0
 801b8d2:	d006      	beq.n	801b8e2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	2221      	movs	r2, #33	@ 0x21
 801b8d8:	2104      	movs	r1, #4
 801b8da:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801b8dc:	193b      	adds	r3, r7, r4
 801b8de:	2201      	movs	r2, #1
 801b8e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801b8e2:	230f      	movs	r3, #15
 801b8e4:	18fb      	adds	r3, r7, r3
 801b8e6:	781b      	ldrb	r3, [r3, #0]
}
 801b8e8:	0018      	movs	r0, r3
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	b005      	add	sp, #20
 801b8ee:	bd90      	pop	{r4, r7, pc}

0801b8f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801b8f0:	b580      	push	{r7, lr}
 801b8f2:	b084      	sub	sp, #16
 801b8f4:	af00      	add	r7, sp, #0
 801b8f6:	0002      	movs	r2, r0
 801b8f8:	1dfb      	adds	r3, r7, #7
 801b8fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801b900:	e007      	b.n	801b912 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801b902:	68fb      	ldr	r3, [r7, #12]
 801b904:	3301      	adds	r3, #1
 801b906:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801b908:	1dfb      	adds	r3, r7, #7
 801b90a:	1dfa      	adds	r2, r7, #7
 801b90c:	7812      	ldrb	r2, [r2, #0]
 801b90e:	3a0a      	subs	r2, #10
 801b910:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801b912:	1dfb      	adds	r3, r7, #7
 801b914:	781b      	ldrb	r3, [r3, #0]
 801b916:	2b09      	cmp	r3, #9
 801b918:	d8f3      	bhi.n	801b902 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801b91a:	68fb      	ldr	r3, [r7, #12]
 801b91c:	b2db      	uxtb	r3, r3
 801b91e:	011b      	lsls	r3, r3, #4
 801b920:	b2da      	uxtb	r2, r3
 801b922:	1dfb      	adds	r3, r7, #7
 801b924:	781b      	ldrb	r3, [r3, #0]
 801b926:	4313      	orrs	r3, r2
 801b928:	b2db      	uxtb	r3, r3
}
 801b92a:	0018      	movs	r0, r3
 801b92c:	46bd      	mov	sp, r7
 801b92e:	b004      	add	sp, #16
 801b930:	bd80      	pop	{r7, pc}

0801b932 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801b932:	b580      	push	{r7, lr}
 801b934:	b084      	sub	sp, #16
 801b936:	af00      	add	r7, sp, #0
 801b938:	0002      	movs	r2, r0
 801b93a:	1dfb      	adds	r3, r7, #7
 801b93c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801b93e:	2300      	movs	r3, #0
 801b940:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801b942:	1dfb      	adds	r3, r7, #7
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	091b      	lsrs	r3, r3, #4
 801b948:	b2db      	uxtb	r3, r3
 801b94a:	001a      	movs	r2, r3
 801b94c:	0013      	movs	r3, r2
 801b94e:	009b      	lsls	r3, r3, #2
 801b950:	189b      	adds	r3, r3, r2
 801b952:	005b      	lsls	r3, r3, #1
 801b954:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801b956:	68fb      	ldr	r3, [r7, #12]
 801b958:	b2da      	uxtb	r2, r3
 801b95a:	1dfb      	adds	r3, r7, #7
 801b95c:	781b      	ldrb	r3, [r3, #0]
 801b95e:	210f      	movs	r1, #15
 801b960:	400b      	ands	r3, r1
 801b962:	b2db      	uxtb	r3, r3
 801b964:	18d3      	adds	r3, r2, r3
 801b966:	b2db      	uxtb	r3, r3
}
 801b968:	0018      	movs	r0, r3
 801b96a:	46bd      	mov	sp, r7
 801b96c:	b004      	add	sp, #16
 801b96e:	bd80      	pop	{r7, pc}

0801b970 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801b970:	b580      	push	{r7, lr}
 801b972:	b086      	sub	sp, #24
 801b974:	af00      	add	r7, sp, #0
 801b976:	60f8      	str	r0, [r7, #12]
 801b978:	60b9      	str	r1, [r7, #8]
 801b97a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801b97c:	4b64      	ldr	r3, [pc, #400]	@ (801bb10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	22fa      	movs	r2, #250	@ 0xfa
 801b982:	01d1      	lsls	r1, r2, #7
 801b984:	0018      	movs	r0, r3
 801b986:	f7e4 fc0d 	bl	80001a4 <__udivsi3>
 801b98a:	0003      	movs	r3, r0
 801b98c:	001a      	movs	r2, r3
 801b98e:	0013      	movs	r3, r2
 801b990:	015b      	lsls	r3, r3, #5
 801b992:	1a9b      	subs	r3, r3, r2
 801b994:	009b      	lsls	r3, r3, #2
 801b996:	189b      	adds	r3, r3, r2
 801b998:	00db      	lsls	r3, r3, #3
 801b99a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801b99c:	68fb      	ldr	r3, [r7, #12]
 801b99e:	2220      	movs	r2, #32
 801b9a0:	5c9b      	ldrb	r3, [r3, r2]
 801b9a2:	2b01      	cmp	r3, #1
 801b9a4:	d101      	bne.n	801b9aa <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801b9a6:	2302      	movs	r3, #2
 801b9a8:	e0ad      	b.n	801bb06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	2220      	movs	r2, #32
 801b9ae:	2101      	movs	r1, #1
 801b9b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801b9b2:	68fb      	ldr	r3, [r7, #12]
 801b9b4:	2221      	movs	r2, #33	@ 0x21
 801b9b6:	2102      	movs	r1, #2
 801b9b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801b9ba:	68fb      	ldr	r3, [r7, #12]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	22ca      	movs	r2, #202	@ 0xca
 801b9c0:	625a      	str	r2, [r3, #36]	@ 0x24
 801b9c2:	68fb      	ldr	r3, [r7, #12]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	2253      	movs	r2, #83	@ 0x53
 801b9c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	689a      	ldr	r2, [r3, #8]
 801b9d0:	2380      	movs	r3, #128	@ 0x80
 801b9d2:	00db      	lsls	r3, r3, #3
 801b9d4:	4013      	ands	r3, r2
 801b9d6:	d019      	beq.n	801ba0c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801b9d8:	697b      	ldr	r3, [r7, #20]
 801b9da:	3b01      	subs	r3, #1
 801b9dc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801b9de:	697b      	ldr	r3, [r7, #20]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d10d      	bne.n	801ba00 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	22ff      	movs	r2, #255	@ 0xff
 801b9ea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	2221      	movs	r2, #33	@ 0x21
 801b9f0:	2103      	movs	r1, #3
 801b9f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	2220      	movs	r2, #32
 801b9f8:	2100      	movs	r1, #0
 801b9fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801b9fc:	2303      	movs	r3, #3
 801b9fe:	e082      	b.n	801bb06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801ba00:	68fb      	ldr	r3, [r7, #12]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	2204      	movs	r2, #4
 801ba08:	4013      	ands	r3, r2
 801ba0a:	d1e5      	bne.n	801b9d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	689a      	ldr	r2, [r3, #8]
 801ba12:	68fb      	ldr	r3, [r7, #12]
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	493f      	ldr	r1, [pc, #252]	@ (801bb14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801ba18:	400a      	ands	r2, r1
 801ba1a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	22ff      	movs	r2, #255	@ 0xff
 801ba24:	401a      	ands	r2, r3
 801ba26:	68fb      	ldr	r3, [r7, #12]
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	493b      	ldr	r1, [pc, #236]	@ (801bb18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801ba2c:	430a      	orrs	r2, r1
 801ba2e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801ba30:	4b37      	ldr	r3, [pc, #220]	@ (801bb10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	22fa      	movs	r2, #250	@ 0xfa
 801ba36:	01d1      	lsls	r1, r2, #7
 801ba38:	0018      	movs	r0, r3
 801ba3a:	f7e4 fbb3 	bl	80001a4 <__udivsi3>
 801ba3e:	0003      	movs	r3, r0
 801ba40:	001a      	movs	r2, r3
 801ba42:	0013      	movs	r3, r2
 801ba44:	015b      	lsls	r3, r3, #5
 801ba46:	1a9b      	subs	r3, r3, r2
 801ba48:	009b      	lsls	r3, r3, #2
 801ba4a:	189b      	adds	r3, r3, r2
 801ba4c:	00db      	lsls	r3, r3, #3
 801ba4e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801ba50:	697b      	ldr	r3, [r7, #20]
 801ba52:	3b01      	subs	r3, #1
 801ba54:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801ba56:	697b      	ldr	r3, [r7, #20]
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d10d      	bne.n	801ba78 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	22ff      	movs	r2, #255	@ 0xff
 801ba62:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	2221      	movs	r2, #33	@ 0x21
 801ba68:	2103      	movs	r1, #3
 801ba6a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	2220      	movs	r2, #32
 801ba70:	2100      	movs	r1, #0
 801ba72:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ba74:	2303      	movs	r3, #3
 801ba76:	e046      	b.n	801bb06 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	681b      	ldr	r3, [r3, #0]
 801ba7c:	68db      	ldr	r3, [r3, #12]
 801ba7e:	2204      	movs	r2, #4
 801ba80:	4013      	ands	r3, r2
 801ba82:	d0e5      	beq.n	801ba50 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801ba84:	68fb      	ldr	r3, [r7, #12]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	689a      	ldr	r2, [r3, #8]
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	2107      	movs	r1, #7
 801ba90:	438a      	bics	r2, r1
 801ba92:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801ba94:	68fb      	ldr	r3, [r7, #12]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	6899      	ldr	r1, [r3, #8]
 801ba9a:	68fb      	ldr	r3, [r7, #12]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	687a      	ldr	r2, [r7, #4]
 801baa0:	430a      	orrs	r2, r1
 801baa2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801baa4:	68fb      	ldr	r3, [r7, #12]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	68ba      	ldr	r2, [r7, #8]
 801baaa:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801baac:	4b1b      	ldr	r3, [pc, #108]	@ (801bb1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801baae:	681a      	ldr	r2, [r3, #0]
 801bab0:	4b1a      	ldr	r3, [pc, #104]	@ (801bb1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bab2:	2180      	movs	r1, #128	@ 0x80
 801bab4:	0349      	lsls	r1, r1, #13
 801bab6:	430a      	orrs	r2, r1
 801bab8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801baba:	4b18      	ldr	r3, [pc, #96]	@ (801bb1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801babc:	689a      	ldr	r2, [r3, #8]
 801babe:	4b17      	ldr	r3, [pc, #92]	@ (801bb1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801bac0:	2180      	movs	r1, #128	@ 0x80
 801bac2:	0349      	lsls	r1, r1, #13
 801bac4:	430a      	orrs	r2, r1
 801bac6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	689a      	ldr	r2, [r3, #8]
 801bace:	68fb      	ldr	r3, [r7, #12]
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	2180      	movs	r1, #128	@ 0x80
 801bad4:	01c9      	lsls	r1, r1, #7
 801bad6:	430a      	orrs	r2, r1
 801bad8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801bada:	68fb      	ldr	r3, [r7, #12]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	689a      	ldr	r2, [r3, #8]
 801bae0:	68fb      	ldr	r3, [r7, #12]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	2180      	movs	r1, #128	@ 0x80
 801bae6:	00c9      	lsls	r1, r1, #3
 801bae8:	430a      	orrs	r2, r1
 801baea:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	681b      	ldr	r3, [r3, #0]
 801baf0:	22ff      	movs	r2, #255	@ 0xff
 801baf2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801baf4:	68fb      	ldr	r3, [r7, #12]
 801baf6:	2221      	movs	r2, #33	@ 0x21
 801baf8:	2101      	movs	r1, #1
 801bafa:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	2220      	movs	r2, #32
 801bb00:	2100      	movs	r1, #0
 801bb02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bb04:	2300      	movs	r3, #0
}
 801bb06:	0018      	movs	r0, r3
 801bb08:	46bd      	mov	sp, r7
 801bb0a:	b006      	add	sp, #24
 801bb0c:	bd80      	pop	{r7, pc}
 801bb0e:	46c0      	nop			@ (mov r8, r8)
 801bb10:	200000e0 	.word	0x200000e0
 801bb14:	fffffbff 	.word	0xfffffbff
 801bb18:	fffffb7f 	.word	0xfffffb7f
 801bb1c:	40010400 	.word	0x40010400

0801bb20 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801bb20:	b580      	push	{r7, lr}
 801bb22:	b084      	sub	sp, #16
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801bb28:	2300      	movs	r3, #0
 801bb2a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	2220      	movs	r2, #32
 801bb30:	5c9b      	ldrb	r3, [r3, r2]
 801bb32:	2b01      	cmp	r3, #1
 801bb34:	d101      	bne.n	801bb3a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801bb36:	2302      	movs	r3, #2
 801bb38:	e04e      	b.n	801bbd8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	2220      	movs	r2, #32
 801bb3e:	2101      	movs	r1, #1
 801bb40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	2221      	movs	r2, #33	@ 0x21
 801bb46:	2102      	movs	r1, #2
 801bb48:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	681b      	ldr	r3, [r3, #0]
 801bb4e:	22ca      	movs	r2, #202	@ 0xca
 801bb50:	625a      	str	r2, [r3, #36]	@ 0x24
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	2253      	movs	r2, #83	@ 0x53
 801bb58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	689a      	ldr	r2, [r3, #8]
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	491e      	ldr	r1, [pc, #120]	@ (801bbe0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801bb66:	400a      	ands	r2, r1
 801bb68:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	689a      	ldr	r2, [r3, #8]
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	491b      	ldr	r1, [pc, #108]	@ (801bbe4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801bb76:	400a      	ands	r2, r1
 801bb78:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801bb7a:	f7f8 f80b 	bl	8013b94 <HAL_GetTick>
 801bb7e:	0003      	movs	r3, r0
 801bb80:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bb82:	e016      	b.n	801bbb2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801bb84:	f7f8 f806 	bl	8013b94 <HAL_GetTick>
 801bb88:	0002      	movs	r2, r0
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	1ad2      	subs	r2, r2, r3
 801bb8e:	23fa      	movs	r3, #250	@ 0xfa
 801bb90:	009b      	lsls	r3, r3, #2
 801bb92:	429a      	cmp	r2, r3
 801bb94:	d90d      	bls.n	801bbb2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	22ff      	movs	r2, #255	@ 0xff
 801bb9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	2221      	movs	r2, #33	@ 0x21
 801bba2:	2103      	movs	r1, #3
 801bba4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	2220      	movs	r2, #32
 801bbaa:	2100      	movs	r1, #0
 801bbac:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801bbae:	2303      	movs	r3, #3
 801bbb0:	e012      	b.n	801bbd8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	68db      	ldr	r3, [r3, #12]
 801bbb8:	2204      	movs	r2, #4
 801bbba:	4013      	ands	r3, r2
 801bbbc:	d0e2      	beq.n	801bb84 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	22ff      	movs	r2, #255	@ 0xff
 801bbc4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	2221      	movs	r2, #33	@ 0x21
 801bbca:	2101      	movs	r1, #1
 801bbcc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	2220      	movs	r2, #32
 801bbd2:	2100      	movs	r1, #0
 801bbd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bbd6:	2300      	movs	r3, #0
}
 801bbd8:	0018      	movs	r0, r3
 801bbda:	46bd      	mov	sp, r7
 801bbdc:	b004      	add	sp, #16
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	fffffbff 	.word	0xfffffbff
 801bbe4:	ffffbfff 	.word	0xffffbfff

0801bbe8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801bbe8:	b580      	push	{r7, lr}
 801bbea:	b082      	sub	sp, #8
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801bbf0:	4b13      	ldr	r3, [pc, #76]	@ (801bc40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801bbf2:	2280      	movs	r2, #128	@ 0x80
 801bbf4:	0352      	lsls	r2, r2, #13
 801bbf6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	689a      	ldr	r2, [r3, #8]
 801bbfe:	2380      	movs	r3, #128	@ 0x80
 801bc00:	01db      	lsls	r3, r3, #7
 801bc02:	4013      	ands	r3, r2
 801bc04:	d014      	beq.n	801bc30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	68da      	ldr	r2, [r3, #12]
 801bc0c:	2380      	movs	r3, #128	@ 0x80
 801bc0e:	00db      	lsls	r3, r3, #3
 801bc10:	4013      	ands	r3, r2
 801bc12:	d00d      	beq.n	801bc30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	68db      	ldr	r3, [r3, #12]
 801bc1a:	22ff      	movs	r2, #255	@ 0xff
 801bc1c:	401a      	ands	r2, r3
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	4908      	ldr	r1, [pc, #32]	@ (801bc44 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801bc24:	430a      	orrs	r2, r1
 801bc26:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	0018      	movs	r0, r3
 801bc2c:	f000 f80c 	bl	801bc48 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	2221      	movs	r2, #33	@ 0x21
 801bc34:	2101      	movs	r1, #1
 801bc36:	5499      	strb	r1, [r3, r2]
}
 801bc38:	46c0      	nop			@ (mov r8, r8)
 801bc3a:	46bd      	mov	sp, r7
 801bc3c:	b002      	add	sp, #8
 801bc3e:	bd80      	pop	{r7, pc}
 801bc40:	40010400 	.word	0x40010400
 801bc44:	fffffb7f 	.word	0xfffffb7f

0801bc48 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801bc48:	b580      	push	{r7, lr}
 801bc4a:	b082      	sub	sp, #8
 801bc4c:	af00      	add	r7, sp, #0
 801bc4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801bc50:	46c0      	nop			@ (mov r8, r8)
 801bc52:	46bd      	mov	sp, r7
 801bc54:	b002      	add	sp, #8
 801bc56:	bd80      	pop	{r7, pc}

0801bc58 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b086      	sub	sp, #24
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	60f8      	str	r0, [r7, #12]
 801bc60:	60b9      	str	r1, [r7, #8]
 801bc62:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801bc64:	2300      	movs	r3, #0
 801bc66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bc68:	68fb      	ldr	r3, [r7, #12]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	3350      	adds	r3, #80	@ 0x50
 801bc6e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801bc70:	68bb      	ldr	r3, [r7, #8]
 801bc72:	009b      	lsls	r3, r3, #2
 801bc74:	697a      	ldr	r2, [r7, #20]
 801bc76:	18d3      	adds	r3, r2, r3
 801bc78:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801bc7a:	697b      	ldr	r3, [r7, #20]
 801bc7c:	687a      	ldr	r2, [r7, #4]
 801bc7e:	601a      	str	r2, [r3, #0]
}
 801bc80:	46c0      	nop			@ (mov r8, r8)
 801bc82:	46bd      	mov	sp, r7
 801bc84:	b006      	add	sp, #24
 801bc86:	bd80      	pop	{r7, pc}

0801bc88 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801bc88:	b580      	push	{r7, lr}
 801bc8a:	b084      	sub	sp, #16
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
 801bc90:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801bc92:	2300      	movs	r3, #0
 801bc94:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	3350      	adds	r3, #80	@ 0x50
 801bc9c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801bc9e:	683b      	ldr	r3, [r7, #0]
 801bca0:	009b      	lsls	r3, r3, #2
 801bca2:	68fa      	ldr	r2, [r7, #12]
 801bca4:	18d3      	adds	r3, r2, r3
 801bca6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801bca8:	68fb      	ldr	r3, [r7, #12]
 801bcaa:	681b      	ldr	r3, [r3, #0]
}
 801bcac:	0018      	movs	r0, r3
 801bcae:	46bd      	mov	sp, r7
 801bcb0:	b004      	add	sp, #16
 801bcb2:	bd80      	pop	{r7, pc}

0801bcb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b082      	sub	sp, #8
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d101      	bne.n	801bcc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801bcc2:	2301      	movs	r3, #1
 801bcc4:	e032      	b.n	801bd2c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	2239      	movs	r2, #57	@ 0x39
 801bcca:	5c9b      	ldrb	r3, [r3, r2]
 801bccc:	b2db      	uxtb	r3, r3
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d107      	bne.n	801bce2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	2238      	movs	r2, #56	@ 0x38
 801bcd6:	2100      	movs	r1, #0
 801bcd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	0018      	movs	r0, r3
 801bcde:	f7f6 ff75 	bl	8012bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	2239      	movs	r2, #57	@ 0x39
 801bce6:	2102      	movs	r1, #2
 801bce8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	681a      	ldr	r2, [r3, #0]
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	3304      	adds	r3, #4
 801bcf2:	0019      	movs	r1, r3
 801bcf4:	0010      	movs	r0, r2
 801bcf6:	f000 fa1d 	bl	801c134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	223e      	movs	r2, #62	@ 0x3e
 801bcfe:	2101      	movs	r1, #1
 801bd00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	223a      	movs	r2, #58	@ 0x3a
 801bd06:	2101      	movs	r1, #1
 801bd08:	5499      	strb	r1, [r3, r2]
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	223b      	movs	r2, #59	@ 0x3b
 801bd0e:	2101      	movs	r1, #1
 801bd10:	5499      	strb	r1, [r3, r2]
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	223c      	movs	r2, #60	@ 0x3c
 801bd16:	2101      	movs	r1, #1
 801bd18:	5499      	strb	r1, [r3, r2]
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	223d      	movs	r2, #61	@ 0x3d
 801bd1e:	2101      	movs	r1, #1
 801bd20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	2239      	movs	r2, #57	@ 0x39
 801bd26:	2101      	movs	r1, #1
 801bd28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801bd2a:	2300      	movs	r3, #0
}
 801bd2c:	0018      	movs	r0, r3
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	b002      	add	sp, #8
 801bd32:	bd80      	pop	{r7, pc}

0801bd34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b084      	sub	sp, #16
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	2239      	movs	r2, #57	@ 0x39
 801bd40:	5c9b      	ldrb	r3, [r3, r2]
 801bd42:	b2db      	uxtb	r3, r3
 801bd44:	2b01      	cmp	r3, #1
 801bd46:	d001      	beq.n	801bd4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801bd48:	2301      	movs	r3, #1
 801bd4a:	e033      	b.n	801bdb4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	2239      	movs	r2, #57	@ 0x39
 801bd50:	2102      	movs	r1, #2
 801bd52:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	681a      	ldr	r2, [r3, #0]
 801bd58:	2380      	movs	r3, #128	@ 0x80
 801bd5a:	05db      	lsls	r3, r3, #23
 801bd5c:	429a      	cmp	r2, r3
 801bd5e:	d00e      	beq.n	801bd7e <HAL_TIM_Base_Start+0x4a>
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	4a15      	ldr	r2, [pc, #84]	@ (801bdbc <HAL_TIM_Base_Start+0x88>)
 801bd66:	4293      	cmp	r3, r2
 801bd68:	d009      	beq.n	801bd7e <HAL_TIM_Base_Start+0x4a>
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	681b      	ldr	r3, [r3, #0]
 801bd6e:	4a14      	ldr	r2, [pc, #80]	@ (801bdc0 <HAL_TIM_Base_Start+0x8c>)
 801bd70:	4293      	cmp	r3, r2
 801bd72:	d004      	beq.n	801bd7e <HAL_TIM_Base_Start+0x4a>
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	4a12      	ldr	r2, [pc, #72]	@ (801bdc4 <HAL_TIM_Base_Start+0x90>)
 801bd7a:	4293      	cmp	r3, r2
 801bd7c:	d111      	bne.n	801bda2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	689b      	ldr	r3, [r3, #8]
 801bd84:	2207      	movs	r2, #7
 801bd86:	4013      	ands	r3, r2
 801bd88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	2b06      	cmp	r3, #6
 801bd8e:	d010      	beq.n	801bdb2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	681a      	ldr	r2, [r3, #0]
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	2101      	movs	r1, #1
 801bd9c:	430a      	orrs	r2, r1
 801bd9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bda0:	e007      	b.n	801bdb2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	681a      	ldr	r2, [r3, #0]
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2101      	movs	r1, #1
 801bdae:	430a      	orrs	r2, r1
 801bdb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801bdb2:	2300      	movs	r3, #0
}
 801bdb4:	0018      	movs	r0, r3
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	b004      	add	sp, #16
 801bdba:	bd80      	pop	{r7, pc}
 801bdbc:	40000400 	.word	0x40000400
 801bdc0:	40010800 	.word	0x40010800
 801bdc4:	40011400 	.word	0x40011400

0801bdc8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b082      	sub	sp, #8
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	6a1b      	ldr	r3, [r3, #32]
 801bdd6:	4a0a      	ldr	r2, [pc, #40]	@ (801be00 <HAL_TIM_Base_Stop+0x38>)
 801bdd8:	4013      	ands	r3, r2
 801bdda:	d107      	bne.n	801bdec <HAL_TIM_Base_Stop+0x24>
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	681a      	ldr	r2, [r3, #0]
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	2101      	movs	r1, #1
 801bde8:	438a      	bics	r2, r1
 801bdea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	2239      	movs	r2, #57	@ 0x39
 801bdf0:	2101      	movs	r1, #1
 801bdf2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801bdf4:	2300      	movs	r3, #0
}
 801bdf6:	0018      	movs	r0, r3
 801bdf8:	46bd      	mov	sp, r7
 801bdfa:	b002      	add	sp, #8
 801bdfc:	bd80      	pop	{r7, pc}
 801bdfe:	46c0      	nop			@ (mov r8, r8)
 801be00:	00001111 	.word	0x00001111

0801be04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801be04:	b580      	push	{r7, lr}
 801be06:	b082      	sub	sp, #8
 801be08:	af00      	add	r7, sp, #0
 801be0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801be0c:	687b      	ldr	r3, [r7, #4]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d101      	bne.n	801be16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801be12:	2301      	movs	r3, #1
 801be14:	e032      	b.n	801be7c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	2239      	movs	r2, #57	@ 0x39
 801be1a:	5c9b      	ldrb	r3, [r3, r2]
 801be1c:	b2db      	uxtb	r3, r3
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d107      	bne.n	801be32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	2238      	movs	r2, #56	@ 0x38
 801be26:	2100      	movs	r1, #0
 801be28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	0018      	movs	r0, r3
 801be2e:	f7f6 fea9 	bl	8012b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	2239      	movs	r2, #57	@ 0x39
 801be36:	2102      	movs	r1, #2
 801be38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681a      	ldr	r2, [r3, #0]
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	3304      	adds	r3, #4
 801be42:	0019      	movs	r1, r3
 801be44:	0010      	movs	r0, r2
 801be46:	f000 f975 	bl	801c134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	223e      	movs	r2, #62	@ 0x3e
 801be4e:	2101      	movs	r1, #1
 801be50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	223a      	movs	r2, #58	@ 0x3a
 801be56:	2101      	movs	r1, #1
 801be58:	5499      	strb	r1, [r3, r2]
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	223b      	movs	r2, #59	@ 0x3b
 801be5e:	2101      	movs	r1, #1
 801be60:	5499      	strb	r1, [r3, r2]
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	223c      	movs	r2, #60	@ 0x3c
 801be66:	2101      	movs	r1, #1
 801be68:	5499      	strb	r1, [r3, r2]
 801be6a:	687b      	ldr	r3, [r7, #4]
 801be6c:	223d      	movs	r2, #61	@ 0x3d
 801be6e:	2101      	movs	r1, #1
 801be70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	2239      	movs	r2, #57	@ 0x39
 801be76:	2101      	movs	r1, #1
 801be78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801be7a:	2300      	movs	r3, #0
}
 801be7c:	0018      	movs	r0, r3
 801be7e:	46bd      	mov	sp, r7
 801be80:	b002      	add	sp, #8
 801be82:	bd80      	pop	{r7, pc}

0801be84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b084      	sub	sp, #16
 801be88:	af00      	add	r7, sp, #0
 801be8a:	6078      	str	r0, [r7, #4]
 801be8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801be8e:	683b      	ldr	r3, [r7, #0]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d108      	bne.n	801bea6 <HAL_TIM_PWM_Start+0x22>
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	223a      	movs	r2, #58	@ 0x3a
 801be98:	5c9b      	ldrb	r3, [r3, r2]
 801be9a:	b2db      	uxtb	r3, r3
 801be9c:	3b01      	subs	r3, #1
 801be9e:	1e5a      	subs	r2, r3, #1
 801bea0:	4193      	sbcs	r3, r2
 801bea2:	b2db      	uxtb	r3, r3
 801bea4:	e01f      	b.n	801bee6 <HAL_TIM_PWM_Start+0x62>
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	2b04      	cmp	r3, #4
 801beaa:	d108      	bne.n	801bebe <HAL_TIM_PWM_Start+0x3a>
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	223b      	movs	r2, #59	@ 0x3b
 801beb0:	5c9b      	ldrb	r3, [r3, r2]
 801beb2:	b2db      	uxtb	r3, r3
 801beb4:	3b01      	subs	r3, #1
 801beb6:	1e5a      	subs	r2, r3, #1
 801beb8:	4193      	sbcs	r3, r2
 801beba:	b2db      	uxtb	r3, r3
 801bebc:	e013      	b.n	801bee6 <HAL_TIM_PWM_Start+0x62>
 801bebe:	683b      	ldr	r3, [r7, #0]
 801bec0:	2b08      	cmp	r3, #8
 801bec2:	d108      	bne.n	801bed6 <HAL_TIM_PWM_Start+0x52>
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	223c      	movs	r2, #60	@ 0x3c
 801bec8:	5c9b      	ldrb	r3, [r3, r2]
 801beca:	b2db      	uxtb	r3, r3
 801becc:	3b01      	subs	r3, #1
 801bece:	1e5a      	subs	r2, r3, #1
 801bed0:	4193      	sbcs	r3, r2
 801bed2:	b2db      	uxtb	r3, r3
 801bed4:	e007      	b.n	801bee6 <HAL_TIM_PWM_Start+0x62>
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	223d      	movs	r2, #61	@ 0x3d
 801beda:	5c9b      	ldrb	r3, [r3, r2]
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	3b01      	subs	r3, #1
 801bee0:	1e5a      	subs	r2, r3, #1
 801bee2:	4193      	sbcs	r3, r2
 801bee4:	b2db      	uxtb	r3, r3
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d001      	beq.n	801beee <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801beea:	2301      	movs	r3, #1
 801beec:	e052      	b.n	801bf94 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801beee:	683b      	ldr	r3, [r7, #0]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	d104      	bne.n	801befe <HAL_TIM_PWM_Start+0x7a>
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	223a      	movs	r2, #58	@ 0x3a
 801bef8:	2102      	movs	r1, #2
 801befa:	5499      	strb	r1, [r3, r2]
 801befc:	e013      	b.n	801bf26 <HAL_TIM_PWM_Start+0xa2>
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	2b04      	cmp	r3, #4
 801bf02:	d104      	bne.n	801bf0e <HAL_TIM_PWM_Start+0x8a>
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	223b      	movs	r2, #59	@ 0x3b
 801bf08:	2102      	movs	r1, #2
 801bf0a:	5499      	strb	r1, [r3, r2]
 801bf0c:	e00b      	b.n	801bf26 <HAL_TIM_PWM_Start+0xa2>
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	2b08      	cmp	r3, #8
 801bf12:	d104      	bne.n	801bf1e <HAL_TIM_PWM_Start+0x9a>
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	223c      	movs	r2, #60	@ 0x3c
 801bf18:	2102      	movs	r1, #2
 801bf1a:	5499      	strb	r1, [r3, r2]
 801bf1c:	e003      	b.n	801bf26 <HAL_TIM_PWM_Start+0xa2>
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	223d      	movs	r2, #61	@ 0x3d
 801bf22:	2102      	movs	r1, #2
 801bf24:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	6839      	ldr	r1, [r7, #0]
 801bf2c:	2201      	movs	r2, #1
 801bf2e:	0018      	movs	r0, r3
 801bf30:	f000 fa62 	bl	801c3f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	681a      	ldr	r2, [r3, #0]
 801bf38:	2380      	movs	r3, #128	@ 0x80
 801bf3a:	05db      	lsls	r3, r3, #23
 801bf3c:	429a      	cmp	r2, r3
 801bf3e:	d00e      	beq.n	801bf5e <HAL_TIM_PWM_Start+0xda>
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	4a15      	ldr	r2, [pc, #84]	@ (801bf9c <HAL_TIM_PWM_Start+0x118>)
 801bf46:	4293      	cmp	r3, r2
 801bf48:	d009      	beq.n	801bf5e <HAL_TIM_PWM_Start+0xda>
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	4a14      	ldr	r2, [pc, #80]	@ (801bfa0 <HAL_TIM_PWM_Start+0x11c>)
 801bf50:	4293      	cmp	r3, r2
 801bf52:	d004      	beq.n	801bf5e <HAL_TIM_PWM_Start+0xda>
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	4a12      	ldr	r2, [pc, #72]	@ (801bfa4 <HAL_TIM_PWM_Start+0x120>)
 801bf5a:	4293      	cmp	r3, r2
 801bf5c:	d111      	bne.n	801bf82 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	681b      	ldr	r3, [r3, #0]
 801bf62:	689b      	ldr	r3, [r3, #8]
 801bf64:	2207      	movs	r2, #7
 801bf66:	4013      	ands	r3, r2
 801bf68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	2b06      	cmp	r3, #6
 801bf6e:	d010      	beq.n	801bf92 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	681a      	ldr	r2, [r3, #0]
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	2101      	movs	r1, #1
 801bf7c:	430a      	orrs	r2, r1
 801bf7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801bf80:	e007      	b.n	801bf92 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	681a      	ldr	r2, [r3, #0]
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	2101      	movs	r1, #1
 801bf8e:	430a      	orrs	r2, r1
 801bf90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801bf92:	2300      	movs	r3, #0
}
 801bf94:	0018      	movs	r0, r3
 801bf96:	46bd      	mov	sp, r7
 801bf98:	b004      	add	sp, #16
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	40000400 	.word	0x40000400
 801bfa0:	40010800 	.word	0x40010800
 801bfa4:	40011400 	.word	0x40011400

0801bfa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bfb4:	2317      	movs	r3, #23
 801bfb6:	18fb      	adds	r3, r7, r3
 801bfb8:	2200      	movs	r2, #0
 801bfba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	2238      	movs	r2, #56	@ 0x38
 801bfc0:	5c9b      	ldrb	r3, [r3, r2]
 801bfc2:	2b01      	cmp	r3, #1
 801bfc4:	d101      	bne.n	801bfca <HAL_TIM_PWM_ConfigChannel+0x22>
 801bfc6:	2302      	movs	r3, #2
 801bfc8:	e0ad      	b.n	801c126 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	2238      	movs	r2, #56	@ 0x38
 801bfce:	2101      	movs	r1, #1
 801bfd0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	2b0c      	cmp	r3, #12
 801bfd6:	d100      	bne.n	801bfda <HAL_TIM_PWM_ConfigChannel+0x32>
 801bfd8:	e076      	b.n	801c0c8 <HAL_TIM_PWM_ConfigChannel+0x120>
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	2b0c      	cmp	r3, #12
 801bfde:	d900      	bls.n	801bfe2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 801bfe0:	e095      	b.n	801c10e <HAL_TIM_PWM_ConfigChannel+0x166>
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	2b08      	cmp	r3, #8
 801bfe6:	d04e      	beq.n	801c086 <HAL_TIM_PWM_ConfigChannel+0xde>
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	2b08      	cmp	r3, #8
 801bfec:	d900      	bls.n	801bff0 <HAL_TIM_PWM_ConfigChannel+0x48>
 801bfee:	e08e      	b.n	801c10e <HAL_TIM_PWM_ConfigChannel+0x166>
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d003      	beq.n	801bffe <HAL_TIM_PWM_ConfigChannel+0x56>
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	2b04      	cmp	r3, #4
 801bffa:	d021      	beq.n	801c040 <HAL_TIM_PWM_ConfigChannel+0x98>
 801bffc:	e087      	b.n	801c10e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	68ba      	ldr	r2, [r7, #8]
 801c004:	0011      	movs	r1, r2
 801c006:	0018      	movs	r0, r3
 801c008:	f000 f8f2 	bl	801c1f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801c00c:	68fb      	ldr	r3, [r7, #12]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	699a      	ldr	r2, [r3, #24]
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	2108      	movs	r1, #8
 801c018:	430a      	orrs	r2, r1
 801c01a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801c01c:	68fb      	ldr	r3, [r7, #12]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	699a      	ldr	r2, [r3, #24]
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	2104      	movs	r1, #4
 801c028:	438a      	bics	r2, r1
 801c02a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	681b      	ldr	r3, [r3, #0]
 801c030:	6999      	ldr	r1, [r3, #24]
 801c032:	68bb      	ldr	r3, [r7, #8]
 801c034:	68da      	ldr	r2, [r3, #12]
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	430a      	orrs	r2, r1
 801c03c:	619a      	str	r2, [r3, #24]
      break;
 801c03e:	e06b      	b.n	801c118 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801c040:	68fb      	ldr	r3, [r7, #12]
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	68ba      	ldr	r2, [r7, #8]
 801c046:	0011      	movs	r1, r2
 801c048:	0018      	movs	r0, r3
 801c04a:	f000 f90d 	bl	801c268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	699a      	ldr	r2, [r3, #24]
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	2180      	movs	r1, #128	@ 0x80
 801c05a:	0109      	lsls	r1, r1, #4
 801c05c:	430a      	orrs	r2, r1
 801c05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	699a      	ldr	r2, [r3, #24]
 801c066:	68fb      	ldr	r3, [r7, #12]
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	4931      	ldr	r1, [pc, #196]	@ (801c130 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c06c:	400a      	ands	r2, r1
 801c06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	6999      	ldr	r1, [r3, #24]
 801c076:	68bb      	ldr	r3, [r7, #8]
 801c078:	68db      	ldr	r3, [r3, #12]
 801c07a:	021a      	lsls	r2, r3, #8
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	430a      	orrs	r2, r1
 801c082:	619a      	str	r2, [r3, #24]
      break;
 801c084:	e048      	b.n	801c118 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	681b      	ldr	r3, [r3, #0]
 801c08a:	68ba      	ldr	r2, [r7, #8]
 801c08c:	0011      	movs	r1, r2
 801c08e:	0018      	movs	r0, r3
 801c090:	f000 f92c 	bl	801c2ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	69da      	ldr	r2, [r3, #28]
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	2108      	movs	r1, #8
 801c0a0:	430a      	orrs	r2, r1
 801c0a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	69da      	ldr	r2, [r3, #28]
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	2104      	movs	r1, #4
 801c0b0:	438a      	bics	r2, r1
 801c0b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801c0b4:	68fb      	ldr	r3, [r7, #12]
 801c0b6:	681b      	ldr	r3, [r3, #0]
 801c0b8:	69d9      	ldr	r1, [r3, #28]
 801c0ba:	68bb      	ldr	r3, [r7, #8]
 801c0bc:	68da      	ldr	r2, [r3, #12]
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	681b      	ldr	r3, [r3, #0]
 801c0c2:	430a      	orrs	r2, r1
 801c0c4:	61da      	str	r2, [r3, #28]
      break;
 801c0c6:	e027      	b.n	801c118 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	68ba      	ldr	r2, [r7, #8]
 801c0ce:	0011      	movs	r1, r2
 801c0d0:	0018      	movs	r0, r3
 801c0d2:	f000 f94b 	bl	801c36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	69da      	ldr	r2, [r3, #28]
 801c0dc:	68fb      	ldr	r3, [r7, #12]
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	2180      	movs	r1, #128	@ 0x80
 801c0e2:	0109      	lsls	r1, r1, #4
 801c0e4:	430a      	orrs	r2, r1
 801c0e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	69da      	ldr	r2, [r3, #28]
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	681b      	ldr	r3, [r3, #0]
 801c0f2:	490f      	ldr	r1, [pc, #60]	@ (801c130 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801c0f4:	400a      	ands	r2, r1
 801c0f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	69d9      	ldr	r1, [r3, #28]
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	68db      	ldr	r3, [r3, #12]
 801c102:	021a      	lsls	r2, r3, #8
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	430a      	orrs	r2, r1
 801c10a:	61da      	str	r2, [r3, #28]
      break;
 801c10c:	e004      	b.n	801c118 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801c10e:	2317      	movs	r3, #23
 801c110:	18fb      	adds	r3, r7, r3
 801c112:	2201      	movs	r2, #1
 801c114:	701a      	strb	r2, [r3, #0]
      break;
 801c116:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	2238      	movs	r2, #56	@ 0x38
 801c11c:	2100      	movs	r1, #0
 801c11e:	5499      	strb	r1, [r3, r2]

  return status;
 801c120:	2317      	movs	r3, #23
 801c122:	18fb      	adds	r3, r7, r3
 801c124:	781b      	ldrb	r3, [r3, #0]
}
 801c126:	0018      	movs	r0, r3
 801c128:	46bd      	mov	sp, r7
 801c12a:	b006      	add	sp, #24
 801c12c:	bd80      	pop	{r7, pc}
 801c12e:	46c0      	nop			@ (mov r8, r8)
 801c130:	fffffbff 	.word	0xfffffbff

0801c134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b084      	sub	sp, #16
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
 801c13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801c13e:	687b      	ldr	r3, [r7, #4]
 801c140:	681b      	ldr	r3, [r3, #0]
 801c142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801c144:	687a      	ldr	r2, [r7, #4]
 801c146:	2380      	movs	r3, #128	@ 0x80
 801c148:	05db      	lsls	r3, r3, #23
 801c14a:	429a      	cmp	r2, r3
 801c14c:	d00b      	beq.n	801c166 <TIM_Base_SetConfig+0x32>
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	4a23      	ldr	r2, [pc, #140]	@ (801c1e0 <TIM_Base_SetConfig+0xac>)
 801c152:	4293      	cmp	r3, r2
 801c154:	d007      	beq.n	801c166 <TIM_Base_SetConfig+0x32>
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	4a22      	ldr	r2, [pc, #136]	@ (801c1e4 <TIM_Base_SetConfig+0xb0>)
 801c15a:	4293      	cmp	r3, r2
 801c15c:	d003      	beq.n	801c166 <TIM_Base_SetConfig+0x32>
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	4a21      	ldr	r2, [pc, #132]	@ (801c1e8 <TIM_Base_SetConfig+0xb4>)
 801c162:	4293      	cmp	r3, r2
 801c164:	d108      	bne.n	801c178 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	2270      	movs	r2, #112	@ 0x70
 801c16a:	4393      	bics	r3, r2
 801c16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801c16e:	683b      	ldr	r3, [r7, #0]
 801c170:	685b      	ldr	r3, [r3, #4]
 801c172:	68fa      	ldr	r2, [r7, #12]
 801c174:	4313      	orrs	r3, r2
 801c176:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801c178:	687a      	ldr	r2, [r7, #4]
 801c17a:	2380      	movs	r3, #128	@ 0x80
 801c17c:	05db      	lsls	r3, r3, #23
 801c17e:	429a      	cmp	r2, r3
 801c180:	d00b      	beq.n	801c19a <TIM_Base_SetConfig+0x66>
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	4a16      	ldr	r2, [pc, #88]	@ (801c1e0 <TIM_Base_SetConfig+0xac>)
 801c186:	4293      	cmp	r3, r2
 801c188:	d007      	beq.n	801c19a <TIM_Base_SetConfig+0x66>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	4a15      	ldr	r2, [pc, #84]	@ (801c1e4 <TIM_Base_SetConfig+0xb0>)
 801c18e:	4293      	cmp	r3, r2
 801c190:	d003      	beq.n	801c19a <TIM_Base_SetConfig+0x66>
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	4a14      	ldr	r2, [pc, #80]	@ (801c1e8 <TIM_Base_SetConfig+0xb4>)
 801c196:	4293      	cmp	r3, r2
 801c198:	d108      	bne.n	801c1ac <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	4a13      	ldr	r2, [pc, #76]	@ (801c1ec <TIM_Base_SetConfig+0xb8>)
 801c19e:	4013      	ands	r3, r2
 801c1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801c1a2:	683b      	ldr	r3, [r7, #0]
 801c1a4:	68db      	ldr	r3, [r3, #12]
 801c1a6:	68fa      	ldr	r2, [r7, #12]
 801c1a8:	4313      	orrs	r3, r2
 801c1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801c1ac:	68fb      	ldr	r3, [r7, #12]
 801c1ae:	2280      	movs	r2, #128	@ 0x80
 801c1b0:	4393      	bics	r3, r2
 801c1b2:	001a      	movs	r2, r3
 801c1b4:	683b      	ldr	r3, [r7, #0]
 801c1b6:	691b      	ldr	r3, [r3, #16]
 801c1b8:	4313      	orrs	r3, r2
 801c1ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	68fa      	ldr	r2, [r7, #12]
 801c1c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801c1c2:	683b      	ldr	r3, [r7, #0]
 801c1c4:	689a      	ldr	r2, [r3, #8]
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	681a      	ldr	r2, [r3, #0]
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	2201      	movs	r2, #1
 801c1d6:	615a      	str	r2, [r3, #20]
}
 801c1d8:	46c0      	nop			@ (mov r8, r8)
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	b004      	add	sp, #16
 801c1de:	bd80      	pop	{r7, pc}
 801c1e0:	40000400 	.word	0x40000400
 801c1e4:	40010800 	.word	0x40010800
 801c1e8:	40011400 	.word	0x40011400
 801c1ec:	fffffcff 	.word	0xfffffcff

0801c1f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b086      	sub	sp, #24
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
 801c1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801c1fa:	687b      	ldr	r3, [r7, #4]
 801c1fc:	6a1b      	ldr	r3, [r3, #32]
 801c1fe:	2201      	movs	r2, #1
 801c200:	4393      	bics	r3, r2
 801c202:	001a      	movs	r2, r3
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	6a1b      	ldr	r3, [r3, #32]
 801c20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	685b      	ldr	r3, [r3, #4]
 801c212:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	699b      	ldr	r3, [r3, #24]
 801c218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2270      	movs	r2, #112	@ 0x70
 801c21e:	4393      	bics	r3, r2
 801c220:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	2203      	movs	r2, #3
 801c226:	4393      	bics	r3, r2
 801c228:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c22a:	683b      	ldr	r3, [r7, #0]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	68fa      	ldr	r2, [r7, #12]
 801c230:	4313      	orrs	r3, r2
 801c232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801c234:	697b      	ldr	r3, [r7, #20]
 801c236:	2202      	movs	r2, #2
 801c238:	4393      	bics	r3, r2
 801c23a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801c23c:	683b      	ldr	r3, [r7, #0]
 801c23e:	689b      	ldr	r3, [r3, #8]
 801c240:	697a      	ldr	r2, [r7, #20]
 801c242:	4313      	orrs	r3, r2
 801c244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	693a      	ldr	r2, [r7, #16]
 801c24a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c24c:	687b      	ldr	r3, [r7, #4]
 801c24e:	68fa      	ldr	r2, [r7, #12]
 801c250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	685a      	ldr	r2, [r3, #4]
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	697a      	ldr	r2, [r7, #20]
 801c25e:	621a      	str	r2, [r3, #32]
}
 801c260:	46c0      	nop			@ (mov r8, r8)
 801c262:	46bd      	mov	sp, r7
 801c264:	b006      	add	sp, #24
 801c266:	bd80      	pop	{r7, pc}

0801c268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c268:	b580      	push	{r7, lr}
 801c26a:	b086      	sub	sp, #24
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	6a1b      	ldr	r3, [r3, #32]
 801c276:	2210      	movs	r2, #16
 801c278:	4393      	bics	r3, r2
 801c27a:	001a      	movs	r2, r3
 801c27c:	687b      	ldr	r3, [r7, #4]
 801c27e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	6a1b      	ldr	r3, [r3, #32]
 801c284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	685b      	ldr	r3, [r3, #4]
 801c28a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	699b      	ldr	r3, [r3, #24]
 801c290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	4a13      	ldr	r2, [pc, #76]	@ (801c2e4 <TIM_OC2_SetConfig+0x7c>)
 801c296:	4013      	ands	r3, r2
 801c298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	4a12      	ldr	r2, [pc, #72]	@ (801c2e8 <TIM_OC2_SetConfig+0x80>)
 801c29e:	4013      	ands	r3, r2
 801c2a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c2a2:	683b      	ldr	r3, [r7, #0]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	021b      	lsls	r3, r3, #8
 801c2a8:	68fa      	ldr	r2, [r7, #12]
 801c2aa:	4313      	orrs	r3, r2
 801c2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801c2ae:	697b      	ldr	r3, [r7, #20]
 801c2b0:	2220      	movs	r2, #32
 801c2b2:	4393      	bics	r3, r2
 801c2b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801c2b6:	683b      	ldr	r3, [r7, #0]
 801c2b8:	689b      	ldr	r3, [r3, #8]
 801c2ba:	011b      	lsls	r3, r3, #4
 801c2bc:	697a      	ldr	r2, [r7, #20]
 801c2be:	4313      	orrs	r3, r2
 801c2c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	693a      	ldr	r2, [r7, #16]
 801c2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	68fa      	ldr	r2, [r7, #12]
 801c2cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801c2ce:	683b      	ldr	r3, [r7, #0]
 801c2d0:	685a      	ldr	r2, [r3, #4]
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c2d6:	687b      	ldr	r3, [r7, #4]
 801c2d8:	697a      	ldr	r2, [r7, #20]
 801c2da:	621a      	str	r2, [r3, #32]
}
 801c2dc:	46c0      	nop			@ (mov r8, r8)
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	b006      	add	sp, #24
 801c2e2:	bd80      	pop	{r7, pc}
 801c2e4:	ffff8fff 	.word	0xffff8fff
 801c2e8:	fffffcff 	.word	0xfffffcff

0801c2ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	b086      	sub	sp, #24
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	6078      	str	r0, [r7, #4]
 801c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	6a1b      	ldr	r3, [r3, #32]
 801c2fa:	4a1a      	ldr	r2, [pc, #104]	@ (801c364 <TIM_OC3_SetConfig+0x78>)
 801c2fc:	401a      	ands	r2, r3
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	6a1b      	ldr	r3, [r3, #32]
 801c306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	685b      	ldr	r3, [r3, #4]
 801c30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	69db      	ldr	r3, [r3, #28]
 801c312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	2270      	movs	r2, #112	@ 0x70
 801c318:	4393      	bics	r3, r2
 801c31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801c31c:	68fb      	ldr	r3, [r7, #12]
 801c31e:	2203      	movs	r2, #3
 801c320:	4393      	bics	r3, r2
 801c322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801c324:	683b      	ldr	r3, [r7, #0]
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	68fa      	ldr	r2, [r7, #12]
 801c32a:	4313      	orrs	r3, r2
 801c32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801c32e:	697b      	ldr	r3, [r7, #20]
 801c330:	4a0d      	ldr	r2, [pc, #52]	@ (801c368 <TIM_OC3_SetConfig+0x7c>)
 801c332:	4013      	ands	r3, r2
 801c334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801c336:	683b      	ldr	r3, [r7, #0]
 801c338:	689b      	ldr	r3, [r3, #8]
 801c33a:	021b      	lsls	r3, r3, #8
 801c33c:	697a      	ldr	r2, [r7, #20]
 801c33e:	4313      	orrs	r3, r2
 801c340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	693a      	ldr	r2, [r7, #16]
 801c346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	68fa      	ldr	r2, [r7, #12]
 801c34c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801c34e:	683b      	ldr	r3, [r7, #0]
 801c350:	685a      	ldr	r2, [r3, #4]
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	697a      	ldr	r2, [r7, #20]
 801c35a:	621a      	str	r2, [r3, #32]
}
 801c35c:	46c0      	nop			@ (mov r8, r8)
 801c35e:	46bd      	mov	sp, r7
 801c360:	b006      	add	sp, #24
 801c362:	bd80      	pop	{r7, pc}
 801c364:	fffffeff 	.word	0xfffffeff
 801c368:	fffffdff 	.word	0xfffffdff

0801c36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b086      	sub	sp, #24
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
 801c374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	6a1b      	ldr	r3, [r3, #32]
 801c37a:	4a1b      	ldr	r2, [pc, #108]	@ (801c3e8 <TIM_OC4_SetConfig+0x7c>)
 801c37c:	401a      	ands	r2, r3
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6a1b      	ldr	r3, [r3, #32]
 801c386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	685b      	ldr	r3, [r3, #4]
 801c38c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	69db      	ldr	r3, [r3, #28]
 801c392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	4a15      	ldr	r2, [pc, #84]	@ (801c3ec <TIM_OC4_SetConfig+0x80>)
 801c398:	4013      	ands	r3, r2
 801c39a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	4a14      	ldr	r2, [pc, #80]	@ (801c3f0 <TIM_OC4_SetConfig+0x84>)
 801c3a0:	4013      	ands	r3, r2
 801c3a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801c3a4:	683b      	ldr	r3, [r7, #0]
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	021b      	lsls	r3, r3, #8
 801c3aa:	68fa      	ldr	r2, [r7, #12]
 801c3ac:	4313      	orrs	r3, r2
 801c3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	4a10      	ldr	r2, [pc, #64]	@ (801c3f4 <TIM_OC4_SetConfig+0x88>)
 801c3b4:	4013      	ands	r3, r2
 801c3b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801c3b8:	683b      	ldr	r3, [r7, #0]
 801c3ba:	689b      	ldr	r3, [r3, #8]
 801c3bc:	031b      	lsls	r3, r3, #12
 801c3be:	697a      	ldr	r2, [r7, #20]
 801c3c0:	4313      	orrs	r3, r2
 801c3c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	693a      	ldr	r2, [r7, #16]
 801c3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	68fa      	ldr	r2, [r7, #12]
 801c3ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	685a      	ldr	r2, [r3, #4]
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	697a      	ldr	r2, [r7, #20]
 801c3dc:	621a      	str	r2, [r3, #32]
}
 801c3de:	46c0      	nop			@ (mov r8, r8)
 801c3e0:	46bd      	mov	sp, r7
 801c3e2:	b006      	add	sp, #24
 801c3e4:	bd80      	pop	{r7, pc}
 801c3e6:	46c0      	nop			@ (mov r8, r8)
 801c3e8:	ffffefff 	.word	0xffffefff
 801c3ec:	ffff8fff 	.word	0xffff8fff
 801c3f0:	fffffcff 	.word	0xfffffcff
 801c3f4:	ffffdfff 	.word	0xffffdfff

0801c3f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b086      	sub	sp, #24
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	60f8      	str	r0, [r7, #12]
 801c400:	60b9      	str	r1, [r7, #8]
 801c402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801c404:	68bb      	ldr	r3, [r7, #8]
 801c406:	221f      	movs	r2, #31
 801c408:	4013      	ands	r3, r2
 801c40a:	2201      	movs	r2, #1
 801c40c:	409a      	lsls	r2, r3
 801c40e:	0013      	movs	r3, r2
 801c410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	6a1b      	ldr	r3, [r3, #32]
 801c416:	697a      	ldr	r2, [r7, #20]
 801c418:	43d2      	mvns	r2, r2
 801c41a:	401a      	ands	r2, r3
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	6a1a      	ldr	r2, [r3, #32]
 801c424:	68bb      	ldr	r3, [r7, #8]
 801c426:	211f      	movs	r1, #31
 801c428:	400b      	ands	r3, r1
 801c42a:	6879      	ldr	r1, [r7, #4]
 801c42c:	4099      	lsls	r1, r3
 801c42e:	000b      	movs	r3, r1
 801c430:	431a      	orrs	r2, r3
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	621a      	str	r2, [r3, #32]
}
 801c436:	46c0      	nop			@ (mov r8, r8)
 801c438:	46bd      	mov	sp, r7
 801c43a:	b006      	add	sp, #24
 801c43c:	bd80      	pop	{r7, pc}
	...

0801c440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801c440:	b580      	push	{r7, lr}
 801c442:	b084      	sub	sp, #16
 801c444:	af00      	add	r7, sp, #0
 801c446:	6078      	str	r0, [r7, #4]
 801c448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2238      	movs	r2, #56	@ 0x38
 801c44e:	5c9b      	ldrb	r3, [r3, r2]
 801c450:	2b01      	cmp	r3, #1
 801c452:	d101      	bne.n	801c458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801c454:	2302      	movs	r3, #2
 801c456:	e047      	b.n	801c4e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	2238      	movs	r2, #56	@ 0x38
 801c45c:	2101      	movs	r1, #1
 801c45e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	2239      	movs	r2, #57	@ 0x39
 801c464:	2102      	movs	r1, #2
 801c466:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	681b      	ldr	r3, [r3, #0]
 801c46c:	685b      	ldr	r3, [r3, #4]
 801c46e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	689b      	ldr	r3, [r3, #8]
 801c476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	2270      	movs	r2, #112	@ 0x70
 801c47c:	4393      	bics	r3, r2
 801c47e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801c480:	683b      	ldr	r3, [r7, #0]
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	68fa      	ldr	r2, [r7, #12]
 801c486:	4313      	orrs	r3, r2
 801c488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801c48a:	687b      	ldr	r3, [r7, #4]
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	68fa      	ldr	r2, [r7, #12]
 801c490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	681a      	ldr	r2, [r3, #0]
 801c496:	2380      	movs	r3, #128	@ 0x80
 801c498:	05db      	lsls	r3, r3, #23
 801c49a:	429a      	cmp	r2, r3
 801c49c:	d00e      	beq.n	801c4bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	4a13      	ldr	r2, [pc, #76]	@ (801c4f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801c4a4:	4293      	cmp	r3, r2
 801c4a6:	d009      	beq.n	801c4bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	4a11      	ldr	r2, [pc, #68]	@ (801c4f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801c4ae:	4293      	cmp	r3, r2
 801c4b0:	d004      	beq.n	801c4bc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	4a10      	ldr	r2, [pc, #64]	@ (801c4f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801c4b8:	4293      	cmp	r3, r2
 801c4ba:	d10c      	bne.n	801c4d6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801c4bc:	68bb      	ldr	r3, [r7, #8]
 801c4be:	2280      	movs	r2, #128	@ 0x80
 801c4c0:	4393      	bics	r3, r2
 801c4c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801c4c4:	683b      	ldr	r3, [r7, #0]
 801c4c6:	685b      	ldr	r3, [r3, #4]
 801c4c8:	68ba      	ldr	r2, [r7, #8]
 801c4ca:	4313      	orrs	r3, r2
 801c4cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	68ba      	ldr	r2, [r7, #8]
 801c4d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801c4d6:	687b      	ldr	r3, [r7, #4]
 801c4d8:	2239      	movs	r2, #57	@ 0x39
 801c4da:	2101      	movs	r1, #1
 801c4dc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	2238      	movs	r2, #56	@ 0x38
 801c4e2:	2100      	movs	r1, #0
 801c4e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c4e6:	2300      	movs	r3, #0
}
 801c4e8:	0018      	movs	r0, r3
 801c4ea:	46bd      	mov	sp, r7
 801c4ec:	b004      	add	sp, #16
 801c4ee:	bd80      	pop	{r7, pc}
 801c4f0:	40000400 	.word	0x40000400
 801c4f4:	40010800 	.word	0x40010800
 801c4f8:	40011400 	.word	0x40011400

0801c4fc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b082      	sub	sp, #8
 801c500:	af00      	add	r7, sp, #0
 801c502:	6078      	str	r0, [r7, #4]
 801c504:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	2238      	movs	r2, #56	@ 0x38
 801c50a:	5c9b      	ldrb	r3, [r3, r2]
 801c50c:	2b01      	cmp	r3, #1
 801c50e:	d101      	bne.n	801c514 <HAL_TIMEx_RemapConfig+0x18>
 801c510:	2302      	movs	r3, #2
 801c512:	e00c      	b.n	801c52e <HAL_TIMEx_RemapConfig+0x32>
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	2238      	movs	r2, #56	@ 0x38
 801c518:	2101      	movs	r1, #1
 801c51a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	681b      	ldr	r3, [r3, #0]
 801c520:	683a      	ldr	r2, [r7, #0]
 801c522:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	2238      	movs	r2, #56	@ 0x38
 801c528:	2100      	movs	r1, #0
 801c52a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801c52c:	2300      	movs	r3, #0
}
 801c52e:	0018      	movs	r0, r3
 801c530:	46bd      	mov	sp, r7
 801c532:	b002      	add	sp, #8
 801c534:	bd80      	pop	{r7, pc}
	...

0801c538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801c538:	b580      	push	{r7, lr}
 801c53a:	b082      	sub	sp, #8
 801c53c:	af00      	add	r7, sp, #0
 801c53e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	2b00      	cmp	r3, #0
 801c544:	d101      	bne.n	801c54a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801c546:	2301      	movs	r3, #1
 801c548:	e053      	b.n	801c5f2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d116      	bne.n	801c580 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	2278      	movs	r2, #120	@ 0x78
 801c556:	2100      	movs	r1, #0
 801c558:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	0018      	movs	r0, r3
 801c55e:	f000 fd65 	bl	801d02c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	22b0      	movs	r2, #176	@ 0xb0
 801c566:	589b      	ldr	r3, [r3, r2]
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d103      	bne.n	801c574 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	21b0      	movs	r1, #176	@ 0xb0
 801c570:	4a22      	ldr	r2, [pc, #136]	@ (801c5fc <HAL_UART_Init+0xc4>)
 801c572:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	22b0      	movs	r2, #176	@ 0xb0
 801c578:	589b      	ldr	r3, [r3, r2]
 801c57a:	687a      	ldr	r2, [r7, #4]
 801c57c:	0010      	movs	r0, r2
 801c57e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	2224      	movs	r2, #36	@ 0x24
 801c584:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	681a      	ldr	r2, [r3, #0]
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	2101      	movs	r1, #1
 801c592:	438a      	bics	r2, r1
 801c594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	0018      	movs	r0, r3
 801c59a:	f000 fd8b 	bl	801d0b4 <UART_SetConfig>
 801c59e:	0003      	movs	r3, r0
 801c5a0:	2b01      	cmp	r3, #1
 801c5a2:	d101      	bne.n	801c5a8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801c5a4:	2301      	movs	r3, #1
 801c5a6:	e024      	b.n	801c5f2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d003      	beq.n	801c5b8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801c5b0:	687b      	ldr	r3, [r7, #4]
 801c5b2:	0018      	movs	r0, r3
 801c5b4:	f001 f81c 	bl	801d5f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	685a      	ldr	r2, [r3, #4]
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	490f      	ldr	r1, [pc, #60]	@ (801c600 <HAL_UART_Init+0xc8>)
 801c5c4:	400a      	ands	r2, r1
 801c5c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	689a      	ldr	r2, [r3, #8]
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	212a      	movs	r1, #42	@ 0x2a
 801c5d4:	438a      	bics	r2, r1
 801c5d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	681b      	ldr	r3, [r3, #0]
 801c5dc:	681a      	ldr	r2, [r3, #0]
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	2101      	movs	r1, #1
 801c5e4:	430a      	orrs	r2, r1
 801c5e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	0018      	movs	r0, r3
 801c5ec:	f001 f8b4 	bl	801d758 <UART_CheckIdleState>
 801c5f0:	0003      	movs	r3, r0
}
 801c5f2:	0018      	movs	r0, r3
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	b002      	add	sp, #8
 801c5f8:	bd80      	pop	{r7, pc}
 801c5fa:	46c0      	nop			@ (mov r8, r8)
 801c5fc:	08012df9 	.word	0x08012df9
 801c600:	ffffb7ff 	.word	0xffffb7ff

0801c604 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c604:	b580      	push	{r7, lr}
 801c606:	b08a      	sub	sp, #40	@ 0x28
 801c608:	af02      	add	r7, sp, #8
 801c60a:	60f8      	str	r0, [r7, #12]
 801c60c:	60b9      	str	r1, [r7, #8]
 801c60e:	603b      	str	r3, [r7, #0]
 801c610:	1dbb      	adds	r3, r7, #6
 801c612:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c618:	2b20      	cmp	r3, #32
 801c61a:	d000      	beq.n	801c61e <HAL_UART_Transmit+0x1a>
 801c61c:	e08c      	b.n	801c738 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801c61e:	68bb      	ldr	r3, [r7, #8]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d003      	beq.n	801c62c <HAL_UART_Transmit+0x28>
 801c624:	1dbb      	adds	r3, r7, #6
 801c626:	881b      	ldrh	r3, [r3, #0]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d101      	bne.n	801c630 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801c62c:	2301      	movs	r3, #1
 801c62e:	e084      	b.n	801c73a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	689a      	ldr	r2, [r3, #8]
 801c634:	2380      	movs	r3, #128	@ 0x80
 801c636:	015b      	lsls	r3, r3, #5
 801c638:	429a      	cmp	r2, r3
 801c63a:	d109      	bne.n	801c650 <HAL_UART_Transmit+0x4c>
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	691b      	ldr	r3, [r3, #16]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d105      	bne.n	801c650 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c644:	68bb      	ldr	r3, [r7, #8]
 801c646:	2201      	movs	r2, #1
 801c648:	4013      	ands	r3, r2
 801c64a:	d001      	beq.n	801c650 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801c64c:	2301      	movs	r3, #1
 801c64e:	e074      	b.n	801c73a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	2284      	movs	r2, #132	@ 0x84
 801c654:	2100      	movs	r1, #0
 801c656:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	2221      	movs	r2, #33	@ 0x21
 801c65c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801c65e:	f7f7 fa99 	bl	8013b94 <HAL_GetTick>
 801c662:	0003      	movs	r3, r0
 801c664:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801c666:	68fb      	ldr	r3, [r7, #12]
 801c668:	1dba      	adds	r2, r7, #6
 801c66a:	2150      	movs	r1, #80	@ 0x50
 801c66c:	8812      	ldrh	r2, [r2, #0]
 801c66e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	1dba      	adds	r2, r7, #6
 801c674:	2152      	movs	r1, #82	@ 0x52
 801c676:	8812      	ldrh	r2, [r2, #0]
 801c678:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	689a      	ldr	r2, [r3, #8]
 801c67e:	2380      	movs	r3, #128	@ 0x80
 801c680:	015b      	lsls	r3, r3, #5
 801c682:	429a      	cmp	r2, r3
 801c684:	d108      	bne.n	801c698 <HAL_UART_Transmit+0x94>
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	691b      	ldr	r3, [r3, #16]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d104      	bne.n	801c698 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801c68e:	2300      	movs	r3, #0
 801c690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801c692:	68bb      	ldr	r3, [r7, #8]
 801c694:	61bb      	str	r3, [r7, #24]
 801c696:	e003      	b.n	801c6a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801c698:	68bb      	ldr	r3, [r7, #8]
 801c69a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801c69c:	2300      	movs	r3, #0
 801c69e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801c6a0:	e02f      	b.n	801c702 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801c6a2:	697a      	ldr	r2, [r7, #20]
 801c6a4:	68f8      	ldr	r0, [r7, #12]
 801c6a6:	683b      	ldr	r3, [r7, #0]
 801c6a8:	9300      	str	r3, [sp, #0]
 801c6aa:	0013      	movs	r3, r2
 801c6ac:	2200      	movs	r2, #0
 801c6ae:	2180      	movs	r1, #128	@ 0x80
 801c6b0:	f001 f8fa 	bl	801d8a8 <UART_WaitOnFlagUntilTimeout>
 801c6b4:	1e03      	subs	r3, r0, #0
 801c6b6:	d004      	beq.n	801c6c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801c6b8:	68fb      	ldr	r3, [r7, #12]
 801c6ba:	2220      	movs	r2, #32
 801c6bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801c6be:	2303      	movs	r3, #3
 801c6c0:	e03b      	b.n	801c73a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801c6c2:	69fb      	ldr	r3, [r7, #28]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d10b      	bne.n	801c6e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801c6c8:	69bb      	ldr	r3, [r7, #24]
 801c6ca:	881b      	ldrh	r3, [r3, #0]
 801c6cc:	001a      	movs	r2, r3
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	681b      	ldr	r3, [r3, #0]
 801c6d2:	05d2      	lsls	r2, r2, #23
 801c6d4:	0dd2      	lsrs	r2, r2, #23
 801c6d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801c6d8:	69bb      	ldr	r3, [r7, #24]
 801c6da:	3302      	adds	r3, #2
 801c6dc:	61bb      	str	r3, [r7, #24]
 801c6de:	e007      	b.n	801c6f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801c6e0:	69fb      	ldr	r3, [r7, #28]
 801c6e2:	781a      	ldrb	r2, [r3, #0]
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801c6ea:	69fb      	ldr	r3, [r7, #28]
 801c6ec:	3301      	adds	r3, #1
 801c6ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	2252      	movs	r2, #82	@ 0x52
 801c6f4:	5a9b      	ldrh	r3, [r3, r2]
 801c6f6:	b29b      	uxth	r3, r3
 801c6f8:	3b01      	subs	r3, #1
 801c6fa:	b299      	uxth	r1, r3
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	2252      	movs	r2, #82	@ 0x52
 801c700:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	2252      	movs	r2, #82	@ 0x52
 801c706:	5a9b      	ldrh	r3, [r3, r2]
 801c708:	b29b      	uxth	r3, r3
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d1c9      	bne.n	801c6a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801c70e:	697a      	ldr	r2, [r7, #20]
 801c710:	68f8      	ldr	r0, [r7, #12]
 801c712:	683b      	ldr	r3, [r7, #0]
 801c714:	9300      	str	r3, [sp, #0]
 801c716:	0013      	movs	r3, r2
 801c718:	2200      	movs	r2, #0
 801c71a:	2140      	movs	r1, #64	@ 0x40
 801c71c:	f001 f8c4 	bl	801d8a8 <UART_WaitOnFlagUntilTimeout>
 801c720:	1e03      	subs	r3, r0, #0
 801c722:	d004      	beq.n	801c72e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	2220      	movs	r2, #32
 801c728:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801c72a:	2303      	movs	r3, #3
 801c72c:	e005      	b.n	801c73a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	2220      	movs	r2, #32
 801c732:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801c734:	2300      	movs	r3, #0
 801c736:	e000      	b.n	801c73a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801c738:	2302      	movs	r3, #2
  }
}
 801c73a:	0018      	movs	r0, r3
 801c73c:	46bd      	mov	sp, r7
 801c73e:	b008      	add	sp, #32
 801c740:	bd80      	pop	{r7, pc}
	...

0801c744 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b088      	sub	sp, #32
 801c748:	af00      	add	r7, sp, #0
 801c74a:	60f8      	str	r0, [r7, #12]
 801c74c:	60b9      	str	r1, [r7, #8]
 801c74e:	1dbb      	adds	r3, r7, #6
 801c750:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	2280      	movs	r2, #128	@ 0x80
 801c756:	589b      	ldr	r3, [r3, r2]
 801c758:	2b20      	cmp	r3, #32
 801c75a:	d14a      	bne.n	801c7f2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c75c:	68bb      	ldr	r3, [r7, #8]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d003      	beq.n	801c76a <HAL_UART_Receive_IT+0x26>
 801c762:	1dbb      	adds	r3, r7, #6
 801c764:	881b      	ldrh	r3, [r3, #0]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d101      	bne.n	801c76e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801c76a:	2301      	movs	r3, #1
 801c76c:	e042      	b.n	801c7f4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	689a      	ldr	r2, [r3, #8]
 801c772:	2380      	movs	r3, #128	@ 0x80
 801c774:	015b      	lsls	r3, r3, #5
 801c776:	429a      	cmp	r2, r3
 801c778:	d109      	bne.n	801c78e <HAL_UART_Receive_IT+0x4a>
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	691b      	ldr	r3, [r3, #16]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d105      	bne.n	801c78e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c782:	68bb      	ldr	r3, [r7, #8]
 801c784:	2201      	movs	r2, #1
 801c786:	4013      	ands	r3, r2
 801c788:	d001      	beq.n	801c78e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801c78a:	2301      	movs	r3, #1
 801c78c:	e032      	b.n	801c7f4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	2200      	movs	r2, #0
 801c792:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c794:	68fb      	ldr	r3, [r7, #12]
 801c796:	681b      	ldr	r3, [r3, #0]
 801c798:	4a18      	ldr	r2, [pc, #96]	@ (801c7fc <HAL_UART_Receive_IT+0xb8>)
 801c79a:	4293      	cmp	r3, r2
 801c79c:	d020      	beq.n	801c7e0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	681b      	ldr	r3, [r3, #0]
 801c7a2:	685a      	ldr	r2, [r3, #4]
 801c7a4:	2380      	movs	r3, #128	@ 0x80
 801c7a6:	041b      	lsls	r3, r3, #16
 801c7a8:	4013      	ands	r3, r2
 801c7aa:	d019      	beq.n	801c7e0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7ac:	f3ef 8310 	mrs	r3, PRIMASK
 801c7b0:	613b      	str	r3, [r7, #16]
  return(result);
 801c7b2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c7b4:	61fb      	str	r3, [r7, #28]
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7ba:	697b      	ldr	r3, [r7, #20]
 801c7bc:	f383 8810 	msr	PRIMASK, r3
}
 801c7c0:	46c0      	nop			@ (mov r8, r8)
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	681a      	ldr	r2, [r3, #0]
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	2180      	movs	r1, #128	@ 0x80
 801c7ce:	04c9      	lsls	r1, r1, #19
 801c7d0:	430a      	orrs	r2, r1
 801c7d2:	601a      	str	r2, [r3, #0]
 801c7d4:	69fb      	ldr	r3, [r7, #28]
 801c7d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7d8:	69bb      	ldr	r3, [r7, #24]
 801c7da:	f383 8810 	msr	PRIMASK, r3
}
 801c7de:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801c7e0:	1dbb      	adds	r3, r7, #6
 801c7e2:	881a      	ldrh	r2, [r3, #0]
 801c7e4:	68b9      	ldr	r1, [r7, #8]
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	0018      	movs	r0, r3
 801c7ea:	f001 f8c7 	bl	801d97c <UART_Start_Receive_IT>
 801c7ee:	0003      	movs	r3, r0
 801c7f0:	e000      	b.n	801c7f4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c7f2:	2302      	movs	r3, #2
  }
}
 801c7f4:	0018      	movs	r0, r3
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	b008      	add	sp, #32
 801c7fa:	bd80      	pop	{r7, pc}
 801c7fc:	40004800 	.word	0x40004800

0801c800 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b088      	sub	sp, #32
 801c804:	af00      	add	r7, sp, #0
 801c806:	60f8      	str	r0, [r7, #12]
 801c808:	60b9      	str	r1, [r7, #8]
 801c80a:	1dbb      	adds	r3, r7, #6
 801c80c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801c80e:	68fb      	ldr	r3, [r7, #12]
 801c810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801c812:	2b20      	cmp	r3, #32
 801c814:	d000      	beq.n	801c818 <HAL_UART_Transmit_DMA+0x18>
 801c816:	e077      	b.n	801c908 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801c818:	68bb      	ldr	r3, [r7, #8]
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d003      	beq.n	801c826 <HAL_UART_Transmit_DMA+0x26>
 801c81e:	1dbb      	adds	r3, r7, #6
 801c820:	881b      	ldrh	r3, [r3, #0]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d101      	bne.n	801c82a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801c826:	2301      	movs	r3, #1
 801c828:	e06f      	b.n	801c90a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	689a      	ldr	r2, [r3, #8]
 801c82e:	2380      	movs	r3, #128	@ 0x80
 801c830:	015b      	lsls	r3, r3, #5
 801c832:	429a      	cmp	r2, r3
 801c834:	d109      	bne.n	801c84a <HAL_UART_Transmit_DMA+0x4a>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	691b      	ldr	r3, [r3, #16]
 801c83a:	2b00      	cmp	r3, #0
 801c83c:	d105      	bne.n	801c84a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	2201      	movs	r2, #1
 801c842:	4013      	ands	r3, r2
 801c844:	d001      	beq.n	801c84a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c846:	2301      	movs	r3, #1
 801c848:	e05f      	b.n	801c90a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	68ba      	ldr	r2, [r7, #8]
 801c84e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	1dba      	adds	r2, r7, #6
 801c854:	2150      	movs	r1, #80	@ 0x50
 801c856:	8812      	ldrh	r2, [r2, #0]
 801c858:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	1dba      	adds	r2, r7, #6
 801c85e:	2152      	movs	r1, #82	@ 0x52
 801c860:	8812      	ldrh	r2, [r2, #0]
 801c862:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	2284      	movs	r2, #132	@ 0x84
 801c868:	2100      	movs	r1, #0
 801c86a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801c86c:	68fb      	ldr	r3, [r7, #12]
 801c86e:	2221      	movs	r2, #33	@ 0x21
 801c870:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801c872:	68fb      	ldr	r3, [r7, #12]
 801c874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c876:	2b00      	cmp	r3, #0
 801c878:	d027      	beq.n	801c8ca <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801c87a:	68fb      	ldr	r3, [r7, #12]
 801c87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c87e:	4a25      	ldr	r2, [pc, #148]	@ (801c914 <HAL_UART_Transmit_DMA+0x114>)
 801c880:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c886:	4a24      	ldr	r2, [pc, #144]	@ (801c918 <HAL_UART_Transmit_DMA+0x118>)
 801c888:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801c88a:	68fb      	ldr	r3, [r7, #12]
 801c88c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c88e:	4a23      	ldr	r2, [pc, #140]	@ (801c91c <HAL_UART_Transmit_DMA+0x11c>)
 801c890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801c892:	68fb      	ldr	r3, [r7, #12]
 801c894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c896:	2200      	movs	r2, #0
 801c898:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801c89e:	68fb      	ldr	r3, [r7, #12]
 801c8a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c8a2:	0019      	movs	r1, r3
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	3328      	adds	r3, #40	@ 0x28
 801c8aa:	001a      	movs	r2, r3
 801c8ac:	1dbb      	adds	r3, r7, #6
 801c8ae:	881b      	ldrh	r3, [r3, #0]
 801c8b0:	f7f7 fec2 	bl	8014638 <HAL_DMA_Start_IT>
 801c8b4:	1e03      	subs	r3, r0, #0
 801c8b6:	d008      	beq.n	801c8ca <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	2284      	movs	r2, #132	@ 0x84
 801c8bc:	2110      	movs	r1, #16
 801c8be:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	2220      	movs	r2, #32
 801c8c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801c8c6:	2301      	movs	r3, #1
 801c8c8:	e01f      	b.n	801c90a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	2240      	movs	r2, #64	@ 0x40
 801c8d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8d2:	f3ef 8310 	mrs	r3, PRIMASK
 801c8d6:	613b      	str	r3, [r7, #16]
  return(result);
 801c8d8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801c8da:	61fb      	str	r3, [r7, #28]
 801c8dc:	2301      	movs	r3, #1
 801c8de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8e0:	697b      	ldr	r3, [r7, #20]
 801c8e2:	f383 8810 	msr	PRIMASK, r3
}
 801c8e6:	46c0      	nop			@ (mov r8, r8)
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	681b      	ldr	r3, [r3, #0]
 801c8ec:	689a      	ldr	r2, [r3, #8]
 801c8ee:	68fb      	ldr	r3, [r7, #12]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	2180      	movs	r1, #128	@ 0x80
 801c8f4:	430a      	orrs	r2, r1
 801c8f6:	609a      	str	r2, [r3, #8]
 801c8f8:	69fb      	ldr	r3, [r7, #28]
 801c8fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8fc:	69bb      	ldr	r3, [r7, #24]
 801c8fe:	f383 8810 	msr	PRIMASK, r3
}
 801c902:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801c904:	2300      	movs	r3, #0
 801c906:	e000      	b.n	801c90a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801c908:	2302      	movs	r3, #2
  }
}
 801c90a:	0018      	movs	r0, r3
 801c90c:	46bd      	mov	sp, r7
 801c90e:	b008      	add	sp, #32
 801c910:	bd80      	pop	{r7, pc}
 801c912:	46c0      	nop			@ (mov r8, r8)
 801c914:	0801dd61 	.word	0x0801dd61
 801c918:	0801ddfd 	.word	0x0801ddfd
 801c91c:	0801df9d 	.word	0x0801df9d

0801c920 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c920:	b580      	push	{r7, lr}
 801c922:	b088      	sub	sp, #32
 801c924:	af00      	add	r7, sp, #0
 801c926:	60f8      	str	r0, [r7, #12]
 801c928:	60b9      	str	r1, [r7, #8]
 801c92a:	1dbb      	adds	r3, r7, #6
 801c92c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c92e:	68fb      	ldr	r3, [r7, #12]
 801c930:	2280      	movs	r2, #128	@ 0x80
 801c932:	589b      	ldr	r3, [r3, r2]
 801c934:	2b20      	cmp	r3, #32
 801c936:	d14a      	bne.n	801c9ce <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801c938:	68bb      	ldr	r3, [r7, #8]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d003      	beq.n	801c946 <HAL_UART_Receive_DMA+0x26>
 801c93e:	1dbb      	adds	r3, r7, #6
 801c940:	881b      	ldrh	r3, [r3, #0]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d101      	bne.n	801c94a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801c946:	2301      	movs	r3, #1
 801c948:	e042      	b.n	801c9d0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	689a      	ldr	r2, [r3, #8]
 801c94e:	2380      	movs	r3, #128	@ 0x80
 801c950:	015b      	lsls	r3, r3, #5
 801c952:	429a      	cmp	r2, r3
 801c954:	d109      	bne.n	801c96a <HAL_UART_Receive_DMA+0x4a>
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	691b      	ldr	r3, [r3, #16]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d105      	bne.n	801c96a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801c95e:	68bb      	ldr	r3, [r7, #8]
 801c960:	2201      	movs	r2, #1
 801c962:	4013      	ands	r3, r2
 801c964:	d001      	beq.n	801c96a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801c966:	2301      	movs	r3, #1
 801c968:	e032      	b.n	801c9d0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	2200      	movs	r2, #0
 801c96e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	4a18      	ldr	r2, [pc, #96]	@ (801c9d8 <HAL_UART_Receive_DMA+0xb8>)
 801c976:	4293      	cmp	r3, r2
 801c978:	d020      	beq.n	801c9bc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801c97a:	68fb      	ldr	r3, [r7, #12]
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	685a      	ldr	r2, [r3, #4]
 801c980:	2380      	movs	r3, #128	@ 0x80
 801c982:	041b      	lsls	r3, r3, #16
 801c984:	4013      	ands	r3, r2
 801c986:	d019      	beq.n	801c9bc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c988:	f3ef 8310 	mrs	r3, PRIMASK
 801c98c:	613b      	str	r3, [r7, #16]
  return(result);
 801c98e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801c990:	61fb      	str	r3, [r7, #28]
 801c992:	2301      	movs	r3, #1
 801c994:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	f383 8810 	msr	PRIMASK, r3
}
 801c99c:	46c0      	nop			@ (mov r8, r8)
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	681b      	ldr	r3, [r3, #0]
 801c9a2:	681a      	ldr	r2, [r3, #0]
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	2180      	movs	r1, #128	@ 0x80
 801c9aa:	04c9      	lsls	r1, r1, #19
 801c9ac:	430a      	orrs	r2, r1
 801c9ae:	601a      	str	r2, [r3, #0]
 801c9b0:	69fb      	ldr	r3, [r7, #28]
 801c9b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9b4:	69bb      	ldr	r3, [r7, #24]
 801c9b6:	f383 8810 	msr	PRIMASK, r3
}
 801c9ba:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801c9bc:	1dbb      	adds	r3, r7, #6
 801c9be:	881a      	ldrh	r2, [r3, #0]
 801c9c0:	68b9      	ldr	r1, [r7, #8]
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	0018      	movs	r0, r3
 801c9c6:	f001 f8a3 	bl	801db10 <UART_Start_Receive_DMA>
 801c9ca:	0003      	movs	r3, r0
 801c9cc:	e000      	b.n	801c9d0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801c9ce:	2302      	movs	r3, #2
  }
}
 801c9d0:	0018      	movs	r0, r3
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	b008      	add	sp, #32
 801c9d6:	bd80      	pop	{r7, pc}
 801c9d8:	40004800 	.word	0x40004800

0801c9dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801c9dc:	b590      	push	{r4, r7, lr}
 801c9de:	b0ab      	sub	sp, #172	@ 0xac
 801c9e0:	af00      	add	r7, sp, #0
 801c9e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	69db      	ldr	r3, [r3, #28]
 801c9ea:	22a4      	movs	r2, #164	@ 0xa4
 801c9ec:	18b9      	adds	r1, r7, r2
 801c9ee:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	20a0      	movs	r0, #160	@ 0xa0
 801c9f8:	1839      	adds	r1, r7, r0
 801c9fa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	689b      	ldr	r3, [r3, #8]
 801ca02:	219c      	movs	r1, #156	@ 0x9c
 801ca04:	1879      	adds	r1, r7, r1
 801ca06:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ca08:	0011      	movs	r1, r2
 801ca0a:	18bb      	adds	r3, r7, r2
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	4a9c      	ldr	r2, [pc, #624]	@ (801cc80 <HAL_UART_IRQHandler+0x2a4>)
 801ca10:	4013      	ands	r3, r2
 801ca12:	2298      	movs	r2, #152	@ 0x98
 801ca14:	18bc      	adds	r4, r7, r2
 801ca16:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801ca18:	18bb      	adds	r3, r7, r2
 801ca1a:	681b      	ldr	r3, [r3, #0]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d114      	bne.n	801ca4a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ca20:	187b      	adds	r3, r7, r1
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	2220      	movs	r2, #32
 801ca26:	4013      	ands	r3, r2
 801ca28:	d00f      	beq.n	801ca4a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ca2a:	183b      	adds	r3, r7, r0
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	2220      	movs	r2, #32
 801ca30:	4013      	ands	r3, r2
 801ca32:	d00a      	beq.n	801ca4a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d100      	bne.n	801ca3e <HAL_UART_IRQHandler+0x62>
 801ca3c:	e2aa      	b.n	801cf94 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801ca3e:	687b      	ldr	r3, [r7, #4]
 801ca40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801ca42:	687a      	ldr	r2, [r7, #4]
 801ca44:	0010      	movs	r0, r2
 801ca46:	4798      	blx	r3
      }
      return;
 801ca48:	e2a4      	b.n	801cf94 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801ca4a:	2398      	movs	r3, #152	@ 0x98
 801ca4c:	18fb      	adds	r3, r7, r3
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d100      	bne.n	801ca56 <HAL_UART_IRQHandler+0x7a>
 801ca54:	e11a      	b.n	801cc8c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ca56:	239c      	movs	r3, #156	@ 0x9c
 801ca58:	18fb      	adds	r3, r7, r3
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	2201      	movs	r2, #1
 801ca5e:	4013      	ands	r3, r2
 801ca60:	d106      	bne.n	801ca70 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ca62:	23a0      	movs	r3, #160	@ 0xa0
 801ca64:	18fb      	adds	r3, r7, r3
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	4a86      	ldr	r2, [pc, #536]	@ (801cc84 <HAL_UART_IRQHandler+0x2a8>)
 801ca6a:	4013      	ands	r3, r2
 801ca6c:	d100      	bne.n	801ca70 <HAL_UART_IRQHandler+0x94>
 801ca6e:	e10d      	b.n	801cc8c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ca70:	23a4      	movs	r3, #164	@ 0xa4
 801ca72:	18fb      	adds	r3, r7, r3
 801ca74:	681b      	ldr	r3, [r3, #0]
 801ca76:	2201      	movs	r2, #1
 801ca78:	4013      	ands	r3, r2
 801ca7a:	d012      	beq.n	801caa2 <HAL_UART_IRQHandler+0xc6>
 801ca7c:	23a0      	movs	r3, #160	@ 0xa0
 801ca7e:	18fb      	adds	r3, r7, r3
 801ca80:	681a      	ldr	r2, [r3, #0]
 801ca82:	2380      	movs	r3, #128	@ 0x80
 801ca84:	005b      	lsls	r3, r3, #1
 801ca86:	4013      	ands	r3, r2
 801ca88:	d00b      	beq.n	801caa2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ca8a:	687b      	ldr	r3, [r7, #4]
 801ca8c:	681b      	ldr	r3, [r3, #0]
 801ca8e:	2201      	movs	r2, #1
 801ca90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	2284      	movs	r2, #132	@ 0x84
 801ca96:	589b      	ldr	r3, [r3, r2]
 801ca98:	2201      	movs	r2, #1
 801ca9a:	431a      	orrs	r2, r3
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2184      	movs	r1, #132	@ 0x84
 801caa0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801caa2:	23a4      	movs	r3, #164	@ 0xa4
 801caa4:	18fb      	adds	r3, r7, r3
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	2202      	movs	r2, #2
 801caaa:	4013      	ands	r3, r2
 801caac:	d011      	beq.n	801cad2 <HAL_UART_IRQHandler+0xf6>
 801caae:	239c      	movs	r3, #156	@ 0x9c
 801cab0:	18fb      	adds	r3, r7, r3
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	2201      	movs	r2, #1
 801cab6:	4013      	ands	r3, r2
 801cab8:	d00b      	beq.n	801cad2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	2202      	movs	r2, #2
 801cac0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801cac2:	687b      	ldr	r3, [r7, #4]
 801cac4:	2284      	movs	r2, #132	@ 0x84
 801cac6:	589b      	ldr	r3, [r3, r2]
 801cac8:	2204      	movs	r2, #4
 801caca:	431a      	orrs	r2, r3
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	2184      	movs	r1, #132	@ 0x84
 801cad0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801cad2:	23a4      	movs	r3, #164	@ 0xa4
 801cad4:	18fb      	adds	r3, r7, r3
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	2204      	movs	r2, #4
 801cada:	4013      	ands	r3, r2
 801cadc:	d011      	beq.n	801cb02 <HAL_UART_IRQHandler+0x126>
 801cade:	239c      	movs	r3, #156	@ 0x9c
 801cae0:	18fb      	adds	r3, r7, r3
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	2201      	movs	r2, #1
 801cae6:	4013      	ands	r3, r2
 801cae8:	d00b      	beq.n	801cb02 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	681b      	ldr	r3, [r3, #0]
 801caee:	2204      	movs	r2, #4
 801caf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	2284      	movs	r2, #132	@ 0x84
 801caf6:	589b      	ldr	r3, [r3, r2]
 801caf8:	2202      	movs	r2, #2
 801cafa:	431a      	orrs	r2, r3
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2184      	movs	r1, #132	@ 0x84
 801cb00:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801cb02:	23a4      	movs	r3, #164	@ 0xa4
 801cb04:	18fb      	adds	r3, r7, r3
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	2208      	movs	r2, #8
 801cb0a:	4013      	ands	r3, r2
 801cb0c:	d017      	beq.n	801cb3e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cb0e:	23a0      	movs	r3, #160	@ 0xa0
 801cb10:	18fb      	adds	r3, r7, r3
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	2220      	movs	r2, #32
 801cb16:	4013      	ands	r3, r2
 801cb18:	d105      	bne.n	801cb26 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801cb1a:	239c      	movs	r3, #156	@ 0x9c
 801cb1c:	18fb      	adds	r3, r7, r3
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	2201      	movs	r2, #1
 801cb22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801cb24:	d00b      	beq.n	801cb3e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	2208      	movs	r2, #8
 801cb2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	2284      	movs	r2, #132	@ 0x84
 801cb32:	589b      	ldr	r3, [r3, r2]
 801cb34:	2208      	movs	r2, #8
 801cb36:	431a      	orrs	r2, r3
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	2184      	movs	r1, #132	@ 0x84
 801cb3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801cb3e:	23a4      	movs	r3, #164	@ 0xa4
 801cb40:	18fb      	adds	r3, r7, r3
 801cb42:	681a      	ldr	r2, [r3, #0]
 801cb44:	2380      	movs	r3, #128	@ 0x80
 801cb46:	011b      	lsls	r3, r3, #4
 801cb48:	4013      	ands	r3, r2
 801cb4a:	d013      	beq.n	801cb74 <HAL_UART_IRQHandler+0x198>
 801cb4c:	23a0      	movs	r3, #160	@ 0xa0
 801cb4e:	18fb      	adds	r3, r7, r3
 801cb50:	681a      	ldr	r2, [r3, #0]
 801cb52:	2380      	movs	r3, #128	@ 0x80
 801cb54:	04db      	lsls	r3, r3, #19
 801cb56:	4013      	ands	r3, r2
 801cb58:	d00c      	beq.n	801cb74 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801cb5a:	687b      	ldr	r3, [r7, #4]
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	2280      	movs	r2, #128	@ 0x80
 801cb60:	0112      	lsls	r2, r2, #4
 801cb62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	2284      	movs	r2, #132	@ 0x84
 801cb68:	589b      	ldr	r3, [r3, r2]
 801cb6a:	2220      	movs	r2, #32
 801cb6c:	431a      	orrs	r2, r3
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	2184      	movs	r1, #132	@ 0x84
 801cb72:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	2284      	movs	r2, #132	@ 0x84
 801cb78:	589b      	ldr	r3, [r3, r2]
 801cb7a:	2b00      	cmp	r3, #0
 801cb7c:	d100      	bne.n	801cb80 <HAL_UART_IRQHandler+0x1a4>
 801cb7e:	e20b      	b.n	801cf98 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801cb80:	23a4      	movs	r3, #164	@ 0xa4
 801cb82:	18fb      	adds	r3, r7, r3
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	2220      	movs	r2, #32
 801cb88:	4013      	ands	r3, r2
 801cb8a:	d00e      	beq.n	801cbaa <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801cb8c:	23a0      	movs	r3, #160	@ 0xa0
 801cb8e:	18fb      	adds	r3, r7, r3
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	2220      	movs	r2, #32
 801cb94:	4013      	ands	r3, r2
 801cb96:	d008      	beq.n	801cbaa <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d004      	beq.n	801cbaa <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801cba0:	687b      	ldr	r3, [r7, #4]
 801cba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cba4:	687a      	ldr	r2, [r7, #4]
 801cba6:	0010      	movs	r0, r2
 801cba8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	2284      	movs	r2, #132	@ 0x84
 801cbae:	589b      	ldr	r3, [r3, r2]
 801cbb0:	2194      	movs	r1, #148	@ 0x94
 801cbb2:	187a      	adds	r2, r7, r1
 801cbb4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	689b      	ldr	r3, [r3, #8]
 801cbbc:	2240      	movs	r2, #64	@ 0x40
 801cbbe:	4013      	ands	r3, r2
 801cbc0:	2b40      	cmp	r3, #64	@ 0x40
 801cbc2:	d004      	beq.n	801cbce <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801cbc4:	187b      	adds	r3, r7, r1
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	2228      	movs	r2, #40	@ 0x28
 801cbca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801cbcc:	d04b      	beq.n	801cc66 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	0018      	movs	r0, r3
 801cbd2:	f001 f861 	bl	801dc98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	689b      	ldr	r3, [r3, #8]
 801cbdc:	2240      	movs	r2, #64	@ 0x40
 801cbde:	4013      	ands	r3, r2
 801cbe0:	2b40      	cmp	r3, #64	@ 0x40
 801cbe2:	d139      	bne.n	801cc58 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbe4:	f3ef 8310 	mrs	r3, PRIMASK
 801cbe8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801cbea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cbec:	2090      	movs	r0, #144	@ 0x90
 801cbee:	183a      	adds	r2, r7, r0
 801cbf0:	6013      	str	r3, [r2, #0]
 801cbf2:	2301      	movs	r3, #1
 801cbf4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801cbf8:	f383 8810 	msr	PRIMASK, r3
}
 801cbfc:	46c0      	nop			@ (mov r8, r8)
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	689a      	ldr	r2, [r3, #8]
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	2140      	movs	r1, #64	@ 0x40
 801cc0a:	438a      	bics	r2, r1
 801cc0c:	609a      	str	r2, [r3, #8]
 801cc0e:	183b      	adds	r3, r7, r0
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801cc16:	f383 8810 	msr	PRIMASK, r3
}
 801cc1a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d012      	beq.n	801cc4a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801cc24:	687b      	ldr	r3, [r7, #4]
 801cc26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc28:	4a17      	ldr	r2, [pc, #92]	@ (801cc88 <HAL_UART_IRQHandler+0x2ac>)
 801cc2a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc30:	0018      	movs	r0, r3
 801cc32:	f7f7 fda7 	bl	8014784 <HAL_DMA_Abort_IT>
 801cc36:	1e03      	subs	r3, r0, #0
 801cc38:	d020      	beq.n	801cc7c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cc44:	0018      	movs	r0, r3
 801cc46:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc48:	e018      	b.n	801cc7c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801cc4a:	687b      	ldr	r3, [r7, #4]
 801cc4c:	2298      	movs	r2, #152	@ 0x98
 801cc4e:	589b      	ldr	r3, [r3, r2]
 801cc50:	687a      	ldr	r2, [r7, #4]
 801cc52:	0010      	movs	r0, r2
 801cc54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc56:	e011      	b.n	801cc7c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2298      	movs	r2, #152	@ 0x98
 801cc5c:	589b      	ldr	r3, [r3, r2]
 801cc5e:	687a      	ldr	r2, [r7, #4]
 801cc60:	0010      	movs	r0, r2
 801cc62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc64:	e00a      	b.n	801cc7c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	2298      	movs	r2, #152	@ 0x98
 801cc6a:	589b      	ldr	r3, [r3, r2]
 801cc6c:	687a      	ldr	r2, [r7, #4]
 801cc6e:	0010      	movs	r0, r2
 801cc70:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	2284      	movs	r2, #132	@ 0x84
 801cc76:	2100      	movs	r1, #0
 801cc78:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801cc7a:	e18d      	b.n	801cf98 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801cc7c:	46c0      	nop			@ (mov r8, r8)
    return;
 801cc7e:	e18b      	b.n	801cf98 <HAL_UART_IRQHandler+0x5bc>
 801cc80:	0000080f 	.word	0x0000080f
 801cc84:	04000120 	.word	0x04000120
 801cc88:	0801e025 	.word	0x0801e025

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801cc90:	2b01      	cmp	r3, #1
 801cc92:	d000      	beq.n	801cc96 <HAL_UART_IRQHandler+0x2ba>
 801cc94:	e13d      	b.n	801cf12 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801cc96:	23a4      	movs	r3, #164	@ 0xa4
 801cc98:	18fb      	adds	r3, r7, r3
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	2210      	movs	r2, #16
 801cc9e:	4013      	ands	r3, r2
 801cca0:	d100      	bne.n	801cca4 <HAL_UART_IRQHandler+0x2c8>
 801cca2:	e136      	b.n	801cf12 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801cca4:	23a0      	movs	r3, #160	@ 0xa0
 801cca6:	18fb      	adds	r3, r7, r3
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	2210      	movs	r2, #16
 801ccac:	4013      	ands	r3, r2
 801ccae:	d100      	bne.n	801ccb2 <HAL_UART_IRQHandler+0x2d6>
 801ccb0:	e12f      	b.n	801cf12 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	681b      	ldr	r3, [r3, #0]
 801ccb6:	2210      	movs	r2, #16
 801ccb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	689b      	ldr	r3, [r3, #8]
 801ccc0:	2240      	movs	r2, #64	@ 0x40
 801ccc2:	4013      	ands	r3, r2
 801ccc4:	2b40      	cmp	r3, #64	@ 0x40
 801ccc6:	d000      	beq.n	801ccca <HAL_UART_IRQHandler+0x2ee>
 801ccc8:	e0a2      	b.n	801ce10 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	685a      	ldr	r2, [r3, #4]
 801ccd2:	217e      	movs	r1, #126	@ 0x7e
 801ccd4:	187b      	adds	r3, r7, r1
 801ccd6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801ccd8:	187b      	adds	r3, r7, r1
 801ccda:	881b      	ldrh	r3, [r3, #0]
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	d100      	bne.n	801cce2 <HAL_UART_IRQHandler+0x306>
 801cce0:	e15c      	b.n	801cf9c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	2258      	movs	r2, #88	@ 0x58
 801cce6:	5a9b      	ldrh	r3, [r3, r2]
 801cce8:	187a      	adds	r2, r7, r1
 801ccea:	8812      	ldrh	r2, [r2, #0]
 801ccec:	429a      	cmp	r2, r3
 801ccee:	d300      	bcc.n	801ccf2 <HAL_UART_IRQHandler+0x316>
 801ccf0:	e154      	b.n	801cf9c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	187a      	adds	r2, r7, r1
 801ccf6:	215a      	movs	r1, #90	@ 0x5a
 801ccf8:	8812      	ldrh	r2, [r2, #0]
 801ccfa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cd00:	681b      	ldr	r3, [r3, #0]
 801cd02:	681b      	ldr	r3, [r3, #0]
 801cd04:	2220      	movs	r2, #32
 801cd06:	4013      	ands	r3, r2
 801cd08:	d16f      	bne.n	801cdea <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd0a:	f3ef 8310 	mrs	r3, PRIMASK
 801cd0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801cd12:	67bb      	str	r3, [r7, #120]	@ 0x78
 801cd14:	2301      	movs	r3, #1
 801cd16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cd1a:	f383 8810 	msr	PRIMASK, r3
}
 801cd1e:	46c0      	nop			@ (mov r8, r8)
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	681a      	ldr	r2, [r3, #0]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	49a0      	ldr	r1, [pc, #640]	@ (801cfac <HAL_UART_IRQHandler+0x5d0>)
 801cd2c:	400a      	ands	r2, r1
 801cd2e:	601a      	str	r2, [r3, #0]
 801cd30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cd32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd36:	f383 8810 	msr	PRIMASK, r3
}
 801cd3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd3c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801cd42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cd44:	677b      	str	r3, [r7, #116]	@ 0x74
 801cd46:	2301      	movs	r3, #1
 801cd48:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd4c:	f383 8810 	msr	PRIMASK, r3
}
 801cd50:	46c0      	nop			@ (mov r8, r8)
 801cd52:	687b      	ldr	r3, [r7, #4]
 801cd54:	681b      	ldr	r3, [r3, #0]
 801cd56:	689a      	ldr	r2, [r3, #8]
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	2101      	movs	r1, #1
 801cd5e:	438a      	bics	r2, r1
 801cd60:	609a      	str	r2, [r3, #8]
 801cd62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801cd64:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd68:	f383 8810 	msr	PRIMASK, r3
}
 801cd6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd6e:	f3ef 8310 	mrs	r3, PRIMASK
 801cd72:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801cd74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801cd76:	673b      	str	r3, [r7, #112]	@ 0x70
 801cd78:	2301      	movs	r3, #1
 801cd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd7e:	f383 8810 	msr	PRIMASK, r3
}
 801cd82:	46c0      	nop			@ (mov r8, r8)
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	689a      	ldr	r2, [r3, #8]
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	2140      	movs	r1, #64	@ 0x40
 801cd90:	438a      	bics	r2, r1
 801cd92:	609a      	str	r2, [r3, #8]
 801cd94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cd96:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd9a:	f383 8810 	msr	PRIMASK, r3
}
 801cd9e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	2280      	movs	r2, #128	@ 0x80
 801cda4:	2120      	movs	r1, #32
 801cda6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdae:	f3ef 8310 	mrs	r3, PRIMASK
 801cdb2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801cdb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cdb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801cdb8:	2301      	movs	r3, #1
 801cdba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801cdbe:	f383 8810 	msr	PRIMASK, r3
}
 801cdc2:	46c0      	nop			@ (mov r8, r8)
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	681a      	ldr	r2, [r3, #0]
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	681b      	ldr	r3, [r3, #0]
 801cdce:	2110      	movs	r1, #16
 801cdd0:	438a      	bics	r2, r1
 801cdd2:	601a      	str	r2, [r3, #0]
 801cdd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801cdd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801cdda:	f383 8810 	msr	PRIMASK, r3
}
 801cdde:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cde4:	0018      	movs	r0, r3
 801cde6:	f7f7 fc8d 	bl	8014704 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	2202      	movs	r2, #2
 801cdee:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	22ac      	movs	r2, #172	@ 0xac
 801cdf4:	589b      	ldr	r3, [r3, r2]
 801cdf6:	687a      	ldr	r2, [r7, #4]
 801cdf8:	2158      	movs	r1, #88	@ 0x58
 801cdfa:	5a51      	ldrh	r1, [r2, r1]
 801cdfc:	687a      	ldr	r2, [r7, #4]
 801cdfe:	205a      	movs	r0, #90	@ 0x5a
 801ce00:	5a12      	ldrh	r2, [r2, r0]
 801ce02:	b292      	uxth	r2, r2
 801ce04:	1a8a      	subs	r2, r1, r2
 801ce06:	b291      	uxth	r1, r2
 801ce08:	687a      	ldr	r2, [r7, #4]
 801ce0a:	0010      	movs	r0, r2
 801ce0c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ce0e:	e0c5      	b.n	801cf9c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	2258      	movs	r2, #88	@ 0x58
 801ce14:	5a99      	ldrh	r1, [r3, r2]
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	225a      	movs	r2, #90	@ 0x5a
 801ce1a:	5a9b      	ldrh	r3, [r3, r2]
 801ce1c:	b29a      	uxth	r2, r3
 801ce1e:	208e      	movs	r0, #142	@ 0x8e
 801ce20:	183b      	adds	r3, r7, r0
 801ce22:	1a8a      	subs	r2, r1, r2
 801ce24:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	225a      	movs	r2, #90	@ 0x5a
 801ce2a:	5a9b      	ldrh	r3, [r3, r2]
 801ce2c:	b29b      	uxth	r3, r3
 801ce2e:	2b00      	cmp	r3, #0
 801ce30:	d100      	bne.n	801ce34 <HAL_UART_IRQHandler+0x458>
 801ce32:	e0b5      	b.n	801cfa0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801ce34:	183b      	adds	r3, r7, r0
 801ce36:	881b      	ldrh	r3, [r3, #0]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d100      	bne.n	801ce3e <HAL_UART_IRQHandler+0x462>
 801ce3c:	e0b0      	b.n	801cfa0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce3e:	f3ef 8310 	mrs	r3, PRIMASK
 801ce42:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce44:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ce46:	2488      	movs	r4, #136	@ 0x88
 801ce48:	193a      	adds	r2, r7, r4
 801ce4a:	6013      	str	r3, [r2, #0]
 801ce4c:	2301      	movs	r3, #1
 801ce4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce50:	693b      	ldr	r3, [r7, #16]
 801ce52:	f383 8810 	msr	PRIMASK, r3
}
 801ce56:	46c0      	nop			@ (mov r8, r8)
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	681b      	ldr	r3, [r3, #0]
 801ce5c:	681a      	ldr	r2, [r3, #0]
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	4953      	ldr	r1, [pc, #332]	@ (801cfb0 <HAL_UART_IRQHandler+0x5d4>)
 801ce64:	400a      	ands	r2, r1
 801ce66:	601a      	str	r2, [r3, #0]
 801ce68:	193b      	adds	r3, r7, r4
 801ce6a:	681b      	ldr	r3, [r3, #0]
 801ce6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce6e:	697b      	ldr	r3, [r7, #20]
 801ce70:	f383 8810 	msr	PRIMASK, r3
}
 801ce74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce76:	f3ef 8310 	mrs	r3, PRIMASK
 801ce7a:	61bb      	str	r3, [r7, #24]
  return(result);
 801ce7c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ce7e:	2484      	movs	r4, #132	@ 0x84
 801ce80:	193a      	adds	r2, r7, r4
 801ce82:	6013      	str	r3, [r2, #0]
 801ce84:	2301      	movs	r3, #1
 801ce86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce88:	69fb      	ldr	r3, [r7, #28]
 801ce8a:	f383 8810 	msr	PRIMASK, r3
}
 801ce8e:	46c0      	nop			@ (mov r8, r8)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	689a      	ldr	r2, [r3, #8]
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	2101      	movs	r1, #1
 801ce9c:	438a      	bics	r2, r1
 801ce9e:	609a      	str	r2, [r3, #8]
 801cea0:	193b      	adds	r3, r7, r4
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cea6:	6a3b      	ldr	r3, [r7, #32]
 801cea8:	f383 8810 	msr	PRIMASK, r3
}
 801ceac:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	2280      	movs	r2, #128	@ 0x80
 801ceb2:	2120      	movs	r1, #32
 801ceb4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	2200      	movs	r2, #0
 801ceba:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	2200      	movs	r2, #0
 801cec0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec2:	f3ef 8310 	mrs	r3, PRIMASK
 801cec6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801cec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ceca:	2480      	movs	r4, #128	@ 0x80
 801cecc:	193a      	adds	r2, r7, r4
 801cece:	6013      	str	r3, [r2, #0]
 801ced0:	2301      	movs	r3, #1
 801ced2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ced4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ced6:	f383 8810 	msr	PRIMASK, r3
}
 801ceda:	46c0      	nop			@ (mov r8, r8)
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	681a      	ldr	r2, [r3, #0]
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	2110      	movs	r1, #16
 801cee8:	438a      	bics	r2, r1
 801ceea:	601a      	str	r2, [r3, #0]
 801ceec:	193b      	adds	r3, r7, r4
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cef4:	f383 8810 	msr	PRIMASK, r3
}
 801cef8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	2202      	movs	r2, #2
 801cefe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	22ac      	movs	r2, #172	@ 0xac
 801cf04:	589b      	ldr	r3, [r3, r2]
 801cf06:	183a      	adds	r2, r7, r0
 801cf08:	8811      	ldrh	r1, [r2, #0]
 801cf0a:	687a      	ldr	r2, [r7, #4]
 801cf0c:	0010      	movs	r0, r2
 801cf0e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801cf10:	e046      	b.n	801cfa0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801cf12:	23a4      	movs	r3, #164	@ 0xa4
 801cf14:	18fb      	adds	r3, r7, r3
 801cf16:	681a      	ldr	r2, [r3, #0]
 801cf18:	2380      	movs	r3, #128	@ 0x80
 801cf1a:	035b      	lsls	r3, r3, #13
 801cf1c:	4013      	ands	r3, r2
 801cf1e:	d012      	beq.n	801cf46 <HAL_UART_IRQHandler+0x56a>
 801cf20:	239c      	movs	r3, #156	@ 0x9c
 801cf22:	18fb      	adds	r3, r7, r3
 801cf24:	681a      	ldr	r2, [r3, #0]
 801cf26:	2380      	movs	r3, #128	@ 0x80
 801cf28:	03db      	lsls	r3, r3, #15
 801cf2a:	4013      	ands	r3, r2
 801cf2c:	d00b      	beq.n	801cf46 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	2280      	movs	r2, #128	@ 0x80
 801cf34:	0352      	lsls	r2, r2, #13
 801cf36:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	22a8      	movs	r2, #168	@ 0xa8
 801cf3c:	589b      	ldr	r3, [r3, r2]
 801cf3e:	687a      	ldr	r2, [r7, #4]
 801cf40:	0010      	movs	r0, r2
 801cf42:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801cf44:	e02f      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801cf46:	23a4      	movs	r3, #164	@ 0xa4
 801cf48:	18fb      	adds	r3, r7, r3
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2280      	movs	r2, #128	@ 0x80
 801cf4e:	4013      	ands	r3, r2
 801cf50:	d00f      	beq.n	801cf72 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801cf52:	23a0      	movs	r3, #160	@ 0xa0
 801cf54:	18fb      	adds	r3, r7, r3
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2280      	movs	r2, #128	@ 0x80
 801cf5a:	4013      	ands	r3, r2
 801cf5c:	d009      	beq.n	801cf72 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801cf5e:	687b      	ldr	r3, [r7, #4]
 801cf60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	d01e      	beq.n	801cfa4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801cf6a:	687a      	ldr	r2, [r7, #4]
 801cf6c:	0010      	movs	r0, r2
 801cf6e:	4798      	blx	r3
    }
    return;
 801cf70:	e018      	b.n	801cfa4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801cf72:	23a4      	movs	r3, #164	@ 0xa4
 801cf74:	18fb      	adds	r3, r7, r3
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	2240      	movs	r2, #64	@ 0x40
 801cf7a:	4013      	ands	r3, r2
 801cf7c:	d013      	beq.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
 801cf7e:	23a0      	movs	r3, #160	@ 0xa0
 801cf80:	18fb      	adds	r3, r7, r3
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	2240      	movs	r2, #64	@ 0x40
 801cf86:	4013      	ands	r3, r2
 801cf88:	d00d      	beq.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	0018      	movs	r0, r3
 801cf8e:	f001 f862 	bl	801e056 <UART_EndTransmit_IT>
    return;
 801cf92:	e008      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801cf94:	46c0      	nop			@ (mov r8, r8)
 801cf96:	e006      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
    return;
 801cf98:	46c0      	nop			@ (mov r8, r8)
 801cf9a:	e004      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801cf9c:	46c0      	nop			@ (mov r8, r8)
 801cf9e:	e002      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
      return;
 801cfa0:	46c0      	nop			@ (mov r8, r8)
 801cfa2:	e000      	b.n	801cfa6 <HAL_UART_IRQHandler+0x5ca>
    return;
 801cfa4:	46c0      	nop			@ (mov r8, r8)
  }

}
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	b02b      	add	sp, #172	@ 0xac
 801cfaa:	bd90      	pop	{r4, r7, pc}
 801cfac:	fffffeff 	.word	0xfffffeff
 801cfb0:	fffffedf 	.word	0xfffffedf

0801cfb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801cfb4:	b580      	push	{r7, lr}
 801cfb6:	b082      	sub	sp, #8
 801cfb8:	af00      	add	r7, sp, #0
 801cfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801cfbc:	46c0      	nop			@ (mov r8, r8)
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	b002      	add	sp, #8
 801cfc2:	bd80      	pop	{r7, pc}

0801cfc4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b082      	sub	sp, #8
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801cfcc:	46c0      	nop			@ (mov r8, r8)
 801cfce:	46bd      	mov	sp, r7
 801cfd0:	b002      	add	sp, #8
 801cfd2:	bd80      	pop	{r7, pc}

0801cfd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b082      	sub	sp, #8
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801cfdc:	46c0      	nop			@ (mov r8, r8)
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	b002      	add	sp, #8
 801cfe2:	bd80      	pop	{r7, pc}

0801cfe4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801cfe4:	b580      	push	{r7, lr}
 801cfe6:	b082      	sub	sp, #8
 801cfe8:	af00      	add	r7, sp, #0
 801cfea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801cfec:	46c0      	nop			@ (mov r8, r8)
 801cfee:	46bd      	mov	sp, r7
 801cff0:	b002      	add	sp, #8
 801cff2:	bd80      	pop	{r7, pc}

0801cff4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801cffc:	46c0      	nop			@ (mov r8, r8)
 801cffe:	46bd      	mov	sp, r7
 801d000:	b002      	add	sp, #8
 801d002:	bd80      	pop	{r7, pc}

0801d004 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b082      	sub	sp, #8
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801d00c:	46c0      	nop			@ (mov r8, r8)
 801d00e:	46bd      	mov	sp, r7
 801d010:	b002      	add	sp, #8
 801d012:	bd80      	pop	{r7, pc}

0801d014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b082      	sub	sp, #8
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
 801d01c:	000a      	movs	r2, r1
 801d01e:	1cbb      	adds	r3, r7, #2
 801d020:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801d022:	46c0      	nop			@ (mov r8, r8)
 801d024:	46bd      	mov	sp, r7
 801d026:	b002      	add	sp, #8
 801d028:	bd80      	pop	{r7, pc}
	...

0801d02c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b082      	sub	sp, #8
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	2188      	movs	r1, #136	@ 0x88
 801d038:	4a14      	ldr	r2, [pc, #80]	@ (801d08c <UART_InitCallbacksToDefault+0x60>)
 801d03a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	218c      	movs	r1, #140	@ 0x8c
 801d040:	4a13      	ldr	r2, [pc, #76]	@ (801d090 <UART_InitCallbacksToDefault+0x64>)
 801d042:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	2190      	movs	r1, #144	@ 0x90
 801d048:	4a12      	ldr	r2, [pc, #72]	@ (801d094 <UART_InitCallbacksToDefault+0x68>)
 801d04a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	2194      	movs	r1, #148	@ 0x94
 801d050:	4a11      	ldr	r2, [pc, #68]	@ (801d098 <UART_InitCallbacksToDefault+0x6c>)
 801d052:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	2198      	movs	r1, #152	@ 0x98
 801d058:	4a10      	ldr	r2, [pc, #64]	@ (801d09c <UART_InitCallbacksToDefault+0x70>)
 801d05a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	219c      	movs	r1, #156	@ 0x9c
 801d060:	4a0f      	ldr	r2, [pc, #60]	@ (801d0a0 <UART_InitCallbacksToDefault+0x74>)
 801d062:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801d064:	687b      	ldr	r3, [r7, #4]
 801d066:	21a0      	movs	r1, #160	@ 0xa0
 801d068:	4a0e      	ldr	r2, [pc, #56]	@ (801d0a4 <UART_InitCallbacksToDefault+0x78>)
 801d06a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	21a4      	movs	r1, #164	@ 0xa4
 801d070:	4a0d      	ldr	r2, [pc, #52]	@ (801d0a8 <UART_InitCallbacksToDefault+0x7c>)
 801d072:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	21a8      	movs	r1, #168	@ 0xa8
 801d078:	4a0c      	ldr	r2, [pc, #48]	@ (801d0ac <UART_InitCallbacksToDefault+0x80>)
 801d07a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	21ac      	movs	r1, #172	@ 0xac
 801d080:	4a0b      	ldr	r2, [pc, #44]	@ (801d0b0 <UART_InitCallbacksToDefault+0x84>)
 801d082:	505a      	str	r2, [r3, r1]

}
 801d084:	46c0      	nop			@ (mov r8, r8)
 801d086:	46bd      	mov	sp, r7
 801d088:	b002      	add	sp, #8
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	0801cfc5 	.word	0x0801cfc5
 801d090:	0801cfb5 	.word	0x0801cfb5
 801d094:	0801cfd5 	.word	0x0801cfd5
 801d098:	0800c7e5 	.word	0x0800c7e5
 801d09c:	08005111 	.word	0x08005111
 801d0a0:	0801cfe5 	.word	0x0801cfe5
 801d0a4:	0801cff5 	.word	0x0801cff5
 801d0a8:	0801d005 	.word	0x0801d005
 801d0ac:	0801e449 	.word	0x0801e449
 801d0b0:	0801d015 	.word	0x0801d015

0801d0b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801d0b4:	b5b0      	push	{r4, r5, r7, lr}
 801d0b6:	b08e      	sub	sp, #56	@ 0x38
 801d0b8:	af00      	add	r7, sp, #0
 801d0ba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801d0bc:	231a      	movs	r3, #26
 801d0be:	2218      	movs	r2, #24
 801d0c0:	189b      	adds	r3, r3, r2
 801d0c2:	19db      	adds	r3, r3, r7
 801d0c4:	2200      	movs	r2, #0
 801d0c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801d0c8:	69fb      	ldr	r3, [r7, #28]
 801d0ca:	689a      	ldr	r2, [r3, #8]
 801d0cc:	69fb      	ldr	r3, [r7, #28]
 801d0ce:	691b      	ldr	r3, [r3, #16]
 801d0d0:	431a      	orrs	r2, r3
 801d0d2:	69fb      	ldr	r3, [r7, #28]
 801d0d4:	695b      	ldr	r3, [r3, #20]
 801d0d6:	431a      	orrs	r2, r3
 801d0d8:	69fb      	ldr	r3, [r7, #28]
 801d0da:	69db      	ldr	r3, [r3, #28]
 801d0dc:	4313      	orrs	r3, r2
 801d0de:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801d0e0:	69fb      	ldr	r3, [r7, #28]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	4ac3      	ldr	r2, [pc, #780]	@ (801d3f4 <UART_SetConfig+0x340>)
 801d0e8:	4013      	ands	r3, r2
 801d0ea:	0019      	movs	r1, r3
 801d0ec:	69fb      	ldr	r3, [r7, #28]
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d0f2:	430a      	orrs	r2, r1
 801d0f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801d0f6:	69fb      	ldr	r3, [r7, #28]
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	685b      	ldr	r3, [r3, #4]
 801d0fc:	4abe      	ldr	r2, [pc, #760]	@ (801d3f8 <UART_SetConfig+0x344>)
 801d0fe:	4013      	ands	r3, r2
 801d100:	0019      	movs	r1, r3
 801d102:	69fb      	ldr	r3, [r7, #28]
 801d104:	68da      	ldr	r2, [r3, #12]
 801d106:	69fb      	ldr	r3, [r7, #28]
 801d108:	681b      	ldr	r3, [r3, #0]
 801d10a:	430a      	orrs	r2, r1
 801d10c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801d10e:	69fb      	ldr	r3, [r7, #28]
 801d110:	699b      	ldr	r3, [r3, #24]
 801d112:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801d114:	69fb      	ldr	r3, [r7, #28]
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	4ab8      	ldr	r2, [pc, #736]	@ (801d3fc <UART_SetConfig+0x348>)
 801d11a:	4293      	cmp	r3, r2
 801d11c:	d004      	beq.n	801d128 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801d11e:	69fb      	ldr	r3, [r7, #28]
 801d120:	6a1b      	ldr	r3, [r3, #32]
 801d122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d124:	4313      	orrs	r3, r2
 801d126:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801d128:	69fb      	ldr	r3, [r7, #28]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	689b      	ldr	r3, [r3, #8]
 801d12e:	4ab4      	ldr	r2, [pc, #720]	@ (801d400 <UART_SetConfig+0x34c>)
 801d130:	4013      	ands	r3, r2
 801d132:	0019      	movs	r1, r3
 801d134:	69fb      	ldr	r3, [r7, #28]
 801d136:	681b      	ldr	r3, [r3, #0]
 801d138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801d13a:	430a      	orrs	r2, r1
 801d13c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801d13e:	69fb      	ldr	r3, [r7, #28]
 801d140:	681b      	ldr	r3, [r3, #0]
 801d142:	4ab0      	ldr	r2, [pc, #704]	@ (801d404 <UART_SetConfig+0x350>)
 801d144:	4293      	cmp	r3, r2
 801d146:	d131      	bne.n	801d1ac <UART_SetConfig+0xf8>
 801d148:	4baf      	ldr	r3, [pc, #700]	@ (801d408 <UART_SetConfig+0x354>)
 801d14a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d14c:	2203      	movs	r2, #3
 801d14e:	4013      	ands	r3, r2
 801d150:	2b03      	cmp	r3, #3
 801d152:	d01d      	beq.n	801d190 <UART_SetConfig+0xdc>
 801d154:	d823      	bhi.n	801d19e <UART_SetConfig+0xea>
 801d156:	2b02      	cmp	r3, #2
 801d158:	d00c      	beq.n	801d174 <UART_SetConfig+0xc0>
 801d15a:	d820      	bhi.n	801d19e <UART_SetConfig+0xea>
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d002      	beq.n	801d166 <UART_SetConfig+0xb2>
 801d160:	2b01      	cmp	r3, #1
 801d162:	d00e      	beq.n	801d182 <UART_SetConfig+0xce>
 801d164:	e01b      	b.n	801d19e <UART_SetConfig+0xea>
 801d166:	231b      	movs	r3, #27
 801d168:	2218      	movs	r2, #24
 801d16a:	189b      	adds	r3, r3, r2
 801d16c:	19db      	adds	r3, r3, r7
 801d16e:	2201      	movs	r2, #1
 801d170:	701a      	strb	r2, [r3, #0]
 801d172:	e0b4      	b.n	801d2de <UART_SetConfig+0x22a>
 801d174:	231b      	movs	r3, #27
 801d176:	2218      	movs	r2, #24
 801d178:	189b      	adds	r3, r3, r2
 801d17a:	19db      	adds	r3, r3, r7
 801d17c:	2202      	movs	r2, #2
 801d17e:	701a      	strb	r2, [r3, #0]
 801d180:	e0ad      	b.n	801d2de <UART_SetConfig+0x22a>
 801d182:	231b      	movs	r3, #27
 801d184:	2218      	movs	r2, #24
 801d186:	189b      	adds	r3, r3, r2
 801d188:	19db      	adds	r3, r3, r7
 801d18a:	2204      	movs	r2, #4
 801d18c:	701a      	strb	r2, [r3, #0]
 801d18e:	e0a6      	b.n	801d2de <UART_SetConfig+0x22a>
 801d190:	231b      	movs	r3, #27
 801d192:	2218      	movs	r2, #24
 801d194:	189b      	adds	r3, r3, r2
 801d196:	19db      	adds	r3, r3, r7
 801d198:	2208      	movs	r2, #8
 801d19a:	701a      	strb	r2, [r3, #0]
 801d19c:	e09f      	b.n	801d2de <UART_SetConfig+0x22a>
 801d19e:	231b      	movs	r3, #27
 801d1a0:	2218      	movs	r2, #24
 801d1a2:	189b      	adds	r3, r3, r2
 801d1a4:	19db      	adds	r3, r3, r7
 801d1a6:	2210      	movs	r2, #16
 801d1a8:	701a      	strb	r2, [r3, #0]
 801d1aa:	e098      	b.n	801d2de <UART_SetConfig+0x22a>
 801d1ac:	69fb      	ldr	r3, [r7, #28]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	4a96      	ldr	r2, [pc, #600]	@ (801d40c <UART_SetConfig+0x358>)
 801d1b2:	4293      	cmp	r3, r2
 801d1b4:	d131      	bne.n	801d21a <UART_SetConfig+0x166>
 801d1b6:	4b94      	ldr	r3, [pc, #592]	@ (801d408 <UART_SetConfig+0x354>)
 801d1b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d1ba:	220c      	movs	r2, #12
 801d1bc:	4013      	ands	r3, r2
 801d1be:	2b0c      	cmp	r3, #12
 801d1c0:	d01d      	beq.n	801d1fe <UART_SetConfig+0x14a>
 801d1c2:	d823      	bhi.n	801d20c <UART_SetConfig+0x158>
 801d1c4:	2b08      	cmp	r3, #8
 801d1c6:	d00c      	beq.n	801d1e2 <UART_SetConfig+0x12e>
 801d1c8:	d820      	bhi.n	801d20c <UART_SetConfig+0x158>
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d002      	beq.n	801d1d4 <UART_SetConfig+0x120>
 801d1ce:	2b04      	cmp	r3, #4
 801d1d0:	d00e      	beq.n	801d1f0 <UART_SetConfig+0x13c>
 801d1d2:	e01b      	b.n	801d20c <UART_SetConfig+0x158>
 801d1d4:	231b      	movs	r3, #27
 801d1d6:	2218      	movs	r2, #24
 801d1d8:	189b      	adds	r3, r3, r2
 801d1da:	19db      	adds	r3, r3, r7
 801d1dc:	2200      	movs	r2, #0
 801d1de:	701a      	strb	r2, [r3, #0]
 801d1e0:	e07d      	b.n	801d2de <UART_SetConfig+0x22a>
 801d1e2:	231b      	movs	r3, #27
 801d1e4:	2218      	movs	r2, #24
 801d1e6:	189b      	adds	r3, r3, r2
 801d1e8:	19db      	adds	r3, r3, r7
 801d1ea:	2202      	movs	r2, #2
 801d1ec:	701a      	strb	r2, [r3, #0]
 801d1ee:	e076      	b.n	801d2de <UART_SetConfig+0x22a>
 801d1f0:	231b      	movs	r3, #27
 801d1f2:	2218      	movs	r2, #24
 801d1f4:	189b      	adds	r3, r3, r2
 801d1f6:	19db      	adds	r3, r3, r7
 801d1f8:	2204      	movs	r2, #4
 801d1fa:	701a      	strb	r2, [r3, #0]
 801d1fc:	e06f      	b.n	801d2de <UART_SetConfig+0x22a>
 801d1fe:	231b      	movs	r3, #27
 801d200:	2218      	movs	r2, #24
 801d202:	189b      	adds	r3, r3, r2
 801d204:	19db      	adds	r3, r3, r7
 801d206:	2208      	movs	r2, #8
 801d208:	701a      	strb	r2, [r3, #0]
 801d20a:	e068      	b.n	801d2de <UART_SetConfig+0x22a>
 801d20c:	231b      	movs	r3, #27
 801d20e:	2218      	movs	r2, #24
 801d210:	189b      	adds	r3, r3, r2
 801d212:	19db      	adds	r3, r3, r7
 801d214:	2210      	movs	r2, #16
 801d216:	701a      	strb	r2, [r3, #0]
 801d218:	e061      	b.n	801d2de <UART_SetConfig+0x22a>
 801d21a:	69fb      	ldr	r3, [r7, #28]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	4a7c      	ldr	r2, [pc, #496]	@ (801d410 <UART_SetConfig+0x35c>)
 801d220:	4293      	cmp	r3, r2
 801d222:	d106      	bne.n	801d232 <UART_SetConfig+0x17e>
 801d224:	231b      	movs	r3, #27
 801d226:	2218      	movs	r2, #24
 801d228:	189b      	adds	r3, r3, r2
 801d22a:	19db      	adds	r3, r3, r7
 801d22c:	2200      	movs	r2, #0
 801d22e:	701a      	strb	r2, [r3, #0]
 801d230:	e055      	b.n	801d2de <UART_SetConfig+0x22a>
 801d232:	69fb      	ldr	r3, [r7, #28]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	4a77      	ldr	r2, [pc, #476]	@ (801d414 <UART_SetConfig+0x360>)
 801d238:	4293      	cmp	r3, r2
 801d23a:	d106      	bne.n	801d24a <UART_SetConfig+0x196>
 801d23c:	231b      	movs	r3, #27
 801d23e:	2218      	movs	r2, #24
 801d240:	189b      	adds	r3, r3, r2
 801d242:	19db      	adds	r3, r3, r7
 801d244:	2200      	movs	r2, #0
 801d246:	701a      	strb	r2, [r3, #0]
 801d248:	e049      	b.n	801d2de <UART_SetConfig+0x22a>
 801d24a:	69fb      	ldr	r3, [r7, #28]
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	4a6b      	ldr	r2, [pc, #428]	@ (801d3fc <UART_SetConfig+0x348>)
 801d250:	4293      	cmp	r3, r2
 801d252:	d13e      	bne.n	801d2d2 <UART_SetConfig+0x21e>
 801d254:	4b6c      	ldr	r3, [pc, #432]	@ (801d408 <UART_SetConfig+0x354>)
 801d256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801d258:	23c0      	movs	r3, #192	@ 0xc0
 801d25a:	011b      	lsls	r3, r3, #4
 801d25c:	4013      	ands	r3, r2
 801d25e:	22c0      	movs	r2, #192	@ 0xc0
 801d260:	0112      	lsls	r2, r2, #4
 801d262:	4293      	cmp	r3, r2
 801d264:	d027      	beq.n	801d2b6 <UART_SetConfig+0x202>
 801d266:	22c0      	movs	r2, #192	@ 0xc0
 801d268:	0112      	lsls	r2, r2, #4
 801d26a:	4293      	cmp	r3, r2
 801d26c:	d82a      	bhi.n	801d2c4 <UART_SetConfig+0x210>
 801d26e:	2280      	movs	r2, #128	@ 0x80
 801d270:	0112      	lsls	r2, r2, #4
 801d272:	4293      	cmp	r3, r2
 801d274:	d011      	beq.n	801d29a <UART_SetConfig+0x1e6>
 801d276:	2280      	movs	r2, #128	@ 0x80
 801d278:	0112      	lsls	r2, r2, #4
 801d27a:	4293      	cmp	r3, r2
 801d27c:	d822      	bhi.n	801d2c4 <UART_SetConfig+0x210>
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d004      	beq.n	801d28c <UART_SetConfig+0x1d8>
 801d282:	2280      	movs	r2, #128	@ 0x80
 801d284:	00d2      	lsls	r2, r2, #3
 801d286:	4293      	cmp	r3, r2
 801d288:	d00e      	beq.n	801d2a8 <UART_SetConfig+0x1f4>
 801d28a:	e01b      	b.n	801d2c4 <UART_SetConfig+0x210>
 801d28c:	231b      	movs	r3, #27
 801d28e:	2218      	movs	r2, #24
 801d290:	189b      	adds	r3, r3, r2
 801d292:	19db      	adds	r3, r3, r7
 801d294:	2200      	movs	r2, #0
 801d296:	701a      	strb	r2, [r3, #0]
 801d298:	e021      	b.n	801d2de <UART_SetConfig+0x22a>
 801d29a:	231b      	movs	r3, #27
 801d29c:	2218      	movs	r2, #24
 801d29e:	189b      	adds	r3, r3, r2
 801d2a0:	19db      	adds	r3, r3, r7
 801d2a2:	2202      	movs	r2, #2
 801d2a4:	701a      	strb	r2, [r3, #0]
 801d2a6:	e01a      	b.n	801d2de <UART_SetConfig+0x22a>
 801d2a8:	231b      	movs	r3, #27
 801d2aa:	2218      	movs	r2, #24
 801d2ac:	189b      	adds	r3, r3, r2
 801d2ae:	19db      	adds	r3, r3, r7
 801d2b0:	2204      	movs	r2, #4
 801d2b2:	701a      	strb	r2, [r3, #0]
 801d2b4:	e013      	b.n	801d2de <UART_SetConfig+0x22a>
 801d2b6:	231b      	movs	r3, #27
 801d2b8:	2218      	movs	r2, #24
 801d2ba:	189b      	adds	r3, r3, r2
 801d2bc:	19db      	adds	r3, r3, r7
 801d2be:	2208      	movs	r2, #8
 801d2c0:	701a      	strb	r2, [r3, #0]
 801d2c2:	e00c      	b.n	801d2de <UART_SetConfig+0x22a>
 801d2c4:	231b      	movs	r3, #27
 801d2c6:	2218      	movs	r2, #24
 801d2c8:	189b      	adds	r3, r3, r2
 801d2ca:	19db      	adds	r3, r3, r7
 801d2cc:	2210      	movs	r2, #16
 801d2ce:	701a      	strb	r2, [r3, #0]
 801d2d0:	e005      	b.n	801d2de <UART_SetConfig+0x22a>
 801d2d2:	231b      	movs	r3, #27
 801d2d4:	2218      	movs	r2, #24
 801d2d6:	189b      	adds	r3, r3, r2
 801d2d8:	19db      	adds	r3, r3, r7
 801d2da:	2210      	movs	r2, #16
 801d2dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801d2de:	69fb      	ldr	r3, [r7, #28]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	4a46      	ldr	r2, [pc, #280]	@ (801d3fc <UART_SetConfig+0x348>)
 801d2e4:	4293      	cmp	r3, r2
 801d2e6:	d000      	beq.n	801d2ea <UART_SetConfig+0x236>
 801d2e8:	e09a      	b.n	801d420 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801d2ea:	231b      	movs	r3, #27
 801d2ec:	2218      	movs	r2, #24
 801d2ee:	189b      	adds	r3, r3, r2
 801d2f0:	19db      	adds	r3, r3, r7
 801d2f2:	781b      	ldrb	r3, [r3, #0]
 801d2f4:	2b08      	cmp	r3, #8
 801d2f6:	d01d      	beq.n	801d334 <UART_SetConfig+0x280>
 801d2f8:	dc20      	bgt.n	801d33c <UART_SetConfig+0x288>
 801d2fa:	2b04      	cmp	r3, #4
 801d2fc:	d015      	beq.n	801d32a <UART_SetConfig+0x276>
 801d2fe:	dc1d      	bgt.n	801d33c <UART_SetConfig+0x288>
 801d300:	2b00      	cmp	r3, #0
 801d302:	d002      	beq.n	801d30a <UART_SetConfig+0x256>
 801d304:	2b02      	cmp	r3, #2
 801d306:	d005      	beq.n	801d314 <UART_SetConfig+0x260>
 801d308:	e018      	b.n	801d33c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d30a:	f7fd fe4b 	bl	801afa4 <HAL_RCC_GetPCLK1Freq>
 801d30e:	0003      	movs	r3, r0
 801d310:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d312:	e01c      	b.n	801d34e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d314:	4b3c      	ldr	r3, [pc, #240]	@ (801d408 <UART_SetConfig+0x354>)
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	2210      	movs	r2, #16
 801d31a:	4013      	ands	r3, r2
 801d31c:	d002      	beq.n	801d324 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d31e:	4b3e      	ldr	r3, [pc, #248]	@ (801d418 <UART_SetConfig+0x364>)
 801d320:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d322:	e014      	b.n	801d34e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801d324:	4b3d      	ldr	r3, [pc, #244]	@ (801d41c <UART_SetConfig+0x368>)
 801d326:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d328:	e011      	b.n	801d34e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d32a:	f7fd fd8b 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801d32e:	0003      	movs	r3, r0
 801d330:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d332:	e00c      	b.n	801d34e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d334:	2380      	movs	r3, #128	@ 0x80
 801d336:	021b      	lsls	r3, r3, #8
 801d338:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d33a:	e008      	b.n	801d34e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801d33c:	2300      	movs	r3, #0
 801d33e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d340:	231a      	movs	r3, #26
 801d342:	2218      	movs	r2, #24
 801d344:	189b      	adds	r3, r3, r2
 801d346:	19db      	adds	r3, r3, r7
 801d348:	2201      	movs	r2, #1
 801d34a:	701a      	strb	r2, [r3, #0]
        break;
 801d34c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d350:	2b00      	cmp	r3, #0
 801d352:	d100      	bne.n	801d356 <UART_SetConfig+0x2a2>
 801d354:	e133      	b.n	801d5be <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d356:	69fb      	ldr	r3, [r7, #28]
 801d358:	685a      	ldr	r2, [r3, #4]
 801d35a:	0013      	movs	r3, r2
 801d35c:	005b      	lsls	r3, r3, #1
 801d35e:	189b      	adds	r3, r3, r2
 801d360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d362:	429a      	cmp	r2, r3
 801d364:	d305      	bcc.n	801d372 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801d366:	69fb      	ldr	r3, [r7, #28]
 801d368:	685b      	ldr	r3, [r3, #4]
 801d36a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801d36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d36e:	429a      	cmp	r2, r3
 801d370:	d906      	bls.n	801d380 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801d372:	231a      	movs	r3, #26
 801d374:	2218      	movs	r2, #24
 801d376:	189b      	adds	r3, r3, r2
 801d378:	19db      	adds	r3, r3, r7
 801d37a:	2201      	movs	r2, #1
 801d37c:	701a      	strb	r2, [r3, #0]
 801d37e:	e11e      	b.n	801d5be <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d382:	613b      	str	r3, [r7, #16]
 801d384:	2300      	movs	r3, #0
 801d386:	617b      	str	r3, [r7, #20]
 801d388:	6939      	ldr	r1, [r7, #16]
 801d38a:	697a      	ldr	r2, [r7, #20]
 801d38c:	000b      	movs	r3, r1
 801d38e:	0e1b      	lsrs	r3, r3, #24
 801d390:	0010      	movs	r0, r2
 801d392:	0205      	lsls	r5, r0, #8
 801d394:	431d      	orrs	r5, r3
 801d396:	000b      	movs	r3, r1
 801d398:	021c      	lsls	r4, r3, #8
 801d39a:	69fb      	ldr	r3, [r7, #28]
 801d39c:	685b      	ldr	r3, [r3, #4]
 801d39e:	085b      	lsrs	r3, r3, #1
 801d3a0:	60bb      	str	r3, [r7, #8]
 801d3a2:	2300      	movs	r3, #0
 801d3a4:	60fb      	str	r3, [r7, #12]
 801d3a6:	68b8      	ldr	r0, [r7, #8]
 801d3a8:	68f9      	ldr	r1, [r7, #12]
 801d3aa:	1900      	adds	r0, r0, r4
 801d3ac:	4169      	adcs	r1, r5
 801d3ae:	69fb      	ldr	r3, [r7, #28]
 801d3b0:	685b      	ldr	r3, [r3, #4]
 801d3b2:	603b      	str	r3, [r7, #0]
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	607b      	str	r3, [r7, #4]
 801d3b8:	683a      	ldr	r2, [r7, #0]
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	f7e3 f8e0 	bl	8000580 <__aeabi_uldivmod>
 801d3c0:	0002      	movs	r2, r0
 801d3c2:	000b      	movs	r3, r1
 801d3c4:	0013      	movs	r3, r2
 801d3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801d3c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d3ca:	23c0      	movs	r3, #192	@ 0xc0
 801d3cc:	009b      	lsls	r3, r3, #2
 801d3ce:	429a      	cmp	r2, r3
 801d3d0:	d309      	bcc.n	801d3e6 <UART_SetConfig+0x332>
 801d3d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d3d4:	2380      	movs	r3, #128	@ 0x80
 801d3d6:	035b      	lsls	r3, r3, #13
 801d3d8:	429a      	cmp	r2, r3
 801d3da:	d204      	bcs.n	801d3e6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801d3dc:	69fb      	ldr	r3, [r7, #28]
 801d3de:	681b      	ldr	r3, [r3, #0]
 801d3e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d3e2:	60da      	str	r2, [r3, #12]
 801d3e4:	e0eb      	b.n	801d5be <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801d3e6:	231a      	movs	r3, #26
 801d3e8:	2218      	movs	r2, #24
 801d3ea:	189b      	adds	r3, r3, r2
 801d3ec:	19db      	adds	r3, r3, r7
 801d3ee:	2201      	movs	r2, #1
 801d3f0:	701a      	strb	r2, [r3, #0]
 801d3f2:	e0e4      	b.n	801d5be <UART_SetConfig+0x50a>
 801d3f4:	efff69f3 	.word	0xefff69f3
 801d3f8:	ffffcfff 	.word	0xffffcfff
 801d3fc:	40004800 	.word	0x40004800
 801d400:	fffff4ff 	.word	0xfffff4ff
 801d404:	40013800 	.word	0x40013800
 801d408:	40021000 	.word	0x40021000
 801d40c:	40004400 	.word	0x40004400
 801d410:	40004c00 	.word	0x40004c00
 801d414:	40005000 	.word	0x40005000
 801d418:	003d0900 	.word	0x003d0900
 801d41c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801d420:	69fb      	ldr	r3, [r7, #28]
 801d422:	69da      	ldr	r2, [r3, #28]
 801d424:	2380      	movs	r3, #128	@ 0x80
 801d426:	021b      	lsls	r3, r3, #8
 801d428:	429a      	cmp	r2, r3
 801d42a:	d000      	beq.n	801d42e <UART_SetConfig+0x37a>
 801d42c:	e070      	b.n	801d510 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801d42e:	231b      	movs	r3, #27
 801d430:	2218      	movs	r2, #24
 801d432:	189b      	adds	r3, r3, r2
 801d434:	19db      	adds	r3, r3, r7
 801d436:	781b      	ldrb	r3, [r3, #0]
 801d438:	2b08      	cmp	r3, #8
 801d43a:	d822      	bhi.n	801d482 <UART_SetConfig+0x3ce>
 801d43c:	009a      	lsls	r2, r3, #2
 801d43e:	4b67      	ldr	r3, [pc, #412]	@ (801d5dc <UART_SetConfig+0x528>)
 801d440:	18d3      	adds	r3, r2, r3
 801d442:	681b      	ldr	r3, [r3, #0]
 801d444:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d446:	f7fd fdad 	bl	801afa4 <HAL_RCC_GetPCLK1Freq>
 801d44a:	0003      	movs	r3, r0
 801d44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d44e:	e021      	b.n	801d494 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d450:	f7fd fdbe 	bl	801afd0 <HAL_RCC_GetPCLK2Freq>
 801d454:	0003      	movs	r3, r0
 801d456:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d458:	e01c      	b.n	801d494 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d45a:	4b61      	ldr	r3, [pc, #388]	@ (801d5e0 <UART_SetConfig+0x52c>)
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	2210      	movs	r2, #16
 801d460:	4013      	ands	r3, r2
 801d462:	d002      	beq.n	801d46a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d464:	4b5f      	ldr	r3, [pc, #380]	@ (801d5e4 <UART_SetConfig+0x530>)
 801d466:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d468:	e014      	b.n	801d494 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801d46a:	4b5f      	ldr	r3, [pc, #380]	@ (801d5e8 <UART_SetConfig+0x534>)
 801d46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d46e:	e011      	b.n	801d494 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d470:	f7fd fce8 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801d474:	0003      	movs	r3, r0
 801d476:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d478:	e00c      	b.n	801d494 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d47a:	2380      	movs	r3, #128	@ 0x80
 801d47c:	021b      	lsls	r3, r3, #8
 801d47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d480:	e008      	b.n	801d494 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801d482:	2300      	movs	r3, #0
 801d484:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d486:	231a      	movs	r3, #26
 801d488:	2218      	movs	r2, #24
 801d48a:	189b      	adds	r3, r3, r2
 801d48c:	19db      	adds	r3, r3, r7
 801d48e:	2201      	movs	r2, #1
 801d490:	701a      	strb	r2, [r3, #0]
        break;
 801d492:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801d494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d496:	2b00      	cmp	r3, #0
 801d498:	d100      	bne.n	801d49c <UART_SetConfig+0x3e8>
 801d49a:	e090      	b.n	801d5be <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d49e:	005a      	lsls	r2, r3, #1
 801d4a0:	69fb      	ldr	r3, [r7, #28]
 801d4a2:	685b      	ldr	r3, [r3, #4]
 801d4a4:	085b      	lsrs	r3, r3, #1
 801d4a6:	18d2      	adds	r2, r2, r3
 801d4a8:	69fb      	ldr	r3, [r7, #28]
 801d4aa:	685b      	ldr	r3, [r3, #4]
 801d4ac:	0019      	movs	r1, r3
 801d4ae:	0010      	movs	r0, r2
 801d4b0:	f7e2 fe78 	bl	80001a4 <__udivsi3>
 801d4b4:	0003      	movs	r3, r0
 801d4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d4b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4ba:	2b0f      	cmp	r3, #15
 801d4bc:	d921      	bls.n	801d502 <UART_SetConfig+0x44e>
 801d4be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d4c0:	2380      	movs	r3, #128	@ 0x80
 801d4c2:	025b      	lsls	r3, r3, #9
 801d4c4:	429a      	cmp	r2, r3
 801d4c6:	d21c      	bcs.n	801d502 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801d4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	200e      	movs	r0, #14
 801d4ce:	2418      	movs	r4, #24
 801d4d0:	1903      	adds	r3, r0, r4
 801d4d2:	19db      	adds	r3, r3, r7
 801d4d4:	210f      	movs	r1, #15
 801d4d6:	438a      	bics	r2, r1
 801d4d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801d4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4dc:	085b      	lsrs	r3, r3, #1
 801d4de:	b29b      	uxth	r3, r3
 801d4e0:	2207      	movs	r2, #7
 801d4e2:	4013      	ands	r3, r2
 801d4e4:	b299      	uxth	r1, r3
 801d4e6:	1903      	adds	r3, r0, r4
 801d4e8:	19db      	adds	r3, r3, r7
 801d4ea:	1902      	adds	r2, r0, r4
 801d4ec:	19d2      	adds	r2, r2, r7
 801d4ee:	8812      	ldrh	r2, [r2, #0]
 801d4f0:	430a      	orrs	r2, r1
 801d4f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801d4f4:	69fb      	ldr	r3, [r7, #28]
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	1902      	adds	r2, r0, r4
 801d4fa:	19d2      	adds	r2, r2, r7
 801d4fc:	8812      	ldrh	r2, [r2, #0]
 801d4fe:	60da      	str	r2, [r3, #12]
 801d500:	e05d      	b.n	801d5be <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d502:	231a      	movs	r3, #26
 801d504:	2218      	movs	r2, #24
 801d506:	189b      	adds	r3, r3, r2
 801d508:	19db      	adds	r3, r3, r7
 801d50a:	2201      	movs	r2, #1
 801d50c:	701a      	strb	r2, [r3, #0]
 801d50e:	e056      	b.n	801d5be <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801d510:	231b      	movs	r3, #27
 801d512:	2218      	movs	r2, #24
 801d514:	189b      	adds	r3, r3, r2
 801d516:	19db      	adds	r3, r3, r7
 801d518:	781b      	ldrb	r3, [r3, #0]
 801d51a:	2b08      	cmp	r3, #8
 801d51c:	d822      	bhi.n	801d564 <UART_SetConfig+0x4b0>
 801d51e:	009a      	lsls	r2, r3, #2
 801d520:	4b32      	ldr	r3, [pc, #200]	@ (801d5ec <UART_SetConfig+0x538>)
 801d522:	18d3      	adds	r3, r2, r3
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801d528:	f7fd fd3c 	bl	801afa4 <HAL_RCC_GetPCLK1Freq>
 801d52c:	0003      	movs	r3, r0
 801d52e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d530:	e021      	b.n	801d576 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801d532:	f7fd fd4d 	bl	801afd0 <HAL_RCC_GetPCLK2Freq>
 801d536:	0003      	movs	r3, r0
 801d538:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d53a:	e01c      	b.n	801d576 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d53c:	4b28      	ldr	r3, [pc, #160]	@ (801d5e0 <UART_SetConfig+0x52c>)
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	2210      	movs	r2, #16
 801d542:	4013      	ands	r3, r2
 801d544:	d002      	beq.n	801d54c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801d546:	4b27      	ldr	r3, [pc, #156]	@ (801d5e4 <UART_SetConfig+0x530>)
 801d548:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801d54a:	e014      	b.n	801d576 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801d54c:	4b26      	ldr	r3, [pc, #152]	@ (801d5e8 <UART_SetConfig+0x534>)
 801d54e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d550:	e011      	b.n	801d576 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801d552:	f7fd fc77 	bl	801ae44 <HAL_RCC_GetSysClockFreq>
 801d556:	0003      	movs	r3, r0
 801d558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d55a:	e00c      	b.n	801d576 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801d55c:	2380      	movs	r3, #128	@ 0x80
 801d55e:	021b      	lsls	r3, r3, #8
 801d560:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801d562:	e008      	b.n	801d576 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801d564:	2300      	movs	r3, #0
 801d566:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801d568:	231a      	movs	r3, #26
 801d56a:	2218      	movs	r2, #24
 801d56c:	189b      	adds	r3, r3, r2
 801d56e:	19db      	adds	r3, r3, r7
 801d570:	2201      	movs	r2, #1
 801d572:	701a      	strb	r2, [r3, #0]
        break;
 801d574:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801d576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d020      	beq.n	801d5be <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801d57c:	69fb      	ldr	r3, [r7, #28]
 801d57e:	685b      	ldr	r3, [r3, #4]
 801d580:	085a      	lsrs	r2, r3, #1
 801d582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d584:	18d2      	adds	r2, r2, r3
 801d586:	69fb      	ldr	r3, [r7, #28]
 801d588:	685b      	ldr	r3, [r3, #4]
 801d58a:	0019      	movs	r1, r3
 801d58c:	0010      	movs	r0, r2
 801d58e:	f7e2 fe09 	bl	80001a4 <__udivsi3>
 801d592:	0003      	movs	r3, r0
 801d594:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801d596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d598:	2b0f      	cmp	r3, #15
 801d59a:	d90a      	bls.n	801d5b2 <UART_SetConfig+0x4fe>
 801d59c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d59e:	2380      	movs	r3, #128	@ 0x80
 801d5a0:	025b      	lsls	r3, r3, #9
 801d5a2:	429a      	cmp	r2, r3
 801d5a4:	d205      	bcs.n	801d5b2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801d5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d5a8:	b29a      	uxth	r2, r3
 801d5aa:	69fb      	ldr	r3, [r7, #28]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	60da      	str	r2, [r3, #12]
 801d5b0:	e005      	b.n	801d5be <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801d5b2:	231a      	movs	r3, #26
 801d5b4:	2218      	movs	r2, #24
 801d5b6:	189b      	adds	r3, r3, r2
 801d5b8:	19db      	adds	r3, r3, r7
 801d5ba:	2201      	movs	r2, #1
 801d5bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801d5be:	69fb      	ldr	r3, [r7, #28]
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801d5c4:	69fb      	ldr	r3, [r7, #28]
 801d5c6:	2200      	movs	r2, #0
 801d5c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801d5ca:	231a      	movs	r3, #26
 801d5cc:	2218      	movs	r2, #24
 801d5ce:	189b      	adds	r3, r3, r2
 801d5d0:	19db      	adds	r3, r3, r7
 801d5d2:	781b      	ldrb	r3, [r3, #0]
}
 801d5d4:	0018      	movs	r0, r3
 801d5d6:	46bd      	mov	sp, r7
 801d5d8:	b00e      	add	sp, #56	@ 0x38
 801d5da:	bdb0      	pop	{r4, r5, r7, pc}
 801d5dc:	0802db60 	.word	0x0802db60
 801d5e0:	40021000 	.word	0x40021000
 801d5e4:	003d0900 	.word	0x003d0900
 801d5e8:	00f42400 	.word	0x00f42400
 801d5ec:	0802db84 	.word	0x0802db84

0801d5f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b082      	sub	sp, #8
 801d5f4:	af00      	add	r7, sp, #0
 801d5f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801d5f8:	687b      	ldr	r3, [r7, #4]
 801d5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5fc:	2201      	movs	r2, #1
 801d5fe:	4013      	ands	r3, r2
 801d600:	d00b      	beq.n	801d61a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	681b      	ldr	r3, [r3, #0]
 801d606:	685b      	ldr	r3, [r3, #4]
 801d608:	4a4a      	ldr	r2, [pc, #296]	@ (801d734 <UART_AdvFeatureConfig+0x144>)
 801d60a:	4013      	ands	r3, r2
 801d60c:	0019      	movs	r1, r3
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	430a      	orrs	r2, r1
 801d618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d61e:	2202      	movs	r2, #2
 801d620:	4013      	ands	r3, r2
 801d622:	d00b      	beq.n	801d63c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801d624:	687b      	ldr	r3, [r7, #4]
 801d626:	681b      	ldr	r3, [r3, #0]
 801d628:	685b      	ldr	r3, [r3, #4]
 801d62a:	4a43      	ldr	r2, [pc, #268]	@ (801d738 <UART_AdvFeatureConfig+0x148>)
 801d62c:	4013      	ands	r3, r2
 801d62e:	0019      	movs	r1, r3
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	430a      	orrs	r2, r1
 801d63a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d640:	2204      	movs	r2, #4
 801d642:	4013      	ands	r3, r2
 801d644:	d00b      	beq.n	801d65e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	685b      	ldr	r3, [r3, #4]
 801d64c:	4a3b      	ldr	r2, [pc, #236]	@ (801d73c <UART_AdvFeatureConfig+0x14c>)
 801d64e:	4013      	ands	r3, r2
 801d650:	0019      	movs	r1, r3
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	681b      	ldr	r3, [r3, #0]
 801d65a:	430a      	orrs	r2, r1
 801d65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d662:	2208      	movs	r2, #8
 801d664:	4013      	ands	r3, r2
 801d666:	d00b      	beq.n	801d680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	685b      	ldr	r3, [r3, #4]
 801d66e:	4a34      	ldr	r2, [pc, #208]	@ (801d740 <UART_AdvFeatureConfig+0x150>)
 801d670:	4013      	ands	r3, r2
 801d672:	0019      	movs	r1, r3
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	430a      	orrs	r2, r1
 801d67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d684:	2210      	movs	r2, #16
 801d686:	4013      	ands	r3, r2
 801d688:	d00b      	beq.n	801d6a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801d68a:	687b      	ldr	r3, [r7, #4]
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	689b      	ldr	r3, [r3, #8]
 801d690:	4a2c      	ldr	r2, [pc, #176]	@ (801d744 <UART_AdvFeatureConfig+0x154>)
 801d692:	4013      	ands	r3, r2
 801d694:	0019      	movs	r1, r3
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	681b      	ldr	r3, [r3, #0]
 801d69e:	430a      	orrs	r2, r1
 801d6a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6a6:	2220      	movs	r2, #32
 801d6a8:	4013      	ands	r3, r2
 801d6aa:	d00b      	beq.n	801d6c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	689b      	ldr	r3, [r3, #8]
 801d6b2:	4a25      	ldr	r2, [pc, #148]	@ (801d748 <UART_AdvFeatureConfig+0x158>)
 801d6b4:	4013      	ands	r3, r2
 801d6b6:	0019      	movs	r1, r3
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	430a      	orrs	r2, r1
 801d6c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d6c8:	2240      	movs	r2, #64	@ 0x40
 801d6ca:	4013      	ands	r3, r2
 801d6cc:	d01d      	beq.n	801d70a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	685b      	ldr	r3, [r3, #4]
 801d6d4:	4a1d      	ldr	r2, [pc, #116]	@ (801d74c <UART_AdvFeatureConfig+0x15c>)
 801d6d6:	4013      	ands	r3, r2
 801d6d8:	0019      	movs	r1, r3
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	430a      	orrs	r2, r1
 801d6e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801d6ea:	2380      	movs	r3, #128	@ 0x80
 801d6ec:	035b      	lsls	r3, r3, #13
 801d6ee:	429a      	cmp	r2, r3
 801d6f0:	d10b      	bne.n	801d70a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	685b      	ldr	r3, [r3, #4]
 801d6f8:	4a15      	ldr	r2, [pc, #84]	@ (801d750 <UART_AdvFeatureConfig+0x160>)
 801d6fa:	4013      	ands	r3, r2
 801d6fc:	0019      	movs	r1, r3
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	430a      	orrs	r2, r1
 801d708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d70e:	2280      	movs	r2, #128	@ 0x80
 801d710:	4013      	ands	r3, r2
 801d712:	d00b      	beq.n	801d72c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	681b      	ldr	r3, [r3, #0]
 801d718:	685b      	ldr	r3, [r3, #4]
 801d71a:	4a0e      	ldr	r2, [pc, #56]	@ (801d754 <UART_AdvFeatureConfig+0x164>)
 801d71c:	4013      	ands	r3, r2
 801d71e:	0019      	movs	r1, r3
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	430a      	orrs	r2, r1
 801d72a:	605a      	str	r2, [r3, #4]
  }
}
 801d72c:	46c0      	nop			@ (mov r8, r8)
 801d72e:	46bd      	mov	sp, r7
 801d730:	b002      	add	sp, #8
 801d732:	bd80      	pop	{r7, pc}
 801d734:	fffdffff 	.word	0xfffdffff
 801d738:	fffeffff 	.word	0xfffeffff
 801d73c:	fffbffff 	.word	0xfffbffff
 801d740:	ffff7fff 	.word	0xffff7fff
 801d744:	ffffefff 	.word	0xffffefff
 801d748:	ffffdfff 	.word	0xffffdfff
 801d74c:	ffefffff 	.word	0xffefffff
 801d750:	ff9fffff 	.word	0xff9fffff
 801d754:	fff7ffff 	.word	0xfff7ffff

0801d758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801d758:	b580      	push	{r7, lr}
 801d75a:	b092      	sub	sp, #72	@ 0x48
 801d75c:	af02      	add	r7, sp, #8
 801d75e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	2284      	movs	r2, #132	@ 0x84
 801d764:	2100      	movs	r1, #0
 801d766:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801d768:	f7f6 fa14 	bl	8013b94 <HAL_GetTick>
 801d76c:	0003      	movs	r3, r0
 801d76e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	2208      	movs	r2, #8
 801d778:	4013      	ands	r3, r2
 801d77a:	2b08      	cmp	r3, #8
 801d77c:	d12c      	bne.n	801d7d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d780:	2280      	movs	r2, #128	@ 0x80
 801d782:	0391      	lsls	r1, r2, #14
 801d784:	6878      	ldr	r0, [r7, #4]
 801d786:	4a46      	ldr	r2, [pc, #280]	@ (801d8a0 <UART_CheckIdleState+0x148>)
 801d788:	9200      	str	r2, [sp, #0]
 801d78a:	2200      	movs	r2, #0
 801d78c:	f000 f88c 	bl	801d8a8 <UART_WaitOnFlagUntilTimeout>
 801d790:	1e03      	subs	r3, r0, #0
 801d792:	d021      	beq.n	801d7d8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d794:	f3ef 8310 	mrs	r3, PRIMASK
 801d798:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801d79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801d79c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d79e:	2301      	movs	r3, #1
 801d7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d7a4:	f383 8810 	msr	PRIMASK, r3
}
 801d7a8:	46c0      	nop			@ (mov r8, r8)
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	681a      	ldr	r2, [r3, #0]
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	2180      	movs	r1, #128	@ 0x80
 801d7b6:	438a      	bics	r2, r1
 801d7b8:	601a      	str	r2, [r3, #0]
 801d7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d7c0:	f383 8810 	msr	PRIMASK, r3
}
 801d7c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	2220      	movs	r2, #32
 801d7ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	2278      	movs	r2, #120	@ 0x78
 801d7d0:	2100      	movs	r1, #0
 801d7d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d7d4:	2303      	movs	r3, #3
 801d7d6:	e05f      	b.n	801d898 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	681b      	ldr	r3, [r3, #0]
 801d7de:	2204      	movs	r2, #4
 801d7e0:	4013      	ands	r3, r2
 801d7e2:	2b04      	cmp	r3, #4
 801d7e4:	d146      	bne.n	801d874 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801d7e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d7e8:	2280      	movs	r2, #128	@ 0x80
 801d7ea:	03d1      	lsls	r1, r2, #15
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	4a2c      	ldr	r2, [pc, #176]	@ (801d8a0 <UART_CheckIdleState+0x148>)
 801d7f0:	9200      	str	r2, [sp, #0]
 801d7f2:	2200      	movs	r2, #0
 801d7f4:	f000 f858 	bl	801d8a8 <UART_WaitOnFlagUntilTimeout>
 801d7f8:	1e03      	subs	r3, r0, #0
 801d7fa:	d03b      	beq.n	801d874 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801d800:	60fb      	str	r3, [r7, #12]
  return(result);
 801d802:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801d804:	637b      	str	r3, [r7, #52]	@ 0x34
 801d806:	2301      	movs	r3, #1
 801d808:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d80a:	693b      	ldr	r3, [r7, #16]
 801d80c:	f383 8810 	msr	PRIMASK, r3
}
 801d810:	46c0      	nop			@ (mov r8, r8)
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	681a      	ldr	r2, [r3, #0]
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	4921      	ldr	r1, [pc, #132]	@ (801d8a4 <UART_CheckIdleState+0x14c>)
 801d81e:	400a      	ands	r2, r1
 801d820:	601a      	str	r2, [r3, #0]
 801d822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d824:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d826:	697b      	ldr	r3, [r7, #20]
 801d828:	f383 8810 	msr	PRIMASK, r3
}
 801d82c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d82e:	f3ef 8310 	mrs	r3, PRIMASK
 801d832:	61bb      	str	r3, [r7, #24]
  return(result);
 801d834:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801d836:	633b      	str	r3, [r7, #48]	@ 0x30
 801d838:	2301      	movs	r3, #1
 801d83a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d83c:	69fb      	ldr	r3, [r7, #28]
 801d83e:	f383 8810 	msr	PRIMASK, r3
}
 801d842:	46c0      	nop			@ (mov r8, r8)
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	689a      	ldr	r2, [r3, #8]
 801d84a:	687b      	ldr	r3, [r7, #4]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	2101      	movs	r1, #1
 801d850:	438a      	bics	r2, r1
 801d852:	609a      	str	r2, [r3, #8]
 801d854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d856:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d858:	6a3b      	ldr	r3, [r7, #32]
 801d85a:	f383 8810 	msr	PRIMASK, r3
}
 801d85e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	2280      	movs	r2, #128	@ 0x80
 801d864:	2120      	movs	r1, #32
 801d866:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	2278      	movs	r2, #120	@ 0x78
 801d86c:	2100      	movs	r1, #0
 801d86e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801d870:	2303      	movs	r3, #3
 801d872:	e011      	b.n	801d898 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	2220      	movs	r2, #32
 801d878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	2280      	movs	r2, #128	@ 0x80
 801d87e:	2120      	movs	r1, #32
 801d880:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	2200      	movs	r2, #0
 801d886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	2200      	movs	r2, #0
 801d88c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2278      	movs	r2, #120	@ 0x78
 801d892:	2100      	movs	r1, #0
 801d894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d896:	2300      	movs	r3, #0
}
 801d898:	0018      	movs	r0, r3
 801d89a:	46bd      	mov	sp, r7
 801d89c:	b010      	add	sp, #64	@ 0x40
 801d89e:	bd80      	pop	{r7, pc}
 801d8a0:	01ffffff 	.word	0x01ffffff
 801d8a4:	fffffedf 	.word	0xfffffedf

0801d8a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	b084      	sub	sp, #16
 801d8ac:	af00      	add	r7, sp, #0
 801d8ae:	60f8      	str	r0, [r7, #12]
 801d8b0:	60b9      	str	r1, [r7, #8]
 801d8b2:	603b      	str	r3, [r7, #0]
 801d8b4:	1dfb      	adds	r3, r7, #7
 801d8b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d8b8:	e04b      	b.n	801d952 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801d8ba:	69bb      	ldr	r3, [r7, #24]
 801d8bc:	3301      	adds	r3, #1
 801d8be:	d048      	beq.n	801d952 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801d8c0:	f7f6 f968 	bl	8013b94 <HAL_GetTick>
 801d8c4:	0002      	movs	r2, r0
 801d8c6:	683b      	ldr	r3, [r7, #0]
 801d8c8:	1ad3      	subs	r3, r2, r3
 801d8ca:	69ba      	ldr	r2, [r7, #24]
 801d8cc:	429a      	cmp	r2, r3
 801d8ce:	d302      	bcc.n	801d8d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 801d8d0:	69bb      	ldr	r3, [r7, #24]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	d101      	bne.n	801d8da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801d8d6:	2303      	movs	r3, #3
 801d8d8:	e04b      	b.n	801d972 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	2204      	movs	r2, #4
 801d8e2:	4013      	ands	r3, r2
 801d8e4:	d035      	beq.n	801d952 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801d8e6:	68fb      	ldr	r3, [r7, #12]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	69db      	ldr	r3, [r3, #28]
 801d8ec:	2208      	movs	r2, #8
 801d8ee:	4013      	ands	r3, r2
 801d8f0:	2b08      	cmp	r3, #8
 801d8f2:	d111      	bne.n	801d918 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801d8f4:	68fb      	ldr	r3, [r7, #12]
 801d8f6:	681b      	ldr	r3, [r3, #0]
 801d8f8:	2208      	movs	r2, #8
 801d8fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	0018      	movs	r0, r3
 801d900:	f000 f9ca 	bl	801dc98 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	2284      	movs	r2, #132	@ 0x84
 801d908:	2108      	movs	r1, #8
 801d90a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	2278      	movs	r2, #120	@ 0x78
 801d910:	2100      	movs	r1, #0
 801d912:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801d914:	2301      	movs	r3, #1
 801d916:	e02c      	b.n	801d972 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	69da      	ldr	r2, [r3, #28]
 801d91e:	2380      	movs	r3, #128	@ 0x80
 801d920:	011b      	lsls	r3, r3, #4
 801d922:	401a      	ands	r2, r3
 801d924:	2380      	movs	r3, #128	@ 0x80
 801d926:	011b      	lsls	r3, r3, #4
 801d928:	429a      	cmp	r2, r3
 801d92a:	d112      	bne.n	801d952 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801d92c:	68fb      	ldr	r3, [r7, #12]
 801d92e:	681b      	ldr	r3, [r3, #0]
 801d930:	2280      	movs	r2, #128	@ 0x80
 801d932:	0112      	lsls	r2, r2, #4
 801d934:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	0018      	movs	r0, r3
 801d93a:	f000 f9ad 	bl	801dc98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	2284      	movs	r2, #132	@ 0x84
 801d942:	2120      	movs	r1, #32
 801d944:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801d946:	68fb      	ldr	r3, [r7, #12]
 801d948:	2278      	movs	r2, #120	@ 0x78
 801d94a:	2100      	movs	r1, #0
 801d94c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801d94e:	2303      	movs	r3, #3
 801d950:	e00f      	b.n	801d972 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	69db      	ldr	r3, [r3, #28]
 801d958:	68ba      	ldr	r2, [r7, #8]
 801d95a:	4013      	ands	r3, r2
 801d95c:	68ba      	ldr	r2, [r7, #8]
 801d95e:	1ad3      	subs	r3, r2, r3
 801d960:	425a      	negs	r2, r3
 801d962:	4153      	adcs	r3, r2
 801d964:	b2db      	uxtb	r3, r3
 801d966:	001a      	movs	r2, r3
 801d968:	1dfb      	adds	r3, r7, #7
 801d96a:	781b      	ldrb	r3, [r3, #0]
 801d96c:	429a      	cmp	r2, r3
 801d96e:	d0a4      	beq.n	801d8ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801d970:	2300      	movs	r3, #0
}
 801d972:	0018      	movs	r0, r3
 801d974:	46bd      	mov	sp, r7
 801d976:	b004      	add	sp, #16
 801d978:	bd80      	pop	{r7, pc}
	...

0801d97c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d97c:	b580      	push	{r7, lr}
 801d97e:	b090      	sub	sp, #64	@ 0x40
 801d980:	af00      	add	r7, sp, #0
 801d982:	60f8      	str	r0, [r7, #12]
 801d984:	60b9      	str	r1, [r7, #8]
 801d986:	1dbb      	adds	r3, r7, #6
 801d988:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	68ba      	ldr	r2, [r7, #8]
 801d98e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	1dba      	adds	r2, r7, #6
 801d994:	2158      	movs	r1, #88	@ 0x58
 801d996:	8812      	ldrh	r2, [r2, #0]
 801d998:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	1dba      	adds	r2, r7, #6
 801d99e:	215a      	movs	r1, #90	@ 0x5a
 801d9a0:	8812      	ldrh	r2, [r2, #0]
 801d9a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	2200      	movs	r2, #0
 801d9a8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801d9aa:	68fb      	ldr	r3, [r7, #12]
 801d9ac:	689a      	ldr	r2, [r3, #8]
 801d9ae:	2380      	movs	r3, #128	@ 0x80
 801d9b0:	015b      	lsls	r3, r3, #5
 801d9b2:	429a      	cmp	r2, r3
 801d9b4:	d10d      	bne.n	801d9d2 <UART_Start_Receive_IT+0x56>
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	691b      	ldr	r3, [r3, #16]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d104      	bne.n	801d9c8 <UART_Start_Receive_IT+0x4c>
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	225c      	movs	r2, #92	@ 0x5c
 801d9c2:	4950      	ldr	r1, [pc, #320]	@ (801db04 <UART_Start_Receive_IT+0x188>)
 801d9c4:	5299      	strh	r1, [r3, r2]
 801d9c6:	e02e      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	225c      	movs	r2, #92	@ 0x5c
 801d9cc:	21ff      	movs	r1, #255	@ 0xff
 801d9ce:	5299      	strh	r1, [r3, r2]
 801d9d0:	e029      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	689b      	ldr	r3, [r3, #8]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d10d      	bne.n	801d9f6 <UART_Start_Receive_IT+0x7a>
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	691b      	ldr	r3, [r3, #16]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d104      	bne.n	801d9ec <UART_Start_Receive_IT+0x70>
 801d9e2:	68fb      	ldr	r3, [r7, #12]
 801d9e4:	225c      	movs	r2, #92	@ 0x5c
 801d9e6:	21ff      	movs	r1, #255	@ 0xff
 801d9e8:	5299      	strh	r1, [r3, r2]
 801d9ea:	e01c      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	225c      	movs	r2, #92	@ 0x5c
 801d9f0:	217f      	movs	r1, #127	@ 0x7f
 801d9f2:	5299      	strh	r1, [r3, r2]
 801d9f4:	e017      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801d9f6:	68fb      	ldr	r3, [r7, #12]
 801d9f8:	689a      	ldr	r2, [r3, #8]
 801d9fa:	2380      	movs	r3, #128	@ 0x80
 801d9fc:	055b      	lsls	r3, r3, #21
 801d9fe:	429a      	cmp	r2, r3
 801da00:	d10d      	bne.n	801da1e <UART_Start_Receive_IT+0xa2>
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	691b      	ldr	r3, [r3, #16]
 801da06:	2b00      	cmp	r3, #0
 801da08:	d104      	bne.n	801da14 <UART_Start_Receive_IT+0x98>
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	225c      	movs	r2, #92	@ 0x5c
 801da0e:	217f      	movs	r1, #127	@ 0x7f
 801da10:	5299      	strh	r1, [r3, r2]
 801da12:	e008      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	225c      	movs	r2, #92	@ 0x5c
 801da18:	213f      	movs	r1, #63	@ 0x3f
 801da1a:	5299      	strh	r1, [r3, r2]
 801da1c:	e003      	b.n	801da26 <UART_Start_Receive_IT+0xaa>
 801da1e:	68fb      	ldr	r3, [r7, #12]
 801da20:	225c      	movs	r2, #92	@ 0x5c
 801da22:	2100      	movs	r1, #0
 801da24:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801da26:	68fb      	ldr	r3, [r7, #12]
 801da28:	2284      	movs	r2, #132	@ 0x84
 801da2a:	2100      	movs	r1, #0
 801da2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	2280      	movs	r2, #128	@ 0x80
 801da32:	2122      	movs	r1, #34	@ 0x22
 801da34:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da36:	f3ef 8310 	mrs	r3, PRIMASK
 801da3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801da40:	2301      	movs	r3, #1
 801da42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801da46:	f383 8810 	msr	PRIMASK, r3
}
 801da4a:	46c0      	nop			@ (mov r8, r8)
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	689a      	ldr	r2, [r3, #8]
 801da52:	68fb      	ldr	r3, [r7, #12]
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	2101      	movs	r1, #1
 801da58:	430a      	orrs	r2, r1
 801da5a:	609a      	str	r2, [r3, #8]
 801da5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801da5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801da62:	f383 8810 	msr	PRIMASK, r3
}
 801da66:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	689a      	ldr	r2, [r3, #8]
 801da6c:	2380      	movs	r3, #128	@ 0x80
 801da6e:	015b      	lsls	r3, r3, #5
 801da70:	429a      	cmp	r2, r3
 801da72:	d107      	bne.n	801da84 <UART_Start_Receive_IT+0x108>
 801da74:	68fb      	ldr	r3, [r7, #12]
 801da76:	691b      	ldr	r3, [r3, #16]
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d103      	bne.n	801da84 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	4a22      	ldr	r2, [pc, #136]	@ (801db08 <UART_Start_Receive_IT+0x18c>)
 801da80:	669a      	str	r2, [r3, #104]	@ 0x68
 801da82:	e002      	b.n	801da8a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	4a21      	ldr	r2, [pc, #132]	@ (801db0c <UART_Start_Receive_IT+0x190>)
 801da88:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	691b      	ldr	r3, [r3, #16]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d019      	beq.n	801dac6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da92:	f3ef 8310 	mrs	r3, PRIMASK
 801da96:	61fb      	str	r3, [r7, #28]
  return(result);
 801da98:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801da9a:	637b      	str	r3, [r7, #52]	@ 0x34
 801da9c:	2301      	movs	r3, #1
 801da9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daa0:	6a3b      	ldr	r3, [r7, #32]
 801daa2:	f383 8810 	msr	PRIMASK, r3
}
 801daa6:	46c0      	nop			@ (mov r8, r8)
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	681a      	ldr	r2, [r3, #0]
 801daae:	68fb      	ldr	r3, [r7, #12]
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	2190      	movs	r1, #144	@ 0x90
 801dab4:	0049      	lsls	r1, r1, #1
 801dab6:	430a      	orrs	r2, r1
 801dab8:	601a      	str	r2, [r3, #0]
 801daba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dabc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dac0:	f383 8810 	msr	PRIMASK, r3
}
 801dac4:	e018      	b.n	801daf8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dac6:	f3ef 8310 	mrs	r3, PRIMASK
 801daca:	613b      	str	r3, [r7, #16]
  return(result);
 801dacc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801dace:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dad0:	2301      	movs	r3, #1
 801dad2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dad4:	697b      	ldr	r3, [r7, #20]
 801dad6:	f383 8810 	msr	PRIMASK, r3
}
 801dada:	46c0      	nop			@ (mov r8, r8)
 801dadc:	68fb      	ldr	r3, [r7, #12]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	681a      	ldr	r2, [r3, #0]
 801dae2:	68fb      	ldr	r3, [r7, #12]
 801dae4:	681b      	ldr	r3, [r3, #0]
 801dae6:	2120      	movs	r1, #32
 801dae8:	430a      	orrs	r2, r1
 801daea:	601a      	str	r2, [r3, #0]
 801daec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801daee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801daf0:	69bb      	ldr	r3, [r7, #24]
 801daf2:	f383 8810 	msr	PRIMASK, r3
}
 801daf6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801daf8:	2300      	movs	r3, #0
}
 801dafa:	0018      	movs	r0, r3
 801dafc:	46bd      	mov	sp, r7
 801dafe:	b010      	add	sp, #64	@ 0x40
 801db00:	bd80      	pop	{r7, pc}
 801db02:	46c0      	nop			@ (mov r8, r8)
 801db04:	000001ff 	.word	0x000001ff
 801db08:	0801e27d 	.word	0x0801e27d
 801db0c:	0801e0b1 	.word	0x0801e0b1

0801db10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b090      	sub	sp, #64	@ 0x40
 801db14:	af00      	add	r7, sp, #0
 801db16:	60f8      	str	r0, [r7, #12]
 801db18:	60b9      	str	r1, [r7, #8]
 801db1a:	1dbb      	adds	r3, r7, #6
 801db1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	68ba      	ldr	r2, [r7, #8]
 801db22:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	1dba      	adds	r2, r7, #6
 801db28:	2158      	movs	r1, #88	@ 0x58
 801db2a:	8812      	ldrh	r2, [r2, #0]
 801db2c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	2284      	movs	r2, #132	@ 0x84
 801db32:	2100      	movs	r1, #0
 801db34:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	2280      	movs	r2, #128	@ 0x80
 801db3a:	2122      	movs	r1, #34	@ 0x22
 801db3c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db42:	2b00      	cmp	r3, #0
 801db44:	d028      	beq.n	801db98 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db4a:	4a3e      	ldr	r2, [pc, #248]	@ (801dc44 <UART_Start_Receive_DMA+0x134>)
 801db4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db52:	4a3d      	ldr	r2, [pc, #244]	@ (801dc48 <UART_Start_Receive_DMA+0x138>)
 801db54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db5a:	4a3c      	ldr	r2, [pc, #240]	@ (801dc4c <UART_Start_Receive_DMA+0x13c>)
 801db5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801db62:	2200      	movs	r2, #0
 801db64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	3324      	adds	r3, #36	@ 0x24
 801db70:	0019      	movs	r1, r3
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db76:	001a      	movs	r2, r3
 801db78:	1dbb      	adds	r3, r7, #6
 801db7a:	881b      	ldrh	r3, [r3, #0]
 801db7c:	f7f6 fd5c 	bl	8014638 <HAL_DMA_Start_IT>
 801db80:	1e03      	subs	r3, r0, #0
 801db82:	d009      	beq.n	801db98 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	2284      	movs	r2, #132	@ 0x84
 801db88:	2110      	movs	r1, #16
 801db8a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	2280      	movs	r2, #128	@ 0x80
 801db90:	2120      	movs	r1, #32
 801db92:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801db94:	2301      	movs	r3, #1
 801db96:	e050      	b.n	801dc3a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	691b      	ldr	r3, [r3, #16]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d019      	beq.n	801dbd4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dba0:	f3ef 8310 	mrs	r3, PRIMASK
 801dba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801dba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801dbaa:	2301      	movs	r3, #1
 801dbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dbb0:	f383 8810 	msr	PRIMASK, r3
}
 801dbb4:	46c0      	nop			@ (mov r8, r8)
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	681a      	ldr	r2, [r3, #0]
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	2180      	movs	r1, #128	@ 0x80
 801dbc2:	0049      	lsls	r1, r1, #1
 801dbc4:	430a      	orrs	r2, r1
 801dbc6:	601a      	str	r2, [r3, #0]
 801dbc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dbca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dbce:	f383 8810 	msr	PRIMASK, r3
}
 801dbd2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbd4:	f3ef 8310 	mrs	r3, PRIMASK
 801dbd8:	613b      	str	r3, [r7, #16]
  return(result);
 801dbda:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dbdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801dbde:	2301      	movs	r3, #1
 801dbe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbe2:	697b      	ldr	r3, [r7, #20]
 801dbe4:	f383 8810 	msr	PRIMASK, r3
}
 801dbe8:	46c0      	nop			@ (mov r8, r8)
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	689a      	ldr	r2, [r3, #8]
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	2101      	movs	r1, #1
 801dbf6:	430a      	orrs	r2, r1
 801dbf8:	609a      	str	r2, [r3, #8]
 801dbfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dbfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbfe:	69bb      	ldr	r3, [r7, #24]
 801dc00:	f383 8810 	msr	PRIMASK, r3
}
 801dc04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc06:	f3ef 8310 	mrs	r3, PRIMASK
 801dc0a:	61fb      	str	r3, [r7, #28]
  return(result);
 801dc0c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dc0e:	637b      	str	r3, [r7, #52]	@ 0x34
 801dc10:	2301      	movs	r3, #1
 801dc12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc14:	6a3b      	ldr	r3, [r7, #32]
 801dc16:	f383 8810 	msr	PRIMASK, r3
}
 801dc1a:	46c0      	nop			@ (mov r8, r8)
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	681b      	ldr	r3, [r3, #0]
 801dc20:	689a      	ldr	r2, [r3, #8]
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	2140      	movs	r1, #64	@ 0x40
 801dc28:	430a      	orrs	r2, r1
 801dc2a:	609a      	str	r2, [r3, #8]
 801dc2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dc2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc32:	f383 8810 	msr	PRIMASK, r3
}
 801dc36:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801dc38:	2300      	movs	r3, #0
}
 801dc3a:	0018      	movs	r0, r3
 801dc3c:	46bd      	mov	sp, r7
 801dc3e:	b010      	add	sp, #64	@ 0x40
 801dc40:	bd80      	pop	{r7, pc}
 801dc42:	46c0      	nop			@ (mov r8, r8)
 801dc44:	0801de21 	.word	0x0801de21
 801dc48:	0801df55 	.word	0x0801df55
 801dc4c:	0801df9d 	.word	0x0801df9d

0801dc50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b086      	sub	sp, #24
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc58:	f3ef 8310 	mrs	r3, PRIMASK
 801dc5c:	60bb      	str	r3, [r7, #8]
  return(result);
 801dc5e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801dc60:	617b      	str	r3, [r7, #20]
 801dc62:	2301      	movs	r3, #1
 801dc64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	f383 8810 	msr	PRIMASK, r3
}
 801dc6c:	46c0      	nop			@ (mov r8, r8)
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	681a      	ldr	r2, [r3, #0]
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	21c0      	movs	r1, #192	@ 0xc0
 801dc7a:	438a      	bics	r2, r1
 801dc7c:	601a      	str	r2, [r3, #0]
 801dc7e:	697b      	ldr	r3, [r7, #20]
 801dc80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc82:	693b      	ldr	r3, [r7, #16]
 801dc84:	f383 8810 	msr	PRIMASK, r3
}
 801dc88:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	2220      	movs	r2, #32
 801dc8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801dc90:	46c0      	nop			@ (mov r8, r8)
 801dc92:	46bd      	mov	sp, r7
 801dc94:	b006      	add	sp, #24
 801dc96:	bd80      	pop	{r7, pc}

0801dc98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801dc98:	b580      	push	{r7, lr}
 801dc9a:	b08e      	sub	sp, #56	@ 0x38
 801dc9c:	af00      	add	r7, sp, #0
 801dc9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dca0:	f3ef 8310 	mrs	r3, PRIMASK
 801dca4:	617b      	str	r3, [r7, #20]
  return(result);
 801dca6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801dca8:	637b      	str	r3, [r7, #52]	@ 0x34
 801dcaa:	2301      	movs	r3, #1
 801dcac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcae:	69bb      	ldr	r3, [r7, #24]
 801dcb0:	f383 8810 	msr	PRIMASK, r3
}
 801dcb4:	46c0      	nop			@ (mov r8, r8)
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	681b      	ldr	r3, [r3, #0]
 801dcba:	681a      	ldr	r2, [r3, #0]
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	4926      	ldr	r1, [pc, #152]	@ (801dd5c <UART_EndRxTransfer+0xc4>)
 801dcc2:	400a      	ands	r2, r1
 801dcc4:	601a      	str	r2, [r3, #0]
 801dcc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dcc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcca:	69fb      	ldr	r3, [r7, #28]
 801dccc:	f383 8810 	msr	PRIMASK, r3
}
 801dcd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcd2:	f3ef 8310 	mrs	r3, PRIMASK
 801dcd6:	623b      	str	r3, [r7, #32]
  return(result);
 801dcd8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dcda:	633b      	str	r3, [r7, #48]	@ 0x30
 801dcdc:	2301      	movs	r3, #1
 801dcde:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dce2:	f383 8810 	msr	PRIMASK, r3
}
 801dce6:	46c0      	nop			@ (mov r8, r8)
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	689a      	ldr	r2, [r3, #8]
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	681b      	ldr	r3, [r3, #0]
 801dcf2:	2101      	movs	r1, #1
 801dcf4:	438a      	bics	r2, r1
 801dcf6:	609a      	str	r2, [r3, #8]
 801dcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dcfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dcfe:	f383 8810 	msr	PRIMASK, r3
}
 801dd02:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dd08:	2b01      	cmp	r3, #1
 801dd0a:	d118      	bne.n	801dd3e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd0c:	f3ef 8310 	mrs	r3, PRIMASK
 801dd10:	60bb      	str	r3, [r7, #8]
  return(result);
 801dd12:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dd14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801dd16:	2301      	movs	r3, #1
 801dd18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	f383 8810 	msr	PRIMASK, r3
}
 801dd20:	46c0      	nop			@ (mov r8, r8)
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	681a      	ldr	r2, [r3, #0]
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	2110      	movs	r1, #16
 801dd2e:	438a      	bics	r2, r1
 801dd30:	601a      	str	r2, [r3, #0]
 801dd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd36:	693b      	ldr	r3, [r7, #16]
 801dd38:	f383 8810 	msr	PRIMASK, r3
}
 801dd3c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	2280      	movs	r2, #128	@ 0x80
 801dd42:	2120      	movs	r1, #32
 801dd44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	2200      	movs	r2, #0
 801dd4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2200      	movs	r2, #0
 801dd50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801dd52:	46c0      	nop			@ (mov r8, r8)
 801dd54:	46bd      	mov	sp, r7
 801dd56:	b00e      	add	sp, #56	@ 0x38
 801dd58:	bd80      	pop	{r7, pc}
 801dd5a:	46c0      	nop			@ (mov r8, r8)
 801dd5c:	fffffedf 	.word	0xfffffedf

0801dd60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801dd60:	b580      	push	{r7, lr}
 801dd62:	b08c      	sub	sp, #48	@ 0x30
 801dd64:	af00      	add	r7, sp, #0
 801dd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	2220      	movs	r2, #32
 801dd76:	4013      	ands	r3, r2
 801dd78:	d135      	bne.n	801dde6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801dd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd7c:	2252      	movs	r2, #82	@ 0x52
 801dd7e:	2100      	movs	r1, #0
 801dd80:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd82:	f3ef 8310 	mrs	r3, PRIMASK
 801dd86:	60fb      	str	r3, [r7, #12]
  return(result);
 801dd88:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801dd8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801dd8c:	2301      	movs	r3, #1
 801dd8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd90:	693b      	ldr	r3, [r7, #16]
 801dd92:	f383 8810 	msr	PRIMASK, r3
}
 801dd96:	46c0      	nop			@ (mov r8, r8)
 801dd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	689a      	ldr	r2, [r3, #8]
 801dd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	2180      	movs	r1, #128	@ 0x80
 801dda4:	438a      	bics	r2, r1
 801dda6:	609a      	str	r2, [r3, #8]
 801dda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ddaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddac:	697b      	ldr	r3, [r7, #20]
 801ddae:	f383 8810 	msr	PRIMASK, r3
}
 801ddb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddb4:	f3ef 8310 	mrs	r3, PRIMASK
 801ddb8:	61bb      	str	r3, [r7, #24]
  return(result);
 801ddba:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ddbc:	627b      	str	r3, [r7, #36]	@ 0x24
 801ddbe:	2301      	movs	r3, #1
 801ddc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddc2:	69fb      	ldr	r3, [r7, #28]
 801ddc4:	f383 8810 	msr	PRIMASK, r3
}
 801ddc8:	46c0      	nop			@ (mov r8, r8)
 801ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	681a      	ldr	r2, [r3, #0]
 801ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	2140      	movs	r1, #64	@ 0x40
 801ddd6:	430a      	orrs	r2, r1
 801ddd8:	601a      	str	r2, [r3, #0]
 801ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dddc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddde:	6a3b      	ldr	r3, [r7, #32]
 801dde0:	f383 8810 	msr	PRIMASK, r3
}
 801dde4:	e006      	b.n	801ddf4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dde8:	228c      	movs	r2, #140	@ 0x8c
 801ddea:	589b      	ldr	r3, [r3, r2]
 801ddec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ddee:	0010      	movs	r0, r2
 801ddf0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ddf2:	46c0      	nop			@ (mov r8, r8)
 801ddf4:	46c0      	nop			@ (mov r8, r8)
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	b00c      	add	sp, #48	@ 0x30
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b084      	sub	sp, #16
 801de00:	af00      	add	r7, sp, #0
 801de02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	2288      	movs	r2, #136	@ 0x88
 801de0e:	589b      	ldr	r3, [r3, r2]
 801de10:	68fa      	ldr	r2, [r7, #12]
 801de12:	0010      	movs	r0, r2
 801de14:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801de16:	46c0      	nop			@ (mov r8, r8)
 801de18:	46bd      	mov	sp, r7
 801de1a:	b004      	add	sp, #16
 801de1c:	bd80      	pop	{r7, pc}
	...

0801de20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801de20:	b580      	push	{r7, lr}
 801de22:	b094      	sub	sp, #80	@ 0x50
 801de24:	af00      	add	r7, sp, #0
 801de26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801de2c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	2220      	movs	r2, #32
 801de36:	4013      	ands	r3, r2
 801de38:	d16f      	bne.n	801df1a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801de3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de3c:	225a      	movs	r2, #90	@ 0x5a
 801de3e:	2100      	movs	r1, #0
 801de40:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de42:	f3ef 8310 	mrs	r3, PRIMASK
 801de46:	61bb      	str	r3, [r7, #24]
  return(result);
 801de48:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801de4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801de4c:	2301      	movs	r3, #1
 801de4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de50:	69fb      	ldr	r3, [r7, #28]
 801de52:	f383 8810 	msr	PRIMASK, r3
}
 801de56:	46c0      	nop			@ (mov r8, r8)
 801de58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de5a:	681b      	ldr	r3, [r3, #0]
 801de5c:	681a      	ldr	r2, [r3, #0]
 801de5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	493b      	ldr	r1, [pc, #236]	@ (801df50 <UART_DMAReceiveCplt+0x130>)
 801de64:	400a      	ands	r2, r1
 801de66:	601a      	str	r2, [r3, #0]
 801de68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801de6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de6c:	6a3b      	ldr	r3, [r7, #32]
 801de6e:	f383 8810 	msr	PRIMASK, r3
}
 801de72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de74:	f3ef 8310 	mrs	r3, PRIMASK
 801de78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de7c:	647b      	str	r3, [r7, #68]	@ 0x44
 801de7e:	2301      	movs	r3, #1
 801de80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801de84:	f383 8810 	msr	PRIMASK, r3
}
 801de88:	46c0      	nop			@ (mov r8, r8)
 801de8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	689a      	ldr	r2, [r3, #8]
 801de90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	2101      	movs	r1, #1
 801de96:	438a      	bics	r2, r1
 801de98:	609a      	str	r2, [r3, #8]
 801de9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801de9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dea0:	f383 8810 	msr	PRIMASK, r3
}
 801dea4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dea6:	f3ef 8310 	mrs	r3, PRIMASK
 801deaa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801deac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801deae:	643b      	str	r3, [r7, #64]	@ 0x40
 801deb0:	2301      	movs	r3, #1
 801deb2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801deb6:	f383 8810 	msr	PRIMASK, r3
}
 801deba:	46c0      	nop			@ (mov r8, r8)
 801debc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	689a      	ldr	r2, [r3, #8]
 801dec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	2140      	movs	r1, #64	@ 0x40
 801dec8:	438a      	bics	r2, r1
 801deca:	609a      	str	r2, [r3, #8]
 801decc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dece:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ded0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ded2:	f383 8810 	msr	PRIMASK, r3
}
 801ded6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801ded8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801deda:	2280      	movs	r2, #128	@ 0x80
 801dedc:	2120      	movs	r1, #32
 801dede:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dee4:	2b01      	cmp	r3, #1
 801dee6:	d118      	bne.n	801df1a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dee8:	f3ef 8310 	mrs	r3, PRIMASK
 801deec:	60fb      	str	r3, [r7, #12]
  return(result);
 801deee:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801def0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801def2:	2301      	movs	r3, #1
 801def4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def6:	693b      	ldr	r3, [r7, #16]
 801def8:	f383 8810 	msr	PRIMASK, r3
}
 801defc:	46c0      	nop			@ (mov r8, r8)
 801defe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	681a      	ldr	r2, [r3, #0]
 801df04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	2110      	movs	r1, #16
 801df0a:	438a      	bics	r2, r1
 801df0c:	601a      	str	r2, [r3, #0]
 801df0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801df10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df12:	697b      	ldr	r3, [r7, #20]
 801df14:	f383 8810 	msr	PRIMASK, r3
}
 801df18:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801df1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df1c:	2200      	movs	r2, #0
 801df1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df24:	2b01      	cmp	r3, #1
 801df26:	d109      	bne.n	801df3c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801df28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df2a:	22ac      	movs	r2, #172	@ 0xac
 801df2c:	589b      	ldr	r3, [r3, r2]
 801df2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801df30:	2158      	movs	r1, #88	@ 0x58
 801df32:	5a51      	ldrh	r1, [r2, r1]
 801df34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801df36:	0010      	movs	r0, r2
 801df38:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801df3a:	e005      	b.n	801df48 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801df3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801df3e:	2294      	movs	r2, #148	@ 0x94
 801df40:	589b      	ldr	r3, [r3, r2]
 801df42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801df44:	0010      	movs	r0, r2
 801df46:	4798      	blx	r3
}
 801df48:	46c0      	nop			@ (mov r8, r8)
 801df4a:	46bd      	mov	sp, r7
 801df4c:	b014      	add	sp, #80	@ 0x50
 801df4e:	bd80      	pop	{r7, pc}
 801df50:	fffffeff 	.word	0xfffffeff

0801df54 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801df54:	b580      	push	{r7, lr}
 801df56:	b084      	sub	sp, #16
 801df58:	af00      	add	r7, sp, #0
 801df5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801df60:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	2201      	movs	r2, #1
 801df66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801df6c:	2b01      	cmp	r3, #1
 801df6e:	d10b      	bne.n	801df88 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	22ac      	movs	r2, #172	@ 0xac
 801df74:	589b      	ldr	r3, [r3, r2]
 801df76:	68fa      	ldr	r2, [r7, #12]
 801df78:	2158      	movs	r1, #88	@ 0x58
 801df7a:	5a52      	ldrh	r2, [r2, r1]
 801df7c:	0852      	lsrs	r2, r2, #1
 801df7e:	b291      	uxth	r1, r2
 801df80:	68fa      	ldr	r2, [r7, #12]
 801df82:	0010      	movs	r0, r2
 801df84:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801df86:	e005      	b.n	801df94 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801df88:	68fb      	ldr	r3, [r7, #12]
 801df8a:	2290      	movs	r2, #144	@ 0x90
 801df8c:	589b      	ldr	r3, [r3, r2]
 801df8e:	68fa      	ldr	r2, [r7, #12]
 801df90:	0010      	movs	r0, r2
 801df92:	4798      	blx	r3
}
 801df94:	46c0      	nop			@ (mov r8, r8)
 801df96:	46bd      	mov	sp, r7
 801df98:	b004      	add	sp, #16
 801df9a:	bd80      	pop	{r7, pc}

0801df9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801df9c:	b580      	push	{r7, lr}
 801df9e:	b086      	sub	sp, #24
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfa8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801dfaa:	697b      	ldr	r3, [r7, #20]
 801dfac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801dfae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801dfb0:	697b      	ldr	r3, [r7, #20]
 801dfb2:	2280      	movs	r2, #128	@ 0x80
 801dfb4:	589b      	ldr	r3, [r3, r2]
 801dfb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801dfb8:	697b      	ldr	r3, [r7, #20]
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	689b      	ldr	r3, [r3, #8]
 801dfbe:	2280      	movs	r2, #128	@ 0x80
 801dfc0:	4013      	ands	r3, r2
 801dfc2:	2b80      	cmp	r3, #128	@ 0x80
 801dfc4:	d10a      	bne.n	801dfdc <UART_DMAError+0x40>
 801dfc6:	693b      	ldr	r3, [r7, #16]
 801dfc8:	2b21      	cmp	r3, #33	@ 0x21
 801dfca:	d107      	bne.n	801dfdc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	2252      	movs	r2, #82	@ 0x52
 801dfd0:	2100      	movs	r1, #0
 801dfd2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801dfd4:	697b      	ldr	r3, [r7, #20]
 801dfd6:	0018      	movs	r0, r3
 801dfd8:	f7ff fe3a 	bl	801dc50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801dfdc:	697b      	ldr	r3, [r7, #20]
 801dfde:	681b      	ldr	r3, [r3, #0]
 801dfe0:	689b      	ldr	r3, [r3, #8]
 801dfe2:	2240      	movs	r2, #64	@ 0x40
 801dfe4:	4013      	ands	r3, r2
 801dfe6:	2b40      	cmp	r3, #64	@ 0x40
 801dfe8:	d10a      	bne.n	801e000 <UART_DMAError+0x64>
 801dfea:	68fb      	ldr	r3, [r7, #12]
 801dfec:	2b22      	cmp	r3, #34	@ 0x22
 801dfee:	d107      	bne.n	801e000 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801dff0:	697b      	ldr	r3, [r7, #20]
 801dff2:	225a      	movs	r2, #90	@ 0x5a
 801dff4:	2100      	movs	r1, #0
 801dff6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	0018      	movs	r0, r3
 801dffc:	f7ff fe4c 	bl	801dc98 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801e000:	697b      	ldr	r3, [r7, #20]
 801e002:	2284      	movs	r2, #132	@ 0x84
 801e004:	589b      	ldr	r3, [r3, r2]
 801e006:	2210      	movs	r2, #16
 801e008:	431a      	orrs	r2, r3
 801e00a:	697b      	ldr	r3, [r7, #20]
 801e00c:	2184      	movs	r1, #132	@ 0x84
 801e00e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	2298      	movs	r2, #152	@ 0x98
 801e014:	589b      	ldr	r3, [r3, r2]
 801e016:	697a      	ldr	r2, [r7, #20]
 801e018:	0010      	movs	r0, r2
 801e01a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e01c:	46c0      	nop			@ (mov r8, r8)
 801e01e:	46bd      	mov	sp, r7
 801e020:	b006      	add	sp, #24
 801e022:	bd80      	pop	{r7, pc}

0801e024 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e024:	b580      	push	{r7, lr}
 801e026:	b084      	sub	sp, #16
 801e028:	af00      	add	r7, sp, #0
 801e02a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	225a      	movs	r2, #90	@ 0x5a
 801e036:	2100      	movs	r1, #0
 801e038:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	2252      	movs	r2, #82	@ 0x52
 801e03e:	2100      	movs	r1, #0
 801e040:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	2298      	movs	r2, #152	@ 0x98
 801e046:	589b      	ldr	r3, [r3, r2]
 801e048:	68fa      	ldr	r2, [r7, #12]
 801e04a:	0010      	movs	r0, r2
 801e04c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e04e:	46c0      	nop			@ (mov r8, r8)
 801e050:	46bd      	mov	sp, r7
 801e052:	b004      	add	sp, #16
 801e054:	bd80      	pop	{r7, pc}

0801e056 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801e056:	b580      	push	{r7, lr}
 801e058:	b086      	sub	sp, #24
 801e05a:	af00      	add	r7, sp, #0
 801e05c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e05e:	f3ef 8310 	mrs	r3, PRIMASK
 801e062:	60bb      	str	r3, [r7, #8]
  return(result);
 801e064:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801e066:	617b      	str	r3, [r7, #20]
 801e068:	2301      	movs	r3, #1
 801e06a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	f383 8810 	msr	PRIMASK, r3
}
 801e072:	46c0      	nop			@ (mov r8, r8)
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	681a      	ldr	r2, [r3, #0]
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	681b      	ldr	r3, [r3, #0]
 801e07e:	2140      	movs	r1, #64	@ 0x40
 801e080:	438a      	bics	r2, r1
 801e082:	601a      	str	r2, [r3, #0]
 801e084:	697b      	ldr	r3, [r7, #20]
 801e086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e088:	693b      	ldr	r3, [r7, #16]
 801e08a:	f383 8810 	msr	PRIMASK, r3
}
 801e08e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801e090:	687b      	ldr	r3, [r7, #4]
 801e092:	2220      	movs	r2, #32
 801e094:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	2200      	movs	r2, #0
 801e09a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	228c      	movs	r2, #140	@ 0x8c
 801e0a0:	589b      	ldr	r3, [r3, r2]
 801e0a2:	687a      	ldr	r2, [r7, #4]
 801e0a4:	0010      	movs	r0, r2
 801e0a6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801e0a8:	46c0      	nop			@ (mov r8, r8)
 801e0aa:	46bd      	mov	sp, r7
 801e0ac:	b006      	add	sp, #24
 801e0ae:	bd80      	pop	{r7, pc}

0801e0b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801e0b0:	b580      	push	{r7, lr}
 801e0b2:	b094      	sub	sp, #80	@ 0x50
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801e0b8:	204e      	movs	r0, #78	@ 0x4e
 801e0ba:	183b      	adds	r3, r7, r0
 801e0bc:	687a      	ldr	r2, [r7, #4]
 801e0be:	215c      	movs	r1, #92	@ 0x5c
 801e0c0:	5a52      	ldrh	r2, [r2, r1]
 801e0c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	2280      	movs	r2, #128	@ 0x80
 801e0c8:	589b      	ldr	r3, [r3, r2]
 801e0ca:	2b22      	cmp	r3, #34	@ 0x22
 801e0cc:	d000      	beq.n	801e0d0 <UART_RxISR_8BIT+0x20>
 801e0ce:	e0c2      	b.n	801e256 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e0d6:	214c      	movs	r1, #76	@ 0x4c
 801e0d8:	187b      	adds	r3, r7, r1
 801e0da:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801e0dc:	187b      	adds	r3, r7, r1
 801e0de:	881b      	ldrh	r3, [r3, #0]
 801e0e0:	b2da      	uxtb	r2, r3
 801e0e2:	183b      	adds	r3, r7, r0
 801e0e4:	881b      	ldrh	r3, [r3, #0]
 801e0e6:	b2d9      	uxtb	r1, r3
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e0ec:	400a      	ands	r2, r1
 801e0ee:	b2d2      	uxtb	r2, r2
 801e0f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e0f6:	1c5a      	adds	r2, r3, #1
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	225a      	movs	r2, #90	@ 0x5a
 801e100:	5a9b      	ldrh	r3, [r3, r2]
 801e102:	b29b      	uxth	r3, r3
 801e104:	3b01      	subs	r3, #1
 801e106:	b299      	uxth	r1, r3
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	225a      	movs	r2, #90	@ 0x5a
 801e10c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	225a      	movs	r2, #90	@ 0x5a
 801e112:	5a9b      	ldrh	r3, [r3, r2]
 801e114:	b29b      	uxth	r3, r3
 801e116:	2b00      	cmp	r3, #0
 801e118:	d000      	beq.n	801e11c <UART_RxISR_8BIT+0x6c>
 801e11a:	e0a4      	b.n	801e266 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e11c:	f3ef 8310 	mrs	r3, PRIMASK
 801e120:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e124:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e126:	2301      	movs	r3, #1
 801e128:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e12c:	f383 8810 	msr	PRIMASK, r3
}
 801e130:	46c0      	nop			@ (mov r8, r8)
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	681a      	ldr	r2, [r3, #0]
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	494c      	ldr	r1, [pc, #304]	@ (801e270 <UART_RxISR_8BIT+0x1c0>)
 801e13e:	400a      	ands	r2, r1
 801e140:	601a      	str	r2, [r3, #0]
 801e142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e144:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e148:	f383 8810 	msr	PRIMASK, r3
}
 801e14c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e14e:	f3ef 8310 	mrs	r3, PRIMASK
 801e152:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801e154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e156:	647b      	str	r3, [r7, #68]	@ 0x44
 801e158:	2301      	movs	r3, #1
 801e15a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e15e:	f383 8810 	msr	PRIMASK, r3
}
 801e162:	46c0      	nop			@ (mov r8, r8)
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	681b      	ldr	r3, [r3, #0]
 801e168:	689a      	ldr	r2, [r3, #8]
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	2101      	movs	r1, #1
 801e170:	438a      	bics	r2, r1
 801e172:	609a      	str	r2, [r3, #8]
 801e174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e176:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e17a:	f383 8810 	msr	PRIMASK, r3
}
 801e17e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	2280      	movs	r2, #128	@ 0x80
 801e184:	2120      	movs	r1, #32
 801e186:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	2200      	movs	r2, #0
 801e18c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	2200      	movs	r2, #0
 801e192:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	4a36      	ldr	r2, [pc, #216]	@ (801e274 <UART_RxISR_8BIT+0x1c4>)
 801e19a:	4293      	cmp	r3, r2
 801e19c:	d01f      	beq.n	801e1de <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	685a      	ldr	r2, [r3, #4]
 801e1a4:	2380      	movs	r3, #128	@ 0x80
 801e1a6:	041b      	lsls	r3, r3, #16
 801e1a8:	4013      	ands	r3, r2
 801e1aa:	d018      	beq.n	801e1de <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1ac:	f3ef 8310 	mrs	r3, PRIMASK
 801e1b0:	61bb      	str	r3, [r7, #24]
  return(result);
 801e1b2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e1b4:	643b      	str	r3, [r7, #64]	@ 0x40
 801e1b6:	2301      	movs	r3, #1
 801e1b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1ba:	69fb      	ldr	r3, [r7, #28]
 801e1bc:	f383 8810 	msr	PRIMASK, r3
}
 801e1c0:	46c0      	nop			@ (mov r8, r8)
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	681a      	ldr	r2, [r3, #0]
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	492a      	ldr	r1, [pc, #168]	@ (801e278 <UART_RxISR_8BIT+0x1c8>)
 801e1ce:	400a      	ands	r2, r1
 801e1d0:	601a      	str	r2, [r3, #0]
 801e1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e1d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1d6:	6a3b      	ldr	r3, [r7, #32]
 801e1d8:	f383 8810 	msr	PRIMASK, r3
}
 801e1dc:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e1e2:	2b01      	cmp	r3, #1
 801e1e4:	d130      	bne.n	801e248 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e1e6:	687b      	ldr	r3, [r7, #4]
 801e1e8:	2200      	movs	r2, #0
 801e1ea:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e1ec:	f3ef 8310 	mrs	r3, PRIMASK
 801e1f0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e1f2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e1f6:	2301      	movs	r3, #1
 801e1f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1fa:	693b      	ldr	r3, [r7, #16]
 801e1fc:	f383 8810 	msr	PRIMASK, r3
}
 801e200:	46c0      	nop			@ (mov r8, r8)
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	681b      	ldr	r3, [r3, #0]
 801e206:	681a      	ldr	r2, [r3, #0]
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	2110      	movs	r1, #16
 801e20e:	438a      	bics	r2, r1
 801e210:	601a      	str	r2, [r3, #0]
 801e212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e216:	697b      	ldr	r3, [r7, #20]
 801e218:	f383 8810 	msr	PRIMASK, r3
}
 801e21c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	681b      	ldr	r3, [r3, #0]
 801e222:	69db      	ldr	r3, [r3, #28]
 801e224:	2210      	movs	r2, #16
 801e226:	4013      	ands	r3, r2
 801e228:	2b10      	cmp	r3, #16
 801e22a:	d103      	bne.n	801e234 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	681b      	ldr	r3, [r3, #0]
 801e230:	2210      	movs	r2, #16
 801e232:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	22ac      	movs	r2, #172	@ 0xac
 801e238:	589b      	ldr	r3, [r3, r2]
 801e23a:	687a      	ldr	r2, [r7, #4]
 801e23c:	2158      	movs	r1, #88	@ 0x58
 801e23e:	5a51      	ldrh	r1, [r2, r1]
 801e240:	687a      	ldr	r2, [r7, #4]
 801e242:	0010      	movs	r0, r2
 801e244:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e246:	e00e      	b.n	801e266 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	2294      	movs	r2, #148	@ 0x94
 801e24c:	589b      	ldr	r3, [r3, r2]
 801e24e:	687a      	ldr	r2, [r7, #4]
 801e250:	0010      	movs	r0, r2
 801e252:	4798      	blx	r3
}
 801e254:	e007      	b.n	801e266 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	681b      	ldr	r3, [r3, #0]
 801e25a:	699a      	ldr	r2, [r3, #24]
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	2108      	movs	r1, #8
 801e262:	430a      	orrs	r2, r1
 801e264:	619a      	str	r2, [r3, #24]
}
 801e266:	46c0      	nop			@ (mov r8, r8)
 801e268:	46bd      	mov	sp, r7
 801e26a:	b014      	add	sp, #80	@ 0x50
 801e26c:	bd80      	pop	{r7, pc}
 801e26e:	46c0      	nop			@ (mov r8, r8)
 801e270:	fffffedf 	.word	0xfffffedf
 801e274:	40004800 	.word	0x40004800
 801e278:	fbffffff 	.word	0xfbffffff

0801e27c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801e27c:	b580      	push	{r7, lr}
 801e27e:	b094      	sub	sp, #80	@ 0x50
 801e280:	af00      	add	r7, sp, #0
 801e282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801e284:	204e      	movs	r0, #78	@ 0x4e
 801e286:	183b      	adds	r3, r7, r0
 801e288:	687a      	ldr	r2, [r7, #4]
 801e28a:	215c      	movs	r1, #92	@ 0x5c
 801e28c:	5a52      	ldrh	r2, [r2, r1]
 801e28e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	2280      	movs	r2, #128	@ 0x80
 801e294:	589b      	ldr	r3, [r3, r2]
 801e296:	2b22      	cmp	r3, #34	@ 0x22
 801e298:	d000      	beq.n	801e29c <UART_RxISR_16BIT+0x20>
 801e29a:	e0c2      	b.n	801e422 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801e2a2:	214c      	movs	r1, #76	@ 0x4c
 801e2a4:	187b      	adds	r3, r7, r1
 801e2a6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801e2ae:	187b      	adds	r3, r7, r1
 801e2b0:	183a      	adds	r2, r7, r0
 801e2b2:	881b      	ldrh	r3, [r3, #0]
 801e2b4:	8812      	ldrh	r2, [r2, #0]
 801e2b6:	4013      	ands	r3, r2
 801e2b8:	b29a      	uxth	r2, r3
 801e2ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e2bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801e2be:	687b      	ldr	r3, [r7, #4]
 801e2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e2c2:	1c9a      	adds	r2, r3, #2
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	225a      	movs	r2, #90	@ 0x5a
 801e2cc:	5a9b      	ldrh	r3, [r3, r2]
 801e2ce:	b29b      	uxth	r3, r3
 801e2d0:	3b01      	subs	r3, #1
 801e2d2:	b299      	uxth	r1, r3
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	225a      	movs	r2, #90	@ 0x5a
 801e2d8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	225a      	movs	r2, #90	@ 0x5a
 801e2de:	5a9b      	ldrh	r3, [r3, r2]
 801e2e0:	b29b      	uxth	r3, r3
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d000      	beq.n	801e2e8 <UART_RxISR_16BIT+0x6c>
 801e2e6:	e0a4      	b.n	801e432 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2e8:	f3ef 8310 	mrs	r3, PRIMASK
 801e2ec:	623b      	str	r3, [r7, #32]
  return(result);
 801e2ee:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e2f0:	647b      	str	r3, [r7, #68]	@ 0x44
 801e2f2:	2301      	movs	r3, #1
 801e2f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e2f8:	f383 8810 	msr	PRIMASK, r3
}
 801e2fc:	46c0      	nop			@ (mov r8, r8)
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	681a      	ldr	r2, [r3, #0]
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	681b      	ldr	r3, [r3, #0]
 801e308:	494c      	ldr	r1, [pc, #304]	@ (801e43c <UART_RxISR_16BIT+0x1c0>)
 801e30a:	400a      	ands	r2, r1
 801e30c:	601a      	str	r2, [r3, #0]
 801e30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801e310:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e314:	f383 8810 	msr	PRIMASK, r3
}
 801e318:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e31a:	f3ef 8310 	mrs	r3, PRIMASK
 801e31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801e320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e322:	643b      	str	r3, [r7, #64]	@ 0x40
 801e324:	2301      	movs	r3, #1
 801e326:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e32a:	f383 8810 	msr	PRIMASK, r3
}
 801e32e:	46c0      	nop			@ (mov r8, r8)
 801e330:	687b      	ldr	r3, [r7, #4]
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	689a      	ldr	r2, [r3, #8]
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	2101      	movs	r1, #1
 801e33c:	438a      	bics	r2, r1
 801e33e:	609a      	str	r2, [r3, #8]
 801e340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801e342:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e346:	f383 8810 	msr	PRIMASK, r3
}
 801e34a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	2280      	movs	r2, #128	@ 0x80
 801e350:	2120      	movs	r1, #32
 801e352:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	2200      	movs	r2, #0
 801e358:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	2200      	movs	r2, #0
 801e35e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	4a36      	ldr	r2, [pc, #216]	@ (801e440 <UART_RxISR_16BIT+0x1c4>)
 801e366:	4293      	cmp	r3, r2
 801e368:	d01f      	beq.n	801e3aa <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	681b      	ldr	r3, [r3, #0]
 801e36e:	685a      	ldr	r2, [r3, #4]
 801e370:	2380      	movs	r3, #128	@ 0x80
 801e372:	041b      	lsls	r3, r3, #16
 801e374:	4013      	ands	r3, r2
 801e376:	d018      	beq.n	801e3aa <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e378:	f3ef 8310 	mrs	r3, PRIMASK
 801e37c:	617b      	str	r3, [r7, #20]
  return(result);
 801e37e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801e380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e382:	2301      	movs	r3, #1
 801e384:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e386:	69bb      	ldr	r3, [r7, #24]
 801e388:	f383 8810 	msr	PRIMASK, r3
}
 801e38c:	46c0      	nop			@ (mov r8, r8)
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	681a      	ldr	r2, [r3, #0]
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	492a      	ldr	r1, [pc, #168]	@ (801e444 <UART_RxISR_16BIT+0x1c8>)
 801e39a:	400a      	ands	r2, r1
 801e39c:	601a      	str	r2, [r3, #0]
 801e39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e3a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3a2:	69fb      	ldr	r3, [r7, #28]
 801e3a4:	f383 8810 	msr	PRIMASK, r3
}
 801e3a8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e3ae:	2b01      	cmp	r3, #1
 801e3b0:	d130      	bne.n	801e414 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	2200      	movs	r2, #0
 801e3b6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3b8:	f3ef 8310 	mrs	r3, PRIMASK
 801e3bc:	60bb      	str	r3, [r7, #8]
  return(result);
 801e3be:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801e3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e3c2:	2301      	movs	r3, #1
 801e3c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	f383 8810 	msr	PRIMASK, r3
}
 801e3cc:	46c0      	nop			@ (mov r8, r8)
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	681a      	ldr	r2, [r3, #0]
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	681b      	ldr	r3, [r3, #0]
 801e3d8:	2110      	movs	r1, #16
 801e3da:	438a      	bics	r2, r1
 801e3dc:	601a      	str	r2, [r3, #0]
 801e3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e3e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	f383 8810 	msr	PRIMASK, r3
}
 801e3e8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	681b      	ldr	r3, [r3, #0]
 801e3ee:	69db      	ldr	r3, [r3, #28]
 801e3f0:	2210      	movs	r2, #16
 801e3f2:	4013      	ands	r3, r2
 801e3f4:	2b10      	cmp	r3, #16
 801e3f6:	d103      	bne.n	801e400 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	681b      	ldr	r3, [r3, #0]
 801e3fc:	2210      	movs	r2, #16
 801e3fe:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	22ac      	movs	r2, #172	@ 0xac
 801e404:	589b      	ldr	r3, [r3, r2]
 801e406:	687a      	ldr	r2, [r7, #4]
 801e408:	2158      	movs	r1, #88	@ 0x58
 801e40a:	5a51      	ldrh	r1, [r2, r1]
 801e40c:	687a      	ldr	r2, [r7, #4]
 801e40e:	0010      	movs	r0, r2
 801e410:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801e412:	e00e      	b.n	801e432 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	2294      	movs	r2, #148	@ 0x94
 801e418:	589b      	ldr	r3, [r3, r2]
 801e41a:	687a      	ldr	r2, [r7, #4]
 801e41c:	0010      	movs	r0, r2
 801e41e:	4798      	blx	r3
}
 801e420:	e007      	b.n	801e432 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	699a      	ldr	r2, [r3, #24]
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	2108      	movs	r1, #8
 801e42e:	430a      	orrs	r2, r1
 801e430:	619a      	str	r2, [r3, #24]
}
 801e432:	46c0      	nop			@ (mov r8, r8)
 801e434:	46bd      	mov	sp, r7
 801e436:	b014      	add	sp, #80	@ 0x50
 801e438:	bd80      	pop	{r7, pc}
 801e43a:	46c0      	nop			@ (mov r8, r8)
 801e43c:	fffffedf 	.word	0xfffffedf
 801e440:	40004800 	.word	0x40004800
 801e444:	fbffffff 	.word	0xfbffffff

0801e448 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801e448:	b580      	push	{r7, lr}
 801e44a:	b082      	sub	sp, #8
 801e44c:	af00      	add	r7, sp, #0
 801e44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801e450:	46c0      	nop			@ (mov r8, r8)
 801e452:	46bd      	mov	sp, r7
 801e454:	b002      	add	sp, #8
 801e456:	bd80      	pop	{r7, pc}

0801e458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	b084      	sub	sp, #16
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	2244      	movs	r2, #68	@ 0x44
 801e464:	2100      	movs	r1, #0
 801e466:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e468:	4b05      	ldr	r3, [pc, #20]	@ (801e480 <USB_EnableGlobalInt+0x28>)
 801e46a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	b299      	uxth	r1, r3
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	2240      	movs	r2, #64	@ 0x40
 801e474:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e476:	2300      	movs	r3, #0
}
 801e478:	0018      	movs	r0, r3
 801e47a:	46bd      	mov	sp, r7
 801e47c:	b004      	add	sp, #16
 801e47e:	bd80      	pop	{r7, pc}
 801e480:	0000bf80 	.word	0x0000bf80

0801e484 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801e484:	b580      	push	{r7, lr}
 801e486:	b084      	sub	sp, #16
 801e488:	af00      	add	r7, sp, #0
 801e48a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801e48c:	4b09      	ldr	r3, [pc, #36]	@ (801e4b4 <USB_DisableGlobalInt+0x30>)
 801e48e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	2240      	movs	r2, #64	@ 0x40
 801e494:	5a9b      	ldrh	r3, [r3, r2]
 801e496:	b29b      	uxth	r3, r3
 801e498:	68fa      	ldr	r2, [r7, #12]
 801e49a:	b292      	uxth	r2, r2
 801e49c:	43d2      	mvns	r2, r2
 801e49e:	b292      	uxth	r2, r2
 801e4a0:	4013      	ands	r3, r2
 801e4a2:	b299      	uxth	r1, r3
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	2240      	movs	r2, #64	@ 0x40
 801e4a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e4aa:	2300      	movs	r3, #0
}
 801e4ac:	0018      	movs	r0, r3
 801e4ae:	46bd      	mov	sp, r7
 801e4b0:	b004      	add	sp, #16
 801e4b2:	bd80      	pop	{r7, pc}
 801e4b4:	0000bf80 	.word	0x0000bf80

0801e4b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801e4b8:	b084      	sub	sp, #16
 801e4ba:	b590      	push	{r4, r7, lr}
 801e4bc:	b083      	sub	sp, #12
 801e4be:	af00      	add	r7, sp, #0
 801e4c0:	6078      	str	r0, [r7, #4]
 801e4c2:	2004      	movs	r0, #4
 801e4c4:	2410      	movs	r4, #16
 801e4c6:	1900      	adds	r0, r0, r4
 801e4c8:	2408      	movs	r4, #8
 801e4ca:	46a4      	mov	ip, r4
 801e4cc:	44bc      	add	ip, r7
 801e4ce:	4460      	add	r0, ip
 801e4d0:	6001      	str	r1, [r0, #0]
 801e4d2:	6042      	str	r2, [r0, #4]
 801e4d4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	2240      	movs	r2, #64	@ 0x40
 801e4da:	2101      	movs	r1, #1
 801e4dc:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	2240      	movs	r2, #64	@ 0x40
 801e4e2:	2100      	movs	r1, #0
 801e4e4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2244      	movs	r2, #68	@ 0x44
 801e4ea:	2100      	movs	r1, #0
 801e4ec:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	2250      	movs	r2, #80	@ 0x50
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801e4f6:	2300      	movs	r3, #0
}
 801e4f8:	0018      	movs	r0, r3
 801e4fa:	46bd      	mov	sp, r7
 801e4fc:	b003      	add	sp, #12
 801e4fe:	bc90      	pop	{r4, r7}
 801e500:	bc08      	pop	{r3}
 801e502:	b004      	add	sp, #16
 801e504:	4718      	bx	r3
	...

0801e508 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b09c      	sub	sp, #112	@ 0x70
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	6078      	str	r0, [r7, #4]
 801e510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801e512:	236f      	movs	r3, #111	@ 0x6f
 801e514:	18fb      	adds	r3, r7, r3
 801e516:	2200      	movs	r2, #0
 801e518:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801e51a:	687a      	ldr	r2, [r7, #4]
 801e51c:	683b      	ldr	r3, [r7, #0]
 801e51e:	781b      	ldrb	r3, [r3, #0]
 801e520:	009b      	lsls	r3, r3, #2
 801e522:	18d3      	adds	r3, r2, r3
 801e524:	881b      	ldrh	r3, [r3, #0]
 801e526:	b29a      	uxth	r2, r3
 801e528:	236c      	movs	r3, #108	@ 0x6c
 801e52a:	18fb      	adds	r3, r7, r3
 801e52c:	49a3      	ldr	r1, [pc, #652]	@ (801e7bc <USB_ActivateEndpoint+0x2b4>)
 801e52e:	400a      	ands	r2, r1
 801e530:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801e532:	683b      	ldr	r3, [r7, #0]
 801e534:	78db      	ldrb	r3, [r3, #3]
 801e536:	2b03      	cmp	r3, #3
 801e538:	d017      	beq.n	801e56a <USB_ActivateEndpoint+0x62>
 801e53a:	dc28      	bgt.n	801e58e <USB_ActivateEndpoint+0x86>
 801e53c:	2b02      	cmp	r3, #2
 801e53e:	d00e      	beq.n	801e55e <USB_ActivateEndpoint+0x56>
 801e540:	dc25      	bgt.n	801e58e <USB_ActivateEndpoint+0x86>
 801e542:	2b00      	cmp	r3, #0
 801e544:	d002      	beq.n	801e54c <USB_ActivateEndpoint+0x44>
 801e546:	2b01      	cmp	r3, #1
 801e548:	d018      	beq.n	801e57c <USB_ActivateEndpoint+0x74>
 801e54a:	e020      	b.n	801e58e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801e54c:	226c      	movs	r2, #108	@ 0x6c
 801e54e:	18bb      	adds	r3, r7, r2
 801e550:	18ba      	adds	r2, r7, r2
 801e552:	8812      	ldrh	r2, [r2, #0]
 801e554:	2180      	movs	r1, #128	@ 0x80
 801e556:	0089      	lsls	r1, r1, #2
 801e558:	430a      	orrs	r2, r1
 801e55a:	801a      	strh	r2, [r3, #0]
      break;
 801e55c:	e01c      	b.n	801e598 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801e55e:	226c      	movs	r2, #108	@ 0x6c
 801e560:	18bb      	adds	r3, r7, r2
 801e562:	18ba      	adds	r2, r7, r2
 801e564:	8812      	ldrh	r2, [r2, #0]
 801e566:	801a      	strh	r2, [r3, #0]
      break;
 801e568:	e016      	b.n	801e598 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801e56a:	226c      	movs	r2, #108	@ 0x6c
 801e56c:	18bb      	adds	r3, r7, r2
 801e56e:	18ba      	adds	r2, r7, r2
 801e570:	8812      	ldrh	r2, [r2, #0]
 801e572:	21c0      	movs	r1, #192	@ 0xc0
 801e574:	00c9      	lsls	r1, r1, #3
 801e576:	430a      	orrs	r2, r1
 801e578:	801a      	strh	r2, [r3, #0]
      break;
 801e57a:	e00d      	b.n	801e598 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801e57c:	226c      	movs	r2, #108	@ 0x6c
 801e57e:	18bb      	adds	r3, r7, r2
 801e580:	18ba      	adds	r2, r7, r2
 801e582:	8812      	ldrh	r2, [r2, #0]
 801e584:	2180      	movs	r1, #128	@ 0x80
 801e586:	00c9      	lsls	r1, r1, #3
 801e588:	430a      	orrs	r2, r1
 801e58a:	801a      	strh	r2, [r3, #0]
      break;
 801e58c:	e004      	b.n	801e598 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801e58e:	236f      	movs	r3, #111	@ 0x6f
 801e590:	18fb      	adds	r3, r7, r3
 801e592:	2201      	movs	r2, #1
 801e594:	701a      	strb	r2, [r3, #0]
      break;
 801e596:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801e598:	687a      	ldr	r2, [r7, #4]
 801e59a:	683b      	ldr	r3, [r7, #0]
 801e59c:	781b      	ldrb	r3, [r3, #0]
 801e59e:	009b      	lsls	r3, r3, #2
 801e5a0:	18d3      	adds	r3, r2, r3
 801e5a2:	226c      	movs	r2, #108	@ 0x6c
 801e5a4:	18ba      	adds	r2, r7, r2
 801e5a6:	8812      	ldrh	r2, [r2, #0]
 801e5a8:	4985      	ldr	r1, [pc, #532]	@ (801e7c0 <USB_ActivateEndpoint+0x2b8>)
 801e5aa:	430a      	orrs	r2, r1
 801e5ac:	b292      	uxth	r2, r2
 801e5ae:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801e5b0:	687a      	ldr	r2, [r7, #4]
 801e5b2:	683b      	ldr	r3, [r7, #0]
 801e5b4:	781b      	ldrb	r3, [r3, #0]
 801e5b6:	009b      	lsls	r3, r3, #2
 801e5b8:	18d3      	adds	r3, r2, r3
 801e5ba:	881b      	ldrh	r3, [r3, #0]
 801e5bc:	b29b      	uxth	r3, r3
 801e5be:	b21b      	sxth	r3, r3
 801e5c0:	4a80      	ldr	r2, [pc, #512]	@ (801e7c4 <USB_ActivateEndpoint+0x2bc>)
 801e5c2:	4013      	ands	r3, r2
 801e5c4:	b21a      	sxth	r2, r3
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	781b      	ldrb	r3, [r3, #0]
 801e5ca:	b21b      	sxth	r3, r3
 801e5cc:	4313      	orrs	r3, r2
 801e5ce:	b21a      	sxth	r2, r3
 801e5d0:	2166      	movs	r1, #102	@ 0x66
 801e5d2:	187b      	adds	r3, r7, r1
 801e5d4:	801a      	strh	r2, [r3, #0]
 801e5d6:	687a      	ldr	r2, [r7, #4]
 801e5d8:	683b      	ldr	r3, [r7, #0]
 801e5da:	781b      	ldrb	r3, [r3, #0]
 801e5dc:	009b      	lsls	r3, r3, #2
 801e5de:	18d3      	adds	r3, r2, r3
 801e5e0:	187a      	adds	r2, r7, r1
 801e5e2:	8812      	ldrh	r2, [r2, #0]
 801e5e4:	4976      	ldr	r1, [pc, #472]	@ (801e7c0 <USB_ActivateEndpoint+0x2b8>)
 801e5e6:	430a      	orrs	r2, r1
 801e5e8:	b292      	uxth	r2, r2
 801e5ea:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801e5ec:	683b      	ldr	r3, [r7, #0]
 801e5ee:	7b1b      	ldrb	r3, [r3, #12]
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d000      	beq.n	801e5f6 <USB_ActivateEndpoint+0xee>
 801e5f4:	e178      	b.n	801e8e8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801e5f6:	683b      	ldr	r3, [r7, #0]
 801e5f8:	785b      	ldrb	r3, [r3, #1]
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	d100      	bne.n	801e600 <USB_ActivateEndpoint+0xf8>
 801e5fe:	e07a      	b.n	801e6f6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	61bb      	str	r3, [r7, #24]
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	2250      	movs	r2, #80	@ 0x50
 801e608:	5a9b      	ldrh	r3, [r3, r2]
 801e60a:	b29b      	uxth	r3, r3
 801e60c:	001a      	movs	r2, r3
 801e60e:	69bb      	ldr	r3, [r7, #24]
 801e610:	189b      	adds	r3, r3, r2
 801e612:	61bb      	str	r3, [r7, #24]
 801e614:	683b      	ldr	r3, [r7, #0]
 801e616:	781b      	ldrb	r3, [r3, #0]
 801e618:	00da      	lsls	r2, r3, #3
 801e61a:	69bb      	ldr	r3, [r7, #24]
 801e61c:	18d3      	adds	r3, r2, r3
 801e61e:	2280      	movs	r2, #128	@ 0x80
 801e620:	00d2      	lsls	r2, r2, #3
 801e622:	4694      	mov	ip, r2
 801e624:	4463      	add	r3, ip
 801e626:	617b      	str	r3, [r7, #20]
 801e628:	683b      	ldr	r3, [r7, #0]
 801e62a:	88db      	ldrh	r3, [r3, #6]
 801e62c:	085b      	lsrs	r3, r3, #1
 801e62e:	b29b      	uxth	r3, r3
 801e630:	18db      	adds	r3, r3, r3
 801e632:	b29a      	uxth	r2, r3
 801e634:	697b      	ldr	r3, [r7, #20]
 801e636:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801e638:	687a      	ldr	r2, [r7, #4]
 801e63a:	683b      	ldr	r3, [r7, #0]
 801e63c:	781b      	ldrb	r3, [r3, #0]
 801e63e:	009b      	lsls	r3, r3, #2
 801e640:	18d2      	adds	r2, r2, r3
 801e642:	2112      	movs	r1, #18
 801e644:	187b      	adds	r3, r7, r1
 801e646:	8812      	ldrh	r2, [r2, #0]
 801e648:	801a      	strh	r2, [r3, #0]
 801e64a:	187b      	adds	r3, r7, r1
 801e64c:	881b      	ldrh	r3, [r3, #0]
 801e64e:	2240      	movs	r2, #64	@ 0x40
 801e650:	4013      	ands	r3, r2
 801e652:	d016      	beq.n	801e682 <USB_ActivateEndpoint+0x17a>
 801e654:	687a      	ldr	r2, [r7, #4]
 801e656:	683b      	ldr	r3, [r7, #0]
 801e658:	781b      	ldrb	r3, [r3, #0]
 801e65a:	009b      	lsls	r3, r3, #2
 801e65c:	18d3      	adds	r3, r2, r3
 801e65e:	881b      	ldrh	r3, [r3, #0]
 801e660:	b29a      	uxth	r2, r3
 801e662:	2010      	movs	r0, #16
 801e664:	183b      	adds	r3, r7, r0
 801e666:	4957      	ldr	r1, [pc, #348]	@ (801e7c4 <USB_ActivateEndpoint+0x2bc>)
 801e668:	400a      	ands	r2, r1
 801e66a:	801a      	strh	r2, [r3, #0]
 801e66c:	687a      	ldr	r2, [r7, #4]
 801e66e:	683b      	ldr	r3, [r7, #0]
 801e670:	781b      	ldrb	r3, [r3, #0]
 801e672:	009b      	lsls	r3, r3, #2
 801e674:	18d3      	adds	r3, r2, r3
 801e676:	183a      	adds	r2, r7, r0
 801e678:	8812      	ldrh	r2, [r2, #0]
 801e67a:	4953      	ldr	r1, [pc, #332]	@ (801e7c8 <USB_ActivateEndpoint+0x2c0>)
 801e67c:	430a      	orrs	r2, r1
 801e67e:	b292      	uxth	r2, r2
 801e680:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	78db      	ldrb	r3, [r3, #3]
 801e686:	2b01      	cmp	r3, #1
 801e688:	d01d      	beq.n	801e6c6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801e68a:	687a      	ldr	r2, [r7, #4]
 801e68c:	683b      	ldr	r3, [r7, #0]
 801e68e:	781b      	ldrb	r3, [r3, #0]
 801e690:	009b      	lsls	r3, r3, #2
 801e692:	18d3      	adds	r3, r2, r3
 801e694:	881b      	ldrh	r3, [r3, #0]
 801e696:	b29a      	uxth	r2, r3
 801e698:	200c      	movs	r0, #12
 801e69a:	183b      	adds	r3, r7, r0
 801e69c:	494b      	ldr	r1, [pc, #300]	@ (801e7cc <USB_ActivateEndpoint+0x2c4>)
 801e69e:	400a      	ands	r2, r1
 801e6a0:	801a      	strh	r2, [r3, #0]
 801e6a2:	183b      	adds	r3, r7, r0
 801e6a4:	183a      	adds	r2, r7, r0
 801e6a6:	8812      	ldrh	r2, [r2, #0]
 801e6a8:	2120      	movs	r1, #32
 801e6aa:	404a      	eors	r2, r1
 801e6ac:	801a      	strh	r2, [r3, #0]
 801e6ae:	687a      	ldr	r2, [r7, #4]
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	781b      	ldrb	r3, [r3, #0]
 801e6b4:	009b      	lsls	r3, r3, #2
 801e6b6:	18d3      	adds	r3, r2, r3
 801e6b8:	183a      	adds	r2, r7, r0
 801e6ba:	8812      	ldrh	r2, [r2, #0]
 801e6bc:	4940      	ldr	r1, [pc, #256]	@ (801e7c0 <USB_ActivateEndpoint+0x2b8>)
 801e6be:	430a      	orrs	r2, r1
 801e6c0:	b292      	uxth	r2, r2
 801e6c2:	801a      	strh	r2, [r3, #0]
 801e6c4:	e2b4      	b.n	801ec30 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801e6c6:	687a      	ldr	r2, [r7, #4]
 801e6c8:	683b      	ldr	r3, [r7, #0]
 801e6ca:	781b      	ldrb	r3, [r3, #0]
 801e6cc:	009b      	lsls	r3, r3, #2
 801e6ce:	18d3      	adds	r3, r2, r3
 801e6d0:	881b      	ldrh	r3, [r3, #0]
 801e6d2:	b29a      	uxth	r2, r3
 801e6d4:	200e      	movs	r0, #14
 801e6d6:	183b      	adds	r3, r7, r0
 801e6d8:	493c      	ldr	r1, [pc, #240]	@ (801e7cc <USB_ActivateEndpoint+0x2c4>)
 801e6da:	400a      	ands	r2, r1
 801e6dc:	801a      	strh	r2, [r3, #0]
 801e6de:	687a      	ldr	r2, [r7, #4]
 801e6e0:	683b      	ldr	r3, [r7, #0]
 801e6e2:	781b      	ldrb	r3, [r3, #0]
 801e6e4:	009b      	lsls	r3, r3, #2
 801e6e6:	18d3      	adds	r3, r2, r3
 801e6e8:	183a      	adds	r2, r7, r0
 801e6ea:	8812      	ldrh	r2, [r2, #0]
 801e6ec:	4934      	ldr	r1, [pc, #208]	@ (801e7c0 <USB_ActivateEndpoint+0x2b8>)
 801e6ee:	430a      	orrs	r2, r1
 801e6f0:	b292      	uxth	r2, r2
 801e6f2:	801a      	strh	r2, [r3, #0]
 801e6f4:	e29c      	b.n	801ec30 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	633b      	str	r3, [r7, #48]	@ 0x30
 801e6fa:	687b      	ldr	r3, [r7, #4]
 801e6fc:	2250      	movs	r2, #80	@ 0x50
 801e6fe:	5a9b      	ldrh	r3, [r3, r2]
 801e700:	b29b      	uxth	r3, r3
 801e702:	001a      	movs	r2, r3
 801e704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e706:	189b      	adds	r3, r3, r2
 801e708:	633b      	str	r3, [r7, #48]	@ 0x30
 801e70a:	683b      	ldr	r3, [r7, #0]
 801e70c:	781b      	ldrb	r3, [r3, #0]
 801e70e:	00da      	lsls	r2, r3, #3
 801e710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e712:	18d3      	adds	r3, r2, r3
 801e714:	4a2e      	ldr	r2, [pc, #184]	@ (801e7d0 <USB_ActivateEndpoint+0x2c8>)
 801e716:	4694      	mov	ip, r2
 801e718:	4463      	add	r3, ip
 801e71a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e71c:	683b      	ldr	r3, [r7, #0]
 801e71e:	88db      	ldrh	r3, [r3, #6]
 801e720:	085b      	lsrs	r3, r3, #1
 801e722:	b29b      	uxth	r3, r3
 801e724:	18db      	adds	r3, r3, r3
 801e726:	b29a      	uxth	r2, r3
 801e728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e72a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	2250      	movs	r2, #80	@ 0x50
 801e734:	5a9b      	ldrh	r3, [r3, r2]
 801e736:	b29b      	uxth	r3, r3
 801e738:	001a      	movs	r2, r3
 801e73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e73c:	189b      	adds	r3, r3, r2
 801e73e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801e740:	683b      	ldr	r3, [r7, #0]
 801e742:	781b      	ldrb	r3, [r3, #0]
 801e744:	00da      	lsls	r2, r3, #3
 801e746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e748:	18d3      	adds	r3, r2, r3
 801e74a:	4a22      	ldr	r2, [pc, #136]	@ (801e7d4 <USB_ActivateEndpoint+0x2cc>)
 801e74c:	4694      	mov	ip, r2
 801e74e:	4463      	add	r3, ip
 801e750:	627b      	str	r3, [r7, #36]	@ 0x24
 801e752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e754:	881b      	ldrh	r3, [r3, #0]
 801e756:	b29b      	uxth	r3, r3
 801e758:	059b      	lsls	r3, r3, #22
 801e75a:	0d9b      	lsrs	r3, r3, #22
 801e75c:	b29a      	uxth	r2, r3
 801e75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e760:	801a      	strh	r2, [r3, #0]
 801e762:	683b      	ldr	r3, [r7, #0]
 801e764:	691b      	ldr	r3, [r3, #16]
 801e766:	2b3e      	cmp	r3, #62	@ 0x3e
 801e768:	d91a      	bls.n	801e7a0 <USB_ActivateEndpoint+0x298>
 801e76a:	683b      	ldr	r3, [r7, #0]
 801e76c:	691b      	ldr	r3, [r3, #16]
 801e76e:	095b      	lsrs	r3, r3, #5
 801e770:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e772:	683b      	ldr	r3, [r7, #0]
 801e774:	691b      	ldr	r3, [r3, #16]
 801e776:	221f      	movs	r2, #31
 801e778:	4013      	ands	r3, r2
 801e77a:	d102      	bne.n	801e782 <USB_ActivateEndpoint+0x27a>
 801e77c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e77e:	3b01      	subs	r3, #1
 801e780:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e784:	881b      	ldrh	r3, [r3, #0]
 801e786:	b29a      	uxth	r2, r3
 801e788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e78a:	b29b      	uxth	r3, r3
 801e78c:	029b      	lsls	r3, r3, #10
 801e78e:	b29b      	uxth	r3, r3
 801e790:	4313      	orrs	r3, r2
 801e792:	b29b      	uxth	r3, r3
 801e794:	4a10      	ldr	r2, [pc, #64]	@ (801e7d8 <USB_ActivateEndpoint+0x2d0>)
 801e796:	4313      	orrs	r3, r2
 801e798:	b29a      	uxth	r2, r3
 801e79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e79c:	801a      	strh	r2, [r3, #0]
 801e79e:	e034      	b.n	801e80a <USB_ActivateEndpoint+0x302>
 801e7a0:	683b      	ldr	r3, [r7, #0]
 801e7a2:	691b      	ldr	r3, [r3, #16]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d119      	bne.n	801e7dc <USB_ActivateEndpoint+0x2d4>
 801e7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7aa:	881b      	ldrh	r3, [r3, #0]
 801e7ac:	b29b      	uxth	r3, r3
 801e7ae:	4a0a      	ldr	r2, [pc, #40]	@ (801e7d8 <USB_ActivateEndpoint+0x2d0>)
 801e7b0:	4313      	orrs	r3, r2
 801e7b2:	b29a      	uxth	r2, r3
 801e7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7b6:	801a      	strh	r2, [r3, #0]
 801e7b8:	e027      	b.n	801e80a <USB_ActivateEndpoint+0x302>
 801e7ba:	46c0      	nop			@ (mov r8, r8)
 801e7bc:	ffff898f 	.word	0xffff898f
 801e7c0:	ffff8080 	.word	0xffff8080
 801e7c4:	ffff8f8f 	.word	0xffff8f8f
 801e7c8:	ffff80c0 	.word	0xffff80c0
 801e7cc:	ffff8fbf 	.word	0xffff8fbf
 801e7d0:	00000404 	.word	0x00000404
 801e7d4:	00000406 	.word	0x00000406
 801e7d8:	ffff8000 	.word	0xffff8000
 801e7dc:	683b      	ldr	r3, [r7, #0]
 801e7de:	691b      	ldr	r3, [r3, #16]
 801e7e0:	085b      	lsrs	r3, r3, #1
 801e7e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	691b      	ldr	r3, [r3, #16]
 801e7e8:	2201      	movs	r2, #1
 801e7ea:	4013      	ands	r3, r2
 801e7ec:	d002      	beq.n	801e7f4 <USB_ActivateEndpoint+0x2ec>
 801e7ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e7f0:	3301      	adds	r3, #1
 801e7f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e7f6:	881b      	ldrh	r3, [r3, #0]
 801e7f8:	b29a      	uxth	r2, r3
 801e7fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801e7fc:	b29b      	uxth	r3, r3
 801e7fe:	029b      	lsls	r3, r3, #10
 801e800:	b29b      	uxth	r3, r3
 801e802:	4313      	orrs	r3, r2
 801e804:	b29a      	uxth	r2, r3
 801e806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e808:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e80a:	687a      	ldr	r2, [r7, #4]
 801e80c:	683b      	ldr	r3, [r7, #0]
 801e80e:	781b      	ldrb	r3, [r3, #0]
 801e810:	009b      	lsls	r3, r3, #2
 801e812:	18d2      	adds	r2, r2, r3
 801e814:	2122      	movs	r1, #34	@ 0x22
 801e816:	187b      	adds	r3, r7, r1
 801e818:	8812      	ldrh	r2, [r2, #0]
 801e81a:	801a      	strh	r2, [r3, #0]
 801e81c:	187b      	adds	r3, r7, r1
 801e81e:	881a      	ldrh	r2, [r3, #0]
 801e820:	2380      	movs	r3, #128	@ 0x80
 801e822:	01db      	lsls	r3, r3, #7
 801e824:	4013      	ands	r3, r2
 801e826:	d016      	beq.n	801e856 <USB_ActivateEndpoint+0x34e>
 801e828:	687a      	ldr	r2, [r7, #4]
 801e82a:	683b      	ldr	r3, [r7, #0]
 801e82c:	781b      	ldrb	r3, [r3, #0]
 801e82e:	009b      	lsls	r3, r3, #2
 801e830:	18d3      	adds	r3, r2, r3
 801e832:	881b      	ldrh	r3, [r3, #0]
 801e834:	b29a      	uxth	r2, r3
 801e836:	2020      	movs	r0, #32
 801e838:	183b      	adds	r3, r7, r0
 801e83a:	49dd      	ldr	r1, [pc, #884]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801e83c:	400a      	ands	r2, r1
 801e83e:	801a      	strh	r2, [r3, #0]
 801e840:	687a      	ldr	r2, [r7, #4]
 801e842:	683b      	ldr	r3, [r7, #0]
 801e844:	781b      	ldrb	r3, [r3, #0]
 801e846:	009b      	lsls	r3, r3, #2
 801e848:	18d3      	adds	r3, r2, r3
 801e84a:	183a      	adds	r2, r7, r0
 801e84c:	8812      	ldrh	r2, [r2, #0]
 801e84e:	49d9      	ldr	r1, [pc, #868]	@ (801ebb4 <USB_ActivateEndpoint+0x6ac>)
 801e850:	430a      	orrs	r2, r1
 801e852:	b292      	uxth	r2, r2
 801e854:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801e856:	683b      	ldr	r3, [r7, #0]
 801e858:	781b      	ldrb	r3, [r3, #0]
 801e85a:	2b00      	cmp	r3, #0
 801e85c:	d125      	bne.n	801e8aa <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801e85e:	687a      	ldr	r2, [r7, #4]
 801e860:	683b      	ldr	r3, [r7, #0]
 801e862:	781b      	ldrb	r3, [r3, #0]
 801e864:	009b      	lsls	r3, r3, #2
 801e866:	18d3      	adds	r3, r2, r3
 801e868:	881b      	ldrh	r3, [r3, #0]
 801e86a:	b29a      	uxth	r2, r3
 801e86c:	201c      	movs	r0, #28
 801e86e:	183b      	adds	r3, r7, r0
 801e870:	49d1      	ldr	r1, [pc, #836]	@ (801ebb8 <USB_ActivateEndpoint+0x6b0>)
 801e872:	400a      	ands	r2, r1
 801e874:	801a      	strh	r2, [r3, #0]
 801e876:	183b      	adds	r3, r7, r0
 801e878:	183a      	adds	r2, r7, r0
 801e87a:	8812      	ldrh	r2, [r2, #0]
 801e87c:	2180      	movs	r1, #128	@ 0x80
 801e87e:	0149      	lsls	r1, r1, #5
 801e880:	404a      	eors	r2, r1
 801e882:	801a      	strh	r2, [r3, #0]
 801e884:	183b      	adds	r3, r7, r0
 801e886:	183a      	adds	r2, r7, r0
 801e888:	8812      	ldrh	r2, [r2, #0]
 801e88a:	2180      	movs	r1, #128	@ 0x80
 801e88c:	0189      	lsls	r1, r1, #6
 801e88e:	404a      	eors	r2, r1
 801e890:	801a      	strh	r2, [r3, #0]
 801e892:	687a      	ldr	r2, [r7, #4]
 801e894:	683b      	ldr	r3, [r7, #0]
 801e896:	781b      	ldrb	r3, [r3, #0]
 801e898:	009b      	lsls	r3, r3, #2
 801e89a:	18d3      	adds	r3, r2, r3
 801e89c:	183a      	adds	r2, r7, r0
 801e89e:	8812      	ldrh	r2, [r2, #0]
 801e8a0:	49c6      	ldr	r1, [pc, #792]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801e8a2:	430a      	orrs	r2, r1
 801e8a4:	b292      	uxth	r2, r2
 801e8a6:	801a      	strh	r2, [r3, #0]
 801e8a8:	e1c2      	b.n	801ec30 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801e8aa:	687a      	ldr	r2, [r7, #4]
 801e8ac:	683b      	ldr	r3, [r7, #0]
 801e8ae:	781b      	ldrb	r3, [r3, #0]
 801e8b0:	009b      	lsls	r3, r3, #2
 801e8b2:	18d3      	adds	r3, r2, r3
 801e8b4:	881b      	ldrh	r3, [r3, #0]
 801e8b6:	b29a      	uxth	r2, r3
 801e8b8:	201e      	movs	r0, #30
 801e8ba:	183b      	adds	r3, r7, r0
 801e8bc:	49be      	ldr	r1, [pc, #760]	@ (801ebb8 <USB_ActivateEndpoint+0x6b0>)
 801e8be:	400a      	ands	r2, r1
 801e8c0:	801a      	strh	r2, [r3, #0]
 801e8c2:	183b      	adds	r3, r7, r0
 801e8c4:	183a      	adds	r2, r7, r0
 801e8c6:	8812      	ldrh	r2, [r2, #0]
 801e8c8:	2180      	movs	r1, #128	@ 0x80
 801e8ca:	0189      	lsls	r1, r1, #6
 801e8cc:	404a      	eors	r2, r1
 801e8ce:	801a      	strh	r2, [r3, #0]
 801e8d0:	687a      	ldr	r2, [r7, #4]
 801e8d2:	683b      	ldr	r3, [r7, #0]
 801e8d4:	781b      	ldrb	r3, [r3, #0]
 801e8d6:	009b      	lsls	r3, r3, #2
 801e8d8:	18d3      	adds	r3, r2, r3
 801e8da:	183a      	adds	r2, r7, r0
 801e8dc:	8812      	ldrh	r2, [r2, #0]
 801e8de:	49b7      	ldr	r1, [pc, #732]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801e8e0:	430a      	orrs	r2, r1
 801e8e2:	b292      	uxth	r2, r2
 801e8e4:	801a      	strh	r2, [r3, #0]
 801e8e6:	e1a3      	b.n	801ec30 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801e8e8:	683b      	ldr	r3, [r7, #0]
 801e8ea:	78db      	ldrb	r3, [r3, #3]
 801e8ec:	2b02      	cmp	r3, #2
 801e8ee:	d117      	bne.n	801e920 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801e8f0:	687a      	ldr	r2, [r7, #4]
 801e8f2:	683b      	ldr	r3, [r7, #0]
 801e8f4:	781b      	ldrb	r3, [r3, #0]
 801e8f6:	009b      	lsls	r3, r3, #2
 801e8f8:	18d3      	adds	r3, r2, r3
 801e8fa:	881b      	ldrh	r3, [r3, #0]
 801e8fc:	b29a      	uxth	r2, r3
 801e8fe:	2062      	movs	r0, #98	@ 0x62
 801e900:	183b      	adds	r3, r7, r0
 801e902:	49ab      	ldr	r1, [pc, #684]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801e904:	400a      	ands	r2, r1
 801e906:	801a      	strh	r2, [r3, #0]
 801e908:	687a      	ldr	r2, [r7, #4]
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	781b      	ldrb	r3, [r3, #0]
 801e90e:	009b      	lsls	r3, r3, #2
 801e910:	18d3      	adds	r3, r2, r3
 801e912:	183a      	adds	r2, r7, r0
 801e914:	8812      	ldrh	r2, [r2, #0]
 801e916:	49aa      	ldr	r1, [pc, #680]	@ (801ebc0 <USB_ActivateEndpoint+0x6b8>)
 801e918:	430a      	orrs	r2, r1
 801e91a:	b292      	uxth	r2, r2
 801e91c:	801a      	strh	r2, [r3, #0]
 801e91e:	e016      	b.n	801e94e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801e920:	687a      	ldr	r2, [r7, #4]
 801e922:	683b      	ldr	r3, [r7, #0]
 801e924:	781b      	ldrb	r3, [r3, #0]
 801e926:	009b      	lsls	r3, r3, #2
 801e928:	18d3      	adds	r3, r2, r3
 801e92a:	881b      	ldrh	r3, [r3, #0]
 801e92c:	b29a      	uxth	r2, r3
 801e92e:	2064      	movs	r0, #100	@ 0x64
 801e930:	183b      	adds	r3, r7, r0
 801e932:	49a4      	ldr	r1, [pc, #656]	@ (801ebc4 <USB_ActivateEndpoint+0x6bc>)
 801e934:	400a      	ands	r2, r1
 801e936:	801a      	strh	r2, [r3, #0]
 801e938:	687a      	ldr	r2, [r7, #4]
 801e93a:	683b      	ldr	r3, [r7, #0]
 801e93c:	781b      	ldrb	r3, [r3, #0]
 801e93e:	009b      	lsls	r3, r3, #2
 801e940:	18d3      	adds	r3, r2, r3
 801e942:	183a      	adds	r2, r7, r0
 801e944:	8812      	ldrh	r2, [r2, #0]
 801e946:	499d      	ldr	r1, [pc, #628]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801e948:	430a      	orrs	r2, r1
 801e94a:	b292      	uxth	r2, r2
 801e94c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	2250      	movs	r2, #80	@ 0x50
 801e956:	5a9b      	ldrh	r3, [r3, r2]
 801e958:	b29b      	uxth	r3, r3
 801e95a:	001a      	movs	r2, r3
 801e95c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e95e:	189b      	adds	r3, r3, r2
 801e960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e962:	683b      	ldr	r3, [r7, #0]
 801e964:	781b      	ldrb	r3, [r3, #0]
 801e966:	00da      	lsls	r2, r3, #3
 801e968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e96a:	18d3      	adds	r3, r2, r3
 801e96c:	2280      	movs	r2, #128	@ 0x80
 801e96e:	00d2      	lsls	r2, r2, #3
 801e970:	4694      	mov	ip, r2
 801e972:	4463      	add	r3, ip
 801e974:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e976:	683b      	ldr	r3, [r7, #0]
 801e978:	891b      	ldrh	r3, [r3, #8]
 801e97a:	085b      	lsrs	r3, r3, #1
 801e97c:	b29b      	uxth	r3, r3
 801e97e:	18db      	adds	r3, r3, r3
 801e980:	b29a      	uxth	r2, r3
 801e982:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e984:	801a      	strh	r2, [r3, #0]
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	657b      	str	r3, [r7, #84]	@ 0x54
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	2250      	movs	r2, #80	@ 0x50
 801e98e:	5a9b      	ldrh	r3, [r3, r2]
 801e990:	b29b      	uxth	r3, r3
 801e992:	001a      	movs	r2, r3
 801e994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e996:	189b      	adds	r3, r3, r2
 801e998:	657b      	str	r3, [r7, #84]	@ 0x54
 801e99a:	683b      	ldr	r3, [r7, #0]
 801e99c:	781b      	ldrb	r3, [r3, #0]
 801e99e:	00da      	lsls	r2, r3, #3
 801e9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e9a2:	18d3      	adds	r3, r2, r3
 801e9a4:	4a88      	ldr	r2, [pc, #544]	@ (801ebc8 <USB_ActivateEndpoint+0x6c0>)
 801e9a6:	4694      	mov	ip, r2
 801e9a8:	4463      	add	r3, ip
 801e9aa:	653b      	str	r3, [r7, #80]	@ 0x50
 801e9ac:	683b      	ldr	r3, [r7, #0]
 801e9ae:	895b      	ldrh	r3, [r3, #10]
 801e9b0:	085b      	lsrs	r3, r3, #1
 801e9b2:	b29b      	uxth	r3, r3
 801e9b4:	18db      	adds	r3, r3, r3
 801e9b6:	b29a      	uxth	r2, r3
 801e9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e9ba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801e9bc:	683b      	ldr	r3, [r7, #0]
 801e9be:	785b      	ldrb	r3, [r3, #1]
 801e9c0:	2b00      	cmp	r3, #0
 801e9c2:	d000      	beq.n	801e9c6 <USB_ActivateEndpoint+0x4be>
 801e9c4:	e087      	b.n	801ead6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801e9c6:	687a      	ldr	r2, [r7, #4]
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	781b      	ldrb	r3, [r3, #0]
 801e9cc:	009b      	lsls	r3, r3, #2
 801e9ce:	18d2      	adds	r2, r2, r3
 801e9d0:	2140      	movs	r1, #64	@ 0x40
 801e9d2:	187b      	adds	r3, r7, r1
 801e9d4:	8812      	ldrh	r2, [r2, #0]
 801e9d6:	801a      	strh	r2, [r3, #0]
 801e9d8:	187b      	adds	r3, r7, r1
 801e9da:	881a      	ldrh	r2, [r3, #0]
 801e9dc:	2380      	movs	r3, #128	@ 0x80
 801e9de:	01db      	lsls	r3, r3, #7
 801e9e0:	4013      	ands	r3, r2
 801e9e2:	d016      	beq.n	801ea12 <USB_ActivateEndpoint+0x50a>
 801e9e4:	687a      	ldr	r2, [r7, #4]
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	781b      	ldrb	r3, [r3, #0]
 801e9ea:	009b      	lsls	r3, r3, #2
 801e9ec:	18d3      	adds	r3, r2, r3
 801e9ee:	881b      	ldrh	r3, [r3, #0]
 801e9f0:	b29a      	uxth	r2, r3
 801e9f2:	203e      	movs	r0, #62	@ 0x3e
 801e9f4:	183b      	adds	r3, r7, r0
 801e9f6:	496e      	ldr	r1, [pc, #440]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801e9f8:	400a      	ands	r2, r1
 801e9fa:	801a      	strh	r2, [r3, #0]
 801e9fc:	687a      	ldr	r2, [r7, #4]
 801e9fe:	683b      	ldr	r3, [r7, #0]
 801ea00:	781b      	ldrb	r3, [r3, #0]
 801ea02:	009b      	lsls	r3, r3, #2
 801ea04:	18d3      	adds	r3, r2, r3
 801ea06:	183a      	adds	r2, r7, r0
 801ea08:	8812      	ldrh	r2, [r2, #0]
 801ea0a:	496a      	ldr	r1, [pc, #424]	@ (801ebb4 <USB_ActivateEndpoint+0x6ac>)
 801ea0c:	430a      	orrs	r2, r1
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ea12:	687a      	ldr	r2, [r7, #4]
 801ea14:	683b      	ldr	r3, [r7, #0]
 801ea16:	781b      	ldrb	r3, [r3, #0]
 801ea18:	009b      	lsls	r3, r3, #2
 801ea1a:	18d2      	adds	r2, r2, r3
 801ea1c:	213c      	movs	r1, #60	@ 0x3c
 801ea1e:	187b      	adds	r3, r7, r1
 801ea20:	8812      	ldrh	r2, [r2, #0]
 801ea22:	801a      	strh	r2, [r3, #0]
 801ea24:	187b      	adds	r3, r7, r1
 801ea26:	881b      	ldrh	r3, [r3, #0]
 801ea28:	2240      	movs	r2, #64	@ 0x40
 801ea2a:	4013      	ands	r3, r2
 801ea2c:	d016      	beq.n	801ea5c <USB_ActivateEndpoint+0x554>
 801ea2e:	687a      	ldr	r2, [r7, #4]
 801ea30:	683b      	ldr	r3, [r7, #0]
 801ea32:	781b      	ldrb	r3, [r3, #0]
 801ea34:	009b      	lsls	r3, r3, #2
 801ea36:	18d3      	adds	r3, r2, r3
 801ea38:	881b      	ldrh	r3, [r3, #0]
 801ea3a:	b29a      	uxth	r2, r3
 801ea3c:	203a      	movs	r0, #58	@ 0x3a
 801ea3e:	183b      	adds	r3, r7, r0
 801ea40:	495b      	ldr	r1, [pc, #364]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801ea42:	400a      	ands	r2, r1
 801ea44:	801a      	strh	r2, [r3, #0]
 801ea46:	687a      	ldr	r2, [r7, #4]
 801ea48:	683b      	ldr	r3, [r7, #0]
 801ea4a:	781b      	ldrb	r3, [r3, #0]
 801ea4c:	009b      	lsls	r3, r3, #2
 801ea4e:	18d3      	adds	r3, r2, r3
 801ea50:	183a      	adds	r2, r7, r0
 801ea52:	8812      	ldrh	r2, [r2, #0]
 801ea54:	495d      	ldr	r1, [pc, #372]	@ (801ebcc <USB_ActivateEndpoint+0x6c4>)
 801ea56:	430a      	orrs	r2, r1
 801ea58:	b292      	uxth	r2, r2
 801ea5a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801ea5c:	687a      	ldr	r2, [r7, #4]
 801ea5e:	683b      	ldr	r3, [r7, #0]
 801ea60:	781b      	ldrb	r3, [r3, #0]
 801ea62:	009b      	lsls	r3, r3, #2
 801ea64:	18d3      	adds	r3, r2, r3
 801ea66:	881b      	ldrh	r3, [r3, #0]
 801ea68:	b29a      	uxth	r2, r3
 801ea6a:	2038      	movs	r0, #56	@ 0x38
 801ea6c:	183b      	adds	r3, r7, r0
 801ea6e:	4952      	ldr	r1, [pc, #328]	@ (801ebb8 <USB_ActivateEndpoint+0x6b0>)
 801ea70:	400a      	ands	r2, r1
 801ea72:	801a      	strh	r2, [r3, #0]
 801ea74:	183b      	adds	r3, r7, r0
 801ea76:	183a      	adds	r2, r7, r0
 801ea78:	8812      	ldrh	r2, [r2, #0]
 801ea7a:	2180      	movs	r1, #128	@ 0x80
 801ea7c:	0149      	lsls	r1, r1, #5
 801ea7e:	404a      	eors	r2, r1
 801ea80:	801a      	strh	r2, [r3, #0]
 801ea82:	183b      	adds	r3, r7, r0
 801ea84:	183a      	adds	r2, r7, r0
 801ea86:	8812      	ldrh	r2, [r2, #0]
 801ea88:	2180      	movs	r1, #128	@ 0x80
 801ea8a:	0189      	lsls	r1, r1, #6
 801ea8c:	404a      	eors	r2, r1
 801ea8e:	801a      	strh	r2, [r3, #0]
 801ea90:	687a      	ldr	r2, [r7, #4]
 801ea92:	683b      	ldr	r3, [r7, #0]
 801ea94:	781b      	ldrb	r3, [r3, #0]
 801ea96:	009b      	lsls	r3, r3, #2
 801ea98:	18d3      	adds	r3, r2, r3
 801ea9a:	183a      	adds	r2, r7, r0
 801ea9c:	8812      	ldrh	r2, [r2, #0]
 801ea9e:	4947      	ldr	r1, [pc, #284]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801eaa0:	430a      	orrs	r2, r1
 801eaa2:	b292      	uxth	r2, r2
 801eaa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801eaa6:	687a      	ldr	r2, [r7, #4]
 801eaa8:	683b      	ldr	r3, [r7, #0]
 801eaaa:	781b      	ldrb	r3, [r3, #0]
 801eaac:	009b      	lsls	r3, r3, #2
 801eaae:	18d3      	adds	r3, r2, r3
 801eab0:	881b      	ldrh	r3, [r3, #0]
 801eab2:	b29a      	uxth	r2, r3
 801eab4:	2036      	movs	r0, #54	@ 0x36
 801eab6:	183b      	adds	r3, r7, r0
 801eab8:	4945      	ldr	r1, [pc, #276]	@ (801ebd0 <USB_ActivateEndpoint+0x6c8>)
 801eaba:	400a      	ands	r2, r1
 801eabc:	801a      	strh	r2, [r3, #0]
 801eabe:	687a      	ldr	r2, [r7, #4]
 801eac0:	683b      	ldr	r3, [r7, #0]
 801eac2:	781b      	ldrb	r3, [r3, #0]
 801eac4:	009b      	lsls	r3, r3, #2
 801eac6:	18d3      	adds	r3, r2, r3
 801eac8:	183a      	adds	r2, r7, r0
 801eaca:	8812      	ldrh	r2, [r2, #0]
 801eacc:	493b      	ldr	r1, [pc, #236]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801eace:	430a      	orrs	r2, r1
 801ead0:	b292      	uxth	r2, r2
 801ead2:	801a      	strh	r2, [r3, #0]
 801ead4:	e0ac      	b.n	801ec30 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ead6:	687a      	ldr	r2, [r7, #4]
 801ead8:	683b      	ldr	r3, [r7, #0]
 801eada:	781b      	ldrb	r3, [r3, #0]
 801eadc:	009b      	lsls	r3, r3, #2
 801eade:	18d2      	adds	r2, r2, r3
 801eae0:	214e      	movs	r1, #78	@ 0x4e
 801eae2:	187b      	adds	r3, r7, r1
 801eae4:	8812      	ldrh	r2, [r2, #0]
 801eae6:	801a      	strh	r2, [r3, #0]
 801eae8:	187b      	adds	r3, r7, r1
 801eaea:	881a      	ldrh	r2, [r3, #0]
 801eaec:	2380      	movs	r3, #128	@ 0x80
 801eaee:	01db      	lsls	r3, r3, #7
 801eaf0:	4013      	ands	r3, r2
 801eaf2:	d016      	beq.n	801eb22 <USB_ActivateEndpoint+0x61a>
 801eaf4:	687a      	ldr	r2, [r7, #4]
 801eaf6:	683b      	ldr	r3, [r7, #0]
 801eaf8:	781b      	ldrb	r3, [r3, #0]
 801eafa:	009b      	lsls	r3, r3, #2
 801eafc:	18d3      	adds	r3, r2, r3
 801eafe:	881b      	ldrh	r3, [r3, #0]
 801eb00:	b29a      	uxth	r2, r3
 801eb02:	204c      	movs	r0, #76	@ 0x4c
 801eb04:	183b      	adds	r3, r7, r0
 801eb06:	492a      	ldr	r1, [pc, #168]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801eb08:	400a      	ands	r2, r1
 801eb0a:	801a      	strh	r2, [r3, #0]
 801eb0c:	687a      	ldr	r2, [r7, #4]
 801eb0e:	683b      	ldr	r3, [r7, #0]
 801eb10:	781b      	ldrb	r3, [r3, #0]
 801eb12:	009b      	lsls	r3, r3, #2
 801eb14:	18d3      	adds	r3, r2, r3
 801eb16:	183a      	adds	r2, r7, r0
 801eb18:	8812      	ldrh	r2, [r2, #0]
 801eb1a:	4926      	ldr	r1, [pc, #152]	@ (801ebb4 <USB_ActivateEndpoint+0x6ac>)
 801eb1c:	430a      	orrs	r2, r1
 801eb1e:	b292      	uxth	r2, r2
 801eb20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801eb22:	687a      	ldr	r2, [r7, #4]
 801eb24:	683b      	ldr	r3, [r7, #0]
 801eb26:	781b      	ldrb	r3, [r3, #0]
 801eb28:	009b      	lsls	r3, r3, #2
 801eb2a:	18d2      	adds	r2, r2, r3
 801eb2c:	214a      	movs	r1, #74	@ 0x4a
 801eb2e:	187b      	adds	r3, r7, r1
 801eb30:	8812      	ldrh	r2, [r2, #0]
 801eb32:	801a      	strh	r2, [r3, #0]
 801eb34:	187b      	adds	r3, r7, r1
 801eb36:	881b      	ldrh	r3, [r3, #0]
 801eb38:	2240      	movs	r2, #64	@ 0x40
 801eb3a:	4013      	ands	r3, r2
 801eb3c:	d016      	beq.n	801eb6c <USB_ActivateEndpoint+0x664>
 801eb3e:	687a      	ldr	r2, [r7, #4]
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	781b      	ldrb	r3, [r3, #0]
 801eb44:	009b      	lsls	r3, r3, #2
 801eb46:	18d3      	adds	r3, r2, r3
 801eb48:	881b      	ldrh	r3, [r3, #0]
 801eb4a:	b29a      	uxth	r2, r3
 801eb4c:	2048      	movs	r0, #72	@ 0x48
 801eb4e:	183b      	adds	r3, r7, r0
 801eb50:	4917      	ldr	r1, [pc, #92]	@ (801ebb0 <USB_ActivateEndpoint+0x6a8>)
 801eb52:	400a      	ands	r2, r1
 801eb54:	801a      	strh	r2, [r3, #0]
 801eb56:	687a      	ldr	r2, [r7, #4]
 801eb58:	683b      	ldr	r3, [r7, #0]
 801eb5a:	781b      	ldrb	r3, [r3, #0]
 801eb5c:	009b      	lsls	r3, r3, #2
 801eb5e:	18d3      	adds	r3, r2, r3
 801eb60:	183a      	adds	r2, r7, r0
 801eb62:	8812      	ldrh	r2, [r2, #0]
 801eb64:	4919      	ldr	r1, [pc, #100]	@ (801ebcc <USB_ActivateEndpoint+0x6c4>)
 801eb66:	430a      	orrs	r2, r1
 801eb68:	b292      	uxth	r2, r2
 801eb6a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801eb6c:	683b      	ldr	r3, [r7, #0]
 801eb6e:	78db      	ldrb	r3, [r3, #3]
 801eb70:	2b01      	cmp	r3, #1
 801eb72:	d02f      	beq.n	801ebd4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801eb74:	687a      	ldr	r2, [r7, #4]
 801eb76:	683b      	ldr	r3, [r7, #0]
 801eb78:	781b      	ldrb	r3, [r3, #0]
 801eb7a:	009b      	lsls	r3, r3, #2
 801eb7c:	18d3      	adds	r3, r2, r3
 801eb7e:	881b      	ldrh	r3, [r3, #0]
 801eb80:	b29a      	uxth	r2, r3
 801eb82:	2044      	movs	r0, #68	@ 0x44
 801eb84:	183b      	adds	r3, r7, r0
 801eb86:	4912      	ldr	r1, [pc, #72]	@ (801ebd0 <USB_ActivateEndpoint+0x6c8>)
 801eb88:	400a      	ands	r2, r1
 801eb8a:	801a      	strh	r2, [r3, #0]
 801eb8c:	183b      	adds	r3, r7, r0
 801eb8e:	183a      	adds	r2, r7, r0
 801eb90:	8812      	ldrh	r2, [r2, #0]
 801eb92:	2120      	movs	r1, #32
 801eb94:	404a      	eors	r2, r1
 801eb96:	801a      	strh	r2, [r3, #0]
 801eb98:	687a      	ldr	r2, [r7, #4]
 801eb9a:	683b      	ldr	r3, [r7, #0]
 801eb9c:	781b      	ldrb	r3, [r3, #0]
 801eb9e:	009b      	lsls	r3, r3, #2
 801eba0:	18d3      	adds	r3, r2, r3
 801eba2:	183a      	adds	r2, r7, r0
 801eba4:	8812      	ldrh	r2, [r2, #0]
 801eba6:	4905      	ldr	r1, [pc, #20]	@ (801ebbc <USB_ActivateEndpoint+0x6b4>)
 801eba8:	430a      	orrs	r2, r1
 801ebaa:	b292      	uxth	r2, r2
 801ebac:	801a      	strh	r2, [r3, #0]
 801ebae:	e028      	b.n	801ec02 <USB_ActivateEndpoint+0x6fa>
 801ebb0:	ffff8f8f 	.word	0xffff8f8f
 801ebb4:	ffffc080 	.word	0xffffc080
 801ebb8:	ffffbf8f 	.word	0xffffbf8f
 801ebbc:	ffff8080 	.word	0xffff8080
 801ebc0:	ffff8180 	.word	0xffff8180
 801ebc4:	ffff8e8f 	.word	0xffff8e8f
 801ebc8:	00000404 	.word	0x00000404
 801ebcc:	ffff80c0 	.word	0xffff80c0
 801ebd0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ebd4:	687a      	ldr	r2, [r7, #4]
 801ebd6:	683b      	ldr	r3, [r7, #0]
 801ebd8:	781b      	ldrb	r3, [r3, #0]
 801ebda:	009b      	lsls	r3, r3, #2
 801ebdc:	18d3      	adds	r3, r2, r3
 801ebde:	881b      	ldrh	r3, [r3, #0]
 801ebe0:	b29a      	uxth	r2, r3
 801ebe2:	2046      	movs	r0, #70	@ 0x46
 801ebe4:	183b      	adds	r3, r7, r0
 801ebe6:	4916      	ldr	r1, [pc, #88]	@ (801ec40 <USB_ActivateEndpoint+0x738>)
 801ebe8:	400a      	ands	r2, r1
 801ebea:	801a      	strh	r2, [r3, #0]
 801ebec:	687a      	ldr	r2, [r7, #4]
 801ebee:	683b      	ldr	r3, [r7, #0]
 801ebf0:	781b      	ldrb	r3, [r3, #0]
 801ebf2:	009b      	lsls	r3, r3, #2
 801ebf4:	18d3      	adds	r3, r2, r3
 801ebf6:	183a      	adds	r2, r7, r0
 801ebf8:	8812      	ldrh	r2, [r2, #0]
 801ebfa:	4912      	ldr	r1, [pc, #72]	@ (801ec44 <USB_ActivateEndpoint+0x73c>)
 801ebfc:	430a      	orrs	r2, r1
 801ebfe:	b292      	uxth	r2, r2
 801ec00:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ec02:	687a      	ldr	r2, [r7, #4]
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	781b      	ldrb	r3, [r3, #0]
 801ec08:	009b      	lsls	r3, r3, #2
 801ec0a:	18d3      	adds	r3, r2, r3
 801ec0c:	881b      	ldrh	r3, [r3, #0]
 801ec0e:	b29a      	uxth	r2, r3
 801ec10:	2042      	movs	r0, #66	@ 0x42
 801ec12:	183b      	adds	r3, r7, r0
 801ec14:	490c      	ldr	r1, [pc, #48]	@ (801ec48 <USB_ActivateEndpoint+0x740>)
 801ec16:	400a      	ands	r2, r1
 801ec18:	801a      	strh	r2, [r3, #0]
 801ec1a:	687a      	ldr	r2, [r7, #4]
 801ec1c:	683b      	ldr	r3, [r7, #0]
 801ec1e:	781b      	ldrb	r3, [r3, #0]
 801ec20:	009b      	lsls	r3, r3, #2
 801ec22:	18d3      	adds	r3, r2, r3
 801ec24:	183a      	adds	r2, r7, r0
 801ec26:	8812      	ldrh	r2, [r2, #0]
 801ec28:	4906      	ldr	r1, [pc, #24]	@ (801ec44 <USB_ActivateEndpoint+0x73c>)
 801ec2a:	430a      	orrs	r2, r1
 801ec2c:	b292      	uxth	r2, r2
 801ec2e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801ec30:	236f      	movs	r3, #111	@ 0x6f
 801ec32:	18fb      	adds	r3, r7, r3
 801ec34:	781b      	ldrb	r3, [r3, #0]
}
 801ec36:	0018      	movs	r0, r3
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	b01c      	add	sp, #112	@ 0x70
 801ec3c:	bd80      	pop	{r7, pc}
 801ec3e:	46c0      	nop			@ (mov r8, r8)
 801ec40:	ffff8fbf 	.word	0xffff8fbf
 801ec44:	ffff8080 	.word	0xffff8080
 801ec48:	ffffbf8f 	.word	0xffffbf8f

0801ec4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ec4c:	b580      	push	{r7, lr}
 801ec4e:	b08c      	sub	sp, #48	@ 0x30
 801ec50:	af00      	add	r7, sp, #0
 801ec52:	6078      	str	r0, [r7, #4]
 801ec54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	7b1b      	ldrb	r3, [r3, #12]
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	d000      	beq.n	801ec60 <USB_DeactivateEndpoint+0x14>
 801ec5e:	e07e      	b.n	801ed5e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801ec60:	683b      	ldr	r3, [r7, #0]
 801ec62:	785b      	ldrb	r3, [r3, #1]
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d03c      	beq.n	801ece2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801ec68:	687a      	ldr	r2, [r7, #4]
 801ec6a:	683b      	ldr	r3, [r7, #0]
 801ec6c:	781b      	ldrb	r3, [r3, #0]
 801ec6e:	009b      	lsls	r3, r3, #2
 801ec70:	18d2      	adds	r2, r2, r3
 801ec72:	210c      	movs	r1, #12
 801ec74:	187b      	adds	r3, r7, r1
 801ec76:	8812      	ldrh	r2, [r2, #0]
 801ec78:	801a      	strh	r2, [r3, #0]
 801ec7a:	187b      	adds	r3, r7, r1
 801ec7c:	881b      	ldrh	r3, [r3, #0]
 801ec7e:	2240      	movs	r2, #64	@ 0x40
 801ec80:	4013      	ands	r3, r2
 801ec82:	d016      	beq.n	801ecb2 <USB_DeactivateEndpoint+0x66>
 801ec84:	687a      	ldr	r2, [r7, #4]
 801ec86:	683b      	ldr	r3, [r7, #0]
 801ec88:	781b      	ldrb	r3, [r3, #0]
 801ec8a:	009b      	lsls	r3, r3, #2
 801ec8c:	18d3      	adds	r3, r2, r3
 801ec8e:	881b      	ldrh	r3, [r3, #0]
 801ec90:	b29a      	uxth	r2, r3
 801ec92:	200a      	movs	r0, #10
 801ec94:	183b      	adds	r3, r7, r0
 801ec96:	49c7      	ldr	r1, [pc, #796]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ec98:	400a      	ands	r2, r1
 801ec9a:	801a      	strh	r2, [r3, #0]
 801ec9c:	687a      	ldr	r2, [r7, #4]
 801ec9e:	683b      	ldr	r3, [r7, #0]
 801eca0:	781b      	ldrb	r3, [r3, #0]
 801eca2:	009b      	lsls	r3, r3, #2
 801eca4:	18d3      	adds	r3, r2, r3
 801eca6:	183a      	adds	r2, r7, r0
 801eca8:	8812      	ldrh	r2, [r2, #0]
 801ecaa:	49c3      	ldr	r1, [pc, #780]	@ (801efb8 <USB_DeactivateEndpoint+0x36c>)
 801ecac:	430a      	orrs	r2, r1
 801ecae:	b292      	uxth	r2, r2
 801ecb0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ecb2:	687a      	ldr	r2, [r7, #4]
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	781b      	ldrb	r3, [r3, #0]
 801ecb8:	009b      	lsls	r3, r3, #2
 801ecba:	18d3      	adds	r3, r2, r3
 801ecbc:	881b      	ldrh	r3, [r3, #0]
 801ecbe:	b29a      	uxth	r2, r3
 801ecc0:	2008      	movs	r0, #8
 801ecc2:	183b      	adds	r3, r7, r0
 801ecc4:	49bd      	ldr	r1, [pc, #756]	@ (801efbc <USB_DeactivateEndpoint+0x370>)
 801ecc6:	400a      	ands	r2, r1
 801ecc8:	801a      	strh	r2, [r3, #0]
 801ecca:	687a      	ldr	r2, [r7, #4]
 801eccc:	683b      	ldr	r3, [r7, #0]
 801ecce:	781b      	ldrb	r3, [r3, #0]
 801ecd0:	009b      	lsls	r3, r3, #2
 801ecd2:	18d3      	adds	r3, r2, r3
 801ecd4:	183a      	adds	r2, r7, r0
 801ecd6:	8812      	ldrh	r2, [r2, #0]
 801ecd8:	49b9      	ldr	r1, [pc, #740]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801ecda:	430a      	orrs	r2, r1
 801ecdc:	b292      	uxth	r2, r2
 801ecde:	801a      	strh	r2, [r3, #0]
 801ece0:	e163      	b.n	801efaa <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ece2:	687a      	ldr	r2, [r7, #4]
 801ece4:	683b      	ldr	r3, [r7, #0]
 801ece6:	781b      	ldrb	r3, [r3, #0]
 801ece8:	009b      	lsls	r3, r3, #2
 801ecea:	18d2      	adds	r2, r2, r3
 801ecec:	2112      	movs	r1, #18
 801ecee:	187b      	adds	r3, r7, r1
 801ecf0:	8812      	ldrh	r2, [r2, #0]
 801ecf2:	801a      	strh	r2, [r3, #0]
 801ecf4:	187b      	adds	r3, r7, r1
 801ecf6:	881a      	ldrh	r2, [r3, #0]
 801ecf8:	2380      	movs	r3, #128	@ 0x80
 801ecfa:	01db      	lsls	r3, r3, #7
 801ecfc:	4013      	ands	r3, r2
 801ecfe:	d016      	beq.n	801ed2e <USB_DeactivateEndpoint+0xe2>
 801ed00:	687a      	ldr	r2, [r7, #4]
 801ed02:	683b      	ldr	r3, [r7, #0]
 801ed04:	781b      	ldrb	r3, [r3, #0]
 801ed06:	009b      	lsls	r3, r3, #2
 801ed08:	18d3      	adds	r3, r2, r3
 801ed0a:	881b      	ldrh	r3, [r3, #0]
 801ed0c:	b29a      	uxth	r2, r3
 801ed0e:	2010      	movs	r0, #16
 801ed10:	183b      	adds	r3, r7, r0
 801ed12:	49a8      	ldr	r1, [pc, #672]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ed14:	400a      	ands	r2, r1
 801ed16:	801a      	strh	r2, [r3, #0]
 801ed18:	687a      	ldr	r2, [r7, #4]
 801ed1a:	683b      	ldr	r3, [r7, #0]
 801ed1c:	781b      	ldrb	r3, [r3, #0]
 801ed1e:	009b      	lsls	r3, r3, #2
 801ed20:	18d3      	adds	r3, r2, r3
 801ed22:	183a      	adds	r2, r7, r0
 801ed24:	8812      	ldrh	r2, [r2, #0]
 801ed26:	49a7      	ldr	r1, [pc, #668]	@ (801efc4 <USB_DeactivateEndpoint+0x378>)
 801ed28:	430a      	orrs	r2, r1
 801ed2a:	b292      	uxth	r2, r2
 801ed2c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ed2e:	687a      	ldr	r2, [r7, #4]
 801ed30:	683b      	ldr	r3, [r7, #0]
 801ed32:	781b      	ldrb	r3, [r3, #0]
 801ed34:	009b      	lsls	r3, r3, #2
 801ed36:	18d3      	adds	r3, r2, r3
 801ed38:	881b      	ldrh	r3, [r3, #0]
 801ed3a:	b29a      	uxth	r2, r3
 801ed3c:	200e      	movs	r0, #14
 801ed3e:	183b      	adds	r3, r7, r0
 801ed40:	49a1      	ldr	r1, [pc, #644]	@ (801efc8 <USB_DeactivateEndpoint+0x37c>)
 801ed42:	400a      	ands	r2, r1
 801ed44:	801a      	strh	r2, [r3, #0]
 801ed46:	687a      	ldr	r2, [r7, #4]
 801ed48:	683b      	ldr	r3, [r7, #0]
 801ed4a:	781b      	ldrb	r3, [r3, #0]
 801ed4c:	009b      	lsls	r3, r3, #2
 801ed4e:	18d3      	adds	r3, r2, r3
 801ed50:	183a      	adds	r2, r7, r0
 801ed52:	8812      	ldrh	r2, [r2, #0]
 801ed54:	499a      	ldr	r1, [pc, #616]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801ed56:	430a      	orrs	r2, r1
 801ed58:	b292      	uxth	r2, r2
 801ed5a:	801a      	strh	r2, [r3, #0]
 801ed5c:	e125      	b.n	801efaa <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801ed5e:	683b      	ldr	r3, [r7, #0]
 801ed60:	785b      	ldrb	r3, [r3, #1]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d000      	beq.n	801ed68 <USB_DeactivateEndpoint+0x11c>
 801ed66:	e090      	b.n	801ee8a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ed68:	687a      	ldr	r2, [r7, #4]
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	781b      	ldrb	r3, [r3, #0]
 801ed6e:	009b      	lsls	r3, r3, #2
 801ed70:	18d2      	adds	r2, r2, r3
 801ed72:	2120      	movs	r1, #32
 801ed74:	187b      	adds	r3, r7, r1
 801ed76:	8812      	ldrh	r2, [r2, #0]
 801ed78:	801a      	strh	r2, [r3, #0]
 801ed7a:	187b      	adds	r3, r7, r1
 801ed7c:	881a      	ldrh	r2, [r3, #0]
 801ed7e:	2380      	movs	r3, #128	@ 0x80
 801ed80:	01db      	lsls	r3, r3, #7
 801ed82:	4013      	ands	r3, r2
 801ed84:	d016      	beq.n	801edb4 <USB_DeactivateEndpoint+0x168>
 801ed86:	687a      	ldr	r2, [r7, #4]
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	781b      	ldrb	r3, [r3, #0]
 801ed8c:	009b      	lsls	r3, r3, #2
 801ed8e:	18d3      	adds	r3, r2, r3
 801ed90:	881b      	ldrh	r3, [r3, #0]
 801ed92:	b29a      	uxth	r2, r3
 801ed94:	201e      	movs	r0, #30
 801ed96:	183b      	adds	r3, r7, r0
 801ed98:	4986      	ldr	r1, [pc, #536]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ed9a:	400a      	ands	r2, r1
 801ed9c:	801a      	strh	r2, [r3, #0]
 801ed9e:	687a      	ldr	r2, [r7, #4]
 801eda0:	683b      	ldr	r3, [r7, #0]
 801eda2:	781b      	ldrb	r3, [r3, #0]
 801eda4:	009b      	lsls	r3, r3, #2
 801eda6:	18d3      	adds	r3, r2, r3
 801eda8:	183a      	adds	r2, r7, r0
 801edaa:	8812      	ldrh	r2, [r2, #0]
 801edac:	4985      	ldr	r1, [pc, #532]	@ (801efc4 <USB_DeactivateEndpoint+0x378>)
 801edae:	430a      	orrs	r2, r1
 801edb0:	b292      	uxth	r2, r2
 801edb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801edb4:	687a      	ldr	r2, [r7, #4]
 801edb6:	683b      	ldr	r3, [r7, #0]
 801edb8:	781b      	ldrb	r3, [r3, #0]
 801edba:	009b      	lsls	r3, r3, #2
 801edbc:	18d2      	adds	r2, r2, r3
 801edbe:	211c      	movs	r1, #28
 801edc0:	187b      	adds	r3, r7, r1
 801edc2:	8812      	ldrh	r2, [r2, #0]
 801edc4:	801a      	strh	r2, [r3, #0]
 801edc6:	187b      	adds	r3, r7, r1
 801edc8:	881b      	ldrh	r3, [r3, #0]
 801edca:	2240      	movs	r2, #64	@ 0x40
 801edcc:	4013      	ands	r3, r2
 801edce:	d016      	beq.n	801edfe <USB_DeactivateEndpoint+0x1b2>
 801edd0:	687a      	ldr	r2, [r7, #4]
 801edd2:	683b      	ldr	r3, [r7, #0]
 801edd4:	781b      	ldrb	r3, [r3, #0]
 801edd6:	009b      	lsls	r3, r3, #2
 801edd8:	18d3      	adds	r3, r2, r3
 801edda:	881b      	ldrh	r3, [r3, #0]
 801eddc:	b29a      	uxth	r2, r3
 801edde:	201a      	movs	r0, #26
 801ede0:	183b      	adds	r3, r7, r0
 801ede2:	4974      	ldr	r1, [pc, #464]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ede4:	400a      	ands	r2, r1
 801ede6:	801a      	strh	r2, [r3, #0]
 801ede8:	687a      	ldr	r2, [r7, #4]
 801edea:	683b      	ldr	r3, [r7, #0]
 801edec:	781b      	ldrb	r3, [r3, #0]
 801edee:	009b      	lsls	r3, r3, #2
 801edf0:	18d3      	adds	r3, r2, r3
 801edf2:	183a      	adds	r2, r7, r0
 801edf4:	8812      	ldrh	r2, [r2, #0]
 801edf6:	4970      	ldr	r1, [pc, #448]	@ (801efb8 <USB_DeactivateEndpoint+0x36c>)
 801edf8:	430a      	orrs	r2, r1
 801edfa:	b292      	uxth	r2, r2
 801edfc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801edfe:	687a      	ldr	r2, [r7, #4]
 801ee00:	683b      	ldr	r3, [r7, #0]
 801ee02:	781b      	ldrb	r3, [r3, #0]
 801ee04:	009b      	lsls	r3, r3, #2
 801ee06:	18d3      	adds	r3, r2, r3
 801ee08:	881b      	ldrh	r3, [r3, #0]
 801ee0a:	b29a      	uxth	r2, r3
 801ee0c:	2018      	movs	r0, #24
 801ee0e:	183b      	adds	r3, r7, r0
 801ee10:	4968      	ldr	r1, [pc, #416]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ee12:	400a      	ands	r2, r1
 801ee14:	801a      	strh	r2, [r3, #0]
 801ee16:	687a      	ldr	r2, [r7, #4]
 801ee18:	683b      	ldr	r3, [r7, #0]
 801ee1a:	781b      	ldrb	r3, [r3, #0]
 801ee1c:	009b      	lsls	r3, r3, #2
 801ee1e:	18d3      	adds	r3, r2, r3
 801ee20:	183a      	adds	r2, r7, r0
 801ee22:	8812      	ldrh	r2, [r2, #0]
 801ee24:	4964      	ldr	r1, [pc, #400]	@ (801efb8 <USB_DeactivateEndpoint+0x36c>)
 801ee26:	430a      	orrs	r2, r1
 801ee28:	b292      	uxth	r2, r2
 801ee2a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ee2c:	687a      	ldr	r2, [r7, #4]
 801ee2e:	683b      	ldr	r3, [r7, #0]
 801ee30:	781b      	ldrb	r3, [r3, #0]
 801ee32:	009b      	lsls	r3, r3, #2
 801ee34:	18d3      	adds	r3, r2, r3
 801ee36:	881b      	ldrh	r3, [r3, #0]
 801ee38:	b29a      	uxth	r2, r3
 801ee3a:	2016      	movs	r0, #22
 801ee3c:	183b      	adds	r3, r7, r0
 801ee3e:	4962      	ldr	r1, [pc, #392]	@ (801efc8 <USB_DeactivateEndpoint+0x37c>)
 801ee40:	400a      	ands	r2, r1
 801ee42:	801a      	strh	r2, [r3, #0]
 801ee44:	687a      	ldr	r2, [r7, #4]
 801ee46:	683b      	ldr	r3, [r7, #0]
 801ee48:	781b      	ldrb	r3, [r3, #0]
 801ee4a:	009b      	lsls	r3, r3, #2
 801ee4c:	18d3      	adds	r3, r2, r3
 801ee4e:	183a      	adds	r2, r7, r0
 801ee50:	8812      	ldrh	r2, [r2, #0]
 801ee52:	495b      	ldr	r1, [pc, #364]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801ee54:	430a      	orrs	r2, r1
 801ee56:	b292      	uxth	r2, r2
 801ee58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ee5a:	687a      	ldr	r2, [r7, #4]
 801ee5c:	683b      	ldr	r3, [r7, #0]
 801ee5e:	781b      	ldrb	r3, [r3, #0]
 801ee60:	009b      	lsls	r3, r3, #2
 801ee62:	18d3      	adds	r3, r2, r3
 801ee64:	881b      	ldrh	r3, [r3, #0]
 801ee66:	b29a      	uxth	r2, r3
 801ee68:	2014      	movs	r0, #20
 801ee6a:	183b      	adds	r3, r7, r0
 801ee6c:	4953      	ldr	r1, [pc, #332]	@ (801efbc <USB_DeactivateEndpoint+0x370>)
 801ee6e:	400a      	ands	r2, r1
 801ee70:	801a      	strh	r2, [r3, #0]
 801ee72:	687a      	ldr	r2, [r7, #4]
 801ee74:	683b      	ldr	r3, [r7, #0]
 801ee76:	781b      	ldrb	r3, [r3, #0]
 801ee78:	009b      	lsls	r3, r3, #2
 801ee7a:	18d3      	adds	r3, r2, r3
 801ee7c:	183a      	adds	r2, r7, r0
 801ee7e:	8812      	ldrh	r2, [r2, #0]
 801ee80:	494f      	ldr	r1, [pc, #316]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801ee82:	430a      	orrs	r2, r1
 801ee84:	b292      	uxth	r2, r2
 801ee86:	801a      	strh	r2, [r3, #0]
 801ee88:	e08f      	b.n	801efaa <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ee8a:	687a      	ldr	r2, [r7, #4]
 801ee8c:	683b      	ldr	r3, [r7, #0]
 801ee8e:	781b      	ldrb	r3, [r3, #0]
 801ee90:	009b      	lsls	r3, r3, #2
 801ee92:	18d2      	adds	r2, r2, r3
 801ee94:	212e      	movs	r1, #46	@ 0x2e
 801ee96:	187b      	adds	r3, r7, r1
 801ee98:	8812      	ldrh	r2, [r2, #0]
 801ee9a:	801a      	strh	r2, [r3, #0]
 801ee9c:	187b      	adds	r3, r7, r1
 801ee9e:	881a      	ldrh	r2, [r3, #0]
 801eea0:	2380      	movs	r3, #128	@ 0x80
 801eea2:	01db      	lsls	r3, r3, #7
 801eea4:	4013      	ands	r3, r2
 801eea6:	d016      	beq.n	801eed6 <USB_DeactivateEndpoint+0x28a>
 801eea8:	687a      	ldr	r2, [r7, #4]
 801eeaa:	683b      	ldr	r3, [r7, #0]
 801eeac:	781b      	ldrb	r3, [r3, #0]
 801eeae:	009b      	lsls	r3, r3, #2
 801eeb0:	18d3      	adds	r3, r2, r3
 801eeb2:	881b      	ldrh	r3, [r3, #0]
 801eeb4:	b29a      	uxth	r2, r3
 801eeb6:	202c      	movs	r0, #44	@ 0x2c
 801eeb8:	183b      	adds	r3, r7, r0
 801eeba:	493e      	ldr	r1, [pc, #248]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801eebc:	400a      	ands	r2, r1
 801eebe:	801a      	strh	r2, [r3, #0]
 801eec0:	687a      	ldr	r2, [r7, #4]
 801eec2:	683b      	ldr	r3, [r7, #0]
 801eec4:	781b      	ldrb	r3, [r3, #0]
 801eec6:	009b      	lsls	r3, r3, #2
 801eec8:	18d3      	adds	r3, r2, r3
 801eeca:	183a      	adds	r2, r7, r0
 801eecc:	8812      	ldrh	r2, [r2, #0]
 801eece:	493d      	ldr	r1, [pc, #244]	@ (801efc4 <USB_DeactivateEndpoint+0x378>)
 801eed0:	430a      	orrs	r2, r1
 801eed2:	b292      	uxth	r2, r2
 801eed4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801eed6:	687a      	ldr	r2, [r7, #4]
 801eed8:	683b      	ldr	r3, [r7, #0]
 801eeda:	781b      	ldrb	r3, [r3, #0]
 801eedc:	009b      	lsls	r3, r3, #2
 801eede:	18d2      	adds	r2, r2, r3
 801eee0:	212a      	movs	r1, #42	@ 0x2a
 801eee2:	187b      	adds	r3, r7, r1
 801eee4:	8812      	ldrh	r2, [r2, #0]
 801eee6:	801a      	strh	r2, [r3, #0]
 801eee8:	187b      	adds	r3, r7, r1
 801eeea:	881b      	ldrh	r3, [r3, #0]
 801eeec:	2240      	movs	r2, #64	@ 0x40
 801eeee:	4013      	ands	r3, r2
 801eef0:	d016      	beq.n	801ef20 <USB_DeactivateEndpoint+0x2d4>
 801eef2:	687a      	ldr	r2, [r7, #4]
 801eef4:	683b      	ldr	r3, [r7, #0]
 801eef6:	781b      	ldrb	r3, [r3, #0]
 801eef8:	009b      	lsls	r3, r3, #2
 801eefa:	18d3      	adds	r3, r2, r3
 801eefc:	881b      	ldrh	r3, [r3, #0]
 801eefe:	b29a      	uxth	r2, r3
 801ef00:	2028      	movs	r0, #40	@ 0x28
 801ef02:	183b      	adds	r3, r7, r0
 801ef04:	492b      	ldr	r1, [pc, #172]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ef06:	400a      	ands	r2, r1
 801ef08:	801a      	strh	r2, [r3, #0]
 801ef0a:	687a      	ldr	r2, [r7, #4]
 801ef0c:	683b      	ldr	r3, [r7, #0]
 801ef0e:	781b      	ldrb	r3, [r3, #0]
 801ef10:	009b      	lsls	r3, r3, #2
 801ef12:	18d3      	adds	r3, r2, r3
 801ef14:	183a      	adds	r2, r7, r0
 801ef16:	8812      	ldrh	r2, [r2, #0]
 801ef18:	4927      	ldr	r1, [pc, #156]	@ (801efb8 <USB_DeactivateEndpoint+0x36c>)
 801ef1a:	430a      	orrs	r2, r1
 801ef1c:	b292      	uxth	r2, r2
 801ef1e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801ef20:	687a      	ldr	r2, [r7, #4]
 801ef22:	683b      	ldr	r3, [r7, #0]
 801ef24:	781b      	ldrb	r3, [r3, #0]
 801ef26:	009b      	lsls	r3, r3, #2
 801ef28:	18d3      	adds	r3, r2, r3
 801ef2a:	881b      	ldrh	r3, [r3, #0]
 801ef2c:	b29a      	uxth	r2, r3
 801ef2e:	2026      	movs	r0, #38	@ 0x26
 801ef30:	183b      	adds	r3, r7, r0
 801ef32:	4920      	ldr	r1, [pc, #128]	@ (801efb4 <USB_DeactivateEndpoint+0x368>)
 801ef34:	400a      	ands	r2, r1
 801ef36:	801a      	strh	r2, [r3, #0]
 801ef38:	687a      	ldr	r2, [r7, #4]
 801ef3a:	683b      	ldr	r3, [r7, #0]
 801ef3c:	781b      	ldrb	r3, [r3, #0]
 801ef3e:	009b      	lsls	r3, r3, #2
 801ef40:	18d3      	adds	r3, r2, r3
 801ef42:	183a      	adds	r2, r7, r0
 801ef44:	8812      	ldrh	r2, [r2, #0]
 801ef46:	491f      	ldr	r1, [pc, #124]	@ (801efc4 <USB_DeactivateEndpoint+0x378>)
 801ef48:	430a      	orrs	r2, r1
 801ef4a:	b292      	uxth	r2, r2
 801ef4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ef4e:	687a      	ldr	r2, [r7, #4]
 801ef50:	683b      	ldr	r3, [r7, #0]
 801ef52:	781b      	ldrb	r3, [r3, #0]
 801ef54:	009b      	lsls	r3, r3, #2
 801ef56:	18d3      	adds	r3, r2, r3
 801ef58:	881b      	ldrh	r3, [r3, #0]
 801ef5a:	b29a      	uxth	r2, r3
 801ef5c:	2024      	movs	r0, #36	@ 0x24
 801ef5e:	183b      	adds	r3, r7, r0
 801ef60:	4916      	ldr	r1, [pc, #88]	@ (801efbc <USB_DeactivateEndpoint+0x370>)
 801ef62:	400a      	ands	r2, r1
 801ef64:	801a      	strh	r2, [r3, #0]
 801ef66:	687a      	ldr	r2, [r7, #4]
 801ef68:	683b      	ldr	r3, [r7, #0]
 801ef6a:	781b      	ldrb	r3, [r3, #0]
 801ef6c:	009b      	lsls	r3, r3, #2
 801ef6e:	18d3      	adds	r3, r2, r3
 801ef70:	183a      	adds	r2, r7, r0
 801ef72:	8812      	ldrh	r2, [r2, #0]
 801ef74:	4912      	ldr	r1, [pc, #72]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801ef76:	430a      	orrs	r2, r1
 801ef78:	b292      	uxth	r2, r2
 801ef7a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ef7c:	687a      	ldr	r2, [r7, #4]
 801ef7e:	683b      	ldr	r3, [r7, #0]
 801ef80:	781b      	ldrb	r3, [r3, #0]
 801ef82:	009b      	lsls	r3, r3, #2
 801ef84:	18d3      	adds	r3, r2, r3
 801ef86:	881b      	ldrh	r3, [r3, #0]
 801ef88:	b29a      	uxth	r2, r3
 801ef8a:	2022      	movs	r0, #34	@ 0x22
 801ef8c:	183b      	adds	r3, r7, r0
 801ef8e:	490e      	ldr	r1, [pc, #56]	@ (801efc8 <USB_DeactivateEndpoint+0x37c>)
 801ef90:	400a      	ands	r2, r1
 801ef92:	801a      	strh	r2, [r3, #0]
 801ef94:	687a      	ldr	r2, [r7, #4]
 801ef96:	683b      	ldr	r3, [r7, #0]
 801ef98:	781b      	ldrb	r3, [r3, #0]
 801ef9a:	009b      	lsls	r3, r3, #2
 801ef9c:	18d3      	adds	r3, r2, r3
 801ef9e:	183a      	adds	r2, r7, r0
 801efa0:	8812      	ldrh	r2, [r2, #0]
 801efa2:	4907      	ldr	r1, [pc, #28]	@ (801efc0 <USB_DeactivateEndpoint+0x374>)
 801efa4:	430a      	orrs	r2, r1
 801efa6:	b292      	uxth	r2, r2
 801efa8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801efaa:	2300      	movs	r3, #0
}
 801efac:	0018      	movs	r0, r3
 801efae:	46bd      	mov	sp, r7
 801efb0:	b00c      	add	sp, #48	@ 0x30
 801efb2:	bd80      	pop	{r7, pc}
 801efb4:	ffff8f8f 	.word	0xffff8f8f
 801efb8:	ffff80c0 	.word	0xffff80c0
 801efbc:	ffff8fbf 	.word	0xffff8fbf
 801efc0:	ffff8080 	.word	0xffff8080
 801efc4:	ffffc080 	.word	0xffffc080
 801efc8:	ffffbf8f 	.word	0xffffbf8f

0801efcc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801efcc:	b590      	push	{r4, r7, lr}
 801efce:	b0c3      	sub	sp, #268	@ 0x10c
 801efd0:	af00      	add	r7, sp, #0
 801efd2:	6078      	str	r0, [r7, #4]
 801efd4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801efd6:	683b      	ldr	r3, [r7, #0]
 801efd8:	785b      	ldrb	r3, [r3, #1]
 801efda:	2b01      	cmp	r3, #1
 801efdc:	d001      	beq.n	801efe2 <USB_EPStartXfer+0x16>
 801efde:	f000 fd2d 	bl	801fa3c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801efe2:	683b      	ldr	r3, [r7, #0]
 801efe4:	699a      	ldr	r2, [r3, #24]
 801efe6:	683b      	ldr	r3, [r7, #0]
 801efe8:	691b      	ldr	r3, [r3, #16]
 801efea:	429a      	cmp	r2, r3
 801efec:	d905      	bls.n	801effa <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801efee:	683b      	ldr	r3, [r7, #0]
 801eff0:	691b      	ldr	r3, [r3, #16]
 801eff2:	1d7a      	adds	r2, r7, #5
 801eff4:	32ff      	adds	r2, #255	@ 0xff
 801eff6:	6013      	str	r3, [r2, #0]
 801eff8:	e004      	b.n	801f004 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	699b      	ldr	r3, [r3, #24]
 801effe:	1d7a      	adds	r2, r7, #5
 801f000:	32ff      	adds	r2, #255	@ 0xff
 801f002:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801f004:	683b      	ldr	r3, [r7, #0]
 801f006:	7b1b      	ldrb	r3, [r3, #12]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d125      	bne.n	801f058 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801f00c:	683b      	ldr	r3, [r7, #0]
 801f00e:	6959      	ldr	r1, [r3, #20]
 801f010:	683b      	ldr	r3, [r7, #0]
 801f012:	88da      	ldrh	r2, [r3, #6]
 801f014:	1d7b      	adds	r3, r7, #5
 801f016:	33ff      	adds	r3, #255	@ 0xff
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	b29b      	uxth	r3, r3
 801f01c:	6878      	ldr	r0, [r7, #4]
 801f01e:	f001 fa47 	bl	80204b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	613b      	str	r3, [r7, #16]
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	2250      	movs	r2, #80	@ 0x50
 801f02a:	5a9b      	ldrh	r3, [r3, r2]
 801f02c:	b29b      	uxth	r3, r3
 801f02e:	001a      	movs	r2, r3
 801f030:	693b      	ldr	r3, [r7, #16]
 801f032:	189b      	adds	r3, r3, r2
 801f034:	613b      	str	r3, [r7, #16]
 801f036:	683b      	ldr	r3, [r7, #0]
 801f038:	781b      	ldrb	r3, [r3, #0]
 801f03a:	00da      	lsls	r2, r3, #3
 801f03c:	693b      	ldr	r3, [r7, #16]
 801f03e:	18d3      	adds	r3, r2, r3
 801f040:	4ad7      	ldr	r2, [pc, #860]	@ (801f3a0 <USB_EPStartXfer+0x3d4>)
 801f042:	4694      	mov	ip, r2
 801f044:	4463      	add	r3, ip
 801f046:	60fb      	str	r3, [r7, #12]
 801f048:	1d7b      	adds	r3, r7, #5
 801f04a:	33ff      	adds	r3, #255	@ 0xff
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	b29a      	uxth	r2, r3
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	801a      	strh	r2, [r3, #0]
 801f054:	f000 fccd 	bl	801f9f2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801f058:	683b      	ldr	r3, [r7, #0]
 801f05a:	78db      	ldrb	r3, [r3, #3]
 801f05c:	2b02      	cmp	r3, #2
 801f05e:	d000      	beq.n	801f062 <USB_EPStartXfer+0x96>
 801f060:	e362      	b.n	801f728 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801f062:	683b      	ldr	r3, [r7, #0]
 801f064:	6a1a      	ldr	r2, [r3, #32]
 801f066:	683b      	ldr	r3, [r7, #0]
 801f068:	691b      	ldr	r3, [r3, #16]
 801f06a:	429a      	cmp	r2, r3
 801f06c:	d800      	bhi.n	801f070 <USB_EPStartXfer+0xa4>
 801f06e:	e309      	b.n	801f684 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f070:	687a      	ldr	r2, [r7, #4]
 801f072:	683b      	ldr	r3, [r7, #0]
 801f074:	781b      	ldrb	r3, [r3, #0]
 801f076:	009b      	lsls	r3, r3, #2
 801f078:	18d3      	adds	r3, r2, r3
 801f07a:	881b      	ldrh	r3, [r3, #0]
 801f07c:	b29a      	uxth	r2, r3
 801f07e:	2056      	movs	r0, #86	@ 0x56
 801f080:	183b      	adds	r3, r7, r0
 801f082:	49c8      	ldr	r1, [pc, #800]	@ (801f3a4 <USB_EPStartXfer+0x3d8>)
 801f084:	400a      	ands	r2, r1
 801f086:	801a      	strh	r2, [r3, #0]
 801f088:	687a      	ldr	r2, [r7, #4]
 801f08a:	683b      	ldr	r3, [r7, #0]
 801f08c:	781b      	ldrb	r3, [r3, #0]
 801f08e:	009b      	lsls	r3, r3, #2
 801f090:	18d3      	adds	r3, r2, r3
 801f092:	183a      	adds	r2, r7, r0
 801f094:	8812      	ldrh	r2, [r2, #0]
 801f096:	49c4      	ldr	r1, [pc, #784]	@ (801f3a8 <USB_EPStartXfer+0x3dc>)
 801f098:	430a      	orrs	r2, r1
 801f09a:	b292      	uxth	r2, r2
 801f09c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801f09e:	683b      	ldr	r3, [r7, #0]
 801f0a0:	6a1a      	ldr	r2, [r3, #32]
 801f0a2:	1d7b      	adds	r3, r7, #5
 801f0a4:	33ff      	adds	r3, #255	@ 0xff
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	1ad2      	subs	r2, r2, r3
 801f0aa:	683b      	ldr	r3, [r7, #0]
 801f0ac:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f0ae:	687a      	ldr	r2, [r7, #4]
 801f0b0:	683b      	ldr	r3, [r7, #0]
 801f0b2:	781b      	ldrb	r3, [r3, #0]
 801f0b4:	009b      	lsls	r3, r3, #2
 801f0b6:	18d3      	adds	r3, r2, r3
 801f0b8:	881b      	ldrh	r3, [r3, #0]
 801f0ba:	b29b      	uxth	r3, r3
 801f0bc:	001a      	movs	r2, r3
 801f0be:	2340      	movs	r3, #64	@ 0x40
 801f0c0:	4013      	ands	r3, r2
 801f0c2:	d100      	bne.n	801f0c6 <USB_EPStartXfer+0xfa>
 801f0c4:	e176      	b.n	801f3b4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f0c6:	687b      	ldr	r3, [r7, #4]
 801f0c8:	633b      	str	r3, [r7, #48]	@ 0x30
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	785b      	ldrb	r3, [r3, #1]
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	d000      	beq.n	801f0d4 <USB_EPStartXfer+0x108>
 801f0d2:	e074      	b.n	801f1be <USB_EPStartXfer+0x1f2>
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	2250      	movs	r2, #80	@ 0x50
 801f0dc:	5a9b      	ldrh	r3, [r3, r2]
 801f0de:	b29b      	uxth	r3, r3
 801f0e0:	001a      	movs	r2, r3
 801f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0e4:	189b      	adds	r3, r3, r2
 801f0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f0e8:	683b      	ldr	r3, [r7, #0]
 801f0ea:	781b      	ldrb	r3, [r3, #0]
 801f0ec:	00da      	lsls	r2, r3, #3
 801f0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0f0:	18d3      	adds	r3, r2, r3
 801f0f2:	4aae      	ldr	r2, [pc, #696]	@ (801f3ac <USB_EPStartXfer+0x3e0>)
 801f0f4:	4694      	mov	ip, r2
 801f0f6:	4463      	add	r3, ip
 801f0f8:	627b      	str	r3, [r7, #36]	@ 0x24
 801f0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f0fc:	881b      	ldrh	r3, [r3, #0]
 801f0fe:	b29b      	uxth	r3, r3
 801f100:	059b      	lsls	r3, r3, #22
 801f102:	0d9b      	lsrs	r3, r3, #22
 801f104:	b29a      	uxth	r2, r3
 801f106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f108:	801a      	strh	r2, [r3, #0]
 801f10a:	1d7b      	adds	r3, r7, #5
 801f10c:	33ff      	adds	r3, #255	@ 0xff
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	2b3e      	cmp	r3, #62	@ 0x3e
 801f112:	d924      	bls.n	801f15e <USB_EPStartXfer+0x192>
 801f114:	1d7b      	adds	r3, r7, #5
 801f116:	33ff      	adds	r3, #255	@ 0xff
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	095b      	lsrs	r3, r3, #5
 801f11c:	1c7a      	adds	r2, r7, #1
 801f11e:	32ff      	adds	r2, #255	@ 0xff
 801f120:	6013      	str	r3, [r2, #0]
 801f122:	1d7b      	adds	r3, r7, #5
 801f124:	33ff      	adds	r3, #255	@ 0xff
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	221f      	movs	r2, #31
 801f12a:	4013      	ands	r3, r2
 801f12c:	d106      	bne.n	801f13c <USB_EPStartXfer+0x170>
 801f12e:	1c7b      	adds	r3, r7, #1
 801f130:	33ff      	adds	r3, #255	@ 0xff
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	3b01      	subs	r3, #1
 801f136:	1c7a      	adds	r2, r7, #1
 801f138:	32ff      	adds	r2, #255	@ 0xff
 801f13a:	6013      	str	r3, [r2, #0]
 801f13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f13e:	881b      	ldrh	r3, [r3, #0]
 801f140:	b29a      	uxth	r2, r3
 801f142:	1c7b      	adds	r3, r7, #1
 801f144:	33ff      	adds	r3, #255	@ 0xff
 801f146:	681b      	ldr	r3, [r3, #0]
 801f148:	b29b      	uxth	r3, r3
 801f14a:	029b      	lsls	r3, r3, #10
 801f14c:	b29b      	uxth	r3, r3
 801f14e:	4313      	orrs	r3, r2
 801f150:	b29b      	uxth	r3, r3
 801f152:	4a97      	ldr	r2, [pc, #604]	@ (801f3b0 <USB_EPStartXfer+0x3e4>)
 801f154:	4313      	orrs	r3, r2
 801f156:	b29a      	uxth	r2, r3
 801f158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f15a:	801a      	strh	r2, [r3, #0]
 801f15c:	e04a      	b.n	801f1f4 <USB_EPStartXfer+0x228>
 801f15e:	1d7b      	adds	r3, r7, #5
 801f160:	33ff      	adds	r3, #255	@ 0xff
 801f162:	681b      	ldr	r3, [r3, #0]
 801f164:	2b00      	cmp	r3, #0
 801f166:	d108      	bne.n	801f17a <USB_EPStartXfer+0x1ae>
 801f168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f16a:	881b      	ldrh	r3, [r3, #0]
 801f16c:	b29b      	uxth	r3, r3
 801f16e:	4a90      	ldr	r2, [pc, #576]	@ (801f3b0 <USB_EPStartXfer+0x3e4>)
 801f170:	4313      	orrs	r3, r2
 801f172:	b29a      	uxth	r2, r3
 801f174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f176:	801a      	strh	r2, [r3, #0]
 801f178:	e03c      	b.n	801f1f4 <USB_EPStartXfer+0x228>
 801f17a:	1d7b      	adds	r3, r7, #5
 801f17c:	33ff      	adds	r3, #255	@ 0xff
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	085b      	lsrs	r3, r3, #1
 801f182:	1c7a      	adds	r2, r7, #1
 801f184:	32ff      	adds	r2, #255	@ 0xff
 801f186:	6013      	str	r3, [r2, #0]
 801f188:	1d7b      	adds	r3, r7, #5
 801f18a:	33ff      	adds	r3, #255	@ 0xff
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	2201      	movs	r2, #1
 801f190:	4013      	ands	r3, r2
 801f192:	d006      	beq.n	801f1a2 <USB_EPStartXfer+0x1d6>
 801f194:	1c7b      	adds	r3, r7, #1
 801f196:	33ff      	adds	r3, #255	@ 0xff
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	3301      	adds	r3, #1
 801f19c:	1c7a      	adds	r2, r7, #1
 801f19e:	32ff      	adds	r2, #255	@ 0xff
 801f1a0:	6013      	str	r3, [r2, #0]
 801f1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1a4:	881b      	ldrh	r3, [r3, #0]
 801f1a6:	b29a      	uxth	r2, r3
 801f1a8:	1c7b      	adds	r3, r7, #1
 801f1aa:	33ff      	adds	r3, #255	@ 0xff
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	b29b      	uxth	r3, r3
 801f1b0:	029b      	lsls	r3, r3, #10
 801f1b2:	b29b      	uxth	r3, r3
 801f1b4:	4313      	orrs	r3, r2
 801f1b6:	b29a      	uxth	r2, r3
 801f1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1ba:	801a      	strh	r2, [r3, #0]
 801f1bc:	e01a      	b.n	801f1f4 <USB_EPStartXfer+0x228>
 801f1be:	683b      	ldr	r3, [r7, #0]
 801f1c0:	785b      	ldrb	r3, [r3, #1]
 801f1c2:	2b01      	cmp	r3, #1
 801f1c4:	d116      	bne.n	801f1f4 <USB_EPStartXfer+0x228>
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	2250      	movs	r2, #80	@ 0x50
 801f1ca:	5a9b      	ldrh	r3, [r3, r2]
 801f1cc:	b29b      	uxth	r3, r3
 801f1ce:	001a      	movs	r2, r3
 801f1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1d2:	189b      	adds	r3, r3, r2
 801f1d4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f1d6:	683b      	ldr	r3, [r7, #0]
 801f1d8:	781b      	ldrb	r3, [r3, #0]
 801f1da:	00da      	lsls	r2, r3, #3
 801f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1de:	18d3      	adds	r3, r2, r3
 801f1e0:	4a72      	ldr	r2, [pc, #456]	@ (801f3ac <USB_EPStartXfer+0x3e0>)
 801f1e2:	4694      	mov	ip, r2
 801f1e4:	4463      	add	r3, ip
 801f1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f1e8:	1d7b      	adds	r3, r7, #5
 801f1ea:	33ff      	adds	r3, #255	@ 0xff
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	b29a      	uxth	r2, r3
 801f1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f1f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f1f4:	2076      	movs	r0, #118	@ 0x76
 801f1f6:	183b      	adds	r3, r7, r0
 801f1f8:	683a      	ldr	r2, [r7, #0]
 801f1fa:	8952      	ldrh	r2, [r2, #10]
 801f1fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f1fe:	683b      	ldr	r3, [r7, #0]
 801f200:	6959      	ldr	r1, [r3, #20]
 801f202:	1d7b      	adds	r3, r7, #5
 801f204:	33ff      	adds	r3, #255	@ 0xff
 801f206:	681b      	ldr	r3, [r3, #0]
 801f208:	b29c      	uxth	r4, r3
 801f20a:	183b      	adds	r3, r7, r0
 801f20c:	881a      	ldrh	r2, [r3, #0]
 801f20e:	6878      	ldr	r0, [r7, #4]
 801f210:	0023      	movs	r3, r4
 801f212:	f001 f94d 	bl	80204b0 <USB_WritePMA>
            ep->xfer_buff += len;
 801f216:	683b      	ldr	r3, [r7, #0]
 801f218:	695a      	ldr	r2, [r3, #20]
 801f21a:	1d7b      	adds	r3, r7, #5
 801f21c:	33ff      	adds	r3, #255	@ 0xff
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	18d2      	adds	r2, r2, r3
 801f222:	683b      	ldr	r3, [r7, #0]
 801f224:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f226:	683b      	ldr	r3, [r7, #0]
 801f228:	6a1a      	ldr	r2, [r3, #32]
 801f22a:	683b      	ldr	r3, [r7, #0]
 801f22c:	691b      	ldr	r3, [r3, #16]
 801f22e:	429a      	cmp	r2, r3
 801f230:	d908      	bls.n	801f244 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801f232:	683b      	ldr	r3, [r7, #0]
 801f234:	6a1a      	ldr	r2, [r3, #32]
 801f236:	1d7b      	adds	r3, r7, #5
 801f238:	33ff      	adds	r3, #255	@ 0xff
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	1ad2      	subs	r2, r2, r3
 801f23e:	683b      	ldr	r3, [r7, #0]
 801f240:	621a      	str	r2, [r3, #32]
 801f242:	e007      	b.n	801f254 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 801f244:	683b      	ldr	r3, [r7, #0]
 801f246:	6a1b      	ldr	r3, [r3, #32]
 801f248:	1d7a      	adds	r2, r7, #5
 801f24a:	32ff      	adds	r2, #255	@ 0xff
 801f24c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f24e:	683b      	ldr	r3, [r7, #0]
 801f250:	2200      	movs	r2, #0
 801f252:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f254:	683b      	ldr	r3, [r7, #0]
 801f256:	785b      	ldrb	r3, [r3, #1]
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d000      	beq.n	801f25e <USB_EPStartXfer+0x292>
 801f25c:	e070      	b.n	801f340 <USB_EPStartXfer+0x374>
 801f25e:	687b      	ldr	r3, [r7, #4]
 801f260:	61bb      	str	r3, [r7, #24]
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	2250      	movs	r2, #80	@ 0x50
 801f266:	5a9b      	ldrh	r3, [r3, r2]
 801f268:	b29b      	uxth	r3, r3
 801f26a:	001a      	movs	r2, r3
 801f26c:	69bb      	ldr	r3, [r7, #24]
 801f26e:	189b      	adds	r3, r3, r2
 801f270:	61bb      	str	r3, [r7, #24]
 801f272:	683b      	ldr	r3, [r7, #0]
 801f274:	781b      	ldrb	r3, [r3, #0]
 801f276:	00da      	lsls	r2, r3, #3
 801f278:	69bb      	ldr	r3, [r7, #24]
 801f27a:	18d3      	adds	r3, r2, r3
 801f27c:	4a48      	ldr	r2, [pc, #288]	@ (801f3a0 <USB_EPStartXfer+0x3d4>)
 801f27e:	4694      	mov	ip, r2
 801f280:	4463      	add	r3, ip
 801f282:	617b      	str	r3, [r7, #20]
 801f284:	697b      	ldr	r3, [r7, #20]
 801f286:	881b      	ldrh	r3, [r3, #0]
 801f288:	b29b      	uxth	r3, r3
 801f28a:	059b      	lsls	r3, r3, #22
 801f28c:	0d9b      	lsrs	r3, r3, #22
 801f28e:	b29a      	uxth	r2, r3
 801f290:	697b      	ldr	r3, [r7, #20]
 801f292:	801a      	strh	r2, [r3, #0]
 801f294:	1d7b      	adds	r3, r7, #5
 801f296:	33ff      	adds	r3, #255	@ 0xff
 801f298:	681b      	ldr	r3, [r3, #0]
 801f29a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f29c:	d922      	bls.n	801f2e4 <USB_EPStartXfer+0x318>
 801f29e:	1d7b      	adds	r3, r7, #5
 801f2a0:	33ff      	adds	r3, #255	@ 0xff
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	095b      	lsrs	r3, r3, #5
 801f2a6:	21fc      	movs	r1, #252	@ 0xfc
 801f2a8:	187a      	adds	r2, r7, r1
 801f2aa:	6013      	str	r3, [r2, #0]
 801f2ac:	1d7b      	adds	r3, r7, #5
 801f2ae:	33ff      	adds	r3, #255	@ 0xff
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	221f      	movs	r2, #31
 801f2b4:	4013      	ands	r3, r2
 801f2b6:	d104      	bne.n	801f2c2 <USB_EPStartXfer+0x2f6>
 801f2b8:	187b      	adds	r3, r7, r1
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	3b01      	subs	r3, #1
 801f2be:	187a      	adds	r2, r7, r1
 801f2c0:	6013      	str	r3, [r2, #0]
 801f2c2:	697b      	ldr	r3, [r7, #20]
 801f2c4:	881b      	ldrh	r3, [r3, #0]
 801f2c6:	b29a      	uxth	r2, r3
 801f2c8:	23fc      	movs	r3, #252	@ 0xfc
 801f2ca:	18fb      	adds	r3, r7, r3
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	b29b      	uxth	r3, r3
 801f2d0:	029b      	lsls	r3, r3, #10
 801f2d2:	b29b      	uxth	r3, r3
 801f2d4:	4313      	orrs	r3, r2
 801f2d6:	b29b      	uxth	r3, r3
 801f2d8:	4a35      	ldr	r2, [pc, #212]	@ (801f3b0 <USB_EPStartXfer+0x3e4>)
 801f2da:	4313      	orrs	r3, r2
 801f2dc:	b29a      	uxth	r2, r3
 801f2de:	697b      	ldr	r3, [r7, #20]
 801f2e0:	801a      	strh	r2, [r3, #0]
 801f2e2:	e04a      	b.n	801f37a <USB_EPStartXfer+0x3ae>
 801f2e4:	1d7b      	adds	r3, r7, #5
 801f2e6:	33ff      	adds	r3, #255	@ 0xff
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	2b00      	cmp	r3, #0
 801f2ec:	d108      	bne.n	801f300 <USB_EPStartXfer+0x334>
 801f2ee:	697b      	ldr	r3, [r7, #20]
 801f2f0:	881b      	ldrh	r3, [r3, #0]
 801f2f2:	b29b      	uxth	r3, r3
 801f2f4:	4a2e      	ldr	r2, [pc, #184]	@ (801f3b0 <USB_EPStartXfer+0x3e4>)
 801f2f6:	4313      	orrs	r3, r2
 801f2f8:	b29a      	uxth	r2, r3
 801f2fa:	697b      	ldr	r3, [r7, #20]
 801f2fc:	801a      	strh	r2, [r3, #0]
 801f2fe:	e03c      	b.n	801f37a <USB_EPStartXfer+0x3ae>
 801f300:	1d7b      	adds	r3, r7, #5
 801f302:	33ff      	adds	r3, #255	@ 0xff
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	085b      	lsrs	r3, r3, #1
 801f308:	21fc      	movs	r1, #252	@ 0xfc
 801f30a:	187a      	adds	r2, r7, r1
 801f30c:	6013      	str	r3, [r2, #0]
 801f30e:	1d7b      	adds	r3, r7, #5
 801f310:	33ff      	adds	r3, #255	@ 0xff
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	2201      	movs	r2, #1
 801f316:	4013      	ands	r3, r2
 801f318:	d004      	beq.n	801f324 <USB_EPStartXfer+0x358>
 801f31a:	187b      	adds	r3, r7, r1
 801f31c:	681b      	ldr	r3, [r3, #0]
 801f31e:	3301      	adds	r3, #1
 801f320:	187a      	adds	r2, r7, r1
 801f322:	6013      	str	r3, [r2, #0]
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	881b      	ldrh	r3, [r3, #0]
 801f328:	b29a      	uxth	r2, r3
 801f32a:	23fc      	movs	r3, #252	@ 0xfc
 801f32c:	18fb      	adds	r3, r7, r3
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	b29b      	uxth	r3, r3
 801f332:	029b      	lsls	r3, r3, #10
 801f334:	b29b      	uxth	r3, r3
 801f336:	4313      	orrs	r3, r2
 801f338:	b29a      	uxth	r2, r3
 801f33a:	697b      	ldr	r3, [r7, #20]
 801f33c:	801a      	strh	r2, [r3, #0]
 801f33e:	e01c      	b.n	801f37a <USB_EPStartXfer+0x3ae>
 801f340:	683b      	ldr	r3, [r7, #0]
 801f342:	785b      	ldrb	r3, [r3, #1]
 801f344:	2b01      	cmp	r3, #1
 801f346:	d118      	bne.n	801f37a <USB_EPStartXfer+0x3ae>
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	623b      	str	r3, [r7, #32]
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	2250      	movs	r2, #80	@ 0x50
 801f350:	5a9b      	ldrh	r3, [r3, r2]
 801f352:	b29b      	uxth	r3, r3
 801f354:	001a      	movs	r2, r3
 801f356:	6a3b      	ldr	r3, [r7, #32]
 801f358:	189b      	adds	r3, r3, r2
 801f35a:	623b      	str	r3, [r7, #32]
 801f35c:	683b      	ldr	r3, [r7, #0]
 801f35e:	781b      	ldrb	r3, [r3, #0]
 801f360:	00da      	lsls	r2, r3, #3
 801f362:	6a3b      	ldr	r3, [r7, #32]
 801f364:	18d3      	adds	r3, r2, r3
 801f366:	4a0e      	ldr	r2, [pc, #56]	@ (801f3a0 <USB_EPStartXfer+0x3d4>)
 801f368:	4694      	mov	ip, r2
 801f36a:	4463      	add	r3, ip
 801f36c:	61fb      	str	r3, [r7, #28]
 801f36e:	1d7b      	adds	r3, r7, #5
 801f370:	33ff      	adds	r3, #255	@ 0xff
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	b29a      	uxth	r2, r3
 801f376:	69fb      	ldr	r3, [r7, #28]
 801f378:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f37a:	2076      	movs	r0, #118	@ 0x76
 801f37c:	183b      	adds	r3, r7, r0
 801f37e:	683a      	ldr	r2, [r7, #0]
 801f380:	8912      	ldrh	r2, [r2, #8]
 801f382:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f384:	683b      	ldr	r3, [r7, #0]
 801f386:	6959      	ldr	r1, [r3, #20]
 801f388:	1d7b      	adds	r3, r7, #5
 801f38a:	33ff      	adds	r3, #255	@ 0xff
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	b29c      	uxth	r4, r3
 801f390:	183b      	adds	r3, r7, r0
 801f392:	881a      	ldrh	r2, [r3, #0]
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	0023      	movs	r3, r4
 801f398:	f001 f88a 	bl	80204b0 <USB_WritePMA>
 801f39c:	e329      	b.n	801f9f2 <USB_EPStartXfer+0xa26>
 801f39e:	46c0      	nop			@ (mov r8, r8)
 801f3a0:	00000402 	.word	0x00000402
 801f3a4:	ffff8f8f 	.word	0xffff8f8f
 801f3a8:	ffff8180 	.word	0xffff8180
 801f3ac:	00000406 	.word	0x00000406
 801f3b0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f3b4:	683b      	ldr	r3, [r7, #0]
 801f3b6:	785b      	ldrb	r3, [r3, #1]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	d000      	beq.n	801f3be <USB_EPStartXfer+0x3f2>
 801f3bc:	e070      	b.n	801f4a0 <USB_EPStartXfer+0x4d4>
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	2250      	movs	r2, #80	@ 0x50
 801f3c6:	5a9b      	ldrh	r3, [r3, r2]
 801f3c8:	b29b      	uxth	r3, r3
 801f3ca:	001a      	movs	r2, r3
 801f3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f3ce:	189b      	adds	r3, r3, r2
 801f3d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f3d2:	683b      	ldr	r3, [r7, #0]
 801f3d4:	781b      	ldrb	r3, [r3, #0]
 801f3d6:	00da      	lsls	r2, r3, #3
 801f3d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f3da:	18d3      	adds	r3, r2, r3
 801f3dc:	4acd      	ldr	r2, [pc, #820]	@ (801f714 <USB_EPStartXfer+0x748>)
 801f3de:	4694      	mov	ip, r2
 801f3e0:	4463      	add	r3, ip
 801f3e2:	647b      	str	r3, [r7, #68]	@ 0x44
 801f3e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3e6:	881b      	ldrh	r3, [r3, #0]
 801f3e8:	b29b      	uxth	r3, r3
 801f3ea:	059b      	lsls	r3, r3, #22
 801f3ec:	0d9b      	lsrs	r3, r3, #22
 801f3ee:	b29a      	uxth	r2, r3
 801f3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f3f2:	801a      	strh	r2, [r3, #0]
 801f3f4:	1d7b      	adds	r3, r7, #5
 801f3f6:	33ff      	adds	r3, #255	@ 0xff
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	2b3e      	cmp	r3, #62	@ 0x3e
 801f3fc:	d922      	bls.n	801f444 <USB_EPStartXfer+0x478>
 801f3fe:	1d7b      	adds	r3, r7, #5
 801f400:	33ff      	adds	r3, #255	@ 0xff
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	095b      	lsrs	r3, r3, #5
 801f406:	21f8      	movs	r1, #248	@ 0xf8
 801f408:	187a      	adds	r2, r7, r1
 801f40a:	6013      	str	r3, [r2, #0]
 801f40c:	1d7b      	adds	r3, r7, #5
 801f40e:	33ff      	adds	r3, #255	@ 0xff
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	221f      	movs	r2, #31
 801f414:	4013      	ands	r3, r2
 801f416:	d104      	bne.n	801f422 <USB_EPStartXfer+0x456>
 801f418:	187b      	adds	r3, r7, r1
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	3b01      	subs	r3, #1
 801f41e:	187a      	adds	r2, r7, r1
 801f420:	6013      	str	r3, [r2, #0]
 801f422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f424:	881b      	ldrh	r3, [r3, #0]
 801f426:	b29a      	uxth	r2, r3
 801f428:	23f8      	movs	r3, #248	@ 0xf8
 801f42a:	18fb      	adds	r3, r7, r3
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	b29b      	uxth	r3, r3
 801f430:	029b      	lsls	r3, r3, #10
 801f432:	b29b      	uxth	r3, r3
 801f434:	4313      	orrs	r3, r2
 801f436:	b29b      	uxth	r3, r3
 801f438:	4ab7      	ldr	r2, [pc, #732]	@ (801f718 <USB_EPStartXfer+0x74c>)
 801f43a:	4313      	orrs	r3, r2
 801f43c:	b29a      	uxth	r2, r3
 801f43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f440:	801a      	strh	r2, [r3, #0]
 801f442:	e04a      	b.n	801f4da <USB_EPStartXfer+0x50e>
 801f444:	1d7b      	adds	r3, r7, #5
 801f446:	33ff      	adds	r3, #255	@ 0xff
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d108      	bne.n	801f460 <USB_EPStartXfer+0x494>
 801f44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f450:	881b      	ldrh	r3, [r3, #0]
 801f452:	b29b      	uxth	r3, r3
 801f454:	4ab0      	ldr	r2, [pc, #704]	@ (801f718 <USB_EPStartXfer+0x74c>)
 801f456:	4313      	orrs	r3, r2
 801f458:	b29a      	uxth	r2, r3
 801f45a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f45c:	801a      	strh	r2, [r3, #0]
 801f45e:	e03c      	b.n	801f4da <USB_EPStartXfer+0x50e>
 801f460:	1d7b      	adds	r3, r7, #5
 801f462:	33ff      	adds	r3, #255	@ 0xff
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	085b      	lsrs	r3, r3, #1
 801f468:	21f8      	movs	r1, #248	@ 0xf8
 801f46a:	187a      	adds	r2, r7, r1
 801f46c:	6013      	str	r3, [r2, #0]
 801f46e:	1d7b      	adds	r3, r7, #5
 801f470:	33ff      	adds	r3, #255	@ 0xff
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	2201      	movs	r2, #1
 801f476:	4013      	ands	r3, r2
 801f478:	d004      	beq.n	801f484 <USB_EPStartXfer+0x4b8>
 801f47a:	187b      	adds	r3, r7, r1
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	3301      	adds	r3, #1
 801f480:	187a      	adds	r2, r7, r1
 801f482:	6013      	str	r3, [r2, #0]
 801f484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f486:	881b      	ldrh	r3, [r3, #0]
 801f488:	b29a      	uxth	r2, r3
 801f48a:	23f8      	movs	r3, #248	@ 0xf8
 801f48c:	18fb      	adds	r3, r7, r3
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	b29b      	uxth	r3, r3
 801f492:	029b      	lsls	r3, r3, #10
 801f494:	b29b      	uxth	r3, r3
 801f496:	4313      	orrs	r3, r2
 801f498:	b29a      	uxth	r2, r3
 801f49a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f49c:	801a      	strh	r2, [r3, #0]
 801f49e:	e01c      	b.n	801f4da <USB_EPStartXfer+0x50e>
 801f4a0:	683b      	ldr	r3, [r7, #0]
 801f4a2:	785b      	ldrb	r3, [r3, #1]
 801f4a4:	2b01      	cmp	r3, #1
 801f4a6:	d118      	bne.n	801f4da <USB_EPStartXfer+0x50e>
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	653b      	str	r3, [r7, #80]	@ 0x50
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2250      	movs	r2, #80	@ 0x50
 801f4b0:	5a9b      	ldrh	r3, [r3, r2]
 801f4b2:	b29b      	uxth	r3, r3
 801f4b4:	001a      	movs	r2, r3
 801f4b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4b8:	189b      	adds	r3, r3, r2
 801f4ba:	653b      	str	r3, [r7, #80]	@ 0x50
 801f4bc:	683b      	ldr	r3, [r7, #0]
 801f4be:	781b      	ldrb	r3, [r3, #0]
 801f4c0:	00da      	lsls	r2, r3, #3
 801f4c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f4c4:	18d3      	adds	r3, r2, r3
 801f4c6:	4a93      	ldr	r2, [pc, #588]	@ (801f714 <USB_EPStartXfer+0x748>)
 801f4c8:	4694      	mov	ip, r2
 801f4ca:	4463      	add	r3, ip
 801f4cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f4ce:	1d7b      	adds	r3, r7, #5
 801f4d0:	33ff      	adds	r3, #255	@ 0xff
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	b29a      	uxth	r2, r3
 801f4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801f4d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801f4da:	2076      	movs	r0, #118	@ 0x76
 801f4dc:	183b      	adds	r3, r7, r0
 801f4de:	683a      	ldr	r2, [r7, #0]
 801f4e0:	8912      	ldrh	r2, [r2, #8]
 801f4e2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f4e4:	683b      	ldr	r3, [r7, #0]
 801f4e6:	6959      	ldr	r1, [r3, #20]
 801f4e8:	1d7b      	adds	r3, r7, #5
 801f4ea:	33ff      	adds	r3, #255	@ 0xff
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	b29c      	uxth	r4, r3
 801f4f0:	183b      	adds	r3, r7, r0
 801f4f2:	881a      	ldrh	r2, [r3, #0]
 801f4f4:	6878      	ldr	r0, [r7, #4]
 801f4f6:	0023      	movs	r3, r4
 801f4f8:	f000 ffda 	bl	80204b0 <USB_WritePMA>
            ep->xfer_buff += len;
 801f4fc:	683b      	ldr	r3, [r7, #0]
 801f4fe:	695a      	ldr	r2, [r3, #20]
 801f500:	1d7b      	adds	r3, r7, #5
 801f502:	33ff      	adds	r3, #255	@ 0xff
 801f504:	681b      	ldr	r3, [r3, #0]
 801f506:	18d2      	adds	r2, r2, r3
 801f508:	683b      	ldr	r3, [r7, #0]
 801f50a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801f50c:	683b      	ldr	r3, [r7, #0]
 801f50e:	6a1a      	ldr	r2, [r3, #32]
 801f510:	683b      	ldr	r3, [r7, #0]
 801f512:	691b      	ldr	r3, [r3, #16]
 801f514:	429a      	cmp	r2, r3
 801f516:	d908      	bls.n	801f52a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801f518:	683b      	ldr	r3, [r7, #0]
 801f51a:	6a1a      	ldr	r2, [r3, #32]
 801f51c:	1d7b      	adds	r3, r7, #5
 801f51e:	33ff      	adds	r3, #255	@ 0xff
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	1ad2      	subs	r2, r2, r3
 801f524:	683b      	ldr	r3, [r7, #0]
 801f526:	621a      	str	r2, [r3, #32]
 801f528:	e007      	b.n	801f53a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801f52a:	683b      	ldr	r3, [r7, #0]
 801f52c:	6a1b      	ldr	r3, [r3, #32]
 801f52e:	1d7a      	adds	r2, r7, #5
 801f530:	32ff      	adds	r2, #255	@ 0xff
 801f532:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801f534:	683b      	ldr	r3, [r7, #0]
 801f536:	2200      	movs	r2, #0
 801f538:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f53a:	687b      	ldr	r3, [r7, #4]
 801f53c:	643b      	str	r3, [r7, #64]	@ 0x40
 801f53e:	683b      	ldr	r3, [r7, #0]
 801f540:	785b      	ldrb	r3, [r3, #1]
 801f542:	2b00      	cmp	r3, #0
 801f544:	d000      	beq.n	801f548 <USB_EPStartXfer+0x57c>
 801f546:	e070      	b.n	801f62a <USB_EPStartXfer+0x65e>
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2250      	movs	r2, #80	@ 0x50
 801f550:	5a9b      	ldrh	r3, [r3, r2]
 801f552:	b29b      	uxth	r3, r3
 801f554:	001a      	movs	r2, r3
 801f556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f558:	189b      	adds	r3, r3, r2
 801f55a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f55c:	683b      	ldr	r3, [r7, #0]
 801f55e:	781b      	ldrb	r3, [r3, #0]
 801f560:	00da      	lsls	r2, r3, #3
 801f562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f564:	18d3      	adds	r3, r2, r3
 801f566:	4a6d      	ldr	r2, [pc, #436]	@ (801f71c <USB_EPStartXfer+0x750>)
 801f568:	4694      	mov	ip, r2
 801f56a:	4463      	add	r3, ip
 801f56c:	637b      	str	r3, [r7, #52]	@ 0x34
 801f56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f570:	881b      	ldrh	r3, [r3, #0]
 801f572:	b29b      	uxth	r3, r3
 801f574:	059b      	lsls	r3, r3, #22
 801f576:	0d9b      	lsrs	r3, r3, #22
 801f578:	b29a      	uxth	r2, r3
 801f57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f57c:	801a      	strh	r2, [r3, #0]
 801f57e:	1d7b      	adds	r3, r7, #5
 801f580:	33ff      	adds	r3, #255	@ 0xff
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	2b3e      	cmp	r3, #62	@ 0x3e
 801f586:	d922      	bls.n	801f5ce <USB_EPStartXfer+0x602>
 801f588:	1d7b      	adds	r3, r7, #5
 801f58a:	33ff      	adds	r3, #255	@ 0xff
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	095b      	lsrs	r3, r3, #5
 801f590:	21f4      	movs	r1, #244	@ 0xf4
 801f592:	187a      	adds	r2, r7, r1
 801f594:	6013      	str	r3, [r2, #0]
 801f596:	1d7b      	adds	r3, r7, #5
 801f598:	33ff      	adds	r3, #255	@ 0xff
 801f59a:	681b      	ldr	r3, [r3, #0]
 801f59c:	221f      	movs	r2, #31
 801f59e:	4013      	ands	r3, r2
 801f5a0:	d104      	bne.n	801f5ac <USB_EPStartXfer+0x5e0>
 801f5a2:	187b      	adds	r3, r7, r1
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	3b01      	subs	r3, #1
 801f5a8:	187a      	adds	r2, r7, r1
 801f5aa:	6013      	str	r3, [r2, #0]
 801f5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5ae:	881b      	ldrh	r3, [r3, #0]
 801f5b0:	b29a      	uxth	r2, r3
 801f5b2:	23f4      	movs	r3, #244	@ 0xf4
 801f5b4:	18fb      	adds	r3, r7, r3
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	b29b      	uxth	r3, r3
 801f5ba:	029b      	lsls	r3, r3, #10
 801f5bc:	b29b      	uxth	r3, r3
 801f5be:	4313      	orrs	r3, r2
 801f5c0:	b29b      	uxth	r3, r3
 801f5c2:	4a55      	ldr	r2, [pc, #340]	@ (801f718 <USB_EPStartXfer+0x74c>)
 801f5c4:	4313      	orrs	r3, r2
 801f5c6:	b29a      	uxth	r2, r3
 801f5c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5ca:	801a      	strh	r2, [r3, #0]
 801f5cc:	e048      	b.n	801f660 <USB_EPStartXfer+0x694>
 801f5ce:	1d7b      	adds	r3, r7, #5
 801f5d0:	33ff      	adds	r3, #255	@ 0xff
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d108      	bne.n	801f5ea <USB_EPStartXfer+0x61e>
 801f5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5da:	881b      	ldrh	r3, [r3, #0]
 801f5dc:	b29b      	uxth	r3, r3
 801f5de:	4a4e      	ldr	r2, [pc, #312]	@ (801f718 <USB_EPStartXfer+0x74c>)
 801f5e0:	4313      	orrs	r3, r2
 801f5e2:	b29a      	uxth	r2, r3
 801f5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f5e6:	801a      	strh	r2, [r3, #0]
 801f5e8:	e03a      	b.n	801f660 <USB_EPStartXfer+0x694>
 801f5ea:	1d7b      	adds	r3, r7, #5
 801f5ec:	33ff      	adds	r3, #255	@ 0xff
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	085b      	lsrs	r3, r3, #1
 801f5f2:	21f4      	movs	r1, #244	@ 0xf4
 801f5f4:	187a      	adds	r2, r7, r1
 801f5f6:	6013      	str	r3, [r2, #0]
 801f5f8:	1d7b      	adds	r3, r7, #5
 801f5fa:	33ff      	adds	r3, #255	@ 0xff
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	2201      	movs	r2, #1
 801f600:	4013      	ands	r3, r2
 801f602:	d004      	beq.n	801f60e <USB_EPStartXfer+0x642>
 801f604:	187b      	adds	r3, r7, r1
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	3301      	adds	r3, #1
 801f60a:	187a      	adds	r2, r7, r1
 801f60c:	6013      	str	r3, [r2, #0]
 801f60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f610:	881b      	ldrh	r3, [r3, #0]
 801f612:	b29a      	uxth	r2, r3
 801f614:	23f4      	movs	r3, #244	@ 0xf4
 801f616:	18fb      	adds	r3, r7, r3
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	b29b      	uxth	r3, r3
 801f61c:	029b      	lsls	r3, r3, #10
 801f61e:	b29b      	uxth	r3, r3
 801f620:	4313      	orrs	r3, r2
 801f622:	b29a      	uxth	r2, r3
 801f624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f626:	801a      	strh	r2, [r3, #0]
 801f628:	e01a      	b.n	801f660 <USB_EPStartXfer+0x694>
 801f62a:	683b      	ldr	r3, [r7, #0]
 801f62c:	785b      	ldrb	r3, [r3, #1]
 801f62e:	2b01      	cmp	r3, #1
 801f630:	d116      	bne.n	801f660 <USB_EPStartXfer+0x694>
 801f632:	687b      	ldr	r3, [r7, #4]
 801f634:	2250      	movs	r2, #80	@ 0x50
 801f636:	5a9b      	ldrh	r3, [r3, r2]
 801f638:	b29b      	uxth	r3, r3
 801f63a:	001a      	movs	r2, r3
 801f63c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f63e:	189b      	adds	r3, r3, r2
 801f640:	643b      	str	r3, [r7, #64]	@ 0x40
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	781b      	ldrb	r3, [r3, #0]
 801f646:	00da      	lsls	r2, r3, #3
 801f648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f64a:	18d3      	adds	r3, r2, r3
 801f64c:	4a33      	ldr	r2, [pc, #204]	@ (801f71c <USB_EPStartXfer+0x750>)
 801f64e:	4694      	mov	ip, r2
 801f650:	4463      	add	r3, ip
 801f652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f654:	1d7b      	adds	r3, r7, #5
 801f656:	33ff      	adds	r3, #255	@ 0xff
 801f658:	681b      	ldr	r3, [r3, #0]
 801f65a:	b29a      	uxth	r2, r3
 801f65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f65e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801f660:	2076      	movs	r0, #118	@ 0x76
 801f662:	183b      	adds	r3, r7, r0
 801f664:	683a      	ldr	r2, [r7, #0]
 801f666:	8952      	ldrh	r2, [r2, #10]
 801f668:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	6959      	ldr	r1, [r3, #20]
 801f66e:	1d7b      	adds	r3, r7, #5
 801f670:	33ff      	adds	r3, #255	@ 0xff
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	b29c      	uxth	r4, r3
 801f676:	183b      	adds	r3, r7, r0
 801f678:	881a      	ldrh	r2, [r3, #0]
 801f67a:	6878      	ldr	r0, [r7, #4]
 801f67c:	0023      	movs	r3, r4
 801f67e:	f000 ff17 	bl	80204b0 <USB_WritePMA>
 801f682:	e1b6      	b.n	801f9f2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	6a1b      	ldr	r3, [r3, #32]
 801f688:	1d7a      	adds	r2, r7, #5
 801f68a:	32ff      	adds	r2, #255	@ 0xff
 801f68c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801f68e:	687a      	ldr	r2, [r7, #4]
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	781b      	ldrb	r3, [r3, #0]
 801f694:	009b      	lsls	r3, r3, #2
 801f696:	18d3      	adds	r3, r2, r3
 801f698:	881b      	ldrh	r3, [r3, #0]
 801f69a:	b29a      	uxth	r2, r3
 801f69c:	2062      	movs	r0, #98	@ 0x62
 801f69e:	183b      	adds	r3, r7, r0
 801f6a0:	491f      	ldr	r1, [pc, #124]	@ (801f720 <USB_EPStartXfer+0x754>)
 801f6a2:	400a      	ands	r2, r1
 801f6a4:	801a      	strh	r2, [r3, #0]
 801f6a6:	687a      	ldr	r2, [r7, #4]
 801f6a8:	683b      	ldr	r3, [r7, #0]
 801f6aa:	781b      	ldrb	r3, [r3, #0]
 801f6ac:	009b      	lsls	r3, r3, #2
 801f6ae:	18d3      	adds	r3, r2, r3
 801f6b0:	183a      	adds	r2, r7, r0
 801f6b2:	8812      	ldrh	r2, [r2, #0]
 801f6b4:	491b      	ldr	r1, [pc, #108]	@ (801f724 <USB_EPStartXfer+0x758>)
 801f6b6:	430a      	orrs	r2, r1
 801f6b8:	b292      	uxth	r2, r2
 801f6ba:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2250      	movs	r2, #80	@ 0x50
 801f6c4:	5a9b      	ldrh	r3, [r3, r2]
 801f6c6:	b29b      	uxth	r3, r3
 801f6c8:	001a      	movs	r2, r3
 801f6ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f6cc:	189b      	adds	r3, r3, r2
 801f6ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f6d0:	683b      	ldr	r3, [r7, #0]
 801f6d2:	781b      	ldrb	r3, [r3, #0]
 801f6d4:	00da      	lsls	r2, r3, #3
 801f6d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f6d8:	18d3      	adds	r3, r2, r3
 801f6da:	4a0e      	ldr	r2, [pc, #56]	@ (801f714 <USB_EPStartXfer+0x748>)
 801f6dc:	4694      	mov	ip, r2
 801f6de:	4463      	add	r3, ip
 801f6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f6e2:	1d7b      	adds	r3, r7, #5
 801f6e4:	33ff      	adds	r3, #255	@ 0xff
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	b29a      	uxth	r2, r3
 801f6ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f6ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f6ee:	2076      	movs	r0, #118	@ 0x76
 801f6f0:	183b      	adds	r3, r7, r0
 801f6f2:	683a      	ldr	r2, [r7, #0]
 801f6f4:	8912      	ldrh	r2, [r2, #8]
 801f6f6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f6f8:	683b      	ldr	r3, [r7, #0]
 801f6fa:	6959      	ldr	r1, [r3, #20]
 801f6fc:	1d7b      	adds	r3, r7, #5
 801f6fe:	33ff      	adds	r3, #255	@ 0xff
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	b29c      	uxth	r4, r3
 801f704:	183b      	adds	r3, r7, r0
 801f706:	881a      	ldrh	r2, [r3, #0]
 801f708:	6878      	ldr	r0, [r7, #4]
 801f70a:	0023      	movs	r3, r4
 801f70c:	f000 fed0 	bl	80204b0 <USB_WritePMA>
 801f710:	e16f      	b.n	801f9f2 <USB_EPStartXfer+0xa26>
 801f712:	46c0      	nop			@ (mov r8, r8)
 801f714:	00000402 	.word	0x00000402
 801f718:	ffff8000 	.word	0xffff8000
 801f71c:	00000406 	.word	0x00000406
 801f720:	ffff8e8f 	.word	0xffff8e8f
 801f724:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801f728:	683b      	ldr	r3, [r7, #0]
 801f72a:	6a1a      	ldr	r2, [r3, #32]
 801f72c:	1d7b      	adds	r3, r7, #5
 801f72e:	33ff      	adds	r3, #255	@ 0xff
 801f730:	681b      	ldr	r3, [r3, #0]
 801f732:	1ad2      	subs	r2, r2, r3
 801f734:	683b      	ldr	r3, [r7, #0]
 801f736:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801f738:	687a      	ldr	r2, [r7, #4]
 801f73a:	683b      	ldr	r3, [r7, #0]
 801f73c:	781b      	ldrb	r3, [r3, #0]
 801f73e:	009b      	lsls	r3, r3, #2
 801f740:	18d3      	adds	r3, r2, r3
 801f742:	881b      	ldrh	r3, [r3, #0]
 801f744:	b29b      	uxth	r3, r3
 801f746:	001a      	movs	r2, r3
 801f748:	2340      	movs	r3, #64	@ 0x40
 801f74a:	4013      	ands	r3, r2
 801f74c:	d100      	bne.n	801f750 <USB_EPStartXfer+0x784>
 801f74e:	e0a4      	b.n	801f89a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	673b      	str	r3, [r7, #112]	@ 0x70
 801f754:	683b      	ldr	r3, [r7, #0]
 801f756:	785b      	ldrb	r3, [r3, #1]
 801f758:	2b00      	cmp	r3, #0
 801f75a:	d000      	beq.n	801f75e <USB_EPStartXfer+0x792>
 801f75c:	e070      	b.n	801f840 <USB_EPStartXfer+0x874>
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	2250      	movs	r2, #80	@ 0x50
 801f766:	5a9b      	ldrh	r3, [r3, r2]
 801f768:	b29b      	uxth	r3, r3
 801f76a:	001a      	movs	r2, r3
 801f76c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f76e:	189b      	adds	r3, r3, r2
 801f770:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f772:	683b      	ldr	r3, [r7, #0]
 801f774:	781b      	ldrb	r3, [r3, #0]
 801f776:	00da      	lsls	r2, r3, #3
 801f778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f77a:	18d3      	adds	r3, r2, r3
 801f77c:	4abc      	ldr	r2, [pc, #752]	@ (801fa70 <USB_EPStartXfer+0xaa4>)
 801f77e:	4694      	mov	ip, r2
 801f780:	4463      	add	r3, ip
 801f782:	667b      	str	r3, [r7, #100]	@ 0x64
 801f784:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f786:	881b      	ldrh	r3, [r3, #0]
 801f788:	b29b      	uxth	r3, r3
 801f78a:	059b      	lsls	r3, r3, #22
 801f78c:	0d9b      	lsrs	r3, r3, #22
 801f78e:	b29a      	uxth	r2, r3
 801f790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f792:	801a      	strh	r2, [r3, #0]
 801f794:	1d7b      	adds	r3, r7, #5
 801f796:	33ff      	adds	r3, #255	@ 0xff
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	2b3e      	cmp	r3, #62	@ 0x3e
 801f79c:	d922      	bls.n	801f7e4 <USB_EPStartXfer+0x818>
 801f79e:	1d7b      	adds	r3, r7, #5
 801f7a0:	33ff      	adds	r3, #255	@ 0xff
 801f7a2:	681b      	ldr	r3, [r3, #0]
 801f7a4:	095b      	lsrs	r3, r3, #5
 801f7a6:	21f0      	movs	r1, #240	@ 0xf0
 801f7a8:	187a      	adds	r2, r7, r1
 801f7aa:	6013      	str	r3, [r2, #0]
 801f7ac:	1d7b      	adds	r3, r7, #5
 801f7ae:	33ff      	adds	r3, #255	@ 0xff
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	221f      	movs	r2, #31
 801f7b4:	4013      	ands	r3, r2
 801f7b6:	d104      	bne.n	801f7c2 <USB_EPStartXfer+0x7f6>
 801f7b8:	187b      	adds	r3, r7, r1
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	3b01      	subs	r3, #1
 801f7be:	187a      	adds	r2, r7, r1
 801f7c0:	6013      	str	r3, [r2, #0]
 801f7c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7c4:	881b      	ldrh	r3, [r3, #0]
 801f7c6:	b29a      	uxth	r2, r3
 801f7c8:	23f0      	movs	r3, #240	@ 0xf0
 801f7ca:	18fb      	adds	r3, r7, r3
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	b29b      	uxth	r3, r3
 801f7d0:	029b      	lsls	r3, r3, #10
 801f7d2:	b29b      	uxth	r3, r3
 801f7d4:	4313      	orrs	r3, r2
 801f7d6:	b29b      	uxth	r3, r3
 801f7d8:	4aa6      	ldr	r2, [pc, #664]	@ (801fa74 <USB_EPStartXfer+0xaa8>)
 801f7da:	4313      	orrs	r3, r2
 801f7dc:	b29a      	uxth	r2, r3
 801f7de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7e0:	801a      	strh	r2, [r3, #0]
 801f7e2:	e048      	b.n	801f876 <USB_EPStartXfer+0x8aa>
 801f7e4:	1d7b      	adds	r3, r7, #5
 801f7e6:	33ff      	adds	r3, #255	@ 0xff
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d108      	bne.n	801f800 <USB_EPStartXfer+0x834>
 801f7ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7f0:	881b      	ldrh	r3, [r3, #0]
 801f7f2:	b29b      	uxth	r3, r3
 801f7f4:	4a9f      	ldr	r2, [pc, #636]	@ (801fa74 <USB_EPStartXfer+0xaa8>)
 801f7f6:	4313      	orrs	r3, r2
 801f7f8:	b29a      	uxth	r2, r3
 801f7fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f7fc:	801a      	strh	r2, [r3, #0]
 801f7fe:	e03a      	b.n	801f876 <USB_EPStartXfer+0x8aa>
 801f800:	1d7b      	adds	r3, r7, #5
 801f802:	33ff      	adds	r3, #255	@ 0xff
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	085b      	lsrs	r3, r3, #1
 801f808:	21f0      	movs	r1, #240	@ 0xf0
 801f80a:	187a      	adds	r2, r7, r1
 801f80c:	6013      	str	r3, [r2, #0]
 801f80e:	1d7b      	adds	r3, r7, #5
 801f810:	33ff      	adds	r3, #255	@ 0xff
 801f812:	681b      	ldr	r3, [r3, #0]
 801f814:	2201      	movs	r2, #1
 801f816:	4013      	ands	r3, r2
 801f818:	d004      	beq.n	801f824 <USB_EPStartXfer+0x858>
 801f81a:	187b      	adds	r3, r7, r1
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	3301      	adds	r3, #1
 801f820:	187a      	adds	r2, r7, r1
 801f822:	6013      	str	r3, [r2, #0]
 801f824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f826:	881b      	ldrh	r3, [r3, #0]
 801f828:	b29a      	uxth	r2, r3
 801f82a:	23f0      	movs	r3, #240	@ 0xf0
 801f82c:	18fb      	adds	r3, r7, r3
 801f82e:	681b      	ldr	r3, [r3, #0]
 801f830:	b29b      	uxth	r3, r3
 801f832:	029b      	lsls	r3, r3, #10
 801f834:	b29b      	uxth	r3, r3
 801f836:	4313      	orrs	r3, r2
 801f838:	b29a      	uxth	r2, r3
 801f83a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801f83c:	801a      	strh	r2, [r3, #0]
 801f83e:	e01a      	b.n	801f876 <USB_EPStartXfer+0x8aa>
 801f840:	683b      	ldr	r3, [r7, #0]
 801f842:	785b      	ldrb	r3, [r3, #1]
 801f844:	2b01      	cmp	r3, #1
 801f846:	d116      	bne.n	801f876 <USB_EPStartXfer+0x8aa>
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	2250      	movs	r2, #80	@ 0x50
 801f84c:	5a9b      	ldrh	r3, [r3, r2]
 801f84e:	b29b      	uxth	r3, r3
 801f850:	001a      	movs	r2, r3
 801f852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f854:	189b      	adds	r3, r3, r2
 801f856:	673b      	str	r3, [r7, #112]	@ 0x70
 801f858:	683b      	ldr	r3, [r7, #0]
 801f85a:	781b      	ldrb	r3, [r3, #0]
 801f85c:	00da      	lsls	r2, r3, #3
 801f85e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801f860:	18d3      	adds	r3, r2, r3
 801f862:	4a83      	ldr	r2, [pc, #524]	@ (801fa70 <USB_EPStartXfer+0xaa4>)
 801f864:	4694      	mov	ip, r2
 801f866:	4463      	add	r3, ip
 801f868:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801f86a:	1d7b      	adds	r3, r7, #5
 801f86c:	33ff      	adds	r3, #255	@ 0xff
 801f86e:	681b      	ldr	r3, [r3, #0]
 801f870:	b29a      	uxth	r2, r3
 801f872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801f874:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801f876:	2076      	movs	r0, #118	@ 0x76
 801f878:	183b      	adds	r3, r7, r0
 801f87a:	683a      	ldr	r2, [r7, #0]
 801f87c:	8952      	ldrh	r2, [r2, #10]
 801f87e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f880:	683b      	ldr	r3, [r7, #0]
 801f882:	6959      	ldr	r1, [r3, #20]
 801f884:	1d7b      	adds	r3, r7, #5
 801f886:	33ff      	adds	r3, #255	@ 0xff
 801f888:	681b      	ldr	r3, [r3, #0]
 801f88a:	b29c      	uxth	r4, r3
 801f88c:	183b      	adds	r3, r7, r0
 801f88e:	881a      	ldrh	r2, [r3, #0]
 801f890:	6878      	ldr	r0, [r7, #4]
 801f892:	0023      	movs	r3, r4
 801f894:	f000 fe0c 	bl	80204b0 <USB_WritePMA>
 801f898:	e0ab      	b.n	801f9f2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801f89a:	683b      	ldr	r3, [r7, #0]
 801f89c:	785b      	ldrb	r3, [r3, #1]
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d000      	beq.n	801f8a4 <USB_EPStartXfer+0x8d8>
 801f8a2:	e070      	b.n	801f986 <USB_EPStartXfer+0x9ba>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	2250      	movs	r2, #80	@ 0x50
 801f8ac:	5a9b      	ldrh	r3, [r3, r2]
 801f8ae:	b29b      	uxth	r3, r3
 801f8b0:	001a      	movs	r2, r3
 801f8b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f8b4:	189b      	adds	r3, r3, r2
 801f8b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f8b8:	683b      	ldr	r3, [r7, #0]
 801f8ba:	781b      	ldrb	r3, [r3, #0]
 801f8bc:	00da      	lsls	r2, r3, #3
 801f8be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801f8c0:	18d3      	adds	r3, r2, r3
 801f8c2:	4a6d      	ldr	r2, [pc, #436]	@ (801fa78 <USB_EPStartXfer+0xaac>)
 801f8c4:	4694      	mov	ip, r2
 801f8c6:	4463      	add	r3, ip
 801f8c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 801f8ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f8cc:	881b      	ldrh	r3, [r3, #0]
 801f8ce:	b29b      	uxth	r3, r3
 801f8d0:	059b      	lsls	r3, r3, #22
 801f8d2:	0d9b      	lsrs	r3, r3, #22
 801f8d4:	b29a      	uxth	r2, r3
 801f8d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f8d8:	801a      	strh	r2, [r3, #0]
 801f8da:	1d7b      	adds	r3, r7, #5
 801f8dc:	33ff      	adds	r3, #255	@ 0xff
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	2b3e      	cmp	r3, #62	@ 0x3e
 801f8e2:	d922      	bls.n	801f92a <USB_EPStartXfer+0x95e>
 801f8e4:	1d7b      	adds	r3, r7, #5
 801f8e6:	33ff      	adds	r3, #255	@ 0xff
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	095b      	lsrs	r3, r3, #5
 801f8ec:	21ec      	movs	r1, #236	@ 0xec
 801f8ee:	187a      	adds	r2, r7, r1
 801f8f0:	6013      	str	r3, [r2, #0]
 801f8f2:	1d7b      	adds	r3, r7, #5
 801f8f4:	33ff      	adds	r3, #255	@ 0xff
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	221f      	movs	r2, #31
 801f8fa:	4013      	ands	r3, r2
 801f8fc:	d104      	bne.n	801f908 <USB_EPStartXfer+0x93c>
 801f8fe:	187b      	adds	r3, r7, r1
 801f900:	681b      	ldr	r3, [r3, #0]
 801f902:	3b01      	subs	r3, #1
 801f904:	187a      	adds	r2, r7, r1
 801f906:	6013      	str	r3, [r2, #0]
 801f908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f90a:	881b      	ldrh	r3, [r3, #0]
 801f90c:	b29a      	uxth	r2, r3
 801f90e:	23ec      	movs	r3, #236	@ 0xec
 801f910:	18fb      	adds	r3, r7, r3
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	b29b      	uxth	r3, r3
 801f916:	029b      	lsls	r3, r3, #10
 801f918:	b29b      	uxth	r3, r3
 801f91a:	4313      	orrs	r3, r2
 801f91c:	b29b      	uxth	r3, r3
 801f91e:	4a55      	ldr	r2, [pc, #340]	@ (801fa74 <USB_EPStartXfer+0xaa8>)
 801f920:	4313      	orrs	r3, r2
 801f922:	b29a      	uxth	r2, r3
 801f924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f926:	801a      	strh	r2, [r3, #0]
 801f928:	e052      	b.n	801f9d0 <USB_EPStartXfer+0xa04>
 801f92a:	1d7b      	adds	r3, r7, #5
 801f92c:	33ff      	adds	r3, #255	@ 0xff
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	2b00      	cmp	r3, #0
 801f932:	d108      	bne.n	801f946 <USB_EPStartXfer+0x97a>
 801f934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f936:	881b      	ldrh	r3, [r3, #0]
 801f938:	b29b      	uxth	r3, r3
 801f93a:	4a4e      	ldr	r2, [pc, #312]	@ (801fa74 <USB_EPStartXfer+0xaa8>)
 801f93c:	4313      	orrs	r3, r2
 801f93e:	b29a      	uxth	r2, r3
 801f940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f942:	801a      	strh	r2, [r3, #0]
 801f944:	e044      	b.n	801f9d0 <USB_EPStartXfer+0xa04>
 801f946:	1d7b      	adds	r3, r7, #5
 801f948:	33ff      	adds	r3, #255	@ 0xff
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	085b      	lsrs	r3, r3, #1
 801f94e:	21ec      	movs	r1, #236	@ 0xec
 801f950:	187a      	adds	r2, r7, r1
 801f952:	6013      	str	r3, [r2, #0]
 801f954:	1d7b      	adds	r3, r7, #5
 801f956:	33ff      	adds	r3, #255	@ 0xff
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	2201      	movs	r2, #1
 801f95c:	4013      	ands	r3, r2
 801f95e:	d004      	beq.n	801f96a <USB_EPStartXfer+0x99e>
 801f960:	187b      	adds	r3, r7, r1
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	3301      	adds	r3, #1
 801f966:	187a      	adds	r2, r7, r1
 801f968:	6013      	str	r3, [r2, #0]
 801f96a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f96c:	881b      	ldrh	r3, [r3, #0]
 801f96e:	b29a      	uxth	r2, r3
 801f970:	23ec      	movs	r3, #236	@ 0xec
 801f972:	18fb      	adds	r3, r7, r3
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	b29b      	uxth	r3, r3
 801f978:	029b      	lsls	r3, r3, #10
 801f97a:	b29b      	uxth	r3, r3
 801f97c:	4313      	orrs	r3, r2
 801f97e:	b29a      	uxth	r2, r3
 801f980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801f982:	801a      	strh	r2, [r3, #0]
 801f984:	e024      	b.n	801f9d0 <USB_EPStartXfer+0xa04>
 801f986:	683b      	ldr	r3, [r7, #0]
 801f988:	785b      	ldrb	r3, [r3, #1]
 801f98a:	2b01      	cmp	r3, #1
 801f98c:	d120      	bne.n	801f9d0 <USB_EPStartXfer+0xa04>
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	2184      	movs	r1, #132	@ 0x84
 801f992:	187a      	adds	r2, r7, r1
 801f994:	6013      	str	r3, [r2, #0]
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2250      	movs	r2, #80	@ 0x50
 801f99a:	5a9b      	ldrh	r3, [r3, r2]
 801f99c:	b29b      	uxth	r3, r3
 801f99e:	001a      	movs	r2, r3
 801f9a0:	187b      	adds	r3, r7, r1
 801f9a2:	681b      	ldr	r3, [r3, #0]
 801f9a4:	189b      	adds	r3, r3, r2
 801f9a6:	187a      	adds	r2, r7, r1
 801f9a8:	6013      	str	r3, [r2, #0]
 801f9aa:	683b      	ldr	r3, [r7, #0]
 801f9ac:	781b      	ldrb	r3, [r3, #0]
 801f9ae:	00da      	lsls	r2, r3, #3
 801f9b0:	187b      	adds	r3, r7, r1
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	18d3      	adds	r3, r2, r3
 801f9b6:	4a30      	ldr	r2, [pc, #192]	@ (801fa78 <USB_EPStartXfer+0xaac>)
 801f9b8:	4694      	mov	ip, r2
 801f9ba:	4463      	add	r3, ip
 801f9bc:	2180      	movs	r1, #128	@ 0x80
 801f9be:	187a      	adds	r2, r7, r1
 801f9c0:	6013      	str	r3, [r2, #0]
 801f9c2:	1d7b      	adds	r3, r7, #5
 801f9c4:	33ff      	adds	r3, #255	@ 0xff
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	b29a      	uxth	r2, r3
 801f9ca:	187b      	adds	r3, r7, r1
 801f9cc:	681b      	ldr	r3, [r3, #0]
 801f9ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801f9d0:	2076      	movs	r0, #118	@ 0x76
 801f9d2:	183b      	adds	r3, r7, r0
 801f9d4:	683a      	ldr	r2, [r7, #0]
 801f9d6:	8912      	ldrh	r2, [r2, #8]
 801f9d8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801f9da:	683b      	ldr	r3, [r7, #0]
 801f9dc:	6959      	ldr	r1, [r3, #20]
 801f9de:	1d7b      	adds	r3, r7, #5
 801f9e0:	33ff      	adds	r3, #255	@ 0xff
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	b29c      	uxth	r4, r3
 801f9e6:	183b      	adds	r3, r7, r0
 801f9e8:	881a      	ldrh	r2, [r3, #0]
 801f9ea:	6878      	ldr	r0, [r7, #4]
 801f9ec:	0023      	movs	r3, r4
 801f9ee:	f000 fd5f 	bl	80204b0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801f9f2:	687a      	ldr	r2, [r7, #4]
 801f9f4:	683b      	ldr	r3, [r7, #0]
 801f9f6:	781b      	ldrb	r3, [r3, #0]
 801f9f8:	009b      	lsls	r3, r3, #2
 801f9fa:	18d3      	adds	r3, r2, r3
 801f9fc:	881b      	ldrh	r3, [r3, #0]
 801f9fe:	b29a      	uxth	r2, r3
 801fa00:	200a      	movs	r0, #10
 801fa02:	183b      	adds	r3, r7, r0
 801fa04:	491d      	ldr	r1, [pc, #116]	@ (801fa7c <USB_EPStartXfer+0xab0>)
 801fa06:	400a      	ands	r2, r1
 801fa08:	801a      	strh	r2, [r3, #0]
 801fa0a:	183b      	adds	r3, r7, r0
 801fa0c:	183a      	adds	r2, r7, r0
 801fa0e:	8812      	ldrh	r2, [r2, #0]
 801fa10:	2110      	movs	r1, #16
 801fa12:	404a      	eors	r2, r1
 801fa14:	801a      	strh	r2, [r3, #0]
 801fa16:	183b      	adds	r3, r7, r0
 801fa18:	183a      	adds	r2, r7, r0
 801fa1a:	8812      	ldrh	r2, [r2, #0]
 801fa1c:	2120      	movs	r1, #32
 801fa1e:	404a      	eors	r2, r1
 801fa20:	801a      	strh	r2, [r3, #0]
 801fa22:	687a      	ldr	r2, [r7, #4]
 801fa24:	683b      	ldr	r3, [r7, #0]
 801fa26:	781b      	ldrb	r3, [r3, #0]
 801fa28:	009b      	lsls	r3, r3, #2
 801fa2a:	18d3      	adds	r3, r2, r3
 801fa2c:	183a      	adds	r2, r7, r0
 801fa2e:	8812      	ldrh	r2, [r2, #0]
 801fa30:	4913      	ldr	r1, [pc, #76]	@ (801fa80 <USB_EPStartXfer+0xab4>)
 801fa32:	430a      	orrs	r2, r1
 801fa34:	b292      	uxth	r2, r2
 801fa36:	801a      	strh	r2, [r3, #0]
 801fa38:	f000 fbf4 	bl	8020224 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801fa3c:	683b      	ldr	r3, [r7, #0]
 801fa3e:	7b1b      	ldrb	r3, [r3, #12]
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d000      	beq.n	801fa46 <USB_EPStartXfer+0xa7a>
 801fa44:	e0a9      	b.n	801fb9a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801fa46:	683b      	ldr	r3, [r7, #0]
 801fa48:	699a      	ldr	r2, [r3, #24]
 801fa4a:	683b      	ldr	r3, [r7, #0]
 801fa4c:	691b      	ldr	r3, [r3, #16]
 801fa4e:	429a      	cmp	r2, r3
 801fa50:	d918      	bls.n	801fa84 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801fa52:	683b      	ldr	r3, [r7, #0]
 801fa54:	691b      	ldr	r3, [r3, #16]
 801fa56:	1d7a      	adds	r2, r7, #5
 801fa58:	32ff      	adds	r2, #255	@ 0xff
 801fa5a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801fa5c:	683b      	ldr	r3, [r7, #0]
 801fa5e:	699a      	ldr	r2, [r3, #24]
 801fa60:	1d7b      	adds	r3, r7, #5
 801fa62:	33ff      	adds	r3, #255	@ 0xff
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	1ad2      	subs	r2, r2, r3
 801fa68:	683b      	ldr	r3, [r7, #0]
 801fa6a:	619a      	str	r2, [r3, #24]
 801fa6c:	e012      	b.n	801fa94 <USB_EPStartXfer+0xac8>
 801fa6e:	46c0      	nop			@ (mov r8, r8)
 801fa70:	00000406 	.word	0x00000406
 801fa74:	ffff8000 	.word	0xffff8000
 801fa78:	00000402 	.word	0x00000402
 801fa7c:	ffff8fbf 	.word	0xffff8fbf
 801fa80:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801fa84:	683b      	ldr	r3, [r7, #0]
 801fa86:	699b      	ldr	r3, [r3, #24]
 801fa88:	1d7a      	adds	r2, r7, #5
 801fa8a:	32ff      	adds	r2, #255	@ 0xff
 801fa8c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801fa8e:	683b      	ldr	r3, [r7, #0]
 801fa90:	2200      	movs	r2, #0
 801fa92:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	2190      	movs	r1, #144	@ 0x90
 801fa98:	187a      	adds	r2, r7, r1
 801fa9a:	6013      	str	r3, [r2, #0]
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	2250      	movs	r2, #80	@ 0x50
 801faa0:	5a9b      	ldrh	r3, [r3, r2]
 801faa2:	b29b      	uxth	r3, r3
 801faa4:	001a      	movs	r2, r3
 801faa6:	187b      	adds	r3, r7, r1
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	189b      	adds	r3, r3, r2
 801faac:	187a      	adds	r2, r7, r1
 801faae:	6013      	str	r3, [r2, #0]
 801fab0:	683b      	ldr	r3, [r7, #0]
 801fab2:	781b      	ldrb	r3, [r3, #0]
 801fab4:	00da      	lsls	r2, r3, #3
 801fab6:	187b      	adds	r3, r7, r1
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	18d3      	adds	r3, r2, r3
 801fabc:	4acf      	ldr	r2, [pc, #828]	@ (801fdfc <USB_EPStartXfer+0xe30>)
 801fabe:	4694      	mov	ip, r2
 801fac0:	4463      	add	r3, ip
 801fac2:	218c      	movs	r1, #140	@ 0x8c
 801fac4:	187a      	adds	r2, r7, r1
 801fac6:	6013      	str	r3, [r2, #0]
 801fac8:	187b      	adds	r3, r7, r1
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	881b      	ldrh	r3, [r3, #0]
 801face:	b29b      	uxth	r3, r3
 801fad0:	059b      	lsls	r3, r3, #22
 801fad2:	0d9b      	lsrs	r3, r3, #22
 801fad4:	b29a      	uxth	r2, r3
 801fad6:	187b      	adds	r3, r7, r1
 801fad8:	681b      	ldr	r3, [r3, #0]
 801fada:	801a      	strh	r2, [r3, #0]
 801fadc:	1d7b      	adds	r3, r7, #5
 801fade:	33ff      	adds	r3, #255	@ 0xff
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	2b3e      	cmp	r3, #62	@ 0x3e
 801fae4:	d925      	bls.n	801fb32 <USB_EPStartXfer+0xb66>
 801fae6:	1d7b      	adds	r3, r7, #5
 801fae8:	33ff      	adds	r3, #255	@ 0xff
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	095b      	lsrs	r3, r3, #5
 801faee:	21e8      	movs	r1, #232	@ 0xe8
 801faf0:	187a      	adds	r2, r7, r1
 801faf2:	6013      	str	r3, [r2, #0]
 801faf4:	1d7b      	adds	r3, r7, #5
 801faf6:	33ff      	adds	r3, #255	@ 0xff
 801faf8:	681b      	ldr	r3, [r3, #0]
 801fafa:	221f      	movs	r2, #31
 801fafc:	4013      	ands	r3, r2
 801fafe:	d104      	bne.n	801fb0a <USB_EPStartXfer+0xb3e>
 801fb00:	187b      	adds	r3, r7, r1
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	3b01      	subs	r3, #1
 801fb06:	187a      	adds	r2, r7, r1
 801fb08:	6013      	str	r3, [r2, #0]
 801fb0a:	218c      	movs	r1, #140	@ 0x8c
 801fb0c:	187b      	adds	r3, r7, r1
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	881b      	ldrh	r3, [r3, #0]
 801fb12:	b29a      	uxth	r2, r3
 801fb14:	23e8      	movs	r3, #232	@ 0xe8
 801fb16:	18fb      	adds	r3, r7, r3
 801fb18:	681b      	ldr	r3, [r3, #0]
 801fb1a:	b29b      	uxth	r3, r3
 801fb1c:	029b      	lsls	r3, r3, #10
 801fb1e:	b29b      	uxth	r3, r3
 801fb20:	4313      	orrs	r3, r2
 801fb22:	b29b      	uxth	r3, r3
 801fb24:	4ab6      	ldr	r2, [pc, #728]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fb26:	4313      	orrs	r3, r2
 801fb28:	b29a      	uxth	r2, r3
 801fb2a:	187b      	adds	r3, r7, r1
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	801a      	strh	r2, [r3, #0]
 801fb30:	e353      	b.n	80201da <USB_EPStartXfer+0x120e>
 801fb32:	1d7b      	adds	r3, r7, #5
 801fb34:	33ff      	adds	r3, #255	@ 0xff
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d10b      	bne.n	801fb54 <USB_EPStartXfer+0xb88>
 801fb3c:	218c      	movs	r1, #140	@ 0x8c
 801fb3e:	187b      	adds	r3, r7, r1
 801fb40:	681b      	ldr	r3, [r3, #0]
 801fb42:	881b      	ldrh	r3, [r3, #0]
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	4aae      	ldr	r2, [pc, #696]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fb48:	4313      	orrs	r3, r2
 801fb4a:	b29a      	uxth	r2, r3
 801fb4c:	187b      	adds	r3, r7, r1
 801fb4e:	681b      	ldr	r3, [r3, #0]
 801fb50:	801a      	strh	r2, [r3, #0]
 801fb52:	e342      	b.n	80201da <USB_EPStartXfer+0x120e>
 801fb54:	1d7b      	adds	r3, r7, #5
 801fb56:	33ff      	adds	r3, #255	@ 0xff
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	085b      	lsrs	r3, r3, #1
 801fb5c:	21e8      	movs	r1, #232	@ 0xe8
 801fb5e:	187a      	adds	r2, r7, r1
 801fb60:	6013      	str	r3, [r2, #0]
 801fb62:	1d7b      	adds	r3, r7, #5
 801fb64:	33ff      	adds	r3, #255	@ 0xff
 801fb66:	681b      	ldr	r3, [r3, #0]
 801fb68:	2201      	movs	r2, #1
 801fb6a:	4013      	ands	r3, r2
 801fb6c:	d004      	beq.n	801fb78 <USB_EPStartXfer+0xbac>
 801fb6e:	187b      	adds	r3, r7, r1
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	3301      	adds	r3, #1
 801fb74:	187a      	adds	r2, r7, r1
 801fb76:	6013      	str	r3, [r2, #0]
 801fb78:	218c      	movs	r1, #140	@ 0x8c
 801fb7a:	187b      	adds	r3, r7, r1
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	881b      	ldrh	r3, [r3, #0]
 801fb80:	b29a      	uxth	r2, r3
 801fb82:	23e8      	movs	r3, #232	@ 0xe8
 801fb84:	18fb      	adds	r3, r7, r3
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	b29b      	uxth	r3, r3
 801fb8a:	029b      	lsls	r3, r3, #10
 801fb8c:	b29b      	uxth	r3, r3
 801fb8e:	4313      	orrs	r3, r2
 801fb90:	b29a      	uxth	r2, r3
 801fb92:	187b      	adds	r3, r7, r1
 801fb94:	681b      	ldr	r3, [r3, #0]
 801fb96:	801a      	strh	r2, [r3, #0]
 801fb98:	e31f      	b.n	80201da <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801fb9a:	683b      	ldr	r3, [r7, #0]
 801fb9c:	78db      	ldrb	r3, [r3, #3]
 801fb9e:	2b02      	cmp	r3, #2
 801fba0:	d000      	beq.n	801fba4 <USB_EPStartXfer+0xbd8>
 801fba2:	e191      	b.n	801fec8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801fba4:	683b      	ldr	r3, [r7, #0]
 801fba6:	785b      	ldrb	r3, [r3, #1]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d000      	beq.n	801fbae <USB_EPStartXfer+0xbe2>
 801fbac:	e07c      	b.n	801fca8 <USB_EPStartXfer+0xcdc>
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	21ac      	movs	r1, #172	@ 0xac
 801fbb2:	187a      	adds	r2, r7, r1
 801fbb4:	6013      	str	r3, [r2, #0]
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	2250      	movs	r2, #80	@ 0x50
 801fbba:	5a9b      	ldrh	r3, [r3, r2]
 801fbbc:	b29b      	uxth	r3, r3
 801fbbe:	001a      	movs	r2, r3
 801fbc0:	187b      	adds	r3, r7, r1
 801fbc2:	681b      	ldr	r3, [r3, #0]
 801fbc4:	189b      	adds	r3, r3, r2
 801fbc6:	187a      	adds	r2, r7, r1
 801fbc8:	6013      	str	r3, [r2, #0]
 801fbca:	683b      	ldr	r3, [r7, #0]
 801fbcc:	781b      	ldrb	r3, [r3, #0]
 801fbce:	00da      	lsls	r2, r3, #3
 801fbd0:	187b      	adds	r3, r7, r1
 801fbd2:	681b      	ldr	r3, [r3, #0]
 801fbd4:	18d3      	adds	r3, r2, r3
 801fbd6:	4a8b      	ldr	r2, [pc, #556]	@ (801fe04 <USB_EPStartXfer+0xe38>)
 801fbd8:	4694      	mov	ip, r2
 801fbda:	4463      	add	r3, ip
 801fbdc:	21a8      	movs	r1, #168	@ 0xa8
 801fbde:	187a      	adds	r2, r7, r1
 801fbe0:	6013      	str	r3, [r2, #0]
 801fbe2:	187b      	adds	r3, r7, r1
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	881b      	ldrh	r3, [r3, #0]
 801fbe8:	b29b      	uxth	r3, r3
 801fbea:	059b      	lsls	r3, r3, #22
 801fbec:	0d9b      	lsrs	r3, r3, #22
 801fbee:	b29a      	uxth	r2, r3
 801fbf0:	187b      	adds	r3, r7, r1
 801fbf2:	681b      	ldr	r3, [r3, #0]
 801fbf4:	801a      	strh	r2, [r3, #0]
 801fbf6:	683b      	ldr	r3, [r7, #0]
 801fbf8:	691b      	ldr	r3, [r3, #16]
 801fbfa:	2b3e      	cmp	r3, #62	@ 0x3e
 801fbfc:	d923      	bls.n	801fc46 <USB_EPStartXfer+0xc7a>
 801fbfe:	683b      	ldr	r3, [r7, #0]
 801fc00:	691b      	ldr	r3, [r3, #16]
 801fc02:	095b      	lsrs	r3, r3, #5
 801fc04:	21e4      	movs	r1, #228	@ 0xe4
 801fc06:	187a      	adds	r2, r7, r1
 801fc08:	6013      	str	r3, [r2, #0]
 801fc0a:	683b      	ldr	r3, [r7, #0]
 801fc0c:	691b      	ldr	r3, [r3, #16]
 801fc0e:	221f      	movs	r2, #31
 801fc10:	4013      	ands	r3, r2
 801fc12:	d104      	bne.n	801fc1e <USB_EPStartXfer+0xc52>
 801fc14:	187b      	adds	r3, r7, r1
 801fc16:	681b      	ldr	r3, [r3, #0]
 801fc18:	3b01      	subs	r3, #1
 801fc1a:	187a      	adds	r2, r7, r1
 801fc1c:	6013      	str	r3, [r2, #0]
 801fc1e:	21a8      	movs	r1, #168	@ 0xa8
 801fc20:	187b      	adds	r3, r7, r1
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	881b      	ldrh	r3, [r3, #0]
 801fc26:	b29a      	uxth	r2, r3
 801fc28:	23e4      	movs	r3, #228	@ 0xe4
 801fc2a:	18fb      	adds	r3, r7, r3
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	b29b      	uxth	r3, r3
 801fc30:	029b      	lsls	r3, r3, #10
 801fc32:	b29b      	uxth	r3, r3
 801fc34:	4313      	orrs	r3, r2
 801fc36:	b29b      	uxth	r3, r3
 801fc38:	4a71      	ldr	r2, [pc, #452]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fc3a:	4313      	orrs	r3, r2
 801fc3c:	b29a      	uxth	r2, r3
 801fc3e:	187b      	adds	r3, r7, r1
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	801a      	strh	r2, [r3, #0]
 801fc44:	e054      	b.n	801fcf0 <USB_EPStartXfer+0xd24>
 801fc46:	683b      	ldr	r3, [r7, #0]
 801fc48:	691b      	ldr	r3, [r3, #16]
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d10b      	bne.n	801fc66 <USB_EPStartXfer+0xc9a>
 801fc4e:	21a8      	movs	r1, #168	@ 0xa8
 801fc50:	187b      	adds	r3, r7, r1
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	881b      	ldrh	r3, [r3, #0]
 801fc56:	b29b      	uxth	r3, r3
 801fc58:	4a69      	ldr	r2, [pc, #420]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fc5a:	4313      	orrs	r3, r2
 801fc5c:	b29a      	uxth	r2, r3
 801fc5e:	187b      	adds	r3, r7, r1
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	801a      	strh	r2, [r3, #0]
 801fc64:	e044      	b.n	801fcf0 <USB_EPStartXfer+0xd24>
 801fc66:	683b      	ldr	r3, [r7, #0]
 801fc68:	691b      	ldr	r3, [r3, #16]
 801fc6a:	085b      	lsrs	r3, r3, #1
 801fc6c:	21e4      	movs	r1, #228	@ 0xe4
 801fc6e:	187a      	adds	r2, r7, r1
 801fc70:	6013      	str	r3, [r2, #0]
 801fc72:	683b      	ldr	r3, [r7, #0]
 801fc74:	691b      	ldr	r3, [r3, #16]
 801fc76:	2201      	movs	r2, #1
 801fc78:	4013      	ands	r3, r2
 801fc7a:	d004      	beq.n	801fc86 <USB_EPStartXfer+0xcba>
 801fc7c:	187b      	adds	r3, r7, r1
 801fc7e:	681b      	ldr	r3, [r3, #0]
 801fc80:	3301      	adds	r3, #1
 801fc82:	187a      	adds	r2, r7, r1
 801fc84:	6013      	str	r3, [r2, #0]
 801fc86:	21a8      	movs	r1, #168	@ 0xa8
 801fc88:	187b      	adds	r3, r7, r1
 801fc8a:	681b      	ldr	r3, [r3, #0]
 801fc8c:	881b      	ldrh	r3, [r3, #0]
 801fc8e:	b29a      	uxth	r2, r3
 801fc90:	23e4      	movs	r3, #228	@ 0xe4
 801fc92:	18fb      	adds	r3, r7, r3
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	b29b      	uxth	r3, r3
 801fc98:	029b      	lsls	r3, r3, #10
 801fc9a:	b29b      	uxth	r3, r3
 801fc9c:	4313      	orrs	r3, r2
 801fc9e:	b29a      	uxth	r2, r3
 801fca0:	187b      	adds	r3, r7, r1
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	801a      	strh	r2, [r3, #0]
 801fca6:	e023      	b.n	801fcf0 <USB_EPStartXfer+0xd24>
 801fca8:	683b      	ldr	r3, [r7, #0]
 801fcaa:	785b      	ldrb	r3, [r3, #1]
 801fcac:	2b01      	cmp	r3, #1
 801fcae:	d11f      	bne.n	801fcf0 <USB_EPStartXfer+0xd24>
 801fcb0:	687b      	ldr	r3, [r7, #4]
 801fcb2:	21b4      	movs	r1, #180	@ 0xb4
 801fcb4:	187a      	adds	r2, r7, r1
 801fcb6:	6013      	str	r3, [r2, #0]
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2250      	movs	r2, #80	@ 0x50
 801fcbc:	5a9b      	ldrh	r3, [r3, r2]
 801fcbe:	b29b      	uxth	r3, r3
 801fcc0:	001a      	movs	r2, r3
 801fcc2:	187b      	adds	r3, r7, r1
 801fcc4:	681b      	ldr	r3, [r3, #0]
 801fcc6:	189b      	adds	r3, r3, r2
 801fcc8:	187a      	adds	r2, r7, r1
 801fcca:	6013      	str	r3, [r2, #0]
 801fccc:	683b      	ldr	r3, [r7, #0]
 801fcce:	781b      	ldrb	r3, [r3, #0]
 801fcd0:	00da      	lsls	r2, r3, #3
 801fcd2:	187b      	adds	r3, r7, r1
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	18d3      	adds	r3, r2, r3
 801fcd8:	4a4a      	ldr	r2, [pc, #296]	@ (801fe04 <USB_EPStartXfer+0xe38>)
 801fcda:	4694      	mov	ip, r2
 801fcdc:	4463      	add	r3, ip
 801fcde:	21b0      	movs	r1, #176	@ 0xb0
 801fce0:	187a      	adds	r2, r7, r1
 801fce2:	6013      	str	r3, [r2, #0]
 801fce4:	683b      	ldr	r3, [r7, #0]
 801fce6:	691b      	ldr	r3, [r3, #16]
 801fce8:	b29a      	uxth	r2, r3
 801fcea:	187b      	adds	r3, r7, r1
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	801a      	strh	r2, [r3, #0]
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	22a4      	movs	r2, #164	@ 0xa4
 801fcf4:	18ba      	adds	r2, r7, r2
 801fcf6:	6013      	str	r3, [r2, #0]
 801fcf8:	683b      	ldr	r3, [r7, #0]
 801fcfa:	785b      	ldrb	r3, [r3, #1]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d000      	beq.n	801fd02 <USB_EPStartXfer+0xd36>
 801fd00:	e082      	b.n	801fe08 <USB_EPStartXfer+0xe3c>
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	219c      	movs	r1, #156	@ 0x9c
 801fd06:	187a      	adds	r2, r7, r1
 801fd08:	6013      	str	r3, [r2, #0]
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	2250      	movs	r2, #80	@ 0x50
 801fd0e:	5a9b      	ldrh	r3, [r3, r2]
 801fd10:	b29b      	uxth	r3, r3
 801fd12:	001a      	movs	r2, r3
 801fd14:	187b      	adds	r3, r7, r1
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	189b      	adds	r3, r3, r2
 801fd1a:	187a      	adds	r2, r7, r1
 801fd1c:	6013      	str	r3, [r2, #0]
 801fd1e:	683b      	ldr	r3, [r7, #0]
 801fd20:	781b      	ldrb	r3, [r3, #0]
 801fd22:	00da      	lsls	r2, r3, #3
 801fd24:	187b      	adds	r3, r7, r1
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	18d3      	adds	r3, r2, r3
 801fd2a:	4a34      	ldr	r2, [pc, #208]	@ (801fdfc <USB_EPStartXfer+0xe30>)
 801fd2c:	4694      	mov	ip, r2
 801fd2e:	4463      	add	r3, ip
 801fd30:	2198      	movs	r1, #152	@ 0x98
 801fd32:	187a      	adds	r2, r7, r1
 801fd34:	6013      	str	r3, [r2, #0]
 801fd36:	187b      	adds	r3, r7, r1
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	881b      	ldrh	r3, [r3, #0]
 801fd3c:	b29b      	uxth	r3, r3
 801fd3e:	059b      	lsls	r3, r3, #22
 801fd40:	0d9b      	lsrs	r3, r3, #22
 801fd42:	b29a      	uxth	r2, r3
 801fd44:	187b      	adds	r3, r7, r1
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	801a      	strh	r2, [r3, #0]
 801fd4a:	683b      	ldr	r3, [r7, #0]
 801fd4c:	691b      	ldr	r3, [r3, #16]
 801fd4e:	2b3e      	cmp	r3, #62	@ 0x3e
 801fd50:	d923      	bls.n	801fd9a <USB_EPStartXfer+0xdce>
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	691b      	ldr	r3, [r3, #16]
 801fd56:	095b      	lsrs	r3, r3, #5
 801fd58:	21e0      	movs	r1, #224	@ 0xe0
 801fd5a:	187a      	adds	r2, r7, r1
 801fd5c:	6013      	str	r3, [r2, #0]
 801fd5e:	683b      	ldr	r3, [r7, #0]
 801fd60:	691b      	ldr	r3, [r3, #16]
 801fd62:	221f      	movs	r2, #31
 801fd64:	4013      	ands	r3, r2
 801fd66:	d104      	bne.n	801fd72 <USB_EPStartXfer+0xda6>
 801fd68:	187b      	adds	r3, r7, r1
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	3b01      	subs	r3, #1
 801fd6e:	187a      	adds	r2, r7, r1
 801fd70:	6013      	str	r3, [r2, #0]
 801fd72:	2198      	movs	r1, #152	@ 0x98
 801fd74:	187b      	adds	r3, r7, r1
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	881b      	ldrh	r3, [r3, #0]
 801fd7a:	b29a      	uxth	r2, r3
 801fd7c:	23e0      	movs	r3, #224	@ 0xe0
 801fd7e:	18fb      	adds	r3, r7, r3
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	b29b      	uxth	r3, r3
 801fd84:	029b      	lsls	r3, r3, #10
 801fd86:	b29b      	uxth	r3, r3
 801fd88:	4313      	orrs	r3, r2
 801fd8a:	b29b      	uxth	r3, r3
 801fd8c:	4a1c      	ldr	r2, [pc, #112]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fd8e:	4313      	orrs	r3, r2
 801fd90:	b29a      	uxth	r2, r3
 801fd92:	187b      	adds	r3, r7, r1
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	801a      	strh	r2, [r3, #0]
 801fd98:	e057      	b.n	801fe4a <USB_EPStartXfer+0xe7e>
 801fd9a:	683b      	ldr	r3, [r7, #0]
 801fd9c:	691b      	ldr	r3, [r3, #16]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d10b      	bne.n	801fdba <USB_EPStartXfer+0xdee>
 801fda2:	2198      	movs	r1, #152	@ 0x98
 801fda4:	187b      	adds	r3, r7, r1
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	881b      	ldrh	r3, [r3, #0]
 801fdaa:	b29b      	uxth	r3, r3
 801fdac:	4a14      	ldr	r2, [pc, #80]	@ (801fe00 <USB_EPStartXfer+0xe34>)
 801fdae:	4313      	orrs	r3, r2
 801fdb0:	b29a      	uxth	r2, r3
 801fdb2:	187b      	adds	r3, r7, r1
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	801a      	strh	r2, [r3, #0]
 801fdb8:	e047      	b.n	801fe4a <USB_EPStartXfer+0xe7e>
 801fdba:	683b      	ldr	r3, [r7, #0]
 801fdbc:	691b      	ldr	r3, [r3, #16]
 801fdbe:	085b      	lsrs	r3, r3, #1
 801fdc0:	21e0      	movs	r1, #224	@ 0xe0
 801fdc2:	187a      	adds	r2, r7, r1
 801fdc4:	6013      	str	r3, [r2, #0]
 801fdc6:	683b      	ldr	r3, [r7, #0]
 801fdc8:	691b      	ldr	r3, [r3, #16]
 801fdca:	2201      	movs	r2, #1
 801fdcc:	4013      	ands	r3, r2
 801fdce:	d004      	beq.n	801fdda <USB_EPStartXfer+0xe0e>
 801fdd0:	187b      	adds	r3, r7, r1
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	3301      	adds	r3, #1
 801fdd6:	187a      	adds	r2, r7, r1
 801fdd8:	6013      	str	r3, [r2, #0]
 801fdda:	2198      	movs	r1, #152	@ 0x98
 801fddc:	187b      	adds	r3, r7, r1
 801fdde:	681b      	ldr	r3, [r3, #0]
 801fde0:	881b      	ldrh	r3, [r3, #0]
 801fde2:	b29a      	uxth	r2, r3
 801fde4:	23e0      	movs	r3, #224	@ 0xe0
 801fde6:	18fb      	adds	r3, r7, r3
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	b29b      	uxth	r3, r3
 801fdec:	029b      	lsls	r3, r3, #10
 801fdee:	b29b      	uxth	r3, r3
 801fdf0:	4313      	orrs	r3, r2
 801fdf2:	b29a      	uxth	r2, r3
 801fdf4:	187b      	adds	r3, r7, r1
 801fdf6:	681b      	ldr	r3, [r3, #0]
 801fdf8:	801a      	strh	r2, [r3, #0]
 801fdfa:	e026      	b.n	801fe4a <USB_EPStartXfer+0xe7e>
 801fdfc:	00000406 	.word	0x00000406
 801fe00:	ffff8000 	.word	0xffff8000
 801fe04:	00000402 	.word	0x00000402
 801fe08:	683b      	ldr	r3, [r7, #0]
 801fe0a:	785b      	ldrb	r3, [r3, #1]
 801fe0c:	2b01      	cmp	r3, #1
 801fe0e:	d11c      	bne.n	801fe4a <USB_EPStartXfer+0xe7e>
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2250      	movs	r2, #80	@ 0x50
 801fe14:	5a9b      	ldrh	r3, [r3, r2]
 801fe16:	b29b      	uxth	r3, r3
 801fe18:	001a      	movs	r2, r3
 801fe1a:	21a4      	movs	r1, #164	@ 0xa4
 801fe1c:	187b      	adds	r3, r7, r1
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	189b      	adds	r3, r3, r2
 801fe22:	187a      	adds	r2, r7, r1
 801fe24:	6013      	str	r3, [r2, #0]
 801fe26:	683b      	ldr	r3, [r7, #0]
 801fe28:	781b      	ldrb	r3, [r3, #0]
 801fe2a:	00da      	lsls	r2, r3, #3
 801fe2c:	187b      	adds	r3, r7, r1
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	18d3      	adds	r3, r2, r3
 801fe32:	4ad2      	ldr	r2, [pc, #840]	@ (802017c <USB_EPStartXfer+0x11b0>)
 801fe34:	4694      	mov	ip, r2
 801fe36:	4463      	add	r3, ip
 801fe38:	21a0      	movs	r1, #160	@ 0xa0
 801fe3a:	187a      	adds	r2, r7, r1
 801fe3c:	6013      	str	r3, [r2, #0]
 801fe3e:	683b      	ldr	r3, [r7, #0]
 801fe40:	691b      	ldr	r3, [r3, #16]
 801fe42:	b29a      	uxth	r2, r3
 801fe44:	187b      	adds	r3, r7, r1
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801fe4a:	683b      	ldr	r3, [r7, #0]
 801fe4c:	69db      	ldr	r3, [r3, #28]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d100      	bne.n	801fe54 <USB_EPStartXfer+0xe88>
 801fe52:	e1c2      	b.n	80201da <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801fe54:	687a      	ldr	r2, [r7, #4]
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	781b      	ldrb	r3, [r3, #0]
 801fe5a:	009b      	lsls	r3, r3, #2
 801fe5c:	18d2      	adds	r2, r2, r3
 801fe5e:	2196      	movs	r1, #150	@ 0x96
 801fe60:	187b      	adds	r3, r7, r1
 801fe62:	8812      	ldrh	r2, [r2, #0]
 801fe64:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801fe66:	187b      	adds	r3, r7, r1
 801fe68:	881a      	ldrh	r2, [r3, #0]
 801fe6a:	2380      	movs	r3, #128	@ 0x80
 801fe6c:	01db      	lsls	r3, r3, #7
 801fe6e:	4013      	ands	r3, r2
 801fe70:	d004      	beq.n	801fe7c <USB_EPStartXfer+0xeb0>
 801fe72:	187b      	adds	r3, r7, r1
 801fe74:	881b      	ldrh	r3, [r3, #0]
 801fe76:	2240      	movs	r2, #64	@ 0x40
 801fe78:	4013      	ands	r3, r2
 801fe7a:	d10d      	bne.n	801fe98 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801fe7c:	2196      	movs	r1, #150	@ 0x96
 801fe7e:	187b      	adds	r3, r7, r1
 801fe80:	881a      	ldrh	r2, [r3, #0]
 801fe82:	2380      	movs	r3, #128	@ 0x80
 801fe84:	01db      	lsls	r3, r3, #7
 801fe86:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801fe88:	d000      	beq.n	801fe8c <USB_EPStartXfer+0xec0>
 801fe8a:	e1a6      	b.n	80201da <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801fe8c:	187b      	adds	r3, r7, r1
 801fe8e:	881b      	ldrh	r3, [r3, #0]
 801fe90:	2240      	movs	r2, #64	@ 0x40
 801fe92:	4013      	ands	r3, r2
 801fe94:	d000      	beq.n	801fe98 <USB_EPStartXfer+0xecc>
 801fe96:	e1a0      	b.n	80201da <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801fe98:	687a      	ldr	r2, [r7, #4]
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	781b      	ldrb	r3, [r3, #0]
 801fe9e:	009b      	lsls	r3, r3, #2
 801fea0:	18d3      	adds	r3, r2, r3
 801fea2:	881b      	ldrh	r3, [r3, #0]
 801fea4:	b29a      	uxth	r2, r3
 801fea6:	2094      	movs	r0, #148	@ 0x94
 801fea8:	183b      	adds	r3, r7, r0
 801feaa:	49b5      	ldr	r1, [pc, #724]	@ (8020180 <USB_EPStartXfer+0x11b4>)
 801feac:	400a      	ands	r2, r1
 801feae:	801a      	strh	r2, [r3, #0]
 801feb0:	687a      	ldr	r2, [r7, #4]
 801feb2:	683b      	ldr	r3, [r7, #0]
 801feb4:	781b      	ldrb	r3, [r3, #0]
 801feb6:	009b      	lsls	r3, r3, #2
 801feb8:	18d3      	adds	r3, r2, r3
 801feba:	183a      	adds	r2, r7, r0
 801febc:	8812      	ldrh	r2, [r2, #0]
 801febe:	49b1      	ldr	r1, [pc, #708]	@ (8020184 <USB_EPStartXfer+0x11b8>)
 801fec0:	430a      	orrs	r2, r1
 801fec2:	b292      	uxth	r2, r2
 801fec4:	801a      	strh	r2, [r3, #0]
 801fec6:	e188      	b.n	80201da <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801fec8:	683b      	ldr	r3, [r7, #0]
 801feca:	78db      	ldrb	r3, [r3, #3]
 801fecc:	2b01      	cmp	r3, #1
 801fece:	d000      	beq.n	801fed2 <USB_EPStartXfer+0xf06>
 801fed0:	e181      	b.n	80201d6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801fed2:	683b      	ldr	r3, [r7, #0]
 801fed4:	699a      	ldr	r2, [r3, #24]
 801fed6:	683b      	ldr	r3, [r7, #0]
 801fed8:	691b      	ldr	r3, [r3, #16]
 801feda:	429a      	cmp	r2, r3
 801fedc:	d90d      	bls.n	801fefa <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801fede:	683b      	ldr	r3, [r7, #0]
 801fee0:	691b      	ldr	r3, [r3, #16]
 801fee2:	1d7a      	adds	r2, r7, #5
 801fee4:	32ff      	adds	r2, #255	@ 0xff
 801fee6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801fee8:	683b      	ldr	r3, [r7, #0]
 801feea:	699a      	ldr	r2, [r3, #24]
 801feec:	1d7b      	adds	r3, r7, #5
 801feee:	33ff      	adds	r3, #255	@ 0xff
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	1ad2      	subs	r2, r2, r3
 801fef4:	683b      	ldr	r3, [r7, #0]
 801fef6:	619a      	str	r2, [r3, #24]
 801fef8:	e007      	b.n	801ff0a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801fefa:	683b      	ldr	r3, [r7, #0]
 801fefc:	699b      	ldr	r3, [r3, #24]
 801fefe:	1d7a      	adds	r2, r7, #5
 801ff00:	32ff      	adds	r2, #255	@ 0xff
 801ff02:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	2200      	movs	r2, #0
 801ff08:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	785b      	ldrb	r3, [r3, #1]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d000      	beq.n	801ff14 <USB_EPStartXfer+0xf48>
 801ff12:	e082      	b.n	802001a <USB_EPStartXfer+0x104e>
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	21cc      	movs	r1, #204	@ 0xcc
 801ff18:	187a      	adds	r2, r7, r1
 801ff1a:	6013      	str	r3, [r2, #0]
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	2250      	movs	r2, #80	@ 0x50
 801ff20:	5a9b      	ldrh	r3, [r3, r2]
 801ff22:	b29b      	uxth	r3, r3
 801ff24:	001a      	movs	r2, r3
 801ff26:	187b      	adds	r3, r7, r1
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	189b      	adds	r3, r3, r2
 801ff2c:	187a      	adds	r2, r7, r1
 801ff2e:	6013      	str	r3, [r2, #0]
 801ff30:	683b      	ldr	r3, [r7, #0]
 801ff32:	781b      	ldrb	r3, [r3, #0]
 801ff34:	00da      	lsls	r2, r3, #3
 801ff36:	187b      	adds	r3, r7, r1
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	18d3      	adds	r3, r2, r3
 801ff3c:	4a92      	ldr	r2, [pc, #584]	@ (8020188 <USB_EPStartXfer+0x11bc>)
 801ff3e:	4694      	mov	ip, r2
 801ff40:	4463      	add	r3, ip
 801ff42:	21c8      	movs	r1, #200	@ 0xc8
 801ff44:	187a      	adds	r2, r7, r1
 801ff46:	6013      	str	r3, [r2, #0]
 801ff48:	187b      	adds	r3, r7, r1
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	881b      	ldrh	r3, [r3, #0]
 801ff4e:	b29b      	uxth	r3, r3
 801ff50:	059b      	lsls	r3, r3, #22
 801ff52:	0d9b      	lsrs	r3, r3, #22
 801ff54:	b29a      	uxth	r2, r3
 801ff56:	187b      	adds	r3, r7, r1
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	801a      	strh	r2, [r3, #0]
 801ff5c:	1d7b      	adds	r3, r7, #5
 801ff5e:	33ff      	adds	r3, #255	@ 0xff
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	2b3e      	cmp	r3, #62	@ 0x3e
 801ff64:	d925      	bls.n	801ffb2 <USB_EPStartXfer+0xfe6>
 801ff66:	1d7b      	adds	r3, r7, #5
 801ff68:	33ff      	adds	r3, #255	@ 0xff
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	095b      	lsrs	r3, r3, #5
 801ff6e:	21dc      	movs	r1, #220	@ 0xdc
 801ff70:	187a      	adds	r2, r7, r1
 801ff72:	6013      	str	r3, [r2, #0]
 801ff74:	1d7b      	adds	r3, r7, #5
 801ff76:	33ff      	adds	r3, #255	@ 0xff
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	221f      	movs	r2, #31
 801ff7c:	4013      	ands	r3, r2
 801ff7e:	d104      	bne.n	801ff8a <USB_EPStartXfer+0xfbe>
 801ff80:	187b      	adds	r3, r7, r1
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	3b01      	subs	r3, #1
 801ff86:	187a      	adds	r2, r7, r1
 801ff88:	6013      	str	r3, [r2, #0]
 801ff8a:	21c8      	movs	r1, #200	@ 0xc8
 801ff8c:	187b      	adds	r3, r7, r1
 801ff8e:	681b      	ldr	r3, [r3, #0]
 801ff90:	881b      	ldrh	r3, [r3, #0]
 801ff92:	b29a      	uxth	r2, r3
 801ff94:	23dc      	movs	r3, #220	@ 0xdc
 801ff96:	18fb      	adds	r3, r7, r3
 801ff98:	681b      	ldr	r3, [r3, #0]
 801ff9a:	b29b      	uxth	r3, r3
 801ff9c:	029b      	lsls	r3, r3, #10
 801ff9e:	b29b      	uxth	r3, r3
 801ffa0:	4313      	orrs	r3, r2
 801ffa2:	b29b      	uxth	r3, r3
 801ffa4:	4a79      	ldr	r2, [pc, #484]	@ (802018c <USB_EPStartXfer+0x11c0>)
 801ffa6:	4313      	orrs	r3, r2
 801ffa8:	b29a      	uxth	r2, r3
 801ffaa:	187b      	adds	r3, r7, r1
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	801a      	strh	r2, [r3, #0]
 801ffb0:	e058      	b.n	8020064 <USB_EPStartXfer+0x1098>
 801ffb2:	1d7b      	adds	r3, r7, #5
 801ffb4:	33ff      	adds	r3, #255	@ 0xff
 801ffb6:	681b      	ldr	r3, [r3, #0]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d10b      	bne.n	801ffd4 <USB_EPStartXfer+0x1008>
 801ffbc:	21c8      	movs	r1, #200	@ 0xc8
 801ffbe:	187b      	adds	r3, r7, r1
 801ffc0:	681b      	ldr	r3, [r3, #0]
 801ffc2:	881b      	ldrh	r3, [r3, #0]
 801ffc4:	b29b      	uxth	r3, r3
 801ffc6:	4a71      	ldr	r2, [pc, #452]	@ (802018c <USB_EPStartXfer+0x11c0>)
 801ffc8:	4313      	orrs	r3, r2
 801ffca:	b29a      	uxth	r2, r3
 801ffcc:	187b      	adds	r3, r7, r1
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	801a      	strh	r2, [r3, #0]
 801ffd2:	e047      	b.n	8020064 <USB_EPStartXfer+0x1098>
 801ffd4:	1d7b      	adds	r3, r7, #5
 801ffd6:	33ff      	adds	r3, #255	@ 0xff
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	085b      	lsrs	r3, r3, #1
 801ffdc:	21dc      	movs	r1, #220	@ 0xdc
 801ffde:	187a      	adds	r2, r7, r1
 801ffe0:	6013      	str	r3, [r2, #0]
 801ffe2:	1d7b      	adds	r3, r7, #5
 801ffe4:	33ff      	adds	r3, #255	@ 0xff
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	2201      	movs	r2, #1
 801ffea:	4013      	ands	r3, r2
 801ffec:	d004      	beq.n	801fff8 <USB_EPStartXfer+0x102c>
 801ffee:	187b      	adds	r3, r7, r1
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	3301      	adds	r3, #1
 801fff4:	187a      	adds	r2, r7, r1
 801fff6:	6013      	str	r3, [r2, #0]
 801fff8:	21c8      	movs	r1, #200	@ 0xc8
 801fffa:	187b      	adds	r3, r7, r1
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	881b      	ldrh	r3, [r3, #0]
 8020000:	b29a      	uxth	r2, r3
 8020002:	23dc      	movs	r3, #220	@ 0xdc
 8020004:	18fb      	adds	r3, r7, r3
 8020006:	681b      	ldr	r3, [r3, #0]
 8020008:	b29b      	uxth	r3, r3
 802000a:	029b      	lsls	r3, r3, #10
 802000c:	b29b      	uxth	r3, r3
 802000e:	4313      	orrs	r3, r2
 8020010:	b29a      	uxth	r2, r3
 8020012:	187b      	adds	r3, r7, r1
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	801a      	strh	r2, [r3, #0]
 8020018:	e024      	b.n	8020064 <USB_EPStartXfer+0x1098>
 802001a:	683b      	ldr	r3, [r7, #0]
 802001c:	785b      	ldrb	r3, [r3, #1]
 802001e:	2b01      	cmp	r3, #1
 8020020:	d120      	bne.n	8020064 <USB_EPStartXfer+0x1098>
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	21d4      	movs	r1, #212	@ 0xd4
 8020026:	187a      	adds	r2, r7, r1
 8020028:	6013      	str	r3, [r2, #0]
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	2250      	movs	r2, #80	@ 0x50
 802002e:	5a9b      	ldrh	r3, [r3, r2]
 8020030:	b29b      	uxth	r3, r3
 8020032:	001a      	movs	r2, r3
 8020034:	187b      	adds	r3, r7, r1
 8020036:	681b      	ldr	r3, [r3, #0]
 8020038:	189b      	adds	r3, r3, r2
 802003a:	187a      	adds	r2, r7, r1
 802003c:	6013      	str	r3, [r2, #0]
 802003e:	683b      	ldr	r3, [r7, #0]
 8020040:	781b      	ldrb	r3, [r3, #0]
 8020042:	00da      	lsls	r2, r3, #3
 8020044:	187b      	adds	r3, r7, r1
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	18d3      	adds	r3, r2, r3
 802004a:	4a4f      	ldr	r2, [pc, #316]	@ (8020188 <USB_EPStartXfer+0x11bc>)
 802004c:	4694      	mov	ip, r2
 802004e:	4463      	add	r3, ip
 8020050:	21d0      	movs	r1, #208	@ 0xd0
 8020052:	187a      	adds	r2, r7, r1
 8020054:	6013      	str	r3, [r2, #0]
 8020056:	1d7b      	adds	r3, r7, #5
 8020058:	33ff      	adds	r3, #255	@ 0xff
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	b29a      	uxth	r2, r3
 802005e:	187b      	adds	r3, r7, r1
 8020060:	681b      	ldr	r3, [r3, #0]
 8020062:	801a      	strh	r2, [r3, #0]
 8020064:	687b      	ldr	r3, [r7, #4]
 8020066:	22c4      	movs	r2, #196	@ 0xc4
 8020068:	18ba      	adds	r2, r7, r2
 802006a:	6013      	str	r3, [r2, #0]
 802006c:	683b      	ldr	r3, [r7, #0]
 802006e:	785b      	ldrb	r3, [r3, #1]
 8020070:	2b00      	cmp	r3, #0
 8020072:	d000      	beq.n	8020076 <USB_EPStartXfer+0x10aa>
 8020074:	e08c      	b.n	8020190 <USB_EPStartXfer+0x11c4>
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	21bc      	movs	r1, #188	@ 0xbc
 802007a:	187a      	adds	r2, r7, r1
 802007c:	6013      	str	r3, [r2, #0]
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	2250      	movs	r2, #80	@ 0x50
 8020082:	5a9b      	ldrh	r3, [r3, r2]
 8020084:	b29b      	uxth	r3, r3
 8020086:	001a      	movs	r2, r3
 8020088:	187b      	adds	r3, r7, r1
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	189b      	adds	r3, r3, r2
 802008e:	187a      	adds	r2, r7, r1
 8020090:	6013      	str	r3, [r2, #0]
 8020092:	683b      	ldr	r3, [r7, #0]
 8020094:	781b      	ldrb	r3, [r3, #0]
 8020096:	00da      	lsls	r2, r3, #3
 8020098:	187b      	adds	r3, r7, r1
 802009a:	681b      	ldr	r3, [r3, #0]
 802009c:	18d3      	adds	r3, r2, r3
 802009e:	4a37      	ldr	r2, [pc, #220]	@ (802017c <USB_EPStartXfer+0x11b0>)
 80200a0:	4694      	mov	ip, r2
 80200a2:	4463      	add	r3, ip
 80200a4:	21b8      	movs	r1, #184	@ 0xb8
 80200a6:	187a      	adds	r2, r7, r1
 80200a8:	6013      	str	r3, [r2, #0]
 80200aa:	187b      	adds	r3, r7, r1
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	881b      	ldrh	r3, [r3, #0]
 80200b0:	b29b      	uxth	r3, r3
 80200b2:	059b      	lsls	r3, r3, #22
 80200b4:	0d9b      	lsrs	r3, r3, #22
 80200b6:	b29a      	uxth	r2, r3
 80200b8:	187b      	adds	r3, r7, r1
 80200ba:	681b      	ldr	r3, [r3, #0]
 80200bc:	801a      	strh	r2, [r3, #0]
 80200be:	1d7b      	adds	r3, r7, #5
 80200c0:	33ff      	adds	r3, #255	@ 0xff
 80200c2:	681b      	ldr	r3, [r3, #0]
 80200c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80200c6:	d925      	bls.n	8020114 <USB_EPStartXfer+0x1148>
 80200c8:	1d7b      	adds	r3, r7, #5
 80200ca:	33ff      	adds	r3, #255	@ 0xff
 80200cc:	681b      	ldr	r3, [r3, #0]
 80200ce:	095b      	lsrs	r3, r3, #5
 80200d0:	21d8      	movs	r1, #216	@ 0xd8
 80200d2:	187a      	adds	r2, r7, r1
 80200d4:	6013      	str	r3, [r2, #0]
 80200d6:	1d7b      	adds	r3, r7, #5
 80200d8:	33ff      	adds	r3, #255	@ 0xff
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	221f      	movs	r2, #31
 80200de:	4013      	ands	r3, r2
 80200e0:	d104      	bne.n	80200ec <USB_EPStartXfer+0x1120>
 80200e2:	187b      	adds	r3, r7, r1
 80200e4:	681b      	ldr	r3, [r3, #0]
 80200e6:	3b01      	subs	r3, #1
 80200e8:	187a      	adds	r2, r7, r1
 80200ea:	6013      	str	r3, [r2, #0]
 80200ec:	21b8      	movs	r1, #184	@ 0xb8
 80200ee:	187b      	adds	r3, r7, r1
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	881b      	ldrh	r3, [r3, #0]
 80200f4:	b29a      	uxth	r2, r3
 80200f6:	23d8      	movs	r3, #216	@ 0xd8
 80200f8:	18fb      	adds	r3, r7, r3
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	b29b      	uxth	r3, r3
 80200fe:	029b      	lsls	r3, r3, #10
 8020100:	b29b      	uxth	r3, r3
 8020102:	4313      	orrs	r3, r2
 8020104:	b29b      	uxth	r3, r3
 8020106:	4a21      	ldr	r2, [pc, #132]	@ (802018c <USB_EPStartXfer+0x11c0>)
 8020108:	4313      	orrs	r3, r2
 802010a:	b29a      	uxth	r2, r3
 802010c:	187b      	adds	r3, r7, r1
 802010e:	681b      	ldr	r3, [r3, #0]
 8020110:	801a      	strh	r2, [r3, #0]
 8020112:	e062      	b.n	80201da <USB_EPStartXfer+0x120e>
 8020114:	1d7b      	adds	r3, r7, #5
 8020116:	33ff      	adds	r3, #255	@ 0xff
 8020118:	681b      	ldr	r3, [r3, #0]
 802011a:	2b00      	cmp	r3, #0
 802011c:	d10b      	bne.n	8020136 <USB_EPStartXfer+0x116a>
 802011e:	21b8      	movs	r1, #184	@ 0xb8
 8020120:	187b      	adds	r3, r7, r1
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	881b      	ldrh	r3, [r3, #0]
 8020126:	b29b      	uxth	r3, r3
 8020128:	4a18      	ldr	r2, [pc, #96]	@ (802018c <USB_EPStartXfer+0x11c0>)
 802012a:	4313      	orrs	r3, r2
 802012c:	b29a      	uxth	r2, r3
 802012e:	187b      	adds	r3, r7, r1
 8020130:	681b      	ldr	r3, [r3, #0]
 8020132:	801a      	strh	r2, [r3, #0]
 8020134:	e051      	b.n	80201da <USB_EPStartXfer+0x120e>
 8020136:	1d7b      	adds	r3, r7, #5
 8020138:	33ff      	adds	r3, #255	@ 0xff
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	085b      	lsrs	r3, r3, #1
 802013e:	21d8      	movs	r1, #216	@ 0xd8
 8020140:	187a      	adds	r2, r7, r1
 8020142:	6013      	str	r3, [r2, #0]
 8020144:	1d7b      	adds	r3, r7, #5
 8020146:	33ff      	adds	r3, #255	@ 0xff
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	2201      	movs	r2, #1
 802014c:	4013      	ands	r3, r2
 802014e:	d004      	beq.n	802015a <USB_EPStartXfer+0x118e>
 8020150:	187b      	adds	r3, r7, r1
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	3301      	adds	r3, #1
 8020156:	187a      	adds	r2, r7, r1
 8020158:	6013      	str	r3, [r2, #0]
 802015a:	21b8      	movs	r1, #184	@ 0xb8
 802015c:	187b      	adds	r3, r7, r1
 802015e:	681b      	ldr	r3, [r3, #0]
 8020160:	881b      	ldrh	r3, [r3, #0]
 8020162:	b29a      	uxth	r2, r3
 8020164:	23d8      	movs	r3, #216	@ 0xd8
 8020166:	18fb      	adds	r3, r7, r3
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	b29b      	uxth	r3, r3
 802016c:	029b      	lsls	r3, r3, #10
 802016e:	b29b      	uxth	r3, r3
 8020170:	4313      	orrs	r3, r2
 8020172:	b29a      	uxth	r2, r3
 8020174:	187b      	adds	r3, r7, r1
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	801a      	strh	r2, [r3, #0]
 802017a:	e02e      	b.n	80201da <USB_EPStartXfer+0x120e>
 802017c:	00000406 	.word	0x00000406
 8020180:	ffff8f8f 	.word	0xffff8f8f
 8020184:	ffff80c0 	.word	0xffff80c0
 8020188:	00000402 	.word	0x00000402
 802018c:	ffff8000 	.word	0xffff8000
 8020190:	683b      	ldr	r3, [r7, #0]
 8020192:	785b      	ldrb	r3, [r3, #1]
 8020194:	2b01      	cmp	r3, #1
 8020196:	d120      	bne.n	80201da <USB_EPStartXfer+0x120e>
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	2250      	movs	r2, #80	@ 0x50
 802019c:	5a9b      	ldrh	r3, [r3, r2]
 802019e:	b29b      	uxth	r3, r3
 80201a0:	001a      	movs	r2, r3
 80201a2:	21c4      	movs	r1, #196	@ 0xc4
 80201a4:	187b      	adds	r3, r7, r1
 80201a6:	681b      	ldr	r3, [r3, #0]
 80201a8:	189b      	adds	r3, r3, r2
 80201aa:	187a      	adds	r2, r7, r1
 80201ac:	6013      	str	r3, [r2, #0]
 80201ae:	683b      	ldr	r3, [r7, #0]
 80201b0:	781b      	ldrb	r3, [r3, #0]
 80201b2:	00da      	lsls	r2, r3, #3
 80201b4:	187b      	adds	r3, r7, r1
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	18d3      	adds	r3, r2, r3
 80201ba:	4a1d      	ldr	r2, [pc, #116]	@ (8020230 <USB_EPStartXfer+0x1264>)
 80201bc:	4694      	mov	ip, r2
 80201be:	4463      	add	r3, ip
 80201c0:	21c0      	movs	r1, #192	@ 0xc0
 80201c2:	187a      	adds	r2, r7, r1
 80201c4:	6013      	str	r3, [r2, #0]
 80201c6:	1d7b      	adds	r3, r7, #5
 80201c8:	33ff      	adds	r3, #255	@ 0xff
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	b29a      	uxth	r2, r3
 80201ce:	187b      	adds	r3, r7, r1
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	801a      	strh	r2, [r3, #0]
 80201d4:	e001      	b.n	80201da <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80201d6:	2301      	movs	r3, #1
 80201d8:	e025      	b.n	8020226 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80201da:	687a      	ldr	r2, [r7, #4]
 80201dc:	683b      	ldr	r3, [r7, #0]
 80201de:	781b      	ldrb	r3, [r3, #0]
 80201e0:	009b      	lsls	r3, r3, #2
 80201e2:	18d3      	adds	r3, r2, r3
 80201e4:	881b      	ldrh	r3, [r3, #0]
 80201e6:	b29a      	uxth	r2, r3
 80201e8:	208a      	movs	r0, #138	@ 0x8a
 80201ea:	183b      	adds	r3, r7, r0
 80201ec:	4911      	ldr	r1, [pc, #68]	@ (8020234 <USB_EPStartXfer+0x1268>)
 80201ee:	400a      	ands	r2, r1
 80201f0:	801a      	strh	r2, [r3, #0]
 80201f2:	183b      	adds	r3, r7, r0
 80201f4:	183a      	adds	r2, r7, r0
 80201f6:	8812      	ldrh	r2, [r2, #0]
 80201f8:	2180      	movs	r1, #128	@ 0x80
 80201fa:	0149      	lsls	r1, r1, #5
 80201fc:	404a      	eors	r2, r1
 80201fe:	801a      	strh	r2, [r3, #0]
 8020200:	183b      	adds	r3, r7, r0
 8020202:	183a      	adds	r2, r7, r0
 8020204:	8812      	ldrh	r2, [r2, #0]
 8020206:	2180      	movs	r1, #128	@ 0x80
 8020208:	0189      	lsls	r1, r1, #6
 802020a:	404a      	eors	r2, r1
 802020c:	801a      	strh	r2, [r3, #0]
 802020e:	687a      	ldr	r2, [r7, #4]
 8020210:	683b      	ldr	r3, [r7, #0]
 8020212:	781b      	ldrb	r3, [r3, #0]
 8020214:	009b      	lsls	r3, r3, #2
 8020216:	18d3      	adds	r3, r2, r3
 8020218:	183a      	adds	r2, r7, r0
 802021a:	8812      	ldrh	r2, [r2, #0]
 802021c:	4906      	ldr	r1, [pc, #24]	@ (8020238 <USB_EPStartXfer+0x126c>)
 802021e:	430a      	orrs	r2, r1
 8020220:	b292      	uxth	r2, r2
 8020222:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8020224:	2300      	movs	r3, #0
}
 8020226:	0018      	movs	r0, r3
 8020228:	46bd      	mov	sp, r7
 802022a:	b043      	add	sp, #268	@ 0x10c
 802022c:	bd90      	pop	{r4, r7, pc}
 802022e:	46c0      	nop			@ (mov r8, r8)
 8020230:	00000406 	.word	0x00000406
 8020234:	ffffbf8f 	.word	0xffffbf8f
 8020238:	ffff8080 	.word	0xffff8080

0802023c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 802023c:	b580      	push	{r7, lr}
 802023e:	b084      	sub	sp, #16
 8020240:	af00      	add	r7, sp, #0
 8020242:	6078      	str	r0, [r7, #4]
 8020244:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	785b      	ldrb	r3, [r3, #1]
 802024a:	2b00      	cmp	r3, #0
 802024c:	d01d      	beq.n	802028a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802024e:	687a      	ldr	r2, [r7, #4]
 8020250:	683b      	ldr	r3, [r7, #0]
 8020252:	781b      	ldrb	r3, [r3, #0]
 8020254:	009b      	lsls	r3, r3, #2
 8020256:	18d3      	adds	r3, r2, r3
 8020258:	881b      	ldrh	r3, [r3, #0]
 802025a:	b29a      	uxth	r2, r3
 802025c:	200c      	movs	r0, #12
 802025e:	183b      	adds	r3, r7, r0
 8020260:	491b      	ldr	r1, [pc, #108]	@ (80202d0 <USB_EPSetStall+0x94>)
 8020262:	400a      	ands	r2, r1
 8020264:	801a      	strh	r2, [r3, #0]
 8020266:	183b      	adds	r3, r7, r0
 8020268:	183a      	adds	r2, r7, r0
 802026a:	8812      	ldrh	r2, [r2, #0]
 802026c:	2110      	movs	r1, #16
 802026e:	404a      	eors	r2, r1
 8020270:	801a      	strh	r2, [r3, #0]
 8020272:	687a      	ldr	r2, [r7, #4]
 8020274:	683b      	ldr	r3, [r7, #0]
 8020276:	781b      	ldrb	r3, [r3, #0]
 8020278:	009b      	lsls	r3, r3, #2
 802027a:	18d3      	adds	r3, r2, r3
 802027c:	183a      	adds	r2, r7, r0
 802027e:	8812      	ldrh	r2, [r2, #0]
 8020280:	4914      	ldr	r1, [pc, #80]	@ (80202d4 <USB_EPSetStall+0x98>)
 8020282:	430a      	orrs	r2, r1
 8020284:	b292      	uxth	r2, r2
 8020286:	801a      	strh	r2, [r3, #0]
 8020288:	e01d      	b.n	80202c6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 802028a:	687a      	ldr	r2, [r7, #4]
 802028c:	683b      	ldr	r3, [r7, #0]
 802028e:	781b      	ldrb	r3, [r3, #0]
 8020290:	009b      	lsls	r3, r3, #2
 8020292:	18d3      	adds	r3, r2, r3
 8020294:	881b      	ldrh	r3, [r3, #0]
 8020296:	b29a      	uxth	r2, r3
 8020298:	200e      	movs	r0, #14
 802029a:	183b      	adds	r3, r7, r0
 802029c:	490e      	ldr	r1, [pc, #56]	@ (80202d8 <USB_EPSetStall+0x9c>)
 802029e:	400a      	ands	r2, r1
 80202a0:	801a      	strh	r2, [r3, #0]
 80202a2:	183b      	adds	r3, r7, r0
 80202a4:	183a      	adds	r2, r7, r0
 80202a6:	8812      	ldrh	r2, [r2, #0]
 80202a8:	2180      	movs	r1, #128	@ 0x80
 80202aa:	0149      	lsls	r1, r1, #5
 80202ac:	404a      	eors	r2, r1
 80202ae:	801a      	strh	r2, [r3, #0]
 80202b0:	687a      	ldr	r2, [r7, #4]
 80202b2:	683b      	ldr	r3, [r7, #0]
 80202b4:	781b      	ldrb	r3, [r3, #0]
 80202b6:	009b      	lsls	r3, r3, #2
 80202b8:	18d3      	adds	r3, r2, r3
 80202ba:	183a      	adds	r2, r7, r0
 80202bc:	8812      	ldrh	r2, [r2, #0]
 80202be:	4905      	ldr	r1, [pc, #20]	@ (80202d4 <USB_EPSetStall+0x98>)
 80202c0:	430a      	orrs	r2, r1
 80202c2:	b292      	uxth	r2, r2
 80202c4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80202c6:	2300      	movs	r3, #0
}
 80202c8:	0018      	movs	r0, r3
 80202ca:	46bd      	mov	sp, r7
 80202cc:	b004      	add	sp, #16
 80202ce:	bd80      	pop	{r7, pc}
 80202d0:	ffff8fbf 	.word	0xffff8fbf
 80202d4:	ffff8080 	.word	0xffff8080
 80202d8:	ffffbf8f 	.word	0xffffbf8f

080202dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80202dc:	b580      	push	{r7, lr}
 80202de:	b086      	sub	sp, #24
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	6078      	str	r0, [r7, #4]
 80202e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80202e6:	683b      	ldr	r3, [r7, #0]
 80202e8:	7b1b      	ldrb	r3, [r3, #12]
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	d000      	beq.n	80202f0 <USB_EPClearStall+0x14>
 80202ee:	e095      	b.n	802041c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80202f0:	683b      	ldr	r3, [r7, #0]
 80202f2:	785b      	ldrb	r3, [r3, #1]
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d046      	beq.n	8020386 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80202f8:	687a      	ldr	r2, [r7, #4]
 80202fa:	683b      	ldr	r3, [r7, #0]
 80202fc:	781b      	ldrb	r3, [r3, #0]
 80202fe:	009b      	lsls	r3, r3, #2
 8020300:	18d2      	adds	r2, r2, r3
 8020302:	2110      	movs	r1, #16
 8020304:	187b      	adds	r3, r7, r1
 8020306:	8812      	ldrh	r2, [r2, #0]
 8020308:	801a      	strh	r2, [r3, #0]
 802030a:	187b      	adds	r3, r7, r1
 802030c:	881b      	ldrh	r3, [r3, #0]
 802030e:	2240      	movs	r2, #64	@ 0x40
 8020310:	4013      	ands	r3, r2
 8020312:	d016      	beq.n	8020342 <USB_EPClearStall+0x66>
 8020314:	687a      	ldr	r2, [r7, #4]
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	781b      	ldrb	r3, [r3, #0]
 802031a:	009b      	lsls	r3, r3, #2
 802031c:	18d3      	adds	r3, r2, r3
 802031e:	881b      	ldrh	r3, [r3, #0]
 8020320:	b29a      	uxth	r2, r3
 8020322:	200e      	movs	r0, #14
 8020324:	183b      	adds	r3, r7, r0
 8020326:	4940      	ldr	r1, [pc, #256]	@ (8020428 <USB_EPClearStall+0x14c>)
 8020328:	400a      	ands	r2, r1
 802032a:	801a      	strh	r2, [r3, #0]
 802032c:	687a      	ldr	r2, [r7, #4]
 802032e:	683b      	ldr	r3, [r7, #0]
 8020330:	781b      	ldrb	r3, [r3, #0]
 8020332:	009b      	lsls	r3, r3, #2
 8020334:	18d3      	adds	r3, r2, r3
 8020336:	183a      	adds	r2, r7, r0
 8020338:	8812      	ldrh	r2, [r2, #0]
 802033a:	493c      	ldr	r1, [pc, #240]	@ (802042c <USB_EPClearStall+0x150>)
 802033c:	430a      	orrs	r2, r1
 802033e:	b292      	uxth	r2, r2
 8020340:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	78db      	ldrb	r3, [r3, #3]
 8020346:	2b01      	cmp	r3, #1
 8020348:	d068      	beq.n	802041c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 802034a:	687a      	ldr	r2, [r7, #4]
 802034c:	683b      	ldr	r3, [r7, #0]
 802034e:	781b      	ldrb	r3, [r3, #0]
 8020350:	009b      	lsls	r3, r3, #2
 8020352:	18d3      	adds	r3, r2, r3
 8020354:	881b      	ldrh	r3, [r3, #0]
 8020356:	b29a      	uxth	r2, r3
 8020358:	200c      	movs	r0, #12
 802035a:	183b      	adds	r3, r7, r0
 802035c:	4934      	ldr	r1, [pc, #208]	@ (8020430 <USB_EPClearStall+0x154>)
 802035e:	400a      	ands	r2, r1
 8020360:	801a      	strh	r2, [r3, #0]
 8020362:	183b      	adds	r3, r7, r0
 8020364:	183a      	adds	r2, r7, r0
 8020366:	8812      	ldrh	r2, [r2, #0]
 8020368:	2120      	movs	r1, #32
 802036a:	404a      	eors	r2, r1
 802036c:	801a      	strh	r2, [r3, #0]
 802036e:	687a      	ldr	r2, [r7, #4]
 8020370:	683b      	ldr	r3, [r7, #0]
 8020372:	781b      	ldrb	r3, [r3, #0]
 8020374:	009b      	lsls	r3, r3, #2
 8020376:	18d3      	adds	r3, r2, r3
 8020378:	183a      	adds	r2, r7, r0
 802037a:	8812      	ldrh	r2, [r2, #0]
 802037c:	492d      	ldr	r1, [pc, #180]	@ (8020434 <USB_EPClearStall+0x158>)
 802037e:	430a      	orrs	r2, r1
 8020380:	b292      	uxth	r2, r2
 8020382:	801a      	strh	r2, [r3, #0]
 8020384:	e04a      	b.n	802041c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8020386:	687a      	ldr	r2, [r7, #4]
 8020388:	683b      	ldr	r3, [r7, #0]
 802038a:	781b      	ldrb	r3, [r3, #0]
 802038c:	009b      	lsls	r3, r3, #2
 802038e:	18d2      	adds	r2, r2, r3
 8020390:	2116      	movs	r1, #22
 8020392:	187b      	adds	r3, r7, r1
 8020394:	8812      	ldrh	r2, [r2, #0]
 8020396:	801a      	strh	r2, [r3, #0]
 8020398:	187b      	adds	r3, r7, r1
 802039a:	881a      	ldrh	r2, [r3, #0]
 802039c:	2380      	movs	r3, #128	@ 0x80
 802039e:	01db      	lsls	r3, r3, #7
 80203a0:	4013      	ands	r3, r2
 80203a2:	d016      	beq.n	80203d2 <USB_EPClearStall+0xf6>
 80203a4:	687a      	ldr	r2, [r7, #4]
 80203a6:	683b      	ldr	r3, [r7, #0]
 80203a8:	781b      	ldrb	r3, [r3, #0]
 80203aa:	009b      	lsls	r3, r3, #2
 80203ac:	18d3      	adds	r3, r2, r3
 80203ae:	881b      	ldrh	r3, [r3, #0]
 80203b0:	b29a      	uxth	r2, r3
 80203b2:	2014      	movs	r0, #20
 80203b4:	183b      	adds	r3, r7, r0
 80203b6:	491c      	ldr	r1, [pc, #112]	@ (8020428 <USB_EPClearStall+0x14c>)
 80203b8:	400a      	ands	r2, r1
 80203ba:	801a      	strh	r2, [r3, #0]
 80203bc:	687a      	ldr	r2, [r7, #4]
 80203be:	683b      	ldr	r3, [r7, #0]
 80203c0:	781b      	ldrb	r3, [r3, #0]
 80203c2:	009b      	lsls	r3, r3, #2
 80203c4:	18d3      	adds	r3, r2, r3
 80203c6:	183a      	adds	r2, r7, r0
 80203c8:	8812      	ldrh	r2, [r2, #0]
 80203ca:	491b      	ldr	r1, [pc, #108]	@ (8020438 <USB_EPClearStall+0x15c>)
 80203cc:	430a      	orrs	r2, r1
 80203ce:	b292      	uxth	r2, r2
 80203d0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80203d2:	687a      	ldr	r2, [r7, #4]
 80203d4:	683b      	ldr	r3, [r7, #0]
 80203d6:	781b      	ldrb	r3, [r3, #0]
 80203d8:	009b      	lsls	r3, r3, #2
 80203da:	18d3      	adds	r3, r2, r3
 80203dc:	881b      	ldrh	r3, [r3, #0]
 80203de:	b29a      	uxth	r2, r3
 80203e0:	2012      	movs	r0, #18
 80203e2:	183b      	adds	r3, r7, r0
 80203e4:	4915      	ldr	r1, [pc, #84]	@ (802043c <USB_EPClearStall+0x160>)
 80203e6:	400a      	ands	r2, r1
 80203e8:	801a      	strh	r2, [r3, #0]
 80203ea:	183b      	adds	r3, r7, r0
 80203ec:	183a      	adds	r2, r7, r0
 80203ee:	8812      	ldrh	r2, [r2, #0]
 80203f0:	2180      	movs	r1, #128	@ 0x80
 80203f2:	0149      	lsls	r1, r1, #5
 80203f4:	404a      	eors	r2, r1
 80203f6:	801a      	strh	r2, [r3, #0]
 80203f8:	183b      	adds	r3, r7, r0
 80203fa:	183a      	adds	r2, r7, r0
 80203fc:	8812      	ldrh	r2, [r2, #0]
 80203fe:	2180      	movs	r1, #128	@ 0x80
 8020400:	0189      	lsls	r1, r1, #6
 8020402:	404a      	eors	r2, r1
 8020404:	801a      	strh	r2, [r3, #0]
 8020406:	687a      	ldr	r2, [r7, #4]
 8020408:	683b      	ldr	r3, [r7, #0]
 802040a:	781b      	ldrb	r3, [r3, #0]
 802040c:	009b      	lsls	r3, r3, #2
 802040e:	18d3      	adds	r3, r2, r3
 8020410:	183a      	adds	r2, r7, r0
 8020412:	8812      	ldrh	r2, [r2, #0]
 8020414:	4907      	ldr	r1, [pc, #28]	@ (8020434 <USB_EPClearStall+0x158>)
 8020416:	430a      	orrs	r2, r1
 8020418:	b292      	uxth	r2, r2
 802041a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 802041c:	2300      	movs	r3, #0
}
 802041e:	0018      	movs	r0, r3
 8020420:	46bd      	mov	sp, r7
 8020422:	b006      	add	sp, #24
 8020424:	bd80      	pop	{r7, pc}
 8020426:	46c0      	nop			@ (mov r8, r8)
 8020428:	ffff8f8f 	.word	0xffff8f8f
 802042c:	ffff80c0 	.word	0xffff80c0
 8020430:	ffff8fbf 	.word	0xffff8fbf
 8020434:	ffff8080 	.word	0xffff8080
 8020438:	ffffc080 	.word	0xffffc080
 802043c:	ffffbf8f 	.word	0xffffbf8f

08020440 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b082      	sub	sp, #8
 8020444:	af00      	add	r7, sp, #0
 8020446:	6078      	str	r0, [r7, #4]
 8020448:	000a      	movs	r2, r1
 802044a:	1cfb      	adds	r3, r7, #3
 802044c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802044e:	1cfb      	adds	r3, r7, #3
 8020450:	781b      	ldrb	r3, [r3, #0]
 8020452:	2b00      	cmp	r3, #0
 8020454:	d103      	bne.n	802045e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	224c      	movs	r2, #76	@ 0x4c
 802045a:	2180      	movs	r1, #128	@ 0x80
 802045c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802045e:	2300      	movs	r3, #0
}
 8020460:	0018      	movs	r0, r3
 8020462:	46bd      	mov	sp, r7
 8020464:	b002      	add	sp, #8
 8020466:	bd80      	pop	{r7, pc}

08020468 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8020468:	b580      	push	{r7, lr}
 802046a:	b082      	sub	sp, #8
 802046c:	af00      	add	r7, sp, #0
 802046e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	2258      	movs	r2, #88	@ 0x58
 8020474:	5a9b      	ldrh	r3, [r3, r2]
 8020476:	b29b      	uxth	r3, r3
 8020478:	4a05      	ldr	r2, [pc, #20]	@ (8020490 <USB_DevConnect+0x28>)
 802047a:	4313      	orrs	r3, r2
 802047c:	b299      	uxth	r1, r3
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	2258      	movs	r2, #88	@ 0x58
 8020482:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8020484:	2300      	movs	r3, #0
}
 8020486:	0018      	movs	r0, r3
 8020488:	46bd      	mov	sp, r7
 802048a:	b002      	add	sp, #8
 802048c:	bd80      	pop	{r7, pc}
 802048e:	46c0      	nop			@ (mov r8, r8)
 8020490:	ffff8000 	.word	0xffff8000

08020494 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8020494:	b580      	push	{r7, lr}
 8020496:	b084      	sub	sp, #16
 8020498:	af00      	add	r7, sp, #0
 802049a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 802049c:	687b      	ldr	r3, [r7, #4]
 802049e:	2244      	movs	r2, #68	@ 0x44
 80204a0:	5a9b      	ldrh	r3, [r3, r2]
 80204a2:	b29b      	uxth	r3, r3
 80204a4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80204a6:	68fb      	ldr	r3, [r7, #12]
}
 80204a8:	0018      	movs	r0, r3
 80204aa:	46bd      	mov	sp, r7
 80204ac:	b004      	add	sp, #16
 80204ae:	bd80      	pop	{r7, pc}

080204b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80204b0:	b580      	push	{r7, lr}
 80204b2:	b08a      	sub	sp, #40	@ 0x28
 80204b4:	af00      	add	r7, sp, #0
 80204b6:	60f8      	str	r0, [r7, #12]
 80204b8:	60b9      	str	r1, [r7, #8]
 80204ba:	0019      	movs	r1, r3
 80204bc:	1dbb      	adds	r3, r7, #6
 80204be:	801a      	strh	r2, [r3, #0]
 80204c0:	1d3b      	adds	r3, r7, #4
 80204c2:	1c0a      	adds	r2, r1, #0
 80204c4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80204c6:	1d3b      	adds	r3, r7, #4
 80204c8:	881b      	ldrh	r3, [r3, #0]
 80204ca:	3301      	adds	r3, #1
 80204cc:	085b      	lsrs	r3, r3, #1
 80204ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80204d4:	68bb      	ldr	r3, [r7, #8]
 80204d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80204d8:	1dbb      	adds	r3, r7, #6
 80204da:	881a      	ldrh	r2, [r3, #0]
 80204dc:	697b      	ldr	r3, [r7, #20]
 80204de:	18d3      	adds	r3, r2, r3
 80204e0:	2280      	movs	r2, #128	@ 0x80
 80204e2:	00d2      	lsls	r2, r2, #3
 80204e4:	4694      	mov	ip, r2
 80204e6:	4463      	add	r3, ip
 80204e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80204ea:	69bb      	ldr	r3, [r7, #24]
 80204ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80204ee:	e021      	b.n	8020534 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80204f0:	69fb      	ldr	r3, [r7, #28]
 80204f2:	781a      	ldrb	r2, [r3, #0]
 80204f4:	2112      	movs	r1, #18
 80204f6:	187b      	adds	r3, r7, r1
 80204f8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80204fa:	69fb      	ldr	r3, [r7, #28]
 80204fc:	3301      	adds	r3, #1
 80204fe:	781b      	ldrb	r3, [r3, #0]
 8020500:	b21b      	sxth	r3, r3
 8020502:	021b      	lsls	r3, r3, #8
 8020504:	b21a      	sxth	r2, r3
 8020506:	187b      	adds	r3, r7, r1
 8020508:	2000      	movs	r0, #0
 802050a:	5e1b      	ldrsh	r3, [r3, r0]
 802050c:	4313      	orrs	r3, r2
 802050e:	b21a      	sxth	r2, r3
 8020510:	187b      	adds	r3, r7, r1
 8020512:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8020514:	6a3b      	ldr	r3, [r7, #32]
 8020516:	187a      	adds	r2, r7, r1
 8020518:	8812      	ldrh	r2, [r2, #0]
 802051a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 802051c:	6a3b      	ldr	r3, [r7, #32]
 802051e:	3302      	adds	r3, #2
 8020520:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8020522:	69fb      	ldr	r3, [r7, #28]
 8020524:	3301      	adds	r3, #1
 8020526:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8020528:	69fb      	ldr	r3, [r7, #28]
 802052a:	3301      	adds	r3, #1
 802052c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802052e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020530:	3b01      	subs	r3, #1
 8020532:	627b      	str	r3, [r7, #36]	@ 0x24
 8020534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020536:	2b00      	cmp	r3, #0
 8020538:	d1da      	bne.n	80204f0 <USB_WritePMA+0x40>
  }
}
 802053a:	46c0      	nop			@ (mov r8, r8)
 802053c:	46c0      	nop			@ (mov r8, r8)
 802053e:	46bd      	mov	sp, r7
 8020540:	b00a      	add	sp, #40	@ 0x28
 8020542:	bd80      	pop	{r7, pc}

08020544 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8020544:	b580      	push	{r7, lr}
 8020546:	b08a      	sub	sp, #40	@ 0x28
 8020548:	af00      	add	r7, sp, #0
 802054a:	60f8      	str	r0, [r7, #12]
 802054c:	60b9      	str	r1, [r7, #8]
 802054e:	0019      	movs	r1, r3
 8020550:	1dbb      	adds	r3, r7, #6
 8020552:	801a      	strh	r2, [r3, #0]
 8020554:	1d3b      	adds	r3, r7, #4
 8020556:	1c0a      	adds	r2, r1, #0
 8020558:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 802055a:	1d3b      	adds	r3, r7, #4
 802055c:	881b      	ldrh	r3, [r3, #0]
 802055e:	085b      	lsrs	r3, r3, #1
 8020560:	b29b      	uxth	r3, r3
 8020562:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8020564:	68fb      	ldr	r3, [r7, #12]
 8020566:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8020568:	68bb      	ldr	r3, [r7, #8]
 802056a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 802056c:	1dbb      	adds	r3, r7, #6
 802056e:	881a      	ldrh	r2, [r3, #0]
 8020570:	697b      	ldr	r3, [r7, #20]
 8020572:	18d3      	adds	r3, r2, r3
 8020574:	2280      	movs	r2, #128	@ 0x80
 8020576:	00d2      	lsls	r2, r2, #3
 8020578:	4694      	mov	ip, r2
 802057a:	4463      	add	r3, ip
 802057c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802057e:	69bb      	ldr	r3, [r7, #24]
 8020580:	627b      	str	r3, [r7, #36]	@ 0x24
 8020582:	e018      	b.n	80205b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8020584:	6a3b      	ldr	r3, [r7, #32]
 8020586:	881b      	ldrh	r3, [r3, #0]
 8020588:	b29b      	uxth	r3, r3
 802058a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 802058c:	6a3b      	ldr	r3, [r7, #32]
 802058e:	3302      	adds	r3, #2
 8020590:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8020592:	693b      	ldr	r3, [r7, #16]
 8020594:	b2da      	uxtb	r2, r3
 8020596:	69fb      	ldr	r3, [r7, #28]
 8020598:	701a      	strb	r2, [r3, #0]
    pBuf++;
 802059a:	69fb      	ldr	r3, [r7, #28]
 802059c:	3301      	adds	r3, #1
 802059e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80205a0:	693b      	ldr	r3, [r7, #16]
 80205a2:	0a1b      	lsrs	r3, r3, #8
 80205a4:	b2da      	uxtb	r2, r3
 80205a6:	69fb      	ldr	r3, [r7, #28]
 80205a8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80205aa:	69fb      	ldr	r3, [r7, #28]
 80205ac:	3301      	adds	r3, #1
 80205ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80205b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205b2:	3b01      	subs	r3, #1
 80205b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80205b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	d1e3      	bne.n	8020584 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80205bc:	1d3b      	adds	r3, r7, #4
 80205be:	881b      	ldrh	r3, [r3, #0]
 80205c0:	2201      	movs	r2, #1
 80205c2:	4013      	ands	r3, r2
 80205c4:	b29b      	uxth	r3, r3
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d007      	beq.n	80205da <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80205ca:	6a3b      	ldr	r3, [r7, #32]
 80205cc:	881b      	ldrh	r3, [r3, #0]
 80205ce:	b29b      	uxth	r3, r3
 80205d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80205d2:	693b      	ldr	r3, [r7, #16]
 80205d4:	b2da      	uxtb	r2, r3
 80205d6:	69fb      	ldr	r3, [r7, #28]
 80205d8:	701a      	strb	r2, [r3, #0]
  }
}
 80205da:	46c0      	nop			@ (mov r8, r8)
 80205dc:	46bd      	mov	sp, r7
 80205de:	b00a      	add	sp, #40	@ 0x28
 80205e0:	bd80      	pop	{r7, pc}

080205e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80205e2:	b580      	push	{r7, lr}
 80205e4:	b084      	sub	sp, #16
 80205e6:	af00      	add	r7, sp, #0
 80205e8:	6078      	str	r0, [r7, #4]
 80205ea:	000a      	movs	r2, r1
 80205ec:	1cfb      	adds	r3, r7, #3
 80205ee:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80205f0:	230f      	movs	r3, #15
 80205f2:	18fb      	adds	r3, r7, r3
 80205f4:	2200      	movs	r2, #0
 80205f6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	7c1b      	ldrb	r3, [r3, #16]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d116      	bne.n	802062e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8020600:	2380      	movs	r3, #128	@ 0x80
 8020602:	009b      	lsls	r3, r3, #2
 8020604:	6878      	ldr	r0, [r7, #4]
 8020606:	2202      	movs	r2, #2
 8020608:	2181      	movs	r1, #129	@ 0x81
 802060a:	f002 f8ec 	bl	80227e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	2201      	movs	r2, #1
 8020612:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020614:	2380      	movs	r3, #128	@ 0x80
 8020616:	009b      	lsls	r3, r3, #2
 8020618:	6878      	ldr	r0, [r7, #4]
 802061a:	2202      	movs	r2, #2
 802061c:	2101      	movs	r1, #1
 802061e:	f002 f8e2 	bl	80227e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8020622:	687a      	ldr	r2, [r7, #4]
 8020624:	23b6      	movs	r3, #182	@ 0xb6
 8020626:	005b      	lsls	r3, r3, #1
 8020628:	2101      	movs	r1, #1
 802062a:	50d1      	str	r1, [r2, r3]
 802062c:	e013      	b.n	8020656 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802062e:	6878      	ldr	r0, [r7, #4]
 8020630:	2340      	movs	r3, #64	@ 0x40
 8020632:	2202      	movs	r2, #2
 8020634:	2181      	movs	r1, #129	@ 0x81
 8020636:	f002 f8d6 	bl	80227e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	2201      	movs	r2, #1
 802063e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8020640:	6878      	ldr	r0, [r7, #4]
 8020642:	2340      	movs	r3, #64	@ 0x40
 8020644:	2202      	movs	r2, #2
 8020646:	2101      	movs	r1, #1
 8020648:	f002 f8cd 	bl	80227e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802064c:	687a      	ldr	r2, [r7, #4]
 802064e:	23b6      	movs	r3, #182	@ 0xb6
 8020650:	005b      	lsls	r3, r3, #1
 8020652:	2101      	movs	r1, #1
 8020654:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8020656:	6878      	ldr	r0, [r7, #4]
 8020658:	2308      	movs	r3, #8
 802065a:	2203      	movs	r2, #3
 802065c:	2182      	movs	r1, #130	@ 0x82
 802065e:	f002 f8c2 	bl	80227e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8020662:	687b      	ldr	r3, [r7, #4]
 8020664:	2201      	movs	r2, #1
 8020666:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8020668:	2387      	movs	r3, #135	@ 0x87
 802066a:	009b      	lsls	r3, r3, #2
 802066c:	0018      	movs	r0, r3
 802066e:	f002 fa53 	bl	8022b18 <USBD_static_malloc>
 8020672:	0001      	movs	r1, r0
 8020674:	687a      	ldr	r2, [r7, #4]
 8020676:	23ae      	movs	r3, #174	@ 0xae
 8020678:	009b      	lsls	r3, r3, #2
 802067a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 802067c:	687a      	ldr	r2, [r7, #4]
 802067e:	23ae      	movs	r3, #174	@ 0xae
 8020680:	009b      	lsls	r3, r3, #2
 8020682:	58d3      	ldr	r3, [r2, r3]
 8020684:	2b00      	cmp	r3, #0
 8020686:	d104      	bne.n	8020692 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8020688:	230f      	movs	r3, #15
 802068a:	18fb      	adds	r3, r7, r3
 802068c:	2201      	movs	r2, #1
 802068e:	701a      	strb	r2, [r3, #0]
 8020690:	e02c      	b.n	80206ec <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020692:	687a      	ldr	r2, [r7, #4]
 8020694:	23ae      	movs	r3, #174	@ 0xae
 8020696:	009b      	lsls	r3, r3, #2
 8020698:	58d3      	ldr	r3, [r2, r3]
 802069a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 802069c:	687a      	ldr	r2, [r7, #4]
 802069e:	23af      	movs	r3, #175	@ 0xaf
 80206a0:	009b      	lsls	r3, r3, #2
 80206a2:	58d3      	ldr	r3, [r2, r3]
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80206a8:	68ba      	ldr	r2, [r7, #8]
 80206aa:	2385      	movs	r3, #133	@ 0x85
 80206ac:	009b      	lsls	r3, r3, #2
 80206ae:	2100      	movs	r1, #0
 80206b0:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80206b2:	68ba      	ldr	r2, [r7, #8]
 80206b4:	2386      	movs	r3, #134	@ 0x86
 80206b6:	009b      	lsls	r3, r3, #2
 80206b8:	2100      	movs	r1, #0
 80206ba:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	7c1b      	ldrb	r3, [r3, #16]
 80206c0:	2b00      	cmp	r3, #0
 80206c2:	d10a      	bne.n	80206da <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80206c4:	68ba      	ldr	r2, [r7, #8]
 80206c6:	2381      	movs	r3, #129	@ 0x81
 80206c8:	009b      	lsls	r3, r3, #2
 80206ca:	58d2      	ldr	r2, [r2, r3]
 80206cc:	2380      	movs	r3, #128	@ 0x80
 80206ce:	009b      	lsls	r3, r3, #2
 80206d0:	6878      	ldr	r0, [r7, #4]
 80206d2:	2101      	movs	r1, #1
 80206d4:	f002 f9d2 	bl	8022a7c <USBD_LL_PrepareReceive>
 80206d8:	e008      	b.n	80206ec <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80206da:	68ba      	ldr	r2, [r7, #8]
 80206dc:	2381      	movs	r3, #129	@ 0x81
 80206de:	009b      	lsls	r3, r3, #2
 80206e0:	58d2      	ldr	r2, [r2, r3]
 80206e2:	6878      	ldr	r0, [r7, #4]
 80206e4:	2340      	movs	r3, #64	@ 0x40
 80206e6:	2101      	movs	r1, #1
 80206e8:	f002 f9c8 	bl	8022a7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80206ec:	230f      	movs	r3, #15
 80206ee:	18fb      	adds	r3, r7, r3
 80206f0:	781b      	ldrb	r3, [r3, #0]
}
 80206f2:	0018      	movs	r0, r3
 80206f4:	46bd      	mov	sp, r7
 80206f6:	b004      	add	sp, #16
 80206f8:	bd80      	pop	{r7, pc}

080206fa <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80206fa:	b580      	push	{r7, lr}
 80206fc:	b084      	sub	sp, #16
 80206fe:	af00      	add	r7, sp, #0
 8020700:	6078      	str	r0, [r7, #4]
 8020702:	000a      	movs	r2, r1
 8020704:	1cfb      	adds	r3, r7, #3
 8020706:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8020708:	230f      	movs	r3, #15
 802070a:	18fb      	adds	r3, r7, r3
 802070c:	2200      	movs	r2, #0
 802070e:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8020710:	687b      	ldr	r3, [r7, #4]
 8020712:	2181      	movs	r1, #129	@ 0x81
 8020714:	0018      	movs	r0, r3
 8020716:	f002 f89d 	bl	8022854 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	2200      	movs	r2, #0
 802071e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	2101      	movs	r1, #1
 8020724:	0018      	movs	r0, r3
 8020726:	f002 f895 	bl	8022854 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 802072a:	687a      	ldr	r2, [r7, #4]
 802072c:	23b6      	movs	r3, #182	@ 0xb6
 802072e:	005b      	lsls	r3, r3, #1
 8020730:	2100      	movs	r1, #0
 8020732:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	2182      	movs	r1, #130	@ 0x82
 8020738:	0018      	movs	r0, r3
 802073a:	f002 f88b 	bl	8022854 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	2200      	movs	r2, #0
 8020742:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8020744:	687a      	ldr	r2, [r7, #4]
 8020746:	23ae      	movs	r3, #174	@ 0xae
 8020748:	009b      	lsls	r3, r3, #2
 802074a:	58d3      	ldr	r3, [r2, r3]
 802074c:	2b00      	cmp	r3, #0
 802074e:	d011      	beq.n	8020774 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8020750:	687a      	ldr	r2, [r7, #4]
 8020752:	23af      	movs	r3, #175	@ 0xaf
 8020754:	009b      	lsls	r3, r3, #2
 8020756:	58d3      	ldr	r3, [r2, r3]
 8020758:	685b      	ldr	r3, [r3, #4]
 802075a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 802075c:	687a      	ldr	r2, [r7, #4]
 802075e:	23ae      	movs	r3, #174	@ 0xae
 8020760:	009b      	lsls	r3, r3, #2
 8020762:	58d3      	ldr	r3, [r2, r3]
 8020764:	0018      	movs	r0, r3
 8020766:	f002 f9e3 	bl	8022b30 <USBD_static_free>
    pdev->pClassData = NULL;
 802076a:	687a      	ldr	r2, [r7, #4]
 802076c:	23ae      	movs	r3, #174	@ 0xae
 802076e:	009b      	lsls	r3, r3, #2
 8020770:	2100      	movs	r1, #0
 8020772:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8020774:	230f      	movs	r3, #15
 8020776:	18fb      	adds	r3, r7, r3
 8020778:	781b      	ldrb	r3, [r3, #0]
}
 802077a:	0018      	movs	r0, r3
 802077c:	46bd      	mov	sp, r7
 802077e:	b004      	add	sp, #16
 8020780:	bd80      	pop	{r7, pc}
	...

08020784 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8020784:	b580      	push	{r7, lr}
 8020786:	b086      	sub	sp, #24
 8020788:	af00      	add	r7, sp, #0
 802078a:	6078      	str	r0, [r7, #4]
 802078c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802078e:	687a      	ldr	r2, [r7, #4]
 8020790:	23ae      	movs	r3, #174	@ 0xae
 8020792:	009b      	lsls	r3, r3, #2
 8020794:	58d3      	ldr	r3, [r2, r3]
 8020796:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8020798:	230f      	movs	r3, #15
 802079a:	18fb      	adds	r3, r7, r3
 802079c:	2200      	movs	r2, #0
 802079e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80207a0:	230c      	movs	r3, #12
 80207a2:	18fb      	adds	r3, r7, r3
 80207a4:	2200      	movs	r2, #0
 80207a6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80207a8:	2317      	movs	r3, #23
 80207aa:	18fb      	adds	r3, r7, r3
 80207ac:	2200      	movs	r2, #0
 80207ae:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80207b0:	683b      	ldr	r3, [r7, #0]
 80207b2:	781b      	ldrb	r3, [r3, #0]
 80207b4:	001a      	movs	r2, r3
 80207b6:	2360      	movs	r3, #96	@ 0x60
 80207b8:	4013      	ands	r3, r2
 80207ba:	d03d      	beq.n	8020838 <USBD_CDC_Setup+0xb4>
 80207bc:	2b20      	cmp	r3, #32
 80207be:	d000      	beq.n	80207c2 <USBD_CDC_Setup+0x3e>
 80207c0:	e094      	b.n	80208ec <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80207c2:	683b      	ldr	r3, [r7, #0]
 80207c4:	88db      	ldrh	r3, [r3, #6]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d02b      	beq.n	8020822 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	781b      	ldrb	r3, [r3, #0]
 80207ce:	b25b      	sxtb	r3, r3
 80207d0:	2b00      	cmp	r3, #0
 80207d2:	da12      	bge.n	80207fa <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80207d4:	687a      	ldr	r2, [r7, #4]
 80207d6:	23af      	movs	r3, #175	@ 0xaf
 80207d8:	009b      	lsls	r3, r3, #2
 80207da:	58d3      	ldr	r3, [r2, r3]
 80207dc:	689b      	ldr	r3, [r3, #8]
 80207de:	683a      	ldr	r2, [r7, #0]
 80207e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80207e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80207e4:	683a      	ldr	r2, [r7, #0]
 80207e6:	88d2      	ldrh	r2, [r2, #6]
 80207e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80207ea:	6939      	ldr	r1, [r7, #16]
 80207ec:	683b      	ldr	r3, [r7, #0]
 80207ee:	88da      	ldrh	r2, [r3, #6]
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	0018      	movs	r0, r3
 80207f4:	f001 fbaf 	bl	8021f56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80207f8:	e083      	b.n	8020902 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	7859      	ldrb	r1, [r3, #1]
 80207fe:	693a      	ldr	r2, [r7, #16]
 8020800:	2380      	movs	r3, #128	@ 0x80
 8020802:	009b      	lsls	r3, r3, #2
 8020804:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8020806:	683b      	ldr	r3, [r7, #0]
 8020808:	88db      	ldrh	r3, [r3, #6]
 802080a:	b2d9      	uxtb	r1, r3
 802080c:	693b      	ldr	r3, [r7, #16]
 802080e:	4a40      	ldr	r2, [pc, #256]	@ (8020910 <USBD_CDC_Setup+0x18c>)
 8020810:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8020812:	6939      	ldr	r1, [r7, #16]
 8020814:	683b      	ldr	r3, [r7, #0]
 8020816:	88da      	ldrh	r2, [r3, #6]
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	0018      	movs	r0, r3
 802081c:	f001 fbce 	bl	8021fbc <USBD_CtlPrepareRx>
      break;
 8020820:	e06f      	b.n	8020902 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8020822:	687a      	ldr	r2, [r7, #4]
 8020824:	23af      	movs	r3, #175	@ 0xaf
 8020826:	009b      	lsls	r3, r3, #2
 8020828:	58d3      	ldr	r3, [r2, r3]
 802082a:	689b      	ldr	r3, [r3, #8]
 802082c:	683a      	ldr	r2, [r7, #0]
 802082e:	7850      	ldrb	r0, [r2, #1]
 8020830:	6839      	ldr	r1, [r7, #0]
 8020832:	2200      	movs	r2, #0
 8020834:	4798      	blx	r3
      break;
 8020836:	e064      	b.n	8020902 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020838:	683b      	ldr	r3, [r7, #0]
 802083a:	785b      	ldrb	r3, [r3, #1]
 802083c:	2b0b      	cmp	r3, #11
 802083e:	d037      	beq.n	80208b0 <USBD_CDC_Setup+0x12c>
 8020840:	dc47      	bgt.n	80208d2 <USBD_CDC_Setup+0x14e>
 8020842:	2b00      	cmp	r3, #0
 8020844:	d002      	beq.n	802084c <USBD_CDC_Setup+0xc8>
 8020846:	2b0a      	cmp	r3, #10
 8020848:	d019      	beq.n	802087e <USBD_CDC_Setup+0xfa>
 802084a:	e042      	b.n	80208d2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802084c:	687a      	ldr	r2, [r7, #4]
 802084e:	23a7      	movs	r3, #167	@ 0xa7
 8020850:	009b      	lsls	r3, r3, #2
 8020852:	5cd3      	ldrb	r3, [r2, r3]
 8020854:	2b03      	cmp	r3, #3
 8020856:	d107      	bne.n	8020868 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8020858:	230c      	movs	r3, #12
 802085a:	18f9      	adds	r1, r7, r3
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	2202      	movs	r2, #2
 8020860:	0018      	movs	r0, r3
 8020862:	f001 fb78 	bl	8021f56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020866:	e040      	b.n	80208ea <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8020868:	683a      	ldr	r2, [r7, #0]
 802086a:	687b      	ldr	r3, [r7, #4]
 802086c:	0011      	movs	r1, r2
 802086e:	0018      	movs	r0, r3
 8020870:	f001 faf3 	bl	8021e5a <USBD_CtlError>
            ret = USBD_FAIL;
 8020874:	2317      	movs	r3, #23
 8020876:	18fb      	adds	r3, r7, r3
 8020878:	2202      	movs	r2, #2
 802087a:	701a      	strb	r2, [r3, #0]
          break;
 802087c:	e035      	b.n	80208ea <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802087e:	687a      	ldr	r2, [r7, #4]
 8020880:	23a7      	movs	r3, #167	@ 0xa7
 8020882:	009b      	lsls	r3, r3, #2
 8020884:	5cd3      	ldrb	r3, [r2, r3]
 8020886:	2b03      	cmp	r3, #3
 8020888:	d107      	bne.n	802089a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 802088a:	230f      	movs	r3, #15
 802088c:	18f9      	adds	r1, r7, r3
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	2201      	movs	r2, #1
 8020892:	0018      	movs	r0, r3
 8020894:	f001 fb5f 	bl	8021f56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020898:	e027      	b.n	80208ea <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 802089a:	683a      	ldr	r2, [r7, #0]
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	0011      	movs	r1, r2
 80208a0:	0018      	movs	r0, r3
 80208a2:	f001 fada 	bl	8021e5a <USBD_CtlError>
            ret = USBD_FAIL;
 80208a6:	2317      	movs	r3, #23
 80208a8:	18fb      	adds	r3, r7, r3
 80208aa:	2202      	movs	r2, #2
 80208ac:	701a      	strb	r2, [r3, #0]
          break;
 80208ae:	e01c      	b.n	80208ea <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80208b0:	687a      	ldr	r2, [r7, #4]
 80208b2:	23a7      	movs	r3, #167	@ 0xa7
 80208b4:	009b      	lsls	r3, r3, #2
 80208b6:	5cd3      	ldrb	r3, [r2, r3]
 80208b8:	2b03      	cmp	r3, #3
 80208ba:	d015      	beq.n	80208e8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80208bc:	683a      	ldr	r2, [r7, #0]
 80208be:	687b      	ldr	r3, [r7, #4]
 80208c0:	0011      	movs	r1, r2
 80208c2:	0018      	movs	r0, r3
 80208c4:	f001 fac9 	bl	8021e5a <USBD_CtlError>
            ret = USBD_FAIL;
 80208c8:	2317      	movs	r3, #23
 80208ca:	18fb      	adds	r3, r7, r3
 80208cc:	2202      	movs	r2, #2
 80208ce:	701a      	strb	r2, [r3, #0]
          }
          break;
 80208d0:	e00a      	b.n	80208e8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80208d2:	683a      	ldr	r2, [r7, #0]
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	0011      	movs	r1, r2
 80208d8:	0018      	movs	r0, r3
 80208da:	f001 fabe 	bl	8021e5a <USBD_CtlError>
          ret = USBD_FAIL;
 80208de:	2317      	movs	r3, #23
 80208e0:	18fb      	adds	r3, r7, r3
 80208e2:	2202      	movs	r2, #2
 80208e4:	701a      	strb	r2, [r3, #0]
          break;
 80208e6:	e000      	b.n	80208ea <USBD_CDC_Setup+0x166>
          break;
 80208e8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80208ea:	e00a      	b.n	8020902 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80208ec:	683a      	ldr	r2, [r7, #0]
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	0011      	movs	r1, r2
 80208f2:	0018      	movs	r0, r3
 80208f4:	f001 fab1 	bl	8021e5a <USBD_CtlError>
      ret = USBD_FAIL;
 80208f8:	2317      	movs	r3, #23
 80208fa:	18fb      	adds	r3, r7, r3
 80208fc:	2202      	movs	r2, #2
 80208fe:	701a      	strb	r2, [r3, #0]
      break;
 8020900:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8020902:	2317      	movs	r3, #23
 8020904:	18fb      	adds	r3, r7, r3
 8020906:	781b      	ldrb	r3, [r3, #0]
}
 8020908:	0018      	movs	r0, r3
 802090a:	46bd      	mov	sp, r7
 802090c:	b006      	add	sp, #24
 802090e:	bd80      	pop	{r7, pc}
 8020910:	00000201 	.word	0x00000201

08020914 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8020914:	b580      	push	{r7, lr}
 8020916:	b084      	sub	sp, #16
 8020918:	af00      	add	r7, sp, #0
 802091a:	6078      	str	r0, [r7, #4]
 802091c:	000a      	movs	r2, r1
 802091e:	1cfb      	adds	r3, r7, #3
 8020920:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8020922:	687a      	ldr	r2, [r7, #4]
 8020924:	23ae      	movs	r3, #174	@ 0xae
 8020926:	009b      	lsls	r3, r3, #2
 8020928:	58d3      	ldr	r3, [r2, r3]
 802092a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 802092c:	687a      	ldr	r2, [r7, #4]
 802092e:	23b0      	movs	r3, #176	@ 0xb0
 8020930:	009b      	lsls	r3, r3, #2
 8020932:	58d3      	ldr	r3, [r2, r3]
 8020934:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8020936:	687a      	ldr	r2, [r7, #4]
 8020938:	23ae      	movs	r3, #174	@ 0xae
 802093a:	009b      	lsls	r3, r3, #2
 802093c:	58d3      	ldr	r3, [r2, r3]
 802093e:	2b00      	cmp	r3, #0
 8020940:	d03e      	beq.n	80209c0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8020942:	1cfb      	adds	r3, r7, #3
 8020944:	781a      	ldrb	r2, [r3, #0]
 8020946:	6879      	ldr	r1, [r7, #4]
 8020948:	0013      	movs	r3, r2
 802094a:	009b      	lsls	r3, r3, #2
 802094c:	189b      	adds	r3, r3, r2
 802094e:	009b      	lsls	r3, r3, #2
 8020950:	18cb      	adds	r3, r1, r3
 8020952:	331c      	adds	r3, #28
 8020954:	681b      	ldr	r3, [r3, #0]
 8020956:	2b00      	cmp	r3, #0
 8020958:	d02b      	beq.n	80209b2 <USBD_CDC_DataIn+0x9e>
 802095a:	1cfb      	adds	r3, r7, #3
 802095c:	781a      	ldrb	r2, [r3, #0]
 802095e:	6879      	ldr	r1, [r7, #4]
 8020960:	0013      	movs	r3, r2
 8020962:	009b      	lsls	r3, r3, #2
 8020964:	189b      	adds	r3, r3, r2
 8020966:	009b      	lsls	r3, r3, #2
 8020968:	18cb      	adds	r3, r1, r3
 802096a:	331c      	adds	r3, #28
 802096c:	6818      	ldr	r0, [r3, #0]
 802096e:	1cfb      	adds	r3, r7, #3
 8020970:	781a      	ldrb	r2, [r3, #0]
 8020972:	68b9      	ldr	r1, [r7, #8]
 8020974:	0013      	movs	r3, r2
 8020976:	009b      	lsls	r3, r3, #2
 8020978:	189b      	adds	r3, r3, r2
 802097a:	00db      	lsls	r3, r3, #3
 802097c:	18cb      	adds	r3, r1, r3
 802097e:	3338      	adds	r3, #56	@ 0x38
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	0019      	movs	r1, r3
 8020984:	f7df fc94 	bl	80002b0 <__aeabi_uidivmod>
 8020988:	1e0b      	subs	r3, r1, #0
 802098a:	d112      	bne.n	80209b2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 802098c:	1cfb      	adds	r3, r7, #3
 802098e:	781a      	ldrb	r2, [r3, #0]
 8020990:	6879      	ldr	r1, [r7, #4]
 8020992:	0013      	movs	r3, r2
 8020994:	009b      	lsls	r3, r3, #2
 8020996:	189b      	adds	r3, r3, r2
 8020998:	009b      	lsls	r3, r3, #2
 802099a:	18cb      	adds	r3, r1, r3
 802099c:	331c      	adds	r3, #28
 802099e:	2200      	movs	r2, #0
 80209a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80209a2:	1cfb      	adds	r3, r7, #3
 80209a4:	7819      	ldrb	r1, [r3, #0]
 80209a6:	6878      	ldr	r0, [r7, #4]
 80209a8:	2300      	movs	r3, #0
 80209aa:	2200      	movs	r2, #0
 80209ac:	f002 f82f 	bl	8022a0e <USBD_LL_Transmit>
 80209b0:	e004      	b.n	80209bc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80209b2:	68fa      	ldr	r2, [r7, #12]
 80209b4:	2385      	movs	r3, #133	@ 0x85
 80209b6:	009b      	lsls	r3, r3, #2
 80209b8:	2100      	movs	r1, #0
 80209ba:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80209bc:	2300      	movs	r3, #0
 80209be:	e000      	b.n	80209c2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80209c0:	2302      	movs	r3, #2
  }
}
 80209c2:	0018      	movs	r0, r3
 80209c4:	46bd      	mov	sp, r7
 80209c6:	b004      	add	sp, #16
 80209c8:	bd80      	pop	{r7, pc}

080209ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80209ca:	b580      	push	{r7, lr}
 80209cc:	b084      	sub	sp, #16
 80209ce:	af00      	add	r7, sp, #0
 80209d0:	6078      	str	r0, [r7, #4]
 80209d2:	000a      	movs	r2, r1
 80209d4:	1cfb      	adds	r3, r7, #3
 80209d6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80209d8:	687a      	ldr	r2, [r7, #4]
 80209da:	23ae      	movs	r3, #174	@ 0xae
 80209dc:	009b      	lsls	r3, r3, #2
 80209de:	58d3      	ldr	r3, [r2, r3]
 80209e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80209e2:	1cfb      	adds	r3, r7, #3
 80209e4:	781a      	ldrb	r2, [r3, #0]
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	0011      	movs	r1, r2
 80209ea:	0018      	movs	r0, r3
 80209ec:	f002 f87d 	bl	8022aea <USBD_LL_GetRxDataSize>
 80209f0:	0001      	movs	r1, r0
 80209f2:	68fa      	ldr	r2, [r7, #12]
 80209f4:	2383      	movs	r3, #131	@ 0x83
 80209f6:	009b      	lsls	r3, r3, #2
 80209f8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80209fa:	687a      	ldr	r2, [r7, #4]
 80209fc:	23ae      	movs	r3, #174	@ 0xae
 80209fe:	009b      	lsls	r3, r3, #2
 8020a00:	58d3      	ldr	r3, [r2, r3]
 8020a02:	2b00      	cmp	r3, #0
 8020a04:	d011      	beq.n	8020a2a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8020a06:	687a      	ldr	r2, [r7, #4]
 8020a08:	23af      	movs	r3, #175	@ 0xaf
 8020a0a:	009b      	lsls	r3, r3, #2
 8020a0c:	58d3      	ldr	r3, [r2, r3]
 8020a0e:	68da      	ldr	r2, [r3, #12]
 8020a10:	68f9      	ldr	r1, [r7, #12]
 8020a12:	2381      	movs	r3, #129	@ 0x81
 8020a14:	009b      	lsls	r3, r3, #2
 8020a16:	58c8      	ldr	r0, [r1, r3]
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	2183      	movs	r1, #131	@ 0x83
 8020a1c:	0089      	lsls	r1, r1, #2
 8020a1e:	468c      	mov	ip, r1
 8020a20:	4463      	add	r3, ip
 8020a22:	0019      	movs	r1, r3
 8020a24:	4790      	blx	r2

    return USBD_OK;
 8020a26:	2300      	movs	r3, #0
 8020a28:	e000      	b.n	8020a2c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8020a2a:	2302      	movs	r3, #2
  }
}
 8020a2c:	0018      	movs	r0, r3
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	b004      	add	sp, #16
 8020a32:	bd80      	pop	{r7, pc}

08020a34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8020a34:	b590      	push	{r4, r7, lr}
 8020a36:	b085      	sub	sp, #20
 8020a38:	af00      	add	r7, sp, #0
 8020a3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020a3c:	687a      	ldr	r2, [r7, #4]
 8020a3e:	23ae      	movs	r3, #174	@ 0xae
 8020a40:	009b      	lsls	r3, r3, #2
 8020a42:	58d3      	ldr	r3, [r2, r3]
 8020a44:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8020a46:	687a      	ldr	r2, [r7, #4]
 8020a48:	23af      	movs	r3, #175	@ 0xaf
 8020a4a:	009b      	lsls	r3, r3, #2
 8020a4c:	58d3      	ldr	r3, [r2, r3]
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	d018      	beq.n	8020a84 <USBD_CDC_EP0_RxReady+0x50>
 8020a52:	68fa      	ldr	r2, [r7, #12]
 8020a54:	2380      	movs	r3, #128	@ 0x80
 8020a56:	009b      	lsls	r3, r3, #2
 8020a58:	5cd3      	ldrb	r3, [r2, r3]
 8020a5a:	2bff      	cmp	r3, #255	@ 0xff
 8020a5c:	d012      	beq.n	8020a84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020a5e:	687a      	ldr	r2, [r7, #4]
 8020a60:	23af      	movs	r3, #175	@ 0xaf
 8020a62:	009b      	lsls	r3, r3, #2
 8020a64:	58d3      	ldr	r3, [r2, r3]
 8020a66:	689b      	ldr	r3, [r3, #8]
 8020a68:	68f9      	ldr	r1, [r7, #12]
 8020a6a:	2280      	movs	r2, #128	@ 0x80
 8020a6c:	0092      	lsls	r2, r2, #2
 8020a6e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8020a70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8020a72:	68fa      	ldr	r2, [r7, #12]
 8020a74:	4c06      	ldr	r4, [pc, #24]	@ (8020a90 <USBD_CDC_EP0_RxReady+0x5c>)
 8020a76:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8020a78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8020a7a:	68fa      	ldr	r2, [r7, #12]
 8020a7c:	2380      	movs	r3, #128	@ 0x80
 8020a7e:	009b      	lsls	r3, r3, #2
 8020a80:	21ff      	movs	r1, #255	@ 0xff
 8020a82:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8020a84:	2300      	movs	r3, #0
}
 8020a86:	0018      	movs	r0, r3
 8020a88:	46bd      	mov	sp, r7
 8020a8a:	b005      	add	sp, #20
 8020a8c:	bd90      	pop	{r4, r7, pc}
 8020a8e:	46c0      	nop			@ (mov r8, r8)
 8020a90:	00000201 	.word	0x00000201

08020a94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8020a94:	b580      	push	{r7, lr}
 8020a96:	b082      	sub	sp, #8
 8020a98:	af00      	add	r7, sp, #0
 8020a9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	2243      	movs	r2, #67	@ 0x43
 8020aa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8020aa2:	4b02      	ldr	r3, [pc, #8]	@ (8020aac <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8020aa4:	0018      	movs	r0, r3
 8020aa6:	46bd      	mov	sp, r7
 8020aa8:	b002      	add	sp, #8
 8020aaa:	bd80      	pop	{r7, pc}
 8020aac:	20000180 	.word	0x20000180

08020ab0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b082      	sub	sp, #8
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	2243      	movs	r2, #67	@ 0x43
 8020abc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8020abe:	4b02      	ldr	r3, [pc, #8]	@ (8020ac8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8020ac0:	0018      	movs	r0, r3
 8020ac2:	46bd      	mov	sp, r7
 8020ac4:	b002      	add	sp, #8
 8020ac6:	bd80      	pop	{r7, pc}
 8020ac8:	2000013c 	.word	0x2000013c

08020acc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b082      	sub	sp, #8
 8020ad0:	af00      	add	r7, sp, #0
 8020ad2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	2243      	movs	r2, #67	@ 0x43
 8020ad8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8020ada:	4b02      	ldr	r3, [pc, #8]	@ (8020ae4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8020adc:	0018      	movs	r0, r3
 8020ade:	46bd      	mov	sp, r7
 8020ae0:	b002      	add	sp, #8
 8020ae2:	bd80      	pop	{r7, pc}
 8020ae4:	200001c4 	.word	0x200001c4

08020ae8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b082      	sub	sp, #8
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	220a      	movs	r2, #10
 8020af4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8020af6:	4b02      	ldr	r3, [pc, #8]	@ (8020b00 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8020af8:	0018      	movs	r0, r3
 8020afa:	46bd      	mov	sp, r7
 8020afc:	b002      	add	sp, #8
 8020afe:	bd80      	pop	{r7, pc}
 8020b00:	200000f8 	.word	0x200000f8

08020b04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8020b04:	b580      	push	{r7, lr}
 8020b06:	b084      	sub	sp, #16
 8020b08:	af00      	add	r7, sp, #0
 8020b0a:	6078      	str	r0, [r7, #4]
 8020b0c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8020b0e:	200f      	movs	r0, #15
 8020b10:	183b      	adds	r3, r7, r0
 8020b12:	2202      	movs	r2, #2
 8020b14:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8020b16:	683b      	ldr	r3, [r7, #0]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d007      	beq.n	8020b2c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8020b1c:	687a      	ldr	r2, [r7, #4]
 8020b1e:	23af      	movs	r3, #175	@ 0xaf
 8020b20:	009b      	lsls	r3, r3, #2
 8020b22:	6839      	ldr	r1, [r7, #0]
 8020b24:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8020b26:	183b      	adds	r3, r7, r0
 8020b28:	2200      	movs	r2, #0
 8020b2a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8020b2c:	230f      	movs	r3, #15
 8020b2e:	18fb      	adds	r3, r7, r3
 8020b30:	781b      	ldrb	r3, [r3, #0]
}
 8020b32:	0018      	movs	r0, r3
 8020b34:	46bd      	mov	sp, r7
 8020b36:	b004      	add	sp, #16
 8020b38:	bd80      	pop	{r7, pc}

08020b3a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8020b3a:	b580      	push	{r7, lr}
 8020b3c:	b086      	sub	sp, #24
 8020b3e:	af00      	add	r7, sp, #0
 8020b40:	60f8      	str	r0, [r7, #12]
 8020b42:	60b9      	str	r1, [r7, #8]
 8020b44:	1dbb      	adds	r3, r7, #6
 8020b46:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020b48:	68fa      	ldr	r2, [r7, #12]
 8020b4a:	23ae      	movs	r3, #174	@ 0xae
 8020b4c:	009b      	lsls	r3, r3, #2
 8020b4e:	58d3      	ldr	r3, [r2, r3]
 8020b50:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8020b52:	697a      	ldr	r2, [r7, #20]
 8020b54:	2382      	movs	r3, #130	@ 0x82
 8020b56:	009b      	lsls	r3, r3, #2
 8020b58:	68b9      	ldr	r1, [r7, #8]
 8020b5a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8020b5c:	1dbb      	adds	r3, r7, #6
 8020b5e:	8819      	ldrh	r1, [r3, #0]
 8020b60:	697a      	ldr	r2, [r7, #20]
 8020b62:	2384      	movs	r3, #132	@ 0x84
 8020b64:	009b      	lsls	r3, r3, #2
 8020b66:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020b68:	2300      	movs	r3, #0
}
 8020b6a:	0018      	movs	r0, r3
 8020b6c:	46bd      	mov	sp, r7
 8020b6e:	b006      	add	sp, #24
 8020b70:	bd80      	pop	{r7, pc}

08020b72 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8020b72:	b580      	push	{r7, lr}
 8020b74:	b084      	sub	sp, #16
 8020b76:	af00      	add	r7, sp, #0
 8020b78:	6078      	str	r0, [r7, #4]
 8020b7a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020b7c:	687a      	ldr	r2, [r7, #4]
 8020b7e:	23ae      	movs	r3, #174	@ 0xae
 8020b80:	009b      	lsls	r3, r3, #2
 8020b82:	58d3      	ldr	r3, [r2, r3]
 8020b84:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8020b86:	68fa      	ldr	r2, [r7, #12]
 8020b88:	2381      	movs	r3, #129	@ 0x81
 8020b8a:	009b      	lsls	r3, r3, #2
 8020b8c:	6839      	ldr	r1, [r7, #0]
 8020b8e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8020b90:	2300      	movs	r3, #0
}
 8020b92:	0018      	movs	r0, r3
 8020b94:	46bd      	mov	sp, r7
 8020b96:	b004      	add	sp, #16
 8020b98:	bd80      	pop	{r7, pc}

08020b9a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8020b9a:	b580      	push	{r7, lr}
 8020b9c:	b084      	sub	sp, #16
 8020b9e:	af00      	add	r7, sp, #0
 8020ba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020ba2:	687a      	ldr	r2, [r7, #4]
 8020ba4:	23ae      	movs	r3, #174	@ 0xae
 8020ba6:	009b      	lsls	r3, r3, #2
 8020ba8:	58d3      	ldr	r3, [r2, r3]
 8020baa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8020bac:	687a      	ldr	r2, [r7, #4]
 8020bae:	23ae      	movs	r3, #174	@ 0xae
 8020bb0:	009b      	lsls	r3, r3, #2
 8020bb2:	58d3      	ldr	r3, [r2, r3]
 8020bb4:	2b00      	cmp	r3, #0
 8020bb6:	d022      	beq.n	8020bfe <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8020bb8:	68fa      	ldr	r2, [r7, #12]
 8020bba:	2385      	movs	r3, #133	@ 0x85
 8020bbc:	009b      	lsls	r3, r3, #2
 8020bbe:	58d3      	ldr	r3, [r2, r3]
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	d11a      	bne.n	8020bfa <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8020bc4:	68fa      	ldr	r2, [r7, #12]
 8020bc6:	2385      	movs	r3, #133	@ 0x85
 8020bc8:	009b      	lsls	r3, r3, #2
 8020bca:	2101      	movs	r1, #1
 8020bcc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8020bce:	68fa      	ldr	r2, [r7, #12]
 8020bd0:	2384      	movs	r3, #132	@ 0x84
 8020bd2:	009b      	lsls	r3, r3, #2
 8020bd4:	58d2      	ldr	r2, [r2, r3]
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020bda:	68fa      	ldr	r2, [r7, #12]
 8020bdc:	2382      	movs	r3, #130	@ 0x82
 8020bde:	009b      	lsls	r3, r3, #2
 8020be0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8020be2:	68fa      	ldr	r2, [r7, #12]
 8020be4:	2384      	movs	r3, #132	@ 0x84
 8020be6:	009b      	lsls	r3, r3, #2
 8020be8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8020bea:	b29b      	uxth	r3, r3
 8020bec:	6878      	ldr	r0, [r7, #4]
 8020bee:	000a      	movs	r2, r1
 8020bf0:	2181      	movs	r1, #129	@ 0x81
 8020bf2:	f001 ff0c 	bl	8022a0e <USBD_LL_Transmit>

      return USBD_OK;
 8020bf6:	2300      	movs	r3, #0
 8020bf8:	e002      	b.n	8020c00 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8020bfa:	2301      	movs	r3, #1
 8020bfc:	e000      	b.n	8020c00 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8020bfe:	2302      	movs	r3, #2
  }
}
 8020c00:	0018      	movs	r0, r3
 8020c02:	46bd      	mov	sp, r7
 8020c04:	b004      	add	sp, #16
 8020c06:	bd80      	pop	{r7, pc}

08020c08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020c08:	b580      	push	{r7, lr}
 8020c0a:	b084      	sub	sp, #16
 8020c0c:	af00      	add	r7, sp, #0
 8020c0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8020c10:	687a      	ldr	r2, [r7, #4]
 8020c12:	23ae      	movs	r3, #174	@ 0xae
 8020c14:	009b      	lsls	r3, r3, #2
 8020c16:	58d3      	ldr	r3, [r2, r3]
 8020c18:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8020c1a:	687a      	ldr	r2, [r7, #4]
 8020c1c:	23ae      	movs	r3, #174	@ 0xae
 8020c1e:	009b      	lsls	r3, r3, #2
 8020c20:	58d3      	ldr	r3, [r2, r3]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d019      	beq.n	8020c5a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	7c1b      	ldrb	r3, [r3, #16]
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d10a      	bne.n	8020c44 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020c2e:	68fa      	ldr	r2, [r7, #12]
 8020c30:	2381      	movs	r3, #129	@ 0x81
 8020c32:	009b      	lsls	r3, r3, #2
 8020c34:	58d2      	ldr	r2, [r2, r3]
 8020c36:	2380      	movs	r3, #128	@ 0x80
 8020c38:	009b      	lsls	r3, r3, #2
 8020c3a:	6878      	ldr	r0, [r7, #4]
 8020c3c:	2101      	movs	r1, #1
 8020c3e:	f001 ff1d 	bl	8022a7c <USBD_LL_PrepareReceive>
 8020c42:	e008      	b.n	8020c56 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8020c44:	68fa      	ldr	r2, [r7, #12]
 8020c46:	2381      	movs	r3, #129	@ 0x81
 8020c48:	009b      	lsls	r3, r3, #2
 8020c4a:	58d2      	ldr	r2, [r2, r3]
 8020c4c:	6878      	ldr	r0, [r7, #4]
 8020c4e:	2340      	movs	r3, #64	@ 0x40
 8020c50:	2101      	movs	r1, #1
 8020c52:	f001 ff13 	bl	8022a7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8020c56:	2300      	movs	r3, #0
 8020c58:	e000      	b.n	8020c5c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8020c5a:	2302      	movs	r3, #2
  }
}
 8020c5c:	0018      	movs	r0, r3
 8020c5e:	46bd      	mov	sp, r7
 8020c60:	b004      	add	sp, #16
 8020c62:	bd80      	pop	{r7, pc}

08020c64 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8020c64:	b580      	push	{r7, lr}
 8020c66:	b084      	sub	sp, #16
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	60f8      	str	r0, [r7, #12]
 8020c6c:	60b9      	str	r1, [r7, #8]
 8020c6e:	1dfb      	adds	r3, r7, #7
 8020c70:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8020c72:	68fb      	ldr	r3, [r7, #12]
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	d101      	bne.n	8020c7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8020c78:	2302      	movs	r3, #2
 8020c7a:	e020      	b.n	8020cbe <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8020c7c:	68fa      	ldr	r2, [r7, #12]
 8020c7e:	23ad      	movs	r3, #173	@ 0xad
 8020c80:	009b      	lsls	r3, r3, #2
 8020c82:	58d3      	ldr	r3, [r2, r3]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d004      	beq.n	8020c92 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8020c88:	68fa      	ldr	r2, [r7, #12]
 8020c8a:	23ad      	movs	r3, #173	@ 0xad
 8020c8c:	009b      	lsls	r3, r3, #2
 8020c8e:	2100      	movs	r1, #0
 8020c90:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020c92:	68bb      	ldr	r3, [r7, #8]
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d004      	beq.n	8020ca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020c98:	68fa      	ldr	r2, [r7, #12]
 8020c9a:	23ac      	movs	r3, #172	@ 0xac
 8020c9c:	009b      	lsls	r3, r3, #2
 8020c9e:	68b9      	ldr	r1, [r7, #8]
 8020ca0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020ca2:	68fa      	ldr	r2, [r7, #12]
 8020ca4:	23a7      	movs	r3, #167	@ 0xa7
 8020ca6:	009b      	lsls	r3, r3, #2
 8020ca8:	2101      	movs	r1, #1
 8020caa:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	1dfa      	adds	r2, r7, #7
 8020cb0:	7812      	ldrb	r2, [r2, #0]
 8020cb2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8020cb4:	68fb      	ldr	r3, [r7, #12]
 8020cb6:	0018      	movs	r0, r3
 8020cb8:	f001 fd0c 	bl	80226d4 <USBD_LL_Init>

  return USBD_OK;
 8020cbc:	2300      	movs	r3, #0
}
 8020cbe:	0018      	movs	r0, r3
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	b004      	add	sp, #16
 8020cc4:	bd80      	pop	{r7, pc}

08020cc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020cc6:	b580      	push	{r7, lr}
 8020cc8:	b084      	sub	sp, #16
 8020cca:	af00      	add	r7, sp, #0
 8020ccc:	6078      	str	r0, [r7, #4]
 8020cce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8020cd0:	200f      	movs	r0, #15
 8020cd2:	183b      	adds	r3, r7, r0
 8020cd4:	2200      	movs	r2, #0
 8020cd6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8020cd8:	683b      	ldr	r3, [r7, #0]
 8020cda:	2b00      	cmp	r3, #0
 8020cdc:	d008      	beq.n	8020cf0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8020cde:	687a      	ldr	r2, [r7, #4]
 8020ce0:	23ad      	movs	r3, #173	@ 0xad
 8020ce2:	009b      	lsls	r3, r3, #2
 8020ce4:	6839      	ldr	r1, [r7, #0]
 8020ce6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8020ce8:	183b      	adds	r3, r7, r0
 8020cea:	2200      	movs	r2, #0
 8020cec:	701a      	strb	r2, [r3, #0]
 8020cee:	e003      	b.n	8020cf8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8020cf0:	230f      	movs	r3, #15
 8020cf2:	18fb      	adds	r3, r7, r3
 8020cf4:	2202      	movs	r2, #2
 8020cf6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8020cf8:	230f      	movs	r3, #15
 8020cfa:	18fb      	adds	r3, r7, r3
 8020cfc:	781b      	ldrb	r3, [r3, #0]
}
 8020cfe:	0018      	movs	r0, r3
 8020d00:	46bd      	mov	sp, r7
 8020d02:	b004      	add	sp, #16
 8020d04:	bd80      	pop	{r7, pc}

08020d06 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8020d06:	b580      	push	{r7, lr}
 8020d08:	b082      	sub	sp, #8
 8020d0a:	af00      	add	r7, sp, #0
 8020d0c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	0018      	movs	r0, r3
 8020d12:	f001 fd43 	bl	802279c <USBD_LL_Start>

  return USBD_OK;
 8020d16:	2300      	movs	r3, #0
}
 8020d18:	0018      	movs	r0, r3
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	b002      	add	sp, #8
 8020d1e:	bd80      	pop	{r7, pc}

08020d20 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b082      	sub	sp, #8
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020d28:	2300      	movs	r3, #0
}
 8020d2a:	0018      	movs	r0, r3
 8020d2c:	46bd      	mov	sp, r7
 8020d2e:	b002      	add	sp, #8
 8020d30:	bd80      	pop	{r7, pc}

08020d32 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020d32:	b590      	push	{r4, r7, lr}
 8020d34:	b085      	sub	sp, #20
 8020d36:	af00      	add	r7, sp, #0
 8020d38:	6078      	str	r0, [r7, #4]
 8020d3a:	000a      	movs	r2, r1
 8020d3c:	1cfb      	adds	r3, r7, #3
 8020d3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8020d40:	240f      	movs	r4, #15
 8020d42:	193b      	adds	r3, r7, r4
 8020d44:	2202      	movs	r2, #2
 8020d46:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8020d48:	687a      	ldr	r2, [r7, #4]
 8020d4a:	23ad      	movs	r3, #173	@ 0xad
 8020d4c:	009b      	lsls	r3, r3, #2
 8020d4e:	58d3      	ldr	r3, [r2, r3]
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d00e      	beq.n	8020d72 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8020d54:	687a      	ldr	r2, [r7, #4]
 8020d56:	23ad      	movs	r3, #173	@ 0xad
 8020d58:	009b      	lsls	r3, r3, #2
 8020d5a:	58d3      	ldr	r3, [r2, r3]
 8020d5c:	681b      	ldr	r3, [r3, #0]
 8020d5e:	1cfa      	adds	r2, r7, #3
 8020d60:	7811      	ldrb	r1, [r2, #0]
 8020d62:	687a      	ldr	r2, [r7, #4]
 8020d64:	0010      	movs	r0, r2
 8020d66:	4798      	blx	r3
 8020d68:	1e03      	subs	r3, r0, #0
 8020d6a:	d102      	bne.n	8020d72 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8020d6c:	193b      	adds	r3, r7, r4
 8020d6e:	2200      	movs	r2, #0
 8020d70:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8020d72:	230f      	movs	r3, #15
 8020d74:	18fb      	adds	r3, r7, r3
 8020d76:	781b      	ldrb	r3, [r3, #0]
}
 8020d78:	0018      	movs	r0, r3
 8020d7a:	46bd      	mov	sp, r7
 8020d7c:	b005      	add	sp, #20
 8020d7e:	bd90      	pop	{r4, r7, pc}

08020d80 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8020d80:	b580      	push	{r7, lr}
 8020d82:	b082      	sub	sp, #8
 8020d84:	af00      	add	r7, sp, #0
 8020d86:	6078      	str	r0, [r7, #4]
 8020d88:	000a      	movs	r2, r1
 8020d8a:	1cfb      	adds	r3, r7, #3
 8020d8c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8020d8e:	687a      	ldr	r2, [r7, #4]
 8020d90:	23ad      	movs	r3, #173	@ 0xad
 8020d92:	009b      	lsls	r3, r3, #2
 8020d94:	58d3      	ldr	r3, [r2, r3]
 8020d96:	685b      	ldr	r3, [r3, #4]
 8020d98:	1cfa      	adds	r2, r7, #3
 8020d9a:	7811      	ldrb	r1, [r2, #0]
 8020d9c:	687a      	ldr	r2, [r7, #4]
 8020d9e:	0010      	movs	r0, r2
 8020da0:	4798      	blx	r3

  return USBD_OK;
 8020da2:	2300      	movs	r3, #0
}
 8020da4:	0018      	movs	r0, r3
 8020da6:	46bd      	mov	sp, r7
 8020da8:	b002      	add	sp, #8
 8020daa:	bd80      	pop	{r7, pc}

08020dac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020dac:	b580      	push	{r7, lr}
 8020dae:	b082      	sub	sp, #8
 8020db0:	af00      	add	r7, sp, #0
 8020db2:	6078      	str	r0, [r7, #4]
 8020db4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	22aa      	movs	r2, #170	@ 0xaa
 8020dba:	0092      	lsls	r2, r2, #2
 8020dbc:	4694      	mov	ip, r2
 8020dbe:	4463      	add	r3, ip
 8020dc0:	683a      	ldr	r2, [r7, #0]
 8020dc2:	0011      	movs	r1, r2
 8020dc4:	0018      	movs	r0, r3
 8020dc6:	f001 f810 	bl	8021dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8020dca:	687a      	ldr	r2, [r7, #4]
 8020dcc:	23a5      	movs	r3, #165	@ 0xa5
 8020dce:	009b      	lsls	r3, r3, #2
 8020dd0:	2101      	movs	r1, #1
 8020dd2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	4a23      	ldr	r2, [pc, #140]	@ (8020e64 <USBD_LL_SetupStage+0xb8>)
 8020dd8:	5a9b      	ldrh	r3, [r3, r2]
 8020dda:	0019      	movs	r1, r3
 8020ddc:	687a      	ldr	r2, [r7, #4]
 8020dde:	23a6      	movs	r3, #166	@ 0xa6
 8020de0:	009b      	lsls	r3, r3, #2
 8020de2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8020de4:	687a      	ldr	r2, [r7, #4]
 8020de6:	23aa      	movs	r3, #170	@ 0xaa
 8020de8:	009b      	lsls	r3, r3, #2
 8020dea:	5cd3      	ldrb	r3, [r2, r3]
 8020dec:	001a      	movs	r2, r3
 8020dee:	231f      	movs	r3, #31
 8020df0:	4013      	ands	r3, r2
 8020df2:	2b02      	cmp	r3, #2
 8020df4:	d019      	beq.n	8020e2a <USBD_LL_SetupStage+0x7e>
 8020df6:	d822      	bhi.n	8020e3e <USBD_LL_SetupStage+0x92>
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d002      	beq.n	8020e02 <USBD_LL_SetupStage+0x56>
 8020dfc:	2b01      	cmp	r3, #1
 8020dfe:	d00a      	beq.n	8020e16 <USBD_LL_SetupStage+0x6a>
 8020e00:	e01d      	b.n	8020e3e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8020e02:	687b      	ldr	r3, [r7, #4]
 8020e04:	22aa      	movs	r2, #170	@ 0xaa
 8020e06:	0092      	lsls	r2, r2, #2
 8020e08:	189a      	adds	r2, r3, r2
 8020e0a:	687b      	ldr	r3, [r7, #4]
 8020e0c:	0011      	movs	r1, r2
 8020e0e:	0018      	movs	r0, r3
 8020e10:	f000 fa10 	bl	8021234 <USBD_StdDevReq>
      break;
 8020e14:	e020      	b.n	8020e58 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	22aa      	movs	r2, #170	@ 0xaa
 8020e1a:	0092      	lsls	r2, r2, #2
 8020e1c:	189a      	adds	r2, r3, r2
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	0011      	movs	r1, r2
 8020e22:	0018      	movs	r0, r3
 8020e24:	f000 fa78 	bl	8021318 <USBD_StdItfReq>
      break;
 8020e28:	e016      	b.n	8020e58 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	22aa      	movs	r2, #170	@ 0xaa
 8020e2e:	0092      	lsls	r2, r2, #2
 8020e30:	189a      	adds	r2, r3, r2
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	0011      	movs	r1, r2
 8020e36:	0018      	movs	r0, r3
 8020e38:	f000 fac5 	bl	80213c6 <USBD_StdEPReq>
      break;
 8020e3c:	e00c      	b.n	8020e58 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8020e3e:	687a      	ldr	r2, [r7, #4]
 8020e40:	23aa      	movs	r3, #170	@ 0xaa
 8020e42:	009b      	lsls	r3, r3, #2
 8020e44:	5cd3      	ldrb	r3, [r2, r3]
 8020e46:	227f      	movs	r2, #127	@ 0x7f
 8020e48:	4393      	bics	r3, r2
 8020e4a:	b2da      	uxtb	r2, r3
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	0011      	movs	r1, r2
 8020e50:	0018      	movs	r0, r3
 8020e52:	f001 fd2a 	bl	80228aa <USBD_LL_StallEP>
      break;
 8020e56:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8020e58:	2300      	movs	r3, #0
}
 8020e5a:	0018      	movs	r0, r3
 8020e5c:	46bd      	mov	sp, r7
 8020e5e:	b002      	add	sp, #8
 8020e60:	bd80      	pop	{r7, pc}
 8020e62:	46c0      	nop			@ (mov r8, r8)
 8020e64:	000002ae 	.word	0x000002ae

08020e68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b086      	sub	sp, #24
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	60f8      	str	r0, [r7, #12]
 8020e70:	607a      	str	r2, [r7, #4]
 8020e72:	200b      	movs	r0, #11
 8020e74:	183b      	adds	r3, r7, r0
 8020e76:	1c0a      	adds	r2, r1, #0
 8020e78:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020e7a:	183b      	adds	r3, r7, r0
 8020e7c:	781b      	ldrb	r3, [r3, #0]
 8020e7e:	2b00      	cmp	r3, #0
 8020e80:	d154      	bne.n	8020f2c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8020e82:	68fb      	ldr	r3, [r7, #12]
 8020e84:	3355      	adds	r3, #85	@ 0x55
 8020e86:	33ff      	adds	r3, #255	@ 0xff
 8020e88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020e8a:	68fa      	ldr	r2, [r7, #12]
 8020e8c:	23a5      	movs	r3, #165	@ 0xa5
 8020e8e:	009b      	lsls	r3, r3, #2
 8020e90:	58d3      	ldr	r3, [r2, r3]
 8020e92:	2b03      	cmp	r3, #3
 8020e94:	d139      	bne.n	8020f0a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8020e96:	697b      	ldr	r3, [r7, #20]
 8020e98:	68da      	ldr	r2, [r3, #12]
 8020e9a:	697b      	ldr	r3, [r7, #20]
 8020e9c:	691b      	ldr	r3, [r3, #16]
 8020e9e:	429a      	cmp	r2, r3
 8020ea0:	d919      	bls.n	8020ed6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8020ea2:	697b      	ldr	r3, [r7, #20]
 8020ea4:	68da      	ldr	r2, [r3, #12]
 8020ea6:	697b      	ldr	r3, [r7, #20]
 8020ea8:	691b      	ldr	r3, [r3, #16]
 8020eaa:	1ad2      	subs	r2, r2, r3
 8020eac:	697b      	ldr	r3, [r7, #20]
 8020eae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020eb0:	697b      	ldr	r3, [r7, #20]
 8020eb2:	68da      	ldr	r2, [r3, #12]
 8020eb4:	697b      	ldr	r3, [r7, #20]
 8020eb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	d203      	bcs.n	8020ec4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020ebc:	697b      	ldr	r3, [r7, #20]
 8020ebe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8020ec0:	b29b      	uxth	r3, r3
 8020ec2:	e002      	b.n	8020eca <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8020ec4:	697b      	ldr	r3, [r7, #20]
 8020ec6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8020ec8:	b29b      	uxth	r3, r3
 8020eca:	6879      	ldr	r1, [r7, #4]
 8020ecc:	68f8      	ldr	r0, [r7, #12]
 8020ece:	001a      	movs	r2, r3
 8020ed0:	f001 f898 	bl	8022004 <USBD_CtlContinueRx>
 8020ed4:	e045      	b.n	8020f62 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020ed6:	68fa      	ldr	r2, [r7, #12]
 8020ed8:	23ad      	movs	r3, #173	@ 0xad
 8020eda:	009b      	lsls	r3, r3, #2
 8020edc:	58d3      	ldr	r3, [r2, r3]
 8020ede:	691b      	ldr	r3, [r3, #16]
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d00d      	beq.n	8020f00 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020ee4:	68fa      	ldr	r2, [r7, #12]
 8020ee6:	23a7      	movs	r3, #167	@ 0xa7
 8020ee8:	009b      	lsls	r3, r3, #2
 8020eea:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8020eec:	2b03      	cmp	r3, #3
 8020eee:	d107      	bne.n	8020f00 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8020ef0:	68fa      	ldr	r2, [r7, #12]
 8020ef2:	23ad      	movs	r3, #173	@ 0xad
 8020ef4:	009b      	lsls	r3, r3, #2
 8020ef6:	58d3      	ldr	r3, [r2, r3]
 8020ef8:	691b      	ldr	r3, [r3, #16]
 8020efa:	68fa      	ldr	r2, [r7, #12]
 8020efc:	0010      	movs	r0, r2
 8020efe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	0018      	movs	r0, r3
 8020f04:	f001 f891 	bl	802202a <USBD_CtlSendStatus>
 8020f08:	e02b      	b.n	8020f62 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8020f0a:	68fa      	ldr	r2, [r7, #12]
 8020f0c:	23a5      	movs	r3, #165	@ 0xa5
 8020f0e:	009b      	lsls	r3, r3, #2
 8020f10:	58d3      	ldr	r3, [r2, r3]
 8020f12:	2b05      	cmp	r3, #5
 8020f14:	d125      	bne.n	8020f62 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8020f16:	68fa      	ldr	r2, [r7, #12]
 8020f18:	23a5      	movs	r3, #165	@ 0xa5
 8020f1a:	009b      	lsls	r3, r3, #2
 8020f1c:	2100      	movs	r1, #0
 8020f1e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8020f20:	68fb      	ldr	r3, [r7, #12]
 8020f22:	2100      	movs	r1, #0
 8020f24:	0018      	movs	r0, r3
 8020f26:	f001 fcc0 	bl	80228aa <USBD_LL_StallEP>
 8020f2a:	e01a      	b.n	8020f62 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8020f2c:	68fa      	ldr	r2, [r7, #12]
 8020f2e:	23ad      	movs	r3, #173	@ 0xad
 8020f30:	009b      	lsls	r3, r3, #2
 8020f32:	58d3      	ldr	r3, [r2, r3]
 8020f34:	699b      	ldr	r3, [r3, #24]
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d011      	beq.n	8020f5e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8020f3a:	68fa      	ldr	r2, [r7, #12]
 8020f3c:	23a7      	movs	r3, #167	@ 0xa7
 8020f3e:	009b      	lsls	r3, r3, #2
 8020f40:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8020f42:	2b03      	cmp	r3, #3
 8020f44:	d10b      	bne.n	8020f5e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8020f46:	68fa      	ldr	r2, [r7, #12]
 8020f48:	23ad      	movs	r3, #173	@ 0xad
 8020f4a:	009b      	lsls	r3, r3, #2
 8020f4c:	58d3      	ldr	r3, [r2, r3]
 8020f4e:	699b      	ldr	r3, [r3, #24]
 8020f50:	220b      	movs	r2, #11
 8020f52:	18ba      	adds	r2, r7, r2
 8020f54:	7811      	ldrb	r1, [r2, #0]
 8020f56:	68fa      	ldr	r2, [r7, #12]
 8020f58:	0010      	movs	r0, r2
 8020f5a:	4798      	blx	r3
 8020f5c:	e001      	b.n	8020f62 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8020f5e:	2302      	movs	r3, #2
 8020f60:	e000      	b.n	8020f64 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8020f62:	2300      	movs	r3, #0
}
 8020f64:	0018      	movs	r0, r3
 8020f66:	46bd      	mov	sp, r7
 8020f68:	b006      	add	sp, #24
 8020f6a:	bd80      	pop	{r7, pc}

08020f6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020f6c:	b580      	push	{r7, lr}
 8020f6e:	b086      	sub	sp, #24
 8020f70:	af00      	add	r7, sp, #0
 8020f72:	60f8      	str	r0, [r7, #12]
 8020f74:	607a      	str	r2, [r7, #4]
 8020f76:	200b      	movs	r0, #11
 8020f78:	183b      	adds	r3, r7, r0
 8020f7a:	1c0a      	adds	r2, r1, #0
 8020f7c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8020f7e:	183b      	adds	r3, r7, r0
 8020f80:	781b      	ldrb	r3, [r3, #0]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d000      	beq.n	8020f88 <USBD_LL_DataInStage+0x1c>
 8020f86:	e08e      	b.n	80210a6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8020f88:	68fb      	ldr	r3, [r7, #12]
 8020f8a:	3314      	adds	r3, #20
 8020f8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020f8e:	68fa      	ldr	r2, [r7, #12]
 8020f90:	23a5      	movs	r3, #165	@ 0xa5
 8020f92:	009b      	lsls	r3, r3, #2
 8020f94:	58d3      	ldr	r3, [r2, r3]
 8020f96:	2b02      	cmp	r3, #2
 8020f98:	d164      	bne.n	8021064 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8020f9a:	697b      	ldr	r3, [r7, #20]
 8020f9c:	68da      	ldr	r2, [r3, #12]
 8020f9e:	697b      	ldr	r3, [r7, #20]
 8020fa0:	691b      	ldr	r3, [r3, #16]
 8020fa2:	429a      	cmp	r2, r3
 8020fa4:	d915      	bls.n	8020fd2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8020fa6:	697b      	ldr	r3, [r7, #20]
 8020fa8:	68da      	ldr	r2, [r3, #12]
 8020faa:	697b      	ldr	r3, [r7, #20]
 8020fac:	691b      	ldr	r3, [r3, #16]
 8020fae:	1ad2      	subs	r2, r2, r3
 8020fb0:	697b      	ldr	r3, [r7, #20]
 8020fb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8020fb4:	697b      	ldr	r3, [r7, #20]
 8020fb6:	68db      	ldr	r3, [r3, #12]
 8020fb8:	b29a      	uxth	r2, r3
 8020fba:	6879      	ldr	r1, [r7, #4]
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	0018      	movs	r0, r3
 8020fc0:	f000 ffe9 	bl	8021f96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020fc4:	68f8      	ldr	r0, [r7, #12]
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	2200      	movs	r2, #0
 8020fca:	2100      	movs	r1, #0
 8020fcc:	f001 fd56 	bl	8022a7c <USBD_LL_PrepareReceive>
 8020fd0:	e059      	b.n	8021086 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020fd2:	697b      	ldr	r3, [r7, #20]
 8020fd4:	689a      	ldr	r2, [r3, #8]
 8020fd6:	697b      	ldr	r3, [r7, #20]
 8020fd8:	691b      	ldr	r3, [r3, #16]
 8020fda:	0019      	movs	r1, r3
 8020fdc:	0010      	movs	r0, r2
 8020fde:	f7df f967 	bl	80002b0 <__aeabi_uidivmod>
 8020fe2:	1e0b      	subs	r3, r1, #0
 8020fe4:	d11f      	bne.n	8021026 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8020fe6:	697b      	ldr	r3, [r7, #20]
 8020fe8:	689a      	ldr	r2, [r3, #8]
 8020fea:	697b      	ldr	r3, [r7, #20]
 8020fec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8020fee:	429a      	cmp	r2, r3
 8020ff0:	d319      	bcc.n	8021026 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8020ff2:	697b      	ldr	r3, [r7, #20]
 8020ff4:	689a      	ldr	r2, [r3, #8]
 8020ff6:	68f9      	ldr	r1, [r7, #12]
 8020ff8:	23a6      	movs	r3, #166	@ 0xa6
 8020ffa:	009b      	lsls	r3, r3, #2
 8020ffc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8020ffe:	429a      	cmp	r2, r3
 8021000:	d211      	bcs.n	8021026 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021002:	68fb      	ldr	r3, [r7, #12]
 8021004:	2200      	movs	r2, #0
 8021006:	2100      	movs	r1, #0
 8021008:	0018      	movs	r0, r3
 802100a:	f000 ffc4 	bl	8021f96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 802100e:	68fa      	ldr	r2, [r7, #12]
 8021010:	23a6      	movs	r3, #166	@ 0xa6
 8021012:	009b      	lsls	r3, r3, #2
 8021014:	2100      	movs	r1, #0
 8021016:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021018:	68f8      	ldr	r0, [r7, #12]
 802101a:	2300      	movs	r3, #0
 802101c:	2200      	movs	r2, #0
 802101e:	2100      	movs	r1, #0
 8021020:	f001 fd2c 	bl	8022a7c <USBD_LL_PrepareReceive>
 8021024:	e02f      	b.n	8021086 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8021026:	68fa      	ldr	r2, [r7, #12]
 8021028:	23ad      	movs	r3, #173	@ 0xad
 802102a:	009b      	lsls	r3, r3, #2
 802102c:	58d3      	ldr	r3, [r2, r3]
 802102e:	68db      	ldr	r3, [r3, #12]
 8021030:	2b00      	cmp	r3, #0
 8021032:	d00d      	beq.n	8021050 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021034:	68fa      	ldr	r2, [r7, #12]
 8021036:	23a7      	movs	r3, #167	@ 0xa7
 8021038:	009b      	lsls	r3, r3, #2
 802103a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 802103c:	2b03      	cmp	r3, #3
 802103e:	d107      	bne.n	8021050 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8021040:	68fa      	ldr	r2, [r7, #12]
 8021042:	23ad      	movs	r3, #173	@ 0xad
 8021044:	009b      	lsls	r3, r3, #2
 8021046:	58d3      	ldr	r3, [r2, r3]
 8021048:	68db      	ldr	r3, [r3, #12]
 802104a:	68fa      	ldr	r2, [r7, #12]
 802104c:	0010      	movs	r0, r2
 802104e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8021050:	68fb      	ldr	r3, [r7, #12]
 8021052:	2180      	movs	r1, #128	@ 0x80
 8021054:	0018      	movs	r0, r3
 8021056:	f001 fc28 	bl	80228aa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	0018      	movs	r0, r3
 802105e:	f000 fff8 	bl	8022052 <USBD_CtlReceiveStatus>
 8021062:	e010      	b.n	8021086 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021064:	68fa      	ldr	r2, [r7, #12]
 8021066:	23a5      	movs	r3, #165	@ 0xa5
 8021068:	009b      	lsls	r3, r3, #2
 802106a:	58d3      	ldr	r3, [r2, r3]
 802106c:	2b04      	cmp	r3, #4
 802106e:	d005      	beq.n	802107c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8021070:	68fa      	ldr	r2, [r7, #12]
 8021072:	23a5      	movs	r3, #165	@ 0xa5
 8021074:	009b      	lsls	r3, r3, #2
 8021076:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8021078:	2b00      	cmp	r3, #0
 802107a:	d104      	bne.n	8021086 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 802107c:	68fb      	ldr	r3, [r7, #12]
 802107e:	2180      	movs	r1, #128	@ 0x80
 8021080:	0018      	movs	r0, r3
 8021082:	f001 fc12 	bl	80228aa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8021086:	68fa      	ldr	r2, [r7, #12]
 8021088:	23a8      	movs	r3, #168	@ 0xa8
 802108a:	009b      	lsls	r3, r3, #2
 802108c:	5cd3      	ldrb	r3, [r2, r3]
 802108e:	2b01      	cmp	r3, #1
 8021090:	d124      	bne.n	80210dc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	0018      	movs	r0, r3
 8021096:	f7ff fe43 	bl	8020d20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 802109a:	68fa      	ldr	r2, [r7, #12]
 802109c:	23a8      	movs	r3, #168	@ 0xa8
 802109e:	009b      	lsls	r3, r3, #2
 80210a0:	2100      	movs	r1, #0
 80210a2:	54d1      	strb	r1, [r2, r3]
 80210a4:	e01a      	b.n	80210dc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80210a6:	68fa      	ldr	r2, [r7, #12]
 80210a8:	23ad      	movs	r3, #173	@ 0xad
 80210aa:	009b      	lsls	r3, r3, #2
 80210ac:	58d3      	ldr	r3, [r2, r3]
 80210ae:	695b      	ldr	r3, [r3, #20]
 80210b0:	2b00      	cmp	r3, #0
 80210b2:	d011      	beq.n	80210d8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80210b4:	68fa      	ldr	r2, [r7, #12]
 80210b6:	23a7      	movs	r3, #167	@ 0xa7
 80210b8:	009b      	lsls	r3, r3, #2
 80210ba:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80210bc:	2b03      	cmp	r3, #3
 80210be:	d10b      	bne.n	80210d8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80210c0:	68fa      	ldr	r2, [r7, #12]
 80210c2:	23ad      	movs	r3, #173	@ 0xad
 80210c4:	009b      	lsls	r3, r3, #2
 80210c6:	58d3      	ldr	r3, [r2, r3]
 80210c8:	695b      	ldr	r3, [r3, #20]
 80210ca:	220b      	movs	r2, #11
 80210cc:	18ba      	adds	r2, r7, r2
 80210ce:	7811      	ldrb	r1, [r2, #0]
 80210d0:	68fa      	ldr	r2, [r7, #12]
 80210d2:	0010      	movs	r0, r2
 80210d4:	4798      	blx	r3
 80210d6:	e001      	b.n	80210dc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80210d8:	2302      	movs	r3, #2
 80210da:	e000      	b.n	80210de <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80210dc:	2300      	movs	r3, #0
}
 80210de:	0018      	movs	r0, r3
 80210e0:	46bd      	mov	sp, r7
 80210e2:	b006      	add	sp, #24
 80210e4:	bd80      	pop	{r7, pc}

080210e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80210e6:	b580      	push	{r7, lr}
 80210e8:	b082      	sub	sp, #8
 80210ea:	af00      	add	r7, sp, #0
 80210ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80210ee:	6878      	ldr	r0, [r7, #4]
 80210f0:	2340      	movs	r3, #64	@ 0x40
 80210f2:	2200      	movs	r2, #0
 80210f4:	2100      	movs	r1, #0
 80210f6:	f001 fb76 	bl	80227e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80210fa:	687a      	ldr	r2, [r7, #4]
 80210fc:	23ac      	movs	r3, #172	@ 0xac
 80210fe:	005b      	lsls	r3, r3, #1
 8021100:	2101      	movs	r1, #1
 8021102:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8021104:	687a      	ldr	r2, [r7, #4]
 8021106:	23b2      	movs	r3, #178	@ 0xb2
 8021108:	005b      	lsls	r3, r3, #1
 802110a:	2140      	movs	r1, #64	@ 0x40
 802110c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 802110e:	6878      	ldr	r0, [r7, #4]
 8021110:	2340      	movs	r3, #64	@ 0x40
 8021112:	2200      	movs	r2, #0
 8021114:	2180      	movs	r1, #128	@ 0x80
 8021116:	f001 fb66 	bl	80227e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	2201      	movs	r2, #1
 802111e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8021120:	687b      	ldr	r3, [r7, #4]
 8021122:	2240      	movs	r2, #64	@ 0x40
 8021124:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021126:	687a      	ldr	r2, [r7, #4]
 8021128:	23a7      	movs	r3, #167	@ 0xa7
 802112a:	009b      	lsls	r3, r3, #2
 802112c:	2101      	movs	r1, #1
 802112e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8021130:	687a      	ldr	r2, [r7, #4]
 8021132:	23a5      	movs	r3, #165	@ 0xa5
 8021134:	009b      	lsls	r3, r3, #2
 8021136:	2100      	movs	r1, #0
 8021138:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	2200      	movs	r2, #0
 802113e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8021140:	687a      	ldr	r2, [r7, #4]
 8021142:	23a9      	movs	r3, #169	@ 0xa9
 8021144:	009b      	lsls	r3, r3, #2
 8021146:	2100      	movs	r1, #0
 8021148:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 802114a:	687a      	ldr	r2, [r7, #4]
 802114c:	23ae      	movs	r3, #174	@ 0xae
 802114e:	009b      	lsls	r3, r3, #2
 8021150:	58d3      	ldr	r3, [r2, r3]
 8021152:	2b00      	cmp	r3, #0
 8021154:	d00a      	beq.n	802116c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8021156:	687a      	ldr	r2, [r7, #4]
 8021158:	23ad      	movs	r3, #173	@ 0xad
 802115a:	009b      	lsls	r3, r3, #2
 802115c:	58d3      	ldr	r3, [r2, r3]
 802115e:	685a      	ldr	r2, [r3, #4]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	685b      	ldr	r3, [r3, #4]
 8021164:	b2d9      	uxtb	r1, r3
 8021166:	687b      	ldr	r3, [r7, #4]
 8021168:	0018      	movs	r0, r3
 802116a:	4790      	blx	r2
  }

  return USBD_OK;
 802116c:	2300      	movs	r3, #0
}
 802116e:	0018      	movs	r0, r3
 8021170:	46bd      	mov	sp, r7
 8021172:	b002      	add	sp, #8
 8021174:	bd80      	pop	{r7, pc}

08021176 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8021176:	b580      	push	{r7, lr}
 8021178:	b082      	sub	sp, #8
 802117a:	af00      	add	r7, sp, #0
 802117c:	6078      	str	r0, [r7, #4]
 802117e:	000a      	movs	r2, r1
 8021180:	1cfb      	adds	r3, r7, #3
 8021182:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	1cfa      	adds	r2, r7, #3
 8021188:	7812      	ldrb	r2, [r2, #0]
 802118a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 802118c:	2300      	movs	r3, #0
}
 802118e:	0018      	movs	r0, r3
 8021190:	46bd      	mov	sp, r7
 8021192:	b002      	add	sp, #8
 8021194:	bd80      	pop	{r7, pc}
	...

08021198 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8021198:	b580      	push	{r7, lr}
 802119a:	b082      	sub	sp, #8
 802119c:	af00      	add	r7, sp, #0
 802119e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80211a0:	687a      	ldr	r2, [r7, #4]
 80211a2:	23a7      	movs	r3, #167	@ 0xa7
 80211a4:	009b      	lsls	r3, r3, #2
 80211a6:	5cd1      	ldrb	r1, [r2, r3]
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	4a06      	ldr	r2, [pc, #24]	@ (80211c4 <USBD_LL_Suspend+0x2c>)
 80211ac:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80211ae:	687a      	ldr	r2, [r7, #4]
 80211b0:	23a7      	movs	r3, #167	@ 0xa7
 80211b2:	009b      	lsls	r3, r3, #2
 80211b4:	2104      	movs	r1, #4
 80211b6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80211b8:	2300      	movs	r3, #0
}
 80211ba:	0018      	movs	r0, r3
 80211bc:	46bd      	mov	sp, r7
 80211be:	b002      	add	sp, #8
 80211c0:	bd80      	pop	{r7, pc}
 80211c2:	46c0      	nop			@ (mov r8, r8)
 80211c4:	0000029d 	.word	0x0000029d

080211c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80211c8:	b580      	push	{r7, lr}
 80211ca:	b082      	sub	sp, #8
 80211cc:	af00      	add	r7, sp, #0
 80211ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80211d0:	687a      	ldr	r2, [r7, #4]
 80211d2:	23a7      	movs	r3, #167	@ 0xa7
 80211d4:	009b      	lsls	r3, r3, #2
 80211d6:	5cd3      	ldrb	r3, [r2, r3]
 80211d8:	2b04      	cmp	r3, #4
 80211da:	d106      	bne.n	80211ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	4a05      	ldr	r2, [pc, #20]	@ (80211f4 <USBD_LL_Resume+0x2c>)
 80211e0:	5c99      	ldrb	r1, [r3, r2]
 80211e2:	687a      	ldr	r2, [r7, #4]
 80211e4:	23a7      	movs	r3, #167	@ 0xa7
 80211e6:	009b      	lsls	r3, r3, #2
 80211e8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80211ea:	2300      	movs	r3, #0
}
 80211ec:	0018      	movs	r0, r3
 80211ee:	46bd      	mov	sp, r7
 80211f0:	b002      	add	sp, #8
 80211f2:	bd80      	pop	{r7, pc}
 80211f4:	0000029d 	.word	0x0000029d

080211f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80211f8:	b580      	push	{r7, lr}
 80211fa:	b082      	sub	sp, #8
 80211fc:	af00      	add	r7, sp, #0
 80211fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021200:	687a      	ldr	r2, [r7, #4]
 8021202:	23a7      	movs	r3, #167	@ 0xa7
 8021204:	009b      	lsls	r3, r3, #2
 8021206:	5cd3      	ldrb	r3, [r2, r3]
 8021208:	2b03      	cmp	r3, #3
 802120a:	d10e      	bne.n	802122a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 802120c:	687a      	ldr	r2, [r7, #4]
 802120e:	23ad      	movs	r3, #173	@ 0xad
 8021210:	009b      	lsls	r3, r3, #2
 8021212:	58d3      	ldr	r3, [r2, r3]
 8021214:	69db      	ldr	r3, [r3, #28]
 8021216:	2b00      	cmp	r3, #0
 8021218:	d007      	beq.n	802122a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 802121a:	687a      	ldr	r2, [r7, #4]
 802121c:	23ad      	movs	r3, #173	@ 0xad
 802121e:	009b      	lsls	r3, r3, #2
 8021220:	58d3      	ldr	r3, [r2, r3]
 8021222:	69db      	ldr	r3, [r3, #28]
 8021224:	687a      	ldr	r2, [r7, #4]
 8021226:	0010      	movs	r0, r2
 8021228:	4798      	blx	r3
    }
  }

  return USBD_OK;
 802122a:	2300      	movs	r3, #0
}
 802122c:	0018      	movs	r0, r3
 802122e:	46bd      	mov	sp, r7
 8021230:	b002      	add	sp, #8
 8021232:	bd80      	pop	{r7, pc}

08021234 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b084      	sub	sp, #16
 8021238:	af00      	add	r7, sp, #0
 802123a:	6078      	str	r0, [r7, #4]
 802123c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802123e:	230f      	movs	r3, #15
 8021240:	18fb      	adds	r3, r7, r3
 8021242:	2200      	movs	r2, #0
 8021244:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	781b      	ldrb	r3, [r3, #0]
 802124a:	001a      	movs	r2, r3
 802124c:	2360      	movs	r3, #96	@ 0x60
 802124e:	4013      	ands	r3, r2
 8021250:	2b40      	cmp	r3, #64	@ 0x40
 8021252:	d004      	beq.n	802125e <USBD_StdDevReq+0x2a>
 8021254:	d84f      	bhi.n	80212f6 <USBD_StdDevReq+0xc2>
 8021256:	2b00      	cmp	r3, #0
 8021258:	d00b      	beq.n	8021272 <USBD_StdDevReq+0x3e>
 802125a:	2b20      	cmp	r3, #32
 802125c:	d14b      	bne.n	80212f6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802125e:	687a      	ldr	r2, [r7, #4]
 8021260:	23ad      	movs	r3, #173	@ 0xad
 8021262:	009b      	lsls	r3, r3, #2
 8021264:	58d3      	ldr	r3, [r2, r3]
 8021266:	689b      	ldr	r3, [r3, #8]
 8021268:	6839      	ldr	r1, [r7, #0]
 802126a:	687a      	ldr	r2, [r7, #4]
 802126c:	0010      	movs	r0, r2
 802126e:	4798      	blx	r3
      break;
 8021270:	e048      	b.n	8021304 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021272:	683b      	ldr	r3, [r7, #0]
 8021274:	785b      	ldrb	r3, [r3, #1]
 8021276:	2b09      	cmp	r3, #9
 8021278:	d835      	bhi.n	80212e6 <USBD_StdDevReq+0xb2>
 802127a:	009a      	lsls	r2, r3, #2
 802127c:	4b25      	ldr	r3, [pc, #148]	@ (8021314 <USBD_StdDevReq+0xe0>)
 802127e:	18d3      	adds	r3, r2, r3
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8021284:	683a      	ldr	r2, [r7, #0]
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	0011      	movs	r1, r2
 802128a:	0018      	movs	r0, r3
 802128c:	f000 fa52 	bl	8021734 <USBD_GetDescriptor>
          break;
 8021290:	e030      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8021292:	683a      	ldr	r2, [r7, #0]
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	0011      	movs	r1, r2
 8021298:	0018      	movs	r0, r3
 802129a:	f000 fbfd 	bl	8021a98 <USBD_SetAddress>
          break;
 802129e:	e029      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80212a0:	683a      	ldr	r2, [r7, #0]
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	0011      	movs	r1, r2
 80212a6:	0018      	movs	r0, r3
 80212a8:	f000 fc4a 	bl	8021b40 <USBD_SetConfig>
          break;
 80212ac:	e022      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80212ae:	683a      	ldr	r2, [r7, #0]
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	0011      	movs	r1, r2
 80212b4:	0018      	movs	r0, r3
 80212b6:	f000 fce7 	bl	8021c88 <USBD_GetConfig>
          break;
 80212ba:	e01b      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80212bc:	683a      	ldr	r2, [r7, #0]
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	0011      	movs	r1, r2
 80212c2:	0018      	movs	r0, r3
 80212c4:	f000 fd1b 	bl	8021cfe <USBD_GetStatus>
          break;
 80212c8:	e014      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80212ca:	683a      	ldr	r2, [r7, #0]
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	0011      	movs	r1, r2
 80212d0:	0018      	movs	r0, r3
 80212d2:	f000 fd4e 	bl	8021d72 <USBD_SetFeature>
          break;
 80212d6:	e00d      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80212d8:	683a      	ldr	r2, [r7, #0]
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	0011      	movs	r1, r2
 80212de:	0018      	movs	r0, r3
 80212e0:	f000 fd5d 	bl	8021d9e <USBD_ClrFeature>
          break;
 80212e4:	e006      	b.n	80212f4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80212e6:	683a      	ldr	r2, [r7, #0]
 80212e8:	687b      	ldr	r3, [r7, #4]
 80212ea:	0011      	movs	r1, r2
 80212ec:	0018      	movs	r0, r3
 80212ee:	f000 fdb4 	bl	8021e5a <USBD_CtlError>
          break;
 80212f2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80212f4:	e006      	b.n	8021304 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80212f6:	683a      	ldr	r2, [r7, #0]
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	0011      	movs	r1, r2
 80212fc:	0018      	movs	r0, r3
 80212fe:	f000 fdac 	bl	8021e5a <USBD_CtlError>
      break;
 8021302:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021304:	230f      	movs	r3, #15
 8021306:	18fb      	adds	r3, r7, r3
 8021308:	781b      	ldrb	r3, [r3, #0]
}
 802130a:	0018      	movs	r0, r3
 802130c:	46bd      	mov	sp, r7
 802130e:	b004      	add	sp, #16
 8021310:	bd80      	pop	{r7, pc}
 8021312:	46c0      	nop			@ (mov r8, r8)
 8021314:	0802dba8 	.word	0x0802dba8

08021318 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8021318:	b5b0      	push	{r4, r5, r7, lr}
 802131a:	b084      	sub	sp, #16
 802131c:	af00      	add	r7, sp, #0
 802131e:	6078      	str	r0, [r7, #4]
 8021320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021322:	230f      	movs	r3, #15
 8021324:	18fb      	adds	r3, r7, r3
 8021326:	2200      	movs	r2, #0
 8021328:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802132a:	683b      	ldr	r3, [r7, #0]
 802132c:	781b      	ldrb	r3, [r3, #0]
 802132e:	001a      	movs	r2, r3
 8021330:	2360      	movs	r3, #96	@ 0x60
 8021332:	4013      	ands	r3, r2
 8021334:	2b40      	cmp	r3, #64	@ 0x40
 8021336:	d004      	beq.n	8021342 <USBD_StdItfReq+0x2a>
 8021338:	d839      	bhi.n	80213ae <USBD_StdItfReq+0x96>
 802133a:	2b00      	cmp	r3, #0
 802133c:	d001      	beq.n	8021342 <USBD_StdItfReq+0x2a>
 802133e:	2b20      	cmp	r3, #32
 8021340:	d135      	bne.n	80213ae <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021342:	687a      	ldr	r2, [r7, #4]
 8021344:	23a7      	movs	r3, #167	@ 0xa7
 8021346:	009b      	lsls	r3, r3, #2
 8021348:	5cd3      	ldrb	r3, [r2, r3]
 802134a:	3b01      	subs	r3, #1
 802134c:	2b02      	cmp	r3, #2
 802134e:	d825      	bhi.n	802139c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021350:	683b      	ldr	r3, [r7, #0]
 8021352:	889b      	ldrh	r3, [r3, #4]
 8021354:	b2db      	uxtb	r3, r3
 8021356:	2b01      	cmp	r3, #1
 8021358:	d819      	bhi.n	802138e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802135a:	687a      	ldr	r2, [r7, #4]
 802135c:	23ad      	movs	r3, #173	@ 0xad
 802135e:	009b      	lsls	r3, r3, #2
 8021360:	58d3      	ldr	r3, [r2, r3]
 8021362:	689b      	ldr	r3, [r3, #8]
 8021364:	250f      	movs	r5, #15
 8021366:	197c      	adds	r4, r7, r5
 8021368:	6839      	ldr	r1, [r7, #0]
 802136a:	687a      	ldr	r2, [r7, #4]
 802136c:	0010      	movs	r0, r2
 802136e:	4798      	blx	r3
 8021370:	0003      	movs	r3, r0
 8021372:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8021374:	683b      	ldr	r3, [r7, #0]
 8021376:	88db      	ldrh	r3, [r3, #6]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d116      	bne.n	80213aa <USBD_StdItfReq+0x92>
 802137c:	197b      	adds	r3, r7, r5
 802137e:	781b      	ldrb	r3, [r3, #0]
 8021380:	2b00      	cmp	r3, #0
 8021382:	d112      	bne.n	80213aa <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8021384:	687b      	ldr	r3, [r7, #4]
 8021386:	0018      	movs	r0, r3
 8021388:	f000 fe4f 	bl	802202a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 802138c:	e00d      	b.n	80213aa <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802138e:	683a      	ldr	r2, [r7, #0]
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	0011      	movs	r1, r2
 8021394:	0018      	movs	r0, r3
 8021396:	f000 fd60 	bl	8021e5a <USBD_CtlError>
          break;
 802139a:	e006      	b.n	80213aa <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 802139c:	683a      	ldr	r2, [r7, #0]
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	0011      	movs	r1, r2
 80213a2:	0018      	movs	r0, r3
 80213a4:	f000 fd59 	bl	8021e5a <USBD_CtlError>
          break;
 80213a8:	e000      	b.n	80213ac <USBD_StdItfReq+0x94>
          break;
 80213aa:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80213ac:	e006      	b.n	80213bc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80213ae:	683a      	ldr	r2, [r7, #0]
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	0011      	movs	r1, r2
 80213b4:	0018      	movs	r0, r3
 80213b6:	f000 fd50 	bl	8021e5a <USBD_CtlError>
      break;
 80213ba:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80213bc:	2300      	movs	r3, #0
}
 80213be:	0018      	movs	r0, r3
 80213c0:	46bd      	mov	sp, r7
 80213c2:	b004      	add	sp, #16
 80213c4:	bdb0      	pop	{r4, r5, r7, pc}

080213c6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80213c6:	b5b0      	push	{r4, r5, r7, lr}
 80213c8:	b084      	sub	sp, #16
 80213ca:	af00      	add	r7, sp, #0
 80213cc:	6078      	str	r0, [r7, #4]
 80213ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80213d0:	230f      	movs	r3, #15
 80213d2:	18fb      	adds	r3, r7, r3
 80213d4:	2200      	movs	r2, #0
 80213d6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80213d8:	683b      	ldr	r3, [r7, #0]
 80213da:	889a      	ldrh	r2, [r3, #4]
 80213dc:	230e      	movs	r3, #14
 80213de:	18fb      	adds	r3, r7, r3
 80213e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80213e2:	683b      	ldr	r3, [r7, #0]
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	001a      	movs	r2, r3
 80213e8:	2360      	movs	r3, #96	@ 0x60
 80213ea:	4013      	ands	r3, r2
 80213ec:	2b40      	cmp	r3, #64	@ 0x40
 80213ee:	d006      	beq.n	80213fe <USBD_StdEPReq+0x38>
 80213f0:	d900      	bls.n	80213f4 <USBD_StdEPReq+0x2e>
 80213f2:	e190      	b.n	8021716 <USBD_StdEPReq+0x350>
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	d00c      	beq.n	8021412 <USBD_StdEPReq+0x4c>
 80213f8:	2b20      	cmp	r3, #32
 80213fa:	d000      	beq.n	80213fe <USBD_StdEPReq+0x38>
 80213fc:	e18b      	b.n	8021716 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80213fe:	687a      	ldr	r2, [r7, #4]
 8021400:	23ad      	movs	r3, #173	@ 0xad
 8021402:	009b      	lsls	r3, r3, #2
 8021404:	58d3      	ldr	r3, [r2, r3]
 8021406:	689b      	ldr	r3, [r3, #8]
 8021408:	6839      	ldr	r1, [r7, #0]
 802140a:	687a      	ldr	r2, [r7, #4]
 802140c:	0010      	movs	r0, r2
 802140e:	4798      	blx	r3
      break;
 8021410:	e188      	b.n	8021724 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8021412:	683b      	ldr	r3, [r7, #0]
 8021414:	781b      	ldrb	r3, [r3, #0]
 8021416:	001a      	movs	r2, r3
 8021418:	2360      	movs	r3, #96	@ 0x60
 802141a:	4013      	ands	r3, r2
 802141c:	2b20      	cmp	r3, #32
 802141e:	d10f      	bne.n	8021440 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8021420:	687a      	ldr	r2, [r7, #4]
 8021422:	23ad      	movs	r3, #173	@ 0xad
 8021424:	009b      	lsls	r3, r3, #2
 8021426:	58d3      	ldr	r3, [r2, r3]
 8021428:	689b      	ldr	r3, [r3, #8]
 802142a:	250f      	movs	r5, #15
 802142c:	197c      	adds	r4, r7, r5
 802142e:	6839      	ldr	r1, [r7, #0]
 8021430:	687a      	ldr	r2, [r7, #4]
 8021432:	0010      	movs	r0, r2
 8021434:	4798      	blx	r3
 8021436:	0003      	movs	r3, r0
 8021438:	7023      	strb	r3, [r4, #0]

        return ret;
 802143a:	197b      	adds	r3, r7, r5
 802143c:	781b      	ldrb	r3, [r3, #0]
 802143e:	e174      	b.n	802172a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8021440:	683b      	ldr	r3, [r7, #0]
 8021442:	785b      	ldrb	r3, [r3, #1]
 8021444:	2b03      	cmp	r3, #3
 8021446:	d007      	beq.n	8021458 <USBD_StdEPReq+0x92>
 8021448:	dd00      	ble.n	802144c <USBD_StdEPReq+0x86>
 802144a:	e15c      	b.n	8021706 <USBD_StdEPReq+0x340>
 802144c:	2b00      	cmp	r3, #0
 802144e:	d100      	bne.n	8021452 <USBD_StdEPReq+0x8c>
 8021450:	e092      	b.n	8021578 <USBD_StdEPReq+0x1b2>
 8021452:	2b01      	cmp	r3, #1
 8021454:	d04b      	beq.n	80214ee <USBD_StdEPReq+0x128>
 8021456:	e156      	b.n	8021706 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8021458:	687a      	ldr	r2, [r7, #4]
 802145a:	23a7      	movs	r3, #167	@ 0xa7
 802145c:	009b      	lsls	r3, r3, #2
 802145e:	5cd3      	ldrb	r3, [r2, r3]
 8021460:	2b02      	cmp	r3, #2
 8021462:	d002      	beq.n	802146a <USBD_StdEPReq+0xa4>
 8021464:	2b03      	cmp	r3, #3
 8021466:	d01d      	beq.n	80214a4 <USBD_StdEPReq+0xde>
 8021468:	e039      	b.n	80214de <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802146a:	220e      	movs	r2, #14
 802146c:	18bb      	adds	r3, r7, r2
 802146e:	781b      	ldrb	r3, [r3, #0]
 8021470:	2b00      	cmp	r3, #0
 8021472:	d010      	beq.n	8021496 <USBD_StdEPReq+0xd0>
 8021474:	18bb      	adds	r3, r7, r2
 8021476:	781b      	ldrb	r3, [r3, #0]
 8021478:	2b80      	cmp	r3, #128	@ 0x80
 802147a:	d00c      	beq.n	8021496 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 802147c:	18bb      	adds	r3, r7, r2
 802147e:	781a      	ldrb	r2, [r3, #0]
 8021480:	687b      	ldr	r3, [r7, #4]
 8021482:	0011      	movs	r1, r2
 8021484:	0018      	movs	r0, r3
 8021486:	f001 fa10 	bl	80228aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802148a:	687b      	ldr	r3, [r7, #4]
 802148c:	2180      	movs	r1, #128	@ 0x80
 802148e:	0018      	movs	r0, r3
 8021490:	f001 fa0b 	bl	80228aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8021494:	e02a      	b.n	80214ec <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8021496:	683a      	ldr	r2, [r7, #0]
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	0011      	movs	r1, r2
 802149c:	0018      	movs	r0, r3
 802149e:	f000 fcdc 	bl	8021e5a <USBD_CtlError>
              break;
 80214a2:	e023      	b.n	80214ec <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80214a4:	683b      	ldr	r3, [r7, #0]
 80214a6:	885b      	ldrh	r3, [r3, #2]
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	d113      	bne.n	80214d4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80214ac:	220e      	movs	r2, #14
 80214ae:	18bb      	adds	r3, r7, r2
 80214b0:	781b      	ldrb	r3, [r3, #0]
 80214b2:	2b00      	cmp	r3, #0
 80214b4:	d00e      	beq.n	80214d4 <USBD_StdEPReq+0x10e>
 80214b6:	18bb      	adds	r3, r7, r2
 80214b8:	781b      	ldrb	r3, [r3, #0]
 80214ba:	2b80      	cmp	r3, #128	@ 0x80
 80214bc:	d00a      	beq.n	80214d4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80214be:	683b      	ldr	r3, [r7, #0]
 80214c0:	88db      	ldrh	r3, [r3, #6]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d106      	bne.n	80214d4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80214c6:	18bb      	adds	r3, r7, r2
 80214c8:	781a      	ldrb	r2, [r3, #0]
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	0011      	movs	r1, r2
 80214ce:	0018      	movs	r0, r3
 80214d0:	f001 f9eb 	bl	80228aa <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80214d4:	687b      	ldr	r3, [r7, #4]
 80214d6:	0018      	movs	r0, r3
 80214d8:	f000 fda7 	bl	802202a <USBD_CtlSendStatus>

              break;
 80214dc:	e006      	b.n	80214ec <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80214de:	683a      	ldr	r2, [r7, #0]
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	0011      	movs	r1, r2
 80214e4:	0018      	movs	r0, r3
 80214e6:	f000 fcb8 	bl	8021e5a <USBD_CtlError>
              break;
 80214ea:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80214ec:	e112      	b.n	8021714 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80214ee:	687a      	ldr	r2, [r7, #4]
 80214f0:	23a7      	movs	r3, #167	@ 0xa7
 80214f2:	009b      	lsls	r3, r3, #2
 80214f4:	5cd3      	ldrb	r3, [r2, r3]
 80214f6:	2b02      	cmp	r3, #2
 80214f8:	d002      	beq.n	8021500 <USBD_StdEPReq+0x13a>
 80214fa:	2b03      	cmp	r3, #3
 80214fc:	d01d      	beq.n	802153a <USBD_StdEPReq+0x174>
 80214fe:	e032      	b.n	8021566 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8021500:	220e      	movs	r2, #14
 8021502:	18bb      	adds	r3, r7, r2
 8021504:	781b      	ldrb	r3, [r3, #0]
 8021506:	2b00      	cmp	r3, #0
 8021508:	d010      	beq.n	802152c <USBD_StdEPReq+0x166>
 802150a:	18bb      	adds	r3, r7, r2
 802150c:	781b      	ldrb	r3, [r3, #0]
 802150e:	2b80      	cmp	r3, #128	@ 0x80
 8021510:	d00c      	beq.n	802152c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8021512:	18bb      	adds	r3, r7, r2
 8021514:	781a      	ldrb	r2, [r3, #0]
 8021516:	687b      	ldr	r3, [r7, #4]
 8021518:	0011      	movs	r1, r2
 802151a:	0018      	movs	r0, r3
 802151c:	f001 f9c5 	bl	80228aa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	2180      	movs	r1, #128	@ 0x80
 8021524:	0018      	movs	r0, r3
 8021526:	f001 f9c0 	bl	80228aa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802152a:	e024      	b.n	8021576 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 802152c:	683a      	ldr	r2, [r7, #0]
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	0011      	movs	r1, r2
 8021532:	0018      	movs	r0, r3
 8021534:	f000 fc91 	bl	8021e5a <USBD_CtlError>
              break;
 8021538:	e01d      	b.n	8021576 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 802153a:	683b      	ldr	r3, [r7, #0]
 802153c:	885b      	ldrh	r3, [r3, #2]
 802153e:	2b00      	cmp	r3, #0
 8021540:	d118      	bne.n	8021574 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021542:	210e      	movs	r1, #14
 8021544:	187b      	adds	r3, r7, r1
 8021546:	781b      	ldrb	r3, [r3, #0]
 8021548:	227f      	movs	r2, #127	@ 0x7f
 802154a:	4013      	ands	r3, r2
 802154c:	d006      	beq.n	802155c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802154e:	187b      	adds	r3, r7, r1
 8021550:	781a      	ldrb	r2, [r3, #0]
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	0011      	movs	r1, r2
 8021556:	0018      	movs	r0, r3
 8021558:	f001 f9d2 	bl	8022900 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	0018      	movs	r0, r3
 8021560:	f000 fd63 	bl	802202a <USBD_CtlSendStatus>
              }
              break;
 8021564:	e006      	b.n	8021574 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8021566:	683a      	ldr	r2, [r7, #0]
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	0011      	movs	r1, r2
 802156c:	0018      	movs	r0, r3
 802156e:	f000 fc74 	bl	8021e5a <USBD_CtlError>
              break;
 8021572:	e000      	b.n	8021576 <USBD_StdEPReq+0x1b0>
              break;
 8021574:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021576:	e0cd      	b.n	8021714 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8021578:	687a      	ldr	r2, [r7, #4]
 802157a:	23a7      	movs	r3, #167	@ 0xa7
 802157c:	009b      	lsls	r3, r3, #2
 802157e:	5cd3      	ldrb	r3, [r2, r3]
 8021580:	2b02      	cmp	r3, #2
 8021582:	d002      	beq.n	802158a <USBD_StdEPReq+0x1c4>
 8021584:	2b03      	cmp	r3, #3
 8021586:	d03c      	beq.n	8021602 <USBD_StdEPReq+0x23c>
 8021588:	e0b5      	b.n	80216f6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802158a:	220e      	movs	r2, #14
 802158c:	18bb      	adds	r3, r7, r2
 802158e:	781b      	ldrb	r3, [r3, #0]
 8021590:	2b00      	cmp	r3, #0
 8021592:	d00a      	beq.n	80215aa <USBD_StdEPReq+0x1e4>
 8021594:	18bb      	adds	r3, r7, r2
 8021596:	781b      	ldrb	r3, [r3, #0]
 8021598:	2b80      	cmp	r3, #128	@ 0x80
 802159a:	d006      	beq.n	80215aa <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 802159c:	683a      	ldr	r2, [r7, #0]
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	0011      	movs	r1, r2
 80215a2:	0018      	movs	r0, r3
 80215a4:	f000 fc59 	bl	8021e5a <USBD_CtlError>
                break;
 80215a8:	e0ac      	b.n	8021704 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80215aa:	220e      	movs	r2, #14
 80215ac:	18bb      	adds	r3, r7, r2
 80215ae:	781b      	ldrb	r3, [r3, #0]
 80215b0:	b25b      	sxtb	r3, r3
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	da0c      	bge.n	80215d0 <USBD_StdEPReq+0x20a>
 80215b6:	18bb      	adds	r3, r7, r2
 80215b8:	781b      	ldrb	r3, [r3, #0]
 80215ba:	227f      	movs	r2, #127	@ 0x7f
 80215bc:	401a      	ands	r2, r3
 80215be:	0013      	movs	r3, r2
 80215c0:	009b      	lsls	r3, r3, #2
 80215c2:	189b      	adds	r3, r3, r2
 80215c4:	009b      	lsls	r3, r3, #2
 80215c6:	3310      	adds	r3, #16
 80215c8:	687a      	ldr	r2, [r7, #4]
 80215ca:	18d3      	adds	r3, r2, r3
 80215cc:	3304      	adds	r3, #4
 80215ce:	e00d      	b.n	80215ec <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80215d0:	230e      	movs	r3, #14
 80215d2:	18fb      	adds	r3, r7, r3
 80215d4:	781b      	ldrb	r3, [r3, #0]
 80215d6:	227f      	movs	r2, #127	@ 0x7f
 80215d8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80215da:	0013      	movs	r3, r2
 80215dc:	009b      	lsls	r3, r3, #2
 80215de:	189b      	adds	r3, r3, r2
 80215e0:	009b      	lsls	r3, r3, #2
 80215e2:	3351      	adds	r3, #81	@ 0x51
 80215e4:	33ff      	adds	r3, #255	@ 0xff
 80215e6:	687a      	ldr	r2, [r7, #4]
 80215e8:	18d3      	adds	r3, r2, r3
 80215ea:	3304      	adds	r3, #4
 80215ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80215ee:	68bb      	ldr	r3, [r7, #8]
 80215f0:	2200      	movs	r2, #0
 80215f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80215f4:	68b9      	ldr	r1, [r7, #8]
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	2202      	movs	r2, #2
 80215fa:	0018      	movs	r0, r3
 80215fc:	f000 fcab 	bl	8021f56 <USBD_CtlSendData>
              break;
 8021600:	e080      	b.n	8021704 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021602:	220e      	movs	r2, #14
 8021604:	18bb      	adds	r3, r7, r2
 8021606:	781b      	ldrb	r3, [r3, #0]
 8021608:	b25b      	sxtb	r3, r3
 802160a:	2b00      	cmp	r3, #0
 802160c:	da14      	bge.n	8021638 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 802160e:	18bb      	adds	r3, r7, r2
 8021610:	781b      	ldrb	r3, [r3, #0]
 8021612:	220f      	movs	r2, #15
 8021614:	401a      	ands	r2, r3
 8021616:	6879      	ldr	r1, [r7, #4]
 8021618:	0013      	movs	r3, r2
 802161a:	009b      	lsls	r3, r3, #2
 802161c:	189b      	adds	r3, r3, r2
 802161e:	009b      	lsls	r3, r3, #2
 8021620:	18cb      	adds	r3, r1, r3
 8021622:	3318      	adds	r3, #24
 8021624:	681b      	ldr	r3, [r3, #0]
 8021626:	2b00      	cmp	r3, #0
 8021628:	d11e      	bne.n	8021668 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802162a:	683a      	ldr	r2, [r7, #0]
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	0011      	movs	r1, r2
 8021630:	0018      	movs	r0, r3
 8021632:	f000 fc12 	bl	8021e5a <USBD_CtlError>
                  break;
 8021636:	e065      	b.n	8021704 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021638:	230e      	movs	r3, #14
 802163a:	18fb      	adds	r3, r7, r3
 802163c:	781b      	ldrb	r3, [r3, #0]
 802163e:	220f      	movs	r2, #15
 8021640:	401a      	ands	r2, r3
 8021642:	6878      	ldr	r0, [r7, #4]
 8021644:	23ac      	movs	r3, #172	@ 0xac
 8021646:	0059      	lsls	r1, r3, #1
 8021648:	0013      	movs	r3, r2
 802164a:	009b      	lsls	r3, r3, #2
 802164c:	189b      	adds	r3, r3, r2
 802164e:	009b      	lsls	r3, r3, #2
 8021650:	18c3      	adds	r3, r0, r3
 8021652:	185b      	adds	r3, r3, r1
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	2b00      	cmp	r3, #0
 8021658:	d106      	bne.n	8021668 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 802165a:	683a      	ldr	r2, [r7, #0]
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	0011      	movs	r1, r2
 8021660:	0018      	movs	r0, r3
 8021662:	f000 fbfa 	bl	8021e5a <USBD_CtlError>
                  break;
 8021666:	e04d      	b.n	8021704 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021668:	220e      	movs	r2, #14
 802166a:	18bb      	adds	r3, r7, r2
 802166c:	781b      	ldrb	r3, [r3, #0]
 802166e:	b25b      	sxtb	r3, r3
 8021670:	2b00      	cmp	r3, #0
 8021672:	da0c      	bge.n	802168e <USBD_StdEPReq+0x2c8>
 8021674:	18bb      	adds	r3, r7, r2
 8021676:	781b      	ldrb	r3, [r3, #0]
 8021678:	227f      	movs	r2, #127	@ 0x7f
 802167a:	401a      	ands	r2, r3
 802167c:	0013      	movs	r3, r2
 802167e:	009b      	lsls	r3, r3, #2
 8021680:	189b      	adds	r3, r3, r2
 8021682:	009b      	lsls	r3, r3, #2
 8021684:	3310      	adds	r3, #16
 8021686:	687a      	ldr	r2, [r7, #4]
 8021688:	18d3      	adds	r3, r2, r3
 802168a:	3304      	adds	r3, #4
 802168c:	e00d      	b.n	80216aa <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802168e:	230e      	movs	r3, #14
 8021690:	18fb      	adds	r3, r7, r3
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	227f      	movs	r2, #127	@ 0x7f
 8021696:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021698:	0013      	movs	r3, r2
 802169a:	009b      	lsls	r3, r3, #2
 802169c:	189b      	adds	r3, r3, r2
 802169e:	009b      	lsls	r3, r3, #2
 80216a0:	3351      	adds	r3, #81	@ 0x51
 80216a2:	33ff      	adds	r3, #255	@ 0xff
 80216a4:	687a      	ldr	r2, [r7, #4]
 80216a6:	18d3      	adds	r3, r2, r3
 80216a8:	3304      	adds	r3, #4
 80216aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80216ac:	220e      	movs	r2, #14
 80216ae:	18bb      	adds	r3, r7, r2
 80216b0:	781b      	ldrb	r3, [r3, #0]
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	d003      	beq.n	80216be <USBD_StdEPReq+0x2f8>
 80216b6:	18bb      	adds	r3, r7, r2
 80216b8:	781b      	ldrb	r3, [r3, #0]
 80216ba:	2b80      	cmp	r3, #128	@ 0x80
 80216bc:	d103      	bne.n	80216c6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80216be:	68bb      	ldr	r3, [r7, #8]
 80216c0:	2200      	movs	r2, #0
 80216c2:	601a      	str	r2, [r3, #0]
 80216c4:	e010      	b.n	80216e8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80216c6:	230e      	movs	r3, #14
 80216c8:	18fb      	adds	r3, r7, r3
 80216ca:	781a      	ldrb	r2, [r3, #0]
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	0011      	movs	r1, r2
 80216d0:	0018      	movs	r0, r3
 80216d2:	f001 f940 	bl	8022956 <USBD_LL_IsStallEP>
 80216d6:	1e03      	subs	r3, r0, #0
 80216d8:	d003      	beq.n	80216e2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80216da:	68bb      	ldr	r3, [r7, #8]
 80216dc:	2201      	movs	r2, #1
 80216de:	601a      	str	r2, [r3, #0]
 80216e0:	e002      	b.n	80216e8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80216e2:	68bb      	ldr	r3, [r7, #8]
 80216e4:	2200      	movs	r2, #0
 80216e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80216e8:	68b9      	ldr	r1, [r7, #8]
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	2202      	movs	r2, #2
 80216ee:	0018      	movs	r0, r3
 80216f0:	f000 fc31 	bl	8021f56 <USBD_CtlSendData>
              break;
 80216f4:	e006      	b.n	8021704 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80216f6:	683a      	ldr	r2, [r7, #0]
 80216f8:	687b      	ldr	r3, [r7, #4]
 80216fa:	0011      	movs	r1, r2
 80216fc:	0018      	movs	r0, r3
 80216fe:	f000 fbac 	bl	8021e5a <USBD_CtlError>
              break;
 8021702:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8021704:	e006      	b.n	8021714 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8021706:	683a      	ldr	r2, [r7, #0]
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	0011      	movs	r1, r2
 802170c:	0018      	movs	r0, r3
 802170e:	f000 fba4 	bl	8021e5a <USBD_CtlError>
          break;
 8021712:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8021714:	e006      	b.n	8021724 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8021716:	683a      	ldr	r2, [r7, #0]
 8021718:	687b      	ldr	r3, [r7, #4]
 802171a:	0011      	movs	r1, r2
 802171c:	0018      	movs	r0, r3
 802171e:	f000 fb9c 	bl	8021e5a <USBD_CtlError>
      break;
 8021722:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8021724:	230f      	movs	r3, #15
 8021726:	18fb      	adds	r3, r7, r3
 8021728:	781b      	ldrb	r3, [r3, #0]
}
 802172a:	0018      	movs	r0, r3
 802172c:	46bd      	mov	sp, r7
 802172e:	b004      	add	sp, #16
 8021730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021734 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021734:	b580      	push	{r7, lr}
 8021736:	b084      	sub	sp, #16
 8021738:	af00      	add	r7, sp, #0
 802173a:	6078      	str	r0, [r7, #4]
 802173c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802173e:	2308      	movs	r3, #8
 8021740:	18fb      	adds	r3, r7, r3
 8021742:	2200      	movs	r2, #0
 8021744:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8021746:	2300      	movs	r3, #0
 8021748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 802174a:	230b      	movs	r3, #11
 802174c:	18fb      	adds	r3, r7, r3
 802174e:	2200      	movs	r2, #0
 8021750:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8021752:	683b      	ldr	r3, [r7, #0]
 8021754:	885b      	ldrh	r3, [r3, #2]
 8021756:	0a1b      	lsrs	r3, r3, #8
 8021758:	b29b      	uxth	r3, r3
 802175a:	2b07      	cmp	r3, #7
 802175c:	d900      	bls.n	8021760 <USBD_GetDescriptor+0x2c>
 802175e:	e159      	b.n	8021a14 <USBD_GetDescriptor+0x2e0>
 8021760:	009a      	lsls	r2, r3, #2
 8021762:	4bcb      	ldr	r3, [pc, #812]	@ (8021a90 <USBD_GetDescriptor+0x35c>)
 8021764:	18d3      	adds	r3, r2, r3
 8021766:	681b      	ldr	r3, [r3, #0]
 8021768:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 802176a:	687a      	ldr	r2, [r7, #4]
 802176c:	23ac      	movs	r3, #172	@ 0xac
 802176e:	009b      	lsls	r3, r3, #2
 8021770:	58d3      	ldr	r3, [r2, r3]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	687a      	ldr	r2, [r7, #4]
 8021776:	7c12      	ldrb	r2, [r2, #16]
 8021778:	2108      	movs	r1, #8
 802177a:	1879      	adds	r1, r7, r1
 802177c:	0010      	movs	r0, r2
 802177e:	4798      	blx	r3
 8021780:	0003      	movs	r3, r0
 8021782:	60fb      	str	r3, [r7, #12]
      break;
 8021784:	e153      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	7c1b      	ldrb	r3, [r3, #16]
 802178a:	2b00      	cmp	r3, #0
 802178c:	d10f      	bne.n	80217ae <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802178e:	687a      	ldr	r2, [r7, #4]
 8021790:	23ad      	movs	r3, #173	@ 0xad
 8021792:	009b      	lsls	r3, r3, #2
 8021794:	58d3      	ldr	r3, [r2, r3]
 8021796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021798:	2208      	movs	r2, #8
 802179a:	18ba      	adds	r2, r7, r2
 802179c:	0010      	movs	r0, r2
 802179e:	4798      	blx	r3
 80217a0:	0003      	movs	r3, r0
 80217a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80217a4:	68fb      	ldr	r3, [r7, #12]
 80217a6:	3301      	adds	r3, #1
 80217a8:	2202      	movs	r2, #2
 80217aa:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80217ac:	e13f      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80217ae:	687a      	ldr	r2, [r7, #4]
 80217b0:	23ad      	movs	r3, #173	@ 0xad
 80217b2:	009b      	lsls	r3, r3, #2
 80217b4:	58d3      	ldr	r3, [r2, r3]
 80217b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80217b8:	2208      	movs	r2, #8
 80217ba:	18ba      	adds	r2, r7, r2
 80217bc:	0010      	movs	r0, r2
 80217be:	4798      	blx	r3
 80217c0:	0003      	movs	r3, r0
 80217c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	3301      	adds	r3, #1
 80217c8:	2202      	movs	r2, #2
 80217ca:	701a      	strb	r2, [r3, #0]
      break;
 80217cc:	e12f      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80217ce:	683b      	ldr	r3, [r7, #0]
 80217d0:	885b      	ldrh	r3, [r3, #2]
 80217d2:	b2db      	uxtb	r3, r3
 80217d4:	2b05      	cmp	r3, #5
 80217d6:	d900      	bls.n	80217da <USBD_GetDescriptor+0xa6>
 80217d8:	e0d0      	b.n	802197c <USBD_GetDescriptor+0x248>
 80217da:	009a      	lsls	r2, r3, #2
 80217dc:	4bad      	ldr	r3, [pc, #692]	@ (8021a94 <USBD_GetDescriptor+0x360>)
 80217de:	18d3      	adds	r3, r2, r3
 80217e0:	681b      	ldr	r3, [r3, #0]
 80217e2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80217e4:	687a      	ldr	r2, [r7, #4]
 80217e6:	23ac      	movs	r3, #172	@ 0xac
 80217e8:	009b      	lsls	r3, r3, #2
 80217ea:	58d3      	ldr	r3, [r2, r3]
 80217ec:	685b      	ldr	r3, [r3, #4]
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	d00d      	beq.n	802180e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80217f2:	687a      	ldr	r2, [r7, #4]
 80217f4:	23ac      	movs	r3, #172	@ 0xac
 80217f6:	009b      	lsls	r3, r3, #2
 80217f8:	58d3      	ldr	r3, [r2, r3]
 80217fa:	685b      	ldr	r3, [r3, #4]
 80217fc:	687a      	ldr	r2, [r7, #4]
 80217fe:	7c12      	ldrb	r2, [r2, #16]
 8021800:	2108      	movs	r1, #8
 8021802:	1879      	adds	r1, r7, r1
 8021804:	0010      	movs	r0, r2
 8021806:	4798      	blx	r3
 8021808:	0003      	movs	r3, r0
 802180a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802180c:	e0c3      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802180e:	683a      	ldr	r2, [r7, #0]
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	0011      	movs	r1, r2
 8021814:	0018      	movs	r0, r3
 8021816:	f000 fb20 	bl	8021e5a <USBD_CtlError>
            err++;
 802181a:	210b      	movs	r1, #11
 802181c:	187b      	adds	r3, r7, r1
 802181e:	781a      	ldrb	r2, [r3, #0]
 8021820:	187b      	adds	r3, r7, r1
 8021822:	3201      	adds	r2, #1
 8021824:	701a      	strb	r2, [r3, #0]
          break;
 8021826:	e0b6      	b.n	8021996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021828:	687a      	ldr	r2, [r7, #4]
 802182a:	23ac      	movs	r3, #172	@ 0xac
 802182c:	009b      	lsls	r3, r3, #2
 802182e:	58d3      	ldr	r3, [r2, r3]
 8021830:	689b      	ldr	r3, [r3, #8]
 8021832:	2b00      	cmp	r3, #0
 8021834:	d00d      	beq.n	8021852 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8021836:	687a      	ldr	r2, [r7, #4]
 8021838:	23ac      	movs	r3, #172	@ 0xac
 802183a:	009b      	lsls	r3, r3, #2
 802183c:	58d3      	ldr	r3, [r2, r3]
 802183e:	689b      	ldr	r3, [r3, #8]
 8021840:	687a      	ldr	r2, [r7, #4]
 8021842:	7c12      	ldrb	r2, [r2, #16]
 8021844:	2108      	movs	r1, #8
 8021846:	1879      	adds	r1, r7, r1
 8021848:	0010      	movs	r0, r2
 802184a:	4798      	blx	r3
 802184c:	0003      	movs	r3, r0
 802184e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021850:	e0a1      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021852:	683a      	ldr	r2, [r7, #0]
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	0011      	movs	r1, r2
 8021858:	0018      	movs	r0, r3
 802185a:	f000 fafe 	bl	8021e5a <USBD_CtlError>
            err++;
 802185e:	210b      	movs	r1, #11
 8021860:	187b      	adds	r3, r7, r1
 8021862:	781a      	ldrb	r2, [r3, #0]
 8021864:	187b      	adds	r3, r7, r1
 8021866:	3201      	adds	r2, #1
 8021868:	701a      	strb	r2, [r3, #0]
          break;
 802186a:	e094      	b.n	8021996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 802186c:	687a      	ldr	r2, [r7, #4]
 802186e:	23ac      	movs	r3, #172	@ 0xac
 8021870:	009b      	lsls	r3, r3, #2
 8021872:	58d3      	ldr	r3, [r2, r3]
 8021874:	68db      	ldr	r3, [r3, #12]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d00d      	beq.n	8021896 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 802187a:	687a      	ldr	r2, [r7, #4]
 802187c:	23ac      	movs	r3, #172	@ 0xac
 802187e:	009b      	lsls	r3, r3, #2
 8021880:	58d3      	ldr	r3, [r2, r3]
 8021882:	68db      	ldr	r3, [r3, #12]
 8021884:	687a      	ldr	r2, [r7, #4]
 8021886:	7c12      	ldrb	r2, [r2, #16]
 8021888:	2108      	movs	r1, #8
 802188a:	1879      	adds	r1, r7, r1
 802188c:	0010      	movs	r0, r2
 802188e:	4798      	blx	r3
 8021890:	0003      	movs	r3, r0
 8021892:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021894:	e07f      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021896:	683a      	ldr	r2, [r7, #0]
 8021898:	687b      	ldr	r3, [r7, #4]
 802189a:	0011      	movs	r1, r2
 802189c:	0018      	movs	r0, r3
 802189e:	f000 fadc 	bl	8021e5a <USBD_CtlError>
            err++;
 80218a2:	210b      	movs	r1, #11
 80218a4:	187b      	adds	r3, r7, r1
 80218a6:	781a      	ldrb	r2, [r3, #0]
 80218a8:	187b      	adds	r3, r7, r1
 80218aa:	3201      	adds	r2, #1
 80218ac:	701a      	strb	r2, [r3, #0]
          break;
 80218ae:	e072      	b.n	8021996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80218b0:	687a      	ldr	r2, [r7, #4]
 80218b2:	23ac      	movs	r3, #172	@ 0xac
 80218b4:	009b      	lsls	r3, r3, #2
 80218b6:	58d3      	ldr	r3, [r2, r3]
 80218b8:	691b      	ldr	r3, [r3, #16]
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d00d      	beq.n	80218da <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80218be:	687a      	ldr	r2, [r7, #4]
 80218c0:	23ac      	movs	r3, #172	@ 0xac
 80218c2:	009b      	lsls	r3, r3, #2
 80218c4:	58d3      	ldr	r3, [r2, r3]
 80218c6:	691b      	ldr	r3, [r3, #16]
 80218c8:	687a      	ldr	r2, [r7, #4]
 80218ca:	7c12      	ldrb	r2, [r2, #16]
 80218cc:	2108      	movs	r1, #8
 80218ce:	1879      	adds	r1, r7, r1
 80218d0:	0010      	movs	r0, r2
 80218d2:	4798      	blx	r3
 80218d4:	0003      	movs	r3, r0
 80218d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80218d8:	e05d      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80218da:	683a      	ldr	r2, [r7, #0]
 80218dc:	687b      	ldr	r3, [r7, #4]
 80218de:	0011      	movs	r1, r2
 80218e0:	0018      	movs	r0, r3
 80218e2:	f000 faba 	bl	8021e5a <USBD_CtlError>
            err++;
 80218e6:	210b      	movs	r1, #11
 80218e8:	187b      	adds	r3, r7, r1
 80218ea:	781a      	ldrb	r2, [r3, #0]
 80218ec:	187b      	adds	r3, r7, r1
 80218ee:	3201      	adds	r2, #1
 80218f0:	701a      	strb	r2, [r3, #0]
          break;
 80218f2:	e050      	b.n	8021996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80218f4:	687a      	ldr	r2, [r7, #4]
 80218f6:	23ac      	movs	r3, #172	@ 0xac
 80218f8:	009b      	lsls	r3, r3, #2
 80218fa:	58d3      	ldr	r3, [r2, r3]
 80218fc:	695b      	ldr	r3, [r3, #20]
 80218fe:	2b00      	cmp	r3, #0
 8021900:	d00d      	beq.n	802191e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021902:	687a      	ldr	r2, [r7, #4]
 8021904:	23ac      	movs	r3, #172	@ 0xac
 8021906:	009b      	lsls	r3, r3, #2
 8021908:	58d3      	ldr	r3, [r2, r3]
 802190a:	695b      	ldr	r3, [r3, #20]
 802190c:	687a      	ldr	r2, [r7, #4]
 802190e:	7c12      	ldrb	r2, [r2, #16]
 8021910:	2108      	movs	r1, #8
 8021912:	1879      	adds	r1, r7, r1
 8021914:	0010      	movs	r0, r2
 8021916:	4798      	blx	r3
 8021918:	0003      	movs	r3, r0
 802191a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802191c:	e03b      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802191e:	683a      	ldr	r2, [r7, #0]
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	0011      	movs	r1, r2
 8021924:	0018      	movs	r0, r3
 8021926:	f000 fa98 	bl	8021e5a <USBD_CtlError>
            err++;
 802192a:	210b      	movs	r1, #11
 802192c:	187b      	adds	r3, r7, r1
 802192e:	781a      	ldrb	r2, [r3, #0]
 8021930:	187b      	adds	r3, r7, r1
 8021932:	3201      	adds	r2, #1
 8021934:	701a      	strb	r2, [r3, #0]
          break;
 8021936:	e02e      	b.n	8021996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021938:	687a      	ldr	r2, [r7, #4]
 802193a:	23ac      	movs	r3, #172	@ 0xac
 802193c:	009b      	lsls	r3, r3, #2
 802193e:	58d3      	ldr	r3, [r2, r3]
 8021940:	699b      	ldr	r3, [r3, #24]
 8021942:	2b00      	cmp	r3, #0
 8021944:	d00d      	beq.n	8021962 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021946:	687a      	ldr	r2, [r7, #4]
 8021948:	23ac      	movs	r3, #172	@ 0xac
 802194a:	009b      	lsls	r3, r3, #2
 802194c:	58d3      	ldr	r3, [r2, r3]
 802194e:	699b      	ldr	r3, [r3, #24]
 8021950:	687a      	ldr	r2, [r7, #4]
 8021952:	7c12      	ldrb	r2, [r2, #16]
 8021954:	2108      	movs	r1, #8
 8021956:	1879      	adds	r1, r7, r1
 8021958:	0010      	movs	r0, r2
 802195a:	4798      	blx	r3
 802195c:	0003      	movs	r3, r0
 802195e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021960:	e019      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8021962:	683a      	ldr	r2, [r7, #0]
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	0011      	movs	r1, r2
 8021968:	0018      	movs	r0, r3
 802196a:	f000 fa76 	bl	8021e5a <USBD_CtlError>
            err++;
 802196e:	210b      	movs	r1, #11
 8021970:	187b      	adds	r3, r7, r1
 8021972:	781a      	ldrb	r2, [r3, #0]
 8021974:	187b      	adds	r3, r7, r1
 8021976:	3201      	adds	r2, #1
 8021978:	701a      	strb	r2, [r3, #0]
          break;
 802197a:	e00c      	b.n	8021996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 802197c:	683a      	ldr	r2, [r7, #0]
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	0011      	movs	r1, r2
 8021982:	0018      	movs	r0, r3
 8021984:	f000 fa69 	bl	8021e5a <USBD_CtlError>
          err++;
 8021988:	210b      	movs	r1, #11
 802198a:	187b      	adds	r3, r7, r1
 802198c:	781a      	ldrb	r2, [r3, #0]
 802198e:	187b      	adds	r3, r7, r1
 8021990:	3201      	adds	r2, #1
 8021992:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8021994:	e04b      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>
 8021996:	e04a      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	7c1b      	ldrb	r3, [r3, #16]
 802199c:	2b00      	cmp	r3, #0
 802199e:	d10b      	bne.n	80219b8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80219a0:	687a      	ldr	r2, [r7, #4]
 80219a2:	23ad      	movs	r3, #173	@ 0xad
 80219a4:	009b      	lsls	r3, r3, #2
 80219a6:	58d3      	ldr	r3, [r2, r3]
 80219a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80219aa:	2208      	movs	r2, #8
 80219ac:	18ba      	adds	r2, r7, r2
 80219ae:	0010      	movs	r0, r2
 80219b0:	4798      	blx	r3
 80219b2:	0003      	movs	r3, r0
 80219b4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80219b6:	e03a      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80219b8:	683a      	ldr	r2, [r7, #0]
 80219ba:	687b      	ldr	r3, [r7, #4]
 80219bc:	0011      	movs	r1, r2
 80219be:	0018      	movs	r0, r3
 80219c0:	f000 fa4b 	bl	8021e5a <USBD_CtlError>
        err++;
 80219c4:	210b      	movs	r1, #11
 80219c6:	187b      	adds	r3, r7, r1
 80219c8:	781a      	ldrb	r2, [r3, #0]
 80219ca:	187b      	adds	r3, r7, r1
 80219cc:	3201      	adds	r2, #1
 80219ce:	701a      	strb	r2, [r3, #0]
      break;
 80219d0:	e02d      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	7c1b      	ldrb	r3, [r3, #16]
 80219d6:	2b00      	cmp	r3, #0
 80219d8:	d10f      	bne.n	80219fa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80219da:	687a      	ldr	r2, [r7, #4]
 80219dc:	23ad      	movs	r3, #173	@ 0xad
 80219de:	009b      	lsls	r3, r3, #2
 80219e0:	58d3      	ldr	r3, [r2, r3]
 80219e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80219e4:	2208      	movs	r2, #8
 80219e6:	18ba      	adds	r2, r7, r2
 80219e8:	0010      	movs	r0, r2
 80219ea:	4798      	blx	r3
 80219ec:	0003      	movs	r3, r0
 80219ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	3301      	adds	r3, #1
 80219f4:	2207      	movs	r2, #7
 80219f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80219f8:	e019      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80219fa:	683a      	ldr	r2, [r7, #0]
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	0011      	movs	r1, r2
 8021a00:	0018      	movs	r0, r3
 8021a02:	f000 fa2a 	bl	8021e5a <USBD_CtlError>
        err++;
 8021a06:	210b      	movs	r1, #11
 8021a08:	187b      	adds	r3, r7, r1
 8021a0a:	781a      	ldrb	r2, [r3, #0]
 8021a0c:	187b      	adds	r3, r7, r1
 8021a0e:	3201      	adds	r2, #1
 8021a10:	701a      	strb	r2, [r3, #0]
      break;
 8021a12:	e00c      	b.n	8021a2e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8021a14:	683a      	ldr	r2, [r7, #0]
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	0011      	movs	r1, r2
 8021a1a:	0018      	movs	r0, r3
 8021a1c:	f000 fa1d 	bl	8021e5a <USBD_CtlError>
      err++;
 8021a20:	210b      	movs	r1, #11
 8021a22:	187b      	adds	r3, r7, r1
 8021a24:	781a      	ldrb	r2, [r3, #0]
 8021a26:	187b      	adds	r3, r7, r1
 8021a28:	3201      	adds	r2, #1
 8021a2a:	701a      	strb	r2, [r3, #0]
      break;
 8021a2c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8021a2e:	230b      	movs	r3, #11
 8021a30:	18fb      	adds	r3, r7, r3
 8021a32:	781b      	ldrb	r3, [r3, #0]
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d127      	bne.n	8021a88 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8021a38:	2108      	movs	r1, #8
 8021a3a:	187b      	adds	r3, r7, r1
 8021a3c:	881b      	ldrh	r3, [r3, #0]
 8021a3e:	2b00      	cmp	r3, #0
 8021a40:	d019      	beq.n	8021a76 <USBD_GetDescriptor+0x342>
 8021a42:	683b      	ldr	r3, [r7, #0]
 8021a44:	88db      	ldrh	r3, [r3, #6]
 8021a46:	2b00      	cmp	r3, #0
 8021a48:	d015      	beq.n	8021a76 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8021a4a:	683b      	ldr	r3, [r7, #0]
 8021a4c:	88da      	ldrh	r2, [r3, #6]
 8021a4e:	187b      	adds	r3, r7, r1
 8021a50:	881b      	ldrh	r3, [r3, #0]
 8021a52:	1c18      	adds	r0, r3, #0
 8021a54:	1c11      	adds	r1, r2, #0
 8021a56:	b28a      	uxth	r2, r1
 8021a58:	b283      	uxth	r3, r0
 8021a5a:	429a      	cmp	r2, r3
 8021a5c:	d900      	bls.n	8021a60 <USBD_GetDescriptor+0x32c>
 8021a5e:	1c01      	adds	r1, r0, #0
 8021a60:	b28a      	uxth	r2, r1
 8021a62:	2108      	movs	r1, #8
 8021a64:	187b      	adds	r3, r7, r1
 8021a66:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021a68:	187b      	adds	r3, r7, r1
 8021a6a:	881a      	ldrh	r2, [r3, #0]
 8021a6c:	68f9      	ldr	r1, [r7, #12]
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	0018      	movs	r0, r3
 8021a72:	f000 fa70 	bl	8021f56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8021a76:	683b      	ldr	r3, [r7, #0]
 8021a78:	88db      	ldrh	r3, [r3, #6]
 8021a7a:	2b00      	cmp	r3, #0
 8021a7c:	d105      	bne.n	8021a8a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	0018      	movs	r0, r3
 8021a82:	f000 fad2 	bl	802202a <USBD_CtlSendStatus>
 8021a86:	e000      	b.n	8021a8a <USBD_GetDescriptor+0x356>
    return;
 8021a88:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	b004      	add	sp, #16
 8021a8e:	bd80      	pop	{r7, pc}
 8021a90:	0802dbd0 	.word	0x0802dbd0
 8021a94:	0802dbf0 	.word	0x0802dbf0

08021a98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021a98:	b590      	push	{r4, r7, lr}
 8021a9a:	b085      	sub	sp, #20
 8021a9c:	af00      	add	r7, sp, #0
 8021a9e:	6078      	str	r0, [r7, #4]
 8021aa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021aa2:	683b      	ldr	r3, [r7, #0]
 8021aa4:	889b      	ldrh	r3, [r3, #4]
 8021aa6:	2b00      	cmp	r3, #0
 8021aa8:	d13d      	bne.n	8021b26 <USBD_SetAddress+0x8e>
 8021aaa:	683b      	ldr	r3, [r7, #0]
 8021aac:	88db      	ldrh	r3, [r3, #6]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	d139      	bne.n	8021b26 <USBD_SetAddress+0x8e>
 8021ab2:	683b      	ldr	r3, [r7, #0]
 8021ab4:	885b      	ldrh	r3, [r3, #2]
 8021ab6:	2b7f      	cmp	r3, #127	@ 0x7f
 8021ab8:	d835      	bhi.n	8021b26 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8021aba:	683b      	ldr	r3, [r7, #0]
 8021abc:	885b      	ldrh	r3, [r3, #2]
 8021abe:	b2da      	uxtb	r2, r3
 8021ac0:	230f      	movs	r3, #15
 8021ac2:	18fb      	adds	r3, r7, r3
 8021ac4:	217f      	movs	r1, #127	@ 0x7f
 8021ac6:	400a      	ands	r2, r1
 8021ac8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021aca:	687a      	ldr	r2, [r7, #4]
 8021acc:	23a7      	movs	r3, #167	@ 0xa7
 8021ace:	009b      	lsls	r3, r3, #2
 8021ad0:	5cd3      	ldrb	r3, [r2, r3]
 8021ad2:	2b03      	cmp	r3, #3
 8021ad4:	d106      	bne.n	8021ae4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8021ad6:	683a      	ldr	r2, [r7, #0]
 8021ad8:	687b      	ldr	r3, [r7, #4]
 8021ada:	0011      	movs	r1, r2
 8021adc:	0018      	movs	r0, r3
 8021ade:	f000 f9bc 	bl	8021e5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021ae2:	e027      	b.n	8021b34 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	240f      	movs	r4, #15
 8021ae8:	193a      	adds	r2, r7, r4
 8021aea:	4914      	ldr	r1, [pc, #80]	@ (8021b3c <USBD_SetAddress+0xa4>)
 8021aec:	7812      	ldrb	r2, [r2, #0]
 8021aee:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8021af0:	193b      	adds	r3, r7, r4
 8021af2:	781a      	ldrb	r2, [r3, #0]
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	0011      	movs	r1, r2
 8021af8:	0018      	movs	r0, r3
 8021afa:	f000 ff5d 	bl	80229b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	0018      	movs	r0, r3
 8021b02:	f000 fa92 	bl	802202a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8021b06:	193b      	adds	r3, r7, r4
 8021b08:	781b      	ldrb	r3, [r3, #0]
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d005      	beq.n	8021b1a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8021b0e:	687a      	ldr	r2, [r7, #4]
 8021b10:	23a7      	movs	r3, #167	@ 0xa7
 8021b12:	009b      	lsls	r3, r3, #2
 8021b14:	2102      	movs	r1, #2
 8021b16:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b18:	e00c      	b.n	8021b34 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8021b1a:	687a      	ldr	r2, [r7, #4]
 8021b1c:	23a7      	movs	r3, #167	@ 0xa7
 8021b1e:	009b      	lsls	r3, r3, #2
 8021b20:	2101      	movs	r1, #1
 8021b22:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021b24:	e006      	b.n	8021b34 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8021b26:	683a      	ldr	r2, [r7, #0]
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	0011      	movs	r1, r2
 8021b2c:	0018      	movs	r0, r3
 8021b2e:	f000 f994 	bl	8021e5a <USBD_CtlError>
  }
}
 8021b32:	46c0      	nop			@ (mov r8, r8)
 8021b34:	46c0      	nop			@ (mov r8, r8)
 8021b36:	46bd      	mov	sp, r7
 8021b38:	b005      	add	sp, #20
 8021b3a:	bd90      	pop	{r4, r7, pc}
 8021b3c:	0000029e 	.word	0x0000029e

08021b40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b40:	b580      	push	{r7, lr}
 8021b42:	b082      	sub	sp, #8
 8021b44:	af00      	add	r7, sp, #0
 8021b46:	6078      	str	r0, [r7, #4]
 8021b48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021b4a:	683b      	ldr	r3, [r7, #0]
 8021b4c:	885b      	ldrh	r3, [r3, #2]
 8021b4e:	b2da      	uxtb	r2, r3
 8021b50:	4b4c      	ldr	r3, [pc, #304]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8021b54:	4b4b      	ldr	r3, [pc, #300]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021b56:	781b      	ldrb	r3, [r3, #0]
 8021b58:	2b01      	cmp	r3, #1
 8021b5a:	d906      	bls.n	8021b6a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8021b5c:	683a      	ldr	r2, [r7, #0]
 8021b5e:	687b      	ldr	r3, [r7, #4]
 8021b60:	0011      	movs	r1, r2
 8021b62:	0018      	movs	r0, r3
 8021b64:	f000 f979 	bl	8021e5a <USBD_CtlError>
 8021b68:	e088      	b.n	8021c7c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8021b6a:	687a      	ldr	r2, [r7, #4]
 8021b6c:	23a7      	movs	r3, #167	@ 0xa7
 8021b6e:	009b      	lsls	r3, r3, #2
 8021b70:	5cd3      	ldrb	r3, [r2, r3]
 8021b72:	2b02      	cmp	r3, #2
 8021b74:	d002      	beq.n	8021b7c <USBD_SetConfig+0x3c>
 8021b76:	2b03      	cmp	r3, #3
 8021b78:	d029      	beq.n	8021bce <USBD_SetConfig+0x8e>
 8021b7a:	e071      	b.n	8021c60 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8021b7c:	4b41      	ldr	r3, [pc, #260]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021b7e:	781b      	ldrb	r3, [r3, #0]
 8021b80:	2b00      	cmp	r3, #0
 8021b82:	d01f      	beq.n	8021bc4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8021b84:	4b3f      	ldr	r3, [pc, #252]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021b86:	781b      	ldrb	r3, [r3, #0]
 8021b88:	001a      	movs	r2, r3
 8021b8a:	687b      	ldr	r3, [r7, #4]
 8021b8c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021b8e:	687a      	ldr	r2, [r7, #4]
 8021b90:	23a7      	movs	r3, #167	@ 0xa7
 8021b92:	009b      	lsls	r3, r3, #2
 8021b94:	2103      	movs	r1, #3
 8021b96:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021b98:	4b3a      	ldr	r3, [pc, #232]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021b9a:	781a      	ldrb	r2, [r3, #0]
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	0011      	movs	r1, r2
 8021ba0:	0018      	movs	r0, r3
 8021ba2:	f7ff f8c6 	bl	8020d32 <USBD_SetClassConfig>
 8021ba6:	0003      	movs	r3, r0
 8021ba8:	2b02      	cmp	r3, #2
 8021baa:	d106      	bne.n	8021bba <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8021bac:	683a      	ldr	r2, [r7, #0]
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	0011      	movs	r1, r2
 8021bb2:	0018      	movs	r0, r3
 8021bb4:	f000 f951 	bl	8021e5a <USBD_CtlError>
            return;
 8021bb8:	e060      	b.n	8021c7c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	0018      	movs	r0, r3
 8021bbe:	f000 fa34 	bl	802202a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021bc2:	e05b      	b.n	8021c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	0018      	movs	r0, r3
 8021bc8:	f000 fa2f 	bl	802202a <USBD_CtlSendStatus>
        break;
 8021bcc:	e056      	b.n	8021c7c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8021bce:	4b2d      	ldr	r3, [pc, #180]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021bd0:	781b      	ldrb	r3, [r3, #0]
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d115      	bne.n	8021c02 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021bd6:	687a      	ldr	r2, [r7, #4]
 8021bd8:	23a7      	movs	r3, #167	@ 0xa7
 8021bda:	009b      	lsls	r3, r3, #2
 8021bdc:	2102      	movs	r1, #2
 8021bde:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8021be0:	4b28      	ldr	r3, [pc, #160]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021be2:	781b      	ldrb	r3, [r3, #0]
 8021be4:	001a      	movs	r2, r3
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8021bea:	4b26      	ldr	r3, [pc, #152]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021bec:	781a      	ldrb	r2, [r3, #0]
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	0011      	movs	r1, r2
 8021bf2:	0018      	movs	r0, r3
 8021bf4:	f7ff f8c4 	bl	8020d80 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	0018      	movs	r0, r3
 8021bfc:	f000 fa15 	bl	802202a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8021c00:	e03c      	b.n	8021c7c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8021c02:	4b20      	ldr	r3, [pc, #128]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021c04:	781b      	ldrb	r3, [r3, #0]
 8021c06:	001a      	movs	r2, r3
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	685b      	ldr	r3, [r3, #4]
 8021c0c:	429a      	cmp	r2, r3
 8021c0e:	d022      	beq.n	8021c56 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	685b      	ldr	r3, [r3, #4]
 8021c14:	b2da      	uxtb	r2, r3
 8021c16:	687b      	ldr	r3, [r7, #4]
 8021c18:	0011      	movs	r1, r2
 8021c1a:	0018      	movs	r0, r3
 8021c1c:	f7ff f8b0 	bl	8020d80 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8021c20:	4b18      	ldr	r3, [pc, #96]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021c22:	781b      	ldrb	r3, [r3, #0]
 8021c24:	001a      	movs	r2, r3
 8021c26:	687b      	ldr	r3, [r7, #4]
 8021c28:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8021c2a:	4b16      	ldr	r3, [pc, #88]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021c2c:	781a      	ldrb	r2, [r3, #0]
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	0011      	movs	r1, r2
 8021c32:	0018      	movs	r0, r3
 8021c34:	f7ff f87d 	bl	8020d32 <USBD_SetClassConfig>
 8021c38:	0003      	movs	r3, r0
 8021c3a:	2b02      	cmp	r3, #2
 8021c3c:	d106      	bne.n	8021c4c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8021c3e:	683a      	ldr	r2, [r7, #0]
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	0011      	movs	r1, r2
 8021c44:	0018      	movs	r0, r3
 8021c46:	f000 f908 	bl	8021e5a <USBD_CtlError>
            return;
 8021c4a:	e017      	b.n	8021c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021c4c:	687b      	ldr	r3, [r7, #4]
 8021c4e:	0018      	movs	r0, r3
 8021c50:	f000 f9eb 	bl	802202a <USBD_CtlSendStatus>
        break;
 8021c54:	e012      	b.n	8021c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8021c56:	687b      	ldr	r3, [r7, #4]
 8021c58:	0018      	movs	r0, r3
 8021c5a:	f000 f9e6 	bl	802202a <USBD_CtlSendStatus>
        break;
 8021c5e:	e00d      	b.n	8021c7c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8021c60:	683a      	ldr	r2, [r7, #0]
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	0011      	movs	r1, r2
 8021c66:	0018      	movs	r0, r3
 8021c68:	f000 f8f7 	bl	8021e5a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8021c6c:	4b05      	ldr	r3, [pc, #20]	@ (8021c84 <USBD_SetConfig+0x144>)
 8021c6e:	781a      	ldrb	r2, [r3, #0]
 8021c70:	687b      	ldr	r3, [r7, #4]
 8021c72:	0011      	movs	r1, r2
 8021c74:	0018      	movs	r0, r3
 8021c76:	f7ff f883 	bl	8020d80 <USBD_ClrClassConfig>
        break;
 8021c7a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	b002      	add	sp, #8
 8021c80:	bd80      	pop	{r7, pc}
 8021c82:	46c0      	nop			@ (mov r8, r8)
 8021c84:	20002244 	.word	0x20002244

08021c88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b082      	sub	sp, #8
 8021c8c:	af00      	add	r7, sp, #0
 8021c8e:	6078      	str	r0, [r7, #4]
 8021c90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021c92:	683b      	ldr	r3, [r7, #0]
 8021c94:	88db      	ldrh	r3, [r3, #6]
 8021c96:	2b01      	cmp	r3, #1
 8021c98:	d006      	beq.n	8021ca8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8021c9a:	683a      	ldr	r2, [r7, #0]
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	0011      	movs	r1, r2
 8021ca0:	0018      	movs	r0, r3
 8021ca2:	f000 f8da 	bl	8021e5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021ca6:	e026      	b.n	8021cf6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8021ca8:	687a      	ldr	r2, [r7, #4]
 8021caa:	23a7      	movs	r3, #167	@ 0xa7
 8021cac:	009b      	lsls	r3, r3, #2
 8021cae:	5cd3      	ldrb	r3, [r2, r3]
 8021cb0:	2b02      	cmp	r3, #2
 8021cb2:	dc02      	bgt.n	8021cba <USBD_GetConfig+0x32>
 8021cb4:	2b00      	cmp	r3, #0
 8021cb6:	dc03      	bgt.n	8021cc0 <USBD_GetConfig+0x38>
 8021cb8:	e016      	b.n	8021ce8 <USBD_GetConfig+0x60>
 8021cba:	2b03      	cmp	r3, #3
 8021cbc:	d00c      	beq.n	8021cd8 <USBD_GetConfig+0x50>
 8021cbe:	e013      	b.n	8021ce8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8021cc0:	687b      	ldr	r3, [r7, #4]
 8021cc2:	2200      	movs	r2, #0
 8021cc4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8021cc6:	687b      	ldr	r3, [r7, #4]
 8021cc8:	3308      	adds	r3, #8
 8021cca:	0019      	movs	r1, r3
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	2201      	movs	r2, #1
 8021cd0:	0018      	movs	r0, r3
 8021cd2:	f000 f940 	bl	8021f56 <USBD_CtlSendData>
        break;
 8021cd6:	e00e      	b.n	8021cf6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	1d19      	adds	r1, r3, #4
 8021cdc:	687b      	ldr	r3, [r7, #4]
 8021cde:	2201      	movs	r2, #1
 8021ce0:	0018      	movs	r0, r3
 8021ce2:	f000 f938 	bl	8021f56 <USBD_CtlSendData>
        break;
 8021ce6:	e006      	b.n	8021cf6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8021ce8:	683a      	ldr	r2, [r7, #0]
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	0011      	movs	r1, r2
 8021cee:	0018      	movs	r0, r3
 8021cf0:	f000 f8b3 	bl	8021e5a <USBD_CtlError>
        break;
 8021cf4:	46c0      	nop			@ (mov r8, r8)
}
 8021cf6:	46c0      	nop			@ (mov r8, r8)
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	b002      	add	sp, #8
 8021cfc:	bd80      	pop	{r7, pc}

08021cfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021cfe:	b580      	push	{r7, lr}
 8021d00:	b082      	sub	sp, #8
 8021d02:	af00      	add	r7, sp, #0
 8021d04:	6078      	str	r0, [r7, #4]
 8021d06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021d08:	687a      	ldr	r2, [r7, #4]
 8021d0a:	23a7      	movs	r3, #167	@ 0xa7
 8021d0c:	009b      	lsls	r3, r3, #2
 8021d0e:	5cd3      	ldrb	r3, [r2, r3]
 8021d10:	3b01      	subs	r3, #1
 8021d12:	2b02      	cmp	r3, #2
 8021d14:	d822      	bhi.n	8021d5c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021d16:	683b      	ldr	r3, [r7, #0]
 8021d18:	88db      	ldrh	r3, [r3, #6]
 8021d1a:	2b02      	cmp	r3, #2
 8021d1c:	d006      	beq.n	8021d2c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8021d1e:	683a      	ldr	r2, [r7, #0]
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	0011      	movs	r1, r2
 8021d24:	0018      	movs	r0, r3
 8021d26:	f000 f898 	bl	8021e5a <USBD_CtlError>
        break;
 8021d2a:	e01e      	b.n	8021d6a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	2201      	movs	r2, #1
 8021d30:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8021d32:	687a      	ldr	r2, [r7, #4]
 8021d34:	23a9      	movs	r3, #169	@ 0xa9
 8021d36:	009b      	lsls	r3, r3, #2
 8021d38:	58d3      	ldr	r3, [r2, r3]
 8021d3a:	2b00      	cmp	r3, #0
 8021d3c:	d005      	beq.n	8021d4a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	68db      	ldr	r3, [r3, #12]
 8021d42:	2202      	movs	r2, #2
 8021d44:	431a      	orrs	r2, r3
 8021d46:	687b      	ldr	r3, [r7, #4]
 8021d48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	330c      	adds	r3, #12
 8021d4e:	0019      	movs	r1, r3
 8021d50:	687b      	ldr	r3, [r7, #4]
 8021d52:	2202      	movs	r2, #2
 8021d54:	0018      	movs	r0, r3
 8021d56:	f000 f8fe 	bl	8021f56 <USBD_CtlSendData>
      break;
 8021d5a:	e006      	b.n	8021d6a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8021d5c:	683a      	ldr	r2, [r7, #0]
 8021d5e:	687b      	ldr	r3, [r7, #4]
 8021d60:	0011      	movs	r1, r2
 8021d62:	0018      	movs	r0, r3
 8021d64:	f000 f879 	bl	8021e5a <USBD_CtlError>
      break;
 8021d68:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021d6a:	46c0      	nop			@ (mov r8, r8)
 8021d6c:	46bd      	mov	sp, r7
 8021d6e:	b002      	add	sp, #8
 8021d70:	bd80      	pop	{r7, pc}

08021d72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021d72:	b580      	push	{r7, lr}
 8021d74:	b082      	sub	sp, #8
 8021d76:	af00      	add	r7, sp, #0
 8021d78:	6078      	str	r0, [r7, #4]
 8021d7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021d7c:	683b      	ldr	r3, [r7, #0]
 8021d7e:	885b      	ldrh	r3, [r3, #2]
 8021d80:	2b01      	cmp	r3, #1
 8021d82:	d108      	bne.n	8021d96 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8021d84:	687a      	ldr	r2, [r7, #4]
 8021d86:	23a9      	movs	r3, #169	@ 0xa9
 8021d88:	009b      	lsls	r3, r3, #2
 8021d8a:	2101      	movs	r1, #1
 8021d8c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	0018      	movs	r0, r3
 8021d92:	f000 f94a 	bl	802202a <USBD_CtlSendStatus>
  }
}
 8021d96:	46c0      	nop			@ (mov r8, r8)
 8021d98:	46bd      	mov	sp, r7
 8021d9a:	b002      	add	sp, #8
 8021d9c:	bd80      	pop	{r7, pc}

08021d9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8021d9e:	b580      	push	{r7, lr}
 8021da0:	b082      	sub	sp, #8
 8021da2:	af00      	add	r7, sp, #0
 8021da4:	6078      	str	r0, [r7, #4]
 8021da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021da8:	687a      	ldr	r2, [r7, #4]
 8021daa:	23a7      	movs	r3, #167	@ 0xa7
 8021dac:	009b      	lsls	r3, r3, #2
 8021dae:	5cd3      	ldrb	r3, [r2, r3]
 8021db0:	3b01      	subs	r3, #1
 8021db2:	2b02      	cmp	r3, #2
 8021db4:	d80d      	bhi.n	8021dd2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021db6:	683b      	ldr	r3, [r7, #0]
 8021db8:	885b      	ldrh	r3, [r3, #2]
 8021dba:	2b01      	cmp	r3, #1
 8021dbc:	d110      	bne.n	8021de0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8021dbe:	687a      	ldr	r2, [r7, #4]
 8021dc0:	23a9      	movs	r3, #169	@ 0xa9
 8021dc2:	009b      	lsls	r3, r3, #2
 8021dc4:	2100      	movs	r1, #0
 8021dc6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8021dc8:	687b      	ldr	r3, [r7, #4]
 8021dca:	0018      	movs	r0, r3
 8021dcc:	f000 f92d 	bl	802202a <USBD_CtlSendStatus>
      }
      break;
 8021dd0:	e006      	b.n	8021de0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8021dd2:	683a      	ldr	r2, [r7, #0]
 8021dd4:	687b      	ldr	r3, [r7, #4]
 8021dd6:	0011      	movs	r1, r2
 8021dd8:	0018      	movs	r0, r3
 8021dda:	f000 f83e 	bl	8021e5a <USBD_CtlError>
      break;
 8021dde:	e000      	b.n	8021de2 <USBD_ClrFeature+0x44>
      break;
 8021de0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8021de2:	46c0      	nop			@ (mov r8, r8)
 8021de4:	46bd      	mov	sp, r7
 8021de6:	b002      	add	sp, #8
 8021de8:	bd80      	pop	{r7, pc}

08021dea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021dea:	b580      	push	{r7, lr}
 8021dec:	b082      	sub	sp, #8
 8021dee:	af00      	add	r7, sp, #0
 8021df0:	6078      	str	r0, [r7, #4]
 8021df2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8021df4:	683b      	ldr	r3, [r7, #0]
 8021df6:	781a      	ldrb	r2, [r3, #0]
 8021df8:	687b      	ldr	r3, [r7, #4]
 8021dfa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8021dfc:	683b      	ldr	r3, [r7, #0]
 8021dfe:	785a      	ldrb	r2, [r3, #1]
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8021e04:	683b      	ldr	r3, [r7, #0]
 8021e06:	3302      	adds	r3, #2
 8021e08:	781b      	ldrb	r3, [r3, #0]
 8021e0a:	001a      	movs	r2, r3
 8021e0c:	683b      	ldr	r3, [r7, #0]
 8021e0e:	3303      	adds	r3, #3
 8021e10:	781b      	ldrb	r3, [r3, #0]
 8021e12:	021b      	lsls	r3, r3, #8
 8021e14:	b29b      	uxth	r3, r3
 8021e16:	18d3      	adds	r3, r2, r3
 8021e18:	b29a      	uxth	r2, r3
 8021e1a:	687b      	ldr	r3, [r7, #4]
 8021e1c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8021e1e:	683b      	ldr	r3, [r7, #0]
 8021e20:	3304      	adds	r3, #4
 8021e22:	781b      	ldrb	r3, [r3, #0]
 8021e24:	001a      	movs	r2, r3
 8021e26:	683b      	ldr	r3, [r7, #0]
 8021e28:	3305      	adds	r3, #5
 8021e2a:	781b      	ldrb	r3, [r3, #0]
 8021e2c:	021b      	lsls	r3, r3, #8
 8021e2e:	b29b      	uxth	r3, r3
 8021e30:	18d3      	adds	r3, r2, r3
 8021e32:	b29a      	uxth	r2, r3
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8021e38:	683b      	ldr	r3, [r7, #0]
 8021e3a:	3306      	adds	r3, #6
 8021e3c:	781b      	ldrb	r3, [r3, #0]
 8021e3e:	001a      	movs	r2, r3
 8021e40:	683b      	ldr	r3, [r7, #0]
 8021e42:	3307      	adds	r3, #7
 8021e44:	781b      	ldrb	r3, [r3, #0]
 8021e46:	021b      	lsls	r3, r3, #8
 8021e48:	b29b      	uxth	r3, r3
 8021e4a:	18d3      	adds	r3, r2, r3
 8021e4c:	b29a      	uxth	r2, r3
 8021e4e:	687b      	ldr	r3, [r7, #4]
 8021e50:	80da      	strh	r2, [r3, #6]

}
 8021e52:	46c0      	nop			@ (mov r8, r8)
 8021e54:	46bd      	mov	sp, r7
 8021e56:	b002      	add	sp, #8
 8021e58:	bd80      	pop	{r7, pc}

08021e5a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8021e5a:	b580      	push	{r7, lr}
 8021e5c:	b082      	sub	sp, #8
 8021e5e:	af00      	add	r7, sp, #0
 8021e60:	6078      	str	r0, [r7, #4]
 8021e62:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	2180      	movs	r1, #128	@ 0x80
 8021e68:	0018      	movs	r0, r3
 8021e6a:	f000 fd1e 	bl	80228aa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	2100      	movs	r1, #0
 8021e72:	0018      	movs	r0, r3
 8021e74:	f000 fd19 	bl	80228aa <USBD_LL_StallEP>
}
 8021e78:	46c0      	nop			@ (mov r8, r8)
 8021e7a:	46bd      	mov	sp, r7
 8021e7c:	b002      	add	sp, #8
 8021e7e:	bd80      	pop	{r7, pc}

08021e80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021e80:	b590      	push	{r4, r7, lr}
 8021e82:	b087      	sub	sp, #28
 8021e84:	af00      	add	r7, sp, #0
 8021e86:	60f8      	str	r0, [r7, #12]
 8021e88:	60b9      	str	r1, [r7, #8]
 8021e8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021e8c:	2417      	movs	r4, #23
 8021e8e:	193b      	adds	r3, r7, r4
 8021e90:	2200      	movs	r2, #0
 8021e92:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8021e94:	68fb      	ldr	r3, [r7, #12]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d03c      	beq.n	8021f14 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8021e9a:	68fb      	ldr	r3, [r7, #12]
 8021e9c:	0018      	movs	r0, r3
 8021e9e:	f000 f83d 	bl	8021f1c <USBD_GetLen>
 8021ea2:	0003      	movs	r3, r0
 8021ea4:	3301      	adds	r3, #1
 8021ea6:	b29b      	uxth	r3, r3
 8021ea8:	18db      	adds	r3, r3, r3
 8021eaa:	b29a      	uxth	r2, r3
 8021eac:	687b      	ldr	r3, [r7, #4]
 8021eae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8021eb0:	193b      	adds	r3, r7, r4
 8021eb2:	781b      	ldrb	r3, [r3, #0]
 8021eb4:	193a      	adds	r2, r7, r4
 8021eb6:	1c59      	adds	r1, r3, #1
 8021eb8:	7011      	strb	r1, [r2, #0]
 8021eba:	001a      	movs	r2, r3
 8021ebc:	68bb      	ldr	r3, [r7, #8]
 8021ebe:	189b      	adds	r3, r3, r2
 8021ec0:	687a      	ldr	r2, [r7, #4]
 8021ec2:	7812      	ldrb	r2, [r2, #0]
 8021ec4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8021ec6:	193b      	adds	r3, r7, r4
 8021ec8:	781b      	ldrb	r3, [r3, #0]
 8021eca:	193a      	adds	r2, r7, r4
 8021ecc:	1c59      	adds	r1, r3, #1
 8021ece:	7011      	strb	r1, [r2, #0]
 8021ed0:	001a      	movs	r2, r3
 8021ed2:	68bb      	ldr	r3, [r7, #8]
 8021ed4:	189b      	adds	r3, r3, r2
 8021ed6:	2203      	movs	r2, #3
 8021ed8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8021eda:	e017      	b.n	8021f0c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8021edc:	68fb      	ldr	r3, [r7, #12]
 8021ede:	1c5a      	adds	r2, r3, #1
 8021ee0:	60fa      	str	r2, [r7, #12]
 8021ee2:	2417      	movs	r4, #23
 8021ee4:	193a      	adds	r2, r7, r4
 8021ee6:	7812      	ldrb	r2, [r2, #0]
 8021ee8:	1939      	adds	r1, r7, r4
 8021eea:	1c50      	adds	r0, r2, #1
 8021eec:	7008      	strb	r0, [r1, #0]
 8021eee:	0011      	movs	r1, r2
 8021ef0:	68ba      	ldr	r2, [r7, #8]
 8021ef2:	1852      	adds	r2, r2, r1
 8021ef4:	781b      	ldrb	r3, [r3, #0]
 8021ef6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8021ef8:	193b      	adds	r3, r7, r4
 8021efa:	781b      	ldrb	r3, [r3, #0]
 8021efc:	193a      	adds	r2, r7, r4
 8021efe:	1c59      	adds	r1, r3, #1
 8021f00:	7011      	strb	r1, [r2, #0]
 8021f02:	001a      	movs	r2, r3
 8021f04:	68bb      	ldr	r3, [r7, #8]
 8021f06:	189b      	adds	r3, r3, r2
 8021f08:	2200      	movs	r2, #0
 8021f0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8021f0c:	68fb      	ldr	r3, [r7, #12]
 8021f0e:	781b      	ldrb	r3, [r3, #0]
 8021f10:	2b00      	cmp	r3, #0
 8021f12:	d1e3      	bne.n	8021edc <USBD_GetString+0x5c>
    }
  }
}
 8021f14:	46c0      	nop			@ (mov r8, r8)
 8021f16:	46bd      	mov	sp, r7
 8021f18:	b007      	add	sp, #28
 8021f1a:	bd90      	pop	{r4, r7, pc}

08021f1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b084      	sub	sp, #16
 8021f20:	af00      	add	r7, sp, #0
 8021f22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021f24:	230f      	movs	r3, #15
 8021f26:	18fb      	adds	r3, r7, r3
 8021f28:	2200      	movs	r2, #0
 8021f2a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8021f2c:	e008      	b.n	8021f40 <USBD_GetLen+0x24>
  {
    len++;
 8021f2e:	210f      	movs	r1, #15
 8021f30:	187b      	adds	r3, r7, r1
 8021f32:	781a      	ldrb	r2, [r3, #0]
 8021f34:	187b      	adds	r3, r7, r1
 8021f36:	3201      	adds	r2, #1
 8021f38:	701a      	strb	r2, [r3, #0]
    buf++;
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	3301      	adds	r3, #1
 8021f3e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	781b      	ldrb	r3, [r3, #0]
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d1f2      	bne.n	8021f2e <USBD_GetLen+0x12>
  }

  return len;
 8021f48:	230f      	movs	r3, #15
 8021f4a:	18fb      	adds	r3, r7, r3
 8021f4c:	781b      	ldrb	r3, [r3, #0]
}
 8021f4e:	0018      	movs	r0, r3
 8021f50:	46bd      	mov	sp, r7
 8021f52:	b004      	add	sp, #16
 8021f54:	bd80      	pop	{r7, pc}

08021f56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8021f56:	b580      	push	{r7, lr}
 8021f58:	b084      	sub	sp, #16
 8021f5a:	af00      	add	r7, sp, #0
 8021f5c:	60f8      	str	r0, [r7, #12]
 8021f5e:	60b9      	str	r1, [r7, #8]
 8021f60:	1dbb      	adds	r3, r7, #6
 8021f62:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021f64:	68fa      	ldr	r2, [r7, #12]
 8021f66:	23a5      	movs	r3, #165	@ 0xa5
 8021f68:	009b      	lsls	r3, r3, #2
 8021f6a:	2102      	movs	r1, #2
 8021f6c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8021f6e:	1dbb      	adds	r3, r7, #6
 8021f70:	881a      	ldrh	r2, [r3, #0]
 8021f72:	68fb      	ldr	r3, [r7, #12]
 8021f74:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8021f76:	1dbb      	adds	r3, r7, #6
 8021f78:	881a      	ldrh	r2, [r3, #0]
 8021f7a:	68fb      	ldr	r3, [r7, #12]
 8021f7c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021f7e:	1dbb      	adds	r3, r7, #6
 8021f80:	881b      	ldrh	r3, [r3, #0]
 8021f82:	68ba      	ldr	r2, [r7, #8]
 8021f84:	68f8      	ldr	r0, [r7, #12]
 8021f86:	2100      	movs	r1, #0
 8021f88:	f000 fd41 	bl	8022a0e <USBD_LL_Transmit>

  return USBD_OK;
 8021f8c:	2300      	movs	r3, #0
}
 8021f8e:	0018      	movs	r0, r3
 8021f90:	46bd      	mov	sp, r7
 8021f92:	b004      	add	sp, #16
 8021f94:	bd80      	pop	{r7, pc}

08021f96 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8021f96:	b580      	push	{r7, lr}
 8021f98:	b084      	sub	sp, #16
 8021f9a:	af00      	add	r7, sp, #0
 8021f9c:	60f8      	str	r0, [r7, #12]
 8021f9e:	60b9      	str	r1, [r7, #8]
 8021fa0:	1dbb      	adds	r3, r7, #6
 8021fa2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021fa4:	1dbb      	adds	r3, r7, #6
 8021fa6:	881b      	ldrh	r3, [r3, #0]
 8021fa8:	68ba      	ldr	r2, [r7, #8]
 8021faa:	68f8      	ldr	r0, [r7, #12]
 8021fac:	2100      	movs	r1, #0
 8021fae:	f000 fd2e 	bl	8022a0e <USBD_LL_Transmit>

  return USBD_OK;
 8021fb2:	2300      	movs	r3, #0
}
 8021fb4:	0018      	movs	r0, r3
 8021fb6:	46bd      	mov	sp, r7
 8021fb8:	b004      	add	sp, #16
 8021fba:	bd80      	pop	{r7, pc}

08021fbc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8021fbc:	b580      	push	{r7, lr}
 8021fbe:	b084      	sub	sp, #16
 8021fc0:	af00      	add	r7, sp, #0
 8021fc2:	60f8      	str	r0, [r7, #12]
 8021fc4:	60b9      	str	r1, [r7, #8]
 8021fc6:	1dbb      	adds	r3, r7, #6
 8021fc8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021fca:	68fa      	ldr	r2, [r7, #12]
 8021fcc:	23a5      	movs	r3, #165	@ 0xa5
 8021fce:	009b      	lsls	r3, r3, #2
 8021fd0:	2103      	movs	r1, #3
 8021fd2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8021fd4:	1dbb      	adds	r3, r7, #6
 8021fd6:	8819      	ldrh	r1, [r3, #0]
 8021fd8:	68fa      	ldr	r2, [r7, #12]
 8021fda:	23ae      	movs	r3, #174	@ 0xae
 8021fdc:	005b      	lsls	r3, r3, #1
 8021fde:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8021fe0:	1dbb      	adds	r3, r7, #6
 8021fe2:	8819      	ldrh	r1, [r3, #0]
 8021fe4:	68fa      	ldr	r2, [r7, #12]
 8021fe6:	23b0      	movs	r3, #176	@ 0xb0
 8021fe8:	005b      	lsls	r3, r3, #1
 8021fea:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021fec:	1dbb      	adds	r3, r7, #6
 8021fee:	881b      	ldrh	r3, [r3, #0]
 8021ff0:	68ba      	ldr	r2, [r7, #8]
 8021ff2:	68f8      	ldr	r0, [r7, #12]
 8021ff4:	2100      	movs	r1, #0
 8021ff6:	f000 fd41 	bl	8022a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021ffa:	2300      	movs	r3, #0
}
 8021ffc:	0018      	movs	r0, r3
 8021ffe:	46bd      	mov	sp, r7
 8022000:	b004      	add	sp, #16
 8022002:	bd80      	pop	{r7, pc}

08022004 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022004:	b580      	push	{r7, lr}
 8022006:	b084      	sub	sp, #16
 8022008:	af00      	add	r7, sp, #0
 802200a:	60f8      	str	r0, [r7, #12]
 802200c:	60b9      	str	r1, [r7, #8]
 802200e:	1dbb      	adds	r3, r7, #6
 8022010:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022012:	1dbb      	adds	r3, r7, #6
 8022014:	881b      	ldrh	r3, [r3, #0]
 8022016:	68ba      	ldr	r2, [r7, #8]
 8022018:	68f8      	ldr	r0, [r7, #12]
 802201a:	2100      	movs	r1, #0
 802201c:	f000 fd2e 	bl	8022a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022020:	2300      	movs	r3, #0
}
 8022022:	0018      	movs	r0, r3
 8022024:	46bd      	mov	sp, r7
 8022026:	b004      	add	sp, #16
 8022028:	bd80      	pop	{r7, pc}

0802202a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 802202a:	b580      	push	{r7, lr}
 802202c:	b082      	sub	sp, #8
 802202e:	af00      	add	r7, sp, #0
 8022030:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8022032:	687a      	ldr	r2, [r7, #4]
 8022034:	23a5      	movs	r3, #165	@ 0xa5
 8022036:	009b      	lsls	r3, r3, #2
 8022038:	2104      	movs	r1, #4
 802203a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 802203c:	6878      	ldr	r0, [r7, #4]
 802203e:	2300      	movs	r3, #0
 8022040:	2200      	movs	r2, #0
 8022042:	2100      	movs	r1, #0
 8022044:	f000 fce3 	bl	8022a0e <USBD_LL_Transmit>

  return USBD_OK;
 8022048:	2300      	movs	r3, #0
}
 802204a:	0018      	movs	r0, r3
 802204c:	46bd      	mov	sp, r7
 802204e:	b002      	add	sp, #8
 8022050:	bd80      	pop	{r7, pc}

08022052 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8022052:	b580      	push	{r7, lr}
 8022054:	b082      	sub	sp, #8
 8022056:	af00      	add	r7, sp, #0
 8022058:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 802205a:	687a      	ldr	r2, [r7, #4]
 802205c:	23a5      	movs	r3, #165	@ 0xa5
 802205e:	009b      	lsls	r3, r3, #2
 8022060:	2105      	movs	r1, #5
 8022062:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022064:	6878      	ldr	r0, [r7, #4]
 8022066:	2300      	movs	r3, #0
 8022068:	2200      	movs	r2, #0
 802206a:	2100      	movs	r1, #0
 802206c:	f000 fd06 	bl	8022a7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022070:	2300      	movs	r3, #0
}
 8022072:	0018      	movs	r0, r3
 8022074:	46bd      	mov	sp, r7
 8022076:	b002      	add	sp, #8
 8022078:	bd80      	pop	{r7, pc}
	...

0802207c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802207c:	b580      	push	{r7, lr}
 802207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8022080:	4914      	ldr	r1, [pc, #80]	@ (80220d4 <MX_USB_DEVICE_Init+0x58>)
 8022082:	4b15      	ldr	r3, [pc, #84]	@ (80220d8 <MX_USB_DEVICE_Init+0x5c>)
 8022084:	2200      	movs	r2, #0
 8022086:	0018      	movs	r0, r3
 8022088:	f7fe fdec 	bl	8020c64 <USBD_Init>
 802208c:	1e03      	subs	r3, r0, #0
 802208e:	d001      	beq.n	8022094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8022090:	f7ea fbde 	bl	800c850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8022094:	4a11      	ldr	r2, [pc, #68]	@ (80220dc <MX_USB_DEVICE_Init+0x60>)
 8022096:	4b10      	ldr	r3, [pc, #64]	@ (80220d8 <MX_USB_DEVICE_Init+0x5c>)
 8022098:	0011      	movs	r1, r2
 802209a:	0018      	movs	r0, r3
 802209c:	f7fe fe13 	bl	8020cc6 <USBD_RegisterClass>
 80220a0:	1e03      	subs	r3, r0, #0
 80220a2:	d001      	beq.n	80220a8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80220a4:	f7ea fbd4 	bl	800c850 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80220a8:	4a0d      	ldr	r2, [pc, #52]	@ (80220e0 <MX_USB_DEVICE_Init+0x64>)
 80220aa:	4b0b      	ldr	r3, [pc, #44]	@ (80220d8 <MX_USB_DEVICE_Init+0x5c>)
 80220ac:	0011      	movs	r1, r2
 80220ae:	0018      	movs	r0, r3
 80220b0:	f7fe fd28 	bl	8020b04 <USBD_CDC_RegisterInterface>
 80220b4:	1e03      	subs	r3, r0, #0
 80220b6:	d001      	beq.n	80220bc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80220b8:	f7ea fbca 	bl	800c850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80220bc:	4b06      	ldr	r3, [pc, #24]	@ (80220d8 <MX_USB_DEVICE_Init+0x5c>)
 80220be:	0018      	movs	r0, r3
 80220c0:	f7fe fe21 	bl	8020d06 <USBD_Start>
 80220c4:	1e03      	subs	r3, r0, #0
 80220c6:	d001      	beq.n	80220cc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80220c8:	f7ea fbc2 	bl	800c850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80220cc:	46c0      	nop			@ (mov r8, r8)
 80220ce:	46bd      	mov	sp, r7
 80220d0:	bd80      	pop	{r7, pc}
 80220d2:	46c0      	nop			@ (mov r8, r8)
 80220d4:	20000218 	.word	0x20000218
 80220d8:	20002248 	.word	0x20002248
 80220dc:	20000104 	.word	0x20000104
 80220e0:	20000208 	.word	0x20000208

080220e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80220e4:	b580      	push	{r7, lr}
 80220e6:	af00      	add	r7, sp, #0
  vcp_rx_fifo.wr = 0;
  vcp_rx_fifo.rd = 0;
  vcp_rx_fifo.lb = 0;
#endif
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80220e8:	4907      	ldr	r1, [pc, #28]	@ (8022108 <CDC_Init_FS+0x24>)
 80220ea:	4b08      	ldr	r3, [pc, #32]	@ (802210c <CDC_Init_FS+0x28>)
 80220ec:	2200      	movs	r2, #0
 80220ee:	0018      	movs	r0, r3
 80220f0:	f7fe fd23 	bl	8020b3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80220f4:	4a06      	ldr	r2, [pc, #24]	@ (8022110 <CDC_Init_FS+0x2c>)
 80220f6:	4b05      	ldr	r3, [pc, #20]	@ (802210c <CDC_Init_FS+0x28>)
 80220f8:	0011      	movs	r1, r2
 80220fa:	0018      	movs	r0, r3
 80220fc:	f7fe fd39 	bl	8020b72 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8022100:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8022102:	0018      	movs	r0, r3
 8022104:	46bd      	mov	sp, r7
 8022106:	bd80      	pop	{r7, pc}
 8022108:	200029cc 	.word	0x200029cc
 802210c:	20002248 	.word	0x20002248
 8022110:	200025cc 	.word	0x200025cc

08022114 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8022114:	b580      	push	{r7, lr}
 8022116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8022118:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802211a:	0018      	movs	r0, r3
 802211c:	46bd      	mov	sp, r7
 802211e:	bd80      	pop	{r7, pc}

08022120 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8022120:	b580      	push	{r7, lr}
 8022122:	b082      	sub	sp, #8
 8022124:	af00      	add	r7, sp, #0
 8022126:	6039      	str	r1, [r7, #0]
 8022128:	0011      	movs	r1, r2
 802212a:	1dfb      	adds	r3, r7, #7
 802212c:	1c02      	adds	r2, r0, #0
 802212e:	701a      	strb	r2, [r3, #0]
 8022130:	1d3b      	adds	r3, r7, #4
 8022132:	1c0a      	adds	r2, r1, #0
 8022134:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8022136:	1dfb      	adds	r3, r7, #7
 8022138:	781b      	ldrb	r3, [r3, #0]
 802213a:	2b23      	cmp	r3, #35	@ 0x23
 802213c:	d804      	bhi.n	8022148 <CDC_Control_FS+0x28>
 802213e:	009a      	lsls	r2, r3, #2
 8022140:	4b04      	ldr	r3, [pc, #16]	@ (8022154 <CDC_Control_FS+0x34>)
 8022142:	18d3      	adds	r3, r2, r3
 8022144:	681b      	ldr	r3, [r3, #0]
 8022146:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8022148:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 802214a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 802214c:	0018      	movs	r0, r3
 802214e:	46bd      	mov	sp, r7
 8022150:	b002      	add	sp, #8
 8022152:	bd80      	pop	{r7, pc}
 8022154:	0802dc08 	.word	0x0802dc08

08022158 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b082      	sub	sp, #8
 802215c:	af00      	add	r7, sp, #0
 802215e:	6078      	str	r0, [r7, #4]
 8022160:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8022162:	4b12      	ldr	r3, [pc, #72]	@ (80221ac <CDC_Receive_FS+0x54>)
 8022164:	781b      	ldrb	r3, [r3, #0]
 8022166:	2b00      	cmp	r3, #0
 8022168:	d013      	beq.n	8022192 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 802216a:	683b      	ldr	r3, [r7, #0]
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	b29a      	uxth	r2, r3
 8022170:	2301      	movs	r3, #1
 8022172:	425b      	negs	r3, r3
 8022174:	6879      	ldr	r1, [r7, #4]
 8022176:	480e      	ldr	r0, [pc, #56]	@ (80221b0 <CDC_Receive_FS+0x58>)
 8022178:	f7fa fa44 	bl	801c604 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802217c:	687a      	ldr	r2, [r7, #4]
 802217e:	4b0d      	ldr	r3, [pc, #52]	@ (80221b4 <CDC_Receive_FS+0x5c>)
 8022180:	0011      	movs	r1, r2
 8022182:	0018      	movs	r0, r3
 8022184:	f7fe fcf5 	bl	8020b72 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022188:	4b0a      	ldr	r3, [pc, #40]	@ (80221b4 <CDC_Receive_FS+0x5c>)
 802218a:	0018      	movs	r0, r3
 802218c:	f7fe fd3c 	bl	8020c08 <USBD_CDC_ReceivePacket>
 8022190:	e006      	b.n	80221a0 <CDC_Receive_FS+0x48>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  }
#endif
  else
   {
     UsbRxDataSize += *Len;
 8022192:	683b      	ldr	r3, [r7, #0]
 8022194:	681a      	ldr	r2, [r3, #0]
 8022196:	4b08      	ldr	r3, [pc, #32]	@ (80221b8 <CDC_Receive_FS+0x60>)
 8022198:	681b      	ldr	r3, [r3, #0]
 802219a:	18d2      	adds	r2, r2, r3
 802219c:	4b06      	ldr	r3, [pc, #24]	@ (80221b8 <CDC_Receive_FS+0x60>)
 802219e:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80221a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80221a2:	0018      	movs	r0, r3
 80221a4:	46bd      	mov	sp, r7
 80221a6:	b002      	add	sp, #8
 80221a8:	bd80      	pop	{r7, pc}
 80221aa:	46c0      	nop			@ (mov r8, r8)
 80221ac:	2000250c 	.word	0x2000250c
 80221b0:	20002510 	.word	0x20002510
 80221b4:	20002248 	.word	0x20002248
 80221b8:	200025c8 	.word	0x200025c8

080221bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80221bc:	b5b0      	push	{r4, r5, r7, lr}
 80221be:	b084      	sub	sp, #16
 80221c0:	af00      	add	r7, sp, #0
 80221c2:	6078      	str	r0, [r7, #4]
 80221c4:	000a      	movs	r2, r1
 80221c6:	1cbb      	adds	r3, r7, #2
 80221c8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80221ca:	230f      	movs	r3, #15
 80221cc:	18fb      	adds	r3, r7, r3
 80221ce:	2200      	movs	r2, #0
 80221d0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80221d2:	4a11      	ldr	r2, [pc, #68]	@ (8022218 <CDC_Transmit_FS+0x5c>)
 80221d4:	23ae      	movs	r3, #174	@ 0xae
 80221d6:	009b      	lsls	r3, r3, #2
 80221d8:	58d3      	ldr	r3, [r2, r3]
 80221da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80221dc:	68ba      	ldr	r2, [r7, #8]
 80221de:	2385      	movs	r3, #133	@ 0x85
 80221e0:	009b      	lsls	r3, r3, #2
 80221e2:	58d3      	ldr	r3, [r2, r3]
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d001      	beq.n	80221ec <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80221e8:	2301      	movs	r3, #1
 80221ea:	e010      	b.n	802220e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80221ec:	1cbb      	adds	r3, r7, #2
 80221ee:	881a      	ldrh	r2, [r3, #0]
 80221f0:	6879      	ldr	r1, [r7, #4]
 80221f2:	4b09      	ldr	r3, [pc, #36]	@ (8022218 <CDC_Transmit_FS+0x5c>)
 80221f4:	0018      	movs	r0, r3
 80221f6:	f7fe fca0 	bl	8020b3a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80221fa:	250f      	movs	r5, #15
 80221fc:	197c      	adds	r4, r7, r5
 80221fe:	4b06      	ldr	r3, [pc, #24]	@ (8022218 <CDC_Transmit_FS+0x5c>)
 8022200:	0018      	movs	r0, r3
 8022202:	f7fe fcca 	bl	8020b9a <USBD_CDC_TransmitPacket>
 8022206:	0003      	movs	r3, r0
 8022208:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802220a:	197b      	adds	r3, r7, r5
 802220c:	781b      	ldrb	r3, [r3, #0]
}
 802220e:	0018      	movs	r0, r3
 8022210:	46bd      	mov	sp, r7
 8022212:	b004      	add	sp, #16
 8022214:	bdb0      	pop	{r4, r5, r7, pc}
 8022216:	46c0      	nop			@ (mov r8, r8)
 8022218:	20002248 	.word	0x20002248

0802221c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 802221c:	b580      	push	{r7, lr}
 802221e:	af00      	add	r7, sp, #0
  ESPProg = true;
 8022220:	4b02      	ldr	r3, [pc, #8]	@ (802222c <EnableESPProg+0x10>)
 8022222:	2201      	movs	r2, #1
 8022224:	701a      	strb	r2, [r3, #0]
}
 8022226:	46c0      	nop			@ (mov r8, r8)
 8022228:	46bd      	mov	sp, r7
 802222a:	bd80      	pop	{r7, pc}
 802222c:	2000250c 	.word	0x2000250c

08022230 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8022230:	b580      	push	{r7, lr}
 8022232:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8022234:	4b01      	ldr	r3, [pc, #4]	@ (802223c <GetUsbRxPointer+0xc>)
}
 8022236:	0018      	movs	r0, r3
 8022238:	46bd      	mov	sp, r7
 802223a:	bd80      	pop	{r7, pc}
 802223c:	200025cc 	.word	0x200025cc

08022240 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8022240:	b580      	push	{r7, lr}
 8022242:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8022244:	4b07      	ldr	r3, [pc, #28]	@ (8022264 <ResetUsbRxDataSize+0x24>)
 8022246:	2200      	movs	r2, #0
 8022248:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 802224a:	4a07      	ldr	r2, [pc, #28]	@ (8022268 <ResetUsbRxDataSize+0x28>)
 802224c:	4b07      	ldr	r3, [pc, #28]	@ (802226c <ResetUsbRxDataSize+0x2c>)
 802224e:	0011      	movs	r1, r2
 8022250:	0018      	movs	r0, r3
 8022252:	f7fe fc8e 	bl	8020b72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8022256:	4b05      	ldr	r3, [pc, #20]	@ (802226c <ResetUsbRxDataSize+0x2c>)
 8022258:	0018      	movs	r0, r3
 802225a:	f7fe fcd5 	bl	8020c08 <USBD_CDC_ReceivePacket>
}
 802225e:	46c0      	nop			@ (mov r8, r8)
 8022260:	46bd      	mov	sp, r7
 8022262:	bd80      	pop	{r7, pc}
 8022264:	200025c8 	.word	0x200025c8
 8022268:	200025cc 	.word	0x200025cc
 802226c:	20002248 	.word	0x20002248

08022270 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8022270:	b580      	push	{r7, lr}
 8022272:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8022274:	4b02      	ldr	r3, [pc, #8]	@ (8022280 <GetUsbRxDataSize+0x10>)
 8022276:	681b      	ldr	r3, [r3, #0]
}
 8022278:	0018      	movs	r0, r3
 802227a:	46bd      	mov	sp, r7
 802227c:	bd80      	pop	{r7, pc}
 802227e:	46c0      	nop			@ (mov r8, r8)
 8022280:	200025c8 	.word	0x200025c8

08022284 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8022284:	b580      	push	{r7, lr}
 8022286:	b082      	sub	sp, #8
 8022288:	af00      	add	r7, sp, #0
 802228a:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 802228c:	687a      	ldr	r2, [r7, #4]
 802228e:	4b07      	ldr	r3, [pc, #28]	@ (80222ac <GetUsbRxNextChunk+0x28>)
 8022290:	18d2      	adds	r2, r2, r3
 8022292:	4b07      	ldr	r3, [pc, #28]	@ (80222b0 <GetUsbRxNextChunk+0x2c>)
 8022294:	0011      	movs	r1, r2
 8022296:	0018      	movs	r0, r3
 8022298:	f7fe fc6b 	bl	8020b72 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802229c:	4b04      	ldr	r3, [pc, #16]	@ (80222b0 <GetUsbRxNextChunk+0x2c>)
 802229e:	0018      	movs	r0, r3
 80222a0:	f7fe fcb2 	bl	8020c08 <USBD_CDC_ReceivePacket>
}
 80222a4:	46c0      	nop			@ (mov r8, r8)
 80222a6:	46bd      	mov	sp, r7
 80222a8:	b002      	add	sp, #8
 80222aa:	bd80      	pop	{r7, pc}
 80222ac:	200025cc 	.word	0x200025cc
 80222b0:	20002248 	.word	0x20002248

080222b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222b4:	b580      	push	{r7, lr}
 80222b6:	b082      	sub	sp, #8
 80222b8:	af00      	add	r7, sp, #0
 80222ba:	0002      	movs	r2, r0
 80222bc:	6039      	str	r1, [r7, #0]
 80222be:	1dfb      	adds	r3, r7, #7
 80222c0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80222c2:	683b      	ldr	r3, [r7, #0]
 80222c4:	2212      	movs	r2, #18
 80222c6:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80222c8:	4b02      	ldr	r3, [pc, #8]	@ (80222d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80222ca:	0018      	movs	r0, r3
 80222cc:	46bd      	mov	sp, r7
 80222ce:	b002      	add	sp, #8
 80222d0:	bd80      	pop	{r7, pc}
 80222d2:	46c0      	nop			@ (mov r8, r8)
 80222d4:	20000234 	.word	0x20000234

080222d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222d8:	b580      	push	{r7, lr}
 80222da:	b082      	sub	sp, #8
 80222dc:	af00      	add	r7, sp, #0
 80222de:	0002      	movs	r2, r0
 80222e0:	6039      	str	r1, [r7, #0]
 80222e2:	1dfb      	adds	r3, r7, #7
 80222e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80222e6:	683b      	ldr	r3, [r7, #0]
 80222e8:	2204      	movs	r2, #4
 80222ea:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80222ec:	4b02      	ldr	r3, [pc, #8]	@ (80222f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80222ee:	0018      	movs	r0, r3
 80222f0:	46bd      	mov	sp, r7
 80222f2:	b002      	add	sp, #8
 80222f4:	bd80      	pop	{r7, pc}
 80222f6:	46c0      	nop			@ (mov r8, r8)
 80222f8:	20000248 	.word	0x20000248

080222fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b082      	sub	sp, #8
 8022300:	af00      	add	r7, sp, #0
 8022302:	0002      	movs	r2, r0
 8022304:	6039      	str	r1, [r7, #0]
 8022306:	1dfb      	adds	r3, r7, #7
 8022308:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802230a:	1dfb      	adds	r3, r7, #7
 802230c:	781b      	ldrb	r3, [r3, #0]
 802230e:	2b00      	cmp	r3, #0
 8022310:	d106      	bne.n	8022320 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022312:	683a      	ldr	r2, [r7, #0]
 8022314:	4908      	ldr	r1, [pc, #32]	@ (8022338 <USBD_FS_ProductStrDescriptor+0x3c>)
 8022316:	4b09      	ldr	r3, [pc, #36]	@ (802233c <USBD_FS_ProductStrDescriptor+0x40>)
 8022318:	0018      	movs	r0, r3
 802231a:	f7ff fdb1 	bl	8021e80 <USBD_GetString>
 802231e:	e005      	b.n	802232c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022320:	683a      	ldr	r2, [r7, #0]
 8022322:	4905      	ldr	r1, [pc, #20]	@ (8022338 <USBD_FS_ProductStrDescriptor+0x3c>)
 8022324:	4b05      	ldr	r3, [pc, #20]	@ (802233c <USBD_FS_ProductStrDescriptor+0x40>)
 8022326:	0018      	movs	r0, r3
 8022328:	f7ff fdaa 	bl	8021e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 802232c:	4b02      	ldr	r3, [pc, #8]	@ (8022338 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 802232e:	0018      	movs	r0, r3
 8022330:	46bd      	mov	sp, r7
 8022332:	b002      	add	sp, #8
 8022334:	bd80      	pop	{r7, pc}
 8022336:	46c0      	nop			@ (mov r8, r8)
 8022338:	20002dcc 	.word	0x20002dcc
 802233c:	0802d5cc 	.word	0x0802d5cc

08022340 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022340:	b580      	push	{r7, lr}
 8022342:	b082      	sub	sp, #8
 8022344:	af00      	add	r7, sp, #0
 8022346:	0002      	movs	r2, r0
 8022348:	6039      	str	r1, [r7, #0]
 802234a:	1dfb      	adds	r3, r7, #7
 802234c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802234e:	683a      	ldr	r2, [r7, #0]
 8022350:	4904      	ldr	r1, [pc, #16]	@ (8022364 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022352:	4b05      	ldr	r3, [pc, #20]	@ (8022368 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8022354:	0018      	movs	r0, r3
 8022356:	f7ff fd93 	bl	8021e80 <USBD_GetString>
  return USBD_StrDesc;
 802235a:	4b02      	ldr	r3, [pc, #8]	@ (8022364 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 802235c:	0018      	movs	r0, r3
 802235e:	46bd      	mov	sp, r7
 8022360:	b002      	add	sp, #8
 8022362:	bd80      	pop	{r7, pc}
 8022364:	20002dcc 	.word	0x20002dcc
 8022368:	0802d5e4 	.word	0x0802d5e4

0802236c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802236c:	b580      	push	{r7, lr}
 802236e:	b082      	sub	sp, #8
 8022370:	af00      	add	r7, sp, #0
 8022372:	0002      	movs	r2, r0
 8022374:	6039      	str	r1, [r7, #0]
 8022376:	1dfb      	adds	r3, r7, #7
 8022378:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802237a:	683b      	ldr	r3, [r7, #0]
 802237c:	221a      	movs	r2, #26
 802237e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8022380:	f000 f84c 	bl	802241c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8022384:	4b02      	ldr	r3, [pc, #8]	@ (8022390 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8022386:	0018      	movs	r0, r3
 8022388:	46bd      	mov	sp, r7
 802238a:	b002      	add	sp, #8
 802238c:	bd80      	pop	{r7, pc}
 802238e:	46c0      	nop			@ (mov r8, r8)
 8022390:	2000024c 	.word	0x2000024c

08022394 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	b082      	sub	sp, #8
 8022398:	af00      	add	r7, sp, #0
 802239a:	0002      	movs	r2, r0
 802239c:	6039      	str	r1, [r7, #0]
 802239e:	1dfb      	adds	r3, r7, #7
 80223a0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80223a2:	1dfb      	adds	r3, r7, #7
 80223a4:	781b      	ldrb	r3, [r3, #0]
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d106      	bne.n	80223b8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80223aa:	683a      	ldr	r2, [r7, #0]
 80223ac:	4908      	ldr	r1, [pc, #32]	@ (80223d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80223ae:	4b09      	ldr	r3, [pc, #36]	@ (80223d4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80223b0:	0018      	movs	r0, r3
 80223b2:	f7ff fd65 	bl	8021e80 <USBD_GetString>
 80223b6:	e005      	b.n	80223c4 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80223b8:	683a      	ldr	r2, [r7, #0]
 80223ba:	4905      	ldr	r1, [pc, #20]	@ (80223d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80223bc:	4b05      	ldr	r3, [pc, #20]	@ (80223d4 <USBD_FS_ConfigStrDescriptor+0x40>)
 80223be:	0018      	movs	r0, r3
 80223c0:	f7ff fd5e 	bl	8021e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 80223c4:	4b02      	ldr	r3, [pc, #8]	@ (80223d0 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80223c6:	0018      	movs	r0, r3
 80223c8:	46bd      	mov	sp, r7
 80223ca:	b002      	add	sp, #8
 80223cc:	bd80      	pop	{r7, pc}
 80223ce:	46c0      	nop			@ (mov r8, r8)
 80223d0:	20002dcc 	.word	0x20002dcc
 80223d4:	0802d5f8 	.word	0x0802d5f8

080223d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80223d8:	b580      	push	{r7, lr}
 80223da:	b082      	sub	sp, #8
 80223dc:	af00      	add	r7, sp, #0
 80223de:	0002      	movs	r2, r0
 80223e0:	6039      	str	r1, [r7, #0]
 80223e2:	1dfb      	adds	r3, r7, #7
 80223e4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80223e6:	1dfb      	adds	r3, r7, #7
 80223e8:	781b      	ldrb	r3, [r3, #0]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	d106      	bne.n	80223fc <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80223ee:	683a      	ldr	r2, [r7, #0]
 80223f0:	4908      	ldr	r1, [pc, #32]	@ (8022414 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80223f2:	4b09      	ldr	r3, [pc, #36]	@ (8022418 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80223f4:	0018      	movs	r0, r3
 80223f6:	f7ff fd43 	bl	8021e80 <USBD_GetString>
 80223fa:	e005      	b.n	8022408 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80223fc:	683a      	ldr	r2, [r7, #0]
 80223fe:	4905      	ldr	r1, [pc, #20]	@ (8022414 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8022400:	4b05      	ldr	r3, [pc, #20]	@ (8022418 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8022402:	0018      	movs	r0, r3
 8022404:	f7ff fd3c 	bl	8021e80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8022408:	4b02      	ldr	r3, [pc, #8]	@ (8022414 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802240a:	0018      	movs	r0, r3
 802240c:	46bd      	mov	sp, r7
 802240e:	b002      	add	sp, #8
 8022410:	bd80      	pop	{r7, pc}
 8022412:	46c0      	nop			@ (mov r8, r8)
 8022414:	20002dcc 	.word	0x20002dcc
 8022418:	0802d604 	.word	0x0802d604

0802241c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 802241c:	b580      	push	{r7, lr}
 802241e:	b084      	sub	sp, #16
 8022420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8022422:	4b10      	ldr	r3, [pc, #64]	@ (8022464 <Get_SerialNum+0x48>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022428:	4b0f      	ldr	r3, [pc, #60]	@ (8022468 <Get_SerialNum+0x4c>)
 802242a:	681b      	ldr	r3, [r3, #0]
 802242c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802242e:	4b0f      	ldr	r3, [pc, #60]	@ (802246c <Get_SerialNum+0x50>)
 8022430:	681b      	ldr	r3, [r3, #0]
 8022432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022434:	68fa      	ldr	r2, [r7, #12]
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	18d3      	adds	r3, r2, r3
 802243a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 802243c:	68fb      	ldr	r3, [r7, #12]
 802243e:	2b00      	cmp	r3, #0
 8022440:	d00b      	beq.n	802245a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8022442:	490b      	ldr	r1, [pc, #44]	@ (8022470 <Get_SerialNum+0x54>)
 8022444:	68fb      	ldr	r3, [r7, #12]
 8022446:	2208      	movs	r2, #8
 8022448:	0018      	movs	r0, r3
 802244a:	f000 f815 	bl	8022478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 802244e:	4909      	ldr	r1, [pc, #36]	@ (8022474 <Get_SerialNum+0x58>)
 8022450:	68bb      	ldr	r3, [r7, #8]
 8022452:	2204      	movs	r2, #4
 8022454:	0018      	movs	r0, r3
 8022456:	f000 f80f 	bl	8022478 <IntToUnicode>
  }
}
 802245a:	46c0      	nop			@ (mov r8, r8)
 802245c:	46bd      	mov	sp, r7
 802245e:	b004      	add	sp, #16
 8022460:	bd80      	pop	{r7, pc}
 8022462:	46c0      	nop			@ (mov r8, r8)
 8022464:	1ff80050 	.word	0x1ff80050
 8022468:	1ff80054 	.word	0x1ff80054
 802246c:	1ff80058 	.word	0x1ff80058
 8022470:	2000024e 	.word	0x2000024e
 8022474:	2000025e 	.word	0x2000025e

08022478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022478:	b580      	push	{r7, lr}
 802247a:	b086      	sub	sp, #24
 802247c:	af00      	add	r7, sp, #0
 802247e:	60f8      	str	r0, [r7, #12]
 8022480:	60b9      	str	r1, [r7, #8]
 8022482:	1dfb      	adds	r3, r7, #7
 8022484:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8022486:	2117      	movs	r1, #23
 8022488:	187b      	adds	r3, r7, r1
 802248a:	2200      	movs	r2, #0
 802248c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 802248e:	187b      	adds	r3, r7, r1
 8022490:	2200      	movs	r2, #0
 8022492:	701a      	strb	r2, [r3, #0]
 8022494:	e02f      	b.n	80224f6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8022496:	68fb      	ldr	r3, [r7, #12]
 8022498:	0f1b      	lsrs	r3, r3, #28
 802249a:	2b09      	cmp	r3, #9
 802249c:	d80d      	bhi.n	80224ba <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 802249e:	68fb      	ldr	r3, [r7, #12]
 80224a0:	0f1b      	lsrs	r3, r3, #28
 80224a2:	b2da      	uxtb	r2, r3
 80224a4:	2317      	movs	r3, #23
 80224a6:	18fb      	adds	r3, r7, r3
 80224a8:	781b      	ldrb	r3, [r3, #0]
 80224aa:	005b      	lsls	r3, r3, #1
 80224ac:	0019      	movs	r1, r3
 80224ae:	68bb      	ldr	r3, [r7, #8]
 80224b0:	185b      	adds	r3, r3, r1
 80224b2:	3230      	adds	r2, #48	@ 0x30
 80224b4:	b2d2      	uxtb	r2, r2
 80224b6:	701a      	strb	r2, [r3, #0]
 80224b8:	e00c      	b.n	80224d4 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80224ba:	68fb      	ldr	r3, [r7, #12]
 80224bc:	0f1b      	lsrs	r3, r3, #28
 80224be:	b2da      	uxtb	r2, r3
 80224c0:	2317      	movs	r3, #23
 80224c2:	18fb      	adds	r3, r7, r3
 80224c4:	781b      	ldrb	r3, [r3, #0]
 80224c6:	005b      	lsls	r3, r3, #1
 80224c8:	0019      	movs	r1, r3
 80224ca:	68bb      	ldr	r3, [r7, #8]
 80224cc:	185b      	adds	r3, r3, r1
 80224ce:	3237      	adds	r2, #55	@ 0x37
 80224d0:	b2d2      	uxtb	r2, r2
 80224d2:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80224d4:	68fb      	ldr	r3, [r7, #12]
 80224d6:	011b      	lsls	r3, r3, #4
 80224d8:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80224da:	2117      	movs	r1, #23
 80224dc:	187b      	adds	r3, r7, r1
 80224de:	781b      	ldrb	r3, [r3, #0]
 80224e0:	005b      	lsls	r3, r3, #1
 80224e2:	3301      	adds	r3, #1
 80224e4:	68ba      	ldr	r2, [r7, #8]
 80224e6:	18d3      	adds	r3, r2, r3
 80224e8:	2200      	movs	r2, #0
 80224ea:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80224ec:	187b      	adds	r3, r7, r1
 80224ee:	781a      	ldrb	r2, [r3, #0]
 80224f0:	187b      	adds	r3, r7, r1
 80224f2:	3201      	adds	r2, #1
 80224f4:	701a      	strb	r2, [r3, #0]
 80224f6:	2317      	movs	r3, #23
 80224f8:	18fa      	adds	r2, r7, r3
 80224fa:	1dfb      	adds	r3, r7, #7
 80224fc:	7812      	ldrb	r2, [r2, #0]
 80224fe:	781b      	ldrb	r3, [r3, #0]
 8022500:	429a      	cmp	r2, r3
 8022502:	d3c8      	bcc.n	8022496 <IntToUnicode+0x1e>
  }
}
 8022504:	46c0      	nop			@ (mov r8, r8)
 8022506:	46c0      	nop			@ (mov r8, r8)
 8022508:	46bd      	mov	sp, r7
 802250a:	b006      	add	sp, #24
 802250c:	bd80      	pop	{r7, pc}
	...

08022510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022510:	b580      	push	{r7, lr}
 8022512:	b082      	sub	sp, #8
 8022514:	af00      	add	r7, sp, #0
 8022516:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8022518:	687b      	ldr	r3, [r7, #4]
 802251a:	681b      	ldr	r3, [r3, #0]
 802251c:	4a0a      	ldr	r2, [pc, #40]	@ (8022548 <HAL_PCD_MspInit+0x38>)
 802251e:	4293      	cmp	r3, r2
 8022520:	d10e      	bne.n	8022540 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8022522:	4b0a      	ldr	r3, [pc, #40]	@ (802254c <HAL_PCD_MspInit+0x3c>)
 8022524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8022526:	4b09      	ldr	r3, [pc, #36]	@ (802254c <HAL_PCD_MspInit+0x3c>)
 8022528:	2180      	movs	r1, #128	@ 0x80
 802252a:	0409      	lsls	r1, r1, #16
 802252c:	430a      	orrs	r2, r1
 802252e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8022530:	2200      	movs	r2, #0
 8022532:	2100      	movs	r1, #0
 8022534:	201f      	movs	r0, #31
 8022536:	f7f1 ffd1 	bl	80144dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 802253a:	201f      	movs	r0, #31
 802253c:	f7f1 ffe3 	bl	8014506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8022540:	46c0      	nop			@ (mov r8, r8)
 8022542:	46bd      	mov	sp, r7
 8022544:	b002      	add	sp, #8
 8022546:	bd80      	pop	{r7, pc}
 8022548:	40005c00 	.word	0x40005c00
 802254c:	40021000 	.word	0x40021000

08022550 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022550:	b580      	push	{r7, lr}
 8022552:	b082      	sub	sp, #8
 8022554:	af00      	add	r7, sp, #0
 8022556:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8022558:	687a      	ldr	r2, [r7, #4]
 802255a:	23bc      	movs	r3, #188	@ 0xbc
 802255c:	009b      	lsls	r3, r3, #2
 802255e:	58d2      	ldr	r2, [r2, r3]
 8022560:	687b      	ldr	r3, [r7, #4]
 8022562:	21ac      	movs	r1, #172	@ 0xac
 8022564:	0089      	lsls	r1, r1, #2
 8022566:	468c      	mov	ip, r1
 8022568:	4463      	add	r3, ip
 802256a:	0019      	movs	r1, r3
 802256c:	0010      	movs	r0, r2
 802256e:	f7fe fc1d 	bl	8020dac <USBD_LL_SetupStage>
}
 8022572:	46c0      	nop			@ (mov r8, r8)
 8022574:	46bd      	mov	sp, r7
 8022576:	b002      	add	sp, #8
 8022578:	bd80      	pop	{r7, pc}

0802257a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802257a:	b590      	push	{r4, r7, lr}
 802257c:	b083      	sub	sp, #12
 802257e:	af00      	add	r7, sp, #0
 8022580:	6078      	str	r0, [r7, #4]
 8022582:	000a      	movs	r2, r1
 8022584:	1cfb      	adds	r3, r7, #3
 8022586:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022588:	687a      	ldr	r2, [r7, #4]
 802258a:	23bc      	movs	r3, #188	@ 0xbc
 802258c:	009b      	lsls	r3, r3, #2
 802258e:	58d4      	ldr	r4, [r2, r3]
 8022590:	1cfb      	adds	r3, r7, #3
 8022592:	781a      	ldrb	r2, [r3, #0]
 8022594:	6878      	ldr	r0, [r7, #4]
 8022596:	23be      	movs	r3, #190	@ 0xbe
 8022598:	0059      	lsls	r1, r3, #1
 802259a:	0013      	movs	r3, r2
 802259c:	009b      	lsls	r3, r3, #2
 802259e:	189b      	adds	r3, r3, r2
 80225a0:	00db      	lsls	r3, r3, #3
 80225a2:	18c3      	adds	r3, r0, r3
 80225a4:	185b      	adds	r3, r3, r1
 80225a6:	681a      	ldr	r2, [r3, #0]
 80225a8:	1cfb      	adds	r3, r7, #3
 80225aa:	781b      	ldrb	r3, [r3, #0]
 80225ac:	0019      	movs	r1, r3
 80225ae:	0020      	movs	r0, r4
 80225b0:	f7fe fc5a 	bl	8020e68 <USBD_LL_DataOutStage>
}
 80225b4:	46c0      	nop			@ (mov r8, r8)
 80225b6:	46bd      	mov	sp, r7
 80225b8:	b003      	add	sp, #12
 80225ba:	bd90      	pop	{r4, r7, pc}

080225bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225bc:	b580      	push	{r7, lr}
 80225be:	b082      	sub	sp, #8
 80225c0:	af00      	add	r7, sp, #0
 80225c2:	6078      	str	r0, [r7, #4]
 80225c4:	000a      	movs	r2, r1
 80225c6:	1cfb      	adds	r3, r7, #3
 80225c8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80225ca:	687a      	ldr	r2, [r7, #4]
 80225cc:	23bc      	movs	r3, #188	@ 0xbc
 80225ce:	009b      	lsls	r3, r3, #2
 80225d0:	58d0      	ldr	r0, [r2, r3]
 80225d2:	1cfb      	adds	r3, r7, #3
 80225d4:	781a      	ldrb	r2, [r3, #0]
 80225d6:	6879      	ldr	r1, [r7, #4]
 80225d8:	0013      	movs	r3, r2
 80225da:	009b      	lsls	r3, r3, #2
 80225dc:	189b      	adds	r3, r3, r2
 80225de:	00db      	lsls	r3, r3, #3
 80225e0:	18cb      	adds	r3, r1, r3
 80225e2:	333c      	adds	r3, #60	@ 0x3c
 80225e4:	681a      	ldr	r2, [r3, #0]
 80225e6:	1cfb      	adds	r3, r7, #3
 80225e8:	781b      	ldrb	r3, [r3, #0]
 80225ea:	0019      	movs	r1, r3
 80225ec:	f7fe fcbe 	bl	8020f6c <USBD_LL_DataInStage>
}
 80225f0:	46c0      	nop			@ (mov r8, r8)
 80225f2:	46bd      	mov	sp, r7
 80225f4:	b002      	add	sp, #8
 80225f6:	bd80      	pop	{r7, pc}

080225f8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b082      	sub	sp, #8
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8022600:	687a      	ldr	r2, [r7, #4]
 8022602:	23bc      	movs	r3, #188	@ 0xbc
 8022604:	009b      	lsls	r3, r3, #2
 8022606:	58d3      	ldr	r3, [r2, r3]
 8022608:	0018      	movs	r0, r3
 802260a:	f7fe fdf5 	bl	80211f8 <USBD_LL_SOF>
}
 802260e:	46c0      	nop			@ (mov r8, r8)
 8022610:	46bd      	mov	sp, r7
 8022612:	b002      	add	sp, #8
 8022614:	bd80      	pop	{r7, pc}

08022616 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022616:	b580      	push	{r7, lr}
 8022618:	b084      	sub	sp, #16
 802261a:	af00      	add	r7, sp, #0
 802261c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 802261e:	230f      	movs	r3, #15
 8022620:	18fb      	adds	r3, r7, r3
 8022622:	2201      	movs	r2, #1
 8022624:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	689b      	ldr	r3, [r3, #8]
 802262a:	2b02      	cmp	r3, #2
 802262c:	d001      	beq.n	8022632 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 802262e:	f7ea f90f 	bl	800c850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8022632:	687a      	ldr	r2, [r7, #4]
 8022634:	23bc      	movs	r3, #188	@ 0xbc
 8022636:	009b      	lsls	r3, r3, #2
 8022638:	58d2      	ldr	r2, [r2, r3]
 802263a:	230f      	movs	r3, #15
 802263c:	18fb      	adds	r3, r7, r3
 802263e:	781b      	ldrb	r3, [r3, #0]
 8022640:	0019      	movs	r1, r3
 8022642:	0010      	movs	r0, r2
 8022644:	f7fe fd97 	bl	8021176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8022648:	687a      	ldr	r2, [r7, #4]
 802264a:	23bc      	movs	r3, #188	@ 0xbc
 802264c:	009b      	lsls	r3, r3, #2
 802264e:	58d3      	ldr	r3, [r2, r3]
 8022650:	0018      	movs	r0, r3
 8022652:	f7fe fd48 	bl	80210e6 <USBD_LL_Reset>
}
 8022656:	46c0      	nop			@ (mov r8, r8)
 8022658:	46bd      	mov	sp, r7
 802265a:	b004      	add	sp, #16
 802265c:	bd80      	pop	{r7, pc}
	...

08022660 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022660:	b580      	push	{r7, lr}
 8022662:	b082      	sub	sp, #8
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8022668:	687a      	ldr	r2, [r7, #4]
 802266a:	23bc      	movs	r3, #188	@ 0xbc
 802266c:	009b      	lsls	r3, r3, #2
 802266e:	58d3      	ldr	r3, [r2, r3]
 8022670:	0018      	movs	r0, r3
 8022672:	f7fe fd91 	bl	8021198 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	699b      	ldr	r3, [r3, #24]
 802267a:	2b00      	cmp	r3, #0
 802267c:	d005      	beq.n	802268a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802267e:	4b05      	ldr	r3, [pc, #20]	@ (8022694 <HAL_PCD_SuspendCallback+0x34>)
 8022680:	691a      	ldr	r2, [r3, #16]
 8022682:	4b04      	ldr	r3, [pc, #16]	@ (8022694 <HAL_PCD_SuspendCallback+0x34>)
 8022684:	2106      	movs	r1, #6
 8022686:	430a      	orrs	r2, r1
 8022688:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802268a:	46c0      	nop			@ (mov r8, r8)
 802268c:	46bd      	mov	sp, r7
 802268e:	b002      	add	sp, #8
 8022690:	bd80      	pop	{r7, pc}
 8022692:	46c0      	nop			@ (mov r8, r8)
 8022694:	e000ed00 	.word	0xe000ed00

08022698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022698:	b580      	push	{r7, lr}
 802269a:	b082      	sub	sp, #8
 802269c:	af00      	add	r7, sp, #0
 802269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80226a0:	687b      	ldr	r3, [r7, #4]
 80226a2:	699b      	ldr	r3, [r3, #24]
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d007      	beq.n	80226b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80226a8:	4b09      	ldr	r3, [pc, #36]	@ (80226d0 <HAL_PCD_ResumeCallback+0x38>)
 80226aa:	691a      	ldr	r2, [r3, #16]
 80226ac:	4b08      	ldr	r3, [pc, #32]	@ (80226d0 <HAL_PCD_ResumeCallback+0x38>)
 80226ae:	2106      	movs	r1, #6
 80226b0:	438a      	bics	r2, r1
 80226b2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80226b4:	f000 fa44 	bl	8022b40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80226b8:	687a      	ldr	r2, [r7, #4]
 80226ba:	23bc      	movs	r3, #188	@ 0xbc
 80226bc:	009b      	lsls	r3, r3, #2
 80226be:	58d3      	ldr	r3, [r2, r3]
 80226c0:	0018      	movs	r0, r3
 80226c2:	f7fe fd81 	bl	80211c8 <USBD_LL_Resume>
}
 80226c6:	46c0      	nop			@ (mov r8, r8)
 80226c8:	46bd      	mov	sp, r7
 80226ca:	b002      	add	sp, #8
 80226cc:	bd80      	pop	{r7, pc}
 80226ce:	46c0      	nop			@ (mov r8, r8)
 80226d0:	e000ed00 	.word	0xe000ed00

080226d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80226d4:	b580      	push	{r7, lr}
 80226d6:	b082      	sub	sp, #8
 80226d8:	af00      	add	r7, sp, #0
 80226da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80226dc:	4a2d      	ldr	r2, [pc, #180]	@ (8022794 <USBD_LL_Init+0xc0>)
 80226de:	23bc      	movs	r3, #188	@ 0xbc
 80226e0:	009b      	lsls	r3, r3, #2
 80226e2:	6879      	ldr	r1, [r7, #4]
 80226e4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80226e6:	687a      	ldr	r2, [r7, #4]
 80226e8:	23b0      	movs	r3, #176	@ 0xb0
 80226ea:	009b      	lsls	r3, r3, #2
 80226ec:	4929      	ldr	r1, [pc, #164]	@ (8022794 <USBD_LL_Init+0xc0>)
 80226ee:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80226f0:	4b28      	ldr	r3, [pc, #160]	@ (8022794 <USBD_LL_Init+0xc0>)
 80226f2:	4a29      	ldr	r2, [pc, #164]	@ (8022798 <USBD_LL_Init+0xc4>)
 80226f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80226f6:	4b27      	ldr	r3, [pc, #156]	@ (8022794 <USBD_LL_Init+0xc0>)
 80226f8:	2208      	movs	r2, #8
 80226fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80226fc:	4b25      	ldr	r3, [pc, #148]	@ (8022794 <USBD_LL_Init+0xc0>)
 80226fe:	2202      	movs	r2, #2
 8022700:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022702:	4b24      	ldr	r3, [pc, #144]	@ (8022794 <USBD_LL_Init+0xc0>)
 8022704:	2202      	movs	r2, #2
 8022706:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8022708:	4b22      	ldr	r3, [pc, #136]	@ (8022794 <USBD_LL_Init+0xc0>)
 802270a:	2200      	movs	r2, #0
 802270c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 802270e:	4b21      	ldr	r3, [pc, #132]	@ (8022794 <USBD_LL_Init+0xc0>)
 8022710:	2200      	movs	r2, #0
 8022712:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8022714:	4b1f      	ldr	r3, [pc, #124]	@ (8022794 <USBD_LL_Init+0xc0>)
 8022716:	2200      	movs	r2, #0
 8022718:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802271a:	4b1e      	ldr	r3, [pc, #120]	@ (8022794 <USBD_LL_Init+0xc0>)
 802271c:	0018      	movs	r0, r3
 802271e:	f7f5 ff93 	bl	8018648 <HAL_PCD_Init>
 8022722:	1e03      	subs	r3, r0, #0
 8022724:	d001      	beq.n	802272a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8022726:	f7ea f893 	bl	800c850 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802272a:	687a      	ldr	r2, [r7, #4]
 802272c:	23b0      	movs	r3, #176	@ 0xb0
 802272e:	009b      	lsls	r3, r3, #2
 8022730:	58d0      	ldr	r0, [r2, r3]
 8022732:	2318      	movs	r3, #24
 8022734:	2200      	movs	r2, #0
 8022736:	2100      	movs	r1, #0
 8022738:	f7f7 fd54 	bl	801a1e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 802273c:	687a      	ldr	r2, [r7, #4]
 802273e:	23b0      	movs	r3, #176	@ 0xb0
 8022740:	009b      	lsls	r3, r3, #2
 8022742:	58d0      	ldr	r0, [r2, r3]
 8022744:	2358      	movs	r3, #88	@ 0x58
 8022746:	2200      	movs	r2, #0
 8022748:	2180      	movs	r1, #128	@ 0x80
 802274a:	f7f7 fd4b 	bl	801a1e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 802274e:	687a      	ldr	r2, [r7, #4]
 8022750:	23b0      	movs	r3, #176	@ 0xb0
 8022752:	009b      	lsls	r3, r3, #2
 8022754:	58d0      	ldr	r0, [r2, r3]
 8022756:	23c0      	movs	r3, #192	@ 0xc0
 8022758:	2200      	movs	r2, #0
 802275a:	2181      	movs	r1, #129	@ 0x81
 802275c:	f7f7 fd42 	bl	801a1e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8022760:	687a      	ldr	r2, [r7, #4]
 8022762:	23b0      	movs	r3, #176	@ 0xb0
 8022764:	009b      	lsls	r3, r3, #2
 8022766:	58d0      	ldr	r0, [r2, r3]
 8022768:	2388      	movs	r3, #136	@ 0x88
 802276a:	005b      	lsls	r3, r3, #1
 802276c:	2200      	movs	r2, #0
 802276e:	2101      	movs	r1, #1
 8022770:	f7f7 fd38 	bl	801a1e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8022774:	687a      	ldr	r2, [r7, #4]
 8022776:	23b0      	movs	r3, #176	@ 0xb0
 8022778:	009b      	lsls	r3, r3, #2
 802277a:	58d0      	ldr	r0, [r2, r3]
 802277c:	2380      	movs	r3, #128	@ 0x80
 802277e:	005b      	lsls	r3, r3, #1
 8022780:	2200      	movs	r2, #0
 8022782:	2182      	movs	r1, #130	@ 0x82
 8022784:	f7f7 fd2e 	bl	801a1e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8022788:	2300      	movs	r3, #0
}
 802278a:	0018      	movs	r0, r3
 802278c:	46bd      	mov	sp, r7
 802278e:	b002      	add	sp, #8
 8022790:	bd80      	pop	{r7, pc}
 8022792:	46c0      	nop			@ (mov r8, r8)
 8022794:	20002fcc 	.word	0x20002fcc
 8022798:	40005c00 	.word	0x40005c00

0802279c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 802279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802279e:	b085      	sub	sp, #20
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80227a4:	210f      	movs	r1, #15
 80227a6:	187b      	adds	r3, r7, r1
 80227a8:	2200      	movs	r2, #0
 80227aa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80227ac:	260e      	movs	r6, #14
 80227ae:	19bb      	adds	r3, r7, r6
 80227b0:	2200      	movs	r2, #0
 80227b2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80227b4:	687a      	ldr	r2, [r7, #4]
 80227b6:	23b0      	movs	r3, #176	@ 0xb0
 80227b8:	009b      	lsls	r3, r3, #2
 80227ba:	58d3      	ldr	r3, [r2, r3]
 80227bc:	000d      	movs	r5, r1
 80227be:	187c      	adds	r4, r7, r1
 80227c0:	0018      	movs	r0, r3
 80227c2:	f7f6 f841 	bl	8018848 <HAL_PCD_Start>
 80227c6:	0003      	movs	r3, r0
 80227c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80227ca:	19bc      	adds	r4, r7, r6
 80227cc:	197b      	adds	r3, r7, r5
 80227ce:	781b      	ldrb	r3, [r3, #0]
 80227d0:	0018      	movs	r0, r3
 80227d2:	f000 f9bc 	bl	8022b4e <USBD_Get_USB_Status>
 80227d6:	0003      	movs	r3, r0
 80227d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80227da:	19bb      	adds	r3, r7, r6
 80227dc:	781b      	ldrb	r3, [r3, #0]
}
 80227de:	0018      	movs	r0, r3
 80227e0:	46bd      	mov	sp, r7
 80227e2:	b005      	add	sp, #20
 80227e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080227e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80227e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227e8:	b085      	sub	sp, #20
 80227ea:	af00      	add	r7, sp, #0
 80227ec:	6078      	str	r0, [r7, #4]
 80227ee:	000c      	movs	r4, r1
 80227f0:	0010      	movs	r0, r2
 80227f2:	0019      	movs	r1, r3
 80227f4:	1cfb      	adds	r3, r7, #3
 80227f6:	1c22      	adds	r2, r4, #0
 80227f8:	701a      	strb	r2, [r3, #0]
 80227fa:	1cbb      	adds	r3, r7, #2
 80227fc:	1c02      	adds	r2, r0, #0
 80227fe:	701a      	strb	r2, [r3, #0]
 8022800:	003b      	movs	r3, r7
 8022802:	1c0a      	adds	r2, r1, #0
 8022804:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022806:	260f      	movs	r6, #15
 8022808:	19bb      	adds	r3, r7, r6
 802280a:	2200      	movs	r2, #0
 802280c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802280e:	250e      	movs	r5, #14
 8022810:	197b      	adds	r3, r7, r5
 8022812:	2200      	movs	r2, #0
 8022814:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8022816:	687a      	ldr	r2, [r7, #4]
 8022818:	23b0      	movs	r3, #176	@ 0xb0
 802281a:	009b      	lsls	r3, r3, #2
 802281c:	58d0      	ldr	r0, [r2, r3]
 802281e:	19bc      	adds	r4, r7, r6
 8022820:	1cbb      	adds	r3, r7, #2
 8022822:	781d      	ldrb	r5, [r3, #0]
 8022824:	003b      	movs	r3, r7
 8022826:	881a      	ldrh	r2, [r3, #0]
 8022828:	1cfb      	adds	r3, r7, #3
 802282a:	7819      	ldrb	r1, [r3, #0]
 802282c:	002b      	movs	r3, r5
 802282e:	f7f6 f9a0 	bl	8018b72 <HAL_PCD_EP_Open>
 8022832:	0003      	movs	r3, r0
 8022834:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022836:	250e      	movs	r5, #14
 8022838:	197c      	adds	r4, r7, r5
 802283a:	19bb      	adds	r3, r7, r6
 802283c:	781b      	ldrb	r3, [r3, #0]
 802283e:	0018      	movs	r0, r3
 8022840:	f000 f985 	bl	8022b4e <USBD_Get_USB_Status>
 8022844:	0003      	movs	r3, r0
 8022846:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022848:	197b      	adds	r3, r7, r5
 802284a:	781b      	ldrb	r3, [r3, #0]
}
 802284c:	0018      	movs	r0, r3
 802284e:	46bd      	mov	sp, r7
 8022850:	b005      	add	sp, #20
 8022852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022854 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022856:	b085      	sub	sp, #20
 8022858:	af00      	add	r7, sp, #0
 802285a:	6078      	str	r0, [r7, #4]
 802285c:	000a      	movs	r2, r1
 802285e:	1cfb      	adds	r3, r7, #3
 8022860:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022862:	210f      	movs	r1, #15
 8022864:	187b      	adds	r3, r7, r1
 8022866:	2200      	movs	r2, #0
 8022868:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802286a:	260e      	movs	r6, #14
 802286c:	19bb      	adds	r3, r7, r6
 802286e:	2200      	movs	r2, #0
 8022870:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8022872:	687a      	ldr	r2, [r7, #4]
 8022874:	23b0      	movs	r3, #176	@ 0xb0
 8022876:	009b      	lsls	r3, r3, #2
 8022878:	58d2      	ldr	r2, [r2, r3]
 802287a:	000d      	movs	r5, r1
 802287c:	187c      	adds	r4, r7, r1
 802287e:	1cfb      	adds	r3, r7, #3
 8022880:	781b      	ldrb	r3, [r3, #0]
 8022882:	0019      	movs	r1, r3
 8022884:	0010      	movs	r0, r2
 8022886:	f7f6 f9e3 	bl	8018c50 <HAL_PCD_EP_Close>
 802288a:	0003      	movs	r3, r0
 802288c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802288e:	19bc      	adds	r4, r7, r6
 8022890:	197b      	adds	r3, r7, r5
 8022892:	781b      	ldrb	r3, [r3, #0]
 8022894:	0018      	movs	r0, r3
 8022896:	f000 f95a 	bl	8022b4e <USBD_Get_USB_Status>
 802289a:	0003      	movs	r3, r0
 802289c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802289e:	19bb      	adds	r3, r7, r6
 80228a0:	781b      	ldrb	r3, [r3, #0]
}
 80228a2:	0018      	movs	r0, r3
 80228a4:	46bd      	mov	sp, r7
 80228a6:	b005      	add	sp, #20
 80228a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080228aa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80228ac:	b085      	sub	sp, #20
 80228ae:	af00      	add	r7, sp, #0
 80228b0:	6078      	str	r0, [r7, #4]
 80228b2:	000a      	movs	r2, r1
 80228b4:	1cfb      	adds	r3, r7, #3
 80228b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80228b8:	210f      	movs	r1, #15
 80228ba:	187b      	adds	r3, r7, r1
 80228bc:	2200      	movs	r2, #0
 80228be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80228c0:	260e      	movs	r6, #14
 80228c2:	19bb      	adds	r3, r7, r6
 80228c4:	2200      	movs	r2, #0
 80228c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80228c8:	687a      	ldr	r2, [r7, #4]
 80228ca:	23b0      	movs	r3, #176	@ 0xb0
 80228cc:	009b      	lsls	r3, r3, #2
 80228ce:	58d2      	ldr	r2, [r2, r3]
 80228d0:	000d      	movs	r5, r1
 80228d2:	187c      	adds	r4, r7, r1
 80228d4:	1cfb      	adds	r3, r7, #3
 80228d6:	781b      	ldrb	r3, [r3, #0]
 80228d8:	0019      	movs	r1, r3
 80228da:	0010      	movs	r0, r2
 80228dc:	f7f6 fa95 	bl	8018e0a <HAL_PCD_EP_SetStall>
 80228e0:	0003      	movs	r3, r0
 80228e2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228e4:	19bc      	adds	r4, r7, r6
 80228e6:	197b      	adds	r3, r7, r5
 80228e8:	781b      	ldrb	r3, [r3, #0]
 80228ea:	0018      	movs	r0, r3
 80228ec:	f000 f92f 	bl	8022b4e <USBD_Get_USB_Status>
 80228f0:	0003      	movs	r3, r0
 80228f2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80228f4:	19bb      	adds	r3, r7, r6
 80228f6:	781b      	ldrb	r3, [r3, #0]
}
 80228f8:	0018      	movs	r0, r3
 80228fa:	46bd      	mov	sp, r7
 80228fc:	b005      	add	sp, #20
 80228fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022900 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022902:	b085      	sub	sp, #20
 8022904:	af00      	add	r7, sp, #0
 8022906:	6078      	str	r0, [r7, #4]
 8022908:	000a      	movs	r2, r1
 802290a:	1cfb      	adds	r3, r7, #3
 802290c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802290e:	210f      	movs	r1, #15
 8022910:	187b      	adds	r3, r7, r1
 8022912:	2200      	movs	r2, #0
 8022914:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022916:	260e      	movs	r6, #14
 8022918:	19bb      	adds	r3, r7, r6
 802291a:	2200      	movs	r2, #0
 802291c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802291e:	687a      	ldr	r2, [r7, #4]
 8022920:	23b0      	movs	r3, #176	@ 0xb0
 8022922:	009b      	lsls	r3, r3, #2
 8022924:	58d2      	ldr	r2, [r2, r3]
 8022926:	000d      	movs	r5, r1
 8022928:	187c      	adds	r4, r7, r1
 802292a:	1cfb      	adds	r3, r7, #3
 802292c:	781b      	ldrb	r3, [r3, #0]
 802292e:	0019      	movs	r1, r3
 8022930:	0010      	movs	r0, r2
 8022932:	f7f6 fac6 	bl	8018ec2 <HAL_PCD_EP_ClrStall>
 8022936:	0003      	movs	r3, r0
 8022938:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802293a:	19bc      	adds	r4, r7, r6
 802293c:	197b      	adds	r3, r7, r5
 802293e:	781b      	ldrb	r3, [r3, #0]
 8022940:	0018      	movs	r0, r3
 8022942:	f000 f904 	bl	8022b4e <USBD_Get_USB_Status>
 8022946:	0003      	movs	r3, r0
 8022948:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802294a:	19bb      	adds	r3, r7, r6
 802294c:	781b      	ldrb	r3, [r3, #0]
}
 802294e:	0018      	movs	r0, r3
 8022950:	46bd      	mov	sp, r7
 8022952:	b005      	add	sp, #20
 8022954:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022956 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022956:	b580      	push	{r7, lr}
 8022958:	b084      	sub	sp, #16
 802295a:	af00      	add	r7, sp, #0
 802295c:	6078      	str	r0, [r7, #4]
 802295e:	000a      	movs	r2, r1
 8022960:	1cfb      	adds	r3, r7, #3
 8022962:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8022964:	687a      	ldr	r2, [r7, #4]
 8022966:	23b0      	movs	r3, #176	@ 0xb0
 8022968:	009b      	lsls	r3, r3, #2
 802296a:	58d3      	ldr	r3, [r2, r3]
 802296c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 802296e:	1cfb      	adds	r3, r7, #3
 8022970:	781b      	ldrb	r3, [r3, #0]
 8022972:	b25b      	sxtb	r3, r3
 8022974:	2b00      	cmp	r3, #0
 8022976:	da0d      	bge.n	8022994 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8022978:	1cfb      	adds	r3, r7, #3
 802297a:	781b      	ldrb	r3, [r3, #0]
 802297c:	227f      	movs	r2, #127	@ 0x7f
 802297e:	4013      	ands	r3, r2
 8022980:	68f9      	ldr	r1, [r7, #12]
 8022982:	1c5a      	adds	r2, r3, #1
 8022984:	0013      	movs	r3, r2
 8022986:	009b      	lsls	r3, r3, #2
 8022988:	189b      	adds	r3, r3, r2
 802298a:	00db      	lsls	r3, r3, #3
 802298c:	18cb      	adds	r3, r1, r3
 802298e:	3302      	adds	r3, #2
 8022990:	781b      	ldrb	r3, [r3, #0]
 8022992:	e00d      	b.n	80229b0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8022994:	1cfb      	adds	r3, r7, #3
 8022996:	781b      	ldrb	r3, [r3, #0]
 8022998:	227f      	movs	r2, #127	@ 0x7f
 802299a:	401a      	ands	r2, r3
 802299c:	68f8      	ldr	r0, [r7, #12]
 802299e:	23b5      	movs	r3, #181	@ 0xb5
 80229a0:	0059      	lsls	r1, r3, #1
 80229a2:	0013      	movs	r3, r2
 80229a4:	009b      	lsls	r3, r3, #2
 80229a6:	189b      	adds	r3, r3, r2
 80229a8:	00db      	lsls	r3, r3, #3
 80229aa:	18c3      	adds	r3, r0, r3
 80229ac:	185b      	adds	r3, r3, r1
 80229ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80229b0:	0018      	movs	r0, r3
 80229b2:	46bd      	mov	sp, r7
 80229b4:	b004      	add	sp, #16
 80229b6:	bd80      	pop	{r7, pc}

080229b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80229b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229ba:	b085      	sub	sp, #20
 80229bc:	af00      	add	r7, sp, #0
 80229be:	6078      	str	r0, [r7, #4]
 80229c0:	000a      	movs	r2, r1
 80229c2:	1cfb      	adds	r3, r7, #3
 80229c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80229c6:	210f      	movs	r1, #15
 80229c8:	187b      	adds	r3, r7, r1
 80229ca:	2200      	movs	r2, #0
 80229cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80229ce:	260e      	movs	r6, #14
 80229d0:	19bb      	adds	r3, r7, r6
 80229d2:	2200      	movs	r2, #0
 80229d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80229d6:	687a      	ldr	r2, [r7, #4]
 80229d8:	23b0      	movs	r3, #176	@ 0xb0
 80229da:	009b      	lsls	r3, r3, #2
 80229dc:	58d2      	ldr	r2, [r2, r3]
 80229de:	000d      	movs	r5, r1
 80229e0:	187c      	adds	r4, r7, r1
 80229e2:	1cfb      	adds	r3, r7, #3
 80229e4:	781b      	ldrb	r3, [r3, #0]
 80229e6:	0019      	movs	r1, r3
 80229e8:	0010      	movs	r0, r2
 80229ea:	f7f6 f897 	bl	8018b1c <HAL_PCD_SetAddress>
 80229ee:	0003      	movs	r3, r0
 80229f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80229f2:	19bc      	adds	r4, r7, r6
 80229f4:	197b      	adds	r3, r7, r5
 80229f6:	781b      	ldrb	r3, [r3, #0]
 80229f8:	0018      	movs	r0, r3
 80229fa:	f000 f8a8 	bl	8022b4e <USBD_Get_USB_Status>
 80229fe:	0003      	movs	r3, r0
 8022a00:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a02:	19bb      	adds	r3, r7, r6
 8022a04:	781b      	ldrb	r3, [r3, #0]
}
 8022a06:	0018      	movs	r0, r3
 8022a08:	46bd      	mov	sp, r7
 8022a0a:	b005      	add	sp, #20
 8022a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a10:	b087      	sub	sp, #28
 8022a12:	af00      	add	r7, sp, #0
 8022a14:	60f8      	str	r0, [r7, #12]
 8022a16:	0008      	movs	r0, r1
 8022a18:	607a      	str	r2, [r7, #4]
 8022a1a:	0019      	movs	r1, r3
 8022a1c:	230b      	movs	r3, #11
 8022a1e:	18fb      	adds	r3, r7, r3
 8022a20:	1c02      	adds	r2, r0, #0
 8022a22:	701a      	strb	r2, [r3, #0]
 8022a24:	2408      	movs	r4, #8
 8022a26:	193b      	adds	r3, r7, r4
 8022a28:	1c0a      	adds	r2, r1, #0
 8022a2a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a2c:	2117      	movs	r1, #23
 8022a2e:	187b      	adds	r3, r7, r1
 8022a30:	2200      	movs	r2, #0
 8022a32:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022a34:	2516      	movs	r5, #22
 8022a36:	197b      	adds	r3, r7, r5
 8022a38:	2200      	movs	r2, #0
 8022a3a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8022a3c:	68fa      	ldr	r2, [r7, #12]
 8022a3e:	23b0      	movs	r3, #176	@ 0xb0
 8022a40:	009b      	lsls	r3, r3, #2
 8022a42:	58d0      	ldr	r0, [r2, r3]
 8022a44:	193b      	adds	r3, r7, r4
 8022a46:	881d      	ldrh	r5, [r3, #0]
 8022a48:	000e      	movs	r6, r1
 8022a4a:	187c      	adds	r4, r7, r1
 8022a4c:	687a      	ldr	r2, [r7, #4]
 8022a4e:	230b      	movs	r3, #11
 8022a50:	18fb      	adds	r3, r7, r3
 8022a52:	7819      	ldrb	r1, [r3, #0]
 8022a54:	002b      	movs	r3, r5
 8022a56:	f7f6 f99c 	bl	8018d92 <HAL_PCD_EP_Transmit>
 8022a5a:	0003      	movs	r3, r0
 8022a5c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022a5e:	2516      	movs	r5, #22
 8022a60:	197c      	adds	r4, r7, r5
 8022a62:	19bb      	adds	r3, r7, r6
 8022a64:	781b      	ldrb	r3, [r3, #0]
 8022a66:	0018      	movs	r0, r3
 8022a68:	f000 f871 	bl	8022b4e <USBD_Get_USB_Status>
 8022a6c:	0003      	movs	r3, r0
 8022a6e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022a70:	197b      	adds	r3, r7, r5
 8022a72:	781b      	ldrb	r3, [r3, #0]
}
 8022a74:	0018      	movs	r0, r3
 8022a76:	46bd      	mov	sp, r7
 8022a78:	b007      	add	sp, #28
 8022a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022a7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8022a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022a7e:	b087      	sub	sp, #28
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	60f8      	str	r0, [r7, #12]
 8022a84:	0008      	movs	r0, r1
 8022a86:	607a      	str	r2, [r7, #4]
 8022a88:	0019      	movs	r1, r3
 8022a8a:	230b      	movs	r3, #11
 8022a8c:	18fb      	adds	r3, r7, r3
 8022a8e:	1c02      	adds	r2, r0, #0
 8022a90:	701a      	strb	r2, [r3, #0]
 8022a92:	2408      	movs	r4, #8
 8022a94:	193b      	adds	r3, r7, r4
 8022a96:	1c0a      	adds	r2, r1, #0
 8022a98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022a9a:	2117      	movs	r1, #23
 8022a9c:	187b      	adds	r3, r7, r1
 8022a9e:	2200      	movs	r2, #0
 8022aa0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022aa2:	2516      	movs	r5, #22
 8022aa4:	197b      	adds	r3, r7, r5
 8022aa6:	2200      	movs	r2, #0
 8022aa8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8022aaa:	68fa      	ldr	r2, [r7, #12]
 8022aac:	23b0      	movs	r3, #176	@ 0xb0
 8022aae:	009b      	lsls	r3, r3, #2
 8022ab0:	58d0      	ldr	r0, [r2, r3]
 8022ab2:	193b      	adds	r3, r7, r4
 8022ab4:	881d      	ldrh	r5, [r3, #0]
 8022ab6:	000e      	movs	r6, r1
 8022ab8:	187c      	adds	r4, r7, r1
 8022aba:	687a      	ldr	r2, [r7, #4]
 8022abc:	230b      	movs	r3, #11
 8022abe:	18fb      	adds	r3, r7, r3
 8022ac0:	7819      	ldrb	r1, [r3, #0]
 8022ac2:	002b      	movs	r3, r5
 8022ac4:	f7f6 f915 	bl	8018cf2 <HAL_PCD_EP_Receive>
 8022ac8:	0003      	movs	r3, r0
 8022aca:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022acc:	2516      	movs	r5, #22
 8022ace:	197c      	adds	r4, r7, r5
 8022ad0:	19bb      	adds	r3, r7, r6
 8022ad2:	781b      	ldrb	r3, [r3, #0]
 8022ad4:	0018      	movs	r0, r3
 8022ad6:	f000 f83a 	bl	8022b4e <USBD_Get_USB_Status>
 8022ada:	0003      	movs	r3, r0
 8022adc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8022ade:	197b      	adds	r3, r7, r5
 8022ae0:	781b      	ldrb	r3, [r3, #0]
}
 8022ae2:	0018      	movs	r0, r3
 8022ae4:	46bd      	mov	sp, r7
 8022ae6:	b007      	add	sp, #28
 8022ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022aea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022aea:	b580      	push	{r7, lr}
 8022aec:	b082      	sub	sp, #8
 8022aee:	af00      	add	r7, sp, #0
 8022af0:	6078      	str	r0, [r7, #4]
 8022af2:	000a      	movs	r2, r1
 8022af4:	1cfb      	adds	r3, r7, #3
 8022af6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8022af8:	687a      	ldr	r2, [r7, #4]
 8022afa:	23b0      	movs	r3, #176	@ 0xb0
 8022afc:	009b      	lsls	r3, r3, #2
 8022afe:	58d2      	ldr	r2, [r2, r3]
 8022b00:	1cfb      	adds	r3, r7, #3
 8022b02:	781b      	ldrb	r3, [r3, #0]
 8022b04:	0019      	movs	r1, r3
 8022b06:	0010      	movs	r0, r2
 8022b08:	f7f6 f92a 	bl	8018d60 <HAL_PCD_EP_GetRxCount>
 8022b0c:	0003      	movs	r3, r0
}
 8022b0e:	0018      	movs	r0, r3
 8022b10:	46bd      	mov	sp, r7
 8022b12:	b002      	add	sp, #8
 8022b14:	bd80      	pop	{r7, pc}
	...

08022b18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8022b18:	b580      	push	{r7, lr}
 8022b1a:	b082      	sub	sp, #8
 8022b1c:	af00      	add	r7, sp, #0
 8022b1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8022b20:	4b02      	ldr	r3, [pc, #8]	@ (8022b2c <USBD_static_malloc+0x14>)
}
 8022b22:	0018      	movs	r0, r3
 8022b24:	46bd      	mov	sp, r7
 8022b26:	b002      	add	sp, #8
 8022b28:	bd80      	pop	{r7, pc}
 8022b2a:	46c0      	nop			@ (mov r8, r8)
 8022b2c:	200032c0 	.word	0x200032c0

08022b30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8022b30:	b580      	push	{r7, lr}
 8022b32:	b082      	sub	sp, #8
 8022b34:	af00      	add	r7, sp, #0
 8022b36:	6078      	str	r0, [r7, #4]

}
 8022b38:	46c0      	nop			@ (mov r8, r8)
 8022b3a:	46bd      	mov	sp, r7
 8022b3c:	b002      	add	sp, #8
 8022b3e:	bd80      	pop	{r7, pc}

08022b40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022b40:	b580      	push	{r7, lr}
 8022b42:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8022b44:	f7e9 fd34 	bl	800c5b0 <SystemClock_Config>
}
 8022b48:	46c0      	nop			@ (mov r8, r8)
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	bd80      	pop	{r7, pc}

08022b4e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022b4e:	b580      	push	{r7, lr}
 8022b50:	b084      	sub	sp, #16
 8022b52:	af00      	add	r7, sp, #0
 8022b54:	0002      	movs	r2, r0
 8022b56:	1dfb      	adds	r3, r7, #7
 8022b58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022b5a:	230f      	movs	r3, #15
 8022b5c:	18fb      	adds	r3, r7, r3
 8022b5e:	2200      	movs	r2, #0
 8022b60:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8022b62:	1dfb      	adds	r3, r7, #7
 8022b64:	781b      	ldrb	r3, [r3, #0]
 8022b66:	2b03      	cmp	r3, #3
 8022b68:	d017      	beq.n	8022b9a <USBD_Get_USB_Status+0x4c>
 8022b6a:	dc1b      	bgt.n	8022ba4 <USBD_Get_USB_Status+0x56>
 8022b6c:	2b02      	cmp	r3, #2
 8022b6e:	d00f      	beq.n	8022b90 <USBD_Get_USB_Status+0x42>
 8022b70:	dc18      	bgt.n	8022ba4 <USBD_Get_USB_Status+0x56>
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	d002      	beq.n	8022b7c <USBD_Get_USB_Status+0x2e>
 8022b76:	2b01      	cmp	r3, #1
 8022b78:	d005      	beq.n	8022b86 <USBD_Get_USB_Status+0x38>
 8022b7a:	e013      	b.n	8022ba4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8022b7c:	230f      	movs	r3, #15
 8022b7e:	18fb      	adds	r3, r7, r3
 8022b80:	2200      	movs	r2, #0
 8022b82:	701a      	strb	r2, [r3, #0]
    break;
 8022b84:	e013      	b.n	8022bae <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8022b86:	230f      	movs	r3, #15
 8022b88:	18fb      	adds	r3, r7, r3
 8022b8a:	2202      	movs	r2, #2
 8022b8c:	701a      	strb	r2, [r3, #0]
    break;
 8022b8e:	e00e      	b.n	8022bae <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8022b90:	230f      	movs	r3, #15
 8022b92:	18fb      	adds	r3, r7, r3
 8022b94:	2201      	movs	r2, #1
 8022b96:	701a      	strb	r2, [r3, #0]
    break;
 8022b98:	e009      	b.n	8022bae <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8022b9a:	230f      	movs	r3, #15
 8022b9c:	18fb      	adds	r3, r7, r3
 8022b9e:	2202      	movs	r2, #2
 8022ba0:	701a      	strb	r2, [r3, #0]
    break;
 8022ba2:	e004      	b.n	8022bae <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8022ba4:	230f      	movs	r3, #15
 8022ba6:	18fb      	adds	r3, r7, r3
 8022ba8:	2202      	movs	r2, #2
 8022baa:	701a      	strb	r2, [r3, #0]
    break;
 8022bac:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8022bae:	230f      	movs	r3, #15
 8022bb0:	18fb      	adds	r3, r7, r3
 8022bb2:	781b      	ldrb	r3, [r3, #0]
}
 8022bb4:	0018      	movs	r0, r3
 8022bb6:	46bd      	mov	sp, r7
 8022bb8:	b004      	add	sp, #16
 8022bba:	bd80      	pop	{r7, pc}

08022bbc <arm_cfft_radix4by2_q31>:
 8022bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022bbe:	465f      	mov	r7, fp
 8022bc0:	4656      	mov	r6, sl
 8022bc2:	464d      	mov	r5, r9
 8022bc4:	4644      	mov	r4, r8
 8022bc6:	000b      	movs	r3, r1
 8022bc8:	b4f0      	push	{r4, r5, r6, r7}
 8022bca:	085b      	lsrs	r3, r3, #1
 8022bcc:	b08f      	sub	sp, #60	@ 0x3c
 8022bce:	910a      	str	r1, [sp, #40]	@ 0x28
 8022bd0:	0007      	movs	r7, r0
 8022bd2:	9009      	str	r0, [sp, #36]	@ 0x24
 8022bd4:	0011      	movs	r1, r2
 8022bd6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022bd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d100      	bne.n	8022be0 <arm_cfft_radix4by2_q31+0x24>
 8022bde:	e0a0      	b.n	8022d22 <arm_cfft_radix4by2_q31+0x166>
 8022be0:	0002      	movs	r2, r0
 8022be2:	00db      	lsls	r3, r3, #3
 8022be4:	3204      	adds	r2, #4
 8022be6:	4691      	mov	r9, r2
 8022be8:	4698      	mov	r8, r3
 8022bea:	000a      	movs	r2, r1
 8022bec:	464e      	mov	r6, r9
 8022bee:	4442      	add	r2, r8
 8022bf0:	4699      	mov	r9, r3
 8022bf2:	4688      	mov	r8, r1
 8022bf4:	9208      	str	r2, [sp, #32]
 8022bf6:	900d      	str	r0, [sp, #52]	@ 0x34
 8022bf8:	4643      	mov	r3, r8
 8022bfa:	681b      	ldr	r3, [r3, #0]
 8022bfc:	469b      	mov	fp, r3
 8022bfe:	4643      	mov	r3, r8
 8022c00:	685b      	ldr	r3, [r3, #4]
 8022c02:	469a      	mov	sl, r3
 8022c04:	683b      	ldr	r3, [r7, #0]
 8022c06:	109c      	asrs	r4, r3, #2
 8022c08:	464b      	mov	r3, r9
 8022c0a:	58fb      	ldr	r3, [r7, r3]
 8022c0c:	109a      	asrs	r2, r3, #2
 8022c0e:	18a3      	adds	r3, r4, r2
 8022c10:	603b      	str	r3, [r7, #0]
 8022c12:	6833      	ldr	r3, [r6, #0]
 8022c14:	1aa4      	subs	r4, r4, r2
 8022c16:	109d      	asrs	r5, r3, #2
 8022c18:	464b      	mov	r3, r9
 8022c1a:	58f3      	ldr	r3, [r6, r3]
 8022c1c:	17e2      	asrs	r2, r4, #31
 8022c1e:	109b      	asrs	r3, r3, #2
 8022c20:	18e9      	adds	r1, r5, r3
 8022c22:	6031      	str	r1, [r6, #0]
 8022c24:	0011      	movs	r1, r2
 8022c26:	465a      	mov	r2, fp
 8022c28:	17d2      	asrs	r2, r2, #31
 8022c2a:	0010      	movs	r0, r2
 8022c2c:	4652      	mov	r2, sl
 8022c2e:	1aed      	subs	r5, r5, r3
 8022c30:	17eb      	asrs	r3, r5, #31
 8022c32:	17d2      	asrs	r2, r2, #31
 8022c34:	9307      	str	r3, [sp, #28]
 8022c36:	9204      	str	r2, [sp, #16]
 8022c38:	0003      	movs	r3, r0
 8022c3a:	465a      	mov	r2, fp
 8022c3c:	9006      	str	r0, [sp, #24]
 8022c3e:	0020      	movs	r0, r4
 8022c40:	9105      	str	r1, [sp, #20]
 8022c42:	f7dd fcbd 	bl	80005c0 <__aeabi_lmul>
 8022c46:	2280      	movs	r2, #128	@ 0x80
 8022c48:	2300      	movs	r3, #0
 8022c4a:	0612      	lsls	r2, r2, #24
 8022c4c:	1880      	adds	r0, r0, r2
 8022c4e:	4159      	adcs	r1, r3
 8022c50:	2300      	movs	r3, #0
 8022c52:	9101      	str	r1, [sp, #4]
 8022c54:	9300      	str	r3, [sp, #0]
 8022c56:	4652      	mov	r2, sl
 8022c58:	9b04      	ldr	r3, [sp, #16]
 8022c5a:	0028      	movs	r0, r5
 8022c5c:	17e9      	asrs	r1, r5, #31
 8022c5e:	f7dd fcaf 	bl	80005c0 <__aeabi_lmul>
 8022c62:	9a00      	ldr	r2, [sp, #0]
 8022c64:	9b01      	ldr	r3, [sp, #4]
 8022c66:	1880      	adds	r0, r0, r2
 8022c68:	4159      	adcs	r1, r3
 8022c6a:	2280      	movs	r2, #128	@ 0x80
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	0612      	lsls	r2, r2, #24
 8022c70:	1880      	adds	r0, r0, r2
 8022c72:	4159      	adcs	r1, r3
 8022c74:	464a      	mov	r2, r9
 8022c76:	004b      	lsls	r3, r1, #1
 8022c78:	50bb      	str	r3, [r7, r2]
 8022c7a:	4658      	mov	r0, fp
 8022c7c:	002a      	movs	r2, r5
 8022c7e:	9b07      	ldr	r3, [sp, #28]
 8022c80:	9906      	ldr	r1, [sp, #24]
 8022c82:	f7dd fc9d 	bl	80005c0 <__aeabi_lmul>
 8022c86:	2280      	movs	r2, #128	@ 0x80
 8022c88:	2300      	movs	r3, #0
 8022c8a:	0612      	lsls	r2, r2, #24
 8022c8c:	1880      	adds	r0, r0, r2
 8022c8e:	4159      	adcs	r1, r3
 8022c90:	2000      	movs	r0, #0
 8022c92:	9103      	str	r1, [sp, #12]
 8022c94:	9002      	str	r0, [sp, #8]
 8022c96:	4652      	mov	r2, sl
 8022c98:	9b04      	ldr	r3, [sp, #16]
 8022c9a:	0020      	movs	r0, r4
 8022c9c:	9905      	ldr	r1, [sp, #20]
 8022c9e:	f7dd fc8f 	bl	80005c0 <__aeabi_lmul>
 8022ca2:	9a02      	ldr	r2, [sp, #8]
 8022ca4:	9b03      	ldr	r3, [sp, #12]
 8022ca6:	1a12      	subs	r2, r2, r0
 8022ca8:	418b      	sbcs	r3, r1
 8022caa:	2080      	movs	r0, #128	@ 0x80
 8022cac:	2100      	movs	r1, #0
 8022cae:	0600      	lsls	r0, r0, #24
 8022cb0:	1812      	adds	r2, r2, r0
 8022cb2:	414b      	adcs	r3, r1
 8022cb4:	464a      	mov	r2, r9
 8022cb6:	005b      	lsls	r3, r3, #1
 8022cb8:	50b3      	str	r3, [r6, r2]
 8022cba:	2308      	movs	r3, #8
 8022cbc:	469c      	mov	ip, r3
 8022cbe:	9b08      	ldr	r3, [sp, #32]
 8022cc0:	44e0      	add	r8, ip
 8022cc2:	3708      	adds	r7, #8
 8022cc4:	3608      	adds	r6, #8
 8022cc6:	4598      	cmp	r8, r3
 8022cc8:	d196      	bne.n	8022bf8 <arm_cfft_radix4by2_q31+0x3c>
 8022cca:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022ccc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022cce:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022cd0:	2302      	movs	r3, #2
 8022cd2:	003a      	movs	r2, r7
 8022cd4:	0029      	movs	r1, r5
 8022cd6:	0020      	movs	r0, r4
 8022cd8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022cda:	f000 f957 	bl	8022f8c <arm_radix4_butterfly_q31>
 8022cde:	46a4      	mov	ip, r4
 8022ce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022ce2:	2302      	movs	r3, #2
 8022ce4:	0088      	lsls	r0, r1, #2
 8022ce6:	4460      	add	r0, ip
 8022ce8:	003a      	movs	r2, r7
 8022cea:	0029      	movs	r1, r5
 8022cec:	f000 f94e 	bl	8022f8c <arm_radix4_butterfly_q31>
 8022cf0:	46a4      	mov	ip, r4
 8022cf2:	0128      	lsls	r0, r5, #4
 8022cf4:	4460      	add	r0, ip
 8022cf6:	6833      	ldr	r3, [r6, #0]
 8022cf8:	005b      	lsls	r3, r3, #1
 8022cfa:	6033      	str	r3, [r6, #0]
 8022cfc:	6873      	ldr	r3, [r6, #4]
 8022cfe:	005b      	lsls	r3, r3, #1
 8022d00:	6073      	str	r3, [r6, #4]
 8022d02:	68b3      	ldr	r3, [r6, #8]
 8022d04:	005b      	lsls	r3, r3, #1
 8022d06:	60b3      	str	r3, [r6, #8]
 8022d08:	68f3      	ldr	r3, [r6, #12]
 8022d0a:	005b      	lsls	r3, r3, #1
 8022d0c:	60f3      	str	r3, [r6, #12]
 8022d0e:	3610      	adds	r6, #16
 8022d10:	42b0      	cmp	r0, r6
 8022d12:	d1f0      	bne.n	8022cf6 <arm_cfft_radix4by2_q31+0x13a>
 8022d14:	b00f      	add	sp, #60	@ 0x3c
 8022d16:	bc3c      	pop	{r2, r3, r4, r5}
 8022d18:	4690      	mov	r8, r2
 8022d1a:	4699      	mov	r9, r3
 8022d1c:	46a2      	mov	sl, r4
 8022d1e:	46ab      	mov	fp, r5
 8022d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d22:	2302      	movs	r3, #2
 8022d24:	2100      	movs	r1, #0
 8022d26:	0015      	movs	r5, r2
 8022d28:	f000 f930 	bl	8022f8c <arm_radix4_butterfly_q31>
 8022d2c:	46bc      	mov	ip, r7
 8022d2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022d30:	002a      	movs	r2, r5
 8022d32:	0098      	lsls	r0, r3, #2
 8022d34:	4460      	add	r0, ip
 8022d36:	2302      	movs	r3, #2
 8022d38:	2100      	movs	r1, #0
 8022d3a:	f000 f927 	bl	8022f8c <arm_radix4_butterfly_q31>
 8022d3e:	e7e9      	b.n	8022d14 <arm_cfft_radix4by2_q31+0x158>

08022d40 <arm_cfft_radix4by2_inverse_q31>:
 8022d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022d42:	465f      	mov	r7, fp
 8022d44:	4656      	mov	r6, sl
 8022d46:	464d      	mov	r5, r9
 8022d48:	4644      	mov	r4, r8
 8022d4a:	000b      	movs	r3, r1
 8022d4c:	b4f0      	push	{r4, r5, r6, r7}
 8022d4e:	085b      	lsrs	r3, r3, #1
 8022d50:	b08f      	sub	sp, #60	@ 0x3c
 8022d52:	910a      	str	r1, [sp, #40]	@ 0x28
 8022d54:	0007      	movs	r7, r0
 8022d56:	9009      	str	r0, [sp, #36]	@ 0x24
 8022d58:	0011      	movs	r1, r2
 8022d5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022d5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	d100      	bne.n	8022d64 <arm_cfft_radix4by2_inverse_q31+0x24>
 8022d62:	e0a0      	b.n	8022ea6 <arm_cfft_radix4by2_inverse_q31+0x166>
 8022d64:	0002      	movs	r2, r0
 8022d66:	00db      	lsls	r3, r3, #3
 8022d68:	3204      	adds	r2, #4
 8022d6a:	4691      	mov	r9, r2
 8022d6c:	4698      	mov	r8, r3
 8022d6e:	000a      	movs	r2, r1
 8022d70:	464e      	mov	r6, r9
 8022d72:	4442      	add	r2, r8
 8022d74:	4699      	mov	r9, r3
 8022d76:	4688      	mov	r8, r1
 8022d78:	9208      	str	r2, [sp, #32]
 8022d7a:	900d      	str	r0, [sp, #52]	@ 0x34
 8022d7c:	4643      	mov	r3, r8
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	469b      	mov	fp, r3
 8022d82:	4643      	mov	r3, r8
 8022d84:	685b      	ldr	r3, [r3, #4]
 8022d86:	469a      	mov	sl, r3
 8022d88:	683b      	ldr	r3, [r7, #0]
 8022d8a:	109c      	asrs	r4, r3, #2
 8022d8c:	464b      	mov	r3, r9
 8022d8e:	58fb      	ldr	r3, [r7, r3]
 8022d90:	109a      	asrs	r2, r3, #2
 8022d92:	18a3      	adds	r3, r4, r2
 8022d94:	603b      	str	r3, [r7, #0]
 8022d96:	6833      	ldr	r3, [r6, #0]
 8022d98:	1aa4      	subs	r4, r4, r2
 8022d9a:	109d      	asrs	r5, r3, #2
 8022d9c:	464b      	mov	r3, r9
 8022d9e:	58f3      	ldr	r3, [r6, r3]
 8022da0:	17e2      	asrs	r2, r4, #31
 8022da2:	109b      	asrs	r3, r3, #2
 8022da4:	18e9      	adds	r1, r5, r3
 8022da6:	6031      	str	r1, [r6, #0]
 8022da8:	0011      	movs	r1, r2
 8022daa:	465a      	mov	r2, fp
 8022dac:	17d2      	asrs	r2, r2, #31
 8022dae:	0010      	movs	r0, r2
 8022db0:	4652      	mov	r2, sl
 8022db2:	1aed      	subs	r5, r5, r3
 8022db4:	17eb      	asrs	r3, r5, #31
 8022db6:	17d2      	asrs	r2, r2, #31
 8022db8:	9307      	str	r3, [sp, #28]
 8022dba:	9204      	str	r2, [sp, #16]
 8022dbc:	0003      	movs	r3, r0
 8022dbe:	465a      	mov	r2, fp
 8022dc0:	9006      	str	r0, [sp, #24]
 8022dc2:	0020      	movs	r0, r4
 8022dc4:	9105      	str	r1, [sp, #20]
 8022dc6:	f7dd fbfb 	bl	80005c0 <__aeabi_lmul>
 8022dca:	2280      	movs	r2, #128	@ 0x80
 8022dcc:	2300      	movs	r3, #0
 8022dce:	0612      	lsls	r2, r2, #24
 8022dd0:	1880      	adds	r0, r0, r2
 8022dd2:	4159      	adcs	r1, r3
 8022dd4:	2300      	movs	r3, #0
 8022dd6:	9101      	str	r1, [sp, #4]
 8022dd8:	9300      	str	r3, [sp, #0]
 8022dda:	4652      	mov	r2, sl
 8022ddc:	9b04      	ldr	r3, [sp, #16]
 8022dde:	0028      	movs	r0, r5
 8022de0:	17e9      	asrs	r1, r5, #31
 8022de2:	f7dd fbed 	bl	80005c0 <__aeabi_lmul>
 8022de6:	9a00      	ldr	r2, [sp, #0]
 8022de8:	9b01      	ldr	r3, [sp, #4]
 8022dea:	1a12      	subs	r2, r2, r0
 8022dec:	418b      	sbcs	r3, r1
 8022dee:	2080      	movs	r0, #128	@ 0x80
 8022df0:	2100      	movs	r1, #0
 8022df2:	0600      	lsls	r0, r0, #24
 8022df4:	1812      	adds	r2, r2, r0
 8022df6:	414b      	adcs	r3, r1
 8022df8:	464a      	mov	r2, r9
 8022dfa:	005b      	lsls	r3, r3, #1
 8022dfc:	50bb      	str	r3, [r7, r2]
 8022dfe:	4658      	mov	r0, fp
 8022e00:	002a      	movs	r2, r5
 8022e02:	9b07      	ldr	r3, [sp, #28]
 8022e04:	9906      	ldr	r1, [sp, #24]
 8022e06:	f7dd fbdb 	bl	80005c0 <__aeabi_lmul>
 8022e0a:	2280      	movs	r2, #128	@ 0x80
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	0612      	lsls	r2, r2, #24
 8022e10:	1880      	adds	r0, r0, r2
 8022e12:	4159      	adcs	r1, r3
 8022e14:	2000      	movs	r0, #0
 8022e16:	9103      	str	r1, [sp, #12]
 8022e18:	9002      	str	r0, [sp, #8]
 8022e1a:	4652      	mov	r2, sl
 8022e1c:	9b04      	ldr	r3, [sp, #16]
 8022e1e:	0020      	movs	r0, r4
 8022e20:	9905      	ldr	r1, [sp, #20]
 8022e22:	f7dd fbcd 	bl	80005c0 <__aeabi_lmul>
 8022e26:	9b02      	ldr	r3, [sp, #8]
 8022e28:	9c03      	ldr	r4, [sp, #12]
 8022e2a:	18c0      	adds	r0, r0, r3
 8022e2c:	4161      	adcs	r1, r4
 8022e2e:	2380      	movs	r3, #128	@ 0x80
 8022e30:	2400      	movs	r4, #0
 8022e32:	061b      	lsls	r3, r3, #24
 8022e34:	18c0      	adds	r0, r0, r3
 8022e36:	4161      	adcs	r1, r4
 8022e38:	464a      	mov	r2, r9
 8022e3a:	004b      	lsls	r3, r1, #1
 8022e3c:	50b3      	str	r3, [r6, r2]
 8022e3e:	2308      	movs	r3, #8
 8022e40:	469c      	mov	ip, r3
 8022e42:	9b08      	ldr	r3, [sp, #32]
 8022e44:	44e0      	add	r8, ip
 8022e46:	3708      	adds	r7, #8
 8022e48:	3608      	adds	r6, #8
 8022e4a:	4598      	cmp	r8, r3
 8022e4c:	d196      	bne.n	8022d7c <arm_cfft_radix4by2_inverse_q31+0x3c>
 8022e4e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8022e50:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022e52:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8022e54:	2302      	movs	r3, #2
 8022e56:	003a      	movs	r2, r7
 8022e58:	0029      	movs	r1, r5
 8022e5a:	0020      	movs	r0, r4
 8022e5c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8022e5e:	f000 fb3b 	bl	80234d8 <arm_radix4_butterfly_inverse_q31>
 8022e62:	46a4      	mov	ip, r4
 8022e64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8022e66:	2302      	movs	r3, #2
 8022e68:	0088      	lsls	r0, r1, #2
 8022e6a:	4460      	add	r0, ip
 8022e6c:	003a      	movs	r2, r7
 8022e6e:	0029      	movs	r1, r5
 8022e70:	f000 fb32 	bl	80234d8 <arm_radix4_butterfly_inverse_q31>
 8022e74:	46a4      	mov	ip, r4
 8022e76:	0128      	lsls	r0, r5, #4
 8022e78:	4460      	add	r0, ip
 8022e7a:	6833      	ldr	r3, [r6, #0]
 8022e7c:	005b      	lsls	r3, r3, #1
 8022e7e:	6033      	str	r3, [r6, #0]
 8022e80:	6873      	ldr	r3, [r6, #4]
 8022e82:	005b      	lsls	r3, r3, #1
 8022e84:	6073      	str	r3, [r6, #4]
 8022e86:	68b3      	ldr	r3, [r6, #8]
 8022e88:	005b      	lsls	r3, r3, #1
 8022e8a:	60b3      	str	r3, [r6, #8]
 8022e8c:	68f3      	ldr	r3, [r6, #12]
 8022e8e:	005b      	lsls	r3, r3, #1
 8022e90:	60f3      	str	r3, [r6, #12]
 8022e92:	3610      	adds	r6, #16
 8022e94:	42b0      	cmp	r0, r6
 8022e96:	d1f0      	bne.n	8022e7a <arm_cfft_radix4by2_inverse_q31+0x13a>
 8022e98:	b00f      	add	sp, #60	@ 0x3c
 8022e9a:	bc3c      	pop	{r2, r3, r4, r5}
 8022e9c:	4690      	mov	r8, r2
 8022e9e:	4699      	mov	r9, r3
 8022ea0:	46a2      	mov	sl, r4
 8022ea2:	46ab      	mov	fp, r5
 8022ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022ea6:	2302      	movs	r3, #2
 8022ea8:	2100      	movs	r1, #0
 8022eaa:	0015      	movs	r5, r2
 8022eac:	f000 fb14 	bl	80234d8 <arm_radix4_butterfly_inverse_q31>
 8022eb0:	46bc      	mov	ip, r7
 8022eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022eb4:	002a      	movs	r2, r5
 8022eb6:	0098      	lsls	r0, r3, #2
 8022eb8:	4460      	add	r0, ip
 8022eba:	2302      	movs	r3, #2
 8022ebc:	2100      	movs	r1, #0
 8022ebe:	f000 fb0b 	bl	80234d8 <arm_radix4_butterfly_inverse_q31>
 8022ec2:	e7e9      	b.n	8022e98 <arm_cfft_radix4by2_inverse_q31+0x158>

08022ec4 <arm_cfft_q31>:
 8022ec4:	b570      	push	{r4, r5, r6, lr}
 8022ec6:	001e      	movs	r6, r3
 8022ec8:	2380      	movs	r3, #128	@ 0x80
 8022eca:	000d      	movs	r5, r1
 8022ecc:	0004      	movs	r4, r0
 8022ece:	8801      	ldrh	r1, [r0, #0]
 8022ed0:	005b      	lsls	r3, r3, #1
 8022ed2:	2a01      	cmp	r2, #1
 8022ed4:	d028      	beq.n	8022f28 <arm_cfft_q31+0x64>
 8022ed6:	4299      	cmp	r1, r3
 8022ed8:	d020      	beq.n	8022f1c <arm_cfft_q31+0x58>
 8022eda:	d812      	bhi.n	8022f02 <arm_cfft_q31+0x3e>
 8022edc:	2920      	cmp	r1, #32
 8022ede:	d004      	beq.n	8022eea <arm_cfft_q31+0x26>
 8022ee0:	d949      	bls.n	8022f76 <arm_cfft_q31+0xb2>
 8022ee2:	2940      	cmp	r1, #64	@ 0x40
 8022ee4:	d01a      	beq.n	8022f1c <arm_cfft_q31+0x58>
 8022ee6:	2980      	cmp	r1, #128	@ 0x80
 8022ee8:	d103      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022eea:	6862      	ldr	r2, [r4, #4]
 8022eec:	0028      	movs	r0, r5
 8022eee:	f7ff fe65 	bl	8022bbc <arm_cfft_radix4by2_q31>
 8022ef2:	2e00      	cmp	r6, #0
 8022ef4:	d004      	beq.n	8022f00 <arm_cfft_q31+0x3c>
 8022ef6:	68a2      	ldr	r2, [r4, #8]
 8022ef8:	89a1      	ldrh	r1, [r4, #12]
 8022efa:	0028      	movs	r0, r5
 8022efc:	f7dd f904 	bl	8000108 <arm_bitreversal_32>
 8022f00:	bd70      	pop	{r4, r5, r6, pc}
 8022f02:	2380      	movs	r3, #128	@ 0x80
 8022f04:	00db      	lsls	r3, r3, #3
 8022f06:	4299      	cmp	r1, r3
 8022f08:	d008      	beq.n	8022f1c <arm_cfft_q31+0x58>
 8022f0a:	d92f      	bls.n	8022f6c <arm_cfft_q31+0xa8>
 8022f0c:	2380      	movs	r3, #128	@ 0x80
 8022f0e:	011b      	lsls	r3, r3, #4
 8022f10:	4299      	cmp	r1, r3
 8022f12:	d0ea      	beq.n	8022eea <arm_cfft_q31+0x26>
 8022f14:	2380      	movs	r3, #128	@ 0x80
 8022f16:	015b      	lsls	r3, r3, #5
 8022f18:	4299      	cmp	r1, r3
 8022f1a:	d1ea      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f1c:	2301      	movs	r3, #1
 8022f1e:	6862      	ldr	r2, [r4, #4]
 8022f20:	0028      	movs	r0, r5
 8022f22:	f000 f833 	bl	8022f8c <arm_radix4_butterfly_q31>
 8022f26:	e7e4      	b.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f28:	4299      	cmp	r1, r3
 8022f2a:	d019      	beq.n	8022f60 <arm_cfft_q31+0x9c>
 8022f2c:	d80b      	bhi.n	8022f46 <arm_cfft_q31+0x82>
 8022f2e:	2920      	cmp	r1, #32
 8022f30:	d004      	beq.n	8022f3c <arm_cfft_q31+0x78>
 8022f32:	d928      	bls.n	8022f86 <arm_cfft_q31+0xc2>
 8022f34:	2940      	cmp	r1, #64	@ 0x40
 8022f36:	d013      	beq.n	8022f60 <arm_cfft_q31+0x9c>
 8022f38:	2980      	cmp	r1, #128	@ 0x80
 8022f3a:	d1da      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f3c:	6862      	ldr	r2, [r4, #4]
 8022f3e:	0028      	movs	r0, r5
 8022f40:	f7ff fefe 	bl	8022d40 <arm_cfft_radix4by2_inverse_q31>
 8022f44:	e7d5      	b.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f46:	2380      	movs	r3, #128	@ 0x80
 8022f48:	00db      	lsls	r3, r3, #3
 8022f4a:	4299      	cmp	r1, r3
 8022f4c:	d008      	beq.n	8022f60 <arm_cfft_q31+0x9c>
 8022f4e:	d915      	bls.n	8022f7c <arm_cfft_q31+0xb8>
 8022f50:	2380      	movs	r3, #128	@ 0x80
 8022f52:	011b      	lsls	r3, r3, #4
 8022f54:	4299      	cmp	r1, r3
 8022f56:	d0f1      	beq.n	8022f3c <arm_cfft_q31+0x78>
 8022f58:	2380      	movs	r3, #128	@ 0x80
 8022f5a:	015b      	lsls	r3, r3, #5
 8022f5c:	4299      	cmp	r1, r3
 8022f5e:	d1c8      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f60:	2301      	movs	r3, #1
 8022f62:	6862      	ldr	r2, [r4, #4]
 8022f64:	0028      	movs	r0, r5
 8022f66:	f000 fab7 	bl	80234d8 <arm_radix4_butterfly_inverse_q31>
 8022f6a:	e7c2      	b.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f6c:	2380      	movs	r3, #128	@ 0x80
 8022f6e:	009b      	lsls	r3, r3, #2
 8022f70:	4299      	cmp	r1, r3
 8022f72:	d0ba      	beq.n	8022eea <arm_cfft_q31+0x26>
 8022f74:	e7bd      	b.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f76:	2910      	cmp	r1, #16
 8022f78:	d1bb      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f7a:	e7cf      	b.n	8022f1c <arm_cfft_q31+0x58>
 8022f7c:	2380      	movs	r3, #128	@ 0x80
 8022f7e:	009b      	lsls	r3, r3, #2
 8022f80:	4299      	cmp	r1, r3
 8022f82:	d0db      	beq.n	8022f3c <arm_cfft_q31+0x78>
 8022f84:	e7b5      	b.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f86:	2910      	cmp	r1, #16
 8022f88:	d1b3      	bne.n	8022ef2 <arm_cfft_q31+0x2e>
 8022f8a:	e7e9      	b.n	8022f60 <arm_cfft_q31+0x9c>

08022f8c <arm_radix4_butterfly_q31>:
 8022f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f8e:	464d      	mov	r5, r9
 8022f90:	4644      	mov	r4, r8
 8022f92:	465f      	mov	r7, fp
 8022f94:	4656      	mov	r6, sl
 8022f96:	469c      	mov	ip, r3
 8022f98:	b4f0      	push	{r4, r5, r6, r7}
 8022f9a:	b0a7      	sub	sp, #156	@ 0x9c
 8022f9c:	9114      	str	r1, [sp, #80]	@ 0x50
 8022f9e:	0889      	lsrs	r1, r1, #2
 8022fa0:	9310      	str	r3, [sp, #64]	@ 0x40
 8022fa2:	00cb      	lsls	r3, r1, #3
 8022fa4:	0015      	movs	r5, r2
 8022fa6:	9223      	str	r2, [sp, #140]	@ 0x8c
 8022fa8:	18c2      	adds	r2, r0, r3
 8022faa:	000c      	movs	r4, r1
 8022fac:	469a      	mov	sl, r3
 8022fae:	9124      	str	r1, [sp, #144]	@ 0x90
 8022fb0:	18d1      	adds	r1, r2, r3
 8022fb2:	4663      	mov	r3, ip
 8022fb4:	468b      	mov	fp, r1
 8022fb6:	0119      	lsls	r1, r3, #4
 8022fb8:	910d      	str	r1, [sp, #52]	@ 0x34
 8022fba:	00d9      	lsls	r1, r3, #3
 8022fbc:	005b      	lsls	r3, r3, #1
 8022fbe:	4463      	add	r3, ip
 8022fc0:	910e      	str	r1, [sp, #56]	@ 0x38
 8022fc2:	00d9      	lsls	r1, r3, #3
 8022fc4:	465b      	mov	r3, fp
 8022fc6:	44da      	add	sl, fp
 8022fc8:	4690      	mov	r8, r2
 8022fca:	4683      	mov	fp, r0
 8022fcc:	4699      	mov	r9, r3
 8022fce:	9022      	str	r0, [sp, #136]	@ 0x88
 8022fd0:	9025      	str	r0, [sp, #148]	@ 0x94
 8022fd2:	910f      	str	r1, [sp, #60]	@ 0x3c
 8022fd4:	9502      	str	r5, [sp, #8]
 8022fd6:	9500      	str	r5, [sp, #0]
 8022fd8:	9501      	str	r5, [sp, #4]
 8022fda:	9407      	str	r4, [sp, #28]
 8022fdc:	465b      	mov	r3, fp
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	4642      	mov	r2, r8
 8022fe2:	111c      	asrs	r4, r3, #4
 8022fe4:	464b      	mov	r3, r9
 8022fe6:	4658      	mov	r0, fp
 8022fe8:	681b      	ldr	r3, [r3, #0]
 8022fea:	6812      	ldr	r2, [r2, #0]
 8022fec:	111b      	asrs	r3, r3, #4
 8022fee:	18e7      	adds	r7, r4, r3
 8022ff0:	1ae3      	subs	r3, r4, r3
 8022ff2:	1114      	asrs	r4, r2, #4
 8022ff4:	4652      	mov	r2, sl
 8022ff6:	6840      	ldr	r0, [r0, #4]
 8022ff8:	6812      	ldr	r2, [r2, #0]
 8022ffa:	1105      	asrs	r5, r0, #4
 8022ffc:	4648      	mov	r0, r9
 8022ffe:	9303      	str	r3, [sp, #12]
 8023000:	1113      	asrs	r3, r2, #4
 8023002:	18e2      	adds	r2, r4, r3
 8023004:	465c      	mov	r4, fp
 8023006:	6840      	ldr	r0, [r0, #4]
 8023008:	1103      	asrs	r3, r0, #4
 802300a:	18ee      	adds	r6, r5, r3
 802300c:	1ae8      	subs	r0, r5, r3
 802300e:	18bb      	adds	r3, r7, r2
 8023010:	6023      	str	r3, [r4, #0]
 8023012:	4644      	mov	r4, r8
 8023014:	6864      	ldr	r4, [r4, #4]
 8023016:	9004      	str	r0, [sp, #16]
 8023018:	1125      	asrs	r5, r4, #4
 802301a:	4654      	mov	r4, sl
 802301c:	6864      	ldr	r4, [r4, #4]
 802301e:	1123      	asrs	r3, r4, #4
 8023020:	465c      	mov	r4, fp
 8023022:	18eb      	adds	r3, r5, r3
 8023024:	18f1      	adds	r1, r6, r3
 8023026:	6061      	str	r1, [r4, #4]
 8023028:	4655      	mov	r5, sl
 802302a:	4644      	mov	r4, r8
 802302c:	686d      	ldr	r5, [r5, #4]
 802302e:	6864      	ldr	r4, [r4, #4]
 8023030:	1129      	asrs	r1, r5, #4
 8023032:	1124      	asrs	r4, r4, #4
 8023034:	1a64      	subs	r4, r4, r1
 8023036:	4641      	mov	r1, r8
 8023038:	6809      	ldr	r1, [r1, #0]
 802303a:	9405      	str	r4, [sp, #20]
 802303c:	1108      	asrs	r0, r1, #4
 802303e:	4651      	mov	r1, sl
 8023040:	6809      	ldr	r1, [r1, #0]
 8023042:	1abc      	subs	r4, r7, r2
 8023044:	1109      	asrs	r1, r1, #4
 8023046:	1a41      	subs	r1, r0, r1
 8023048:	17e2      	asrs	r2, r4, #31
 802304a:	9106      	str	r1, [sp, #24]
 802304c:	0011      	movs	r1, r2
 802304e:	9a01      	ldr	r2, [sp, #4]
 8023050:	9108      	str	r1, [sp, #32]
 8023052:	6817      	ldr	r7, [r2, #0]
 8023054:	17fd      	asrs	r5, r7, #31
 8023056:	0028      	movs	r0, r5
 8023058:	1af5      	subs	r5, r6, r3
 802305a:	17ee      	asrs	r6, r5, #31
 802305c:	960a      	str	r6, [sp, #40]	@ 0x28
 802305e:	6856      	ldr	r6, [r2, #4]
 8023060:	9009      	str	r0, [sp, #36]	@ 0x24
 8023062:	17f3      	asrs	r3, r6, #31
 8023064:	003a      	movs	r2, r7
 8023066:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023068:	0003      	movs	r3, r0
 802306a:	0020      	movs	r0, r4
 802306c:	f7dd faa8 	bl	80005c0 <__aeabi_lmul>
 8023070:	0032      	movs	r2, r6
 8023072:	17f3      	asrs	r3, r6, #31
 8023074:	910c      	str	r1, [sp, #48]	@ 0x30
 8023076:	0028      	movs	r0, r5
 8023078:	17e9      	asrs	r1, r5, #31
 802307a:	f7dd faa1 	bl	80005c0 <__aeabi_lmul>
 802307e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8023080:	002a      	movs	r2, r5
 8023082:	4684      	mov	ip, r0
 8023084:	4640      	mov	r0, r8
 8023086:	4461      	add	r1, ip
 8023088:	0049      	lsls	r1, r1, #1
 802308a:	6001      	str	r1, [r0, #0]
 802308c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802308e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023090:	0038      	movs	r0, r7
 8023092:	f7dd fa95 	bl	80005c0 <__aeabi_lmul>
 8023096:	0032      	movs	r2, r6
 8023098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802309a:	000d      	movs	r5, r1
 802309c:	0020      	movs	r0, r4
 802309e:	9908      	ldr	r1, [sp, #32]
 80230a0:	f7dd fa8e 	bl	80005c0 <__aeabi_lmul>
 80230a4:	4646      	mov	r6, r8
 80230a6:	1a6d      	subs	r5, r5, r1
 80230a8:	006d      	lsls	r5, r5, #1
 80230aa:	6075      	str	r5, [r6, #4]
 80230ac:	9903      	ldr	r1, [sp, #12]
 80230ae:	9d05      	ldr	r5, [sp, #20]
 80230b0:	000c      	movs	r4, r1
 80230b2:	46ac      	mov	ip, r5
 80230b4:	4464      	add	r4, ip
 80230b6:	17e6      	asrs	r6, r4, #31
 80230b8:	0031      	movs	r1, r6
 80230ba:	9b00      	ldr	r3, [sp, #0]
 80230bc:	9804      	ldr	r0, [sp, #16]
 80230be:	681e      	ldr	r6, [r3, #0]
 80230c0:	17f7      	asrs	r7, r6, #31
 80230c2:	9709      	str	r7, [sp, #36]	@ 0x24
 80230c4:	9f06      	ldr	r7, [sp, #24]
 80230c6:	0032      	movs	r2, r6
 80230c8:	1bc7      	subs	r7, r0, r7
 80230ca:	17fd      	asrs	r5, r7, #31
 80230cc:	950a      	str	r5, [sp, #40]	@ 0x28
 80230ce:	685d      	ldr	r5, [r3, #4]
 80230d0:	17f3      	asrs	r3, r6, #31
 80230d2:	17e8      	asrs	r0, r5, #31
 80230d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80230d6:	0020      	movs	r0, r4
 80230d8:	9108      	str	r1, [sp, #32]
 80230da:	f7dd fa71 	bl	80005c0 <__aeabi_lmul>
 80230de:	002a      	movs	r2, r5
 80230e0:	17eb      	asrs	r3, r5, #31
 80230e2:	910c      	str	r1, [sp, #48]	@ 0x30
 80230e4:	0038      	movs	r0, r7
 80230e6:	17f9      	asrs	r1, r7, #31
 80230e8:	f7dd fa6a 	bl	80005c0 <__aeabi_lmul>
 80230ec:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80230ee:	003a      	movs	r2, r7
 80230f0:	4684      	mov	ip, r0
 80230f2:	4648      	mov	r0, r9
 80230f4:	4461      	add	r1, ip
 80230f6:	0049      	lsls	r1, r1, #1
 80230f8:	6001      	str	r1, [r0, #0]
 80230fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80230fc:	0030      	movs	r0, r6
 80230fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8023100:	f7dd fa5e 	bl	80005c0 <__aeabi_lmul>
 8023104:	002a      	movs	r2, r5
 8023106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023108:	000e      	movs	r6, r1
 802310a:	0020      	movs	r0, r4
 802310c:	9908      	ldr	r1, [sp, #32]
 802310e:	f7dd fa57 	bl	80005c0 <__aeabi_lmul>
 8023112:	464c      	mov	r4, r9
 8023114:	9d05      	ldr	r5, [sp, #20]
 8023116:	1a76      	subs	r6, r6, r1
 8023118:	9903      	ldr	r1, [sp, #12]
 802311a:	0076      	lsls	r6, r6, #1
 802311c:	6066      	str	r6, [r4, #4]
 802311e:	1b4c      	subs	r4, r1, r5
 8023120:	9e06      	ldr	r6, [sp, #24]
 8023122:	17e1      	asrs	r1, r4, #31
 8023124:	9103      	str	r1, [sp, #12]
 8023126:	9902      	ldr	r1, [sp, #8]
 8023128:	46b4      	mov	ip, r6
 802312a:	680f      	ldr	r7, [r1, #0]
 802312c:	9804      	ldr	r0, [sp, #16]
 802312e:	17fd      	asrs	r5, r7, #31
 8023130:	002b      	movs	r3, r5
 8023132:	684e      	ldr	r6, [r1, #4]
 8023134:	4460      	add	r0, ip
 8023136:	0005      	movs	r5, r0
 8023138:	17c0      	asrs	r0, r0, #31
 802313a:	9005      	str	r0, [sp, #20]
 802313c:	17f0      	asrs	r0, r6, #31
 802313e:	9006      	str	r0, [sp, #24]
 8023140:	003a      	movs	r2, r7
 8023142:	0020      	movs	r0, r4
 8023144:	17e1      	asrs	r1, r4, #31
 8023146:	9304      	str	r3, [sp, #16]
 8023148:	f7dd fa3a 	bl	80005c0 <__aeabi_lmul>
 802314c:	0032      	movs	r2, r6
 802314e:	9108      	str	r1, [sp, #32]
 8023150:	17f3      	asrs	r3, r6, #31
 8023152:	0028      	movs	r0, r5
 8023154:	17e9      	asrs	r1, r5, #31
 8023156:	f7dd fa33 	bl	80005c0 <__aeabi_lmul>
 802315a:	9808      	ldr	r0, [sp, #32]
 802315c:	002a      	movs	r2, r5
 802315e:	4684      	mov	ip, r0
 8023160:	4650      	mov	r0, sl
 8023162:	4461      	add	r1, ip
 8023164:	0049      	lsls	r1, r1, #1
 8023166:	6001      	str	r1, [r0, #0]
 8023168:	9b05      	ldr	r3, [sp, #20]
 802316a:	9904      	ldr	r1, [sp, #16]
 802316c:	0038      	movs	r0, r7
 802316e:	f7dd fa27 	bl	80005c0 <__aeabi_lmul>
 8023172:	0020      	movs	r0, r4
 8023174:	2408      	movs	r4, #8
 8023176:	000d      	movs	r5, r1
 8023178:	0032      	movs	r2, r6
 802317a:	9b06      	ldr	r3, [sp, #24]
 802317c:	9903      	ldr	r1, [sp, #12]
 802317e:	f7dd fa1f 	bl	80005c0 <__aeabi_lmul>
 8023182:	46a4      	mov	ip, r4
 8023184:	4650      	mov	r0, sl
 8023186:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023188:	44e3      	add	fp, ip
 802318a:	44e0      	add	r8, ip
 802318c:	44e1      	add	r9, ip
 802318e:	44e2      	add	sl, ip
 8023190:	46a4      	mov	ip, r4
 8023192:	1a6d      	subs	r5, r5, r1
 8023194:	006d      	lsls	r5, r5, #1
 8023196:	9a01      	ldr	r2, [sp, #4]
 8023198:	6045      	str	r5, [r0, #4]
 802319a:	9807      	ldr	r0, [sp, #28]
 802319c:	4462      	add	r2, ip
 802319e:	3801      	subs	r0, #1
 80231a0:	9201      	str	r2, [sp, #4]
 80231a2:	9007      	str	r0, [sp, #28]
 80231a4:	9b00      	ldr	r3, [sp, #0]
 80231a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80231a8:	9902      	ldr	r1, [sp, #8]
 80231aa:	4694      	mov	ip, r2
 80231ac:	4463      	add	r3, ip
 80231ae:	9300      	str	r3, [sp, #0]
 80231b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80231b2:	469c      	mov	ip, r3
 80231b4:	4461      	add	r1, ip
 80231b6:	9102      	str	r1, [sp, #8]
 80231b8:	2800      	cmp	r0, #0
 80231ba:	d000      	beq.n	80231be <arm_radix4_butterfly_q31+0x232>
 80231bc:	e70e      	b.n	8022fdc <arm_radix4_butterfly_q31+0x50>
 80231be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80231c0:	009b      	lsls	r3, r3, #2
 80231c2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80231c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80231c6:	9320      	str	r3, [sp, #128]	@ 0x80
 80231c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80231ca:	2b04      	cmp	r3, #4
 80231cc:	d800      	bhi.n	80231d0 <arm_radix4_butterfly_q31+0x244>
 80231ce:	e180      	b.n	80234d2 <arm_radix4_butterfly_q31+0x546>
 80231d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80231d2:	0893      	lsrs	r3, r2, #2
 80231d4:	1e59      	subs	r1, r3, #1
 80231d6:	9321      	str	r3, [sp, #132]	@ 0x84
 80231d8:	00db      	lsls	r3, r3, #3
 80231da:	931b      	str	r3, [sp, #108]	@ 0x6c
 80231dc:	00d3      	lsls	r3, r2, #3
 80231de:	9300      	str	r3, [sp, #0]
 80231e0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80231e2:	911a      	str	r1, [sp, #104]	@ 0x68
 80231e4:	00da      	lsls	r2, r3, #3
 80231e6:	921e      	str	r2, [sp, #120]	@ 0x78
 80231e8:	011a      	lsls	r2, r3, #4
 80231ea:	921d      	str	r2, [sp, #116]	@ 0x74
 80231ec:	001a      	movs	r2, r3
 80231ee:	4694      	mov	ip, r2
 80231f0:	005b      	lsls	r3, r3, #1
 80231f2:	4463      	add	r3, ip
 80231f4:	00db      	lsls	r3, r3, #3
 80231f6:	931c      	str	r3, [sp, #112]	@ 0x70
 80231f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80231fa:	9317      	str	r3, [sp, #92]	@ 0x5c
 80231fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80231fe:	9318      	str	r3, [sp, #96]	@ 0x60
 8023200:	9319      	str	r3, [sp, #100]	@ 0x64
 8023202:	9316      	str	r3, [sp, #88]	@ 0x58
 8023204:	2300      	movs	r3, #0
 8023206:	9315      	str	r3, [sp, #84]	@ 0x54
 8023208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802320a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802320c:	681a      	ldr	r2, [r3, #0]
 802320e:	685b      	ldr	r3, [r3, #4]
 8023210:	9205      	str	r2, [sp, #20]
 8023212:	9306      	str	r3, [sp, #24]
 8023214:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8023216:	468c      	mov	ip, r1
 8023218:	681a      	ldr	r2, [r3, #0]
 802321a:	685b      	ldr	r3, [r3, #4]
 802321c:	9207      	str	r2, [sp, #28]
 802321e:	9308      	str	r3, [sp, #32]
 8023220:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8023222:	681a      	ldr	r2, [r3, #0]
 8023224:	685b      	ldr	r3, [r3, #4]
 8023226:	9209      	str	r2, [sp, #36]	@ 0x24
 8023228:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802322a:	930a      	str	r3, [sp, #40]	@ 0x28
 802322c:	0013      	movs	r3, r2
 802322e:	4463      	add	r3, ip
 8023230:	4698      	mov	r8, r3
 8023232:	0013      	movs	r3, r2
 8023234:	4442      	add	r2, r8
 8023236:	4691      	mov	r9, r2
 8023238:	001a      	movs	r2, r3
 802323a:	444a      	add	r2, r9
 802323c:	4692      	mov	sl, r2
 802323e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023240:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8023242:	4293      	cmp	r3, r2
 8023244:	d800      	bhi.n	8023248 <arm_radix4_butterfly_q31+0x2bc>
 8023246:	e0dd      	b.n	8023404 <arm_radix4_butterfly_q31+0x478>
 8023248:	4694      	mov	ip, r2
 802324a:	468b      	mov	fp, r1
 802324c:	4644      	mov	r4, r8
 802324e:	4655      	mov	r5, sl
 8023250:	9b07      	ldr	r3, [sp, #28]
 8023252:	17db      	asrs	r3, r3, #31
 8023254:	930c      	str	r3, [sp, #48]	@ 0x30
 8023256:	9b08      	ldr	r3, [sp, #32]
 8023258:	17db      	asrs	r3, r3, #31
 802325a:	930d      	str	r3, [sp, #52]	@ 0x34
 802325c:	9b05      	ldr	r3, [sp, #20]
 802325e:	17db      	asrs	r3, r3, #31
 8023260:	930e      	str	r3, [sp, #56]	@ 0x38
 8023262:	9b06      	ldr	r3, [sp, #24]
 8023264:	17db      	asrs	r3, r3, #31
 8023266:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802326a:	17db      	asrs	r3, r3, #31
 802326c:	9310      	str	r3, [sp, #64]	@ 0x40
 802326e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023270:	17db      	asrs	r3, r3, #31
 8023272:	9311      	str	r3, [sp, #68]	@ 0x44
 8023274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023276:	4463      	add	r3, ip
 8023278:	930b      	str	r3, [sp, #44]	@ 0x2c
 802327a:	465b      	mov	r3, fp
 802327c:	4659      	mov	r1, fp
 802327e:	681a      	ldr	r2, [r3, #0]
 8023280:	464b      	mov	r3, r9
 8023282:	684f      	ldr	r7, [r1, #4]
 8023284:	4649      	mov	r1, r9
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	18d6      	adds	r6, r2, r3
 802328a:	1ad3      	subs	r3, r2, r3
 802328c:	9301      	str	r3, [sp, #4]
 802328e:	684b      	ldr	r3, [r1, #4]
 8023290:	18f8      	adds	r0, r7, r3
 8023292:	1af9      	subs	r1, r7, r3
 8023294:	6827      	ldr	r7, [r4, #0]
 8023296:	9102      	str	r1, [sp, #8]
 8023298:	003a      	movs	r2, r7
 802329a:	682f      	ldr	r7, [r5, #0]
 802329c:	46bc      	mov	ip, r7
 802329e:	465f      	mov	r7, fp
 80232a0:	4462      	add	r2, ip
 80232a2:	18b3      	adds	r3, r6, r2
 80232a4:	109b      	asrs	r3, r3, #2
 80232a6:	603b      	str	r3, [r7, #0]
 80232a8:	6867      	ldr	r7, [r4, #4]
 80232aa:	1ab6      	subs	r6, r6, r2
 80232ac:	46b8      	mov	r8, r7
 80232ae:	686f      	ldr	r7, [r5, #4]
 80232b0:	17f2      	asrs	r2, r6, #31
 80232b2:	46bc      	mov	ip, r7
 80232b4:	44e0      	add	r8, ip
 80232b6:	4643      	mov	r3, r8
 80232b8:	465f      	mov	r7, fp
 80232ba:	18c1      	adds	r1, r0, r3
 80232bc:	1089      	asrs	r1, r1, #2
 80232be:	6079      	str	r1, [r7, #4]
 80232c0:	9900      	ldr	r1, [sp, #0]
 80232c2:	4690      	mov	r8, r2
 80232c4:	468c      	mov	ip, r1
 80232c6:	6867      	ldr	r7, [r4, #4]
 80232c8:	6869      	ldr	r1, [r5, #4]
 80232ca:	44e3      	add	fp, ip
 80232cc:	1a7f      	subs	r7, r7, r1
 80232ce:	9703      	str	r7, [sp, #12]
 80232d0:	6829      	ldr	r1, [r5, #0]
 80232d2:	6827      	ldr	r7, [r4, #0]
 80232d4:	1a7f      	subs	r7, r7, r1
 80232d6:	9704      	str	r7, [sp, #16]
 80232d8:	1ac7      	subs	r7, r0, r3
 80232da:	17fa      	asrs	r2, r7, #31
 80232dc:	4692      	mov	sl, r2
 80232de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80232e0:	9a07      	ldr	r2, [sp, #28]
 80232e2:	0030      	movs	r0, r6
 80232e4:	4641      	mov	r1, r8
 80232e6:	f7dd f96b 	bl	80005c0 <__aeabi_lmul>
 80232ea:	9a08      	ldr	r2, [sp, #32]
 80232ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80232ee:	9112      	str	r1, [sp, #72]	@ 0x48
 80232f0:	0038      	movs	r0, r7
 80232f2:	4651      	mov	r1, sl
 80232f4:	f7dd f964 	bl	80005c0 <__aeabi_lmul>
 80232f8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80232fa:	9a07      	ldr	r2, [sp, #28]
 80232fc:	4684      	mov	ip, r0
 80232fe:	4461      	add	r1, ip
 8023300:	1049      	asrs	r1, r1, #1
 8023302:	6021      	str	r1, [r4, #0]
 8023304:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023306:	0038      	movs	r0, r7
 8023308:	4651      	mov	r1, sl
 802330a:	f7dd f959 	bl	80005c0 <__aeabi_lmul>
 802330e:	9a08      	ldr	r2, [sp, #32]
 8023310:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023312:	000f      	movs	r7, r1
 8023314:	0030      	movs	r0, r6
 8023316:	4641      	mov	r1, r8
 8023318:	f7dd f952 	bl	80005c0 <__aeabi_lmul>
 802331c:	9b00      	ldr	r3, [sp, #0]
 802331e:	9a01      	ldr	r2, [sp, #4]
 8023320:	469c      	mov	ip, r3
 8023322:	9803      	ldr	r0, [sp, #12]
 8023324:	1a7f      	subs	r7, r7, r1
 8023326:	107f      	asrs	r7, r7, #1
 8023328:	6067      	str	r7, [r4, #4]
 802332a:	0016      	movs	r6, r2
 802332c:	4464      	add	r4, ip
 802332e:	4684      	mov	ip, r0
 8023330:	4466      	add	r6, ip
 8023332:	17f2      	asrs	r2, r6, #31
 8023334:	4690      	mov	r8, r2
 8023336:	9902      	ldr	r1, [sp, #8]
 8023338:	9f04      	ldr	r7, [sp, #16]
 802333a:	0030      	movs	r0, r6
 802333c:	1bcf      	subs	r7, r1, r7
 802333e:	17fa      	asrs	r2, r7, #31
 8023340:	4692      	mov	sl, r2
 8023342:	4641      	mov	r1, r8
 8023344:	9a05      	ldr	r2, [sp, #20]
 8023346:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023348:	f7dd f93a 	bl	80005c0 <__aeabi_lmul>
 802334c:	9a06      	ldr	r2, [sp, #24]
 802334e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023350:	9112      	str	r1, [sp, #72]	@ 0x48
 8023352:	0038      	movs	r0, r7
 8023354:	4651      	mov	r1, sl
 8023356:	f7dd f933 	bl	80005c0 <__aeabi_lmul>
 802335a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802335c:	9a05      	ldr	r2, [sp, #20]
 802335e:	4684      	mov	ip, r0
 8023360:	4648      	mov	r0, r9
 8023362:	4461      	add	r1, ip
 8023364:	1049      	asrs	r1, r1, #1
 8023366:	6001      	str	r1, [r0, #0]
 8023368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802336a:	0038      	movs	r0, r7
 802336c:	4651      	mov	r1, sl
 802336e:	f7dd f927 	bl	80005c0 <__aeabi_lmul>
 8023372:	9a06      	ldr	r2, [sp, #24]
 8023374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023376:	000f      	movs	r7, r1
 8023378:	0030      	movs	r0, r6
 802337a:	4641      	mov	r1, r8
 802337c:	f7dd f920 	bl	80005c0 <__aeabi_lmul>
 8023380:	464e      	mov	r6, r9
 8023382:	9a00      	ldr	r2, [sp, #0]
 8023384:	9b01      	ldr	r3, [sp, #4]
 8023386:	4694      	mov	ip, r2
 8023388:	9803      	ldr	r0, [sp, #12]
 802338a:	1a7f      	subs	r7, r7, r1
 802338c:	107f      	asrs	r7, r7, #1
 802338e:	6077      	str	r7, [r6, #4]
 8023390:	1a1e      	subs	r6, r3, r0
 8023392:	9b04      	ldr	r3, [sp, #16]
 8023394:	44e1      	add	r9, ip
 8023396:	469c      	mov	ip, r3
 8023398:	17f0      	asrs	r0, r6, #31
 802339a:	4680      	mov	r8, r0
 802339c:	9902      	ldr	r1, [sp, #8]
 802339e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80233a0:	4461      	add	r1, ip
 80233a2:	17cb      	asrs	r3, r1, #31
 80233a4:	000f      	movs	r7, r1
 80233a6:	469a      	mov	sl, r3
 80233a8:	0030      	movs	r0, r6
 80233aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233ac:	4641      	mov	r1, r8
 80233ae:	f7dd f907 	bl	80005c0 <__aeabi_lmul>
 80233b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80233b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80233b6:	9101      	str	r1, [sp, #4]
 80233b8:	0038      	movs	r0, r7
 80233ba:	4651      	mov	r1, sl
 80233bc:	f7dd f900 	bl	80005c0 <__aeabi_lmul>
 80233c0:	9801      	ldr	r0, [sp, #4]
 80233c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80233c4:	4684      	mov	ip, r0
 80233c6:	4461      	add	r1, ip
 80233c8:	1049      	asrs	r1, r1, #1
 80233ca:	6029      	str	r1, [r5, #0]
 80233cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80233ce:	0038      	movs	r0, r7
 80233d0:	4651      	mov	r1, sl
 80233d2:	f7dd f8f5 	bl	80005c0 <__aeabi_lmul>
 80233d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80233d8:	000f      	movs	r7, r1
 80233da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80233dc:	0030      	movs	r0, r6
 80233de:	4641      	mov	r1, r8
 80233e0:	f7dd f8ee 	bl	80005c0 <__aeabi_lmul>
 80233e4:	1a7f      	subs	r7, r7, r1
 80233e6:	107f      	asrs	r7, r7, #1
 80233e8:	606f      	str	r7, [r5, #4]
 80233ea:	9a00      	ldr	r2, [sp, #0]
 80233ec:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80233ee:	4694      	mov	ip, r2
 80233f0:	4465      	add	r5, ip
 80233f2:	468c      	mov	ip, r1
 80233f4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80233f6:	0013      	movs	r3, r2
 80233f8:	4462      	add	r2, ip
 80233fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80233fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80233fe:	429a      	cmp	r2, r3
 8023400:	d900      	bls.n	8023404 <arm_radix4_butterfly_q31+0x478>
 8023402:	e73a      	b.n	802327a <arm_radix4_butterfly_q31+0x2ee>
 8023404:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023406:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023408:	468c      	mov	ip, r1
 802340a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802340c:	4462      	add	r2, ip
 802340e:	468c      	mov	ip, r1
 8023410:	9216      	str	r2, [sp, #88]	@ 0x58
 8023412:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023414:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023416:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023418:	4462      	add	r2, ip
 802341a:	468c      	mov	ip, r1
 802341c:	9219      	str	r2, [sp, #100]	@ 0x64
 802341e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023420:	3301      	adds	r3, #1
 8023422:	4462      	add	r2, ip
 8023424:	9218      	str	r2, [sp, #96]	@ 0x60
 8023426:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023428:	9315      	str	r3, [sp, #84]	@ 0x54
 802342a:	3208      	adds	r2, #8
 802342c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802342e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023430:	4293      	cmp	r3, r2
 8023432:	d800      	bhi.n	8023436 <arm_radix4_butterfly_q31+0x4aa>
 8023434:	e6e8      	b.n	8023208 <arm_radix4_butterfly_q31+0x27c>
 8023436:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023438:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802343a:	009b      	lsls	r3, r3, #2
 802343c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802343e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023440:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023442:	089b      	lsrs	r3, r3, #2
 8023444:	9320      	str	r3, [sp, #128]	@ 0x80
 8023446:	2b04      	cmp	r3, #4
 8023448:	d900      	bls.n	802344c <arm_radix4_butterfly_q31+0x4c0>
 802344a:	e6c1      	b.n	80231d0 <arm_radix4_butterfly_q31+0x244>
 802344c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802344e:	469a      	mov	sl, r3
 8023450:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023452:	691c      	ldr	r4, [r3, #16]
 8023454:	685a      	ldr	r2, [r3, #4]
 8023456:	46a1      	mov	r9, r4
 8023458:	4690      	mov	r8, r2
 802345a:	6819      	ldr	r1, [r3, #0]
 802345c:	689a      	ldr	r2, [r3, #8]
 802345e:	699f      	ldr	r7, [r3, #24]
 8023460:	188d      	adds	r5, r1, r2
 8023462:	444d      	add	r5, r9
 8023464:	19ed      	adds	r5, r5, r7
 8023466:	69de      	ldr	r6, [r3, #28]
 8023468:	601d      	str	r5, [r3, #0]
 802346a:	4645      	mov	r5, r8
 802346c:	46b4      	mov	ip, r6
 802346e:	68d8      	ldr	r0, [r3, #12]
 8023470:	695c      	ldr	r4, [r3, #20]
 8023472:	182d      	adds	r5, r5, r0
 8023474:	192d      	adds	r5, r5, r4
 8023476:	4465      	add	r5, ip
 8023478:	605d      	str	r5, [r3, #4]
 802347a:	1a8d      	subs	r5, r1, r2
 802347c:	444d      	add	r5, r9
 802347e:	1bed      	subs	r5, r5, r7
 8023480:	609d      	str	r5, [r3, #8]
 8023482:	4645      	mov	r5, r8
 8023484:	1a2d      	subs	r5, r5, r0
 8023486:	192d      	adds	r5, r5, r4
 8023488:	1bad      	subs	r5, r5, r6
 802348a:	464e      	mov	r6, r9
 802348c:	60dd      	str	r5, [r3, #12]
 802348e:	180d      	adds	r5, r1, r0
 8023490:	1bad      	subs	r5, r5, r6
 8023492:	4666      	mov	r6, ip
 8023494:	1bad      	subs	r5, r5, r6
 8023496:	611d      	str	r5, [r3, #16]
 8023498:	4645      	mov	r5, r8
 802349a:	1aad      	subs	r5, r5, r2
 802349c:	4442      	add	r2, r8
 802349e:	1b12      	subs	r2, r2, r4
 80234a0:	1bd2      	subs	r2, r2, r7
 80234a2:	1a08      	subs	r0, r1, r0
 80234a4:	61da      	str	r2, [r3, #28]
 80234a6:	4649      	mov	r1, r9
 80234a8:	2201      	movs	r2, #1
 80234aa:	1a41      	subs	r1, r0, r1
 80234ac:	4252      	negs	r2, r2
 80234ae:	4461      	add	r1, ip
 80234b0:	4694      	mov	ip, r2
 80234b2:	44e2      	add	sl, ip
 80234b4:	4652      	mov	r2, sl
 80234b6:	1b2d      	subs	r5, r5, r4
 80234b8:	19ed      	adds	r5, r5, r7
 80234ba:	615d      	str	r5, [r3, #20]
 80234bc:	6199      	str	r1, [r3, #24]
 80234be:	3320      	adds	r3, #32
 80234c0:	2a00      	cmp	r2, #0
 80234c2:	d1c6      	bne.n	8023452 <arm_radix4_butterfly_q31+0x4c6>
 80234c4:	b027      	add	sp, #156	@ 0x9c
 80234c6:	bc3c      	pop	{r2, r3, r4, r5}
 80234c8:	4690      	mov	r8, r2
 80234ca:	4699      	mov	r9, r3
 80234cc:	46a2      	mov	sl, r4
 80234ce:	46ab      	mov	fp, r5
 80234d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80234d2:	469a      	mov	sl, r3
 80234d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80234d6:	e7bc      	b.n	8023452 <arm_radix4_butterfly_q31+0x4c6>

080234d8 <arm_radix4_butterfly_inverse_q31>:
 80234d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80234da:	464d      	mov	r5, r9
 80234dc:	4644      	mov	r4, r8
 80234de:	465f      	mov	r7, fp
 80234e0:	4656      	mov	r6, sl
 80234e2:	b4f0      	push	{r4, r5, r6, r7}
 80234e4:	b0a7      	sub	sp, #156	@ 0x9c
 80234e6:	469c      	mov	ip, r3
 80234e8:	9114      	str	r1, [sp, #80]	@ 0x50
 80234ea:	0889      	lsrs	r1, r1, #2
 80234ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80234ee:	00cb      	lsls	r3, r1, #3
 80234f0:	0015      	movs	r5, r2
 80234f2:	9223      	str	r2, [sp, #140]	@ 0x8c
 80234f4:	18c2      	adds	r2, r0, r3
 80234f6:	000c      	movs	r4, r1
 80234f8:	9124      	str	r1, [sp, #144]	@ 0x90
 80234fa:	18d1      	adds	r1, r2, r3
 80234fc:	468b      	mov	fp, r1
 80234fe:	469a      	mov	sl, r3
 8023500:	4663      	mov	r3, ip
 8023502:	44da      	add	sl, fp
 8023504:	46d0      	mov	r8, sl
 8023506:	4681      	mov	r9, r0
 8023508:	4692      	mov	sl, r2
 802350a:	0119      	lsls	r1, r3, #4
 802350c:	910d      	str	r1, [sp, #52]	@ 0x34
 802350e:	00d9      	lsls	r1, r3, #3
 8023510:	005b      	lsls	r3, r3, #1
 8023512:	4463      	add	r3, ip
 8023514:	910e      	str	r1, [sp, #56]	@ 0x38
 8023516:	00d9      	lsls	r1, r3, #3
 8023518:	9022      	str	r0, [sp, #136]	@ 0x88
 802351a:	9025      	str	r0, [sp, #148]	@ 0x94
 802351c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802351e:	9502      	str	r5, [sp, #8]
 8023520:	9500      	str	r5, [sp, #0]
 8023522:	9501      	str	r5, [sp, #4]
 8023524:	9409      	str	r4, [sp, #36]	@ 0x24
 8023526:	464b      	mov	r3, r9
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	4652      	mov	r2, sl
 802352c:	111c      	asrs	r4, r3, #4
 802352e:	465b      	mov	r3, fp
 8023530:	4648      	mov	r0, r9
 8023532:	681b      	ldr	r3, [r3, #0]
 8023534:	6812      	ldr	r2, [r2, #0]
 8023536:	6840      	ldr	r0, [r0, #4]
 8023538:	111b      	asrs	r3, r3, #4
 802353a:	18e7      	adds	r7, r4, r3
 802353c:	1ae3      	subs	r3, r4, r3
 802353e:	1114      	asrs	r4, r2, #4
 8023540:	4642      	mov	r2, r8
 8023542:	1105      	asrs	r5, r0, #4
 8023544:	4658      	mov	r0, fp
 8023546:	6812      	ldr	r2, [r2, #0]
 8023548:	6840      	ldr	r0, [r0, #4]
 802354a:	9303      	str	r3, [sp, #12]
 802354c:	1113      	asrs	r3, r2, #4
 802354e:	18e2      	adds	r2, r4, r3
 8023550:	1103      	asrs	r3, r0, #4
 8023552:	18ee      	adds	r6, r5, r3
 8023554:	1ae8      	subs	r0, r5, r3
 8023556:	464d      	mov	r5, r9
 8023558:	18bb      	adds	r3, r7, r2
 802355a:	602b      	str	r3, [r5, #0]
 802355c:	4641      	mov	r1, r8
 802355e:	4655      	mov	r5, sl
 8023560:	6849      	ldr	r1, [r1, #4]
 8023562:	686d      	ldr	r5, [r5, #4]
 8023564:	110b      	asrs	r3, r1, #4
 8023566:	112d      	asrs	r5, r5, #4
 8023568:	18eb      	adds	r3, r5, r3
 802356a:	464d      	mov	r5, r9
 802356c:	18f1      	adds	r1, r6, r3
 802356e:	6069      	str	r1, [r5, #4]
 8023570:	4655      	mov	r5, sl
 8023572:	686d      	ldr	r5, [r5, #4]
 8023574:	9004      	str	r0, [sp, #16]
 8023576:	112c      	asrs	r4, r5, #4
 8023578:	4645      	mov	r5, r8
 802357a:	686d      	ldr	r5, [r5, #4]
 802357c:	1129      	asrs	r1, r5, #4
 802357e:	1a65      	subs	r5, r4, r1
 8023580:	4651      	mov	r1, sl
 8023582:	6809      	ldr	r1, [r1, #0]
 8023584:	1abc      	subs	r4, r7, r2
 8023586:	1108      	asrs	r0, r1, #4
 8023588:	4641      	mov	r1, r8
 802358a:	17e2      	asrs	r2, r4, #31
 802358c:	6809      	ldr	r1, [r1, #0]
 802358e:	9207      	str	r2, [sp, #28]
 8023590:	9a01      	ldr	r2, [sp, #4]
 8023592:	1109      	asrs	r1, r1, #4
 8023594:	6817      	ldr	r7, [r2, #0]
 8023596:	1a41      	subs	r1, r0, r1
 8023598:	9106      	str	r1, [sp, #24]
 802359a:	0039      	movs	r1, r7
 802359c:	17ff      	asrs	r7, r7, #31
 802359e:	0038      	movs	r0, r7
 80235a0:	9505      	str	r5, [sp, #20]
 80235a2:	1af5      	subs	r5, r6, r3
 80235a4:	17ef      	asrs	r7, r5, #31
 80235a6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80235a8:	6857      	ldr	r7, [r2, #4]
 80235aa:	0003      	movs	r3, r0
 80235ac:	17fe      	asrs	r6, r7, #31
 80235ae:	000a      	movs	r2, r1
 80235b0:	9108      	str	r1, [sp, #32]
 80235b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80235b4:	17e1      	asrs	r1, r4, #31
 80235b6:	0020      	movs	r0, r4
 80235b8:	960c      	str	r6, [sp, #48]	@ 0x30
 80235ba:	f7dd f801 	bl	80005c0 <__aeabi_lmul>
 80235be:	003a      	movs	r2, r7
 80235c0:	17fb      	asrs	r3, r7, #31
 80235c2:	000e      	movs	r6, r1
 80235c4:	0028      	movs	r0, r5
 80235c6:	17e9      	asrs	r1, r5, #31
 80235c8:	f7dc fffa 	bl	80005c0 <__aeabi_lmul>
 80235cc:	4653      	mov	r3, sl
 80235ce:	1a76      	subs	r6, r6, r1
 80235d0:	0076      	lsls	r6, r6, #1
 80235d2:	601e      	str	r6, [r3, #0]
 80235d4:	002a      	movs	r2, r5
 80235d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80235d8:	9808      	ldr	r0, [sp, #32]
 80235da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80235dc:	f7dc fff0 	bl	80005c0 <__aeabi_lmul>
 80235e0:	003a      	movs	r2, r7
 80235e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80235e4:	000d      	movs	r5, r1
 80235e6:	0020      	movs	r0, r4
 80235e8:	9907      	ldr	r1, [sp, #28]
 80235ea:	f7dc ffe9 	bl	80005c0 <__aeabi_lmul>
 80235ee:	4657      	mov	r7, sl
 80235f0:	186d      	adds	r5, r5, r1
 80235f2:	006d      	lsls	r5, r5, #1
 80235f4:	607d      	str	r5, [r7, #4]
 80235f6:	9b03      	ldr	r3, [sp, #12]
 80235f8:	9e06      	ldr	r6, [sp, #24]
 80235fa:	9d05      	ldr	r5, [sp, #20]
 80235fc:	46b4      	mov	ip, r6
 80235fe:	1b5d      	subs	r5, r3, r5
 8023600:	9b00      	ldr	r3, [sp, #0]
 8023602:	17ef      	asrs	r7, r5, #31
 8023604:	0039      	movs	r1, r7
 8023606:	681f      	ldr	r7, [r3, #0]
 8023608:	17fc      	asrs	r4, r7, #31
 802360a:	0020      	movs	r0, r4
 802360c:	9c04      	ldr	r4, [sp, #16]
 802360e:	4464      	add	r4, ip
 8023610:	17e6      	asrs	r6, r4, #31
 8023612:	9407      	str	r4, [sp, #28]
 8023614:	9608      	str	r6, [sp, #32]
 8023616:	685e      	ldr	r6, [r3, #4]
 8023618:	900b      	str	r0, [sp, #44]	@ 0x2c
 802361a:	17f2      	asrs	r2, r6, #31
 802361c:	0003      	movs	r3, r0
 802361e:	920c      	str	r2, [sp, #48]	@ 0x30
 8023620:	0028      	movs	r0, r5
 8023622:	003a      	movs	r2, r7
 8023624:	910a      	str	r1, [sp, #40]	@ 0x28
 8023626:	f7dc ffcb 	bl	80005c0 <__aeabi_lmul>
 802362a:	0032      	movs	r2, r6
 802362c:	17f3      	asrs	r3, r6, #31
 802362e:	9807      	ldr	r0, [sp, #28]
 8023630:	000c      	movs	r4, r1
 8023632:	9908      	ldr	r1, [sp, #32]
 8023634:	f7dc ffc4 	bl	80005c0 <__aeabi_lmul>
 8023638:	4658      	mov	r0, fp
 802363a:	1a64      	subs	r4, r4, r1
 802363c:	0064      	lsls	r4, r4, #1
 802363e:	9a07      	ldr	r2, [sp, #28]
 8023640:	6004      	str	r4, [r0, #0]
 8023642:	9b08      	ldr	r3, [sp, #32]
 8023644:	0038      	movs	r0, r7
 8023646:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023648:	f7dc ffba 	bl	80005c0 <__aeabi_lmul>
 802364c:	0032      	movs	r2, r6
 802364e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023650:	000c      	movs	r4, r1
 8023652:	0028      	movs	r0, r5
 8023654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023656:	f7dc ffb3 	bl	80005c0 <__aeabi_lmul>
 802365a:	9d05      	ldr	r5, [sp, #20]
 802365c:	465f      	mov	r7, fp
 802365e:	46ac      	mov	ip, r5
 8023660:	1864      	adds	r4, r4, r1
 8023662:	9903      	ldr	r1, [sp, #12]
 8023664:	0064      	lsls	r4, r4, #1
 8023666:	4461      	add	r1, ip
 8023668:	607c      	str	r4, [r7, #4]
 802366a:	000c      	movs	r4, r1
 802366c:	17c9      	asrs	r1, r1, #31
 802366e:	9105      	str	r1, [sp, #20]
 8023670:	9902      	ldr	r1, [sp, #8]
 8023672:	9804      	ldr	r0, [sp, #16]
 8023674:	680d      	ldr	r5, [r1, #0]
 8023676:	9e06      	ldr	r6, [sp, #24]
 8023678:	002b      	movs	r3, r5
 802367a:	17ed      	asrs	r5, r5, #31
 802367c:	684f      	ldr	r7, [r1, #4]
 802367e:	9503      	str	r5, [sp, #12]
 8023680:	1b85      	subs	r5, r0, r6
 8023682:	17e8      	asrs	r0, r5, #31
 8023684:	001a      	movs	r2, r3
 8023686:	9006      	str	r0, [sp, #24]
 8023688:	17fe      	asrs	r6, r7, #31
 802368a:	9304      	str	r3, [sp, #16]
 802368c:	0020      	movs	r0, r4
 802368e:	9b03      	ldr	r3, [sp, #12]
 8023690:	17e1      	asrs	r1, r4, #31
 8023692:	9607      	str	r6, [sp, #28]
 8023694:	f7dc ff94 	bl	80005c0 <__aeabi_lmul>
 8023698:	003a      	movs	r2, r7
 802369a:	000e      	movs	r6, r1
 802369c:	17fb      	asrs	r3, r7, #31
 802369e:	0028      	movs	r0, r5
 80236a0:	17e9      	asrs	r1, r5, #31
 80236a2:	f7dc ff8d 	bl	80005c0 <__aeabi_lmul>
 80236a6:	4640      	mov	r0, r8
 80236a8:	1a76      	subs	r6, r6, r1
 80236aa:	0076      	lsls	r6, r6, #1
 80236ac:	002a      	movs	r2, r5
 80236ae:	9b06      	ldr	r3, [sp, #24]
 80236b0:	6006      	str	r6, [r0, #0]
 80236b2:	9903      	ldr	r1, [sp, #12]
 80236b4:	9804      	ldr	r0, [sp, #16]
 80236b6:	f7dc ff83 	bl	80005c0 <__aeabi_lmul>
 80236ba:	0020      	movs	r0, r4
 80236bc:	2408      	movs	r4, #8
 80236be:	9b07      	ldr	r3, [sp, #28]
 80236c0:	000d      	movs	r5, r1
 80236c2:	003a      	movs	r2, r7
 80236c4:	9905      	ldr	r1, [sp, #20]
 80236c6:	f7dc ff7b 	bl	80005c0 <__aeabi_lmul>
 80236ca:	4640      	mov	r0, r8
 80236cc:	46a4      	mov	ip, r4
 80236ce:	186d      	adds	r5, r5, r1
 80236d0:	006d      	lsls	r5, r5, #1
 80236d2:	6045      	str	r5, [r0, #4]
 80236d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80236d6:	44e1      	add	r9, ip
 80236d8:	3801      	subs	r0, #1
 80236da:	9009      	str	r0, [sp, #36]	@ 0x24
 80236dc:	9a01      	ldr	r2, [sp, #4]
 80236de:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80236e0:	44e2      	add	sl, ip
 80236e2:	44e3      	add	fp, ip
 80236e4:	44e0      	add	r8, ip
 80236e6:	46a4      	mov	ip, r4
 80236e8:	4462      	add	r2, ip
 80236ea:	9201      	str	r2, [sp, #4]
 80236ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80236ee:	9b00      	ldr	r3, [sp, #0]
 80236f0:	4694      	mov	ip, r2
 80236f2:	4463      	add	r3, ip
 80236f4:	9300      	str	r3, [sp, #0]
 80236f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80236f8:	9902      	ldr	r1, [sp, #8]
 80236fa:	469c      	mov	ip, r3
 80236fc:	4461      	add	r1, ip
 80236fe:	9102      	str	r1, [sp, #8]
 8023700:	2800      	cmp	r0, #0
 8023702:	d000      	beq.n	8023706 <arm_radix4_butterfly_inverse_q31+0x22e>
 8023704:	e70f      	b.n	8023526 <arm_radix4_butterfly_inverse_q31+0x4e>
 8023706:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023708:	009b      	lsls	r3, r3, #2
 802370a:	931f      	str	r3, [sp, #124]	@ 0x7c
 802370c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802370e:	9320      	str	r3, [sp, #128]	@ 0x80
 8023710:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023712:	2b04      	cmp	r3, #4
 8023714:	d800      	bhi.n	8023718 <arm_radix4_butterfly_inverse_q31+0x240>
 8023716:	e17c      	b.n	8023a12 <arm_radix4_butterfly_inverse_q31+0x53a>
 8023718:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802371a:	0893      	lsrs	r3, r2, #2
 802371c:	1e59      	subs	r1, r3, #1
 802371e:	9321      	str	r3, [sp, #132]	@ 0x84
 8023720:	00db      	lsls	r3, r3, #3
 8023722:	931b      	str	r3, [sp, #108]	@ 0x6c
 8023724:	00d3      	lsls	r3, r2, #3
 8023726:	9300      	str	r3, [sp, #0]
 8023728:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802372a:	911a      	str	r1, [sp, #104]	@ 0x68
 802372c:	00da      	lsls	r2, r3, #3
 802372e:	921e      	str	r2, [sp, #120]	@ 0x78
 8023730:	011a      	lsls	r2, r3, #4
 8023732:	921d      	str	r2, [sp, #116]	@ 0x74
 8023734:	001a      	movs	r2, r3
 8023736:	4694      	mov	ip, r2
 8023738:	005b      	lsls	r3, r3, #1
 802373a:	4463      	add	r3, ip
 802373c:	00db      	lsls	r3, r3, #3
 802373e:	931c      	str	r3, [sp, #112]	@ 0x70
 8023740:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8023742:	9317      	str	r3, [sp, #92]	@ 0x5c
 8023744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8023746:	9318      	str	r3, [sp, #96]	@ 0x60
 8023748:	9319      	str	r3, [sp, #100]	@ 0x64
 802374a:	9316      	str	r3, [sp, #88]	@ 0x58
 802374c:	2300      	movs	r3, #0
 802374e:	9315      	str	r3, [sp, #84]	@ 0x54
 8023750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8023752:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8023754:	681a      	ldr	r2, [r3, #0]
 8023756:	685b      	ldr	r3, [r3, #4]
 8023758:	9205      	str	r2, [sp, #20]
 802375a:	9306      	str	r3, [sp, #24]
 802375c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802375e:	468c      	mov	ip, r1
 8023760:	681a      	ldr	r2, [r3, #0]
 8023762:	685b      	ldr	r3, [r3, #4]
 8023764:	9207      	str	r2, [sp, #28]
 8023766:	9308      	str	r3, [sp, #32]
 8023768:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802376a:	681a      	ldr	r2, [r3, #0]
 802376c:	685b      	ldr	r3, [r3, #4]
 802376e:	9209      	str	r2, [sp, #36]	@ 0x24
 8023770:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023772:	930a      	str	r3, [sp, #40]	@ 0x28
 8023774:	0013      	movs	r3, r2
 8023776:	4463      	add	r3, ip
 8023778:	4698      	mov	r8, r3
 802377a:	0013      	movs	r3, r2
 802377c:	4442      	add	r2, r8
 802377e:	4691      	mov	r9, r2
 8023780:	001a      	movs	r2, r3
 8023782:	444a      	add	r2, r9
 8023784:	4692      	mov	sl, r2
 8023786:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8023788:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802378a:	4293      	cmp	r3, r2
 802378c:	d800      	bhi.n	8023790 <arm_radix4_butterfly_inverse_q31+0x2b8>
 802378e:	e0d9      	b.n	8023944 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023790:	4694      	mov	ip, r2
 8023792:	4644      	mov	r4, r8
 8023794:	4655      	mov	r5, sl
 8023796:	4688      	mov	r8, r1
 8023798:	9b07      	ldr	r3, [sp, #28]
 802379a:	17db      	asrs	r3, r3, #31
 802379c:	930c      	str	r3, [sp, #48]	@ 0x30
 802379e:	9b08      	ldr	r3, [sp, #32]
 80237a0:	17db      	asrs	r3, r3, #31
 80237a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80237a4:	9b05      	ldr	r3, [sp, #20]
 80237a6:	17db      	asrs	r3, r3, #31
 80237a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80237aa:	9b06      	ldr	r3, [sp, #24]
 80237ac:	17db      	asrs	r3, r3, #31
 80237ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80237b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80237b2:	17db      	asrs	r3, r3, #31
 80237b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80237b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80237b8:	17db      	asrs	r3, r3, #31
 80237ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80237bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80237be:	4463      	add	r3, ip
 80237c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80237c2:	4643      	mov	r3, r8
 80237c4:	4641      	mov	r1, r8
 80237c6:	681a      	ldr	r2, [r3, #0]
 80237c8:	464b      	mov	r3, r9
 80237ca:	684f      	ldr	r7, [r1, #4]
 80237cc:	4649      	mov	r1, r9
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	18d6      	adds	r6, r2, r3
 80237d2:	1ad3      	subs	r3, r2, r3
 80237d4:	9301      	str	r3, [sp, #4]
 80237d6:	684b      	ldr	r3, [r1, #4]
 80237d8:	1af9      	subs	r1, r7, r3
 80237da:	9102      	str	r1, [sp, #8]
 80237dc:	6829      	ldr	r1, [r5, #0]
 80237de:	18f8      	adds	r0, r7, r3
 80237e0:	468c      	mov	ip, r1
 80237e2:	6827      	ldr	r7, [r4, #0]
 80237e4:	4467      	add	r7, ip
 80237e6:	003a      	movs	r2, r7
 80237e8:	19f3      	adds	r3, r6, r7
 80237ea:	4647      	mov	r7, r8
 80237ec:	109b      	asrs	r3, r3, #2
 80237ee:	603b      	str	r3, [r7, #0]
 80237f0:	6869      	ldr	r1, [r5, #4]
 80237f2:	6867      	ldr	r7, [r4, #4]
 80237f4:	468c      	mov	ip, r1
 80237f6:	4467      	add	r7, ip
 80237f8:	003b      	movs	r3, r7
 80237fa:	19c1      	adds	r1, r0, r7
 80237fc:	4647      	mov	r7, r8
 80237fe:	1ab6      	subs	r6, r6, r2
 8023800:	1089      	asrs	r1, r1, #2
 8023802:	6079      	str	r1, [r7, #4]
 8023804:	17f2      	asrs	r2, r6, #31
 8023806:	9900      	ldr	r1, [sp, #0]
 8023808:	4692      	mov	sl, r2
 802380a:	468c      	mov	ip, r1
 802380c:	6867      	ldr	r7, [r4, #4]
 802380e:	6869      	ldr	r1, [r5, #4]
 8023810:	44e0      	add	r8, ip
 8023812:	1a7f      	subs	r7, r7, r1
 8023814:	9703      	str	r7, [sp, #12]
 8023816:	6821      	ldr	r1, [r4, #0]
 8023818:	682f      	ldr	r7, [r5, #0]
 802381a:	1bc9      	subs	r1, r1, r7
 802381c:	1ac7      	subs	r7, r0, r3
 802381e:	17fa      	asrs	r2, r7, #31
 8023820:	4693      	mov	fp, r2
 8023822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023824:	9a07      	ldr	r2, [sp, #28]
 8023826:	9104      	str	r1, [sp, #16]
 8023828:	0030      	movs	r0, r6
 802382a:	4651      	mov	r1, sl
 802382c:	f7dc fec8 	bl	80005c0 <__aeabi_lmul>
 8023830:	9a08      	ldr	r2, [sp, #32]
 8023832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023834:	9112      	str	r1, [sp, #72]	@ 0x48
 8023836:	0038      	movs	r0, r7
 8023838:	4659      	mov	r1, fp
 802383a:	f7dc fec1 	bl	80005c0 <__aeabi_lmul>
 802383e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8023840:	9a07      	ldr	r2, [sp, #28]
 8023842:	1a41      	subs	r1, r0, r1
 8023844:	1049      	asrs	r1, r1, #1
 8023846:	6021      	str	r1, [r4, #0]
 8023848:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802384a:	0038      	movs	r0, r7
 802384c:	4659      	mov	r1, fp
 802384e:	f7dc feb7 	bl	80005c0 <__aeabi_lmul>
 8023852:	9a08      	ldr	r2, [sp, #32]
 8023854:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023856:	000f      	movs	r7, r1
 8023858:	0030      	movs	r0, r6
 802385a:	4651      	mov	r1, sl
 802385c:	f7dc feb0 	bl	80005c0 <__aeabi_lmul>
 8023860:	9b00      	ldr	r3, [sp, #0]
 8023862:	187f      	adds	r7, r7, r1
 8023864:	469c      	mov	ip, r3
 8023866:	107f      	asrs	r7, r7, #1
 8023868:	6067      	str	r7, [r4, #4]
 802386a:	9a01      	ldr	r2, [sp, #4]
 802386c:	9f03      	ldr	r7, [sp, #12]
 802386e:	9802      	ldr	r0, [sp, #8]
 8023870:	1bd7      	subs	r7, r2, r7
 8023872:	17fe      	asrs	r6, r7, #31
 8023874:	0031      	movs	r1, r6
 8023876:	9e04      	ldr	r6, [sp, #16]
 8023878:	4682      	mov	sl, r0
 802387a:	4464      	add	r4, ip
 802387c:	46b4      	mov	ip, r6
 802387e:	44e2      	add	sl, ip
 8023880:	4652      	mov	r2, sl
 8023882:	17d2      	asrs	r2, r2, #31
 8023884:	4693      	mov	fp, r2
 8023886:	0038      	movs	r0, r7
 8023888:	9a05      	ldr	r2, [sp, #20]
 802388a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802388c:	9112      	str	r1, [sp, #72]	@ 0x48
 802388e:	f7dc fe97 	bl	80005c0 <__aeabi_lmul>
 8023892:	9a06      	ldr	r2, [sp, #24]
 8023894:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023896:	000e      	movs	r6, r1
 8023898:	4650      	mov	r0, sl
 802389a:	4659      	mov	r1, fp
 802389c:	f7dc fe90 	bl	80005c0 <__aeabi_lmul>
 80238a0:	4648      	mov	r0, r9
 80238a2:	1a76      	subs	r6, r6, r1
 80238a4:	1076      	asrs	r6, r6, #1
 80238a6:	6006      	str	r6, [r0, #0]
 80238a8:	9a05      	ldr	r2, [sp, #20]
 80238aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80238ac:	4650      	mov	r0, sl
 80238ae:	4659      	mov	r1, fp
 80238b0:	f7dc fe86 	bl	80005c0 <__aeabi_lmul>
 80238b4:	9a06      	ldr	r2, [sp, #24]
 80238b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80238b8:	000e      	movs	r6, r1
 80238ba:	0038      	movs	r0, r7
 80238bc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80238be:	f7dc fe7f 	bl	80005c0 <__aeabi_lmul>
 80238c2:	9a00      	ldr	r2, [sp, #0]
 80238c4:	9f03      	ldr	r7, [sp, #12]
 80238c6:	4694      	mov	ip, r2
 80238c8:	1876      	adds	r6, r6, r1
 80238ca:	4649      	mov	r1, r9
 80238cc:	44e1      	add	r9, ip
 80238ce:	46bc      	mov	ip, r7
 80238d0:	9b01      	ldr	r3, [sp, #4]
 80238d2:	1076      	asrs	r6, r6, #1
 80238d4:	4463      	add	r3, ip
 80238d6:	17df      	asrs	r7, r3, #31
 80238d8:	604e      	str	r6, [r1, #4]
 80238da:	46ba      	mov	sl, r7
 80238dc:	001e      	movs	r6, r3
 80238de:	9802      	ldr	r0, [sp, #8]
 80238e0:	9b04      	ldr	r3, [sp, #16]
 80238e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80238e4:	1ac7      	subs	r7, r0, r3
 80238e6:	17fb      	asrs	r3, r7, #31
 80238e8:	469b      	mov	fp, r3
 80238ea:	0030      	movs	r0, r6
 80238ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80238ee:	4651      	mov	r1, sl
 80238f0:	f7dc fe66 	bl	80005c0 <__aeabi_lmul>
 80238f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80238f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80238f8:	9101      	str	r1, [sp, #4]
 80238fa:	0038      	movs	r0, r7
 80238fc:	4659      	mov	r1, fp
 80238fe:	f7dc fe5f 	bl	80005c0 <__aeabi_lmul>
 8023902:	9801      	ldr	r0, [sp, #4]
 8023904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023906:	1a41      	subs	r1, r0, r1
 8023908:	1049      	asrs	r1, r1, #1
 802390a:	6029      	str	r1, [r5, #0]
 802390c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802390e:	0038      	movs	r0, r7
 8023910:	4659      	mov	r1, fp
 8023912:	f7dc fe55 	bl	80005c0 <__aeabi_lmul>
 8023916:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023918:	000f      	movs	r7, r1
 802391a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802391c:	0030      	movs	r0, r6
 802391e:	4651      	mov	r1, sl
 8023920:	f7dc fe4e 	bl	80005c0 <__aeabi_lmul>
 8023924:	187f      	adds	r7, r7, r1
 8023926:	107f      	asrs	r7, r7, #1
 8023928:	606f      	str	r7, [r5, #4]
 802392a:	9a00      	ldr	r2, [sp, #0]
 802392c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 802392e:	4694      	mov	ip, r2
 8023930:	4465      	add	r5, ip
 8023932:	468c      	mov	ip, r1
 8023934:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8023936:	0013      	movs	r3, r2
 8023938:	4462      	add	r2, ip
 802393a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802393c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802393e:	429a      	cmp	r2, r3
 8023940:	d900      	bls.n	8023944 <arm_radix4_butterfly_inverse_q31+0x46c>
 8023942:	e73e      	b.n	80237c2 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8023944:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023946:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8023948:	468c      	mov	ip, r1
 802394a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 802394c:	4462      	add	r2, ip
 802394e:	468c      	mov	ip, r1
 8023950:	9216      	str	r2, [sp, #88]	@ 0x58
 8023952:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8023954:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8023956:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023958:	4462      	add	r2, ip
 802395a:	468c      	mov	ip, r1
 802395c:	9219      	str	r2, [sp, #100]	@ 0x64
 802395e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8023960:	3301      	adds	r3, #1
 8023962:	4462      	add	r2, ip
 8023964:	9218      	str	r2, [sp, #96]	@ 0x60
 8023966:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8023968:	9315      	str	r3, [sp, #84]	@ 0x54
 802396a:	3208      	adds	r2, #8
 802396c:	9217      	str	r2, [sp, #92]	@ 0x5c
 802396e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8023970:	4293      	cmp	r3, r2
 8023972:	d800      	bhi.n	8023976 <arm_radix4_butterfly_inverse_q31+0x49e>
 8023974:	e6ec      	b.n	8023750 <arm_radix4_butterfly_inverse_q31+0x278>
 8023976:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023978:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802397a:	009b      	lsls	r3, r3, #2
 802397c:	931f      	str	r3, [sp, #124]	@ 0x7c
 802397e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023980:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023982:	089b      	lsrs	r3, r3, #2
 8023984:	9320      	str	r3, [sp, #128]	@ 0x80
 8023986:	2b04      	cmp	r3, #4
 8023988:	d900      	bls.n	802398c <arm_radix4_butterfly_inverse_q31+0x4b4>
 802398a:	e6c5      	b.n	8023718 <arm_radix4_butterfly_inverse_q31+0x240>
 802398c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802398e:	469a      	mov	sl, r3
 8023990:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023992:	681a      	ldr	r2, [r3, #0]
 8023994:	6918      	ldr	r0, [r3, #16]
 8023996:	4691      	mov	r9, r2
 8023998:	464c      	mov	r4, r9
 802399a:	4680      	mov	r8, r0
 802399c:	69de      	ldr	r6, [r3, #28]
 802399e:	689d      	ldr	r5, [r3, #8]
 80239a0:	46b4      	mov	ip, r6
 80239a2:	6998      	ldr	r0, [r3, #24]
 80239a4:	1964      	adds	r4, r4, r5
 80239a6:	6859      	ldr	r1, [r3, #4]
 80239a8:	68da      	ldr	r2, [r3, #12]
 80239aa:	4444      	add	r4, r8
 80239ac:	695f      	ldr	r7, [r3, #20]
 80239ae:	1824      	adds	r4, r4, r0
 80239b0:	601c      	str	r4, [r3, #0]
 80239b2:	188c      	adds	r4, r1, r2
 80239b4:	19e4      	adds	r4, r4, r7
 80239b6:	4464      	add	r4, ip
 80239b8:	605c      	str	r4, [r3, #4]
 80239ba:	464c      	mov	r4, r9
 80239bc:	1b64      	subs	r4, r4, r5
 80239be:	4444      	add	r4, r8
 80239c0:	1a24      	subs	r4, r4, r0
 80239c2:	609c      	str	r4, [r3, #8]
 80239c4:	1a8c      	subs	r4, r1, r2
 80239c6:	19e4      	adds	r4, r4, r7
 80239c8:	1ba4      	subs	r4, r4, r6
 80239ca:	60dc      	str	r4, [r3, #12]
 80239cc:	464c      	mov	r4, r9
 80239ce:	4646      	mov	r6, r8
 80239d0:	1aa4      	subs	r4, r4, r2
 80239d2:	1ba4      	subs	r4, r4, r6
 80239d4:	4464      	add	r4, ip
 80239d6:	611c      	str	r4, [r3, #16]
 80239d8:	194c      	adds	r4, r1, r5
 80239da:	1be4      	subs	r4, r4, r7
 80239dc:	1a24      	subs	r4, r4, r0
 80239de:	615c      	str	r4, [r3, #20]
 80239e0:	4644      	mov	r4, r8
 80239e2:	4666      	mov	r6, ip
 80239e4:	444a      	add	r2, r9
 80239e6:	1b12      	subs	r2, r2, r4
 80239e8:	1b92      	subs	r2, r2, r6
 80239ea:	619a      	str	r2, [r3, #24]
 80239ec:	1b4a      	subs	r2, r1, r5
 80239ee:	1bd1      	subs	r1, r2, r7
 80239f0:	2201      	movs	r2, #1
 80239f2:	4252      	negs	r2, r2
 80239f4:	4694      	mov	ip, r2
 80239f6:	44e2      	add	sl, ip
 80239f8:	4652      	mov	r2, sl
 80239fa:	1809      	adds	r1, r1, r0
 80239fc:	61d9      	str	r1, [r3, #28]
 80239fe:	3320      	adds	r3, #32
 8023a00:	2a00      	cmp	r2, #0
 8023a02:	d1c6      	bne.n	8023992 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8023a04:	b027      	add	sp, #156	@ 0x9c
 8023a06:	bc3c      	pop	{r2, r3, r4, r5}
 8023a08:	4690      	mov	r8, r2
 8023a0a:	4699      	mov	r9, r3
 8023a0c:	46a2      	mov	sl, r4
 8023a0e:	46ab      	mov	fp, r5
 8023a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a12:	469a      	mov	sl, r3
 8023a14:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8023a16:	e7bc      	b.n	8023992 <arm_radix4_butterfly_inverse_q31+0x4ba>

08023a18 <arm_cmplx_mag_squared_q31>:
 8023a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a1a:	464f      	mov	r7, r9
 8023a1c:	4646      	mov	r6, r8
 8023a1e:	0004      	movs	r4, r0
 8023a20:	b4c0      	push	{r6, r7}
 8023a22:	0016      	movs	r6, r2
 8023a24:	000f      	movs	r7, r1
 8023a26:	2a00      	cmp	r2, #0
 8023a28:	d018      	beq.n	8023a5c <arm_cmplx_mag_squared_q31+0x44>
 8023a2a:	6823      	ldr	r3, [r4, #0]
 8023a2c:	6822      	ldr	r2, [r4, #0]
 8023a2e:	17d9      	asrs	r1, r3, #31
 8023a30:	6863      	ldr	r3, [r4, #4]
 8023a32:	0010      	movs	r0, r2
 8023a34:	4698      	mov	r8, r3
 8023a36:	17db      	asrs	r3, r3, #31
 8023a38:	4699      	mov	r9, r3
 8023a3a:	000b      	movs	r3, r1
 8023a3c:	f7dc fdc0 	bl	80005c0 <__aeabi_lmul>
 8023a40:	4642      	mov	r2, r8
 8023a42:	104d      	asrs	r5, r1, #1
 8023a44:	464b      	mov	r3, r9
 8023a46:	4640      	mov	r0, r8
 8023a48:	4649      	mov	r1, r9
 8023a4a:	f7dc fdb9 	bl	80005c0 <__aeabi_lmul>
 8023a4e:	1049      	asrs	r1, r1, #1
 8023a50:	1869      	adds	r1, r5, r1
 8023a52:	3e01      	subs	r6, #1
 8023a54:	c702      	stmia	r7!, {r1}
 8023a56:	3408      	adds	r4, #8
 8023a58:	2e00      	cmp	r6, #0
 8023a5a:	d1e6      	bne.n	8023a2a <arm_cmplx_mag_squared_q31+0x12>
 8023a5c:	bc0c      	pop	{r2, r3}
 8023a5e:	4690      	mov	r8, r2
 8023a60:	4699      	mov	r9, r3
 8023a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08023a64 <arm_mult_q31>:
 8023a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a66:	4646      	mov	r6, r8
 8023a68:	464f      	mov	r7, r9
 8023a6a:	4690      	mov	r8, r2
 8023a6c:	b4c0      	push	{r6, r7}
 8023a6e:	001d      	movs	r5, r3
 8023a70:	0006      	movs	r6, r0
 8023a72:	000f      	movs	r7, r1
 8023a74:	2400      	movs	r4, #0
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	d020      	beq.n	8023abc <arm_mult_q31+0x58>
 8023a7a:	4b12      	ldr	r3, [pc, #72]	@ (8023ac4 <arm_mult_q31+0x60>)
 8023a7c:	4699      	mov	r9, r3
 8023a7e:	e007      	b.n	8023a90 <arm_mult_q31+0x2c>
 8023a80:	464b      	mov	r3, r9
 8023a82:	4059      	eors	r1, r3
 8023a84:	4643      	mov	r3, r8
 8023a86:	3d01      	subs	r5, #1
 8023a88:	5119      	str	r1, [r3, r4]
 8023a8a:	3404      	adds	r4, #4
 8023a8c:	2d00      	cmp	r5, #0
 8023a8e:	d015      	beq.n	8023abc <arm_mult_q31+0x58>
 8023a90:	5933      	ldr	r3, [r6, r4]
 8023a92:	593a      	ldr	r2, [r7, r4]
 8023a94:	17d9      	asrs	r1, r3, #31
 8023a96:	593b      	ldr	r3, [r7, r4]
 8023a98:	5930      	ldr	r0, [r6, r4]
 8023a9a:	17db      	asrs	r3, r3, #31
 8023a9c:	f7dc fd90 	bl	80005c0 <__aeabi_lmul>
 8023aa0:	004b      	lsls	r3, r1, #1
 8023aa2:	0fc0      	lsrs	r0, r0, #31
 8023aa4:	4318      	orrs	r0, r3
 8023aa6:	17c9      	asrs	r1, r1, #31
 8023aa8:	17c3      	asrs	r3, r0, #31
 8023aaa:	428b      	cmp	r3, r1
 8023aac:	d1e8      	bne.n	8023a80 <arm_mult_q31+0x1c>
 8023aae:	0001      	movs	r1, r0
 8023ab0:	4643      	mov	r3, r8
 8023ab2:	3d01      	subs	r5, #1
 8023ab4:	5119      	str	r1, [r3, r4]
 8023ab6:	3404      	adds	r4, #4
 8023ab8:	2d00      	cmp	r5, #0
 8023aba:	d1e9      	bne.n	8023a90 <arm_mult_q31+0x2c>
 8023abc:	bc0c      	pop	{r2, r3}
 8023abe:	4690      	mov	r8, r2
 8023ac0:	4699      	mov	r9, r3
 8023ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ac4:	7fffffff 	.word	0x7fffffff

08023ac8 <arm_add_q31>:
 8023ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023aca:	465f      	mov	r7, fp
 8023acc:	4656      	mov	r6, sl
 8023ace:	464d      	mov	r5, r9
 8023ad0:	4644      	mov	r4, r8
 8023ad2:	b4f0      	push	{r4, r5, r6, r7}
 8023ad4:	4693      	mov	fp, r2
 8023ad6:	b083      	sub	sp, #12
 8023ad8:	4681      	mov	r9, r0
 8023ada:	468a      	mov	sl, r1
 8023adc:	4698      	mov	r8, r3
 8023ade:	2200      	movs	r2, #0
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	d020      	beq.n	8023b26 <arm_add_q31+0x5e>
 8023ae4:	4649      	mov	r1, r9
 8023ae6:	4653      	mov	r3, sl
 8023ae8:	588e      	ldr	r6, [r1, r2]
 8023aea:	589b      	ldr	r3, [r3, r2]
 8023aec:	17f7      	asrs	r7, r6, #31
 8023aee:	001c      	movs	r4, r3
 8023af0:	0030      	movs	r0, r6
 8023af2:	0039      	movs	r1, r7
 8023af4:	17dd      	asrs	r5, r3, #31
 8023af6:	46b4      	mov	ip, r6
 8023af8:	1900      	adds	r0, r0, r4
 8023afa:	4169      	adcs	r1, r5
 8023afc:	4463      	add	r3, ip
 8023afe:	9000      	str	r0, [sp, #0]
 8023b00:	9101      	str	r1, [sp, #4]
 8023b02:	17d9      	asrs	r1, r3, #31
 8023b04:	468c      	mov	ip, r1
 8023b06:	9901      	ldr	r1, [sp, #4]
 8023b08:	458c      	cmp	ip, r1
 8023b0a:	d002      	beq.n	8023b12 <arm_add_q31+0x4a>
 8023b0c:	17cb      	asrs	r3, r1, #31
 8023b0e:	4909      	ldr	r1, [pc, #36]	@ (8023b34 <arm_add_q31+0x6c>)
 8023b10:	404b      	eors	r3, r1
 8023b12:	4659      	mov	r1, fp
 8023b14:	508b      	str	r3, [r1, r2]
 8023b16:	2301      	movs	r3, #1
 8023b18:	425b      	negs	r3, r3
 8023b1a:	469c      	mov	ip, r3
 8023b1c:	44e0      	add	r8, ip
 8023b1e:	4643      	mov	r3, r8
 8023b20:	3204      	adds	r2, #4
 8023b22:	2b00      	cmp	r3, #0
 8023b24:	d1de      	bne.n	8023ae4 <arm_add_q31+0x1c>
 8023b26:	b003      	add	sp, #12
 8023b28:	bc3c      	pop	{r2, r3, r4, r5}
 8023b2a:	4690      	mov	r8, r2
 8023b2c:	4699      	mov	r9, r3
 8023b2e:	46a2      	mov	sl, r4
 8023b30:	46ab      	mov	fp, r5
 8023b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023b34:	7fffffff 	.word	0x7fffffff

08023b38 <atof>:
 8023b38:	b510      	push	{r4, lr}
 8023b3a:	2100      	movs	r1, #0
 8023b3c:	f000 fe1e 	bl	802477c <strtod>
 8023b40:	bd10      	pop	{r4, pc}

08023b42 <atoi>:
 8023b42:	b510      	push	{r4, lr}
 8023b44:	220a      	movs	r2, #10
 8023b46:	2100      	movs	r1, #0
 8023b48:	f000 feb0 	bl	80248ac <strtol>
 8023b4c:	bd10      	pop	{r4, pc}
	...

08023b50 <sulp>:
 8023b50:	b570      	push	{r4, r5, r6, lr}
 8023b52:	0016      	movs	r6, r2
 8023b54:	000d      	movs	r5, r1
 8023b56:	f003 fd0f 	bl	8027578 <__ulp>
 8023b5a:	2e00      	cmp	r6, #0
 8023b5c:	d00d      	beq.n	8023b7a <sulp+0x2a>
 8023b5e:	236b      	movs	r3, #107	@ 0x6b
 8023b60:	006a      	lsls	r2, r5, #1
 8023b62:	0d52      	lsrs	r2, r2, #21
 8023b64:	1a9b      	subs	r3, r3, r2
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	dd07      	ble.n	8023b7a <sulp+0x2a>
 8023b6a:	2400      	movs	r4, #0
 8023b6c:	4a03      	ldr	r2, [pc, #12]	@ (8023b7c <sulp+0x2c>)
 8023b6e:	051b      	lsls	r3, r3, #20
 8023b70:	189d      	adds	r5, r3, r2
 8023b72:	002b      	movs	r3, r5
 8023b74:	0022      	movs	r2, r4
 8023b76:	f7de feed 	bl	8002954 <__aeabi_dmul>
 8023b7a:	bd70      	pop	{r4, r5, r6, pc}
 8023b7c:	3ff00000 	.word	0x3ff00000

08023b80 <_strtod_l>:
 8023b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023b82:	b0a3      	sub	sp, #140	@ 0x8c
 8023b84:	921b      	str	r2, [sp, #108]	@ 0x6c
 8023b86:	2200      	movs	r2, #0
 8023b88:	2600      	movs	r6, #0
 8023b8a:	2700      	movs	r7, #0
 8023b8c:	9005      	str	r0, [sp, #20]
 8023b8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8023b90:	921e      	str	r2, [sp, #120]	@ 0x78
 8023b92:	911d      	str	r1, [sp, #116]	@ 0x74
 8023b94:	780a      	ldrb	r2, [r1, #0]
 8023b96:	2a2b      	cmp	r2, #43	@ 0x2b
 8023b98:	d053      	beq.n	8023c42 <_strtod_l+0xc2>
 8023b9a:	d83f      	bhi.n	8023c1c <_strtod_l+0x9c>
 8023b9c:	2a0d      	cmp	r2, #13
 8023b9e:	d839      	bhi.n	8023c14 <_strtod_l+0x94>
 8023ba0:	2a08      	cmp	r2, #8
 8023ba2:	d839      	bhi.n	8023c18 <_strtod_l+0x98>
 8023ba4:	2a00      	cmp	r2, #0
 8023ba6:	d042      	beq.n	8023c2e <_strtod_l+0xae>
 8023ba8:	2200      	movs	r2, #0
 8023baa:	9212      	str	r2, [sp, #72]	@ 0x48
 8023bac:	2100      	movs	r1, #0
 8023bae:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8023bb0:	910c      	str	r1, [sp, #48]	@ 0x30
 8023bb2:	782a      	ldrb	r2, [r5, #0]
 8023bb4:	2a30      	cmp	r2, #48	@ 0x30
 8023bb6:	d000      	beq.n	8023bba <_strtod_l+0x3a>
 8023bb8:	e083      	b.n	8023cc2 <_strtod_l+0x142>
 8023bba:	786a      	ldrb	r2, [r5, #1]
 8023bbc:	3120      	adds	r1, #32
 8023bbe:	438a      	bics	r2, r1
 8023bc0:	2a58      	cmp	r2, #88	@ 0x58
 8023bc2:	d000      	beq.n	8023bc6 <_strtod_l+0x46>
 8023bc4:	e073      	b.n	8023cae <_strtod_l+0x12e>
 8023bc6:	9302      	str	r3, [sp, #8]
 8023bc8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023bca:	4a9b      	ldr	r2, [pc, #620]	@ (8023e38 <_strtod_l+0x2b8>)
 8023bcc:	9301      	str	r3, [sp, #4]
 8023bce:	ab1e      	add	r3, sp, #120	@ 0x78
 8023bd0:	9300      	str	r3, [sp, #0]
 8023bd2:	9805      	ldr	r0, [sp, #20]
 8023bd4:	ab1f      	add	r3, sp, #124	@ 0x7c
 8023bd6:	a91d      	add	r1, sp, #116	@ 0x74
 8023bd8:	f002 fd86 	bl	80266e8 <__gethex>
 8023bdc:	230f      	movs	r3, #15
 8023bde:	0002      	movs	r2, r0
 8023be0:	401a      	ands	r2, r3
 8023be2:	0004      	movs	r4, r0
 8023be4:	9206      	str	r2, [sp, #24]
 8023be6:	4218      	tst	r0, r3
 8023be8:	d005      	beq.n	8023bf6 <_strtod_l+0x76>
 8023bea:	2a06      	cmp	r2, #6
 8023bec:	d12b      	bne.n	8023c46 <_strtod_l+0xc6>
 8023bee:	2300      	movs	r3, #0
 8023bf0:	3501      	adds	r5, #1
 8023bf2:	951d      	str	r5, [sp, #116]	@ 0x74
 8023bf4:	9312      	str	r3, [sp, #72]	@ 0x48
 8023bf6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023bf8:	2b00      	cmp	r3, #0
 8023bfa:	d002      	beq.n	8023c02 <_strtod_l+0x82>
 8023bfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023bfe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8023c00:	6013      	str	r3, [r2, #0]
 8023c02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023c04:	2b00      	cmp	r3, #0
 8023c06:	d019      	beq.n	8023c3c <_strtod_l+0xbc>
 8023c08:	2380      	movs	r3, #128	@ 0x80
 8023c0a:	0030      	movs	r0, r6
 8023c0c:	061b      	lsls	r3, r3, #24
 8023c0e:	18f9      	adds	r1, r7, r3
 8023c10:	b023      	add	sp, #140	@ 0x8c
 8023c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023c14:	2a20      	cmp	r2, #32
 8023c16:	d1c7      	bne.n	8023ba8 <_strtod_l+0x28>
 8023c18:	3101      	adds	r1, #1
 8023c1a:	e7ba      	b.n	8023b92 <_strtod_l+0x12>
 8023c1c:	2a2d      	cmp	r2, #45	@ 0x2d
 8023c1e:	d1c3      	bne.n	8023ba8 <_strtod_l+0x28>
 8023c20:	3a2c      	subs	r2, #44	@ 0x2c
 8023c22:	9212      	str	r2, [sp, #72]	@ 0x48
 8023c24:	1c4a      	adds	r2, r1, #1
 8023c26:	921d      	str	r2, [sp, #116]	@ 0x74
 8023c28:	784a      	ldrb	r2, [r1, #1]
 8023c2a:	2a00      	cmp	r2, #0
 8023c2c:	d1be      	bne.n	8023bac <_strtod_l+0x2c>
 8023c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023c30:	931d      	str	r3, [sp, #116]	@ 0x74
 8023c32:	2300      	movs	r3, #0
 8023c34:	9312      	str	r3, [sp, #72]	@ 0x48
 8023c36:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d1df      	bne.n	8023bfc <_strtod_l+0x7c>
 8023c3c:	0030      	movs	r0, r6
 8023c3e:	0039      	movs	r1, r7
 8023c40:	e7e6      	b.n	8023c10 <_strtod_l+0x90>
 8023c42:	2200      	movs	r2, #0
 8023c44:	e7ed      	b.n	8023c22 <_strtod_l+0xa2>
 8023c46:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8023c48:	2a00      	cmp	r2, #0
 8023c4a:	d007      	beq.n	8023c5c <_strtod_l+0xdc>
 8023c4c:	2135      	movs	r1, #53	@ 0x35
 8023c4e:	a820      	add	r0, sp, #128	@ 0x80
 8023c50:	f003 fd88 	bl	8027764 <__copybits>
 8023c54:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8023c56:	9805      	ldr	r0, [sp, #20]
 8023c58:	f003 f94a 	bl	8026ef0 <_Bfree>
 8023c5c:	9806      	ldr	r0, [sp, #24]
 8023c5e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023c60:	3801      	subs	r0, #1
 8023c62:	2804      	cmp	r0, #4
 8023c64:	d806      	bhi.n	8023c74 <_strtod_l+0xf4>
 8023c66:	f7dc fa89 	bl	800017c <__gnu_thumb1_case_uqi>
 8023c6a:	0312      	.short	0x0312
 8023c6c:	1e1c      	.short	0x1e1c
 8023c6e:	12          	.byte	0x12
 8023c6f:	00          	.byte	0x00
 8023c70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023c72:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8023c74:	05e4      	lsls	r4, r4, #23
 8023c76:	d502      	bpl.n	8023c7e <_strtod_l+0xfe>
 8023c78:	2380      	movs	r3, #128	@ 0x80
 8023c7a:	061b      	lsls	r3, r3, #24
 8023c7c:	431f      	orrs	r7, r3
 8023c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8023e3c <_strtod_l+0x2bc>)
 8023c80:	423b      	tst	r3, r7
 8023c82:	d1b8      	bne.n	8023bf6 <_strtod_l+0x76>
 8023c84:	f001 fdc0 	bl	8025808 <__errno>
 8023c88:	2322      	movs	r3, #34	@ 0x22
 8023c8a:	6003      	str	r3, [r0, #0]
 8023c8c:	e7b3      	b.n	8023bf6 <_strtod_l+0x76>
 8023c8e:	496c      	ldr	r1, [pc, #432]	@ (8023e40 <_strtod_l+0x2c0>)
 8023c90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023c92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023c94:	400a      	ands	r2, r1
 8023c96:	496b      	ldr	r1, [pc, #428]	@ (8023e44 <_strtod_l+0x2c4>)
 8023c98:	185b      	adds	r3, r3, r1
 8023c9a:	051b      	lsls	r3, r3, #20
 8023c9c:	431a      	orrs	r2, r3
 8023c9e:	0017      	movs	r7, r2
 8023ca0:	e7e8      	b.n	8023c74 <_strtod_l+0xf4>
 8023ca2:	4f66      	ldr	r7, [pc, #408]	@ (8023e3c <_strtod_l+0x2bc>)
 8023ca4:	e7e6      	b.n	8023c74 <_strtod_l+0xf4>
 8023ca6:	2601      	movs	r6, #1
 8023ca8:	4f67      	ldr	r7, [pc, #412]	@ (8023e48 <_strtod_l+0x2c8>)
 8023caa:	4276      	negs	r6, r6
 8023cac:	e7e2      	b.n	8023c74 <_strtod_l+0xf4>
 8023cae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023cb0:	1c5a      	adds	r2, r3, #1
 8023cb2:	921d      	str	r2, [sp, #116]	@ 0x74
 8023cb4:	785b      	ldrb	r3, [r3, #1]
 8023cb6:	2b30      	cmp	r3, #48	@ 0x30
 8023cb8:	d0f9      	beq.n	8023cae <_strtod_l+0x12e>
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d09b      	beq.n	8023bf6 <_strtod_l+0x76>
 8023cbe:	2301      	movs	r3, #1
 8023cc0:	930c      	str	r3, [sp, #48]	@ 0x30
 8023cc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023cc4:	220a      	movs	r2, #10
 8023cc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023cc8:	2300      	movs	r3, #0
 8023cca:	9310      	str	r3, [sp, #64]	@ 0x40
 8023ccc:	930d      	str	r3, [sp, #52]	@ 0x34
 8023cce:	9308      	str	r3, [sp, #32]
 8023cd0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8023cd2:	7804      	ldrb	r4, [r0, #0]
 8023cd4:	0023      	movs	r3, r4
 8023cd6:	3b30      	subs	r3, #48	@ 0x30
 8023cd8:	b2d9      	uxtb	r1, r3
 8023cda:	2909      	cmp	r1, #9
 8023cdc:	d927      	bls.n	8023d2e <_strtod_l+0x1ae>
 8023cde:	2201      	movs	r2, #1
 8023ce0:	495a      	ldr	r1, [pc, #360]	@ (8023e4c <_strtod_l+0x2cc>)
 8023ce2:	f001 fd03 	bl	80256ec <strncmp>
 8023ce6:	2800      	cmp	r0, #0
 8023ce8:	d033      	beq.n	8023d52 <_strtod_l+0x1d2>
 8023cea:	2000      	movs	r0, #0
 8023cec:	0023      	movs	r3, r4
 8023cee:	4684      	mov	ip, r0
 8023cf0:	9a08      	ldr	r2, [sp, #32]
 8023cf2:	900e      	str	r0, [sp, #56]	@ 0x38
 8023cf4:	9206      	str	r2, [sp, #24]
 8023cf6:	2220      	movs	r2, #32
 8023cf8:	0019      	movs	r1, r3
 8023cfa:	4391      	bics	r1, r2
 8023cfc:	000a      	movs	r2, r1
 8023cfe:	2100      	movs	r1, #0
 8023d00:	9107      	str	r1, [sp, #28]
 8023d02:	2a45      	cmp	r2, #69	@ 0x45
 8023d04:	d000      	beq.n	8023d08 <_strtod_l+0x188>
 8023d06:	e0cb      	b.n	8023ea0 <_strtod_l+0x320>
 8023d08:	9b06      	ldr	r3, [sp, #24]
 8023d0a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023d0c:	4303      	orrs	r3, r0
 8023d0e:	4313      	orrs	r3, r2
 8023d10:	428b      	cmp	r3, r1
 8023d12:	d08c      	beq.n	8023c2e <_strtod_l+0xae>
 8023d14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8023d18:	3301      	adds	r3, #1
 8023d1a:	931d      	str	r3, [sp, #116]	@ 0x74
 8023d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023d1e:	785b      	ldrb	r3, [r3, #1]
 8023d20:	2b2b      	cmp	r3, #43	@ 0x2b
 8023d22:	d07b      	beq.n	8023e1c <_strtod_l+0x29c>
 8023d24:	000c      	movs	r4, r1
 8023d26:	2b2d      	cmp	r3, #45	@ 0x2d
 8023d28:	d17e      	bne.n	8023e28 <_strtod_l+0x2a8>
 8023d2a:	2401      	movs	r4, #1
 8023d2c:	e077      	b.n	8023e1e <_strtod_l+0x29e>
 8023d2e:	9908      	ldr	r1, [sp, #32]
 8023d30:	2908      	cmp	r1, #8
 8023d32:	dc09      	bgt.n	8023d48 <_strtod_l+0x1c8>
 8023d34:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023d36:	4351      	muls	r1, r2
 8023d38:	185b      	adds	r3, r3, r1
 8023d3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8023d3c:	9b08      	ldr	r3, [sp, #32]
 8023d3e:	3001      	adds	r0, #1
 8023d40:	3301      	adds	r3, #1
 8023d42:	9308      	str	r3, [sp, #32]
 8023d44:	901d      	str	r0, [sp, #116]	@ 0x74
 8023d46:	e7c3      	b.n	8023cd0 <_strtod_l+0x150>
 8023d48:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023d4a:	4355      	muls	r5, r2
 8023d4c:	195b      	adds	r3, r3, r5
 8023d4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023d50:	e7f4      	b.n	8023d3c <_strtod_l+0x1bc>
 8023d52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d54:	1c5a      	adds	r2, r3, #1
 8023d56:	921d      	str	r2, [sp, #116]	@ 0x74
 8023d58:	9a08      	ldr	r2, [sp, #32]
 8023d5a:	785b      	ldrb	r3, [r3, #1]
 8023d5c:	2a00      	cmp	r2, #0
 8023d5e:	d03e      	beq.n	8023dde <_strtod_l+0x25e>
 8023d60:	900e      	str	r0, [sp, #56]	@ 0x38
 8023d62:	9206      	str	r2, [sp, #24]
 8023d64:	001a      	movs	r2, r3
 8023d66:	3a30      	subs	r2, #48	@ 0x30
 8023d68:	2a09      	cmp	r2, #9
 8023d6a:	d912      	bls.n	8023d92 <_strtod_l+0x212>
 8023d6c:	2201      	movs	r2, #1
 8023d6e:	4694      	mov	ip, r2
 8023d70:	e7c1      	b.n	8023cf6 <_strtod_l+0x176>
 8023d72:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023d74:	3001      	adds	r0, #1
 8023d76:	1c5a      	adds	r2, r3, #1
 8023d78:	921d      	str	r2, [sp, #116]	@ 0x74
 8023d7a:	785b      	ldrb	r3, [r3, #1]
 8023d7c:	2b30      	cmp	r3, #48	@ 0x30
 8023d7e:	d0f8      	beq.n	8023d72 <_strtod_l+0x1f2>
 8023d80:	001a      	movs	r2, r3
 8023d82:	3a31      	subs	r2, #49	@ 0x31
 8023d84:	2a08      	cmp	r2, #8
 8023d86:	d844      	bhi.n	8023e12 <_strtod_l+0x292>
 8023d88:	900e      	str	r0, [sp, #56]	@ 0x38
 8023d8a:	2000      	movs	r0, #0
 8023d8c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8023d8e:	9006      	str	r0, [sp, #24]
 8023d90:	9213      	str	r2, [sp, #76]	@ 0x4c
 8023d92:	001c      	movs	r4, r3
 8023d94:	1c42      	adds	r2, r0, #1
 8023d96:	3c30      	subs	r4, #48	@ 0x30
 8023d98:	2b30      	cmp	r3, #48	@ 0x30
 8023d9a:	d01a      	beq.n	8023dd2 <_strtod_l+0x252>
 8023d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023d9e:	9906      	ldr	r1, [sp, #24]
 8023da0:	189b      	adds	r3, r3, r2
 8023da2:	930e      	str	r3, [sp, #56]	@ 0x38
 8023da4:	230a      	movs	r3, #10
 8023da6:	469c      	mov	ip, r3
 8023da8:	9d06      	ldr	r5, [sp, #24]
 8023daa:	1c4b      	adds	r3, r1, #1
 8023dac:	1b5d      	subs	r5, r3, r5
 8023dae:	42aa      	cmp	r2, r5
 8023db0:	dc17      	bgt.n	8023de2 <_strtod_l+0x262>
 8023db2:	43c3      	mvns	r3, r0
 8023db4:	9a06      	ldr	r2, [sp, #24]
 8023db6:	17db      	asrs	r3, r3, #31
 8023db8:	4003      	ands	r3, r0
 8023dba:	18d1      	adds	r1, r2, r3
 8023dbc:	3201      	adds	r2, #1
 8023dbe:	18d3      	adds	r3, r2, r3
 8023dc0:	9306      	str	r3, [sp, #24]
 8023dc2:	2908      	cmp	r1, #8
 8023dc4:	dc1c      	bgt.n	8023e00 <_strtod_l+0x280>
 8023dc6:	230a      	movs	r3, #10
 8023dc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8023dca:	4353      	muls	r3, r2
 8023dcc:	2200      	movs	r2, #0
 8023dce:	18e3      	adds	r3, r4, r3
 8023dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8023dd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023dd4:	0010      	movs	r0, r2
 8023dd6:	1c59      	adds	r1, r3, #1
 8023dd8:	911d      	str	r1, [sp, #116]	@ 0x74
 8023dda:	785b      	ldrb	r3, [r3, #1]
 8023ddc:	e7c2      	b.n	8023d64 <_strtod_l+0x1e4>
 8023dde:	9808      	ldr	r0, [sp, #32]
 8023de0:	e7cc      	b.n	8023d7c <_strtod_l+0x1fc>
 8023de2:	2908      	cmp	r1, #8
 8023de4:	dc05      	bgt.n	8023df2 <_strtod_l+0x272>
 8023de6:	4665      	mov	r5, ip
 8023de8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8023dea:	4369      	muls	r1, r5
 8023dec:	910d      	str	r1, [sp, #52]	@ 0x34
 8023dee:	0019      	movs	r1, r3
 8023df0:	e7da      	b.n	8023da8 <_strtod_l+0x228>
 8023df2:	2b10      	cmp	r3, #16
 8023df4:	dcfb      	bgt.n	8023dee <_strtod_l+0x26e>
 8023df6:	4661      	mov	r1, ip
 8023df8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023dfa:	434d      	muls	r5, r1
 8023dfc:	9510      	str	r5, [sp, #64]	@ 0x40
 8023dfe:	e7f6      	b.n	8023dee <_strtod_l+0x26e>
 8023e00:	2200      	movs	r2, #0
 8023e02:	290f      	cmp	r1, #15
 8023e04:	dce5      	bgt.n	8023dd2 <_strtod_l+0x252>
 8023e06:	230a      	movs	r3, #10
 8023e08:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8023e0a:	435d      	muls	r5, r3
 8023e0c:	1963      	adds	r3, r4, r5
 8023e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023e10:	e7df      	b.n	8023dd2 <_strtod_l+0x252>
 8023e12:	2200      	movs	r2, #0
 8023e14:	920e      	str	r2, [sp, #56]	@ 0x38
 8023e16:	9206      	str	r2, [sp, #24]
 8023e18:	3201      	adds	r2, #1
 8023e1a:	e7a8      	b.n	8023d6e <_strtod_l+0x1ee>
 8023e1c:	2400      	movs	r4, #0
 8023e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e20:	3302      	adds	r3, #2
 8023e22:	931d      	str	r3, [sp, #116]	@ 0x74
 8023e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023e26:	789b      	ldrb	r3, [r3, #2]
 8023e28:	001a      	movs	r2, r3
 8023e2a:	3a30      	subs	r2, #48	@ 0x30
 8023e2c:	2a09      	cmp	r2, #9
 8023e2e:	d913      	bls.n	8023e58 <_strtod_l+0x2d8>
 8023e30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023e32:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e34:	2200      	movs	r2, #0
 8023e36:	e032      	b.n	8023e9e <_strtod_l+0x31e>
 8023e38:	0802e270 	.word	0x0802e270
 8023e3c:	7ff00000 	.word	0x7ff00000
 8023e40:	ffefffff 	.word	0xffefffff
 8023e44:	00000433 	.word	0x00000433
 8023e48:	7fffffff 	.word	0x7fffffff
 8023e4c:	0802e088 	.word	0x0802e088
 8023e50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e52:	1c5a      	adds	r2, r3, #1
 8023e54:	921d      	str	r2, [sp, #116]	@ 0x74
 8023e56:	785b      	ldrb	r3, [r3, #1]
 8023e58:	2b30      	cmp	r3, #48	@ 0x30
 8023e5a:	d0f9      	beq.n	8023e50 <_strtod_l+0x2d0>
 8023e5c:	2200      	movs	r2, #0
 8023e5e:	9207      	str	r2, [sp, #28]
 8023e60:	001a      	movs	r2, r3
 8023e62:	3a31      	subs	r2, #49	@ 0x31
 8023e64:	2a08      	cmp	r2, #8
 8023e66:	d81b      	bhi.n	8023ea0 <_strtod_l+0x320>
 8023e68:	3b30      	subs	r3, #48	@ 0x30
 8023e6a:	001a      	movs	r2, r3
 8023e6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e6e:	9307      	str	r3, [sp, #28]
 8023e70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023e72:	1c59      	adds	r1, r3, #1
 8023e74:	911d      	str	r1, [sp, #116]	@ 0x74
 8023e76:	785b      	ldrb	r3, [r3, #1]
 8023e78:	001d      	movs	r5, r3
 8023e7a:	3d30      	subs	r5, #48	@ 0x30
 8023e7c:	2d09      	cmp	r5, #9
 8023e7e:	d93a      	bls.n	8023ef6 <_strtod_l+0x376>
 8023e80:	9d07      	ldr	r5, [sp, #28]
 8023e82:	1b49      	subs	r1, r1, r5
 8023e84:	000d      	movs	r5, r1
 8023e86:	49b3      	ldr	r1, [pc, #716]	@ (8024154 <_strtod_l+0x5d4>)
 8023e88:	9107      	str	r1, [sp, #28]
 8023e8a:	2d08      	cmp	r5, #8
 8023e8c:	dc03      	bgt.n	8023e96 <_strtod_l+0x316>
 8023e8e:	9207      	str	r2, [sp, #28]
 8023e90:	428a      	cmp	r2, r1
 8023e92:	dd00      	ble.n	8023e96 <_strtod_l+0x316>
 8023e94:	9107      	str	r1, [sp, #28]
 8023e96:	2c00      	cmp	r4, #0
 8023e98:	d002      	beq.n	8023ea0 <_strtod_l+0x320>
 8023e9a:	9a07      	ldr	r2, [sp, #28]
 8023e9c:	4252      	negs	r2, r2
 8023e9e:	9207      	str	r2, [sp, #28]
 8023ea0:	9a06      	ldr	r2, [sp, #24]
 8023ea2:	2a00      	cmp	r2, #0
 8023ea4:	d14b      	bne.n	8023f3e <_strtod_l+0x3be>
 8023ea6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023ea8:	4310      	orrs	r0, r2
 8023eaa:	d000      	beq.n	8023eae <_strtod_l+0x32e>
 8023eac:	e6a3      	b.n	8023bf6 <_strtod_l+0x76>
 8023eae:	4662      	mov	r2, ip
 8023eb0:	2a00      	cmp	r2, #0
 8023eb2:	d000      	beq.n	8023eb6 <_strtod_l+0x336>
 8023eb4:	e6bb      	b.n	8023c2e <_strtod_l+0xae>
 8023eb6:	2b69      	cmp	r3, #105	@ 0x69
 8023eb8:	d025      	beq.n	8023f06 <_strtod_l+0x386>
 8023eba:	dc21      	bgt.n	8023f00 <_strtod_l+0x380>
 8023ebc:	2b49      	cmp	r3, #73	@ 0x49
 8023ebe:	d022      	beq.n	8023f06 <_strtod_l+0x386>
 8023ec0:	2b4e      	cmp	r3, #78	@ 0x4e
 8023ec2:	d000      	beq.n	8023ec6 <_strtod_l+0x346>
 8023ec4:	e6b3      	b.n	8023c2e <_strtod_l+0xae>
 8023ec6:	49a4      	ldr	r1, [pc, #656]	@ (8024158 <_strtod_l+0x5d8>)
 8023ec8:	a81d      	add	r0, sp, #116	@ 0x74
 8023eca:	f002 fe43 	bl	8026b54 <__match>
 8023ece:	2800      	cmp	r0, #0
 8023ed0:	d100      	bne.n	8023ed4 <_strtod_l+0x354>
 8023ed2:	e6ac      	b.n	8023c2e <_strtod_l+0xae>
 8023ed4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023ed6:	781b      	ldrb	r3, [r3, #0]
 8023ed8:	2b28      	cmp	r3, #40	@ 0x28
 8023eda:	d12a      	bne.n	8023f32 <_strtod_l+0x3b2>
 8023edc:	499f      	ldr	r1, [pc, #636]	@ (802415c <_strtod_l+0x5dc>)
 8023ede:	aa20      	add	r2, sp, #128	@ 0x80
 8023ee0:	a81d      	add	r0, sp, #116	@ 0x74
 8023ee2:	f002 fe4b 	bl	8026b7c <__hexnan>
 8023ee6:	2805      	cmp	r0, #5
 8023ee8:	d123      	bne.n	8023f32 <_strtod_l+0x3b2>
 8023eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8023eec:	4a9c      	ldr	r2, [pc, #624]	@ (8024160 <_strtod_l+0x5e0>)
 8023eee:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8023ef0:	431a      	orrs	r2, r3
 8023ef2:	0017      	movs	r7, r2
 8023ef4:	e67f      	b.n	8023bf6 <_strtod_l+0x76>
 8023ef6:	210a      	movs	r1, #10
 8023ef8:	434a      	muls	r2, r1
 8023efa:	18d2      	adds	r2, r2, r3
 8023efc:	3a30      	subs	r2, #48	@ 0x30
 8023efe:	e7b7      	b.n	8023e70 <_strtod_l+0x2f0>
 8023f00:	2b6e      	cmp	r3, #110	@ 0x6e
 8023f02:	d0e0      	beq.n	8023ec6 <_strtod_l+0x346>
 8023f04:	e693      	b.n	8023c2e <_strtod_l+0xae>
 8023f06:	4997      	ldr	r1, [pc, #604]	@ (8024164 <_strtod_l+0x5e4>)
 8023f08:	a81d      	add	r0, sp, #116	@ 0x74
 8023f0a:	f002 fe23 	bl	8026b54 <__match>
 8023f0e:	2800      	cmp	r0, #0
 8023f10:	d100      	bne.n	8023f14 <_strtod_l+0x394>
 8023f12:	e68c      	b.n	8023c2e <_strtod_l+0xae>
 8023f14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f16:	4994      	ldr	r1, [pc, #592]	@ (8024168 <_strtod_l+0x5e8>)
 8023f18:	3b01      	subs	r3, #1
 8023f1a:	a81d      	add	r0, sp, #116	@ 0x74
 8023f1c:	931d      	str	r3, [sp, #116]	@ 0x74
 8023f1e:	f002 fe19 	bl	8026b54 <__match>
 8023f22:	2800      	cmp	r0, #0
 8023f24:	d102      	bne.n	8023f2c <_strtod_l+0x3ac>
 8023f26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8023f28:	3301      	adds	r3, #1
 8023f2a:	931d      	str	r3, [sp, #116]	@ 0x74
 8023f2c:	2600      	movs	r6, #0
 8023f2e:	4f8c      	ldr	r7, [pc, #560]	@ (8024160 <_strtod_l+0x5e0>)
 8023f30:	e661      	b.n	8023bf6 <_strtod_l+0x76>
 8023f32:	488e      	ldr	r0, [pc, #568]	@ (802416c <_strtod_l+0x5ec>)
 8023f34:	f001 fcaa 	bl	802588c <nan>
 8023f38:	0006      	movs	r6, r0
 8023f3a:	000f      	movs	r7, r1
 8023f3c:	e65b      	b.n	8023bf6 <_strtod_l+0x76>
 8023f3e:	9b07      	ldr	r3, [sp, #28]
 8023f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023f42:	1a9b      	subs	r3, r3, r2
 8023f44:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f46:	9b08      	ldr	r3, [sp, #32]
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	d101      	bne.n	8023f50 <_strtod_l+0x3d0>
 8023f4c:	9b06      	ldr	r3, [sp, #24]
 8023f4e:	9308      	str	r3, [sp, #32]
 8023f50:	9c06      	ldr	r4, [sp, #24]
 8023f52:	2c10      	cmp	r4, #16
 8023f54:	dd00      	ble.n	8023f58 <_strtod_l+0x3d8>
 8023f56:	2410      	movs	r4, #16
 8023f58:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023f5a:	f7df fc77 	bl	800384c <__aeabi_ui2d>
 8023f5e:	9b06      	ldr	r3, [sp, #24]
 8023f60:	0006      	movs	r6, r0
 8023f62:	000f      	movs	r7, r1
 8023f64:	2b09      	cmp	r3, #9
 8023f66:	dc13      	bgt.n	8023f90 <_strtod_l+0x410>
 8023f68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	d100      	bne.n	8023f70 <_strtod_l+0x3f0>
 8023f6e:	e642      	b.n	8023bf6 <_strtod_l+0x76>
 8023f70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	dc00      	bgt.n	8023f78 <_strtod_l+0x3f8>
 8023f76:	e07e      	b.n	8024076 <_strtod_l+0x4f6>
 8023f78:	2b16      	cmp	r3, #22
 8023f7a:	dc63      	bgt.n	8024044 <_strtod_l+0x4c4>
 8023f7c:	497c      	ldr	r1, [pc, #496]	@ (8024170 <_strtod_l+0x5f0>)
 8023f7e:	00db      	lsls	r3, r3, #3
 8023f80:	18c9      	adds	r1, r1, r3
 8023f82:	0032      	movs	r2, r6
 8023f84:	6808      	ldr	r0, [r1, #0]
 8023f86:	6849      	ldr	r1, [r1, #4]
 8023f88:	003b      	movs	r3, r7
 8023f8a:	f7de fce3 	bl	8002954 <__aeabi_dmul>
 8023f8e:	e7d3      	b.n	8023f38 <_strtod_l+0x3b8>
 8023f90:	0022      	movs	r2, r4
 8023f92:	4b77      	ldr	r3, [pc, #476]	@ (8024170 <_strtod_l+0x5f0>)
 8023f94:	3a09      	subs	r2, #9
 8023f96:	00d2      	lsls	r2, r2, #3
 8023f98:	189b      	adds	r3, r3, r2
 8023f9a:	681a      	ldr	r2, [r3, #0]
 8023f9c:	685b      	ldr	r3, [r3, #4]
 8023f9e:	f7de fcd9 	bl	8002954 <__aeabi_dmul>
 8023fa2:	0006      	movs	r6, r0
 8023fa4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023fa6:	000f      	movs	r7, r1
 8023fa8:	f7df fc50 	bl	800384c <__aeabi_ui2d>
 8023fac:	000b      	movs	r3, r1
 8023fae:	0002      	movs	r2, r0
 8023fb0:	0039      	movs	r1, r7
 8023fb2:	0030      	movs	r0, r6
 8023fb4:	f7dd fcce 	bl	8001954 <__aeabi_dadd>
 8023fb8:	9b06      	ldr	r3, [sp, #24]
 8023fba:	0006      	movs	r6, r0
 8023fbc:	000f      	movs	r7, r1
 8023fbe:	2b0f      	cmp	r3, #15
 8023fc0:	ddd2      	ble.n	8023f68 <_strtod_l+0x3e8>
 8023fc2:	9b06      	ldr	r3, [sp, #24]
 8023fc4:	1b1c      	subs	r4, r3, r4
 8023fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023fc8:	18e4      	adds	r4, r4, r3
 8023fca:	2c00      	cmp	r4, #0
 8023fcc:	dc00      	bgt.n	8023fd0 <_strtod_l+0x450>
 8023fce:	e09b      	b.n	8024108 <_strtod_l+0x588>
 8023fd0:	220f      	movs	r2, #15
 8023fd2:	0023      	movs	r3, r4
 8023fd4:	4013      	ands	r3, r2
 8023fd6:	4214      	tst	r4, r2
 8023fd8:	d00a      	beq.n	8023ff0 <_strtod_l+0x470>
 8023fda:	4965      	ldr	r1, [pc, #404]	@ (8024170 <_strtod_l+0x5f0>)
 8023fdc:	00db      	lsls	r3, r3, #3
 8023fde:	18c9      	adds	r1, r1, r3
 8023fe0:	0032      	movs	r2, r6
 8023fe2:	6808      	ldr	r0, [r1, #0]
 8023fe4:	6849      	ldr	r1, [r1, #4]
 8023fe6:	003b      	movs	r3, r7
 8023fe8:	f7de fcb4 	bl	8002954 <__aeabi_dmul>
 8023fec:	0006      	movs	r6, r0
 8023fee:	000f      	movs	r7, r1
 8023ff0:	230f      	movs	r3, #15
 8023ff2:	439c      	bics	r4, r3
 8023ff4:	d073      	beq.n	80240de <_strtod_l+0x55e>
 8023ff6:	3326      	adds	r3, #38	@ 0x26
 8023ff8:	33ff      	adds	r3, #255	@ 0xff
 8023ffa:	429c      	cmp	r4, r3
 8023ffc:	dd4b      	ble.n	8024096 <_strtod_l+0x516>
 8023ffe:	2300      	movs	r3, #0
 8024000:	9306      	str	r3, [sp, #24]
 8024002:	9307      	str	r3, [sp, #28]
 8024004:	930d      	str	r3, [sp, #52]	@ 0x34
 8024006:	9308      	str	r3, [sp, #32]
 8024008:	2322      	movs	r3, #34	@ 0x22
 802400a:	2600      	movs	r6, #0
 802400c:	9a05      	ldr	r2, [sp, #20]
 802400e:	4f54      	ldr	r7, [pc, #336]	@ (8024160 <_strtod_l+0x5e0>)
 8024010:	6013      	str	r3, [r2, #0]
 8024012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024014:	42b3      	cmp	r3, r6
 8024016:	d100      	bne.n	802401a <_strtod_l+0x49a>
 8024018:	e5ed      	b.n	8023bf6 <_strtod_l+0x76>
 802401a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802401c:	9805      	ldr	r0, [sp, #20]
 802401e:	f002 ff67 	bl	8026ef0 <_Bfree>
 8024022:	9908      	ldr	r1, [sp, #32]
 8024024:	9805      	ldr	r0, [sp, #20]
 8024026:	f002 ff63 	bl	8026ef0 <_Bfree>
 802402a:	9907      	ldr	r1, [sp, #28]
 802402c:	9805      	ldr	r0, [sp, #20]
 802402e:	f002 ff5f 	bl	8026ef0 <_Bfree>
 8024032:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024034:	9805      	ldr	r0, [sp, #20]
 8024036:	f002 ff5b 	bl	8026ef0 <_Bfree>
 802403a:	9906      	ldr	r1, [sp, #24]
 802403c:	9805      	ldr	r0, [sp, #20]
 802403e:	f002 ff57 	bl	8026ef0 <_Bfree>
 8024042:	e5d8      	b.n	8023bf6 <_strtod_l+0x76>
 8024044:	2325      	movs	r3, #37	@ 0x25
 8024046:	9a06      	ldr	r2, [sp, #24]
 8024048:	1a9b      	subs	r3, r3, r2
 802404a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802404c:	4293      	cmp	r3, r2
 802404e:	dbb8      	blt.n	8023fc2 <_strtod_l+0x442>
 8024050:	240f      	movs	r4, #15
 8024052:	9b06      	ldr	r3, [sp, #24]
 8024054:	4d46      	ldr	r5, [pc, #280]	@ (8024170 <_strtod_l+0x5f0>)
 8024056:	1ae4      	subs	r4, r4, r3
 8024058:	00e1      	lsls	r1, r4, #3
 802405a:	1869      	adds	r1, r5, r1
 802405c:	0032      	movs	r2, r6
 802405e:	6808      	ldr	r0, [r1, #0]
 8024060:	6849      	ldr	r1, [r1, #4]
 8024062:	003b      	movs	r3, r7
 8024064:	f7de fc76 	bl	8002954 <__aeabi_dmul>
 8024068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802406a:	1b1c      	subs	r4, r3, r4
 802406c:	00e4      	lsls	r4, r4, #3
 802406e:	192d      	adds	r5, r5, r4
 8024070:	682a      	ldr	r2, [r5, #0]
 8024072:	686b      	ldr	r3, [r5, #4]
 8024074:	e789      	b.n	8023f8a <_strtod_l+0x40a>
 8024076:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024078:	3316      	adds	r3, #22
 802407a:	dba2      	blt.n	8023fc2 <_strtod_l+0x442>
 802407c:	9907      	ldr	r1, [sp, #28]
 802407e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024080:	4b3b      	ldr	r3, [pc, #236]	@ (8024170 <_strtod_l+0x5f0>)
 8024082:	1a52      	subs	r2, r2, r1
 8024084:	00d2      	lsls	r2, r2, #3
 8024086:	189b      	adds	r3, r3, r2
 8024088:	0030      	movs	r0, r6
 802408a:	681a      	ldr	r2, [r3, #0]
 802408c:	685b      	ldr	r3, [r3, #4]
 802408e:	0039      	movs	r1, r7
 8024090:	f7de f826 	bl	80020e0 <__aeabi_ddiv>
 8024094:	e750      	b.n	8023f38 <_strtod_l+0x3b8>
 8024096:	2300      	movs	r3, #0
 8024098:	0030      	movs	r0, r6
 802409a:	0039      	movs	r1, r7
 802409c:	4d35      	ldr	r5, [pc, #212]	@ (8024174 <_strtod_l+0x5f4>)
 802409e:	1124      	asrs	r4, r4, #4
 80240a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240a2:	2c01      	cmp	r4, #1
 80240a4:	dc1e      	bgt.n	80240e4 <_strtod_l+0x564>
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	d001      	beq.n	80240ae <_strtod_l+0x52e>
 80240aa:	0006      	movs	r6, r0
 80240ac:	000f      	movs	r7, r1
 80240ae:	4b32      	ldr	r3, [pc, #200]	@ (8024178 <_strtod_l+0x5f8>)
 80240b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80240b2:	18ff      	adds	r7, r7, r3
 80240b4:	4b2f      	ldr	r3, [pc, #188]	@ (8024174 <_strtod_l+0x5f4>)
 80240b6:	00d5      	lsls	r5, r2, #3
 80240b8:	195d      	adds	r5, r3, r5
 80240ba:	0032      	movs	r2, r6
 80240bc:	6828      	ldr	r0, [r5, #0]
 80240be:	6869      	ldr	r1, [r5, #4]
 80240c0:	003b      	movs	r3, r7
 80240c2:	f7de fc47 	bl	8002954 <__aeabi_dmul>
 80240c6:	4b26      	ldr	r3, [pc, #152]	@ (8024160 <_strtod_l+0x5e0>)
 80240c8:	4a2c      	ldr	r2, [pc, #176]	@ (802417c <_strtod_l+0x5fc>)
 80240ca:	0006      	movs	r6, r0
 80240cc:	400b      	ands	r3, r1
 80240ce:	4293      	cmp	r3, r2
 80240d0:	d895      	bhi.n	8023ffe <_strtod_l+0x47e>
 80240d2:	4a2b      	ldr	r2, [pc, #172]	@ (8024180 <_strtod_l+0x600>)
 80240d4:	4293      	cmp	r3, r2
 80240d6:	d913      	bls.n	8024100 <_strtod_l+0x580>
 80240d8:	2601      	movs	r6, #1
 80240da:	4f2a      	ldr	r7, [pc, #168]	@ (8024184 <_strtod_l+0x604>)
 80240dc:	4276      	negs	r6, r6
 80240de:	2300      	movs	r3, #0
 80240e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240e2:	e086      	b.n	80241f2 <_strtod_l+0x672>
 80240e4:	2201      	movs	r2, #1
 80240e6:	4214      	tst	r4, r2
 80240e8:	d004      	beq.n	80240f4 <_strtod_l+0x574>
 80240ea:	682a      	ldr	r2, [r5, #0]
 80240ec:	686b      	ldr	r3, [r5, #4]
 80240ee:	f7de fc31 	bl	8002954 <__aeabi_dmul>
 80240f2:	2301      	movs	r3, #1
 80240f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80240f6:	1064      	asrs	r4, r4, #1
 80240f8:	3201      	adds	r2, #1
 80240fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80240fc:	3508      	adds	r5, #8
 80240fe:	e7d0      	b.n	80240a2 <_strtod_l+0x522>
 8024100:	23d4      	movs	r3, #212	@ 0xd4
 8024102:	049b      	lsls	r3, r3, #18
 8024104:	18cf      	adds	r7, r1, r3
 8024106:	e7ea      	b.n	80240de <_strtod_l+0x55e>
 8024108:	2c00      	cmp	r4, #0
 802410a:	d0e8      	beq.n	80240de <_strtod_l+0x55e>
 802410c:	4264      	negs	r4, r4
 802410e:	230f      	movs	r3, #15
 8024110:	0022      	movs	r2, r4
 8024112:	401a      	ands	r2, r3
 8024114:	421c      	tst	r4, r3
 8024116:	d00a      	beq.n	802412e <_strtod_l+0x5ae>
 8024118:	4b15      	ldr	r3, [pc, #84]	@ (8024170 <_strtod_l+0x5f0>)
 802411a:	00d2      	lsls	r2, r2, #3
 802411c:	189b      	adds	r3, r3, r2
 802411e:	0030      	movs	r0, r6
 8024120:	681a      	ldr	r2, [r3, #0]
 8024122:	685b      	ldr	r3, [r3, #4]
 8024124:	0039      	movs	r1, r7
 8024126:	f7dd ffdb 	bl	80020e0 <__aeabi_ddiv>
 802412a:	0006      	movs	r6, r0
 802412c:	000f      	movs	r7, r1
 802412e:	1124      	asrs	r4, r4, #4
 8024130:	d0d5      	beq.n	80240de <_strtod_l+0x55e>
 8024132:	2c1f      	cmp	r4, #31
 8024134:	dd28      	ble.n	8024188 <_strtod_l+0x608>
 8024136:	2300      	movs	r3, #0
 8024138:	9306      	str	r3, [sp, #24]
 802413a:	9307      	str	r3, [sp, #28]
 802413c:	930d      	str	r3, [sp, #52]	@ 0x34
 802413e:	9308      	str	r3, [sp, #32]
 8024140:	2322      	movs	r3, #34	@ 0x22
 8024142:	9a05      	ldr	r2, [sp, #20]
 8024144:	2600      	movs	r6, #0
 8024146:	6013      	str	r3, [r2, #0]
 8024148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802414a:	2700      	movs	r7, #0
 802414c:	2b00      	cmp	r3, #0
 802414e:	d000      	beq.n	8024152 <_strtod_l+0x5d2>
 8024150:	e763      	b.n	802401a <_strtod_l+0x49a>
 8024152:	e550      	b.n	8023bf6 <_strtod_l+0x76>
 8024154:	00004e1f 	.word	0x00004e1f
 8024158:	0802e097 	.word	0x0802e097
 802415c:	0802e25c 	.word	0x0802e25c
 8024160:	7ff00000 	.word	0x7ff00000
 8024164:	0802e08f 	.word	0x0802e08f
 8024168:	0802e0c9 	.word	0x0802e0c9
 802416c:	0802e258 	.word	0x0802e258
 8024170:	0802e3e8 	.word	0x0802e3e8
 8024174:	0802e3c0 	.word	0x0802e3c0
 8024178:	fcb00000 	.word	0xfcb00000
 802417c:	7ca00000 	.word	0x7ca00000
 8024180:	7c900000 	.word	0x7c900000
 8024184:	7fefffff 	.word	0x7fefffff
 8024188:	2310      	movs	r3, #16
 802418a:	0022      	movs	r2, r4
 802418c:	401a      	ands	r2, r3
 802418e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024190:	421c      	tst	r4, r3
 8024192:	d001      	beq.n	8024198 <_strtod_l+0x618>
 8024194:	335a      	adds	r3, #90	@ 0x5a
 8024196:	9309      	str	r3, [sp, #36]	@ 0x24
 8024198:	0030      	movs	r0, r6
 802419a:	0039      	movs	r1, r7
 802419c:	2300      	movs	r3, #0
 802419e:	4dc0      	ldr	r5, [pc, #768]	@ (80244a0 <_strtod_l+0x920>)
 80241a0:	2201      	movs	r2, #1
 80241a2:	4214      	tst	r4, r2
 80241a4:	d004      	beq.n	80241b0 <_strtod_l+0x630>
 80241a6:	682a      	ldr	r2, [r5, #0]
 80241a8:	686b      	ldr	r3, [r5, #4]
 80241aa:	f7de fbd3 	bl	8002954 <__aeabi_dmul>
 80241ae:	2301      	movs	r3, #1
 80241b0:	1064      	asrs	r4, r4, #1
 80241b2:	3508      	adds	r5, #8
 80241b4:	2c00      	cmp	r4, #0
 80241b6:	d1f3      	bne.n	80241a0 <_strtod_l+0x620>
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d001      	beq.n	80241c0 <_strtod_l+0x640>
 80241bc:	0006      	movs	r6, r0
 80241be:	000f      	movs	r7, r1
 80241c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d00d      	beq.n	80241e2 <_strtod_l+0x662>
 80241c6:	236b      	movs	r3, #107	@ 0x6b
 80241c8:	007a      	lsls	r2, r7, #1
 80241ca:	0d52      	lsrs	r2, r2, #21
 80241cc:	0039      	movs	r1, r7
 80241ce:	1a9b      	subs	r3, r3, r2
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	dd06      	ble.n	80241e2 <_strtod_l+0x662>
 80241d4:	2b1f      	cmp	r3, #31
 80241d6:	dd5c      	ble.n	8024292 <_strtod_l+0x712>
 80241d8:	2600      	movs	r6, #0
 80241da:	2b34      	cmp	r3, #52	@ 0x34
 80241dc:	dd52      	ble.n	8024284 <_strtod_l+0x704>
 80241de:	27dc      	movs	r7, #220	@ 0xdc
 80241e0:	04bf      	lsls	r7, r7, #18
 80241e2:	2200      	movs	r2, #0
 80241e4:	2300      	movs	r3, #0
 80241e6:	0030      	movs	r0, r6
 80241e8:	0039      	movs	r1, r7
 80241ea:	f7dc f961 	bl	80004b0 <__aeabi_dcmpeq>
 80241ee:	2800      	cmp	r0, #0
 80241f0:	d1a1      	bne.n	8024136 <_strtod_l+0x5b6>
 80241f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241f4:	9a08      	ldr	r2, [sp, #32]
 80241f6:	9300      	str	r3, [sp, #0]
 80241f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80241fa:	9b06      	ldr	r3, [sp, #24]
 80241fc:	9805      	ldr	r0, [sp, #20]
 80241fe:	f002 fedf 	bl	8026fc0 <__s2b>
 8024202:	900d      	str	r0, [sp, #52]	@ 0x34
 8024204:	2800      	cmp	r0, #0
 8024206:	d100      	bne.n	802420a <_strtod_l+0x68a>
 8024208:	e6f9      	b.n	8023ffe <_strtod_l+0x47e>
 802420a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802420c:	9907      	ldr	r1, [sp, #28]
 802420e:	43db      	mvns	r3, r3
 8024210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024212:	17db      	asrs	r3, r3, #31
 8024214:	1a52      	subs	r2, r2, r1
 8024216:	9214      	str	r2, [sp, #80]	@ 0x50
 8024218:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802421a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802421c:	17d2      	asrs	r2, r2, #31
 802421e:	4011      	ands	r1, r2
 8024220:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024222:	9114      	str	r1, [sp, #80]	@ 0x50
 8024224:	401a      	ands	r2, r3
 8024226:	2300      	movs	r3, #0
 8024228:	921a      	str	r2, [sp, #104]	@ 0x68
 802422a:	9306      	str	r3, [sp, #24]
 802422c:	9307      	str	r3, [sp, #28]
 802422e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024230:	9805      	ldr	r0, [sp, #20]
 8024232:	6859      	ldr	r1, [r3, #4]
 8024234:	f002 fe18 	bl	8026e68 <_Balloc>
 8024238:	9008      	str	r0, [sp, #32]
 802423a:	2800      	cmp	r0, #0
 802423c:	d100      	bne.n	8024240 <_strtod_l+0x6c0>
 802423e:	e6e3      	b.n	8024008 <_strtod_l+0x488>
 8024240:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024242:	300c      	adds	r0, #12
 8024244:	0019      	movs	r1, r3
 8024246:	691a      	ldr	r2, [r3, #16]
 8024248:	310c      	adds	r1, #12
 802424a:	3202      	adds	r2, #2
 802424c:	0092      	lsls	r2, r2, #2
 802424e:	f001 fb13 	bl	8025878 <memcpy>
 8024252:	ab20      	add	r3, sp, #128	@ 0x80
 8024254:	9301      	str	r3, [sp, #4]
 8024256:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024258:	9300      	str	r3, [sp, #0]
 802425a:	0032      	movs	r2, r6
 802425c:	003b      	movs	r3, r7
 802425e:	9805      	ldr	r0, [sp, #20]
 8024260:	9610      	str	r6, [sp, #64]	@ 0x40
 8024262:	9711      	str	r7, [sp, #68]	@ 0x44
 8024264:	f003 f9f4 	bl	8027650 <__d2b>
 8024268:	901e      	str	r0, [sp, #120]	@ 0x78
 802426a:	2800      	cmp	r0, #0
 802426c:	d100      	bne.n	8024270 <_strtod_l+0x6f0>
 802426e:	e6cb      	b.n	8024008 <_strtod_l+0x488>
 8024270:	2101      	movs	r1, #1
 8024272:	9805      	ldr	r0, [sp, #20]
 8024274:	f002 ff40 	bl	80270f8 <__i2b>
 8024278:	9007      	str	r0, [sp, #28]
 802427a:	2800      	cmp	r0, #0
 802427c:	d10e      	bne.n	802429c <_strtod_l+0x71c>
 802427e:	2300      	movs	r3, #0
 8024280:	9307      	str	r3, [sp, #28]
 8024282:	e6c1      	b.n	8024008 <_strtod_l+0x488>
 8024284:	234b      	movs	r3, #75	@ 0x4b
 8024286:	1a9a      	subs	r2, r3, r2
 8024288:	3b4c      	subs	r3, #76	@ 0x4c
 802428a:	4093      	lsls	r3, r2
 802428c:	4019      	ands	r1, r3
 802428e:	000f      	movs	r7, r1
 8024290:	e7a7      	b.n	80241e2 <_strtod_l+0x662>
 8024292:	2201      	movs	r2, #1
 8024294:	4252      	negs	r2, r2
 8024296:	409a      	lsls	r2, r3
 8024298:	4016      	ands	r6, r2
 802429a:	e7a2      	b.n	80241e2 <_strtod_l+0x662>
 802429c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802429e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80242a0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80242a2:	1ad4      	subs	r4, r2, r3
 80242a4:	2b00      	cmp	r3, #0
 80242a6:	db01      	blt.n	80242ac <_strtod_l+0x72c>
 80242a8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80242aa:	195d      	adds	r5, r3, r5
 80242ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80242ae:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80242b0:	1a5b      	subs	r3, r3, r1
 80242b2:	2136      	movs	r1, #54	@ 0x36
 80242b4:	189b      	adds	r3, r3, r2
 80242b6:	1a8a      	subs	r2, r1, r2
 80242b8:	497a      	ldr	r1, [pc, #488]	@ (80244a4 <_strtod_l+0x924>)
 80242ba:	2001      	movs	r0, #1
 80242bc:	468c      	mov	ip, r1
 80242be:	2100      	movs	r1, #0
 80242c0:	3b01      	subs	r3, #1
 80242c2:	9115      	str	r1, [sp, #84]	@ 0x54
 80242c4:	9016      	str	r0, [sp, #88]	@ 0x58
 80242c6:	4563      	cmp	r3, ip
 80242c8:	da06      	bge.n	80242d8 <_strtod_l+0x758>
 80242ca:	4661      	mov	r1, ip
 80242cc:	1ac9      	subs	r1, r1, r3
 80242ce:	1a52      	subs	r2, r2, r1
 80242d0:	291f      	cmp	r1, #31
 80242d2:	dc3f      	bgt.n	8024354 <_strtod_l+0x7d4>
 80242d4:	4088      	lsls	r0, r1
 80242d6:	9016      	str	r0, [sp, #88]	@ 0x58
 80242d8:	18ab      	adds	r3, r5, r2
 80242da:	930e      	str	r3, [sp, #56]	@ 0x38
 80242dc:	18a4      	adds	r4, r4, r2
 80242de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80242e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242e2:	191c      	adds	r4, r3, r4
 80242e4:	002b      	movs	r3, r5
 80242e6:	4295      	cmp	r5, r2
 80242e8:	dd00      	ble.n	80242ec <_strtod_l+0x76c>
 80242ea:	0013      	movs	r3, r2
 80242ec:	42a3      	cmp	r3, r4
 80242ee:	dd00      	ble.n	80242f2 <_strtod_l+0x772>
 80242f0:	0023      	movs	r3, r4
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	dd04      	ble.n	8024300 <_strtod_l+0x780>
 80242f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80242f8:	1ae4      	subs	r4, r4, r3
 80242fa:	1ad2      	subs	r2, r2, r3
 80242fc:	920e      	str	r2, [sp, #56]	@ 0x38
 80242fe:	1aed      	subs	r5, r5, r3
 8024300:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024302:	2b00      	cmp	r3, #0
 8024304:	dd16      	ble.n	8024334 <_strtod_l+0x7b4>
 8024306:	001a      	movs	r2, r3
 8024308:	9907      	ldr	r1, [sp, #28]
 802430a:	9805      	ldr	r0, [sp, #20]
 802430c:	f002 ffb6 	bl	802727c <__pow5mult>
 8024310:	9007      	str	r0, [sp, #28]
 8024312:	2800      	cmp	r0, #0
 8024314:	d0b3      	beq.n	802427e <_strtod_l+0x6fe>
 8024316:	0001      	movs	r1, r0
 8024318:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802431a:	9805      	ldr	r0, [sp, #20]
 802431c:	f002 ff04 	bl	8027128 <__multiply>
 8024320:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024322:	2800      	cmp	r0, #0
 8024324:	d100      	bne.n	8024328 <_strtod_l+0x7a8>
 8024326:	e66f      	b.n	8024008 <_strtod_l+0x488>
 8024328:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802432a:	9805      	ldr	r0, [sp, #20]
 802432c:	f002 fde0 	bl	8026ef0 <_Bfree>
 8024330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024332:	931e      	str	r3, [sp, #120]	@ 0x78
 8024334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024336:	2b00      	cmp	r3, #0
 8024338:	dc12      	bgt.n	8024360 <_strtod_l+0x7e0>
 802433a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802433c:	2b00      	cmp	r3, #0
 802433e:	dd18      	ble.n	8024372 <_strtod_l+0x7f2>
 8024340:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024342:	9908      	ldr	r1, [sp, #32]
 8024344:	9805      	ldr	r0, [sp, #20]
 8024346:	f002 ff99 	bl	802727c <__pow5mult>
 802434a:	9008      	str	r0, [sp, #32]
 802434c:	2800      	cmp	r0, #0
 802434e:	d110      	bne.n	8024372 <_strtod_l+0x7f2>
 8024350:	2300      	movs	r3, #0
 8024352:	e658      	b.n	8024006 <_strtod_l+0x486>
 8024354:	4954      	ldr	r1, [pc, #336]	@ (80244a8 <_strtod_l+0x928>)
 8024356:	1acb      	subs	r3, r1, r3
 8024358:	0001      	movs	r1, r0
 802435a:	4099      	lsls	r1, r3
 802435c:	9115      	str	r1, [sp, #84]	@ 0x54
 802435e:	e7ba      	b.n	80242d6 <_strtod_l+0x756>
 8024360:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024362:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024364:	9805      	ldr	r0, [sp, #20]
 8024366:	f002 ffe5 	bl	8027334 <__lshift>
 802436a:	901e      	str	r0, [sp, #120]	@ 0x78
 802436c:	2800      	cmp	r0, #0
 802436e:	d1e4      	bne.n	802433a <_strtod_l+0x7ba>
 8024370:	e64a      	b.n	8024008 <_strtod_l+0x488>
 8024372:	2c00      	cmp	r4, #0
 8024374:	dd07      	ble.n	8024386 <_strtod_l+0x806>
 8024376:	0022      	movs	r2, r4
 8024378:	9908      	ldr	r1, [sp, #32]
 802437a:	9805      	ldr	r0, [sp, #20]
 802437c:	f002 ffda 	bl	8027334 <__lshift>
 8024380:	9008      	str	r0, [sp, #32]
 8024382:	2800      	cmp	r0, #0
 8024384:	d0e4      	beq.n	8024350 <_strtod_l+0x7d0>
 8024386:	2d00      	cmp	r5, #0
 8024388:	dd08      	ble.n	802439c <_strtod_l+0x81c>
 802438a:	002a      	movs	r2, r5
 802438c:	9907      	ldr	r1, [sp, #28]
 802438e:	9805      	ldr	r0, [sp, #20]
 8024390:	f002 ffd0 	bl	8027334 <__lshift>
 8024394:	9007      	str	r0, [sp, #28]
 8024396:	2800      	cmp	r0, #0
 8024398:	d100      	bne.n	802439c <_strtod_l+0x81c>
 802439a:	e635      	b.n	8024008 <_strtod_l+0x488>
 802439c:	9a08      	ldr	r2, [sp, #32]
 802439e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80243a0:	9805      	ldr	r0, [sp, #20]
 80243a2:	f003 f84f 	bl	8027444 <__mdiff>
 80243a6:	9006      	str	r0, [sp, #24]
 80243a8:	2800      	cmp	r0, #0
 80243aa:	d100      	bne.n	80243ae <_strtod_l+0x82e>
 80243ac:	e62c      	b.n	8024008 <_strtod_l+0x488>
 80243ae:	68c3      	ldr	r3, [r0, #12]
 80243b0:	9907      	ldr	r1, [sp, #28]
 80243b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80243b4:	2300      	movs	r3, #0
 80243b6:	60c3      	str	r3, [r0, #12]
 80243b8:	f003 f828 	bl	802740c <__mcmp>
 80243bc:	2800      	cmp	r0, #0
 80243be:	da3b      	bge.n	8024438 <_strtod_l+0x8b8>
 80243c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80243c2:	4333      	orrs	r3, r6
 80243c4:	d167      	bne.n	8024496 <_strtod_l+0x916>
 80243c6:	033b      	lsls	r3, r7, #12
 80243c8:	d165      	bne.n	8024496 <_strtod_l+0x916>
 80243ca:	22d6      	movs	r2, #214	@ 0xd6
 80243cc:	4b37      	ldr	r3, [pc, #220]	@ (80244ac <_strtod_l+0x92c>)
 80243ce:	04d2      	lsls	r2, r2, #19
 80243d0:	403b      	ands	r3, r7
 80243d2:	4293      	cmp	r3, r2
 80243d4:	d95f      	bls.n	8024496 <_strtod_l+0x916>
 80243d6:	9b06      	ldr	r3, [sp, #24]
 80243d8:	695b      	ldr	r3, [r3, #20]
 80243da:	2b00      	cmp	r3, #0
 80243dc:	d103      	bne.n	80243e6 <_strtod_l+0x866>
 80243de:	9b06      	ldr	r3, [sp, #24]
 80243e0:	691b      	ldr	r3, [r3, #16]
 80243e2:	2b01      	cmp	r3, #1
 80243e4:	dd57      	ble.n	8024496 <_strtod_l+0x916>
 80243e6:	9906      	ldr	r1, [sp, #24]
 80243e8:	2201      	movs	r2, #1
 80243ea:	9805      	ldr	r0, [sp, #20]
 80243ec:	f002 ffa2 	bl	8027334 <__lshift>
 80243f0:	9907      	ldr	r1, [sp, #28]
 80243f2:	9006      	str	r0, [sp, #24]
 80243f4:	f003 f80a 	bl	802740c <__mcmp>
 80243f8:	2800      	cmp	r0, #0
 80243fa:	dd4c      	ble.n	8024496 <_strtod_l+0x916>
 80243fc:	4b2b      	ldr	r3, [pc, #172]	@ (80244ac <_strtod_l+0x92c>)
 80243fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024400:	403b      	ands	r3, r7
 8024402:	2a00      	cmp	r2, #0
 8024404:	d074      	beq.n	80244f0 <_strtod_l+0x970>
 8024406:	22d6      	movs	r2, #214	@ 0xd6
 8024408:	04d2      	lsls	r2, r2, #19
 802440a:	4293      	cmp	r3, r2
 802440c:	d870      	bhi.n	80244f0 <_strtod_l+0x970>
 802440e:	22dc      	movs	r2, #220	@ 0xdc
 8024410:	0492      	lsls	r2, r2, #18
 8024412:	4293      	cmp	r3, r2
 8024414:	d800      	bhi.n	8024418 <_strtod_l+0x898>
 8024416:	e693      	b.n	8024140 <_strtod_l+0x5c0>
 8024418:	0030      	movs	r0, r6
 802441a:	0039      	movs	r1, r7
 802441c:	4b24      	ldr	r3, [pc, #144]	@ (80244b0 <_strtod_l+0x930>)
 802441e:	2200      	movs	r2, #0
 8024420:	f7de fa98 	bl	8002954 <__aeabi_dmul>
 8024424:	4b21      	ldr	r3, [pc, #132]	@ (80244ac <_strtod_l+0x92c>)
 8024426:	0006      	movs	r6, r0
 8024428:	000f      	movs	r7, r1
 802442a:	420b      	tst	r3, r1
 802442c:	d000      	beq.n	8024430 <_strtod_l+0x8b0>
 802442e:	e5f4      	b.n	802401a <_strtod_l+0x49a>
 8024430:	2322      	movs	r3, #34	@ 0x22
 8024432:	9a05      	ldr	r2, [sp, #20]
 8024434:	6013      	str	r3, [r2, #0]
 8024436:	e5f0      	b.n	802401a <_strtod_l+0x49a>
 8024438:	970e      	str	r7, [sp, #56]	@ 0x38
 802443a:	2800      	cmp	r0, #0
 802443c:	d175      	bne.n	802452a <_strtod_l+0x9aa>
 802443e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024440:	033b      	lsls	r3, r7, #12
 8024442:	0b1b      	lsrs	r3, r3, #12
 8024444:	2a00      	cmp	r2, #0
 8024446:	d039      	beq.n	80244bc <_strtod_l+0x93c>
 8024448:	4a1a      	ldr	r2, [pc, #104]	@ (80244b4 <_strtod_l+0x934>)
 802444a:	4293      	cmp	r3, r2
 802444c:	d138      	bne.n	80244c0 <_strtod_l+0x940>
 802444e:	2101      	movs	r1, #1
 8024450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024452:	4249      	negs	r1, r1
 8024454:	0032      	movs	r2, r6
 8024456:	0008      	movs	r0, r1
 8024458:	2b00      	cmp	r3, #0
 802445a:	d00b      	beq.n	8024474 <_strtod_l+0x8f4>
 802445c:	24d4      	movs	r4, #212	@ 0xd4
 802445e:	4b13      	ldr	r3, [pc, #76]	@ (80244ac <_strtod_l+0x92c>)
 8024460:	0008      	movs	r0, r1
 8024462:	403b      	ands	r3, r7
 8024464:	04e4      	lsls	r4, r4, #19
 8024466:	42a3      	cmp	r3, r4
 8024468:	d804      	bhi.n	8024474 <_strtod_l+0x8f4>
 802446a:	306c      	adds	r0, #108	@ 0x6c
 802446c:	0d1b      	lsrs	r3, r3, #20
 802446e:	1ac3      	subs	r3, r0, r3
 8024470:	4099      	lsls	r1, r3
 8024472:	0008      	movs	r0, r1
 8024474:	4282      	cmp	r2, r0
 8024476:	d123      	bne.n	80244c0 <_strtod_l+0x940>
 8024478:	4b0f      	ldr	r3, [pc, #60]	@ (80244b8 <_strtod_l+0x938>)
 802447a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802447c:	4299      	cmp	r1, r3
 802447e:	d102      	bne.n	8024486 <_strtod_l+0x906>
 8024480:	3201      	adds	r2, #1
 8024482:	d100      	bne.n	8024486 <_strtod_l+0x906>
 8024484:	e5c0      	b.n	8024008 <_strtod_l+0x488>
 8024486:	4b09      	ldr	r3, [pc, #36]	@ (80244ac <_strtod_l+0x92c>)
 8024488:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802448a:	2600      	movs	r6, #0
 802448c:	401a      	ands	r2, r3
 802448e:	0013      	movs	r3, r2
 8024490:	2280      	movs	r2, #128	@ 0x80
 8024492:	0352      	lsls	r2, r2, #13
 8024494:	189f      	adds	r7, r3, r2
 8024496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024498:	2b00      	cmp	r3, #0
 802449a:	d1bd      	bne.n	8024418 <_strtod_l+0x898>
 802449c:	e5bd      	b.n	802401a <_strtod_l+0x49a>
 802449e:	46c0      	nop			@ (mov r8, r8)
 80244a0:	0802e288 	.word	0x0802e288
 80244a4:	fffffc02 	.word	0xfffffc02
 80244a8:	fffffbe2 	.word	0xfffffbe2
 80244ac:	7ff00000 	.word	0x7ff00000
 80244b0:	39500000 	.word	0x39500000
 80244b4:	000fffff 	.word	0x000fffff
 80244b8:	7fefffff 	.word	0x7fefffff
 80244bc:	4333      	orrs	r3, r6
 80244be:	d09d      	beq.n	80243fc <_strtod_l+0x87c>
 80244c0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80244c2:	2b00      	cmp	r3, #0
 80244c4:	d01c      	beq.n	8024500 <_strtod_l+0x980>
 80244c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80244c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80244ca:	4213      	tst	r3, r2
 80244cc:	d0e3      	beq.n	8024496 <_strtod_l+0x916>
 80244ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80244d0:	0030      	movs	r0, r6
 80244d2:	0039      	movs	r1, r7
 80244d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80244d6:	2b00      	cmp	r3, #0
 80244d8:	d016      	beq.n	8024508 <_strtod_l+0x988>
 80244da:	f7ff fb39 	bl	8023b50 <sulp>
 80244de:	0002      	movs	r2, r0
 80244e0:	000b      	movs	r3, r1
 80244e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80244e4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80244e6:	f7dd fa35 	bl	8001954 <__aeabi_dadd>
 80244ea:	0006      	movs	r6, r0
 80244ec:	000f      	movs	r7, r1
 80244ee:	e7d2      	b.n	8024496 <_strtod_l+0x916>
 80244f0:	2601      	movs	r6, #1
 80244f2:	4a92      	ldr	r2, [pc, #584]	@ (802473c <_strtod_l+0xbbc>)
 80244f4:	4276      	negs	r6, r6
 80244f6:	189b      	adds	r3, r3, r2
 80244f8:	4a91      	ldr	r2, [pc, #580]	@ (8024740 <_strtod_l+0xbc0>)
 80244fa:	431a      	orrs	r2, r3
 80244fc:	0017      	movs	r7, r2
 80244fe:	e7ca      	b.n	8024496 <_strtod_l+0x916>
 8024500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024502:	4233      	tst	r3, r6
 8024504:	d0c7      	beq.n	8024496 <_strtod_l+0x916>
 8024506:	e7e2      	b.n	80244ce <_strtod_l+0x94e>
 8024508:	f7ff fb22 	bl	8023b50 <sulp>
 802450c:	0002      	movs	r2, r0
 802450e:	000b      	movs	r3, r1
 8024510:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024512:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024514:	f7de fd04 	bl	8002f20 <__aeabi_dsub>
 8024518:	2200      	movs	r2, #0
 802451a:	2300      	movs	r3, #0
 802451c:	0006      	movs	r6, r0
 802451e:	000f      	movs	r7, r1
 8024520:	f7db ffc6 	bl	80004b0 <__aeabi_dcmpeq>
 8024524:	2800      	cmp	r0, #0
 8024526:	d0b6      	beq.n	8024496 <_strtod_l+0x916>
 8024528:	e60a      	b.n	8024140 <_strtod_l+0x5c0>
 802452a:	9907      	ldr	r1, [sp, #28]
 802452c:	9806      	ldr	r0, [sp, #24]
 802452e:	f003 f8ef 	bl	8027710 <__ratio>
 8024532:	2380      	movs	r3, #128	@ 0x80
 8024534:	2200      	movs	r2, #0
 8024536:	05db      	lsls	r3, r3, #23
 8024538:	0004      	movs	r4, r0
 802453a:	000d      	movs	r5, r1
 802453c:	f7db ffc8 	bl	80004d0 <__aeabi_dcmple>
 8024540:	2800      	cmp	r0, #0
 8024542:	d06c      	beq.n	802461e <_strtod_l+0xa9e>
 8024544:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024546:	2b00      	cmp	r3, #0
 8024548:	d177      	bne.n	802463a <_strtod_l+0xaba>
 802454a:	2e00      	cmp	r6, #0
 802454c:	d157      	bne.n	80245fe <_strtod_l+0xa7e>
 802454e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024550:	031b      	lsls	r3, r3, #12
 8024552:	d15a      	bne.n	802460a <_strtod_l+0xa8a>
 8024554:	2200      	movs	r2, #0
 8024556:	0020      	movs	r0, r4
 8024558:	0029      	movs	r1, r5
 802455a:	4b7a      	ldr	r3, [pc, #488]	@ (8024744 <_strtod_l+0xbc4>)
 802455c:	f7db ffae 	bl	80004bc <__aeabi_dcmplt>
 8024560:	2800      	cmp	r0, #0
 8024562:	d159      	bne.n	8024618 <_strtod_l+0xa98>
 8024564:	0020      	movs	r0, r4
 8024566:	0029      	movs	r1, r5
 8024568:	2200      	movs	r2, #0
 802456a:	4b77      	ldr	r3, [pc, #476]	@ (8024748 <_strtod_l+0xbc8>)
 802456c:	f7de f9f2 	bl	8002954 <__aeabi_dmul>
 8024570:	0004      	movs	r4, r0
 8024572:	000d      	movs	r5, r1
 8024574:	2380      	movs	r3, #128	@ 0x80
 8024576:	061b      	lsls	r3, r3, #24
 8024578:	18eb      	adds	r3, r5, r3
 802457a:	940a      	str	r4, [sp, #40]	@ 0x28
 802457c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802457e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024582:	9216      	str	r2, [sp, #88]	@ 0x58
 8024584:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024586:	4a71      	ldr	r2, [pc, #452]	@ (802474c <_strtod_l+0xbcc>)
 8024588:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802458a:	4013      	ands	r3, r2
 802458c:	9315      	str	r3, [sp, #84]	@ 0x54
 802458e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024590:	4b6f      	ldr	r3, [pc, #444]	@ (8024750 <_strtod_l+0xbd0>)
 8024592:	429a      	cmp	r2, r3
 8024594:	d000      	beq.n	8024598 <_strtod_l+0xa18>
 8024596:	e087      	b.n	80246a8 <_strtod_l+0xb28>
 8024598:	4a6e      	ldr	r2, [pc, #440]	@ (8024754 <_strtod_l+0xbd4>)
 802459a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802459c:	4694      	mov	ip, r2
 802459e:	4463      	add	r3, ip
 80245a0:	001f      	movs	r7, r3
 80245a2:	0030      	movs	r0, r6
 80245a4:	0019      	movs	r1, r3
 80245a6:	f002 ffe7 	bl	8027578 <__ulp>
 80245aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80245ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80245ae:	f7de f9d1 	bl	8002954 <__aeabi_dmul>
 80245b2:	0032      	movs	r2, r6
 80245b4:	003b      	movs	r3, r7
 80245b6:	f7dd f9cd 	bl	8001954 <__aeabi_dadd>
 80245ba:	4a64      	ldr	r2, [pc, #400]	@ (802474c <_strtod_l+0xbcc>)
 80245bc:	4b66      	ldr	r3, [pc, #408]	@ (8024758 <_strtod_l+0xbd8>)
 80245be:	0006      	movs	r6, r0
 80245c0:	400a      	ands	r2, r1
 80245c2:	429a      	cmp	r2, r3
 80245c4:	d940      	bls.n	8024648 <_strtod_l+0xac8>
 80245c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80245c8:	4a64      	ldr	r2, [pc, #400]	@ (802475c <_strtod_l+0xbdc>)
 80245ca:	4293      	cmp	r3, r2
 80245cc:	d103      	bne.n	80245d6 <_strtod_l+0xa56>
 80245ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80245d0:	3301      	adds	r3, #1
 80245d2:	d100      	bne.n	80245d6 <_strtod_l+0xa56>
 80245d4:	e518      	b.n	8024008 <_strtod_l+0x488>
 80245d6:	2601      	movs	r6, #1
 80245d8:	4f60      	ldr	r7, [pc, #384]	@ (802475c <_strtod_l+0xbdc>)
 80245da:	4276      	negs	r6, r6
 80245dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80245de:	9805      	ldr	r0, [sp, #20]
 80245e0:	f002 fc86 	bl	8026ef0 <_Bfree>
 80245e4:	9908      	ldr	r1, [sp, #32]
 80245e6:	9805      	ldr	r0, [sp, #20]
 80245e8:	f002 fc82 	bl	8026ef0 <_Bfree>
 80245ec:	9907      	ldr	r1, [sp, #28]
 80245ee:	9805      	ldr	r0, [sp, #20]
 80245f0:	f002 fc7e 	bl	8026ef0 <_Bfree>
 80245f4:	9906      	ldr	r1, [sp, #24]
 80245f6:	9805      	ldr	r0, [sp, #20]
 80245f8:	f002 fc7a 	bl	8026ef0 <_Bfree>
 80245fc:	e617      	b.n	802422e <_strtod_l+0x6ae>
 80245fe:	2e01      	cmp	r6, #1
 8024600:	d103      	bne.n	802460a <_strtod_l+0xa8a>
 8024602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024604:	2b00      	cmp	r3, #0
 8024606:	d100      	bne.n	802460a <_strtod_l+0xa8a>
 8024608:	e59a      	b.n	8024140 <_strtod_l+0x5c0>
 802460a:	2300      	movs	r3, #0
 802460c:	4c54      	ldr	r4, [pc, #336]	@ (8024760 <_strtod_l+0xbe0>)
 802460e:	4d4d      	ldr	r5, [pc, #308]	@ (8024744 <_strtod_l+0xbc4>)
 8024610:	930a      	str	r3, [sp, #40]	@ 0x28
 8024612:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024614:	2400      	movs	r4, #0
 8024616:	e7b2      	b.n	802457e <_strtod_l+0x9fe>
 8024618:	2400      	movs	r4, #0
 802461a:	4d4b      	ldr	r5, [pc, #300]	@ (8024748 <_strtod_l+0xbc8>)
 802461c:	e7aa      	b.n	8024574 <_strtod_l+0x9f4>
 802461e:	0020      	movs	r0, r4
 8024620:	0029      	movs	r1, r5
 8024622:	4b49      	ldr	r3, [pc, #292]	@ (8024748 <_strtod_l+0xbc8>)
 8024624:	2200      	movs	r2, #0
 8024626:	f7de f995 	bl	8002954 <__aeabi_dmul>
 802462a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802462c:	0004      	movs	r4, r0
 802462e:	000d      	movs	r5, r1
 8024630:	2b00      	cmp	r3, #0
 8024632:	d09f      	beq.n	8024574 <_strtod_l+0x9f4>
 8024634:	940a      	str	r4, [sp, #40]	@ 0x28
 8024636:	950b      	str	r5, [sp, #44]	@ 0x2c
 8024638:	e7a1      	b.n	802457e <_strtod_l+0x9fe>
 802463a:	2300      	movs	r3, #0
 802463c:	4c41      	ldr	r4, [pc, #260]	@ (8024744 <_strtod_l+0xbc4>)
 802463e:	0025      	movs	r5, r4
 8024640:	930a      	str	r3, [sp, #40]	@ 0x28
 8024642:	940b      	str	r4, [sp, #44]	@ 0x2c
 8024644:	001c      	movs	r4, r3
 8024646:	e79a      	b.n	802457e <_strtod_l+0x9fe>
 8024648:	23d4      	movs	r3, #212	@ 0xd4
 802464a:	049b      	lsls	r3, r3, #18
 802464c:	18cf      	adds	r7, r1, r3
 802464e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024650:	9710      	str	r7, [sp, #64]	@ 0x40
 8024652:	2b00      	cmp	r3, #0
 8024654:	d1c2      	bne.n	80245dc <_strtod_l+0xa5c>
 8024656:	4b3d      	ldr	r3, [pc, #244]	@ (802474c <_strtod_l+0xbcc>)
 8024658:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802465a:	403b      	ands	r3, r7
 802465c:	429a      	cmp	r2, r3
 802465e:	d1bd      	bne.n	80245dc <_strtod_l+0xa5c>
 8024660:	0020      	movs	r0, r4
 8024662:	0029      	movs	r1, r5
 8024664:	f7dc f810 	bl	8000688 <__aeabi_d2lz>
 8024668:	f7dc f848 	bl	80006fc <__aeabi_l2d>
 802466c:	0002      	movs	r2, r0
 802466e:	000b      	movs	r3, r1
 8024670:	0020      	movs	r0, r4
 8024672:	0029      	movs	r1, r5
 8024674:	f7de fc54 	bl	8002f20 <__aeabi_dsub>
 8024678:	033c      	lsls	r4, r7, #12
 802467a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802467c:	0b24      	lsrs	r4, r4, #12
 802467e:	4334      	orrs	r4, r6
 8024680:	900e      	str	r0, [sp, #56]	@ 0x38
 8024682:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024684:	4a37      	ldr	r2, [pc, #220]	@ (8024764 <_strtod_l+0xbe4>)
 8024686:	431c      	orrs	r4, r3
 8024688:	d052      	beq.n	8024730 <_strtod_l+0xbb0>
 802468a:	4b37      	ldr	r3, [pc, #220]	@ (8024768 <_strtod_l+0xbe8>)
 802468c:	f7db ff16 	bl	80004bc <__aeabi_dcmplt>
 8024690:	2800      	cmp	r0, #0
 8024692:	d000      	beq.n	8024696 <_strtod_l+0xb16>
 8024694:	e4c1      	b.n	802401a <_strtod_l+0x49a>
 8024696:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024698:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802469a:	4a34      	ldr	r2, [pc, #208]	@ (802476c <_strtod_l+0xbec>)
 802469c:	4b2a      	ldr	r3, [pc, #168]	@ (8024748 <_strtod_l+0xbc8>)
 802469e:	f7db ff21 	bl	80004e4 <__aeabi_dcmpgt>
 80246a2:	2800      	cmp	r0, #0
 80246a4:	d09a      	beq.n	80245dc <_strtod_l+0xa5c>
 80246a6:	e4b8      	b.n	802401a <_strtod_l+0x49a>
 80246a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246aa:	2b00      	cmp	r3, #0
 80246ac:	d02a      	beq.n	8024704 <_strtod_l+0xb84>
 80246ae:	23d4      	movs	r3, #212	@ 0xd4
 80246b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80246b2:	04db      	lsls	r3, r3, #19
 80246b4:	429a      	cmp	r2, r3
 80246b6:	d825      	bhi.n	8024704 <_strtod_l+0xb84>
 80246b8:	0020      	movs	r0, r4
 80246ba:	0029      	movs	r1, r5
 80246bc:	4a2c      	ldr	r2, [pc, #176]	@ (8024770 <_strtod_l+0xbf0>)
 80246be:	4b2d      	ldr	r3, [pc, #180]	@ (8024774 <_strtod_l+0xbf4>)
 80246c0:	f7db ff06 	bl	80004d0 <__aeabi_dcmple>
 80246c4:	2800      	cmp	r0, #0
 80246c6:	d016      	beq.n	80246f6 <_strtod_l+0xb76>
 80246c8:	0020      	movs	r0, r4
 80246ca:	0029      	movs	r1, r5
 80246cc:	f7db ffbe 	bl	800064c <__aeabi_d2uiz>
 80246d0:	2800      	cmp	r0, #0
 80246d2:	d100      	bne.n	80246d6 <_strtod_l+0xb56>
 80246d4:	3001      	adds	r0, #1
 80246d6:	f7df f8b9 	bl	800384c <__aeabi_ui2d>
 80246da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80246dc:	0004      	movs	r4, r0
 80246de:	000d      	movs	r5, r1
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	d122      	bne.n	802472a <_strtod_l+0xbaa>
 80246e4:	2380      	movs	r3, #128	@ 0x80
 80246e6:	061b      	lsls	r3, r3, #24
 80246e8:	18cb      	adds	r3, r1, r3
 80246ea:	9018      	str	r0, [sp, #96]	@ 0x60
 80246ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80246ee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80246f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80246f2:	9216      	str	r2, [sp, #88]	@ 0x58
 80246f4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80246f6:	22d6      	movs	r2, #214	@ 0xd6
 80246f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80246fa:	04d2      	lsls	r2, r2, #19
 80246fc:	189b      	adds	r3, r3, r2
 80246fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024700:	1a9b      	subs	r3, r3, r2
 8024702:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024704:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024706:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024708:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802470a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 802470c:	f002 ff34 	bl	8027578 <__ulp>
 8024710:	0002      	movs	r2, r0
 8024712:	000b      	movs	r3, r1
 8024714:	0030      	movs	r0, r6
 8024716:	0039      	movs	r1, r7
 8024718:	f7de f91c 	bl	8002954 <__aeabi_dmul>
 802471c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802471e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024720:	f7dd f918 	bl	8001954 <__aeabi_dadd>
 8024724:	0006      	movs	r6, r0
 8024726:	000f      	movs	r7, r1
 8024728:	e791      	b.n	802464e <_strtod_l+0xace>
 802472a:	9418      	str	r4, [sp, #96]	@ 0x60
 802472c:	9519      	str	r5, [sp, #100]	@ 0x64
 802472e:	e7de      	b.n	80246ee <_strtod_l+0xb6e>
 8024730:	4b11      	ldr	r3, [pc, #68]	@ (8024778 <_strtod_l+0xbf8>)
 8024732:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8024736:	f7db fec1 	bl	80004bc <__aeabi_dcmplt>
 802473a:	e7b2      	b.n	80246a2 <_strtod_l+0xb22>
 802473c:	fff00000 	.word	0xfff00000
 8024740:	000fffff 	.word	0x000fffff
 8024744:	3ff00000 	.word	0x3ff00000
 8024748:	3fe00000 	.word	0x3fe00000
 802474c:	7ff00000 	.word	0x7ff00000
 8024750:	7fe00000 	.word	0x7fe00000
 8024754:	fcb00000 	.word	0xfcb00000
 8024758:	7c9fffff 	.word	0x7c9fffff
 802475c:	7fefffff 	.word	0x7fefffff
 8024760:	bff00000 	.word	0xbff00000
 8024764:	94a03595 	.word	0x94a03595
 8024768:	3fdfffff 	.word	0x3fdfffff
 802476c:	35afe535 	.word	0x35afe535
 8024770:	ffc00000 	.word	0xffc00000
 8024774:	41dfffff 	.word	0x41dfffff
 8024778:	3fcfffff 	.word	0x3fcfffff

0802477c <strtod>:
 802477c:	b510      	push	{r4, lr}
 802477e:	4c04      	ldr	r4, [pc, #16]	@ (8024790 <strtod+0x14>)
 8024780:	000a      	movs	r2, r1
 8024782:	0001      	movs	r1, r0
 8024784:	4b03      	ldr	r3, [pc, #12]	@ (8024794 <strtod+0x18>)
 8024786:	6820      	ldr	r0, [r4, #0]
 8024788:	f7ff f9fa 	bl	8023b80 <_strtod_l>
 802478c:	bd10      	pop	{r4, pc}
 802478e:	46c0      	nop			@ (mov r8, r8)
 8024790:	200003e0 	.word	0x200003e0
 8024794:	20000274 	.word	0x20000274

08024798 <_strtol_l.isra.0>:
 8024798:	b5f0      	push	{r4, r5, r6, r7, lr}
 802479a:	b085      	sub	sp, #20
 802479c:	0017      	movs	r7, r2
 802479e:	001e      	movs	r6, r3
 80247a0:	9003      	str	r0, [sp, #12]
 80247a2:	9101      	str	r1, [sp, #4]
 80247a4:	2b24      	cmp	r3, #36	@ 0x24
 80247a6:	d823      	bhi.n	80247f0 <_strtol_l.isra.0+0x58>
 80247a8:	000c      	movs	r4, r1
 80247aa:	2b01      	cmp	r3, #1
 80247ac:	d020      	beq.n	80247f0 <_strtol_l.isra.0+0x58>
 80247ae:	4b3d      	ldr	r3, [pc, #244]	@ (80248a4 <_strtol_l.isra.0+0x10c>)
 80247b0:	2208      	movs	r2, #8
 80247b2:	469c      	mov	ip, r3
 80247b4:	0023      	movs	r3, r4
 80247b6:	4661      	mov	r1, ip
 80247b8:	781d      	ldrb	r5, [r3, #0]
 80247ba:	3401      	adds	r4, #1
 80247bc:	5d48      	ldrb	r0, [r1, r5]
 80247be:	0001      	movs	r1, r0
 80247c0:	4011      	ands	r1, r2
 80247c2:	4210      	tst	r0, r2
 80247c4:	d1f6      	bne.n	80247b4 <_strtol_l.isra.0+0x1c>
 80247c6:	2d2d      	cmp	r5, #45	@ 0x2d
 80247c8:	d119      	bne.n	80247fe <_strtol_l.isra.0+0x66>
 80247ca:	7825      	ldrb	r5, [r4, #0]
 80247cc:	1c9c      	adds	r4, r3, #2
 80247ce:	2301      	movs	r3, #1
 80247d0:	9300      	str	r3, [sp, #0]
 80247d2:	2210      	movs	r2, #16
 80247d4:	0033      	movs	r3, r6
 80247d6:	4393      	bics	r3, r2
 80247d8:	d11d      	bne.n	8024816 <_strtol_l.isra.0+0x7e>
 80247da:	2d30      	cmp	r5, #48	@ 0x30
 80247dc:	d115      	bne.n	802480a <_strtol_l.isra.0+0x72>
 80247de:	2120      	movs	r1, #32
 80247e0:	7823      	ldrb	r3, [r4, #0]
 80247e2:	438b      	bics	r3, r1
 80247e4:	2b58      	cmp	r3, #88	@ 0x58
 80247e6:	d110      	bne.n	802480a <_strtol_l.isra.0+0x72>
 80247e8:	7865      	ldrb	r5, [r4, #1]
 80247ea:	3402      	adds	r4, #2
 80247ec:	2610      	movs	r6, #16
 80247ee:	e012      	b.n	8024816 <_strtol_l.isra.0+0x7e>
 80247f0:	f001 f80a 	bl	8025808 <__errno>
 80247f4:	2316      	movs	r3, #22
 80247f6:	6003      	str	r3, [r0, #0]
 80247f8:	2000      	movs	r0, #0
 80247fa:	b005      	add	sp, #20
 80247fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80247fe:	9100      	str	r1, [sp, #0]
 8024800:	2d2b      	cmp	r5, #43	@ 0x2b
 8024802:	d1e6      	bne.n	80247d2 <_strtol_l.isra.0+0x3a>
 8024804:	7825      	ldrb	r5, [r4, #0]
 8024806:	1c9c      	adds	r4, r3, #2
 8024808:	e7e3      	b.n	80247d2 <_strtol_l.isra.0+0x3a>
 802480a:	2e00      	cmp	r6, #0
 802480c:	d1ee      	bne.n	80247ec <_strtol_l.isra.0+0x54>
 802480e:	360a      	adds	r6, #10
 8024810:	2d30      	cmp	r5, #48	@ 0x30
 8024812:	d100      	bne.n	8024816 <_strtol_l.isra.0+0x7e>
 8024814:	3e02      	subs	r6, #2
 8024816:	4a24      	ldr	r2, [pc, #144]	@ (80248a8 <_strtol_l.isra.0+0x110>)
 8024818:	9b00      	ldr	r3, [sp, #0]
 802481a:	4694      	mov	ip, r2
 802481c:	4463      	add	r3, ip
 802481e:	0031      	movs	r1, r6
 8024820:	0018      	movs	r0, r3
 8024822:	9302      	str	r3, [sp, #8]
 8024824:	f7db fd44 	bl	80002b0 <__aeabi_uidivmod>
 8024828:	2200      	movs	r2, #0
 802482a:	4684      	mov	ip, r0
 802482c:	0010      	movs	r0, r2
 802482e:	002b      	movs	r3, r5
 8024830:	3b30      	subs	r3, #48	@ 0x30
 8024832:	2b09      	cmp	r3, #9
 8024834:	d811      	bhi.n	802485a <_strtol_l.isra.0+0xc2>
 8024836:	001d      	movs	r5, r3
 8024838:	42ae      	cmp	r6, r5
 802483a:	dd1d      	ble.n	8024878 <_strtol_l.isra.0+0xe0>
 802483c:	1c53      	adds	r3, r2, #1
 802483e:	d009      	beq.n	8024854 <_strtol_l.isra.0+0xbc>
 8024840:	2201      	movs	r2, #1
 8024842:	4252      	negs	r2, r2
 8024844:	4584      	cmp	ip, r0
 8024846:	d305      	bcc.n	8024854 <_strtol_l.isra.0+0xbc>
 8024848:	d101      	bne.n	802484e <_strtol_l.isra.0+0xb6>
 802484a:	42a9      	cmp	r1, r5
 802484c:	db11      	blt.n	8024872 <_strtol_l.isra.0+0xda>
 802484e:	2201      	movs	r2, #1
 8024850:	4370      	muls	r0, r6
 8024852:	1828      	adds	r0, r5, r0
 8024854:	7825      	ldrb	r5, [r4, #0]
 8024856:	3401      	adds	r4, #1
 8024858:	e7e9      	b.n	802482e <_strtol_l.isra.0+0x96>
 802485a:	002b      	movs	r3, r5
 802485c:	3b41      	subs	r3, #65	@ 0x41
 802485e:	2b19      	cmp	r3, #25
 8024860:	d801      	bhi.n	8024866 <_strtol_l.isra.0+0xce>
 8024862:	3d37      	subs	r5, #55	@ 0x37
 8024864:	e7e8      	b.n	8024838 <_strtol_l.isra.0+0xa0>
 8024866:	002b      	movs	r3, r5
 8024868:	3b61      	subs	r3, #97	@ 0x61
 802486a:	2b19      	cmp	r3, #25
 802486c:	d804      	bhi.n	8024878 <_strtol_l.isra.0+0xe0>
 802486e:	3d57      	subs	r5, #87	@ 0x57
 8024870:	e7e2      	b.n	8024838 <_strtol_l.isra.0+0xa0>
 8024872:	2201      	movs	r2, #1
 8024874:	4252      	negs	r2, r2
 8024876:	e7ed      	b.n	8024854 <_strtol_l.isra.0+0xbc>
 8024878:	1c53      	adds	r3, r2, #1
 802487a:	d108      	bne.n	802488e <_strtol_l.isra.0+0xf6>
 802487c:	2322      	movs	r3, #34	@ 0x22
 802487e:	9a03      	ldr	r2, [sp, #12]
 8024880:	9802      	ldr	r0, [sp, #8]
 8024882:	6013      	str	r3, [r2, #0]
 8024884:	2f00      	cmp	r7, #0
 8024886:	d0b8      	beq.n	80247fa <_strtol_l.isra.0+0x62>
 8024888:	1e63      	subs	r3, r4, #1
 802488a:	9301      	str	r3, [sp, #4]
 802488c:	e007      	b.n	802489e <_strtol_l.isra.0+0x106>
 802488e:	9b00      	ldr	r3, [sp, #0]
 8024890:	2b00      	cmp	r3, #0
 8024892:	d000      	beq.n	8024896 <_strtol_l.isra.0+0xfe>
 8024894:	4240      	negs	r0, r0
 8024896:	2f00      	cmp	r7, #0
 8024898:	d0af      	beq.n	80247fa <_strtol_l.isra.0+0x62>
 802489a:	2a00      	cmp	r2, #0
 802489c:	d1f4      	bne.n	8024888 <_strtol_l.isra.0+0xf0>
 802489e:	9b01      	ldr	r3, [sp, #4]
 80248a0:	603b      	str	r3, [r7, #0]
 80248a2:	e7aa      	b.n	80247fa <_strtol_l.isra.0+0x62>
 80248a4:	0802e2b1 	.word	0x0802e2b1
 80248a8:	7fffffff 	.word	0x7fffffff

080248ac <strtol>:
 80248ac:	b510      	push	{r4, lr}
 80248ae:	4c04      	ldr	r4, [pc, #16]	@ (80248c0 <strtol+0x14>)
 80248b0:	0013      	movs	r3, r2
 80248b2:	000a      	movs	r2, r1
 80248b4:	0001      	movs	r1, r0
 80248b6:	6820      	ldr	r0, [r4, #0]
 80248b8:	f7ff ff6e 	bl	8024798 <_strtol_l.isra.0>
 80248bc:	bd10      	pop	{r4, pc}
 80248be:	46c0      	nop			@ (mov r8, r8)
 80248c0:	200003e0 	.word	0x200003e0

080248c4 <__cvt>:
 80248c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80248c6:	001f      	movs	r7, r3
 80248c8:	2300      	movs	r3, #0
 80248ca:	0016      	movs	r6, r2
 80248cc:	b08b      	sub	sp, #44	@ 0x2c
 80248ce:	429f      	cmp	r7, r3
 80248d0:	da04      	bge.n	80248dc <__cvt+0x18>
 80248d2:	2180      	movs	r1, #128	@ 0x80
 80248d4:	0609      	lsls	r1, r1, #24
 80248d6:	187b      	adds	r3, r7, r1
 80248d8:	001f      	movs	r7, r3
 80248da:	232d      	movs	r3, #45	@ 0x2d
 80248dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80248de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80248e0:	7013      	strb	r3, [r2, #0]
 80248e2:	2320      	movs	r3, #32
 80248e4:	2203      	movs	r2, #3
 80248e6:	439d      	bics	r5, r3
 80248e8:	2d46      	cmp	r5, #70	@ 0x46
 80248ea:	d007      	beq.n	80248fc <__cvt+0x38>
 80248ec:	002b      	movs	r3, r5
 80248ee:	3b45      	subs	r3, #69	@ 0x45
 80248f0:	4259      	negs	r1, r3
 80248f2:	414b      	adcs	r3, r1
 80248f4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80248f6:	3a01      	subs	r2, #1
 80248f8:	18cb      	adds	r3, r1, r3
 80248fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80248fc:	ab09      	add	r3, sp, #36	@ 0x24
 80248fe:	9304      	str	r3, [sp, #16]
 8024900:	ab08      	add	r3, sp, #32
 8024902:	9303      	str	r3, [sp, #12]
 8024904:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024906:	9200      	str	r2, [sp, #0]
 8024908:	9302      	str	r3, [sp, #8]
 802490a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802490c:	0032      	movs	r2, r6
 802490e:	9301      	str	r3, [sp, #4]
 8024910:	003b      	movs	r3, r7
 8024912:	f001 f847 	bl	80259a4 <_dtoa_r>
 8024916:	0004      	movs	r4, r0
 8024918:	2d47      	cmp	r5, #71	@ 0x47
 802491a:	d11b      	bne.n	8024954 <__cvt+0x90>
 802491c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802491e:	07db      	lsls	r3, r3, #31
 8024920:	d511      	bpl.n	8024946 <__cvt+0x82>
 8024922:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024924:	18c3      	adds	r3, r0, r3
 8024926:	9307      	str	r3, [sp, #28]
 8024928:	2200      	movs	r2, #0
 802492a:	2300      	movs	r3, #0
 802492c:	0030      	movs	r0, r6
 802492e:	0039      	movs	r1, r7
 8024930:	f7db fdbe 	bl	80004b0 <__aeabi_dcmpeq>
 8024934:	2800      	cmp	r0, #0
 8024936:	d001      	beq.n	802493c <__cvt+0x78>
 8024938:	9b07      	ldr	r3, [sp, #28]
 802493a:	9309      	str	r3, [sp, #36]	@ 0x24
 802493c:	2230      	movs	r2, #48	@ 0x30
 802493e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024940:	9907      	ldr	r1, [sp, #28]
 8024942:	428b      	cmp	r3, r1
 8024944:	d320      	bcc.n	8024988 <__cvt+0xc4>
 8024946:	0020      	movs	r0, r4
 8024948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802494a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802494c:	1b1b      	subs	r3, r3, r4
 802494e:	6013      	str	r3, [r2, #0]
 8024950:	b00b      	add	sp, #44	@ 0x2c
 8024952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024956:	18c3      	adds	r3, r0, r3
 8024958:	9307      	str	r3, [sp, #28]
 802495a:	2d46      	cmp	r5, #70	@ 0x46
 802495c:	d1e4      	bne.n	8024928 <__cvt+0x64>
 802495e:	7803      	ldrb	r3, [r0, #0]
 8024960:	2b30      	cmp	r3, #48	@ 0x30
 8024962:	d10c      	bne.n	802497e <__cvt+0xba>
 8024964:	2200      	movs	r2, #0
 8024966:	2300      	movs	r3, #0
 8024968:	0030      	movs	r0, r6
 802496a:	0039      	movs	r1, r7
 802496c:	f7db fda0 	bl	80004b0 <__aeabi_dcmpeq>
 8024970:	2800      	cmp	r0, #0
 8024972:	d104      	bne.n	802497e <__cvt+0xba>
 8024974:	2301      	movs	r3, #1
 8024976:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8024978:	1a9b      	subs	r3, r3, r2
 802497a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802497c:	6013      	str	r3, [r2, #0]
 802497e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024980:	9a07      	ldr	r2, [sp, #28]
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	18d3      	adds	r3, r2, r3
 8024986:	e7ce      	b.n	8024926 <__cvt+0x62>
 8024988:	1c59      	adds	r1, r3, #1
 802498a:	9109      	str	r1, [sp, #36]	@ 0x24
 802498c:	701a      	strb	r2, [r3, #0]
 802498e:	e7d6      	b.n	802493e <__cvt+0x7a>

08024990 <__exponent>:
 8024990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024992:	232b      	movs	r3, #43	@ 0x2b
 8024994:	b085      	sub	sp, #20
 8024996:	0005      	movs	r5, r0
 8024998:	1e0c      	subs	r4, r1, #0
 802499a:	7002      	strb	r2, [r0, #0]
 802499c:	da01      	bge.n	80249a2 <__exponent+0x12>
 802499e:	424c      	negs	r4, r1
 80249a0:	3302      	adds	r3, #2
 80249a2:	706b      	strb	r3, [r5, #1]
 80249a4:	2c09      	cmp	r4, #9
 80249a6:	dd2c      	ble.n	8024a02 <__exponent+0x72>
 80249a8:	ab02      	add	r3, sp, #8
 80249aa:	1dde      	adds	r6, r3, #7
 80249ac:	0020      	movs	r0, r4
 80249ae:	210a      	movs	r1, #10
 80249b0:	f7db fd68 	bl	8000484 <__aeabi_idivmod>
 80249b4:	0037      	movs	r7, r6
 80249b6:	3130      	adds	r1, #48	@ 0x30
 80249b8:	3e01      	subs	r6, #1
 80249ba:	0020      	movs	r0, r4
 80249bc:	7031      	strb	r1, [r6, #0]
 80249be:	210a      	movs	r1, #10
 80249c0:	9401      	str	r4, [sp, #4]
 80249c2:	f7db fc79 	bl	80002b8 <__divsi3>
 80249c6:	9b01      	ldr	r3, [sp, #4]
 80249c8:	0004      	movs	r4, r0
 80249ca:	2b63      	cmp	r3, #99	@ 0x63
 80249cc:	dcee      	bgt.n	80249ac <__exponent+0x1c>
 80249ce:	1eba      	subs	r2, r7, #2
 80249d0:	1ca8      	adds	r0, r5, #2
 80249d2:	0001      	movs	r1, r0
 80249d4:	0013      	movs	r3, r2
 80249d6:	3430      	adds	r4, #48	@ 0x30
 80249d8:	7014      	strb	r4, [r2, #0]
 80249da:	ac02      	add	r4, sp, #8
 80249dc:	3407      	adds	r4, #7
 80249de:	429c      	cmp	r4, r3
 80249e0:	d80a      	bhi.n	80249f8 <__exponent+0x68>
 80249e2:	2300      	movs	r3, #0
 80249e4:	4294      	cmp	r4, r2
 80249e6:	d303      	bcc.n	80249f0 <__exponent+0x60>
 80249e8:	3309      	adds	r3, #9
 80249ea:	aa02      	add	r2, sp, #8
 80249ec:	189b      	adds	r3, r3, r2
 80249ee:	1bdb      	subs	r3, r3, r7
 80249f0:	18c0      	adds	r0, r0, r3
 80249f2:	1b40      	subs	r0, r0, r5
 80249f4:	b005      	add	sp, #20
 80249f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80249f8:	781c      	ldrb	r4, [r3, #0]
 80249fa:	3301      	adds	r3, #1
 80249fc:	700c      	strb	r4, [r1, #0]
 80249fe:	3101      	adds	r1, #1
 8024a00:	e7eb      	b.n	80249da <__exponent+0x4a>
 8024a02:	2330      	movs	r3, #48	@ 0x30
 8024a04:	18e4      	adds	r4, r4, r3
 8024a06:	70ab      	strb	r3, [r5, #2]
 8024a08:	1d28      	adds	r0, r5, #4
 8024a0a:	70ec      	strb	r4, [r5, #3]
 8024a0c:	e7f1      	b.n	80249f2 <__exponent+0x62>
	...

08024a10 <_printf_float>:
 8024a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024a12:	b097      	sub	sp, #92	@ 0x5c
 8024a14:	000d      	movs	r5, r1
 8024a16:	920a      	str	r2, [sp, #40]	@ 0x28
 8024a18:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8024a1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024a1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8024a1e:	f000 fea1 	bl	8025764 <_localeconv_r>
 8024a22:	6803      	ldr	r3, [r0, #0]
 8024a24:	0018      	movs	r0, r3
 8024a26:	930d      	str	r3, [sp, #52]	@ 0x34
 8024a28:	f7db fba0 	bl	800016c <strlen>
 8024a2c:	2300      	movs	r3, #0
 8024a2e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8024a30:	9314      	str	r3, [sp, #80]	@ 0x50
 8024a32:	7e2b      	ldrb	r3, [r5, #24]
 8024a34:	2207      	movs	r2, #7
 8024a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8024a38:	682b      	ldr	r3, [r5, #0]
 8024a3a:	930e      	str	r3, [sp, #56]	@ 0x38
 8024a3c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8024a3e:	6823      	ldr	r3, [r4, #0]
 8024a40:	05c9      	lsls	r1, r1, #23
 8024a42:	d545      	bpl.n	8024ad0 <_printf_float+0xc0>
 8024a44:	189b      	adds	r3, r3, r2
 8024a46:	4393      	bics	r3, r2
 8024a48:	001a      	movs	r2, r3
 8024a4a:	3208      	adds	r2, #8
 8024a4c:	6022      	str	r2, [r4, #0]
 8024a4e:	2201      	movs	r2, #1
 8024a50:	681e      	ldr	r6, [r3, #0]
 8024a52:	685f      	ldr	r7, [r3, #4]
 8024a54:	007b      	lsls	r3, r7, #1
 8024a56:	085b      	lsrs	r3, r3, #1
 8024a58:	9311      	str	r3, [sp, #68]	@ 0x44
 8024a5a:	9610      	str	r6, [sp, #64]	@ 0x40
 8024a5c:	64ae      	str	r6, [r5, #72]	@ 0x48
 8024a5e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8024a60:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024a62:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024a64:	4ba7      	ldr	r3, [pc, #668]	@ (8024d04 <_printf_float+0x2f4>)
 8024a66:	4252      	negs	r2, r2
 8024a68:	f7de fe64 	bl	8003734 <__aeabi_dcmpun>
 8024a6c:	2800      	cmp	r0, #0
 8024a6e:	d131      	bne.n	8024ad4 <_printf_float+0xc4>
 8024a70:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024a72:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8024a74:	2201      	movs	r2, #1
 8024a76:	4ba3      	ldr	r3, [pc, #652]	@ (8024d04 <_printf_float+0x2f4>)
 8024a78:	4252      	negs	r2, r2
 8024a7a:	f7db fd29 	bl	80004d0 <__aeabi_dcmple>
 8024a7e:	2800      	cmp	r0, #0
 8024a80:	d128      	bne.n	8024ad4 <_printf_float+0xc4>
 8024a82:	2200      	movs	r2, #0
 8024a84:	2300      	movs	r3, #0
 8024a86:	0030      	movs	r0, r6
 8024a88:	0039      	movs	r1, r7
 8024a8a:	f7db fd17 	bl	80004bc <__aeabi_dcmplt>
 8024a8e:	2800      	cmp	r0, #0
 8024a90:	d003      	beq.n	8024a9a <_printf_float+0x8a>
 8024a92:	002b      	movs	r3, r5
 8024a94:	222d      	movs	r2, #45	@ 0x2d
 8024a96:	3343      	adds	r3, #67	@ 0x43
 8024a98:	701a      	strb	r2, [r3, #0]
 8024a9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024a9c:	4f9a      	ldr	r7, [pc, #616]	@ (8024d08 <_printf_float+0x2f8>)
 8024a9e:	2b47      	cmp	r3, #71	@ 0x47
 8024aa0:	d800      	bhi.n	8024aa4 <_printf_float+0x94>
 8024aa2:	4f9a      	ldr	r7, [pc, #616]	@ (8024d0c <_printf_float+0x2fc>)
 8024aa4:	2303      	movs	r3, #3
 8024aa6:	2400      	movs	r4, #0
 8024aa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024aaa:	612b      	str	r3, [r5, #16]
 8024aac:	3301      	adds	r3, #1
 8024aae:	439a      	bics	r2, r3
 8024ab0:	602a      	str	r2, [r5, #0]
 8024ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024ab4:	0029      	movs	r1, r5
 8024ab6:	9300      	str	r3, [sp, #0]
 8024ab8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024abc:	aa15      	add	r2, sp, #84	@ 0x54
 8024abe:	f000 f9e5 	bl	8024e8c <_printf_common>
 8024ac2:	3001      	adds	r0, #1
 8024ac4:	d000      	beq.n	8024ac8 <_printf_float+0xb8>
 8024ac6:	e09e      	b.n	8024c06 <_printf_float+0x1f6>
 8024ac8:	2001      	movs	r0, #1
 8024aca:	4240      	negs	r0, r0
 8024acc:	b017      	add	sp, #92	@ 0x5c
 8024ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ad0:	3307      	adds	r3, #7
 8024ad2:	e7b8      	b.n	8024a46 <_printf_float+0x36>
 8024ad4:	0032      	movs	r2, r6
 8024ad6:	003b      	movs	r3, r7
 8024ad8:	0030      	movs	r0, r6
 8024ada:	0039      	movs	r1, r7
 8024adc:	f7de fe2a 	bl	8003734 <__aeabi_dcmpun>
 8024ae0:	2800      	cmp	r0, #0
 8024ae2:	d00b      	beq.n	8024afc <_printf_float+0xec>
 8024ae4:	2f00      	cmp	r7, #0
 8024ae6:	da03      	bge.n	8024af0 <_printf_float+0xe0>
 8024ae8:	002b      	movs	r3, r5
 8024aea:	222d      	movs	r2, #45	@ 0x2d
 8024aec:	3343      	adds	r3, #67	@ 0x43
 8024aee:	701a      	strb	r2, [r3, #0]
 8024af0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024af2:	4f87      	ldr	r7, [pc, #540]	@ (8024d10 <_printf_float+0x300>)
 8024af4:	2b47      	cmp	r3, #71	@ 0x47
 8024af6:	d8d5      	bhi.n	8024aa4 <_printf_float+0x94>
 8024af8:	4f86      	ldr	r7, [pc, #536]	@ (8024d14 <_printf_float+0x304>)
 8024afa:	e7d3      	b.n	8024aa4 <_printf_float+0x94>
 8024afc:	2220      	movs	r2, #32
 8024afe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8024b00:	686b      	ldr	r3, [r5, #4]
 8024b02:	4394      	bics	r4, r2
 8024b04:	1c5a      	adds	r2, r3, #1
 8024b06:	d146      	bne.n	8024b96 <_printf_float+0x186>
 8024b08:	3307      	adds	r3, #7
 8024b0a:	606b      	str	r3, [r5, #4]
 8024b0c:	2380      	movs	r3, #128	@ 0x80
 8024b0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024b10:	00db      	lsls	r3, r3, #3
 8024b12:	4313      	orrs	r3, r2
 8024b14:	2200      	movs	r2, #0
 8024b16:	602b      	str	r3, [r5, #0]
 8024b18:	9206      	str	r2, [sp, #24]
 8024b1a:	aa14      	add	r2, sp, #80	@ 0x50
 8024b1c:	9205      	str	r2, [sp, #20]
 8024b1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024b20:	a90a      	add	r1, sp, #40	@ 0x28
 8024b22:	9204      	str	r2, [sp, #16]
 8024b24:	aa13      	add	r2, sp, #76	@ 0x4c
 8024b26:	9203      	str	r2, [sp, #12]
 8024b28:	2223      	movs	r2, #35	@ 0x23
 8024b2a:	1852      	adds	r2, r2, r1
 8024b2c:	9202      	str	r2, [sp, #8]
 8024b2e:	9301      	str	r3, [sp, #4]
 8024b30:	686b      	ldr	r3, [r5, #4]
 8024b32:	0032      	movs	r2, r6
 8024b34:	9300      	str	r3, [sp, #0]
 8024b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024b38:	003b      	movs	r3, r7
 8024b3a:	f7ff fec3 	bl	80248c4 <__cvt>
 8024b3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8024b40:	0007      	movs	r7, r0
 8024b42:	2c47      	cmp	r4, #71	@ 0x47
 8024b44:	d12d      	bne.n	8024ba2 <_printf_float+0x192>
 8024b46:	1cd3      	adds	r3, r2, #3
 8024b48:	db02      	blt.n	8024b50 <_printf_float+0x140>
 8024b4a:	686b      	ldr	r3, [r5, #4]
 8024b4c:	429a      	cmp	r2, r3
 8024b4e:	dd47      	ble.n	8024be0 <_printf_float+0x1d0>
 8024b50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024b52:	3b02      	subs	r3, #2
 8024b54:	b2db      	uxtb	r3, r3
 8024b56:	930c      	str	r3, [sp, #48]	@ 0x30
 8024b58:	0028      	movs	r0, r5
 8024b5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024b5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024b5e:	3901      	subs	r1, #1
 8024b60:	3050      	adds	r0, #80	@ 0x50
 8024b62:	9113      	str	r1, [sp, #76]	@ 0x4c
 8024b64:	f7ff ff14 	bl	8024990 <__exponent>
 8024b68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024b6a:	0004      	movs	r4, r0
 8024b6c:	1813      	adds	r3, r2, r0
 8024b6e:	612b      	str	r3, [r5, #16]
 8024b70:	2a01      	cmp	r2, #1
 8024b72:	dc02      	bgt.n	8024b7a <_printf_float+0x16a>
 8024b74:	682a      	ldr	r2, [r5, #0]
 8024b76:	07d2      	lsls	r2, r2, #31
 8024b78:	d501      	bpl.n	8024b7e <_printf_float+0x16e>
 8024b7a:	3301      	adds	r3, #1
 8024b7c:	612b      	str	r3, [r5, #16]
 8024b7e:	2323      	movs	r3, #35	@ 0x23
 8024b80:	aa0a      	add	r2, sp, #40	@ 0x28
 8024b82:	189b      	adds	r3, r3, r2
 8024b84:	781b      	ldrb	r3, [r3, #0]
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	d100      	bne.n	8024b8c <_printf_float+0x17c>
 8024b8a:	e792      	b.n	8024ab2 <_printf_float+0xa2>
 8024b8c:	002b      	movs	r3, r5
 8024b8e:	222d      	movs	r2, #45	@ 0x2d
 8024b90:	3343      	adds	r3, #67	@ 0x43
 8024b92:	701a      	strb	r2, [r3, #0]
 8024b94:	e78d      	b.n	8024ab2 <_printf_float+0xa2>
 8024b96:	2c47      	cmp	r4, #71	@ 0x47
 8024b98:	d1b8      	bne.n	8024b0c <_printf_float+0xfc>
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	d1b6      	bne.n	8024b0c <_printf_float+0xfc>
 8024b9e:	3301      	adds	r3, #1
 8024ba0:	e7b3      	b.n	8024b0a <_printf_float+0xfa>
 8024ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ba4:	2b65      	cmp	r3, #101	@ 0x65
 8024ba6:	d9d7      	bls.n	8024b58 <_printf_float+0x148>
 8024ba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024baa:	2b66      	cmp	r3, #102	@ 0x66
 8024bac:	d11a      	bne.n	8024be4 <_printf_float+0x1d4>
 8024bae:	686b      	ldr	r3, [r5, #4]
 8024bb0:	2a00      	cmp	r2, #0
 8024bb2:	dd09      	ble.n	8024bc8 <_printf_float+0x1b8>
 8024bb4:	612a      	str	r2, [r5, #16]
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	d102      	bne.n	8024bc0 <_printf_float+0x1b0>
 8024bba:	6829      	ldr	r1, [r5, #0]
 8024bbc:	07c9      	lsls	r1, r1, #31
 8024bbe:	d50b      	bpl.n	8024bd8 <_printf_float+0x1c8>
 8024bc0:	3301      	adds	r3, #1
 8024bc2:	189b      	adds	r3, r3, r2
 8024bc4:	612b      	str	r3, [r5, #16]
 8024bc6:	e007      	b.n	8024bd8 <_printf_float+0x1c8>
 8024bc8:	2b00      	cmp	r3, #0
 8024bca:	d103      	bne.n	8024bd4 <_printf_float+0x1c4>
 8024bcc:	2201      	movs	r2, #1
 8024bce:	6829      	ldr	r1, [r5, #0]
 8024bd0:	4211      	tst	r1, r2
 8024bd2:	d000      	beq.n	8024bd6 <_printf_float+0x1c6>
 8024bd4:	1c9a      	adds	r2, r3, #2
 8024bd6:	612a      	str	r2, [r5, #16]
 8024bd8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024bda:	2400      	movs	r4, #0
 8024bdc:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024bde:	e7ce      	b.n	8024b7e <_printf_float+0x16e>
 8024be0:	2367      	movs	r3, #103	@ 0x67
 8024be2:	930c      	str	r3, [sp, #48]	@ 0x30
 8024be4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024be6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024be8:	4299      	cmp	r1, r3
 8024bea:	db06      	blt.n	8024bfa <_printf_float+0x1ea>
 8024bec:	682b      	ldr	r3, [r5, #0]
 8024bee:	6129      	str	r1, [r5, #16]
 8024bf0:	07db      	lsls	r3, r3, #31
 8024bf2:	d5f1      	bpl.n	8024bd8 <_printf_float+0x1c8>
 8024bf4:	3101      	adds	r1, #1
 8024bf6:	6129      	str	r1, [r5, #16]
 8024bf8:	e7ee      	b.n	8024bd8 <_printf_float+0x1c8>
 8024bfa:	2201      	movs	r2, #1
 8024bfc:	2900      	cmp	r1, #0
 8024bfe:	dce0      	bgt.n	8024bc2 <_printf_float+0x1b2>
 8024c00:	1892      	adds	r2, r2, r2
 8024c02:	1a52      	subs	r2, r2, r1
 8024c04:	e7dd      	b.n	8024bc2 <_printf_float+0x1b2>
 8024c06:	682a      	ldr	r2, [r5, #0]
 8024c08:	0553      	lsls	r3, r2, #21
 8024c0a:	d408      	bmi.n	8024c1e <_printf_float+0x20e>
 8024c0c:	692b      	ldr	r3, [r5, #16]
 8024c0e:	003a      	movs	r2, r7
 8024c10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c16:	47a0      	blx	r4
 8024c18:	3001      	adds	r0, #1
 8024c1a:	d129      	bne.n	8024c70 <_printf_float+0x260>
 8024c1c:	e754      	b.n	8024ac8 <_printf_float+0xb8>
 8024c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c20:	2b65      	cmp	r3, #101	@ 0x65
 8024c22:	d800      	bhi.n	8024c26 <_printf_float+0x216>
 8024c24:	e0db      	b.n	8024dde <_printf_float+0x3ce>
 8024c26:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024c28:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024c2a:	2200      	movs	r2, #0
 8024c2c:	2300      	movs	r3, #0
 8024c2e:	f7db fc3f 	bl	80004b0 <__aeabi_dcmpeq>
 8024c32:	2800      	cmp	r0, #0
 8024c34:	d033      	beq.n	8024c9e <_printf_float+0x28e>
 8024c36:	2301      	movs	r3, #1
 8024c38:	4a37      	ldr	r2, [pc, #220]	@ (8024d18 <_printf_float+0x308>)
 8024c3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c3e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c40:	47a0      	blx	r4
 8024c42:	3001      	adds	r0, #1
 8024c44:	d100      	bne.n	8024c48 <_printf_float+0x238>
 8024c46:	e73f      	b.n	8024ac8 <_printf_float+0xb8>
 8024c48:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024c4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024c4c:	42b3      	cmp	r3, r6
 8024c4e:	db02      	blt.n	8024c56 <_printf_float+0x246>
 8024c50:	682b      	ldr	r3, [r5, #0]
 8024c52:	07db      	lsls	r3, r3, #31
 8024c54:	d50c      	bpl.n	8024c70 <_printf_float+0x260>
 8024c56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024c5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024c5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c60:	47a0      	blx	r4
 8024c62:	2400      	movs	r4, #0
 8024c64:	3001      	adds	r0, #1
 8024c66:	d100      	bne.n	8024c6a <_printf_float+0x25a>
 8024c68:	e72e      	b.n	8024ac8 <_printf_float+0xb8>
 8024c6a:	1e73      	subs	r3, r6, #1
 8024c6c:	42a3      	cmp	r3, r4
 8024c6e:	dc0a      	bgt.n	8024c86 <_printf_float+0x276>
 8024c70:	682b      	ldr	r3, [r5, #0]
 8024c72:	079b      	lsls	r3, r3, #30
 8024c74:	d500      	bpl.n	8024c78 <_printf_float+0x268>
 8024c76:	e106      	b.n	8024e86 <_printf_float+0x476>
 8024c78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024c7a:	68e8      	ldr	r0, [r5, #12]
 8024c7c:	4298      	cmp	r0, r3
 8024c7e:	db00      	blt.n	8024c82 <_printf_float+0x272>
 8024c80:	e724      	b.n	8024acc <_printf_float+0xbc>
 8024c82:	0018      	movs	r0, r3
 8024c84:	e722      	b.n	8024acc <_printf_float+0xbc>
 8024c86:	002a      	movs	r2, r5
 8024c88:	2301      	movs	r3, #1
 8024c8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024c8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024c8e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024c90:	321a      	adds	r2, #26
 8024c92:	47b8      	blx	r7
 8024c94:	3001      	adds	r0, #1
 8024c96:	d100      	bne.n	8024c9a <_printf_float+0x28a>
 8024c98:	e716      	b.n	8024ac8 <_printf_float+0xb8>
 8024c9a:	3401      	adds	r4, #1
 8024c9c:	e7e5      	b.n	8024c6a <_printf_float+0x25a>
 8024c9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	dc3b      	bgt.n	8024d1c <_printf_float+0x30c>
 8024ca4:	2301      	movs	r3, #1
 8024ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8024d18 <_printf_float+0x308>)
 8024ca8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024cac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cae:	47a0      	blx	r4
 8024cb0:	3001      	adds	r0, #1
 8024cb2:	d100      	bne.n	8024cb6 <_printf_float+0x2a6>
 8024cb4:	e708      	b.n	8024ac8 <_printf_float+0xb8>
 8024cb6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8024cb8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024cba:	4333      	orrs	r3, r6
 8024cbc:	d102      	bne.n	8024cc4 <_printf_float+0x2b4>
 8024cbe:	682b      	ldr	r3, [r5, #0]
 8024cc0:	07db      	lsls	r3, r3, #31
 8024cc2:	d5d5      	bpl.n	8024c70 <_printf_float+0x260>
 8024cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024cc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024cc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024cca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024ccc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cce:	47a0      	blx	r4
 8024cd0:	2300      	movs	r3, #0
 8024cd2:	3001      	adds	r0, #1
 8024cd4:	d100      	bne.n	8024cd8 <_printf_float+0x2c8>
 8024cd6:	e6f7      	b.n	8024ac8 <_printf_float+0xb8>
 8024cd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024cdc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024cde:	425b      	negs	r3, r3
 8024ce0:	4293      	cmp	r3, r2
 8024ce2:	dc01      	bgt.n	8024ce8 <_printf_float+0x2d8>
 8024ce4:	0033      	movs	r3, r6
 8024ce6:	e792      	b.n	8024c0e <_printf_float+0x1fe>
 8024ce8:	002a      	movs	r2, r5
 8024cea:	2301      	movs	r3, #1
 8024cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024cf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024cf2:	321a      	adds	r2, #26
 8024cf4:	47a0      	blx	r4
 8024cf6:	3001      	adds	r0, #1
 8024cf8:	d100      	bne.n	8024cfc <_printf_float+0x2ec>
 8024cfa:	e6e5      	b.n	8024ac8 <_printf_float+0xb8>
 8024cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024cfe:	3301      	adds	r3, #1
 8024d00:	e7ea      	b.n	8024cd8 <_printf_float+0x2c8>
 8024d02:	46c0      	nop			@ (mov r8, r8)
 8024d04:	7fefffff 	.word	0x7fefffff
 8024d08:	0802e08e 	.word	0x0802e08e
 8024d0c:	0802e08a 	.word	0x0802e08a
 8024d10:	0802e096 	.word	0x0802e096
 8024d14:	0802e092 	.word	0x0802e092
 8024d18:	0802e09a 	.word	0x0802e09a
 8024d1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024d1e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024d20:	930c      	str	r3, [sp, #48]	@ 0x30
 8024d22:	429e      	cmp	r6, r3
 8024d24:	dd00      	ble.n	8024d28 <_printf_float+0x318>
 8024d26:	001e      	movs	r6, r3
 8024d28:	2e00      	cmp	r6, #0
 8024d2a:	dc31      	bgt.n	8024d90 <_printf_float+0x380>
 8024d2c:	43f3      	mvns	r3, r6
 8024d2e:	2400      	movs	r4, #0
 8024d30:	17db      	asrs	r3, r3, #31
 8024d32:	4033      	ands	r3, r6
 8024d34:	930e      	str	r3, [sp, #56]	@ 0x38
 8024d36:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8024d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d3a:	1af3      	subs	r3, r6, r3
 8024d3c:	42a3      	cmp	r3, r4
 8024d3e:	dc30      	bgt.n	8024da2 <_printf_float+0x392>
 8024d40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d44:	429a      	cmp	r2, r3
 8024d46:	dc38      	bgt.n	8024dba <_printf_float+0x3aa>
 8024d48:	682b      	ldr	r3, [r5, #0]
 8024d4a:	07db      	lsls	r3, r3, #31
 8024d4c:	d435      	bmi.n	8024dba <_printf_float+0x3aa>
 8024d4e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8024d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024d52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d54:	1b9b      	subs	r3, r3, r6
 8024d56:	1b14      	subs	r4, r2, r4
 8024d58:	429c      	cmp	r4, r3
 8024d5a:	dd00      	ble.n	8024d5e <_printf_float+0x34e>
 8024d5c:	001c      	movs	r4, r3
 8024d5e:	2c00      	cmp	r4, #0
 8024d60:	dc34      	bgt.n	8024dcc <_printf_float+0x3bc>
 8024d62:	43e3      	mvns	r3, r4
 8024d64:	2600      	movs	r6, #0
 8024d66:	17db      	asrs	r3, r3, #31
 8024d68:	401c      	ands	r4, r3
 8024d6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024d6c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d6e:	1ad3      	subs	r3, r2, r3
 8024d70:	1b1b      	subs	r3, r3, r4
 8024d72:	42b3      	cmp	r3, r6
 8024d74:	dc00      	bgt.n	8024d78 <_printf_float+0x368>
 8024d76:	e77b      	b.n	8024c70 <_printf_float+0x260>
 8024d78:	002a      	movs	r2, r5
 8024d7a:	2301      	movs	r3, #1
 8024d7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024d82:	321a      	adds	r2, #26
 8024d84:	47b8      	blx	r7
 8024d86:	3001      	adds	r0, #1
 8024d88:	d100      	bne.n	8024d8c <_printf_float+0x37c>
 8024d8a:	e69d      	b.n	8024ac8 <_printf_float+0xb8>
 8024d8c:	3601      	adds	r6, #1
 8024d8e:	e7ec      	b.n	8024d6a <_printf_float+0x35a>
 8024d90:	0033      	movs	r3, r6
 8024d92:	003a      	movs	r2, r7
 8024d94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024d98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d9a:	47a0      	blx	r4
 8024d9c:	3001      	adds	r0, #1
 8024d9e:	d1c5      	bne.n	8024d2c <_printf_float+0x31c>
 8024da0:	e692      	b.n	8024ac8 <_printf_float+0xb8>
 8024da2:	002a      	movs	r2, r5
 8024da4:	2301      	movs	r3, #1
 8024da6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024da8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024daa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024dac:	321a      	adds	r2, #26
 8024dae:	47b0      	blx	r6
 8024db0:	3001      	adds	r0, #1
 8024db2:	d100      	bne.n	8024db6 <_printf_float+0x3a6>
 8024db4:	e688      	b.n	8024ac8 <_printf_float+0xb8>
 8024db6:	3401      	adds	r4, #1
 8024db8:	e7bd      	b.n	8024d36 <_printf_float+0x326>
 8024dba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024dbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024dbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024dc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dc2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024dc4:	47a0      	blx	r4
 8024dc6:	3001      	adds	r0, #1
 8024dc8:	d1c1      	bne.n	8024d4e <_printf_float+0x33e>
 8024dca:	e67d      	b.n	8024ac8 <_printf_float+0xb8>
 8024dcc:	19ba      	adds	r2, r7, r6
 8024dce:	0023      	movs	r3, r4
 8024dd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024dd4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024dd6:	47b0      	blx	r6
 8024dd8:	3001      	adds	r0, #1
 8024dda:	d1c2      	bne.n	8024d62 <_printf_float+0x352>
 8024ddc:	e674      	b.n	8024ac8 <_printf_float+0xb8>
 8024dde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024de0:	930c      	str	r3, [sp, #48]	@ 0x30
 8024de2:	2b01      	cmp	r3, #1
 8024de4:	dc02      	bgt.n	8024dec <_printf_float+0x3dc>
 8024de6:	2301      	movs	r3, #1
 8024de8:	421a      	tst	r2, r3
 8024dea:	d039      	beq.n	8024e60 <_printf_float+0x450>
 8024dec:	2301      	movs	r3, #1
 8024dee:	003a      	movs	r2, r7
 8024df0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024df2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024df4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024df6:	47b0      	blx	r6
 8024df8:	3001      	adds	r0, #1
 8024dfa:	d100      	bne.n	8024dfe <_printf_float+0x3ee>
 8024dfc:	e664      	b.n	8024ac8 <_printf_float+0xb8>
 8024dfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024e00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024e02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e06:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e08:	47b0      	blx	r6
 8024e0a:	3001      	adds	r0, #1
 8024e0c:	d100      	bne.n	8024e10 <_printf_float+0x400>
 8024e0e:	e65b      	b.n	8024ac8 <_printf_float+0xb8>
 8024e10:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8024e12:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8024e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e16:	2200      	movs	r2, #0
 8024e18:	3b01      	subs	r3, #1
 8024e1a:	930c      	str	r3, [sp, #48]	@ 0x30
 8024e1c:	2300      	movs	r3, #0
 8024e1e:	f7db fb47 	bl	80004b0 <__aeabi_dcmpeq>
 8024e22:	2800      	cmp	r0, #0
 8024e24:	d11a      	bne.n	8024e5c <_printf_float+0x44c>
 8024e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e28:	1c7a      	adds	r2, r7, #1
 8024e2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e2e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e30:	47b0      	blx	r6
 8024e32:	3001      	adds	r0, #1
 8024e34:	d10e      	bne.n	8024e54 <_printf_float+0x444>
 8024e36:	e647      	b.n	8024ac8 <_printf_float+0xb8>
 8024e38:	002a      	movs	r2, r5
 8024e3a:	2301      	movs	r3, #1
 8024e3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e40:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8024e42:	321a      	adds	r2, #26
 8024e44:	47b8      	blx	r7
 8024e46:	3001      	adds	r0, #1
 8024e48:	d100      	bne.n	8024e4c <_printf_float+0x43c>
 8024e4a:	e63d      	b.n	8024ac8 <_printf_float+0xb8>
 8024e4c:	3601      	adds	r6, #1
 8024e4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024e50:	429e      	cmp	r6, r3
 8024e52:	dbf1      	blt.n	8024e38 <_printf_float+0x428>
 8024e54:	002a      	movs	r2, r5
 8024e56:	0023      	movs	r3, r4
 8024e58:	3250      	adds	r2, #80	@ 0x50
 8024e5a:	e6d9      	b.n	8024c10 <_printf_float+0x200>
 8024e5c:	2600      	movs	r6, #0
 8024e5e:	e7f6      	b.n	8024e4e <_printf_float+0x43e>
 8024e60:	003a      	movs	r2, r7
 8024e62:	e7e2      	b.n	8024e2a <_printf_float+0x41a>
 8024e64:	002a      	movs	r2, r5
 8024e66:	2301      	movs	r3, #1
 8024e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8024e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024e6c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8024e6e:	3219      	adds	r2, #25
 8024e70:	47b0      	blx	r6
 8024e72:	3001      	adds	r0, #1
 8024e74:	d100      	bne.n	8024e78 <_printf_float+0x468>
 8024e76:	e627      	b.n	8024ac8 <_printf_float+0xb8>
 8024e78:	3401      	adds	r4, #1
 8024e7a:	68eb      	ldr	r3, [r5, #12]
 8024e7c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024e7e:	1a9b      	subs	r3, r3, r2
 8024e80:	42a3      	cmp	r3, r4
 8024e82:	dcef      	bgt.n	8024e64 <_printf_float+0x454>
 8024e84:	e6f8      	b.n	8024c78 <_printf_float+0x268>
 8024e86:	2400      	movs	r4, #0
 8024e88:	e7f7      	b.n	8024e7a <_printf_float+0x46a>
 8024e8a:	46c0      	nop			@ (mov r8, r8)

08024e8c <_printf_common>:
 8024e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024e8e:	0016      	movs	r6, r2
 8024e90:	9301      	str	r3, [sp, #4]
 8024e92:	688a      	ldr	r2, [r1, #8]
 8024e94:	690b      	ldr	r3, [r1, #16]
 8024e96:	000c      	movs	r4, r1
 8024e98:	9000      	str	r0, [sp, #0]
 8024e9a:	4293      	cmp	r3, r2
 8024e9c:	da00      	bge.n	8024ea0 <_printf_common+0x14>
 8024e9e:	0013      	movs	r3, r2
 8024ea0:	0022      	movs	r2, r4
 8024ea2:	6033      	str	r3, [r6, #0]
 8024ea4:	3243      	adds	r2, #67	@ 0x43
 8024ea6:	7812      	ldrb	r2, [r2, #0]
 8024ea8:	2a00      	cmp	r2, #0
 8024eaa:	d001      	beq.n	8024eb0 <_printf_common+0x24>
 8024eac:	3301      	adds	r3, #1
 8024eae:	6033      	str	r3, [r6, #0]
 8024eb0:	6823      	ldr	r3, [r4, #0]
 8024eb2:	069b      	lsls	r3, r3, #26
 8024eb4:	d502      	bpl.n	8024ebc <_printf_common+0x30>
 8024eb6:	6833      	ldr	r3, [r6, #0]
 8024eb8:	3302      	adds	r3, #2
 8024eba:	6033      	str	r3, [r6, #0]
 8024ebc:	6822      	ldr	r2, [r4, #0]
 8024ebe:	2306      	movs	r3, #6
 8024ec0:	0015      	movs	r5, r2
 8024ec2:	401d      	ands	r5, r3
 8024ec4:	421a      	tst	r2, r3
 8024ec6:	d027      	beq.n	8024f18 <_printf_common+0x8c>
 8024ec8:	0023      	movs	r3, r4
 8024eca:	3343      	adds	r3, #67	@ 0x43
 8024ecc:	781b      	ldrb	r3, [r3, #0]
 8024ece:	1e5a      	subs	r2, r3, #1
 8024ed0:	4193      	sbcs	r3, r2
 8024ed2:	6822      	ldr	r2, [r4, #0]
 8024ed4:	0692      	lsls	r2, r2, #26
 8024ed6:	d430      	bmi.n	8024f3a <_printf_common+0xae>
 8024ed8:	0022      	movs	r2, r4
 8024eda:	9901      	ldr	r1, [sp, #4]
 8024edc:	9800      	ldr	r0, [sp, #0]
 8024ede:	9d08      	ldr	r5, [sp, #32]
 8024ee0:	3243      	adds	r2, #67	@ 0x43
 8024ee2:	47a8      	blx	r5
 8024ee4:	3001      	adds	r0, #1
 8024ee6:	d025      	beq.n	8024f34 <_printf_common+0xa8>
 8024ee8:	2206      	movs	r2, #6
 8024eea:	6823      	ldr	r3, [r4, #0]
 8024eec:	2500      	movs	r5, #0
 8024eee:	4013      	ands	r3, r2
 8024ef0:	2b04      	cmp	r3, #4
 8024ef2:	d105      	bne.n	8024f00 <_printf_common+0x74>
 8024ef4:	6833      	ldr	r3, [r6, #0]
 8024ef6:	68e5      	ldr	r5, [r4, #12]
 8024ef8:	1aed      	subs	r5, r5, r3
 8024efa:	43eb      	mvns	r3, r5
 8024efc:	17db      	asrs	r3, r3, #31
 8024efe:	401d      	ands	r5, r3
 8024f00:	68a3      	ldr	r3, [r4, #8]
 8024f02:	6922      	ldr	r2, [r4, #16]
 8024f04:	4293      	cmp	r3, r2
 8024f06:	dd01      	ble.n	8024f0c <_printf_common+0x80>
 8024f08:	1a9b      	subs	r3, r3, r2
 8024f0a:	18ed      	adds	r5, r5, r3
 8024f0c:	2600      	movs	r6, #0
 8024f0e:	42b5      	cmp	r5, r6
 8024f10:	d120      	bne.n	8024f54 <_printf_common+0xc8>
 8024f12:	2000      	movs	r0, #0
 8024f14:	e010      	b.n	8024f38 <_printf_common+0xac>
 8024f16:	3501      	adds	r5, #1
 8024f18:	68e3      	ldr	r3, [r4, #12]
 8024f1a:	6832      	ldr	r2, [r6, #0]
 8024f1c:	1a9b      	subs	r3, r3, r2
 8024f1e:	42ab      	cmp	r3, r5
 8024f20:	ddd2      	ble.n	8024ec8 <_printf_common+0x3c>
 8024f22:	0022      	movs	r2, r4
 8024f24:	2301      	movs	r3, #1
 8024f26:	9901      	ldr	r1, [sp, #4]
 8024f28:	9800      	ldr	r0, [sp, #0]
 8024f2a:	9f08      	ldr	r7, [sp, #32]
 8024f2c:	3219      	adds	r2, #25
 8024f2e:	47b8      	blx	r7
 8024f30:	3001      	adds	r0, #1
 8024f32:	d1f0      	bne.n	8024f16 <_printf_common+0x8a>
 8024f34:	2001      	movs	r0, #1
 8024f36:	4240      	negs	r0, r0
 8024f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8024f3a:	2030      	movs	r0, #48	@ 0x30
 8024f3c:	18e1      	adds	r1, r4, r3
 8024f3e:	3143      	adds	r1, #67	@ 0x43
 8024f40:	7008      	strb	r0, [r1, #0]
 8024f42:	0021      	movs	r1, r4
 8024f44:	1c5a      	adds	r2, r3, #1
 8024f46:	3145      	adds	r1, #69	@ 0x45
 8024f48:	7809      	ldrb	r1, [r1, #0]
 8024f4a:	18a2      	adds	r2, r4, r2
 8024f4c:	3243      	adds	r2, #67	@ 0x43
 8024f4e:	3302      	adds	r3, #2
 8024f50:	7011      	strb	r1, [r2, #0]
 8024f52:	e7c1      	b.n	8024ed8 <_printf_common+0x4c>
 8024f54:	0022      	movs	r2, r4
 8024f56:	2301      	movs	r3, #1
 8024f58:	9901      	ldr	r1, [sp, #4]
 8024f5a:	9800      	ldr	r0, [sp, #0]
 8024f5c:	9f08      	ldr	r7, [sp, #32]
 8024f5e:	321a      	adds	r2, #26
 8024f60:	47b8      	blx	r7
 8024f62:	3001      	adds	r0, #1
 8024f64:	d0e6      	beq.n	8024f34 <_printf_common+0xa8>
 8024f66:	3601      	adds	r6, #1
 8024f68:	e7d1      	b.n	8024f0e <_printf_common+0x82>
	...

08024f6c <_printf_i>:
 8024f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f6e:	b08b      	sub	sp, #44	@ 0x2c
 8024f70:	9206      	str	r2, [sp, #24]
 8024f72:	000a      	movs	r2, r1
 8024f74:	3243      	adds	r2, #67	@ 0x43
 8024f76:	9307      	str	r3, [sp, #28]
 8024f78:	9005      	str	r0, [sp, #20]
 8024f7a:	9203      	str	r2, [sp, #12]
 8024f7c:	7e0a      	ldrb	r2, [r1, #24]
 8024f7e:	000c      	movs	r4, r1
 8024f80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024f82:	2a78      	cmp	r2, #120	@ 0x78
 8024f84:	d809      	bhi.n	8024f9a <_printf_i+0x2e>
 8024f86:	2a62      	cmp	r2, #98	@ 0x62
 8024f88:	d80b      	bhi.n	8024fa2 <_printf_i+0x36>
 8024f8a:	2a00      	cmp	r2, #0
 8024f8c:	d100      	bne.n	8024f90 <_printf_i+0x24>
 8024f8e:	e0ba      	b.n	8025106 <_printf_i+0x19a>
 8024f90:	497a      	ldr	r1, [pc, #488]	@ (802517c <_printf_i+0x210>)
 8024f92:	9104      	str	r1, [sp, #16]
 8024f94:	2a58      	cmp	r2, #88	@ 0x58
 8024f96:	d100      	bne.n	8024f9a <_printf_i+0x2e>
 8024f98:	e08e      	b.n	80250b8 <_printf_i+0x14c>
 8024f9a:	0025      	movs	r5, r4
 8024f9c:	3542      	adds	r5, #66	@ 0x42
 8024f9e:	702a      	strb	r2, [r5, #0]
 8024fa0:	e022      	b.n	8024fe8 <_printf_i+0x7c>
 8024fa2:	0010      	movs	r0, r2
 8024fa4:	3863      	subs	r0, #99	@ 0x63
 8024fa6:	2815      	cmp	r0, #21
 8024fa8:	d8f7      	bhi.n	8024f9a <_printf_i+0x2e>
 8024faa:	f7db f8f1 	bl	8000190 <__gnu_thumb1_case_shi>
 8024fae:	0016      	.short	0x0016
 8024fb0:	fff6001f 	.word	0xfff6001f
 8024fb4:	fff6fff6 	.word	0xfff6fff6
 8024fb8:	001ffff6 	.word	0x001ffff6
 8024fbc:	fff6fff6 	.word	0xfff6fff6
 8024fc0:	fff6fff6 	.word	0xfff6fff6
 8024fc4:	0036009f 	.word	0x0036009f
 8024fc8:	fff6007e 	.word	0xfff6007e
 8024fcc:	00b0fff6 	.word	0x00b0fff6
 8024fd0:	0036fff6 	.word	0x0036fff6
 8024fd4:	fff6fff6 	.word	0xfff6fff6
 8024fd8:	0082      	.short	0x0082
 8024fda:	0025      	movs	r5, r4
 8024fdc:	681a      	ldr	r2, [r3, #0]
 8024fde:	3542      	adds	r5, #66	@ 0x42
 8024fe0:	1d11      	adds	r1, r2, #4
 8024fe2:	6019      	str	r1, [r3, #0]
 8024fe4:	6813      	ldr	r3, [r2, #0]
 8024fe6:	702b      	strb	r3, [r5, #0]
 8024fe8:	2301      	movs	r3, #1
 8024fea:	e09e      	b.n	802512a <_printf_i+0x1be>
 8024fec:	6818      	ldr	r0, [r3, #0]
 8024fee:	6809      	ldr	r1, [r1, #0]
 8024ff0:	1d02      	adds	r2, r0, #4
 8024ff2:	060d      	lsls	r5, r1, #24
 8024ff4:	d50b      	bpl.n	802500e <_printf_i+0xa2>
 8024ff6:	6806      	ldr	r6, [r0, #0]
 8024ff8:	601a      	str	r2, [r3, #0]
 8024ffa:	2e00      	cmp	r6, #0
 8024ffc:	da03      	bge.n	8025006 <_printf_i+0x9a>
 8024ffe:	232d      	movs	r3, #45	@ 0x2d
 8025000:	9a03      	ldr	r2, [sp, #12]
 8025002:	4276      	negs	r6, r6
 8025004:	7013      	strb	r3, [r2, #0]
 8025006:	4b5d      	ldr	r3, [pc, #372]	@ (802517c <_printf_i+0x210>)
 8025008:	270a      	movs	r7, #10
 802500a:	9304      	str	r3, [sp, #16]
 802500c:	e018      	b.n	8025040 <_printf_i+0xd4>
 802500e:	6806      	ldr	r6, [r0, #0]
 8025010:	601a      	str	r2, [r3, #0]
 8025012:	0649      	lsls	r1, r1, #25
 8025014:	d5f1      	bpl.n	8024ffa <_printf_i+0x8e>
 8025016:	b236      	sxth	r6, r6
 8025018:	e7ef      	b.n	8024ffa <_printf_i+0x8e>
 802501a:	6808      	ldr	r0, [r1, #0]
 802501c:	6819      	ldr	r1, [r3, #0]
 802501e:	c940      	ldmia	r1!, {r6}
 8025020:	0605      	lsls	r5, r0, #24
 8025022:	d402      	bmi.n	802502a <_printf_i+0xbe>
 8025024:	0640      	lsls	r0, r0, #25
 8025026:	d500      	bpl.n	802502a <_printf_i+0xbe>
 8025028:	b2b6      	uxth	r6, r6
 802502a:	6019      	str	r1, [r3, #0]
 802502c:	4b53      	ldr	r3, [pc, #332]	@ (802517c <_printf_i+0x210>)
 802502e:	270a      	movs	r7, #10
 8025030:	9304      	str	r3, [sp, #16]
 8025032:	2a6f      	cmp	r2, #111	@ 0x6f
 8025034:	d100      	bne.n	8025038 <_printf_i+0xcc>
 8025036:	3f02      	subs	r7, #2
 8025038:	0023      	movs	r3, r4
 802503a:	2200      	movs	r2, #0
 802503c:	3343      	adds	r3, #67	@ 0x43
 802503e:	701a      	strb	r2, [r3, #0]
 8025040:	6863      	ldr	r3, [r4, #4]
 8025042:	60a3      	str	r3, [r4, #8]
 8025044:	2b00      	cmp	r3, #0
 8025046:	db06      	blt.n	8025056 <_printf_i+0xea>
 8025048:	2104      	movs	r1, #4
 802504a:	6822      	ldr	r2, [r4, #0]
 802504c:	9d03      	ldr	r5, [sp, #12]
 802504e:	438a      	bics	r2, r1
 8025050:	6022      	str	r2, [r4, #0]
 8025052:	4333      	orrs	r3, r6
 8025054:	d00c      	beq.n	8025070 <_printf_i+0x104>
 8025056:	9d03      	ldr	r5, [sp, #12]
 8025058:	0030      	movs	r0, r6
 802505a:	0039      	movs	r1, r7
 802505c:	f7db f928 	bl	80002b0 <__aeabi_uidivmod>
 8025060:	9b04      	ldr	r3, [sp, #16]
 8025062:	3d01      	subs	r5, #1
 8025064:	5c5b      	ldrb	r3, [r3, r1]
 8025066:	702b      	strb	r3, [r5, #0]
 8025068:	0033      	movs	r3, r6
 802506a:	0006      	movs	r6, r0
 802506c:	429f      	cmp	r7, r3
 802506e:	d9f3      	bls.n	8025058 <_printf_i+0xec>
 8025070:	2f08      	cmp	r7, #8
 8025072:	d109      	bne.n	8025088 <_printf_i+0x11c>
 8025074:	6823      	ldr	r3, [r4, #0]
 8025076:	07db      	lsls	r3, r3, #31
 8025078:	d506      	bpl.n	8025088 <_printf_i+0x11c>
 802507a:	6862      	ldr	r2, [r4, #4]
 802507c:	6923      	ldr	r3, [r4, #16]
 802507e:	429a      	cmp	r2, r3
 8025080:	dc02      	bgt.n	8025088 <_printf_i+0x11c>
 8025082:	2330      	movs	r3, #48	@ 0x30
 8025084:	3d01      	subs	r5, #1
 8025086:	702b      	strb	r3, [r5, #0]
 8025088:	9b03      	ldr	r3, [sp, #12]
 802508a:	1b5b      	subs	r3, r3, r5
 802508c:	6123      	str	r3, [r4, #16]
 802508e:	9b07      	ldr	r3, [sp, #28]
 8025090:	0021      	movs	r1, r4
 8025092:	9300      	str	r3, [sp, #0]
 8025094:	9805      	ldr	r0, [sp, #20]
 8025096:	9b06      	ldr	r3, [sp, #24]
 8025098:	aa09      	add	r2, sp, #36	@ 0x24
 802509a:	f7ff fef7 	bl	8024e8c <_printf_common>
 802509e:	3001      	adds	r0, #1
 80250a0:	d148      	bne.n	8025134 <_printf_i+0x1c8>
 80250a2:	2001      	movs	r0, #1
 80250a4:	4240      	negs	r0, r0
 80250a6:	b00b      	add	sp, #44	@ 0x2c
 80250a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80250aa:	2220      	movs	r2, #32
 80250ac:	6809      	ldr	r1, [r1, #0]
 80250ae:	430a      	orrs	r2, r1
 80250b0:	6022      	str	r2, [r4, #0]
 80250b2:	2278      	movs	r2, #120	@ 0x78
 80250b4:	4932      	ldr	r1, [pc, #200]	@ (8025180 <_printf_i+0x214>)
 80250b6:	9104      	str	r1, [sp, #16]
 80250b8:	0021      	movs	r1, r4
 80250ba:	3145      	adds	r1, #69	@ 0x45
 80250bc:	700a      	strb	r2, [r1, #0]
 80250be:	6819      	ldr	r1, [r3, #0]
 80250c0:	6822      	ldr	r2, [r4, #0]
 80250c2:	c940      	ldmia	r1!, {r6}
 80250c4:	0610      	lsls	r0, r2, #24
 80250c6:	d402      	bmi.n	80250ce <_printf_i+0x162>
 80250c8:	0650      	lsls	r0, r2, #25
 80250ca:	d500      	bpl.n	80250ce <_printf_i+0x162>
 80250cc:	b2b6      	uxth	r6, r6
 80250ce:	6019      	str	r1, [r3, #0]
 80250d0:	07d3      	lsls	r3, r2, #31
 80250d2:	d502      	bpl.n	80250da <_printf_i+0x16e>
 80250d4:	2320      	movs	r3, #32
 80250d6:	4313      	orrs	r3, r2
 80250d8:	6023      	str	r3, [r4, #0]
 80250da:	2e00      	cmp	r6, #0
 80250dc:	d001      	beq.n	80250e2 <_printf_i+0x176>
 80250de:	2710      	movs	r7, #16
 80250e0:	e7aa      	b.n	8025038 <_printf_i+0xcc>
 80250e2:	2220      	movs	r2, #32
 80250e4:	6823      	ldr	r3, [r4, #0]
 80250e6:	4393      	bics	r3, r2
 80250e8:	6023      	str	r3, [r4, #0]
 80250ea:	e7f8      	b.n	80250de <_printf_i+0x172>
 80250ec:	681a      	ldr	r2, [r3, #0]
 80250ee:	680d      	ldr	r5, [r1, #0]
 80250f0:	1d10      	adds	r0, r2, #4
 80250f2:	6949      	ldr	r1, [r1, #20]
 80250f4:	6018      	str	r0, [r3, #0]
 80250f6:	6813      	ldr	r3, [r2, #0]
 80250f8:	062e      	lsls	r6, r5, #24
 80250fa:	d501      	bpl.n	8025100 <_printf_i+0x194>
 80250fc:	6019      	str	r1, [r3, #0]
 80250fe:	e002      	b.n	8025106 <_printf_i+0x19a>
 8025100:	066d      	lsls	r5, r5, #25
 8025102:	d5fb      	bpl.n	80250fc <_printf_i+0x190>
 8025104:	8019      	strh	r1, [r3, #0]
 8025106:	2300      	movs	r3, #0
 8025108:	9d03      	ldr	r5, [sp, #12]
 802510a:	6123      	str	r3, [r4, #16]
 802510c:	e7bf      	b.n	802508e <_printf_i+0x122>
 802510e:	681a      	ldr	r2, [r3, #0]
 8025110:	1d11      	adds	r1, r2, #4
 8025112:	6019      	str	r1, [r3, #0]
 8025114:	6815      	ldr	r5, [r2, #0]
 8025116:	2100      	movs	r1, #0
 8025118:	0028      	movs	r0, r5
 802511a:	6862      	ldr	r2, [r4, #4]
 802511c:	f000 fba1 	bl	8025862 <memchr>
 8025120:	2800      	cmp	r0, #0
 8025122:	d001      	beq.n	8025128 <_printf_i+0x1bc>
 8025124:	1b40      	subs	r0, r0, r5
 8025126:	6060      	str	r0, [r4, #4]
 8025128:	6863      	ldr	r3, [r4, #4]
 802512a:	6123      	str	r3, [r4, #16]
 802512c:	2300      	movs	r3, #0
 802512e:	9a03      	ldr	r2, [sp, #12]
 8025130:	7013      	strb	r3, [r2, #0]
 8025132:	e7ac      	b.n	802508e <_printf_i+0x122>
 8025134:	002a      	movs	r2, r5
 8025136:	6923      	ldr	r3, [r4, #16]
 8025138:	9906      	ldr	r1, [sp, #24]
 802513a:	9805      	ldr	r0, [sp, #20]
 802513c:	9d07      	ldr	r5, [sp, #28]
 802513e:	47a8      	blx	r5
 8025140:	3001      	adds	r0, #1
 8025142:	d0ae      	beq.n	80250a2 <_printf_i+0x136>
 8025144:	6823      	ldr	r3, [r4, #0]
 8025146:	079b      	lsls	r3, r3, #30
 8025148:	d415      	bmi.n	8025176 <_printf_i+0x20a>
 802514a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802514c:	68e0      	ldr	r0, [r4, #12]
 802514e:	4298      	cmp	r0, r3
 8025150:	daa9      	bge.n	80250a6 <_printf_i+0x13a>
 8025152:	0018      	movs	r0, r3
 8025154:	e7a7      	b.n	80250a6 <_printf_i+0x13a>
 8025156:	0022      	movs	r2, r4
 8025158:	2301      	movs	r3, #1
 802515a:	9906      	ldr	r1, [sp, #24]
 802515c:	9805      	ldr	r0, [sp, #20]
 802515e:	9e07      	ldr	r6, [sp, #28]
 8025160:	3219      	adds	r2, #25
 8025162:	47b0      	blx	r6
 8025164:	3001      	adds	r0, #1
 8025166:	d09c      	beq.n	80250a2 <_printf_i+0x136>
 8025168:	3501      	adds	r5, #1
 802516a:	68e3      	ldr	r3, [r4, #12]
 802516c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802516e:	1a9b      	subs	r3, r3, r2
 8025170:	42ab      	cmp	r3, r5
 8025172:	dcf0      	bgt.n	8025156 <_printf_i+0x1ea>
 8025174:	e7e9      	b.n	802514a <_printf_i+0x1de>
 8025176:	2500      	movs	r5, #0
 8025178:	e7f7      	b.n	802516a <_printf_i+0x1fe>
 802517a:	46c0      	nop			@ (mov r8, r8)
 802517c:	0802e09c 	.word	0x0802e09c
 8025180:	0802e0ad 	.word	0x0802e0ad

08025184 <std>:
 8025184:	2300      	movs	r3, #0
 8025186:	b510      	push	{r4, lr}
 8025188:	0004      	movs	r4, r0
 802518a:	6003      	str	r3, [r0, #0]
 802518c:	6043      	str	r3, [r0, #4]
 802518e:	6083      	str	r3, [r0, #8]
 8025190:	8181      	strh	r1, [r0, #12]
 8025192:	6643      	str	r3, [r0, #100]	@ 0x64
 8025194:	81c2      	strh	r2, [r0, #14]
 8025196:	6103      	str	r3, [r0, #16]
 8025198:	6143      	str	r3, [r0, #20]
 802519a:	6183      	str	r3, [r0, #24]
 802519c:	0019      	movs	r1, r3
 802519e:	2208      	movs	r2, #8
 80251a0:	305c      	adds	r0, #92	@ 0x5c
 80251a2:	f000 fa8d 	bl	80256c0 <memset>
 80251a6:	4b0b      	ldr	r3, [pc, #44]	@ (80251d4 <std+0x50>)
 80251a8:	6224      	str	r4, [r4, #32]
 80251aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80251ac:	4b0a      	ldr	r3, [pc, #40]	@ (80251d8 <std+0x54>)
 80251ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80251b0:	4b0a      	ldr	r3, [pc, #40]	@ (80251dc <std+0x58>)
 80251b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80251b4:	4b0a      	ldr	r3, [pc, #40]	@ (80251e0 <std+0x5c>)
 80251b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80251b8:	4b0a      	ldr	r3, [pc, #40]	@ (80251e4 <std+0x60>)
 80251ba:	429c      	cmp	r4, r3
 80251bc:	d005      	beq.n	80251ca <std+0x46>
 80251be:	4b0a      	ldr	r3, [pc, #40]	@ (80251e8 <std+0x64>)
 80251c0:	429c      	cmp	r4, r3
 80251c2:	d002      	beq.n	80251ca <std+0x46>
 80251c4:	4b09      	ldr	r3, [pc, #36]	@ (80251ec <std+0x68>)
 80251c6:	429c      	cmp	r4, r3
 80251c8:	d103      	bne.n	80251d2 <std+0x4e>
 80251ca:	0020      	movs	r0, r4
 80251cc:	3058      	adds	r0, #88	@ 0x58
 80251ce:	f000 fb45 	bl	802585c <__retarget_lock_init_recursive>
 80251d2:	bd10      	pop	{r4, pc}
 80251d4:	08025431 	.word	0x08025431
 80251d8:	08025459 	.word	0x08025459
 80251dc:	08025491 	.word	0x08025491
 80251e0:	080254bd 	.word	0x080254bd
 80251e4:	200034e0 	.word	0x200034e0
 80251e8:	20003548 	.word	0x20003548
 80251ec:	200035b0 	.word	0x200035b0

080251f0 <stdio_exit_handler>:
 80251f0:	b510      	push	{r4, lr}
 80251f2:	4a03      	ldr	r2, [pc, #12]	@ (8025200 <stdio_exit_handler+0x10>)
 80251f4:	4903      	ldr	r1, [pc, #12]	@ (8025204 <stdio_exit_handler+0x14>)
 80251f6:	4804      	ldr	r0, [pc, #16]	@ (8025208 <stdio_exit_handler+0x18>)
 80251f8:	f000 f86c 	bl	80252d4 <_fwalk_sglue>
 80251fc:	bd10      	pop	{r4, pc}
 80251fe:	46c0      	nop			@ (mov r8, r8)
 8025200:	20000268 	.word	0x20000268
 8025204:	08027e59 	.word	0x08027e59
 8025208:	200003e4 	.word	0x200003e4

0802520c <cleanup_stdio>:
 802520c:	6841      	ldr	r1, [r0, #4]
 802520e:	4b0b      	ldr	r3, [pc, #44]	@ (802523c <cleanup_stdio+0x30>)
 8025210:	b510      	push	{r4, lr}
 8025212:	0004      	movs	r4, r0
 8025214:	4299      	cmp	r1, r3
 8025216:	d001      	beq.n	802521c <cleanup_stdio+0x10>
 8025218:	f002 fe1e 	bl	8027e58 <_fflush_r>
 802521c:	68a1      	ldr	r1, [r4, #8]
 802521e:	4b08      	ldr	r3, [pc, #32]	@ (8025240 <cleanup_stdio+0x34>)
 8025220:	4299      	cmp	r1, r3
 8025222:	d002      	beq.n	802522a <cleanup_stdio+0x1e>
 8025224:	0020      	movs	r0, r4
 8025226:	f002 fe17 	bl	8027e58 <_fflush_r>
 802522a:	68e1      	ldr	r1, [r4, #12]
 802522c:	4b05      	ldr	r3, [pc, #20]	@ (8025244 <cleanup_stdio+0x38>)
 802522e:	4299      	cmp	r1, r3
 8025230:	d002      	beq.n	8025238 <cleanup_stdio+0x2c>
 8025232:	0020      	movs	r0, r4
 8025234:	f002 fe10 	bl	8027e58 <_fflush_r>
 8025238:	bd10      	pop	{r4, pc}
 802523a:	46c0      	nop			@ (mov r8, r8)
 802523c:	200034e0 	.word	0x200034e0
 8025240:	20003548 	.word	0x20003548
 8025244:	200035b0 	.word	0x200035b0

08025248 <global_stdio_init.part.0>:
 8025248:	b510      	push	{r4, lr}
 802524a:	4b09      	ldr	r3, [pc, #36]	@ (8025270 <global_stdio_init.part.0+0x28>)
 802524c:	4a09      	ldr	r2, [pc, #36]	@ (8025274 <global_stdio_init.part.0+0x2c>)
 802524e:	2104      	movs	r1, #4
 8025250:	601a      	str	r2, [r3, #0]
 8025252:	4809      	ldr	r0, [pc, #36]	@ (8025278 <global_stdio_init.part.0+0x30>)
 8025254:	2200      	movs	r2, #0
 8025256:	f7ff ff95 	bl	8025184 <std>
 802525a:	2201      	movs	r2, #1
 802525c:	2109      	movs	r1, #9
 802525e:	4807      	ldr	r0, [pc, #28]	@ (802527c <global_stdio_init.part.0+0x34>)
 8025260:	f7ff ff90 	bl	8025184 <std>
 8025264:	2202      	movs	r2, #2
 8025266:	2112      	movs	r1, #18
 8025268:	4805      	ldr	r0, [pc, #20]	@ (8025280 <global_stdio_init.part.0+0x38>)
 802526a:	f7ff ff8b 	bl	8025184 <std>
 802526e:	bd10      	pop	{r4, pc}
 8025270:	20003618 	.word	0x20003618
 8025274:	080251f1 	.word	0x080251f1
 8025278:	200034e0 	.word	0x200034e0
 802527c:	20003548 	.word	0x20003548
 8025280:	200035b0 	.word	0x200035b0

08025284 <__sfp_lock_acquire>:
 8025284:	b510      	push	{r4, lr}
 8025286:	4802      	ldr	r0, [pc, #8]	@ (8025290 <__sfp_lock_acquire+0xc>)
 8025288:	f000 fae9 	bl	802585e <__retarget_lock_acquire_recursive>
 802528c:	bd10      	pop	{r4, pc}
 802528e:	46c0      	nop			@ (mov r8, r8)
 8025290:	20003621 	.word	0x20003621

08025294 <__sfp_lock_release>:
 8025294:	b510      	push	{r4, lr}
 8025296:	4802      	ldr	r0, [pc, #8]	@ (80252a0 <__sfp_lock_release+0xc>)
 8025298:	f000 fae2 	bl	8025860 <__retarget_lock_release_recursive>
 802529c:	bd10      	pop	{r4, pc}
 802529e:	46c0      	nop			@ (mov r8, r8)
 80252a0:	20003621 	.word	0x20003621

080252a4 <__sinit>:
 80252a4:	b510      	push	{r4, lr}
 80252a6:	0004      	movs	r4, r0
 80252a8:	f7ff ffec 	bl	8025284 <__sfp_lock_acquire>
 80252ac:	6a23      	ldr	r3, [r4, #32]
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d002      	beq.n	80252b8 <__sinit+0x14>
 80252b2:	f7ff ffef 	bl	8025294 <__sfp_lock_release>
 80252b6:	bd10      	pop	{r4, pc}
 80252b8:	4b04      	ldr	r3, [pc, #16]	@ (80252cc <__sinit+0x28>)
 80252ba:	6223      	str	r3, [r4, #32]
 80252bc:	4b04      	ldr	r3, [pc, #16]	@ (80252d0 <__sinit+0x2c>)
 80252be:	681b      	ldr	r3, [r3, #0]
 80252c0:	2b00      	cmp	r3, #0
 80252c2:	d1f6      	bne.n	80252b2 <__sinit+0xe>
 80252c4:	f7ff ffc0 	bl	8025248 <global_stdio_init.part.0>
 80252c8:	e7f3      	b.n	80252b2 <__sinit+0xe>
 80252ca:	46c0      	nop			@ (mov r8, r8)
 80252cc:	0802520d 	.word	0x0802520d
 80252d0:	20003618 	.word	0x20003618

080252d4 <_fwalk_sglue>:
 80252d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80252d6:	0014      	movs	r4, r2
 80252d8:	2600      	movs	r6, #0
 80252da:	9000      	str	r0, [sp, #0]
 80252dc:	9101      	str	r1, [sp, #4]
 80252de:	68a5      	ldr	r5, [r4, #8]
 80252e0:	6867      	ldr	r7, [r4, #4]
 80252e2:	3f01      	subs	r7, #1
 80252e4:	d504      	bpl.n	80252f0 <_fwalk_sglue+0x1c>
 80252e6:	6824      	ldr	r4, [r4, #0]
 80252e8:	2c00      	cmp	r4, #0
 80252ea:	d1f8      	bne.n	80252de <_fwalk_sglue+0xa>
 80252ec:	0030      	movs	r0, r6
 80252ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80252f0:	89ab      	ldrh	r3, [r5, #12]
 80252f2:	2b01      	cmp	r3, #1
 80252f4:	d908      	bls.n	8025308 <_fwalk_sglue+0x34>
 80252f6:	220e      	movs	r2, #14
 80252f8:	5eab      	ldrsh	r3, [r5, r2]
 80252fa:	3301      	adds	r3, #1
 80252fc:	d004      	beq.n	8025308 <_fwalk_sglue+0x34>
 80252fe:	0029      	movs	r1, r5
 8025300:	9800      	ldr	r0, [sp, #0]
 8025302:	9b01      	ldr	r3, [sp, #4]
 8025304:	4798      	blx	r3
 8025306:	4306      	orrs	r6, r0
 8025308:	3568      	adds	r5, #104	@ 0x68
 802530a:	e7ea      	b.n	80252e2 <_fwalk_sglue+0xe>

0802530c <iprintf>:
 802530c:	b40f      	push	{r0, r1, r2, r3}
 802530e:	b507      	push	{r0, r1, r2, lr}
 8025310:	4905      	ldr	r1, [pc, #20]	@ (8025328 <iprintf+0x1c>)
 8025312:	ab04      	add	r3, sp, #16
 8025314:	6808      	ldr	r0, [r1, #0]
 8025316:	cb04      	ldmia	r3!, {r2}
 8025318:	6881      	ldr	r1, [r0, #8]
 802531a:	9301      	str	r3, [sp, #4]
 802531c:	f002 fbfa 	bl	8027b14 <_vfiprintf_r>
 8025320:	b003      	add	sp, #12
 8025322:	bc08      	pop	{r3}
 8025324:	b004      	add	sp, #16
 8025326:	4718      	bx	r3
 8025328:	200003e0 	.word	0x200003e0

0802532c <_puts_r>:
 802532c:	6a03      	ldr	r3, [r0, #32]
 802532e:	b570      	push	{r4, r5, r6, lr}
 8025330:	0005      	movs	r5, r0
 8025332:	000e      	movs	r6, r1
 8025334:	6884      	ldr	r4, [r0, #8]
 8025336:	2b00      	cmp	r3, #0
 8025338:	d101      	bne.n	802533e <_puts_r+0x12>
 802533a:	f7ff ffb3 	bl	80252a4 <__sinit>
 802533e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8025340:	07db      	lsls	r3, r3, #31
 8025342:	d405      	bmi.n	8025350 <_puts_r+0x24>
 8025344:	89a3      	ldrh	r3, [r4, #12]
 8025346:	059b      	lsls	r3, r3, #22
 8025348:	d402      	bmi.n	8025350 <_puts_r+0x24>
 802534a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802534c:	f000 fa87 	bl	802585e <__retarget_lock_acquire_recursive>
 8025350:	89a3      	ldrh	r3, [r4, #12]
 8025352:	071b      	lsls	r3, r3, #28
 8025354:	d502      	bpl.n	802535c <_puts_r+0x30>
 8025356:	6923      	ldr	r3, [r4, #16]
 8025358:	2b00      	cmp	r3, #0
 802535a:	d11f      	bne.n	802539c <_puts_r+0x70>
 802535c:	0021      	movs	r1, r4
 802535e:	0028      	movs	r0, r5
 8025360:	f000 f950 	bl	8025604 <__swsetup_r>
 8025364:	2800      	cmp	r0, #0
 8025366:	d019      	beq.n	802539c <_puts_r+0x70>
 8025368:	2501      	movs	r5, #1
 802536a:	426d      	negs	r5, r5
 802536c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802536e:	07db      	lsls	r3, r3, #31
 8025370:	d405      	bmi.n	802537e <_puts_r+0x52>
 8025372:	89a3      	ldrh	r3, [r4, #12]
 8025374:	059b      	lsls	r3, r3, #22
 8025376:	d402      	bmi.n	802537e <_puts_r+0x52>
 8025378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802537a:	f000 fa71 	bl	8025860 <__retarget_lock_release_recursive>
 802537e:	0028      	movs	r0, r5
 8025380:	bd70      	pop	{r4, r5, r6, pc}
 8025382:	3601      	adds	r6, #1
 8025384:	60a3      	str	r3, [r4, #8]
 8025386:	2b00      	cmp	r3, #0
 8025388:	da04      	bge.n	8025394 <_puts_r+0x68>
 802538a:	69a2      	ldr	r2, [r4, #24]
 802538c:	429a      	cmp	r2, r3
 802538e:	dc16      	bgt.n	80253be <_puts_r+0x92>
 8025390:	290a      	cmp	r1, #10
 8025392:	d014      	beq.n	80253be <_puts_r+0x92>
 8025394:	6823      	ldr	r3, [r4, #0]
 8025396:	1c5a      	adds	r2, r3, #1
 8025398:	6022      	str	r2, [r4, #0]
 802539a:	7019      	strb	r1, [r3, #0]
 802539c:	68a3      	ldr	r3, [r4, #8]
 802539e:	7831      	ldrb	r1, [r6, #0]
 80253a0:	3b01      	subs	r3, #1
 80253a2:	2900      	cmp	r1, #0
 80253a4:	d1ed      	bne.n	8025382 <_puts_r+0x56>
 80253a6:	60a3      	str	r3, [r4, #8]
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	da0f      	bge.n	80253cc <_puts_r+0xa0>
 80253ac:	0022      	movs	r2, r4
 80253ae:	0028      	movs	r0, r5
 80253b0:	310a      	adds	r1, #10
 80253b2:	f000 f8e5 	bl	8025580 <__swbuf_r>
 80253b6:	3001      	adds	r0, #1
 80253b8:	d0d6      	beq.n	8025368 <_puts_r+0x3c>
 80253ba:	250a      	movs	r5, #10
 80253bc:	e7d6      	b.n	802536c <_puts_r+0x40>
 80253be:	0022      	movs	r2, r4
 80253c0:	0028      	movs	r0, r5
 80253c2:	f000 f8dd 	bl	8025580 <__swbuf_r>
 80253c6:	3001      	adds	r0, #1
 80253c8:	d1e8      	bne.n	802539c <_puts_r+0x70>
 80253ca:	e7cd      	b.n	8025368 <_puts_r+0x3c>
 80253cc:	6823      	ldr	r3, [r4, #0]
 80253ce:	1c5a      	adds	r2, r3, #1
 80253d0:	6022      	str	r2, [r4, #0]
 80253d2:	220a      	movs	r2, #10
 80253d4:	701a      	strb	r2, [r3, #0]
 80253d6:	e7f0      	b.n	80253ba <_puts_r+0x8e>

080253d8 <puts>:
 80253d8:	b510      	push	{r4, lr}
 80253da:	4b03      	ldr	r3, [pc, #12]	@ (80253e8 <puts+0x10>)
 80253dc:	0001      	movs	r1, r0
 80253de:	6818      	ldr	r0, [r3, #0]
 80253e0:	f7ff ffa4 	bl	802532c <_puts_r>
 80253e4:	bd10      	pop	{r4, pc}
 80253e6:	46c0      	nop			@ (mov r8, r8)
 80253e8:	200003e0 	.word	0x200003e0

080253ec <siprintf>:
 80253ec:	b40e      	push	{r1, r2, r3}
 80253ee:	b510      	push	{r4, lr}
 80253f0:	2400      	movs	r4, #0
 80253f2:	490c      	ldr	r1, [pc, #48]	@ (8025424 <siprintf+0x38>)
 80253f4:	b09d      	sub	sp, #116	@ 0x74
 80253f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80253f8:	9002      	str	r0, [sp, #8]
 80253fa:	9006      	str	r0, [sp, #24]
 80253fc:	9107      	str	r1, [sp, #28]
 80253fe:	9104      	str	r1, [sp, #16]
 8025400:	4809      	ldr	r0, [pc, #36]	@ (8025428 <siprintf+0x3c>)
 8025402:	490a      	ldr	r1, [pc, #40]	@ (802542c <siprintf+0x40>)
 8025404:	cb04      	ldmia	r3!, {r2}
 8025406:	9105      	str	r1, [sp, #20]
 8025408:	6800      	ldr	r0, [r0, #0]
 802540a:	a902      	add	r1, sp, #8
 802540c:	9301      	str	r3, [sp, #4]
 802540e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025410:	f002 fa5a 	bl	80278c8 <_svfiprintf_r>
 8025414:	9b02      	ldr	r3, [sp, #8]
 8025416:	701c      	strb	r4, [r3, #0]
 8025418:	b01d      	add	sp, #116	@ 0x74
 802541a:	bc10      	pop	{r4}
 802541c:	bc08      	pop	{r3}
 802541e:	b003      	add	sp, #12
 8025420:	4718      	bx	r3
 8025422:	46c0      	nop			@ (mov r8, r8)
 8025424:	7fffffff 	.word	0x7fffffff
 8025428:	200003e0 	.word	0x200003e0
 802542c:	ffff0208 	.word	0xffff0208

08025430 <__sread>:
 8025430:	b570      	push	{r4, r5, r6, lr}
 8025432:	000c      	movs	r4, r1
 8025434:	250e      	movs	r5, #14
 8025436:	5f49      	ldrsh	r1, [r1, r5]
 8025438:	f000 f9be 	bl	80257b8 <_read_r>
 802543c:	2800      	cmp	r0, #0
 802543e:	db03      	blt.n	8025448 <__sread+0x18>
 8025440:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8025442:	181b      	adds	r3, r3, r0
 8025444:	6563      	str	r3, [r4, #84]	@ 0x54
 8025446:	bd70      	pop	{r4, r5, r6, pc}
 8025448:	89a3      	ldrh	r3, [r4, #12]
 802544a:	4a02      	ldr	r2, [pc, #8]	@ (8025454 <__sread+0x24>)
 802544c:	4013      	ands	r3, r2
 802544e:	81a3      	strh	r3, [r4, #12]
 8025450:	e7f9      	b.n	8025446 <__sread+0x16>
 8025452:	46c0      	nop			@ (mov r8, r8)
 8025454:	ffffefff 	.word	0xffffefff

08025458 <__swrite>:
 8025458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802545a:	001f      	movs	r7, r3
 802545c:	898b      	ldrh	r3, [r1, #12]
 802545e:	0005      	movs	r5, r0
 8025460:	000c      	movs	r4, r1
 8025462:	0016      	movs	r6, r2
 8025464:	05db      	lsls	r3, r3, #23
 8025466:	d505      	bpl.n	8025474 <__swrite+0x1c>
 8025468:	230e      	movs	r3, #14
 802546a:	5ec9      	ldrsh	r1, [r1, r3]
 802546c:	2200      	movs	r2, #0
 802546e:	2302      	movs	r3, #2
 8025470:	f000 f98e 	bl	8025790 <_lseek_r>
 8025474:	89a3      	ldrh	r3, [r4, #12]
 8025476:	4a05      	ldr	r2, [pc, #20]	@ (802548c <__swrite+0x34>)
 8025478:	0028      	movs	r0, r5
 802547a:	4013      	ands	r3, r2
 802547c:	81a3      	strh	r3, [r4, #12]
 802547e:	0032      	movs	r2, r6
 8025480:	230e      	movs	r3, #14
 8025482:	5ee1      	ldrsh	r1, [r4, r3]
 8025484:	003b      	movs	r3, r7
 8025486:	f000 f9ab 	bl	80257e0 <_write_r>
 802548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802548c:	ffffefff 	.word	0xffffefff

08025490 <__sseek>:
 8025490:	b570      	push	{r4, r5, r6, lr}
 8025492:	000c      	movs	r4, r1
 8025494:	250e      	movs	r5, #14
 8025496:	5f49      	ldrsh	r1, [r1, r5]
 8025498:	f000 f97a 	bl	8025790 <_lseek_r>
 802549c:	89a3      	ldrh	r3, [r4, #12]
 802549e:	1c42      	adds	r2, r0, #1
 80254a0:	d103      	bne.n	80254aa <__sseek+0x1a>
 80254a2:	4a05      	ldr	r2, [pc, #20]	@ (80254b8 <__sseek+0x28>)
 80254a4:	4013      	ands	r3, r2
 80254a6:	81a3      	strh	r3, [r4, #12]
 80254a8:	bd70      	pop	{r4, r5, r6, pc}
 80254aa:	2280      	movs	r2, #128	@ 0x80
 80254ac:	0152      	lsls	r2, r2, #5
 80254ae:	4313      	orrs	r3, r2
 80254b0:	81a3      	strh	r3, [r4, #12]
 80254b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80254b4:	e7f8      	b.n	80254a8 <__sseek+0x18>
 80254b6:	46c0      	nop			@ (mov r8, r8)
 80254b8:	ffffefff 	.word	0xffffefff

080254bc <__sclose>:
 80254bc:	b510      	push	{r4, lr}
 80254be:	230e      	movs	r3, #14
 80254c0:	5ec9      	ldrsh	r1, [r1, r3]
 80254c2:	f000 f953 	bl	802576c <_close_r>
 80254c6:	bd10      	pop	{r4, pc}

080254c8 <_vsniprintf_r>:
 80254c8:	b530      	push	{r4, r5, lr}
 80254ca:	0005      	movs	r5, r0
 80254cc:	0014      	movs	r4, r2
 80254ce:	0008      	movs	r0, r1
 80254d0:	001a      	movs	r2, r3
 80254d2:	b09b      	sub	sp, #108	@ 0x6c
 80254d4:	2c00      	cmp	r4, #0
 80254d6:	da05      	bge.n	80254e4 <_vsniprintf_r+0x1c>
 80254d8:	238b      	movs	r3, #139	@ 0x8b
 80254da:	2001      	movs	r0, #1
 80254dc:	602b      	str	r3, [r5, #0]
 80254de:	4240      	negs	r0, r0
 80254e0:	b01b      	add	sp, #108	@ 0x6c
 80254e2:	bd30      	pop	{r4, r5, pc}
 80254e4:	2382      	movs	r3, #130	@ 0x82
 80254e6:	4669      	mov	r1, sp
 80254e8:	009b      	lsls	r3, r3, #2
 80254ea:	818b      	strh	r3, [r1, #12]
 80254ec:	2100      	movs	r1, #0
 80254ee:	9000      	str	r0, [sp, #0]
 80254f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80254f2:	9004      	str	r0, [sp, #16]
 80254f4:	428c      	cmp	r4, r1
 80254f6:	d000      	beq.n	80254fa <_vsniprintf_r+0x32>
 80254f8:	1e61      	subs	r1, r4, #1
 80254fa:	2301      	movs	r3, #1
 80254fc:	9102      	str	r1, [sp, #8]
 80254fe:	9105      	str	r1, [sp, #20]
 8025500:	4669      	mov	r1, sp
 8025502:	425b      	negs	r3, r3
 8025504:	81cb      	strh	r3, [r1, #14]
 8025506:	0028      	movs	r0, r5
 8025508:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802550a:	f002 f9dd 	bl	80278c8 <_svfiprintf_r>
 802550e:	1c43      	adds	r3, r0, #1
 8025510:	da01      	bge.n	8025516 <_vsniprintf_r+0x4e>
 8025512:	238b      	movs	r3, #139	@ 0x8b
 8025514:	602b      	str	r3, [r5, #0]
 8025516:	2c00      	cmp	r4, #0
 8025518:	d0e2      	beq.n	80254e0 <_vsniprintf_r+0x18>
 802551a:	2200      	movs	r2, #0
 802551c:	9b00      	ldr	r3, [sp, #0]
 802551e:	701a      	strb	r2, [r3, #0]
 8025520:	e7de      	b.n	80254e0 <_vsniprintf_r+0x18>
	...

08025524 <vsniprintf>:
 8025524:	b513      	push	{r0, r1, r4, lr}
 8025526:	4c04      	ldr	r4, [pc, #16]	@ (8025538 <vsniprintf+0x14>)
 8025528:	9300      	str	r3, [sp, #0]
 802552a:	0013      	movs	r3, r2
 802552c:	000a      	movs	r2, r1
 802552e:	0001      	movs	r1, r0
 8025530:	6820      	ldr	r0, [r4, #0]
 8025532:	f7ff ffc9 	bl	80254c8 <_vsniprintf_r>
 8025536:	bd16      	pop	{r1, r2, r4, pc}
 8025538:	200003e0 	.word	0x200003e0

0802553c <_vsiprintf_r>:
 802553c:	b510      	push	{r4, lr}
 802553e:	2400      	movs	r4, #0
 8025540:	b09a      	sub	sp, #104	@ 0x68
 8025542:	9100      	str	r1, [sp, #0]
 8025544:	9104      	str	r1, [sp, #16]
 8025546:	4906      	ldr	r1, [pc, #24]	@ (8025560 <_vsiprintf_r+0x24>)
 8025548:	9419      	str	r4, [sp, #100]	@ 0x64
 802554a:	9105      	str	r1, [sp, #20]
 802554c:	9102      	str	r1, [sp, #8]
 802554e:	4905      	ldr	r1, [pc, #20]	@ (8025564 <_vsiprintf_r+0x28>)
 8025550:	9103      	str	r1, [sp, #12]
 8025552:	4669      	mov	r1, sp
 8025554:	f002 f9b8 	bl	80278c8 <_svfiprintf_r>
 8025558:	9b00      	ldr	r3, [sp, #0]
 802555a:	701c      	strb	r4, [r3, #0]
 802555c:	b01a      	add	sp, #104	@ 0x68
 802555e:	bd10      	pop	{r4, pc}
 8025560:	7fffffff 	.word	0x7fffffff
 8025564:	ffff0208 	.word	0xffff0208

08025568 <vsiprintf>:
 8025568:	b510      	push	{r4, lr}
 802556a:	4c04      	ldr	r4, [pc, #16]	@ (802557c <vsiprintf+0x14>)
 802556c:	0013      	movs	r3, r2
 802556e:	000a      	movs	r2, r1
 8025570:	0001      	movs	r1, r0
 8025572:	6820      	ldr	r0, [r4, #0]
 8025574:	f7ff ffe2 	bl	802553c <_vsiprintf_r>
 8025578:	bd10      	pop	{r4, pc}
 802557a:	46c0      	nop			@ (mov r8, r8)
 802557c:	200003e0 	.word	0x200003e0

08025580 <__swbuf_r>:
 8025580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025582:	0006      	movs	r6, r0
 8025584:	000d      	movs	r5, r1
 8025586:	0014      	movs	r4, r2
 8025588:	2800      	cmp	r0, #0
 802558a:	d004      	beq.n	8025596 <__swbuf_r+0x16>
 802558c:	6a03      	ldr	r3, [r0, #32]
 802558e:	2b00      	cmp	r3, #0
 8025590:	d101      	bne.n	8025596 <__swbuf_r+0x16>
 8025592:	f7ff fe87 	bl	80252a4 <__sinit>
 8025596:	69a3      	ldr	r3, [r4, #24]
 8025598:	60a3      	str	r3, [r4, #8]
 802559a:	89a3      	ldrh	r3, [r4, #12]
 802559c:	071b      	lsls	r3, r3, #28
 802559e:	d502      	bpl.n	80255a6 <__swbuf_r+0x26>
 80255a0:	6923      	ldr	r3, [r4, #16]
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	d109      	bne.n	80255ba <__swbuf_r+0x3a>
 80255a6:	0021      	movs	r1, r4
 80255a8:	0030      	movs	r0, r6
 80255aa:	f000 f82b 	bl	8025604 <__swsetup_r>
 80255ae:	2800      	cmp	r0, #0
 80255b0:	d003      	beq.n	80255ba <__swbuf_r+0x3a>
 80255b2:	2501      	movs	r5, #1
 80255b4:	426d      	negs	r5, r5
 80255b6:	0028      	movs	r0, r5
 80255b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80255ba:	6923      	ldr	r3, [r4, #16]
 80255bc:	6820      	ldr	r0, [r4, #0]
 80255be:	b2ef      	uxtb	r7, r5
 80255c0:	1ac0      	subs	r0, r0, r3
 80255c2:	6963      	ldr	r3, [r4, #20]
 80255c4:	b2ed      	uxtb	r5, r5
 80255c6:	4283      	cmp	r3, r0
 80255c8:	dc05      	bgt.n	80255d6 <__swbuf_r+0x56>
 80255ca:	0021      	movs	r1, r4
 80255cc:	0030      	movs	r0, r6
 80255ce:	f002 fc43 	bl	8027e58 <_fflush_r>
 80255d2:	2800      	cmp	r0, #0
 80255d4:	d1ed      	bne.n	80255b2 <__swbuf_r+0x32>
 80255d6:	68a3      	ldr	r3, [r4, #8]
 80255d8:	3001      	adds	r0, #1
 80255da:	3b01      	subs	r3, #1
 80255dc:	60a3      	str	r3, [r4, #8]
 80255de:	6823      	ldr	r3, [r4, #0]
 80255e0:	1c5a      	adds	r2, r3, #1
 80255e2:	6022      	str	r2, [r4, #0]
 80255e4:	701f      	strb	r7, [r3, #0]
 80255e6:	6963      	ldr	r3, [r4, #20]
 80255e8:	4283      	cmp	r3, r0
 80255ea:	d004      	beq.n	80255f6 <__swbuf_r+0x76>
 80255ec:	89a3      	ldrh	r3, [r4, #12]
 80255ee:	07db      	lsls	r3, r3, #31
 80255f0:	d5e1      	bpl.n	80255b6 <__swbuf_r+0x36>
 80255f2:	2d0a      	cmp	r5, #10
 80255f4:	d1df      	bne.n	80255b6 <__swbuf_r+0x36>
 80255f6:	0021      	movs	r1, r4
 80255f8:	0030      	movs	r0, r6
 80255fa:	f002 fc2d 	bl	8027e58 <_fflush_r>
 80255fe:	2800      	cmp	r0, #0
 8025600:	d0d9      	beq.n	80255b6 <__swbuf_r+0x36>
 8025602:	e7d6      	b.n	80255b2 <__swbuf_r+0x32>

08025604 <__swsetup_r>:
 8025604:	4b2d      	ldr	r3, [pc, #180]	@ (80256bc <__swsetup_r+0xb8>)
 8025606:	b570      	push	{r4, r5, r6, lr}
 8025608:	0005      	movs	r5, r0
 802560a:	6818      	ldr	r0, [r3, #0]
 802560c:	000c      	movs	r4, r1
 802560e:	2800      	cmp	r0, #0
 8025610:	d004      	beq.n	802561c <__swsetup_r+0x18>
 8025612:	6a03      	ldr	r3, [r0, #32]
 8025614:	2b00      	cmp	r3, #0
 8025616:	d101      	bne.n	802561c <__swsetup_r+0x18>
 8025618:	f7ff fe44 	bl	80252a4 <__sinit>
 802561c:	220c      	movs	r2, #12
 802561e:	5ea3      	ldrsh	r3, [r4, r2]
 8025620:	071a      	lsls	r2, r3, #28
 8025622:	d423      	bmi.n	802566c <__swsetup_r+0x68>
 8025624:	06da      	lsls	r2, r3, #27
 8025626:	d407      	bmi.n	8025638 <__swsetup_r+0x34>
 8025628:	2209      	movs	r2, #9
 802562a:	602a      	str	r2, [r5, #0]
 802562c:	2240      	movs	r2, #64	@ 0x40
 802562e:	2001      	movs	r0, #1
 8025630:	4313      	orrs	r3, r2
 8025632:	81a3      	strh	r3, [r4, #12]
 8025634:	4240      	negs	r0, r0
 8025636:	e03a      	b.n	80256ae <__swsetup_r+0xaa>
 8025638:	075b      	lsls	r3, r3, #29
 802563a:	d513      	bpl.n	8025664 <__swsetup_r+0x60>
 802563c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802563e:	2900      	cmp	r1, #0
 8025640:	d008      	beq.n	8025654 <__swsetup_r+0x50>
 8025642:	0023      	movs	r3, r4
 8025644:	3344      	adds	r3, #68	@ 0x44
 8025646:	4299      	cmp	r1, r3
 8025648:	d002      	beq.n	8025650 <__swsetup_r+0x4c>
 802564a:	0028      	movs	r0, r5
 802564c:	f000 ff9a 	bl	8026584 <_free_r>
 8025650:	2300      	movs	r3, #0
 8025652:	6363      	str	r3, [r4, #52]	@ 0x34
 8025654:	2224      	movs	r2, #36	@ 0x24
 8025656:	89a3      	ldrh	r3, [r4, #12]
 8025658:	4393      	bics	r3, r2
 802565a:	81a3      	strh	r3, [r4, #12]
 802565c:	2300      	movs	r3, #0
 802565e:	6063      	str	r3, [r4, #4]
 8025660:	6923      	ldr	r3, [r4, #16]
 8025662:	6023      	str	r3, [r4, #0]
 8025664:	2308      	movs	r3, #8
 8025666:	89a2      	ldrh	r2, [r4, #12]
 8025668:	4313      	orrs	r3, r2
 802566a:	81a3      	strh	r3, [r4, #12]
 802566c:	6923      	ldr	r3, [r4, #16]
 802566e:	2b00      	cmp	r3, #0
 8025670:	d10b      	bne.n	802568a <__swsetup_r+0x86>
 8025672:	21a0      	movs	r1, #160	@ 0xa0
 8025674:	2280      	movs	r2, #128	@ 0x80
 8025676:	89a3      	ldrh	r3, [r4, #12]
 8025678:	0089      	lsls	r1, r1, #2
 802567a:	0092      	lsls	r2, r2, #2
 802567c:	400b      	ands	r3, r1
 802567e:	4293      	cmp	r3, r2
 8025680:	d003      	beq.n	802568a <__swsetup_r+0x86>
 8025682:	0021      	movs	r1, r4
 8025684:	0028      	movs	r0, r5
 8025686:	f002 fc3d 	bl	8027f04 <__smakebuf_r>
 802568a:	220c      	movs	r2, #12
 802568c:	5ea3      	ldrsh	r3, [r4, r2]
 802568e:	2101      	movs	r1, #1
 8025690:	001a      	movs	r2, r3
 8025692:	400a      	ands	r2, r1
 8025694:	420b      	tst	r3, r1
 8025696:	d00b      	beq.n	80256b0 <__swsetup_r+0xac>
 8025698:	2200      	movs	r2, #0
 802569a:	60a2      	str	r2, [r4, #8]
 802569c:	6962      	ldr	r2, [r4, #20]
 802569e:	4252      	negs	r2, r2
 80256a0:	61a2      	str	r2, [r4, #24]
 80256a2:	2000      	movs	r0, #0
 80256a4:	6922      	ldr	r2, [r4, #16]
 80256a6:	4282      	cmp	r2, r0
 80256a8:	d101      	bne.n	80256ae <__swsetup_r+0xaa>
 80256aa:	061a      	lsls	r2, r3, #24
 80256ac:	d4be      	bmi.n	802562c <__swsetup_r+0x28>
 80256ae:	bd70      	pop	{r4, r5, r6, pc}
 80256b0:	0799      	lsls	r1, r3, #30
 80256b2:	d400      	bmi.n	80256b6 <__swsetup_r+0xb2>
 80256b4:	6962      	ldr	r2, [r4, #20]
 80256b6:	60a2      	str	r2, [r4, #8]
 80256b8:	e7f3      	b.n	80256a2 <__swsetup_r+0x9e>
 80256ba:	46c0      	nop			@ (mov r8, r8)
 80256bc:	200003e0 	.word	0x200003e0

080256c0 <memset>:
 80256c0:	0003      	movs	r3, r0
 80256c2:	1882      	adds	r2, r0, r2
 80256c4:	4293      	cmp	r3, r2
 80256c6:	d100      	bne.n	80256ca <memset+0xa>
 80256c8:	4770      	bx	lr
 80256ca:	7019      	strb	r1, [r3, #0]
 80256cc:	3301      	adds	r3, #1
 80256ce:	e7f9      	b.n	80256c4 <memset+0x4>

080256d0 <strchr>:
 80256d0:	b2c9      	uxtb	r1, r1
 80256d2:	7803      	ldrb	r3, [r0, #0]
 80256d4:	2b00      	cmp	r3, #0
 80256d6:	d004      	beq.n	80256e2 <strchr+0x12>
 80256d8:	428b      	cmp	r3, r1
 80256da:	d100      	bne.n	80256de <strchr+0xe>
 80256dc:	4770      	bx	lr
 80256de:	3001      	adds	r0, #1
 80256e0:	e7f7      	b.n	80256d2 <strchr+0x2>
 80256e2:	424b      	negs	r3, r1
 80256e4:	4159      	adcs	r1, r3
 80256e6:	4249      	negs	r1, r1
 80256e8:	4008      	ands	r0, r1
 80256ea:	e7f7      	b.n	80256dc <strchr+0xc>

080256ec <strncmp>:
 80256ec:	b530      	push	{r4, r5, lr}
 80256ee:	0005      	movs	r5, r0
 80256f0:	1e10      	subs	r0, r2, #0
 80256f2:	d00b      	beq.n	802570c <strncmp+0x20>
 80256f4:	2400      	movs	r4, #0
 80256f6:	3a01      	subs	r2, #1
 80256f8:	5d2b      	ldrb	r3, [r5, r4]
 80256fa:	5d08      	ldrb	r0, [r1, r4]
 80256fc:	4283      	cmp	r3, r0
 80256fe:	d104      	bne.n	802570a <strncmp+0x1e>
 8025700:	4294      	cmp	r4, r2
 8025702:	d002      	beq.n	802570a <strncmp+0x1e>
 8025704:	3401      	adds	r4, #1
 8025706:	2b00      	cmp	r3, #0
 8025708:	d1f6      	bne.n	80256f8 <strncmp+0xc>
 802570a:	1a18      	subs	r0, r3, r0
 802570c:	bd30      	pop	{r4, r5, pc}

0802570e <strncpy>:
 802570e:	0003      	movs	r3, r0
 8025710:	b530      	push	{r4, r5, lr}
 8025712:	001d      	movs	r5, r3
 8025714:	2a00      	cmp	r2, #0
 8025716:	d006      	beq.n	8025726 <strncpy+0x18>
 8025718:	780c      	ldrb	r4, [r1, #0]
 802571a:	3a01      	subs	r2, #1
 802571c:	3301      	adds	r3, #1
 802571e:	702c      	strb	r4, [r5, #0]
 8025720:	3101      	adds	r1, #1
 8025722:	2c00      	cmp	r4, #0
 8025724:	d1f5      	bne.n	8025712 <strncpy+0x4>
 8025726:	2100      	movs	r1, #0
 8025728:	189a      	adds	r2, r3, r2
 802572a:	4293      	cmp	r3, r2
 802572c:	d100      	bne.n	8025730 <strncpy+0x22>
 802572e:	bd30      	pop	{r4, r5, pc}
 8025730:	7019      	strb	r1, [r3, #0]
 8025732:	3301      	adds	r3, #1
 8025734:	e7f9      	b.n	802572a <strncpy+0x1c>

08025736 <strstr>:
 8025736:	780a      	ldrb	r2, [r1, #0]
 8025738:	b530      	push	{r4, r5, lr}
 802573a:	2a00      	cmp	r2, #0
 802573c:	d10c      	bne.n	8025758 <strstr+0x22>
 802573e:	bd30      	pop	{r4, r5, pc}
 8025740:	429a      	cmp	r2, r3
 8025742:	d108      	bne.n	8025756 <strstr+0x20>
 8025744:	2301      	movs	r3, #1
 8025746:	5ccc      	ldrb	r4, [r1, r3]
 8025748:	2c00      	cmp	r4, #0
 802574a:	d0f8      	beq.n	802573e <strstr+0x8>
 802574c:	5cc5      	ldrb	r5, [r0, r3]
 802574e:	42a5      	cmp	r5, r4
 8025750:	d101      	bne.n	8025756 <strstr+0x20>
 8025752:	3301      	adds	r3, #1
 8025754:	e7f7      	b.n	8025746 <strstr+0x10>
 8025756:	3001      	adds	r0, #1
 8025758:	7803      	ldrb	r3, [r0, #0]
 802575a:	2b00      	cmp	r3, #0
 802575c:	d1f0      	bne.n	8025740 <strstr+0xa>
 802575e:	0018      	movs	r0, r3
 8025760:	e7ed      	b.n	802573e <strstr+0x8>
	...

08025764 <_localeconv_r>:
 8025764:	4800      	ldr	r0, [pc, #0]	@ (8025768 <_localeconv_r+0x4>)
 8025766:	4770      	bx	lr
 8025768:	20000364 	.word	0x20000364

0802576c <_close_r>:
 802576c:	2300      	movs	r3, #0
 802576e:	b570      	push	{r4, r5, r6, lr}
 8025770:	4d06      	ldr	r5, [pc, #24]	@ (802578c <_close_r+0x20>)
 8025772:	0004      	movs	r4, r0
 8025774:	0008      	movs	r0, r1
 8025776:	602b      	str	r3, [r5, #0]
 8025778:	f7ed f86e 	bl	8012858 <_close>
 802577c:	1c43      	adds	r3, r0, #1
 802577e:	d103      	bne.n	8025788 <_close_r+0x1c>
 8025780:	682b      	ldr	r3, [r5, #0]
 8025782:	2b00      	cmp	r3, #0
 8025784:	d000      	beq.n	8025788 <_close_r+0x1c>
 8025786:	6023      	str	r3, [r4, #0]
 8025788:	bd70      	pop	{r4, r5, r6, pc}
 802578a:	46c0      	nop			@ (mov r8, r8)
 802578c:	2000361c 	.word	0x2000361c

08025790 <_lseek_r>:
 8025790:	b570      	push	{r4, r5, r6, lr}
 8025792:	0004      	movs	r4, r0
 8025794:	0008      	movs	r0, r1
 8025796:	0011      	movs	r1, r2
 8025798:	001a      	movs	r2, r3
 802579a:	2300      	movs	r3, #0
 802579c:	4d05      	ldr	r5, [pc, #20]	@ (80257b4 <_lseek_r+0x24>)
 802579e:	602b      	str	r3, [r5, #0]
 80257a0:	f7ed f87b 	bl	801289a <_lseek>
 80257a4:	1c43      	adds	r3, r0, #1
 80257a6:	d103      	bne.n	80257b0 <_lseek_r+0x20>
 80257a8:	682b      	ldr	r3, [r5, #0]
 80257aa:	2b00      	cmp	r3, #0
 80257ac:	d000      	beq.n	80257b0 <_lseek_r+0x20>
 80257ae:	6023      	str	r3, [r4, #0]
 80257b0:	bd70      	pop	{r4, r5, r6, pc}
 80257b2:	46c0      	nop			@ (mov r8, r8)
 80257b4:	2000361c 	.word	0x2000361c

080257b8 <_read_r>:
 80257b8:	b570      	push	{r4, r5, r6, lr}
 80257ba:	0004      	movs	r4, r0
 80257bc:	0008      	movs	r0, r1
 80257be:	0011      	movs	r1, r2
 80257c0:	001a      	movs	r2, r3
 80257c2:	2300      	movs	r3, #0
 80257c4:	4d05      	ldr	r5, [pc, #20]	@ (80257dc <_read_r+0x24>)
 80257c6:	602b      	str	r3, [r5, #0]
 80257c8:	f7ed f829 	bl	801281e <_read>
 80257cc:	1c43      	adds	r3, r0, #1
 80257ce:	d103      	bne.n	80257d8 <_read_r+0x20>
 80257d0:	682b      	ldr	r3, [r5, #0]
 80257d2:	2b00      	cmp	r3, #0
 80257d4:	d000      	beq.n	80257d8 <_read_r+0x20>
 80257d6:	6023      	str	r3, [r4, #0]
 80257d8:	bd70      	pop	{r4, r5, r6, pc}
 80257da:	46c0      	nop			@ (mov r8, r8)
 80257dc:	2000361c 	.word	0x2000361c

080257e0 <_write_r>:
 80257e0:	b570      	push	{r4, r5, r6, lr}
 80257e2:	0004      	movs	r4, r0
 80257e4:	0008      	movs	r0, r1
 80257e6:	0011      	movs	r1, r2
 80257e8:	001a      	movs	r2, r3
 80257ea:	2300      	movs	r3, #0
 80257ec:	4d05      	ldr	r5, [pc, #20]	@ (8025804 <_write_r+0x24>)
 80257ee:	602b      	str	r3, [r5, #0]
 80257f0:	f7ed fce6 	bl	80131c0 <_write>
 80257f4:	1c43      	adds	r3, r0, #1
 80257f6:	d103      	bne.n	8025800 <_write_r+0x20>
 80257f8:	682b      	ldr	r3, [r5, #0]
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	d000      	beq.n	8025800 <_write_r+0x20>
 80257fe:	6023      	str	r3, [r4, #0]
 8025800:	bd70      	pop	{r4, r5, r6, pc}
 8025802:	46c0      	nop			@ (mov r8, r8)
 8025804:	2000361c 	.word	0x2000361c

08025808 <__errno>:
 8025808:	4b01      	ldr	r3, [pc, #4]	@ (8025810 <__errno+0x8>)
 802580a:	6818      	ldr	r0, [r3, #0]
 802580c:	4770      	bx	lr
 802580e:	46c0      	nop			@ (mov r8, r8)
 8025810:	200003e0 	.word	0x200003e0

08025814 <__libc_init_array>:
 8025814:	b570      	push	{r4, r5, r6, lr}
 8025816:	2600      	movs	r6, #0
 8025818:	4c0c      	ldr	r4, [pc, #48]	@ (802584c <__libc_init_array+0x38>)
 802581a:	4d0d      	ldr	r5, [pc, #52]	@ (8025850 <__libc_init_array+0x3c>)
 802581c:	1b64      	subs	r4, r4, r5
 802581e:	10a4      	asrs	r4, r4, #2
 8025820:	42a6      	cmp	r6, r4
 8025822:	d109      	bne.n	8025838 <__libc_init_array+0x24>
 8025824:	2600      	movs	r6, #0
 8025826:	f003 ffcb 	bl	80297c0 <_init>
 802582a:	4c0a      	ldr	r4, [pc, #40]	@ (8025854 <__libc_init_array+0x40>)
 802582c:	4d0a      	ldr	r5, [pc, #40]	@ (8025858 <__libc_init_array+0x44>)
 802582e:	1b64      	subs	r4, r4, r5
 8025830:	10a4      	asrs	r4, r4, #2
 8025832:	42a6      	cmp	r6, r4
 8025834:	d105      	bne.n	8025842 <__libc_init_array+0x2e>
 8025836:	bd70      	pop	{r4, r5, r6, pc}
 8025838:	00b3      	lsls	r3, r6, #2
 802583a:	58eb      	ldr	r3, [r5, r3]
 802583c:	4798      	blx	r3
 802583e:	3601      	adds	r6, #1
 8025840:	e7ee      	b.n	8025820 <__libc_init_array+0xc>
 8025842:	00b3      	lsls	r3, r6, #2
 8025844:	58eb      	ldr	r3, [r5, r3]
 8025846:	4798      	blx	r3
 8025848:	3601      	adds	r6, #1
 802584a:	e7f2      	b.n	8025832 <__libc_init_array+0x1e>
 802584c:	0802e518 	.word	0x0802e518
 8025850:	0802e518 	.word	0x0802e518
 8025854:	0802e51c 	.word	0x0802e51c
 8025858:	0802e518 	.word	0x0802e518

0802585c <__retarget_lock_init_recursive>:
 802585c:	4770      	bx	lr

0802585e <__retarget_lock_acquire_recursive>:
 802585e:	4770      	bx	lr

08025860 <__retarget_lock_release_recursive>:
 8025860:	4770      	bx	lr

08025862 <memchr>:
 8025862:	b2c9      	uxtb	r1, r1
 8025864:	1882      	adds	r2, r0, r2
 8025866:	4290      	cmp	r0, r2
 8025868:	d101      	bne.n	802586e <memchr+0xc>
 802586a:	2000      	movs	r0, #0
 802586c:	4770      	bx	lr
 802586e:	7803      	ldrb	r3, [r0, #0]
 8025870:	428b      	cmp	r3, r1
 8025872:	d0fb      	beq.n	802586c <memchr+0xa>
 8025874:	3001      	adds	r0, #1
 8025876:	e7f6      	b.n	8025866 <memchr+0x4>

08025878 <memcpy>:
 8025878:	2300      	movs	r3, #0
 802587a:	b510      	push	{r4, lr}
 802587c:	429a      	cmp	r2, r3
 802587e:	d100      	bne.n	8025882 <memcpy+0xa>
 8025880:	bd10      	pop	{r4, pc}
 8025882:	5ccc      	ldrb	r4, [r1, r3]
 8025884:	54c4      	strb	r4, [r0, r3]
 8025886:	3301      	adds	r3, #1
 8025888:	e7f8      	b.n	802587c <memcpy+0x4>
	...

0802588c <nan>:
 802588c:	2000      	movs	r0, #0
 802588e:	4901      	ldr	r1, [pc, #4]	@ (8025894 <nan+0x8>)
 8025890:	4770      	bx	lr
 8025892:	46c0      	nop			@ (mov r8, r8)
 8025894:	7ff80000 	.word	0x7ff80000

08025898 <quorem>:
 8025898:	b5f0      	push	{r4, r5, r6, r7, lr}
 802589a:	6903      	ldr	r3, [r0, #16]
 802589c:	690c      	ldr	r4, [r1, #16]
 802589e:	b089      	sub	sp, #36	@ 0x24
 80258a0:	9003      	str	r0, [sp, #12]
 80258a2:	9106      	str	r1, [sp, #24]
 80258a4:	2000      	movs	r0, #0
 80258a6:	42a3      	cmp	r3, r4
 80258a8:	db63      	blt.n	8025972 <quorem+0xda>
 80258aa:	000b      	movs	r3, r1
 80258ac:	3c01      	subs	r4, #1
 80258ae:	3314      	adds	r3, #20
 80258b0:	00a5      	lsls	r5, r4, #2
 80258b2:	9304      	str	r3, [sp, #16]
 80258b4:	195b      	adds	r3, r3, r5
 80258b6:	9305      	str	r3, [sp, #20]
 80258b8:	9b03      	ldr	r3, [sp, #12]
 80258ba:	3314      	adds	r3, #20
 80258bc:	9301      	str	r3, [sp, #4]
 80258be:	195d      	adds	r5, r3, r5
 80258c0:	9b05      	ldr	r3, [sp, #20]
 80258c2:	682f      	ldr	r7, [r5, #0]
 80258c4:	681e      	ldr	r6, [r3, #0]
 80258c6:	0038      	movs	r0, r7
 80258c8:	3601      	adds	r6, #1
 80258ca:	0031      	movs	r1, r6
 80258cc:	f7da fc6a 	bl	80001a4 <__udivsi3>
 80258d0:	9002      	str	r0, [sp, #8]
 80258d2:	42b7      	cmp	r7, r6
 80258d4:	d327      	bcc.n	8025926 <quorem+0x8e>
 80258d6:	9b04      	ldr	r3, [sp, #16]
 80258d8:	2700      	movs	r7, #0
 80258da:	469c      	mov	ip, r3
 80258dc:	9e01      	ldr	r6, [sp, #4]
 80258de:	9707      	str	r7, [sp, #28]
 80258e0:	4662      	mov	r2, ip
 80258e2:	ca08      	ldmia	r2!, {r3}
 80258e4:	6830      	ldr	r0, [r6, #0]
 80258e6:	4694      	mov	ip, r2
 80258e8:	9a02      	ldr	r2, [sp, #8]
 80258ea:	b299      	uxth	r1, r3
 80258ec:	4351      	muls	r1, r2
 80258ee:	0c1b      	lsrs	r3, r3, #16
 80258f0:	4353      	muls	r3, r2
 80258f2:	19c9      	adds	r1, r1, r7
 80258f4:	0c0a      	lsrs	r2, r1, #16
 80258f6:	189b      	adds	r3, r3, r2
 80258f8:	b289      	uxth	r1, r1
 80258fa:	b282      	uxth	r2, r0
 80258fc:	1a52      	subs	r2, r2, r1
 80258fe:	9907      	ldr	r1, [sp, #28]
 8025900:	0c1f      	lsrs	r7, r3, #16
 8025902:	1852      	adds	r2, r2, r1
 8025904:	0c00      	lsrs	r0, r0, #16
 8025906:	b29b      	uxth	r3, r3
 8025908:	1411      	asrs	r1, r2, #16
 802590a:	1ac3      	subs	r3, r0, r3
 802590c:	185b      	adds	r3, r3, r1
 802590e:	1419      	asrs	r1, r3, #16
 8025910:	b292      	uxth	r2, r2
 8025912:	041b      	lsls	r3, r3, #16
 8025914:	431a      	orrs	r2, r3
 8025916:	9b05      	ldr	r3, [sp, #20]
 8025918:	9107      	str	r1, [sp, #28]
 802591a:	c604      	stmia	r6!, {r2}
 802591c:	4563      	cmp	r3, ip
 802591e:	d2df      	bcs.n	80258e0 <quorem+0x48>
 8025920:	682b      	ldr	r3, [r5, #0]
 8025922:	2b00      	cmp	r3, #0
 8025924:	d02b      	beq.n	802597e <quorem+0xe6>
 8025926:	9906      	ldr	r1, [sp, #24]
 8025928:	9803      	ldr	r0, [sp, #12]
 802592a:	f001 fd6f 	bl	802740c <__mcmp>
 802592e:	2800      	cmp	r0, #0
 8025930:	db1e      	blt.n	8025970 <quorem+0xd8>
 8025932:	2600      	movs	r6, #0
 8025934:	9d01      	ldr	r5, [sp, #4]
 8025936:	9904      	ldr	r1, [sp, #16]
 8025938:	c901      	ldmia	r1!, {r0}
 802593a:	682b      	ldr	r3, [r5, #0]
 802593c:	b287      	uxth	r7, r0
 802593e:	b29a      	uxth	r2, r3
 8025940:	1bd2      	subs	r2, r2, r7
 8025942:	1992      	adds	r2, r2, r6
 8025944:	0c00      	lsrs	r0, r0, #16
 8025946:	0c1b      	lsrs	r3, r3, #16
 8025948:	1a1b      	subs	r3, r3, r0
 802594a:	1410      	asrs	r0, r2, #16
 802594c:	181b      	adds	r3, r3, r0
 802594e:	141e      	asrs	r6, r3, #16
 8025950:	b292      	uxth	r2, r2
 8025952:	041b      	lsls	r3, r3, #16
 8025954:	431a      	orrs	r2, r3
 8025956:	9b05      	ldr	r3, [sp, #20]
 8025958:	c504      	stmia	r5!, {r2}
 802595a:	428b      	cmp	r3, r1
 802595c:	d2ec      	bcs.n	8025938 <quorem+0xa0>
 802595e:	9a01      	ldr	r2, [sp, #4]
 8025960:	00a3      	lsls	r3, r4, #2
 8025962:	18d3      	adds	r3, r2, r3
 8025964:	681a      	ldr	r2, [r3, #0]
 8025966:	2a00      	cmp	r2, #0
 8025968:	d014      	beq.n	8025994 <quorem+0xfc>
 802596a:	9b02      	ldr	r3, [sp, #8]
 802596c:	3301      	adds	r3, #1
 802596e:	9302      	str	r3, [sp, #8]
 8025970:	9802      	ldr	r0, [sp, #8]
 8025972:	b009      	add	sp, #36	@ 0x24
 8025974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025976:	682b      	ldr	r3, [r5, #0]
 8025978:	2b00      	cmp	r3, #0
 802597a:	d104      	bne.n	8025986 <quorem+0xee>
 802597c:	3c01      	subs	r4, #1
 802597e:	9b01      	ldr	r3, [sp, #4]
 8025980:	3d04      	subs	r5, #4
 8025982:	42ab      	cmp	r3, r5
 8025984:	d3f7      	bcc.n	8025976 <quorem+0xde>
 8025986:	9b03      	ldr	r3, [sp, #12]
 8025988:	611c      	str	r4, [r3, #16]
 802598a:	e7cc      	b.n	8025926 <quorem+0x8e>
 802598c:	681a      	ldr	r2, [r3, #0]
 802598e:	2a00      	cmp	r2, #0
 8025990:	d104      	bne.n	802599c <quorem+0x104>
 8025992:	3c01      	subs	r4, #1
 8025994:	9a01      	ldr	r2, [sp, #4]
 8025996:	3b04      	subs	r3, #4
 8025998:	429a      	cmp	r2, r3
 802599a:	d3f7      	bcc.n	802598c <quorem+0xf4>
 802599c:	9b03      	ldr	r3, [sp, #12]
 802599e:	611c      	str	r4, [r3, #16]
 80259a0:	e7e3      	b.n	802596a <quorem+0xd2>
	...

080259a4 <_dtoa_r>:
 80259a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80259a6:	0014      	movs	r4, r2
 80259a8:	001d      	movs	r5, r3
 80259aa:	69c6      	ldr	r6, [r0, #28]
 80259ac:	b09d      	sub	sp, #116	@ 0x74
 80259ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80259b0:	950b      	str	r5, [sp, #44]	@ 0x2c
 80259b2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80259b4:	9003      	str	r0, [sp, #12]
 80259b6:	2e00      	cmp	r6, #0
 80259b8:	d10f      	bne.n	80259da <_dtoa_r+0x36>
 80259ba:	2010      	movs	r0, #16
 80259bc:	f001 f986 	bl	8026ccc <malloc>
 80259c0:	9b03      	ldr	r3, [sp, #12]
 80259c2:	1e02      	subs	r2, r0, #0
 80259c4:	61d8      	str	r0, [r3, #28]
 80259c6:	d104      	bne.n	80259d2 <_dtoa_r+0x2e>
 80259c8:	21ef      	movs	r1, #239	@ 0xef
 80259ca:	4bc7      	ldr	r3, [pc, #796]	@ (8025ce8 <_dtoa_r+0x344>)
 80259cc:	48c7      	ldr	r0, [pc, #796]	@ (8025cec <_dtoa_r+0x348>)
 80259ce:	f002 fb23 	bl	8028018 <__assert_func>
 80259d2:	6046      	str	r6, [r0, #4]
 80259d4:	6086      	str	r6, [r0, #8]
 80259d6:	6006      	str	r6, [r0, #0]
 80259d8:	60c6      	str	r6, [r0, #12]
 80259da:	9b03      	ldr	r3, [sp, #12]
 80259dc:	69db      	ldr	r3, [r3, #28]
 80259de:	6819      	ldr	r1, [r3, #0]
 80259e0:	2900      	cmp	r1, #0
 80259e2:	d00b      	beq.n	80259fc <_dtoa_r+0x58>
 80259e4:	685a      	ldr	r2, [r3, #4]
 80259e6:	2301      	movs	r3, #1
 80259e8:	4093      	lsls	r3, r2
 80259ea:	604a      	str	r2, [r1, #4]
 80259ec:	608b      	str	r3, [r1, #8]
 80259ee:	9803      	ldr	r0, [sp, #12]
 80259f0:	f001 fa7e 	bl	8026ef0 <_Bfree>
 80259f4:	2200      	movs	r2, #0
 80259f6:	9b03      	ldr	r3, [sp, #12]
 80259f8:	69db      	ldr	r3, [r3, #28]
 80259fa:	601a      	str	r2, [r3, #0]
 80259fc:	2d00      	cmp	r5, #0
 80259fe:	da1e      	bge.n	8025a3e <_dtoa_r+0x9a>
 8025a00:	2301      	movs	r3, #1
 8025a02:	603b      	str	r3, [r7, #0]
 8025a04:	006b      	lsls	r3, r5, #1
 8025a06:	085b      	lsrs	r3, r3, #1
 8025a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a0a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025a0c:	4bb8      	ldr	r3, [pc, #736]	@ (8025cf0 <_dtoa_r+0x34c>)
 8025a0e:	4ab8      	ldr	r2, [pc, #736]	@ (8025cf0 <_dtoa_r+0x34c>)
 8025a10:	403b      	ands	r3, r7
 8025a12:	4293      	cmp	r3, r2
 8025a14:	d116      	bne.n	8025a44 <_dtoa_r+0xa0>
 8025a16:	4bb7      	ldr	r3, [pc, #732]	@ (8025cf4 <_dtoa_r+0x350>)
 8025a18:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025a1a:	6013      	str	r3, [r2, #0]
 8025a1c:	033b      	lsls	r3, r7, #12
 8025a1e:	0b1b      	lsrs	r3, r3, #12
 8025a20:	4323      	orrs	r3, r4
 8025a22:	d101      	bne.n	8025a28 <_dtoa_r+0x84>
 8025a24:	f000 fd80 	bl	8026528 <_dtoa_r+0xb84>
 8025a28:	4bb3      	ldr	r3, [pc, #716]	@ (8025cf8 <_dtoa_r+0x354>)
 8025a2a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025a2c:	9308      	str	r3, [sp, #32]
 8025a2e:	2a00      	cmp	r2, #0
 8025a30:	d002      	beq.n	8025a38 <_dtoa_r+0x94>
 8025a32:	4bb2      	ldr	r3, [pc, #712]	@ (8025cfc <_dtoa_r+0x358>)
 8025a34:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025a36:	6013      	str	r3, [r2, #0]
 8025a38:	9808      	ldr	r0, [sp, #32]
 8025a3a:	b01d      	add	sp, #116	@ 0x74
 8025a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a3e:	2300      	movs	r3, #0
 8025a40:	603b      	str	r3, [r7, #0]
 8025a42:	e7e2      	b.n	8025a0a <_dtoa_r+0x66>
 8025a44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025a48:	9212      	str	r2, [sp, #72]	@ 0x48
 8025a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8025a4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025a4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025a50:	2200      	movs	r2, #0
 8025a52:	2300      	movs	r3, #0
 8025a54:	f7da fd2c 	bl	80004b0 <__aeabi_dcmpeq>
 8025a58:	1e06      	subs	r6, r0, #0
 8025a5a:	d00b      	beq.n	8025a74 <_dtoa_r+0xd0>
 8025a5c:	2301      	movs	r3, #1
 8025a5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8025a60:	6013      	str	r3, [r2, #0]
 8025a62:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8025a64:	2b00      	cmp	r3, #0
 8025a66:	d002      	beq.n	8025a6e <_dtoa_r+0xca>
 8025a68:	4ba5      	ldr	r3, [pc, #660]	@ (8025d00 <_dtoa_r+0x35c>)
 8025a6a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025a6c:	6013      	str	r3, [r2, #0]
 8025a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8025d04 <_dtoa_r+0x360>)
 8025a70:	9308      	str	r3, [sp, #32]
 8025a72:	e7e1      	b.n	8025a38 <_dtoa_r+0x94>
 8025a74:	ab1a      	add	r3, sp, #104	@ 0x68
 8025a76:	9301      	str	r3, [sp, #4]
 8025a78:	ab1b      	add	r3, sp, #108	@ 0x6c
 8025a7a:	9300      	str	r3, [sp, #0]
 8025a7c:	9803      	ldr	r0, [sp, #12]
 8025a7e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a82:	f001 fde5 	bl	8027650 <__d2b>
 8025a86:	007a      	lsls	r2, r7, #1
 8025a88:	9005      	str	r0, [sp, #20]
 8025a8a:	0d52      	lsrs	r2, r2, #21
 8025a8c:	d100      	bne.n	8025a90 <_dtoa_r+0xec>
 8025a8e:	e07b      	b.n	8025b88 <_dtoa_r+0x1e4>
 8025a90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025a92:	9618      	str	r6, [sp, #96]	@ 0x60
 8025a94:	0319      	lsls	r1, r3, #12
 8025a96:	4b9c      	ldr	r3, [pc, #624]	@ (8025d08 <_dtoa_r+0x364>)
 8025a98:	0b09      	lsrs	r1, r1, #12
 8025a9a:	430b      	orrs	r3, r1
 8025a9c:	499b      	ldr	r1, [pc, #620]	@ (8025d0c <_dtoa_r+0x368>)
 8025a9e:	1857      	adds	r7, r2, r1
 8025aa0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025aa2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025aa4:	0019      	movs	r1, r3
 8025aa6:	2200      	movs	r2, #0
 8025aa8:	4b99      	ldr	r3, [pc, #612]	@ (8025d10 <_dtoa_r+0x36c>)
 8025aaa:	f7dd fa39 	bl	8002f20 <__aeabi_dsub>
 8025aae:	4a99      	ldr	r2, [pc, #612]	@ (8025d14 <_dtoa_r+0x370>)
 8025ab0:	4b99      	ldr	r3, [pc, #612]	@ (8025d18 <_dtoa_r+0x374>)
 8025ab2:	f7dc ff4f 	bl	8002954 <__aeabi_dmul>
 8025ab6:	4a99      	ldr	r2, [pc, #612]	@ (8025d1c <_dtoa_r+0x378>)
 8025ab8:	4b99      	ldr	r3, [pc, #612]	@ (8025d20 <_dtoa_r+0x37c>)
 8025aba:	f7db ff4b 	bl	8001954 <__aeabi_dadd>
 8025abe:	0004      	movs	r4, r0
 8025ac0:	0038      	movs	r0, r7
 8025ac2:	000d      	movs	r5, r1
 8025ac4:	f7dd fe94 	bl	80037f0 <__aeabi_i2d>
 8025ac8:	4a96      	ldr	r2, [pc, #600]	@ (8025d24 <_dtoa_r+0x380>)
 8025aca:	4b97      	ldr	r3, [pc, #604]	@ (8025d28 <_dtoa_r+0x384>)
 8025acc:	f7dc ff42 	bl	8002954 <__aeabi_dmul>
 8025ad0:	0002      	movs	r2, r0
 8025ad2:	000b      	movs	r3, r1
 8025ad4:	0020      	movs	r0, r4
 8025ad6:	0029      	movs	r1, r5
 8025ad8:	f7db ff3c 	bl	8001954 <__aeabi_dadd>
 8025adc:	0004      	movs	r4, r0
 8025ade:	000d      	movs	r5, r1
 8025ae0:	f7dd fe4a 	bl	8003778 <__aeabi_d2iz>
 8025ae4:	2200      	movs	r2, #0
 8025ae6:	9004      	str	r0, [sp, #16]
 8025ae8:	2300      	movs	r3, #0
 8025aea:	0020      	movs	r0, r4
 8025aec:	0029      	movs	r1, r5
 8025aee:	f7da fce5 	bl	80004bc <__aeabi_dcmplt>
 8025af2:	2800      	cmp	r0, #0
 8025af4:	d00b      	beq.n	8025b0e <_dtoa_r+0x16a>
 8025af6:	9804      	ldr	r0, [sp, #16]
 8025af8:	f7dd fe7a 	bl	80037f0 <__aeabi_i2d>
 8025afc:	002b      	movs	r3, r5
 8025afe:	0022      	movs	r2, r4
 8025b00:	f7da fcd6 	bl	80004b0 <__aeabi_dcmpeq>
 8025b04:	4243      	negs	r3, r0
 8025b06:	4158      	adcs	r0, r3
 8025b08:	9b04      	ldr	r3, [sp, #16]
 8025b0a:	1a1b      	subs	r3, r3, r0
 8025b0c:	9304      	str	r3, [sp, #16]
 8025b0e:	2301      	movs	r3, #1
 8025b10:	9315      	str	r3, [sp, #84]	@ 0x54
 8025b12:	9b04      	ldr	r3, [sp, #16]
 8025b14:	2b16      	cmp	r3, #22
 8025b16:	d810      	bhi.n	8025b3a <_dtoa_r+0x196>
 8025b18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025b1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025b1c:	9a04      	ldr	r2, [sp, #16]
 8025b1e:	4b83      	ldr	r3, [pc, #524]	@ (8025d2c <_dtoa_r+0x388>)
 8025b20:	00d2      	lsls	r2, r2, #3
 8025b22:	189b      	adds	r3, r3, r2
 8025b24:	681a      	ldr	r2, [r3, #0]
 8025b26:	685b      	ldr	r3, [r3, #4]
 8025b28:	f7da fcc8 	bl	80004bc <__aeabi_dcmplt>
 8025b2c:	2800      	cmp	r0, #0
 8025b2e:	d047      	beq.n	8025bc0 <_dtoa_r+0x21c>
 8025b30:	9b04      	ldr	r3, [sp, #16]
 8025b32:	3b01      	subs	r3, #1
 8025b34:	9304      	str	r3, [sp, #16]
 8025b36:	2300      	movs	r3, #0
 8025b38:	9315      	str	r3, [sp, #84]	@ 0x54
 8025b3a:	2200      	movs	r2, #0
 8025b3c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025b3e:	9206      	str	r2, [sp, #24]
 8025b40:	1bdb      	subs	r3, r3, r7
 8025b42:	1e5a      	subs	r2, r3, #1
 8025b44:	d53e      	bpl.n	8025bc4 <_dtoa_r+0x220>
 8025b46:	2201      	movs	r2, #1
 8025b48:	1ad3      	subs	r3, r2, r3
 8025b4a:	9306      	str	r3, [sp, #24]
 8025b4c:	2300      	movs	r3, #0
 8025b4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b50:	9b04      	ldr	r3, [sp, #16]
 8025b52:	2b00      	cmp	r3, #0
 8025b54:	db38      	blt.n	8025bc8 <_dtoa_r+0x224>
 8025b56:	9a04      	ldr	r2, [sp, #16]
 8025b58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025b5a:	4694      	mov	ip, r2
 8025b5c:	4463      	add	r3, ip
 8025b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8025b60:	2300      	movs	r3, #0
 8025b62:	9214      	str	r2, [sp, #80]	@ 0x50
 8025b64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025b66:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025b68:	2401      	movs	r4, #1
 8025b6a:	2b09      	cmp	r3, #9
 8025b6c:	d862      	bhi.n	8025c34 <_dtoa_r+0x290>
 8025b6e:	2b05      	cmp	r3, #5
 8025b70:	dd02      	ble.n	8025b78 <_dtoa_r+0x1d4>
 8025b72:	2400      	movs	r4, #0
 8025b74:	3b04      	subs	r3, #4
 8025b76:	9322      	str	r3, [sp, #136]	@ 0x88
 8025b78:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8025b7a:	1e98      	subs	r0, r3, #2
 8025b7c:	2803      	cmp	r0, #3
 8025b7e:	d863      	bhi.n	8025c48 <_dtoa_r+0x2a4>
 8025b80:	f7da fafc 	bl	800017c <__gnu_thumb1_case_uqi>
 8025b84:	2b385654 	.word	0x2b385654
 8025b88:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025b8a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8025b8c:	18f6      	adds	r6, r6, r3
 8025b8e:	4b68      	ldr	r3, [pc, #416]	@ (8025d30 <_dtoa_r+0x38c>)
 8025b90:	18f2      	adds	r2, r6, r3
 8025b92:	2a20      	cmp	r2, #32
 8025b94:	dd0f      	ble.n	8025bb6 <_dtoa_r+0x212>
 8025b96:	2340      	movs	r3, #64	@ 0x40
 8025b98:	1a9b      	subs	r3, r3, r2
 8025b9a:	409f      	lsls	r7, r3
 8025b9c:	4b65      	ldr	r3, [pc, #404]	@ (8025d34 <_dtoa_r+0x390>)
 8025b9e:	0038      	movs	r0, r7
 8025ba0:	18f3      	adds	r3, r6, r3
 8025ba2:	40dc      	lsrs	r4, r3
 8025ba4:	4320      	orrs	r0, r4
 8025ba6:	f7dd fe51 	bl	800384c <__aeabi_ui2d>
 8025baa:	2201      	movs	r2, #1
 8025bac:	4b62      	ldr	r3, [pc, #392]	@ (8025d38 <_dtoa_r+0x394>)
 8025bae:	1e77      	subs	r7, r6, #1
 8025bb0:	18cb      	adds	r3, r1, r3
 8025bb2:	9218      	str	r2, [sp, #96]	@ 0x60
 8025bb4:	e776      	b.n	8025aa4 <_dtoa_r+0x100>
 8025bb6:	2320      	movs	r3, #32
 8025bb8:	0020      	movs	r0, r4
 8025bba:	1a9b      	subs	r3, r3, r2
 8025bbc:	4098      	lsls	r0, r3
 8025bbe:	e7f2      	b.n	8025ba6 <_dtoa_r+0x202>
 8025bc0:	9015      	str	r0, [sp, #84]	@ 0x54
 8025bc2:	e7ba      	b.n	8025b3a <_dtoa_r+0x196>
 8025bc4:	920d      	str	r2, [sp, #52]	@ 0x34
 8025bc6:	e7c3      	b.n	8025b50 <_dtoa_r+0x1ac>
 8025bc8:	9b06      	ldr	r3, [sp, #24]
 8025bca:	9a04      	ldr	r2, [sp, #16]
 8025bcc:	1a9b      	subs	r3, r3, r2
 8025bce:	9306      	str	r3, [sp, #24]
 8025bd0:	4253      	negs	r3, r2
 8025bd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025bd4:	2300      	movs	r3, #0
 8025bd6:	9314      	str	r3, [sp, #80]	@ 0x50
 8025bd8:	e7c5      	b.n	8025b66 <_dtoa_r+0x1c2>
 8025bda:	2301      	movs	r3, #1
 8025bdc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025bde:	9310      	str	r3, [sp, #64]	@ 0x40
 8025be0:	4694      	mov	ip, r2
 8025be2:	9b04      	ldr	r3, [sp, #16]
 8025be4:	4463      	add	r3, ip
 8025be6:	930e      	str	r3, [sp, #56]	@ 0x38
 8025be8:	3301      	adds	r3, #1
 8025bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	dc08      	bgt.n	8025c02 <_dtoa_r+0x25e>
 8025bf0:	2301      	movs	r3, #1
 8025bf2:	e006      	b.n	8025c02 <_dtoa_r+0x25e>
 8025bf4:	2301      	movs	r3, #1
 8025bf6:	9310      	str	r3, [sp, #64]	@ 0x40
 8025bf8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025bfa:	2b00      	cmp	r3, #0
 8025bfc:	dd28      	ble.n	8025c50 <_dtoa_r+0x2ac>
 8025bfe:	930e      	str	r3, [sp, #56]	@ 0x38
 8025c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c02:	9a03      	ldr	r2, [sp, #12]
 8025c04:	2100      	movs	r1, #0
 8025c06:	69d0      	ldr	r0, [r2, #28]
 8025c08:	2204      	movs	r2, #4
 8025c0a:	0015      	movs	r5, r2
 8025c0c:	3514      	adds	r5, #20
 8025c0e:	429d      	cmp	r5, r3
 8025c10:	d923      	bls.n	8025c5a <_dtoa_r+0x2b6>
 8025c12:	6041      	str	r1, [r0, #4]
 8025c14:	9803      	ldr	r0, [sp, #12]
 8025c16:	f001 f927 	bl	8026e68 <_Balloc>
 8025c1a:	9008      	str	r0, [sp, #32]
 8025c1c:	2800      	cmp	r0, #0
 8025c1e:	d11f      	bne.n	8025c60 <_dtoa_r+0x2bc>
 8025c20:	21b0      	movs	r1, #176	@ 0xb0
 8025c22:	4b46      	ldr	r3, [pc, #280]	@ (8025d3c <_dtoa_r+0x398>)
 8025c24:	4831      	ldr	r0, [pc, #196]	@ (8025cec <_dtoa_r+0x348>)
 8025c26:	9a08      	ldr	r2, [sp, #32]
 8025c28:	31ff      	adds	r1, #255	@ 0xff
 8025c2a:	e6d0      	b.n	80259ce <_dtoa_r+0x2a>
 8025c2c:	2300      	movs	r3, #0
 8025c2e:	e7e2      	b.n	8025bf6 <_dtoa_r+0x252>
 8025c30:	2300      	movs	r3, #0
 8025c32:	e7d3      	b.n	8025bdc <_dtoa_r+0x238>
 8025c34:	2300      	movs	r3, #0
 8025c36:	9410      	str	r4, [sp, #64]	@ 0x40
 8025c38:	9322      	str	r3, [sp, #136]	@ 0x88
 8025c3a:	3b01      	subs	r3, #1
 8025c3c:	2200      	movs	r2, #0
 8025c3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c42:	3313      	adds	r3, #19
 8025c44:	9223      	str	r2, [sp, #140]	@ 0x8c
 8025c46:	e7dc      	b.n	8025c02 <_dtoa_r+0x25e>
 8025c48:	2301      	movs	r3, #1
 8025c4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8025c4c:	3b02      	subs	r3, #2
 8025c4e:	e7f5      	b.n	8025c3c <_dtoa_r+0x298>
 8025c50:	2301      	movs	r3, #1
 8025c52:	001a      	movs	r2, r3
 8025c54:	930e      	str	r3, [sp, #56]	@ 0x38
 8025c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c58:	e7f4      	b.n	8025c44 <_dtoa_r+0x2a0>
 8025c5a:	3101      	adds	r1, #1
 8025c5c:	0052      	lsls	r2, r2, #1
 8025c5e:	e7d4      	b.n	8025c0a <_dtoa_r+0x266>
 8025c60:	9b03      	ldr	r3, [sp, #12]
 8025c62:	9a08      	ldr	r2, [sp, #32]
 8025c64:	69db      	ldr	r3, [r3, #28]
 8025c66:	601a      	str	r2, [r3, #0]
 8025c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c6a:	2b0e      	cmp	r3, #14
 8025c6c:	d900      	bls.n	8025c70 <_dtoa_r+0x2cc>
 8025c6e:	e0d6      	b.n	8025e1e <_dtoa_r+0x47a>
 8025c70:	2c00      	cmp	r4, #0
 8025c72:	d100      	bne.n	8025c76 <_dtoa_r+0x2d2>
 8025c74:	e0d3      	b.n	8025e1e <_dtoa_r+0x47a>
 8025c76:	9b04      	ldr	r3, [sp, #16]
 8025c78:	2b00      	cmp	r3, #0
 8025c7a:	dd63      	ble.n	8025d44 <_dtoa_r+0x3a0>
 8025c7c:	210f      	movs	r1, #15
 8025c7e:	9a04      	ldr	r2, [sp, #16]
 8025c80:	4b2a      	ldr	r3, [pc, #168]	@ (8025d2c <_dtoa_r+0x388>)
 8025c82:	400a      	ands	r2, r1
 8025c84:	00d2      	lsls	r2, r2, #3
 8025c86:	189b      	adds	r3, r3, r2
 8025c88:	681e      	ldr	r6, [r3, #0]
 8025c8a:	685f      	ldr	r7, [r3, #4]
 8025c8c:	9b04      	ldr	r3, [sp, #16]
 8025c8e:	2402      	movs	r4, #2
 8025c90:	111d      	asrs	r5, r3, #4
 8025c92:	05db      	lsls	r3, r3, #23
 8025c94:	d50a      	bpl.n	8025cac <_dtoa_r+0x308>
 8025c96:	4b2a      	ldr	r3, [pc, #168]	@ (8025d40 <_dtoa_r+0x39c>)
 8025c98:	400d      	ands	r5, r1
 8025c9a:	6a1a      	ldr	r2, [r3, #32]
 8025c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025c9e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025ca0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025ca2:	f7dc fa1d 	bl	80020e0 <__aeabi_ddiv>
 8025ca6:	900a      	str	r0, [sp, #40]	@ 0x28
 8025ca8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025caa:	3401      	adds	r4, #1
 8025cac:	4b24      	ldr	r3, [pc, #144]	@ (8025d40 <_dtoa_r+0x39c>)
 8025cae:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cb0:	2d00      	cmp	r5, #0
 8025cb2:	d108      	bne.n	8025cc6 <_dtoa_r+0x322>
 8025cb4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025cb6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025cb8:	0032      	movs	r2, r6
 8025cba:	003b      	movs	r3, r7
 8025cbc:	f7dc fa10 	bl	80020e0 <__aeabi_ddiv>
 8025cc0:	900a      	str	r0, [sp, #40]	@ 0x28
 8025cc2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025cc4:	e059      	b.n	8025d7a <_dtoa_r+0x3d6>
 8025cc6:	2301      	movs	r3, #1
 8025cc8:	421d      	tst	r5, r3
 8025cca:	d009      	beq.n	8025ce0 <_dtoa_r+0x33c>
 8025ccc:	18e4      	adds	r4, r4, r3
 8025cce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025cd0:	0030      	movs	r0, r6
 8025cd2:	681a      	ldr	r2, [r3, #0]
 8025cd4:	685b      	ldr	r3, [r3, #4]
 8025cd6:	0039      	movs	r1, r7
 8025cd8:	f7dc fe3c 	bl	8002954 <__aeabi_dmul>
 8025cdc:	0006      	movs	r6, r0
 8025cde:	000f      	movs	r7, r1
 8025ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ce2:	106d      	asrs	r5, r5, #1
 8025ce4:	3308      	adds	r3, #8
 8025ce6:	e7e2      	b.n	8025cae <_dtoa_r+0x30a>
 8025ce8:	0802e0d3 	.word	0x0802e0d3
 8025cec:	0802e0ea 	.word	0x0802e0ea
 8025cf0:	7ff00000 	.word	0x7ff00000
 8025cf4:	0000270f 	.word	0x0000270f
 8025cf8:	0802e0cf 	.word	0x0802e0cf
 8025cfc:	0802e0d2 	.word	0x0802e0d2
 8025d00:	0802e09b 	.word	0x0802e09b
 8025d04:	0802e09a 	.word	0x0802e09a
 8025d08:	3ff00000 	.word	0x3ff00000
 8025d0c:	fffffc01 	.word	0xfffffc01
 8025d10:	3ff80000 	.word	0x3ff80000
 8025d14:	636f4361 	.word	0x636f4361
 8025d18:	3fd287a7 	.word	0x3fd287a7
 8025d1c:	8b60c8b3 	.word	0x8b60c8b3
 8025d20:	3fc68a28 	.word	0x3fc68a28
 8025d24:	509f79fb 	.word	0x509f79fb
 8025d28:	3fd34413 	.word	0x3fd34413
 8025d2c:	0802e3e8 	.word	0x0802e3e8
 8025d30:	00000432 	.word	0x00000432
 8025d34:	00000412 	.word	0x00000412
 8025d38:	fe100000 	.word	0xfe100000
 8025d3c:	0802e142 	.word	0x0802e142
 8025d40:	0802e3c0 	.word	0x0802e3c0
 8025d44:	9b04      	ldr	r3, [sp, #16]
 8025d46:	2402      	movs	r4, #2
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	d016      	beq.n	8025d7a <_dtoa_r+0x3d6>
 8025d4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8025d4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025d50:	220f      	movs	r2, #15
 8025d52:	425d      	negs	r5, r3
 8025d54:	402a      	ands	r2, r5
 8025d56:	4bd5      	ldr	r3, [pc, #852]	@ (80260ac <_dtoa_r+0x708>)
 8025d58:	00d2      	lsls	r2, r2, #3
 8025d5a:	189b      	adds	r3, r3, r2
 8025d5c:	681a      	ldr	r2, [r3, #0]
 8025d5e:	685b      	ldr	r3, [r3, #4]
 8025d60:	f7dc fdf8 	bl	8002954 <__aeabi_dmul>
 8025d64:	2701      	movs	r7, #1
 8025d66:	2300      	movs	r3, #0
 8025d68:	900a      	str	r0, [sp, #40]	@ 0x28
 8025d6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025d6c:	4ed0      	ldr	r6, [pc, #832]	@ (80260b0 <_dtoa_r+0x70c>)
 8025d6e:	112d      	asrs	r5, r5, #4
 8025d70:	2d00      	cmp	r5, #0
 8025d72:	d000      	beq.n	8025d76 <_dtoa_r+0x3d2>
 8025d74:	e095      	b.n	8025ea2 <_dtoa_r+0x4fe>
 8025d76:	2b00      	cmp	r3, #0
 8025d78:	d1a2      	bne.n	8025cc0 <_dtoa_r+0x31c>
 8025d7a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8025d7c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d7e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025d80:	2b00      	cmp	r3, #0
 8025d82:	d100      	bne.n	8025d86 <_dtoa_r+0x3e2>
 8025d84:	e098      	b.n	8025eb8 <_dtoa_r+0x514>
 8025d86:	2200      	movs	r2, #0
 8025d88:	0030      	movs	r0, r6
 8025d8a:	0039      	movs	r1, r7
 8025d8c:	4bc9      	ldr	r3, [pc, #804]	@ (80260b4 <_dtoa_r+0x710>)
 8025d8e:	f7da fb95 	bl	80004bc <__aeabi_dcmplt>
 8025d92:	2800      	cmp	r0, #0
 8025d94:	d100      	bne.n	8025d98 <_dtoa_r+0x3f4>
 8025d96:	e08f      	b.n	8025eb8 <_dtoa_r+0x514>
 8025d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025d9a:	2b00      	cmp	r3, #0
 8025d9c:	d100      	bne.n	8025da0 <_dtoa_r+0x3fc>
 8025d9e:	e08b      	b.n	8025eb8 <_dtoa_r+0x514>
 8025da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025da2:	2b00      	cmp	r3, #0
 8025da4:	dd37      	ble.n	8025e16 <_dtoa_r+0x472>
 8025da6:	9b04      	ldr	r3, [sp, #16]
 8025da8:	2200      	movs	r2, #0
 8025daa:	3b01      	subs	r3, #1
 8025dac:	930c      	str	r3, [sp, #48]	@ 0x30
 8025dae:	0030      	movs	r0, r6
 8025db0:	4bc1      	ldr	r3, [pc, #772]	@ (80260b8 <_dtoa_r+0x714>)
 8025db2:	0039      	movs	r1, r7
 8025db4:	f7dc fdce 	bl	8002954 <__aeabi_dmul>
 8025db8:	900a      	str	r0, [sp, #40]	@ 0x28
 8025dba:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025dbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025dbe:	3401      	adds	r4, #1
 8025dc0:	0020      	movs	r0, r4
 8025dc2:	9311      	str	r3, [sp, #68]	@ 0x44
 8025dc4:	f7dd fd14 	bl	80037f0 <__aeabi_i2d>
 8025dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025dca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025dcc:	f7dc fdc2 	bl	8002954 <__aeabi_dmul>
 8025dd0:	4bba      	ldr	r3, [pc, #744]	@ (80260bc <_dtoa_r+0x718>)
 8025dd2:	2200      	movs	r2, #0
 8025dd4:	f7db fdbe 	bl	8001954 <__aeabi_dadd>
 8025dd8:	4bb9      	ldr	r3, [pc, #740]	@ (80260c0 <_dtoa_r+0x71c>)
 8025dda:	0006      	movs	r6, r0
 8025ddc:	18cf      	adds	r7, r1, r3
 8025dde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025de0:	2b00      	cmp	r3, #0
 8025de2:	d16d      	bne.n	8025ec0 <_dtoa_r+0x51c>
 8025de4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025de6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025de8:	2200      	movs	r2, #0
 8025dea:	4bb6      	ldr	r3, [pc, #728]	@ (80260c4 <_dtoa_r+0x720>)
 8025dec:	f7dd f898 	bl	8002f20 <__aeabi_dsub>
 8025df0:	0032      	movs	r2, r6
 8025df2:	003b      	movs	r3, r7
 8025df4:	0004      	movs	r4, r0
 8025df6:	000d      	movs	r5, r1
 8025df8:	f7da fb74 	bl	80004e4 <__aeabi_dcmpgt>
 8025dfc:	2800      	cmp	r0, #0
 8025dfe:	d000      	beq.n	8025e02 <_dtoa_r+0x45e>
 8025e00:	e2b6      	b.n	8026370 <_dtoa_r+0x9cc>
 8025e02:	2180      	movs	r1, #128	@ 0x80
 8025e04:	0609      	lsls	r1, r1, #24
 8025e06:	187b      	adds	r3, r7, r1
 8025e08:	0032      	movs	r2, r6
 8025e0a:	0020      	movs	r0, r4
 8025e0c:	0029      	movs	r1, r5
 8025e0e:	f7da fb55 	bl	80004bc <__aeabi_dcmplt>
 8025e12:	2800      	cmp	r0, #0
 8025e14:	d128      	bne.n	8025e68 <_dtoa_r+0x4c4>
 8025e16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025e18:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025e1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8025e1c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025e1e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025e20:	2b00      	cmp	r3, #0
 8025e22:	da00      	bge.n	8025e26 <_dtoa_r+0x482>
 8025e24:	e174      	b.n	8026110 <_dtoa_r+0x76c>
 8025e26:	9a04      	ldr	r2, [sp, #16]
 8025e28:	2a0e      	cmp	r2, #14
 8025e2a:	dd00      	ble.n	8025e2e <_dtoa_r+0x48a>
 8025e2c:	e170      	b.n	8026110 <_dtoa_r+0x76c>
 8025e2e:	4b9f      	ldr	r3, [pc, #636]	@ (80260ac <_dtoa_r+0x708>)
 8025e30:	00d2      	lsls	r2, r2, #3
 8025e32:	189b      	adds	r3, r3, r2
 8025e34:	685c      	ldr	r4, [r3, #4]
 8025e36:	681b      	ldr	r3, [r3, #0]
 8025e38:	9306      	str	r3, [sp, #24]
 8025e3a:	9407      	str	r4, [sp, #28]
 8025e3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025e3e:	2b00      	cmp	r3, #0
 8025e40:	db00      	blt.n	8025e44 <_dtoa_r+0x4a0>
 8025e42:	e0e7      	b.n	8026014 <_dtoa_r+0x670>
 8025e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025e46:	2b00      	cmp	r3, #0
 8025e48:	dd00      	ble.n	8025e4c <_dtoa_r+0x4a8>
 8025e4a:	e0e3      	b.n	8026014 <_dtoa_r+0x670>
 8025e4c:	d10c      	bne.n	8025e68 <_dtoa_r+0x4c4>
 8025e4e:	9806      	ldr	r0, [sp, #24]
 8025e50:	9907      	ldr	r1, [sp, #28]
 8025e52:	2200      	movs	r2, #0
 8025e54:	4b9b      	ldr	r3, [pc, #620]	@ (80260c4 <_dtoa_r+0x720>)
 8025e56:	f7dc fd7d 	bl	8002954 <__aeabi_dmul>
 8025e5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e5e:	f7da fb4b 	bl	80004f8 <__aeabi_dcmpge>
 8025e62:	2800      	cmp	r0, #0
 8025e64:	d100      	bne.n	8025e68 <_dtoa_r+0x4c4>
 8025e66:	e286      	b.n	8026376 <_dtoa_r+0x9d2>
 8025e68:	2600      	movs	r6, #0
 8025e6a:	0037      	movs	r7, r6
 8025e6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025e6e:	9c08      	ldr	r4, [sp, #32]
 8025e70:	43db      	mvns	r3, r3
 8025e72:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e74:	9704      	str	r7, [sp, #16]
 8025e76:	2700      	movs	r7, #0
 8025e78:	0031      	movs	r1, r6
 8025e7a:	9803      	ldr	r0, [sp, #12]
 8025e7c:	f001 f838 	bl	8026ef0 <_Bfree>
 8025e80:	9b04      	ldr	r3, [sp, #16]
 8025e82:	2b00      	cmp	r3, #0
 8025e84:	d100      	bne.n	8025e88 <_dtoa_r+0x4e4>
 8025e86:	e0bb      	b.n	8026000 <_dtoa_r+0x65c>
 8025e88:	2f00      	cmp	r7, #0
 8025e8a:	d005      	beq.n	8025e98 <_dtoa_r+0x4f4>
 8025e8c:	429f      	cmp	r7, r3
 8025e8e:	d003      	beq.n	8025e98 <_dtoa_r+0x4f4>
 8025e90:	0039      	movs	r1, r7
 8025e92:	9803      	ldr	r0, [sp, #12]
 8025e94:	f001 f82c 	bl	8026ef0 <_Bfree>
 8025e98:	9904      	ldr	r1, [sp, #16]
 8025e9a:	9803      	ldr	r0, [sp, #12]
 8025e9c:	f001 f828 	bl	8026ef0 <_Bfree>
 8025ea0:	e0ae      	b.n	8026000 <_dtoa_r+0x65c>
 8025ea2:	423d      	tst	r5, r7
 8025ea4:	d005      	beq.n	8025eb2 <_dtoa_r+0x50e>
 8025ea6:	6832      	ldr	r2, [r6, #0]
 8025ea8:	6873      	ldr	r3, [r6, #4]
 8025eaa:	f7dc fd53 	bl	8002954 <__aeabi_dmul>
 8025eae:	003b      	movs	r3, r7
 8025eb0:	3401      	adds	r4, #1
 8025eb2:	106d      	asrs	r5, r5, #1
 8025eb4:	3608      	adds	r6, #8
 8025eb6:	e75b      	b.n	8025d70 <_dtoa_r+0x3cc>
 8025eb8:	9b04      	ldr	r3, [sp, #16]
 8025eba:	930c      	str	r3, [sp, #48]	@ 0x30
 8025ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025ebe:	e77f      	b.n	8025dc0 <_dtoa_r+0x41c>
 8025ec0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80260ac <_dtoa_r+0x708>)
 8025ec4:	3a01      	subs	r2, #1
 8025ec6:	00d2      	lsls	r2, r2, #3
 8025ec8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8025eca:	189b      	adds	r3, r3, r2
 8025ecc:	681a      	ldr	r2, [r3, #0]
 8025ece:	685b      	ldr	r3, [r3, #4]
 8025ed0:	2900      	cmp	r1, #0
 8025ed2:	d04c      	beq.n	8025f6e <_dtoa_r+0x5ca>
 8025ed4:	2000      	movs	r0, #0
 8025ed6:	497c      	ldr	r1, [pc, #496]	@ (80260c8 <_dtoa_r+0x724>)
 8025ed8:	f7dc f902 	bl	80020e0 <__aeabi_ddiv>
 8025edc:	0032      	movs	r2, r6
 8025ede:	003b      	movs	r3, r7
 8025ee0:	f7dd f81e 	bl	8002f20 <__aeabi_dsub>
 8025ee4:	9a08      	ldr	r2, [sp, #32]
 8025ee6:	0006      	movs	r6, r0
 8025ee8:	4694      	mov	ip, r2
 8025eea:	000f      	movs	r7, r1
 8025eec:	9b08      	ldr	r3, [sp, #32]
 8025eee:	9316      	str	r3, [sp, #88]	@ 0x58
 8025ef0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025ef2:	4463      	add	r3, ip
 8025ef4:	9311      	str	r3, [sp, #68]	@ 0x44
 8025ef6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025efa:	f7dd fc3d 	bl	8003778 <__aeabi_d2iz>
 8025efe:	0005      	movs	r5, r0
 8025f00:	f7dd fc76 	bl	80037f0 <__aeabi_i2d>
 8025f04:	0002      	movs	r2, r0
 8025f06:	000b      	movs	r3, r1
 8025f08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f0c:	f7dd f808 	bl	8002f20 <__aeabi_dsub>
 8025f10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025f12:	3530      	adds	r5, #48	@ 0x30
 8025f14:	1c5c      	adds	r4, r3, #1
 8025f16:	701d      	strb	r5, [r3, #0]
 8025f18:	0032      	movs	r2, r6
 8025f1a:	003b      	movs	r3, r7
 8025f1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8025f1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f20:	f7da facc 	bl	80004bc <__aeabi_dcmplt>
 8025f24:	2800      	cmp	r0, #0
 8025f26:	d16b      	bne.n	8026000 <_dtoa_r+0x65c>
 8025f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025f2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f2c:	2000      	movs	r0, #0
 8025f2e:	4961      	ldr	r1, [pc, #388]	@ (80260b4 <_dtoa_r+0x710>)
 8025f30:	f7dc fff6 	bl	8002f20 <__aeabi_dsub>
 8025f34:	0032      	movs	r2, r6
 8025f36:	003b      	movs	r3, r7
 8025f38:	f7da fac0 	bl	80004bc <__aeabi_dcmplt>
 8025f3c:	2800      	cmp	r0, #0
 8025f3e:	d000      	beq.n	8025f42 <_dtoa_r+0x59e>
 8025f40:	e0c6      	b.n	80260d0 <_dtoa_r+0x72c>
 8025f42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025f44:	42a3      	cmp	r3, r4
 8025f46:	d100      	bne.n	8025f4a <_dtoa_r+0x5a6>
 8025f48:	e765      	b.n	8025e16 <_dtoa_r+0x472>
 8025f4a:	2200      	movs	r2, #0
 8025f4c:	0030      	movs	r0, r6
 8025f4e:	0039      	movs	r1, r7
 8025f50:	4b59      	ldr	r3, [pc, #356]	@ (80260b8 <_dtoa_r+0x714>)
 8025f52:	f7dc fcff 	bl	8002954 <__aeabi_dmul>
 8025f56:	2200      	movs	r2, #0
 8025f58:	0006      	movs	r6, r0
 8025f5a:	000f      	movs	r7, r1
 8025f5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f5e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f60:	4b55      	ldr	r3, [pc, #340]	@ (80260b8 <_dtoa_r+0x714>)
 8025f62:	f7dc fcf7 	bl	8002954 <__aeabi_dmul>
 8025f66:	9416      	str	r4, [sp, #88]	@ 0x58
 8025f68:	900a      	str	r0, [sp, #40]	@ 0x28
 8025f6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025f6c:	e7c3      	b.n	8025ef6 <_dtoa_r+0x552>
 8025f6e:	0030      	movs	r0, r6
 8025f70:	0039      	movs	r1, r7
 8025f72:	f7dc fcef 	bl	8002954 <__aeabi_dmul>
 8025f76:	9d08      	ldr	r5, [sp, #32]
 8025f78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025f7a:	002b      	movs	r3, r5
 8025f7c:	4694      	mov	ip, r2
 8025f7e:	9016      	str	r0, [sp, #88]	@ 0x58
 8025f80:	9117      	str	r1, [sp, #92]	@ 0x5c
 8025f82:	4463      	add	r3, ip
 8025f84:	9319      	str	r3, [sp, #100]	@ 0x64
 8025f86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f8a:	f7dd fbf5 	bl	8003778 <__aeabi_d2iz>
 8025f8e:	0004      	movs	r4, r0
 8025f90:	f7dd fc2e 	bl	80037f0 <__aeabi_i2d>
 8025f94:	000b      	movs	r3, r1
 8025f96:	0002      	movs	r2, r0
 8025f98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8025f9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025f9c:	f7dc ffc0 	bl	8002f20 <__aeabi_dsub>
 8025fa0:	3430      	adds	r4, #48	@ 0x30
 8025fa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025fa4:	702c      	strb	r4, [r5, #0]
 8025fa6:	3501      	adds	r5, #1
 8025fa8:	0006      	movs	r6, r0
 8025faa:	000f      	movs	r7, r1
 8025fac:	42ab      	cmp	r3, r5
 8025fae:	d12a      	bne.n	8026006 <_dtoa_r+0x662>
 8025fb0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8025fb2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025fb4:	9b08      	ldr	r3, [sp, #32]
 8025fb6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025fb8:	469c      	mov	ip, r3
 8025fba:	2200      	movs	r2, #0
 8025fbc:	4b42      	ldr	r3, [pc, #264]	@ (80260c8 <_dtoa_r+0x724>)
 8025fbe:	4464      	add	r4, ip
 8025fc0:	f7db fcc8 	bl	8001954 <__aeabi_dadd>
 8025fc4:	0002      	movs	r2, r0
 8025fc6:	000b      	movs	r3, r1
 8025fc8:	0030      	movs	r0, r6
 8025fca:	0039      	movs	r1, r7
 8025fcc:	f7da fa8a 	bl	80004e4 <__aeabi_dcmpgt>
 8025fd0:	2800      	cmp	r0, #0
 8025fd2:	d000      	beq.n	8025fd6 <_dtoa_r+0x632>
 8025fd4:	e07c      	b.n	80260d0 <_dtoa_r+0x72c>
 8025fd6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8025fd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8025fda:	2000      	movs	r0, #0
 8025fdc:	493a      	ldr	r1, [pc, #232]	@ (80260c8 <_dtoa_r+0x724>)
 8025fde:	f7dc ff9f 	bl	8002f20 <__aeabi_dsub>
 8025fe2:	0002      	movs	r2, r0
 8025fe4:	000b      	movs	r3, r1
 8025fe6:	0030      	movs	r0, r6
 8025fe8:	0039      	movs	r1, r7
 8025fea:	f7da fa67 	bl	80004bc <__aeabi_dcmplt>
 8025fee:	2800      	cmp	r0, #0
 8025ff0:	d100      	bne.n	8025ff4 <_dtoa_r+0x650>
 8025ff2:	e710      	b.n	8025e16 <_dtoa_r+0x472>
 8025ff4:	0023      	movs	r3, r4
 8025ff6:	3c01      	subs	r4, #1
 8025ff8:	7822      	ldrb	r2, [r4, #0]
 8025ffa:	2a30      	cmp	r2, #48	@ 0x30
 8025ffc:	d0fa      	beq.n	8025ff4 <_dtoa_r+0x650>
 8025ffe:	001c      	movs	r4, r3
 8026000:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026002:	9304      	str	r3, [sp, #16]
 8026004:	e042      	b.n	802608c <_dtoa_r+0x6e8>
 8026006:	2200      	movs	r2, #0
 8026008:	4b2b      	ldr	r3, [pc, #172]	@ (80260b8 <_dtoa_r+0x714>)
 802600a:	f7dc fca3 	bl	8002954 <__aeabi_dmul>
 802600e:	900a      	str	r0, [sp, #40]	@ 0x28
 8026010:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026012:	e7b8      	b.n	8025f86 <_dtoa_r+0x5e2>
 8026014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026016:	9d08      	ldr	r5, [sp, #32]
 8026018:	3b01      	subs	r3, #1
 802601a:	195b      	adds	r3, r3, r5
 802601c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 802601e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026020:	930a      	str	r3, [sp, #40]	@ 0x28
 8026022:	9a06      	ldr	r2, [sp, #24]
 8026024:	9b07      	ldr	r3, [sp, #28]
 8026026:	0030      	movs	r0, r6
 8026028:	0039      	movs	r1, r7
 802602a:	f7dc f859 	bl	80020e0 <__aeabi_ddiv>
 802602e:	f7dd fba3 	bl	8003778 <__aeabi_d2iz>
 8026032:	9009      	str	r0, [sp, #36]	@ 0x24
 8026034:	f7dd fbdc 	bl	80037f0 <__aeabi_i2d>
 8026038:	9a06      	ldr	r2, [sp, #24]
 802603a:	9b07      	ldr	r3, [sp, #28]
 802603c:	f7dc fc8a 	bl	8002954 <__aeabi_dmul>
 8026040:	0002      	movs	r2, r0
 8026042:	000b      	movs	r3, r1
 8026044:	0030      	movs	r0, r6
 8026046:	0039      	movs	r1, r7
 8026048:	f7dc ff6a 	bl	8002f20 <__aeabi_dsub>
 802604c:	002b      	movs	r3, r5
 802604e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026050:	3501      	adds	r5, #1
 8026052:	3230      	adds	r2, #48	@ 0x30
 8026054:	701a      	strb	r2, [r3, #0]
 8026056:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026058:	002c      	movs	r4, r5
 802605a:	429a      	cmp	r2, r3
 802605c:	d14b      	bne.n	80260f6 <_dtoa_r+0x752>
 802605e:	0002      	movs	r2, r0
 8026060:	000b      	movs	r3, r1
 8026062:	f7db fc77 	bl	8001954 <__aeabi_dadd>
 8026066:	9a06      	ldr	r2, [sp, #24]
 8026068:	9b07      	ldr	r3, [sp, #28]
 802606a:	0006      	movs	r6, r0
 802606c:	000f      	movs	r7, r1
 802606e:	f7da fa39 	bl	80004e4 <__aeabi_dcmpgt>
 8026072:	2800      	cmp	r0, #0
 8026074:	d12a      	bne.n	80260cc <_dtoa_r+0x728>
 8026076:	9a06      	ldr	r2, [sp, #24]
 8026078:	9b07      	ldr	r3, [sp, #28]
 802607a:	0030      	movs	r0, r6
 802607c:	0039      	movs	r1, r7
 802607e:	f7da fa17 	bl	80004b0 <__aeabi_dcmpeq>
 8026082:	2800      	cmp	r0, #0
 8026084:	d002      	beq.n	802608c <_dtoa_r+0x6e8>
 8026086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026088:	07dd      	lsls	r5, r3, #31
 802608a:	d41f      	bmi.n	80260cc <_dtoa_r+0x728>
 802608c:	9905      	ldr	r1, [sp, #20]
 802608e:	9803      	ldr	r0, [sp, #12]
 8026090:	f000 ff2e 	bl	8026ef0 <_Bfree>
 8026094:	2300      	movs	r3, #0
 8026096:	7023      	strb	r3, [r4, #0]
 8026098:	9b04      	ldr	r3, [sp, #16]
 802609a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 802609c:	3301      	adds	r3, #1
 802609e:	6013      	str	r3, [r2, #0]
 80260a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80260a2:	2b00      	cmp	r3, #0
 80260a4:	d100      	bne.n	80260a8 <_dtoa_r+0x704>
 80260a6:	e4c7      	b.n	8025a38 <_dtoa_r+0x94>
 80260a8:	601c      	str	r4, [r3, #0]
 80260aa:	e4c5      	b.n	8025a38 <_dtoa_r+0x94>
 80260ac:	0802e3e8 	.word	0x0802e3e8
 80260b0:	0802e3c0 	.word	0x0802e3c0
 80260b4:	3ff00000 	.word	0x3ff00000
 80260b8:	40240000 	.word	0x40240000
 80260bc:	401c0000 	.word	0x401c0000
 80260c0:	fcc00000 	.word	0xfcc00000
 80260c4:	40140000 	.word	0x40140000
 80260c8:	3fe00000 	.word	0x3fe00000
 80260cc:	9b04      	ldr	r3, [sp, #16]
 80260ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80260d0:	0023      	movs	r3, r4
 80260d2:	001c      	movs	r4, r3
 80260d4:	3b01      	subs	r3, #1
 80260d6:	781a      	ldrb	r2, [r3, #0]
 80260d8:	2a39      	cmp	r2, #57	@ 0x39
 80260da:	d108      	bne.n	80260ee <_dtoa_r+0x74a>
 80260dc:	9a08      	ldr	r2, [sp, #32]
 80260de:	429a      	cmp	r2, r3
 80260e0:	d1f7      	bne.n	80260d2 <_dtoa_r+0x72e>
 80260e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80260e4:	9908      	ldr	r1, [sp, #32]
 80260e6:	3201      	adds	r2, #1
 80260e8:	920c      	str	r2, [sp, #48]	@ 0x30
 80260ea:	2230      	movs	r2, #48	@ 0x30
 80260ec:	700a      	strb	r2, [r1, #0]
 80260ee:	781a      	ldrb	r2, [r3, #0]
 80260f0:	3201      	adds	r2, #1
 80260f2:	701a      	strb	r2, [r3, #0]
 80260f4:	e784      	b.n	8026000 <_dtoa_r+0x65c>
 80260f6:	2200      	movs	r2, #0
 80260f8:	4bc6      	ldr	r3, [pc, #792]	@ (8026414 <_dtoa_r+0xa70>)
 80260fa:	f7dc fc2b 	bl	8002954 <__aeabi_dmul>
 80260fe:	2200      	movs	r2, #0
 8026100:	2300      	movs	r3, #0
 8026102:	0006      	movs	r6, r0
 8026104:	000f      	movs	r7, r1
 8026106:	f7da f9d3 	bl	80004b0 <__aeabi_dcmpeq>
 802610a:	2800      	cmp	r0, #0
 802610c:	d089      	beq.n	8026022 <_dtoa_r+0x67e>
 802610e:	e7bd      	b.n	802608c <_dtoa_r+0x6e8>
 8026110:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8026112:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8026114:	9c06      	ldr	r4, [sp, #24]
 8026116:	2f00      	cmp	r7, #0
 8026118:	d014      	beq.n	8026144 <_dtoa_r+0x7a0>
 802611a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802611c:	2a01      	cmp	r2, #1
 802611e:	dd00      	ble.n	8026122 <_dtoa_r+0x77e>
 8026120:	e0e4      	b.n	80262ec <_dtoa_r+0x948>
 8026122:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8026124:	2a00      	cmp	r2, #0
 8026126:	d100      	bne.n	802612a <_dtoa_r+0x786>
 8026128:	e0da      	b.n	80262e0 <_dtoa_r+0x93c>
 802612a:	4abb      	ldr	r2, [pc, #748]	@ (8026418 <_dtoa_r+0xa74>)
 802612c:	189b      	adds	r3, r3, r2
 802612e:	9a06      	ldr	r2, [sp, #24]
 8026130:	2101      	movs	r1, #1
 8026132:	18d2      	adds	r2, r2, r3
 8026134:	9206      	str	r2, [sp, #24]
 8026136:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026138:	9803      	ldr	r0, [sp, #12]
 802613a:	18d3      	adds	r3, r2, r3
 802613c:	930d      	str	r3, [sp, #52]	@ 0x34
 802613e:	f000 ffdb 	bl	80270f8 <__i2b>
 8026142:	0007      	movs	r7, r0
 8026144:	2c00      	cmp	r4, #0
 8026146:	d00e      	beq.n	8026166 <_dtoa_r+0x7c2>
 8026148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802614a:	2b00      	cmp	r3, #0
 802614c:	dd0b      	ble.n	8026166 <_dtoa_r+0x7c2>
 802614e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026150:	0023      	movs	r3, r4
 8026152:	4294      	cmp	r4, r2
 8026154:	dd00      	ble.n	8026158 <_dtoa_r+0x7b4>
 8026156:	0013      	movs	r3, r2
 8026158:	9a06      	ldr	r2, [sp, #24]
 802615a:	1ae4      	subs	r4, r4, r3
 802615c:	1ad2      	subs	r2, r2, r3
 802615e:	9206      	str	r2, [sp, #24]
 8026160:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026162:	1ad3      	subs	r3, r2, r3
 8026164:	930d      	str	r3, [sp, #52]	@ 0x34
 8026166:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026168:	2b00      	cmp	r3, #0
 802616a:	d021      	beq.n	80261b0 <_dtoa_r+0x80c>
 802616c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802616e:	2b00      	cmp	r3, #0
 8026170:	d100      	bne.n	8026174 <_dtoa_r+0x7d0>
 8026172:	e0d3      	b.n	802631c <_dtoa_r+0x978>
 8026174:	9e05      	ldr	r6, [sp, #20]
 8026176:	2d00      	cmp	r5, #0
 8026178:	d014      	beq.n	80261a4 <_dtoa_r+0x800>
 802617a:	0039      	movs	r1, r7
 802617c:	002a      	movs	r2, r5
 802617e:	9803      	ldr	r0, [sp, #12]
 8026180:	f001 f87c 	bl	802727c <__pow5mult>
 8026184:	9a05      	ldr	r2, [sp, #20]
 8026186:	0001      	movs	r1, r0
 8026188:	0007      	movs	r7, r0
 802618a:	9803      	ldr	r0, [sp, #12]
 802618c:	f000 ffcc 	bl	8027128 <__multiply>
 8026190:	0006      	movs	r6, r0
 8026192:	9905      	ldr	r1, [sp, #20]
 8026194:	9803      	ldr	r0, [sp, #12]
 8026196:	f000 feab 	bl	8026ef0 <_Bfree>
 802619a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802619c:	9605      	str	r6, [sp, #20]
 802619e:	1b5b      	subs	r3, r3, r5
 80261a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80261a2:	d005      	beq.n	80261b0 <_dtoa_r+0x80c>
 80261a4:	0031      	movs	r1, r6
 80261a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80261a8:	9803      	ldr	r0, [sp, #12]
 80261aa:	f001 f867 	bl	802727c <__pow5mult>
 80261ae:	9005      	str	r0, [sp, #20]
 80261b0:	2101      	movs	r1, #1
 80261b2:	9803      	ldr	r0, [sp, #12]
 80261b4:	f000 ffa0 	bl	80270f8 <__i2b>
 80261b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80261ba:	0006      	movs	r6, r0
 80261bc:	2b00      	cmp	r3, #0
 80261be:	d100      	bne.n	80261c2 <_dtoa_r+0x81e>
 80261c0:	e1bc      	b.n	802653c <_dtoa_r+0xb98>
 80261c2:	001a      	movs	r2, r3
 80261c4:	0001      	movs	r1, r0
 80261c6:	9803      	ldr	r0, [sp, #12]
 80261c8:	f001 f858 	bl	802727c <__pow5mult>
 80261cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80261ce:	0006      	movs	r6, r0
 80261d0:	2500      	movs	r5, #0
 80261d2:	2b01      	cmp	r3, #1
 80261d4:	dc16      	bgt.n	8026204 <_dtoa_r+0x860>
 80261d6:	2500      	movs	r5, #0
 80261d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80261da:	42ab      	cmp	r3, r5
 80261dc:	d10e      	bne.n	80261fc <_dtoa_r+0x858>
 80261de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80261e0:	031b      	lsls	r3, r3, #12
 80261e2:	42ab      	cmp	r3, r5
 80261e4:	d10a      	bne.n	80261fc <_dtoa_r+0x858>
 80261e6:	4b8d      	ldr	r3, [pc, #564]	@ (802641c <_dtoa_r+0xa78>)
 80261e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80261ea:	4213      	tst	r3, r2
 80261ec:	d006      	beq.n	80261fc <_dtoa_r+0x858>
 80261ee:	9b06      	ldr	r3, [sp, #24]
 80261f0:	3501      	adds	r5, #1
 80261f2:	3301      	adds	r3, #1
 80261f4:	9306      	str	r3, [sp, #24]
 80261f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80261f8:	3301      	adds	r3, #1
 80261fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80261fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80261fe:	2001      	movs	r0, #1
 8026200:	2b00      	cmp	r3, #0
 8026202:	d008      	beq.n	8026216 <_dtoa_r+0x872>
 8026204:	6933      	ldr	r3, [r6, #16]
 8026206:	3303      	adds	r3, #3
 8026208:	009b      	lsls	r3, r3, #2
 802620a:	18f3      	adds	r3, r6, r3
 802620c:	6858      	ldr	r0, [r3, #4]
 802620e:	f000 ff23 	bl	8027058 <__hi0bits>
 8026212:	2320      	movs	r3, #32
 8026214:	1a18      	subs	r0, r3, r0
 8026216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026218:	1818      	adds	r0, r3, r0
 802621a:	0002      	movs	r2, r0
 802621c:	231f      	movs	r3, #31
 802621e:	401a      	ands	r2, r3
 8026220:	4218      	tst	r0, r3
 8026222:	d100      	bne.n	8026226 <_dtoa_r+0x882>
 8026224:	e081      	b.n	802632a <_dtoa_r+0x986>
 8026226:	3301      	adds	r3, #1
 8026228:	1a9b      	subs	r3, r3, r2
 802622a:	2b04      	cmp	r3, #4
 802622c:	dd79      	ble.n	8026322 <_dtoa_r+0x97e>
 802622e:	231c      	movs	r3, #28
 8026230:	1a9b      	subs	r3, r3, r2
 8026232:	9a06      	ldr	r2, [sp, #24]
 8026234:	18e4      	adds	r4, r4, r3
 8026236:	18d2      	adds	r2, r2, r3
 8026238:	9206      	str	r2, [sp, #24]
 802623a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802623c:	18d3      	adds	r3, r2, r3
 802623e:	930d      	str	r3, [sp, #52]	@ 0x34
 8026240:	9b06      	ldr	r3, [sp, #24]
 8026242:	2b00      	cmp	r3, #0
 8026244:	dd05      	ble.n	8026252 <_dtoa_r+0x8ae>
 8026246:	001a      	movs	r2, r3
 8026248:	9905      	ldr	r1, [sp, #20]
 802624a:	9803      	ldr	r0, [sp, #12]
 802624c:	f001 f872 	bl	8027334 <__lshift>
 8026250:	9005      	str	r0, [sp, #20]
 8026252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026254:	2b00      	cmp	r3, #0
 8026256:	dd05      	ble.n	8026264 <_dtoa_r+0x8c0>
 8026258:	0031      	movs	r1, r6
 802625a:	001a      	movs	r2, r3
 802625c:	9803      	ldr	r0, [sp, #12]
 802625e:	f001 f869 	bl	8027334 <__lshift>
 8026262:	0006      	movs	r6, r0
 8026264:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026266:	2b00      	cmp	r3, #0
 8026268:	d061      	beq.n	802632e <_dtoa_r+0x98a>
 802626a:	0031      	movs	r1, r6
 802626c:	9805      	ldr	r0, [sp, #20]
 802626e:	f001 f8cd 	bl	802740c <__mcmp>
 8026272:	2800      	cmp	r0, #0
 8026274:	da5b      	bge.n	802632e <_dtoa_r+0x98a>
 8026276:	9b04      	ldr	r3, [sp, #16]
 8026278:	220a      	movs	r2, #10
 802627a:	3b01      	subs	r3, #1
 802627c:	930c      	str	r3, [sp, #48]	@ 0x30
 802627e:	9905      	ldr	r1, [sp, #20]
 8026280:	2300      	movs	r3, #0
 8026282:	9803      	ldr	r0, [sp, #12]
 8026284:	f000 fe58 	bl	8026f38 <__multadd>
 8026288:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802628a:	9005      	str	r0, [sp, #20]
 802628c:	2b00      	cmp	r3, #0
 802628e:	d100      	bne.n	8026292 <_dtoa_r+0x8ee>
 8026290:	e15b      	b.n	802654a <_dtoa_r+0xba6>
 8026292:	2300      	movs	r3, #0
 8026294:	0039      	movs	r1, r7
 8026296:	220a      	movs	r2, #10
 8026298:	9803      	ldr	r0, [sp, #12]
 802629a:	f000 fe4d 	bl	8026f38 <__multadd>
 802629e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80262a0:	0007      	movs	r7, r0
 80262a2:	2b00      	cmp	r3, #0
 80262a4:	dc4d      	bgt.n	8026342 <_dtoa_r+0x99e>
 80262a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80262a8:	2b02      	cmp	r3, #2
 80262aa:	dd46      	ble.n	802633a <_dtoa_r+0x996>
 80262ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80262ae:	2b00      	cmp	r3, #0
 80262b0:	d000      	beq.n	80262b4 <_dtoa_r+0x910>
 80262b2:	e5db      	b.n	8025e6c <_dtoa_r+0x4c8>
 80262b4:	0031      	movs	r1, r6
 80262b6:	2205      	movs	r2, #5
 80262b8:	9803      	ldr	r0, [sp, #12]
 80262ba:	f000 fe3d 	bl	8026f38 <__multadd>
 80262be:	0006      	movs	r6, r0
 80262c0:	0001      	movs	r1, r0
 80262c2:	9805      	ldr	r0, [sp, #20]
 80262c4:	f001 f8a2 	bl	802740c <__mcmp>
 80262c8:	2800      	cmp	r0, #0
 80262ca:	dc00      	bgt.n	80262ce <_dtoa_r+0x92a>
 80262cc:	e5ce      	b.n	8025e6c <_dtoa_r+0x4c8>
 80262ce:	9b08      	ldr	r3, [sp, #32]
 80262d0:	9a08      	ldr	r2, [sp, #32]
 80262d2:	1c5c      	adds	r4, r3, #1
 80262d4:	2331      	movs	r3, #49	@ 0x31
 80262d6:	7013      	strb	r3, [r2, #0]
 80262d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80262da:	3301      	adds	r3, #1
 80262dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80262de:	e5c9      	b.n	8025e74 <_dtoa_r+0x4d0>
 80262e0:	2336      	movs	r3, #54	@ 0x36
 80262e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80262e4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80262e6:	1a9b      	subs	r3, r3, r2
 80262e8:	9c06      	ldr	r4, [sp, #24]
 80262ea:	e720      	b.n	802612e <_dtoa_r+0x78a>
 80262ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262ee:	1e5d      	subs	r5, r3, #1
 80262f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80262f2:	42ab      	cmp	r3, r5
 80262f4:	db08      	blt.n	8026308 <_dtoa_r+0x964>
 80262f6:	1b5d      	subs	r5, r3, r5
 80262f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	daf4      	bge.n	80262e8 <_dtoa_r+0x944>
 80262fe:	9b06      	ldr	r3, [sp, #24]
 8026300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026302:	1a9c      	subs	r4, r3, r2
 8026304:	2300      	movs	r3, #0
 8026306:	e712      	b.n	802612e <_dtoa_r+0x78a>
 8026308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802630a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802630c:	1aeb      	subs	r3, r5, r3
 802630e:	18d3      	adds	r3, r2, r3
 8026310:	9314      	str	r3, [sp, #80]	@ 0x50
 8026312:	950f      	str	r5, [sp, #60]	@ 0x3c
 8026314:	9c06      	ldr	r4, [sp, #24]
 8026316:	2500      	movs	r5, #0
 8026318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802631a:	e708      	b.n	802612e <_dtoa_r+0x78a>
 802631c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802631e:	9905      	ldr	r1, [sp, #20]
 8026320:	e742      	b.n	80261a8 <_dtoa_r+0x804>
 8026322:	2b04      	cmp	r3, #4
 8026324:	d08c      	beq.n	8026240 <_dtoa_r+0x89c>
 8026326:	331c      	adds	r3, #28
 8026328:	e783      	b.n	8026232 <_dtoa_r+0x88e>
 802632a:	0013      	movs	r3, r2
 802632c:	e7fb      	b.n	8026326 <_dtoa_r+0x982>
 802632e:	9b04      	ldr	r3, [sp, #16]
 8026330:	930c      	str	r3, [sp, #48]	@ 0x30
 8026332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026334:	930e      	str	r3, [sp, #56]	@ 0x38
 8026336:	2b00      	cmp	r3, #0
 8026338:	ddb5      	ble.n	80262a6 <_dtoa_r+0x902>
 802633a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802633c:	2b00      	cmp	r3, #0
 802633e:	d100      	bne.n	8026342 <_dtoa_r+0x99e>
 8026340:	e107      	b.n	8026552 <_dtoa_r+0xbae>
 8026342:	2c00      	cmp	r4, #0
 8026344:	dd05      	ble.n	8026352 <_dtoa_r+0x9ae>
 8026346:	0039      	movs	r1, r7
 8026348:	0022      	movs	r2, r4
 802634a:	9803      	ldr	r0, [sp, #12]
 802634c:	f000 fff2 	bl	8027334 <__lshift>
 8026350:	0007      	movs	r7, r0
 8026352:	9704      	str	r7, [sp, #16]
 8026354:	2d00      	cmp	r5, #0
 8026356:	d020      	beq.n	802639a <_dtoa_r+0x9f6>
 8026358:	6879      	ldr	r1, [r7, #4]
 802635a:	9803      	ldr	r0, [sp, #12]
 802635c:	f000 fd84 	bl	8026e68 <_Balloc>
 8026360:	1e04      	subs	r4, r0, #0
 8026362:	d10c      	bne.n	802637e <_dtoa_r+0x9da>
 8026364:	0022      	movs	r2, r4
 8026366:	4b2e      	ldr	r3, [pc, #184]	@ (8026420 <_dtoa_r+0xa7c>)
 8026368:	482e      	ldr	r0, [pc, #184]	@ (8026424 <_dtoa_r+0xa80>)
 802636a:	492f      	ldr	r1, [pc, #188]	@ (8026428 <_dtoa_r+0xa84>)
 802636c:	f7ff fb2f 	bl	80259ce <_dtoa_r+0x2a>
 8026370:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8026372:	0037      	movs	r7, r6
 8026374:	e7ab      	b.n	80262ce <_dtoa_r+0x92a>
 8026376:	9b04      	ldr	r3, [sp, #16]
 8026378:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802637a:	930c      	str	r3, [sp, #48]	@ 0x30
 802637c:	e7f9      	b.n	8026372 <_dtoa_r+0x9ce>
 802637e:	0039      	movs	r1, r7
 8026380:	693a      	ldr	r2, [r7, #16]
 8026382:	310c      	adds	r1, #12
 8026384:	3202      	adds	r2, #2
 8026386:	0092      	lsls	r2, r2, #2
 8026388:	300c      	adds	r0, #12
 802638a:	f7ff fa75 	bl	8025878 <memcpy>
 802638e:	2201      	movs	r2, #1
 8026390:	0021      	movs	r1, r4
 8026392:	9803      	ldr	r0, [sp, #12]
 8026394:	f000 ffce 	bl	8027334 <__lshift>
 8026398:	9004      	str	r0, [sp, #16]
 802639a:	9b08      	ldr	r3, [sp, #32]
 802639c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802639e:	9306      	str	r3, [sp, #24]
 80263a0:	3b01      	subs	r3, #1
 80263a2:	189b      	adds	r3, r3, r2
 80263a4:	2201      	movs	r2, #1
 80263a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80263a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80263aa:	4013      	ands	r3, r2
 80263ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80263ae:	0031      	movs	r1, r6
 80263b0:	9805      	ldr	r0, [sp, #20]
 80263b2:	f7ff fa71 	bl	8025898 <quorem>
 80263b6:	0039      	movs	r1, r7
 80263b8:	0005      	movs	r5, r0
 80263ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80263bc:	9805      	ldr	r0, [sp, #20]
 80263be:	f001 f825 	bl	802740c <__mcmp>
 80263c2:	9a04      	ldr	r2, [sp, #16]
 80263c4:	900d      	str	r0, [sp, #52]	@ 0x34
 80263c6:	0031      	movs	r1, r6
 80263c8:	9803      	ldr	r0, [sp, #12]
 80263ca:	f001 f83b 	bl	8027444 <__mdiff>
 80263ce:	2201      	movs	r2, #1
 80263d0:	68c3      	ldr	r3, [r0, #12]
 80263d2:	0004      	movs	r4, r0
 80263d4:	3530      	adds	r5, #48	@ 0x30
 80263d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80263d8:	2b00      	cmp	r3, #0
 80263da:	d104      	bne.n	80263e6 <_dtoa_r+0xa42>
 80263dc:	0001      	movs	r1, r0
 80263de:	9805      	ldr	r0, [sp, #20]
 80263e0:	f001 f814 	bl	802740c <__mcmp>
 80263e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80263e6:	0021      	movs	r1, r4
 80263e8:	9803      	ldr	r0, [sp, #12]
 80263ea:	f000 fd81 	bl	8026ef0 <_Bfree>
 80263ee:	9b06      	ldr	r3, [sp, #24]
 80263f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80263f2:	1c5c      	adds	r4, r3, #1
 80263f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80263f6:	4313      	orrs	r3, r2
 80263f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80263fa:	4313      	orrs	r3, r2
 80263fc:	d116      	bne.n	802642c <_dtoa_r+0xa88>
 80263fe:	2d39      	cmp	r5, #57	@ 0x39
 8026400:	d02f      	beq.n	8026462 <_dtoa_r+0xabe>
 8026402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026404:	2b00      	cmp	r3, #0
 8026406:	dd01      	ble.n	802640c <_dtoa_r+0xa68>
 8026408:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802640a:	3531      	adds	r5, #49	@ 0x31
 802640c:	9b06      	ldr	r3, [sp, #24]
 802640e:	701d      	strb	r5, [r3, #0]
 8026410:	e532      	b.n	8025e78 <_dtoa_r+0x4d4>
 8026412:	46c0      	nop			@ (mov r8, r8)
 8026414:	40240000 	.word	0x40240000
 8026418:	00000433 	.word	0x00000433
 802641c:	7ff00000 	.word	0x7ff00000
 8026420:	0802e142 	.word	0x0802e142
 8026424:	0802e0ea 	.word	0x0802e0ea
 8026428:	000002ef 	.word	0x000002ef
 802642c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802642e:	2b00      	cmp	r3, #0
 8026430:	db04      	blt.n	802643c <_dtoa_r+0xa98>
 8026432:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8026434:	4313      	orrs	r3, r2
 8026436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026438:	4313      	orrs	r3, r2
 802643a:	d11e      	bne.n	802647a <_dtoa_r+0xad6>
 802643c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802643e:	2b00      	cmp	r3, #0
 8026440:	dde4      	ble.n	802640c <_dtoa_r+0xa68>
 8026442:	9905      	ldr	r1, [sp, #20]
 8026444:	2201      	movs	r2, #1
 8026446:	9803      	ldr	r0, [sp, #12]
 8026448:	f000 ff74 	bl	8027334 <__lshift>
 802644c:	0031      	movs	r1, r6
 802644e:	9005      	str	r0, [sp, #20]
 8026450:	f000 ffdc 	bl	802740c <__mcmp>
 8026454:	2800      	cmp	r0, #0
 8026456:	dc02      	bgt.n	802645e <_dtoa_r+0xaba>
 8026458:	d1d8      	bne.n	802640c <_dtoa_r+0xa68>
 802645a:	07eb      	lsls	r3, r5, #31
 802645c:	d5d6      	bpl.n	802640c <_dtoa_r+0xa68>
 802645e:	2d39      	cmp	r5, #57	@ 0x39
 8026460:	d1d2      	bne.n	8026408 <_dtoa_r+0xa64>
 8026462:	2339      	movs	r3, #57	@ 0x39
 8026464:	9a06      	ldr	r2, [sp, #24]
 8026466:	7013      	strb	r3, [r2, #0]
 8026468:	0023      	movs	r3, r4
 802646a:	001c      	movs	r4, r3
 802646c:	3b01      	subs	r3, #1
 802646e:	781a      	ldrb	r2, [r3, #0]
 8026470:	2a39      	cmp	r2, #57	@ 0x39
 8026472:	d050      	beq.n	8026516 <_dtoa_r+0xb72>
 8026474:	3201      	adds	r2, #1
 8026476:	701a      	strb	r2, [r3, #0]
 8026478:	e4fe      	b.n	8025e78 <_dtoa_r+0x4d4>
 802647a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802647c:	2b00      	cmp	r3, #0
 802647e:	dd03      	ble.n	8026488 <_dtoa_r+0xae4>
 8026480:	2d39      	cmp	r5, #57	@ 0x39
 8026482:	d0ee      	beq.n	8026462 <_dtoa_r+0xabe>
 8026484:	3501      	adds	r5, #1
 8026486:	e7c1      	b.n	802640c <_dtoa_r+0xa68>
 8026488:	9b06      	ldr	r3, [sp, #24]
 802648a:	9a06      	ldr	r2, [sp, #24]
 802648c:	701d      	strb	r5, [r3, #0]
 802648e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026490:	4293      	cmp	r3, r2
 8026492:	d02b      	beq.n	80264ec <_dtoa_r+0xb48>
 8026494:	2300      	movs	r3, #0
 8026496:	220a      	movs	r2, #10
 8026498:	9905      	ldr	r1, [sp, #20]
 802649a:	9803      	ldr	r0, [sp, #12]
 802649c:	f000 fd4c 	bl	8026f38 <__multadd>
 80264a0:	9b04      	ldr	r3, [sp, #16]
 80264a2:	9005      	str	r0, [sp, #20]
 80264a4:	429f      	cmp	r7, r3
 80264a6:	d109      	bne.n	80264bc <_dtoa_r+0xb18>
 80264a8:	0039      	movs	r1, r7
 80264aa:	2300      	movs	r3, #0
 80264ac:	220a      	movs	r2, #10
 80264ae:	9803      	ldr	r0, [sp, #12]
 80264b0:	f000 fd42 	bl	8026f38 <__multadd>
 80264b4:	0007      	movs	r7, r0
 80264b6:	9004      	str	r0, [sp, #16]
 80264b8:	9406      	str	r4, [sp, #24]
 80264ba:	e778      	b.n	80263ae <_dtoa_r+0xa0a>
 80264bc:	0039      	movs	r1, r7
 80264be:	2300      	movs	r3, #0
 80264c0:	220a      	movs	r2, #10
 80264c2:	9803      	ldr	r0, [sp, #12]
 80264c4:	f000 fd38 	bl	8026f38 <__multadd>
 80264c8:	2300      	movs	r3, #0
 80264ca:	0007      	movs	r7, r0
 80264cc:	220a      	movs	r2, #10
 80264ce:	9904      	ldr	r1, [sp, #16]
 80264d0:	9803      	ldr	r0, [sp, #12]
 80264d2:	f000 fd31 	bl	8026f38 <__multadd>
 80264d6:	9004      	str	r0, [sp, #16]
 80264d8:	e7ee      	b.n	80264b8 <_dtoa_r+0xb14>
 80264da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80264dc:	2401      	movs	r4, #1
 80264de:	2b00      	cmp	r3, #0
 80264e0:	dd00      	ble.n	80264e4 <_dtoa_r+0xb40>
 80264e2:	001c      	movs	r4, r3
 80264e4:	9704      	str	r7, [sp, #16]
 80264e6:	2700      	movs	r7, #0
 80264e8:	9b08      	ldr	r3, [sp, #32]
 80264ea:	191c      	adds	r4, r3, r4
 80264ec:	9905      	ldr	r1, [sp, #20]
 80264ee:	2201      	movs	r2, #1
 80264f0:	9803      	ldr	r0, [sp, #12]
 80264f2:	f000 ff1f 	bl	8027334 <__lshift>
 80264f6:	0031      	movs	r1, r6
 80264f8:	9005      	str	r0, [sp, #20]
 80264fa:	f000 ff87 	bl	802740c <__mcmp>
 80264fe:	2800      	cmp	r0, #0
 8026500:	dcb2      	bgt.n	8026468 <_dtoa_r+0xac4>
 8026502:	d101      	bne.n	8026508 <_dtoa_r+0xb64>
 8026504:	07ed      	lsls	r5, r5, #31
 8026506:	d4af      	bmi.n	8026468 <_dtoa_r+0xac4>
 8026508:	0023      	movs	r3, r4
 802650a:	001c      	movs	r4, r3
 802650c:	3b01      	subs	r3, #1
 802650e:	781a      	ldrb	r2, [r3, #0]
 8026510:	2a30      	cmp	r2, #48	@ 0x30
 8026512:	d0fa      	beq.n	802650a <_dtoa_r+0xb66>
 8026514:	e4b0      	b.n	8025e78 <_dtoa_r+0x4d4>
 8026516:	9a08      	ldr	r2, [sp, #32]
 8026518:	429a      	cmp	r2, r3
 802651a:	d1a6      	bne.n	802646a <_dtoa_r+0xac6>
 802651c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802651e:	3301      	adds	r3, #1
 8026520:	930c      	str	r3, [sp, #48]	@ 0x30
 8026522:	2331      	movs	r3, #49	@ 0x31
 8026524:	7013      	strb	r3, [r2, #0]
 8026526:	e4a7      	b.n	8025e78 <_dtoa_r+0x4d4>
 8026528:	4b14      	ldr	r3, [pc, #80]	@ (802657c <_dtoa_r+0xbd8>)
 802652a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802652c:	9308      	str	r3, [sp, #32]
 802652e:	4b14      	ldr	r3, [pc, #80]	@ (8026580 <_dtoa_r+0xbdc>)
 8026530:	2a00      	cmp	r2, #0
 8026532:	d001      	beq.n	8026538 <_dtoa_r+0xb94>
 8026534:	f7ff fa7e 	bl	8025a34 <_dtoa_r+0x90>
 8026538:	f7ff fa7e 	bl	8025a38 <_dtoa_r+0x94>
 802653c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802653e:	2b01      	cmp	r3, #1
 8026540:	dc00      	bgt.n	8026544 <_dtoa_r+0xba0>
 8026542:	e648      	b.n	80261d6 <_dtoa_r+0x832>
 8026544:	2001      	movs	r0, #1
 8026546:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8026548:	e665      	b.n	8026216 <_dtoa_r+0x872>
 802654a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802654c:	2b00      	cmp	r3, #0
 802654e:	dc00      	bgt.n	8026552 <_dtoa_r+0xbae>
 8026550:	e6a9      	b.n	80262a6 <_dtoa_r+0x902>
 8026552:	2400      	movs	r4, #0
 8026554:	0031      	movs	r1, r6
 8026556:	9805      	ldr	r0, [sp, #20]
 8026558:	f7ff f99e 	bl	8025898 <quorem>
 802655c:	9b08      	ldr	r3, [sp, #32]
 802655e:	3030      	adds	r0, #48	@ 0x30
 8026560:	5518      	strb	r0, [r3, r4]
 8026562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026564:	3401      	adds	r4, #1
 8026566:	0005      	movs	r5, r0
 8026568:	42a3      	cmp	r3, r4
 802656a:	ddb6      	ble.n	80264da <_dtoa_r+0xb36>
 802656c:	2300      	movs	r3, #0
 802656e:	220a      	movs	r2, #10
 8026570:	9905      	ldr	r1, [sp, #20]
 8026572:	9803      	ldr	r0, [sp, #12]
 8026574:	f000 fce0 	bl	8026f38 <__multadd>
 8026578:	9005      	str	r0, [sp, #20]
 802657a:	e7eb      	b.n	8026554 <_dtoa_r+0xbb0>
 802657c:	0802e0c6 	.word	0x0802e0c6
 8026580:	0802e0ce 	.word	0x0802e0ce

08026584 <_free_r>:
 8026584:	b570      	push	{r4, r5, r6, lr}
 8026586:	0005      	movs	r5, r0
 8026588:	1e0c      	subs	r4, r1, #0
 802658a:	d010      	beq.n	80265ae <_free_r+0x2a>
 802658c:	3c04      	subs	r4, #4
 802658e:	6823      	ldr	r3, [r4, #0]
 8026590:	2b00      	cmp	r3, #0
 8026592:	da00      	bge.n	8026596 <_free_r+0x12>
 8026594:	18e4      	adds	r4, r4, r3
 8026596:	0028      	movs	r0, r5
 8026598:	f000 fc56 	bl	8026e48 <__malloc_lock>
 802659c:	4a1d      	ldr	r2, [pc, #116]	@ (8026614 <_free_r+0x90>)
 802659e:	6813      	ldr	r3, [r2, #0]
 80265a0:	2b00      	cmp	r3, #0
 80265a2:	d105      	bne.n	80265b0 <_free_r+0x2c>
 80265a4:	6063      	str	r3, [r4, #4]
 80265a6:	6014      	str	r4, [r2, #0]
 80265a8:	0028      	movs	r0, r5
 80265aa:	f000 fc55 	bl	8026e58 <__malloc_unlock>
 80265ae:	bd70      	pop	{r4, r5, r6, pc}
 80265b0:	42a3      	cmp	r3, r4
 80265b2:	d908      	bls.n	80265c6 <_free_r+0x42>
 80265b4:	6820      	ldr	r0, [r4, #0]
 80265b6:	1821      	adds	r1, r4, r0
 80265b8:	428b      	cmp	r3, r1
 80265ba:	d1f3      	bne.n	80265a4 <_free_r+0x20>
 80265bc:	6819      	ldr	r1, [r3, #0]
 80265be:	685b      	ldr	r3, [r3, #4]
 80265c0:	1809      	adds	r1, r1, r0
 80265c2:	6021      	str	r1, [r4, #0]
 80265c4:	e7ee      	b.n	80265a4 <_free_r+0x20>
 80265c6:	001a      	movs	r2, r3
 80265c8:	685b      	ldr	r3, [r3, #4]
 80265ca:	2b00      	cmp	r3, #0
 80265cc:	d001      	beq.n	80265d2 <_free_r+0x4e>
 80265ce:	42a3      	cmp	r3, r4
 80265d0:	d9f9      	bls.n	80265c6 <_free_r+0x42>
 80265d2:	6811      	ldr	r1, [r2, #0]
 80265d4:	1850      	adds	r0, r2, r1
 80265d6:	42a0      	cmp	r0, r4
 80265d8:	d10b      	bne.n	80265f2 <_free_r+0x6e>
 80265da:	6820      	ldr	r0, [r4, #0]
 80265dc:	1809      	adds	r1, r1, r0
 80265de:	1850      	adds	r0, r2, r1
 80265e0:	6011      	str	r1, [r2, #0]
 80265e2:	4283      	cmp	r3, r0
 80265e4:	d1e0      	bne.n	80265a8 <_free_r+0x24>
 80265e6:	6818      	ldr	r0, [r3, #0]
 80265e8:	685b      	ldr	r3, [r3, #4]
 80265ea:	1841      	adds	r1, r0, r1
 80265ec:	6011      	str	r1, [r2, #0]
 80265ee:	6053      	str	r3, [r2, #4]
 80265f0:	e7da      	b.n	80265a8 <_free_r+0x24>
 80265f2:	42a0      	cmp	r0, r4
 80265f4:	d902      	bls.n	80265fc <_free_r+0x78>
 80265f6:	230c      	movs	r3, #12
 80265f8:	602b      	str	r3, [r5, #0]
 80265fa:	e7d5      	b.n	80265a8 <_free_r+0x24>
 80265fc:	6820      	ldr	r0, [r4, #0]
 80265fe:	1821      	adds	r1, r4, r0
 8026600:	428b      	cmp	r3, r1
 8026602:	d103      	bne.n	802660c <_free_r+0x88>
 8026604:	6819      	ldr	r1, [r3, #0]
 8026606:	685b      	ldr	r3, [r3, #4]
 8026608:	1809      	adds	r1, r1, r0
 802660a:	6021      	str	r1, [r4, #0]
 802660c:	6063      	str	r3, [r4, #4]
 802660e:	6054      	str	r4, [r2, #4]
 8026610:	e7ca      	b.n	80265a8 <_free_r+0x24>
 8026612:	46c0      	nop			@ (mov r8, r8)
 8026614:	20003628 	.word	0x20003628

08026618 <rshift>:
 8026618:	0002      	movs	r2, r0
 802661a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802661c:	6904      	ldr	r4, [r0, #16]
 802661e:	b085      	sub	sp, #20
 8026620:	3214      	adds	r2, #20
 8026622:	114b      	asrs	r3, r1, #5
 8026624:	0016      	movs	r6, r2
 8026626:	9302      	str	r3, [sp, #8]
 8026628:	429c      	cmp	r4, r3
 802662a:	dd31      	ble.n	8026690 <rshift+0x78>
 802662c:	261f      	movs	r6, #31
 802662e:	000f      	movs	r7, r1
 8026630:	009b      	lsls	r3, r3, #2
 8026632:	00a5      	lsls	r5, r4, #2
 8026634:	18d3      	adds	r3, r2, r3
 8026636:	4037      	ands	r7, r6
 8026638:	1955      	adds	r5, r2, r5
 802663a:	9300      	str	r3, [sp, #0]
 802663c:	9701      	str	r7, [sp, #4]
 802663e:	4231      	tst	r1, r6
 8026640:	d10d      	bne.n	802665e <rshift+0x46>
 8026642:	0016      	movs	r6, r2
 8026644:	0019      	movs	r1, r3
 8026646:	428d      	cmp	r5, r1
 8026648:	d836      	bhi.n	80266b8 <rshift+0xa0>
 802664a:	9b00      	ldr	r3, [sp, #0]
 802664c:	2600      	movs	r6, #0
 802664e:	3b03      	subs	r3, #3
 8026650:	429d      	cmp	r5, r3
 8026652:	d302      	bcc.n	802665a <rshift+0x42>
 8026654:	9b02      	ldr	r3, [sp, #8]
 8026656:	1ae4      	subs	r4, r4, r3
 8026658:	00a6      	lsls	r6, r4, #2
 802665a:	1996      	adds	r6, r2, r6
 802665c:	e018      	b.n	8026690 <rshift+0x78>
 802665e:	2120      	movs	r1, #32
 8026660:	9e01      	ldr	r6, [sp, #4]
 8026662:	9f01      	ldr	r7, [sp, #4]
 8026664:	1b89      	subs	r1, r1, r6
 8026666:	9e00      	ldr	r6, [sp, #0]
 8026668:	9103      	str	r1, [sp, #12]
 802666a:	ce02      	ldmia	r6!, {r1}
 802666c:	4694      	mov	ip, r2
 802666e:	40f9      	lsrs	r1, r7
 8026670:	42b5      	cmp	r5, r6
 8026672:	d816      	bhi.n	80266a2 <rshift+0x8a>
 8026674:	9b00      	ldr	r3, [sp, #0]
 8026676:	2600      	movs	r6, #0
 8026678:	3301      	adds	r3, #1
 802667a:	429d      	cmp	r5, r3
 802667c:	d303      	bcc.n	8026686 <rshift+0x6e>
 802667e:	9b02      	ldr	r3, [sp, #8]
 8026680:	1ae4      	subs	r4, r4, r3
 8026682:	00a6      	lsls	r6, r4, #2
 8026684:	3e04      	subs	r6, #4
 8026686:	1996      	adds	r6, r2, r6
 8026688:	6031      	str	r1, [r6, #0]
 802668a:	2900      	cmp	r1, #0
 802668c:	d000      	beq.n	8026690 <rshift+0x78>
 802668e:	3604      	adds	r6, #4
 8026690:	1ab1      	subs	r1, r6, r2
 8026692:	1089      	asrs	r1, r1, #2
 8026694:	6101      	str	r1, [r0, #16]
 8026696:	4296      	cmp	r6, r2
 8026698:	d101      	bne.n	802669e <rshift+0x86>
 802669a:	2300      	movs	r3, #0
 802669c:	6143      	str	r3, [r0, #20]
 802669e:	b005      	add	sp, #20
 80266a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80266a2:	6837      	ldr	r7, [r6, #0]
 80266a4:	9b03      	ldr	r3, [sp, #12]
 80266a6:	409f      	lsls	r7, r3
 80266a8:	430f      	orrs	r7, r1
 80266aa:	4661      	mov	r1, ip
 80266ac:	c180      	stmia	r1!, {r7}
 80266ae:	468c      	mov	ip, r1
 80266b0:	9b01      	ldr	r3, [sp, #4]
 80266b2:	ce02      	ldmia	r6!, {r1}
 80266b4:	40d9      	lsrs	r1, r3
 80266b6:	e7db      	b.n	8026670 <rshift+0x58>
 80266b8:	c980      	ldmia	r1!, {r7}
 80266ba:	c680      	stmia	r6!, {r7}
 80266bc:	e7c3      	b.n	8026646 <rshift+0x2e>

080266be <__hexdig_fun>:
 80266be:	0002      	movs	r2, r0
 80266c0:	3a30      	subs	r2, #48	@ 0x30
 80266c2:	0003      	movs	r3, r0
 80266c4:	2a09      	cmp	r2, #9
 80266c6:	d802      	bhi.n	80266ce <__hexdig_fun+0x10>
 80266c8:	3b20      	subs	r3, #32
 80266ca:	b2d8      	uxtb	r0, r3
 80266cc:	4770      	bx	lr
 80266ce:	0002      	movs	r2, r0
 80266d0:	3a61      	subs	r2, #97	@ 0x61
 80266d2:	2a05      	cmp	r2, #5
 80266d4:	d801      	bhi.n	80266da <__hexdig_fun+0x1c>
 80266d6:	3b47      	subs	r3, #71	@ 0x47
 80266d8:	e7f7      	b.n	80266ca <__hexdig_fun+0xc>
 80266da:	001a      	movs	r2, r3
 80266dc:	3a41      	subs	r2, #65	@ 0x41
 80266de:	2000      	movs	r0, #0
 80266e0:	2a05      	cmp	r2, #5
 80266e2:	d8f3      	bhi.n	80266cc <__hexdig_fun+0xe>
 80266e4:	3b27      	subs	r3, #39	@ 0x27
 80266e6:	e7f0      	b.n	80266ca <__hexdig_fun+0xc>

080266e8 <__gethex>:
 80266e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80266ea:	b089      	sub	sp, #36	@ 0x24
 80266ec:	9307      	str	r3, [sp, #28]
 80266ee:	680b      	ldr	r3, [r1, #0]
 80266f0:	9201      	str	r2, [sp, #4]
 80266f2:	9003      	str	r0, [sp, #12]
 80266f4:	9106      	str	r1, [sp, #24]
 80266f6:	1c9a      	adds	r2, r3, #2
 80266f8:	0011      	movs	r1, r2
 80266fa:	3201      	adds	r2, #1
 80266fc:	1e50      	subs	r0, r2, #1
 80266fe:	7800      	ldrb	r0, [r0, #0]
 8026700:	2830      	cmp	r0, #48	@ 0x30
 8026702:	d0f9      	beq.n	80266f8 <__gethex+0x10>
 8026704:	1acb      	subs	r3, r1, r3
 8026706:	3b02      	subs	r3, #2
 8026708:	9305      	str	r3, [sp, #20]
 802670a:	9100      	str	r1, [sp, #0]
 802670c:	f7ff ffd7 	bl	80266be <__hexdig_fun>
 8026710:	2300      	movs	r3, #0
 8026712:	001d      	movs	r5, r3
 8026714:	9302      	str	r3, [sp, #8]
 8026716:	4298      	cmp	r0, r3
 8026718:	d11e      	bne.n	8026758 <__gethex+0x70>
 802671a:	2201      	movs	r2, #1
 802671c:	49a6      	ldr	r1, [pc, #664]	@ (80269b8 <__gethex+0x2d0>)
 802671e:	9800      	ldr	r0, [sp, #0]
 8026720:	f7fe ffe4 	bl	80256ec <strncmp>
 8026724:	0007      	movs	r7, r0
 8026726:	42a8      	cmp	r0, r5
 8026728:	d000      	beq.n	802672c <__gethex+0x44>
 802672a:	e06a      	b.n	8026802 <__gethex+0x11a>
 802672c:	9b00      	ldr	r3, [sp, #0]
 802672e:	7858      	ldrb	r0, [r3, #1]
 8026730:	1c5c      	adds	r4, r3, #1
 8026732:	f7ff ffc4 	bl	80266be <__hexdig_fun>
 8026736:	2301      	movs	r3, #1
 8026738:	9302      	str	r3, [sp, #8]
 802673a:	42a8      	cmp	r0, r5
 802673c:	d02f      	beq.n	802679e <__gethex+0xb6>
 802673e:	9400      	str	r4, [sp, #0]
 8026740:	9b00      	ldr	r3, [sp, #0]
 8026742:	7818      	ldrb	r0, [r3, #0]
 8026744:	2830      	cmp	r0, #48	@ 0x30
 8026746:	d009      	beq.n	802675c <__gethex+0x74>
 8026748:	f7ff ffb9 	bl	80266be <__hexdig_fun>
 802674c:	4242      	negs	r2, r0
 802674e:	4142      	adcs	r2, r0
 8026750:	2301      	movs	r3, #1
 8026752:	0025      	movs	r5, r4
 8026754:	9202      	str	r2, [sp, #8]
 8026756:	9305      	str	r3, [sp, #20]
 8026758:	9c00      	ldr	r4, [sp, #0]
 802675a:	e004      	b.n	8026766 <__gethex+0x7e>
 802675c:	9b00      	ldr	r3, [sp, #0]
 802675e:	3301      	adds	r3, #1
 8026760:	9300      	str	r3, [sp, #0]
 8026762:	e7ed      	b.n	8026740 <__gethex+0x58>
 8026764:	3401      	adds	r4, #1
 8026766:	7820      	ldrb	r0, [r4, #0]
 8026768:	f7ff ffa9 	bl	80266be <__hexdig_fun>
 802676c:	1e07      	subs	r7, r0, #0
 802676e:	d1f9      	bne.n	8026764 <__gethex+0x7c>
 8026770:	2201      	movs	r2, #1
 8026772:	0020      	movs	r0, r4
 8026774:	4990      	ldr	r1, [pc, #576]	@ (80269b8 <__gethex+0x2d0>)
 8026776:	f7fe ffb9 	bl	80256ec <strncmp>
 802677a:	2800      	cmp	r0, #0
 802677c:	d10d      	bne.n	802679a <__gethex+0xb2>
 802677e:	2d00      	cmp	r5, #0
 8026780:	d106      	bne.n	8026790 <__gethex+0xa8>
 8026782:	3401      	adds	r4, #1
 8026784:	0025      	movs	r5, r4
 8026786:	7820      	ldrb	r0, [r4, #0]
 8026788:	f7ff ff99 	bl	80266be <__hexdig_fun>
 802678c:	2800      	cmp	r0, #0
 802678e:	d102      	bne.n	8026796 <__gethex+0xae>
 8026790:	1b2d      	subs	r5, r5, r4
 8026792:	00af      	lsls	r7, r5, #2
 8026794:	e003      	b.n	802679e <__gethex+0xb6>
 8026796:	3401      	adds	r4, #1
 8026798:	e7f5      	b.n	8026786 <__gethex+0x9e>
 802679a:	2d00      	cmp	r5, #0
 802679c:	d1f8      	bne.n	8026790 <__gethex+0xa8>
 802679e:	2220      	movs	r2, #32
 80267a0:	7823      	ldrb	r3, [r4, #0]
 80267a2:	0026      	movs	r6, r4
 80267a4:	4393      	bics	r3, r2
 80267a6:	2b50      	cmp	r3, #80	@ 0x50
 80267a8:	d11d      	bne.n	80267e6 <__gethex+0xfe>
 80267aa:	7863      	ldrb	r3, [r4, #1]
 80267ac:	2b2b      	cmp	r3, #43	@ 0x2b
 80267ae:	d02d      	beq.n	802680c <__gethex+0x124>
 80267b0:	2b2d      	cmp	r3, #45	@ 0x2d
 80267b2:	d02f      	beq.n	8026814 <__gethex+0x12c>
 80267b4:	2300      	movs	r3, #0
 80267b6:	1c66      	adds	r6, r4, #1
 80267b8:	9304      	str	r3, [sp, #16]
 80267ba:	7830      	ldrb	r0, [r6, #0]
 80267bc:	f7ff ff7f 	bl	80266be <__hexdig_fun>
 80267c0:	1e43      	subs	r3, r0, #1
 80267c2:	b2db      	uxtb	r3, r3
 80267c4:	0005      	movs	r5, r0
 80267c6:	2b18      	cmp	r3, #24
 80267c8:	d82a      	bhi.n	8026820 <__gethex+0x138>
 80267ca:	7870      	ldrb	r0, [r6, #1]
 80267cc:	f7ff ff77 	bl	80266be <__hexdig_fun>
 80267d0:	1e43      	subs	r3, r0, #1
 80267d2:	b2db      	uxtb	r3, r3
 80267d4:	3601      	adds	r6, #1
 80267d6:	3d10      	subs	r5, #16
 80267d8:	2b18      	cmp	r3, #24
 80267da:	d91d      	bls.n	8026818 <__gethex+0x130>
 80267dc:	9b04      	ldr	r3, [sp, #16]
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d000      	beq.n	80267e4 <__gethex+0xfc>
 80267e2:	426d      	negs	r5, r5
 80267e4:	197f      	adds	r7, r7, r5
 80267e6:	9b06      	ldr	r3, [sp, #24]
 80267e8:	601e      	str	r6, [r3, #0]
 80267ea:	9b02      	ldr	r3, [sp, #8]
 80267ec:	2b00      	cmp	r3, #0
 80267ee:	d019      	beq.n	8026824 <__gethex+0x13c>
 80267f0:	9b05      	ldr	r3, [sp, #20]
 80267f2:	2606      	movs	r6, #6
 80267f4:	425a      	negs	r2, r3
 80267f6:	4153      	adcs	r3, r2
 80267f8:	425b      	negs	r3, r3
 80267fa:	401e      	ands	r6, r3
 80267fc:	0030      	movs	r0, r6
 80267fe:	b009      	add	sp, #36	@ 0x24
 8026800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026802:	2301      	movs	r3, #1
 8026804:	2700      	movs	r7, #0
 8026806:	9c00      	ldr	r4, [sp, #0]
 8026808:	9302      	str	r3, [sp, #8]
 802680a:	e7c8      	b.n	802679e <__gethex+0xb6>
 802680c:	2300      	movs	r3, #0
 802680e:	9304      	str	r3, [sp, #16]
 8026810:	1ca6      	adds	r6, r4, #2
 8026812:	e7d2      	b.n	80267ba <__gethex+0xd2>
 8026814:	2301      	movs	r3, #1
 8026816:	e7fa      	b.n	802680e <__gethex+0x126>
 8026818:	230a      	movs	r3, #10
 802681a:	435d      	muls	r5, r3
 802681c:	182d      	adds	r5, r5, r0
 802681e:	e7d4      	b.n	80267ca <__gethex+0xe2>
 8026820:	0026      	movs	r6, r4
 8026822:	e7e0      	b.n	80267e6 <__gethex+0xfe>
 8026824:	9b00      	ldr	r3, [sp, #0]
 8026826:	9902      	ldr	r1, [sp, #8]
 8026828:	1ae3      	subs	r3, r4, r3
 802682a:	3b01      	subs	r3, #1
 802682c:	2b07      	cmp	r3, #7
 802682e:	dc0a      	bgt.n	8026846 <__gethex+0x15e>
 8026830:	9803      	ldr	r0, [sp, #12]
 8026832:	f000 fb19 	bl	8026e68 <_Balloc>
 8026836:	1e05      	subs	r5, r0, #0
 8026838:	d108      	bne.n	802684c <__gethex+0x164>
 802683a:	002a      	movs	r2, r5
 802683c:	21e4      	movs	r1, #228	@ 0xe4
 802683e:	4b5f      	ldr	r3, [pc, #380]	@ (80269bc <__gethex+0x2d4>)
 8026840:	485f      	ldr	r0, [pc, #380]	@ (80269c0 <__gethex+0x2d8>)
 8026842:	f001 fbe9 	bl	8028018 <__assert_func>
 8026846:	3101      	adds	r1, #1
 8026848:	105b      	asrs	r3, r3, #1
 802684a:	e7ef      	b.n	802682c <__gethex+0x144>
 802684c:	0003      	movs	r3, r0
 802684e:	3314      	adds	r3, #20
 8026850:	9302      	str	r3, [sp, #8]
 8026852:	9305      	str	r3, [sp, #20]
 8026854:	2300      	movs	r3, #0
 8026856:	001e      	movs	r6, r3
 8026858:	9304      	str	r3, [sp, #16]
 802685a:	9b00      	ldr	r3, [sp, #0]
 802685c:	42a3      	cmp	r3, r4
 802685e:	d338      	bcc.n	80268d2 <__gethex+0x1ea>
 8026860:	9c05      	ldr	r4, [sp, #20]
 8026862:	9b02      	ldr	r3, [sp, #8]
 8026864:	c440      	stmia	r4!, {r6}
 8026866:	1ae4      	subs	r4, r4, r3
 8026868:	10a4      	asrs	r4, r4, #2
 802686a:	0030      	movs	r0, r6
 802686c:	612c      	str	r4, [r5, #16]
 802686e:	f000 fbf3 	bl	8027058 <__hi0bits>
 8026872:	9b01      	ldr	r3, [sp, #4]
 8026874:	0164      	lsls	r4, r4, #5
 8026876:	681b      	ldr	r3, [r3, #0]
 8026878:	1a26      	subs	r6, r4, r0
 802687a:	9300      	str	r3, [sp, #0]
 802687c:	429e      	cmp	r6, r3
 802687e:	dd52      	ble.n	8026926 <__gethex+0x23e>
 8026880:	1af6      	subs	r6, r6, r3
 8026882:	0031      	movs	r1, r6
 8026884:	0028      	movs	r0, r5
 8026886:	f000 ff8e 	bl	80277a6 <__any_on>
 802688a:	1e04      	subs	r4, r0, #0
 802688c:	d00f      	beq.n	80268ae <__gethex+0x1c6>
 802688e:	2401      	movs	r4, #1
 8026890:	211f      	movs	r1, #31
 8026892:	0020      	movs	r0, r4
 8026894:	1e73      	subs	r3, r6, #1
 8026896:	4019      	ands	r1, r3
 8026898:	4088      	lsls	r0, r1
 802689a:	0001      	movs	r1, r0
 802689c:	115a      	asrs	r2, r3, #5
 802689e:	9802      	ldr	r0, [sp, #8]
 80268a0:	0092      	lsls	r2, r2, #2
 80268a2:	5812      	ldr	r2, [r2, r0]
 80268a4:	420a      	tst	r2, r1
 80268a6:	d002      	beq.n	80268ae <__gethex+0x1c6>
 80268a8:	42a3      	cmp	r3, r4
 80268aa:	dc34      	bgt.n	8026916 <__gethex+0x22e>
 80268ac:	2402      	movs	r4, #2
 80268ae:	0031      	movs	r1, r6
 80268b0:	0028      	movs	r0, r5
 80268b2:	f7ff feb1 	bl	8026618 <rshift>
 80268b6:	19bf      	adds	r7, r7, r6
 80268b8:	9b01      	ldr	r3, [sp, #4]
 80268ba:	689b      	ldr	r3, [r3, #8]
 80268bc:	42bb      	cmp	r3, r7
 80268be:	da42      	bge.n	8026946 <__gethex+0x25e>
 80268c0:	0029      	movs	r1, r5
 80268c2:	9803      	ldr	r0, [sp, #12]
 80268c4:	f000 fb14 	bl	8026ef0 <_Bfree>
 80268c8:	2300      	movs	r3, #0
 80268ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80268cc:	26a3      	movs	r6, #163	@ 0xa3
 80268ce:	6013      	str	r3, [r2, #0]
 80268d0:	e794      	b.n	80267fc <__gethex+0x114>
 80268d2:	3c01      	subs	r4, #1
 80268d4:	7823      	ldrb	r3, [r4, #0]
 80268d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80268d8:	d012      	beq.n	8026900 <__gethex+0x218>
 80268da:	9b04      	ldr	r3, [sp, #16]
 80268dc:	2b20      	cmp	r3, #32
 80268de:	d104      	bne.n	80268ea <__gethex+0x202>
 80268e0:	9b05      	ldr	r3, [sp, #20]
 80268e2:	c340      	stmia	r3!, {r6}
 80268e4:	2600      	movs	r6, #0
 80268e6:	9305      	str	r3, [sp, #20]
 80268e8:	9604      	str	r6, [sp, #16]
 80268ea:	7820      	ldrb	r0, [r4, #0]
 80268ec:	f7ff fee7 	bl	80266be <__hexdig_fun>
 80268f0:	230f      	movs	r3, #15
 80268f2:	4018      	ands	r0, r3
 80268f4:	9b04      	ldr	r3, [sp, #16]
 80268f6:	4098      	lsls	r0, r3
 80268f8:	3304      	adds	r3, #4
 80268fa:	4306      	orrs	r6, r0
 80268fc:	9304      	str	r3, [sp, #16]
 80268fe:	e7ac      	b.n	802685a <__gethex+0x172>
 8026900:	9b00      	ldr	r3, [sp, #0]
 8026902:	42a3      	cmp	r3, r4
 8026904:	d8e9      	bhi.n	80268da <__gethex+0x1f2>
 8026906:	2201      	movs	r2, #1
 8026908:	0020      	movs	r0, r4
 802690a:	492b      	ldr	r1, [pc, #172]	@ (80269b8 <__gethex+0x2d0>)
 802690c:	f7fe feee 	bl	80256ec <strncmp>
 8026910:	2800      	cmp	r0, #0
 8026912:	d1e2      	bne.n	80268da <__gethex+0x1f2>
 8026914:	e7a1      	b.n	802685a <__gethex+0x172>
 8026916:	0028      	movs	r0, r5
 8026918:	1eb1      	subs	r1, r6, #2
 802691a:	f000 ff44 	bl	80277a6 <__any_on>
 802691e:	2800      	cmp	r0, #0
 8026920:	d0c4      	beq.n	80268ac <__gethex+0x1c4>
 8026922:	2403      	movs	r4, #3
 8026924:	e7c3      	b.n	80268ae <__gethex+0x1c6>
 8026926:	9b00      	ldr	r3, [sp, #0]
 8026928:	2400      	movs	r4, #0
 802692a:	429e      	cmp	r6, r3
 802692c:	dac4      	bge.n	80268b8 <__gethex+0x1d0>
 802692e:	1b9e      	subs	r6, r3, r6
 8026930:	0029      	movs	r1, r5
 8026932:	0032      	movs	r2, r6
 8026934:	9803      	ldr	r0, [sp, #12]
 8026936:	f000 fcfd 	bl	8027334 <__lshift>
 802693a:	0003      	movs	r3, r0
 802693c:	3314      	adds	r3, #20
 802693e:	0005      	movs	r5, r0
 8026940:	1bbf      	subs	r7, r7, r6
 8026942:	9302      	str	r3, [sp, #8]
 8026944:	e7b8      	b.n	80268b8 <__gethex+0x1d0>
 8026946:	9b01      	ldr	r3, [sp, #4]
 8026948:	685e      	ldr	r6, [r3, #4]
 802694a:	42be      	cmp	r6, r7
 802694c:	dd6f      	ble.n	8026a2e <__gethex+0x346>
 802694e:	9b00      	ldr	r3, [sp, #0]
 8026950:	1bf6      	subs	r6, r6, r7
 8026952:	42b3      	cmp	r3, r6
 8026954:	dc36      	bgt.n	80269c4 <__gethex+0x2dc>
 8026956:	9b01      	ldr	r3, [sp, #4]
 8026958:	68db      	ldr	r3, [r3, #12]
 802695a:	2b02      	cmp	r3, #2
 802695c:	d024      	beq.n	80269a8 <__gethex+0x2c0>
 802695e:	2b03      	cmp	r3, #3
 8026960:	d026      	beq.n	80269b0 <__gethex+0x2c8>
 8026962:	2b01      	cmp	r3, #1
 8026964:	d117      	bne.n	8026996 <__gethex+0x2ae>
 8026966:	9b00      	ldr	r3, [sp, #0]
 8026968:	42b3      	cmp	r3, r6
 802696a:	d114      	bne.n	8026996 <__gethex+0x2ae>
 802696c:	2b01      	cmp	r3, #1
 802696e:	d10b      	bne.n	8026988 <__gethex+0x2a0>
 8026970:	9b01      	ldr	r3, [sp, #4]
 8026972:	9a07      	ldr	r2, [sp, #28]
 8026974:	685b      	ldr	r3, [r3, #4]
 8026976:	2662      	movs	r6, #98	@ 0x62
 8026978:	6013      	str	r3, [r2, #0]
 802697a:	2301      	movs	r3, #1
 802697c:	9a02      	ldr	r2, [sp, #8]
 802697e:	612b      	str	r3, [r5, #16]
 8026980:	6013      	str	r3, [r2, #0]
 8026982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026984:	601d      	str	r5, [r3, #0]
 8026986:	e739      	b.n	80267fc <__gethex+0x114>
 8026988:	9900      	ldr	r1, [sp, #0]
 802698a:	0028      	movs	r0, r5
 802698c:	3901      	subs	r1, #1
 802698e:	f000 ff0a 	bl	80277a6 <__any_on>
 8026992:	2800      	cmp	r0, #0
 8026994:	d1ec      	bne.n	8026970 <__gethex+0x288>
 8026996:	0029      	movs	r1, r5
 8026998:	9803      	ldr	r0, [sp, #12]
 802699a:	f000 faa9 	bl	8026ef0 <_Bfree>
 802699e:	2300      	movs	r3, #0
 80269a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80269a2:	2650      	movs	r6, #80	@ 0x50
 80269a4:	6013      	str	r3, [r2, #0]
 80269a6:	e729      	b.n	80267fc <__gethex+0x114>
 80269a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80269aa:	2b00      	cmp	r3, #0
 80269ac:	d1f3      	bne.n	8026996 <__gethex+0x2ae>
 80269ae:	e7df      	b.n	8026970 <__gethex+0x288>
 80269b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80269b2:	2b00      	cmp	r3, #0
 80269b4:	d1dc      	bne.n	8026970 <__gethex+0x288>
 80269b6:	e7ee      	b.n	8026996 <__gethex+0x2ae>
 80269b8:	0802e088 	.word	0x0802e088
 80269bc:	0802e142 	.word	0x0802e142
 80269c0:	0802e153 	.word	0x0802e153
 80269c4:	1e77      	subs	r7, r6, #1
 80269c6:	2c00      	cmp	r4, #0
 80269c8:	d12f      	bne.n	8026a2a <__gethex+0x342>
 80269ca:	2f00      	cmp	r7, #0
 80269cc:	d004      	beq.n	80269d8 <__gethex+0x2f0>
 80269ce:	0039      	movs	r1, r7
 80269d0:	0028      	movs	r0, r5
 80269d2:	f000 fee8 	bl	80277a6 <__any_on>
 80269d6:	0004      	movs	r4, r0
 80269d8:	231f      	movs	r3, #31
 80269da:	117a      	asrs	r2, r7, #5
 80269dc:	401f      	ands	r7, r3
 80269de:	3b1e      	subs	r3, #30
 80269e0:	40bb      	lsls	r3, r7
 80269e2:	9902      	ldr	r1, [sp, #8]
 80269e4:	0092      	lsls	r2, r2, #2
 80269e6:	5852      	ldr	r2, [r2, r1]
 80269e8:	421a      	tst	r2, r3
 80269ea:	d001      	beq.n	80269f0 <__gethex+0x308>
 80269ec:	2302      	movs	r3, #2
 80269ee:	431c      	orrs	r4, r3
 80269f0:	9b00      	ldr	r3, [sp, #0]
 80269f2:	0031      	movs	r1, r6
 80269f4:	1b9b      	subs	r3, r3, r6
 80269f6:	2602      	movs	r6, #2
 80269f8:	0028      	movs	r0, r5
 80269fa:	9300      	str	r3, [sp, #0]
 80269fc:	f7ff fe0c 	bl	8026618 <rshift>
 8026a00:	9b01      	ldr	r3, [sp, #4]
 8026a02:	685f      	ldr	r7, [r3, #4]
 8026a04:	2c00      	cmp	r4, #0
 8026a06:	d03f      	beq.n	8026a88 <__gethex+0x3a0>
 8026a08:	9b01      	ldr	r3, [sp, #4]
 8026a0a:	68db      	ldr	r3, [r3, #12]
 8026a0c:	2b02      	cmp	r3, #2
 8026a0e:	d010      	beq.n	8026a32 <__gethex+0x34a>
 8026a10:	2b03      	cmp	r3, #3
 8026a12:	d012      	beq.n	8026a3a <__gethex+0x352>
 8026a14:	2b01      	cmp	r3, #1
 8026a16:	d106      	bne.n	8026a26 <__gethex+0x33e>
 8026a18:	07a2      	lsls	r2, r4, #30
 8026a1a:	d504      	bpl.n	8026a26 <__gethex+0x33e>
 8026a1c:	9a02      	ldr	r2, [sp, #8]
 8026a1e:	6812      	ldr	r2, [r2, #0]
 8026a20:	4314      	orrs	r4, r2
 8026a22:	421c      	tst	r4, r3
 8026a24:	d10c      	bne.n	8026a40 <__gethex+0x358>
 8026a26:	2310      	movs	r3, #16
 8026a28:	e02d      	b.n	8026a86 <__gethex+0x39e>
 8026a2a:	2401      	movs	r4, #1
 8026a2c:	e7d4      	b.n	80269d8 <__gethex+0x2f0>
 8026a2e:	2601      	movs	r6, #1
 8026a30:	e7e8      	b.n	8026a04 <__gethex+0x31c>
 8026a32:	2301      	movs	r3, #1
 8026a34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026a36:	1a9b      	subs	r3, r3, r2
 8026a38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026a3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	d0f2      	beq.n	8026a26 <__gethex+0x33e>
 8026a40:	692b      	ldr	r3, [r5, #16]
 8026a42:	2000      	movs	r0, #0
 8026a44:	9302      	str	r3, [sp, #8]
 8026a46:	009b      	lsls	r3, r3, #2
 8026a48:	9304      	str	r3, [sp, #16]
 8026a4a:	002b      	movs	r3, r5
 8026a4c:	9a04      	ldr	r2, [sp, #16]
 8026a4e:	3314      	adds	r3, #20
 8026a50:	1899      	adds	r1, r3, r2
 8026a52:	681a      	ldr	r2, [r3, #0]
 8026a54:	1c54      	adds	r4, r2, #1
 8026a56:	d01c      	beq.n	8026a92 <__gethex+0x3aa>
 8026a58:	3201      	adds	r2, #1
 8026a5a:	601a      	str	r2, [r3, #0]
 8026a5c:	002b      	movs	r3, r5
 8026a5e:	3314      	adds	r3, #20
 8026a60:	2e02      	cmp	r6, #2
 8026a62:	d13f      	bne.n	8026ae4 <__gethex+0x3fc>
 8026a64:	9a01      	ldr	r2, [sp, #4]
 8026a66:	9900      	ldr	r1, [sp, #0]
 8026a68:	6812      	ldr	r2, [r2, #0]
 8026a6a:	3a01      	subs	r2, #1
 8026a6c:	428a      	cmp	r2, r1
 8026a6e:	d109      	bne.n	8026a84 <__gethex+0x39c>
 8026a70:	000a      	movs	r2, r1
 8026a72:	201f      	movs	r0, #31
 8026a74:	4010      	ands	r0, r2
 8026a76:	2201      	movs	r2, #1
 8026a78:	4082      	lsls	r2, r0
 8026a7a:	1149      	asrs	r1, r1, #5
 8026a7c:	0089      	lsls	r1, r1, #2
 8026a7e:	58cb      	ldr	r3, [r1, r3]
 8026a80:	4213      	tst	r3, r2
 8026a82:	d13d      	bne.n	8026b00 <__gethex+0x418>
 8026a84:	2320      	movs	r3, #32
 8026a86:	431e      	orrs	r6, r3
 8026a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026a8a:	601d      	str	r5, [r3, #0]
 8026a8c:	9b07      	ldr	r3, [sp, #28]
 8026a8e:	601f      	str	r7, [r3, #0]
 8026a90:	e6b4      	b.n	80267fc <__gethex+0x114>
 8026a92:	c301      	stmia	r3!, {r0}
 8026a94:	4299      	cmp	r1, r3
 8026a96:	d8dc      	bhi.n	8026a52 <__gethex+0x36a>
 8026a98:	68ab      	ldr	r3, [r5, #8]
 8026a9a:	9a02      	ldr	r2, [sp, #8]
 8026a9c:	429a      	cmp	r2, r3
 8026a9e:	db18      	blt.n	8026ad2 <__gethex+0x3ea>
 8026aa0:	6869      	ldr	r1, [r5, #4]
 8026aa2:	9803      	ldr	r0, [sp, #12]
 8026aa4:	3101      	adds	r1, #1
 8026aa6:	f000 f9df 	bl	8026e68 <_Balloc>
 8026aaa:	1e04      	subs	r4, r0, #0
 8026aac:	d104      	bne.n	8026ab8 <__gethex+0x3d0>
 8026aae:	0022      	movs	r2, r4
 8026ab0:	2184      	movs	r1, #132	@ 0x84
 8026ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8026b28 <__gethex+0x440>)
 8026ab4:	481d      	ldr	r0, [pc, #116]	@ (8026b2c <__gethex+0x444>)
 8026ab6:	e6c4      	b.n	8026842 <__gethex+0x15a>
 8026ab8:	0029      	movs	r1, r5
 8026aba:	692a      	ldr	r2, [r5, #16]
 8026abc:	310c      	adds	r1, #12
 8026abe:	3202      	adds	r2, #2
 8026ac0:	0092      	lsls	r2, r2, #2
 8026ac2:	300c      	adds	r0, #12
 8026ac4:	f7fe fed8 	bl	8025878 <memcpy>
 8026ac8:	0029      	movs	r1, r5
 8026aca:	9803      	ldr	r0, [sp, #12]
 8026acc:	f000 fa10 	bl	8026ef0 <_Bfree>
 8026ad0:	0025      	movs	r5, r4
 8026ad2:	692b      	ldr	r3, [r5, #16]
 8026ad4:	1c5a      	adds	r2, r3, #1
 8026ad6:	612a      	str	r2, [r5, #16]
 8026ad8:	2201      	movs	r2, #1
 8026ada:	3304      	adds	r3, #4
 8026adc:	009b      	lsls	r3, r3, #2
 8026ade:	18eb      	adds	r3, r5, r3
 8026ae0:	605a      	str	r2, [r3, #4]
 8026ae2:	e7bb      	b.n	8026a5c <__gethex+0x374>
 8026ae4:	692a      	ldr	r2, [r5, #16]
 8026ae6:	9902      	ldr	r1, [sp, #8]
 8026ae8:	428a      	cmp	r2, r1
 8026aea:	dd0b      	ble.n	8026b04 <__gethex+0x41c>
 8026aec:	2101      	movs	r1, #1
 8026aee:	0028      	movs	r0, r5
 8026af0:	f7ff fd92 	bl	8026618 <rshift>
 8026af4:	9b01      	ldr	r3, [sp, #4]
 8026af6:	3701      	adds	r7, #1
 8026af8:	689b      	ldr	r3, [r3, #8]
 8026afa:	42bb      	cmp	r3, r7
 8026afc:	da00      	bge.n	8026b00 <__gethex+0x418>
 8026afe:	e6df      	b.n	80268c0 <__gethex+0x1d8>
 8026b00:	2601      	movs	r6, #1
 8026b02:	e7bf      	b.n	8026a84 <__gethex+0x39c>
 8026b04:	221f      	movs	r2, #31
 8026b06:	9c00      	ldr	r4, [sp, #0]
 8026b08:	9900      	ldr	r1, [sp, #0]
 8026b0a:	4014      	ands	r4, r2
 8026b0c:	4211      	tst	r1, r2
 8026b0e:	d0f7      	beq.n	8026b00 <__gethex+0x418>
 8026b10:	9a04      	ldr	r2, [sp, #16]
 8026b12:	189b      	adds	r3, r3, r2
 8026b14:	3b04      	subs	r3, #4
 8026b16:	6818      	ldr	r0, [r3, #0]
 8026b18:	f000 fa9e 	bl	8027058 <__hi0bits>
 8026b1c:	2320      	movs	r3, #32
 8026b1e:	1b1b      	subs	r3, r3, r4
 8026b20:	4298      	cmp	r0, r3
 8026b22:	dbe3      	blt.n	8026aec <__gethex+0x404>
 8026b24:	e7ec      	b.n	8026b00 <__gethex+0x418>
 8026b26:	46c0      	nop			@ (mov r8, r8)
 8026b28:	0802e142 	.word	0x0802e142
 8026b2c:	0802e153 	.word	0x0802e153

08026b30 <L_shift>:
 8026b30:	2308      	movs	r3, #8
 8026b32:	b570      	push	{r4, r5, r6, lr}
 8026b34:	2520      	movs	r5, #32
 8026b36:	1a9a      	subs	r2, r3, r2
 8026b38:	0092      	lsls	r2, r2, #2
 8026b3a:	1aad      	subs	r5, r5, r2
 8026b3c:	6843      	ldr	r3, [r0, #4]
 8026b3e:	6804      	ldr	r4, [r0, #0]
 8026b40:	001e      	movs	r6, r3
 8026b42:	40ae      	lsls	r6, r5
 8026b44:	40d3      	lsrs	r3, r2
 8026b46:	4334      	orrs	r4, r6
 8026b48:	6004      	str	r4, [r0, #0]
 8026b4a:	6043      	str	r3, [r0, #4]
 8026b4c:	3004      	adds	r0, #4
 8026b4e:	4288      	cmp	r0, r1
 8026b50:	d3f4      	bcc.n	8026b3c <L_shift+0xc>
 8026b52:	bd70      	pop	{r4, r5, r6, pc}

08026b54 <__match>:
 8026b54:	b530      	push	{r4, r5, lr}
 8026b56:	6803      	ldr	r3, [r0, #0]
 8026b58:	780c      	ldrb	r4, [r1, #0]
 8026b5a:	3301      	adds	r3, #1
 8026b5c:	2c00      	cmp	r4, #0
 8026b5e:	d102      	bne.n	8026b66 <__match+0x12>
 8026b60:	6003      	str	r3, [r0, #0]
 8026b62:	2001      	movs	r0, #1
 8026b64:	bd30      	pop	{r4, r5, pc}
 8026b66:	781a      	ldrb	r2, [r3, #0]
 8026b68:	0015      	movs	r5, r2
 8026b6a:	3d41      	subs	r5, #65	@ 0x41
 8026b6c:	2d19      	cmp	r5, #25
 8026b6e:	d800      	bhi.n	8026b72 <__match+0x1e>
 8026b70:	3220      	adds	r2, #32
 8026b72:	3101      	adds	r1, #1
 8026b74:	42a2      	cmp	r2, r4
 8026b76:	d0ef      	beq.n	8026b58 <__match+0x4>
 8026b78:	2000      	movs	r0, #0
 8026b7a:	e7f3      	b.n	8026b64 <__match+0x10>

08026b7c <__hexnan>:
 8026b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026b7e:	680b      	ldr	r3, [r1, #0]
 8026b80:	b08b      	sub	sp, #44	@ 0x2c
 8026b82:	9201      	str	r2, [sp, #4]
 8026b84:	9901      	ldr	r1, [sp, #4]
 8026b86:	115a      	asrs	r2, r3, #5
 8026b88:	0092      	lsls	r2, r2, #2
 8026b8a:	188a      	adds	r2, r1, r2
 8026b8c:	9202      	str	r2, [sp, #8]
 8026b8e:	0019      	movs	r1, r3
 8026b90:	221f      	movs	r2, #31
 8026b92:	4011      	ands	r1, r2
 8026b94:	9008      	str	r0, [sp, #32]
 8026b96:	9106      	str	r1, [sp, #24]
 8026b98:	4213      	tst	r3, r2
 8026b9a:	d002      	beq.n	8026ba2 <__hexnan+0x26>
 8026b9c:	9b02      	ldr	r3, [sp, #8]
 8026b9e:	3304      	adds	r3, #4
 8026ba0:	9302      	str	r3, [sp, #8]
 8026ba2:	9b02      	ldr	r3, [sp, #8]
 8026ba4:	2500      	movs	r5, #0
 8026ba6:	1f1f      	subs	r7, r3, #4
 8026ba8:	003e      	movs	r6, r7
 8026baa:	003c      	movs	r4, r7
 8026bac:	9b08      	ldr	r3, [sp, #32]
 8026bae:	603d      	str	r5, [r7, #0]
 8026bb0:	681b      	ldr	r3, [r3, #0]
 8026bb2:	9507      	str	r5, [sp, #28]
 8026bb4:	9305      	str	r3, [sp, #20]
 8026bb6:	9503      	str	r5, [sp, #12]
 8026bb8:	9b05      	ldr	r3, [sp, #20]
 8026bba:	3301      	adds	r3, #1
 8026bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bbe:	9b05      	ldr	r3, [sp, #20]
 8026bc0:	785b      	ldrb	r3, [r3, #1]
 8026bc2:	9304      	str	r3, [sp, #16]
 8026bc4:	2b00      	cmp	r3, #0
 8026bc6:	d028      	beq.n	8026c1a <__hexnan+0x9e>
 8026bc8:	9804      	ldr	r0, [sp, #16]
 8026bca:	f7ff fd78 	bl	80266be <__hexdig_fun>
 8026bce:	2800      	cmp	r0, #0
 8026bd0:	d155      	bne.n	8026c7e <__hexnan+0x102>
 8026bd2:	9b04      	ldr	r3, [sp, #16]
 8026bd4:	2b20      	cmp	r3, #32
 8026bd6:	d819      	bhi.n	8026c0c <__hexnan+0x90>
 8026bd8:	9b03      	ldr	r3, [sp, #12]
 8026bda:	9a07      	ldr	r2, [sp, #28]
 8026bdc:	4293      	cmp	r3, r2
 8026bde:	dd12      	ble.n	8026c06 <__hexnan+0x8a>
 8026be0:	42b4      	cmp	r4, r6
 8026be2:	d206      	bcs.n	8026bf2 <__hexnan+0x76>
 8026be4:	2d07      	cmp	r5, #7
 8026be6:	dc04      	bgt.n	8026bf2 <__hexnan+0x76>
 8026be8:	002a      	movs	r2, r5
 8026bea:	0031      	movs	r1, r6
 8026bec:	0020      	movs	r0, r4
 8026bee:	f7ff ff9f 	bl	8026b30 <L_shift>
 8026bf2:	9b01      	ldr	r3, [sp, #4]
 8026bf4:	2508      	movs	r5, #8
 8026bf6:	429c      	cmp	r4, r3
 8026bf8:	d905      	bls.n	8026c06 <__hexnan+0x8a>
 8026bfa:	1f26      	subs	r6, r4, #4
 8026bfc:	2500      	movs	r5, #0
 8026bfe:	0034      	movs	r4, r6
 8026c00:	9b03      	ldr	r3, [sp, #12]
 8026c02:	6035      	str	r5, [r6, #0]
 8026c04:	9307      	str	r3, [sp, #28]
 8026c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c08:	9305      	str	r3, [sp, #20]
 8026c0a:	e7d5      	b.n	8026bb8 <__hexnan+0x3c>
 8026c0c:	9b04      	ldr	r3, [sp, #16]
 8026c0e:	2b29      	cmp	r3, #41	@ 0x29
 8026c10:	d15a      	bne.n	8026cc8 <__hexnan+0x14c>
 8026c12:	9b05      	ldr	r3, [sp, #20]
 8026c14:	9a08      	ldr	r2, [sp, #32]
 8026c16:	3302      	adds	r3, #2
 8026c18:	6013      	str	r3, [r2, #0]
 8026c1a:	9b03      	ldr	r3, [sp, #12]
 8026c1c:	2b00      	cmp	r3, #0
 8026c1e:	d053      	beq.n	8026cc8 <__hexnan+0x14c>
 8026c20:	42b4      	cmp	r4, r6
 8026c22:	d206      	bcs.n	8026c32 <__hexnan+0xb6>
 8026c24:	2d07      	cmp	r5, #7
 8026c26:	dc04      	bgt.n	8026c32 <__hexnan+0xb6>
 8026c28:	002a      	movs	r2, r5
 8026c2a:	0031      	movs	r1, r6
 8026c2c:	0020      	movs	r0, r4
 8026c2e:	f7ff ff7f 	bl	8026b30 <L_shift>
 8026c32:	9b01      	ldr	r3, [sp, #4]
 8026c34:	429c      	cmp	r4, r3
 8026c36:	d936      	bls.n	8026ca6 <__hexnan+0x12a>
 8026c38:	001a      	movs	r2, r3
 8026c3a:	0023      	movs	r3, r4
 8026c3c:	cb02      	ldmia	r3!, {r1}
 8026c3e:	c202      	stmia	r2!, {r1}
 8026c40:	429f      	cmp	r7, r3
 8026c42:	d2fb      	bcs.n	8026c3c <__hexnan+0xc0>
 8026c44:	9b02      	ldr	r3, [sp, #8]
 8026c46:	1c62      	adds	r2, r4, #1
 8026c48:	1ed9      	subs	r1, r3, #3
 8026c4a:	2304      	movs	r3, #4
 8026c4c:	4291      	cmp	r1, r2
 8026c4e:	d305      	bcc.n	8026c5c <__hexnan+0xe0>
 8026c50:	9b02      	ldr	r3, [sp, #8]
 8026c52:	3b04      	subs	r3, #4
 8026c54:	1b1b      	subs	r3, r3, r4
 8026c56:	089b      	lsrs	r3, r3, #2
 8026c58:	3301      	adds	r3, #1
 8026c5a:	009b      	lsls	r3, r3, #2
 8026c5c:	9a01      	ldr	r2, [sp, #4]
 8026c5e:	18d3      	adds	r3, r2, r3
 8026c60:	2200      	movs	r2, #0
 8026c62:	c304      	stmia	r3!, {r2}
 8026c64:	429f      	cmp	r7, r3
 8026c66:	d2fc      	bcs.n	8026c62 <__hexnan+0xe6>
 8026c68:	683b      	ldr	r3, [r7, #0]
 8026c6a:	2b00      	cmp	r3, #0
 8026c6c:	d104      	bne.n	8026c78 <__hexnan+0xfc>
 8026c6e:	9b01      	ldr	r3, [sp, #4]
 8026c70:	429f      	cmp	r7, r3
 8026c72:	d127      	bne.n	8026cc4 <__hexnan+0x148>
 8026c74:	2301      	movs	r3, #1
 8026c76:	603b      	str	r3, [r7, #0]
 8026c78:	2005      	movs	r0, #5
 8026c7a:	b00b      	add	sp, #44	@ 0x2c
 8026c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026c7e:	9b03      	ldr	r3, [sp, #12]
 8026c80:	3501      	adds	r5, #1
 8026c82:	3301      	adds	r3, #1
 8026c84:	9303      	str	r3, [sp, #12]
 8026c86:	2d08      	cmp	r5, #8
 8026c88:	dd06      	ble.n	8026c98 <__hexnan+0x11c>
 8026c8a:	9b01      	ldr	r3, [sp, #4]
 8026c8c:	429c      	cmp	r4, r3
 8026c8e:	d9ba      	bls.n	8026c06 <__hexnan+0x8a>
 8026c90:	2300      	movs	r3, #0
 8026c92:	2501      	movs	r5, #1
 8026c94:	3c04      	subs	r4, #4
 8026c96:	6023      	str	r3, [r4, #0]
 8026c98:	220f      	movs	r2, #15
 8026c9a:	6823      	ldr	r3, [r4, #0]
 8026c9c:	4010      	ands	r0, r2
 8026c9e:	011b      	lsls	r3, r3, #4
 8026ca0:	4303      	orrs	r3, r0
 8026ca2:	6023      	str	r3, [r4, #0]
 8026ca4:	e7af      	b.n	8026c06 <__hexnan+0x8a>
 8026ca6:	9b06      	ldr	r3, [sp, #24]
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	d0dd      	beq.n	8026c68 <__hexnan+0xec>
 8026cac:	2320      	movs	r3, #32
 8026cae:	9a06      	ldr	r2, [sp, #24]
 8026cb0:	9902      	ldr	r1, [sp, #8]
 8026cb2:	1a9b      	subs	r3, r3, r2
 8026cb4:	2201      	movs	r2, #1
 8026cb6:	4252      	negs	r2, r2
 8026cb8:	40da      	lsrs	r2, r3
 8026cba:	3904      	subs	r1, #4
 8026cbc:	680b      	ldr	r3, [r1, #0]
 8026cbe:	4013      	ands	r3, r2
 8026cc0:	600b      	str	r3, [r1, #0]
 8026cc2:	e7d1      	b.n	8026c68 <__hexnan+0xec>
 8026cc4:	3f04      	subs	r7, #4
 8026cc6:	e7cf      	b.n	8026c68 <__hexnan+0xec>
 8026cc8:	2004      	movs	r0, #4
 8026cca:	e7d6      	b.n	8026c7a <__hexnan+0xfe>

08026ccc <malloc>:
 8026ccc:	b510      	push	{r4, lr}
 8026cce:	4b03      	ldr	r3, [pc, #12]	@ (8026cdc <malloc+0x10>)
 8026cd0:	0001      	movs	r1, r0
 8026cd2:	6818      	ldr	r0, [r3, #0]
 8026cd4:	f000 f826 	bl	8026d24 <_malloc_r>
 8026cd8:	bd10      	pop	{r4, pc}
 8026cda:	46c0      	nop			@ (mov r8, r8)
 8026cdc:	200003e0 	.word	0x200003e0

08026ce0 <sbrk_aligned>:
 8026ce0:	b570      	push	{r4, r5, r6, lr}
 8026ce2:	4e0f      	ldr	r6, [pc, #60]	@ (8026d20 <sbrk_aligned+0x40>)
 8026ce4:	000d      	movs	r5, r1
 8026ce6:	6831      	ldr	r1, [r6, #0]
 8026ce8:	0004      	movs	r4, r0
 8026cea:	2900      	cmp	r1, #0
 8026cec:	d102      	bne.n	8026cf4 <sbrk_aligned+0x14>
 8026cee:	f001 f981 	bl	8027ff4 <_sbrk_r>
 8026cf2:	6030      	str	r0, [r6, #0]
 8026cf4:	0029      	movs	r1, r5
 8026cf6:	0020      	movs	r0, r4
 8026cf8:	f001 f97c 	bl	8027ff4 <_sbrk_r>
 8026cfc:	1c43      	adds	r3, r0, #1
 8026cfe:	d103      	bne.n	8026d08 <sbrk_aligned+0x28>
 8026d00:	2501      	movs	r5, #1
 8026d02:	426d      	negs	r5, r5
 8026d04:	0028      	movs	r0, r5
 8026d06:	bd70      	pop	{r4, r5, r6, pc}
 8026d08:	2303      	movs	r3, #3
 8026d0a:	1cc5      	adds	r5, r0, #3
 8026d0c:	439d      	bics	r5, r3
 8026d0e:	42a8      	cmp	r0, r5
 8026d10:	d0f8      	beq.n	8026d04 <sbrk_aligned+0x24>
 8026d12:	1a29      	subs	r1, r5, r0
 8026d14:	0020      	movs	r0, r4
 8026d16:	f001 f96d 	bl	8027ff4 <_sbrk_r>
 8026d1a:	3001      	adds	r0, #1
 8026d1c:	d1f2      	bne.n	8026d04 <sbrk_aligned+0x24>
 8026d1e:	e7ef      	b.n	8026d00 <sbrk_aligned+0x20>
 8026d20:	20003624 	.word	0x20003624

08026d24 <_malloc_r>:
 8026d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026d26:	2203      	movs	r2, #3
 8026d28:	1ccb      	adds	r3, r1, #3
 8026d2a:	4393      	bics	r3, r2
 8026d2c:	3308      	adds	r3, #8
 8026d2e:	0005      	movs	r5, r0
 8026d30:	001f      	movs	r7, r3
 8026d32:	2b0c      	cmp	r3, #12
 8026d34:	d234      	bcs.n	8026da0 <_malloc_r+0x7c>
 8026d36:	270c      	movs	r7, #12
 8026d38:	42b9      	cmp	r1, r7
 8026d3a:	d833      	bhi.n	8026da4 <_malloc_r+0x80>
 8026d3c:	0028      	movs	r0, r5
 8026d3e:	f000 f883 	bl	8026e48 <__malloc_lock>
 8026d42:	4e37      	ldr	r6, [pc, #220]	@ (8026e20 <_malloc_r+0xfc>)
 8026d44:	6833      	ldr	r3, [r6, #0]
 8026d46:	001c      	movs	r4, r3
 8026d48:	2c00      	cmp	r4, #0
 8026d4a:	d12f      	bne.n	8026dac <_malloc_r+0x88>
 8026d4c:	0039      	movs	r1, r7
 8026d4e:	0028      	movs	r0, r5
 8026d50:	f7ff ffc6 	bl	8026ce0 <sbrk_aligned>
 8026d54:	0004      	movs	r4, r0
 8026d56:	1c43      	adds	r3, r0, #1
 8026d58:	d15f      	bne.n	8026e1a <_malloc_r+0xf6>
 8026d5a:	6834      	ldr	r4, [r6, #0]
 8026d5c:	9400      	str	r4, [sp, #0]
 8026d5e:	9b00      	ldr	r3, [sp, #0]
 8026d60:	2b00      	cmp	r3, #0
 8026d62:	d14a      	bne.n	8026dfa <_malloc_r+0xd6>
 8026d64:	2c00      	cmp	r4, #0
 8026d66:	d052      	beq.n	8026e0e <_malloc_r+0xea>
 8026d68:	6823      	ldr	r3, [r4, #0]
 8026d6a:	0028      	movs	r0, r5
 8026d6c:	18e3      	adds	r3, r4, r3
 8026d6e:	9900      	ldr	r1, [sp, #0]
 8026d70:	9301      	str	r3, [sp, #4]
 8026d72:	f001 f93f 	bl	8027ff4 <_sbrk_r>
 8026d76:	9b01      	ldr	r3, [sp, #4]
 8026d78:	4283      	cmp	r3, r0
 8026d7a:	d148      	bne.n	8026e0e <_malloc_r+0xea>
 8026d7c:	6823      	ldr	r3, [r4, #0]
 8026d7e:	0028      	movs	r0, r5
 8026d80:	1aff      	subs	r7, r7, r3
 8026d82:	0039      	movs	r1, r7
 8026d84:	f7ff ffac 	bl	8026ce0 <sbrk_aligned>
 8026d88:	3001      	adds	r0, #1
 8026d8a:	d040      	beq.n	8026e0e <_malloc_r+0xea>
 8026d8c:	6823      	ldr	r3, [r4, #0]
 8026d8e:	19db      	adds	r3, r3, r7
 8026d90:	6023      	str	r3, [r4, #0]
 8026d92:	6833      	ldr	r3, [r6, #0]
 8026d94:	685a      	ldr	r2, [r3, #4]
 8026d96:	2a00      	cmp	r2, #0
 8026d98:	d133      	bne.n	8026e02 <_malloc_r+0xde>
 8026d9a:	9b00      	ldr	r3, [sp, #0]
 8026d9c:	6033      	str	r3, [r6, #0]
 8026d9e:	e019      	b.n	8026dd4 <_malloc_r+0xb0>
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	dac9      	bge.n	8026d38 <_malloc_r+0x14>
 8026da4:	230c      	movs	r3, #12
 8026da6:	602b      	str	r3, [r5, #0]
 8026da8:	2000      	movs	r0, #0
 8026daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026dac:	6821      	ldr	r1, [r4, #0]
 8026dae:	1bc9      	subs	r1, r1, r7
 8026db0:	d420      	bmi.n	8026df4 <_malloc_r+0xd0>
 8026db2:	290b      	cmp	r1, #11
 8026db4:	d90a      	bls.n	8026dcc <_malloc_r+0xa8>
 8026db6:	19e2      	adds	r2, r4, r7
 8026db8:	6027      	str	r7, [r4, #0]
 8026dba:	42a3      	cmp	r3, r4
 8026dbc:	d104      	bne.n	8026dc8 <_malloc_r+0xa4>
 8026dbe:	6032      	str	r2, [r6, #0]
 8026dc0:	6863      	ldr	r3, [r4, #4]
 8026dc2:	6011      	str	r1, [r2, #0]
 8026dc4:	6053      	str	r3, [r2, #4]
 8026dc6:	e005      	b.n	8026dd4 <_malloc_r+0xb0>
 8026dc8:	605a      	str	r2, [r3, #4]
 8026dca:	e7f9      	b.n	8026dc0 <_malloc_r+0x9c>
 8026dcc:	6862      	ldr	r2, [r4, #4]
 8026dce:	42a3      	cmp	r3, r4
 8026dd0:	d10e      	bne.n	8026df0 <_malloc_r+0xcc>
 8026dd2:	6032      	str	r2, [r6, #0]
 8026dd4:	0028      	movs	r0, r5
 8026dd6:	f000 f83f 	bl	8026e58 <__malloc_unlock>
 8026dda:	0020      	movs	r0, r4
 8026ddc:	2207      	movs	r2, #7
 8026dde:	300b      	adds	r0, #11
 8026de0:	1d23      	adds	r3, r4, #4
 8026de2:	4390      	bics	r0, r2
 8026de4:	1ac2      	subs	r2, r0, r3
 8026de6:	4298      	cmp	r0, r3
 8026de8:	d0df      	beq.n	8026daa <_malloc_r+0x86>
 8026dea:	1a1b      	subs	r3, r3, r0
 8026dec:	50a3      	str	r3, [r4, r2]
 8026dee:	e7dc      	b.n	8026daa <_malloc_r+0x86>
 8026df0:	605a      	str	r2, [r3, #4]
 8026df2:	e7ef      	b.n	8026dd4 <_malloc_r+0xb0>
 8026df4:	0023      	movs	r3, r4
 8026df6:	6864      	ldr	r4, [r4, #4]
 8026df8:	e7a6      	b.n	8026d48 <_malloc_r+0x24>
 8026dfa:	9c00      	ldr	r4, [sp, #0]
 8026dfc:	6863      	ldr	r3, [r4, #4]
 8026dfe:	9300      	str	r3, [sp, #0]
 8026e00:	e7ad      	b.n	8026d5e <_malloc_r+0x3a>
 8026e02:	001a      	movs	r2, r3
 8026e04:	685b      	ldr	r3, [r3, #4]
 8026e06:	42a3      	cmp	r3, r4
 8026e08:	d1fb      	bne.n	8026e02 <_malloc_r+0xde>
 8026e0a:	2300      	movs	r3, #0
 8026e0c:	e7da      	b.n	8026dc4 <_malloc_r+0xa0>
 8026e0e:	230c      	movs	r3, #12
 8026e10:	0028      	movs	r0, r5
 8026e12:	602b      	str	r3, [r5, #0]
 8026e14:	f000 f820 	bl	8026e58 <__malloc_unlock>
 8026e18:	e7c6      	b.n	8026da8 <_malloc_r+0x84>
 8026e1a:	6007      	str	r7, [r0, #0]
 8026e1c:	e7da      	b.n	8026dd4 <_malloc_r+0xb0>
 8026e1e:	46c0      	nop			@ (mov r8, r8)
 8026e20:	20003628 	.word	0x20003628

08026e24 <__ascii_mbtowc>:
 8026e24:	b082      	sub	sp, #8
 8026e26:	2900      	cmp	r1, #0
 8026e28:	d100      	bne.n	8026e2c <__ascii_mbtowc+0x8>
 8026e2a:	a901      	add	r1, sp, #4
 8026e2c:	1e10      	subs	r0, r2, #0
 8026e2e:	d006      	beq.n	8026e3e <__ascii_mbtowc+0x1a>
 8026e30:	2b00      	cmp	r3, #0
 8026e32:	d006      	beq.n	8026e42 <__ascii_mbtowc+0x1e>
 8026e34:	7813      	ldrb	r3, [r2, #0]
 8026e36:	600b      	str	r3, [r1, #0]
 8026e38:	7810      	ldrb	r0, [r2, #0]
 8026e3a:	1e43      	subs	r3, r0, #1
 8026e3c:	4198      	sbcs	r0, r3
 8026e3e:	b002      	add	sp, #8
 8026e40:	4770      	bx	lr
 8026e42:	2002      	movs	r0, #2
 8026e44:	4240      	negs	r0, r0
 8026e46:	e7fa      	b.n	8026e3e <__ascii_mbtowc+0x1a>

08026e48 <__malloc_lock>:
 8026e48:	b510      	push	{r4, lr}
 8026e4a:	4802      	ldr	r0, [pc, #8]	@ (8026e54 <__malloc_lock+0xc>)
 8026e4c:	f7fe fd07 	bl	802585e <__retarget_lock_acquire_recursive>
 8026e50:	bd10      	pop	{r4, pc}
 8026e52:	46c0      	nop			@ (mov r8, r8)
 8026e54:	20003620 	.word	0x20003620

08026e58 <__malloc_unlock>:
 8026e58:	b510      	push	{r4, lr}
 8026e5a:	4802      	ldr	r0, [pc, #8]	@ (8026e64 <__malloc_unlock+0xc>)
 8026e5c:	f7fe fd00 	bl	8025860 <__retarget_lock_release_recursive>
 8026e60:	bd10      	pop	{r4, pc}
 8026e62:	46c0      	nop			@ (mov r8, r8)
 8026e64:	20003620 	.word	0x20003620

08026e68 <_Balloc>:
 8026e68:	b570      	push	{r4, r5, r6, lr}
 8026e6a:	69c5      	ldr	r5, [r0, #28]
 8026e6c:	0006      	movs	r6, r0
 8026e6e:	000c      	movs	r4, r1
 8026e70:	2d00      	cmp	r5, #0
 8026e72:	d10e      	bne.n	8026e92 <_Balloc+0x2a>
 8026e74:	2010      	movs	r0, #16
 8026e76:	f7ff ff29 	bl	8026ccc <malloc>
 8026e7a:	1e02      	subs	r2, r0, #0
 8026e7c:	61f0      	str	r0, [r6, #28]
 8026e7e:	d104      	bne.n	8026e8a <_Balloc+0x22>
 8026e80:	216b      	movs	r1, #107	@ 0x6b
 8026e82:	4b19      	ldr	r3, [pc, #100]	@ (8026ee8 <_Balloc+0x80>)
 8026e84:	4819      	ldr	r0, [pc, #100]	@ (8026eec <_Balloc+0x84>)
 8026e86:	f001 f8c7 	bl	8028018 <__assert_func>
 8026e8a:	6045      	str	r5, [r0, #4]
 8026e8c:	6085      	str	r5, [r0, #8]
 8026e8e:	6005      	str	r5, [r0, #0]
 8026e90:	60c5      	str	r5, [r0, #12]
 8026e92:	69f5      	ldr	r5, [r6, #28]
 8026e94:	68eb      	ldr	r3, [r5, #12]
 8026e96:	2b00      	cmp	r3, #0
 8026e98:	d013      	beq.n	8026ec2 <_Balloc+0x5a>
 8026e9a:	69f3      	ldr	r3, [r6, #28]
 8026e9c:	00a2      	lsls	r2, r4, #2
 8026e9e:	68db      	ldr	r3, [r3, #12]
 8026ea0:	189b      	adds	r3, r3, r2
 8026ea2:	6818      	ldr	r0, [r3, #0]
 8026ea4:	2800      	cmp	r0, #0
 8026ea6:	d118      	bne.n	8026eda <_Balloc+0x72>
 8026ea8:	2101      	movs	r1, #1
 8026eaa:	000d      	movs	r5, r1
 8026eac:	40a5      	lsls	r5, r4
 8026eae:	1d6a      	adds	r2, r5, #5
 8026eb0:	0030      	movs	r0, r6
 8026eb2:	0092      	lsls	r2, r2, #2
 8026eb4:	f001 f8ce 	bl	8028054 <_calloc_r>
 8026eb8:	2800      	cmp	r0, #0
 8026eba:	d00c      	beq.n	8026ed6 <_Balloc+0x6e>
 8026ebc:	6044      	str	r4, [r0, #4]
 8026ebe:	6085      	str	r5, [r0, #8]
 8026ec0:	e00d      	b.n	8026ede <_Balloc+0x76>
 8026ec2:	2221      	movs	r2, #33	@ 0x21
 8026ec4:	2104      	movs	r1, #4
 8026ec6:	0030      	movs	r0, r6
 8026ec8:	f001 f8c4 	bl	8028054 <_calloc_r>
 8026ecc:	69f3      	ldr	r3, [r6, #28]
 8026ece:	60e8      	str	r0, [r5, #12]
 8026ed0:	68db      	ldr	r3, [r3, #12]
 8026ed2:	2b00      	cmp	r3, #0
 8026ed4:	d1e1      	bne.n	8026e9a <_Balloc+0x32>
 8026ed6:	2000      	movs	r0, #0
 8026ed8:	bd70      	pop	{r4, r5, r6, pc}
 8026eda:	6802      	ldr	r2, [r0, #0]
 8026edc:	601a      	str	r2, [r3, #0]
 8026ede:	2300      	movs	r3, #0
 8026ee0:	6103      	str	r3, [r0, #16]
 8026ee2:	60c3      	str	r3, [r0, #12]
 8026ee4:	e7f8      	b.n	8026ed8 <_Balloc+0x70>
 8026ee6:	46c0      	nop			@ (mov r8, r8)
 8026ee8:	0802e0d3 	.word	0x0802e0d3
 8026eec:	0802e1b3 	.word	0x0802e1b3

08026ef0 <_Bfree>:
 8026ef0:	b570      	push	{r4, r5, r6, lr}
 8026ef2:	69c6      	ldr	r6, [r0, #28]
 8026ef4:	0005      	movs	r5, r0
 8026ef6:	000c      	movs	r4, r1
 8026ef8:	2e00      	cmp	r6, #0
 8026efa:	d10e      	bne.n	8026f1a <_Bfree+0x2a>
 8026efc:	2010      	movs	r0, #16
 8026efe:	f7ff fee5 	bl	8026ccc <malloc>
 8026f02:	1e02      	subs	r2, r0, #0
 8026f04:	61e8      	str	r0, [r5, #28]
 8026f06:	d104      	bne.n	8026f12 <_Bfree+0x22>
 8026f08:	218f      	movs	r1, #143	@ 0x8f
 8026f0a:	4b09      	ldr	r3, [pc, #36]	@ (8026f30 <_Bfree+0x40>)
 8026f0c:	4809      	ldr	r0, [pc, #36]	@ (8026f34 <_Bfree+0x44>)
 8026f0e:	f001 f883 	bl	8028018 <__assert_func>
 8026f12:	6046      	str	r6, [r0, #4]
 8026f14:	6086      	str	r6, [r0, #8]
 8026f16:	6006      	str	r6, [r0, #0]
 8026f18:	60c6      	str	r6, [r0, #12]
 8026f1a:	2c00      	cmp	r4, #0
 8026f1c:	d007      	beq.n	8026f2e <_Bfree+0x3e>
 8026f1e:	69eb      	ldr	r3, [r5, #28]
 8026f20:	6862      	ldr	r2, [r4, #4]
 8026f22:	68db      	ldr	r3, [r3, #12]
 8026f24:	0092      	lsls	r2, r2, #2
 8026f26:	189b      	adds	r3, r3, r2
 8026f28:	681a      	ldr	r2, [r3, #0]
 8026f2a:	6022      	str	r2, [r4, #0]
 8026f2c:	601c      	str	r4, [r3, #0]
 8026f2e:	bd70      	pop	{r4, r5, r6, pc}
 8026f30:	0802e0d3 	.word	0x0802e0d3
 8026f34:	0802e1b3 	.word	0x0802e1b3

08026f38 <__multadd>:
 8026f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026f3a:	000f      	movs	r7, r1
 8026f3c:	9001      	str	r0, [sp, #4]
 8026f3e:	000c      	movs	r4, r1
 8026f40:	001e      	movs	r6, r3
 8026f42:	2000      	movs	r0, #0
 8026f44:	690d      	ldr	r5, [r1, #16]
 8026f46:	3714      	adds	r7, #20
 8026f48:	683b      	ldr	r3, [r7, #0]
 8026f4a:	3001      	adds	r0, #1
 8026f4c:	b299      	uxth	r1, r3
 8026f4e:	4351      	muls	r1, r2
 8026f50:	0c1b      	lsrs	r3, r3, #16
 8026f52:	4353      	muls	r3, r2
 8026f54:	1989      	adds	r1, r1, r6
 8026f56:	0c0e      	lsrs	r6, r1, #16
 8026f58:	199b      	adds	r3, r3, r6
 8026f5a:	0c1e      	lsrs	r6, r3, #16
 8026f5c:	b289      	uxth	r1, r1
 8026f5e:	041b      	lsls	r3, r3, #16
 8026f60:	185b      	adds	r3, r3, r1
 8026f62:	c708      	stmia	r7!, {r3}
 8026f64:	4285      	cmp	r5, r0
 8026f66:	dcef      	bgt.n	8026f48 <__multadd+0x10>
 8026f68:	2e00      	cmp	r6, #0
 8026f6a:	d022      	beq.n	8026fb2 <__multadd+0x7a>
 8026f6c:	68a3      	ldr	r3, [r4, #8]
 8026f6e:	42ab      	cmp	r3, r5
 8026f70:	dc19      	bgt.n	8026fa6 <__multadd+0x6e>
 8026f72:	6861      	ldr	r1, [r4, #4]
 8026f74:	9801      	ldr	r0, [sp, #4]
 8026f76:	3101      	adds	r1, #1
 8026f78:	f7ff ff76 	bl	8026e68 <_Balloc>
 8026f7c:	1e07      	subs	r7, r0, #0
 8026f7e:	d105      	bne.n	8026f8c <__multadd+0x54>
 8026f80:	003a      	movs	r2, r7
 8026f82:	21ba      	movs	r1, #186	@ 0xba
 8026f84:	4b0c      	ldr	r3, [pc, #48]	@ (8026fb8 <__multadd+0x80>)
 8026f86:	480d      	ldr	r0, [pc, #52]	@ (8026fbc <__multadd+0x84>)
 8026f88:	f001 f846 	bl	8028018 <__assert_func>
 8026f8c:	0021      	movs	r1, r4
 8026f8e:	6922      	ldr	r2, [r4, #16]
 8026f90:	310c      	adds	r1, #12
 8026f92:	3202      	adds	r2, #2
 8026f94:	0092      	lsls	r2, r2, #2
 8026f96:	300c      	adds	r0, #12
 8026f98:	f7fe fc6e 	bl	8025878 <memcpy>
 8026f9c:	0021      	movs	r1, r4
 8026f9e:	9801      	ldr	r0, [sp, #4]
 8026fa0:	f7ff ffa6 	bl	8026ef0 <_Bfree>
 8026fa4:	003c      	movs	r4, r7
 8026fa6:	1d2b      	adds	r3, r5, #4
 8026fa8:	009b      	lsls	r3, r3, #2
 8026faa:	18e3      	adds	r3, r4, r3
 8026fac:	3501      	adds	r5, #1
 8026fae:	605e      	str	r6, [r3, #4]
 8026fb0:	6125      	str	r5, [r4, #16]
 8026fb2:	0020      	movs	r0, r4
 8026fb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8026fb6:	46c0      	nop			@ (mov r8, r8)
 8026fb8:	0802e142 	.word	0x0802e142
 8026fbc:	0802e1b3 	.word	0x0802e1b3

08026fc0 <__s2b>:
 8026fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026fc2:	0007      	movs	r7, r0
 8026fc4:	0018      	movs	r0, r3
 8026fc6:	000c      	movs	r4, r1
 8026fc8:	3008      	adds	r0, #8
 8026fca:	2109      	movs	r1, #9
 8026fcc:	9301      	str	r3, [sp, #4]
 8026fce:	0015      	movs	r5, r2
 8026fd0:	f7d9 f972 	bl	80002b8 <__divsi3>
 8026fd4:	2301      	movs	r3, #1
 8026fd6:	2100      	movs	r1, #0
 8026fd8:	4283      	cmp	r3, r0
 8026fda:	db0a      	blt.n	8026ff2 <__s2b+0x32>
 8026fdc:	0038      	movs	r0, r7
 8026fde:	f7ff ff43 	bl	8026e68 <_Balloc>
 8026fe2:	1e01      	subs	r1, r0, #0
 8026fe4:	d108      	bne.n	8026ff8 <__s2b+0x38>
 8026fe6:	000a      	movs	r2, r1
 8026fe8:	4b19      	ldr	r3, [pc, #100]	@ (8027050 <__s2b+0x90>)
 8026fea:	481a      	ldr	r0, [pc, #104]	@ (8027054 <__s2b+0x94>)
 8026fec:	31d3      	adds	r1, #211	@ 0xd3
 8026fee:	f001 f813 	bl	8028018 <__assert_func>
 8026ff2:	005b      	lsls	r3, r3, #1
 8026ff4:	3101      	adds	r1, #1
 8026ff6:	e7ef      	b.n	8026fd8 <__s2b+0x18>
 8026ff8:	9b08      	ldr	r3, [sp, #32]
 8026ffa:	6143      	str	r3, [r0, #20]
 8026ffc:	2301      	movs	r3, #1
 8026ffe:	6103      	str	r3, [r0, #16]
 8027000:	2d09      	cmp	r5, #9
 8027002:	dd18      	ble.n	8027036 <__s2b+0x76>
 8027004:	0023      	movs	r3, r4
 8027006:	3309      	adds	r3, #9
 8027008:	001e      	movs	r6, r3
 802700a:	9300      	str	r3, [sp, #0]
 802700c:	1964      	adds	r4, r4, r5
 802700e:	7833      	ldrb	r3, [r6, #0]
 8027010:	220a      	movs	r2, #10
 8027012:	0038      	movs	r0, r7
 8027014:	3b30      	subs	r3, #48	@ 0x30
 8027016:	f7ff ff8f 	bl	8026f38 <__multadd>
 802701a:	3601      	adds	r6, #1
 802701c:	0001      	movs	r1, r0
 802701e:	42a6      	cmp	r6, r4
 8027020:	d1f5      	bne.n	802700e <__s2b+0x4e>
 8027022:	002c      	movs	r4, r5
 8027024:	9b00      	ldr	r3, [sp, #0]
 8027026:	3c08      	subs	r4, #8
 8027028:	191c      	adds	r4, r3, r4
 802702a:	002e      	movs	r6, r5
 802702c:	9b01      	ldr	r3, [sp, #4]
 802702e:	429e      	cmp	r6, r3
 8027030:	db04      	blt.n	802703c <__s2b+0x7c>
 8027032:	0008      	movs	r0, r1
 8027034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027036:	2509      	movs	r5, #9
 8027038:	340a      	adds	r4, #10
 802703a:	e7f6      	b.n	802702a <__s2b+0x6a>
 802703c:	1b63      	subs	r3, r4, r5
 802703e:	5d9b      	ldrb	r3, [r3, r6]
 8027040:	220a      	movs	r2, #10
 8027042:	0038      	movs	r0, r7
 8027044:	3b30      	subs	r3, #48	@ 0x30
 8027046:	f7ff ff77 	bl	8026f38 <__multadd>
 802704a:	3601      	adds	r6, #1
 802704c:	0001      	movs	r1, r0
 802704e:	e7ed      	b.n	802702c <__s2b+0x6c>
 8027050:	0802e142 	.word	0x0802e142
 8027054:	0802e1b3 	.word	0x0802e1b3

08027058 <__hi0bits>:
 8027058:	2280      	movs	r2, #128	@ 0x80
 802705a:	0003      	movs	r3, r0
 802705c:	0252      	lsls	r2, r2, #9
 802705e:	2000      	movs	r0, #0
 8027060:	4293      	cmp	r3, r2
 8027062:	d201      	bcs.n	8027068 <__hi0bits+0x10>
 8027064:	041b      	lsls	r3, r3, #16
 8027066:	3010      	adds	r0, #16
 8027068:	2280      	movs	r2, #128	@ 0x80
 802706a:	0452      	lsls	r2, r2, #17
 802706c:	4293      	cmp	r3, r2
 802706e:	d201      	bcs.n	8027074 <__hi0bits+0x1c>
 8027070:	3008      	adds	r0, #8
 8027072:	021b      	lsls	r3, r3, #8
 8027074:	2280      	movs	r2, #128	@ 0x80
 8027076:	0552      	lsls	r2, r2, #21
 8027078:	4293      	cmp	r3, r2
 802707a:	d201      	bcs.n	8027080 <__hi0bits+0x28>
 802707c:	3004      	adds	r0, #4
 802707e:	011b      	lsls	r3, r3, #4
 8027080:	2280      	movs	r2, #128	@ 0x80
 8027082:	05d2      	lsls	r2, r2, #23
 8027084:	4293      	cmp	r3, r2
 8027086:	d201      	bcs.n	802708c <__hi0bits+0x34>
 8027088:	3002      	adds	r0, #2
 802708a:	009b      	lsls	r3, r3, #2
 802708c:	2b00      	cmp	r3, #0
 802708e:	db03      	blt.n	8027098 <__hi0bits+0x40>
 8027090:	3001      	adds	r0, #1
 8027092:	4213      	tst	r3, r2
 8027094:	d100      	bne.n	8027098 <__hi0bits+0x40>
 8027096:	2020      	movs	r0, #32
 8027098:	4770      	bx	lr

0802709a <__lo0bits>:
 802709a:	6803      	ldr	r3, [r0, #0]
 802709c:	0001      	movs	r1, r0
 802709e:	2207      	movs	r2, #7
 80270a0:	0018      	movs	r0, r3
 80270a2:	4010      	ands	r0, r2
 80270a4:	4213      	tst	r3, r2
 80270a6:	d00d      	beq.n	80270c4 <__lo0bits+0x2a>
 80270a8:	3a06      	subs	r2, #6
 80270aa:	2000      	movs	r0, #0
 80270ac:	4213      	tst	r3, r2
 80270ae:	d105      	bne.n	80270bc <__lo0bits+0x22>
 80270b0:	3002      	adds	r0, #2
 80270b2:	4203      	tst	r3, r0
 80270b4:	d003      	beq.n	80270be <__lo0bits+0x24>
 80270b6:	40d3      	lsrs	r3, r2
 80270b8:	0010      	movs	r0, r2
 80270ba:	600b      	str	r3, [r1, #0]
 80270bc:	4770      	bx	lr
 80270be:	089b      	lsrs	r3, r3, #2
 80270c0:	600b      	str	r3, [r1, #0]
 80270c2:	e7fb      	b.n	80270bc <__lo0bits+0x22>
 80270c4:	b29a      	uxth	r2, r3
 80270c6:	2a00      	cmp	r2, #0
 80270c8:	d101      	bne.n	80270ce <__lo0bits+0x34>
 80270ca:	2010      	movs	r0, #16
 80270cc:	0c1b      	lsrs	r3, r3, #16
 80270ce:	b2da      	uxtb	r2, r3
 80270d0:	2a00      	cmp	r2, #0
 80270d2:	d101      	bne.n	80270d8 <__lo0bits+0x3e>
 80270d4:	3008      	adds	r0, #8
 80270d6:	0a1b      	lsrs	r3, r3, #8
 80270d8:	071a      	lsls	r2, r3, #28
 80270da:	d101      	bne.n	80270e0 <__lo0bits+0x46>
 80270dc:	3004      	adds	r0, #4
 80270de:	091b      	lsrs	r3, r3, #4
 80270e0:	079a      	lsls	r2, r3, #30
 80270e2:	d101      	bne.n	80270e8 <__lo0bits+0x4e>
 80270e4:	3002      	adds	r0, #2
 80270e6:	089b      	lsrs	r3, r3, #2
 80270e8:	07da      	lsls	r2, r3, #31
 80270ea:	d4e9      	bmi.n	80270c0 <__lo0bits+0x26>
 80270ec:	3001      	adds	r0, #1
 80270ee:	085b      	lsrs	r3, r3, #1
 80270f0:	d1e6      	bne.n	80270c0 <__lo0bits+0x26>
 80270f2:	2020      	movs	r0, #32
 80270f4:	e7e2      	b.n	80270bc <__lo0bits+0x22>
	...

080270f8 <__i2b>:
 80270f8:	b510      	push	{r4, lr}
 80270fa:	000c      	movs	r4, r1
 80270fc:	2101      	movs	r1, #1
 80270fe:	f7ff feb3 	bl	8026e68 <_Balloc>
 8027102:	2800      	cmp	r0, #0
 8027104:	d107      	bne.n	8027116 <__i2b+0x1e>
 8027106:	2146      	movs	r1, #70	@ 0x46
 8027108:	4c05      	ldr	r4, [pc, #20]	@ (8027120 <__i2b+0x28>)
 802710a:	0002      	movs	r2, r0
 802710c:	4b05      	ldr	r3, [pc, #20]	@ (8027124 <__i2b+0x2c>)
 802710e:	0020      	movs	r0, r4
 8027110:	31ff      	adds	r1, #255	@ 0xff
 8027112:	f000 ff81 	bl	8028018 <__assert_func>
 8027116:	2301      	movs	r3, #1
 8027118:	6144      	str	r4, [r0, #20]
 802711a:	6103      	str	r3, [r0, #16]
 802711c:	bd10      	pop	{r4, pc}
 802711e:	46c0      	nop			@ (mov r8, r8)
 8027120:	0802e1b3 	.word	0x0802e1b3
 8027124:	0802e142 	.word	0x0802e142

08027128 <__multiply>:
 8027128:	b5f0      	push	{r4, r5, r6, r7, lr}
 802712a:	0014      	movs	r4, r2
 802712c:	690a      	ldr	r2, [r1, #16]
 802712e:	6923      	ldr	r3, [r4, #16]
 8027130:	000d      	movs	r5, r1
 8027132:	b089      	sub	sp, #36	@ 0x24
 8027134:	429a      	cmp	r2, r3
 8027136:	db02      	blt.n	802713e <__multiply+0x16>
 8027138:	0023      	movs	r3, r4
 802713a:	000c      	movs	r4, r1
 802713c:	001d      	movs	r5, r3
 802713e:	6927      	ldr	r7, [r4, #16]
 8027140:	692e      	ldr	r6, [r5, #16]
 8027142:	6861      	ldr	r1, [r4, #4]
 8027144:	19bb      	adds	r3, r7, r6
 8027146:	9300      	str	r3, [sp, #0]
 8027148:	68a3      	ldr	r3, [r4, #8]
 802714a:	19ba      	adds	r2, r7, r6
 802714c:	4293      	cmp	r3, r2
 802714e:	da00      	bge.n	8027152 <__multiply+0x2a>
 8027150:	3101      	adds	r1, #1
 8027152:	f7ff fe89 	bl	8026e68 <_Balloc>
 8027156:	4684      	mov	ip, r0
 8027158:	2800      	cmp	r0, #0
 802715a:	d106      	bne.n	802716a <__multiply+0x42>
 802715c:	21b1      	movs	r1, #177	@ 0xb1
 802715e:	4662      	mov	r2, ip
 8027160:	4b44      	ldr	r3, [pc, #272]	@ (8027274 <__multiply+0x14c>)
 8027162:	4845      	ldr	r0, [pc, #276]	@ (8027278 <__multiply+0x150>)
 8027164:	0049      	lsls	r1, r1, #1
 8027166:	f000 ff57 	bl	8028018 <__assert_func>
 802716a:	0002      	movs	r2, r0
 802716c:	19bb      	adds	r3, r7, r6
 802716e:	3214      	adds	r2, #20
 8027170:	009b      	lsls	r3, r3, #2
 8027172:	18d3      	adds	r3, r2, r3
 8027174:	9301      	str	r3, [sp, #4]
 8027176:	2100      	movs	r1, #0
 8027178:	0013      	movs	r3, r2
 802717a:	9801      	ldr	r0, [sp, #4]
 802717c:	4283      	cmp	r3, r0
 802717e:	d328      	bcc.n	80271d2 <__multiply+0xaa>
 8027180:	0023      	movs	r3, r4
 8027182:	00bf      	lsls	r7, r7, #2
 8027184:	3314      	adds	r3, #20
 8027186:	9304      	str	r3, [sp, #16]
 8027188:	3514      	adds	r5, #20
 802718a:	19db      	adds	r3, r3, r7
 802718c:	00b6      	lsls	r6, r6, #2
 802718e:	9302      	str	r3, [sp, #8]
 8027190:	19ab      	adds	r3, r5, r6
 8027192:	9307      	str	r3, [sp, #28]
 8027194:	2304      	movs	r3, #4
 8027196:	9305      	str	r3, [sp, #20]
 8027198:	0023      	movs	r3, r4
 802719a:	9902      	ldr	r1, [sp, #8]
 802719c:	3315      	adds	r3, #21
 802719e:	4299      	cmp	r1, r3
 80271a0:	d305      	bcc.n	80271ae <__multiply+0x86>
 80271a2:	1b0c      	subs	r4, r1, r4
 80271a4:	3c15      	subs	r4, #21
 80271a6:	08a4      	lsrs	r4, r4, #2
 80271a8:	3401      	adds	r4, #1
 80271aa:	00a3      	lsls	r3, r4, #2
 80271ac:	9305      	str	r3, [sp, #20]
 80271ae:	9b07      	ldr	r3, [sp, #28]
 80271b0:	429d      	cmp	r5, r3
 80271b2:	d310      	bcc.n	80271d6 <__multiply+0xae>
 80271b4:	9b00      	ldr	r3, [sp, #0]
 80271b6:	2b00      	cmp	r3, #0
 80271b8:	dd05      	ble.n	80271c6 <__multiply+0x9e>
 80271ba:	9b01      	ldr	r3, [sp, #4]
 80271bc:	3b04      	subs	r3, #4
 80271be:	9301      	str	r3, [sp, #4]
 80271c0:	681b      	ldr	r3, [r3, #0]
 80271c2:	2b00      	cmp	r3, #0
 80271c4:	d052      	beq.n	802726c <__multiply+0x144>
 80271c6:	4663      	mov	r3, ip
 80271c8:	4660      	mov	r0, ip
 80271ca:	9a00      	ldr	r2, [sp, #0]
 80271cc:	611a      	str	r2, [r3, #16]
 80271ce:	b009      	add	sp, #36	@ 0x24
 80271d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80271d2:	c302      	stmia	r3!, {r1}
 80271d4:	e7d1      	b.n	802717a <__multiply+0x52>
 80271d6:	682c      	ldr	r4, [r5, #0]
 80271d8:	b2a4      	uxth	r4, r4
 80271da:	2c00      	cmp	r4, #0
 80271dc:	d01f      	beq.n	802721e <__multiply+0xf6>
 80271de:	2300      	movs	r3, #0
 80271e0:	0017      	movs	r7, r2
 80271e2:	9e04      	ldr	r6, [sp, #16]
 80271e4:	9303      	str	r3, [sp, #12]
 80271e6:	ce08      	ldmia	r6!, {r3}
 80271e8:	6839      	ldr	r1, [r7, #0]
 80271ea:	9306      	str	r3, [sp, #24]
 80271ec:	466b      	mov	r3, sp
 80271ee:	8b1b      	ldrh	r3, [r3, #24]
 80271f0:	b288      	uxth	r0, r1
 80271f2:	4363      	muls	r3, r4
 80271f4:	181b      	adds	r3, r3, r0
 80271f6:	9803      	ldr	r0, [sp, #12]
 80271f8:	0c09      	lsrs	r1, r1, #16
 80271fa:	181b      	adds	r3, r3, r0
 80271fc:	9806      	ldr	r0, [sp, #24]
 80271fe:	0c00      	lsrs	r0, r0, #16
 8027200:	4360      	muls	r0, r4
 8027202:	1840      	adds	r0, r0, r1
 8027204:	0c19      	lsrs	r1, r3, #16
 8027206:	1841      	adds	r1, r0, r1
 8027208:	0c08      	lsrs	r0, r1, #16
 802720a:	b29b      	uxth	r3, r3
 802720c:	0409      	lsls	r1, r1, #16
 802720e:	4319      	orrs	r1, r3
 8027210:	9b02      	ldr	r3, [sp, #8]
 8027212:	9003      	str	r0, [sp, #12]
 8027214:	c702      	stmia	r7!, {r1}
 8027216:	42b3      	cmp	r3, r6
 8027218:	d8e5      	bhi.n	80271e6 <__multiply+0xbe>
 802721a:	9b05      	ldr	r3, [sp, #20]
 802721c:	50d0      	str	r0, [r2, r3]
 802721e:	682c      	ldr	r4, [r5, #0]
 8027220:	0c24      	lsrs	r4, r4, #16
 8027222:	d020      	beq.n	8027266 <__multiply+0x13e>
 8027224:	2100      	movs	r1, #0
 8027226:	0010      	movs	r0, r2
 8027228:	6813      	ldr	r3, [r2, #0]
 802722a:	9e04      	ldr	r6, [sp, #16]
 802722c:	9103      	str	r1, [sp, #12]
 802722e:	6831      	ldr	r1, [r6, #0]
 8027230:	6807      	ldr	r7, [r0, #0]
 8027232:	b289      	uxth	r1, r1
 8027234:	4361      	muls	r1, r4
 8027236:	0c3f      	lsrs	r7, r7, #16
 8027238:	19c9      	adds	r1, r1, r7
 802723a:	9f03      	ldr	r7, [sp, #12]
 802723c:	b29b      	uxth	r3, r3
 802723e:	19c9      	adds	r1, r1, r7
 8027240:	040f      	lsls	r7, r1, #16
 8027242:	431f      	orrs	r7, r3
 8027244:	6007      	str	r7, [r0, #0]
 8027246:	ce80      	ldmia	r6!, {r7}
 8027248:	6843      	ldr	r3, [r0, #4]
 802724a:	0c3f      	lsrs	r7, r7, #16
 802724c:	4367      	muls	r7, r4
 802724e:	b29b      	uxth	r3, r3
 8027250:	0c09      	lsrs	r1, r1, #16
 8027252:	18fb      	adds	r3, r7, r3
 8027254:	185b      	adds	r3, r3, r1
 8027256:	0c19      	lsrs	r1, r3, #16
 8027258:	9103      	str	r1, [sp, #12]
 802725a:	9902      	ldr	r1, [sp, #8]
 802725c:	3004      	adds	r0, #4
 802725e:	42b1      	cmp	r1, r6
 8027260:	d8e5      	bhi.n	802722e <__multiply+0x106>
 8027262:	9905      	ldr	r1, [sp, #20]
 8027264:	5053      	str	r3, [r2, r1]
 8027266:	3504      	adds	r5, #4
 8027268:	3204      	adds	r2, #4
 802726a:	e7a0      	b.n	80271ae <__multiply+0x86>
 802726c:	9b00      	ldr	r3, [sp, #0]
 802726e:	3b01      	subs	r3, #1
 8027270:	9300      	str	r3, [sp, #0]
 8027272:	e79f      	b.n	80271b4 <__multiply+0x8c>
 8027274:	0802e142 	.word	0x0802e142
 8027278:	0802e1b3 	.word	0x0802e1b3

0802727c <__pow5mult>:
 802727c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802727e:	2303      	movs	r3, #3
 8027280:	0015      	movs	r5, r2
 8027282:	0007      	movs	r7, r0
 8027284:	000e      	movs	r6, r1
 8027286:	401a      	ands	r2, r3
 8027288:	421d      	tst	r5, r3
 802728a:	d008      	beq.n	802729e <__pow5mult+0x22>
 802728c:	4925      	ldr	r1, [pc, #148]	@ (8027324 <__pow5mult+0xa8>)
 802728e:	3a01      	subs	r2, #1
 8027290:	0092      	lsls	r2, r2, #2
 8027292:	5852      	ldr	r2, [r2, r1]
 8027294:	2300      	movs	r3, #0
 8027296:	0031      	movs	r1, r6
 8027298:	f7ff fe4e 	bl	8026f38 <__multadd>
 802729c:	0006      	movs	r6, r0
 802729e:	10ad      	asrs	r5, r5, #2
 80272a0:	d03d      	beq.n	802731e <__pow5mult+0xa2>
 80272a2:	69fc      	ldr	r4, [r7, #28]
 80272a4:	2c00      	cmp	r4, #0
 80272a6:	d10f      	bne.n	80272c8 <__pow5mult+0x4c>
 80272a8:	2010      	movs	r0, #16
 80272aa:	f7ff fd0f 	bl	8026ccc <malloc>
 80272ae:	1e02      	subs	r2, r0, #0
 80272b0:	61f8      	str	r0, [r7, #28]
 80272b2:	d105      	bne.n	80272c0 <__pow5mult+0x44>
 80272b4:	21b4      	movs	r1, #180	@ 0xb4
 80272b6:	4b1c      	ldr	r3, [pc, #112]	@ (8027328 <__pow5mult+0xac>)
 80272b8:	481c      	ldr	r0, [pc, #112]	@ (802732c <__pow5mult+0xb0>)
 80272ba:	31ff      	adds	r1, #255	@ 0xff
 80272bc:	f000 feac 	bl	8028018 <__assert_func>
 80272c0:	6044      	str	r4, [r0, #4]
 80272c2:	6084      	str	r4, [r0, #8]
 80272c4:	6004      	str	r4, [r0, #0]
 80272c6:	60c4      	str	r4, [r0, #12]
 80272c8:	69fb      	ldr	r3, [r7, #28]
 80272ca:	689c      	ldr	r4, [r3, #8]
 80272cc:	9301      	str	r3, [sp, #4]
 80272ce:	2c00      	cmp	r4, #0
 80272d0:	d108      	bne.n	80272e4 <__pow5mult+0x68>
 80272d2:	0038      	movs	r0, r7
 80272d4:	4916      	ldr	r1, [pc, #88]	@ (8027330 <__pow5mult+0xb4>)
 80272d6:	f7ff ff0f 	bl	80270f8 <__i2b>
 80272da:	9b01      	ldr	r3, [sp, #4]
 80272dc:	0004      	movs	r4, r0
 80272de:	6098      	str	r0, [r3, #8]
 80272e0:	2300      	movs	r3, #0
 80272e2:	6003      	str	r3, [r0, #0]
 80272e4:	2301      	movs	r3, #1
 80272e6:	421d      	tst	r5, r3
 80272e8:	d00a      	beq.n	8027300 <__pow5mult+0x84>
 80272ea:	0031      	movs	r1, r6
 80272ec:	0022      	movs	r2, r4
 80272ee:	0038      	movs	r0, r7
 80272f0:	f7ff ff1a 	bl	8027128 <__multiply>
 80272f4:	0031      	movs	r1, r6
 80272f6:	9001      	str	r0, [sp, #4]
 80272f8:	0038      	movs	r0, r7
 80272fa:	f7ff fdf9 	bl	8026ef0 <_Bfree>
 80272fe:	9e01      	ldr	r6, [sp, #4]
 8027300:	106d      	asrs	r5, r5, #1
 8027302:	d00c      	beq.n	802731e <__pow5mult+0xa2>
 8027304:	6820      	ldr	r0, [r4, #0]
 8027306:	2800      	cmp	r0, #0
 8027308:	d107      	bne.n	802731a <__pow5mult+0x9e>
 802730a:	0022      	movs	r2, r4
 802730c:	0021      	movs	r1, r4
 802730e:	0038      	movs	r0, r7
 8027310:	f7ff ff0a 	bl	8027128 <__multiply>
 8027314:	2300      	movs	r3, #0
 8027316:	6020      	str	r0, [r4, #0]
 8027318:	6003      	str	r3, [r0, #0]
 802731a:	0004      	movs	r4, r0
 802731c:	e7e2      	b.n	80272e4 <__pow5mult+0x68>
 802731e:	0030      	movs	r0, r6
 8027320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027322:	46c0      	nop			@ (mov r8, r8)
 8027324:	0802e3b4 	.word	0x0802e3b4
 8027328:	0802e0d3 	.word	0x0802e0d3
 802732c:	0802e1b3 	.word	0x0802e1b3
 8027330:	00000271 	.word	0x00000271

08027334 <__lshift>:
 8027334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027336:	000c      	movs	r4, r1
 8027338:	0016      	movs	r6, r2
 802733a:	6923      	ldr	r3, [r4, #16]
 802733c:	1157      	asrs	r7, r2, #5
 802733e:	b085      	sub	sp, #20
 8027340:	18fb      	adds	r3, r7, r3
 8027342:	9301      	str	r3, [sp, #4]
 8027344:	3301      	adds	r3, #1
 8027346:	9300      	str	r3, [sp, #0]
 8027348:	6849      	ldr	r1, [r1, #4]
 802734a:	68a3      	ldr	r3, [r4, #8]
 802734c:	9002      	str	r0, [sp, #8]
 802734e:	9a00      	ldr	r2, [sp, #0]
 8027350:	4293      	cmp	r3, r2
 8027352:	db10      	blt.n	8027376 <__lshift+0x42>
 8027354:	9802      	ldr	r0, [sp, #8]
 8027356:	f7ff fd87 	bl	8026e68 <_Balloc>
 802735a:	2300      	movs	r3, #0
 802735c:	0001      	movs	r1, r0
 802735e:	0005      	movs	r5, r0
 8027360:	001a      	movs	r2, r3
 8027362:	3114      	adds	r1, #20
 8027364:	4298      	cmp	r0, r3
 8027366:	d10c      	bne.n	8027382 <__lshift+0x4e>
 8027368:	21ef      	movs	r1, #239	@ 0xef
 802736a:	002a      	movs	r2, r5
 802736c:	4b25      	ldr	r3, [pc, #148]	@ (8027404 <__lshift+0xd0>)
 802736e:	4826      	ldr	r0, [pc, #152]	@ (8027408 <__lshift+0xd4>)
 8027370:	0049      	lsls	r1, r1, #1
 8027372:	f000 fe51 	bl	8028018 <__assert_func>
 8027376:	3101      	adds	r1, #1
 8027378:	005b      	lsls	r3, r3, #1
 802737a:	e7e8      	b.n	802734e <__lshift+0x1a>
 802737c:	0098      	lsls	r0, r3, #2
 802737e:	500a      	str	r2, [r1, r0]
 8027380:	3301      	adds	r3, #1
 8027382:	42bb      	cmp	r3, r7
 8027384:	dbfa      	blt.n	802737c <__lshift+0x48>
 8027386:	43fb      	mvns	r3, r7
 8027388:	17db      	asrs	r3, r3, #31
 802738a:	401f      	ands	r7, r3
 802738c:	00bf      	lsls	r7, r7, #2
 802738e:	0023      	movs	r3, r4
 8027390:	201f      	movs	r0, #31
 8027392:	19c9      	adds	r1, r1, r7
 8027394:	0037      	movs	r7, r6
 8027396:	6922      	ldr	r2, [r4, #16]
 8027398:	3314      	adds	r3, #20
 802739a:	0092      	lsls	r2, r2, #2
 802739c:	189a      	adds	r2, r3, r2
 802739e:	4007      	ands	r7, r0
 80273a0:	4206      	tst	r6, r0
 80273a2:	d029      	beq.n	80273f8 <__lshift+0xc4>
 80273a4:	3001      	adds	r0, #1
 80273a6:	1bc0      	subs	r0, r0, r7
 80273a8:	9003      	str	r0, [sp, #12]
 80273aa:	468c      	mov	ip, r1
 80273ac:	2000      	movs	r0, #0
 80273ae:	681e      	ldr	r6, [r3, #0]
 80273b0:	40be      	lsls	r6, r7
 80273b2:	4306      	orrs	r6, r0
 80273b4:	4660      	mov	r0, ip
 80273b6:	c040      	stmia	r0!, {r6}
 80273b8:	4684      	mov	ip, r0
 80273ba:	9e03      	ldr	r6, [sp, #12]
 80273bc:	cb01      	ldmia	r3!, {r0}
 80273be:	40f0      	lsrs	r0, r6
 80273c0:	429a      	cmp	r2, r3
 80273c2:	d8f4      	bhi.n	80273ae <__lshift+0x7a>
 80273c4:	0026      	movs	r6, r4
 80273c6:	3615      	adds	r6, #21
 80273c8:	2304      	movs	r3, #4
 80273ca:	42b2      	cmp	r2, r6
 80273cc:	d304      	bcc.n	80273d8 <__lshift+0xa4>
 80273ce:	1b13      	subs	r3, r2, r4
 80273d0:	3b15      	subs	r3, #21
 80273d2:	089b      	lsrs	r3, r3, #2
 80273d4:	3301      	adds	r3, #1
 80273d6:	009b      	lsls	r3, r3, #2
 80273d8:	50c8      	str	r0, [r1, r3]
 80273da:	2800      	cmp	r0, #0
 80273dc:	d002      	beq.n	80273e4 <__lshift+0xb0>
 80273de:	9b01      	ldr	r3, [sp, #4]
 80273e0:	3302      	adds	r3, #2
 80273e2:	9300      	str	r3, [sp, #0]
 80273e4:	9b00      	ldr	r3, [sp, #0]
 80273e6:	9802      	ldr	r0, [sp, #8]
 80273e8:	3b01      	subs	r3, #1
 80273ea:	0021      	movs	r1, r4
 80273ec:	612b      	str	r3, [r5, #16]
 80273ee:	f7ff fd7f 	bl	8026ef0 <_Bfree>
 80273f2:	0028      	movs	r0, r5
 80273f4:	b005      	add	sp, #20
 80273f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80273f8:	cb01      	ldmia	r3!, {r0}
 80273fa:	c101      	stmia	r1!, {r0}
 80273fc:	429a      	cmp	r2, r3
 80273fe:	d8fb      	bhi.n	80273f8 <__lshift+0xc4>
 8027400:	e7f0      	b.n	80273e4 <__lshift+0xb0>
 8027402:	46c0      	nop			@ (mov r8, r8)
 8027404:	0802e142 	.word	0x0802e142
 8027408:	0802e1b3 	.word	0x0802e1b3

0802740c <__mcmp>:
 802740c:	b530      	push	{r4, r5, lr}
 802740e:	690b      	ldr	r3, [r1, #16]
 8027410:	6904      	ldr	r4, [r0, #16]
 8027412:	0002      	movs	r2, r0
 8027414:	1ae0      	subs	r0, r4, r3
 8027416:	429c      	cmp	r4, r3
 8027418:	d10f      	bne.n	802743a <__mcmp+0x2e>
 802741a:	3214      	adds	r2, #20
 802741c:	009b      	lsls	r3, r3, #2
 802741e:	3114      	adds	r1, #20
 8027420:	0014      	movs	r4, r2
 8027422:	18c9      	adds	r1, r1, r3
 8027424:	18d2      	adds	r2, r2, r3
 8027426:	3a04      	subs	r2, #4
 8027428:	3904      	subs	r1, #4
 802742a:	6815      	ldr	r5, [r2, #0]
 802742c:	680b      	ldr	r3, [r1, #0]
 802742e:	429d      	cmp	r5, r3
 8027430:	d004      	beq.n	802743c <__mcmp+0x30>
 8027432:	2001      	movs	r0, #1
 8027434:	429d      	cmp	r5, r3
 8027436:	d200      	bcs.n	802743a <__mcmp+0x2e>
 8027438:	3802      	subs	r0, #2
 802743a:	bd30      	pop	{r4, r5, pc}
 802743c:	4294      	cmp	r4, r2
 802743e:	d3f2      	bcc.n	8027426 <__mcmp+0x1a>
 8027440:	e7fb      	b.n	802743a <__mcmp+0x2e>
	...

08027444 <__mdiff>:
 8027444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027446:	000c      	movs	r4, r1
 8027448:	b087      	sub	sp, #28
 802744a:	9000      	str	r0, [sp, #0]
 802744c:	0011      	movs	r1, r2
 802744e:	0020      	movs	r0, r4
 8027450:	0017      	movs	r7, r2
 8027452:	f7ff ffdb 	bl	802740c <__mcmp>
 8027456:	1e05      	subs	r5, r0, #0
 8027458:	d110      	bne.n	802747c <__mdiff+0x38>
 802745a:	0001      	movs	r1, r0
 802745c:	9800      	ldr	r0, [sp, #0]
 802745e:	f7ff fd03 	bl	8026e68 <_Balloc>
 8027462:	1e02      	subs	r2, r0, #0
 8027464:	d104      	bne.n	8027470 <__mdiff+0x2c>
 8027466:	4b40      	ldr	r3, [pc, #256]	@ (8027568 <__mdiff+0x124>)
 8027468:	4840      	ldr	r0, [pc, #256]	@ (802756c <__mdiff+0x128>)
 802746a:	4941      	ldr	r1, [pc, #260]	@ (8027570 <__mdiff+0x12c>)
 802746c:	f000 fdd4 	bl	8028018 <__assert_func>
 8027470:	2301      	movs	r3, #1
 8027472:	6145      	str	r5, [r0, #20]
 8027474:	6103      	str	r3, [r0, #16]
 8027476:	0010      	movs	r0, r2
 8027478:	b007      	add	sp, #28
 802747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802747c:	2600      	movs	r6, #0
 802747e:	42b0      	cmp	r0, r6
 8027480:	da03      	bge.n	802748a <__mdiff+0x46>
 8027482:	0023      	movs	r3, r4
 8027484:	003c      	movs	r4, r7
 8027486:	001f      	movs	r7, r3
 8027488:	3601      	adds	r6, #1
 802748a:	6861      	ldr	r1, [r4, #4]
 802748c:	9800      	ldr	r0, [sp, #0]
 802748e:	f7ff fceb 	bl	8026e68 <_Balloc>
 8027492:	1e02      	subs	r2, r0, #0
 8027494:	d103      	bne.n	802749e <__mdiff+0x5a>
 8027496:	4b34      	ldr	r3, [pc, #208]	@ (8027568 <__mdiff+0x124>)
 8027498:	4834      	ldr	r0, [pc, #208]	@ (802756c <__mdiff+0x128>)
 802749a:	4936      	ldr	r1, [pc, #216]	@ (8027574 <__mdiff+0x130>)
 802749c:	e7e6      	b.n	802746c <__mdiff+0x28>
 802749e:	6923      	ldr	r3, [r4, #16]
 80274a0:	3414      	adds	r4, #20
 80274a2:	9300      	str	r3, [sp, #0]
 80274a4:	009b      	lsls	r3, r3, #2
 80274a6:	18e3      	adds	r3, r4, r3
 80274a8:	0021      	movs	r1, r4
 80274aa:	9401      	str	r4, [sp, #4]
 80274ac:	003c      	movs	r4, r7
 80274ae:	9302      	str	r3, [sp, #8]
 80274b0:	693b      	ldr	r3, [r7, #16]
 80274b2:	3414      	adds	r4, #20
 80274b4:	009b      	lsls	r3, r3, #2
 80274b6:	18e3      	adds	r3, r4, r3
 80274b8:	9303      	str	r3, [sp, #12]
 80274ba:	0003      	movs	r3, r0
 80274bc:	60c6      	str	r6, [r0, #12]
 80274be:	468c      	mov	ip, r1
 80274c0:	2000      	movs	r0, #0
 80274c2:	3314      	adds	r3, #20
 80274c4:	9304      	str	r3, [sp, #16]
 80274c6:	9305      	str	r3, [sp, #20]
 80274c8:	4663      	mov	r3, ip
 80274ca:	cb20      	ldmia	r3!, {r5}
 80274cc:	b2a9      	uxth	r1, r5
 80274ce:	000e      	movs	r6, r1
 80274d0:	469c      	mov	ip, r3
 80274d2:	cc08      	ldmia	r4!, {r3}
 80274d4:	0c2d      	lsrs	r5, r5, #16
 80274d6:	b299      	uxth	r1, r3
 80274d8:	1a71      	subs	r1, r6, r1
 80274da:	1809      	adds	r1, r1, r0
 80274dc:	0c1b      	lsrs	r3, r3, #16
 80274de:	1408      	asrs	r0, r1, #16
 80274e0:	1aeb      	subs	r3, r5, r3
 80274e2:	181b      	adds	r3, r3, r0
 80274e4:	1418      	asrs	r0, r3, #16
 80274e6:	b289      	uxth	r1, r1
 80274e8:	041b      	lsls	r3, r3, #16
 80274ea:	4319      	orrs	r1, r3
 80274ec:	9b05      	ldr	r3, [sp, #20]
 80274ee:	c302      	stmia	r3!, {r1}
 80274f0:	9305      	str	r3, [sp, #20]
 80274f2:	9b03      	ldr	r3, [sp, #12]
 80274f4:	42a3      	cmp	r3, r4
 80274f6:	d8e7      	bhi.n	80274c8 <__mdiff+0x84>
 80274f8:	0039      	movs	r1, r7
 80274fa:	9c03      	ldr	r4, [sp, #12]
 80274fc:	3115      	adds	r1, #21
 80274fe:	2304      	movs	r3, #4
 8027500:	428c      	cmp	r4, r1
 8027502:	d304      	bcc.n	802750e <__mdiff+0xca>
 8027504:	1be3      	subs	r3, r4, r7
 8027506:	3b15      	subs	r3, #21
 8027508:	089b      	lsrs	r3, r3, #2
 802750a:	3301      	adds	r3, #1
 802750c:	009b      	lsls	r3, r3, #2
 802750e:	9901      	ldr	r1, [sp, #4]
 8027510:	18cd      	adds	r5, r1, r3
 8027512:	9904      	ldr	r1, [sp, #16]
 8027514:	002e      	movs	r6, r5
 8027516:	18cb      	adds	r3, r1, r3
 8027518:	001f      	movs	r7, r3
 802751a:	9902      	ldr	r1, [sp, #8]
 802751c:	428e      	cmp	r6, r1
 802751e:	d311      	bcc.n	8027544 <__mdiff+0x100>
 8027520:	9c02      	ldr	r4, [sp, #8]
 8027522:	1ee9      	subs	r1, r5, #3
 8027524:	2000      	movs	r0, #0
 8027526:	428c      	cmp	r4, r1
 8027528:	d304      	bcc.n	8027534 <__mdiff+0xf0>
 802752a:	0021      	movs	r1, r4
 802752c:	3103      	adds	r1, #3
 802752e:	1b49      	subs	r1, r1, r5
 8027530:	0889      	lsrs	r1, r1, #2
 8027532:	0088      	lsls	r0, r1, #2
 8027534:	181b      	adds	r3, r3, r0
 8027536:	3b04      	subs	r3, #4
 8027538:	6819      	ldr	r1, [r3, #0]
 802753a:	2900      	cmp	r1, #0
 802753c:	d010      	beq.n	8027560 <__mdiff+0x11c>
 802753e:	9b00      	ldr	r3, [sp, #0]
 8027540:	6113      	str	r3, [r2, #16]
 8027542:	e798      	b.n	8027476 <__mdiff+0x32>
 8027544:	4684      	mov	ip, r0
 8027546:	ce02      	ldmia	r6!, {r1}
 8027548:	b288      	uxth	r0, r1
 802754a:	4460      	add	r0, ip
 802754c:	1400      	asrs	r0, r0, #16
 802754e:	0c0c      	lsrs	r4, r1, #16
 8027550:	1904      	adds	r4, r0, r4
 8027552:	4461      	add	r1, ip
 8027554:	1420      	asrs	r0, r4, #16
 8027556:	b289      	uxth	r1, r1
 8027558:	0424      	lsls	r4, r4, #16
 802755a:	4321      	orrs	r1, r4
 802755c:	c702      	stmia	r7!, {r1}
 802755e:	e7dc      	b.n	802751a <__mdiff+0xd6>
 8027560:	9900      	ldr	r1, [sp, #0]
 8027562:	3901      	subs	r1, #1
 8027564:	9100      	str	r1, [sp, #0]
 8027566:	e7e6      	b.n	8027536 <__mdiff+0xf2>
 8027568:	0802e142 	.word	0x0802e142
 802756c:	0802e1b3 	.word	0x0802e1b3
 8027570:	00000237 	.word	0x00000237
 8027574:	00000245 	.word	0x00000245

08027578 <__ulp>:
 8027578:	b510      	push	{r4, lr}
 802757a:	2400      	movs	r4, #0
 802757c:	4b0c      	ldr	r3, [pc, #48]	@ (80275b0 <__ulp+0x38>)
 802757e:	4a0d      	ldr	r2, [pc, #52]	@ (80275b4 <__ulp+0x3c>)
 8027580:	400b      	ands	r3, r1
 8027582:	189b      	adds	r3, r3, r2
 8027584:	42a3      	cmp	r3, r4
 8027586:	dc06      	bgt.n	8027596 <__ulp+0x1e>
 8027588:	425b      	negs	r3, r3
 802758a:	151a      	asrs	r2, r3, #20
 802758c:	2a13      	cmp	r2, #19
 802758e:	dc05      	bgt.n	802759c <__ulp+0x24>
 8027590:	2380      	movs	r3, #128	@ 0x80
 8027592:	031b      	lsls	r3, r3, #12
 8027594:	4113      	asrs	r3, r2
 8027596:	0019      	movs	r1, r3
 8027598:	0020      	movs	r0, r4
 802759a:	bd10      	pop	{r4, pc}
 802759c:	3a14      	subs	r2, #20
 802759e:	2401      	movs	r4, #1
 80275a0:	2a1e      	cmp	r2, #30
 80275a2:	dc02      	bgt.n	80275aa <__ulp+0x32>
 80275a4:	2480      	movs	r4, #128	@ 0x80
 80275a6:	0624      	lsls	r4, r4, #24
 80275a8:	40d4      	lsrs	r4, r2
 80275aa:	2300      	movs	r3, #0
 80275ac:	e7f3      	b.n	8027596 <__ulp+0x1e>
 80275ae:	46c0      	nop			@ (mov r8, r8)
 80275b0:	7ff00000 	.word	0x7ff00000
 80275b4:	fcc00000 	.word	0xfcc00000

080275b8 <__b2d>:
 80275b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80275ba:	0006      	movs	r6, r0
 80275bc:	6903      	ldr	r3, [r0, #16]
 80275be:	3614      	adds	r6, #20
 80275c0:	009b      	lsls	r3, r3, #2
 80275c2:	18f3      	adds	r3, r6, r3
 80275c4:	1f1d      	subs	r5, r3, #4
 80275c6:	682c      	ldr	r4, [r5, #0]
 80275c8:	000f      	movs	r7, r1
 80275ca:	0020      	movs	r0, r4
 80275cc:	9301      	str	r3, [sp, #4]
 80275ce:	f7ff fd43 	bl	8027058 <__hi0bits>
 80275d2:	2220      	movs	r2, #32
 80275d4:	1a12      	subs	r2, r2, r0
 80275d6:	603a      	str	r2, [r7, #0]
 80275d8:	0003      	movs	r3, r0
 80275da:	4a1c      	ldr	r2, [pc, #112]	@ (802764c <__b2d+0x94>)
 80275dc:	280a      	cmp	r0, #10
 80275de:	dc15      	bgt.n	802760c <__b2d+0x54>
 80275e0:	210b      	movs	r1, #11
 80275e2:	0027      	movs	r7, r4
 80275e4:	1a09      	subs	r1, r1, r0
 80275e6:	40cf      	lsrs	r7, r1
 80275e8:	433a      	orrs	r2, r7
 80275ea:	468c      	mov	ip, r1
 80275ec:	0011      	movs	r1, r2
 80275ee:	2200      	movs	r2, #0
 80275f0:	42ae      	cmp	r6, r5
 80275f2:	d202      	bcs.n	80275fa <__b2d+0x42>
 80275f4:	9a01      	ldr	r2, [sp, #4]
 80275f6:	3a08      	subs	r2, #8
 80275f8:	6812      	ldr	r2, [r2, #0]
 80275fa:	3315      	adds	r3, #21
 80275fc:	409c      	lsls	r4, r3
 80275fe:	4663      	mov	r3, ip
 8027600:	0027      	movs	r7, r4
 8027602:	40da      	lsrs	r2, r3
 8027604:	4317      	orrs	r7, r2
 8027606:	0038      	movs	r0, r7
 8027608:	b003      	add	sp, #12
 802760a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802760c:	2700      	movs	r7, #0
 802760e:	42ae      	cmp	r6, r5
 8027610:	d202      	bcs.n	8027618 <__b2d+0x60>
 8027612:	9d01      	ldr	r5, [sp, #4]
 8027614:	3d08      	subs	r5, #8
 8027616:	682f      	ldr	r7, [r5, #0]
 8027618:	210b      	movs	r1, #11
 802761a:	4249      	negs	r1, r1
 802761c:	468c      	mov	ip, r1
 802761e:	449c      	add	ip, r3
 8027620:	2b0b      	cmp	r3, #11
 8027622:	d010      	beq.n	8027646 <__b2d+0x8e>
 8027624:	4661      	mov	r1, ip
 8027626:	2320      	movs	r3, #32
 8027628:	408c      	lsls	r4, r1
 802762a:	1a5b      	subs	r3, r3, r1
 802762c:	0039      	movs	r1, r7
 802762e:	40d9      	lsrs	r1, r3
 8027630:	430c      	orrs	r4, r1
 8027632:	4322      	orrs	r2, r4
 8027634:	0011      	movs	r1, r2
 8027636:	2200      	movs	r2, #0
 8027638:	42b5      	cmp	r5, r6
 802763a:	d901      	bls.n	8027640 <__b2d+0x88>
 802763c:	3d04      	subs	r5, #4
 802763e:	682a      	ldr	r2, [r5, #0]
 8027640:	4664      	mov	r4, ip
 8027642:	40a7      	lsls	r7, r4
 8027644:	e7dd      	b.n	8027602 <__b2d+0x4a>
 8027646:	4322      	orrs	r2, r4
 8027648:	0011      	movs	r1, r2
 802764a:	e7dc      	b.n	8027606 <__b2d+0x4e>
 802764c:	3ff00000 	.word	0x3ff00000

08027650 <__d2b>:
 8027650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027652:	2101      	movs	r1, #1
 8027654:	0016      	movs	r6, r2
 8027656:	001f      	movs	r7, r3
 8027658:	f7ff fc06 	bl	8026e68 <_Balloc>
 802765c:	1e04      	subs	r4, r0, #0
 802765e:	d105      	bne.n	802766c <__d2b+0x1c>
 8027660:	0022      	movs	r2, r4
 8027662:	4b25      	ldr	r3, [pc, #148]	@ (80276f8 <__d2b+0xa8>)
 8027664:	4825      	ldr	r0, [pc, #148]	@ (80276fc <__d2b+0xac>)
 8027666:	4926      	ldr	r1, [pc, #152]	@ (8027700 <__d2b+0xb0>)
 8027668:	f000 fcd6 	bl	8028018 <__assert_func>
 802766c:	033b      	lsls	r3, r7, #12
 802766e:	007d      	lsls	r5, r7, #1
 8027670:	0b1b      	lsrs	r3, r3, #12
 8027672:	0d6d      	lsrs	r5, r5, #21
 8027674:	d002      	beq.n	802767c <__d2b+0x2c>
 8027676:	2280      	movs	r2, #128	@ 0x80
 8027678:	0352      	lsls	r2, r2, #13
 802767a:	4313      	orrs	r3, r2
 802767c:	9301      	str	r3, [sp, #4]
 802767e:	2e00      	cmp	r6, #0
 8027680:	d025      	beq.n	80276ce <__d2b+0x7e>
 8027682:	4668      	mov	r0, sp
 8027684:	9600      	str	r6, [sp, #0]
 8027686:	f7ff fd08 	bl	802709a <__lo0bits>
 802768a:	9b01      	ldr	r3, [sp, #4]
 802768c:	9900      	ldr	r1, [sp, #0]
 802768e:	2800      	cmp	r0, #0
 8027690:	d01b      	beq.n	80276ca <__d2b+0x7a>
 8027692:	2220      	movs	r2, #32
 8027694:	001e      	movs	r6, r3
 8027696:	1a12      	subs	r2, r2, r0
 8027698:	4096      	lsls	r6, r2
 802769a:	0032      	movs	r2, r6
 802769c:	40c3      	lsrs	r3, r0
 802769e:	430a      	orrs	r2, r1
 80276a0:	6162      	str	r2, [r4, #20]
 80276a2:	9301      	str	r3, [sp, #4]
 80276a4:	9e01      	ldr	r6, [sp, #4]
 80276a6:	61a6      	str	r6, [r4, #24]
 80276a8:	1e73      	subs	r3, r6, #1
 80276aa:	419e      	sbcs	r6, r3
 80276ac:	3601      	adds	r6, #1
 80276ae:	6126      	str	r6, [r4, #16]
 80276b0:	2d00      	cmp	r5, #0
 80276b2:	d014      	beq.n	80276de <__d2b+0x8e>
 80276b4:	2635      	movs	r6, #53	@ 0x35
 80276b6:	4b13      	ldr	r3, [pc, #76]	@ (8027704 <__d2b+0xb4>)
 80276b8:	18ed      	adds	r5, r5, r3
 80276ba:	9b08      	ldr	r3, [sp, #32]
 80276bc:	182d      	adds	r5, r5, r0
 80276be:	601d      	str	r5, [r3, #0]
 80276c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80276c2:	1a36      	subs	r6, r6, r0
 80276c4:	601e      	str	r6, [r3, #0]
 80276c6:	0020      	movs	r0, r4
 80276c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80276ca:	6161      	str	r1, [r4, #20]
 80276cc:	e7ea      	b.n	80276a4 <__d2b+0x54>
 80276ce:	a801      	add	r0, sp, #4
 80276d0:	f7ff fce3 	bl	802709a <__lo0bits>
 80276d4:	9b01      	ldr	r3, [sp, #4]
 80276d6:	2601      	movs	r6, #1
 80276d8:	6163      	str	r3, [r4, #20]
 80276da:	3020      	adds	r0, #32
 80276dc:	e7e7      	b.n	80276ae <__d2b+0x5e>
 80276de:	4b0a      	ldr	r3, [pc, #40]	@ (8027708 <__d2b+0xb8>)
 80276e0:	18c0      	adds	r0, r0, r3
 80276e2:	9b08      	ldr	r3, [sp, #32]
 80276e4:	6018      	str	r0, [r3, #0]
 80276e6:	4b09      	ldr	r3, [pc, #36]	@ (802770c <__d2b+0xbc>)
 80276e8:	18f3      	adds	r3, r6, r3
 80276ea:	009b      	lsls	r3, r3, #2
 80276ec:	18e3      	adds	r3, r4, r3
 80276ee:	6958      	ldr	r0, [r3, #20]
 80276f0:	f7ff fcb2 	bl	8027058 <__hi0bits>
 80276f4:	0176      	lsls	r6, r6, #5
 80276f6:	e7e3      	b.n	80276c0 <__d2b+0x70>
 80276f8:	0802e142 	.word	0x0802e142
 80276fc:	0802e1b3 	.word	0x0802e1b3
 8027700:	0000030f 	.word	0x0000030f
 8027704:	fffffbcd 	.word	0xfffffbcd
 8027708:	fffffbce 	.word	0xfffffbce
 802770c:	3fffffff 	.word	0x3fffffff

08027710 <__ratio>:
 8027710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027712:	b087      	sub	sp, #28
 8027714:	000f      	movs	r7, r1
 8027716:	a904      	add	r1, sp, #16
 8027718:	0006      	movs	r6, r0
 802771a:	f7ff ff4d 	bl	80275b8 <__b2d>
 802771e:	9000      	str	r0, [sp, #0]
 8027720:	9101      	str	r1, [sp, #4]
 8027722:	9b00      	ldr	r3, [sp, #0]
 8027724:	9c01      	ldr	r4, [sp, #4]
 8027726:	0038      	movs	r0, r7
 8027728:	a905      	add	r1, sp, #20
 802772a:	9302      	str	r3, [sp, #8]
 802772c:	9403      	str	r4, [sp, #12]
 802772e:	f7ff ff43 	bl	80275b8 <__b2d>
 8027732:	000d      	movs	r5, r1
 8027734:	0002      	movs	r2, r0
 8027736:	000b      	movs	r3, r1
 8027738:	6930      	ldr	r0, [r6, #16]
 802773a:	6939      	ldr	r1, [r7, #16]
 802773c:	9e04      	ldr	r6, [sp, #16]
 802773e:	1a40      	subs	r0, r0, r1
 8027740:	9905      	ldr	r1, [sp, #20]
 8027742:	0140      	lsls	r0, r0, #5
 8027744:	1a71      	subs	r1, r6, r1
 8027746:	1841      	adds	r1, r0, r1
 8027748:	0508      	lsls	r0, r1, #20
 802774a:	2900      	cmp	r1, #0
 802774c:	dd08      	ble.n	8027760 <__ratio+0x50>
 802774e:	9901      	ldr	r1, [sp, #4]
 8027750:	1841      	adds	r1, r0, r1
 8027752:	9103      	str	r1, [sp, #12]
 8027754:	9802      	ldr	r0, [sp, #8]
 8027756:	9903      	ldr	r1, [sp, #12]
 8027758:	f7da fcc2 	bl	80020e0 <__aeabi_ddiv>
 802775c:	b007      	add	sp, #28
 802775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027760:	1a2b      	subs	r3, r5, r0
 8027762:	e7f7      	b.n	8027754 <__ratio+0x44>

08027764 <__copybits>:
 8027764:	b570      	push	{r4, r5, r6, lr}
 8027766:	0014      	movs	r4, r2
 8027768:	0005      	movs	r5, r0
 802776a:	3901      	subs	r1, #1
 802776c:	6913      	ldr	r3, [r2, #16]
 802776e:	1149      	asrs	r1, r1, #5
 8027770:	3101      	adds	r1, #1
 8027772:	0089      	lsls	r1, r1, #2
 8027774:	3414      	adds	r4, #20
 8027776:	009b      	lsls	r3, r3, #2
 8027778:	1841      	adds	r1, r0, r1
 802777a:	18e3      	adds	r3, r4, r3
 802777c:	42a3      	cmp	r3, r4
 802777e:	d80d      	bhi.n	802779c <__copybits+0x38>
 8027780:	0014      	movs	r4, r2
 8027782:	3411      	adds	r4, #17
 8027784:	2500      	movs	r5, #0
 8027786:	42a3      	cmp	r3, r4
 8027788:	d303      	bcc.n	8027792 <__copybits+0x2e>
 802778a:	1a9b      	subs	r3, r3, r2
 802778c:	3b11      	subs	r3, #17
 802778e:	089b      	lsrs	r3, r3, #2
 8027790:	009d      	lsls	r5, r3, #2
 8027792:	2300      	movs	r3, #0
 8027794:	1940      	adds	r0, r0, r5
 8027796:	4281      	cmp	r1, r0
 8027798:	d803      	bhi.n	80277a2 <__copybits+0x3e>
 802779a:	bd70      	pop	{r4, r5, r6, pc}
 802779c:	cc40      	ldmia	r4!, {r6}
 802779e:	c540      	stmia	r5!, {r6}
 80277a0:	e7ec      	b.n	802777c <__copybits+0x18>
 80277a2:	c008      	stmia	r0!, {r3}
 80277a4:	e7f7      	b.n	8027796 <__copybits+0x32>

080277a6 <__any_on>:
 80277a6:	0002      	movs	r2, r0
 80277a8:	6900      	ldr	r0, [r0, #16]
 80277aa:	b510      	push	{r4, lr}
 80277ac:	3214      	adds	r2, #20
 80277ae:	114b      	asrs	r3, r1, #5
 80277b0:	4298      	cmp	r0, r3
 80277b2:	db13      	blt.n	80277dc <__any_on+0x36>
 80277b4:	dd0c      	ble.n	80277d0 <__any_on+0x2a>
 80277b6:	241f      	movs	r4, #31
 80277b8:	0008      	movs	r0, r1
 80277ba:	4020      	ands	r0, r4
 80277bc:	4221      	tst	r1, r4
 80277be:	d007      	beq.n	80277d0 <__any_on+0x2a>
 80277c0:	0099      	lsls	r1, r3, #2
 80277c2:	588c      	ldr	r4, [r1, r2]
 80277c4:	0021      	movs	r1, r4
 80277c6:	40c1      	lsrs	r1, r0
 80277c8:	4081      	lsls	r1, r0
 80277ca:	2001      	movs	r0, #1
 80277cc:	428c      	cmp	r4, r1
 80277ce:	d104      	bne.n	80277da <__any_on+0x34>
 80277d0:	009b      	lsls	r3, r3, #2
 80277d2:	18d3      	adds	r3, r2, r3
 80277d4:	4293      	cmp	r3, r2
 80277d6:	d803      	bhi.n	80277e0 <__any_on+0x3a>
 80277d8:	2000      	movs	r0, #0
 80277da:	bd10      	pop	{r4, pc}
 80277dc:	0003      	movs	r3, r0
 80277de:	e7f7      	b.n	80277d0 <__any_on+0x2a>
 80277e0:	3b04      	subs	r3, #4
 80277e2:	6819      	ldr	r1, [r3, #0]
 80277e4:	2900      	cmp	r1, #0
 80277e6:	d0f5      	beq.n	80277d4 <__any_on+0x2e>
 80277e8:	2001      	movs	r0, #1
 80277ea:	e7f6      	b.n	80277da <__any_on+0x34>

080277ec <__ascii_wctomb>:
 80277ec:	0003      	movs	r3, r0
 80277ee:	1e08      	subs	r0, r1, #0
 80277f0:	d005      	beq.n	80277fe <__ascii_wctomb+0x12>
 80277f2:	2aff      	cmp	r2, #255	@ 0xff
 80277f4:	d904      	bls.n	8027800 <__ascii_wctomb+0x14>
 80277f6:	228a      	movs	r2, #138	@ 0x8a
 80277f8:	2001      	movs	r0, #1
 80277fa:	601a      	str	r2, [r3, #0]
 80277fc:	4240      	negs	r0, r0
 80277fe:	4770      	bx	lr
 8027800:	2001      	movs	r0, #1
 8027802:	700a      	strb	r2, [r1, #0]
 8027804:	e7fb      	b.n	80277fe <__ascii_wctomb+0x12>
	...

08027808 <__ssputs_r>:
 8027808:	b5f0      	push	{r4, r5, r6, r7, lr}
 802780a:	688e      	ldr	r6, [r1, #8]
 802780c:	b085      	sub	sp, #20
 802780e:	001f      	movs	r7, r3
 8027810:	000c      	movs	r4, r1
 8027812:	680b      	ldr	r3, [r1, #0]
 8027814:	9002      	str	r0, [sp, #8]
 8027816:	9203      	str	r2, [sp, #12]
 8027818:	42be      	cmp	r6, r7
 802781a:	d830      	bhi.n	802787e <__ssputs_r+0x76>
 802781c:	210c      	movs	r1, #12
 802781e:	5e62      	ldrsh	r2, [r4, r1]
 8027820:	2190      	movs	r1, #144	@ 0x90
 8027822:	00c9      	lsls	r1, r1, #3
 8027824:	420a      	tst	r2, r1
 8027826:	d028      	beq.n	802787a <__ssputs_r+0x72>
 8027828:	2003      	movs	r0, #3
 802782a:	6921      	ldr	r1, [r4, #16]
 802782c:	1a5b      	subs	r3, r3, r1
 802782e:	9301      	str	r3, [sp, #4]
 8027830:	6963      	ldr	r3, [r4, #20]
 8027832:	4343      	muls	r3, r0
 8027834:	9801      	ldr	r0, [sp, #4]
 8027836:	0fdd      	lsrs	r5, r3, #31
 8027838:	18ed      	adds	r5, r5, r3
 802783a:	1c7b      	adds	r3, r7, #1
 802783c:	181b      	adds	r3, r3, r0
 802783e:	106d      	asrs	r5, r5, #1
 8027840:	42ab      	cmp	r3, r5
 8027842:	d900      	bls.n	8027846 <__ssputs_r+0x3e>
 8027844:	001d      	movs	r5, r3
 8027846:	0552      	lsls	r2, r2, #21
 8027848:	d528      	bpl.n	802789c <__ssputs_r+0x94>
 802784a:	0029      	movs	r1, r5
 802784c:	9802      	ldr	r0, [sp, #8]
 802784e:	f7ff fa69 	bl	8026d24 <_malloc_r>
 8027852:	1e06      	subs	r6, r0, #0
 8027854:	d02c      	beq.n	80278b0 <__ssputs_r+0xa8>
 8027856:	9a01      	ldr	r2, [sp, #4]
 8027858:	6921      	ldr	r1, [r4, #16]
 802785a:	f7fe f80d 	bl	8025878 <memcpy>
 802785e:	89a2      	ldrh	r2, [r4, #12]
 8027860:	4b18      	ldr	r3, [pc, #96]	@ (80278c4 <__ssputs_r+0xbc>)
 8027862:	401a      	ands	r2, r3
 8027864:	2380      	movs	r3, #128	@ 0x80
 8027866:	4313      	orrs	r3, r2
 8027868:	81a3      	strh	r3, [r4, #12]
 802786a:	9b01      	ldr	r3, [sp, #4]
 802786c:	6126      	str	r6, [r4, #16]
 802786e:	18f6      	adds	r6, r6, r3
 8027870:	6026      	str	r6, [r4, #0]
 8027872:	003e      	movs	r6, r7
 8027874:	6165      	str	r5, [r4, #20]
 8027876:	1aed      	subs	r5, r5, r3
 8027878:	60a5      	str	r5, [r4, #8]
 802787a:	42be      	cmp	r6, r7
 802787c:	d900      	bls.n	8027880 <__ssputs_r+0x78>
 802787e:	003e      	movs	r6, r7
 8027880:	0032      	movs	r2, r6
 8027882:	9903      	ldr	r1, [sp, #12]
 8027884:	6820      	ldr	r0, [r4, #0]
 8027886:	f000 fb7e 	bl	8027f86 <memmove>
 802788a:	2000      	movs	r0, #0
 802788c:	68a3      	ldr	r3, [r4, #8]
 802788e:	1b9b      	subs	r3, r3, r6
 8027890:	60a3      	str	r3, [r4, #8]
 8027892:	6823      	ldr	r3, [r4, #0]
 8027894:	199b      	adds	r3, r3, r6
 8027896:	6023      	str	r3, [r4, #0]
 8027898:	b005      	add	sp, #20
 802789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802789c:	002a      	movs	r2, r5
 802789e:	9802      	ldr	r0, [sp, #8]
 80278a0:	f000 fc05 	bl	80280ae <_realloc_r>
 80278a4:	1e06      	subs	r6, r0, #0
 80278a6:	d1e0      	bne.n	802786a <__ssputs_r+0x62>
 80278a8:	6921      	ldr	r1, [r4, #16]
 80278aa:	9802      	ldr	r0, [sp, #8]
 80278ac:	f7fe fe6a 	bl	8026584 <_free_r>
 80278b0:	230c      	movs	r3, #12
 80278b2:	2001      	movs	r0, #1
 80278b4:	9a02      	ldr	r2, [sp, #8]
 80278b6:	4240      	negs	r0, r0
 80278b8:	6013      	str	r3, [r2, #0]
 80278ba:	89a2      	ldrh	r2, [r4, #12]
 80278bc:	3334      	adds	r3, #52	@ 0x34
 80278be:	4313      	orrs	r3, r2
 80278c0:	81a3      	strh	r3, [r4, #12]
 80278c2:	e7e9      	b.n	8027898 <__ssputs_r+0x90>
 80278c4:	fffffb7f 	.word	0xfffffb7f

080278c8 <_svfiprintf_r>:
 80278c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80278ca:	b0a1      	sub	sp, #132	@ 0x84
 80278cc:	9003      	str	r0, [sp, #12]
 80278ce:	001d      	movs	r5, r3
 80278d0:	898b      	ldrh	r3, [r1, #12]
 80278d2:	000f      	movs	r7, r1
 80278d4:	0016      	movs	r6, r2
 80278d6:	061b      	lsls	r3, r3, #24
 80278d8:	d511      	bpl.n	80278fe <_svfiprintf_r+0x36>
 80278da:	690b      	ldr	r3, [r1, #16]
 80278dc:	2b00      	cmp	r3, #0
 80278de:	d10e      	bne.n	80278fe <_svfiprintf_r+0x36>
 80278e0:	2140      	movs	r1, #64	@ 0x40
 80278e2:	f7ff fa1f 	bl	8026d24 <_malloc_r>
 80278e6:	6038      	str	r0, [r7, #0]
 80278e8:	6138      	str	r0, [r7, #16]
 80278ea:	2800      	cmp	r0, #0
 80278ec:	d105      	bne.n	80278fa <_svfiprintf_r+0x32>
 80278ee:	230c      	movs	r3, #12
 80278f0:	9a03      	ldr	r2, [sp, #12]
 80278f2:	6013      	str	r3, [r2, #0]
 80278f4:	2001      	movs	r0, #1
 80278f6:	4240      	negs	r0, r0
 80278f8:	e0cf      	b.n	8027a9a <_svfiprintf_r+0x1d2>
 80278fa:	2340      	movs	r3, #64	@ 0x40
 80278fc:	617b      	str	r3, [r7, #20]
 80278fe:	2300      	movs	r3, #0
 8027900:	ac08      	add	r4, sp, #32
 8027902:	6163      	str	r3, [r4, #20]
 8027904:	3320      	adds	r3, #32
 8027906:	7663      	strb	r3, [r4, #25]
 8027908:	3310      	adds	r3, #16
 802790a:	76a3      	strb	r3, [r4, #26]
 802790c:	9507      	str	r5, [sp, #28]
 802790e:	0035      	movs	r5, r6
 8027910:	782b      	ldrb	r3, [r5, #0]
 8027912:	2b00      	cmp	r3, #0
 8027914:	d001      	beq.n	802791a <_svfiprintf_r+0x52>
 8027916:	2b25      	cmp	r3, #37	@ 0x25
 8027918:	d148      	bne.n	80279ac <_svfiprintf_r+0xe4>
 802791a:	1bab      	subs	r3, r5, r6
 802791c:	9305      	str	r3, [sp, #20]
 802791e:	42b5      	cmp	r5, r6
 8027920:	d00b      	beq.n	802793a <_svfiprintf_r+0x72>
 8027922:	0032      	movs	r2, r6
 8027924:	0039      	movs	r1, r7
 8027926:	9803      	ldr	r0, [sp, #12]
 8027928:	f7ff ff6e 	bl	8027808 <__ssputs_r>
 802792c:	3001      	adds	r0, #1
 802792e:	d100      	bne.n	8027932 <_svfiprintf_r+0x6a>
 8027930:	e0ae      	b.n	8027a90 <_svfiprintf_r+0x1c8>
 8027932:	6963      	ldr	r3, [r4, #20]
 8027934:	9a05      	ldr	r2, [sp, #20]
 8027936:	189b      	adds	r3, r3, r2
 8027938:	6163      	str	r3, [r4, #20]
 802793a:	782b      	ldrb	r3, [r5, #0]
 802793c:	2b00      	cmp	r3, #0
 802793e:	d100      	bne.n	8027942 <_svfiprintf_r+0x7a>
 8027940:	e0a6      	b.n	8027a90 <_svfiprintf_r+0x1c8>
 8027942:	2201      	movs	r2, #1
 8027944:	2300      	movs	r3, #0
 8027946:	4252      	negs	r2, r2
 8027948:	6062      	str	r2, [r4, #4]
 802794a:	a904      	add	r1, sp, #16
 802794c:	3254      	adds	r2, #84	@ 0x54
 802794e:	1852      	adds	r2, r2, r1
 8027950:	1c6e      	adds	r6, r5, #1
 8027952:	6023      	str	r3, [r4, #0]
 8027954:	60e3      	str	r3, [r4, #12]
 8027956:	60a3      	str	r3, [r4, #8]
 8027958:	7013      	strb	r3, [r2, #0]
 802795a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802795c:	4b54      	ldr	r3, [pc, #336]	@ (8027ab0 <_svfiprintf_r+0x1e8>)
 802795e:	2205      	movs	r2, #5
 8027960:	0018      	movs	r0, r3
 8027962:	7831      	ldrb	r1, [r6, #0]
 8027964:	9305      	str	r3, [sp, #20]
 8027966:	f7fd ff7c 	bl	8025862 <memchr>
 802796a:	1c75      	adds	r5, r6, #1
 802796c:	2800      	cmp	r0, #0
 802796e:	d11f      	bne.n	80279b0 <_svfiprintf_r+0xe8>
 8027970:	6822      	ldr	r2, [r4, #0]
 8027972:	06d3      	lsls	r3, r2, #27
 8027974:	d504      	bpl.n	8027980 <_svfiprintf_r+0xb8>
 8027976:	2353      	movs	r3, #83	@ 0x53
 8027978:	a904      	add	r1, sp, #16
 802797a:	185b      	adds	r3, r3, r1
 802797c:	2120      	movs	r1, #32
 802797e:	7019      	strb	r1, [r3, #0]
 8027980:	0713      	lsls	r3, r2, #28
 8027982:	d504      	bpl.n	802798e <_svfiprintf_r+0xc6>
 8027984:	2353      	movs	r3, #83	@ 0x53
 8027986:	a904      	add	r1, sp, #16
 8027988:	185b      	adds	r3, r3, r1
 802798a:	212b      	movs	r1, #43	@ 0x2b
 802798c:	7019      	strb	r1, [r3, #0]
 802798e:	7833      	ldrb	r3, [r6, #0]
 8027990:	2b2a      	cmp	r3, #42	@ 0x2a
 8027992:	d016      	beq.n	80279c2 <_svfiprintf_r+0xfa>
 8027994:	0035      	movs	r5, r6
 8027996:	2100      	movs	r1, #0
 8027998:	200a      	movs	r0, #10
 802799a:	68e3      	ldr	r3, [r4, #12]
 802799c:	782a      	ldrb	r2, [r5, #0]
 802799e:	1c6e      	adds	r6, r5, #1
 80279a0:	3a30      	subs	r2, #48	@ 0x30
 80279a2:	2a09      	cmp	r2, #9
 80279a4:	d950      	bls.n	8027a48 <_svfiprintf_r+0x180>
 80279a6:	2900      	cmp	r1, #0
 80279a8:	d111      	bne.n	80279ce <_svfiprintf_r+0x106>
 80279aa:	e017      	b.n	80279dc <_svfiprintf_r+0x114>
 80279ac:	3501      	adds	r5, #1
 80279ae:	e7af      	b.n	8027910 <_svfiprintf_r+0x48>
 80279b0:	9b05      	ldr	r3, [sp, #20]
 80279b2:	6822      	ldr	r2, [r4, #0]
 80279b4:	1ac0      	subs	r0, r0, r3
 80279b6:	2301      	movs	r3, #1
 80279b8:	4083      	lsls	r3, r0
 80279ba:	4313      	orrs	r3, r2
 80279bc:	002e      	movs	r6, r5
 80279be:	6023      	str	r3, [r4, #0]
 80279c0:	e7cc      	b.n	802795c <_svfiprintf_r+0x94>
 80279c2:	9b07      	ldr	r3, [sp, #28]
 80279c4:	1d19      	adds	r1, r3, #4
 80279c6:	681b      	ldr	r3, [r3, #0]
 80279c8:	9107      	str	r1, [sp, #28]
 80279ca:	2b00      	cmp	r3, #0
 80279cc:	db01      	blt.n	80279d2 <_svfiprintf_r+0x10a>
 80279ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80279d0:	e004      	b.n	80279dc <_svfiprintf_r+0x114>
 80279d2:	425b      	negs	r3, r3
 80279d4:	60e3      	str	r3, [r4, #12]
 80279d6:	2302      	movs	r3, #2
 80279d8:	4313      	orrs	r3, r2
 80279da:	6023      	str	r3, [r4, #0]
 80279dc:	782b      	ldrb	r3, [r5, #0]
 80279de:	2b2e      	cmp	r3, #46	@ 0x2e
 80279e0:	d10c      	bne.n	80279fc <_svfiprintf_r+0x134>
 80279e2:	786b      	ldrb	r3, [r5, #1]
 80279e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80279e6:	d134      	bne.n	8027a52 <_svfiprintf_r+0x18a>
 80279e8:	9b07      	ldr	r3, [sp, #28]
 80279ea:	3502      	adds	r5, #2
 80279ec:	1d1a      	adds	r2, r3, #4
 80279ee:	681b      	ldr	r3, [r3, #0]
 80279f0:	9207      	str	r2, [sp, #28]
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	da01      	bge.n	80279fa <_svfiprintf_r+0x132>
 80279f6:	2301      	movs	r3, #1
 80279f8:	425b      	negs	r3, r3
 80279fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80279fc:	4e2d      	ldr	r6, [pc, #180]	@ (8027ab4 <_svfiprintf_r+0x1ec>)
 80279fe:	2203      	movs	r2, #3
 8027a00:	0030      	movs	r0, r6
 8027a02:	7829      	ldrb	r1, [r5, #0]
 8027a04:	f7fd ff2d 	bl	8025862 <memchr>
 8027a08:	2800      	cmp	r0, #0
 8027a0a:	d006      	beq.n	8027a1a <_svfiprintf_r+0x152>
 8027a0c:	2340      	movs	r3, #64	@ 0x40
 8027a0e:	1b80      	subs	r0, r0, r6
 8027a10:	4083      	lsls	r3, r0
 8027a12:	6822      	ldr	r2, [r4, #0]
 8027a14:	3501      	adds	r5, #1
 8027a16:	4313      	orrs	r3, r2
 8027a18:	6023      	str	r3, [r4, #0]
 8027a1a:	7829      	ldrb	r1, [r5, #0]
 8027a1c:	2206      	movs	r2, #6
 8027a1e:	4826      	ldr	r0, [pc, #152]	@ (8027ab8 <_svfiprintf_r+0x1f0>)
 8027a20:	1c6e      	adds	r6, r5, #1
 8027a22:	7621      	strb	r1, [r4, #24]
 8027a24:	f7fd ff1d 	bl	8025862 <memchr>
 8027a28:	2800      	cmp	r0, #0
 8027a2a:	d038      	beq.n	8027a9e <_svfiprintf_r+0x1d6>
 8027a2c:	4b23      	ldr	r3, [pc, #140]	@ (8027abc <_svfiprintf_r+0x1f4>)
 8027a2e:	2b00      	cmp	r3, #0
 8027a30:	d122      	bne.n	8027a78 <_svfiprintf_r+0x1b0>
 8027a32:	2207      	movs	r2, #7
 8027a34:	9b07      	ldr	r3, [sp, #28]
 8027a36:	3307      	adds	r3, #7
 8027a38:	4393      	bics	r3, r2
 8027a3a:	3308      	adds	r3, #8
 8027a3c:	9307      	str	r3, [sp, #28]
 8027a3e:	6963      	ldr	r3, [r4, #20]
 8027a40:	9a04      	ldr	r2, [sp, #16]
 8027a42:	189b      	adds	r3, r3, r2
 8027a44:	6163      	str	r3, [r4, #20]
 8027a46:	e762      	b.n	802790e <_svfiprintf_r+0x46>
 8027a48:	4343      	muls	r3, r0
 8027a4a:	0035      	movs	r5, r6
 8027a4c:	2101      	movs	r1, #1
 8027a4e:	189b      	adds	r3, r3, r2
 8027a50:	e7a4      	b.n	802799c <_svfiprintf_r+0xd4>
 8027a52:	2300      	movs	r3, #0
 8027a54:	200a      	movs	r0, #10
 8027a56:	0019      	movs	r1, r3
 8027a58:	3501      	adds	r5, #1
 8027a5a:	6063      	str	r3, [r4, #4]
 8027a5c:	782a      	ldrb	r2, [r5, #0]
 8027a5e:	1c6e      	adds	r6, r5, #1
 8027a60:	3a30      	subs	r2, #48	@ 0x30
 8027a62:	2a09      	cmp	r2, #9
 8027a64:	d903      	bls.n	8027a6e <_svfiprintf_r+0x1a6>
 8027a66:	2b00      	cmp	r3, #0
 8027a68:	d0c8      	beq.n	80279fc <_svfiprintf_r+0x134>
 8027a6a:	9109      	str	r1, [sp, #36]	@ 0x24
 8027a6c:	e7c6      	b.n	80279fc <_svfiprintf_r+0x134>
 8027a6e:	4341      	muls	r1, r0
 8027a70:	0035      	movs	r5, r6
 8027a72:	2301      	movs	r3, #1
 8027a74:	1889      	adds	r1, r1, r2
 8027a76:	e7f1      	b.n	8027a5c <_svfiprintf_r+0x194>
 8027a78:	aa07      	add	r2, sp, #28
 8027a7a:	9200      	str	r2, [sp, #0]
 8027a7c:	0021      	movs	r1, r4
 8027a7e:	003a      	movs	r2, r7
 8027a80:	4b0f      	ldr	r3, [pc, #60]	@ (8027ac0 <_svfiprintf_r+0x1f8>)
 8027a82:	9803      	ldr	r0, [sp, #12]
 8027a84:	f7fc ffc4 	bl	8024a10 <_printf_float>
 8027a88:	9004      	str	r0, [sp, #16]
 8027a8a:	9b04      	ldr	r3, [sp, #16]
 8027a8c:	3301      	adds	r3, #1
 8027a8e:	d1d6      	bne.n	8027a3e <_svfiprintf_r+0x176>
 8027a90:	89bb      	ldrh	r3, [r7, #12]
 8027a92:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027a94:	065b      	lsls	r3, r3, #25
 8027a96:	d500      	bpl.n	8027a9a <_svfiprintf_r+0x1d2>
 8027a98:	e72c      	b.n	80278f4 <_svfiprintf_r+0x2c>
 8027a9a:	b021      	add	sp, #132	@ 0x84
 8027a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027a9e:	aa07      	add	r2, sp, #28
 8027aa0:	9200      	str	r2, [sp, #0]
 8027aa2:	0021      	movs	r1, r4
 8027aa4:	003a      	movs	r2, r7
 8027aa6:	4b06      	ldr	r3, [pc, #24]	@ (8027ac0 <_svfiprintf_r+0x1f8>)
 8027aa8:	9803      	ldr	r0, [sp, #12]
 8027aaa:	f7fd fa5f 	bl	8024f6c <_printf_i>
 8027aae:	e7eb      	b.n	8027a88 <_svfiprintf_r+0x1c0>
 8027ab0:	0802e20c 	.word	0x0802e20c
 8027ab4:	0802e212 	.word	0x0802e212
 8027ab8:	0802e216 	.word	0x0802e216
 8027abc:	08024a11 	.word	0x08024a11
 8027ac0:	08027809 	.word	0x08027809

08027ac4 <__sfputc_r>:
 8027ac4:	6893      	ldr	r3, [r2, #8]
 8027ac6:	b510      	push	{r4, lr}
 8027ac8:	3b01      	subs	r3, #1
 8027aca:	6093      	str	r3, [r2, #8]
 8027acc:	2b00      	cmp	r3, #0
 8027ace:	da04      	bge.n	8027ada <__sfputc_r+0x16>
 8027ad0:	6994      	ldr	r4, [r2, #24]
 8027ad2:	42a3      	cmp	r3, r4
 8027ad4:	db07      	blt.n	8027ae6 <__sfputc_r+0x22>
 8027ad6:	290a      	cmp	r1, #10
 8027ad8:	d005      	beq.n	8027ae6 <__sfputc_r+0x22>
 8027ada:	6813      	ldr	r3, [r2, #0]
 8027adc:	1c58      	adds	r0, r3, #1
 8027ade:	6010      	str	r0, [r2, #0]
 8027ae0:	7019      	strb	r1, [r3, #0]
 8027ae2:	0008      	movs	r0, r1
 8027ae4:	bd10      	pop	{r4, pc}
 8027ae6:	f7fd fd4b 	bl	8025580 <__swbuf_r>
 8027aea:	0001      	movs	r1, r0
 8027aec:	e7f9      	b.n	8027ae2 <__sfputc_r+0x1e>

08027aee <__sfputs_r>:
 8027aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027af0:	0006      	movs	r6, r0
 8027af2:	000f      	movs	r7, r1
 8027af4:	0014      	movs	r4, r2
 8027af6:	18d5      	adds	r5, r2, r3
 8027af8:	42ac      	cmp	r4, r5
 8027afa:	d101      	bne.n	8027b00 <__sfputs_r+0x12>
 8027afc:	2000      	movs	r0, #0
 8027afe:	e007      	b.n	8027b10 <__sfputs_r+0x22>
 8027b00:	7821      	ldrb	r1, [r4, #0]
 8027b02:	003a      	movs	r2, r7
 8027b04:	0030      	movs	r0, r6
 8027b06:	f7ff ffdd 	bl	8027ac4 <__sfputc_r>
 8027b0a:	3401      	adds	r4, #1
 8027b0c:	1c43      	adds	r3, r0, #1
 8027b0e:	d1f3      	bne.n	8027af8 <__sfputs_r+0xa>
 8027b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027b14 <_vfiprintf_r>:
 8027b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b16:	b0a1      	sub	sp, #132	@ 0x84
 8027b18:	000f      	movs	r7, r1
 8027b1a:	0015      	movs	r5, r2
 8027b1c:	001e      	movs	r6, r3
 8027b1e:	9003      	str	r0, [sp, #12]
 8027b20:	2800      	cmp	r0, #0
 8027b22:	d004      	beq.n	8027b2e <_vfiprintf_r+0x1a>
 8027b24:	6a03      	ldr	r3, [r0, #32]
 8027b26:	2b00      	cmp	r3, #0
 8027b28:	d101      	bne.n	8027b2e <_vfiprintf_r+0x1a>
 8027b2a:	f7fd fbbb 	bl	80252a4 <__sinit>
 8027b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027b30:	07db      	lsls	r3, r3, #31
 8027b32:	d405      	bmi.n	8027b40 <_vfiprintf_r+0x2c>
 8027b34:	89bb      	ldrh	r3, [r7, #12]
 8027b36:	059b      	lsls	r3, r3, #22
 8027b38:	d402      	bmi.n	8027b40 <_vfiprintf_r+0x2c>
 8027b3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027b3c:	f7fd fe8f 	bl	802585e <__retarget_lock_acquire_recursive>
 8027b40:	89bb      	ldrh	r3, [r7, #12]
 8027b42:	071b      	lsls	r3, r3, #28
 8027b44:	d502      	bpl.n	8027b4c <_vfiprintf_r+0x38>
 8027b46:	693b      	ldr	r3, [r7, #16]
 8027b48:	2b00      	cmp	r3, #0
 8027b4a:	d113      	bne.n	8027b74 <_vfiprintf_r+0x60>
 8027b4c:	0039      	movs	r1, r7
 8027b4e:	9803      	ldr	r0, [sp, #12]
 8027b50:	f7fd fd58 	bl	8025604 <__swsetup_r>
 8027b54:	2800      	cmp	r0, #0
 8027b56:	d00d      	beq.n	8027b74 <_vfiprintf_r+0x60>
 8027b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027b5a:	07db      	lsls	r3, r3, #31
 8027b5c:	d503      	bpl.n	8027b66 <_vfiprintf_r+0x52>
 8027b5e:	2001      	movs	r0, #1
 8027b60:	4240      	negs	r0, r0
 8027b62:	b021      	add	sp, #132	@ 0x84
 8027b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027b66:	89bb      	ldrh	r3, [r7, #12]
 8027b68:	059b      	lsls	r3, r3, #22
 8027b6a:	d4f8      	bmi.n	8027b5e <_vfiprintf_r+0x4a>
 8027b6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027b6e:	f7fd fe77 	bl	8025860 <__retarget_lock_release_recursive>
 8027b72:	e7f4      	b.n	8027b5e <_vfiprintf_r+0x4a>
 8027b74:	2300      	movs	r3, #0
 8027b76:	ac08      	add	r4, sp, #32
 8027b78:	6163      	str	r3, [r4, #20]
 8027b7a:	3320      	adds	r3, #32
 8027b7c:	7663      	strb	r3, [r4, #25]
 8027b7e:	3310      	adds	r3, #16
 8027b80:	76a3      	strb	r3, [r4, #26]
 8027b82:	9607      	str	r6, [sp, #28]
 8027b84:	002e      	movs	r6, r5
 8027b86:	7833      	ldrb	r3, [r6, #0]
 8027b88:	2b00      	cmp	r3, #0
 8027b8a:	d001      	beq.n	8027b90 <_vfiprintf_r+0x7c>
 8027b8c:	2b25      	cmp	r3, #37	@ 0x25
 8027b8e:	d148      	bne.n	8027c22 <_vfiprintf_r+0x10e>
 8027b90:	1b73      	subs	r3, r6, r5
 8027b92:	9305      	str	r3, [sp, #20]
 8027b94:	42ae      	cmp	r6, r5
 8027b96:	d00b      	beq.n	8027bb0 <_vfiprintf_r+0x9c>
 8027b98:	002a      	movs	r2, r5
 8027b9a:	0039      	movs	r1, r7
 8027b9c:	9803      	ldr	r0, [sp, #12]
 8027b9e:	f7ff ffa6 	bl	8027aee <__sfputs_r>
 8027ba2:	3001      	adds	r0, #1
 8027ba4:	d100      	bne.n	8027ba8 <_vfiprintf_r+0x94>
 8027ba6:	e0ae      	b.n	8027d06 <_vfiprintf_r+0x1f2>
 8027ba8:	6963      	ldr	r3, [r4, #20]
 8027baa:	9a05      	ldr	r2, [sp, #20]
 8027bac:	189b      	adds	r3, r3, r2
 8027bae:	6163      	str	r3, [r4, #20]
 8027bb0:	7833      	ldrb	r3, [r6, #0]
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	d100      	bne.n	8027bb8 <_vfiprintf_r+0xa4>
 8027bb6:	e0a6      	b.n	8027d06 <_vfiprintf_r+0x1f2>
 8027bb8:	2201      	movs	r2, #1
 8027bba:	2300      	movs	r3, #0
 8027bbc:	4252      	negs	r2, r2
 8027bbe:	6062      	str	r2, [r4, #4]
 8027bc0:	a904      	add	r1, sp, #16
 8027bc2:	3254      	adds	r2, #84	@ 0x54
 8027bc4:	1852      	adds	r2, r2, r1
 8027bc6:	1c75      	adds	r5, r6, #1
 8027bc8:	6023      	str	r3, [r4, #0]
 8027bca:	60e3      	str	r3, [r4, #12]
 8027bcc:	60a3      	str	r3, [r4, #8]
 8027bce:	7013      	strb	r3, [r2, #0]
 8027bd0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8027bd2:	4b59      	ldr	r3, [pc, #356]	@ (8027d38 <_vfiprintf_r+0x224>)
 8027bd4:	2205      	movs	r2, #5
 8027bd6:	0018      	movs	r0, r3
 8027bd8:	7829      	ldrb	r1, [r5, #0]
 8027bda:	9305      	str	r3, [sp, #20]
 8027bdc:	f7fd fe41 	bl	8025862 <memchr>
 8027be0:	1c6e      	adds	r6, r5, #1
 8027be2:	2800      	cmp	r0, #0
 8027be4:	d11f      	bne.n	8027c26 <_vfiprintf_r+0x112>
 8027be6:	6822      	ldr	r2, [r4, #0]
 8027be8:	06d3      	lsls	r3, r2, #27
 8027bea:	d504      	bpl.n	8027bf6 <_vfiprintf_r+0xe2>
 8027bec:	2353      	movs	r3, #83	@ 0x53
 8027bee:	a904      	add	r1, sp, #16
 8027bf0:	185b      	adds	r3, r3, r1
 8027bf2:	2120      	movs	r1, #32
 8027bf4:	7019      	strb	r1, [r3, #0]
 8027bf6:	0713      	lsls	r3, r2, #28
 8027bf8:	d504      	bpl.n	8027c04 <_vfiprintf_r+0xf0>
 8027bfa:	2353      	movs	r3, #83	@ 0x53
 8027bfc:	a904      	add	r1, sp, #16
 8027bfe:	185b      	adds	r3, r3, r1
 8027c00:	212b      	movs	r1, #43	@ 0x2b
 8027c02:	7019      	strb	r1, [r3, #0]
 8027c04:	782b      	ldrb	r3, [r5, #0]
 8027c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c08:	d016      	beq.n	8027c38 <_vfiprintf_r+0x124>
 8027c0a:	002e      	movs	r6, r5
 8027c0c:	2100      	movs	r1, #0
 8027c0e:	200a      	movs	r0, #10
 8027c10:	68e3      	ldr	r3, [r4, #12]
 8027c12:	7832      	ldrb	r2, [r6, #0]
 8027c14:	1c75      	adds	r5, r6, #1
 8027c16:	3a30      	subs	r2, #48	@ 0x30
 8027c18:	2a09      	cmp	r2, #9
 8027c1a:	d950      	bls.n	8027cbe <_vfiprintf_r+0x1aa>
 8027c1c:	2900      	cmp	r1, #0
 8027c1e:	d111      	bne.n	8027c44 <_vfiprintf_r+0x130>
 8027c20:	e017      	b.n	8027c52 <_vfiprintf_r+0x13e>
 8027c22:	3601      	adds	r6, #1
 8027c24:	e7af      	b.n	8027b86 <_vfiprintf_r+0x72>
 8027c26:	9b05      	ldr	r3, [sp, #20]
 8027c28:	6822      	ldr	r2, [r4, #0]
 8027c2a:	1ac0      	subs	r0, r0, r3
 8027c2c:	2301      	movs	r3, #1
 8027c2e:	4083      	lsls	r3, r0
 8027c30:	4313      	orrs	r3, r2
 8027c32:	0035      	movs	r5, r6
 8027c34:	6023      	str	r3, [r4, #0]
 8027c36:	e7cc      	b.n	8027bd2 <_vfiprintf_r+0xbe>
 8027c38:	9b07      	ldr	r3, [sp, #28]
 8027c3a:	1d19      	adds	r1, r3, #4
 8027c3c:	681b      	ldr	r3, [r3, #0]
 8027c3e:	9107      	str	r1, [sp, #28]
 8027c40:	2b00      	cmp	r3, #0
 8027c42:	db01      	blt.n	8027c48 <_vfiprintf_r+0x134>
 8027c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8027c46:	e004      	b.n	8027c52 <_vfiprintf_r+0x13e>
 8027c48:	425b      	negs	r3, r3
 8027c4a:	60e3      	str	r3, [r4, #12]
 8027c4c:	2302      	movs	r3, #2
 8027c4e:	4313      	orrs	r3, r2
 8027c50:	6023      	str	r3, [r4, #0]
 8027c52:	7833      	ldrb	r3, [r6, #0]
 8027c54:	2b2e      	cmp	r3, #46	@ 0x2e
 8027c56:	d10c      	bne.n	8027c72 <_vfiprintf_r+0x15e>
 8027c58:	7873      	ldrb	r3, [r6, #1]
 8027c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8027c5c:	d134      	bne.n	8027cc8 <_vfiprintf_r+0x1b4>
 8027c5e:	9b07      	ldr	r3, [sp, #28]
 8027c60:	3602      	adds	r6, #2
 8027c62:	1d1a      	adds	r2, r3, #4
 8027c64:	681b      	ldr	r3, [r3, #0]
 8027c66:	9207      	str	r2, [sp, #28]
 8027c68:	2b00      	cmp	r3, #0
 8027c6a:	da01      	bge.n	8027c70 <_vfiprintf_r+0x15c>
 8027c6c:	2301      	movs	r3, #1
 8027c6e:	425b      	negs	r3, r3
 8027c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c72:	4d32      	ldr	r5, [pc, #200]	@ (8027d3c <_vfiprintf_r+0x228>)
 8027c74:	2203      	movs	r2, #3
 8027c76:	0028      	movs	r0, r5
 8027c78:	7831      	ldrb	r1, [r6, #0]
 8027c7a:	f7fd fdf2 	bl	8025862 <memchr>
 8027c7e:	2800      	cmp	r0, #0
 8027c80:	d006      	beq.n	8027c90 <_vfiprintf_r+0x17c>
 8027c82:	2340      	movs	r3, #64	@ 0x40
 8027c84:	1b40      	subs	r0, r0, r5
 8027c86:	4083      	lsls	r3, r0
 8027c88:	6822      	ldr	r2, [r4, #0]
 8027c8a:	3601      	adds	r6, #1
 8027c8c:	4313      	orrs	r3, r2
 8027c8e:	6023      	str	r3, [r4, #0]
 8027c90:	7831      	ldrb	r1, [r6, #0]
 8027c92:	2206      	movs	r2, #6
 8027c94:	482a      	ldr	r0, [pc, #168]	@ (8027d40 <_vfiprintf_r+0x22c>)
 8027c96:	1c75      	adds	r5, r6, #1
 8027c98:	7621      	strb	r1, [r4, #24]
 8027c9a:	f7fd fde2 	bl	8025862 <memchr>
 8027c9e:	2800      	cmp	r0, #0
 8027ca0:	d040      	beq.n	8027d24 <_vfiprintf_r+0x210>
 8027ca2:	4b28      	ldr	r3, [pc, #160]	@ (8027d44 <_vfiprintf_r+0x230>)
 8027ca4:	2b00      	cmp	r3, #0
 8027ca6:	d122      	bne.n	8027cee <_vfiprintf_r+0x1da>
 8027ca8:	2207      	movs	r2, #7
 8027caa:	9b07      	ldr	r3, [sp, #28]
 8027cac:	3307      	adds	r3, #7
 8027cae:	4393      	bics	r3, r2
 8027cb0:	3308      	adds	r3, #8
 8027cb2:	9307      	str	r3, [sp, #28]
 8027cb4:	6963      	ldr	r3, [r4, #20]
 8027cb6:	9a04      	ldr	r2, [sp, #16]
 8027cb8:	189b      	adds	r3, r3, r2
 8027cba:	6163      	str	r3, [r4, #20]
 8027cbc:	e762      	b.n	8027b84 <_vfiprintf_r+0x70>
 8027cbe:	4343      	muls	r3, r0
 8027cc0:	002e      	movs	r6, r5
 8027cc2:	2101      	movs	r1, #1
 8027cc4:	189b      	adds	r3, r3, r2
 8027cc6:	e7a4      	b.n	8027c12 <_vfiprintf_r+0xfe>
 8027cc8:	2300      	movs	r3, #0
 8027cca:	200a      	movs	r0, #10
 8027ccc:	0019      	movs	r1, r3
 8027cce:	3601      	adds	r6, #1
 8027cd0:	6063      	str	r3, [r4, #4]
 8027cd2:	7832      	ldrb	r2, [r6, #0]
 8027cd4:	1c75      	adds	r5, r6, #1
 8027cd6:	3a30      	subs	r2, #48	@ 0x30
 8027cd8:	2a09      	cmp	r2, #9
 8027cda:	d903      	bls.n	8027ce4 <_vfiprintf_r+0x1d0>
 8027cdc:	2b00      	cmp	r3, #0
 8027cde:	d0c8      	beq.n	8027c72 <_vfiprintf_r+0x15e>
 8027ce0:	9109      	str	r1, [sp, #36]	@ 0x24
 8027ce2:	e7c6      	b.n	8027c72 <_vfiprintf_r+0x15e>
 8027ce4:	4341      	muls	r1, r0
 8027ce6:	002e      	movs	r6, r5
 8027ce8:	2301      	movs	r3, #1
 8027cea:	1889      	adds	r1, r1, r2
 8027cec:	e7f1      	b.n	8027cd2 <_vfiprintf_r+0x1be>
 8027cee:	aa07      	add	r2, sp, #28
 8027cf0:	9200      	str	r2, [sp, #0]
 8027cf2:	0021      	movs	r1, r4
 8027cf4:	003a      	movs	r2, r7
 8027cf6:	4b14      	ldr	r3, [pc, #80]	@ (8027d48 <_vfiprintf_r+0x234>)
 8027cf8:	9803      	ldr	r0, [sp, #12]
 8027cfa:	f7fc fe89 	bl	8024a10 <_printf_float>
 8027cfe:	9004      	str	r0, [sp, #16]
 8027d00:	9b04      	ldr	r3, [sp, #16]
 8027d02:	3301      	adds	r3, #1
 8027d04:	d1d6      	bne.n	8027cb4 <_vfiprintf_r+0x1a0>
 8027d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8027d08:	07db      	lsls	r3, r3, #31
 8027d0a:	d405      	bmi.n	8027d18 <_vfiprintf_r+0x204>
 8027d0c:	89bb      	ldrh	r3, [r7, #12]
 8027d0e:	059b      	lsls	r3, r3, #22
 8027d10:	d402      	bmi.n	8027d18 <_vfiprintf_r+0x204>
 8027d12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8027d14:	f7fd fda4 	bl	8025860 <__retarget_lock_release_recursive>
 8027d18:	89bb      	ldrh	r3, [r7, #12]
 8027d1a:	065b      	lsls	r3, r3, #25
 8027d1c:	d500      	bpl.n	8027d20 <_vfiprintf_r+0x20c>
 8027d1e:	e71e      	b.n	8027b5e <_vfiprintf_r+0x4a>
 8027d20:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8027d22:	e71e      	b.n	8027b62 <_vfiprintf_r+0x4e>
 8027d24:	aa07      	add	r2, sp, #28
 8027d26:	9200      	str	r2, [sp, #0]
 8027d28:	0021      	movs	r1, r4
 8027d2a:	003a      	movs	r2, r7
 8027d2c:	4b06      	ldr	r3, [pc, #24]	@ (8027d48 <_vfiprintf_r+0x234>)
 8027d2e:	9803      	ldr	r0, [sp, #12]
 8027d30:	f7fd f91c 	bl	8024f6c <_printf_i>
 8027d34:	e7e3      	b.n	8027cfe <_vfiprintf_r+0x1ea>
 8027d36:	46c0      	nop			@ (mov r8, r8)
 8027d38:	0802e20c 	.word	0x0802e20c
 8027d3c:	0802e212 	.word	0x0802e212
 8027d40:	0802e216 	.word	0x0802e216
 8027d44:	08024a11 	.word	0x08024a11
 8027d48:	08027aef 	.word	0x08027aef

08027d4c <__sflush_r>:
 8027d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d4e:	220c      	movs	r2, #12
 8027d50:	5e8b      	ldrsh	r3, [r1, r2]
 8027d52:	0005      	movs	r5, r0
 8027d54:	000c      	movs	r4, r1
 8027d56:	071a      	lsls	r2, r3, #28
 8027d58:	d456      	bmi.n	8027e08 <__sflush_r+0xbc>
 8027d5a:	684a      	ldr	r2, [r1, #4]
 8027d5c:	2a00      	cmp	r2, #0
 8027d5e:	dc02      	bgt.n	8027d66 <__sflush_r+0x1a>
 8027d60:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8027d62:	2a00      	cmp	r2, #0
 8027d64:	dd4e      	ble.n	8027e04 <__sflush_r+0xb8>
 8027d66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027d68:	2f00      	cmp	r7, #0
 8027d6a:	d04b      	beq.n	8027e04 <__sflush_r+0xb8>
 8027d6c:	2200      	movs	r2, #0
 8027d6e:	2080      	movs	r0, #128	@ 0x80
 8027d70:	682e      	ldr	r6, [r5, #0]
 8027d72:	602a      	str	r2, [r5, #0]
 8027d74:	001a      	movs	r2, r3
 8027d76:	0140      	lsls	r0, r0, #5
 8027d78:	6a21      	ldr	r1, [r4, #32]
 8027d7a:	4002      	ands	r2, r0
 8027d7c:	4203      	tst	r3, r0
 8027d7e:	d033      	beq.n	8027de8 <__sflush_r+0x9c>
 8027d80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027d82:	89a3      	ldrh	r3, [r4, #12]
 8027d84:	075b      	lsls	r3, r3, #29
 8027d86:	d506      	bpl.n	8027d96 <__sflush_r+0x4a>
 8027d88:	6863      	ldr	r3, [r4, #4]
 8027d8a:	1ad2      	subs	r2, r2, r3
 8027d8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8027d8e:	2b00      	cmp	r3, #0
 8027d90:	d001      	beq.n	8027d96 <__sflush_r+0x4a>
 8027d92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027d94:	1ad2      	subs	r2, r2, r3
 8027d96:	2300      	movs	r3, #0
 8027d98:	0028      	movs	r0, r5
 8027d9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8027d9c:	6a21      	ldr	r1, [r4, #32]
 8027d9e:	47b8      	blx	r7
 8027da0:	89a2      	ldrh	r2, [r4, #12]
 8027da2:	1c43      	adds	r3, r0, #1
 8027da4:	d106      	bne.n	8027db4 <__sflush_r+0x68>
 8027da6:	6829      	ldr	r1, [r5, #0]
 8027da8:	291d      	cmp	r1, #29
 8027daa:	d846      	bhi.n	8027e3a <__sflush_r+0xee>
 8027dac:	4b29      	ldr	r3, [pc, #164]	@ (8027e54 <__sflush_r+0x108>)
 8027dae:	40cb      	lsrs	r3, r1
 8027db0:	07db      	lsls	r3, r3, #31
 8027db2:	d542      	bpl.n	8027e3a <__sflush_r+0xee>
 8027db4:	2300      	movs	r3, #0
 8027db6:	6063      	str	r3, [r4, #4]
 8027db8:	6923      	ldr	r3, [r4, #16]
 8027dba:	6023      	str	r3, [r4, #0]
 8027dbc:	04d2      	lsls	r2, r2, #19
 8027dbe:	d505      	bpl.n	8027dcc <__sflush_r+0x80>
 8027dc0:	1c43      	adds	r3, r0, #1
 8027dc2:	d102      	bne.n	8027dca <__sflush_r+0x7e>
 8027dc4:	682b      	ldr	r3, [r5, #0]
 8027dc6:	2b00      	cmp	r3, #0
 8027dc8:	d100      	bne.n	8027dcc <__sflush_r+0x80>
 8027dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8027dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8027dce:	602e      	str	r6, [r5, #0]
 8027dd0:	2900      	cmp	r1, #0
 8027dd2:	d017      	beq.n	8027e04 <__sflush_r+0xb8>
 8027dd4:	0023      	movs	r3, r4
 8027dd6:	3344      	adds	r3, #68	@ 0x44
 8027dd8:	4299      	cmp	r1, r3
 8027dda:	d002      	beq.n	8027de2 <__sflush_r+0x96>
 8027ddc:	0028      	movs	r0, r5
 8027dde:	f7fe fbd1 	bl	8026584 <_free_r>
 8027de2:	2300      	movs	r3, #0
 8027de4:	6363      	str	r3, [r4, #52]	@ 0x34
 8027de6:	e00d      	b.n	8027e04 <__sflush_r+0xb8>
 8027de8:	2301      	movs	r3, #1
 8027dea:	0028      	movs	r0, r5
 8027dec:	47b8      	blx	r7
 8027dee:	0002      	movs	r2, r0
 8027df0:	1c43      	adds	r3, r0, #1
 8027df2:	d1c6      	bne.n	8027d82 <__sflush_r+0x36>
 8027df4:	682b      	ldr	r3, [r5, #0]
 8027df6:	2b00      	cmp	r3, #0
 8027df8:	d0c3      	beq.n	8027d82 <__sflush_r+0x36>
 8027dfa:	2b1d      	cmp	r3, #29
 8027dfc:	d001      	beq.n	8027e02 <__sflush_r+0xb6>
 8027dfe:	2b16      	cmp	r3, #22
 8027e00:	d11a      	bne.n	8027e38 <__sflush_r+0xec>
 8027e02:	602e      	str	r6, [r5, #0]
 8027e04:	2000      	movs	r0, #0
 8027e06:	e01e      	b.n	8027e46 <__sflush_r+0xfa>
 8027e08:	690e      	ldr	r6, [r1, #16]
 8027e0a:	2e00      	cmp	r6, #0
 8027e0c:	d0fa      	beq.n	8027e04 <__sflush_r+0xb8>
 8027e0e:	680f      	ldr	r7, [r1, #0]
 8027e10:	600e      	str	r6, [r1, #0]
 8027e12:	1bba      	subs	r2, r7, r6
 8027e14:	9201      	str	r2, [sp, #4]
 8027e16:	2200      	movs	r2, #0
 8027e18:	079b      	lsls	r3, r3, #30
 8027e1a:	d100      	bne.n	8027e1e <__sflush_r+0xd2>
 8027e1c:	694a      	ldr	r2, [r1, #20]
 8027e1e:	60a2      	str	r2, [r4, #8]
 8027e20:	9b01      	ldr	r3, [sp, #4]
 8027e22:	2b00      	cmp	r3, #0
 8027e24:	ddee      	ble.n	8027e04 <__sflush_r+0xb8>
 8027e26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8027e28:	0032      	movs	r2, r6
 8027e2a:	001f      	movs	r7, r3
 8027e2c:	0028      	movs	r0, r5
 8027e2e:	9b01      	ldr	r3, [sp, #4]
 8027e30:	6a21      	ldr	r1, [r4, #32]
 8027e32:	47b8      	blx	r7
 8027e34:	2800      	cmp	r0, #0
 8027e36:	dc07      	bgt.n	8027e48 <__sflush_r+0xfc>
 8027e38:	89a2      	ldrh	r2, [r4, #12]
 8027e3a:	2340      	movs	r3, #64	@ 0x40
 8027e3c:	2001      	movs	r0, #1
 8027e3e:	4313      	orrs	r3, r2
 8027e40:	b21b      	sxth	r3, r3
 8027e42:	81a3      	strh	r3, [r4, #12]
 8027e44:	4240      	negs	r0, r0
 8027e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027e48:	9b01      	ldr	r3, [sp, #4]
 8027e4a:	1836      	adds	r6, r6, r0
 8027e4c:	1a1b      	subs	r3, r3, r0
 8027e4e:	9301      	str	r3, [sp, #4]
 8027e50:	e7e6      	b.n	8027e20 <__sflush_r+0xd4>
 8027e52:	46c0      	nop			@ (mov r8, r8)
 8027e54:	20400001 	.word	0x20400001

08027e58 <_fflush_r>:
 8027e58:	690b      	ldr	r3, [r1, #16]
 8027e5a:	b570      	push	{r4, r5, r6, lr}
 8027e5c:	0005      	movs	r5, r0
 8027e5e:	000c      	movs	r4, r1
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d102      	bne.n	8027e6a <_fflush_r+0x12>
 8027e64:	2500      	movs	r5, #0
 8027e66:	0028      	movs	r0, r5
 8027e68:	bd70      	pop	{r4, r5, r6, pc}
 8027e6a:	2800      	cmp	r0, #0
 8027e6c:	d004      	beq.n	8027e78 <_fflush_r+0x20>
 8027e6e:	6a03      	ldr	r3, [r0, #32]
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d101      	bne.n	8027e78 <_fflush_r+0x20>
 8027e74:	f7fd fa16 	bl	80252a4 <__sinit>
 8027e78:	220c      	movs	r2, #12
 8027e7a:	5ea3      	ldrsh	r3, [r4, r2]
 8027e7c:	2b00      	cmp	r3, #0
 8027e7e:	d0f1      	beq.n	8027e64 <_fflush_r+0xc>
 8027e80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027e82:	07d2      	lsls	r2, r2, #31
 8027e84:	d404      	bmi.n	8027e90 <_fflush_r+0x38>
 8027e86:	059b      	lsls	r3, r3, #22
 8027e88:	d402      	bmi.n	8027e90 <_fflush_r+0x38>
 8027e8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027e8c:	f7fd fce7 	bl	802585e <__retarget_lock_acquire_recursive>
 8027e90:	0028      	movs	r0, r5
 8027e92:	0021      	movs	r1, r4
 8027e94:	f7ff ff5a 	bl	8027d4c <__sflush_r>
 8027e98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027e9a:	0005      	movs	r5, r0
 8027e9c:	07db      	lsls	r3, r3, #31
 8027e9e:	d4e2      	bmi.n	8027e66 <_fflush_r+0xe>
 8027ea0:	89a3      	ldrh	r3, [r4, #12]
 8027ea2:	059b      	lsls	r3, r3, #22
 8027ea4:	d4df      	bmi.n	8027e66 <_fflush_r+0xe>
 8027ea6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027ea8:	f7fd fcda 	bl	8025860 <__retarget_lock_release_recursive>
 8027eac:	e7db      	b.n	8027e66 <_fflush_r+0xe>
	...

08027eb0 <__swhatbuf_r>:
 8027eb0:	b570      	push	{r4, r5, r6, lr}
 8027eb2:	000e      	movs	r6, r1
 8027eb4:	001d      	movs	r5, r3
 8027eb6:	230e      	movs	r3, #14
 8027eb8:	5ec9      	ldrsh	r1, [r1, r3]
 8027eba:	0014      	movs	r4, r2
 8027ebc:	b096      	sub	sp, #88	@ 0x58
 8027ebe:	2900      	cmp	r1, #0
 8027ec0:	da0c      	bge.n	8027edc <__swhatbuf_r+0x2c>
 8027ec2:	89b2      	ldrh	r2, [r6, #12]
 8027ec4:	2380      	movs	r3, #128	@ 0x80
 8027ec6:	0011      	movs	r1, r2
 8027ec8:	4019      	ands	r1, r3
 8027eca:	421a      	tst	r2, r3
 8027ecc:	d114      	bne.n	8027ef8 <__swhatbuf_r+0x48>
 8027ece:	2380      	movs	r3, #128	@ 0x80
 8027ed0:	00db      	lsls	r3, r3, #3
 8027ed2:	2000      	movs	r0, #0
 8027ed4:	6029      	str	r1, [r5, #0]
 8027ed6:	6023      	str	r3, [r4, #0]
 8027ed8:	b016      	add	sp, #88	@ 0x58
 8027eda:	bd70      	pop	{r4, r5, r6, pc}
 8027edc:	466a      	mov	r2, sp
 8027ede:	f000 f865 	bl	8027fac <_fstat_r>
 8027ee2:	2800      	cmp	r0, #0
 8027ee4:	dbed      	blt.n	8027ec2 <__swhatbuf_r+0x12>
 8027ee6:	23f0      	movs	r3, #240	@ 0xf0
 8027ee8:	9901      	ldr	r1, [sp, #4]
 8027eea:	021b      	lsls	r3, r3, #8
 8027eec:	4019      	ands	r1, r3
 8027eee:	4b04      	ldr	r3, [pc, #16]	@ (8027f00 <__swhatbuf_r+0x50>)
 8027ef0:	18c9      	adds	r1, r1, r3
 8027ef2:	424b      	negs	r3, r1
 8027ef4:	4159      	adcs	r1, r3
 8027ef6:	e7ea      	b.n	8027ece <__swhatbuf_r+0x1e>
 8027ef8:	2100      	movs	r1, #0
 8027efa:	2340      	movs	r3, #64	@ 0x40
 8027efc:	e7e9      	b.n	8027ed2 <__swhatbuf_r+0x22>
 8027efe:	46c0      	nop			@ (mov r8, r8)
 8027f00:	ffffe000 	.word	0xffffe000

08027f04 <__smakebuf_r>:
 8027f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027f06:	2602      	movs	r6, #2
 8027f08:	898b      	ldrh	r3, [r1, #12]
 8027f0a:	0005      	movs	r5, r0
 8027f0c:	000c      	movs	r4, r1
 8027f0e:	b085      	sub	sp, #20
 8027f10:	4233      	tst	r3, r6
 8027f12:	d007      	beq.n	8027f24 <__smakebuf_r+0x20>
 8027f14:	0023      	movs	r3, r4
 8027f16:	3347      	adds	r3, #71	@ 0x47
 8027f18:	6023      	str	r3, [r4, #0]
 8027f1a:	6123      	str	r3, [r4, #16]
 8027f1c:	2301      	movs	r3, #1
 8027f1e:	6163      	str	r3, [r4, #20]
 8027f20:	b005      	add	sp, #20
 8027f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027f24:	ab03      	add	r3, sp, #12
 8027f26:	aa02      	add	r2, sp, #8
 8027f28:	f7ff ffc2 	bl	8027eb0 <__swhatbuf_r>
 8027f2c:	9f02      	ldr	r7, [sp, #8]
 8027f2e:	9001      	str	r0, [sp, #4]
 8027f30:	0039      	movs	r1, r7
 8027f32:	0028      	movs	r0, r5
 8027f34:	f7fe fef6 	bl	8026d24 <_malloc_r>
 8027f38:	2800      	cmp	r0, #0
 8027f3a:	d108      	bne.n	8027f4e <__smakebuf_r+0x4a>
 8027f3c:	220c      	movs	r2, #12
 8027f3e:	5ea3      	ldrsh	r3, [r4, r2]
 8027f40:	059a      	lsls	r2, r3, #22
 8027f42:	d4ed      	bmi.n	8027f20 <__smakebuf_r+0x1c>
 8027f44:	2203      	movs	r2, #3
 8027f46:	4393      	bics	r3, r2
 8027f48:	431e      	orrs	r6, r3
 8027f4a:	81a6      	strh	r6, [r4, #12]
 8027f4c:	e7e2      	b.n	8027f14 <__smakebuf_r+0x10>
 8027f4e:	2380      	movs	r3, #128	@ 0x80
 8027f50:	89a2      	ldrh	r2, [r4, #12]
 8027f52:	6020      	str	r0, [r4, #0]
 8027f54:	4313      	orrs	r3, r2
 8027f56:	81a3      	strh	r3, [r4, #12]
 8027f58:	9b03      	ldr	r3, [sp, #12]
 8027f5a:	6120      	str	r0, [r4, #16]
 8027f5c:	6167      	str	r7, [r4, #20]
 8027f5e:	2b00      	cmp	r3, #0
 8027f60:	d00c      	beq.n	8027f7c <__smakebuf_r+0x78>
 8027f62:	0028      	movs	r0, r5
 8027f64:	230e      	movs	r3, #14
 8027f66:	5ee1      	ldrsh	r1, [r4, r3]
 8027f68:	f000 f832 	bl	8027fd0 <_isatty_r>
 8027f6c:	2800      	cmp	r0, #0
 8027f6e:	d005      	beq.n	8027f7c <__smakebuf_r+0x78>
 8027f70:	2303      	movs	r3, #3
 8027f72:	89a2      	ldrh	r2, [r4, #12]
 8027f74:	439a      	bics	r2, r3
 8027f76:	3b02      	subs	r3, #2
 8027f78:	4313      	orrs	r3, r2
 8027f7a:	81a3      	strh	r3, [r4, #12]
 8027f7c:	89a3      	ldrh	r3, [r4, #12]
 8027f7e:	9a01      	ldr	r2, [sp, #4]
 8027f80:	4313      	orrs	r3, r2
 8027f82:	81a3      	strh	r3, [r4, #12]
 8027f84:	e7cc      	b.n	8027f20 <__smakebuf_r+0x1c>

08027f86 <memmove>:
 8027f86:	b510      	push	{r4, lr}
 8027f88:	4288      	cmp	r0, r1
 8027f8a:	d902      	bls.n	8027f92 <memmove+0xc>
 8027f8c:	188b      	adds	r3, r1, r2
 8027f8e:	4298      	cmp	r0, r3
 8027f90:	d308      	bcc.n	8027fa4 <memmove+0x1e>
 8027f92:	2300      	movs	r3, #0
 8027f94:	429a      	cmp	r2, r3
 8027f96:	d007      	beq.n	8027fa8 <memmove+0x22>
 8027f98:	5ccc      	ldrb	r4, [r1, r3]
 8027f9a:	54c4      	strb	r4, [r0, r3]
 8027f9c:	3301      	adds	r3, #1
 8027f9e:	e7f9      	b.n	8027f94 <memmove+0xe>
 8027fa0:	5c8b      	ldrb	r3, [r1, r2]
 8027fa2:	5483      	strb	r3, [r0, r2]
 8027fa4:	3a01      	subs	r2, #1
 8027fa6:	d2fb      	bcs.n	8027fa0 <memmove+0x1a>
 8027fa8:	bd10      	pop	{r4, pc}
	...

08027fac <_fstat_r>:
 8027fac:	2300      	movs	r3, #0
 8027fae:	b570      	push	{r4, r5, r6, lr}
 8027fb0:	4d06      	ldr	r5, [pc, #24]	@ (8027fcc <_fstat_r+0x20>)
 8027fb2:	0004      	movs	r4, r0
 8027fb4:	0008      	movs	r0, r1
 8027fb6:	0011      	movs	r1, r2
 8027fb8:	602b      	str	r3, [r5, #0]
 8027fba:	f7ea fc57 	bl	801286c <_fstat>
 8027fbe:	1c43      	adds	r3, r0, #1
 8027fc0:	d103      	bne.n	8027fca <_fstat_r+0x1e>
 8027fc2:	682b      	ldr	r3, [r5, #0]
 8027fc4:	2b00      	cmp	r3, #0
 8027fc6:	d000      	beq.n	8027fca <_fstat_r+0x1e>
 8027fc8:	6023      	str	r3, [r4, #0]
 8027fca:	bd70      	pop	{r4, r5, r6, pc}
 8027fcc:	2000361c 	.word	0x2000361c

08027fd0 <_isatty_r>:
 8027fd0:	2300      	movs	r3, #0
 8027fd2:	b570      	push	{r4, r5, r6, lr}
 8027fd4:	4d06      	ldr	r5, [pc, #24]	@ (8027ff0 <_isatty_r+0x20>)
 8027fd6:	0004      	movs	r4, r0
 8027fd8:	0008      	movs	r0, r1
 8027fda:	602b      	str	r3, [r5, #0]
 8027fdc:	f7ea fc54 	bl	8012888 <_isatty>
 8027fe0:	1c43      	adds	r3, r0, #1
 8027fe2:	d103      	bne.n	8027fec <_isatty_r+0x1c>
 8027fe4:	682b      	ldr	r3, [r5, #0]
 8027fe6:	2b00      	cmp	r3, #0
 8027fe8:	d000      	beq.n	8027fec <_isatty_r+0x1c>
 8027fea:	6023      	str	r3, [r4, #0]
 8027fec:	bd70      	pop	{r4, r5, r6, pc}
 8027fee:	46c0      	nop			@ (mov r8, r8)
 8027ff0:	2000361c 	.word	0x2000361c

08027ff4 <_sbrk_r>:
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	b570      	push	{r4, r5, r6, lr}
 8027ff8:	4d06      	ldr	r5, [pc, #24]	@ (8028014 <_sbrk_r+0x20>)
 8027ffa:	0004      	movs	r4, r0
 8027ffc:	0008      	movs	r0, r1
 8027ffe:	602b      	str	r3, [r5, #0]
 8028000:	f7ea fc56 	bl	80128b0 <_sbrk>
 8028004:	1c43      	adds	r3, r0, #1
 8028006:	d103      	bne.n	8028010 <_sbrk_r+0x1c>
 8028008:	682b      	ldr	r3, [r5, #0]
 802800a:	2b00      	cmp	r3, #0
 802800c:	d000      	beq.n	8028010 <_sbrk_r+0x1c>
 802800e:	6023      	str	r3, [r4, #0]
 8028010:	bd70      	pop	{r4, r5, r6, pc}
 8028012:	46c0      	nop			@ (mov r8, r8)
 8028014:	2000361c 	.word	0x2000361c

08028018 <__assert_func>:
 8028018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802801a:	0014      	movs	r4, r2
 802801c:	001a      	movs	r2, r3
 802801e:	4b09      	ldr	r3, [pc, #36]	@ (8028044 <__assert_func+0x2c>)
 8028020:	0005      	movs	r5, r0
 8028022:	681b      	ldr	r3, [r3, #0]
 8028024:	000e      	movs	r6, r1
 8028026:	68d8      	ldr	r0, [r3, #12]
 8028028:	4b07      	ldr	r3, [pc, #28]	@ (8028048 <__assert_func+0x30>)
 802802a:	2c00      	cmp	r4, #0
 802802c:	d101      	bne.n	8028032 <__assert_func+0x1a>
 802802e:	4b07      	ldr	r3, [pc, #28]	@ (802804c <__assert_func+0x34>)
 8028030:	001c      	movs	r4, r3
 8028032:	4907      	ldr	r1, [pc, #28]	@ (8028050 <__assert_func+0x38>)
 8028034:	9301      	str	r3, [sp, #4]
 8028036:	9402      	str	r4, [sp, #8]
 8028038:	002b      	movs	r3, r5
 802803a:	9600      	str	r6, [sp, #0]
 802803c:	f000 f868 	bl	8028110 <fiprintf>
 8028040:	f000 f876 	bl	8028130 <abort>
 8028044:	200003e0 	.word	0x200003e0
 8028048:	0802e21d 	.word	0x0802e21d
 802804c:	0802e258 	.word	0x0802e258
 8028050:	0802e22a 	.word	0x0802e22a

08028054 <_calloc_r>:
 8028054:	b570      	push	{r4, r5, r6, lr}
 8028056:	0c0b      	lsrs	r3, r1, #16
 8028058:	0c15      	lsrs	r5, r2, #16
 802805a:	2b00      	cmp	r3, #0
 802805c:	d11e      	bne.n	802809c <_calloc_r+0x48>
 802805e:	2d00      	cmp	r5, #0
 8028060:	d10c      	bne.n	802807c <_calloc_r+0x28>
 8028062:	b289      	uxth	r1, r1
 8028064:	b294      	uxth	r4, r2
 8028066:	434c      	muls	r4, r1
 8028068:	0021      	movs	r1, r4
 802806a:	f7fe fe5b 	bl	8026d24 <_malloc_r>
 802806e:	1e05      	subs	r5, r0, #0
 8028070:	d01b      	beq.n	80280aa <_calloc_r+0x56>
 8028072:	0022      	movs	r2, r4
 8028074:	2100      	movs	r1, #0
 8028076:	f7fd fb23 	bl	80256c0 <memset>
 802807a:	e016      	b.n	80280aa <_calloc_r+0x56>
 802807c:	1c2b      	adds	r3, r5, #0
 802807e:	1c0c      	adds	r4, r1, #0
 8028080:	b289      	uxth	r1, r1
 8028082:	b292      	uxth	r2, r2
 8028084:	434a      	muls	r2, r1
 8028086:	b29b      	uxth	r3, r3
 8028088:	b2a1      	uxth	r1, r4
 802808a:	4359      	muls	r1, r3
 802808c:	0c14      	lsrs	r4, r2, #16
 802808e:	190c      	adds	r4, r1, r4
 8028090:	0c23      	lsrs	r3, r4, #16
 8028092:	d107      	bne.n	80280a4 <_calloc_r+0x50>
 8028094:	0424      	lsls	r4, r4, #16
 8028096:	b292      	uxth	r2, r2
 8028098:	4314      	orrs	r4, r2
 802809a:	e7e5      	b.n	8028068 <_calloc_r+0x14>
 802809c:	2d00      	cmp	r5, #0
 802809e:	d101      	bne.n	80280a4 <_calloc_r+0x50>
 80280a0:	1c14      	adds	r4, r2, #0
 80280a2:	e7ed      	b.n	8028080 <_calloc_r+0x2c>
 80280a4:	230c      	movs	r3, #12
 80280a6:	2500      	movs	r5, #0
 80280a8:	6003      	str	r3, [r0, #0]
 80280aa:	0028      	movs	r0, r5
 80280ac:	bd70      	pop	{r4, r5, r6, pc}

080280ae <_realloc_r>:
 80280ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80280b0:	0006      	movs	r6, r0
 80280b2:	000c      	movs	r4, r1
 80280b4:	0015      	movs	r5, r2
 80280b6:	2900      	cmp	r1, #0
 80280b8:	d105      	bne.n	80280c6 <_realloc_r+0x18>
 80280ba:	0011      	movs	r1, r2
 80280bc:	f7fe fe32 	bl	8026d24 <_malloc_r>
 80280c0:	0004      	movs	r4, r0
 80280c2:	0020      	movs	r0, r4
 80280c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80280c6:	2a00      	cmp	r2, #0
 80280c8:	d103      	bne.n	80280d2 <_realloc_r+0x24>
 80280ca:	f7fe fa5b 	bl	8026584 <_free_r>
 80280ce:	002c      	movs	r4, r5
 80280d0:	e7f7      	b.n	80280c2 <_realloc_r+0x14>
 80280d2:	f000 f834 	bl	802813e <_malloc_usable_size_r>
 80280d6:	0007      	movs	r7, r0
 80280d8:	4285      	cmp	r5, r0
 80280da:	d802      	bhi.n	80280e2 <_realloc_r+0x34>
 80280dc:	0843      	lsrs	r3, r0, #1
 80280de:	42ab      	cmp	r3, r5
 80280e0:	d3ef      	bcc.n	80280c2 <_realloc_r+0x14>
 80280e2:	0029      	movs	r1, r5
 80280e4:	0030      	movs	r0, r6
 80280e6:	f7fe fe1d 	bl	8026d24 <_malloc_r>
 80280ea:	9001      	str	r0, [sp, #4]
 80280ec:	2800      	cmp	r0, #0
 80280ee:	d101      	bne.n	80280f4 <_realloc_r+0x46>
 80280f0:	9c01      	ldr	r4, [sp, #4]
 80280f2:	e7e6      	b.n	80280c2 <_realloc_r+0x14>
 80280f4:	002a      	movs	r2, r5
 80280f6:	42bd      	cmp	r5, r7
 80280f8:	d900      	bls.n	80280fc <_realloc_r+0x4e>
 80280fa:	003a      	movs	r2, r7
 80280fc:	0021      	movs	r1, r4
 80280fe:	9801      	ldr	r0, [sp, #4]
 8028100:	f7fd fbba 	bl	8025878 <memcpy>
 8028104:	0021      	movs	r1, r4
 8028106:	0030      	movs	r0, r6
 8028108:	f7fe fa3c 	bl	8026584 <_free_r>
 802810c:	e7f0      	b.n	80280f0 <_realloc_r+0x42>
	...

08028110 <fiprintf>:
 8028110:	b40e      	push	{r1, r2, r3}
 8028112:	b517      	push	{r0, r1, r2, r4, lr}
 8028114:	4c05      	ldr	r4, [pc, #20]	@ (802812c <fiprintf+0x1c>)
 8028116:	ab05      	add	r3, sp, #20
 8028118:	cb04      	ldmia	r3!, {r2}
 802811a:	0001      	movs	r1, r0
 802811c:	6820      	ldr	r0, [r4, #0]
 802811e:	9301      	str	r3, [sp, #4]
 8028120:	f7ff fcf8 	bl	8027b14 <_vfiprintf_r>
 8028124:	bc1e      	pop	{r1, r2, r3, r4}
 8028126:	bc08      	pop	{r3}
 8028128:	b003      	add	sp, #12
 802812a:	4718      	bx	r3
 802812c:	200003e0 	.word	0x200003e0

08028130 <abort>:
 8028130:	2006      	movs	r0, #6
 8028132:	b510      	push	{r4, lr}
 8028134:	f000 f834 	bl	80281a0 <raise>
 8028138:	2001      	movs	r0, #1
 802813a:	f7ea fb63 	bl	8012804 <_exit>

0802813e <_malloc_usable_size_r>:
 802813e:	1f0b      	subs	r3, r1, #4
 8028140:	681b      	ldr	r3, [r3, #0]
 8028142:	1f18      	subs	r0, r3, #4
 8028144:	2b00      	cmp	r3, #0
 8028146:	da01      	bge.n	802814c <_malloc_usable_size_r+0xe>
 8028148:	580b      	ldr	r3, [r1, r0]
 802814a:	18c0      	adds	r0, r0, r3
 802814c:	4770      	bx	lr

0802814e <_raise_r>:
 802814e:	b570      	push	{r4, r5, r6, lr}
 8028150:	0004      	movs	r4, r0
 8028152:	000d      	movs	r5, r1
 8028154:	291f      	cmp	r1, #31
 8028156:	d904      	bls.n	8028162 <_raise_r+0x14>
 8028158:	2316      	movs	r3, #22
 802815a:	6003      	str	r3, [r0, #0]
 802815c:	2001      	movs	r0, #1
 802815e:	4240      	negs	r0, r0
 8028160:	bd70      	pop	{r4, r5, r6, pc}
 8028162:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8028164:	2b00      	cmp	r3, #0
 8028166:	d004      	beq.n	8028172 <_raise_r+0x24>
 8028168:	008a      	lsls	r2, r1, #2
 802816a:	189b      	adds	r3, r3, r2
 802816c:	681a      	ldr	r2, [r3, #0]
 802816e:	2a00      	cmp	r2, #0
 8028170:	d108      	bne.n	8028184 <_raise_r+0x36>
 8028172:	0020      	movs	r0, r4
 8028174:	f000 f830 	bl	80281d8 <_getpid_r>
 8028178:	002a      	movs	r2, r5
 802817a:	0001      	movs	r1, r0
 802817c:	0020      	movs	r0, r4
 802817e:	f000 f819 	bl	80281b4 <_kill_r>
 8028182:	e7ed      	b.n	8028160 <_raise_r+0x12>
 8028184:	2a01      	cmp	r2, #1
 8028186:	d009      	beq.n	802819c <_raise_r+0x4e>
 8028188:	1c51      	adds	r1, r2, #1
 802818a:	d103      	bne.n	8028194 <_raise_r+0x46>
 802818c:	2316      	movs	r3, #22
 802818e:	6003      	str	r3, [r0, #0]
 8028190:	2001      	movs	r0, #1
 8028192:	e7e5      	b.n	8028160 <_raise_r+0x12>
 8028194:	2100      	movs	r1, #0
 8028196:	0028      	movs	r0, r5
 8028198:	6019      	str	r1, [r3, #0]
 802819a:	4790      	blx	r2
 802819c:	2000      	movs	r0, #0
 802819e:	e7df      	b.n	8028160 <_raise_r+0x12>

080281a0 <raise>:
 80281a0:	b510      	push	{r4, lr}
 80281a2:	4b03      	ldr	r3, [pc, #12]	@ (80281b0 <raise+0x10>)
 80281a4:	0001      	movs	r1, r0
 80281a6:	6818      	ldr	r0, [r3, #0]
 80281a8:	f7ff ffd1 	bl	802814e <_raise_r>
 80281ac:	bd10      	pop	{r4, pc}
 80281ae:	46c0      	nop			@ (mov r8, r8)
 80281b0:	200003e0 	.word	0x200003e0

080281b4 <_kill_r>:
 80281b4:	2300      	movs	r3, #0
 80281b6:	b570      	push	{r4, r5, r6, lr}
 80281b8:	4d06      	ldr	r5, [pc, #24]	@ (80281d4 <_kill_r+0x20>)
 80281ba:	0004      	movs	r4, r0
 80281bc:	0008      	movs	r0, r1
 80281be:	0011      	movs	r1, r2
 80281c0:	602b      	str	r3, [r5, #0]
 80281c2:	f7ea fb0f 	bl	80127e4 <_kill>
 80281c6:	1c43      	adds	r3, r0, #1
 80281c8:	d103      	bne.n	80281d2 <_kill_r+0x1e>
 80281ca:	682b      	ldr	r3, [r5, #0]
 80281cc:	2b00      	cmp	r3, #0
 80281ce:	d000      	beq.n	80281d2 <_kill_r+0x1e>
 80281d0:	6023      	str	r3, [r4, #0]
 80281d2:	bd70      	pop	{r4, r5, r6, pc}
 80281d4:	2000361c 	.word	0x2000361c

080281d8 <_getpid_r>:
 80281d8:	b510      	push	{r4, lr}
 80281da:	f7ea fafd 	bl	80127d8 <_getpid>
 80281de:	bd10      	pop	{r4, pc}

080281e0 <log>:
 80281e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80281e2:	0004      	movs	r4, r0
 80281e4:	000d      	movs	r5, r1
 80281e6:	f000 f98d 	bl	8028504 <__ieee754_log>
 80281ea:	0022      	movs	r2, r4
 80281ec:	0006      	movs	r6, r0
 80281ee:	000f      	movs	r7, r1
 80281f0:	002b      	movs	r3, r5
 80281f2:	0020      	movs	r0, r4
 80281f4:	0029      	movs	r1, r5
 80281f6:	f7db fa9d 	bl	8003734 <__aeabi_dcmpun>
 80281fa:	2800      	cmp	r0, #0
 80281fc:	d115      	bne.n	802822a <log+0x4a>
 80281fe:	2200      	movs	r2, #0
 8028200:	2300      	movs	r3, #0
 8028202:	0020      	movs	r0, r4
 8028204:	0029      	movs	r1, r5
 8028206:	f7d8 f96d 	bl	80004e4 <__aeabi_dcmpgt>
 802820a:	2800      	cmp	r0, #0
 802820c:	d10d      	bne.n	802822a <log+0x4a>
 802820e:	2200      	movs	r2, #0
 8028210:	2300      	movs	r3, #0
 8028212:	0020      	movs	r0, r4
 8028214:	0029      	movs	r1, r5
 8028216:	f7d8 f94b 	bl	80004b0 <__aeabi_dcmpeq>
 802821a:	2800      	cmp	r0, #0
 802821c:	d008      	beq.n	8028230 <log+0x50>
 802821e:	f7fd faf3 	bl	8025808 <__errno>
 8028222:	2322      	movs	r3, #34	@ 0x22
 8028224:	2600      	movs	r6, #0
 8028226:	4f07      	ldr	r7, [pc, #28]	@ (8028244 <log+0x64>)
 8028228:	6003      	str	r3, [r0, #0]
 802822a:	0030      	movs	r0, r6
 802822c:	0039      	movs	r1, r7
 802822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028230:	f7fd faea 	bl	8025808 <__errno>
 8028234:	2321      	movs	r3, #33	@ 0x21
 8028236:	6003      	str	r3, [r0, #0]
 8028238:	4803      	ldr	r0, [pc, #12]	@ (8028248 <log+0x68>)
 802823a:	f7fd fb27 	bl	802588c <nan>
 802823e:	0006      	movs	r6, r0
 8028240:	000f      	movs	r7, r1
 8028242:	e7f2      	b.n	802822a <log+0x4a>
 8028244:	fff00000 	.word	0xfff00000
 8028248:	0802e258 	.word	0x0802e258

0802824c <pow>:
 802824c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802824e:	0014      	movs	r4, r2
 8028250:	001d      	movs	r5, r3
 8028252:	9000      	str	r0, [sp, #0]
 8028254:	9101      	str	r1, [sp, #4]
 8028256:	f000 fb07 	bl	8028868 <__ieee754_pow>
 802825a:	0022      	movs	r2, r4
 802825c:	0006      	movs	r6, r0
 802825e:	000f      	movs	r7, r1
 8028260:	002b      	movs	r3, r5
 8028262:	0020      	movs	r0, r4
 8028264:	0029      	movs	r1, r5
 8028266:	f7db fa65 	bl	8003734 <__aeabi_dcmpun>
 802826a:	2800      	cmp	r0, #0
 802826c:	d13f      	bne.n	80282ee <pow+0xa2>
 802826e:	9800      	ldr	r0, [sp, #0]
 8028270:	9901      	ldr	r1, [sp, #4]
 8028272:	2200      	movs	r2, #0
 8028274:	2300      	movs	r3, #0
 8028276:	f7d8 f91b 	bl	80004b0 <__aeabi_dcmpeq>
 802827a:	2800      	cmp	r0, #0
 802827c:	d019      	beq.n	80282b2 <pow+0x66>
 802827e:	2200      	movs	r2, #0
 8028280:	2300      	movs	r3, #0
 8028282:	0020      	movs	r0, r4
 8028284:	0029      	movs	r1, r5
 8028286:	f7d8 f913 	bl	80004b0 <__aeabi_dcmpeq>
 802828a:	2800      	cmp	r0, #0
 802828c:	d146      	bne.n	802831c <pow+0xd0>
 802828e:	0020      	movs	r0, r4
 8028290:	0029      	movs	r1, r5
 8028292:	f000 f88d 	bl	80283b0 <finite>
 8028296:	2800      	cmp	r0, #0
 8028298:	d029      	beq.n	80282ee <pow+0xa2>
 802829a:	2200      	movs	r2, #0
 802829c:	2300      	movs	r3, #0
 802829e:	0020      	movs	r0, r4
 80282a0:	0029      	movs	r1, r5
 80282a2:	f7d8 f90b 	bl	80004bc <__aeabi_dcmplt>
 80282a6:	2800      	cmp	r0, #0
 80282a8:	d021      	beq.n	80282ee <pow+0xa2>
 80282aa:	f7fd faad 	bl	8025808 <__errno>
 80282ae:	2322      	movs	r3, #34	@ 0x22
 80282b0:	e01c      	b.n	80282ec <pow+0xa0>
 80282b2:	0030      	movs	r0, r6
 80282b4:	0039      	movs	r1, r7
 80282b6:	f000 f87b 	bl	80283b0 <finite>
 80282ba:	2800      	cmp	r0, #0
 80282bc:	d11b      	bne.n	80282f6 <pow+0xaa>
 80282be:	9800      	ldr	r0, [sp, #0]
 80282c0:	9901      	ldr	r1, [sp, #4]
 80282c2:	f000 f875 	bl	80283b0 <finite>
 80282c6:	2800      	cmp	r0, #0
 80282c8:	d015      	beq.n	80282f6 <pow+0xaa>
 80282ca:	0020      	movs	r0, r4
 80282cc:	0029      	movs	r1, r5
 80282ce:	f000 f86f 	bl	80283b0 <finite>
 80282d2:	2800      	cmp	r0, #0
 80282d4:	d00f      	beq.n	80282f6 <pow+0xaa>
 80282d6:	0032      	movs	r2, r6
 80282d8:	003b      	movs	r3, r7
 80282da:	0030      	movs	r0, r6
 80282dc:	0039      	movs	r1, r7
 80282de:	f7db fa29 	bl	8003734 <__aeabi_dcmpun>
 80282e2:	2800      	cmp	r0, #0
 80282e4:	d0e1      	beq.n	80282aa <pow+0x5e>
 80282e6:	f7fd fa8f 	bl	8025808 <__errno>
 80282ea:	2321      	movs	r3, #33	@ 0x21
 80282ec:	6003      	str	r3, [r0, #0]
 80282ee:	0030      	movs	r0, r6
 80282f0:	0039      	movs	r1, r7
 80282f2:	b003      	add	sp, #12
 80282f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80282f6:	2200      	movs	r2, #0
 80282f8:	2300      	movs	r3, #0
 80282fa:	0030      	movs	r0, r6
 80282fc:	0039      	movs	r1, r7
 80282fe:	f7d8 f8d7 	bl	80004b0 <__aeabi_dcmpeq>
 8028302:	2800      	cmp	r0, #0
 8028304:	d0f3      	beq.n	80282ee <pow+0xa2>
 8028306:	9800      	ldr	r0, [sp, #0]
 8028308:	9901      	ldr	r1, [sp, #4]
 802830a:	f000 f851 	bl	80283b0 <finite>
 802830e:	2800      	cmp	r0, #0
 8028310:	d0ed      	beq.n	80282ee <pow+0xa2>
 8028312:	0020      	movs	r0, r4
 8028314:	0029      	movs	r1, r5
 8028316:	f000 f84b 	bl	80283b0 <finite>
 802831a:	e7c4      	b.n	80282a6 <pow+0x5a>
 802831c:	2600      	movs	r6, #0
 802831e:	4f01      	ldr	r7, [pc, #4]	@ (8028324 <pow+0xd8>)
 8028320:	e7e5      	b.n	80282ee <pow+0xa2>
 8028322:	46c0      	nop			@ (mov r8, r8)
 8028324:	3ff00000 	.word	0x3ff00000

08028328 <expf>:
 8028328:	b570      	push	{r4, r5, r6, lr}
 802832a:	1c04      	adds	r4, r0, #0
 802832c:	f000 ffb8 	bl	80292a0 <__ieee754_expf>
 8028330:	1c05      	adds	r5, r0, #0
 8028332:	1c20      	adds	r0, r4, #0
 8028334:	f000 f844 	bl	80283c0 <finitef>
 8028338:	2800      	cmp	r0, #0
 802833a:	d00b      	beq.n	8028354 <expf+0x2c>
 802833c:	490c      	ldr	r1, [pc, #48]	@ (8028370 <expf+0x48>)
 802833e:	1c20      	adds	r0, r4, #0
 8028340:	f7d8 f90a 	bl	8000558 <__aeabi_fcmpgt>
 8028344:	2800      	cmp	r0, #0
 8028346:	d007      	beq.n	8028358 <expf+0x30>
 8028348:	f7fd fa5e 	bl	8025808 <__errno>
 802834c:	25ff      	movs	r5, #255	@ 0xff
 802834e:	2322      	movs	r3, #34	@ 0x22
 8028350:	05ed      	lsls	r5, r5, #23
 8028352:	6003      	str	r3, [r0, #0]
 8028354:	1c28      	adds	r0, r5, #0
 8028356:	bd70      	pop	{r4, r5, r6, pc}
 8028358:	4906      	ldr	r1, [pc, #24]	@ (8028374 <expf+0x4c>)
 802835a:	1c20      	adds	r0, r4, #0
 802835c:	f7d8 f8e8 	bl	8000530 <__aeabi_fcmplt>
 8028360:	2800      	cmp	r0, #0
 8028362:	d0f7      	beq.n	8028354 <expf+0x2c>
 8028364:	f7fd fa50 	bl	8025808 <__errno>
 8028368:	2322      	movs	r3, #34	@ 0x22
 802836a:	2500      	movs	r5, #0
 802836c:	6003      	str	r3, [r0, #0]
 802836e:	e7f1      	b.n	8028354 <expf+0x2c>
 8028370:	42b17217 	.word	0x42b17217
 8028374:	c2cff1b5 	.word	0xc2cff1b5

08028378 <sqrtf>:
 8028378:	b570      	push	{r4, r5, r6, lr}
 802837a:	1c05      	adds	r5, r0, #0
 802837c:	f000 f82a 	bl	80283d4 <__ieee754_sqrtf>
 8028380:	1c29      	adds	r1, r5, #0
 8028382:	1c04      	adds	r4, r0, #0
 8028384:	1c28      	adds	r0, r5, #0
 8028386:	f7d9 fa19 	bl	80017bc <__aeabi_fcmpun>
 802838a:	2800      	cmp	r0, #0
 802838c:	d10e      	bne.n	80283ac <sqrtf+0x34>
 802838e:	2100      	movs	r1, #0
 8028390:	1c28      	adds	r0, r5, #0
 8028392:	f7d8 f8cd 	bl	8000530 <__aeabi_fcmplt>
 8028396:	2800      	cmp	r0, #0
 8028398:	d008      	beq.n	80283ac <sqrtf+0x34>
 802839a:	f7fd fa35 	bl	8025808 <__errno>
 802839e:	2321      	movs	r3, #33	@ 0x21
 80283a0:	2100      	movs	r1, #0
 80283a2:	6003      	str	r3, [r0, #0]
 80283a4:	1c08      	adds	r0, r1, #0
 80283a6:	f7d8 fc7d 	bl	8000ca4 <__aeabi_fdiv>
 80283aa:	1c04      	adds	r4, r0, #0
 80283ac:	1c20      	adds	r0, r4, #0
 80283ae:	bd70      	pop	{r4, r5, r6, pc}

080283b0 <finite>:
 80283b0:	4b02      	ldr	r3, [pc, #8]	@ (80283bc <finite+0xc>)
 80283b2:	0048      	lsls	r0, r1, #1
 80283b4:	0840      	lsrs	r0, r0, #1
 80283b6:	18c0      	adds	r0, r0, r3
 80283b8:	0fc0      	lsrs	r0, r0, #31
 80283ba:	4770      	bx	lr
 80283bc:	80100000 	.word	0x80100000

080283c0 <finitef>:
 80283c0:	22ff      	movs	r2, #255	@ 0xff
 80283c2:	0043      	lsls	r3, r0, #1
 80283c4:	085b      	lsrs	r3, r3, #1
 80283c6:	2001      	movs	r0, #1
 80283c8:	05d2      	lsls	r2, r2, #23
 80283ca:	4293      	cmp	r3, r2
 80283cc:	db00      	blt.n	80283d0 <finitef+0x10>
 80283ce:	2000      	movs	r0, #0
 80283d0:	4770      	bx	lr
	...

080283d4 <__ieee754_sqrtf>:
 80283d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80283d6:	21ff      	movs	r1, #255	@ 0xff
 80283d8:	0042      	lsls	r2, r0, #1
 80283da:	0003      	movs	r3, r0
 80283dc:	1c04      	adds	r4, r0, #0
 80283de:	0852      	lsrs	r2, r2, #1
 80283e0:	05c9      	lsls	r1, r1, #23
 80283e2:	428a      	cmp	r2, r1
 80283e4:	d309      	bcc.n	80283fa <__ieee754_sqrtf+0x26>
 80283e6:	1c01      	adds	r1, r0, #0
 80283e8:	f7d8 fe2a 	bl	8001040 <__aeabi_fmul>
 80283ec:	1c01      	adds	r1, r0, #0
 80283ee:	1c20      	adds	r0, r4, #0
 80283f0:	f7d8 fa66 	bl	80008c0 <__aeabi_fadd>
 80283f4:	1c04      	adds	r4, r0, #0
 80283f6:	1c20      	adds	r0, r4, #0
 80283f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80283fa:	2a00      	cmp	r2, #0
 80283fc:	d0fb      	beq.n	80283f6 <__ieee754_sqrtf+0x22>
 80283fe:	2800      	cmp	r0, #0
 8028400:	da06      	bge.n	8028410 <__ieee754_sqrtf+0x3c>
 8028402:	1c01      	adds	r1, r0, #0
 8028404:	f7d8 ff76 	bl	80012f4 <__aeabi_fsub>
 8028408:	1c01      	adds	r1, r0, #0
 802840a:	f7d8 fc4b 	bl	8000ca4 <__aeabi_fdiv>
 802840e:	e7f1      	b.n	80283f4 <__ieee754_sqrtf+0x20>
 8028410:	0002      	movs	r2, r0
 8028412:	400a      	ands	r2, r1
 8028414:	4208      	tst	r0, r1
 8028416:	d040      	beq.n	802849a <__ieee754_sqrtf+0xc6>
 8028418:	15c1      	asrs	r1, r0, #23
 802841a:	2280      	movs	r2, #128	@ 0x80
 802841c:	000f      	movs	r7, r1
 802841e:	025b      	lsls	r3, r3, #9
 8028420:	0a5b      	lsrs	r3, r3, #9
 8028422:	0412      	lsls	r2, r2, #16
 8028424:	3f7f      	subs	r7, #127	@ 0x7f
 8028426:	4313      	orrs	r3, r2
 8028428:	07c9      	lsls	r1, r1, #31
 802842a:	d400      	bmi.n	802842e <__ieee754_sqrtf+0x5a>
 802842c:	005b      	lsls	r3, r3, #1
 802842e:	2400      	movs	r4, #0
 8028430:	2180      	movs	r1, #128	@ 0x80
 8028432:	2019      	movs	r0, #25
 8028434:	0026      	movs	r6, r4
 8028436:	107f      	asrs	r7, r7, #1
 8028438:	005b      	lsls	r3, r3, #1
 802843a:	0449      	lsls	r1, r1, #17
 802843c:	1875      	adds	r5, r6, r1
 802843e:	001a      	movs	r2, r3
 8028440:	429d      	cmp	r5, r3
 8028442:	dc02      	bgt.n	802844a <__ieee754_sqrtf+0x76>
 8028444:	186e      	adds	r6, r5, r1
 8028446:	1b5a      	subs	r2, r3, r5
 8028448:	1864      	adds	r4, r4, r1
 802844a:	3801      	subs	r0, #1
 802844c:	0053      	lsls	r3, r2, #1
 802844e:	0849      	lsrs	r1, r1, #1
 8028450:	2800      	cmp	r0, #0
 8028452:	d1f3      	bne.n	802843c <__ieee754_sqrtf+0x68>
 8028454:	2a00      	cmp	r2, #0
 8028456:	d019      	beq.n	802848c <__ieee754_sqrtf+0xb8>
 8028458:	4d16      	ldr	r5, [pc, #88]	@ (80284b4 <__ieee754_sqrtf+0xe0>)
 802845a:	4e17      	ldr	r6, [pc, #92]	@ (80284b8 <__ieee754_sqrtf+0xe4>)
 802845c:	6828      	ldr	r0, [r5, #0]
 802845e:	6831      	ldr	r1, [r6, #0]
 8028460:	682b      	ldr	r3, [r5, #0]
 8028462:	9301      	str	r3, [sp, #4]
 8028464:	f7d8 ff46 	bl	80012f4 <__aeabi_fsub>
 8028468:	1c01      	adds	r1, r0, #0
 802846a:	9801      	ldr	r0, [sp, #4]
 802846c:	f7d8 f86a 	bl	8000544 <__aeabi_fcmple>
 8028470:	2800      	cmp	r0, #0
 8028472:	d00b      	beq.n	802848c <__ieee754_sqrtf+0xb8>
 8028474:	6828      	ldr	r0, [r5, #0]
 8028476:	6831      	ldr	r1, [r6, #0]
 8028478:	f7d8 fa22 	bl	80008c0 <__aeabi_fadd>
 802847c:	682d      	ldr	r5, [r5, #0]
 802847e:	1c01      	adds	r1, r0, #0
 8028480:	1c28      	adds	r0, r5, #0
 8028482:	f7d8 f855 	bl	8000530 <__aeabi_fcmplt>
 8028486:	2800      	cmp	r0, #0
 8028488:	d010      	beq.n	80284ac <__ieee754_sqrtf+0xd8>
 802848a:	3402      	adds	r4, #2
 802848c:	23fc      	movs	r3, #252	@ 0xfc
 802848e:	1064      	asrs	r4, r4, #1
 8028490:	059b      	lsls	r3, r3, #22
 8028492:	18e3      	adds	r3, r4, r3
 8028494:	05fc      	lsls	r4, r7, #23
 8028496:	18e4      	adds	r4, r4, r3
 8028498:	e7ad      	b.n	80283f6 <__ieee754_sqrtf+0x22>
 802849a:	2080      	movs	r0, #128	@ 0x80
 802849c:	0400      	lsls	r0, r0, #16
 802849e:	005b      	lsls	r3, r3, #1
 80284a0:	0011      	movs	r1, r2
 80284a2:	3201      	adds	r2, #1
 80284a4:	4203      	tst	r3, r0
 80284a6:	d0fa      	beq.n	802849e <__ieee754_sqrtf+0xca>
 80284a8:	4249      	negs	r1, r1
 80284aa:	e7b6      	b.n	802841a <__ieee754_sqrtf+0x46>
 80284ac:	2301      	movs	r3, #1
 80284ae:	3401      	adds	r4, #1
 80284b0:	439c      	bics	r4, r3
 80284b2:	e7eb      	b.n	802848c <__ieee754_sqrtf+0xb8>
 80284b4:	0802e4b4 	.word	0x0802e4b4
 80284b8:	0802e4b0 	.word	0x0802e4b0

080284bc <roundf>:
 80284bc:	0dc3      	lsrs	r3, r0, #23
 80284be:	b2db      	uxtb	r3, r3
 80284c0:	3b7f      	subs	r3, #127	@ 0x7f
 80284c2:	0002      	movs	r2, r0
 80284c4:	b510      	push	{r4, lr}
 80284c6:	2b16      	cmp	r3, #22
 80284c8:	dc13      	bgt.n	80284f2 <roundf+0x36>
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	da07      	bge.n	80284de <roundf+0x22>
 80284ce:	0fc2      	lsrs	r2, r0, #31
 80284d0:	07d0      	lsls	r0, r2, #31
 80284d2:	3301      	adds	r3, #1
 80284d4:	d102      	bne.n	80284dc <roundf+0x20>
 80284d6:	23fe      	movs	r3, #254	@ 0xfe
 80284d8:	059b      	lsls	r3, r3, #22
 80284da:	4318      	orrs	r0, r3
 80284dc:	bd10      	pop	{r4, pc}
 80284de:	4908      	ldr	r1, [pc, #32]	@ (8028500 <roundf+0x44>)
 80284e0:	4119      	asrs	r1, r3
 80284e2:	4208      	tst	r0, r1
 80284e4:	d0fa      	beq.n	80284dc <roundf+0x20>
 80284e6:	2080      	movs	r0, #128	@ 0x80
 80284e8:	03c0      	lsls	r0, r0, #15
 80284ea:	4118      	asrs	r0, r3
 80284ec:	1880      	adds	r0, r0, r2
 80284ee:	4388      	bics	r0, r1
 80284f0:	e7f4      	b.n	80284dc <roundf+0x20>
 80284f2:	2b80      	cmp	r3, #128	@ 0x80
 80284f4:	d1f2      	bne.n	80284dc <roundf+0x20>
 80284f6:	1c01      	adds	r1, r0, #0
 80284f8:	f7d8 f9e2 	bl	80008c0 <__aeabi_fadd>
 80284fc:	e7ee      	b.n	80284dc <roundf+0x20>
 80284fe:	46c0      	nop			@ (mov r8, r8)
 8028500:	007fffff 	.word	0x007fffff

08028504 <__ieee754_log>:
 8028504:	2380      	movs	r3, #128	@ 0x80
 8028506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028508:	035b      	lsls	r3, r3, #13
 802850a:	000e      	movs	r6, r1
 802850c:	b08d      	sub	sp, #52	@ 0x34
 802850e:	4299      	cmp	r1, r3
 8028510:	da23      	bge.n	802855a <__ieee754_log+0x56>
 8028512:	004b      	lsls	r3, r1, #1
 8028514:	085b      	lsrs	r3, r3, #1
 8028516:	4303      	orrs	r3, r0
 8028518:	d107      	bne.n	802852a <__ieee754_log+0x26>
 802851a:	2200      	movs	r2, #0
 802851c:	2300      	movs	r3, #0
 802851e:	2000      	movs	r0, #0
 8028520:	49b4      	ldr	r1, [pc, #720]	@ (80287f4 <__ieee754_log+0x2f0>)
 8028522:	f7d9 fddd 	bl	80020e0 <__aeabi_ddiv>
 8028526:	b00d      	add	sp, #52	@ 0x34
 8028528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802852a:	2900      	cmp	r1, #0
 802852c:	da06      	bge.n	802853c <__ieee754_log+0x38>
 802852e:	0002      	movs	r2, r0
 8028530:	000b      	movs	r3, r1
 8028532:	f7da fcf5 	bl	8002f20 <__aeabi_dsub>
 8028536:	2200      	movs	r2, #0
 8028538:	2300      	movs	r3, #0
 802853a:	e7f2      	b.n	8028522 <__ieee754_log+0x1e>
 802853c:	4bae      	ldr	r3, [pc, #696]	@ (80287f8 <__ieee754_log+0x2f4>)
 802853e:	2200      	movs	r2, #0
 8028540:	f7da fa08 	bl	8002954 <__aeabi_dmul>
 8028544:	2336      	movs	r3, #54	@ 0x36
 8028546:	000e      	movs	r6, r1
 8028548:	425b      	negs	r3, r3
 802854a:	4aac      	ldr	r2, [pc, #688]	@ (80287fc <__ieee754_log+0x2f8>)
 802854c:	4296      	cmp	r6, r2
 802854e:	dd06      	ble.n	802855e <__ieee754_log+0x5a>
 8028550:	0002      	movs	r2, r0
 8028552:	000b      	movs	r3, r1
 8028554:	f7d9 f9fe 	bl	8001954 <__aeabi_dadd>
 8028558:	e7e5      	b.n	8028526 <__ieee754_log+0x22>
 802855a:	2300      	movs	r3, #0
 802855c:	e7f5      	b.n	802854a <__ieee754_log+0x46>
 802855e:	4ca8      	ldr	r4, [pc, #672]	@ (8028800 <__ieee754_log+0x2fc>)
 8028560:	1532      	asrs	r2, r6, #20
 8028562:	1912      	adds	r2, r2, r4
 8028564:	0336      	lsls	r6, r6, #12
 8028566:	4ca7      	ldr	r4, [pc, #668]	@ (8028804 <__ieee754_log+0x300>)
 8028568:	18d2      	adds	r2, r2, r3
 802856a:	0b33      	lsrs	r3, r6, #12
 802856c:	9302      	str	r3, [sp, #8]
 802856e:	191b      	adds	r3, r3, r4
 8028570:	2480      	movs	r4, #128	@ 0x80
 8028572:	0364      	lsls	r4, r4, #13
 8028574:	4023      	ands	r3, r4
 8028576:	4ca4      	ldr	r4, [pc, #656]	@ (8028808 <__ieee754_log+0x304>)
 8028578:	9d02      	ldr	r5, [sp, #8]
 802857a:	405c      	eors	r4, r3
 802857c:	151b      	asrs	r3, r3, #20
 802857e:	189b      	adds	r3, r3, r2
 8028580:	4325      	orrs	r5, r4
 8028582:	2200      	movs	r2, #0
 8028584:	9300      	str	r3, [sp, #0]
 8028586:	0029      	movs	r1, r5
 8028588:	4b9f      	ldr	r3, [pc, #636]	@ (8028808 <__ieee754_log+0x304>)
 802858a:	f7da fcc9 	bl	8002f20 <__aeabi_dsub>
 802858e:	9b02      	ldr	r3, [sp, #8]
 8028590:	0006      	movs	r6, r0
 8028592:	3302      	adds	r3, #2
 8028594:	031b      	lsls	r3, r3, #12
 8028596:	000f      	movs	r7, r1
 8028598:	2200      	movs	r2, #0
 802859a:	0b1b      	lsrs	r3, r3, #12
 802859c:	2b02      	cmp	r3, #2
 802859e:	dc64      	bgt.n	802866a <__ieee754_log+0x166>
 80285a0:	2300      	movs	r3, #0
 80285a2:	f7d7 ff85 	bl	80004b0 <__aeabi_dcmpeq>
 80285a6:	2800      	cmp	r0, #0
 80285a8:	d019      	beq.n	80285de <__ieee754_log+0xda>
 80285aa:	9b00      	ldr	r3, [sp, #0]
 80285ac:	2b00      	cmp	r3, #0
 80285ae:	d100      	bne.n	80285b2 <__ieee754_log+0xae>
 80285b0:	e11c      	b.n	80287ec <__ieee754_log+0x2e8>
 80285b2:	0018      	movs	r0, r3
 80285b4:	f7db f91c 	bl	80037f0 <__aeabi_i2d>
 80285b8:	4a94      	ldr	r2, [pc, #592]	@ (802880c <__ieee754_log+0x308>)
 80285ba:	4b95      	ldr	r3, [pc, #596]	@ (8028810 <__ieee754_log+0x30c>)
 80285bc:	0004      	movs	r4, r0
 80285be:	000d      	movs	r5, r1
 80285c0:	f7da f9c8 	bl	8002954 <__aeabi_dmul>
 80285c4:	4a93      	ldr	r2, [pc, #588]	@ (8028814 <__ieee754_log+0x310>)
 80285c6:	0006      	movs	r6, r0
 80285c8:	000f      	movs	r7, r1
 80285ca:	4b93      	ldr	r3, [pc, #588]	@ (8028818 <__ieee754_log+0x314>)
 80285cc:	0020      	movs	r0, r4
 80285ce:	0029      	movs	r1, r5
 80285d0:	f7da f9c0 	bl	8002954 <__aeabi_dmul>
 80285d4:	0002      	movs	r2, r0
 80285d6:	000b      	movs	r3, r1
 80285d8:	0030      	movs	r0, r6
 80285da:	0039      	movs	r1, r7
 80285dc:	e7ba      	b.n	8028554 <__ieee754_log+0x50>
 80285de:	4a8f      	ldr	r2, [pc, #572]	@ (802881c <__ieee754_log+0x318>)
 80285e0:	4b8f      	ldr	r3, [pc, #572]	@ (8028820 <__ieee754_log+0x31c>)
 80285e2:	0030      	movs	r0, r6
 80285e4:	0039      	movs	r1, r7
 80285e6:	f7da f9b5 	bl	8002954 <__aeabi_dmul>
 80285ea:	0002      	movs	r2, r0
 80285ec:	000b      	movs	r3, r1
 80285ee:	2000      	movs	r0, #0
 80285f0:	498c      	ldr	r1, [pc, #560]	@ (8028824 <__ieee754_log+0x320>)
 80285f2:	f7da fc95 	bl	8002f20 <__aeabi_dsub>
 80285f6:	0032      	movs	r2, r6
 80285f8:	0004      	movs	r4, r0
 80285fa:	000d      	movs	r5, r1
 80285fc:	003b      	movs	r3, r7
 80285fe:	0030      	movs	r0, r6
 8028600:	0039      	movs	r1, r7
 8028602:	f7da f9a7 	bl	8002954 <__aeabi_dmul>
 8028606:	000b      	movs	r3, r1
 8028608:	0002      	movs	r2, r0
 802860a:	0029      	movs	r1, r5
 802860c:	0020      	movs	r0, r4
 802860e:	f7da f9a1 	bl	8002954 <__aeabi_dmul>
 8028612:	9b00      	ldr	r3, [sp, #0]
 8028614:	9002      	str	r0, [sp, #8]
 8028616:	9103      	str	r1, [sp, #12]
 8028618:	2b00      	cmp	r3, #0
 802861a:	d106      	bne.n	802862a <__ieee754_log+0x126>
 802861c:	0002      	movs	r2, r0
 802861e:	000b      	movs	r3, r1
 8028620:	0030      	movs	r0, r6
 8028622:	0039      	movs	r1, r7
 8028624:	f7da fc7c 	bl	8002f20 <__aeabi_dsub>
 8028628:	e77d      	b.n	8028526 <__ieee754_log+0x22>
 802862a:	9800      	ldr	r0, [sp, #0]
 802862c:	f7db f8e0 	bl	80037f0 <__aeabi_i2d>
 8028630:	4a76      	ldr	r2, [pc, #472]	@ (802880c <__ieee754_log+0x308>)
 8028632:	4b77      	ldr	r3, [pc, #476]	@ (8028810 <__ieee754_log+0x30c>)
 8028634:	0004      	movs	r4, r0
 8028636:	000d      	movs	r5, r1
 8028638:	f7da f98c 	bl	8002954 <__aeabi_dmul>
 802863c:	4a75      	ldr	r2, [pc, #468]	@ (8028814 <__ieee754_log+0x310>)
 802863e:	9000      	str	r0, [sp, #0]
 8028640:	9101      	str	r1, [sp, #4]
 8028642:	4b75      	ldr	r3, [pc, #468]	@ (8028818 <__ieee754_log+0x314>)
 8028644:	0020      	movs	r0, r4
 8028646:	0029      	movs	r1, r5
 8028648:	f7da f984 	bl	8002954 <__aeabi_dmul>
 802864c:	0002      	movs	r2, r0
 802864e:	000b      	movs	r3, r1
 8028650:	9802      	ldr	r0, [sp, #8]
 8028652:	9903      	ldr	r1, [sp, #12]
 8028654:	f7da fc64 	bl	8002f20 <__aeabi_dsub>
 8028658:	0032      	movs	r2, r6
 802865a:	003b      	movs	r3, r7
 802865c:	f7da fc60 	bl	8002f20 <__aeabi_dsub>
 8028660:	0002      	movs	r2, r0
 8028662:	000b      	movs	r3, r1
 8028664:	9800      	ldr	r0, [sp, #0]
 8028666:	9901      	ldr	r1, [sp, #4]
 8028668:	e7dc      	b.n	8028624 <__ieee754_log+0x120>
 802866a:	2380      	movs	r3, #128	@ 0x80
 802866c:	05db      	lsls	r3, r3, #23
 802866e:	f7d9 f971 	bl	8001954 <__aeabi_dadd>
 8028672:	0002      	movs	r2, r0
 8028674:	000b      	movs	r3, r1
 8028676:	0030      	movs	r0, r6
 8028678:	0039      	movs	r1, r7
 802867a:	f7d9 fd31 	bl	80020e0 <__aeabi_ddiv>
 802867e:	9004      	str	r0, [sp, #16]
 8028680:	9105      	str	r1, [sp, #20]
 8028682:	9800      	ldr	r0, [sp, #0]
 8028684:	f7db f8b4 	bl	80037f0 <__aeabi_i2d>
 8028688:	9a04      	ldr	r2, [sp, #16]
 802868a:	9b05      	ldr	r3, [sp, #20]
 802868c:	9006      	str	r0, [sp, #24]
 802868e:	9107      	str	r1, [sp, #28]
 8028690:	0010      	movs	r0, r2
 8028692:	0019      	movs	r1, r3
 8028694:	f7da f95e 	bl	8002954 <__aeabi_dmul>
 8028698:	4a63      	ldr	r2, [pc, #396]	@ (8028828 <__ieee754_log+0x324>)
 802869a:	9b02      	ldr	r3, [sp, #8]
 802869c:	4694      	mov	ip, r2
 802869e:	4463      	add	r3, ip
 80286a0:	0002      	movs	r2, r0
 80286a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80286a4:	000b      	movs	r3, r1
 80286a6:	9008      	str	r0, [sp, #32]
 80286a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80286aa:	f7da f953 	bl	8002954 <__aeabi_dmul>
 80286ae:	0004      	movs	r4, r0
 80286b0:	000d      	movs	r5, r1
 80286b2:	4a5e      	ldr	r2, [pc, #376]	@ (802882c <__ieee754_log+0x328>)
 80286b4:	4b5e      	ldr	r3, [pc, #376]	@ (8028830 <__ieee754_log+0x32c>)
 80286b6:	f7da f94d 	bl	8002954 <__aeabi_dmul>
 80286ba:	4a5e      	ldr	r2, [pc, #376]	@ (8028834 <__ieee754_log+0x330>)
 80286bc:	4b5e      	ldr	r3, [pc, #376]	@ (8028838 <__ieee754_log+0x334>)
 80286be:	f7d9 f949 	bl	8001954 <__aeabi_dadd>
 80286c2:	0022      	movs	r2, r4
 80286c4:	002b      	movs	r3, r5
 80286c6:	f7da f945 	bl	8002954 <__aeabi_dmul>
 80286ca:	4a5c      	ldr	r2, [pc, #368]	@ (802883c <__ieee754_log+0x338>)
 80286cc:	4b5c      	ldr	r3, [pc, #368]	@ (8028840 <__ieee754_log+0x33c>)
 80286ce:	f7d9 f941 	bl	8001954 <__aeabi_dadd>
 80286d2:	0022      	movs	r2, r4
 80286d4:	002b      	movs	r3, r5
 80286d6:	f7da f93d 	bl	8002954 <__aeabi_dmul>
 80286da:	4a5a      	ldr	r2, [pc, #360]	@ (8028844 <__ieee754_log+0x340>)
 80286dc:	4b5a      	ldr	r3, [pc, #360]	@ (8028848 <__ieee754_log+0x344>)
 80286de:	f7d9 f939 	bl	8001954 <__aeabi_dadd>
 80286e2:	9a08      	ldr	r2, [sp, #32]
 80286e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80286e6:	f7da f935 	bl	8002954 <__aeabi_dmul>
 80286ea:	4a58      	ldr	r2, [pc, #352]	@ (802884c <__ieee754_log+0x348>)
 80286ec:	9008      	str	r0, [sp, #32]
 80286ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80286f0:	4b57      	ldr	r3, [pc, #348]	@ (8028850 <__ieee754_log+0x34c>)
 80286f2:	0020      	movs	r0, r4
 80286f4:	0029      	movs	r1, r5
 80286f6:	f7da f92d 	bl	8002954 <__aeabi_dmul>
 80286fa:	4a56      	ldr	r2, [pc, #344]	@ (8028854 <__ieee754_log+0x350>)
 80286fc:	4b56      	ldr	r3, [pc, #344]	@ (8028858 <__ieee754_log+0x354>)
 80286fe:	f7d9 f929 	bl	8001954 <__aeabi_dadd>
 8028702:	0022      	movs	r2, r4
 8028704:	002b      	movs	r3, r5
 8028706:	f7da f925 	bl	8002954 <__aeabi_dmul>
 802870a:	4a54      	ldr	r2, [pc, #336]	@ (802885c <__ieee754_log+0x358>)
 802870c:	4b54      	ldr	r3, [pc, #336]	@ (8028860 <__ieee754_log+0x35c>)
 802870e:	f7d9 f921 	bl	8001954 <__aeabi_dadd>
 8028712:	0022      	movs	r2, r4
 8028714:	002b      	movs	r3, r5
 8028716:	f7da f91d 	bl	8002954 <__aeabi_dmul>
 802871a:	0002      	movs	r2, r0
 802871c:	000b      	movs	r3, r1
 802871e:	9808      	ldr	r0, [sp, #32]
 8028720:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028722:	f7d9 f917 	bl	8001954 <__aeabi_dadd>
 8028726:	9a02      	ldr	r2, [sp, #8]
 8028728:	4b4e      	ldr	r3, [pc, #312]	@ (8028864 <__ieee754_log+0x360>)
 802872a:	0004      	movs	r4, r0
 802872c:	1a9b      	subs	r3, r3, r2
 802872e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028730:	000d      	movs	r5, r1
 8028732:	4313      	orrs	r3, r2
 8028734:	2b00      	cmp	r3, #0
 8028736:	dd34      	ble.n	80287a2 <__ieee754_log+0x29e>
 8028738:	2200      	movs	r2, #0
 802873a:	4b3a      	ldr	r3, [pc, #232]	@ (8028824 <__ieee754_log+0x320>)
 802873c:	0030      	movs	r0, r6
 802873e:	0039      	movs	r1, r7
 8028740:	f7da f908 	bl	8002954 <__aeabi_dmul>
 8028744:	0032      	movs	r2, r6
 8028746:	003b      	movs	r3, r7
 8028748:	f7da f904 	bl	8002954 <__aeabi_dmul>
 802874c:	0002      	movs	r2, r0
 802874e:	000b      	movs	r3, r1
 8028750:	9002      	str	r0, [sp, #8]
 8028752:	9103      	str	r1, [sp, #12]
 8028754:	0020      	movs	r0, r4
 8028756:	0029      	movs	r1, r5
 8028758:	f7d9 f8fc 	bl	8001954 <__aeabi_dadd>
 802875c:	9a04      	ldr	r2, [sp, #16]
 802875e:	9b05      	ldr	r3, [sp, #20]
 8028760:	f7da f8f8 	bl	8002954 <__aeabi_dmul>
 8028764:	9b00      	ldr	r3, [sp, #0]
 8028766:	0004      	movs	r4, r0
 8028768:	000d      	movs	r5, r1
 802876a:	2b00      	cmp	r3, #0
 802876c:	d106      	bne.n	802877c <__ieee754_log+0x278>
 802876e:	0002      	movs	r2, r0
 8028770:	000b      	movs	r3, r1
 8028772:	9802      	ldr	r0, [sp, #8]
 8028774:	9903      	ldr	r1, [sp, #12]
 8028776:	f7da fbd3 	bl	8002f20 <__aeabi_dsub>
 802877a:	e74f      	b.n	802861c <__ieee754_log+0x118>
 802877c:	4a23      	ldr	r2, [pc, #140]	@ (802880c <__ieee754_log+0x308>)
 802877e:	4b24      	ldr	r3, [pc, #144]	@ (8028810 <__ieee754_log+0x30c>)
 8028780:	9806      	ldr	r0, [sp, #24]
 8028782:	9907      	ldr	r1, [sp, #28]
 8028784:	f7da f8e6 	bl	8002954 <__aeabi_dmul>
 8028788:	4a22      	ldr	r2, [pc, #136]	@ (8028814 <__ieee754_log+0x310>)
 802878a:	9000      	str	r0, [sp, #0]
 802878c:	9101      	str	r1, [sp, #4]
 802878e:	9806      	ldr	r0, [sp, #24]
 8028790:	9907      	ldr	r1, [sp, #28]
 8028792:	4b21      	ldr	r3, [pc, #132]	@ (8028818 <__ieee754_log+0x314>)
 8028794:	f7da f8de 	bl	8002954 <__aeabi_dmul>
 8028798:	0022      	movs	r2, r4
 802879a:	002b      	movs	r3, r5
 802879c:	f7d9 f8da 	bl	8001954 <__aeabi_dadd>
 80287a0:	e754      	b.n	802864c <__ieee754_log+0x148>
 80287a2:	0002      	movs	r2, r0
 80287a4:	000b      	movs	r3, r1
 80287a6:	0030      	movs	r0, r6
 80287a8:	0039      	movs	r1, r7
 80287aa:	f7da fbb9 	bl	8002f20 <__aeabi_dsub>
 80287ae:	9a04      	ldr	r2, [sp, #16]
 80287b0:	9b05      	ldr	r3, [sp, #20]
 80287b2:	f7da f8cf 	bl	8002954 <__aeabi_dmul>
 80287b6:	9b00      	ldr	r3, [sp, #0]
 80287b8:	0004      	movs	r4, r0
 80287ba:	000d      	movs	r5, r1
 80287bc:	2b00      	cmp	r3, #0
 80287be:	d102      	bne.n	80287c6 <__ieee754_log+0x2c2>
 80287c0:	0002      	movs	r2, r0
 80287c2:	000b      	movs	r3, r1
 80287c4:	e72c      	b.n	8028620 <__ieee754_log+0x11c>
 80287c6:	4a11      	ldr	r2, [pc, #68]	@ (802880c <__ieee754_log+0x308>)
 80287c8:	4b11      	ldr	r3, [pc, #68]	@ (8028810 <__ieee754_log+0x30c>)
 80287ca:	9806      	ldr	r0, [sp, #24]
 80287cc:	9907      	ldr	r1, [sp, #28]
 80287ce:	f7da f8c1 	bl	8002954 <__aeabi_dmul>
 80287d2:	4a10      	ldr	r2, [pc, #64]	@ (8028814 <__ieee754_log+0x310>)
 80287d4:	9000      	str	r0, [sp, #0]
 80287d6:	9101      	str	r1, [sp, #4]
 80287d8:	9806      	ldr	r0, [sp, #24]
 80287da:	9907      	ldr	r1, [sp, #28]
 80287dc:	4b0e      	ldr	r3, [pc, #56]	@ (8028818 <__ieee754_log+0x314>)
 80287de:	f7da f8b9 	bl	8002954 <__aeabi_dmul>
 80287e2:	0002      	movs	r2, r0
 80287e4:	000b      	movs	r3, r1
 80287e6:	0020      	movs	r0, r4
 80287e8:	0029      	movs	r1, r5
 80287ea:	e733      	b.n	8028654 <__ieee754_log+0x150>
 80287ec:	2000      	movs	r0, #0
 80287ee:	2100      	movs	r1, #0
 80287f0:	e699      	b.n	8028526 <__ieee754_log+0x22>
 80287f2:	46c0      	nop			@ (mov r8, r8)
 80287f4:	c3500000 	.word	0xc3500000
 80287f8:	43500000 	.word	0x43500000
 80287fc:	7fefffff 	.word	0x7fefffff
 8028800:	fffffc01 	.word	0xfffffc01
 8028804:	00095f64 	.word	0x00095f64
 8028808:	3ff00000 	.word	0x3ff00000
 802880c:	fee00000 	.word	0xfee00000
 8028810:	3fe62e42 	.word	0x3fe62e42
 8028814:	35793c76 	.word	0x35793c76
 8028818:	3dea39ef 	.word	0x3dea39ef
 802881c:	55555555 	.word	0x55555555
 8028820:	3fd55555 	.word	0x3fd55555
 8028824:	3fe00000 	.word	0x3fe00000
 8028828:	fff9eb86 	.word	0xfff9eb86
 802882c:	df3e5244 	.word	0xdf3e5244
 8028830:	3fc2f112 	.word	0x3fc2f112
 8028834:	96cb03de 	.word	0x96cb03de
 8028838:	3fc74664 	.word	0x3fc74664
 802883c:	94229359 	.word	0x94229359
 8028840:	3fd24924 	.word	0x3fd24924
 8028844:	55555593 	.word	0x55555593
 8028848:	3fe55555 	.word	0x3fe55555
 802884c:	d078c69f 	.word	0xd078c69f
 8028850:	3fc39a09 	.word	0x3fc39a09
 8028854:	1d8e78af 	.word	0x1d8e78af
 8028858:	3fcc71c5 	.word	0x3fcc71c5
 802885c:	9997fa04 	.word	0x9997fa04
 8028860:	3fd99999 	.word	0x3fd99999
 8028864:	0006b851 	.word	0x0006b851

08028868 <__ieee754_pow>:
 8028868:	b5f0      	push	{r4, r5, r6, r7, lr}
 802886a:	b095      	sub	sp, #84	@ 0x54
 802886c:	9204      	str	r2, [sp, #16]
 802886e:	9305      	str	r3, [sp, #20]
 8028870:	9b04      	ldr	r3, [sp, #16]
 8028872:	9f05      	ldr	r7, [sp, #20]
 8028874:	001a      	movs	r2, r3
 8028876:	007d      	lsls	r5, r7, #1
 8028878:	086d      	lsrs	r5, r5, #1
 802887a:	9002      	str	r0, [sp, #8]
 802887c:	9103      	str	r1, [sp, #12]
 802887e:	432a      	orrs	r2, r5
 8028880:	d11a      	bne.n	80288b8 <__ieee754_pow+0x50>
 8028882:	2180      	movs	r1, #128	@ 0x80
 8028884:	9a02      	ldr	r2, [sp, #8]
 8028886:	9803      	ldr	r0, [sp, #12]
 8028888:	0309      	lsls	r1, r1, #12
 802888a:	4048      	eors	r0, r1
 802888c:	0003      	movs	r3, r0
 802888e:	1892      	adds	r2, r2, r2
 8028890:	415b      	adcs	r3, r3
 8028892:	4996      	ldr	r1, [pc, #600]	@ (8028aec <__ieee754_pow+0x284>)
 8028894:	428b      	cmp	r3, r1
 8028896:	d806      	bhi.n	80288a6 <__ieee754_pow+0x3e>
 8028898:	d001      	beq.n	802889e <__ieee754_pow+0x36>
 802889a:	f000 fcce 	bl	802923a <__ieee754_pow+0x9d2>
 802889e:	2a00      	cmp	r2, #0
 80288a0:	d101      	bne.n	80288a6 <__ieee754_pow+0x3e>
 80288a2:	f000 fcca 	bl	802923a <__ieee754_pow+0x9d2>
 80288a6:	9a04      	ldr	r2, [sp, #16]
 80288a8:	9b05      	ldr	r3, [sp, #20]
 80288aa:	9802      	ldr	r0, [sp, #8]
 80288ac:	9903      	ldr	r1, [sp, #12]
 80288ae:	f7d9 f851 	bl	8001954 <__aeabi_dadd>
 80288b2:	9000      	str	r0, [sp, #0]
 80288b4:	9101      	str	r1, [sp, #4]
 80288b6:	e08e      	b.n	80289d6 <__ieee754_pow+0x16e>
 80288b8:	9a03      	ldr	r2, [sp, #12]
 80288ba:	9206      	str	r2, [sp, #24]
 80288bc:	9a02      	ldr	r2, [sp, #8]
 80288be:	920a      	str	r2, [sp, #40]	@ 0x28
 80288c0:	9a03      	ldr	r2, [sp, #12]
 80288c2:	0054      	lsls	r4, r2, #1
 80288c4:	4a8a      	ldr	r2, [pc, #552]	@ (8028af0 <__ieee754_pow+0x288>)
 80288c6:	0864      	lsrs	r4, r4, #1
 80288c8:	4294      	cmp	r4, r2
 80288ca:	d80e      	bhi.n	80288ea <__ieee754_pow+0x82>
 80288cc:	d105      	bne.n	80288da <__ieee754_pow+0x72>
 80288ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80288d0:	2a00      	cmp	r2, #0
 80288d2:	d1e8      	bne.n	80288a6 <__ieee754_pow+0x3e>
 80288d4:	42a5      	cmp	r5, r4
 80288d6:	d8e6      	bhi.n	80288a6 <__ieee754_pow+0x3e>
 80288d8:	e002      	b.n	80288e0 <__ieee754_pow+0x78>
 80288da:	4a85      	ldr	r2, [pc, #532]	@ (8028af0 <__ieee754_pow+0x288>)
 80288dc:	4295      	cmp	r5, r2
 80288de:	d804      	bhi.n	80288ea <__ieee754_pow+0x82>
 80288e0:	4a83      	ldr	r2, [pc, #524]	@ (8028af0 <__ieee754_pow+0x288>)
 80288e2:	4295      	cmp	r5, r2
 80288e4:	d10c      	bne.n	8028900 <__ieee754_pow+0x98>
 80288e6:	2b00      	cmp	r3, #0
 80288e8:	d00a      	beq.n	8028900 <__ieee754_pow+0x98>
 80288ea:	4a82      	ldr	r2, [pc, #520]	@ (8028af4 <__ieee754_pow+0x28c>)
 80288ec:	9b03      	ldr	r3, [sp, #12]
 80288ee:	189b      	adds	r3, r3, r2
 80288f0:	9a02      	ldr	r2, [sp, #8]
 80288f2:	4313      	orrs	r3, r2
 80288f4:	d1d7      	bne.n	80288a6 <__ieee754_pow+0x3e>
 80288f6:	2180      	movs	r1, #128	@ 0x80
 80288f8:	9a04      	ldr	r2, [sp, #16]
 80288fa:	9805      	ldr	r0, [sp, #20]
 80288fc:	0309      	lsls	r1, r1, #12
 80288fe:	e7c4      	b.n	802888a <__ieee754_pow+0x22>
 8028900:	2600      	movs	r6, #0
 8028902:	9a06      	ldr	r2, [sp, #24]
 8028904:	9408      	str	r4, [sp, #32]
 8028906:	42b2      	cmp	r2, r6
 8028908:	da42      	bge.n	8028990 <__ieee754_pow+0x128>
 802890a:	4a7b      	ldr	r2, [pc, #492]	@ (8028af8 <__ieee754_pow+0x290>)
 802890c:	4295      	cmp	r5, r2
 802890e:	d83e      	bhi.n	802898e <__ieee754_pow+0x126>
 8028910:	4a7a      	ldr	r2, [pc, #488]	@ (8028afc <__ieee754_pow+0x294>)
 8028912:	4295      	cmp	r5, r2
 8028914:	d910      	bls.n	8028938 <__ieee754_pow+0xd0>
 8028916:	497a      	ldr	r1, [pc, #488]	@ (8028b00 <__ieee754_pow+0x298>)
 8028918:	152a      	asrs	r2, r5, #20
 802891a:	1852      	adds	r2, r2, r1
 802891c:	2a14      	cmp	r2, #20
 802891e:	dd18      	ble.n	8028952 <__ieee754_pow+0xea>
 8028920:	2134      	movs	r1, #52	@ 0x34
 8028922:	1a89      	subs	r1, r1, r2
 8028924:	9a04      	ldr	r2, [sp, #16]
 8028926:	40ca      	lsrs	r2, r1
 8028928:	0010      	movs	r0, r2
 802892a:	4088      	lsls	r0, r1
 802892c:	4298      	cmp	r0, r3
 802892e:	d103      	bne.n	8028938 <__ieee754_pow+0xd0>
 8028930:	2101      	movs	r1, #1
 8028932:	3602      	adds	r6, #2
 8028934:	400a      	ands	r2, r1
 8028936:	1ab6      	subs	r6, r6, r2
 8028938:	2b00      	cmp	r3, #0
 802893a:	d15b      	bne.n	80289f4 <__ieee754_pow+0x18c>
 802893c:	2380      	movs	r3, #128	@ 0x80
 802893e:	05db      	lsls	r3, r3, #23
 8028940:	429f      	cmp	r7, r3
 8028942:	d14c      	bne.n	80289de <__ieee754_pow+0x176>
 8028944:	9a02      	ldr	r2, [sp, #8]
 8028946:	9b03      	ldr	r3, [sp, #12]
 8028948:	0010      	movs	r0, r2
 802894a:	0019      	movs	r1, r3
 802894c:	f7da f802 	bl	8002954 <__aeabi_dmul>
 8028950:	e7af      	b.n	80288b2 <__ieee754_pow+0x4a>
 8028952:	2b00      	cmp	r3, #0
 8028954:	d14e      	bne.n	80289f4 <__ieee754_pow+0x18c>
 8028956:	3314      	adds	r3, #20
 8028958:	1a9a      	subs	r2, r3, r2
 802895a:	002b      	movs	r3, r5
 802895c:	4113      	asrs	r3, r2
 802895e:	0019      	movs	r1, r3
 8028960:	4091      	lsls	r1, r2
 8028962:	42a9      	cmp	r1, r5
 8028964:	d103      	bne.n	802896e <__ieee754_pow+0x106>
 8028966:	2201      	movs	r2, #1
 8028968:	2602      	movs	r6, #2
 802896a:	4013      	ands	r3, r2
 802896c:	1af6      	subs	r6, r6, r3
 802896e:	4b65      	ldr	r3, [pc, #404]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028970:	429d      	cmp	r5, r3
 8028972:	d1e3      	bne.n	802893c <__ieee754_pow+0xd4>
 8028974:	9b02      	ldr	r3, [sp, #8]
 8028976:	9c03      	ldr	r4, [sp, #12]
 8028978:	9300      	str	r3, [sp, #0]
 802897a:	9401      	str	r4, [sp, #4]
 802897c:	2f00      	cmp	r7, #0
 802897e:	da2a      	bge.n	80289d6 <__ieee754_pow+0x16e>
 8028980:	001a      	movs	r2, r3
 8028982:	2000      	movs	r0, #0
 8028984:	0023      	movs	r3, r4
 8028986:	495f      	ldr	r1, [pc, #380]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028988:	f7d9 fbaa 	bl	80020e0 <__aeabi_ddiv>
 802898c:	e791      	b.n	80288b2 <__ieee754_pow+0x4a>
 802898e:	2602      	movs	r6, #2
 8028990:	2b00      	cmp	r3, #0
 8028992:	d12f      	bne.n	80289f4 <__ieee754_pow+0x18c>
 8028994:	4b56      	ldr	r3, [pc, #344]	@ (8028af0 <__ieee754_pow+0x288>)
 8028996:	429d      	cmp	r5, r3
 8028998:	d1e9      	bne.n	802896e <__ieee754_pow+0x106>
 802899a:	4b56      	ldr	r3, [pc, #344]	@ (8028af4 <__ieee754_pow+0x28c>)
 802899c:	9a02      	ldr	r2, [sp, #8]
 802899e:	18e3      	adds	r3, r4, r3
 80289a0:	4313      	orrs	r3, r2
 80289a2:	d101      	bne.n	80289a8 <__ieee754_pow+0x140>
 80289a4:	f000 fc49 	bl	802923a <__ieee754_pow+0x9d2>
 80289a8:	4b54      	ldr	r3, [pc, #336]	@ (8028afc <__ieee754_pow+0x294>)
 80289aa:	429c      	cmp	r4, r3
 80289ac:	d909      	bls.n	80289c2 <__ieee754_pow+0x15a>
 80289ae:	9b04      	ldr	r3, [sp, #16]
 80289b0:	9c05      	ldr	r4, [sp, #20]
 80289b2:	9300      	str	r3, [sp, #0]
 80289b4:	9401      	str	r4, [sp, #4]
 80289b6:	2f00      	cmp	r7, #0
 80289b8:	da0d      	bge.n	80289d6 <__ieee754_pow+0x16e>
 80289ba:	2300      	movs	r3, #0
 80289bc:	2400      	movs	r4, #0
 80289be:	f000 fc3e 	bl	802923e <__ieee754_pow+0x9d6>
 80289c2:	2f00      	cmp	r7, #0
 80289c4:	daf9      	bge.n	80289ba <__ieee754_pow+0x152>
 80289c6:	2280      	movs	r2, #128	@ 0x80
 80289c8:	0612      	lsls	r2, r2, #24
 80289ca:	4694      	mov	ip, r2
 80289cc:	9b04      	ldr	r3, [sp, #16]
 80289ce:	9300      	str	r3, [sp, #0]
 80289d0:	9b05      	ldr	r3, [sp, #20]
 80289d2:	4463      	add	r3, ip
 80289d4:	9301      	str	r3, [sp, #4]
 80289d6:	9800      	ldr	r0, [sp, #0]
 80289d8:	9901      	ldr	r1, [sp, #4]
 80289da:	b015      	add	sp, #84	@ 0x54
 80289dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80289de:	4b4a      	ldr	r3, [pc, #296]	@ (8028b08 <__ieee754_pow+0x2a0>)
 80289e0:	429f      	cmp	r7, r3
 80289e2:	d107      	bne.n	80289f4 <__ieee754_pow+0x18c>
 80289e4:	9b06      	ldr	r3, [sp, #24]
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	db04      	blt.n	80289f4 <__ieee754_pow+0x18c>
 80289ea:	9802      	ldr	r0, [sp, #8]
 80289ec:	9903      	ldr	r1, [sp, #12]
 80289ee:	f000 fe03 	bl	80295f8 <__ieee754_sqrt>
 80289f2:	e75e      	b.n	80288b2 <__ieee754_pow+0x4a>
 80289f4:	9802      	ldr	r0, [sp, #8]
 80289f6:	9903      	ldr	r1, [sp, #12]
 80289f8:	f000 fc4e 	bl	8029298 <fabs>
 80289fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80289fe:	9000      	str	r0, [sp, #0]
 8028a00:	9101      	str	r1, [sp, #4]
 8028a02:	2b00      	cmp	r3, #0
 8028a04:	d12c      	bne.n	8028a60 <__ieee754_pow+0x1f8>
 8028a06:	9b03      	ldr	r3, [sp, #12]
 8028a08:	4a3e      	ldr	r2, [pc, #248]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028a0a:	009b      	lsls	r3, r3, #2
 8028a0c:	089b      	lsrs	r3, r3, #2
 8028a0e:	4293      	cmp	r3, r2
 8028a10:	d001      	beq.n	8028a16 <__ieee754_pow+0x1ae>
 8028a12:	2c00      	cmp	r4, #0
 8028a14:	d124      	bne.n	8028a60 <__ieee754_pow+0x1f8>
 8028a16:	2f00      	cmp	r7, #0
 8028a18:	da07      	bge.n	8028a2a <__ieee754_pow+0x1c2>
 8028a1a:	9a00      	ldr	r2, [sp, #0]
 8028a1c:	9b01      	ldr	r3, [sp, #4]
 8028a1e:	2000      	movs	r0, #0
 8028a20:	4938      	ldr	r1, [pc, #224]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028a22:	f7d9 fb5d 	bl	80020e0 <__aeabi_ddiv>
 8028a26:	9000      	str	r0, [sp, #0]
 8028a28:	9101      	str	r1, [sp, #4]
 8028a2a:	9b06      	ldr	r3, [sp, #24]
 8028a2c:	2b00      	cmp	r3, #0
 8028a2e:	dad2      	bge.n	80289d6 <__ieee754_pow+0x16e>
 8028a30:	4b30      	ldr	r3, [pc, #192]	@ (8028af4 <__ieee754_pow+0x28c>)
 8028a32:	18e4      	adds	r4, r4, r3
 8028a34:	4334      	orrs	r4, r6
 8028a36:	d108      	bne.n	8028a4a <__ieee754_pow+0x1e2>
 8028a38:	9a00      	ldr	r2, [sp, #0]
 8028a3a:	9b01      	ldr	r3, [sp, #4]
 8028a3c:	0010      	movs	r0, r2
 8028a3e:	0019      	movs	r1, r3
 8028a40:	f7da fa6e 	bl	8002f20 <__aeabi_dsub>
 8028a44:	0002      	movs	r2, r0
 8028a46:	000b      	movs	r3, r1
 8028a48:	e79e      	b.n	8028988 <__ieee754_pow+0x120>
 8028a4a:	2e01      	cmp	r6, #1
 8028a4c:	d1c3      	bne.n	80289d6 <__ieee754_pow+0x16e>
 8028a4e:	9800      	ldr	r0, [sp, #0]
 8028a50:	2180      	movs	r1, #128	@ 0x80
 8028a52:	0002      	movs	r2, r0
 8028a54:	9801      	ldr	r0, [sp, #4]
 8028a56:	0609      	lsls	r1, r1, #24
 8028a58:	1843      	adds	r3, r0, r1
 8028a5a:	9200      	str	r2, [sp, #0]
 8028a5c:	9301      	str	r3, [sp, #4]
 8028a5e:	e7ba      	b.n	80289d6 <__ieee754_pow+0x16e>
 8028a60:	9b03      	ldr	r3, [sp, #12]
 8028a62:	0fdb      	lsrs	r3, r3, #31
 8028a64:	3b01      	subs	r3, #1
 8028a66:	001a      	movs	r2, r3
 8028a68:	4332      	orrs	r2, r6
 8028a6a:	d102      	bne.n	8028a72 <__ieee754_pow+0x20a>
 8028a6c:	9a02      	ldr	r2, [sp, #8]
 8028a6e:	9b03      	ldr	r3, [sp, #12]
 8028a70:	e7e4      	b.n	8028a3c <__ieee754_pow+0x1d4>
 8028a72:	3e01      	subs	r6, #1
 8028a74:	2200      	movs	r2, #0
 8028a76:	431e      	orrs	r6, r3
 8028a78:	d013      	beq.n	8028aa2 <__ieee754_pow+0x23a>
 8028a7a:	4b22      	ldr	r3, [pc, #136]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028a7c:	9206      	str	r2, [sp, #24]
 8028a7e:	9307      	str	r3, [sp, #28]
 8028a80:	2384      	movs	r3, #132	@ 0x84
 8028a82:	05db      	lsls	r3, r3, #23
 8028a84:	429d      	cmp	r5, r3
 8028a86:	d800      	bhi.n	8028a8a <__ieee754_pow+0x222>
 8028a88:	e0fa      	b.n	8028c80 <__ieee754_pow+0x418>
 8028a8a:	4b20      	ldr	r3, [pc, #128]	@ (8028b0c <__ieee754_pow+0x2a4>)
 8028a8c:	429d      	cmp	r5, r3
 8028a8e:	d910      	bls.n	8028ab2 <__ieee754_pow+0x24a>
 8028a90:	4b1a      	ldr	r3, [pc, #104]	@ (8028afc <__ieee754_pow+0x294>)
 8028a92:	429c      	cmp	r4, r3
 8028a94:	d807      	bhi.n	8028aa6 <__ieee754_pow+0x23e>
 8028a96:	2f00      	cmp	r7, #0
 8028a98:	da07      	bge.n	8028aaa <__ieee754_pow+0x242>
 8028a9a:	2000      	movs	r0, #0
 8028a9c:	f000 fd82 	bl	80295a4 <__math_oflow>
 8028aa0:	e707      	b.n	80288b2 <__ieee754_pow+0x4a>
 8028aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8028b10 <__ieee754_pow+0x2a8>)
 8028aa4:	e7ea      	b.n	8028a7c <__ieee754_pow+0x214>
 8028aa6:	2f00      	cmp	r7, #0
 8028aa8:	dcf7      	bgt.n	8028a9a <__ieee754_pow+0x232>
 8028aaa:	2000      	movs	r0, #0
 8028aac:	f000 fd73 	bl	8029596 <__math_uflow>
 8028ab0:	e6ff      	b.n	80288b2 <__ieee754_pow+0x4a>
 8028ab2:	4b18      	ldr	r3, [pc, #96]	@ (8028b14 <__ieee754_pow+0x2ac>)
 8028ab4:	429c      	cmp	r4, r3
 8028ab6:	d80a      	bhi.n	8028ace <__ieee754_pow+0x266>
 8028ab8:	9806      	ldr	r0, [sp, #24]
 8028aba:	9907      	ldr	r1, [sp, #28]
 8028abc:	2300      	movs	r3, #0
 8028abe:	2200      	movs	r2, #0
 8028ac0:	f7d7 fcfc 	bl	80004bc <__aeabi_dcmplt>
 8028ac4:	1e43      	subs	r3, r0, #1
 8028ac6:	4198      	sbcs	r0, r3
 8028ac8:	2f00      	cmp	r7, #0
 8028aca:	daef      	bge.n	8028aac <__ieee754_pow+0x244>
 8028acc:	e7e6      	b.n	8028a9c <__ieee754_pow+0x234>
 8028ace:	4b0d      	ldr	r3, [pc, #52]	@ (8028b04 <__ieee754_pow+0x29c>)
 8028ad0:	2200      	movs	r2, #0
 8028ad2:	429c      	cmp	r4, r3
 8028ad4:	d920      	bls.n	8028b18 <__ieee754_pow+0x2b0>
 8028ad6:	9806      	ldr	r0, [sp, #24]
 8028ad8:	9907      	ldr	r1, [sp, #28]
 8028ada:	2300      	movs	r3, #0
 8028adc:	f7d7 fcee 	bl	80004bc <__aeabi_dcmplt>
 8028ae0:	1e43      	subs	r3, r0, #1
 8028ae2:	4198      	sbcs	r0, r3
 8028ae4:	2f00      	cmp	r7, #0
 8028ae6:	dcd9      	bgt.n	8028a9c <__ieee754_pow+0x234>
 8028ae8:	e7e0      	b.n	8028aac <__ieee754_pow+0x244>
 8028aea:	46c0      	nop			@ (mov r8, r8)
 8028aec:	fff00000 	.word	0xfff00000
 8028af0:	7ff00000 	.word	0x7ff00000
 8028af4:	c0100000 	.word	0xc0100000
 8028af8:	433fffff 	.word	0x433fffff
 8028afc:	3fefffff 	.word	0x3fefffff
 8028b00:	fffffc01 	.word	0xfffffc01
 8028b04:	3ff00000 	.word	0x3ff00000
 8028b08:	3fe00000 	.word	0x3fe00000
 8028b0c:	43f00000 	.word	0x43f00000
 8028b10:	bff00000 	.word	0xbff00000
 8028b14:	3feffffe 	.word	0x3feffffe
 8028b18:	9800      	ldr	r0, [sp, #0]
 8028b1a:	9901      	ldr	r1, [sp, #4]
 8028b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8028c54 <__ieee754_pow+0x3ec>)
 8028b1e:	f7da f9ff 	bl	8002f20 <__aeabi_dsub>
 8028b22:	22c0      	movs	r2, #192	@ 0xc0
 8028b24:	4b4c      	ldr	r3, [pc, #304]	@ (8028c58 <__ieee754_pow+0x3f0>)
 8028b26:	05d2      	lsls	r2, r2, #23
 8028b28:	0006      	movs	r6, r0
 8028b2a:	000f      	movs	r7, r1
 8028b2c:	f7d9 ff12 	bl	8002954 <__aeabi_dmul>
 8028b30:	4a4a      	ldr	r2, [pc, #296]	@ (8028c5c <__ieee754_pow+0x3f4>)
 8028b32:	9002      	str	r0, [sp, #8]
 8028b34:	9103      	str	r1, [sp, #12]
 8028b36:	4b4a      	ldr	r3, [pc, #296]	@ (8028c60 <__ieee754_pow+0x3f8>)
 8028b38:	0030      	movs	r0, r6
 8028b3a:	0039      	movs	r1, r7
 8028b3c:	f7d9 ff0a 	bl	8002954 <__aeabi_dmul>
 8028b40:	2200      	movs	r2, #0
 8028b42:	9000      	str	r0, [sp, #0]
 8028b44:	9101      	str	r1, [sp, #4]
 8028b46:	4b47      	ldr	r3, [pc, #284]	@ (8028c64 <__ieee754_pow+0x3fc>)
 8028b48:	0030      	movs	r0, r6
 8028b4a:	0039      	movs	r1, r7
 8028b4c:	f7d9 ff02 	bl	8002954 <__aeabi_dmul>
 8028b50:	0002      	movs	r2, r0
 8028b52:	000b      	movs	r3, r1
 8028b54:	4844      	ldr	r0, [pc, #272]	@ (8028c68 <__ieee754_pow+0x400>)
 8028b56:	4945      	ldr	r1, [pc, #276]	@ (8028c6c <__ieee754_pow+0x404>)
 8028b58:	f7da f9e2 	bl	8002f20 <__aeabi_dsub>
 8028b5c:	0032      	movs	r2, r6
 8028b5e:	003b      	movs	r3, r7
 8028b60:	f7d9 fef8 	bl	8002954 <__aeabi_dmul>
 8028b64:	0002      	movs	r2, r0
 8028b66:	000b      	movs	r3, r1
 8028b68:	2000      	movs	r0, #0
 8028b6a:	4941      	ldr	r1, [pc, #260]	@ (8028c70 <__ieee754_pow+0x408>)
 8028b6c:	f7da f9d8 	bl	8002f20 <__aeabi_dsub>
 8028b70:	0032      	movs	r2, r6
 8028b72:	0004      	movs	r4, r0
 8028b74:	000d      	movs	r5, r1
 8028b76:	003b      	movs	r3, r7
 8028b78:	0030      	movs	r0, r6
 8028b7a:	0039      	movs	r1, r7
 8028b7c:	f7d9 feea 	bl	8002954 <__aeabi_dmul>
 8028b80:	0002      	movs	r2, r0
 8028b82:	000b      	movs	r3, r1
 8028b84:	0020      	movs	r0, r4
 8028b86:	0029      	movs	r1, r5
 8028b88:	f7d9 fee4 	bl	8002954 <__aeabi_dmul>
 8028b8c:	4a39      	ldr	r2, [pc, #228]	@ (8028c74 <__ieee754_pow+0x40c>)
 8028b8e:	4b32      	ldr	r3, [pc, #200]	@ (8028c58 <__ieee754_pow+0x3f0>)
 8028b90:	f7d9 fee0 	bl	8002954 <__aeabi_dmul>
 8028b94:	0002      	movs	r2, r0
 8028b96:	000b      	movs	r3, r1
 8028b98:	9800      	ldr	r0, [sp, #0]
 8028b9a:	9901      	ldr	r1, [sp, #4]
 8028b9c:	f7da f9c0 	bl	8002f20 <__aeabi_dsub>
 8028ba0:	0002      	movs	r2, r0
 8028ba2:	000b      	movs	r3, r1
 8028ba4:	0004      	movs	r4, r0
 8028ba6:	000d      	movs	r5, r1
 8028ba8:	9802      	ldr	r0, [sp, #8]
 8028baa:	9903      	ldr	r1, [sp, #12]
 8028bac:	f7d8 fed2 	bl	8001954 <__aeabi_dadd>
 8028bb0:	9a02      	ldr	r2, [sp, #8]
 8028bb2:	9b03      	ldr	r3, [sp, #12]
 8028bb4:	2000      	movs	r0, #0
 8028bb6:	9000      	str	r0, [sp, #0]
 8028bb8:	9101      	str	r1, [sp, #4]
 8028bba:	f7da f9b1 	bl	8002f20 <__aeabi_dsub>
 8028bbe:	0002      	movs	r2, r0
 8028bc0:	000b      	movs	r3, r1
 8028bc2:	0020      	movs	r0, r4
 8028bc4:	0029      	movs	r1, r5
 8028bc6:	f7da f9ab 	bl	8002f20 <__aeabi_dsub>
 8028bca:	9c04      	ldr	r4, [sp, #16]
 8028bcc:	9d05      	ldr	r5, [sp, #20]
 8028bce:	2400      	movs	r4, #0
 8028bd0:	0006      	movs	r6, r0
 8028bd2:	000f      	movs	r7, r1
 8028bd4:	9804      	ldr	r0, [sp, #16]
 8028bd6:	9905      	ldr	r1, [sp, #20]
 8028bd8:	0022      	movs	r2, r4
 8028bda:	002b      	movs	r3, r5
 8028bdc:	9402      	str	r4, [sp, #8]
 8028bde:	9503      	str	r5, [sp, #12]
 8028be0:	f7da f99e 	bl	8002f20 <__aeabi_dsub>
 8028be4:	9a00      	ldr	r2, [sp, #0]
 8028be6:	9b01      	ldr	r3, [sp, #4]
 8028be8:	f7d9 feb4 	bl	8002954 <__aeabi_dmul>
 8028bec:	9a04      	ldr	r2, [sp, #16]
 8028bee:	9b05      	ldr	r3, [sp, #20]
 8028bf0:	9008      	str	r0, [sp, #32]
 8028bf2:	9109      	str	r1, [sp, #36]	@ 0x24
 8028bf4:	0030      	movs	r0, r6
 8028bf6:	0039      	movs	r1, r7
 8028bf8:	f7d9 feac 	bl	8002954 <__aeabi_dmul>
 8028bfc:	0002      	movs	r2, r0
 8028bfe:	000b      	movs	r3, r1
 8028c00:	9808      	ldr	r0, [sp, #32]
 8028c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028c04:	f7d8 fea6 	bl	8001954 <__aeabi_dadd>
 8028c08:	0022      	movs	r2, r4
 8028c0a:	002b      	movs	r3, r5
 8028c0c:	9004      	str	r0, [sp, #16]
 8028c0e:	9105      	str	r1, [sp, #20]
 8028c10:	9800      	ldr	r0, [sp, #0]
 8028c12:	9901      	ldr	r1, [sp, #4]
 8028c14:	f7d9 fe9e 	bl	8002954 <__aeabi_dmul>
 8028c18:	000b      	movs	r3, r1
 8028c1a:	0002      	movs	r2, r0
 8028c1c:	9000      	str	r0, [sp, #0]
 8028c1e:	9101      	str	r1, [sp, #4]
 8028c20:	9804      	ldr	r0, [sp, #16]
 8028c22:	9905      	ldr	r1, [sp, #20]
 8028c24:	f7d8 fe96 	bl	8001954 <__aeabi_dadd>
 8028c28:	4b13      	ldr	r3, [pc, #76]	@ (8028c78 <__ieee754_pow+0x410>)
 8028c2a:	0006      	movs	r6, r0
 8028c2c:	000f      	movs	r7, r1
 8028c2e:	9108      	str	r1, [sp, #32]
 8028c30:	4299      	cmp	r1, r3
 8028c32:	dc00      	bgt.n	8028c36 <__ieee754_pow+0x3ce>
 8028c34:	e1c0      	b.n	8028fb8 <__ieee754_pow+0x750>
 8028c36:	4b11      	ldr	r3, [pc, #68]	@ (8028c7c <__ieee754_pow+0x414>)
 8028c38:	18cb      	adds	r3, r1, r3
 8028c3a:	4303      	orrs	r3, r0
 8028c3c:	42a3      	cmp	r3, r4
 8028c3e:	d100      	bne.n	8028c42 <__ieee754_pow+0x3da>
 8028c40:	e1a1      	b.n	8028f86 <__ieee754_pow+0x71e>
 8028c42:	9806      	ldr	r0, [sp, #24]
 8028c44:	9907      	ldr	r1, [sp, #28]
 8028c46:	2300      	movs	r3, #0
 8028c48:	2200      	movs	r2, #0
 8028c4a:	f7d7 fc37 	bl	80004bc <__aeabi_dcmplt>
 8028c4e:	1e43      	subs	r3, r0, #1
 8028c50:	4198      	sbcs	r0, r3
 8028c52:	e723      	b.n	8028a9c <__ieee754_pow+0x234>
 8028c54:	3ff00000 	.word	0x3ff00000
 8028c58:	3ff71547 	.word	0x3ff71547
 8028c5c:	f85ddf44 	.word	0xf85ddf44
 8028c60:	3e54ae0b 	.word	0x3e54ae0b
 8028c64:	3fd00000 	.word	0x3fd00000
 8028c68:	55555555 	.word	0x55555555
 8028c6c:	3fd55555 	.word	0x3fd55555
 8028c70:	3fe00000 	.word	0x3fe00000
 8028c74:	652b82fe 	.word	0x652b82fe
 8028c78:	408fffff 	.word	0x408fffff
 8028c7c:	bf700000 	.word	0xbf700000
 8028c80:	4bdc      	ldr	r3, [pc, #880]	@ (8028ff4 <__ieee754_pow+0x78c>)
 8028c82:	9903      	ldr	r1, [sp, #12]
 8028c84:	2200      	movs	r2, #0
 8028c86:	420b      	tst	r3, r1
 8028c88:	d10b      	bne.n	8028ca2 <__ieee754_pow+0x43a>
 8028c8a:	9800      	ldr	r0, [sp, #0]
 8028c8c:	9901      	ldr	r1, [sp, #4]
 8028c8e:	2200      	movs	r2, #0
 8028c90:	4bd9      	ldr	r3, [pc, #868]	@ (8028ff8 <__ieee754_pow+0x790>)
 8028c92:	f7d9 fe5f 	bl	8002954 <__aeabi_dmul>
 8028c96:	2235      	movs	r2, #53	@ 0x35
 8028c98:	9000      	str	r0, [sp, #0]
 8028c9a:	9101      	str	r1, [sp, #4]
 8028c9c:	9b01      	ldr	r3, [sp, #4]
 8028c9e:	4252      	negs	r2, r2
 8028ca0:	9308      	str	r3, [sp, #32]
 8028ca2:	9b08      	ldr	r3, [sp, #32]
 8028ca4:	49d5      	ldr	r1, [pc, #852]	@ (8028ffc <__ieee754_pow+0x794>)
 8028ca6:	151b      	asrs	r3, r3, #20
 8028ca8:	185b      	adds	r3, r3, r1
 8028caa:	189b      	adds	r3, r3, r2
 8028cac:	930e      	str	r3, [sp, #56]	@ 0x38
 8028cae:	9b08      	ldr	r3, [sp, #32]
 8028cb0:	4dd3      	ldr	r5, [pc, #844]	@ (8029000 <__ieee754_pow+0x798>)
 8028cb2:	031b      	lsls	r3, r3, #12
 8028cb4:	4ad3      	ldr	r2, [pc, #844]	@ (8029004 <__ieee754_pow+0x79c>)
 8028cb6:	0b1b      	lsrs	r3, r3, #12
 8028cb8:	2600      	movs	r6, #0
 8028cba:	431d      	orrs	r5, r3
 8028cbc:	4293      	cmp	r3, r2
 8028cbe:	dd09      	ble.n	8028cd4 <__ieee754_pow+0x46c>
 8028cc0:	4ad1      	ldr	r2, [pc, #836]	@ (8029008 <__ieee754_pow+0x7a0>)
 8028cc2:	3601      	adds	r6, #1
 8028cc4:	4293      	cmp	r3, r2
 8028cc6:	dd05      	ble.n	8028cd4 <__ieee754_pow+0x46c>
 8028cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028cca:	199b      	adds	r3, r3, r6
 8028ccc:	2600      	movs	r6, #0
 8028cce:	930e      	str	r3, [sp, #56]	@ 0x38
 8028cd0:	4bce      	ldr	r3, [pc, #824]	@ (802900c <__ieee754_pow+0x7a4>)
 8028cd2:	18ed      	adds	r5, r5, r3
 8028cd4:	9800      	ldr	r0, [sp, #0]
 8028cd6:	9901      	ldr	r1, [sp, #4]
 8028cd8:	0029      	movs	r1, r5
 8028cda:	4bcd      	ldr	r3, [pc, #820]	@ (8029010 <__ieee754_pow+0x7a8>)
 8028cdc:	00f2      	lsls	r2, r6, #3
 8028cde:	189b      	adds	r3, r3, r2
 8028ce0:	685c      	ldr	r4, [r3, #4]
 8028ce2:	681b      	ldr	r3, [r3, #0]
 8028ce4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8028ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8028ce8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028cea:	001a      	movs	r2, r3
 8028cec:	0023      	movs	r3, r4
 8028cee:	900c      	str	r0, [sp, #48]	@ 0x30
 8028cf0:	910d      	str	r1, [sp, #52]	@ 0x34
 8028cf2:	f7da f915 	bl	8002f20 <__aeabi_dsub>
 8028cf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028cf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028cfa:	9010      	str	r0, [sp, #64]	@ 0x40
 8028cfc:	9111      	str	r1, [sp, #68]	@ 0x44
 8028cfe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028d00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028d02:	f7d8 fe27 	bl	8001954 <__aeabi_dadd>
 8028d06:	0002      	movs	r2, r0
 8028d08:	000b      	movs	r3, r1
 8028d0a:	2000      	movs	r0, #0
 8028d0c:	49bc      	ldr	r1, [pc, #752]	@ (8029000 <__ieee754_pow+0x798>)
 8028d0e:	f7d9 f9e7 	bl	80020e0 <__aeabi_ddiv>
 8028d12:	0002      	movs	r2, r0
 8028d14:	000b      	movs	r3, r1
 8028d16:	9012      	str	r0, [sp, #72]	@ 0x48
 8028d18:	9113      	str	r1, [sp, #76]	@ 0x4c
 8028d1a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028d1c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028d1e:	f7d9 fe19 	bl	8002954 <__aeabi_dmul>
 8028d22:	9008      	str	r0, [sp, #32]
 8028d24:	9109      	str	r1, [sp, #36]	@ 0x24
 8028d26:	9b08      	ldr	r3, [sp, #32]
 8028d28:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8028d2a:	2180      	movs	r1, #128	@ 0x80
 8028d2c:	9302      	str	r3, [sp, #8]
 8028d2e:	9403      	str	r4, [sp, #12]
 8028d30:	2080      	movs	r0, #128	@ 0x80
 8028d32:	2300      	movs	r3, #0
 8028d34:	2200      	movs	r2, #0
 8028d36:	106d      	asrs	r5, r5, #1
 8028d38:	0589      	lsls	r1, r1, #22
 8028d3a:	9302      	str	r3, [sp, #8]
 8028d3c:	4329      	orrs	r1, r5
 8028d3e:	0300      	lsls	r0, r0, #12
 8028d40:	9b02      	ldr	r3, [sp, #8]
 8028d42:	9c03      	ldr	r4, [sp, #12]
 8028d44:	1809      	adds	r1, r1, r0
 8028d46:	9300      	str	r3, [sp, #0]
 8028d48:	9401      	str	r4, [sp, #4]
 8028d4a:	04b6      	lsls	r6, r6, #18
 8028d4c:	198b      	adds	r3, r1, r6
 8028d4e:	9800      	ldr	r0, [sp, #0]
 8028d50:	9901      	ldr	r1, [sp, #4]
 8028d52:	0014      	movs	r4, r2
 8028d54:	001d      	movs	r5, r3
 8028d56:	f7d9 fdfd 	bl	8002954 <__aeabi_dmul>
 8028d5a:	0002      	movs	r2, r0
 8028d5c:	000b      	movs	r3, r1
 8028d5e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8028d60:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8028d62:	f7da f8dd 	bl	8002f20 <__aeabi_dsub>
 8028d66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028d6a:	0006      	movs	r6, r0
 8028d6c:	000f      	movs	r7, r1
 8028d6e:	0020      	movs	r0, r4
 8028d70:	0029      	movs	r1, r5
 8028d72:	f7da f8d5 	bl	8002f20 <__aeabi_dsub>
 8028d76:	0002      	movs	r2, r0
 8028d78:	000b      	movs	r3, r1
 8028d7a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028d7c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028d7e:	f7da f8cf 	bl	8002f20 <__aeabi_dsub>
 8028d82:	9a00      	ldr	r2, [sp, #0]
 8028d84:	9b01      	ldr	r3, [sp, #4]
 8028d86:	f7d9 fde5 	bl	8002954 <__aeabi_dmul>
 8028d8a:	0002      	movs	r2, r0
 8028d8c:	000b      	movs	r3, r1
 8028d8e:	0030      	movs	r0, r6
 8028d90:	0039      	movs	r1, r7
 8028d92:	f7da f8c5 	bl	8002f20 <__aeabi_dsub>
 8028d96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8028d98:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028d9a:	f7d9 fddb 	bl	8002954 <__aeabi_dmul>
 8028d9e:	9a08      	ldr	r2, [sp, #32]
 8028da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028da2:	900a      	str	r0, [sp, #40]	@ 0x28
 8028da4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028da6:	0010      	movs	r0, r2
 8028da8:	0019      	movs	r1, r3
 8028daa:	f7d9 fdd3 	bl	8002954 <__aeabi_dmul>
 8028dae:	0006      	movs	r6, r0
 8028db0:	000f      	movs	r7, r1
 8028db2:	4a98      	ldr	r2, [pc, #608]	@ (8029014 <__ieee754_pow+0x7ac>)
 8028db4:	4b98      	ldr	r3, [pc, #608]	@ (8029018 <__ieee754_pow+0x7b0>)
 8028db6:	f7d9 fdcd 	bl	8002954 <__aeabi_dmul>
 8028dba:	4a98      	ldr	r2, [pc, #608]	@ (802901c <__ieee754_pow+0x7b4>)
 8028dbc:	4b98      	ldr	r3, [pc, #608]	@ (8029020 <__ieee754_pow+0x7b8>)
 8028dbe:	f7d8 fdc9 	bl	8001954 <__aeabi_dadd>
 8028dc2:	0032      	movs	r2, r6
 8028dc4:	003b      	movs	r3, r7
 8028dc6:	f7d9 fdc5 	bl	8002954 <__aeabi_dmul>
 8028dca:	4a96      	ldr	r2, [pc, #600]	@ (8029024 <__ieee754_pow+0x7bc>)
 8028dcc:	4b96      	ldr	r3, [pc, #600]	@ (8029028 <__ieee754_pow+0x7c0>)
 8028dce:	f7d8 fdc1 	bl	8001954 <__aeabi_dadd>
 8028dd2:	0032      	movs	r2, r6
 8028dd4:	003b      	movs	r3, r7
 8028dd6:	f7d9 fdbd 	bl	8002954 <__aeabi_dmul>
 8028dda:	4a94      	ldr	r2, [pc, #592]	@ (802902c <__ieee754_pow+0x7c4>)
 8028ddc:	4b94      	ldr	r3, [pc, #592]	@ (8029030 <__ieee754_pow+0x7c8>)
 8028dde:	f7d8 fdb9 	bl	8001954 <__aeabi_dadd>
 8028de2:	0032      	movs	r2, r6
 8028de4:	003b      	movs	r3, r7
 8028de6:	f7d9 fdb5 	bl	8002954 <__aeabi_dmul>
 8028dea:	4a92      	ldr	r2, [pc, #584]	@ (8029034 <__ieee754_pow+0x7cc>)
 8028dec:	4b92      	ldr	r3, [pc, #584]	@ (8029038 <__ieee754_pow+0x7d0>)
 8028dee:	f7d8 fdb1 	bl	8001954 <__aeabi_dadd>
 8028df2:	0032      	movs	r2, r6
 8028df4:	003b      	movs	r3, r7
 8028df6:	f7d9 fdad 	bl	8002954 <__aeabi_dmul>
 8028dfa:	4a90      	ldr	r2, [pc, #576]	@ (802903c <__ieee754_pow+0x7d4>)
 8028dfc:	4b90      	ldr	r3, [pc, #576]	@ (8029040 <__ieee754_pow+0x7d8>)
 8028dfe:	f7d8 fda9 	bl	8001954 <__aeabi_dadd>
 8028e02:	0032      	movs	r2, r6
 8028e04:	0004      	movs	r4, r0
 8028e06:	000d      	movs	r5, r1
 8028e08:	003b      	movs	r3, r7
 8028e0a:	0030      	movs	r0, r6
 8028e0c:	0039      	movs	r1, r7
 8028e0e:	f7d9 fda1 	bl	8002954 <__aeabi_dmul>
 8028e12:	0002      	movs	r2, r0
 8028e14:	000b      	movs	r3, r1
 8028e16:	0020      	movs	r0, r4
 8028e18:	0029      	movs	r1, r5
 8028e1a:	f7d9 fd9b 	bl	8002954 <__aeabi_dmul>
 8028e1e:	9a00      	ldr	r2, [sp, #0]
 8028e20:	9b01      	ldr	r3, [sp, #4]
 8028e22:	0004      	movs	r4, r0
 8028e24:	000d      	movs	r5, r1
 8028e26:	9808      	ldr	r0, [sp, #32]
 8028e28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028e2a:	f7d8 fd93 	bl	8001954 <__aeabi_dadd>
 8028e2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028e30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028e32:	f7d9 fd8f 	bl	8002954 <__aeabi_dmul>
 8028e36:	0022      	movs	r2, r4
 8028e38:	002b      	movs	r3, r5
 8028e3a:	f7d8 fd8b 	bl	8001954 <__aeabi_dadd>
 8028e3e:	9a00      	ldr	r2, [sp, #0]
 8028e40:	9b01      	ldr	r3, [sp, #4]
 8028e42:	900c      	str	r0, [sp, #48]	@ 0x30
 8028e44:	910d      	str	r1, [sp, #52]	@ 0x34
 8028e46:	0010      	movs	r0, r2
 8028e48:	0019      	movs	r1, r3
 8028e4a:	f7d9 fd83 	bl	8002954 <__aeabi_dmul>
 8028e4e:	2200      	movs	r2, #0
 8028e50:	4b7c      	ldr	r3, [pc, #496]	@ (8029044 <__ieee754_pow+0x7dc>)
 8028e52:	0004      	movs	r4, r0
 8028e54:	000d      	movs	r5, r1
 8028e56:	f7d8 fd7d 	bl	8001954 <__aeabi_dadd>
 8028e5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028e5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028e5e:	f7d8 fd79 	bl	8001954 <__aeabi_dadd>
 8028e62:	2000      	movs	r0, #0
 8028e64:	000f      	movs	r7, r1
 8028e66:	0006      	movs	r6, r0
 8028e68:	0002      	movs	r2, r0
 8028e6a:	000b      	movs	r3, r1
 8028e6c:	9800      	ldr	r0, [sp, #0]
 8028e6e:	9901      	ldr	r1, [sp, #4]
 8028e70:	f7d9 fd70 	bl	8002954 <__aeabi_dmul>
 8028e74:	2200      	movs	r2, #0
 8028e76:	9000      	str	r0, [sp, #0]
 8028e78:	9101      	str	r1, [sp, #4]
 8028e7a:	4b72      	ldr	r3, [pc, #456]	@ (8029044 <__ieee754_pow+0x7dc>)
 8028e7c:	0030      	movs	r0, r6
 8028e7e:	0039      	movs	r1, r7
 8028e80:	f7da f84e 	bl	8002f20 <__aeabi_dsub>
 8028e84:	0022      	movs	r2, r4
 8028e86:	002b      	movs	r3, r5
 8028e88:	f7da f84a 	bl	8002f20 <__aeabi_dsub>
 8028e8c:	0002      	movs	r2, r0
 8028e8e:	000b      	movs	r3, r1
 8028e90:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028e92:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8028e94:	f7da f844 	bl	8002f20 <__aeabi_dsub>
 8028e98:	9a08      	ldr	r2, [sp, #32]
 8028e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028e9c:	f7d9 fd5a 	bl	8002954 <__aeabi_dmul>
 8028ea0:	0032      	movs	r2, r6
 8028ea2:	0004      	movs	r4, r0
 8028ea4:	000d      	movs	r5, r1
 8028ea6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028eaa:	003b      	movs	r3, r7
 8028eac:	f7d9 fd52 	bl	8002954 <__aeabi_dmul>
 8028eb0:	0002      	movs	r2, r0
 8028eb2:	000b      	movs	r3, r1
 8028eb4:	0020      	movs	r0, r4
 8028eb6:	0029      	movs	r1, r5
 8028eb8:	f7d8 fd4c 	bl	8001954 <__aeabi_dadd>
 8028ebc:	0004      	movs	r4, r0
 8028ebe:	000d      	movs	r5, r1
 8028ec0:	0002      	movs	r2, r0
 8028ec2:	000b      	movs	r3, r1
 8028ec4:	9800      	ldr	r0, [sp, #0]
 8028ec6:	9901      	ldr	r1, [sp, #4]
 8028ec8:	f7d8 fd44 	bl	8001954 <__aeabi_dadd>
 8028ecc:	22e0      	movs	r2, #224	@ 0xe0
 8028ece:	2000      	movs	r0, #0
 8028ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8029048 <__ieee754_pow+0x7e0>)
 8028ed2:	0612      	lsls	r2, r2, #24
 8028ed4:	0006      	movs	r6, r0
 8028ed6:	000f      	movs	r7, r1
 8028ed8:	f7d9 fd3c 	bl	8002954 <__aeabi_dmul>
 8028edc:	9008      	str	r0, [sp, #32]
 8028ede:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ee0:	9a00      	ldr	r2, [sp, #0]
 8028ee2:	9b01      	ldr	r3, [sp, #4]
 8028ee4:	0030      	movs	r0, r6
 8028ee6:	0039      	movs	r1, r7
 8028ee8:	f7da f81a 	bl	8002f20 <__aeabi_dsub>
 8028eec:	0002      	movs	r2, r0
 8028eee:	000b      	movs	r3, r1
 8028ef0:	0020      	movs	r0, r4
 8028ef2:	0029      	movs	r1, r5
 8028ef4:	f7da f814 	bl	8002f20 <__aeabi_dsub>
 8028ef8:	4a54      	ldr	r2, [pc, #336]	@ (802904c <__ieee754_pow+0x7e4>)
 8028efa:	4b53      	ldr	r3, [pc, #332]	@ (8029048 <__ieee754_pow+0x7e0>)
 8028efc:	f7d9 fd2a 	bl	8002954 <__aeabi_dmul>
 8028f00:	4a53      	ldr	r2, [pc, #332]	@ (8029050 <__ieee754_pow+0x7e8>)
 8028f02:	0004      	movs	r4, r0
 8028f04:	000d      	movs	r5, r1
 8028f06:	0030      	movs	r0, r6
 8028f08:	0039      	movs	r1, r7
 8028f0a:	4b52      	ldr	r3, [pc, #328]	@ (8029054 <__ieee754_pow+0x7ec>)
 8028f0c:	f7d9 fd22 	bl	8002954 <__aeabi_dmul>
 8028f10:	0002      	movs	r2, r0
 8028f12:	000b      	movs	r3, r1
 8028f14:	0020      	movs	r0, r4
 8028f16:	0029      	movs	r1, r5
 8028f18:	f7d8 fd1c 	bl	8001954 <__aeabi_dadd>
 8028f1c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028f1e:	4b4e      	ldr	r3, [pc, #312]	@ (8029058 <__ieee754_pow+0x7f0>)
 8028f20:	189b      	adds	r3, r3, r2
 8028f22:	681a      	ldr	r2, [r3, #0]
 8028f24:	685b      	ldr	r3, [r3, #4]
 8028f26:	f7d8 fd15 	bl	8001954 <__aeabi_dadd>
 8028f2a:	900a      	str	r0, [sp, #40]	@ 0x28
 8028f2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8028f2e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8028f30:	f7da fc5e 	bl	80037f0 <__aeabi_i2d>
 8028f34:	0004      	movs	r4, r0
 8028f36:	000d      	movs	r5, r1
 8028f38:	9808      	ldr	r0, [sp, #32]
 8028f3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8028f3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8028f3e:	4b47      	ldr	r3, [pc, #284]	@ (802905c <__ieee754_pow+0x7f4>)
 8028f40:	189b      	adds	r3, r3, r2
 8028f42:	681e      	ldr	r6, [r3, #0]
 8028f44:	685f      	ldr	r7, [r3, #4]
 8028f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8028f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028f4a:	f7d8 fd03 	bl	8001954 <__aeabi_dadd>
 8028f4e:	0032      	movs	r2, r6
 8028f50:	003b      	movs	r3, r7
 8028f52:	f7d8 fcff 	bl	8001954 <__aeabi_dadd>
 8028f56:	0022      	movs	r2, r4
 8028f58:	002b      	movs	r3, r5
 8028f5a:	f7d8 fcfb 	bl	8001954 <__aeabi_dadd>
 8028f5e:	2000      	movs	r0, #0
 8028f60:	0022      	movs	r2, r4
 8028f62:	002b      	movs	r3, r5
 8028f64:	9000      	str	r0, [sp, #0]
 8028f66:	9101      	str	r1, [sp, #4]
 8028f68:	f7d9 ffda 	bl	8002f20 <__aeabi_dsub>
 8028f6c:	0032      	movs	r2, r6
 8028f6e:	003b      	movs	r3, r7
 8028f70:	f7d9 ffd6 	bl	8002f20 <__aeabi_dsub>
 8028f74:	9a08      	ldr	r2, [sp, #32]
 8028f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028f78:	f7d9 ffd2 	bl	8002f20 <__aeabi_dsub>
 8028f7c:	0002      	movs	r2, r0
 8028f7e:	000b      	movs	r3, r1
 8028f80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8028f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8028f84:	e61f      	b.n	8028bc6 <__ieee754_pow+0x35e>
 8028f86:	4a36      	ldr	r2, [pc, #216]	@ (8029060 <__ieee754_pow+0x7f8>)
 8028f88:	4b36      	ldr	r3, [pc, #216]	@ (8029064 <__ieee754_pow+0x7fc>)
 8028f8a:	9804      	ldr	r0, [sp, #16]
 8028f8c:	9905      	ldr	r1, [sp, #20]
 8028f8e:	f7d8 fce1 	bl	8001954 <__aeabi_dadd>
 8028f92:	9a00      	ldr	r2, [sp, #0]
 8028f94:	9b01      	ldr	r3, [sp, #4]
 8028f96:	0004      	movs	r4, r0
 8028f98:	000d      	movs	r5, r1
 8028f9a:	0030      	movs	r0, r6
 8028f9c:	0039      	movs	r1, r7
 8028f9e:	f7d9 ffbf 	bl	8002f20 <__aeabi_dsub>
 8028fa2:	0002      	movs	r2, r0
 8028fa4:	000b      	movs	r3, r1
 8028fa6:	0020      	movs	r0, r4
 8028fa8:	0029      	movs	r1, r5
 8028faa:	f7d7 fa9b 	bl	80004e4 <__aeabi_dcmpgt>
 8028fae:	2800      	cmp	r0, #0
 8028fb0:	d000      	beq.n	8028fb4 <__ieee754_pow+0x74c>
 8028fb2:	e646      	b.n	8028c42 <__ieee754_pow+0x3da>
 8028fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8029068 <__ieee754_pow+0x800>)
 8028fb6:	e063      	b.n	8029080 <__ieee754_pow+0x818>
 8028fb8:	4a2c      	ldr	r2, [pc, #176]	@ (802906c <__ieee754_pow+0x804>)
 8028fba:	004b      	lsls	r3, r1, #1
 8028fbc:	085b      	lsrs	r3, r3, #1
 8028fbe:	4293      	cmp	r3, r2
 8028fc0:	d95a      	bls.n	8029078 <__ieee754_pow+0x810>
 8028fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8029070 <__ieee754_pow+0x808>)
 8028fc4:	18cb      	adds	r3, r1, r3
 8028fc6:	4303      	orrs	r3, r0
 8028fc8:	d008      	beq.n	8028fdc <__ieee754_pow+0x774>
 8028fca:	9806      	ldr	r0, [sp, #24]
 8028fcc:	9907      	ldr	r1, [sp, #28]
 8028fce:	2300      	movs	r3, #0
 8028fd0:	2200      	movs	r2, #0
 8028fd2:	f7d7 fa73 	bl	80004bc <__aeabi_dcmplt>
 8028fd6:	1e43      	subs	r3, r0, #1
 8028fd8:	4198      	sbcs	r0, r3
 8028fda:	e567      	b.n	8028aac <__ieee754_pow+0x244>
 8028fdc:	9a00      	ldr	r2, [sp, #0]
 8028fde:	9b01      	ldr	r3, [sp, #4]
 8028fe0:	f7d9 ff9e 	bl	8002f20 <__aeabi_dsub>
 8028fe4:	9a04      	ldr	r2, [sp, #16]
 8028fe6:	9b05      	ldr	r3, [sp, #20]
 8028fe8:	f7d7 fa86 	bl	80004f8 <__aeabi_dcmpge>
 8028fec:	2800      	cmp	r0, #0
 8028fee:	d1ec      	bne.n	8028fca <__ieee754_pow+0x762>
 8028ff0:	4b20      	ldr	r3, [pc, #128]	@ (8029074 <__ieee754_pow+0x80c>)
 8028ff2:	e045      	b.n	8029080 <__ieee754_pow+0x818>
 8028ff4:	7ff00000 	.word	0x7ff00000
 8028ff8:	43400000 	.word	0x43400000
 8028ffc:	fffffc01 	.word	0xfffffc01
 8029000:	3ff00000 	.word	0x3ff00000
 8029004:	0003988e 	.word	0x0003988e
 8029008:	000bb679 	.word	0x000bb679
 802900c:	fff00000 	.word	0xfff00000
 8029010:	0802e4d8 	.word	0x0802e4d8
 8029014:	4a454eef 	.word	0x4a454eef
 8029018:	3fca7e28 	.word	0x3fca7e28
 802901c:	93c9db65 	.word	0x93c9db65
 8029020:	3fcd864a 	.word	0x3fcd864a
 8029024:	a91d4101 	.word	0xa91d4101
 8029028:	3fd17460 	.word	0x3fd17460
 802902c:	518f264d 	.word	0x518f264d
 8029030:	3fd55555 	.word	0x3fd55555
 8029034:	db6fabff 	.word	0xdb6fabff
 8029038:	3fdb6db6 	.word	0x3fdb6db6
 802903c:	33333303 	.word	0x33333303
 8029040:	3fe33333 	.word	0x3fe33333
 8029044:	40080000 	.word	0x40080000
 8029048:	3feec709 	.word	0x3feec709
 802904c:	dc3a03fd 	.word	0xdc3a03fd
 8029050:	145b01f5 	.word	0x145b01f5
 8029054:	be3e2fe0 	.word	0xbe3e2fe0
 8029058:	0802e4b8 	.word	0x0802e4b8
 802905c:	0802e4c8 	.word	0x0802e4c8
 8029060:	652b82fe 	.word	0x652b82fe
 8029064:	3c971547 	.word	0x3c971547
 8029068:	40900000 	.word	0x40900000
 802906c:	4090cbff 	.word	0x4090cbff
 8029070:	3f6f3400 	.word	0x3f6f3400
 8029074:	4090cc00 	.word	0x4090cc00
 8029078:	4a73      	ldr	r2, [pc, #460]	@ (8029248 <__ieee754_pow+0x9e0>)
 802907a:	9402      	str	r4, [sp, #8]
 802907c:	4293      	cmp	r3, r2
 802907e:	d925      	bls.n	80290cc <__ieee754_pow+0x864>
 8029080:	4a72      	ldr	r2, [pc, #456]	@ (802924c <__ieee754_pow+0x9e4>)
 8029082:	151b      	asrs	r3, r3, #20
 8029084:	189b      	adds	r3, r3, r2
 8029086:	2280      	movs	r2, #128	@ 0x80
 8029088:	0352      	lsls	r2, r2, #13
 802908a:	0011      	movs	r1, r2
 802908c:	4119      	asrs	r1, r3
 802908e:	19cb      	adds	r3, r1, r7
 8029090:	005c      	lsls	r4, r3, #1
 8029092:	496f      	ldr	r1, [pc, #444]	@ (8029250 <__ieee754_pow+0x9e8>)
 8029094:	4d6f      	ldr	r5, [pc, #444]	@ (8029254 <__ieee754_pow+0x9ec>)
 8029096:	0d64      	lsrs	r4, r4, #21
 8029098:	1864      	adds	r4, r4, r1
 802909a:	4125      	asrs	r5, r4
 802909c:	401d      	ands	r5, r3
 802909e:	031b      	lsls	r3, r3, #12
 80290a0:	0b1b      	lsrs	r3, r3, #12
 80290a2:	4313      	orrs	r3, r2
 80290a4:	2214      	movs	r2, #20
 80290a6:	1b12      	subs	r2, r2, r4
 80290a8:	4113      	asrs	r3, r2
 80290aa:	9302      	str	r3, [sp, #8]
 80290ac:	9b08      	ldr	r3, [sp, #32]
 80290ae:	2000      	movs	r0, #0
 80290b0:	0029      	movs	r1, r5
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	da02      	bge.n	80290bc <__ieee754_pow+0x854>
 80290b6:	9b02      	ldr	r3, [sp, #8]
 80290b8:	425b      	negs	r3, r3
 80290ba:	9302      	str	r3, [sp, #8]
 80290bc:	0002      	movs	r2, r0
 80290be:	000b      	movs	r3, r1
 80290c0:	9800      	ldr	r0, [sp, #0]
 80290c2:	9901      	ldr	r1, [sp, #4]
 80290c4:	f7d9 ff2c 	bl	8002f20 <__aeabi_dsub>
 80290c8:	9000      	str	r0, [sp, #0]
 80290ca:	9101      	str	r1, [sp, #4]
 80290cc:	9a04      	ldr	r2, [sp, #16]
 80290ce:	9b05      	ldr	r3, [sp, #20]
 80290d0:	9800      	ldr	r0, [sp, #0]
 80290d2:	9901      	ldr	r1, [sp, #4]
 80290d4:	f7d8 fc3e 	bl	8001954 <__aeabi_dadd>
 80290d8:	2000      	movs	r0, #0
 80290da:	2200      	movs	r2, #0
 80290dc:	4b5e      	ldr	r3, [pc, #376]	@ (8029258 <__ieee754_pow+0x9f0>)
 80290de:	0006      	movs	r6, r0
 80290e0:	000f      	movs	r7, r1
 80290e2:	f7d9 fc37 	bl	8002954 <__aeabi_dmul>
 80290e6:	9a00      	ldr	r2, [sp, #0]
 80290e8:	9b01      	ldr	r3, [sp, #4]
 80290ea:	9008      	str	r0, [sp, #32]
 80290ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80290ee:	0030      	movs	r0, r6
 80290f0:	0039      	movs	r1, r7
 80290f2:	f7d9 ff15 	bl	8002f20 <__aeabi_dsub>
 80290f6:	0002      	movs	r2, r0
 80290f8:	000b      	movs	r3, r1
 80290fa:	9804      	ldr	r0, [sp, #16]
 80290fc:	9905      	ldr	r1, [sp, #20]
 80290fe:	f7d9 ff0f 	bl	8002f20 <__aeabi_dsub>
 8029102:	4a56      	ldr	r2, [pc, #344]	@ (802925c <__ieee754_pow+0x9f4>)
 8029104:	4b56      	ldr	r3, [pc, #344]	@ (8029260 <__ieee754_pow+0x9f8>)
 8029106:	f7d9 fc25 	bl	8002954 <__aeabi_dmul>
 802910a:	4a56      	ldr	r2, [pc, #344]	@ (8029264 <__ieee754_pow+0x9fc>)
 802910c:	0004      	movs	r4, r0
 802910e:	000d      	movs	r5, r1
 8029110:	0030      	movs	r0, r6
 8029112:	0039      	movs	r1, r7
 8029114:	4b54      	ldr	r3, [pc, #336]	@ (8029268 <__ieee754_pow+0xa00>)
 8029116:	f7d9 fc1d 	bl	8002954 <__aeabi_dmul>
 802911a:	0002      	movs	r2, r0
 802911c:	000b      	movs	r3, r1
 802911e:	0020      	movs	r0, r4
 8029120:	0029      	movs	r1, r5
 8029122:	f7d8 fc17 	bl	8001954 <__aeabi_dadd>
 8029126:	0004      	movs	r4, r0
 8029128:	000d      	movs	r5, r1
 802912a:	0002      	movs	r2, r0
 802912c:	000b      	movs	r3, r1
 802912e:	9808      	ldr	r0, [sp, #32]
 8029130:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029132:	f7d8 fc0f 	bl	8001954 <__aeabi_dadd>
 8029136:	9a08      	ldr	r2, [sp, #32]
 8029138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802913a:	0006      	movs	r6, r0
 802913c:	000f      	movs	r7, r1
 802913e:	f7d9 feef 	bl	8002f20 <__aeabi_dsub>
 8029142:	0002      	movs	r2, r0
 8029144:	000b      	movs	r3, r1
 8029146:	0020      	movs	r0, r4
 8029148:	0029      	movs	r1, r5
 802914a:	f7d9 fee9 	bl	8002f20 <__aeabi_dsub>
 802914e:	0032      	movs	r2, r6
 8029150:	9000      	str	r0, [sp, #0]
 8029152:	9101      	str	r1, [sp, #4]
 8029154:	003b      	movs	r3, r7
 8029156:	0030      	movs	r0, r6
 8029158:	0039      	movs	r1, r7
 802915a:	f7d9 fbfb 	bl	8002954 <__aeabi_dmul>
 802915e:	0004      	movs	r4, r0
 8029160:	000d      	movs	r5, r1
 8029162:	4a42      	ldr	r2, [pc, #264]	@ (802926c <__ieee754_pow+0xa04>)
 8029164:	4b42      	ldr	r3, [pc, #264]	@ (8029270 <__ieee754_pow+0xa08>)
 8029166:	f7d9 fbf5 	bl	8002954 <__aeabi_dmul>
 802916a:	4a42      	ldr	r2, [pc, #264]	@ (8029274 <__ieee754_pow+0xa0c>)
 802916c:	4b42      	ldr	r3, [pc, #264]	@ (8029278 <__ieee754_pow+0xa10>)
 802916e:	f7d9 fed7 	bl	8002f20 <__aeabi_dsub>
 8029172:	0022      	movs	r2, r4
 8029174:	002b      	movs	r3, r5
 8029176:	f7d9 fbed 	bl	8002954 <__aeabi_dmul>
 802917a:	4a40      	ldr	r2, [pc, #256]	@ (802927c <__ieee754_pow+0xa14>)
 802917c:	4b40      	ldr	r3, [pc, #256]	@ (8029280 <__ieee754_pow+0xa18>)
 802917e:	f7d8 fbe9 	bl	8001954 <__aeabi_dadd>
 8029182:	0022      	movs	r2, r4
 8029184:	002b      	movs	r3, r5
 8029186:	f7d9 fbe5 	bl	8002954 <__aeabi_dmul>
 802918a:	4a3e      	ldr	r2, [pc, #248]	@ (8029284 <__ieee754_pow+0xa1c>)
 802918c:	4b3e      	ldr	r3, [pc, #248]	@ (8029288 <__ieee754_pow+0xa20>)
 802918e:	f7d9 fec7 	bl	8002f20 <__aeabi_dsub>
 8029192:	0022      	movs	r2, r4
 8029194:	002b      	movs	r3, r5
 8029196:	f7d9 fbdd 	bl	8002954 <__aeabi_dmul>
 802919a:	4a3c      	ldr	r2, [pc, #240]	@ (802928c <__ieee754_pow+0xa24>)
 802919c:	4b3c      	ldr	r3, [pc, #240]	@ (8029290 <__ieee754_pow+0xa28>)
 802919e:	f7d8 fbd9 	bl	8001954 <__aeabi_dadd>
 80291a2:	0022      	movs	r2, r4
 80291a4:	002b      	movs	r3, r5
 80291a6:	f7d9 fbd5 	bl	8002954 <__aeabi_dmul>
 80291aa:	0002      	movs	r2, r0
 80291ac:	000b      	movs	r3, r1
 80291ae:	0030      	movs	r0, r6
 80291b0:	0039      	movs	r1, r7
 80291b2:	f7d9 feb5 	bl	8002f20 <__aeabi_dsub>
 80291b6:	0004      	movs	r4, r0
 80291b8:	000d      	movs	r5, r1
 80291ba:	0002      	movs	r2, r0
 80291bc:	000b      	movs	r3, r1
 80291be:	0030      	movs	r0, r6
 80291c0:	0039      	movs	r1, r7
 80291c2:	f7d9 fbc7 	bl	8002954 <__aeabi_dmul>
 80291c6:	2380      	movs	r3, #128	@ 0x80
 80291c8:	9004      	str	r0, [sp, #16]
 80291ca:	9105      	str	r1, [sp, #20]
 80291cc:	2200      	movs	r2, #0
 80291ce:	0020      	movs	r0, r4
 80291d0:	0029      	movs	r1, r5
 80291d2:	05db      	lsls	r3, r3, #23
 80291d4:	f7d9 fea4 	bl	8002f20 <__aeabi_dsub>
 80291d8:	0002      	movs	r2, r0
 80291da:	000b      	movs	r3, r1
 80291dc:	9804      	ldr	r0, [sp, #16]
 80291de:	9905      	ldr	r1, [sp, #20]
 80291e0:	f7d8 ff7e 	bl	80020e0 <__aeabi_ddiv>
 80291e4:	9a00      	ldr	r2, [sp, #0]
 80291e6:	9b01      	ldr	r3, [sp, #4]
 80291e8:	0004      	movs	r4, r0
 80291ea:	000d      	movs	r5, r1
 80291ec:	0030      	movs	r0, r6
 80291ee:	0039      	movs	r1, r7
 80291f0:	f7d9 fbb0 	bl	8002954 <__aeabi_dmul>
 80291f4:	9a00      	ldr	r2, [sp, #0]
 80291f6:	9b01      	ldr	r3, [sp, #4]
 80291f8:	f7d8 fbac 	bl	8001954 <__aeabi_dadd>
 80291fc:	0002      	movs	r2, r0
 80291fe:	000b      	movs	r3, r1
 8029200:	0020      	movs	r0, r4
 8029202:	0029      	movs	r1, r5
 8029204:	f7d9 fe8c 	bl	8002f20 <__aeabi_dsub>
 8029208:	0032      	movs	r2, r6
 802920a:	003b      	movs	r3, r7
 802920c:	f7d9 fe88 	bl	8002f20 <__aeabi_dsub>
 8029210:	0002      	movs	r2, r0
 8029212:	000b      	movs	r3, r1
 8029214:	2000      	movs	r0, #0
 8029216:	491f      	ldr	r1, [pc, #124]	@ (8029294 <__ieee754_pow+0xa2c>)
 8029218:	f7d9 fe82 	bl	8002f20 <__aeabi_dsub>
 802921c:	9b02      	ldr	r3, [sp, #8]
 802921e:	051b      	lsls	r3, r3, #20
 8029220:	185b      	adds	r3, r3, r1
 8029222:	151a      	asrs	r2, r3, #20
 8029224:	2a00      	cmp	r2, #0
 8029226:	dc06      	bgt.n	8029236 <__ieee754_pow+0x9ce>
 8029228:	9a02      	ldr	r2, [sp, #8]
 802922a:	f000 f929 	bl	8029480 <scalbn>
 802922e:	9a06      	ldr	r2, [sp, #24]
 8029230:	9b07      	ldr	r3, [sp, #28]
 8029232:	f7ff fb8b 	bl	802894c <__ieee754_pow+0xe4>
 8029236:	0019      	movs	r1, r3
 8029238:	e7f9      	b.n	802922e <__ieee754_pow+0x9c6>
 802923a:	2300      	movs	r3, #0
 802923c:	4c15      	ldr	r4, [pc, #84]	@ (8029294 <__ieee754_pow+0xa2c>)
 802923e:	9300      	str	r3, [sp, #0]
 8029240:	9401      	str	r4, [sp, #4]
 8029242:	f7ff fbc8 	bl	80289d6 <__ieee754_pow+0x16e>
 8029246:	46c0      	nop			@ (mov r8, r8)
 8029248:	3fe00000 	.word	0x3fe00000
 802924c:	fffffc02 	.word	0xfffffc02
 8029250:	fffffc01 	.word	0xfffffc01
 8029254:	fff00000 	.word	0xfff00000
 8029258:	3fe62e43 	.word	0x3fe62e43
 802925c:	fefa39ef 	.word	0xfefa39ef
 8029260:	3fe62e42 	.word	0x3fe62e42
 8029264:	0ca86c39 	.word	0x0ca86c39
 8029268:	be205c61 	.word	0xbe205c61
 802926c:	72bea4d0 	.word	0x72bea4d0
 8029270:	3e663769 	.word	0x3e663769
 8029274:	c5d26bf1 	.word	0xc5d26bf1
 8029278:	3ebbbd41 	.word	0x3ebbbd41
 802927c:	af25de2c 	.word	0xaf25de2c
 8029280:	3f11566a 	.word	0x3f11566a
 8029284:	16bebd93 	.word	0x16bebd93
 8029288:	3f66c16c 	.word	0x3f66c16c
 802928c:	5555553e 	.word	0x5555553e
 8029290:	3fc55555 	.word	0x3fc55555
 8029294:	3ff00000 	.word	0x3ff00000

08029298 <fabs>:
 8029298:	0049      	lsls	r1, r1, #1
 802929a:	084b      	lsrs	r3, r1, #1
 802929c:	0019      	movs	r1, r3
 802929e:	4770      	bx	lr

080292a0 <__ieee754_expf>:
 80292a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80292a2:	21ff      	movs	r1, #255	@ 0xff
 80292a4:	0043      	lsls	r3, r0, #1
 80292a6:	1c04      	adds	r4, r0, #0
 80292a8:	085b      	lsrs	r3, r3, #1
 80292aa:	05c9      	lsls	r1, r1, #23
 80292ac:	428b      	cmp	r3, r1
 80292ae:	d904      	bls.n	80292ba <__ieee754_expf+0x1a>
 80292b0:	1c01      	adds	r1, r0, #0
 80292b2:	1c20      	adds	r0, r4, #0
 80292b4:	f7d7 fb04 	bl	80008c0 <__aeabi_fadd>
 80292b8:	e00d      	b.n	80292d6 <__ieee754_expf+0x36>
 80292ba:	0fc6      	lsrs	r6, r0, #31
 80292bc:	428b      	cmp	r3, r1
 80292be:	d104      	bne.n	80292ca <__ieee754_expf+0x2a>
 80292c0:	2e00      	cmp	r6, #0
 80292c2:	d000      	beq.n	80292c6 <__ieee754_expf+0x26>
 80292c4:	e0ba      	b.n	802943c <__ieee754_expf+0x19c>
 80292c6:	1c20      	adds	r0, r4, #0
 80292c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80292ca:	495d      	ldr	r1, [pc, #372]	@ (8029440 <__ieee754_expf+0x1a0>)
 80292cc:	4288      	cmp	r0, r1
 80292ce:	dd04      	ble.n	80292da <__ieee754_expf+0x3a>
 80292d0:	2000      	movs	r0, #0
 80292d2:	f000 f98a 	bl	80295ea <__math_oflowf>
 80292d6:	1c04      	adds	r4, r0, #0
 80292d8:	e7f5      	b.n	80292c6 <__ieee754_expf+0x26>
 80292da:	2800      	cmp	r0, #0
 80292dc:	da06      	bge.n	80292ec <__ieee754_expf+0x4c>
 80292de:	4a59      	ldr	r2, [pc, #356]	@ (8029444 <__ieee754_expf+0x1a4>)
 80292e0:	4293      	cmp	r3, r2
 80292e2:	d903      	bls.n	80292ec <__ieee754_expf+0x4c>
 80292e4:	2000      	movs	r0, #0
 80292e6:	f000 f97a 	bl	80295de <__math_uflowf>
 80292ea:	e7f4      	b.n	80292d6 <__ieee754_expf+0x36>
 80292ec:	4a56      	ldr	r2, [pc, #344]	@ (8029448 <__ieee754_expf+0x1a8>)
 80292ee:	4293      	cmp	r3, r2
 80292f0:	d96e      	bls.n	80293d0 <__ieee754_expf+0x130>
 80292f2:	4a56      	ldr	r2, [pc, #344]	@ (802944c <__ieee754_expf+0x1ac>)
 80292f4:	00b5      	lsls	r5, r6, #2
 80292f6:	4293      	cmp	r3, r2
 80292f8:	d84e      	bhi.n	8029398 <__ieee754_expf+0xf8>
 80292fa:	4b55      	ldr	r3, [pc, #340]	@ (8029450 <__ieee754_expf+0x1b0>)
 80292fc:	1c20      	adds	r0, r4, #0
 80292fe:	5959      	ldr	r1, [r3, r5]
 8029300:	f7d7 fff8 	bl	80012f4 <__aeabi_fsub>
 8029304:	4b53      	ldr	r3, [pc, #332]	@ (8029454 <__ieee754_expf+0x1b4>)
 8029306:	1c07      	adds	r7, r0, #0
 8029308:	595b      	ldr	r3, [r3, r5]
 802930a:	2501      	movs	r5, #1
 802930c:	4075      	eors	r5, r6
 802930e:	9300      	str	r3, [sp, #0]
 8029310:	1bad      	subs	r5, r5, r6
 8029312:	9900      	ldr	r1, [sp, #0]
 8029314:	1c38      	adds	r0, r7, #0
 8029316:	f7d7 ffed 	bl	80012f4 <__aeabi_fsub>
 802931a:	1c04      	adds	r4, r0, #0
 802931c:	1c21      	adds	r1, r4, #0
 802931e:	1c20      	adds	r0, r4, #0
 8029320:	f7d7 fe8e 	bl	8001040 <__aeabi_fmul>
 8029324:	494c      	ldr	r1, [pc, #304]	@ (8029458 <__ieee754_expf+0x1b8>)
 8029326:	1c06      	adds	r6, r0, #0
 8029328:	f7d7 fe8a 	bl	8001040 <__aeabi_fmul>
 802932c:	494b      	ldr	r1, [pc, #300]	@ (802945c <__ieee754_expf+0x1bc>)
 802932e:	f7d7 ffe1 	bl	80012f4 <__aeabi_fsub>
 8029332:	1c31      	adds	r1, r6, #0
 8029334:	f7d7 fe84 	bl	8001040 <__aeabi_fmul>
 8029338:	4949      	ldr	r1, [pc, #292]	@ (8029460 <__ieee754_expf+0x1c0>)
 802933a:	f7d7 fac1 	bl	80008c0 <__aeabi_fadd>
 802933e:	1c31      	adds	r1, r6, #0
 8029340:	f7d7 fe7e 	bl	8001040 <__aeabi_fmul>
 8029344:	4947      	ldr	r1, [pc, #284]	@ (8029464 <__ieee754_expf+0x1c4>)
 8029346:	f7d7 ffd5 	bl	80012f4 <__aeabi_fsub>
 802934a:	1c31      	adds	r1, r6, #0
 802934c:	f7d7 fe78 	bl	8001040 <__aeabi_fmul>
 8029350:	4945      	ldr	r1, [pc, #276]	@ (8029468 <__ieee754_expf+0x1c8>)
 8029352:	f7d7 fab5 	bl	80008c0 <__aeabi_fadd>
 8029356:	1c31      	adds	r1, r6, #0
 8029358:	f7d7 fe72 	bl	8001040 <__aeabi_fmul>
 802935c:	1c01      	adds	r1, r0, #0
 802935e:	1c20      	adds	r0, r4, #0
 8029360:	f7d7 ffc8 	bl	80012f4 <__aeabi_fsub>
 8029364:	1c01      	adds	r1, r0, #0
 8029366:	1c06      	adds	r6, r0, #0
 8029368:	1c20      	adds	r0, r4, #0
 802936a:	f7d7 fe69 	bl	8001040 <__aeabi_fmul>
 802936e:	9001      	str	r0, [sp, #4]
 8029370:	2d00      	cmp	r5, #0
 8029372:	d140      	bne.n	80293f6 <__ieee754_expf+0x156>
 8029374:	2180      	movs	r1, #128	@ 0x80
 8029376:	1c30      	adds	r0, r6, #0
 8029378:	05c9      	lsls	r1, r1, #23
 802937a:	f7d7 ffbb 	bl	80012f4 <__aeabi_fsub>
 802937e:	1c01      	adds	r1, r0, #0
 8029380:	9801      	ldr	r0, [sp, #4]
 8029382:	f7d7 fc8f 	bl	8000ca4 <__aeabi_fdiv>
 8029386:	1c21      	adds	r1, r4, #0
 8029388:	f7d7 ffb4 	bl	80012f4 <__aeabi_fsub>
 802938c:	1c01      	adds	r1, r0, #0
 802938e:	20fe      	movs	r0, #254	@ 0xfe
 8029390:	0580      	lsls	r0, r0, #22
 8029392:	f7d7 ffaf 	bl	80012f4 <__aeabi_fsub>
 8029396:	e79e      	b.n	80292d6 <__ieee754_expf+0x36>
 8029398:	4934      	ldr	r1, [pc, #208]	@ (802946c <__ieee754_expf+0x1cc>)
 802939a:	1c20      	adds	r0, r4, #0
 802939c:	f7d7 fe50 	bl	8001040 <__aeabi_fmul>
 80293a0:	4b33      	ldr	r3, [pc, #204]	@ (8029470 <__ieee754_expf+0x1d0>)
 80293a2:	5959      	ldr	r1, [r3, r5]
 80293a4:	f7d7 fa8c 	bl	80008c0 <__aeabi_fadd>
 80293a8:	f7d8 fa1e 	bl	80017e8 <__aeabi_f2iz>
 80293ac:	0005      	movs	r5, r0
 80293ae:	f7d8 fa3b 	bl	8001828 <__aeabi_i2f>
 80293b2:	4930      	ldr	r1, [pc, #192]	@ (8029474 <__ieee754_expf+0x1d4>)
 80293b4:	1c06      	adds	r6, r0, #0
 80293b6:	f7d7 fe43 	bl	8001040 <__aeabi_fmul>
 80293ba:	1c01      	adds	r1, r0, #0
 80293bc:	1c20      	adds	r0, r4, #0
 80293be:	f7d7 ff99 	bl	80012f4 <__aeabi_fsub>
 80293c2:	492d      	ldr	r1, [pc, #180]	@ (8029478 <__ieee754_expf+0x1d8>)
 80293c4:	1c07      	adds	r7, r0, #0
 80293c6:	1c30      	adds	r0, r6, #0
 80293c8:	f7d7 fe3a 	bl	8001040 <__aeabi_fmul>
 80293cc:	9000      	str	r0, [sp, #0]
 80293ce:	e7a0      	b.n	8029312 <__ieee754_expf+0x72>
 80293d0:	22d0      	movs	r2, #208	@ 0xd0
 80293d2:	0592      	lsls	r2, r2, #22
 80293d4:	4293      	cmp	r3, r2
 80293d6:	d20c      	bcs.n	80293f2 <__ieee754_expf+0x152>
 80293d8:	4928      	ldr	r1, [pc, #160]	@ (802947c <__ieee754_expf+0x1dc>)
 80293da:	1c20      	adds	r0, r4, #0
 80293dc:	f7d7 fa70 	bl	80008c0 <__aeabi_fadd>
 80293e0:	21fe      	movs	r1, #254	@ 0xfe
 80293e2:	0589      	lsls	r1, r1, #22
 80293e4:	f7d7 f8b8 	bl	8000558 <__aeabi_fcmpgt>
 80293e8:	1e05      	subs	r5, r0, #0
 80293ea:	d097      	beq.n	802931c <__ieee754_expf+0x7c>
 80293ec:	21fe      	movs	r1, #254	@ 0xfe
 80293ee:	0589      	lsls	r1, r1, #22
 80293f0:	e75f      	b.n	80292b2 <__ieee754_expf+0x12>
 80293f2:	2500      	movs	r5, #0
 80293f4:	e792      	b.n	802931c <__ieee754_expf+0x7c>
 80293f6:	2080      	movs	r0, #128	@ 0x80
 80293f8:	1c31      	adds	r1, r6, #0
 80293fa:	05c0      	lsls	r0, r0, #23
 80293fc:	f7d7 ff7a 	bl	80012f4 <__aeabi_fsub>
 8029400:	1c01      	adds	r1, r0, #0
 8029402:	9801      	ldr	r0, [sp, #4]
 8029404:	f7d7 fc4e 	bl	8000ca4 <__aeabi_fdiv>
 8029408:	1c01      	adds	r1, r0, #0
 802940a:	9800      	ldr	r0, [sp, #0]
 802940c:	f7d7 ff72 	bl	80012f4 <__aeabi_fsub>
 8029410:	1c39      	adds	r1, r7, #0
 8029412:	f7d7 ff6f 	bl	80012f4 <__aeabi_fsub>
 8029416:	1c01      	adds	r1, r0, #0
 8029418:	20fe      	movs	r0, #254	@ 0xfe
 802941a:	0580      	lsls	r0, r0, #22
 802941c:	f7d7 ff6a 	bl	80012f4 <__aeabi_fsub>
 8029420:	002b      	movs	r3, r5
 8029422:	337d      	adds	r3, #125	@ 0x7d
 8029424:	db02      	blt.n	802942c <__ieee754_expf+0x18c>
 8029426:	05ec      	lsls	r4, r5, #23
 8029428:	1824      	adds	r4, r4, r0
 802942a:	e74c      	b.n	80292c6 <__ieee754_expf+0x26>
 802942c:	21d8      	movs	r1, #216	@ 0xd8
 802942e:	3564      	adds	r5, #100	@ 0x64
 8029430:	05ed      	lsls	r5, r5, #23
 8029432:	1828      	adds	r0, r5, r0
 8029434:	0509      	lsls	r1, r1, #20
 8029436:	f7d7 fe03 	bl	8001040 <__aeabi_fmul>
 802943a:	e74c      	b.n	80292d6 <__ieee754_expf+0x36>
 802943c:	2400      	movs	r4, #0
 802943e:	e742      	b.n	80292c6 <__ieee754_expf+0x26>
 8029440:	42b17217 	.word	0x42b17217
 8029444:	42cff1b5 	.word	0x42cff1b5
 8029448:	3eb17218 	.word	0x3eb17218
 802944c:	3f851591 	.word	0x3f851591
 8029450:	0802e4f0 	.word	0x0802e4f0
 8029454:	0802e4e8 	.word	0x0802e4e8
 8029458:	3331bb4c 	.word	0x3331bb4c
 802945c:	35ddea0e 	.word	0x35ddea0e
 8029460:	388ab355 	.word	0x388ab355
 8029464:	3b360b61 	.word	0x3b360b61
 8029468:	3e2aaaab 	.word	0x3e2aaaab
 802946c:	3fb8aa3b 	.word	0x3fb8aa3b
 8029470:	0802e4f8 	.word	0x0802e4f8
 8029474:	3f317180 	.word	0x3f317180
 8029478:	3717f7d1 	.word	0x3717f7d1
 802947c:	7149f2ca 	.word	0x7149f2ca

08029480 <scalbn>:
 8029480:	004b      	lsls	r3, r1, #1
 8029482:	b570      	push	{r4, r5, r6, lr}
 8029484:	0d5b      	lsrs	r3, r3, #21
 8029486:	0014      	movs	r4, r2
 8029488:	000d      	movs	r5, r1
 802948a:	2b00      	cmp	r3, #0
 802948c:	d10f      	bne.n	80294ae <scalbn+0x2e>
 802948e:	004b      	lsls	r3, r1, #1
 8029490:	085b      	lsrs	r3, r3, #1
 8029492:	4303      	orrs	r3, r0
 8029494:	d012      	beq.n	80294bc <scalbn+0x3c>
 8029496:	4b23      	ldr	r3, [pc, #140]	@ (8029524 <scalbn+0xa4>)
 8029498:	2200      	movs	r2, #0
 802949a:	f7d9 fa5b 	bl	8002954 <__aeabi_dmul>
 802949e:	4b22      	ldr	r3, [pc, #136]	@ (8029528 <scalbn+0xa8>)
 80294a0:	429c      	cmp	r4, r3
 80294a2:	da0c      	bge.n	80294be <scalbn+0x3e>
 80294a4:	4a21      	ldr	r2, [pc, #132]	@ (802952c <scalbn+0xac>)
 80294a6:	4b22      	ldr	r3, [pc, #136]	@ (8029530 <scalbn+0xb0>)
 80294a8:	f7d9 fa54 	bl	8002954 <__aeabi_dmul>
 80294ac:	e006      	b.n	80294bc <scalbn+0x3c>
 80294ae:	4a21      	ldr	r2, [pc, #132]	@ (8029534 <scalbn+0xb4>)
 80294b0:	4293      	cmp	r3, r2
 80294b2:	d108      	bne.n	80294c6 <scalbn+0x46>
 80294b4:	0002      	movs	r2, r0
 80294b6:	000b      	movs	r3, r1
 80294b8:	f7d8 fa4c 	bl	8001954 <__aeabi_dadd>
 80294bc:	bd70      	pop	{r4, r5, r6, pc}
 80294be:	000d      	movs	r5, r1
 80294c0:	004b      	lsls	r3, r1, #1
 80294c2:	0d5b      	lsrs	r3, r3, #21
 80294c4:	3b36      	subs	r3, #54	@ 0x36
 80294c6:	4a1c      	ldr	r2, [pc, #112]	@ (8029538 <scalbn+0xb8>)
 80294c8:	4294      	cmp	r4, r2
 80294ca:	dd0a      	ble.n	80294e2 <scalbn+0x62>
 80294cc:	4c1b      	ldr	r4, [pc, #108]	@ (802953c <scalbn+0xbc>)
 80294ce:	4d1c      	ldr	r5, [pc, #112]	@ (8029540 <scalbn+0xc0>)
 80294d0:	2900      	cmp	r1, #0
 80294d2:	da01      	bge.n	80294d8 <scalbn+0x58>
 80294d4:	4c19      	ldr	r4, [pc, #100]	@ (802953c <scalbn+0xbc>)
 80294d6:	4d1b      	ldr	r5, [pc, #108]	@ (8029544 <scalbn+0xc4>)
 80294d8:	4a18      	ldr	r2, [pc, #96]	@ (802953c <scalbn+0xbc>)
 80294da:	4b19      	ldr	r3, [pc, #100]	@ (8029540 <scalbn+0xc0>)
 80294dc:	0020      	movs	r0, r4
 80294de:	0029      	movs	r1, r5
 80294e0:	e7e2      	b.n	80294a8 <scalbn+0x28>
 80294e2:	18e2      	adds	r2, r4, r3
 80294e4:	4b18      	ldr	r3, [pc, #96]	@ (8029548 <scalbn+0xc8>)
 80294e6:	429a      	cmp	r2, r3
 80294e8:	dcf0      	bgt.n	80294cc <scalbn+0x4c>
 80294ea:	2a00      	cmp	r2, #0
 80294ec:	dd05      	ble.n	80294fa <scalbn+0x7a>
 80294ee:	4b17      	ldr	r3, [pc, #92]	@ (802954c <scalbn+0xcc>)
 80294f0:	0512      	lsls	r2, r2, #20
 80294f2:	402b      	ands	r3, r5
 80294f4:	4313      	orrs	r3, r2
 80294f6:	0019      	movs	r1, r3
 80294f8:	e7e0      	b.n	80294bc <scalbn+0x3c>
 80294fa:	0013      	movs	r3, r2
 80294fc:	3335      	adds	r3, #53	@ 0x35
 80294fe:	da08      	bge.n	8029512 <scalbn+0x92>
 8029500:	4c0a      	ldr	r4, [pc, #40]	@ (802952c <scalbn+0xac>)
 8029502:	4d0b      	ldr	r5, [pc, #44]	@ (8029530 <scalbn+0xb0>)
 8029504:	2900      	cmp	r1, #0
 8029506:	da01      	bge.n	802950c <scalbn+0x8c>
 8029508:	4c08      	ldr	r4, [pc, #32]	@ (802952c <scalbn+0xac>)
 802950a:	4d11      	ldr	r5, [pc, #68]	@ (8029550 <scalbn+0xd0>)
 802950c:	4a07      	ldr	r2, [pc, #28]	@ (802952c <scalbn+0xac>)
 802950e:	4b08      	ldr	r3, [pc, #32]	@ (8029530 <scalbn+0xb0>)
 8029510:	e7e4      	b.n	80294dc <scalbn+0x5c>
 8029512:	4b0e      	ldr	r3, [pc, #56]	@ (802954c <scalbn+0xcc>)
 8029514:	3236      	adds	r2, #54	@ 0x36
 8029516:	401d      	ands	r5, r3
 8029518:	0512      	lsls	r2, r2, #20
 802951a:	432a      	orrs	r2, r5
 802951c:	0011      	movs	r1, r2
 802951e:	4b0d      	ldr	r3, [pc, #52]	@ (8029554 <scalbn+0xd4>)
 8029520:	2200      	movs	r2, #0
 8029522:	e7c1      	b.n	80294a8 <scalbn+0x28>
 8029524:	43500000 	.word	0x43500000
 8029528:	ffff3cb0 	.word	0xffff3cb0
 802952c:	c2f8f359 	.word	0xc2f8f359
 8029530:	01a56e1f 	.word	0x01a56e1f
 8029534:	000007ff 	.word	0x000007ff
 8029538:	0000c350 	.word	0x0000c350
 802953c:	8800759c 	.word	0x8800759c
 8029540:	7e37e43c 	.word	0x7e37e43c
 8029544:	fe37e43c 	.word	0xfe37e43c
 8029548:	000007fe 	.word	0x000007fe
 802954c:	800fffff 	.word	0x800fffff
 8029550:	81a56e1f 	.word	0x81a56e1f
 8029554:	3c900000 	.word	0x3c900000

08029558 <with_errno>:
 8029558:	b570      	push	{r4, r5, r6, lr}
 802955a:	000d      	movs	r5, r1
 802955c:	0016      	movs	r6, r2
 802955e:	0004      	movs	r4, r0
 8029560:	f7fc f952 	bl	8025808 <__errno>
 8029564:	0029      	movs	r1, r5
 8029566:	6006      	str	r6, [r0, #0]
 8029568:	0020      	movs	r0, r4
 802956a:	bd70      	pop	{r4, r5, r6, pc}

0802956c <xflow>:
 802956c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802956e:	0014      	movs	r4, r2
 8029570:	001d      	movs	r5, r3
 8029572:	2800      	cmp	r0, #0
 8029574:	d002      	beq.n	802957c <xflow+0x10>
 8029576:	2180      	movs	r1, #128	@ 0x80
 8029578:	0609      	lsls	r1, r1, #24
 802957a:	185b      	adds	r3, r3, r1
 802957c:	9200      	str	r2, [sp, #0]
 802957e:	9301      	str	r3, [sp, #4]
 8029580:	9a00      	ldr	r2, [sp, #0]
 8029582:	9b01      	ldr	r3, [sp, #4]
 8029584:	0020      	movs	r0, r4
 8029586:	0029      	movs	r1, r5
 8029588:	f7d9 f9e4 	bl	8002954 <__aeabi_dmul>
 802958c:	2222      	movs	r2, #34	@ 0x22
 802958e:	f7ff ffe3 	bl	8029558 <with_errno>
 8029592:	b003      	add	sp, #12
 8029594:	bd30      	pop	{r4, r5, pc}

08029596 <__math_uflow>:
 8029596:	2380      	movs	r3, #128	@ 0x80
 8029598:	b510      	push	{r4, lr}
 802959a:	2200      	movs	r2, #0
 802959c:	055b      	lsls	r3, r3, #21
 802959e:	f7ff ffe5 	bl	802956c <xflow>
 80295a2:	bd10      	pop	{r4, pc}

080295a4 <__math_oflow>:
 80295a4:	23e0      	movs	r3, #224	@ 0xe0
 80295a6:	b510      	push	{r4, lr}
 80295a8:	2200      	movs	r2, #0
 80295aa:	05db      	lsls	r3, r3, #23
 80295ac:	f7ff ffde 	bl	802956c <xflow>
 80295b0:	bd10      	pop	{r4, pc}

080295b2 <with_errnof>:
 80295b2:	b570      	push	{r4, r5, r6, lr}
 80295b4:	000d      	movs	r5, r1
 80295b6:	1c04      	adds	r4, r0, #0
 80295b8:	f7fc f926 	bl	8025808 <__errno>
 80295bc:	6005      	str	r5, [r0, #0]
 80295be:	1c20      	adds	r0, r4, #0
 80295c0:	bd70      	pop	{r4, r5, r6, pc}

080295c2 <xflowf>:
 80295c2:	b510      	push	{r4, lr}
 80295c4:	1c0b      	adds	r3, r1, #0
 80295c6:	2800      	cmp	r0, #0
 80295c8:	d002      	beq.n	80295d0 <xflowf+0xe>
 80295ca:	2380      	movs	r3, #128	@ 0x80
 80295cc:	061b      	lsls	r3, r3, #24
 80295ce:	18cb      	adds	r3, r1, r3
 80295d0:	1c18      	adds	r0, r3, #0
 80295d2:	f7d7 fd35 	bl	8001040 <__aeabi_fmul>
 80295d6:	2122      	movs	r1, #34	@ 0x22
 80295d8:	f7ff ffeb 	bl	80295b2 <with_errnof>
 80295dc:	bd10      	pop	{r4, pc}

080295de <__math_uflowf>:
 80295de:	2180      	movs	r1, #128	@ 0x80
 80295e0:	b510      	push	{r4, lr}
 80295e2:	0549      	lsls	r1, r1, #21
 80295e4:	f7ff ffed 	bl	80295c2 <xflowf>
 80295e8:	bd10      	pop	{r4, pc}

080295ea <__math_oflowf>:
 80295ea:	21e0      	movs	r1, #224	@ 0xe0
 80295ec:	b510      	push	{r4, lr}
 80295ee:	05c9      	lsls	r1, r1, #23
 80295f0:	f7ff ffe7 	bl	80295c2 <xflowf>
 80295f4:	bd10      	pop	{r4, pc}
	...

080295f8 <__ieee754_sqrt>:
 80295f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80295fa:	000a      	movs	r2, r1
 80295fc:	000d      	movs	r5, r1
 80295fe:	496b      	ldr	r1, [pc, #428]	@ (80297ac <__ieee754_sqrt+0x1b4>)
 8029600:	0004      	movs	r4, r0
 8029602:	0003      	movs	r3, r0
 8029604:	0008      	movs	r0, r1
 8029606:	b087      	sub	sp, #28
 8029608:	4028      	ands	r0, r5
 802960a:	4288      	cmp	r0, r1
 802960c:	d111      	bne.n	8029632 <__ieee754_sqrt+0x3a>
 802960e:	0022      	movs	r2, r4
 8029610:	002b      	movs	r3, r5
 8029612:	0020      	movs	r0, r4
 8029614:	0029      	movs	r1, r5
 8029616:	f7d9 f99d 	bl	8002954 <__aeabi_dmul>
 802961a:	0002      	movs	r2, r0
 802961c:	000b      	movs	r3, r1
 802961e:	0020      	movs	r0, r4
 8029620:	0029      	movs	r1, r5
 8029622:	f7d8 f997 	bl	8001954 <__aeabi_dadd>
 8029626:	0004      	movs	r4, r0
 8029628:	000d      	movs	r5, r1
 802962a:	0020      	movs	r0, r4
 802962c:	0029      	movs	r1, r5
 802962e:	b007      	add	sp, #28
 8029630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029632:	2d00      	cmp	r5, #0
 8029634:	dc11      	bgt.n	802965a <__ieee754_sqrt+0x62>
 8029636:	0069      	lsls	r1, r5, #1
 8029638:	0849      	lsrs	r1, r1, #1
 802963a:	4321      	orrs	r1, r4
 802963c:	d0f5      	beq.n	802962a <__ieee754_sqrt+0x32>
 802963e:	2000      	movs	r0, #0
 8029640:	4285      	cmp	r5, r0
 8029642:	d010      	beq.n	8029666 <__ieee754_sqrt+0x6e>
 8029644:	0022      	movs	r2, r4
 8029646:	002b      	movs	r3, r5
 8029648:	0020      	movs	r0, r4
 802964a:	0029      	movs	r1, r5
 802964c:	f7d9 fc68 	bl	8002f20 <__aeabi_dsub>
 8029650:	0002      	movs	r2, r0
 8029652:	000b      	movs	r3, r1
 8029654:	f7d8 fd44 	bl	80020e0 <__aeabi_ddiv>
 8029658:	e7e5      	b.n	8029626 <__ieee754_sqrt+0x2e>
 802965a:	1528      	asrs	r0, r5, #20
 802965c:	d115      	bne.n	802968a <__ieee754_sqrt+0x92>
 802965e:	2480      	movs	r4, #128	@ 0x80
 8029660:	2100      	movs	r1, #0
 8029662:	0364      	lsls	r4, r4, #13
 8029664:	e007      	b.n	8029676 <__ieee754_sqrt+0x7e>
 8029666:	0ada      	lsrs	r2, r3, #11
 8029668:	3815      	subs	r0, #21
 802966a:	055b      	lsls	r3, r3, #21
 802966c:	2a00      	cmp	r2, #0
 802966e:	d0fa      	beq.n	8029666 <__ieee754_sqrt+0x6e>
 8029670:	e7f5      	b.n	802965e <__ieee754_sqrt+0x66>
 8029672:	0052      	lsls	r2, r2, #1
 8029674:	3101      	adds	r1, #1
 8029676:	4222      	tst	r2, r4
 8029678:	d0fb      	beq.n	8029672 <__ieee754_sqrt+0x7a>
 802967a:	1e4c      	subs	r4, r1, #1
 802967c:	1b00      	subs	r0, r0, r4
 802967e:	2420      	movs	r4, #32
 8029680:	001d      	movs	r5, r3
 8029682:	1a64      	subs	r4, r4, r1
 8029684:	40e5      	lsrs	r5, r4
 8029686:	408b      	lsls	r3, r1
 8029688:	432a      	orrs	r2, r5
 802968a:	4949      	ldr	r1, [pc, #292]	@ (80297b0 <__ieee754_sqrt+0x1b8>)
 802968c:	0312      	lsls	r2, r2, #12
 802968e:	1844      	adds	r4, r0, r1
 8029690:	2180      	movs	r1, #128	@ 0x80
 8029692:	0b12      	lsrs	r2, r2, #12
 8029694:	0349      	lsls	r1, r1, #13
 8029696:	4311      	orrs	r1, r2
 8029698:	07c0      	lsls	r0, r0, #31
 802969a:	d403      	bmi.n	80296a4 <__ieee754_sqrt+0xac>
 802969c:	0fda      	lsrs	r2, r3, #31
 802969e:	0049      	lsls	r1, r1, #1
 80296a0:	1851      	adds	r1, r2, r1
 80296a2:	005b      	lsls	r3, r3, #1
 80296a4:	2500      	movs	r5, #0
 80296a6:	1062      	asrs	r2, r4, #1
 80296a8:	0049      	lsls	r1, r1, #1
 80296aa:	2480      	movs	r4, #128	@ 0x80
 80296ac:	9205      	str	r2, [sp, #20]
 80296ae:	0fda      	lsrs	r2, r3, #31
 80296b0:	1852      	adds	r2, r2, r1
 80296b2:	2016      	movs	r0, #22
 80296b4:	0029      	movs	r1, r5
 80296b6:	005b      	lsls	r3, r3, #1
 80296b8:	03a4      	lsls	r4, r4, #14
 80296ba:	190e      	adds	r6, r1, r4
 80296bc:	4296      	cmp	r6, r2
 80296be:	dc02      	bgt.n	80296c6 <__ieee754_sqrt+0xce>
 80296c0:	1931      	adds	r1, r6, r4
 80296c2:	1b92      	subs	r2, r2, r6
 80296c4:	192d      	adds	r5, r5, r4
 80296c6:	0fde      	lsrs	r6, r3, #31
 80296c8:	0052      	lsls	r2, r2, #1
 80296ca:	3801      	subs	r0, #1
 80296cc:	1992      	adds	r2, r2, r6
 80296ce:	005b      	lsls	r3, r3, #1
 80296d0:	0864      	lsrs	r4, r4, #1
 80296d2:	2800      	cmp	r0, #0
 80296d4:	d1f1      	bne.n	80296ba <__ieee754_sqrt+0xc2>
 80296d6:	2620      	movs	r6, #32
 80296d8:	2780      	movs	r7, #128	@ 0x80
 80296da:	0004      	movs	r4, r0
 80296dc:	9604      	str	r6, [sp, #16]
 80296de:	063f      	lsls	r7, r7, #24
 80296e0:	183e      	adds	r6, r7, r0
 80296e2:	46b4      	mov	ip, r6
 80296e4:	428a      	cmp	r2, r1
 80296e6:	dc02      	bgt.n	80296ee <__ieee754_sqrt+0xf6>
 80296e8:	d114      	bne.n	8029714 <__ieee754_sqrt+0x11c>
 80296ea:	429e      	cmp	r6, r3
 80296ec:	d812      	bhi.n	8029714 <__ieee754_sqrt+0x11c>
 80296ee:	4660      	mov	r0, ip
 80296f0:	4666      	mov	r6, ip
 80296f2:	19c0      	adds	r0, r0, r7
 80296f4:	9100      	str	r1, [sp, #0]
 80296f6:	2e00      	cmp	r6, #0
 80296f8:	da03      	bge.n	8029702 <__ieee754_sqrt+0x10a>
 80296fa:	43c6      	mvns	r6, r0
 80296fc:	0ff6      	lsrs	r6, r6, #31
 80296fe:	198e      	adds	r6, r1, r6
 8029700:	9600      	str	r6, [sp, #0]
 8029702:	1a52      	subs	r2, r2, r1
 8029704:	4563      	cmp	r3, ip
 8029706:	4189      	sbcs	r1, r1
 8029708:	4249      	negs	r1, r1
 802970a:	1a52      	subs	r2, r2, r1
 802970c:	4661      	mov	r1, ip
 802970e:	1a5b      	subs	r3, r3, r1
 8029710:	9900      	ldr	r1, [sp, #0]
 8029712:	19e4      	adds	r4, r4, r7
 8029714:	0fde      	lsrs	r6, r3, #31
 8029716:	0052      	lsls	r2, r2, #1
 8029718:	1992      	adds	r2, r2, r6
 802971a:	9e04      	ldr	r6, [sp, #16]
 802971c:	005b      	lsls	r3, r3, #1
 802971e:	3e01      	subs	r6, #1
 8029720:	087f      	lsrs	r7, r7, #1
 8029722:	9604      	str	r6, [sp, #16]
 8029724:	2e00      	cmp	r6, #0
 8029726:	d1db      	bne.n	80296e0 <__ieee754_sqrt+0xe8>
 8029728:	431a      	orrs	r2, r3
 802972a:	d01f      	beq.n	802976c <__ieee754_sqrt+0x174>
 802972c:	4e21      	ldr	r6, [pc, #132]	@ (80297b4 <__ieee754_sqrt+0x1bc>)
 802972e:	4f22      	ldr	r7, [pc, #136]	@ (80297b8 <__ieee754_sqrt+0x1c0>)
 8029730:	6830      	ldr	r0, [r6, #0]
 8029732:	6871      	ldr	r1, [r6, #4]
 8029734:	683a      	ldr	r2, [r7, #0]
 8029736:	687b      	ldr	r3, [r7, #4]
 8029738:	9200      	str	r2, [sp, #0]
 802973a:	9301      	str	r3, [sp, #4]
 802973c:	6832      	ldr	r2, [r6, #0]
 802973e:	6873      	ldr	r3, [r6, #4]
 8029740:	9202      	str	r2, [sp, #8]
 8029742:	9303      	str	r3, [sp, #12]
 8029744:	9a00      	ldr	r2, [sp, #0]
 8029746:	9b01      	ldr	r3, [sp, #4]
 8029748:	f7d9 fbea 	bl	8002f20 <__aeabi_dsub>
 802974c:	0002      	movs	r2, r0
 802974e:	000b      	movs	r3, r1
 8029750:	9802      	ldr	r0, [sp, #8]
 8029752:	9903      	ldr	r1, [sp, #12]
 8029754:	f7d6 febc 	bl	80004d0 <__aeabi_dcmple>
 8029758:	2800      	cmp	r0, #0
 802975a:	d007      	beq.n	802976c <__ieee754_sqrt+0x174>
 802975c:	6830      	ldr	r0, [r6, #0]
 802975e:	6871      	ldr	r1, [r6, #4]
 8029760:	683a      	ldr	r2, [r7, #0]
 8029762:	687b      	ldr	r3, [r7, #4]
 8029764:	1c67      	adds	r7, r4, #1
 8029766:	d10c      	bne.n	8029782 <__ieee754_sqrt+0x18a>
 8029768:	9c04      	ldr	r4, [sp, #16]
 802976a:	3501      	adds	r5, #1
 802976c:	4a13      	ldr	r2, [pc, #76]	@ (80297bc <__ieee754_sqrt+0x1c4>)
 802976e:	106b      	asrs	r3, r5, #1
 8029770:	189b      	adds	r3, r3, r2
 8029772:	9a05      	ldr	r2, [sp, #20]
 8029774:	07ed      	lsls	r5, r5, #31
 8029776:	0864      	lsrs	r4, r4, #1
 8029778:	0512      	lsls	r2, r2, #20
 802977a:	4325      	orrs	r5, r4
 802977c:	0028      	movs	r0, r5
 802977e:	18d1      	adds	r1, r2, r3
 8029780:	e751      	b.n	8029626 <__ieee754_sqrt+0x2e>
 8029782:	f7d8 f8e7 	bl	8001954 <__aeabi_dadd>
 8029786:	6877      	ldr	r7, [r6, #4]
 8029788:	6836      	ldr	r6, [r6, #0]
 802978a:	0002      	movs	r2, r0
 802978c:	000b      	movs	r3, r1
 802978e:	0030      	movs	r0, r6
 8029790:	0039      	movs	r1, r7
 8029792:	f7d6 fe93 	bl	80004bc <__aeabi_dcmplt>
 8029796:	2800      	cmp	r0, #0
 8029798:	d004      	beq.n	80297a4 <__ieee754_sqrt+0x1ac>
 802979a:	3402      	adds	r4, #2
 802979c:	4263      	negs	r3, r4
 802979e:	4163      	adcs	r3, r4
 80297a0:	18ed      	adds	r5, r5, r3
 80297a2:	e7e3      	b.n	802976c <__ieee754_sqrt+0x174>
 80297a4:	2301      	movs	r3, #1
 80297a6:	3401      	adds	r4, #1
 80297a8:	439c      	bics	r4, r3
 80297aa:	e7df      	b.n	802976c <__ieee754_sqrt+0x174>
 80297ac:	7ff00000 	.word	0x7ff00000
 80297b0:	fffffc01 	.word	0xfffffc01
 80297b4:	0802e508 	.word	0x0802e508
 80297b8:	0802e500 	.word	0x0802e500
 80297bc:	3fe00000 	.word	0x3fe00000

080297c0 <_init>:
 80297c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80297c2:	46c0      	nop			@ (mov r8, r8)
 80297c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80297c6:	bc08      	pop	{r3}
 80297c8:	469e      	mov	lr, r3
 80297ca:	4770      	bx	lr

080297cc <_fini>:
 80297cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80297ce:	46c0      	nop			@ (mov r8, r8)
 80297d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80297d2:	bc08      	pop	{r3}
 80297d4:	469e      	mov	lr, r3
 80297d6:	4770      	bx	lr
