
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000223ec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ae8  080224b0  080224b0  000234b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024f98  08024f98  00026420  2**0
                  CONTENTS
  4 .ARM          00000008  08024f98  08024f98  00025f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024fa0  08024fa0  00026420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024fa0  08024fa0  00025fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024fa4  08024fa4  00025fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08024fa8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034dc  20000420  080253c8  00026420  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200038fc  080253c8  000268fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032b73  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000917e  00000000  00000000  00058fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a48  00000000  00000000  00062140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f59  00000000  00000000  00064b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223be  00000000  00000000  00066ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000405a3  00000000  00000000  00088e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a035c  00000000  00000000  000c9442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016979e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac98  00000000  00000000  00169850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001744e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00174555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  00176ad1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08022494 	.word	0x08022494

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08022494 	.word	0x08022494

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	080241b0 	.word	0x080241b0
 8000e0c:	080241f0 	.word	0x080241f0
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0802422c 	.word	0x0802422c
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fd6c 	bl	800f140 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fdc3 	bl	800f210 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fd76 	bl	800f19c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fcf2 	bl	800f140 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fd21 	bl	800f1b8 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fd05 	bl	800f19c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fca2 	bl	800e100 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fc78 	bl	80060cc <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fcd5 	bl	8006190 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setHIDS>:
void setHIDS(float temp, float humid){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003906:	4b05      	ldr	r3, [pc, #20]	@ (800391c <setHIDS+0x20>)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <setHIDS+0x24>)
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b002      	add	sp, #8
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	20000564 	.word	0x20000564
 8003920:	20000568 	.word	0x20000568

08003924 <setVOC>:
void setVOC(uint16_t voc){
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	0002      	movs	r2, r0
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <setVOC+0x1c>)
 8003932:	1dba      	adds	r2, r7, #6
 8003934:	8812      	ldrh	r2, [r2, #0]
 8003936:	801a      	strh	r2, [r3, #0]
}
 8003938:	46c0      	nop			@ (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000574 	.word	0x20000574

08003944 <setMic>:
void setMic(float dB){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800394c:	4b03      	ldr	r3, [pc, #12]	@ (800395c <setMic+0x18>)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			@ (mov r8, r8)
 800395c:	20000578 	.word	0x20000578

08003960 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	0002      	movs	r2, r0
 8003968:	1dbb      	adds	r3, r7, #6
 800396a:	801a      	strh	r2, [r3, #0]
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	1c0a      	adds	r2, r1, #0
 8003970:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003972:	1dbb      	adds	r3, r7, #6
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f7fd fe2a 	bl	80015d0 <__aeabi_i2f>
 800397c:	1c03      	adds	r3, r0, #0
 800397e:	490d      	ldr	r1, [pc, #52]	@ (80039b4 <setPMs+0x54>)
 8003980:	1c18      	adds	r0, r3, #0
 8003982:	f7fd f927 	bl	8000bd4 <__aeabi_fdiv>
 8003986:	1c03      	adds	r3, r0, #0
 8003988:	1c1a      	adds	r2, r3, #0
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <setPMs+0x58>)
 800398c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	0018      	movs	r0, r3
 8003994:	f7fd fe1c 	bl	80015d0 <__aeabi_i2f>
 8003998:	1c03      	adds	r3, r0, #0
 800399a:	4906      	ldr	r1, [pc, #24]	@ (80039b4 <setPMs+0x54>)
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f919 	bl	8000bd4 <__aeabi_fdiv>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c1a      	adds	r2, r3, #0
 80039a6:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <setPMs+0x5c>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	41200000 	.word	0x41200000
 80039b8:	2000057c 	.word	0x2000057c
 80039bc:	20000580 	.word	0x20000580

080039c0 <SetConfigMode>:

void SetConfigMode(){
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039c4:	4b02      	ldr	r3, [pc, #8]	@ (80039d0 <SetConfigMode+0x10>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	701a      	strb	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000054b 	.word	0x2000054b

080039d4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039d8:	f00a fbdc 	bl	800e194 <HAL_GetUIDw0>
 80039dc:	0002      	movs	r2, r0
 80039de:	4b07      	ldr	r3, [pc, #28]	@ (80039fc <ESP_GetUID+0x28>)
 80039e0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039e2:	f00a fbe1 	bl	800e1a8 <HAL_GetUIDw1>
 80039e6:	0002      	movs	r2, r0
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <ESP_GetUID+0x28>)
 80039ea:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039ec:	f00a fbe6 	bl	800e1bc <HAL_GetUIDw2>
 80039f0:	0002      	movs	r2, r0
 80039f2:	4b02      	ldr	r3, [pc, #8]	@ (80039fc <ESP_GetUID+0x28>)
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000550 	.word	0x20000550

08003a00 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <ESP_Init+0x2c>)
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003a0e:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <ESP_Init+0x30>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a14:	f7ff ffde 	bl	80039d4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a18:	f7ff fef0 	bl	80037fc <checkEEprom>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	001a      	movs	r2, r3
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <ESP_Init+0x34>)
 8003a22:	701a      	strb	r2, [r3, #0]
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000440 	.word	0x20000440
 8003a30:	20000028 	.word	0x20000028
 8003a34:	2000054e 	.word	0x2000054e

08003a38 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	000a      	movs	r2, r1
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a10      	ldr	r2, [pc, #64]	@ (8003a8c <ESP_Send+0x54>)
 8003a4a:	4911      	ldr	r1, [pc, #68]	@ (8003a90 <ESP_Send+0x58>)
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f009 ff0b 	bl	800d868 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <ESP_Send+0x5c>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	250f      	movs	r5, #15
 8003a58:	197c      	adds	r4, r7, r5
 8003a5a:	1cbb      	adds	r3, r7, #2
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	f012 fe4b 	bl	80166fc <HAL_UART_Transmit_DMA>
 8003a66:	0003      	movs	r3, r0
 8003a68:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a6a:	197b      	adds	r3, r7, r5
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a72:	4a09      	ldr	r2, [pc, #36]	@ (8003a98 <ESP_Send+0x60>)
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <ESP_Send+0x64>)
 8003a76:	0019      	movs	r1, r3
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f009 fef5 	bl	800d868 <CreateLine>
    return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e000      	b.n	8003a84 <ESP_Send+0x4c>
  }
  return true;
 8003a82:	2301      	movs	r3, #1
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	080224b0 	.word	0x080224b0
 8003a90:	080224c0 	.word	0x080224c0
 8003a94:	20000440 	.word	0x20000440
 8003a98:	080224c4 	.word	0x080224c4
 8003a9c:	080224e4 	.word	0x080224e4

08003aa0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003aa0:	b5b0      	push	{r4, r5, r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	000a      	movs	r2, r1
 8003aaa:	1cbb      	adds	r3, r7, #2
 8003aac:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003aae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba4 <ESP_Receive+0x104>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	250f      	movs	r5, #15
 8003aba:	197c      	adds	r4, r7, r5
 8003abc:	1cbb      	adds	r3, r7, #2
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f012 feaa 	bl	801681c <HAL_UART_Receive_DMA>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003acc:	002c      	movs	r4, r5
 8003ace:	193b      	adds	r3, r7, r4
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d060      	beq.n	8003b98 <ESP_Receive+0xf8>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ad6:	4b34      	ldr	r3, [pc, #208]	@ (8003ba8 <ESP_Receive+0x108>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2284      	movs	r2, #132	@ 0x84
 8003adc:	589b      	ldr	r3, [r3, r2]
 8003ade:	4a33      	ldr	r2, [pc, #204]	@ (8003bac <ESP_Receive+0x10c>)
 8003ae0:	4933      	ldr	r1, [pc, #204]	@ (8003bb0 <ESP_Receive+0x110>)
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f009 fec0 	bl	800d868 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2201      	movs	r2, #1
 8003aee:	4013      	ands	r3, r2
 8003af0:	d005      	beq.n	8003afe <ESP_Receive+0x5e>
      Error("Parity error in UART to ESP module");
 8003af2:	4a30      	ldr	r2, [pc, #192]	@ (8003bb4 <ESP_Receive+0x114>)
 8003af4:	4b2e      	ldr	r3, [pc, #184]	@ (8003bb0 <ESP_Receive+0x110>)
 8003af6:	0019      	movs	r1, r3
 8003af8:	2001      	movs	r0, #1
 8003afa:	f009 feb5 	bl	800d868 <CreateLine>
    }
    if (status & HAL_UART_ERROR_NE) {
 8003afe:	230f      	movs	r3, #15
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2202      	movs	r2, #2
 8003b06:	4013      	ands	r3, r2
 8003b08:	d005      	beq.n	8003b16 <ESP_Receive+0x76>
      Error("Noise error in UART to ESP module");
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <ESP_Receive+0x118>)
 8003b0c:	4b28      	ldr	r3, [pc, #160]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b0e:	0019      	movs	r1, r3
 8003b10:	2001      	movs	r0, #1
 8003b12:	f009 fea9 	bl	800d868 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b16:	230f      	movs	r3, #15
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d005      	beq.n	8003b2e <ESP_Receive+0x8e>
      Error("Frame error in UART to ESP module");
 8003b22:	4a26      	ldr	r2, [pc, #152]	@ (8003bbc <ESP_Receive+0x11c>)
 8003b24:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b26:	0019      	movs	r1, r3
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f009 fe9d 	bl	800d868 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b2e:	230f      	movs	r3, #15
 8003b30:	18fb      	adds	r3, r7, r3
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2208      	movs	r2, #8
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <ESP_Receive+0xa6>
      Error("Overrun error in UART to ESP module");
 8003b3a:	4a21      	ldr	r2, [pc, #132]	@ (8003bc0 <ESP_Receive+0x120>)
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b3e:	0019      	movs	r1, r3
 8003b40:	2001      	movs	r0, #1
 8003b42:	f009 fe91 	bl	800d868 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b46:	230f      	movs	r3, #15
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <ESP_Receive+0xbe>
      Error("DMA transfer error in UART to ESP module");
 8003b52:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc4 <ESP_Receive+0x124>)
 8003b54:	4b16      	ldr	r3, [pc, #88]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b56:	0019      	movs	r1, r3
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f009 fe85 	bl	800d868 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b5e:	230f      	movs	r3, #15
 8003b60:	18fb      	adds	r3, r7, r3
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d005      	beq.n	8003b76 <ESP_Receive+0xd6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <ESP_Receive+0x128>)
 8003b6c:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b6e:	0019      	movs	r1, r3
 8003b70:	2001      	movs	r0, #1
 8003b72:	f009 fe79 	bl	800d868 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b76:	230f      	movs	r3, #15
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d005      	beq.n	8003b8e <ESP_Receive+0xee>
      Error("Invalid Callback error in UART to ESP module");
 8003b82:	4a12      	ldr	r2, [pc, #72]	@ (8003bcc <ESP_Receive+0x12c>)
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <ESP_Receive+0x110>)
 8003b86:	0019      	movs	r1, r3
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f009 fe6d 	bl	800d868 <CreateLine>
    }
#endif
    RxComplete = true;
 8003b8e:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <ESP_Receive+0x104>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    return false;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <ESP_Receive+0xfa>
  }
  return true;
 8003b98:	2301      	movs	r3, #1
}
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	b004      	add	sp, #16
 8003ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000444 	.word	0x20000444
 8003ba8:	20000440 	.word	0x20000440
 8003bac:	080224e8 	.word	0x080224e8
 8003bb0:	080224e4 	.word	0x080224e4
 8003bb4:	08022518 	.word	0x08022518
 8003bb8:	0802253c 	.word	0x0802253c
 8003bbc:	08022560 	.word	0x08022560
 8003bc0:	08022584 	.word	0x08022584
 8003bc4:	080225a8 	.word	0x080225a8
 8003bc8:	080225d4 	.word	0x080225d4
 8003bcc:	08022604 	.word	0x08022604

08003bd0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <HAL_UART_ErrorCallback+0x34>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10c      	bne.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2284      	movs	r2, #132	@ 0x84
 8003be6:	589b      	ldr	r3, [r3, r2]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d007      	beq.n	8003bfc <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2284      	movs	r2, #132	@ 0x84
 8003bf0:	589b      	ldr	r3, [r3, r2]
 8003bf2:	4a05      	ldr	r2, [pc, #20]	@ (8003c08 <HAL_UART_ErrorCallback+0x38>)
 8003bf4:	4905      	ldr	r1, [pc, #20]	@ (8003c0c <HAL_UART_ErrorCallback+0x3c>)
 8003bf6:	2003      	movs	r0, #3
 8003bf8:	f009 fe36 	bl	800d868 <CreateLine>
    }
  }
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b002      	add	sp, #8
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000440 	.word	0x20000440
 8003c08:	08022634 	.word	0x08022634
 8003c0c:	080224c0 	.word	0x080224c0

08003c10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e010      	b.n	8003c42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	001a      	movs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	1898      	adds	r0, r3, r2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	18d3      	adds	r3, r2, r3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	001a      	movs	r2, r3
 8003c34:	4b07      	ldr	r3, [pc, #28]	@ (8003c54 <uint8ArrayToString+0x44>)
 8003c36:	0019      	movs	r1, r3
 8003c38:	f01b fb4a 	bl	801f2d0 <siprintf>
  for (int i = 0; i < 12; i++)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	ddeb      	ble.n	8003c20 <uint8ArrayToString+0x10>
  }
}
 8003c48:	46c0      	nop			@ (mov r8, r8)
 8003c4a:	46c0      	nop			@ (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	08022660 	.word	0x08022660

08003c58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b089      	sub	sp, #36	@ 0x24
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	0002      	movs	r2, r0
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003c64:	4be5      	ldr	r3, [pc, #916]	@ (8003ffc <CreateMessage+0x3a4>)
 8003c66:	48e6      	ldr	r0, [pc, #920]	@ (8004000 <CreateMessage+0x3a8>)
 8003c68:	220c      	movs	r2, #12
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	f7ff fd44 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003c70:	4be4      	ldr	r3, [pc, #912]	@ (8004004 <CreateMessage+0x3ac>)
 8003c72:	48e5      	ldr	r0, [pc, #916]	@ (8004008 <CreateMessage+0x3b0>)
 8003c74:	220c      	movs	r2, #12
 8003c76:	0019      	movs	r1, r3
 8003c78:	f7ff fd3e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003c7c:	4be3      	ldr	r3, [pc, #908]	@ (800400c <CreateMessage+0x3b4>)
 8003c7e:	48e4      	ldr	r0, [pc, #912]	@ (8004010 <CreateMessage+0x3b8>)
 8003c80:	220c      	movs	r2, #12
 8003c82:	0019      	movs	r1, r3
 8003c84:	f7ff fd38 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003c88:	4be2      	ldr	r3, [pc, #904]	@ (8004014 <CreateMessage+0x3bc>)
 8003c8a:	48e3      	ldr	r0, [pc, #908]	@ (8004018 <CreateMessage+0x3c0>)
 8003c8c:	220c      	movs	r2, #12
 8003c8e:	0019      	movs	r1, r3
 8003c90:	f7ff fd32 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003c94:	4be1      	ldr	r3, [pc, #900]	@ (800401c <CreateMessage+0x3c4>)
 8003c96:	48e2      	ldr	r0, [pc, #904]	@ (8004020 <CreateMessage+0x3c8>)
 8003c98:	220c      	movs	r2, #12
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	f7ff fd2c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003ca0:	4be0      	ldr	r3, [pc, #896]	@ (8004024 <CreateMessage+0x3cc>)
 8003ca2:	48e1      	ldr	r0, [pc, #900]	@ (8004028 <CreateMessage+0x3d0>)
 8003ca4:	220c      	movs	r2, #12
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	f7ff fd26 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003cac:	4bdf      	ldr	r3, [pc, #892]	@ (800402c <CreateMessage+0x3d4>)
 8003cae:	48e0      	ldr	r0, [pc, #896]	@ (8004030 <CreateMessage+0x3d8>)
 8003cb0:	220c      	movs	r2, #12
 8003cb2:	0019      	movs	r1, r3
 8003cb4:	f7ff fd20 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003cb8:	4bde      	ldr	r3, [pc, #888]	@ (8004034 <CreateMessage+0x3dc>)
 8003cba:	48df      	ldr	r0, [pc, #892]	@ (8004038 <CreateMessage+0x3e0>)
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	f7ff fd1a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003cc4:	f7ff fdd0 	bl	8003868 <checkName>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d006      	beq.n	8003cda <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003ccc:	4bdb      	ldr	r3, [pc, #876]	@ (800403c <CreateMessage+0x3e4>)
 8003cce:	48dc      	ldr	r0, [pc, #880]	@ (8004040 <CreateMessage+0x3e8>)
 8003cd0:	221e      	movs	r2, #30
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	f7ff fd10 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003cd8:	e005      	b.n	8003ce6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003cda:	4bd8      	ldr	r3, [pc, #864]	@ (800403c <CreateMessage+0x3e4>)
 8003cdc:	4ad9      	ldr	r2, [pc, #868]	@ (8004044 <CreateMessage+0x3ec>)
 8003cde:	6811      	ldr	r1, [r2, #0]
 8003ce0:	6019      	str	r1, [r3, #0]
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003ce6:	f7ff fd75 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	00da      	lsls	r2, r3, #3
 8003cee:	4bd6      	ldr	r3, [pc, #856]	@ (8004048 <CreateMessage+0x3f0>)
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f01b fc30 	bl	801f558 <memset>
  uint16_t index = 0;
 8003cf8:	260e      	movs	r6, #14
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003d00:	19bb      	adds	r3, r7, r6
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	4bd0      	ldr	r3, [pc, #832]	@ (8004048 <CreateMessage+0x3f0>)
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	4ad0      	ldr	r2, [pc, #832]	@ (800404c <CreateMessage+0x3f4>)
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f01b fadf 	bl	801f2d0 <siprintf>
  index = strlen(message);
 8003d12:	4bcd      	ldr	r3, [pc, #820]	@ (8004048 <CreateMessage+0x3f0>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fc fa29 	bl	800016c <strlen>
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003d20:	4ab6      	ldr	r2, [pc, #728]	@ (8003ffc <CreateMessage+0x3a4>)
 8003d22:	4bcb      	ldr	r3, [pc, #812]	@ (8004050 <CreateMessage+0x3f8>)
 8003d24:	0011      	movs	r1, r2
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff ff72 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003d2c:	19bb      	adds	r3, r7, r6
 8003d2e:	881a      	ldrh	r2, [r3, #0]
 8003d30:	4bc5      	ldr	r3, [pc, #788]	@ (8004048 <CreateMessage+0x3f0>)
 8003d32:	18d4      	adds	r4, r2, r3
 8003d34:	4bc7      	ldr	r3, [pc, #796]	@ (8004054 <CreateMessage+0x3fc>)
 8003d36:	689d      	ldr	r5, [r3, #8]
 8003d38:	4bc7      	ldr	r3, [pc, #796]	@ (8004058 <CreateMessage+0x400>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	1c18      	adds	r0, r3, #0
 8003d3e:	f7ff fb91 	bl	8003464 <__aeabi_f2d>
 8003d42:	0002      	movs	r2, r0
 8003d44:	000b      	movs	r3, r1
 8003d46:	48bd      	ldr	r0, [pc, #756]	@ (800403c <CreateMessage+0x3e4>)
 8003d48:	49c4      	ldr	r1, [pc, #784]	@ (800405c <CreateMessage+0x404>)
 8003d4a:	9202      	str	r2, [sp, #8]
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	4bc0      	ldr	r3, [pc, #768]	@ (8004050 <CreateMessage+0x3f8>)
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0003      	movs	r3, r0
 8003d54:	002a      	movs	r2, r5
 8003d56:	0020      	movs	r0, r4
 8003d58:	f01b faba 	bl	801f2d0 <siprintf>
  index = strlen(message);
 8003d5c:	4bba      	ldr	r3, [pc, #744]	@ (8004048 <CreateMessage+0x3f0>)
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc fa04 	bl	800016c <strlen>
 8003d64:	0002      	movs	r2, r0
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003d6a:	4aa6      	ldr	r2, [pc, #664]	@ (8004004 <CreateMessage+0x3ac>)
 8003d6c:	4bb8      	ldr	r3, [pc, #736]	@ (8004050 <CreateMessage+0x3f8>)
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff ff4d 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003d76:	19bb      	adds	r3, r7, r6
 8003d78:	881a      	ldrh	r2, [r3, #0]
 8003d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8004048 <CreateMessage+0x3f0>)
 8003d7c:	18d4      	adds	r4, r2, r3
 8003d7e:	4bb5      	ldr	r3, [pc, #724]	@ (8004054 <CreateMessage+0x3fc>)
 8003d80:	689d      	ldr	r5, [r3, #8]
 8003d82:	4bb7      	ldr	r3, [pc, #732]	@ (8004060 <CreateMessage+0x408>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	1c18      	adds	r0, r3, #0
 8003d88:	f7ff fb6c 	bl	8003464 <__aeabi_f2d>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	000b      	movs	r3, r1
 8003d90:	48aa      	ldr	r0, [pc, #680]	@ (800403c <CreateMessage+0x3e4>)
 8003d92:	49b4      	ldr	r1, [pc, #720]	@ (8004064 <CreateMessage+0x40c>)
 8003d94:	9202      	str	r2, [sp, #8]
 8003d96:	9303      	str	r3, [sp, #12]
 8003d98:	4bad      	ldr	r3, [pc, #692]	@ (8004050 <CreateMessage+0x3f8>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	002a      	movs	r2, r5
 8003da0:	0020      	movs	r0, r4
 8003da2:	f01b fa95 	bl	801f2d0 <siprintf>
  index = strlen(message);
 8003da6:	4ba8      	ldr	r3, [pc, #672]	@ (8004048 <CreateMessage+0x3f0>)
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fc f9df 	bl	800016c <strlen>
 8003dae:	0002      	movs	r2, r0
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003db4:	4a95      	ldr	r2, [pc, #596]	@ (800400c <CreateMessage+0x3b4>)
 8003db6:	4ba6      	ldr	r3, [pc, #664]	@ (8004050 <CreateMessage+0x3f8>)
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff ff28 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003dc0:	19bb      	adds	r3, r7, r6
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8004048 <CreateMessage+0x3f0>)
 8003dc6:	18d4      	adds	r4, r2, r3
 8003dc8:	4ba2      	ldr	r3, [pc, #648]	@ (8004054 <CreateMessage+0x3fc>)
 8003dca:	689d      	ldr	r5, [r3, #8]
 8003dcc:	4ba6      	ldr	r3, [pc, #664]	@ (8004068 <CreateMessage+0x410>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c18      	adds	r0, r3, #0
 8003dd2:	f7ff fb47 	bl	8003464 <__aeabi_f2d>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	000b      	movs	r3, r1
 8003dda:	4898      	ldr	r0, [pc, #608]	@ (800403c <CreateMessage+0x3e4>)
 8003ddc:	49a3      	ldr	r1, [pc, #652]	@ (800406c <CreateMessage+0x414>)
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9303      	str	r3, [sp, #12]
 8003de2:	4b9b      	ldr	r3, [pc, #620]	@ (8004050 <CreateMessage+0x3f8>)
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	0003      	movs	r3, r0
 8003de8:	002a      	movs	r2, r5
 8003dea:	0020      	movs	r0, r4
 8003dec:	f01b fa70 	bl	801f2d0 <siprintf>
  index = strlen(message);
 8003df0:	4b95      	ldr	r3, [pc, #596]	@ (8004048 <CreateMessage+0x3f0>)
 8003df2:	0018      	movs	r0, r3
 8003df4:	f7fc f9ba 	bl	800016c <strlen>
 8003df8:	0002      	movs	r2, r0
 8003dfa:	19bb      	adds	r3, r7, r6
 8003dfc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003dfe:	4a85      	ldr	r2, [pc, #532]	@ (8004014 <CreateMessage+0x3bc>)
 8003e00:	4b93      	ldr	r3, [pc, #588]	@ (8004050 <CreateMessage+0x3f8>)
 8003e02:	0011      	movs	r1, r2
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff ff03 	bl	8003c10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003e0a:	19bb      	adds	r3, r7, r6
 8003e0c:	881a      	ldrh	r2, [r3, #0]
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004048 <CreateMessage+0x3f0>)
 8003e10:	18d0      	adds	r0, r2, r3
 8003e12:	4b90      	ldr	r3, [pc, #576]	@ (8004054 <CreateMessage+0x3fc>)
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	4b96      	ldr	r3, [pc, #600]	@ (8004070 <CreateMessage+0x418>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	4c88      	ldr	r4, [pc, #544]	@ (800403c <CreateMessage+0x3e4>)
 8003e1c:	4995      	ldr	r1, [pc, #596]	@ (8004074 <CreateMessage+0x41c>)
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	4b8b      	ldr	r3, [pc, #556]	@ (8004050 <CreateMessage+0x3f8>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	0023      	movs	r3, r4
 8003e26:	f01b fa53 	bl	801f2d0 <siprintf>
  index = strlen(message);
 8003e2a:	4b87      	ldr	r3, [pc, #540]	@ (8004048 <CreateMessage+0x3f0>)
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f99d 	bl	800016c <strlen>
 8003e32:	0002      	movs	r2, r0
 8003e34:	19bb      	adds	r3, r7, r6
 8003e36:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4053      	eors	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <CreateMessage+0x1f0>
 8003e46:	e094      	b.n	8003f72 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003e48:	4a74      	ldr	r2, [pc, #464]	@ (800401c <CreateMessage+0x3c4>)
 8003e4a:	4b81      	ldr	r3, [pc, #516]	@ (8004050 <CreateMessage+0x3f8>)
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f7ff fede 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e54:	19bb      	adds	r3, r7, r6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	4b7b      	ldr	r3, [pc, #492]	@ (8004048 <CreateMessage+0x3f0>)
 8003e5a:	18d4      	adds	r4, r2, r3
 8003e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8004054 <CreateMessage+0x3fc>)
 8003e5e:	689d      	ldr	r5, [r3, #8]
 8003e60:	4b85      	ldr	r3, [pc, #532]	@ (8004078 <CreateMessage+0x420>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	1c18      	adds	r0, r3, #0
 8003e66:	f7ff fafd 	bl	8003464 <__aeabi_f2d>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	000b      	movs	r3, r1
 8003e6e:	4873      	ldr	r0, [pc, #460]	@ (800403c <CreateMessage+0x3e4>)
 8003e70:	4982      	ldr	r1, [pc, #520]	@ (800407c <CreateMessage+0x424>)
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	9303      	str	r3, [sp, #12]
 8003e76:	4b76      	ldr	r3, [pc, #472]	@ (8004050 <CreateMessage+0x3f8>)
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	002a      	movs	r2, r5
 8003e7e:	0020      	movs	r0, r4
 8003e80:	f01b fa26 	bl	801f2d0 <siprintf>
    index = strlen(message);
 8003e84:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <CreateMessage+0x3f0>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7fc f970 	bl	800016c <strlen>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	19bb      	adds	r3, r7, r6
 8003e90:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003e92:	4a64      	ldr	r2, [pc, #400]	@ (8004024 <CreateMessage+0x3cc>)
 8003e94:	4b6e      	ldr	r3, [pc, #440]	@ (8004050 <CreateMessage+0x3f8>)
 8003e96:	0011      	movs	r1, r2
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff feb9 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003e9e:	19bb      	adds	r3, r7, r6
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	4b69      	ldr	r3, [pc, #420]	@ (8004048 <CreateMessage+0x3f0>)
 8003ea4:	18d4      	adds	r4, r2, r3
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	@ (8004054 <CreateMessage+0x3fc>)
 8003ea8:	689d      	ldr	r5, [r3, #8]
 8003eaa:	4b75      	ldr	r3, [pc, #468]	@ (8004080 <CreateMessage+0x428>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7ff fad8 	bl	8003464 <__aeabi_f2d>
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	000b      	movs	r3, r1
 8003eb8:	4860      	ldr	r0, [pc, #384]	@ (800403c <CreateMessage+0x3e4>)
 8003eba:	4972      	ldr	r1, [pc, #456]	@ (8004084 <CreateMessage+0x42c>)
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <CreateMessage+0x3f8>)
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	002a      	movs	r2, r5
 8003ec8:	0020      	movs	r0, r4
 8003eca:	f01b fa01 	bl	801f2d0 <siprintf>
    index = strlen(message);
 8003ece:	4b5e      	ldr	r3, [pc, #376]	@ (8004048 <CreateMessage+0x3f0>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7fc f94b 	bl	800016c <strlen>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003edc:	4a53      	ldr	r2, [pc, #332]	@ (800402c <CreateMessage+0x3d4>)
 8003ede:	4b5c      	ldr	r3, [pc, #368]	@ (8004050 <CreateMessage+0x3f8>)
 8003ee0:	0011      	movs	r1, r2
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f7ff fe94 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003ee8:	19bb      	adds	r3, r7, r6
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <CreateMessage+0x3f0>)
 8003eee:	18d4      	adds	r4, r2, r3
 8003ef0:	4b58      	ldr	r3, [pc, #352]	@ (8004054 <CreateMessage+0x3fc>)
 8003ef2:	689d      	ldr	r5, [r3, #8]
 8003ef4:	4b64      	ldr	r3, [pc, #400]	@ (8004088 <CreateMessage+0x430>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	f7ff fab3 	bl	8003464 <__aeabi_f2d>
 8003efe:	0002      	movs	r2, r0
 8003f00:	000b      	movs	r3, r1
 8003f02:	484e      	ldr	r0, [pc, #312]	@ (800403c <CreateMessage+0x3e4>)
 8003f04:	4961      	ldr	r1, [pc, #388]	@ (800408c <CreateMessage+0x434>)
 8003f06:	9202      	str	r2, [sp, #8]
 8003f08:	9303      	str	r3, [sp, #12]
 8003f0a:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <CreateMessage+0x3f8>)
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	0003      	movs	r3, r0
 8003f10:	002a      	movs	r2, r5
 8003f12:	0020      	movs	r0, r4
 8003f14:	f01b f9dc 	bl	801f2d0 <siprintf>
    index = strlen(message);
 8003f18:	4b4b      	ldr	r3, [pc, #300]	@ (8004048 <CreateMessage+0x3f0>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fc f926 	bl	800016c <strlen>
 8003f20:	0002      	movs	r2, r0
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003f26:	4a43      	ldr	r2, [pc, #268]	@ (8004034 <CreateMessage+0x3dc>)
 8003f28:	4b49      	ldr	r3, [pc, #292]	@ (8004050 <CreateMessage+0x3f8>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff fe6f 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003f32:	19bb      	adds	r3, r7, r6
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <CreateMessage+0x3f0>)
 8003f38:	18d4      	adds	r4, r2, r3
 8003f3a:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <CreateMessage+0x3fc>)
 8003f3c:	689d      	ldr	r5, [r3, #8]
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <CreateMessage+0x438>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	1c18      	adds	r0, r3, #0
 8003f44:	f7ff fa8e 	bl	8003464 <__aeabi_f2d>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	483b      	ldr	r0, [pc, #236]	@ (800403c <CreateMessage+0x3e4>)
 8003f4e:	4951      	ldr	r1, [pc, #324]	@ (8004094 <CreateMessage+0x43c>)
 8003f50:	9202      	str	r2, [sp, #8]
 8003f52:	9303      	str	r3, [sp, #12]
 8003f54:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <CreateMessage+0x3f8>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	0003      	movs	r3, r0
 8003f5a:	002a      	movs	r2, r5
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f01b f9b7 	bl	801f2d0 <siprintf>
    index = strlen(message);
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <CreateMessage+0x3f0>)
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fc f901 	bl	800016c <strlen>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	19bb      	adds	r3, r7, r6
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e025      	b.n	8003fbe <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003f72:	4a2a      	ldr	r2, [pc, #168]	@ (800401c <CreateMessage+0x3c4>)
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <CreateMessage+0x3f8>)
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fe49 	bl	8003c10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f7e:	260e      	movs	r6, #14
 8003f80:	19bb      	adds	r3, r7, r6
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <CreateMessage+0x3f0>)
 8003f86:	18d4      	adds	r4, r2, r3
 8003f88:	4b32      	ldr	r3, [pc, #200]	@ (8004054 <CreateMessage+0x3fc>)
 8003f8a:	689d      	ldr	r5, [r3, #8]
 8003f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <CreateMessage+0x420>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	1c18      	adds	r0, r3, #0
 8003f92:	f7ff fa67 	bl	8003464 <__aeabi_f2d>
 8003f96:	0002      	movs	r2, r0
 8003f98:	000b      	movs	r3, r1
 8003f9a:	4828      	ldr	r0, [pc, #160]	@ (800403c <CreateMessage+0x3e4>)
 8003f9c:	493e      	ldr	r1, [pc, #248]	@ (8004098 <CreateMessage+0x440>)
 8003f9e:	9202      	str	r2, [sp, #8]
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004050 <CreateMessage+0x3f8>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	002a      	movs	r2, r5
 8003faa:	0020      	movs	r0, r4
 8003fac:	f01b f990 	bl	801f2d0 <siprintf>
    index = strlen(message);
 8003fb0:	4b25      	ldr	r3, [pc, #148]	@ (8004048 <CreateMessage+0x3f0>)
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f7fc f8da 	bl	800016c <strlen>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	19bb      	adds	r3, r7, r6
 8003fbc:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003fbe:	240e      	movs	r4, #14
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	4a35      	ldr	r2, [pc, #212]	@ (800409c <CreateMessage+0x444>)
 8003fc6:	4936      	ldr	r1, [pc, #216]	@ (80040a0 <CreateMessage+0x448>)
 8003fc8:	2003      	movs	r0, #3
 8003fca:	f009 fc4d 	bl	800d868 <CreateLine>
  index = sprintf(&message[index], "]");
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004048 <CreateMessage+0x3f0>)
 8003fd4:	18d3      	adds	r3, r2, r3
 8003fd6:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <CreateMessage+0x44c>)
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f01b f978 	bl	801f2d0 <siprintf>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	193b      	adds	r3, r7, r4
 8003fe4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003fe6:	4b18      	ldr	r3, [pc, #96]	@ (8004048 <CreateMessage+0x3f0>)
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fc f8bf 	bl	800016c <strlen>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	b29b      	uxth	r3, r3
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b005      	add	sp, #20
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	200009e4 	.word	0x200009e4
 8004000:	0808000c 	.word	0x0808000c
 8004004:	200009f0 	.word	0x200009f0
 8004008:	08080018 	.word	0x08080018
 800400c:	200009fc 	.word	0x200009fc
 8004010:	08080048 	.word	0x08080048
 8004014:	20000a08 	.word	0x20000a08
 8004018:	08080030 	.word	0x08080030
 800401c:	20000a14 	.word	0x20000a14
 8004020:	0808006c 	.word	0x0808006c
 8004024:	20000a20 	.word	0x20000a20
 8004028:	08080078 	.word	0x08080078
 800402c:	20000a2c 	.word	0x20000a2c
 8004030:	08080054 	.word	0x08080054
 8004034:	20000a38 	.word	0x20000a38
 8004038:	08080060 	.word	0x08080060
 800403c:	20000a44 	.word	0x20000a44
 8004040:	08080090 	.word	0x08080090
 8004044:	0802428c 	.word	0x0802428c
 8004048:	20000584 	.word	0x20000584
 800404c:	08022668 	.word	0x08022668
 8004050:	20000a64 	.word	0x20000a64
 8004054:	20000550 	.word	0x20000550
 8004058:	20000564 	.word	0x20000564
 800405c:	0802266c 	.word	0x0802266c
 8004060:	20000568 	.word	0x20000568
 8004064:	080226c0 	.word	0x080226c0
 8004068:	20000578 	.word	0x20000578
 800406c:	08022718 	.word	0x08022718
 8004070:	20000574 	.word	0x20000574
 8004074:	08022774 	.word	0x08022774
 8004078:	2000056c 	.word	0x2000056c
 800407c:	080227c8 	.word	0x080227c8
 8004080:	20000570 	.word	0x20000570
 8004084:	08022828 	.word	0x08022828
 8004088:	2000057c 	.word	0x2000057c
 800408c:	08022888 	.word	0x08022888
 8004090:	20000580 	.word	0x20000580
 8004094:	080228e4 	.word	0x080228e4
 8004098:	0802293c 	.word	0x0802293c
 800409c:	08022994 	.word	0x08022994
 80040a0:	080224c0 	.word	0x080224c0
 80040a4:	080229ac 	.word	0x080229ac

080040a8 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 80040ac:	2064      	movs	r0, #100	@ 0x64
 80040ae:	f00a f831 	bl	800e114 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <StartProg+0x60>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	2101      	movs	r1, #1
 80040b8:	0018      	movs	r0, r3
 80040ba:	f00b fa9c 	bl	800f5f6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80040be:	2064      	movs	r0, #100	@ 0x64
 80040c0:	f00a f828 	bl	800e114 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <StartProg+0x60>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	2102      	movs	r1, #2
 80040ca:	0018      	movs	r0, r3
 80040cc:	f00b fa93 	bl	800f5f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040d0:	23fa      	movs	r3, #250	@ 0xfa
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	0018      	movs	r0, r3
 80040d6:	f00a f81d 	bl	800e114 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80040da:	4b0b      	ldr	r3, [pc, #44]	@ (8004108 <StartProg+0x60>)
 80040dc:	2201      	movs	r2, #1
 80040de:	2101      	movs	r1, #1
 80040e0:	0018      	movs	r0, r3
 80040e2:	f00b fa88 	bl	800f5f6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040e6:	23fa      	movs	r3, #250	@ 0xfa
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	0018      	movs	r0, r3
 80040ec:	f00a f812 	bl	800e114 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <StartProg+0x60>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	2102      	movs	r1, #2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f00b fa7d 	bl	800f5f6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80040fc:	2028      	movs	r0, #40	@ 0x28
 80040fe:	f00a f809 	bl	800e114 <HAL_Delay>
}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	50001c00 	.word	0x50001c00

0800410c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	b0d9      	sub	sp, #356	@ 0x164
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	4ba1      	ldr	r3, [pc, #644]	@ (80043a0 <ParseBuffer+0x294>)
 800411a:	24b0      	movs	r4, #176	@ 0xb0
 800411c:	0064      	lsls	r4, r4, #1
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	801a      	strh	r2, [r3, #0]
 8004126:	4b9f      	ldr	r3, [pc, #636]	@ (80043a4 <ParseBuffer+0x298>)
 8004128:	191b      	adds	r3, r3, r4
 800412a:	19db      	adds	r3, r3, r7
 800412c:	1c0a      	adds	r2, r1, #0
 800412e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004130:	2380      	movs	r3, #128	@ 0x80
 8004132:	005a      	lsls	r2, r3, #1
 8004134:	2348      	movs	r3, #72	@ 0x48
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	2100      	movs	r1, #0
 800413a:	0018      	movs	r0, r3
 800413c:	f01b fa0c 	bl	801f558 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004140:	2360      	movs	r3, #96	@ 0x60
 8004142:	33ff      	adds	r3, #255	@ 0xff
 8004144:	18fb      	adds	r3, r7, r3
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800414a:	23ae      	movs	r3, #174	@ 0xae
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	18fb      	adds	r3, r7, r3
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e013      	b.n	800417e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004156:	20ae      	movs	r0, #174	@ 0xae
 8004158:	0040      	lsls	r0, r0, #1
 800415a:	183b      	adds	r3, r7, r0
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	18d2      	adds	r2, r2, r3
 8004162:	183b      	adds	r3, r7, r0
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	7811      	ldrb	r1, [r2, #0]
 8004168:	4a8f      	ldr	r2, [pc, #572]	@ (80043a8 <ParseBuffer+0x29c>)
 800416a:	24b0      	movs	r4, #176	@ 0xb0
 800416c:	0064      	lsls	r4, r4, #1
 800416e:	1912      	adds	r2, r2, r4
 8004170:	19d2      	adds	r2, r2, r7
 8004172:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004174:	183b      	adds	r3, r7, r0
 8004176:	881a      	ldrh	r2, [r3, #0]
 8004178:	183b      	adds	r3, r7, r0
 800417a:	3201      	adds	r2, #1
 800417c:	801a      	strh	r2, [r3, #0]
 800417e:	23ae      	movs	r3, #174	@ 0xae
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	18fa      	adds	r2, r7, r3
 8004184:	4b86      	ldr	r3, [pc, #536]	@ (80043a0 <ParseBuffer+0x294>)
 8004186:	24b0      	movs	r4, #176	@ 0xb0
 8004188:	0064      	lsls	r4, r4, #1
 800418a:	191b      	adds	r3, r3, r4
 800418c:	19db      	adds	r3, r3, r7
 800418e:	8812      	ldrh	r2, [r2, #0]
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d3df      	bcc.n	8004156 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004196:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <ParseBuffer+0x294>)
 8004198:	191b      	adds	r3, r3, r4
 800419a:	19db      	adds	r3, r3, r7
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	@ (80043a8 <ParseBuffer+0x29c>)
 80041a0:	1912      	adds	r2, r2, r4
 80041a2:	19d2      	adds	r2, r2, r7
 80041a4:	2100      	movs	r1, #0
 80041a6:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80041a8:	2648      	movs	r6, #72	@ 0x48
 80041aa:	19bb      	adds	r3, r7, r6
 80041ac:	4a7f      	ldr	r2, [pc, #508]	@ (80043ac <ParseBuffer+0x2a0>)
 80041ae:	4980      	ldr	r1, [pc, #512]	@ (80043b0 <ParseBuffer+0x2a4>)
 80041b0:	2003      	movs	r0, #3
 80041b2:	f009 fb59 	bl	800d868 <CreateLine>
#endif
  char * ParsePoint = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	22ac      	movs	r2, #172	@ 0xac
 80041ba:	0052      	lsls	r2, r2, #1
 80041bc:	18b9      	adds	r1, r7, r2
 80041be:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80041c0:	4b7c      	ldr	r3, [pc, #496]	@ (80043b4 <ParseBuffer+0x2a8>)
 80041c2:	0025      	movs	r5, r4
 80041c4:	195b      	adds	r3, r3, r5
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	4a7b      	ldr	r2, [pc, #492]	@ (80043b8 <ParseBuffer+0x2ac>)
 80041ca:	8811      	ldrh	r1, [r2, #0]
 80041cc:	8019      	strh	r1, [r3, #0]
 80041ce:	7892      	ldrb	r2, [r2, #2]
 80041d0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80041d2:	4b7a      	ldr	r3, [pc, #488]	@ (80043bc <ParseBuffer+0x2b0>)
 80041d4:	195b      	adds	r3, r3, r5
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	4a79      	ldr	r2, [pc, #484]	@ (80043c0 <ParseBuffer+0x2b4>)
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	8892      	ldrh	r2, [r2, #4]
 80041e0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80041e2:	4b78      	ldr	r3, [pc, #480]	@ (80043c4 <ParseBuffer+0x2b8>)
 80041e4:	195b      	adds	r3, r3, r5
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	4a77      	ldr	r2, [pc, #476]	@ (80043c8 <ParseBuffer+0x2bc>)
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	7912      	ldrb	r2, [r2, #4]
 80041f0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80041f2:	4b76      	ldr	r3, [pc, #472]	@ (80043cc <ParseBuffer+0x2c0>)
 80041f4:	195b      	adds	r3, r3, r5
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	4a75      	ldr	r2, [pc, #468]	@ (80043d0 <ParseBuffer+0x2c4>)
 80041fa:	6811      	ldr	r1, [r2, #0]
 80041fc:	6019      	str	r1, [r3, #0]
 80041fe:	8892      	ldrh	r2, [r2, #4]
 8004200:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004202:	4b74      	ldr	r3, [pc, #464]	@ (80043d4 <ParseBuffer+0x2c8>)
 8004204:	195b      	adds	r3, r3, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	223e      	movs	r2, #62	@ 0x3e
 800420a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800420c:	4b72      	ldr	r3, [pc, #456]	@ (80043d8 <ParseBuffer+0x2cc>)
 800420e:	195b      	adds	r3, r3, r5
 8004210:	19db      	adds	r3, r3, r7
 8004212:	4a72      	ldr	r2, [pc, #456]	@ (80043dc <ParseBuffer+0x2d0>)
 8004214:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004216:	c313      	stmia	r3!, {r0, r1, r4}
 8004218:	8811      	ldrh	r1, [r2, #0]
 800421a:	8019      	strh	r1, [r3, #0]
 800421c:	7892      	ldrb	r2, [r2, #2]
 800421e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <ParseBuffer+0x2d4>)
 8004222:	195b      	adds	r3, r3, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	4a6f      	ldr	r2, [pc, #444]	@ (80043e4 <ParseBuffer+0x2d8>)
 8004228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800422a:	c313      	stmia	r3!, {r0, r1, r4}
 800422c:	8812      	ldrh	r2, [r2, #0]
 800422e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004230:	4b5c      	ldr	r3, [pc, #368]	@ (80043a4 <ParseBuffer+0x298>)
 8004232:	195b      	adds	r3, r3, r5
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800423c:	2344      	movs	r3, #68	@ 0x44
 800423e:	18fa      	adds	r2, r7, r3
 8004240:	19bb      	adds	r3, r7, r6
 8004242:	0011      	movs	r1, r2
 8004244:	0018      	movs	r0, r3
 8004246:	f01b f9c2 	bl	801f5ce <strstr>
 800424a:	0003      	movs	r3, r0
 800424c:	22ac      	movs	r2, #172	@ 0xac
 800424e:	0052      	lsls	r2, r2, #1
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004254:	4b53      	ldr	r3, [pc, #332]	@ (80043a4 <ParseBuffer+0x298>)
 8004256:	22b0      	movs	r2, #176	@ 0xb0
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	189b      	adds	r3, r3, r2
 800425c:	19db      	adds	r3, r3, r7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004264:	232c      	movs	r3, #44	@ 0x2c
 8004266:	18fa      	adds	r2, r7, r3
 8004268:	2348      	movs	r3, #72	@ 0x48
 800426a:	18fb      	adds	r3, r7, r3
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f01b f9ad 	bl	801f5ce <strstr>
 8004274:	0003      	movs	r3, r0
 8004276:	22ac      	movs	r2, #172	@ 0xac
 8004278:	0052      	lsls	r2, r2, #1
 800427a:	18ba      	adds	r2, r7, r2
 800427c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <ParseBuffer+0x298>)
 8004280:	22b0      	movs	r2, #176	@ 0xb0
 8004282:	0052      	lsls	r2, r2, #1
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10c      	bne.n	80042a8 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800428e:	2328      	movs	r3, #40	@ 0x28
 8004290:	18fa      	adds	r2, r7, r3
 8004292:	2348      	movs	r3, #72	@ 0x48
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f01b f998 	bl	801f5ce <strstr>
 800429e:	0003      	movs	r3, r0
 80042a0:	22ac      	movs	r2, #172	@ 0xac
 80042a2:	0052      	lsls	r2, r2, #1
 80042a4:	18ba      	adds	r2, r7, r2
 80042a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80042a8:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <ParseBuffer+0x298>)
 80042aa:	22b0      	movs	r2, #176	@ 0xb0
 80042ac:	0052      	lsls	r2, r2, #1
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d10c      	bne.n	80042d2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80042b8:	2308      	movs	r3, #8
 80042ba:	18fa      	adds	r2, r7, r3
 80042bc:	2348      	movs	r3, #72	@ 0x48
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f01b f983 	bl	801f5ce <strstr>
 80042c8:	0003      	movs	r3, r0
 80042ca:	22ac      	movs	r2, #172	@ 0xac
 80042cc:	0052      	lsls	r2, r2, #1
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80042d2:	233c      	movs	r3, #60	@ 0x3c
 80042d4:	18fa      	adds	r2, r7, r3
 80042d6:	2448      	movs	r4, #72	@ 0x48
 80042d8:	193b      	adds	r3, r7, r4
 80042da:	0011      	movs	r1, r2
 80042dc:	0018      	movs	r0, r3
 80042de:	f01b f976 	bl	801f5ce <strstr>
 80042e2:	0003      	movs	r3, r0
 80042e4:	22aa      	movs	r2, #170	@ 0xaa
 80042e6:	0052      	lsls	r2, r2, #1
 80042e8:	18ba      	adds	r2, r7, r2
 80042ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80042ec:	2318      	movs	r3, #24
 80042ee:	18fa      	adds	r2, r7, r3
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f01b f96a 	bl	801f5ce <strstr>
 80042fa:	0003      	movs	r3, r0
 80042fc:	22a8      	movs	r2, #168	@ 0xa8
 80042fe:	0052      	lsls	r2, r2, #1
 8004300:	18ba      	adds	r2, r7, r2
 8004302:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <ParseBuffer+0x2dc>)
 8004306:	193b      	adds	r3, r7, r4
 8004308:	0011      	movs	r1, r2
 800430a:	0018      	movs	r0, r3
 800430c:	f01b f95f 	bl	801f5ce <strstr>
 8004310:	0003      	movs	r3, r0
 8004312:	22a6      	movs	r2, #166	@ 0xa6
 8004314:	0052      	lsls	r2, r2, #1
 8004316:	18ba      	adds	r2, r7, r2
 8004318:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800431a:	2334      	movs	r3, #52	@ 0x34
 800431c:	18fa      	adds	r2, r7, r3
 800431e:	193b      	adds	r3, r7, r4
 8004320:	0011      	movs	r1, r2
 8004322:	0018      	movs	r0, r3
 8004324:	f01b f953 	bl	801f5ce <strstr>
 8004328:	0003      	movs	r3, r0
 800432a:	22a4      	movs	r2, #164	@ 0xa4
 800432c:	0052      	lsls	r2, r2, #1
 800432e:	18ba      	adds	r2, r7, r2
 8004330:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004332:	4b1b      	ldr	r3, [pc, #108]	@ (80043a0 <ParseBuffer+0x294>)
 8004334:	21b0      	movs	r1, #176	@ 0xb0
 8004336:	0049      	lsls	r1, r1, #1
 8004338:	185b      	adds	r3, r3, r1
 800433a:	19db      	adds	r3, r3, r7
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d800      	bhi.n	8004344 <ParseBuffer+0x238>
 8004342:	e0c0      	b.n	80044c6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d053      	beq.n	80043f8 <ParseBuffer+0x2ec>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b4f      	cmp	r3, #79	@ 0x4f
 8004358:	d14e      	bne.n	80043f8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004364:	4b21      	ldr	r3, [pc, #132]	@ (80043ec <ParseBuffer+0x2e0>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b12      	cmp	r3, #18
 800436a:	d145      	bne.n	80043f8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <ParseBuffer+0x294>)
 800436e:	185b      	adds	r3, r3, r1
 8004370:	19db      	adds	r3, r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	2b2b      	cmp	r3, #43	@ 0x2b
 8004376:	d10b      	bne.n	8004390 <ParseBuffer+0x284>
 8004378:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <ParseBuffer+0x29c>)
 800437a:	185b      	adds	r3, r3, r1
 800437c:	19db      	adds	r3, r3, r7
 800437e:	2221      	movs	r2, #33	@ 0x21
 8004380:	5c9b      	ldrb	r3, [r3, r2]
 8004382:	2b32      	cmp	r3, #50	@ 0x32
 8004384:	d104      	bne.n	8004390 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004386:	193b      	adds	r3, r7, r4
 8004388:	0018      	movs	r0, r3
 800438a:	f002 f8d1 	bl	8006530 <ParseTime>
 800438e:	e033      	b.n	80043f8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <ParseBuffer+0x2e4>)
 8004392:	4b18      	ldr	r3, [pc, #96]	@ (80043f4 <ParseBuffer+0x2e8>)
 8004394:	0019      	movs	r1, r3
 8004396:	2001      	movs	r0, #1
 8004398:	f009 fa66 	bl	800d868 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800439c:	2306      	movs	r3, #6
 800439e:	e096      	b.n	80044ce <ParseBuffer+0x3c2>
 80043a0:	fffffea2 	.word	0xfffffea2
 80043a4:	fffffea1 	.word	0xfffffea1
 80043a8:	fffffee8 	.word	0xfffffee8
 80043ac:	080229b0 	.word	0x080229b0
 80043b0:	080224c0 	.word	0x080224c0
 80043b4:	fffffee4 	.word	0xfffffee4
 80043b8:	080229dc 	.word	0x080229dc
 80043bc:	fffffedc 	.word	0xfffffedc
 80043c0:	080229e0 	.word	0x080229e0
 80043c4:	fffffed4 	.word	0xfffffed4
 80043c8:	080229e8 	.word	0x080229e8
 80043cc:	fffffecc 	.word	0xfffffecc
 80043d0:	080229f0 	.word	0x080229f0
 80043d4:	fffffec8 	.word	0xfffffec8
 80043d8:	fffffeb8 	.word	0xfffffeb8
 80043dc:	080229f8 	.word	0x080229f8
 80043e0:	fffffea8 	.word	0xfffffea8
 80043e4:	08022a08 	.word	0x08022a08
 80043e8:	0802426c 	.word	0x0802426c
 80043ec:	200009a2 	.word	0x200009a2
 80043f0:	080229c8 	.word	0x080229c8
 80043f4:	080224e4 	.word	0x080224e4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80043f8:	22ac      	movs	r2, #172	@ 0xac
 80043fa:	0052      	lsls	r2, r2, #1
 80043fc:	18bb      	adds	r3, r7, r2
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <ParseBuffer+0x30c>
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b72      	cmp	r3, #114	@ 0x72
 800440c:	d104      	bne.n	8004418 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800440e:	2360      	movs	r3, #96	@ 0x60
 8004410:	33ff      	adds	r3, #255	@ 0xff
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004418:	22ac      	movs	r2, #172	@ 0xac
 800441a:	0052      	lsls	r2, r2, #1
 800441c:	18bb      	adds	r3, r7, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d009      	beq.n	8004438 <ParseBuffer+0x32c>
 8004424:	18bb      	adds	r3, r7, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b3e      	cmp	r3, #62	@ 0x3e
 800442c:	d104      	bne.n	8004438 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800442e:	2360      	movs	r3, #96	@ 0x60
 8004430:	33ff      	adds	r3, #255	@ 0xff
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	2205      	movs	r2, #5
 8004436:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004438:	22ac      	movs	r2, #172	@ 0xac
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	18bb      	adds	r3, r7, r2
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d009      	beq.n	8004458 <ParseBuffer+0x34c>
 8004444:	18bb      	adds	r3, r7, r2
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b2b      	cmp	r3, #43	@ 0x2b
 800444c:	d104      	bne.n	8004458 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800444e:	2360      	movs	r3, #96	@ 0x60
 8004450:	33ff      	adds	r3, #255	@ 0xff
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	220b      	movs	r2, #11
 8004456:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004458:	22aa      	movs	r2, #170	@ 0xaa
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	18bb      	adds	r3, r7, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <ParseBuffer+0x362>
 8004464:	18bb      	adds	r3, r7, r2
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b45      	cmp	r3, #69	@ 0x45
 800446c:	d00a      	beq.n	8004484 <ParseBuffer+0x378>
 800446e:	22a4      	movs	r2, #164	@ 0xa4
 8004470:	0052      	lsls	r2, r2, #1
 8004472:	18bb      	adds	r3, r7, r2
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <ParseBuffer+0x382>
 800447a:	18bb      	adds	r3, r7, r2
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b46      	cmp	r3, #70	@ 0x46
 8004482:	d104      	bne.n	800448e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004484:	2360      	movs	r3, #96	@ 0x60
 8004486:	33ff      	adds	r3, #255	@ 0xff
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800448e:	22a8      	movs	r2, #168	@ 0xa8
 8004490:	0052      	lsls	r2, r2, #1
 8004492:	18bb      	adds	r3, r7, r2
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <ParseBuffer+0x39e>
 800449a:	18bb      	adds	r3, r7, r2
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b57      	cmp	r3, #87	@ 0x57
 80044a2:	d102      	bne.n	80044aa <ParseBuffer+0x39e>
      ConnectionMade = true;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <ParseBuffer+0x3cc>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80044aa:	22a6      	movs	r2, #166	@ 0xa6
 80044ac:	0052      	lsls	r2, r2, #1
 80044ae:	18bb      	adds	r3, r7, r2
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <ParseBuffer+0x3ba>
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b32      	cmp	r3, #50	@ 0x32
 80044be:	d102      	bne.n	80044c6 <ParseBuffer+0x3ba>
      beurs = true;
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <ParseBuffer+0x3d0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80044c6:	2360      	movs	r3, #96	@ 0x60
 80044c8:	33ff      	adds	r3, #255	@ 0xff
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	781b      	ldrb	r3, [r3, #0]

}
 80044ce:	0018      	movs	r0, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b059      	add	sp, #356	@ 0x164
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	2000054c 	.word	0x2000054c
 80044dc:	2000054e 	.word	0x2000054e

080044e0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80044e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <PollAwake+0x34>)
 80044e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f7fb fe3d 	bl	800016c <strlen>
 80044f2:	0003      	movs	r3, r0
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff fa9c 	bl	8003a38 <ESP_Send>
 8004500:	1e03      	subs	r3, r0, #0
 8004502:	d001      	beq.n	8004508 <PollAwake+0x28>
    return true;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <PollAwake+0x2a>
  }
  else{
    return false;
 8004508:	2300      	movs	r3, #0
  }
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	08022a18 	.word	0x08022a18

08004518 <RFPower>:
bool RFPower(){
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800451e:	4b0b      	ldr	r3, [pc, #44]	@ (800454c <RFPower+0x34>)
 8004520:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7fb fe21 	bl	800016c <strlen>
 800452a:	0003      	movs	r3, r0
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f7ff fa80 	bl	8003a38 <ESP_Send>
 8004538:	1e03      	subs	r3, r0, #0
 800453a:	d001      	beq.n	8004540 <RFPower+0x28>
    return true;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <RFPower+0x2a>
  }
  else{
    return false;
 8004540:	2300      	movs	r3, #0
  }
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	08022a20 	.word	0x08022a20

08004550 <CheckRFPower>:
bool CheckRFPower(){
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <CheckRFPower+0x34>)
 8004558:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f7fb fe05 	bl	800016c <strlen>
 8004562:	0003      	movs	r3, r0
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff fa64 	bl	8003a38 <ESP_Send>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d001      	beq.n	8004578 <CheckRFPower+0x28>
    return true;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004578:	2300      	movs	r3, #0
  }
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	08022a30 	.word	0x08022a30

08004588 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <ATRestore+0x34>)
 8004590:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7fb fde9 	bl	800016c <strlen>
 800459a:	0003      	movs	r3, r0
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0011      	movs	r1, r2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fa48 	bl	8003a38 <ESP_Send>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d001      	beq.n	80045b0 <ATRestore+0x28>
    return true;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <ATRestore+0x2a>
  }
  else{
    return false;
 80045b0:	2300      	movs	r3, #0
  }
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b002      	add	sp, #8
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	08022a40 	.word	0x08022a40

080045c0 <CWINIT>:
bool CWINIT(){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <CWINIT+0x34>)
 80045c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7fb fdcd 	bl	800016c <strlen>
 80045d2:	0003      	movs	r3, r0
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0011      	movs	r1, r2
 80045da:	0018      	movs	r0, r3
 80045dc:	f7ff fa2c 	bl	8003a38 <ESP_Send>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <CWINIT+0x28>
    return true;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <CWINIT+0x2a>
  }
  else{
    return false;
 80045e8:	2300      	movs	r3, #0
  }
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			@ (mov r8, r8)
 80045f4:	08022a50 	.word	0x08022a50

080045f8 <CWMODE1>:
bool CWMODE1(){
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80045fe:	4b0b      	ldr	r3, [pc, #44]	@ (800462c <CWMODE1+0x34>)
 8004600:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f7fb fdb1 	bl	800016c <strlen>
 800460a:	0003      	movs	r3, r0
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0011      	movs	r1, r2
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff fa10 	bl	8003a38 <ESP_Send>
 8004618:	1e03      	subs	r3, r0, #0
 800461a:	d001      	beq.n	8004620 <CWMODE1+0x28>
    return true;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004620:	2300      	movs	r3, #0
  }
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	08022a60 	.word	0x08022a60

08004630 <CWMODE2>:
bool CWMODE2(){
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004636:	4b0b      	ldr	r3, [pc, #44]	@ (8004664 <CWMODE2+0x34>)
 8004638:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fd95 	bl	800016c <strlen>
 8004642:	0003      	movs	r3, r0
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0011      	movs	r1, r2
 800464a:	0018      	movs	r0, r3
 800464c:	f7ff f9f4 	bl	8003a38 <ESP_Send>
 8004650:	1e03      	subs	r3, r0, #0
 8004652:	d001      	beq.n	8004658 <CWMODE2+0x28>
    return true;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004658:	2300      	movs	r3, #0
  }
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	08022a70 	.word	0x08022a70

08004668 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800466e:	4b0b      	ldr	r3, [pc, #44]	@ (800469c <CWAUTOCONN+0x34>)
 8004670:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f7fb fd79 	bl	800016c <strlen>
 800467a:	0003      	movs	r3, r0
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f7ff f9d8 	bl	8003a38 <ESP_Send>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d001      	beq.n	8004690 <CWAUTOCONN+0x28>
    return true;
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004690:	2300      	movs	r3, #0
  }
}
 8004692:	0018      	movs	r0, r3
 8004694:	46bd      	mov	sp, r7
 8004696:	b002      	add	sp, #8
 8004698:	bd80      	pop	{r7, pc}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	08022a80 	.word	0x08022a80

080046a0 <CWJAP>:
bool CWJAP(){
 80046a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a2:	46c6      	mov	lr, r8
 80046a4:	b500      	push	{lr}
 80046a6:	b0a2      	sub	sp, #136	@ 0x88
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	466b      	mov	r3, sp
 80046ac:	4698      	mov	r8, r3
  beursTest = true;
 80046ae:	4b39      	ldr	r3, [pc, #228]	@ (8004794 <CWJAP+0xf4>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80046b4:	2618      	movs	r6, #24
 80046b6:	19bb      	adds	r3, r7, r6
 80046b8:	2264      	movs	r2, #100	@ 0x64
 80046ba:	2100      	movs	r1, #0
 80046bc:	0018      	movs	r0, r3
 80046be:	f01a ff4b 	bl	801f558 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80046c2:	4b35      	ldr	r3, [pc, #212]	@ (8004798 <CWJAP+0xf8>)
 80046c4:	4a35      	ldr	r2, [pc, #212]	@ (800479c <CWJAP+0xfc>)
 80046c6:	4936      	ldr	r1, [pc, #216]	@ (80047a0 <CWJAP+0x100>)
 80046c8:	19b8      	adds	r0, r7, r6
 80046ca:	f01a fe01 	bl	801f2d0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80046ce:	19bb      	adds	r3, r7, r6
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fb fd4b 	bl	800016c <strlen>
 80046d6:	0002      	movs	r2, r0
 80046d8:	216f      	movs	r1, #111	@ 0x6f
 80046da:	0030      	movs	r0, r6
 80046dc:	180b      	adds	r3, r1, r0
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80046e2:	180b      	adds	r3, r1, r0
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	1e5a      	subs	r2, r3, #1
 80046ec:	2180      	movs	r1, #128	@ 0x80
 80046ee:	1879      	adds	r1, r7, r1
 80046f0:	600a      	str	r2, [r1, #0]
 80046f2:	001a      	movs	r2, r3
 80046f4:	60ba      	str	r2, [r7, #8]
 80046f6:	2200      	movs	r2, #0
 80046f8:	60fa      	str	r2, [r7, #12]
 80046fa:	68b8      	ldr	r0, [r7, #8]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	0002      	movs	r2, r0
 8004700:	0f52      	lsrs	r2, r2, #29
 8004702:	000e      	movs	r6, r1
 8004704:	00f6      	lsls	r6, r6, #3
 8004706:	617e      	str	r6, [r7, #20]
 8004708:	697e      	ldr	r6, [r7, #20]
 800470a:	4316      	orrs	r6, r2
 800470c:	617e      	str	r6, [r7, #20]
 800470e:	0002      	movs	r2, r0
 8004710:	00d2      	lsls	r2, r2, #3
 8004712:	613a      	str	r2, [r7, #16]
 8004714:	001a      	movs	r2, r3
 8004716:	603a      	str	r2, [r7, #0]
 8004718:	2200      	movs	r2, #0
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	0002      	movs	r2, r0
 8004722:	0f52      	lsrs	r2, r2, #29
 8004724:	000e      	movs	r6, r1
 8004726:	00f5      	lsls	r5, r6, #3
 8004728:	4315      	orrs	r5, r2
 800472a:	0002      	movs	r2, r0
 800472c:	00d4      	lsls	r4, r2, #3
 800472e:	3307      	adds	r3, #7
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	466a      	mov	r2, sp
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	469d      	mov	sp, r3
 800473a:	466b      	mov	r3, sp
 800473c:	3300      	adds	r3, #0
 800473e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004740:	246f      	movs	r4, #111	@ 0x6f
 8004742:	2518      	movs	r5, #24
 8004744:	1963      	adds	r3, r4, r5
 8004746:	19db      	adds	r3, r3, r7
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	001a      	movs	r2, r3
 800474e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004750:	2100      	movs	r1, #0
 8004752:	0018      	movs	r0, r3
 8004754:	f01a ff00 	bl	801f558 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004758:	1963      	adds	r3, r4, r5
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	1979      	adds	r1, r7, r5
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	0018      	movs	r0, r3
 8004764:	f01a ff1f 	bl	801f5a6 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004768:	1963      	adds	r3, r4, r5
 800476a:	19db      	adds	r3, r3, r7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b29a      	uxth	r2, r3
 8004770:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff f95f 	bl	8003a38 <ESP_Send>
 800477a:	1e03      	subs	r3, r0, #0
 800477c:	d001      	beq.n	8004782 <CWJAP+0xe2>
    return true;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <CWJAP+0xe4>
  }
  else{
    return false;
 8004782:	2300      	movs	r3, #0
 8004784:	46c5      	mov	sp, r8
  }
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b022      	add	sp, #136	@ 0x88
 800478c:	bc80      	pop	{r7}
 800478e:	46b8      	mov	r8, r7
 8004790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	2000054d 	.word	0x2000054d
 8004798:	08024278 	.word	0x08024278
 800479c:	0802426c 	.word	0x0802426c
 80047a0:	08022a94 	.word	0x08022a94

080047a4 <CWMODE3>:
bool CWMODE3(){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <CWMODE3+0x34>)
 80047ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fb fcdb 	bl	800016c <strlen>
 80047b6:	0003      	movs	r3, r0
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff f93a 	bl	8003a38 <ESP_Send>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <CWMODE3+0x28>
    return true;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <CWMODE3+0x2a>
  }
  else{
    return false;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	08022aac 	.word	0x08022aac

080047dc <CWSTATE>:
bool CWSTATE(){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <CWSTATE+0x34>)
 80047e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7fb fcbf 	bl	800016c <strlen>
 80047ee:	0003      	movs	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff f91e 	bl	8003a38 <ESP_Send>
 80047fc:	1e03      	subs	r3, r0, #0
 80047fe:	d001      	beq.n	8004804 <CWSTATE+0x28>
    return true;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004804:	2300      	movs	r3, #0
  }
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	08022abc 	.word	0x08022abc

08004814 <CWSAP>:
bool CWSAP(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <CWSAP+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f902 	bl	8003a38 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <CWSAP+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <CWSAP+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	08022acc 	.word	0x08022acc

0800484c <CIPMUX>:
bool CIPMUX(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <CIPMUX+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f8e6 	bl	8003a38 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <CIPMUX+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	08022af0 	.word	0x08022af0

08004884 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800488a:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <WEBSERVER+0x34>)
 800488c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	0018      	movs	r0, r3
 8004892:	f7fb fc6b 	bl	800016c <strlen>
 8004896:	0003      	movs	r3, r0
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0011      	movs	r1, r2
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff f8ca 	bl	8003a38 <ESP_Send>
 80048a4:	1e03      	subs	r3, r0, #0
 80048a6:	d001      	beq.n	80048ac <WEBSERVER+0x28>
    return true;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <WEBSERVER+0x2a>
  }
  else{
    return false;
 80048ac:	2300      	movs	r3, #0
  }
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b002      	add	sp, #8
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	08022b00 	.word	0x08022b00

080048bc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b0c5      	sub	sp, #276	@ 0x114
 80048c0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80048c2:	2380      	movs	r3, #128	@ 0x80
 80048c4:	005a      	lsls	r2, r3, #1
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2100      	movs	r1, #0
 80048ca:	0018      	movs	r0, r3
 80048cc:	f01a fe44 	bl	801f558 <memset>
  uint16_t length = CreateMessage(beurs);
 80048d0:	4b22      	ldr	r3, [pc, #136]	@ (800495c <HTTPCPOST+0xa0>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	1dfc      	adds	r4, r7, #7
 80048d6:	34ff      	adds	r4, #255	@ 0xff
 80048d8:	0018      	movs	r0, r3
 80048da:	f7ff f9bd 	bl	8003c58 <CreateMessage>
 80048de:	0003      	movs	r3, r0
 80048e0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80048e2:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HTTPCPOST+0xa0>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80048ea:	1dfb      	adds	r3, r7, #7
 80048ec:	33ff      	adds	r3, #255	@ 0xff
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004960 <HTTPCPOST+0xa4>)
 80048f2:	491c      	ldr	r1, [pc, #112]	@ (8004964 <HTTPCPOST+0xa8>)
 80048f4:	1d38      	adds	r0, r7, #4
 80048f6:	f01a fceb 	bl	801f2d0 <siprintf>
 80048fa:	e016      	b.n	800492a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <HTTPCPOST+0xac>)
 80048fe:	481b      	ldr	r0, [pc, #108]	@ (800496c <HTTPCPOST+0xb0>)
 8004900:	220c      	movs	r2, #12
 8004902:	0019      	movs	r1, r3
 8004904:	f7fe fef8 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004908:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HTTPCPOST+0xac>)
 800490a:	4b19      	ldr	r3, [pc, #100]	@ (8004970 <HTTPCPOST+0xb4>)
 800490c:	0011      	movs	r1, r2
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff f97e 	bl	8003c10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	33ff      	adds	r3, #255	@ 0xff
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	4c15      	ldr	r4, [pc, #84]	@ (8004970 <HTTPCPOST+0xb4>)
 800491c:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <HTTPCPOST+0xb8>)
 800491e:	4916      	ldr	r1, [pc, #88]	@ (8004978 <HTTPCPOST+0xbc>)
 8004920:	1d38      	adds	r0, r7, #4
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0023      	movs	r3, r4
 8004926:	f01a fcd3 	bl	801f2d0 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	0018      	movs	r0, r3
 800492e:	f7fb fc1d 	bl	800016c <strlen>
 8004932:	0002      	movs	r2, r0
 8004934:	1d7b      	adds	r3, r7, #5
 8004936:	33ff      	adds	r3, #255	@ 0xff
 8004938:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800493a:	1d7b      	adds	r3, r7, #5
 800493c:	33ff      	adds	r3, #255	@ 0xff
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	0011      	movs	r1, r2
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff f877 	bl	8003a38 <ESP_Send>
 800494a:	1e03      	subs	r3, r0, #0
 800494c:	d001      	beq.n	8004952 <HTTPCPOST+0x96>
    return true;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004952:	2300      	movs	r3, #0
  }
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b043      	add	sp, #268	@ 0x10c
 800495a:	bd90      	pop	{r4, r7, pc}
 800495c:	2000054e 	.word	0x2000054e
 8004960:	08024294 	.word	0x08024294
 8004964:	08022b18 	.word	0x08022b18
 8004968:	20000a80 	.word	0x20000a80
 800496c:	08080000 	.word	0x08080000
 8004970:	20000a8c 	.word	0x20000a8c
 8004974:	080242d0 	.word	0x080242d0
 8004978:	08022b50 	.word	0x08022b50

0800497c <SENDDATA>:
bool SENDDATA(){
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <SENDDATA+0x34>)
 8004984:	0018      	movs	r0, r3
 8004986:	f7fb fbf1 	bl	800016c <strlen>
 800498a:	0002      	movs	r2, r0
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	4b06      	ldr	r3, [pc, #24]	@ (80049b0 <SENDDATA+0x34>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff f84d 	bl	8003a38 <ESP_Send>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d001      	beq.n	80049a6 <SENDDATA+0x2a>
    return true;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <SENDDATA+0x2c>
  }
  else{
    return false;
 80049a6:	2300      	movs	r3, #0
  }
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000584 	.word	0x20000584

080049b4 <SLEEP>:
bool SLEEP(){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <SLEEP+0x34>)
 80049bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fb fbd3 	bl	800016c <strlen>
 80049c6:	0003      	movs	r3, r0
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f7ff f832 	bl	8003a38 <ESP_Send>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d001      	beq.n	80049dc <SLEEP+0x28>
    return true;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <SLEEP+0x2a>
  }
  else{
    return false;
 80049dc:	2300      	movs	r3, #0
  }
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b002      	add	sp, #8
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	08022b90 	.word	0x08022b90

080049ec <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <CIPSNTPCFG+0x3c>)
 80049f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fb fbb7 	bl	800016c <strlen>
 80049fe:	0003      	movs	r3, r0
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f7ff f816 	bl	8003a38 <ESP_Send>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d006      	beq.n	8004a1e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004a10:	23fa      	movs	r3, #250	@ 0xfa
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	0018      	movs	r0, r3
 8004a16:	f009 fb7d 	bl	800e114 <HAL_Delay>
    return true;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004a1e:	2300      	movs	r3, #0
  }
}
 8004a20:	0018      	movs	r0, r3
 8004a22:	46bd      	mov	sp, r7
 8004a24:	b002      	add	sp, #8
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	08022ba0 	.word	0x08022ba0

08004a2c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <CIPSNTPTIME+0x34>)
 8004a34:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fb fb97 	bl	800016c <strlen>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0011      	movs	r1, r2
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7fe fff6 	bl	8003a38 <ESP_Send>
 8004a4c:	1e03      	subs	r3, r0, #0
 8004a4e:	d001      	beq.n	8004a54 <CIPSNTPTIME+0x28>
    return true;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004a54:	2300      	movs	r3, #0
  }
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	08022bf0 	.word	0x08022bf0

08004a64 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <CIPSNTPINTV+0x34>)
 8004a6c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fb fb7b 	bl	800016c <strlen>
 8004a76:	0003      	movs	r3, r0
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fe ffda 	bl	8003a38 <ESP_Send>
 8004a84:	1e03      	subs	r3, r0, #0
 8004a86:	d001      	beq.n	8004a8c <CIPSNTPINTV+0x28>
    return true;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004a8c:	2300      	movs	r3, #0
  }
}
 8004a8e:	0018      	movs	r0, r3
 8004a90:	46bd      	mov	sp, r7
 8004a92:	b002      	add	sp, #8
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	08022c04 	.word	0x08022c04

08004a9c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004a9c:	b5b0      	push	{r4, r5, r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	0002      	movs	r2, r0
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004aa8:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <DMA_ProcessBuffer+0x1dc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	200e      	movs	r0, #14
 8004ab2:	183b      	adds	r3, r7, r0
 8004ab4:	2180      	movs	r1, #128	@ 0x80
 8004ab6:	0049      	lsls	r1, r1, #1
 8004ab8:	1a8a      	subs	r2, r1, r2
 8004aba:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004abc:	230d      	movs	r3, #13
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004ac4:	183b      	adds	r3, r7, r0
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d903      	bls.n	8004ad8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	2280      	movs	r2, #128	@ 0x80
 8004ad4:	0052      	lsls	r2, r2, #1
 8004ad6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	001a      	movs	r2, r3
 8004ae0:	230e      	movs	r3, #14
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d131      	bne.n	8004b4e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004aea:	4b65      	ldr	r3, [pc, #404]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b14      	cmp	r3, #20
 8004af0:	d91b      	bls.n	8004b2a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004af2:	4b63      	ldr	r3, [pc, #396]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004af8:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <DMA_ProcessBuffer+0x74>
 8004b00:	4b61      	ldr	r3, [pc, #388]	@ (8004c88 <DMA_ProcessBuffer+0x1ec>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004b08:	230d      	movs	r3, #13
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004b10:	4b5c      	ldr	r3, [pc, #368]	@ (8004c84 <DMA_ProcessBuffer+0x1e8>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d103      	bne.n	8004b20 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004b18:	4b5c      	ldr	r3, [pc, #368]	@ (8004c8c <DMA_ProcessBuffer+0x1f0>)
 8004b1a:	220b      	movs	r2, #11
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e016      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004b20:	230d      	movs	r3, #13
 8004b22:	18fb      	adds	r3, r7, r3
 8004b24:	2206      	movs	r2, #6
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	e011      	b.n	8004b4e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004b2a:	4b55      	ldr	r3, [pc, #340]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b34:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004b36:	f009 fae3 	bl	800e100 <HAL_GetTick>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	33f5      	adds	r3, #245	@ 0xf5
 8004b3e:	33ff      	adds	r3, #255	@ 0xff
 8004b40:	001a      	movs	r2, r3
 8004b42:	4b53      	ldr	r3, [pc, #332]	@ (8004c90 <DMA_ProcessBuffer+0x1f4>)
 8004b44:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004b46:	230d      	movs	r3, #13
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	001a      	movs	r2, r3
 8004b56:	210e      	movs	r1, #14
 8004b58:	187b      	adds	r3, r7, r1
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d100      	bne.n	8004b62 <DMA_ProcessBuffer+0xc6>
 8004b60:	e082      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <DMA_ProcessBuffer+0x1e4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004b68:	4b4a      	ldr	r3, [pc, #296]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d109      	bne.n	8004b8c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	4b45      	ldr	r3, [pc, #276]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b80:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004b82:	230d      	movs	r3, #13
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	220a      	movs	r2, #10
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	e06d      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004b8c:	4b41      	ldr	r3, [pc, #260]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	001a      	movs	r2, r3
 8004b94:	210e      	movs	r1, #14
 8004b96:	187b      	adds	r3, r7, r1
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <DMA_ProcessBuffer+0x1f8>)
 8004ba6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ba8:	230d      	movs	r3, #13
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	220a      	movs	r2, #10
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e05a      	b.n	8004c68 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004bb2:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	001a      	movs	r2, r3
 8004bba:	210e      	movs	r1, #14
 8004bbc:	187b      	adds	r3, r7, r1
 8004bbe:	881b      	ldrh	r3, [r3, #0]
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d917      	bls.n	8004bf4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	001a      	movs	r2, r3
 8004bcc:	4b32      	ldr	r3, [pc, #200]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bce:	18d0      	adds	r0, r2, r3
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	187b      	adds	r3, r7, r1
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	b299      	uxth	r1, r3
 8004be0:	230d      	movs	r3, #13
 8004be2:	18fc      	adds	r4, r7, r3
 8004be4:	1dfb      	adds	r3, r7, #7
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	f7ff fa8f 	bl	800410c <ParseBuffer>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	7023      	strb	r3, [r4, #0]
 8004bf2:	e026      	b.n	8004c42 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004bfe:	18d0      	adds	r0, r2, r3
 8004c00:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	001a      	movs	r2, r3
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	b299      	uxth	r1, r3
 8004c10:	250d      	movs	r5, #13
 8004c12:	197c      	adds	r4, r7, r5
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	001a      	movs	r2, r3
 8004c1a:	f7ff fa77 	bl	800410c <ParseBuffer>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004c22:	210e      	movs	r1, #14
 8004c24:	187b      	adds	r3, r7, r1
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004c2c:	197c      	adds	r4, r7, r5
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	781a      	ldrb	r2, [r3, #0]
 8004c32:	187b      	adds	r3, r7, r1
 8004c34:	8819      	ldrh	r1, [r3, #0]
 8004c36:	4b18      	ldr	r3, [pc, #96]	@ (8004c98 <DMA_ProcessBuffer+0x1fc>)
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fa67 	bl	800410c <ParseBuffer>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004c42:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	0018      	movs	r0, r3
 8004c4a:	240e      	movs	r4, #14
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <DMA_ProcessBuffer+0x200>)
 8004c52:	4913      	ldr	r1, [pc, #76]	@ (8004ca0 <DMA_ProcessBuffer+0x204>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0003      	movs	r3, r0
 8004c58:	2003      	movs	r0, #3
 8004c5a:	f008 fe05 	bl	800d868 <CreateLine>
          OldPos = pos;
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <DMA_ProcessBuffer+0x1e0>)
 8004c66:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004c68:	230d      	movs	r3, #13
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	781b      	ldrb	r3, [r3, #0]
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bdb0      	pop	{r4, r5, r7, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	20002440 	.word	0x20002440
 8004c7c:	20000aa5 	.word	0x20000aa5
 8004c80:	200009a0 	.word	0x200009a0
 8004c84:	200009a2 	.word	0x200009a2
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	20000028 	.word	0x20000028
 8004c90:	20000994 	.word	0x20000994
 8004c94:	20000aa6 	.word	0x20000aa6
 8004c98:	20000448 	.word	0x20000448
 8004c9c:	08022c1c 	.word	0x08022c1c
 8004ca0:	080224c0 	.word	0x080224c0

08004ca4 <clearDMABuffer>:

void clearDMABuffer(){
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	005a      	lsls	r2, r3, #1
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <clearDMABuffer+0x18>)
 8004cae:	2100      	movs	r1, #0
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f01a fc51 	bl	801f558 <memset>
}
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000448 	.word	0x20000448

08004cc0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	0002      	movs	r2, r0
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	1c0a      	adds	r2, r1, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004cda:	1dbb      	adds	r3, r7, #6
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	1dfa      	adds	r2, r7, #7
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	4251      	negs	r1, r2
 8004cea:	414a      	adcs	r2, r1
 8004cec:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d107      	bne.n	8004d06 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	1dfa      	adds	r2, r7, #7
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	3a02      	subs	r2, #2
 8004d00:	4251      	negs	r1, r2
 8004d02:	414a      	adcs	r2, r1
 8004d04:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004d06:	1dbb      	adds	r3, r7, #6
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d107      	bne.n	8004d1e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004d0e:	230f      	movs	r3, #15
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	1dfa      	adds	r2, r7, #7
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	3a05      	subs	r2, #5
 8004d18:	4251      	negs	r1, r2
 8004d1a:	414a      	adcs	r2, r1
 8004d1c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004d1e:	1dbb      	adds	r3, r7, #6
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b05      	cmp	r3, #5
 8004d24:	d107      	bne.n	8004d36 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004d26:	230f      	movs	r3, #15
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	1dfa      	adds	r2, r7, #7
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	3a0b      	subs	r2, #11
 8004d30:	4251      	negs	r1, r2
 8004d32:	414a      	adcs	r2, r1
 8004d34:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004d36:	230f      	movs	r3, #15
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b004      	add	sp, #16
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	0002      	movs	r2, r0
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b14      	cmp	r3, #20
 8004d5e:	d900      	bls.n	8004d62 <AT_Send+0x1e>
 8004d60:	e18c      	b.n	800507c <AT_Send+0x338>
 8004d62:	009a      	lsls	r2, r3, #2
 8004d64:	4bc9      	ldr	r3, [pc, #804]	@ (800508c <AT_Send+0x348>)
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004d6c:	4bc8      	ldr	r3, [pc, #800]	@ (8005090 <AT_Send+0x34c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0018      	movs	r0, r3
 8004d72:	f008 fd23 	bl	800d7bc <TimestampIsReached>
 8004d76:	1e03      	subs	r3, r0, #0
 8004d78:	d100      	bne.n	8004d7c <AT_Send+0x38>
 8004d7a:	e17e      	b.n	800507a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004d7c:	230f      	movs	r3, #15
 8004d7e:	18fc      	adds	r4, r7, r3
 8004d80:	f7ff fbae 	bl	80044e0 <PollAwake>
 8004d84:	0003      	movs	r3, r0
 8004d86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d88:	f009 f9ba 	bl	800e100 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	3332      	adds	r3, #50	@ 0x32
 8004d90:	001a      	movs	r2, r3
 8004d92:	4bbf      	ldr	r3, [pc, #764]	@ (8005090 <AT_Send+0x34c>)
 8004d94:	601a      	str	r2, [r3, #0]
  }
  break;
 8004d96:	e170      	b.n	800507a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004d98:	4abe      	ldr	r2, [pc, #760]	@ (8005094 <AT_Send+0x350>)
 8004d9a:	4bbf      	ldr	r3, [pc, #764]	@ (8005098 <AT_Send+0x354>)
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	2003      	movs	r0, #3
 8004da0:	f008 fd62 	bl	800d868 <CreateLine>
    ATCommandSend = RFPower();
 8004da4:	230f      	movs	r3, #15
 8004da6:	18fc      	adds	r4, r7, r3
 8004da8:	f7ff fbb6 	bl	8004518 <RFPower>
 8004dac:	0003      	movs	r3, r0
 8004dae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db0:	f009 f9a6 	bl	800e100 <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	330a      	adds	r3, #10
 8004db8:	001a      	movs	r2, r3
 8004dba:	4bb5      	ldr	r3, [pc, #724]	@ (8005090 <AT_Send+0x34c>)
 8004dbc:	601a      	str	r2, [r3, #0]
    break;
 8004dbe:	e15d      	b.n	800507c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004dc0:	4ab6      	ldr	r2, [pc, #728]	@ (800509c <AT_Send+0x358>)
 8004dc2:	4bb5      	ldr	r3, [pc, #724]	@ (8005098 <AT_Send+0x354>)
 8004dc4:	0019      	movs	r1, r3
 8004dc6:	2003      	movs	r0, #3
 8004dc8:	f008 fd4e 	bl	800d868 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004dcc:	230f      	movs	r3, #15
 8004dce:	18fc      	adds	r4, r7, r3
 8004dd0:	f7ff fbbe 	bl	8004550 <CheckRFPower>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd8:	f009 f992 	bl	800e100 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	330a      	adds	r3, #10
 8004de0:	001a      	movs	r2, r3
 8004de2:	4bab      	ldr	r3, [pc, #684]	@ (8005090 <AT_Send+0x34c>)
 8004de4:	601a      	str	r2, [r3, #0]
    break;
 8004de6:	e149      	b.n	800507c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004de8:	4aad      	ldr	r2, [pc, #692]	@ (80050a0 <AT_Send+0x35c>)
 8004dea:	4bab      	ldr	r3, [pc, #684]	@ (8005098 <AT_Send+0x354>)
 8004dec:	0019      	movs	r1, r3
 8004dee:	2003      	movs	r0, #3
 8004df0:	f008 fd3a 	bl	800d868 <CreateLine>
    ATCommandSend = ATRestore();
 8004df4:	230f      	movs	r3, #15
 8004df6:	18fc      	adds	r4, r7, r3
 8004df8:	f7ff fbc6 	bl	8004588 <ATRestore>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e00:	f009 f97e 	bl	800e100 <HAL_GetTick>
 8004e04:	0003      	movs	r3, r0
 8004e06:	3332      	adds	r3, #50	@ 0x32
 8004e08:	001a      	movs	r2, r3
 8004e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8005090 <AT_Send+0x34c>)
 8004e0c:	601a      	str	r2, [r3, #0]
    break;
 8004e0e:	e135      	b.n	800507c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004e10:	4aa4      	ldr	r2, [pc, #656]	@ (80050a4 <AT_Send+0x360>)
 8004e12:	4ba1      	ldr	r3, [pc, #644]	@ (8005098 <AT_Send+0x354>)
 8004e14:	0019      	movs	r1, r3
 8004e16:	2003      	movs	r0, #3
 8004e18:	f008 fd26 	bl	800d868 <CreateLine>
    ATCommandSend = CWINIT();
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	18fc      	adds	r4, r7, r3
 8004e20:	f7ff fbce 	bl	80045c0 <CWINIT>
 8004e24:	0003      	movs	r3, r0
 8004e26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e28:	f009 f96a 	bl	800e100 <HAL_GetTick>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	33f5      	adds	r3, #245	@ 0xf5
 8004e30:	33ff      	adds	r3, #255	@ 0xff
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b96      	ldr	r3, [pc, #600]	@ (8005090 <AT_Send+0x34c>)
 8004e36:	601a      	str	r2, [r3, #0]
    break;
 8004e38:	e120      	b.n	800507c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004e3a:	4a9b      	ldr	r2, [pc, #620]	@ (80050a8 <AT_Send+0x364>)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	@ (8005098 <AT_Send+0x354>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	2003      	movs	r0, #3
 8004e42:	f008 fd11 	bl	800d868 <CreateLine>
    ATCommandSend = CWSTATE();
 8004e46:	230f      	movs	r3, #15
 8004e48:	18fc      	adds	r4, r7, r3
 8004e4a:	f7ff fcc7 	bl	80047dc <CWSTATE>
 8004e4e:	0003      	movs	r3, r0
 8004e50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e52:	f009 f955 	bl	800e100 <HAL_GetTick>
 8004e56:	0003      	movs	r3, r0
 8004e58:	33f5      	adds	r3, #245	@ 0xf5
 8004e5a:	33ff      	adds	r3, #255	@ 0xff
 8004e5c:	001a      	movs	r2, r3
 8004e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8005090 <AT_Send+0x34c>)
 8004e60:	601a      	str	r2, [r3, #0]
    break;
 8004e62:	e10b      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004e64:	4a91      	ldr	r2, [pc, #580]	@ (80050ac <AT_Send+0x368>)
 8004e66:	4b8c      	ldr	r3, [pc, #560]	@ (8005098 <AT_Send+0x354>)
 8004e68:	0019      	movs	r1, r3
 8004e6a:	2003      	movs	r0, #3
 8004e6c:	f008 fcfc 	bl	800d868 <CreateLine>
    ATCommandSend = CWMODE1();
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	f7ff fbc0 	bl	80045f8 <CWMODE1>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e7c:	f009 f940 	bl	800e100 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	330a      	adds	r3, #10
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b82      	ldr	r3, [pc, #520]	@ (8005090 <AT_Send+0x34c>)
 8004e88:	601a      	str	r2, [r3, #0]
    break;
 8004e8a:	e0f7      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004e8c:	4a87      	ldr	r2, [pc, #540]	@ (80050ac <AT_Send+0x368>)
 8004e8e:	4b82      	ldr	r3, [pc, #520]	@ (8005098 <AT_Send+0x354>)
 8004e90:	0019      	movs	r1, r3
 8004e92:	2003      	movs	r0, #3
 8004e94:	f008 fce8 	bl	800d868 <CreateLine>
    ATCommandSend = CWMODE2();
 8004e98:	230f      	movs	r3, #15
 8004e9a:	18fc      	adds	r4, r7, r3
 8004e9c:	f7ff fbc8 	bl	8004630 <CWMODE2>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea4:	f009 f92c 	bl	800e100 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	330a      	adds	r3, #10
 8004eac:	001a      	movs	r2, r3
 8004eae:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <AT_Send+0x34c>)
 8004eb0:	601a      	str	r2, [r3, #0]
    break;
 8004eb2:	e0e3      	b.n	800507c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004eb4:	4a7e      	ldr	r2, [pc, #504]	@ (80050b0 <AT_Send+0x36c>)
 8004eb6:	4b78      	ldr	r3, [pc, #480]	@ (8005098 <AT_Send+0x354>)
 8004eb8:	0019      	movs	r1, r3
 8004eba:	2003      	movs	r0, #3
 8004ebc:	f008 fcd4 	bl	800d868 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004ec0:	230f      	movs	r3, #15
 8004ec2:	18fc      	adds	r4, r7, r3
 8004ec4:	f7ff fbd0 	bl	8004668 <CWAUTOCONN>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ecc:	f009 f918 	bl	800e100 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	330a      	adds	r3, #10
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8005090 <AT_Send+0x34c>)
 8004ed8:	601a      	str	r2, [r3, #0]
    break;
 8004eda:	e0cf      	b.n	800507c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004edc:	4a75      	ldr	r2, [pc, #468]	@ (80050b4 <AT_Send+0x370>)
 8004ede:	4b6e      	ldr	r3, [pc, #440]	@ (8005098 <AT_Send+0x354>)
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	2003      	movs	r0, #3
 8004ee4:	f008 fcc0 	bl	800d868 <CreateLine>
    ATCommandSend = CWJAP();
 8004ee8:	230f      	movs	r3, #15
 8004eea:	18fc      	adds	r4, r7, r3
 8004eec:	f7ff fbd8 	bl	80046a0 <CWJAP>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ef4:	f009 f904 	bl	800e100 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	3332      	adds	r3, #50	@ 0x32
 8004efc:	001a      	movs	r2, r3
 8004efe:	4b64      	ldr	r3, [pc, #400]	@ (8005090 <AT_Send+0x34c>)
 8004f00:	601a      	str	r2, [r3, #0]
    break;
 8004f02:	e0bb      	b.n	800507c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004f04:	4a6c      	ldr	r2, [pc, #432]	@ (80050b8 <AT_Send+0x374>)
 8004f06:	4b64      	ldr	r3, [pc, #400]	@ (8005098 <AT_Send+0x354>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f008 fcac 	bl	800d868 <CreateLine>
    ATCommandSend = CWMODE3();
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fc      	adds	r4, r7, r3
 8004f14:	f7ff fc46 	bl	80047a4 <CWMODE3>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f1c:	f009 f8f0 	bl	800e100 <HAL_GetTick>
 8004f20:	0003      	movs	r3, r0
 8004f22:	330a      	adds	r3, #10
 8004f24:	001a      	movs	r2, r3
 8004f26:	4b5a      	ldr	r3, [pc, #360]	@ (8005090 <AT_Send+0x34c>)
 8004f28:	601a      	str	r2, [r3, #0]
    break;
 8004f2a:	e0a7      	b.n	800507c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004f2c:	4a63      	ldr	r2, [pc, #396]	@ (80050bc <AT_Send+0x378>)
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <AT_Send+0x354>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f008 fc98 	bl	800d868 <CreateLine>
    ATCommandSend = CWSAP();
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fc      	adds	r4, r7, r3
 8004f3c:	f7ff fc6a 	bl	8004814 <CWSAP>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f44:	f009 f8dc 	bl	800e100 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	001a      	movs	r2, r3
 8004f4e:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <AT_Send+0x34c>)
 8004f50:	601a      	str	r2, [r3, #0]
    break;
 8004f52:	e093      	b.n	800507c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004f54:	230f      	movs	r3, #15
 8004f56:	18fc      	adds	r4, r7, r3
 8004f58:	f7ff fc78 	bl	800484c <CIPMUX>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f60:	f009 f8ce 	bl	800e100 <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	330a      	adds	r3, #10
 8004f68:	001a      	movs	r2, r3
 8004f6a:	4b49      	ldr	r3, [pc, #292]	@ (8005090 <AT_Send+0x34c>)
 8004f6c:	601a      	str	r2, [r3, #0]
    break;
 8004f6e:	e085      	b.n	800507c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004f70:	230f      	movs	r3, #15
 8004f72:	18fc      	adds	r4, r7, r3
 8004f74:	f7ff fc86 	bl	8004884 <WEBSERVER>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f7c:	f009 f8c0 	bl	800e100 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	330a      	adds	r3, #10
 8004f84:	001a      	movs	r2, r3
 8004f86:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <AT_Send+0x34c>)
 8004f88:	601a      	str	r2, [r3, #0]
    break;
 8004f8a:	e077      	b.n	800507c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fc      	adds	r4, r7, r3
 8004f90:	f7ff fc94 	bl	80048bc <HTTPCPOST>
 8004f94:	0003      	movs	r3, r0
 8004f96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f98:	f009 f8b2 	bl	800e100 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	33f5      	adds	r3, #245	@ 0xf5
 8004fa0:	33ff      	adds	r3, #255	@ 0xff
 8004fa2:	001a      	movs	r2, r3
 8004fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8005090 <AT_Send+0x34c>)
 8004fa6:	601a      	str	r2, [r3, #0]
    break;
 8004fa8:	e068      	b.n	800507c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 8004faa:	4a45      	ldr	r2, [pc, #276]	@ (80050c0 <AT_Send+0x37c>)
 8004fac:	4b3a      	ldr	r3, [pc, #232]	@ (8005098 <AT_Send+0x354>)
 8004fae:	0019      	movs	r1, r3
 8004fb0:	2003      	movs	r0, #3
 8004fb2:	f008 fc59 	bl	800d868 <CreateLine>
    ATCommandSend = SENDDATA();
 8004fb6:	230f      	movs	r3, #15
 8004fb8:	18fc      	adds	r4, r7, r3
 8004fba:	f7ff fcdf 	bl	800497c <SENDDATA>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004fc2:	f009 f89d 	bl	800e100 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	33f5      	adds	r3, #245	@ 0xf5
 8004fca:	33ff      	adds	r3, #255	@ 0xff
 8004fcc:	001a      	movs	r2, r3
 8004fce:	4b30      	ldr	r3, [pc, #192]	@ (8005090 <AT_Send+0x34c>)
 8004fd0:	601a      	str	r2, [r3, #0]
    break;
 8004fd2:	e053      	b.n	800507c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004fd4:	4a3b      	ldr	r2, [pc, #236]	@ (80050c4 <AT_Send+0x380>)
 8004fd6:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <AT_Send+0x354>)
 8004fd8:	0019      	movs	r1, r3
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f008 fc44 	bl	800d868 <CreateLine>
    ATCommandSend = SLEEP();
 8004fe0:	230f      	movs	r3, #15
 8004fe2:	18fc      	adds	r4, r7, r3
 8004fe4:	f7ff fce6 	bl	80049b4 <SLEEP>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fec:	f009 f888 	bl	800e100 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	330a      	adds	r3, #10
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	4b26      	ldr	r3, [pc, #152]	@ (8005090 <AT_Send+0x34c>)
 8004ff8:	601a      	str	r2, [r3, #0]
    break;
 8004ffa:	e03f      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004ffc:	4a32      	ldr	r2, [pc, #200]	@ (80050c8 <AT_Send+0x384>)
 8004ffe:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <AT_Send+0x354>)
 8005000:	0019      	movs	r1, r3
 8005002:	2003      	movs	r0, #3
 8005004:	f008 fc30 	bl	800d868 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8005008:	230f      	movs	r3, #15
 800500a:	18fc      	adds	r4, r7, r3
 800500c:	f7ff fcee 	bl	80049ec <CIPSNTPCFG>
 8005010:	0003      	movs	r3, r0
 8005012:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005014:	f009 f874 	bl	800e100 <HAL_GetTick>
 8005018:	0003      	movs	r3, r0
 800501a:	330a      	adds	r3, #10
 800501c:	001a      	movs	r2, r3
 800501e:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <AT_Send+0x34c>)
 8005020:	601a      	str	r2, [r3, #0]
    break;
 8005022:	e02b      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005024:	4a29      	ldr	r2, [pc, #164]	@ (80050cc <AT_Send+0x388>)
 8005026:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <AT_Send+0x354>)
 8005028:	0019      	movs	r1, r3
 800502a:	2003      	movs	r0, #3
 800502c:	f008 fc1c 	bl	800d868 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005030:	230f      	movs	r3, #15
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	f7ff fcfa 	bl	8004a2c <CIPSNTPTIME>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800503c:	f009 f860 	bl	800e100 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	33f5      	adds	r3, #245	@ 0xf5
 8005044:	33ff      	adds	r3, #255	@ 0xff
 8005046:	001a      	movs	r2, r3
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <AT_Send+0x34c>)
 800504a:	601a      	str	r2, [r3, #0]
    break;
 800504c:	e016      	b.n	800507c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800504e:	4a20      	ldr	r2, [pc, #128]	@ (80050d0 <AT_Send+0x38c>)
 8005050:	4b11      	ldr	r3, [pc, #68]	@ (8005098 <AT_Send+0x354>)
 8005052:	0019      	movs	r1, r3
 8005054:	2003      	movs	r0, #3
 8005056:	f008 fc07 	bl	800d868 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800505a:	230f      	movs	r3, #15
 800505c:	18fc      	adds	r4, r7, r3
 800505e:	f7ff fd01 	bl	8004a64 <CIPSNTPINTV>
 8005062:	0003      	movs	r3, r0
 8005064:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005066:	f009 f84b 	bl	800e100 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	330a      	adds	r3, #10
 800506e:	001a      	movs	r2, r3
 8005070:	4b07      	ldr	r3, [pc, #28]	@ (8005090 <AT_Send+0x34c>)
 8005072:	601a      	str	r2, [r3, #0]
    break;
 8005074:	e002      	b.n	800507c <AT_Send+0x338>
  case AT_END:
    break;
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	e000      	b.n	800507c <AT_Send+0x338>
  break;
 800507a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800507c:	230f      	movs	r3, #15
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	781b      	ldrb	r3, [r3, #0]
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b005      	add	sp, #20
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	080242f8 	.word	0x080242f8
 8005090:	20000994 	.word	0x20000994
 8005094:	08022c44 	.word	0x08022c44
 8005098:	080224c0 	.word	0x080224c0
 800509c:	08022c58 	.word	0x08022c58
 80050a0:	08022c6c 	.word	0x08022c6c
 80050a4:	08022c7c 	.word	0x08022c7c
 80050a8:	08022c90 	.word	0x08022c90
 80050ac:	08022ca8 	.word	0x08022ca8
 80050b0:	08022cc0 	.word	0x08022cc0
 80050b4:	08022cd8 	.word	0x08022cd8
 80050b8:	08022cec 	.word	0x08022cec
 80050bc:	08022d08 	.word	0x08022d08
 80050c0:	08022d24 	.word	0x08022d24
 80050c4:	08022d34 	.word	0x08022d34
 80050c8:	08022d58 	.word	0x08022d58
 80050cc:	08022d6c 	.word	0x08022d6c
 80050d0:	08022d84 	.word	0x08022d84

080050d4 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80050e0:	4b7a      	ldr	r3, [pc, #488]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b05      	cmp	r3, #5
 80050e6:	d900      	bls.n	80050ea <ESP_WakeTest+0x16>
 80050e8:	e0d6      	b.n	8005298 <ESP_WakeTest+0x1c4>
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	4b78      	ldr	r3, [pc, #480]	@ (80052d0 <ESP_WakeTest+0x1fc>)
 80050ee:	18d3      	adds	r3, r2, r3
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80050f4:	4b77      	ldr	r3, [pc, #476]	@ (80052d4 <ESP_WakeTest+0x200>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4053      	eors	r3, r2
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d036      	beq.n	8005170 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4874      	ldr	r0, [pc, #464]	@ (80052d8 <ESP_WakeTest+0x204>)
 8005108:	2200      	movs	r2, #0
 800510a:	0019      	movs	r1, r3
 800510c:	f00a fa73 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005110:	2032      	movs	r0, #50	@ 0x32
 8005112:	f008 ffff 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	486f      	ldr	r0, [pc, #444]	@ (80052d8 <ESP_WakeTest+0x204>)
 800511c:	2201      	movs	r2, #1
 800511e:	0019      	movs	r1, r3
 8005120:	f00a fa69 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005124:	200a      	movs	r0, #10
 8005126:	f008 fff5 	bl	800e114 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800512a:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <ESP_WakeTest+0x208>)
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	0018      	movs	r0, r3
 8005132:	f00a fa60 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005136:	200a      	movs	r0, #10
 8005138:	f008 ffec 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800513c:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <ESP_WakeTest+0x208>)
 800513e:	2201      	movs	r2, #1
 8005140:	2102      	movs	r1, #2
 8005142:	0018      	movs	r0, r3
 8005144:	f00a fa57 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005148:	200a      	movs	r0, #10
 800514a:	f008 ffe3 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800514e:	4b63      	ldr	r3, [pc, #396]	@ (80052dc <ESP_WakeTest+0x208>)
 8005150:	2201      	movs	r2, #1
 8005152:	2101      	movs	r1, #1
 8005154:	0018      	movs	r0, r3
 8005156:	f00a fa4e 	bl	800f5f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800515a:	f008 ffd1 	bl	800e100 <HAL_GetTick>
 800515e:	0003      	movs	r3, r0
 8005160:	22af      	movs	r2, #175	@ 0xaf
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	189a      	adds	r2, r3, r2
 8005166:	4b5e      	ldr	r3, [pc, #376]	@ (80052e0 <ESP_WakeTest+0x20c>)
 8005168:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800516a:	4b5a      	ldr	r3, [pc, #360]	@ (80052d4 <ESP_WakeTest+0x200>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	005a      	lsls	r2, r3, #1
 8005174:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <ESP_WakeTest+0x210>)
 8005176:	0011      	movs	r1, r2
 8005178:	0018      	movs	r0, r3
 800517a:	f7fe fc91 	bl	8003aa0 <ESP_Receive>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d100      	bne.n	8005184 <ESP_WakeTest+0xb0>
 8005182:	e099      	b.n	80052b8 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005184:	4b51      	ldr	r3, [pc, #324]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005186:	2201      	movs	r2, #1
 8005188:	701a      	strb	r2, [r3, #0]
      }
      break;
 800518a:	e095      	b.n	80052b8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800518c:	4b54      	ldr	r3, [pc, #336]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0018      	movs	r0, r3
 8005192:	f008 fb13 	bl	800d7bc <TimestampIsReached>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d100      	bne.n	800519c <ESP_WakeTest+0xc8>
 800519a:	e08f      	b.n	80052bc <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 800519c:	4b52      	ldr	r3, [pc, #328]	@ (80052e8 <ESP_WakeTest+0x214>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	1dfc      	adds	r4, r7, #7
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7ff fdce 	bl	8004d44 <AT_Send>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80051ac:	1dfb      	adds	r3, r7, #7
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <ESP_WakeTest+0xe2>
 80051b4:	e082      	b.n	80052bc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80051b6:	4b45      	ldr	r3, [pc, #276]	@ (80052cc <ESP_WakeTest+0x1f8>)
 80051b8:	2202      	movs	r2, #2
 80051ba:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80051bc:	e07e      	b.n	80052bc <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 80051be:	4b48      	ldr	r3, [pc, #288]	@ (80052e0 <ESP_WakeTest+0x20c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	0018      	movs	r0, r3
 80051c4:	f008 fafa 	bl	800d7bc <TimestampIsReached>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d100      	bne.n	80051ce <ESP_WakeTest+0xfa>
 80051cc:	e078      	b.n	80052c0 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80051ce:	4b47      	ldr	r3, [pc, #284]	@ (80052ec <ESP_WakeTest+0x218>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	0018      	movs	r0, r3
 80051d4:	f7ff fc62 	bl	8004a9c <DMA_ProcessBuffer>
 80051d8:	0003      	movs	r3, r0
 80051da:	001a      	movs	r2, r3
 80051dc:	4b44      	ldr	r3, [pc, #272]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051de:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80051e0:	4b43      	ldr	r3, [pc, #268]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051e2:	781a      	ldrb	r2, [r3, #0]
 80051e4:	4b41      	ldr	r3, [pc, #260]	@ (80052ec <ESP_WakeTest+0x218>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	1dbc      	adds	r4, r7, #6
 80051ea:	0019      	movs	r1, r3
 80051ec:	0010      	movs	r0, r2
 80051ee:	f7ff fd67 	bl	8004cc0 <ATCompare>
 80051f2:	0003      	movs	r3, r0
 80051f4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80051f6:	4b3e      	ldr	r3, [pc, #248]	@ (80052f0 <ESP_WakeTest+0x21c>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d102      	bne.n	8005204 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80051fe:	4b33      	ldr	r3, [pc, #204]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005204:	4b3a      	ldr	r3, [pc, #232]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b07      	cmp	r3, #7
 800520a:	d104      	bne.n	8005216 <ESP_WakeTest+0x142>
          StartProg();
 800520c:	f7fe ff4c 	bl	80040a8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <ESP_WakeTest+0x1f8>)
 8005212:	2205      	movs	r2, #5
 8005214:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005216:	4b36      	ldr	r3, [pc, #216]	@ (80052f0 <ESP_WakeTest+0x21c>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d109      	bne.n	8005232 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800521e:	f008 ff6f 	bl	800e100 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	3332      	adds	r3, #50	@ 0x32
 8005226:	001a      	movs	r2, r3
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <ESP_WakeTest+0x20c>)
 800522a:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d042      	beq.n	80052c0 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 800523a:	4b24      	ldr	r3, [pc, #144]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800523c:	2203      	movs	r2, #3
 800523e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005240:	e03e      	b.n	80052c0 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005242:	4b2c      	ldr	r3, [pc, #176]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005244:	22fa      	movs	r2, #250	@ 0xfa
 8005246:	0112      	lsls	r2, r2, #4
 8005248:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800524a:	4b2a      	ldr	r3, [pc, #168]	@ (80052f4 <ESP_WakeTest+0x220>)
 800524c:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <ESP_WakeTest+0x224>)
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005250:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <ESP_WakeTest+0x220>)
 8005252:	22fa      	movs	r2, #250	@ 0xfa
 8005254:	0112      	lsls	r2, r2, #4
 8005256:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800525a:	2204      	movs	r2, #4
 800525c:	701a      	strb	r2, [r3, #0]

      break;
 800525e:	e030      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005260:	4b26      	ldr	r3, [pc, #152]	@ (80052fc <ESP_WakeTest+0x228>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <ESP_WakeTest+0x200>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800526c:	4b1b      	ldr	r3, [pc, #108]	@ (80052dc <ESP_WakeTest+0x208>)
 800526e:	2200      	movs	r2, #0
 8005270:	2101      	movs	r1, #1
 8005272:	0018      	movs	r0, r3
 8005274:	f00a f9bf 	bl	800f5f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005278:	2380      	movs	r3, #128	@ 0x80
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	4816      	ldr	r0, [pc, #88]	@ (80052d8 <ESP_WakeTest+0x204>)
 800527e:	2200      	movs	r2, #0
 8005280:	0019      	movs	r1, r3
 8005282:	f00a f9b8 	bl	800f5f6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005286:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <ESP_WakeTest+0x208>)
 8005288:	2200      	movs	r2, #0
 800528a:	2102      	movs	r1, #2
 800528c:	0018      	movs	r0, r3
 800528e:	f00a f9b2 	bl	800f5f6 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005292:	f002 fb8f 	bl	80079b4 <SetESPMeasurementDone>
      break;
 8005296:	e014      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <ESP_WakeTest+0x1f8>)
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
      break;
 800529e:	e010      	b.n	80052c2 <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052a2:	22fa      	movs	r2, #250	@ 0xfa
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80052a8:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052aa:	22fa      	movs	r2, #250	@ 0xfa
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <ESP_WakeTest+0x220>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80052b6:	e004      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052b8:	46c0      	nop			@ (mov r8, r8)
 80052ba:	e002      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052bc:	46c0      	nop			@ (mov r8, r8)
 80052be:	e000      	b.n	80052c2 <ESP_WakeTest+0x1ee>
      break;
 80052c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	46bd      	mov	sp, r7
 80052c6:	b003      	add	sp, #12
 80052c8:	bd90      	pop	{r4, r7, pc}
 80052ca:	46c0      	nop			@ (mov r8, r8)
 80052cc:	200009a4 	.word	0x200009a4
 80052d0:	0802434c 	.word	0x0802434c
 80052d4:	20000548 	.word	0x20000548
 80052d8:	50000800 	.word	0x50000800
 80052dc:	50001c00 	.word	0x50001c00
 80052e0:	20000994 	.word	0x20000994
 80052e4:	20000448 	.word	0x20000448
 80052e8:	200009a2 	.word	0x200009a2
 80052ec:	200009a1 	.word	0x200009a1
 80052f0:	20000029 	.word	0x20000029
 80052f4:	40000400 	.word	0x40000400
 80052f8:	00000bb8 	.word	0x00000bb8
 80052fc:	20000000 	.word	0x20000000

08005300 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005300:	b5b0      	push	{r4, r5, r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005306:	1dfb      	adds	r3, r7, #7
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 800530c:	4bdb      	ldr	r3, [pc, #876]	@ (800567c <ESP_Upkeep+0x37c>)
 800530e:	781a      	ldrb	r2, [r3, #0]
 8005310:	4bdb      	ldr	r3, [pc, #876]	@ (8005680 <ESP_Upkeep+0x380>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	429a      	cmp	r2, r3
 8005316:	d01f      	beq.n	8005358 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005318:	4bd8      	ldr	r3, [pc, #864]	@ (800567c <ESP_Upkeep+0x37c>)
 800531a:	781a      	ldrb	r2, [r3, #0]
 800531c:	4bd8      	ldr	r3, [pc, #864]	@ (8005680 <ESP_Upkeep+0x380>)
 800531e:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005320:	4bd7      	ldr	r3, [pc, #860]	@ (8005680 <ESP_Upkeep+0x380>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d103      	bne.n	8005330 <ESP_Upkeep+0x30>
 8005328:	4bd6      	ldr	r3, [pc, #856]	@ (8005684 <ESP_Upkeep+0x384>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b0e      	cmp	r3, #14
 800532e:	d013      	beq.n	8005358 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005330:	4bd3      	ldr	r3, [pc, #844]	@ (8005680 <ESP_Upkeep+0x380>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	001d      	movs	r5, r3
 8005336:	4bd3      	ldr	r3, [pc, #844]	@ (8005684 <ESP_Upkeep+0x384>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	0018      	movs	r0, r3
 800533c:	4bd2      	ldr	r3, [pc, #840]	@ (8005688 <ESP_Upkeep+0x388>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	001c      	movs	r4, r3
 8005342:	4bd2      	ldr	r3, [pc, #840]	@ (800568c <ESP_Upkeep+0x38c>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	4ad2      	ldr	r2, [pc, #840]	@ (8005690 <ESP_Upkeep+0x390>)
 8005348:	49d2      	ldr	r1, [pc, #840]	@ (8005694 <ESP_Upkeep+0x394>)
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	9401      	str	r4, [sp, #4]
 800534e:	9000      	str	r0, [sp, #0]
 8005350:	002b      	movs	r3, r5
 8005352:	2003      	movs	r0, #3
 8005354:	f008 fa88 	bl	800d868 <CreateLine>
    }
  }

  switch (EspState) {
 8005358:	4bc8      	ldr	r3, [pc, #800]	@ (800567c <ESP_Upkeep+0x37c>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d901      	bls.n	8005364 <ESP_Upkeep+0x64>
 8005360:	f000 fbfd 	bl	8005b5e <ESP_Upkeep+0x85e>
 8005364:	009a      	lsls	r2, r3, #2
 8005366:	4bcc      	ldr	r3, [pc, #816]	@ (8005698 <ESP_Upkeep+0x398>)
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800536e:	4bc3      	ldr	r3, [pc, #780]	@ (800567c <ESP_Upkeep+0x37c>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
      break;
 8005374:	f000 fc0c 	bl	8005b90 <ESP_Upkeep+0x890>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005378:	4bc8      	ldr	r3, [pc, #800]	@ (800569c <ESP_Upkeep+0x39c>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2201      	movs	r2, #1
 800537e:	4053      	eors	r3, r2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d036      	beq.n	80053f4 <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	48c5      	ldr	r0, [pc, #788]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 800538c:	2200      	movs	r2, #0
 800538e:	0019      	movs	r1, r3
 8005390:	f00a f931 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005394:	2001      	movs	r0, #1
 8005396:	f008 febd 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800539a:	2380      	movs	r3, #128	@ 0x80
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	48c0      	ldr	r0, [pc, #768]	@ (80056a0 <ESP_Upkeep+0x3a0>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	0019      	movs	r1, r3
 80053a4:	f00a f927 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053a8:	2001      	movs	r0, #1
 80053aa:	f008 feb3 	bl	800e114 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80053ae:	4bbd      	ldr	r3, [pc, #756]	@ (80056a4 <ESP_Upkeep+0x3a4>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	2101      	movs	r1, #1
 80053b4:	0018      	movs	r0, r3
 80053b6:	f00a f91e 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f008 feaa 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80053c0:	4bb8      	ldr	r3, [pc, #736]	@ (80056a4 <ESP_Upkeep+0x3a4>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	2102      	movs	r1, #2
 80053c6:	0018      	movs	r0, r3
 80053c8:	f00a f915 	bl	800f5f6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053cc:	2001      	movs	r0, #1
 80053ce:	f008 fea1 	bl	800e114 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80053d2:	4bb4      	ldr	r3, [pc, #720]	@ (80056a4 <ESP_Upkeep+0x3a4>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	2101      	movs	r1, #1
 80053d8:	0018      	movs	r0, r3
 80053da:	f00a f90c 	bl	800f5f6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80053de:	f008 fe8f 	bl	800e100 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	22af      	movs	r2, #175	@ 0xaf
 80053e6:	0092      	lsls	r2, r2, #2
 80053e8:	189a      	adds	r2, r3, r2
 80053ea:	4baf      	ldr	r3, [pc, #700]	@ (80056a8 <ESP_Upkeep+0x3a8>)
 80053ec:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80053ee:	4bab      	ldr	r3, [pc, #684]	@ (800569c <ESP_Upkeep+0x39c>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	005a      	lsls	r2, r3, #1
 80053f8:	4bac      	ldr	r3, [pc, #688]	@ (80056ac <ESP_Upkeep+0x3ac>)
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fe fb4f 	bl	8003aa0 <ESP_Receive>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d101      	bne.n	800540a <ESP_Upkeep+0x10a>
 8005406:	f000 fbb6 	bl	8005b76 <ESP_Upkeep+0x876>
        EspState = ESP_STATE_WAIT_AWAKE;
 800540a:	4b9c      	ldr	r3, [pc, #624]	@ (800567c <ESP_Upkeep+0x37c>)
 800540c:	220f      	movs	r2, #15
 800540e:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005410:	f008 fe76 	bl	800e100 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	22fa      	movs	r2, #250	@ 0xfa
 8005418:	00d2      	lsls	r2, r2, #3
 800541a:	189a      	adds	r2, r3, r2
 800541c:	4ba4      	ldr	r3, [pc, #656]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 800541e:	601a      	str	r2, [r3, #0]
      }
      break;
 8005420:	f000 fba9 	bl	8005b76 <ESP_Upkeep+0x876>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005424:	2001      	movs	r0, #1
 8005426:	f7ff fb39 	bl	8004a9c <DMA_ProcessBuffer>
 800542a:	0003      	movs	r3, r0
 800542c:	001a      	movs	r2, r3
 800542e:	4ba1      	ldr	r3, [pc, #644]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 8005430:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005432:	4ba0      	ldr	r3, [pc, #640]	@ (80056b4 <ESP_Upkeep+0x3b4>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	1dbc      	adds	r4, r7, #6
 8005438:	2101      	movs	r1, #1
 800543a:	0018      	movs	r0, r3
 800543c:	f7ff fc40 	bl	8004cc0 <ATCompare>
 8005440:	0003      	movs	r3, r0
 8005442:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005444:	1dbb      	adds	r3, r7, #6
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <ESP_Upkeep+0x15c>
 800544c:	4b98      	ldr	r3, [pc, #608]	@ (80056b0 <ESP_Upkeep+0x3b0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0018      	movs	r0, r3
 8005452:	f008 f9b3 	bl	800d7bc <TimestampIsReached>
 8005456:	1e03      	subs	r3, r0, #0
 8005458:	d100      	bne.n	800545c <ESP_Upkeep+0x15c>
 800545a:	e38e      	b.n	8005b7a <ESP_Upkeep+0x87a>
          EspState = ESP_STATE_MODE_SELECT;
 800545c:	4b87      	ldr	r3, [pc, #540]	@ (800567c <ESP_Upkeep+0x37c>)
 800545e:	220b      	movs	r2, #11
 8005460:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005462:	e38a      	b.n	8005b7a <ESP_Upkeep+0x87a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005464:	4b94      	ldr	r3, [pc, #592]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005466:	2209      	movs	r2, #9
 8005468:	2114      	movs	r1, #20
 800546a:	0018      	movs	r0, r3
 800546c:	f01a f874 	bl	801f558 <memset>
      if(!InitIsDone || WifiReset){
 8005470:	4b92      	ldr	r3, [pc, #584]	@ (80056bc <ESP_Upkeep+0x3bc>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	4053      	eors	r3, r2
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <ESP_Upkeep+0x186>
 800547e:	4b90      	ldr	r3, [pc, #576]	@ (80056c0 <ESP_Upkeep+0x3c0>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01a      	beq.n	80054bc <ESP_Upkeep+0x1bc>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005486:	4b8c      	ldr	r3, [pc, #560]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005488:	4a8e      	ldr	r2, [pc, #568]	@ (80056c4 <ESP_Upkeep+0x3c4>)
 800548a:	6811      	ldr	r1, [r2, #0]
 800548c:	6019      	str	r1, [r3, #0]
 800548e:	8891      	ldrh	r1, [r2, #4]
 8005490:	8099      	strh	r1, [r3, #4]
 8005492:	7992      	ldrb	r2, [r2, #6]
 8005494:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005496:	4b79      	ldr	r3, [pc, #484]	@ (800567c <ESP_Upkeep+0x37c>)
 8005498:	2204      	movs	r2, #4
 800549a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800549c:	4b8a      	ldr	r3, [pc, #552]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80054a2:	4b79      	ldr	r3, [pc, #484]	@ (8005688 <ESP_Upkeep+0x388>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054a8:	4b87      	ldr	r3, [pc, #540]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	001a      	movs	r2, r3
 80054ae:	4b82      	ldr	r3, [pc, #520]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80054b0:	5c9a      	ldrb	r2, [r3, r2]
 80054b2:	4b74      	ldr	r3, [pc, #464]	@ (8005684 <ESP_Upkeep+0x384>)
 80054b4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054b6:	4b75      	ldr	r3, [pc, #468]	@ (800568c <ESP_Upkeep+0x38c>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80054bc:	4b7f      	ldr	r3, [pc, #508]	@ (80056bc <ESP_Upkeep+0x3bc>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d01f      	beq.n	8005504 <ESP_Upkeep+0x204>
 80054c4:	4b81      	ldr	r3, [pc, #516]	@ (80056cc <ESP_Upkeep+0x3cc>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4053      	eors	r3, r2
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d018      	beq.n	8005504 <ESP_Upkeep+0x204>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80054d2:	4b79      	ldr	r3, [pc, #484]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80054d4:	4a7e      	ldr	r2, [pc, #504]	@ (80056d0 <ESP_Upkeep+0x3d0>)
 80054d6:	6811      	ldr	r1, [r2, #0]
 80054d8:	6019      	str	r1, [r3, #0]
 80054da:	8892      	ldrh	r2, [r2, #4]
 80054dc:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054de:	4b67      	ldr	r3, [pc, #412]	@ (800567c <ESP_Upkeep+0x37c>)
 80054e0:	2204      	movs	r2, #4
 80054e2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054e4:	4b78      	ldr	r3, [pc, #480]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80054ea:	4b67      	ldr	r3, [pc, #412]	@ (8005688 <ESP_Upkeep+0x388>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054f0:	4b75      	ldr	r3, [pc, #468]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	001a      	movs	r2, r3
 80054f6:	4b70      	ldr	r3, [pc, #448]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80054f8:	5c9a      	ldrb	r2, [r3, r2]
 80054fa:	4b62      	ldr	r3, [pc, #392]	@ (8005684 <ESP_Upkeep+0x384>)
 80054fc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054fe:	4b63      	ldr	r3, [pc, #396]	@ (800568c <ESP_Upkeep+0x38c>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005504:	4b6d      	ldr	r3, [pc, #436]	@ (80056bc <ESP_Upkeep+0x3bc>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d021      	beq.n	8005550 <ESP_Upkeep+0x250>
 800550c:	4b6f      	ldr	r3, [pc, #444]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d01d      	beq.n	8005550 <ESP_Upkeep+0x250>
 8005514:	4b6f      	ldr	r3, [pc, #444]	@ (80056d4 <ESP_Upkeep+0x3d4>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	4053      	eors	r3, r2
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d016      	beq.n	8005550 <ESP_Upkeep+0x250>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005522:	4b6d      	ldr	r3, [pc, #436]	@ (80056d8 <ESP_Upkeep+0x3d8>)
 8005524:	881a      	ldrh	r2, [r3, #0]
 8005526:	4b64      	ldr	r3, [pc, #400]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005528:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800552a:	4b54      	ldr	r3, [pc, #336]	@ (800567c <ESP_Upkeep+0x37c>)
 800552c:	2204      	movs	r2, #4
 800552e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005530:	4b65      	ldr	r3, [pc, #404]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005536:	4b54      	ldr	r3, [pc, #336]	@ (8005688 <ESP_Upkeep+0x388>)
 8005538:	2204      	movs	r2, #4
 800553a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800553c:	4b62      	ldr	r3, [pc, #392]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	001a      	movs	r2, r3
 8005542:	4b5d      	ldr	r3, [pc, #372]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005544:	5c9a      	ldrb	r2, [r3, r2]
 8005546:	4b4f      	ldr	r3, [pc, #316]	@ (8005684 <ESP_Upkeep+0x384>)
 8005548:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800554a:	4b50      	ldr	r3, [pc, #320]	@ (800568c <ESP_Upkeep+0x38c>)
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005550:	4b5a      	ldr	r3, [pc, #360]	@ (80056bc <ESP_Upkeep+0x3bc>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02e      	beq.n	80055b6 <ESP_Upkeep+0x2b6>
 8005558:	4b5c      	ldr	r3, [pc, #368]	@ (80056cc <ESP_Upkeep+0x3cc>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02a      	beq.n	80055b6 <ESP_Upkeep+0x2b6>
 8005560:	4b5c      	ldr	r3, [pc, #368]	@ (80056d4 <ESP_Upkeep+0x3d4>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d026      	beq.n	80055b6 <ESP_Upkeep+0x2b6>
 8005568:	4b5c      	ldr	r3, [pc, #368]	@ (80056dc <ESP_Upkeep+0x3dc>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2201      	movs	r2, #1
 800556e:	4053      	eors	r3, r2
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01f      	beq.n	80055b6 <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005576:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005578:	4a59      	ldr	r2, [pc, #356]	@ (80056e0 <ESP_Upkeep+0x3e0>)
 800557a:	8811      	ldrh	r1, [r2, #0]
 800557c:	8019      	strh	r1, [r3, #0]
 800557e:	7892      	ldrb	r2, [r2, #2]
 8005580:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005582:	4b3e      	ldr	r3, [pc, #248]	@ (800567c <ESP_Upkeep+0x37c>)
 8005584:	2204      	movs	r2, #4
 8005586:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005588:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <ESP_Upkeep+0x388>)
 8005590:	2202      	movs	r2, #2
 8005592:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005594:	f008 fdb4 	bl	800e100 <HAL_GetTick>
 8005598:	0002      	movs	r2, r0
 800559a:	4b52      	ldr	r3, [pc, #328]	@ (80056e4 <ESP_Upkeep+0x3e4>)
 800559c:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800559e:	f007 fab3 	bl	800cb08 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055a2:	4b49      	ldr	r3, [pc, #292]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	001a      	movs	r2, r3
 80055a8:	4b43      	ldr	r3, [pc, #268]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80055aa:	5c9a      	ldrb	r2, [r3, r2]
 80055ac:	4b35      	ldr	r3, [pc, #212]	@ (8005684 <ESP_Upkeep+0x384>)
 80055ae:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <ESP_Upkeep+0x38c>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80055b6:	4b4c      	ldr	r3, [pc, #304]	@ (80056e8 <ESP_Upkeep+0x3e8>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d01a      	beq.n	80055f4 <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80055be:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80055c0:	4a4a      	ldr	r2, [pc, #296]	@ (80056ec <ESP_Upkeep+0x3ec>)
 80055c2:	6811      	ldr	r1, [r2, #0]
 80055c4:	6019      	str	r1, [r3, #0]
 80055c6:	7912      	ldrb	r2, [r2, #4]
 80055c8:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80055ca:	4b2c      	ldr	r3, [pc, #176]	@ (800567c <ESP_Upkeep+0x37c>)
 80055cc:	2204      	movs	r2, #4
 80055ce:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055d0:	4b3d      	ldr	r3, [pc, #244]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80055d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <ESP_Upkeep+0x388>)
 80055d8:	2203      	movs	r2, #3
 80055da:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80055dc:	f007 fa94 	bl	800cb08 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055e0:	4b39      	ldr	r3, [pc, #228]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	001a      	movs	r2, r3
 80055e6:	4b34      	ldr	r3, [pc, #208]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 80055e8:	5c9a      	ldrb	r2, [r3, r2]
 80055ea:	4b26      	ldr	r3, [pc, #152]	@ (8005684 <ESP_Upkeep+0x384>)
 80055ec:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055ee:	4b27      	ldr	r3, [pc, #156]	@ (800568c <ESP_Upkeep+0x38c>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80055f4:	4b31      	ldr	r3, [pc, #196]	@ (80056bc <ESP_Upkeep+0x3bc>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d100      	bne.n	80055fe <ESP_Upkeep+0x2fe>
 80055fc:	e2bf      	b.n	8005b7e <ESP_Upkeep+0x87e>
 80055fe:	4b33      	ldr	r3, [pc, #204]	@ (80056cc <ESP_Upkeep+0x3cc>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d100      	bne.n	8005608 <ESP_Upkeep+0x308>
 8005606:	e2ba      	b.n	8005b7e <ESP_Upkeep+0x87e>
 8005608:	4b32      	ldr	r3, [pc, #200]	@ (80056d4 <ESP_Upkeep+0x3d4>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d100      	bne.n	8005612 <ESP_Upkeep+0x312>
 8005610:	e2b5      	b.n	8005b7e <ESP_Upkeep+0x87e>
 8005612:	4b32      	ldr	r3, [pc, #200]	@ (80056dc <ESP_Upkeep+0x3dc>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d100      	bne.n	800561c <ESP_Upkeep+0x31c>
 800561a:	e2b0      	b.n	8005b7e <ESP_Upkeep+0x87e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 800561c:	4b34      	ldr	r3, [pc, #208]	@ (80056f0 <ESP_Upkeep+0x3f0>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 8005622:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005624:	4b15      	ldr	r3, [pc, #84]	@ (800567c <ESP_Upkeep+0x37c>)
 8005626:	2204      	movs	r2, #4
 8005628:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800562a:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005630:	4b15      	ldr	r3, [pc, #84]	@ (8005688 <ESP_Upkeep+0x388>)
 8005632:	2205      	movs	r2, #5
 8005634:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005636:	f008 fd63 	bl	800e100 <HAL_GetTick>
 800563a:	0002      	movs	r2, r0
 800563c:	4b29      	ldr	r3, [pc, #164]	@ (80056e4 <ESP_Upkeep+0x3e4>)
 800563e:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005640:	f007 fa62 	bl	800cb08 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005644:	4b20      	ldr	r3, [pc, #128]	@ (80056c8 <ESP_Upkeep+0x3c8>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	001a      	movs	r2, r3
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <ESP_Upkeep+0x3b8>)
 800564c:	5c9a      	ldrb	r2, [r3, r2]
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <ESP_Upkeep+0x384>)
 8005650:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005652:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <ESP_Upkeep+0x38c>)
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005658:	e291      	b.n	8005b7e <ESP_Upkeep+0x87e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800565a:	4b0a      	ldr	r3, [pc, #40]	@ (8005684 <ESP_Upkeep+0x384>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	1dfc      	adds	r4, r7, #7
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fb6f 	bl	8004d44 <AT_Send>
 8005666:	0003      	movs	r3, r0
 8005668:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800566a:	1dfb      	adds	r3, r7, #7
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d100      	bne.n	8005674 <ESP_Upkeep+0x374>
 8005672:	e286      	b.n	8005b82 <ESP_Upkeep+0x882>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005674:	4b01      	ldr	r3, [pc, #4]	@ (800567c <ESP_Upkeep+0x37c>)
 8005676:	2203      	movs	r2, #3
 8005678:	701a      	strb	r2, [r3, #0]
        }
    break;
 800567a:	e282      	b.n	8005b82 <ESP_Upkeep+0x882>
 800567c:	20000028 	.word	0x20000028
 8005680:	20000002 	.word	0x20000002
 8005684:	200009a2 	.word	0x200009a2
 8005688:	200009a3 	.word	0x200009a3
 800568c:	200009a1 	.word	0x200009a1
 8005690:	08022da4 	.word	0x08022da4
 8005694:	080224c0 	.word	0x080224c0
 8005698:	08024364 	.word	0x08024364
 800569c:	20000548 	.word	0x20000548
 80056a0:	50000800 	.word	0x50000800
 80056a4:	50001c00 	.word	0x50001c00
 80056a8:	20000994 	.word	0x20000994
 80056ac:	20000448 	.word	0x20000448
 80056b0:	20000aa8 	.word	0x20000aa8
 80056b4:	2000002a 	.word	0x2000002a
 80056b8:	20000984 	.word	0x20000984
 80056bc:	20000549 	.word	0x20000549
 80056c0:	2000054a 	.word	0x2000054a
 80056c4:	20000004 	.word	0x20000004
 80056c8:	2000098e 	.word	0x2000098e
 80056cc:	2000054c 	.word	0x2000054c
 80056d0:	20000014 	.word	0x20000014
 80056d4:	2000054d 	.word	0x2000054d
 80056d8:	20000010 	.word	0x20000010
 80056dc:	20000001 	.word	0x20000001
 80056e0:	2000000c 	.word	0x2000000c
 80056e4:	2000055c 	.word	0x2000055c
 80056e8:	2000054b 	.word	0x2000054b
 80056ec:	2000001c 	.word	0x2000001c
 80056f0:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80056f4:	4be0      	ldr	r3, [pc, #896]	@ (8005a78 <ESP_Upkeep+0x778>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f008 f85f 	bl	800d7bc <TimestampIsReached>
 80056fe:	1e03      	subs	r3, r0, #0
 8005700:	d100      	bne.n	8005704 <ESP_Upkeep+0x404>
 8005702:	e240      	b.n	8005b86 <ESP_Upkeep+0x886>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005704:	4bdd      	ldr	r3, [pc, #884]	@ (8005a7c <ESP_Upkeep+0x77c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	0018      	movs	r0, r3
 800570a:	f7ff f9c7 	bl	8004a9c <DMA_ProcessBuffer>
 800570e:	0003      	movs	r3, r0
 8005710:	001a      	movs	r2, r3
 8005712:	4bdb      	ldr	r3, [pc, #876]	@ (8005a80 <ESP_Upkeep+0x780>)
 8005714:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005716:	4bda      	ldr	r3, [pc, #872]	@ (8005a80 <ESP_Upkeep+0x780>)
 8005718:	781a      	ldrb	r2, [r3, #0]
 800571a:	4bd8      	ldr	r3, [pc, #864]	@ (8005a7c <ESP_Upkeep+0x77c>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	1d7c      	adds	r4, r7, #5
 8005720:	0019      	movs	r1, r3
 8005722:	0010      	movs	r0, r2
 8005724:	f7ff facc 	bl	8004cc0 <ATCompare>
 8005728:	0003      	movs	r3, r0
 800572a:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800572c:	4bd4      	ldr	r3, [pc, #848]	@ (8005a80 <ESP_Upkeep+0x780>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d139      	bne.n	80057a8 <ESP_Upkeep+0x4a8>
          if(ATCommand == AT_SENDDATA){
 8005734:	4bd3      	ldr	r3, [pc, #844]	@ (8005a84 <ESP_Upkeep+0x784>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d108      	bne.n	800574e <ESP_Upkeep+0x44e>
            ATCommand = AT_HTTPCPOST;
 800573c:	4bd1      	ldr	r3, [pc, #836]	@ (8005a84 <ESP_Upkeep+0x784>)
 800573e:	220e      	movs	r2, #14
 8005740:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005742:	4bce      	ldr	r3, [pc, #824]	@ (8005a7c <ESP_Upkeep+0x77c>)
 8005744:	2202      	movs	r2, #2
 8005746:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005748:	4bcf      	ldr	r3, [pc, #828]	@ (8005a88 <ESP_Upkeep+0x788>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800574e:	4bcf      	ldr	r3, [pc, #828]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005750:	2204      	movs	r2, #4
 8005752:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005754:	4bce      	ldr	r3, [pc, #824]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	3301      	adds	r3, #1
 800575a:	b2da      	uxtb	r2, r3
 800575c:	4bcc      	ldr	r3, [pc, #816]	@ (8005a90 <ESP_Upkeep+0x790>)
 800575e:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005760:	4bcb      	ldr	r3, [pc, #812]	@ (8005a90 <ESP_Upkeep+0x790>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d11f      	bne.n	80057a8 <ESP_Upkeep+0x4a8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005768:	f008 fcca 	bl	800e100 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	4ac9      	ldr	r2, [pc, #804]	@ (8005a94 <ESP_Upkeep+0x794>)
 8005770:	189a      	adds	r2, r3, r2
 8005772:	4bc1      	ldr	r3, [pc, #772]	@ (8005a78 <ESP_Upkeep+0x778>)
 8005774:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005776:	4bc8      	ldr	r3, [pc, #800]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 800577c:	f007 f9dc 	bl	800cb38 <ResetESPIndicator>
            clearDMABuffer();
 8005780:	f7ff fa90 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005784:	f008 fcbc 	bl	800e100 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	4bc4      	ldr	r3, [pc, #784]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800578c:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800578e:	4bc3      	ldr	r3, [pc, #780]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4bc3      	ldr	r3, [pc, #780]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	4ac2      	ldr	r2, [pc, #776]	@ (8005aa4 <ESP_Upkeep+0x7a4>)
 800579a:	49c3      	ldr	r1, [pc, #780]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800579c:	2003      	movs	r0, #3
 800579e:	f008 f863 	bl	800d868 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80057a2:	4bba      	ldr	r3, [pc, #744]	@ (8005a8c <ESP_Upkeep+0x78c>)
 80057a4:	220d      	movs	r2, #13
 80057a6:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80057a8:	4bb5      	ldr	r3, [pc, #724]	@ (8005a80 <ESP_Upkeep+0x780>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d106      	bne.n	80057be <ESP_Upkeep+0x4be>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057b0:	f008 fca6 	bl	800e100 <HAL_GetTick>
 80057b4:	0003      	movs	r3, r0
 80057b6:	330a      	adds	r3, #10
 80057b8:	001a      	movs	r2, r3
 80057ba:	4baf      	ldr	r3, [pc, #700]	@ (8005a78 <ESP_Upkeep+0x778>)
 80057bc:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80057be:	4bb0      	ldr	r3, [pc, #704]	@ (8005a80 <ESP_Upkeep+0x780>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b0a      	cmp	r3, #10
 80057c4:	d106      	bne.n	80057d4 <ESP_Upkeep+0x4d4>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057c6:	f008 fc9b 	bl	800e100 <HAL_GetTick>
 80057ca:	0003      	movs	r3, r0
 80057cc:	330a      	adds	r3, #10
 80057ce:	001a      	movs	r2, r3
 80057d0:	4ba9      	ldr	r3, [pc, #676]	@ (8005a78 <ESP_Upkeep+0x778>)
 80057d2:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80057d4:	4baa      	ldr	r3, [pc, #680]	@ (8005a80 <ESP_Upkeep+0x780>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d146      	bne.n	800586a <ESP_Upkeep+0x56a>
//====
          timeoutcntr++;
 80057dc:	4bb3      	ldr	r3, [pc, #716]	@ (8005aac <ESP_Upkeep+0x7ac>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	3301      	adds	r3, #1
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4bb1      	ldr	r3, [pc, #708]	@ (8005aac <ESP_Upkeep+0x7ac>)
 80057e6:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 80057e8:	4bb0      	ldr	r3, [pc, #704]	@ (8005aac <ESP_Upkeep+0x7ac>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d125      	bne.n	800583c <ESP_Upkeep+0x53c>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80057f0:	f008 fc86 	bl	800e100 <HAL_GetTick>
 80057f4:	0003      	movs	r3, r0
 80057f6:	4aa7      	ldr	r2, [pc, #668]	@ (8005a94 <ESP_Upkeep+0x794>)
 80057f8:	189a      	adds	r2, r3, r2
 80057fa:	4b9f      	ldr	r3, [pc, #636]	@ (8005a78 <ESP_Upkeep+0x778>)
 80057fc:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80057fe:	4ba6      	ldr	r3, [pc, #664]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005804:	f007 f998 	bl	800cb38 <ResetESPIndicator>
            clearDMABuffer();
 8005808:	f7ff fa4c 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 800580c:	f008 fc78 	bl	800e100 <HAL_GetTick>
 8005810:	0002      	movs	r2, r0
 8005812:	4ba2      	ldr	r3, [pc, #648]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005814:	601a      	str	r2, [r3, #0]
            Debug("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005816:	4ba1      	ldr	r3, [pc, #644]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4ba1      	ldr	r3, [pc, #644]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	4aa3      	ldr	r2, [pc, #652]	@ (8005ab0 <ESP_Upkeep+0x7b0>)
 8005822:	49a1      	ldr	r1, [pc, #644]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005824:	2003      	movs	r0, #3
 8005826:	f008 f81f 	bl	800d868 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800582a:	4b98      	ldr	r3, [pc, #608]	@ (8005a8c <ESP_Upkeep+0x78c>)
 800582c:	220d      	movs	r2, #13
 800582e:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8005830:	4b94      	ldr	r3, [pc, #592]	@ (8005a84 <ESP_Upkeep+0x784>)
 8005832:	2214      	movs	r2, #20
 8005834:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005836:	4b91      	ldr	r3, [pc, #580]	@ (8005a7c <ESP_Upkeep+0x77c>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
          }
//====
          if(ATCommand != AT_SENDDATA){
 800583c:	4b91      	ldr	r3, [pc, #580]	@ (8005a84 <ESP_Upkeep+0x784>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b0f      	cmp	r3, #15
 8005842:	d003      	beq.n	800584c <ESP_Upkeep+0x54c>
            EspState = ESP_STATE_SEND;
 8005844:	4b91      	ldr	r3, [pc, #580]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005846:	2204      	movs	r2, #4
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e00e      	b.n	800586a <ESP_Upkeep+0x56a>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 800584c:	4b8d      	ldr	r3, [pc, #564]	@ (8005a84 <ESP_Upkeep+0x784>)
 800584e:	220e      	movs	r2, #14
 8005850:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005852:	4b8d      	ldr	r3, [pc, #564]	@ (8005a88 <ESP_Upkeep+0x788>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	3b01      	subs	r3, #1
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a88 <ESP_Upkeep+0x788>)
 800585c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800585e:	4b87      	ldr	r3, [pc, #540]	@ (8005a7c <ESP_Upkeep+0x77c>)
 8005860:	2202      	movs	r2, #2
 8005862:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005864:	4b89      	ldr	r3, [pc, #548]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005866:	2204      	movs	r2, #4
 8005868:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800586a:	1d7b      	adds	r3, r7, #5
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <ESP_Upkeep+0x574>
 8005872:	e188      	b.n	8005b86 <ESP_Upkeep+0x886>
          EspState = ESP_STATE_NEXT_AT;
 8005874:	4b85      	ldr	r3, [pc, #532]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005876:	2205      	movs	r2, #5
 8005878:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800587a:	e184      	b.n	8005b86 <ESP_Upkeep+0x886>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 800587c:	4b82      	ldr	r3, [pc, #520]	@ (8005a88 <ESP_Upkeep+0x788>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b80      	ldr	r3, [pc, #512]	@ (8005a88 <ESP_Upkeep+0x788>)
 8005886:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005888:	4b7f      	ldr	r3, [pc, #508]	@ (8005a88 <ESP_Upkeep+0x788>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	001a      	movs	r2, r3
 800588e:	4b89      	ldr	r3, [pc, #548]	@ (8005ab4 <ESP_Upkeep+0x7b4>)
 8005890:	5c9a      	ldrb	r2, [r3, r2]
 8005892:	4b7c      	ldr	r3, [pc, #496]	@ (8005a84 <ESP_Upkeep+0x784>)
 8005894:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005896:	4b7b      	ldr	r3, [pc, #492]	@ (8005a84 <ESP_Upkeep+0x784>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d102      	bne.n	80058a4 <ESP_Upkeep+0x5a4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800589e:	4b77      	ldr	r3, [pc, #476]	@ (8005a7c <ESP_Upkeep+0x77c>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80058a4:	4b77      	ldr	r3, [pc, #476]	@ (8005a84 <ESP_Upkeep+0x784>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b0e      	cmp	r3, #14
 80058aa:	d102      	bne.n	80058b2 <ESP_Upkeep+0x5b2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80058ac:	4b73      	ldr	r3, [pc, #460]	@ (8005a7c <ESP_Upkeep+0x77c>)
 80058ae:	2202      	movs	r2, #2
 80058b0:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80058b2:	4b74      	ldr	r3, [pc, #464]	@ (8005a84 <ESP_Upkeep+0x784>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b0e      	cmp	r3, #14
 80058b8:	d006      	beq.n	80058c8 <ESP_Upkeep+0x5c8>
 80058ba:	4b72      	ldr	r3, [pc, #456]	@ (8005a84 <ESP_Upkeep+0x784>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b03      	cmp	r3, #3
 80058c0:	d002      	beq.n	80058c8 <ESP_Upkeep+0x5c8>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a7c <ESP_Upkeep+0x77c>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80058c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005a84 <ESP_Upkeep+0x784>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b11      	cmp	r3, #17
 80058ce:	d102      	bne.n	80058d6 <ESP_Upkeep+0x5d6>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80058d0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a7c <ESP_Upkeep+0x77c>)
 80058d2:	2205      	movs	r2, #5
 80058d4:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80058d6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a8c <ESP_Upkeep+0x78c>)
 80058d8:	2204      	movs	r2, #4
 80058da:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80058dc:	4b69      	ldr	r3, [pc, #420]	@ (8005a84 <ESP_Upkeep+0x784>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b14      	cmp	r3, #20
 80058e2:	d000      	beq.n	80058e6 <ESP_Upkeep+0x5e6>
 80058e4:	e151      	b.n	8005b8a <ESP_Upkeep+0x88a>
        if(Mode == AT_MODE_SEND){
 80058e6:	4b74      	ldr	r3, [pc, #464]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d122      	bne.n	8005934 <ESP_Upkeep+0x634>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80058ee:	f008 fc07 	bl	800e100 <HAL_GetTick>
 80058f2:	0003      	movs	r3, r0
 80058f4:	4a67      	ldr	r2, [pc, #412]	@ (8005a94 <ESP_Upkeep+0x794>)
 80058f6:	189a      	adds	r2, r3, r2
 80058f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a78 <ESP_Upkeep+0x778>)
 80058fa:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80058fc:	f007 f91c 	bl	800cb38 <ResetESPIndicator>
          clearDMABuffer();
 8005900:	f7ff f9d0 	bl	8004ca4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005904:	f008 fbfc 	bl	800e100 <HAL_GetTick>
 8005908:	0002      	movs	r2, r0
 800590a:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800590c:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 800590e:	4b63      	ldr	r3, [pc, #396]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	4b63      	ldr	r3, [pc, #396]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	4a68      	ldr	r2, [pc, #416]	@ (8005abc <ESP_Upkeep+0x7bc>)
 800591a:	4963      	ldr	r1, [pc, #396]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 800591c:	2003      	movs	r0, #3
 800591e:	f007 ffa3 	bl	800d868 <CreateLine>
          showTime();
 8005922:	f000 fcc9 	bl	80062b8 <showTime>
          ESPTransmitDone = true;
 8005926:	4b5c      	ldr	r3, [pc, #368]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 800592c:	4b57      	ldr	r3, [pc, #348]	@ (8005a8c <ESP_Upkeep+0x78c>)
 800592e:	220d      	movs	r2, #13
 8005930:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005932:	e12a      	b.n	8005b8a <ESP_Upkeep+0x88a>
        else if (Mode == AT_MODE_GETTIME) {
 8005934:	4b60      	ldr	r3, [pc, #384]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d12e      	bne.n	800599a <ESP_Upkeep+0x69a>
            setTime = false;
 800593c:	4b60      	ldr	r3, [pc, #384]	@ (8005ac0 <ESP_Upkeep+0x7c0>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005942:	f008 fbdd 	bl	800e100 <HAL_GetTick>
 8005946:	0003      	movs	r3, r0
 8005948:	4a5e      	ldr	r2, [pc, #376]	@ (8005ac4 <ESP_Upkeep+0x7c4>)
 800594a:	189a      	adds	r2, r3, r2
 800594c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ac8 <ESP_Upkeep+0x7c8>)
 800594e:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005950:	4b5d      	ldr	r3, [pc, #372]	@ (8005ac8 <ESP_Upkeep+0x7c8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5d      	ldr	r2, [pc, #372]	@ (8005acc <ESP_Upkeep+0x7cc>)
 8005956:	4954      	ldr	r1, [pc, #336]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005958:	2003      	movs	r0, #3
 800595a:	f007 ff85 	bl	800d868 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 800595e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad0 <ESP_Upkeep+0x7d0>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b45      	ldr	r3, [pc, #276]	@ (8005a78 <ESP_Upkeep+0x778>)
 8005964:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005966:	f007 f8e7 	bl	800cb38 <ResetESPIndicator>
            clearDMABuffer();
 800596a:	f7ff f99b 	bl	8004ca4 <clearDMABuffer>
            stop = HAL_GetTick();
 800596e:	f008 fbc7 	bl	800e100 <HAL_GetTick>
 8005972:	0002      	movs	r2, r0
 8005974:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <ESP_Upkeep+0x79c>)
 8005976:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 8005978:	4b48      	ldr	r3, [pc, #288]	@ (8005a9c <ESP_Upkeep+0x79c>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b48      	ldr	r3, [pc, #288]	@ (8005aa0 <ESP_Upkeep+0x7a0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	4a54      	ldr	r2, [pc, #336]	@ (8005ad4 <ESP_Upkeep+0x7d4>)
 8005984:	4948      	ldr	r1, [pc, #288]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005986:	2003      	movs	r0, #3
 8005988:	f007 ff6e 	bl	800d868 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800598c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a8c <ESP_Upkeep+0x78c>)
 800598e:	220d      	movs	r2, #13
 8005990:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005992:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005994:	2202      	movs	r2, #2
 8005996:	701a      	strb	r2, [r3, #0]
    break;
 8005998:	e0f7      	b.n	8005b8a <ESP_Upkeep+0x88a>
          EspState = ESP_STATE_RESET;
 800599a:	4b3c      	ldr	r3, [pc, #240]	@ (8005a8c <ESP_Upkeep+0x78c>)
 800599c:	2209      	movs	r2, #9
 800599e:	701a      	strb	r2, [r3, #0]
    break;
 80059a0:	e0f3      	b.n	8005b8a <ESP_Upkeep+0x88a>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80059a2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad8 <ESP_Upkeep+0x7d8>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80059a8:	4b4c      	ldr	r3, [pc, #304]	@ (8005adc <ESP_Upkeep+0x7dc>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	2101      	movs	r1, #1
 80059ae:	0018      	movs	r0, r3
 80059b0:	f009 fe21 	bl	800f5f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f008 fbad 	bl	800e114 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80059ba:	2380      	movs	r3, #128	@ 0x80
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	4848      	ldr	r0, [pc, #288]	@ (8005ae0 <ESP_Upkeep+0x7e0>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	0019      	movs	r1, r3
 80059c4:	f009 fe17 	bl	800f5f6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059c8:	2001      	movs	r0, #1
 80059ca:	f008 fba3 	bl	800e114 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80059ce:	4b43      	ldr	r3, [pc, #268]	@ (8005adc <ESP_Upkeep+0x7dc>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	2102      	movs	r1, #2
 80059d4:	0018      	movs	r0, r3
 80059d6:	f009 fe0e 	bl	800f5f6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80059da:	4b2c      	ldr	r3, [pc, #176]	@ (8005a8c <ESP_Upkeep+0x78c>)
 80059dc:	2209      	movs	r2, #9
 80059de:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80059e0:	2001      	movs	r0, #1
 80059e2:	f008 fb97 	bl	800e114 <HAL_Delay>
      errorcntr = 0;
 80059e6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a90 <ESP_Upkeep+0x790>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
      break;
 80059ec:	e0d0      	b.n	8005b90 <ESP_Upkeep+0x890>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80059ee:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <ESP_Upkeep+0x778>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f007 fee2 	bl	800d7bc <TimestampIsReached>
 80059f8:	1e03      	subs	r3, r0, #0
 80059fa:	d104      	bne.n	8005a06 <ESP_Upkeep+0x706>
 80059fc:	4b39      	ldr	r3, [pc, #228]	@ (8005ae4 <ESP_Upkeep+0x7e4>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d100      	bne.n	8005a06 <ESP_Upkeep+0x706>
 8005a04:	e07a      	b.n	8005afc <ESP_Upkeep+0x7fc>
        ESPTransmitDone = false;
 8005a06:	4b24      	ldr	r3, [pc, #144]	@ (8005a98 <ESP_Upkeep+0x798>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <ESP_Upkeep+0x720>
          InitIsDone = true;
 8005a14:	4b34      	ldr	r3, [pc, #208]	@ (8005ae8 <ESP_Upkeep+0x7e8>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005a20:	4b25      	ldr	r3, [pc, #148]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d108      	bne.n	8005a3a <ESP_Upkeep+0x73a>
          ConnectionMade = true;
 8005a28:	4b30      	ldr	r3, [pc, #192]	@ (8005aec <ESP_Upkeep+0x7ec>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005a2e:	4b30      	ldr	r3, [pc, #192]	@ (8005af0 <ESP_Upkeep+0x7f0>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a34:	4b15      	ldr	r3, [pc, #84]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005a36:	220b      	movs	r2, #11
 8005a38:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d102      	bne.n	8005a48 <ESP_Upkeep+0x748>
          EspState = ESP_STATE_INIT;
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005a44:	2202      	movs	r2, #2
 8005a46:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005a48:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d108      	bne.n	8005a62 <ESP_Upkeep+0x762>
          EspState = ESP_STATE_CONFIG;
 8005a50:	4b0e      	ldr	r3, [pc, #56]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005a52:	220e      	movs	r2, #14
 8005a54:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005a56:	4a27      	ldr	r2, [pc, #156]	@ (8005af4 <ESP_Upkeep+0x7f4>)
 8005a58:	4b13      	ldr	r3, [pc, #76]	@ (8005aa8 <ESP_Upkeep+0x7a8>)
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	2003      	movs	r0, #3
 8005a5e:	f007 ff03 	bl	800d868 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005a62:	4b15      	ldr	r3, [pc, #84]	@ (8005ab8 <ESP_Upkeep+0x7b8>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d167      	bne.n	8005b3a <ESP_Upkeep+0x83a>
          EspState = ESP_STATE_MODE_SELECT;
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <ESP_Upkeep+0x78c>)
 8005a6c:	220b      	movs	r2, #11
 8005a6e:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005a70:	4b21      	ldr	r3, [pc, #132]	@ (8005af8 <ESP_Upkeep+0x7f8>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005a76:	e060      	b.n	8005b3a <ESP_Upkeep+0x83a>
 8005a78:	20000994 	.word	0x20000994
 8005a7c:	200009a1 	.word	0x200009a1
 8005a80:	2000002a 	.word	0x2000002a
 8005a84:	200009a2 	.word	0x200009a2
 8005a88:	2000098e 	.word	0x2000098e
 8005a8c:	20000028 	.word	0x20000028
 8005a90:	2000098f 	.word	0x2000098f
 8005a94:	000493e0 	.word	0x000493e0
 8005a98:	2000054f 	.word	0x2000054f
 8005a9c:	20000560 	.word	0x20000560
 8005aa0:	2000055c 	.word	0x2000055c
 8005aa4:	08022dd0 	.word	0x08022dd0
 8005aa8:	080224c0 	.word	0x080224c0
 8005aac:	20000990 	.word	0x20000990
 8005ab0:	08022e04 	.word	0x08022e04
 8005ab4:	20000984 	.word	0x20000984
 8005ab8:	200009a3 	.word	0x200009a3
 8005abc:	08022e34 	.word	0x08022e34
 8005ac0:	20000001 	.word	0x20000001
 8005ac4:	002c4020 	.word	0x002c4020
 8005ac8:	20000998 	.word	0x20000998
 8005acc:	08022e4c 	.word	0x08022e4c
 8005ad0:	2000099c 	.word	0x2000099c
 8005ad4:	08022e90 	.word	0x08022e90
 8005ad8:	20000548 	.word	0x20000548
 8005adc:	50001c00 	.word	0x50001c00
 8005ae0:	50000800 	.word	0x50000800
 8005ae4:	2000054b 	.word	0x2000054b
 8005ae8:	20000549 	.word	0x20000549
 8005aec:	2000054c 	.word	0x2000054c
 8005af0:	2000054e 	.word	0x2000054e
 8005af4:	08022eb0 	.word	0x08022eb0
 8005af8:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005afc:	4b27      	ldr	r3, [pc, #156]	@ (8005b9c <ESP_Upkeep+0x89c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f007 fe5b 	bl	800d7bc <TimestampIsReached>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d041      	beq.n	8005b8e <ESP_Upkeep+0x88e>
        if(Mode == AT_MODE_SEND ) {
 8005b0a:	4b25      	ldr	r3, [pc, #148]	@ (8005ba0 <ESP_Upkeep+0x8a0>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d13d      	bne.n	8005b8e <ESP_Upkeep+0x88e>
            Mode = AT_MODE_GETTIME;
 8005b12:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <ESP_Upkeep+0x8a0>)
 8005b14:	2205      	movs	r2, #5
 8005b16:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005b18:	4b22      	ldr	r3, [pc, #136]	@ (8005ba4 <ESP_Upkeep+0x8a4>)
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005b1e:	4b22      	ldr	r3, [pc, #136]	@ (8005ba8 <ESP_Upkeep+0x8a8>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <ESP_Upkeep+0x8ac>)
 8005b24:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005b26:	4b22      	ldr	r3, [pc, #136]	@ (8005bb0 <ESP_Upkeep+0x8b0>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <ESP_Upkeep+0x8b4>)
 8005b2e:	4b22      	ldr	r3, [pc, #136]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b30:	0019      	movs	r1, r3
 8005b32:	2003      	movs	r0, #3
 8005b34:	f007 fe98 	bl	800d868 <CreateLine>
        }
      }
      break;
 8005b38:	e029      	b.n	8005b8e <ESP_Upkeep+0x88e>
 8005b3a:	e028      	b.n	8005b8e <ESP_Upkeep+0x88e>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005b3c:	f016 faf4 	bl	801c128 <GetUsbRxPointer>
 8005b40:	0003      	movs	r3, r0
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f8b0 	bl	8005ca8 <Process_PC_Config>
      break;
 8005b48:	e022      	b.n	8005b90 <ESP_Upkeep+0x890>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <ESP_Upkeep+0x8bc>)
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b4e:	0019      	movs	r1, r3
 8005b50:	2003      	movs	r0, #3
 8005b52:	f007 fe89 	bl	800d868 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005b56:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <ESP_Upkeep+0x8a4>)
 8005b58:	2202      	movs	r2, #2
 8005b5a:	701a      	strb	r2, [r3, #0]
      break;
 8005b5c:	e018      	b.n	8005b90 <ESP_Upkeep+0x890>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <ESP_Upkeep+0x8c0>)
 8005b60:	4b15      	ldr	r3, [pc, #84]	@ (8005bb8 <ESP_Upkeep+0x8b8>)
 8005b62:	0019      	movs	r1, r3
 8005b64:	2003      	movs	r0, #3
 8005b66:	f007 fe7f 	bl	800d868 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba4 <ESP_Upkeep+0x8a4>)
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	701a      	strb	r2, [r3, #0]
      break;
 8005b70:	e00e      	b.n	8005b90 <ESP_Upkeep+0x890>
      break;
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	e00c      	b.n	8005b90 <ESP_Upkeep+0x890>
      break;
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	e00a      	b.n	8005b90 <ESP_Upkeep+0x890>
        break;
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	e008      	b.n	8005b90 <ESP_Upkeep+0x890>
    break;
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	e006      	b.n	8005b90 <ESP_Upkeep+0x890>
    break;
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	e004      	b.n	8005b90 <ESP_Upkeep+0x890>
      break;
 8005b86:	46c0      	nop			@ (mov r8, r8)
 8005b88:	e002      	b.n	8005b90 <ESP_Upkeep+0x890>
    break;
 8005b8a:	46c0      	nop			@ (mov r8, r8)
 8005b8c:	e000      	b.n	8005b90 <ESP_Upkeep+0x890>
      break;
 8005b8e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <ESP_Upkeep+0x8a4>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b002      	add	sp, #8
 8005b9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9c:	20000998 	.word	0x20000998
 8005ba0:	200009a3 	.word	0x200009a3
 8005ba4:	20000028 	.word	0x20000028
 8005ba8:	20000994 	.word	0x20000994
 8005bac:	2000099c 	.word	0x2000099c
 8005bb0:	20000001 	.word	0x20000001
 8005bb4:	08022ec8 	.word	0x08022ec8
 8005bb8:	080224c0 	.word	0x080224c0
 8005bbc:	08022ed8 	.word	0x08022ed8
 8005bc0:	08022eec 	.word	0x08022eec

08005bc4 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005bcc:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <I2CSensors_Init+0x30>)
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005bd2:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <I2CSensors_Init+0x34>)
 8005bd4:	4b09      	ldr	r3, [pc, #36]	@ (8005bfc <I2CSensors_Init+0x38>)
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f007 ff9f 	bl	800db1c <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005bde:	4a06      	ldr	r2, [pc, #24]	@ (8005bf8 <I2CSensors_Init+0x34>)
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <I2CSensors_Init+0x38>)
 8005be2:	0011      	movs	r1, r2
 8005be4:	0018      	movs	r0, r3
 8005be6:	f005 f969 	bl	800aebc <SGP_Init>
}
 8005bea:	46c0      	nop			@ (mov r8, r8)
 8005bec:	46bd      	mov	sp, r7
 8005bee:	b002      	add	sp, #8
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	20000aac 	.word	0x20000aac
 8005bf8:	08005c55 	.word	0x08005c55
 8005bfc:	08005c01 	.word	0x08005c01

08005c00 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c00:	b5b0      	push	{r4, r5, r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6039      	str	r1, [r7, #0]
 8005c08:	0011      	movs	r1, r2
 8005c0a:	1dfb      	adds	r3, r7, #7
 8005c0c:	1c02      	adds	r2, r0, #0
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	1dbb      	adds	r3, r7, #6
 8005c12:	1c0a      	adds	r2, r1, #0
 8005c14:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c16:	4b0e      	ldr	r3, [pc, #56]	@ (8005c50 <ReadI2C+0x50>)
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	1dfb      	adds	r3, r7, #7
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	18db      	adds	r3, r3, r3
 8005c22:	b299      	uxth	r1, r3
 8005c24:	1dbb      	adds	r3, r7, #6
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	250f      	movs	r5, #15
 8005c2c:	197c      	adds	r4, r7, r5
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	f00a f8c6 	bl	800fdc0 <HAL_I2C_Master_Receive_DMA>
 8005c34:	0003      	movs	r3, r0
 8005c36:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c38:	197b      	adds	r3, r7, r5
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <ReadI2C+0x44>
        return false;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e000      	b.n	8005c46 <ReadI2C+0x46>
    }
    return true;
 8005c44:	2301      	movs	r3, #1
}
 8005c46:	0018      	movs	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b004      	add	sp, #16
 8005c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	20000aac 	.word	0x20000aac

08005c54 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c54:	b5b0      	push	{r4, r5, r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6039      	str	r1, [r7, #0]
 8005c5c:	0011      	movs	r1, r2
 8005c5e:	1dfb      	adds	r3, r7, #7
 8005c60:	1c02      	adds	r2, r0, #0
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	1dbb      	adds	r3, r7, #6
 8005c66:	1c0a      	adds	r2, r1, #0
 8005c68:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ca4 <WriteI2C+0x50>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	18db      	adds	r3, r3, r3
 8005c76:	b299      	uxth	r1, r3
 8005c78:	1dbb      	adds	r3, r7, #6
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	250f      	movs	r5, #15
 8005c80:	197c      	adds	r4, r7, r5
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	f009 ff96 	bl	800fbb4 <HAL_I2C_Master_Transmit_DMA>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c8c:	197b      	adds	r3, r7, r5
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <WriteI2C+0x44>
        return false;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e000      	b.n	8005c9a <WriteI2C+0x46>
    }
    return true;
 8005c98:	2301      	movs	r3, #1
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b004      	add	sp, #16
 8005ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca2:	46c0      	nop			@ (mov r8, r8)
 8005ca4:	20000aac 	.word	0x20000aac

08005ca8 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b0c3      	sub	sp, #268	@ 0x10c
 8005cac:	af3e      	add	r7, sp, #248	@ 0xf8
 8005cae:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005cb0:	f016 fa5a 	bl	801c168 <GetUsbRxDataSize>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d971      	bls.n	8005da2 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2123      	movs	r1, #35	@ 0x23
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f019 fc50 	bl	801f568 <strchr>
 8005cc8:	0003      	movs	r3, r0
 8005cca:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d065      	beq.n	8005d9e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	785a      	ldrb	r2, [r3, #1]
 8005cd6:	4b34      	ldr	r3, [pc, #208]	@ (8005da8 <Process_PC_Config+0x100>)
 8005cd8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	789a      	ldrb	r2, [r3, #2]
 8005cde:	4b32      	ldr	r3, [pc, #200]	@ (8005da8 <Process_PC_Config+0x100>)
 8005ce0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005ce2:	4b31      	ldr	r3, [pc, #196]	@ (8005da8 <Process_PC_Config+0x100>)
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	3305      	adds	r3, #5
 8005ce8:	001a      	movs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d351      	bcc.n	8005d94 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	1cd9      	adds	r1, r3, #3
 8005cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005da8 <Process_PC_Config+0x100>)
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8005dac <Process_PC_Config+0x104>)
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f019 fd07 	bl	801f710 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005d02:	4b29      	ldr	r3, [pc, #164]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	3303      	adds	r3, #3
 8005d08:	001a      	movs	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	189b      	adds	r3, r3, r2
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	b21a      	sxth	r2, r3
 8005d14:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d16:	785b      	ldrb	r3, [r3, #1]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	18cb      	adds	r3, r1, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b21b      	sxth	r3, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	b299      	uxth	r1, r3
 8005d28:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d2a:	2381      	movs	r3, #129	@ 0x81
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005d30:	4a1d      	ldr	r2, [pc, #116]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d32:	2381      	movs	r3, #129	@ 0x81
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	5ad4      	ldrh	r4, [r2, r3]
 8005d38:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	0011      	movs	r1, r2
 8005d44:	0018      	movs	r0, r3
 8005d46:	f000 f975 	bl	8006034 <CRC16_ARC>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d007      	beq.n	8005d60 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005d50:	4b15      	ldr	r3, [pc, #84]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d52:	785a      	ldrb	r2, [r3, #1]
 8005d54:	4b15      	ldr	r3, [pc, #84]	@ (8005dac <Process_PC_Config+0x104>)
 8005d56:	0019      	movs	r1, r3
 8005d58:	2001      	movs	r0, #1
 8005d5a:	f000 f919 	bl	8005f90 <Create_Message>
 8005d5e:	e016      	b.n	8005d8e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005d60:	4c11      	ldr	r4, [pc, #68]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d62:	466b      	mov	r3, sp
 8005d64:	0018      	movs	r0, r3
 8005d66:	0023      	movs	r3, r4
 8005d68:	3310      	adds	r3, #16
 8005d6a:	22f4      	movs	r2, #244	@ 0xf4
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	f019 fccf 	bl	801f710 <memcpy>
 8005d72:	6820      	ldr	r0, [r4, #0]
 8005d74:	6861      	ldr	r1, [r4, #4]
 8005d76:	68a2      	ldr	r2, [r4, #8]
 8005d78:	68e3      	ldr	r3, [r4, #12]
 8005d7a:	f000 f819 	bl	8005db0 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d80:	7818      	ldrb	r0, [r3, #0]
 8005d82:	4b09      	ldr	r3, [pc, #36]	@ (8005da8 <Process_PC_Config+0x100>)
 8005d84:	785a      	ldrb	r2, [r3, #1]
 8005d86:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <Process_PC_Config+0x104>)
 8005d88:	0019      	movs	r1, r3
 8005d8a:	f000 f901 	bl	8005f90 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005d8e:	f016 f9d3 	bl	801c138 <ResetUsbRxDataSize>
                return;
 8005d92:	e006      	b.n	8005da2 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f016 f9f0 	bl	801c17c <GetUsbRxNextChunk>
 8005d9c:	e001      	b.n	8005da2 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005d9e:	f016 f9cb 	bl	801c138 <ResetUsbRxDataSize>
        }
    }
}
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b005      	add	sp, #20
 8005da6:	bd90      	pop	{r4, r7, pc}
 8005da8:	20000ab0 	.word	0x20000ab0
 8005dac:	20000ab2 	.word	0x20000ab2

08005db0 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005db0:	b084      	sub	sp, #16
 8005db2:	b5b0      	push	{r4, r5, r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	2518      	movs	r5, #24
 8005dba:	197c      	adds	r4, r7, r5
 8005dbc:	6020      	str	r0, [r4, #0]
 8005dbe:	6061      	str	r1, [r4, #4]
 8005dc0:	60a2      	str	r2, [r4, #8]
 8005dc2:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005dc4:	197b      	adds	r3, r7, r5
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2bfe      	cmp	r3, #254	@ 0xfe
 8005dca:	d100      	bne.n	8005dce <ProcessCmd+0x1e>
 8005dcc:	e09c      	b.n	8005f08 <ProcessCmd+0x158>
 8005dce:	dd00      	ble.n	8005dd2 <ProcessCmd+0x22>
 8005dd0:	e0bc      	b.n	8005f4c <ProcessCmd+0x19c>
 8005dd2:	2b0c      	cmp	r3, #12
 8005dd4:	dc0a      	bgt.n	8005dec <ProcessCmd+0x3c>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da00      	bge.n	8005ddc <ProcessCmd+0x2c>
 8005dda:	e0b7      	b.n	8005f4c <ProcessCmd+0x19c>
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d900      	bls.n	8005de2 <ProcessCmd+0x32>
 8005de0:	e0b4      	b.n	8005f4c <ProcessCmd+0x19c>
 8005de2:	009a      	lsls	r2, r3, #2
 8005de4:	4b5d      	ldr	r3, [pc, #372]	@ (8005f5c <ProcessCmd+0x1ac>)
 8005de6:	18d3      	adds	r3, r2, r3
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	469f      	mov	pc, r3
 8005dec:	2bfd      	cmp	r3, #253	@ 0xfd
 8005dee:	d100      	bne.n	8005df2 <ProcessCmd+0x42>
 8005df0:	e084      	b.n	8005efc <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005df2:	e0ab      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005df4:	2118      	movs	r1, #24
 8005df6:	187b      	adds	r3, r7, r1
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	187b      	adds	r3, r7, r1
 8005dfe:	1c99      	adds	r1, r3, #2
 8005e00:	4857      	ldr	r0, [pc, #348]	@ (8005f60 <ProcessCmd+0x1b0>)
 8005e02:	230c      	movs	r3, #12
 8005e04:	f7fd fc5c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e08:	e0a0      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e0a:	2118      	movs	r1, #24
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	001a      	movs	r2, r3
 8005e12:	187b      	adds	r3, r7, r1
 8005e14:	1c99      	adds	r1, r3, #2
 8005e16:	4853      	ldr	r0, [pc, #332]	@ (8005f64 <ProcessCmd+0x1b4>)
 8005e18:	230c      	movs	r3, #12
 8005e1a:	f7fd fc51 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e1e:	e095      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e20:	2118      	movs	r1, #24
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	001a      	movs	r2, r3
 8005e28:	187b      	adds	r3, r7, r1
 8005e2a:	1c99      	adds	r1, r3, #2
 8005e2c:	484e      	ldr	r0, [pc, #312]	@ (8005f68 <ProcessCmd+0x1b8>)
 8005e2e:	230c      	movs	r3, #12
 8005e30:	f7fd fc46 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e34:	e08a      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e36:	2118      	movs	r1, #24
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	187b      	adds	r3, r7, r1
 8005e40:	1c99      	adds	r1, r3, #2
 8005e42:	484a      	ldr	r0, [pc, #296]	@ (8005f6c <ProcessCmd+0x1bc>)
 8005e44:	230c      	movs	r3, #12
 8005e46:	f7fd fc3b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e4a:	e07f      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e4c:	2118      	movs	r1, #24
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	001a      	movs	r2, r3
 8005e54:	187b      	adds	r3, r7, r1
 8005e56:	1c99      	adds	r1, r3, #2
 8005e58:	4845      	ldr	r0, [pc, #276]	@ (8005f70 <ProcessCmd+0x1c0>)
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	f7fd fc30 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e60:	e074      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e62:	2118      	movs	r1, #24
 8005e64:	187b      	adds	r3, r7, r1
 8005e66:	785b      	ldrb	r3, [r3, #1]
 8005e68:	001a      	movs	r2, r3
 8005e6a:	187b      	adds	r3, r7, r1
 8005e6c:	1c99      	adds	r1, r3, #2
 8005e6e:	4841      	ldr	r0, [pc, #260]	@ (8005f74 <ProcessCmd+0x1c4>)
 8005e70:	230c      	movs	r3, #12
 8005e72:	f7fd fc25 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e76:	e069      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e78:	2118      	movs	r1, #24
 8005e7a:	187b      	adds	r3, r7, r1
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	001a      	movs	r2, r3
 8005e80:	187b      	adds	r3, r7, r1
 8005e82:	1c99      	adds	r1, r3, #2
 8005e84:	483c      	ldr	r0, [pc, #240]	@ (8005f78 <ProcessCmd+0x1c8>)
 8005e86:	230c      	movs	r3, #12
 8005e88:	f7fd fc1a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e8c:	e05e      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005e8e:	2118      	movs	r1, #24
 8005e90:	187b      	adds	r3, r7, r1
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	001a      	movs	r2, r3
 8005e96:	187b      	adds	r3, r7, r1
 8005e98:	1c99      	adds	r1, r3, #2
 8005e9a:	4838      	ldr	r0, [pc, #224]	@ (8005f7c <ProcessCmd+0x1cc>)
 8005e9c:	231e      	movs	r3, #30
 8005e9e:	f7fd fc0f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ea2:	e053      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ea4:	2118      	movs	r1, #24
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	001a      	movs	r2, r3
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	1c99      	adds	r1, r3, #2
 8005eb0:	4833      	ldr	r0, [pc, #204]	@ (8005f80 <ProcessCmd+0x1d0>)
 8005eb2:	230c      	movs	r3, #12
 8005eb4:	f7fd fc04 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005eb8:	e048      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005eba:	2118      	movs	r1, #24
 8005ebc:	187b      	adds	r3, r7, r1
 8005ebe:	785b      	ldrb	r3, [r3, #1]
 8005ec0:	001a      	movs	r2, r3
 8005ec2:	187b      	adds	r3, r7, r1
 8005ec4:	1c99      	adds	r1, r3, #2
 8005ec6:	482f      	ldr	r0, [pc, #188]	@ (8005f84 <ProcessCmd+0x1d4>)
 8005ec8:	230c      	movs	r3, #12
 8005eca:	f7fd fbf9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ece:	e03d      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ed0:	2118      	movs	r1, #24
 8005ed2:	187b      	adds	r3, r7, r1
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	187b      	adds	r3, r7, r1
 8005eda:	1c99      	adds	r1, r3, #2
 8005edc:	482a      	ldr	r0, [pc, #168]	@ (8005f88 <ProcessCmd+0x1d8>)
 8005ede:	230c      	movs	r3, #12
 8005ee0:	f7fd fbee 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ee4:	e032      	b.n	8005f4c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ee6:	2118      	movs	r1, #24
 8005ee8:	187b      	adds	r3, r7, r1
 8005eea:	785b      	ldrb	r3, [r3, #1]
 8005eec:	001a      	movs	r2, r3
 8005eee:	187b      	adds	r3, r7, r1
 8005ef0:	1c99      	adds	r1, r3, #2
 8005ef2:	4826      	ldr	r0, [pc, #152]	@ (8005f8c <ProcessCmd+0x1dc>)
 8005ef4:	230c      	movs	r3, #12
 8005ef6:	f7fd fbe3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005efa:	e027      	b.n	8005f4c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005efc:	4b18      	ldr	r3, [pc, #96]	@ (8005f60 <ProcessCmd+0x1b0>)
 8005efe:	21ba      	movs	r1, #186	@ 0xba
 8005f00:	0018      	movs	r0, r3
 8005f02:	f7fd fc22 	bl	800374a <ClearEEprom>
        break;
 8005f06:	e021      	b.n	8005f4c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005f08:	2118      	movs	r1, #24
 8005f0a:	187b      	adds	r3, r7, r1
 8005f0c:	789b      	ldrb	r3, [r3, #2]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	b21a      	sxth	r2, r3
 8005f12:	187b      	adds	r3, r7, r1
 8005f14:	78db      	ldrb	r3, [r3, #3]
 8005f16:	b21b      	sxth	r3, r3
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	b21a      	sxth	r2, r3
 8005f1c:	1dbb      	adds	r3, r7, #6
 8005f1e:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005f20:	1dbb      	adds	r3, r7, #6
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	23c0      	movs	r3, #192	@ 0xc0
 8005f26:	015b      	lsls	r3, r3, #5
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d207      	bcs.n	8005f3c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005f2c:	1dbb      	adds	r3, r7, #6
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	4a0b      	ldr	r2, [pc, #44]	@ (8005f60 <ProcessCmd+0x1b0>)
 8005f32:	0019      	movs	r1, r3
 8005f34:	0010      	movs	r0, r2
 8005f36:	f7fd fc08 	bl	800374a <ClearEEprom>
            break;
 8005f3a:	e006      	b.n	8005f4a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005f3c:	23c0      	movs	r3, #192	@ 0xc0
 8005f3e:	015b      	lsls	r3, r3, #5
 8005f40:	4a07      	ldr	r2, [pc, #28]	@ (8005f60 <ProcessCmd+0x1b0>)
 8005f42:	0019      	movs	r1, r3
 8005f44:	0010      	movs	r0, r2
 8005f46:	f7fd fc00 	bl	800374a <ClearEEprom>
            break;
 8005f4a:	46c0      	nop			@ (mov r8, r8)
}
 8005f4c:	46c0      	nop			@ (mov r8, r8)
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bcb0      	pop	{r4, r5, r7}
 8005f54:	bc08      	pop	{r3}
 8005f56:	b004      	add	sp, #16
 8005f58:	4718      	bx	r3
 8005f5a:	46c0      	nop			@ (mov r8, r8)
 8005f5c:	080243a4 	.word	0x080243a4
 8005f60:	08080000 	.word	0x08080000
 8005f64:	0808000c 	.word	0x0808000c
 8005f68:	08080018 	.word	0x08080018
 8005f6c:	08080024 	.word	0x08080024
 8005f70:	08080030 	.word	0x08080030
 8005f74:	0808003c 	.word	0x0808003c
 8005f78:	08080048 	.word	0x08080048
 8005f7c:	08080090 	.word	0x08080090
 8005f80:	08080078 	.word	0x08080078
 8005f84:	0808006c 	.word	0x0808006c
 8005f88:	08080060 	.word	0x08080060
 8005f8c:	08080054 	.word	0x08080054

08005f90 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6039      	str	r1, [r7, #0]
 8005f98:	0011      	movs	r1, r2
 8005f9a:	1dfb      	adds	r3, r7, #7
 8005f9c:	1c02      	adds	r2, r0, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	1dbb      	adds	r3, r7, #6
 8005fa2:	1c0a      	adds	r2, r1, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005fa6:	2223      	movs	r2, #35	@ 0x23
 8005fa8:	4b20      	ldr	r3, [pc, #128]	@ (800602c <Create_Message+0x9c>)
 8005faa:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005fac:	4b1f      	ldr	r3, [pc, #124]	@ (800602c <Create_Message+0x9c>)
 8005fae:	1dfa      	adds	r2, r7, #7
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800602c <Create_Message+0x9c>)
 8005fb6:	1dba      	adds	r2, r7, #6
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	781a      	ldrb	r2, [r3, #0]
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8006030 <Create_Message+0xa0>)
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f019 fba3 	bl	801f710 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005fca:	1dbb      	adds	r3, r7, #6
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	250e      	movs	r5, #14
 8005fd2:	197b      	adds	r3, r7, r5
 8005fd4:	3203      	adds	r2, #3
 8005fd6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005fd8:	260c      	movs	r6, #12
 8005fda:	19bc      	adds	r4, r7, r6
 8005fdc:	197b      	adds	r3, r7, r5
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	4b12      	ldr	r3, [pc, #72]	@ (800602c <Create_Message+0x9c>)
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 f825 	bl	8006034 <CRC16_ARC>
 8005fea:	0003      	movs	r3, r0
 8005fec:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005fee:	0030      	movs	r0, r6
 8005ff0:	183b      	adds	r3, r7, r0
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	0a1b      	lsrs	r3, r3, #8
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	197b      	adds	r3, r7, r5
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b2d1      	uxtb	r1, r2
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800602c <Create_Message+0x9c>)
 8006000:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8006002:	197b      	adds	r3, r7, r5
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	183a      	adds	r2, r7, r0
 800600a:	8812      	ldrh	r2, [r2, #0]
 800600c:	b2d1      	uxtb	r1, r2
 800600e:	4a07      	ldr	r2, [pc, #28]	@ (800602c <Create_Message+0x9c>)
 8006010:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8006012:	197b      	adds	r3, r7, r5
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	3302      	adds	r3, #2
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b04      	ldr	r3, [pc, #16]	@ (800602c <Create_Message+0x9c>)
 800601c:	0011      	movs	r1, r2
 800601e:	0018      	movs	r0, r3
 8006020:	f016 f848 	bl	801c0b4 <CDC_Transmit_FS>
}
 8006024:	46c0      	nop			@ (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b005      	add	sp, #20
 800602a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800602c:	20000bb4 	.word	0x20000bb4
 8006030:	20000bb7 	.word	0x20000bb7

08006034 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	000a      	movs	r2, r1
 800603e:	1cbb      	adds	r3, r7, #2
 8006040:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8006042:	2316      	movs	r3, #22
 8006044:	18fb      	adds	r3, r7, r3
 8006046:	2200      	movs	r2, #0
 8006048:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	e02e      	b.n	80060ae <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	18d3      	adds	r3, r2, r3
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	0019      	movs	r1, r3
 800605a:	2216      	movs	r2, #22
 800605c:	18bb      	adds	r3, r7, r2
 800605e:	18ba      	adds	r2, r7, r2
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	404a      	eors	r2, r1
 8006064:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e01a      	b.n	80060a2 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 800606c:	2116      	movs	r1, #22
 800606e:	187b      	adds	r3, r7, r1
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	2201      	movs	r2, #1
 8006074:	4013      	ands	r3, r2
 8006076:	d00b      	beq.n	8006090 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006078:	187b      	adds	r3, r7, r1
 800607a:	187a      	adds	r2, r7, r1
 800607c:	8812      	ldrh	r2, [r2, #0]
 800607e:	0852      	lsrs	r2, r2, #1
 8006080:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8006082:	187b      	adds	r3, r7, r1
 8006084:	187a      	adds	r2, r7, r1
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	490f      	ldr	r1, [pc, #60]	@ (80060c8 <CRC16_ARC+0x94>)
 800608a:	404a      	eors	r2, r1
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e005      	b.n	800609c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8006090:	2216      	movs	r2, #22
 8006092:	18bb      	adds	r3, r7, r2
 8006094:	18ba      	adds	r2, r7, r2
 8006096:	8812      	ldrh	r2, [r2, #0]
 8006098:	0852      	lsrs	r2, r2, #1
 800609a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3301      	adds	r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2b07      	cmp	r3, #7
 80060a6:	dde1      	ble.n	800606c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	3301      	adds	r3, #1
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	1cbb      	adds	r3, r7, #2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	dbcb      	blt.n	8006050 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80060b8:	2316      	movs	r3, #22
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
}
 80060be:	0018      	movs	r0, r3
 80060c0:	46bd      	mov	sp, r7
 80060c2:	b006      	add	sp, #24
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	46c0      	nop			@ (mov r8, r8)
 80060c8:	ffffa001 	.word	0xffffa001

080060cc <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80060d0:	4b26      	ldr	r3, [pc, #152]	@ (800616c <ReadBatteryVoltage+0xa0>)
 80060d2:	4a27      	ldr	r2, [pc, #156]	@ (8006170 <ReadBatteryVoltage+0xa4>)
 80060d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80060d6:	4b25      	ldr	r3, [pc, #148]	@ (800616c <ReadBatteryVoltage+0xa0>)
 80060d8:	2280      	movs	r2, #128	@ 0x80
 80060da:	0152      	lsls	r2, r2, #5
 80060dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060de:	4a23      	ldr	r2, [pc, #140]	@ (800616c <ReadBatteryVoltage+0xa0>)
 80060e0:	4b24      	ldr	r3, [pc, #144]	@ (8006174 <ReadBatteryVoltage+0xa8>)
 80060e2:	0011      	movs	r1, r2
 80060e4:	0018      	movs	r0, r3
 80060e6:	f008 fae3 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 80060ea:	1e03      	subs	r3, r0, #0
 80060ec:	d001      	beq.n	80060f2 <ReadBatteryVoltage+0x26>
    Error_Handler();
 80060ee:	f002 f94f 	bl	8008390 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80060f2:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <ReadBatteryVoltage+0xa8>)
 80060f4:	0018      	movs	r0, r3
 80060f6:	f008 f9df 	bl	800e4b8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80060fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <ReadBatteryVoltage+0xa8>)
 80060fc:	2101      	movs	r1, #1
 80060fe:	0018      	movs	r0, r3
 8006100:	f008 fa2e 	bl	800e560 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006104:	4b1b      	ldr	r3, [pc, #108]	@ (8006174 <ReadBatteryVoltage+0xa8>)
 8006106:	0018      	movs	r0, r3
 8006108:	f008 fac6 	bl	800e698 <HAL_ADC_GetValue>
 800610c:	0002      	movs	r2, r0
 800610e:	4b1a      	ldr	r3, [pc, #104]	@ (8006178 <ReadBatteryVoltage+0xac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4353      	muls	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4919      	ldr	r1, [pc, #100]	@ (800617c <ReadBatteryVoltage+0xb0>)
 8006118:	0018      	movs	r0, r3
 800611a:	f7fa f843 	bl	80001a4 <__udivsi3>
 800611e:	0003      	movs	r3, r0
 8006120:	001a      	movs	r2, r3
 8006122:	4b17      	ldr	r3, [pc, #92]	@ (8006180 <ReadBatteryVoltage+0xb4>)
 8006124:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006126:	4b16      	ldr	r3, [pc, #88]	@ (8006180 <ReadBatteryVoltage+0xb4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	0018      	movs	r0, r3
 800612c:	f7fb fa9c 	bl	8001668 <__aeabi_ui2f>
 8006130:	1c03      	adds	r3, r0, #0
 8006132:	4914      	ldr	r1, [pc, #80]	@ (8006184 <ReadBatteryVoltage+0xb8>)
 8006134:	1c18      	adds	r0, r3, #0
 8006136:	f7fa fd4d 	bl	8000bd4 <__aeabi_fdiv>
 800613a:	1c03      	adds	r3, r0, #0
 800613c:	1c1a      	adds	r2, r3, #0
 800613e:	4b12      	ldr	r3, [pc, #72]	@ (8006188 <ReadBatteryVoltage+0xbc>)
 8006140:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8006142:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <ReadBatteryVoltage+0xa0>)
 8006144:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <ReadBatteryVoltage+0xa4>)
 8006146:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006148:	4b08      	ldr	r3, [pc, #32]	@ (800616c <ReadBatteryVoltage+0xa0>)
 800614a:	4a10      	ldr	r2, [pc, #64]	@ (800618c <ReadBatteryVoltage+0xc0>)
 800614c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800614e:	4a07      	ldr	r2, [pc, #28]	@ (800616c <ReadBatteryVoltage+0xa0>)
 8006150:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <ReadBatteryVoltage+0xa8>)
 8006152:	0011      	movs	r1, r2
 8006154:	0018      	movs	r0, r3
 8006156:	f008 faab 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 800615a:	1e03      	subs	r3, r0, #0
 800615c:	d001      	beq.n	8006162 <ReadBatteryVoltage+0x96>
    Error_Handler();
 800615e:	f002 f917 	bl	8008390 <Error_Handler>
  }
  return trueValue;
 8006162:	4b09      	ldr	r3, [pc, #36]	@ (8006188 <ReadBatteryVoltage+0xbc>)
 8006164:	681b      	ldr	r3, [r3, #0]
 }
 8006166:	1c18      	adds	r0, r3, #0
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000cbc 	.word	0x20000cbc
 8006170:	38004000 	.word	0x38004000
 8006174:	20000cfc 	.word	0x20000cfc
 8006178:	2000002c 	.word	0x2000002c
 800617c:	00000fff 	.word	0x00000fff
 8006180:	20000cc4 	.word	0x20000cc4
 8006184:	447a0000 	.word	0x447a0000
 8006188:	20000cc8 	.word	0x20000cc8
 800618c:	00001001 	.word	0x00001001

08006190 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006194:	4b27      	ldr	r3, [pc, #156]	@ (8006234 <ReadSolarVoltage+0xa4>)
 8006196:	4a28      	ldr	r2, [pc, #160]	@ (8006238 <ReadSolarVoltage+0xa8>)
 8006198:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800619a:	4b26      	ldr	r3, [pc, #152]	@ (8006234 <ReadSolarVoltage+0xa4>)
 800619c:	2280      	movs	r2, #128	@ 0x80
 800619e:	0152      	lsls	r2, r2, #5
 80061a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80061a2:	4a24      	ldr	r2, [pc, #144]	@ (8006234 <ReadSolarVoltage+0xa4>)
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <ReadSolarVoltage+0xac>)
 80061a6:	0011      	movs	r1, r2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f008 fa81 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 80061ae:	1e03      	subs	r3, r0, #0
 80061b0:	d001      	beq.n	80061b6 <ReadSolarVoltage+0x26>
    Error_Handler();
 80061b2:	f002 f8ed 	bl	8008390 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80061b6:	4b21      	ldr	r3, [pc, #132]	@ (800623c <ReadSolarVoltage+0xac>)
 80061b8:	0018      	movs	r0, r3
 80061ba:	f008 f97d 	bl	800e4b8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80061be:	4b1f      	ldr	r3, [pc, #124]	@ (800623c <ReadSolarVoltage+0xac>)
 80061c0:	2101      	movs	r1, #1
 80061c2:	0018      	movs	r0, r3
 80061c4:	f008 f9cc 	bl	800e560 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80061c8:	4b1c      	ldr	r3, [pc, #112]	@ (800623c <ReadSolarVoltage+0xac>)
 80061ca:	0018      	movs	r0, r3
 80061cc:	f008 fa64 	bl	800e698 <HAL_ADC_GetValue>
 80061d0:	0002      	movs	r2, r0
 80061d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <ReadSolarVoltage+0xb0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	435a      	muls	r2, r3
 80061d8:	0013      	movs	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	189b      	adds	r3, r3, r2
 80061de:	4919      	ldr	r1, [pc, #100]	@ (8006244 <ReadSolarVoltage+0xb4>)
 80061e0:	0018      	movs	r0, r3
 80061e2:	f7f9 ffdf 	bl	80001a4 <__udivsi3>
 80061e6:	0003      	movs	r3, r0
 80061e8:	001a      	movs	r2, r3
 80061ea:	4b17      	ldr	r3, [pc, #92]	@ (8006248 <ReadSolarVoltage+0xb8>)
 80061ec:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 80061ee:	4b16      	ldr	r3, [pc, #88]	@ (8006248 <ReadSolarVoltage+0xb8>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f7fb fa38 	bl	8001668 <__aeabi_ui2f>
 80061f8:	1c03      	adds	r3, r0, #0
 80061fa:	4914      	ldr	r1, [pc, #80]	@ (800624c <ReadSolarVoltage+0xbc>)
 80061fc:	1c18      	adds	r0, r3, #0
 80061fe:	f7fa fce9 	bl	8000bd4 <__aeabi_fdiv>
 8006202:	1c03      	adds	r3, r0, #0
 8006204:	1c1a      	adds	r2, r3, #0
 8006206:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <ReadSolarVoltage+0xc0>)
 8006208:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 800620a:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <ReadSolarVoltage+0xa4>)
 800620c:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <ReadSolarVoltage+0xa8>)
 800620e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006210:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <ReadSolarVoltage+0xa4>)
 8006212:	4a10      	ldr	r2, [pc, #64]	@ (8006254 <ReadSolarVoltage+0xc4>)
 8006214:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006216:	4a07      	ldr	r2, [pc, #28]	@ (8006234 <ReadSolarVoltage+0xa4>)
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <ReadSolarVoltage+0xac>)
 800621a:	0011      	movs	r1, r2
 800621c:	0018      	movs	r0, r3
 800621e:	f008 fa47 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d001      	beq.n	800622a <ReadSolarVoltage+0x9a>
    Error_Handler();
 8006226:	f002 f8b3 	bl	8008390 <Error_Handler>
  }
  return trueValue;
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <ReadSolarVoltage+0xc0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 }
 800622e:	1c18      	adds	r0, r3, #0
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000cbc 	.word	0x20000cbc
 8006238:	3c008000 	.word	0x3c008000
 800623c:	20000cfc 	.word	0x20000cfc
 8006240:	2000002c 	.word	0x2000002c
 8006244:	00000fff 	.word	0x00000fff
 8006248:	20000ccc 	.word	0x20000ccc
 800624c:	447a0000 	.word	0x447a0000
 8006250:	20000cd0 	.word	0x20000cd0
 8006254:	00001001 	.word	0x00001001

08006258 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 800625c:	23a0      	movs	r3, #160	@ 0xa0
 800625e:	05db      	lsls	r3, r3, #23
 8006260:	2180      	movs	r1, #128	@ 0x80
 8006262:	0018      	movs	r0, r3
 8006264:	f009 f9aa 	bl	800f5bc <HAL_GPIO_ReadPin>
 8006268:	0003      	movs	r3, r0
 800626a:	1e5a      	subs	r2, r3, #1
 800626c:	4193      	sbcs	r3, r2
 800626e:	b2db      	uxtb	r3, r3
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006276:	b580      	push	{r7, lr}
 8006278:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 800627a:	2380      	movs	r3, #128	@ 0x80
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	23a0      	movs	r3, #160	@ 0xa0
 8006280:	05db      	lsls	r3, r3, #23
 8006282:	0011      	movs	r1, r2
 8006284:	0018      	movs	r0, r3
 8006286:	f009 f999 	bl	800f5bc <HAL_GPIO_ReadPin>
 800628a:	0003      	movs	r3, r0
 800628c:	1e5a      	subs	r2, r3, #1
 800628e:	4193      	sbcs	r3, r2
 8006290:	b2db      	uxtb	r3, r3
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <UserButton_Pressed+0x1c>)
 800629e:	2104      	movs	r1, #4
 80062a0:	0018      	movs	r0, r3
 80062a2:	f009 f98b 	bl	800f5bc <HAL_GPIO_ReadPin>
 80062a6:	0003      	movs	r3, r0
 80062a8:	425a      	negs	r2, r3
 80062aa:	4153      	adcs	r3, r2
 80062ac:	b2db      	uxtb	r3, r3
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	50000c00 	.word	0x50000c00

080062b8 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80062b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ba:	46d6      	mov	lr, sl
 80062bc:	464f      	mov	r7, r9
 80062be:	4646      	mov	r6, r8
 80062c0:	b5c0      	push	{r6, r7, lr}
 80062c2:	b08e      	sub	sp, #56	@ 0x38
 80062c4:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80062c6:	4b21      	ldr	r3, [pc, #132]	@ (800634c <showTime+0x94>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d036      	beq.n	800633c <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80062ce:	003a      	movs	r2, r7
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	0011      	movs	r1, r2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 fa2b 	bl	8006730 <RTC_GetTime>
  UpdateSystemUptime();
 80062da:	f000 f83f 	bl	800635c <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062de:	003b      	movs	r3, r7
 80062e0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062e2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062e4:	003b      	movs	r3, r7
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062ea:	4b19      	ldr	r3, [pc, #100]	@ (8006350 <showTime+0x98>)
 80062ec:	0092      	lsls	r2, r2, #2
 80062ee:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062f0:	003b      	movs	r3, r7
 80062f2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062f4:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062fa:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062fc:	1d3b      	adds	r3, r7, #4
 80062fe:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006300:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006302:	1d3b      	adds	r3, r7, #4
 8006304:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006306:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006308:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <showTime+0x9c>)
 800630a:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800630c:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800630e:	4b11      	ldr	r3, [pc, #68]	@ (8006354 <showTime+0x9c>)
 8006310:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006312:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 8006314:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <showTime+0x9c>)
 8006316:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006318:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 800631a:	4b0e      	ldr	r3, [pc, #56]	@ (8006354 <showTime+0x9c>)
 800631c:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800631e:	480e      	ldr	r0, [pc, #56]	@ (8006358 <showTime+0xa0>)
 8006320:	9306      	str	r3, [sp, #24]
 8006322:	4643      	mov	r3, r8
 8006324:	9305      	str	r3, [sp, #20]
 8006326:	4663      	mov	r3, ip
 8006328:	9304      	str	r3, [sp, #16]
 800632a:	9603      	str	r6, [sp, #12]
 800632c:	9502      	str	r5, [sp, #8]
 800632e:	9401      	str	r4, [sp, #4]
 8006330:	9100      	str	r1, [sp, #0]
 8006332:	4653      	mov	r3, sl
 8006334:	4649      	mov	r1, r9
 8006336:	f018 ff5b 	bl	801f1f0 <iprintf>
 800633a:	e000      	b.n	800633e <showTime+0x86>
    return;
 800633c:	46c0      	nop			@ (mov r8, r8)
}
 800633e:	46bd      	mov	sp, r7
 8006340:	b006      	add	sp, #24
 8006342:	bce0      	pop	{r5, r6, r7}
 8006344:	46ba      	mov	sl, r7
 8006346:	46b1      	mov	r9, r6
 8006348:	46a8      	mov	r8, r5
 800634a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800634c:	20000ce0 	.word	0x20000ce0
 8006350:	2000004c 	.word	0x2000004c
 8006354:	20000cd4 	.word	0x20000cd4
 8006358:	08022f68 	.word	0x08022f68

0800635c <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8006362:	003a      	movs	r2, r7
 8006364:	1d3b      	adds	r3, r7, #4
 8006366:	0011      	movs	r1, r2
 8006368:	0018      	movs	r0, r3
 800636a:	f000 f9e1 	bl	8006730 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800636e:	1d3a      	adds	r2, r7, #4
 8006370:	003b      	movs	r3, r7
 8006372:	0011      	movs	r1, r2
 8006374:	0018      	movs	r0, r3
 8006376:	f000 fb6d 	bl	8006a54 <makeTime>
 800637a:	0002      	movs	r2, r0
 800637c:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <UpdateSystemUptime+0x9c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	213c      	movs	r1, #60	@ 0x3c
 800638c:	0018      	movs	r0, r3
 800638e:	f7f9 ff8f 	bl	80002b0 <__aeabi_uidivmod>
 8006392:	000b      	movs	r3, r1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	4b19      	ldr	r3, [pc, #100]	@ (80063fc <UpdateSystemUptime+0xa0>)
 8006398:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	213c      	movs	r1, #60	@ 0x3c
 800639e:	0018      	movs	r0, r3
 80063a0:	f7f9 ff00 	bl	80001a4 <__udivsi3>
 80063a4:	0003      	movs	r3, r0
 80063a6:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	213c      	movs	r1, #60	@ 0x3c
 80063ac:	0018      	movs	r0, r3
 80063ae:	f7f9 ff7f 	bl	80002b0 <__aeabi_uidivmod>
 80063b2:	000b      	movs	r3, r1
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	4b11      	ldr	r3, [pc, #68]	@ (80063fc <UpdateSystemUptime+0xa0>)
 80063b8:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	213c      	movs	r1, #60	@ 0x3c
 80063be:	0018      	movs	r0, r3
 80063c0:	f7f9 fef0 	bl	80001a4 <__udivsi3>
 80063c4:	0003      	movs	r3, r0
 80063c6:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2118      	movs	r1, #24
 80063cc:	0018      	movs	r0, r3
 80063ce:	f7f9 ff6f 	bl	80002b0 <__aeabi_uidivmod>
 80063d2:	000b      	movs	r3, r1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b09      	ldr	r3, [pc, #36]	@ (80063fc <UpdateSystemUptime+0xa0>)
 80063d8:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2118      	movs	r1, #24
 80063de:	0018      	movs	r0, r3
 80063e0:	f7f9 fee0 	bl	80001a4 <__udivsi3>
 80063e4:	0003      	movs	r3, r0
 80063e6:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	4b03      	ldr	r3, [pc, #12]	@ (80063fc <UpdateSystemUptime+0xa0>)
 80063ee:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80063f0:	46c0      	nop			@ (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b008      	add	sp, #32
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	20000ce0 	.word	0x20000ce0
 80063fc:	20000cd4 	.word	0x20000cd4

08006400 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	0008      	movs	r0, r1
 800640a:	0011      	movs	r1, r2
 800640c:	1cfb      	adds	r3, r7, #3
 800640e:	1c02      	adds	r2, r0, #0
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	1cbb      	adds	r3, r7, #2
 8006414:	1c0a      	adds	r2, r1, #0
 8006416:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006418:	230e      	movs	r3, #14
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8006420:	230f      	movs	r3, #15
 8006422:	18fb      	adds	r3, r7, r3
 8006424:	1cfa      	adds	r2, r7, #3
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e015      	b.n	8006458 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 800642c:	200f      	movs	r0, #15
 800642e:	183b      	adds	r3, r7, r0
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	18d2      	adds	r2, r2, r3
 8006436:	240e      	movs	r4, #14
 8006438:	193b      	adds	r3, r7, r4
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	7811      	ldrb	r1, [r2, #0]
 800643e:	2208      	movs	r2, #8
 8006440:	18ba      	adds	r2, r7, r2
 8006442:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006444:	193b      	adds	r3, r7, r4
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	193b      	adds	r3, r7, r4
 800644a:	3201      	adds	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800644e:	183b      	adds	r3, r7, r0
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	183b      	adds	r3, r7, r0
 8006454:	3201      	adds	r2, #1
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	200f      	movs	r0, #15
 800645a:	183a      	adds	r2, r7, r0
 800645c:	1cbb      	adds	r3, r7, #2
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d9e2      	bls.n	800642c <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006466:	230e      	movs	r3, #14
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2208      	movs	r2, #8
 800646e:	18ba      	adds	r2, r7, r2
 8006470:	2100      	movs	r1, #0
 8006472:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006474:	1cfb      	adds	r3, r7, #3
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b13      	cmp	r3, #19
 800647a:	d849      	bhi.n	8006510 <aBuff2int+0x110>
    if (start == 17) { //month
 800647c:	1cfb      	adds	r3, r7, #3
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b11      	cmp	r3, #17
 8006482:	d122      	bne.n	80064ca <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006484:	183b      	adds	r3, r7, r0
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	e018      	b.n	80064be <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 800648c:	240f      	movs	r4, #15
 800648e:	193b      	adds	r3, r7, r4
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	4b25      	ldr	r3, [pc, #148]	@ (8006528 <aBuff2int+0x128>)
 8006494:	0092      	lsls	r2, r2, #2
 8006496:	58d2      	ldr	r2, [r2, r3]
 8006498:	2308      	movs	r3, #8
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	0011      	movs	r1, r2
 800649e:	0018      	movs	r0, r3
 80064a0:	f7f9 fe5a 	bl	8000158 <strcmp>
 80064a4:	1e03      	subs	r3, r0, #0
 80064a6:	d104      	bne.n	80064b2 <aBuff2int+0xb2>
          return i+1;
 80064a8:	193b      	adds	r3, r7, r4
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	e035      	b.n	800651e <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 80064b2:	210f      	movs	r1, #15
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	187b      	adds	r3, r7, r1
 80064ba:	3201      	adds	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	230f      	movs	r3, #15
 80064c0:	18fb      	adds	r3, r7, r3
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b0b      	cmp	r3, #11
 80064c6:	d9e1      	bls.n	800648c <aBuff2int+0x8c>
 80064c8:	e022      	b.n	8006510 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80064ca:	230f      	movs	r3, #15
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e018      	b.n	8006506 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80064d4:	240f      	movs	r4, #15
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	781a      	ldrb	r2, [r3, #0]
 80064da:	4b14      	ldr	r3, [pc, #80]	@ (800652c <aBuff2int+0x12c>)
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	58d2      	ldr	r2, [r2, r3]
 80064e0:	2308      	movs	r3, #8
 80064e2:	18fb      	adds	r3, r7, r3
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7f9 fe36 	bl	8000158 <strcmp>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d104      	bne.n	80064fa <aBuff2int+0xfa>
          return i+1;
 80064f0:	193b      	adds	r3, r7, r4
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e011      	b.n	800651e <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80064fa:	210f      	movs	r1, #15
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	187b      	adds	r3, r7, r1
 8006502:	3201      	adds	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	230f      	movs	r3, #15
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b06      	cmp	r3, #6
 800650e:	d9e1      	bls.n	80064d4 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006510:	2308      	movs	r3, #8
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	0018      	movs	r0, r3
 8006516:	f017 fa90 	bl	801da3a <atoi>
 800651a:	0003      	movs	r3, r0
 800651c:	b2db      	uxtb	r3, r3
}
 800651e:	0018      	movs	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	b005      	add	sp, #20
 8006524:	bd90      	pop	{r4, r7, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	2000004c 	.word	0x2000004c
 800652c:	20000030 	.word	0x20000030

08006530 <ParseTime>:

void ParseTime(char* buffer) {
 8006530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006532:	b08b      	sub	sp, #44	@ 0x2c
 8006534:	af02      	add	r7, sp, #8
 8006536:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006538:	2408      	movs	r4, #8
 800653a:	193a      	adds	r2, r7, r4
 800653c:	260c      	movs	r6, #12
 800653e:	19bb      	adds	r3, r7, r6
 8006540:	0011      	movs	r1, r2
 8006542:	0018      	movs	r0, r3
 8006544:	f000 f8f4 	bl	8006730 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2219      	movs	r2, #25
 800654c:	2118      	movs	r1, #24
 800654e:	0018      	movs	r0, r3
 8006550:	f7ff ff56 	bl	8006400 <aBuff2int>
 8006554:	0003      	movs	r3, r0
 8006556:	001a      	movs	r2, r3
 8006558:	19bb      	adds	r3, r7, r6
 800655a:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	221c      	movs	r2, #28
 8006560:	211b      	movs	r1, #27
 8006562:	0018      	movs	r0, r3
 8006564:	f7ff ff4c 	bl	8006400 <aBuff2int>
 8006568:	0003      	movs	r3, r0
 800656a:	001a      	movs	r2, r3
 800656c:	19bb      	adds	r3, r7, r6
 800656e:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	221f      	movs	r2, #31
 8006574:	211e      	movs	r1, #30
 8006576:	0018      	movs	r0, r3
 8006578:	f7ff ff42 	bl	8006400 <aBuff2int>
 800657c:	0003      	movs	r3, r0
 800657e:	001a      	movs	r2, r3
 8006580:	19bb      	adds	r3, r7, r6
 8006582:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2224      	movs	r2, #36	@ 0x24
 8006588:	2123      	movs	r1, #35	@ 0x23
 800658a:	0018      	movs	r0, r3
 800658c:	f7ff ff38 	bl	8006400 <aBuff2int>
 8006590:	0003      	movs	r3, r0
 8006592:	001a      	movs	r2, r3
 8006594:	0025      	movs	r5, r4
 8006596:	197b      	adds	r3, r7, r5
 8006598:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2213      	movs	r2, #19
 800659e:	2111      	movs	r1, #17
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7ff ff2d 	bl	8006400 <aBuff2int>
 80065a6:	0003      	movs	r3, r0
 80065a8:	001a      	movs	r2, r3
 80065aa:	197b      	adds	r3, r7, r5
 80065ac:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2216      	movs	r2, #22
 80065b2:	2115      	movs	r1, #21
 80065b4:	0018      	movs	r0, r3
 80065b6:	f7ff ff23 	bl	8006400 <aBuff2int>
 80065ba:	0003      	movs	r3, r0
 80065bc:	001a      	movs	r2, r3
 80065be:	197b      	adds	r3, r7, r5
 80065c0:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	220f      	movs	r2, #15
 80065c6:	210d      	movs	r1, #13
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7ff ff19 	bl	8006400 <aBuff2int>
 80065ce:	0003      	movs	r3, r0
 80065d0:	001a      	movs	r2, r3
 80065d2:	197b      	adds	r3, r7, r5
 80065d4:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80065d6:	19bb      	adds	r3, r7, r6
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	001c      	movs	r4, r3
 80065dc:	19bb      	adds	r3, r7, r6
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	0018      	movs	r0, r3
 80065e2:	19bb      	adds	r3, r7, r6
 80065e4:	789b      	ldrb	r3, [r3, #2]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <ParseTime+0x128>)
 80065e8:	491c      	ldr	r1, [pc, #112]	@ (800665c <ParseTime+0x12c>)
 80065ea:	9301      	str	r3, [sp, #4]
 80065ec:	9000      	str	r0, [sp, #0]
 80065ee:	0023      	movs	r3, r4
 80065f0:	2003      	movs	r0, #3
 80065f2:	f007 f939 	bl	800d868 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80065f6:	197b      	adds	r3, r7, r5
 80065f8:	789b      	ldrb	r3, [r3, #2]
 80065fa:	001c      	movs	r4, r3
 80065fc:	197b      	adds	r3, r7, r5
 80065fe:	785b      	ldrb	r3, [r3, #1]
 8006600:	0018      	movs	r0, r3
 8006602:	197b      	adds	r3, r7, r5
 8006604:	78db      	ldrb	r3, [r3, #3]
 8006606:	4a16      	ldr	r2, [pc, #88]	@ (8006660 <ParseTime+0x130>)
 8006608:	4914      	ldr	r1, [pc, #80]	@ (800665c <ParseTime+0x12c>)
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	9000      	str	r0, [sp, #0]
 800660e:	0023      	movs	r3, r4
 8006610:	2003      	movs	r0, #3
 8006612:	f007 f929 	bl	800d868 <CreateLine>
  RTC_SetTime(&currentTime);
 8006616:	19bb      	adds	r3, r7, r6
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f825 	bl	8006668 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800661e:	197b      	adds	r3, r7, r5
 8006620:	0018      	movs	r0, r3
 8006622:	f000 f847 	bl	80066b4 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006626:	197b      	adds	r3, r7, r5
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d101      	bne.n	8006632 <ParseTime+0x102>
    reset_fanCleaningDone();
 800662e:	f002 fad1 	bl	8008bd4 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 8006632:	4b0c      	ldr	r3, [pc, #48]	@ (8006664 <ParseTime+0x134>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10a      	bne.n	8006650 <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800663a:	230c      	movs	r3, #12
 800663c:	18fa      	adds	r2, r7, r3
 800663e:	2308      	movs	r3, #8
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	0011      	movs	r1, r2
 8006644:	0018      	movs	r0, r3
 8006646:	f000 fa05 	bl	8006a54 <makeTime>
 800664a:	0002      	movs	r2, r0
 800664c:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <ParseTime+0x134>)
 800664e:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 8006650:	46c0      	nop			@ (mov r8, r8)
 8006652:	46bd      	mov	sp, r7
 8006654:	b009      	add	sp, #36	@ 0x24
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006658:	08022fc0 	.word	0x08022fc0
 800665c:	08022ff8 	.word	0x08022ff8
 8006660:	08022ffc 	.word	0x08022ffc
 8006664:	20000ce0 	.word	0x20000ce0

08006668 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006682:	4b09      	ldr	r3, [pc, #36]	@ (80066a8 <RTC_SetTime+0x40>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	0018      	movs	r0, r3
 800668c:	f00e fe2c 	bl	80152e8 <HAL_RTC_SetTime>
 8006690:	1e03      	subs	r3, r0, #0
 8006692:	d005      	beq.n	80066a0 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006694:	4a05      	ldr	r2, [pc, #20]	@ (80066ac <RTC_SetTime+0x44>)
 8006696:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <RTC_SetTime+0x48>)
 8006698:	0019      	movs	r1, r3
 800669a:	2001      	movs	r0, #1
 800669c:	f007 f8e4 	bl	800d868 <CreateLine>
    }
}
 80066a0:	46c0      	nop			@ (mov r8, r8)
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b002      	add	sp, #8
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000cdc 	.word	0x20000cdc
 80066ac:	08023030 	.word	0x08023030
 80066b0:	0802304c 	.word	0x0802304c

080066b4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 80066bc:	4b16      	ldr	r3, [pc, #88]	@ (8006718 <RTC_SetDate+0x64>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	0018      	movs	r0, r3
 80066c6:	f00e ff17 	bl	80154f8 <HAL_RTC_SetDate>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d005      	beq.n	80066da <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80066ce:	4a13      	ldr	r2, [pc, #76]	@ (800671c <RTC_SetDate+0x68>)
 80066d0:	4b13      	ldr	r3, [pc, #76]	@ (8006720 <RTC_SetDate+0x6c>)
 80066d2:	0019      	movs	r1, r3
 80066d4:	2001      	movs	r0, #1
 80066d6:	f007 f8c7 	bl	800d868 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80066da:	4b0f      	ldr	r3, [pc, #60]	@ (8006718 <RTC_SetDate+0x64>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2101      	movs	r1, #1
 80066e0:	0018      	movs	r0, r3
 80066e2:	f00f fa4f 	bl	8015b84 <HAL_RTCEx_BKUPRead>
 80066e6:	0003      	movs	r3, r0
 80066e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006724 <RTC_SetDate+0x70>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d010      	beq.n	8006710 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80066ee:	4a0e      	ldr	r2, [pc, #56]	@ (8006728 <RTC_SetDate+0x74>)
 80066f0:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <RTC_SetDate+0x78>)
 80066f2:	0019      	movs	r1, r3
 80066f4:	2003      	movs	r0, #3
 80066f6:	f007 f8b7 	bl	800d868 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80066fa:	f00d fd8b 	bl	8014214 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80066fe:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <RTC_SetDate+0x64>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a08      	ldr	r2, [pc, #32]	@ (8006724 <RTC_SetDate+0x70>)
 8006704:	2101      	movs	r1, #1
 8006706:	0018      	movs	r0, r3
 8006708:	f00f fa24 	bl	8015b54 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800670c:	f00d fd90 	bl	8014230 <HAL_PWR_DisableBkUpAccess>
    }
}
 8006710:	46c0      	nop			@ (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000cdc 	.word	0x20000cdc
 800671c:	08023050 	.word	0x08023050
 8006720:	0802304c 	.word	0x0802304c
 8006724:	0000bebe 	.word	0x0000bebe
 8006728:	0802306c 	.word	0x0802306c
 800672c:	08022ff8 	.word	0x08022ff8

08006730 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800673a:	250f      	movs	r5, #15
 800673c:	197b      	adds	r3, r7, r5
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 8006742:	230e      	movs	r3, #14
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800674a:	260c      	movs	r6, #12
 800674c:	19bc      	adds	r4, r7, r6
 800674e:	f006 fa25 	bl	800cb9c <powerCheck>
 8006752:	0003      	movs	r3, r0
 8006754:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006756:	19bb      	adds	r3, r7, r6
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d104      	bne.n	8006768 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800675e:	197b      	adds	r3, r7, r5
 8006760:	781a      	ldrb	r2, [r3, #0]
 8006762:	197b      	adds	r3, r7, r5
 8006764:	3201      	adds	r2, #1
 8006766:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006768:	230d      	movs	r3, #13
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	e039      	b.n	80067e6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006772:	4b23      	ldr	r3, [pc, #140]	@ (8006800 <RTC_GetTime+0xd0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	0018      	movs	r0, r3
 800677c:	f00e fe5e 	bl	801543c <HAL_RTC_GetTime>
 8006780:	1e03      	subs	r3, r0, #0
 8006782:	d005      	beq.n	8006790 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006784:	4a1f      	ldr	r2, [pc, #124]	@ (8006804 <RTC_GetTime+0xd4>)
 8006786:	4b20      	ldr	r3, [pc, #128]	@ (8006808 <RTC_GetTime+0xd8>)
 8006788:	0019      	movs	r1, r3
 800678a:	2001      	movs	r0, #1
 800678c:	f007 f86c 	bl	800d868 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006790:	4b1b      	ldr	r3, [pc, #108]	@ (8006800 <RTC_GetTime+0xd0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	2200      	movs	r2, #0
 8006798:	0018      	movs	r0, r3
 800679a:	f00e ff41 	bl	8015620 <HAL_RTC_GetDate>
 800679e:	1e03      	subs	r3, r0, #0
 80067a0:	d005      	beq.n	80067ae <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <RTC_GetTime+0xdc>)
 80067a4:	4b18      	ldr	r3, [pc, #96]	@ (8006808 <RTC_GetTime+0xd8>)
 80067a6:	0019      	movs	r1, r3
 80067a8:	2001      	movs	r0, #1
 80067aa:	f007 f85d 	bl	800d868 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 80067ae:	230c      	movs	r3, #12
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d110      	bne.n	80067da <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	210e      	movs	r1, #14
 80067be:	187a      	adds	r2, r7, r1
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d018      	beq.n	80067f8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80067c6:	187b      	adds	r3, r7, r1
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	701a      	strb	r2, [r3, #0]
        t++;
 80067ce:	210f      	movs	r1, #15
 80067d0:	187b      	adds	r3, r7, r1
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	187b      	adds	r3, r7, r1
 80067d6:	3201      	adds	r2, #1
 80067d8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80067da:	210d      	movs	r1, #13
 80067dc:	187b      	adds	r3, r7, r1
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	187b      	adds	r3, r7, r1
 80067e2:	3201      	adds	r2, #1
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	230d      	movs	r3, #13
 80067e8:	18fa      	adds	r2, r7, r3
 80067ea:	230f      	movs	r3, #15
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	7812      	ldrb	r2, [r2, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d3bd      	bcc.n	8006772 <RTC_GetTime+0x42>
 80067f6:	e000      	b.n	80067fa <RTC_GetTime+0xca>
      }
      else {
        return;
 80067f8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b005      	add	sp, #20
 80067fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006800:	20000cdc 	.word	0x20000cdc
 8006804:	08023084 	.word	0x08023084
 8006808:	0802304c 	.word	0x0802304c
 800680c:	080230a0 	.word	0x080230a0

08006810 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006816:	003a      	movs	r2, r7
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	0011      	movs	r1, r2
 800681c:	0018      	movs	r0, r3
 800681e:	f7ff ff87 	bl	8006730 <RTC_GetTime>
  return currentDate.WeekDay;
 8006822:	003b      	movs	r3, r7
 8006824:	781b      	ldrb	r3, [r3, #0]
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	b006      	add	sp, #24
 800682c:	bd80      	pop	{r7, pc}

0800682e <getPosixTime>:

uint32_t getPosixTime(void) {
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006834:	003a      	movs	r2, r7
 8006836:	1d3b      	adds	r3, r7, #4
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f7ff ff78 	bl	8006730 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006840:	1d3a      	adds	r2, r7, #4
 8006842:	003b      	movs	r3, r7
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f000 f904 	bl	8006a54 <makeTime>
 800684c:	0003      	movs	r3, r0
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	b006      	add	sp, #24
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685a:	b08d      	sub	sp, #52	@ 0x34
 800685c:	af04      	add	r7, sp, #16
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006862:	240c      	movs	r4, #12
 8006864:	193a      	adds	r2, r7, r4
 8006866:	2508      	movs	r5, #8
 8006868:	1979      	adds	r1, r7, r5
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f000 f9bb 	bl	8006be8 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006872:	002a      	movs	r2, r5
 8006874:	18bb      	adds	r3, r7, r2
 8006876:	789b      	ldrb	r3, [r3, #2]
 8006878:	001e      	movs	r6, r3
 800687a:	18bb      	adds	r3, r7, r2
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	469c      	mov	ip, r3
 8006880:	18bb      	adds	r3, r7, r2
 8006882:	78db      	ldrb	r3, [r3, #3]
 8006884:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006886:	0021      	movs	r1, r4
 8006888:	187b      	adds	r3, r7, r1
 800688a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800688c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800688e:	187b      	adds	r3, r7, r1
 8006890:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006892:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006894:	187b      	adds	r3, r7, r1
 8006896:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006898:	4906      	ldr	r1, [pc, #24]	@ (80068b4 <getUTCfromPosixTime+0x5c>)
 800689a:	6838      	ldr	r0, [r7, #0]
 800689c:	9303      	str	r3, [sp, #12]
 800689e:	9502      	str	r5, [sp, #8]
 80068a0:	9401      	str	r4, [sp, #4]
 80068a2:	9200      	str	r2, [sp, #0]
 80068a4:	4663      	mov	r3, ip
 80068a6:	0032      	movs	r2, r6
 80068a8:	f018 fd12 	bl	801f2d0 <siprintf>
}
 80068ac:	46c0      	nop			@ (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b009      	add	sp, #36	@ 0x24
 80068b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b4:	080230bc 	.word	0x080230bc

080068b8 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80068c0:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <RTC_SetWakeUpTimer+0x4c>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f00f f8a9 	bl	8015a1c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80068ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <RTC_SetWakeUpTimer+0x4c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	22ff      	movs	r2, #255	@ 0xff
 80068d4:	401a      	ands	r2, r3
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <RTC_SetWakeUpTimer+0x4c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	490a      	ldr	r1, [pc, #40]	@ (8006908 <RTC_SetWakeUpTimer+0x50>)
 80068de:	430a      	orrs	r2, r1
 80068e0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80068e2:	4b0a      	ldr	r3, [pc, #40]	@ (800690c <RTC_SetWakeUpTimer+0x54>)
 80068e4:	2280      	movs	r2, #128	@ 0x80
 80068e6:	0352      	lsls	r2, r2, #13
 80068e8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80068ea:	4b06      	ldr	r3, [pc, #24]	@ (8006904 <RTC_SetWakeUpTimer+0x4c>)
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	2204      	movs	r2, #4
 80068f4:	0019      	movs	r1, r3
 80068f6:	f00e ffb9 	bl	801586c <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b002      	add	sp, #8
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	20000cdc 	.word	0x20000cdc
 8006908:	fffffb7f 	.word	0xfffffb7f
 800690c:	40010400 	.word	0x40010400

08006910 <Enter_Stop_Mode>:
    SystemClock_Config();
    HAL_ResumeTick(); // Enable SysTick after wake-up
}

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af02      	add	r7, sp, #8
 8006916:	0002      	movs	r2, r0
 8006918:	1dbb      	adds	r3, r7, #6
 800691a:	801a      	strh	r2, [r3, #0]
  if (GetPMSensorPresence()) {
 800691c:	f001 f836 	bl	800798c <GetPMSensorPresence>
 8006920:	1e03      	subs	r3, r0, #0
 8006922:	d001      	beq.n	8006928 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006924:	f002 f938 	bl	8008b98 <sen5x_Power_Off>
  }
  // restart the SGP40 with a soft reset to enter idle mode
  SGP_SoftReset();
 8006928:	f004 ff3c 	bl	800b7a4 <SGP_SoftReset>
  Info("Battery voltage %.2fV", ReadBatteryVoltage());
 800692c:	f7ff fbce 	bl	80060cc <ReadBatteryVoltage>
 8006930:	1c03      	adds	r3, r0, #0
 8006932:	1c18      	adds	r0, r3, #0
 8006934:	f7fc fd96 	bl	8003464 <__aeabi_f2d>
 8006938:	0002      	movs	r2, r0
 800693a:	000b      	movs	r3, r1
 800693c:	4836      	ldr	r0, [pc, #216]	@ (8006a18 <Enter_Stop_Mode+0x108>)
 800693e:	4937      	ldr	r1, [pc, #220]	@ (8006a1c <Enter_Stop_Mode+0x10c>)
 8006940:	9200      	str	r2, [sp, #0]
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	0002      	movs	r2, r0
 8006946:	2002      	movs	r0, #2
 8006948:	f006 ff8e 	bl	800d868 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800694c:	1dbb      	adds	r3, r7, #6
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	4a33      	ldr	r2, [pc, #204]	@ (8006a20 <Enter_Stop_Mode+0x110>)
 8006952:	4934      	ldr	r1, [pc, #208]	@ (8006a24 <Enter_Stop_Mode+0x114>)
 8006954:	2003      	movs	r0, #3
 8006956:	f006 ff87 	bl	800d868 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800695a:	f7ff ff68 	bl	800682e <getPosixTime>
 800695e:	0002      	movs	r2, r0
 8006960:	1dbb      	adds	r3, r7, #6
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	18d3      	adds	r3, r2, r3
 8006966:	4a30      	ldr	r2, [pc, #192]	@ (8006a28 <Enter_Stop_Mode+0x118>)
 8006968:	0011      	movs	r1, r2
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff ff74 	bl	8006858 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006970:	4b2d      	ldr	r3, [pc, #180]	@ (8006a28 <Enter_Stop_Mode+0x118>)
 8006972:	4a2e      	ldr	r2, [pc, #184]	@ (8006a2c <Enter_Stop_Mode+0x11c>)
 8006974:	4929      	ldr	r1, [pc, #164]	@ (8006a1c <Enter_Stop_Mode+0x10c>)
 8006976:	2002      	movs	r0, #2
 8006978:	f006 ff76 	bl	800d868 <CreateLine>
  HAL_Delay(100);
 800697c:	2064      	movs	r0, #100	@ 0x64
 800697e:	f007 fbc9 	bl	800e114 <HAL_Delay>
  HAL_SuspendTick();
 8006982:	f007 fbeb 	bl	800e15c <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006986:	1dbb      	adds	r3, r7, #6
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	0018      	movs	r0, r3
 800698c:	f7ff ff94 	bl	80068b8 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006990:	2101      	movs	r1, #1
 8006992:	2001      	movs	r0, #1
 8006994:	f00d fc5c 	bl	8014250 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006998:	f001 fbb0 	bl	80080fc <SystemClock_Config>
  if (enable_sen5x((uint32_t)sleepTime)) {
 800699c:	1dbb      	adds	r3, r7, #6
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f002 f897 	bl	8008ad4 <enable_sen5x>
 80069a6:	1e03      	subs	r3, r0, #0
 80069a8:	d01e      	beq.n	80069e8 <Enter_Stop_Mode+0xd8>
    showTime();
 80069aa:	f7ff fc85 	bl	80062b8 <showTime>
    set_light_on_state();
 80069ae:	f002 fcb3 	bl	8009318 <set_light_on_state>
    if (!userToggle) {
 80069b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a30 <Enter_Stop_Mode+0x120>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	4053      	eors	r3, r2
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <Enter_Stop_Mode+0xd8>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 30 seconds
 80069c0:	201b      	movs	r0, #27
 80069c2:	f7ff ff79 	bl	80068b8 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80069c6:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <Enter_Stop_Mode+0x110>)
 80069c8:	4916      	ldr	r1, [pc, #88]	@ (8006a24 <Enter_Stop_Mode+0x114>)
 80069ca:	231b      	movs	r3, #27
 80069cc:	2003      	movs	r0, #3
 80069ce:	f006 ff4b 	bl	800d868 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80069d2:	2101      	movs	r1, #1
 80069d4:	2001      	movs	r0, #1
 80069d6:	f00d fc3b 	bl	8014250 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 80069da:	f001 fb8f 	bl	80080fc <SystemClock_Config>
      setsen5xReadTimer(2000);
 80069de:	23fa      	movs	r3, #250	@ 0xfa
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	0018      	movs	r0, r3
 80069e4:	f002 f864 	bl	8008ab0 <setsen5xReadTimer>

    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 80069e8:	f007 fbc6 	bl	800e178 <HAL_ResumeTick>
  showTime();
 80069ec:	f7ff fc64 	bl	80062b8 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 80069f0:	f001 fcf0 	bl	80083d4 <ResetDBACalculator>
//  setMeasStamp(300);
//  ESPTransmitDone = false;
  setESPTimeStamp(3000);
 80069f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006a34 <Enter_Stop_Mode+0x124>)
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7fc feda 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 80069fc:	2000      	movs	r0, #0
 80069fe:	f004 ff6d 	bl	800b8dc <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006a02:	2000      	movs	r0, #0
 8006a04:	f007 f8ea 	bl	800dbdc <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f001 fcd1 	bl	80083b0 <setMICTimeStamp>
}
 8006a0e:	46c0      	nop			@ (mov r8, r8)
 8006a10:	46bd      	mov	sp, r7
 8006a12:	b002      	add	sp, #8
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	46c0      	nop			@ (mov r8, r8)
 8006a18:	08023134 	.word	0x08023134
 8006a1c:	0802314c 	.word	0x0802314c
 8006a20:	08023150 	.word	0x08023150
 8006a24:	08022ff8 	.word	0x08022ff8
 8006a28:	20000ce4 	.word	0x20000ce4
 8006a2c:	08023174 	.word	0x08023174
 8006a30:	2000214e 	.word	0x2000214e
 8006a34:	00000bb8 	.word	0x00000bb8

08006a38 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006a40:	4b03      	ldr	r3, [pc, #12]	@ (8006a50 <InitClock+0x18>)
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	601a      	str	r2, [r3, #0]
}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b002      	add	sp, #8
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	46c0      	nop			@ (mov r8, r8)
 8006a50:	20000cdc 	.word	0x20000cdc

08006a54 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	78db      	ldrb	r3, [r3, #3]
 8006a62:	001a      	movs	r2, r3
 8006a64:	0013      	movs	r3, r2
 8006a66:	025b      	lsls	r3, r3, #9
 8006a68:	189b      	adds	r3, r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	189b      	adds	r3, r3, r2
 8006a6e:	00db      	lsls	r3, r3, #3
 8006a70:	189b      	adds	r3, r3, r2
 8006a72:	011a      	lsls	r2, r3, #4
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	01d3      	lsls	r3, r2, #7
 8006a78:	001a      	movs	r2, r3
 8006a7a:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	e028      	b.n	8006ad4 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a53      	ldr	r2, [pc, #332]	@ (8006bd4 <makeTime+0x180>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	db21      	blt.n	8006ace <makeTime+0x7a>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4a52      	ldr	r2, [pc, #328]	@ (8006bd8 <makeTime+0x184>)
 8006a8e:	4694      	mov	ip, r2
 8006a90:	4463      	add	r3, ip
 8006a92:	001a      	movs	r2, r3
 8006a94:	2303      	movs	r3, #3
 8006a96:	4013      	ands	r3, r2
 8006a98:	d119      	bne.n	8006ace <makeTime+0x7a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8006bd8 <makeTime+0x184>)
 8006a9e:	4694      	mov	ip, r2
 8006aa0:	4463      	add	r3, ip
 8006aa2:	2164      	movs	r1, #100	@ 0x64
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7f9 fced 	bl	8000484 <__aeabi_idivmod>
 8006aaa:	1e0b      	subs	r3, r1, #0
 8006aac:	d10a      	bne.n	8006ac4 <makeTime+0x70>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4a49      	ldr	r2, [pc, #292]	@ (8006bd8 <makeTime+0x184>)
 8006ab2:	4694      	mov	ip, r2
 8006ab4:	4463      	add	r3, ip
 8006ab6:	22c8      	movs	r2, #200	@ 0xc8
 8006ab8:	0051      	lsls	r1, r2, #1
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7f9 fce2 	bl	8000484 <__aeabi_idivmod>
 8006ac0:	1e0b      	subs	r3, r1, #0
 8006ac2:	d104      	bne.n	8006ace <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a45      	ldr	r2, [pc, #276]	@ (8006bdc <makeTime+0x188>)
 8006ac8:	4694      	mov	ip, r2
 8006aca:	4463      	add	r3, ip
 8006acc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	78db      	ldrb	r3, [r3, #3]
 8006ad8:	001a      	movs	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	dbd0      	blt.n	8006a82 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e03c      	b.n	8006b60 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d125      	bne.n	8006b38 <makeTime+0xe4>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	4a39      	ldr	r2, [pc, #228]	@ (8006bd8 <makeTime+0x184>)
 8006af2:	4694      	mov	ip, r2
 8006af4:	4463      	add	r3, ip
 8006af6:	001a      	movs	r2, r3
 8006af8:	2303      	movs	r3, #3
 8006afa:	4013      	ands	r3, r2
 8006afc:	d11c      	bne.n	8006b38 <makeTime+0xe4>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	78db      	ldrb	r3, [r3, #3]
 8006b02:	4a35      	ldr	r2, [pc, #212]	@ (8006bd8 <makeTime+0x184>)
 8006b04:	4694      	mov	ip, r2
 8006b06:	4463      	add	r3, ip
 8006b08:	2164      	movs	r1, #100	@ 0x64
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f7f9 fcba 	bl	8000484 <__aeabi_idivmod>
 8006b10:	1e0b      	subs	r3, r1, #0
 8006b12:	d10b      	bne.n	8006b2c <makeTime+0xd8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	78db      	ldrb	r3, [r3, #3]
 8006b18:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd8 <makeTime+0x184>)
 8006b1a:	4694      	mov	ip, r2
 8006b1c:	4463      	add	r3, ip
 8006b1e:	22c8      	movs	r2, #200	@ 0xc8
 8006b20:	0051      	lsls	r1, r2, #1
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7f9 fcae 	bl	8000484 <__aeabi_idivmod>
 8006b28:	1e0b      	subs	r3, r1, #0
 8006b2a:	d105      	bne.n	8006b38 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006be0 <makeTime+0x18c>)
 8006b30:	4694      	mov	ip, r2
 8006b32:	4463      	add	r3, ip
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	e010      	b.n	8006b5a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4a29      	ldr	r2, [pc, #164]	@ (8006be4 <makeTime+0x190>)
 8006b3e:	5cd3      	ldrb	r3, [r2, r3]
 8006b40:	001a      	movs	r2, r3
 8006b42:	0013      	movs	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	189b      	adds	r3, r3, r2
 8006b48:	011a      	lsls	r2, r3, #4
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	0113      	lsls	r3, r2, #4
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	01db      	lsls	r3, r3, #7
 8006b52:	001a      	movs	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	001a      	movs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	dbbc      	blt.n	8006ae6 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	789b      	ldrb	r3, [r3, #2]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	001a      	movs	r2, r3
 8006b74:	0013      	movs	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	189b      	adds	r3, r3, r2
 8006b7a:	011a      	lsls	r2, r3, #4
 8006b7c:	1ad2      	subs	r2, r2, r3
 8006b7e:	0113      	lsls	r3, r2, #4
 8006b80:	1a9b      	subs	r3, r3, r2
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	001a      	movs	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	001a      	movs	r2, r3
 8006b92:	0013      	movs	r3, r2
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	011a      	lsls	r2, r3, #4
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	0113      	lsls	r3, r2, #4
 8006b9e:	001a      	movs	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	189b      	adds	r3, r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	001a      	movs	r2, r3
 8006bac:	0013      	movs	r3, r2
 8006bae:	011b      	lsls	r3, r3, #4
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	189b      	adds	r3, r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	001a      	movs	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	189b      	adds	r3, r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
}
 8006bca:	0018      	movs	r0, r3
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	b004      	add	sp, #16
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	46c0      	nop			@ (mov r8, r8)
 8006bd4:	fffff84f 	.word	0xfffff84f
 8006bd8:	000007b2 	.word	0x000007b2
 8006bdc:	00015180 	.word	0x00015180
 8006be0:	00263b80 	.word	0x00263b80
 8006be4:	080243d8 	.word	0x080243d8

08006be8 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b089      	sub	sp, #36	@ 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	213c      	movs	r1, #60	@ 0x3c
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7f9 fb57 	bl	80002b0 <__aeabi_uidivmod>
 8006c02:	000b      	movs	r3, r1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	213c      	movs	r1, #60	@ 0x3c
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f7f9 fac8 	bl	80001a4 <__udivsi3>
 8006c14:	0003      	movs	r3, r0
 8006c16:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	213c      	movs	r1, #60	@ 0x3c
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7f9 fb47 	bl	80002b0 <__aeabi_uidivmod>
 8006c22:	000b      	movs	r3, r1
 8006c24:	b2da      	uxtb	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	213c      	movs	r1, #60	@ 0x3c
 8006c2e:	0018      	movs	r0, r3
 8006c30:	f7f9 fab8 	bl	80001a4 <__udivsi3>
 8006c34:	0003      	movs	r3, r0
 8006c36:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	2118      	movs	r1, #24
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f7f9 fb37 	bl	80002b0 <__aeabi_uidivmod>
 8006c42:	000b      	movs	r3, r1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2118      	movs	r1, #24
 8006c4e:	0018      	movs	r0, r3
 8006c50:	f7f9 faa8 	bl	80001a4 <__udivsi3>
 8006c54:	0003      	movs	r3, r0
 8006c56:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2107      	movs	r1, #7
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f7f9 fb26 	bl	80002b0 <__aeabi_uidivmod>
 8006c64:	000b      	movs	r3, r1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3301      	adds	r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006c70:	231f      	movs	r3, #31
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006c7c:	e005      	b.n	8006c8a <breakPosixTime+0xa2>
    year++;
 8006c7e:	211f      	movs	r1, #31
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	3201      	adds	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006c8a:	241f      	movs	r4, #31
 8006c8c:	193b      	adds	r3, r7, r4
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	4a64      	ldr	r2, [pc, #400]	@ (8006e24 <breakPosixTime+0x23c>)
 8006c92:	4694      	mov	ip, r2
 8006c94:	4463      	add	r3, ip
 8006c96:	001a      	movs	r2, r3
 8006c98:	2303      	movs	r3, #3
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d119      	bne.n	8006cd2 <breakPosixTime+0xea>
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4a60      	ldr	r2, [pc, #384]	@ (8006e24 <breakPosixTime+0x23c>)
 8006ca4:	4694      	mov	ip, r2
 8006ca6:	4463      	add	r3, ip
 8006ca8:	2164      	movs	r1, #100	@ 0x64
 8006caa:	0018      	movs	r0, r3
 8006cac:	f7f9 fbea 	bl	8000484 <__aeabi_idivmod>
 8006cb0:	1e0b      	subs	r3, r1, #0
 8006cb2:	d10b      	bne.n	8006ccc <breakPosixTime+0xe4>
 8006cb4:	193b      	adds	r3, r7, r4
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e24 <breakPosixTime+0x23c>)
 8006cba:	4694      	mov	ip, r2
 8006cbc:	4463      	add	r3, ip
 8006cbe:	22c8      	movs	r2, #200	@ 0xc8
 8006cc0:	0051      	lsls	r1, r2, #1
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f7f9 fbde 	bl	8000484 <__aeabi_idivmod>
 8006cc8:	1e0b      	subs	r3, r1, #0
 8006cca:	d102      	bne.n	8006cd2 <breakPosixTime+0xea>
 8006ccc:	23b7      	movs	r3, #183	@ 0xb7
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	e001      	b.n	8006cd6 <breakPosixTime+0xee>
 8006cd2:	236e      	movs	r3, #110	@ 0x6e
 8006cd4:	33ff      	adds	r3, #255	@ 0xff
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	18d3      	adds	r3, r2, r3
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d9cc      	bls.n	8006c7e <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	241f      	movs	r4, #31
 8006ce8:	193a      	adds	r2, r7, r4
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006cee:	193b      	adds	r3, r7, r4
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8006e24 <breakPosixTime+0x23c>)
 8006cf4:	4694      	mov	ip, r2
 8006cf6:	4463      	add	r3, ip
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d119      	bne.n	8006d34 <breakPosixTime+0x14c>
 8006d00:	193b      	adds	r3, r7, r4
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4a47      	ldr	r2, [pc, #284]	@ (8006e24 <breakPosixTime+0x23c>)
 8006d06:	4694      	mov	ip, r2
 8006d08:	4463      	add	r3, ip
 8006d0a:	2164      	movs	r1, #100	@ 0x64
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7f9 fbb9 	bl	8000484 <__aeabi_idivmod>
 8006d12:	1e0b      	subs	r3, r1, #0
 8006d14:	d10b      	bne.n	8006d2e <breakPosixTime+0x146>
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4a42      	ldr	r2, [pc, #264]	@ (8006e24 <breakPosixTime+0x23c>)
 8006d1c:	4694      	mov	ip, r2
 8006d1e:	4463      	add	r3, ip
 8006d20:	22c8      	movs	r2, #200	@ 0xc8
 8006d22:	0051      	lsls	r1, r2, #1
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7f9 fbad 	bl	8000484 <__aeabi_idivmod>
 8006d2a:	1e0b      	subs	r3, r1, #0
 8006d2c:	d102      	bne.n	8006d34 <breakPosixTime+0x14c>
 8006d2e:	23b7      	movs	r3, #183	@ 0xb7
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	e001      	b.n	8006d38 <breakPosixTime+0x150>
 8006d34:	236e      	movs	r3, #110	@ 0x6e
 8006d36:	33ff      	adds	r3, #255	@ 0xff
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	61bb      	str	r3, [r7, #24]

  days=0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
  month=0;
 8006d4a:	211e      	movs	r1, #30
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006d52:	231d      	movs	r3, #29
 8006d54:	18fb      	adds	r3, r7, r3
 8006d56:	2200      	movs	r2, #0
 8006d58:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006d5a:	187b      	adds	r3, r7, r1
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e048      	b.n	8006df4 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006d62:	231e      	movs	r3, #30
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d12a      	bne.n	8006dc2 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006d6c:	241f      	movs	r4, #31
 8006d6e:	193b      	adds	r3, r7, r4
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	4a2c      	ldr	r2, [pc, #176]	@ (8006e24 <breakPosixTime+0x23c>)
 8006d74:	4694      	mov	ip, r2
 8006d76:	4463      	add	r3, ip
 8006d78:	001a      	movs	r2, r3
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	d11b      	bne.n	8006db8 <breakPosixTime+0x1d0>
 8006d80:	193b      	adds	r3, r7, r4
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	4a27      	ldr	r2, [pc, #156]	@ (8006e24 <breakPosixTime+0x23c>)
 8006d86:	4694      	mov	ip, r2
 8006d88:	4463      	add	r3, ip
 8006d8a:	2164      	movs	r1, #100	@ 0x64
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f7f9 fb79 	bl	8000484 <__aeabi_idivmod>
 8006d92:	1e0b      	subs	r3, r1, #0
 8006d94:	d10b      	bne.n	8006dae <breakPosixTime+0x1c6>
 8006d96:	193b      	adds	r3, r7, r4
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	4a22      	ldr	r2, [pc, #136]	@ (8006e24 <breakPosixTime+0x23c>)
 8006d9c:	4694      	mov	ip, r2
 8006d9e:	4463      	add	r3, ip
 8006da0:	22c8      	movs	r2, #200	@ 0xc8
 8006da2:	0051      	lsls	r1, r2, #1
 8006da4:	0018      	movs	r0, r3
 8006da6:	f7f9 fb6d 	bl	8000484 <__aeabi_idivmod>
 8006daa:	1e0b      	subs	r3, r1, #0
 8006dac:	d104      	bne.n	8006db8 <breakPosixTime+0x1d0>
        monthLength=29;
 8006dae:	231d      	movs	r3, #29
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	221d      	movs	r2, #29
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	e00c      	b.n	8006dd2 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006db8:	231d      	movs	r3, #29
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	221c      	movs	r2, #28
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	e007      	b.n	8006dd2 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006dc2:	231e      	movs	r3, #30
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	781a      	ldrb	r2, [r3, #0]
 8006dc8:	231d      	movs	r3, #29
 8006dca:	18fb      	adds	r3, r7, r3
 8006dcc:	4916      	ldr	r1, [pc, #88]	@ (8006e28 <breakPosixTime+0x240>)
 8006dce:	5c8a      	ldrb	r2, [r1, r2]
 8006dd0:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006dd2:	211d      	movs	r1, #29
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d310      	bcc.n	8006e00 <breakPosixTime+0x218>
      time -= monthLength;
 8006dde:	187b      	adds	r3, r7, r1
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006de8:	211e      	movs	r1, #30
 8006dea:	187b      	adds	r3, r7, r1
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	187b      	adds	r3, r7, r1
 8006df0:	3201      	adds	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	231e      	movs	r3, #30
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b0b      	cmp	r3, #11
 8006dfc:	d9b1      	bls.n	8006d62 <breakPosixTime+0x17a>
 8006dfe:	e000      	b.n	8006e02 <breakPosixTime+0x21a>
    } else {
        break;
 8006e00:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006e02:	231e      	movs	r3, #30
 8006e04:	18fb      	adds	r3, r7, r3
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	3301      	adds	r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006e1c:	46c0      	nop			@ (mov r8, r8)
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	b009      	add	sp, #36	@ 0x24
 8006e22:	bd90      	pop	{r4, r7, pc}
 8006e24:	000007b2 	.word	0x000007b2
 8006e28:	080243d8 	.word	0x080243d8

08006e2c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e32:	003b      	movs	r3, r7
 8006e34:	0018      	movs	r0, r3
 8006e36:	2308      	movs	r3, #8
 8006e38:	001a      	movs	r2, r3
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	f018 fb8c 	bl	801f558 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006e40:	4b30      	ldr	r3, [pc, #192]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e42:	4a31      	ldr	r2, [pc, #196]	@ (8006f08 <MX_ADC_Init+0xdc>)
 8006e44:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006e46:	4b2f      	ldr	r3, [pc, #188]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e4e:	22c0      	movs	r2, #192	@ 0xc0
 8006e50:	0612      	lsls	r2, r2, #24
 8006e52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006e54:	4b2b      	ldr	r3, [pc, #172]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006e60:	4b28      	ldr	r3, [pc, #160]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006e66:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006e6c:	4b25      	ldr	r3, [pc, #148]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e6e:	2220      	movs	r2, #32
 8006e70:	2100      	movs	r1, #0
 8006e72:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006e74:	4b23      	ldr	r3, [pc, #140]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e76:	2221      	movs	r2, #33	@ 0x21
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e7c:	4b21      	ldr	r3, [pc, #132]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e82:	4b20      	ldr	r3, [pc, #128]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e84:	22c2      	movs	r2, #194	@ 0xc2
 8006e86:	32ff      	adds	r2, #255	@ 0xff
 8006e88:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e8c:	222c      	movs	r2, #44	@ 0x2c
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006e92:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e94:	2204      	movs	r2, #4
 8006e96:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006e98:	4b1a      	ldr	r3, [pc, #104]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006e9e:	4b19      	ldr	r3, [pc, #100]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006ea4:	4b17      	ldr	r3, [pc, #92]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006eaa:	4b16      	ldr	r3, [pc, #88]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006eb0:	4b14      	ldr	r3, [pc, #80]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f007 f98c 	bl	800e1d0 <HAL_ADC_Init>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d001      	beq.n	8006ec0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006ebc:	f001 fa68 	bl	8008390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006ec0:	003b      	movs	r3, r7
 8006ec2:	4a12      	ldr	r2, [pc, #72]	@ (8006f0c <MX_ADC_Init+0xe0>)
 8006ec4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006ec6:	003b      	movs	r3, r7
 8006ec8:	2280      	movs	r2, #128	@ 0x80
 8006eca:	0152      	lsls	r2, r2, #5
 8006ecc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006ece:	003a      	movs	r2, r7
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f007 fbeb 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 8006eda:	1e03      	subs	r3, r0, #0
 8006edc:	d001      	beq.n	8006ee2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006ede:	f001 fa57 	bl	8008390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006ee2:	003b      	movs	r3, r7
 8006ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8006f10 <MX_ADC_Init+0xe4>)
 8006ee6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006ee8:	003a      	movs	r2, r7
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <MX_ADC_Init+0xd8>)
 8006eec:	0011      	movs	r1, r2
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f007 fbde 	bl	800e6b0 <HAL_ADC_ConfigChannel>
 8006ef4:	1e03      	subs	r3, r0, #0
 8006ef6:	d001      	beq.n	8006efc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006ef8:	f001 fa4a 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006efc:	46c0      	nop			@ (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000cfc 	.word	0x20000cfc
 8006f08:	40012400 	.word	0x40012400
 8006f0c:	38004000 	.word	0x38004000
 8006f10:	3c008000 	.word	0x3c008000

08006f14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b089      	sub	sp, #36	@ 0x24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1c:	240c      	movs	r4, #12
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	0018      	movs	r0, r3
 8006f22:	2314      	movs	r3, #20
 8006f24:	001a      	movs	r2, r3
 8006f26:	2100      	movs	r1, #0
 8006f28:	f018 fb16 	bl	801f558 <memset>
  if(adcHandle->Instance==ADC1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a14      	ldr	r2, [pc, #80]	@ (8006f84 <HAL_ADC_MspInit+0x70>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d121      	bne.n	8006f7a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006f36:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <HAL_ADC_MspInit+0x74>)
 8006f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f3a:	4b13      	ldr	r3, [pc, #76]	@ (8006f88 <HAL_ADC_MspInit+0x74>)
 8006f3c:	2180      	movs	r1, #128	@ 0x80
 8006f3e:	0089      	lsls	r1, r1, #2
 8006f40:	430a      	orrs	r2, r1
 8006f42:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f44:	4b10      	ldr	r3, [pc, #64]	@ (8006f88 <HAL_ADC_MspInit+0x74>)
 8006f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <HAL_ADC_MspInit+0x74>)
 8006f4a:	2104      	movs	r1, #4
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f50:	4b0d      	ldr	r3, [pc, #52]	@ (8006f88 <HAL_ADC_MspInit+0x74>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f54:	2204      	movs	r2, #4
 8006f56:	4013      	ands	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006f5c:	193b      	adds	r3, r7, r4
 8006f5e:	2230      	movs	r2, #48	@ 0x30
 8006f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	2203      	movs	r2, #3
 8006f66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f68:	193b      	adds	r3, r7, r4
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f6e:	193b      	adds	r3, r7, r4
 8006f70:	4a06      	ldr	r2, [pc, #24]	@ (8006f8c <HAL_ADC_MspInit+0x78>)
 8006f72:	0019      	movs	r1, r3
 8006f74:	0010      	movs	r0, r2
 8006f76:	f008 f9a3 	bl	800f2c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006f7a:	46c0      	nop			@ (mov r8, r8)
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	b009      	add	sp, #36	@ 0x24
 8006f80:	bd90      	pop	{r4, r7, pc}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	40012400 	.word	0x40012400
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	50000800 	.word	0x50000800

08006f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f96:	4b10      	ldr	r3, [pc, #64]	@ (8006fd8 <MX_DMA_Init+0x48>)
 8006f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fd8 <MX_DMA_Init+0x48>)
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd8 <MX_DMA_Init+0x48>)
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4013      	ands	r3, r2
 8006faa:	607b      	str	r3, [r7, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	200a      	movs	r0, #10
 8006fb4:	f007 fd36 	bl	800ea24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006fb8:	200a      	movs	r0, #10
 8006fba:	f007 fd48 	bl	800ea4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	2103      	movs	r1, #3
 8006fc2:	200b      	movs	r0, #11
 8006fc4:	f007 fd2e 	bl	800ea24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006fc8:	200b      	movs	r0, #11
 8006fca:	f007 fd40 	bl	800ea4e <HAL_NVIC_EnableIRQ>

}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b002      	add	sp, #8
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	40021000 	.word	0x40021000

08006fdc <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fec:	d901      	bls.n	8006ff2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006fee:	237f      	movs	r3, #127	@ 0x7f
 8006ff0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006ff2:	2017      	movs	r0, #23
 8006ff4:	183b      	adds	r3, r7, r0
 8006ff6:	490d      	ldr	r1, [pc, #52]	@ (800702c <accessLUT10log10+0x50>)
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	188a      	adds	r2, r1, r2
 8006ffc:	7812      	ldrb	r2, [r2, #0]
 8006ffe:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007000:	0001      	movs	r1, r0
 8007002:	187b      	adds	r3, r7, r1
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2206      	movs	r2, #6
 8007008:	4113      	asrs	r3, r2
 800700a:	001a      	movs	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007010:	187b      	adds	r3, r7, r1
 8007012:	781a      	ldrb	r2, [r3, #0]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2106      	movs	r1, #6
 800701a:	408b      	lsls	r3, r1
 800701c:	1ad2      	subs	r2, r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
}
 8007022:	46c0      	nop			@ (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	b006      	add	sp, #24
 8007028:	bd80      	pop	{r7, pc}
 800702a:	46c0      	nop			@ (mov r8, r8)
 800702c:	080243e4 	.word	0x080243e4

08007030 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007030:	b5b0      	push	{r4, r5, r7, lr}
 8007032:	b090      	sub	sp, #64	@ 0x40
 8007034:	af00      	add	r7, sp, #0
 8007036:	6138      	str	r0, [r7, #16]
 8007038:	6179      	str	r1, [r7, #20]
 800703a:	60fa      	str	r2, [r7, #12]
 800703c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800703e:	2308      	movs	r3, #8
 8007040:	001a      	movs	r2, r3
 8007042:	3a20      	subs	r2, #32
 8007044:	2a00      	cmp	r2, #0
 8007046:	db03      	blt.n	8007050 <efficient10log10+0x20>
 8007048:	2101      	movs	r1, #1
 800704a:	4091      	lsls	r1, r2
 800704c:	000d      	movs	r5, r1
 800704e:	e008      	b.n	8007062 <efficient10log10+0x32>
 8007050:	2220      	movs	r2, #32
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	2101      	movs	r1, #1
 8007056:	40d1      	lsrs	r1, r2
 8007058:	000a      	movs	r2, r1
 800705a:	2100      	movs	r1, #0
 800705c:	4099      	lsls	r1, r3
 800705e:	000d      	movs	r5, r1
 8007060:	4315      	orrs	r5, r2
 8007062:	2201      	movs	r2, #1
 8007064:	409a      	lsls	r2, r3
 8007066:	0014      	movs	r4, r2
 8007068:	2201      	movs	r2, #1
 800706a:	4252      	negs	r2, r2
 800706c:	17d3      	asrs	r3, r2, #31
 800706e:	1912      	adds	r2, r2, r4
 8007070:	416b      	adcs	r3, r5
 8007072:	633a      	str	r2, [r7, #48]	@ 0x30
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8007076:	2336      	movs	r3, #54	@ 0x36
 8007078:	2208      	movs	r2, #8
 800707a:	189b      	adds	r3, r3, r2
 800707c:	19db      	adds	r3, r3, r7
 800707e:	2200      	movs	r2, #0
 8007080:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8007082:	e017      	b.n	80070b4 <efficient10log10+0x84>
    {
        P = P >> 1;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	07db      	lsls	r3, r3, #31
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	0852      	lsrs	r2, r2, #1
 800708c:	603a      	str	r2, [r7, #0]
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	431a      	orrs	r2, r3
 8007092:	603a      	str	r2, [r7, #0]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	085b      	lsrs	r3, r3, #1
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	687c      	ldr	r4, [r7, #4]
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	617c      	str	r4, [r7, #20]
        bShift++;
 80070a2:	2136      	movs	r1, #54	@ 0x36
 80070a4:	2008      	movs	r0, #8
 80070a6:	180b      	adds	r3, r1, r0
 80070a8:	19db      	adds	r3, r3, r7
 80070aa:	881a      	ldrh	r2, [r3, #0]
 80070ac:	180b      	adds	r3, r1, r0
 80070ae:	19db      	adds	r3, r3, r7
 80070b0:	3201      	adds	r2, #1
 80070b2:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d8e3      	bhi.n	8007084 <efficient10log10+0x54>
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d103      	bne.n	80070cc <efficient10log10+0x9c>
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d8db      	bhi.n	8007084 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	2308      	movs	r3, #8
 80070d0:	3b01      	subs	r3, #1
 80070d2:	2101      	movs	r1, #1
 80070d4:	4099      	lsls	r1, r3
 80070d6:	000b      	movs	r3, r1
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80070e0:	2300      	movs	r3, #0
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80070e4:	231c      	movs	r3, #28
 80070e6:	2408      	movs	r4, #8
 80070e8:	191b      	adds	r3, r3, r4
 80070ea:	19da      	adds	r2, r3, r7
 80070ec:	2320      	movs	r3, #32
 80070ee:	191b      	adds	r3, r3, r4
 80070f0:	19d9      	adds	r1, r3, r7
 80070f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f4:	0018      	movs	r0, r3
 80070f6:	f7ff ff71 	bl	8006fdc <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80070fa:	2215      	movs	r2, #21
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007100:	2036      	movs	r0, #54	@ 0x36
 8007102:	1902      	adds	r2, r0, r4
 8007104:	19d2      	adds	r2, r2, r7
 8007106:	8812      	ldrh	r2, [r2, #0]
 8007108:	2103      	movs	r1, #3
 800710a:	434a      	muls	r2, r1
 800710c:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800710e:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007110:	0021      	movs	r1, r4
 8007112:	1843      	adds	r3, r0, r1
 8007114:	19db      	adds	r3, r3, r7
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	4353      	muls	r3, r2
 800711c:	2203      	movs	r2, #3
 800711e:	4113      	asrs	r3, r2
 8007120:	001a      	movs	r2, r3
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007126:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007128:	2314      	movs	r3, #20
 800712a:	185b      	adds	r3, r3, r1
 800712c:	19da      	adds	r2, r3, r7
 800712e:	2318      	movs	r3, #24
 8007130:	185b      	adds	r3, r3, r1
 8007132:	19db      	adds	r3, r3, r7
 8007134:	0011      	movs	r1, r2
 8007136:	0018      	movs	r0, r3
 8007138:	f000 f80a 	bl	8007150 <correctIntFracNumber>
    integerPart[0] = intPart;
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007142:	69fa      	ldr	r2, [r7, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	601a      	str	r2, [r3, #0]
}
 8007148:	46c0      	nop			@ (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b010      	add	sp, #64	@ 0x40
 800714e:	bdb0      	pop	{r4, r5, r7, pc}

08007150 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800715a:	e00a      	b.n	8007172 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3b0a      	subs	r3, #10
 800716c:	001a      	movs	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b09      	cmp	r3, #9
 8007178:	dcf0      	bgt.n	800715c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800717a:	e00a      	b.n	8007192 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	1e5a      	subs	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	330a      	adds	r3, #10
 800718c:	001a      	movs	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3309      	adds	r3, #9
 8007198:	dbf0      	blt.n	800717c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da0f      	bge.n	80071c2 <correctIntFracNumber+0x72>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	dd0b      	ble.n	80071c2 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3b0a      	subs	r3, #10
 80071ba:	001a      	movs	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80071c0:	e012      	b.n	80071e8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd0e      	ble.n	80071e8 <correctIntFracNumber+0x98>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da0a      	bge.n	80071e8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	1e5a      	subs	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330a      	adds	r3, #10
 80071e2:	001a      	movs	r2, r3
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	601a      	str	r2, [r3, #0]
}
 80071e8:	46c0      	nop			@ (mov r8, r8)
 80071ea:	46bd      	mov	sp, r7
 80071ec:	b002      	add	sp, #8
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80071f0:	b590      	push	{r4, r7, lr}
 80071f2:	b08b      	sub	sp, #44	@ 0x2c
 80071f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f6:	2414      	movs	r4, #20
 80071f8:	193b      	adds	r3, r7, r4
 80071fa:	0018      	movs	r0, r3
 80071fc:	2314      	movs	r3, #20
 80071fe:	001a      	movs	r2, r3
 8007200:	2100      	movs	r1, #0
 8007202:	f018 f9a9 	bl	801f558 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007206:	4b8a      	ldr	r3, [pc, #552]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800720a:	4b89      	ldr	r3, [pc, #548]	@ (8007430 <MX_GPIO_Init+0x240>)
 800720c:	2104      	movs	r1, #4
 800720e:	430a      	orrs	r2, r1
 8007210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007212:	4b87      	ldr	r3, [pc, #540]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007216:	2204      	movs	r2, #4
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800721e:	4b84      	ldr	r3, [pc, #528]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007222:	4b83      	ldr	r3, [pc, #524]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007224:	2180      	movs	r1, #128	@ 0x80
 8007226:	430a      	orrs	r2, r1
 8007228:	62da      	str	r2, [r3, #44]	@ 0x2c
 800722a:	4b81      	ldr	r3, [pc, #516]	@ (8007430 <MX_GPIO_Init+0x240>)
 800722c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722e:	2280      	movs	r2, #128	@ 0x80
 8007230:	4013      	ands	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	4b7e      	ldr	r3, [pc, #504]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723a:	4b7d      	ldr	r3, [pc, #500]	@ (8007430 <MX_GPIO_Init+0x240>)
 800723c:	2101      	movs	r1, #1
 800723e:	430a      	orrs	r2, r1
 8007240:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007242:	4b7b      	ldr	r3, [pc, #492]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	2201      	movs	r2, #1
 8007248:	4013      	ands	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]
 800724c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800724e:	4b78      	ldr	r3, [pc, #480]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007252:	4b77      	ldr	r3, [pc, #476]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007254:	2102      	movs	r1, #2
 8007256:	430a      	orrs	r2, r1
 8007258:	62da      	str	r2, [r3, #44]	@ 0x2c
 800725a:	4b75      	ldr	r3, [pc, #468]	@ (8007430 <MX_GPIO_Init+0x240>)
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	2202      	movs	r2, #2
 8007260:	4013      	ands	r3, r2
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007266:	4b72      	ldr	r3, [pc, #456]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726a:	4b71      	ldr	r3, [pc, #452]	@ (8007430 <MX_GPIO_Init+0x240>)
 800726c:	2108      	movs	r1, #8
 800726e:	430a      	orrs	r2, r1
 8007270:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007272:	4b6f      	ldr	r3, [pc, #444]	@ (8007430 <MX_GPIO_Init+0x240>)
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	2208      	movs	r2, #8
 8007278:	4013      	ands	r3, r2
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800727e:	4b6d      	ldr	r3, [pc, #436]	@ (8007434 <MX_GPIO_Init+0x244>)
 8007280:	2201      	movs	r2, #1
 8007282:	2101      	movs	r1, #1
 8007284:	0018      	movs	r0, r3
 8007286:	f008 f9b6 	bl	800f5f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800728a:	4b6a      	ldr	r3, [pc, #424]	@ (8007434 <MX_GPIO_Init+0x244>)
 800728c:	2200      	movs	r2, #0
 800728e:	2102      	movs	r1, #2
 8007290:	0018      	movs	r0, r3
 8007292:	f008 f9b0 	bl	800f5f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8007296:	4968      	ldr	r1, [pc, #416]	@ (8007438 <MX_GPIO_Init+0x248>)
 8007298:	4b68      	ldr	r3, [pc, #416]	@ (800743c <MX_GPIO_Init+0x24c>)
 800729a:	2201      	movs	r2, #1
 800729c:	0018      	movs	r0, r3
 800729e:	f008 f9aa 	bl	800f5f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80072a2:	2380      	movs	r3, #128	@ 0x80
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	4866      	ldr	r0, [pc, #408]	@ (8007440 <MX_GPIO_Init+0x250>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	0019      	movs	r1, r3
 80072ac:	f008 f9a3 	bl	800f5f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80072b0:	2380      	movs	r3, #128	@ 0x80
 80072b2:	015b      	lsls	r3, r3, #5
 80072b4:	4862      	ldr	r0, [pc, #392]	@ (8007440 <MX_GPIO_Init+0x250>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	0019      	movs	r1, r3
 80072ba:	f008 f99c 	bl	800f5f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80072be:	193b      	adds	r3, r7, r4
 80072c0:	4a60      	ldr	r2, [pc, #384]	@ (8007444 <MX_GPIO_Init+0x254>)
 80072c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072c4:	193b      	adds	r3, r7, r4
 80072c6:	2203      	movs	r2, #3
 80072c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ca:	193b      	adds	r3, r7, r4
 80072cc:	2200      	movs	r2, #0
 80072ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072d0:	193b      	adds	r3, r7, r4
 80072d2:	4a5b      	ldr	r2, [pc, #364]	@ (8007440 <MX_GPIO_Init+0x250>)
 80072d4:	0019      	movs	r1, r3
 80072d6:	0010      	movs	r0, r2
 80072d8:	f007 fff2 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80072dc:	193b      	adds	r3, r7, r4
 80072de:	2203      	movs	r2, #3
 80072e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072e2:	193b      	adds	r3, r7, r4
 80072e4:	2201      	movs	r2, #1
 80072e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	193b      	adds	r3, r7, r4
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ee:	193b      	adds	r3, r7, r4
 80072f0:	2200      	movs	r2, #0
 80072f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80072f4:	193b      	adds	r3, r7, r4
 80072f6:	4a4f      	ldr	r2, [pc, #316]	@ (8007434 <MX_GPIO_Init+0x244>)
 80072f8:	0019      	movs	r1, r3
 80072fa:	0010      	movs	r0, r2
 80072fc:	f007 ffe0 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007300:	193b      	adds	r3, r7, r4
 8007302:	2270      	movs	r2, #112	@ 0x70
 8007304:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007306:	193b      	adds	r3, r7, r4
 8007308:	2203      	movs	r2, #3
 800730a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	193b      	adds	r3, r7, r4
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007312:	193a      	adds	r2, r7, r4
 8007314:	23a0      	movs	r3, #160	@ 0xa0
 8007316:	05db      	lsls	r3, r3, #23
 8007318:	0011      	movs	r1, r2
 800731a:	0018      	movs	r0, r3
 800731c:	f007 ffd0 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007320:	193b      	adds	r3, r7, r4
 8007322:	22c0      	movs	r2, #192	@ 0xc0
 8007324:	0052      	lsls	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007328:	193b      	adds	r3, r7, r4
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800732e:	193b      	adds	r3, r7, r4
 8007330:	2200      	movs	r2, #0
 8007332:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007334:	193a      	adds	r2, r7, r4
 8007336:	23a0      	movs	r3, #160	@ 0xa0
 8007338:	05db      	lsls	r3, r3, #23
 800733a:	0011      	movs	r1, r2
 800733c:	0018      	movs	r0, r3
 800733e:	f007 ffbf 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007342:	193b      	adds	r3, r7, r4
 8007344:	4a3c      	ldr	r2, [pc, #240]	@ (8007438 <MX_GPIO_Init+0x248>)
 8007346:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007348:	193b      	adds	r3, r7, r4
 800734a:	2201      	movs	r2, #1
 800734c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734e:	193b      	adds	r3, r7, r4
 8007350:	2200      	movs	r2, #0
 8007352:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007354:	193b      	adds	r3, r7, r4
 8007356:	2200      	movs	r2, #0
 8007358:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735a:	193b      	adds	r3, r7, r4
 800735c:	4a37      	ldr	r2, [pc, #220]	@ (800743c <MX_GPIO_Init+0x24c>)
 800735e:	0019      	movs	r1, r3
 8007360:	0010      	movs	r0, r2
 8007362:	f007 ffad 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8007366:	193b      	adds	r3, r7, r4
 8007368:	4a37      	ldr	r2, [pc, #220]	@ (8007448 <MX_GPIO_Init+0x258>)
 800736a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800736c:	193b      	adds	r3, r7, r4
 800736e:	2203      	movs	r2, #3
 8007370:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007372:	193b      	adds	r3, r7, r4
 8007374:	2200      	movs	r2, #0
 8007376:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007378:	193b      	adds	r3, r7, r4
 800737a:	4a30      	ldr	r2, [pc, #192]	@ (800743c <MX_GPIO_Init+0x24c>)
 800737c:	0019      	movs	r1, r3
 800737e:	0010      	movs	r0, r2
 8007380:	f007 ff9e 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8007384:	0021      	movs	r1, r4
 8007386:	187b      	adds	r3, r7, r1
 8007388:	2280      	movs	r2, #128	@ 0x80
 800738a:	0092      	lsls	r2, r2, #2
 800738c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800738e:	000c      	movs	r4, r1
 8007390:	193b      	adds	r3, r7, r4
 8007392:	2200      	movs	r2, #0
 8007394:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007396:	193b      	adds	r3, r7, r4
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800739c:	193b      	adds	r3, r7, r4
 800739e:	4a28      	ldr	r2, [pc, #160]	@ (8007440 <MX_GPIO_Init+0x250>)
 80073a0:	0019      	movs	r1, r3
 80073a2:	0010      	movs	r0, r2
 80073a4:	f007 ff8c 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80073a8:	193b      	adds	r3, r7, r4
 80073aa:	2280      	movs	r2, #128	@ 0x80
 80073ac:	0212      	lsls	r2, r2, #8
 80073ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80073b0:	193b      	adds	r3, r7, r4
 80073b2:	2288      	movs	r2, #136	@ 0x88
 80073b4:	0352      	lsls	r2, r2, #13
 80073b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	193b      	adds	r3, r7, r4
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80073be:	193a      	adds	r2, r7, r4
 80073c0:	23a0      	movs	r3, #160	@ 0xa0
 80073c2:	05db      	lsls	r3, r3, #23
 80073c4:	0011      	movs	r1, r2
 80073c6:	0018      	movs	r0, r3
 80073c8:	f007 ff7a 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 80073cc:	0021      	movs	r1, r4
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	22c0      	movs	r2, #192	@ 0xc0
 80073d2:	0152      	lsls	r2, r2, #5
 80073d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073d6:	000c      	movs	r4, r1
 80073d8:	193b      	adds	r3, r7, r4
 80073da:	2201      	movs	r2, #1
 80073dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073de:	193b      	adds	r3, r7, r4
 80073e0:	2200      	movs	r2, #0
 80073e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073e4:	193b      	adds	r3, r7, r4
 80073e6:	2200      	movs	r2, #0
 80073e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073ea:	193b      	adds	r3, r7, r4
 80073ec:	4a14      	ldr	r2, [pc, #80]	@ (8007440 <MX_GPIO_Init+0x250>)
 80073ee:	0019      	movs	r1, r3
 80073f0:	0010      	movs	r0, r2
 80073f2:	f007 ff65 	bl	800f2c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80073f6:	0021      	movs	r1, r4
 80073f8:	187b      	adds	r3, r7, r1
 80073fa:	2204      	movs	r2, #4
 80073fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	2200      	movs	r2, #0
 8007402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007404:	187b      	adds	r3, r7, r1
 8007406:	2201      	movs	r2, #1
 8007408:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800740a:	187b      	adds	r3, r7, r1
 800740c:	4a0f      	ldr	r2, [pc, #60]	@ (800744c <MX_GPIO_Init+0x25c>)
 800740e:	0019      	movs	r1, r3
 8007410:	0010      	movs	r0, r2
 8007412:	f007 ff55 	bl	800f2c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8007416:	2200      	movs	r2, #0
 8007418:	2100      	movs	r1, #0
 800741a:	2007      	movs	r0, #7
 800741c:	f007 fb02 	bl	800ea24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007420:	2007      	movs	r0, #7
 8007422:	f007 fb14 	bl	800ea4e <HAL_NVIC_EnableIRQ>

}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	46bd      	mov	sp, r7
 800742a:	b00b      	add	sp, #44	@ 0x2c
 800742c:	bd90      	pop	{r4, r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	40021000 	.word	0x40021000
 8007434:	50001c00 	.word	0x50001c00
 8007438:	00000301 	.word	0x00000301
 800743c:	50000400 	.word	0x50000400
 8007440:	50000800 	.word	0x50000800
 8007444:	0000200c 	.word	0x0000200c
 8007448:	0000403e 	.word	0x0000403e
 800744c:	50000c00 	.word	0x50000c00

08007450 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2100      	movs	r1, #0
 800745e:	0018      	movs	r0, r3
 8007460:	f00e fc8e 	bl	8015d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2108      	movs	r1, #8
 8007468:	0018      	movs	r0, r3
 800746a:	f00e fc89 	bl	8015d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	210c      	movs	r1, #12
 8007472:	0018      	movs	r0, r3
 8007474:	f00e fc84 	bl	8015d80 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007478:	2380      	movs	r3, #128	@ 0x80
 800747a:	05db      	lsls	r3, r3, #23
 800747c:	22fa      	movs	r2, #250	@ 0xfa
 800747e:	0112      	lsls	r2, r2, #4
 8007480:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	05db      	lsls	r3, r3, #23
 8007486:	22fa      	movs	r2, #250	@ 0xfa
 8007488:	0112      	lsls	r2, r2, #4
 800748a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800748c:	2380      	movs	r3, #128	@ 0x80
 800748e:	05db      	lsls	r3, r3, #23
 8007490:	22fa      	movs	r2, #250	@ 0xfa
 8007492:	0112      	lsls	r2, r2, #4
 8007494:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8007496:	2380      	movs	r3, #128	@ 0x80
 8007498:	05db      	lsls	r3, r3, #23
 800749a:	22fa      	movs	r2, #250	@ 0xfa
 800749c:	0112      	lsls	r2, r2, #4
 800749e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2100      	movs	r1, #0
 80074a4:	0018      	movs	r0, r3
 80074a6:	f00e fc6b 	bl	8015d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2104      	movs	r1, #4
 80074ae:	0018      	movs	r0, r3
 80074b0:	f00e fc66 	bl	8015d80 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2108      	movs	r1, #8
 80074b8:	0018      	movs	r0, r3
 80074ba:	f00e fc61 	bl	8015d80 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80074be:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <GPIO_InitPWMLEDs+0x98>)
 80074c0:	22fa      	movs	r2, #250	@ 0xfa
 80074c2:	0112      	lsls	r2, r2, #4
 80074c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80074c6:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <GPIO_InitPWMLEDs+0x98>)
 80074c8:	22fa      	movs	r2, #250	@ 0xfa
 80074ca:	0112      	lsls	r2, r2, #4
 80074cc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80074ce:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <GPIO_InitPWMLEDs+0x98>)
 80074d0:	22fa      	movs	r2, #250	@ 0xfa
 80074d2:	0112      	lsls	r2, r2, #4
 80074d4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80074d6:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <GPIO_InitPWMLEDs+0x98>)
 80074d8:	22fa      	movs	r2, #250	@ 0xfa
 80074da:	0112      	lsls	r2, r2, #4
 80074dc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b002      	add	sp, #8
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	40000400 	.word	0x40000400

080074ec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007560 <MX_I2C1_Init+0x74>)
 80074f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007564 <MX_I2C1_Init+0x78>)
 80074f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80074f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007560 <MX_I2C1_Init+0x74>)
 80074f8:	4a1b      	ldr	r2, [pc, #108]	@ (8007568 <MX_I2C1_Init+0x7c>)
 80074fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80074fc:	4b18      	ldr	r3, [pc, #96]	@ (8007560 <MX_I2C1_Init+0x74>)
 80074fe:	2200      	movs	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007502:	4b17      	ldr	r3, [pc, #92]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007504:	2201      	movs	r2, #1
 8007506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007508:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <MX_I2C1_Init+0x74>)
 800750a:	2200      	movs	r2, #0
 800750c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800750e:	4b14      	ldr	r3, [pc, #80]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007510:	2200      	movs	r2, #0
 8007512:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007514:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007516:	2200      	movs	r2, #0
 8007518:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800751a:	4b11      	ldr	r3, [pc, #68]	@ (8007560 <MX_I2C1_Init+0x74>)
 800751c:	2200      	movs	r2, #0
 800751e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007520:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007522:	2200      	movs	r2, #0
 8007524:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007526:	4b0e      	ldr	r3, [pc, #56]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007528:	0018      	movs	r0, r3
 800752a:	f008 f89d 	bl	800f668 <HAL_I2C_Init>
 800752e:	1e03      	subs	r3, r0, #0
 8007530:	d001      	beq.n	8007536 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007532:	f000 ff2d 	bl	8008390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007536:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <MX_I2C1_Init+0x74>)
 8007538:	2100      	movs	r1, #0
 800753a:	0018      	movs	r0, r3
 800753c:	f00a fc6e 	bl	8011e1c <HAL_I2CEx_ConfigAnalogFilter>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d001      	beq.n	8007548 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007544:	f000 ff24 	bl	8008390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <MX_I2C1_Init+0x74>)
 800754a:	2100      	movs	r1, #0
 800754c:	0018      	movs	r0, r3
 800754e:	f00a fcb1 	bl	8011eb4 <HAL_I2CEx_ConfigDigitalFilter>
 8007552:	1e03      	subs	r3, r0, #0
 8007554:	d001      	beq.n	800755a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8007556:	f000 ff1b 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800755a:	46c0      	nop			@ (mov r8, r8)
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000d58 	.word	0x20000d58
 8007564:	40005400 	.word	0x40005400
 8007568:	00503d58 	.word	0x00503d58

0800756c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007570:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <MX_I2C2_Init+0x74>)
 8007572:	4a1c      	ldr	r2, [pc, #112]	@ (80075e4 <MX_I2C2_Init+0x78>)
 8007574:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007576:	4b1a      	ldr	r3, [pc, #104]	@ (80075e0 <MX_I2C2_Init+0x74>)
 8007578:	4a1b      	ldr	r2, [pc, #108]	@ (80075e8 <MX_I2C2_Init+0x7c>)
 800757a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800757c:	4b18      	ldr	r3, [pc, #96]	@ (80075e0 <MX_I2C2_Init+0x74>)
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007582:	4b17      	ldr	r3, [pc, #92]	@ (80075e0 <MX_I2C2_Init+0x74>)
 8007584:	2201      	movs	r2, #1
 8007586:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007588:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <MX_I2C2_Init+0x74>)
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800758e:	4b14      	ldr	r3, [pc, #80]	@ (80075e0 <MX_I2C2_Init+0x74>)
 8007590:	2200      	movs	r2, #0
 8007592:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007594:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <MX_I2C2_Init+0x74>)
 8007596:	2200      	movs	r2, #0
 8007598:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800759a:	4b11      	ldr	r3, [pc, #68]	@ (80075e0 <MX_I2C2_Init+0x74>)
 800759c:	2200      	movs	r2, #0
 800759e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075a0:	4b0f      	ldr	r3, [pc, #60]	@ (80075e0 <MX_I2C2_Init+0x74>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80075a6:	4b0e      	ldr	r3, [pc, #56]	@ (80075e0 <MX_I2C2_Init+0x74>)
 80075a8:	0018      	movs	r0, r3
 80075aa:	f008 f85d 	bl	800f668 <HAL_I2C_Init>
 80075ae:	1e03      	subs	r3, r0, #0
 80075b0:	d001      	beq.n	80075b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80075b2:	f000 feed 	bl	8008390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80075b6:	4b0a      	ldr	r3, [pc, #40]	@ (80075e0 <MX_I2C2_Init+0x74>)
 80075b8:	2100      	movs	r1, #0
 80075ba:	0018      	movs	r0, r3
 80075bc:	f00a fc2e 	bl	8011e1c <HAL_I2CEx_ConfigAnalogFilter>
 80075c0:	1e03      	subs	r3, r0, #0
 80075c2:	d001      	beq.n	80075c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80075c4:	f000 fee4 	bl	8008390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <MX_I2C2_Init+0x74>)
 80075ca:	2100      	movs	r1, #0
 80075cc:	0018      	movs	r0, r3
 80075ce:	f00a fc71 	bl	8011eb4 <HAL_I2CEx_ConfigDigitalFilter>
 80075d2:	1e03      	subs	r3, r0, #0
 80075d4:	d001      	beq.n	80075da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80075d6:	f000 fedb 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000dac 	.word	0x20000dac
 80075e4:	40005800 	.word	0x40005800
 80075e8:	00503d58 	.word	0x00503d58

080075ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80075ec:	b590      	push	{r4, r7, lr}
 80075ee:	b08b      	sub	sp, #44	@ 0x2c
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f4:	2414      	movs	r4, #20
 80075f6:	193b      	adds	r3, r7, r4
 80075f8:	0018      	movs	r0, r3
 80075fa:	2314      	movs	r3, #20
 80075fc:	001a      	movs	r2, r3
 80075fe:	2100      	movs	r1, #0
 8007600:	f017 ffaa 	bl	801f558 <memset>
  if(i2cHandle->Instance==I2C1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5d      	ldr	r2, [pc, #372]	@ (8007780 <HAL_I2C_MspInit+0x194>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d000      	beq.n	8007610 <HAL_I2C_MspInit+0x24>
 800760e:	e083      	b.n	8007718 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007610:	4b5c      	ldr	r3, [pc, #368]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007614:	4b5b      	ldr	r3, [pc, #364]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007616:	2102      	movs	r1, #2
 8007618:	430a      	orrs	r2, r1
 800761a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800761c:	4b59      	ldr	r3, [pc, #356]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 800761e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007620:	2202      	movs	r2, #2
 8007622:	4013      	ands	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007628:	0021      	movs	r1, r4
 800762a:	187b      	adds	r3, r7, r1
 800762c:	22c0      	movs	r2, #192	@ 0xc0
 800762e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007630:	187b      	adds	r3, r7, r1
 8007632:	2212      	movs	r2, #18
 8007634:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007636:	187b      	adds	r3, r7, r1
 8007638:	2200      	movs	r2, #0
 800763a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2203      	movs	r2, #3
 8007640:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007642:	187b      	adds	r3, r7, r1
 8007644:	2201      	movs	r2, #1
 8007646:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007648:	187b      	adds	r3, r7, r1
 800764a:	4a4f      	ldr	r2, [pc, #316]	@ (8007788 <HAL_I2C_MspInit+0x19c>)
 800764c:	0019      	movs	r1, r3
 800764e:	0010      	movs	r0, r2
 8007650:	f007 fe36 	bl	800f2c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007654:	4b4b      	ldr	r3, [pc, #300]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007658:	4b4a      	ldr	r3, [pc, #296]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 800765a:	2180      	movs	r1, #128	@ 0x80
 800765c:	0389      	lsls	r1, r1, #14
 800765e:	430a      	orrs	r2, r1
 8007660:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8007662:	4b4a      	ldr	r3, [pc, #296]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007664:	4a4a      	ldr	r2, [pc, #296]	@ (8007790 <HAL_I2C_MspInit+0x1a4>)
 8007666:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8007668:	4b48      	ldr	r3, [pc, #288]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 800766a:	2206      	movs	r2, #6
 800766c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800766e:	4b47      	ldr	r3, [pc, #284]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007670:	2200      	movs	r2, #0
 8007672:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007674:	4b45      	ldr	r3, [pc, #276]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007676:	2200      	movs	r2, #0
 8007678:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800767a:	4b44      	ldr	r3, [pc, #272]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 800767c:	2280      	movs	r2, #128	@ 0x80
 800767e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007680:	4b42      	ldr	r3, [pc, #264]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007682:	2200      	movs	r2, #0
 8007684:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007686:	4b41      	ldr	r3, [pc, #260]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007688:	2200      	movs	r2, #0
 800768a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800768c:	4b3f      	ldr	r3, [pc, #252]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 800768e:	2200      	movs	r2, #0
 8007690:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007692:	4b3e      	ldr	r3, [pc, #248]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 8007694:	2200      	movs	r2, #0
 8007696:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007698:	4b3c      	ldr	r3, [pc, #240]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 800769a:	0018      	movs	r0, r3
 800769c:	f007 f9f4 	bl	800ea88 <HAL_DMA_Init>
 80076a0:	1e03      	subs	r3, r0, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80076a4:	f000 fe74 	bl	8008390 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a38      	ldr	r2, [pc, #224]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 80076ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80076ae:	4b37      	ldr	r3, [pc, #220]	@ (800778c <HAL_I2C_MspInit+0x1a0>)
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80076b4:	4b37      	ldr	r3, [pc, #220]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076b6:	4a38      	ldr	r2, [pc, #224]	@ (8007798 <HAL_I2C_MspInit+0x1ac>)
 80076b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80076ba:	4b36      	ldr	r3, [pc, #216]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076bc:	2206      	movs	r2, #6
 80076be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076c0:	4b34      	ldr	r3, [pc, #208]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076c2:	2210      	movs	r2, #16
 80076c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076c6:	4b33      	ldr	r3, [pc, #204]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076cc:	4b31      	ldr	r3, [pc, #196]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076ce:	2280      	movs	r2, #128	@ 0x80
 80076d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076d2:	4b30      	ldr	r3, [pc, #192]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076da:	2200      	movs	r2, #0
 80076dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80076de:	4b2d      	ldr	r3, [pc, #180]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80076ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076ec:	0018      	movs	r0, r3
 80076ee:	f007 f9cb 	bl	800ea88 <HAL_DMA_Init>
 80076f2:	1e03      	subs	r3, r0, #0
 80076f4:	d001      	beq.n	80076fa <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80076f6:	f000 fe4b 	bl	8008390 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a25      	ldr	r2, [pc, #148]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007700:	4b24      	ldr	r3, [pc, #144]	@ (8007794 <HAL_I2C_MspInit+0x1a8>)
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	2017      	movs	r0, #23
 800770c:	f007 f98a 	bl	800ea24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007710:	2017      	movs	r0, #23
 8007712:	f007 f99c 	bl	800ea4e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007716:	e02e      	b.n	8007776 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1f      	ldr	r2, [pc, #124]	@ (800779c <HAL_I2C_MspInit+0x1b0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d129      	bne.n	8007776 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007722:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007726:	4b17      	ldr	r3, [pc, #92]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007728:	2102      	movs	r1, #2
 800772a:	430a      	orrs	r2, r1
 800772c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 8007730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007732:	2202      	movs	r2, #2
 8007734:	4013      	ands	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800773a:	2114      	movs	r1, #20
 800773c:	187b      	adds	r3, r7, r1
 800773e:	22c0      	movs	r2, #192	@ 0xc0
 8007740:	0112      	lsls	r2, r2, #4
 8007742:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007744:	187b      	adds	r3, r7, r1
 8007746:	2212      	movs	r2, #18
 8007748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774a:	187b      	adds	r3, r7, r1
 800774c:	2200      	movs	r2, #0
 800774e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007750:	187b      	adds	r3, r7, r1
 8007752:	2203      	movs	r2, #3
 8007754:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8007756:	187b      	adds	r3, r7, r1
 8007758:	2206      	movs	r2, #6
 800775a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800775c:	187b      	adds	r3, r7, r1
 800775e:	4a0a      	ldr	r2, [pc, #40]	@ (8007788 <HAL_I2C_MspInit+0x19c>)
 8007760:	0019      	movs	r1, r3
 8007762:	0010      	movs	r0, r2
 8007764:	f007 fdac 	bl	800f2c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007768:	4b06      	ldr	r3, [pc, #24]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 800776a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_I2C_MspInit+0x198>)
 800776e:	2180      	movs	r1, #128	@ 0x80
 8007770:	03c9      	lsls	r1, r1, #15
 8007772:	430a      	orrs	r2, r1
 8007774:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007776:	46c0      	nop			@ (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b00b      	add	sp, #44	@ 0x2c
 800777c:	bd90      	pop	{r4, r7, pc}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	40005400 	.word	0x40005400
 8007784:	40021000 	.word	0x40021000
 8007788:	50000400 	.word	0x50000400
 800778c:	20000e00 	.word	0x20000e00
 8007790:	40020030 	.word	0x40020030
 8007794:	20000e48 	.word	0x20000e48
 8007798:	4002001c 	.word	0x4002001c
 800779c:	40005800 	.word	0x40005800

080077a0 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80077a4:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077a6:	4a11      	ldr	r2, [pc, #68]	@ (80077ec <MX_I2S2_Init+0x4c>)
 80077a8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80077aa:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077ac:	22c0      	movs	r2, #192	@ 0xc0
 80077ae:	0092      	lsls	r2, r2, #2
 80077b0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80077b8:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077ba:	2203      	movs	r2, #3
 80077bc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80077be:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80077c4:	4b08      	ldr	r3, [pc, #32]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077c6:	22fa      	movs	r2, #250	@ 0xfa
 80077c8:	0192      	lsls	r2, r2, #6
 80077ca:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80077d2:	4b05      	ldr	r3, [pc, #20]	@ (80077e8 <MX_I2S2_Init+0x48>)
 80077d4:	0018      	movs	r0, r3
 80077d6:	f00a fbb9 	bl	8011f4c <HAL_I2S_Init>
 80077da:	1e03      	subs	r3, r0, #0
 80077dc:	d001      	beq.n	80077e2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80077de:	f000 fdd7 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000e90 	.word	0x20000e90
 80077ec:	40003800 	.word	0x40003800

080077f0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80077f0:	b590      	push	{r4, r7, lr}
 80077f2:	b089      	sub	sp, #36	@ 0x24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f8:	240c      	movs	r4, #12
 80077fa:	193b      	adds	r3, r7, r4
 80077fc:	0018      	movs	r0, r3
 80077fe:	2314      	movs	r3, #20
 8007800:	001a      	movs	r2, r3
 8007802:	2100      	movs	r1, #0
 8007804:	f017 fea8 	bl	801f558 <memset>
  if(i2sHandle->Instance==SPI2)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <HAL_I2S_MspInit+0xd4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d154      	bne.n	80078bc <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007812:	4b2d      	ldr	r3, [pc, #180]	@ (80078c8 <HAL_I2S_MspInit+0xd8>)
 8007814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007816:	4b2c      	ldr	r3, [pc, #176]	@ (80078c8 <HAL_I2S_MspInit+0xd8>)
 8007818:	2180      	movs	r1, #128	@ 0x80
 800781a:	01c9      	lsls	r1, r1, #7
 800781c:	430a      	orrs	r2, r1
 800781e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007820:	4b29      	ldr	r3, [pc, #164]	@ (80078c8 <HAL_I2S_MspInit+0xd8>)
 8007822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007824:	4b28      	ldr	r3, [pc, #160]	@ (80078c8 <HAL_I2S_MspInit+0xd8>)
 8007826:	2102      	movs	r1, #2
 8007828:	430a      	orrs	r2, r1
 800782a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800782c:	4b26      	ldr	r3, [pc, #152]	@ (80078c8 <HAL_I2S_MspInit+0xd8>)
 800782e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007830:	2202      	movs	r2, #2
 8007832:	4013      	ands	r3, r2
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007838:	193b      	adds	r3, r7, r4
 800783a:	22b0      	movs	r2, #176	@ 0xb0
 800783c:	0212      	lsls	r2, r2, #8
 800783e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	0021      	movs	r1, r4
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2202      	movs	r2, #2
 8007846:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	187b      	adds	r3, r7, r1
 800784a:	2200      	movs	r2, #0
 800784c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784e:	187b      	adds	r3, r7, r1
 8007850:	2200      	movs	r2, #0
 8007852:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007854:	187b      	adds	r3, r7, r1
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800785a:	187b      	adds	r3, r7, r1
 800785c:	4a1b      	ldr	r2, [pc, #108]	@ (80078cc <HAL_I2S_MspInit+0xdc>)
 800785e:	0019      	movs	r1, r3
 8007860:	0010      	movs	r0, r2
 8007862:	f007 fd2d 	bl	800f2c0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007866:	4b1a      	ldr	r3, [pc, #104]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 8007868:	4a1a      	ldr	r2, [pc, #104]	@ (80078d4 <HAL_I2S_MspInit+0xe4>)
 800786a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800786c:	4b18      	ldr	r3, [pc, #96]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 800786e:	2202      	movs	r2, #2
 8007870:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007872:	4b17      	ldr	r3, [pc, #92]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 8007874:	2200      	movs	r2, #0
 8007876:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007878:	4b15      	ldr	r3, [pc, #84]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 800787a:	2200      	movs	r2, #0
 800787c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800787e:	4b14      	ldr	r3, [pc, #80]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 8007880:	2280      	movs	r2, #128	@ 0x80
 8007882:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007884:	4b12      	ldr	r3, [pc, #72]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 8007886:	2280      	movs	r2, #128	@ 0x80
 8007888:	0052      	lsls	r2, r2, #1
 800788a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800788c:	4b10      	ldr	r3, [pc, #64]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 800788e:	2280      	movs	r2, #128	@ 0x80
 8007890:	00d2      	lsls	r2, r2, #3
 8007892:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007894:	4b0e      	ldr	r3, [pc, #56]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 8007896:	2220      	movs	r2, #32
 8007898:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800789a:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 800789c:	2200      	movs	r2, #0
 800789e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80078a0:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 80078a2:	0018      	movs	r0, r3
 80078a4:	f007 f8f0 	bl	800ea88 <HAL_DMA_Init>
 80078a8:	1e03      	subs	r3, r0, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80078ac:	f000 fd70 	bl	8008390 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a07      	ldr	r2, [pc, #28]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 80078b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80078b6:	4b06      	ldr	r3, [pc, #24]	@ (80078d0 <HAL_I2S_MspInit+0xe0>)
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	46bd      	mov	sp, r7
 80078c0:	b009      	add	sp, #36	@ 0x24
 80078c2:	bd90      	pop	{r4, r7, pc}
 80078c4:	40003800 	.word	0x40003800
 80078c8:	40021000 	.word	0x40021000
 80078cc:	50000400 	.word	0x50000400
 80078d0:	20000ecc 	.word	0x20000ecc
 80078d4:	40020044 	.word	0x40020044

080078d8 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0
  testDone = true;
 80078dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007958 <SetTestDone+0x80>)
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80078e2:	23fa      	movs	r3, #250	@ 0xfa
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	0018      	movs	r0, r3
 80078e8:	f006 fc14 	bl	800e114 <HAL_Delay>
  SetDBLED(false, false, true);
 80078ec:	2201      	movs	r2, #1
 80078ee:	2100      	movs	r1, #0
 80078f0:	2000      	movs	r0, #0
 80078f2:	f005 f82f 	bl	800c954 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80078f6:	4a19      	ldr	r2, [pc, #100]	@ (800795c <SetTestDone+0x84>)
 80078f8:	23fa      	movs	r3, #250	@ 0xfa
 80078fa:	0119      	lsls	r1, r3, #4
 80078fc:	23fa      	movs	r3, #250	@ 0xfa
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	0018      	movs	r0, r3
 8007902:	f004 fff3 	bl	800c8ec <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007906:	4a15      	ldr	r2, [pc, #84]	@ (800795c <SetTestDone+0x84>)
 8007908:	23fa      	movs	r3, #250	@ 0xfa
 800790a:	0119      	lsls	r1, r3, #4
 800790c:	23fa      	movs	r3, #250	@ 0xfa
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	0018      	movs	r0, r3
 8007912:	f005 f869 	bl	800c9e8 <SetVocLED>
  HAL_Delay(1000);
 8007916:	23fa      	movs	r3, #250	@ 0xfa
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	0018      	movs	r0, r3
 800791c:	f006 fbfa 	bl	800e114 <HAL_Delay>
  SetDBLED(false, false, false);
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	2000      	movs	r0, #0
 8007926:	f005 f815 	bl	800c954 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800792a:	23fa      	movs	r3, #250	@ 0xfa
 800792c:	011a      	lsls	r2, r3, #4
 800792e:	23fa      	movs	r3, #250	@ 0xfa
 8007930:	0119      	lsls	r1, r3, #4
 8007932:	23fa      	movs	r3, #250	@ 0xfa
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	0018      	movs	r0, r3
 8007938:	f004 ffd8 	bl	800c8ec <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 800793c:	23fa      	movs	r3, #250	@ 0xfa
 800793e:	011a      	lsls	r2, r3, #4
 8007940:	23fa      	movs	r3, #250	@ 0xfa
 8007942:	0119      	lsls	r1, r3, #4
 8007944:	23fa      	movs	r3, #250	@ 0xfa
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	0018      	movs	r0, r3
 800794a:	f005 f84d 	bl	800c9e8 <SetVocLED>
  InitDone();
 800794e:	f004 ff77 	bl	800c840 <InitDone>
}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000f14 	.word	0x20000f14
 800795c:	00000bb8 	.word	0x00000bb8

08007960 <testInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void testInit(){
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 8007964:	4b08      	ldr	r3, [pc, #32]	@ (8007988 <testInit+0x28>)
 8007966:	2200      	movs	r2, #0
 8007968:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800796a:	4b07      	ldr	r3, [pc, #28]	@ (8007988 <testInit+0x28>)
 800796c:	2200      	movs	r2, #0
 800796e:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 8007970:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <testInit+0x28>)
 8007972:	2200      	movs	r2, #0
 8007974:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 8007976:	4b04      	ldr	r3, [pc, #16]	@ (8007988 <testInit+0x28>)
 8007978:	2200      	movs	r2, #0
 800797a:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 800797c:	4b02      	ldr	r3, [pc, #8]	@ (8007988 <testInit+0x28>)
 800797e:	2200      	movs	r2, #0
 8007980:	711a      	strb	r2, [r3, #4]
}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000f34 	.word	0x20000f34

0800798c <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8007990:	4b02      	ldr	r3, [pc, #8]	@ (800799c <GetPMSensorPresence+0x10>)
 8007992:	789b      	ldrb	r3, [r3, #2]
}
 8007994:	0018      	movs	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			@ (mov r8, r8)
 800799c:	20000f34 	.word	0x20000f34

080079a0 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 80079a4:	4b02      	ldr	r3, [pc, #8]	@ (80079b0 <IsPMSensorEnabled+0x10>)
 80079a6:	789b      	ldrb	r3, [r3, #2]
}
 80079a8:	0018      	movs	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			@ (mov r8, r8)
 80079b0:	2000007c 	.word	0x2000007c

080079b4 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80079b8:	4b02      	ldr	r3, [pc, #8]	@ (80079c4 <SetESPMeasurementDone+0x10>)
 80079ba:	2201      	movs	r2, #1
 80079bc:	711a      	strb	r2, [r3, #4]
}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	20000f34 	.word	0x20000f34

080079c8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  testInit();
 80079d6:	f7ff ffc3 	bl	8007960 <testInit>
  I2CSensors_Init(sensorI2C);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	0018      	movs	r0, r3
 80079de:	f7fe f8f1 	bl	8005bc4 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 80079e2:	f006 f969 	bl	800dcb8 <HIDS_DeviceConnected>
 80079e6:	0003      	movs	r3, r0
 80079e8:	001a      	movs	r2, r3
 80079ea:	2301      	movs	r3, #1
 80079ec:	4053      	eors	r3, r2
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00c      	beq.n	8007a0e <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 80079f4:	4a72      	ldr	r2, [pc, #456]	@ (8007bc0 <Device_Init+0x1f8>)
 80079f6:	4b73      	ldr	r3, [pc, #460]	@ (8007bc4 <Device_Init+0x1fc>)
 80079f8:	0019      	movs	r1, r3
 80079fa:	2001      	movs	r0, #1
 80079fc:	f005 ff34 	bl	800d868 <CreateLine>
     SensorProbe.HT_Present = false;
 8007a00:	4b71      	ldr	r3, [pc, #452]	@ (8007bc8 <Device_Init+0x200>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8007a06:	4b71      	ldr	r3, [pc, #452]	@ (8007bcc <Device_Init+0x204>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e008      	b.n	8007a20 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 8007a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8007bc8 <Device_Init+0x200>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8007a14:	4a6e      	ldr	r2, [pc, #440]	@ (8007bd0 <Device_Init+0x208>)
 8007a16:	4b6f      	ldr	r3, [pc, #444]	@ (8007bd4 <Device_Init+0x20c>)
 8007a18:	0019      	movs	r1, r3
 8007a1a:	2003      	movs	r0, #3
 8007a1c:	f005 ff24 	bl	800d868 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 8007a20:	f003 fcdc 	bl	800b3dc <SGP_DeviceConnected>
 8007a24:	0003      	movs	r3, r0
 8007a26:	001a      	movs	r2, r3
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4053      	eors	r3, r2
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00c      	beq.n	8007a4c <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 8007a32:	4b65      	ldr	r3, [pc, #404]	@ (8007bc8 <Device_Init+0x200>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8007a38:	4a67      	ldr	r2, [pc, #412]	@ (8007bd8 <Device_Init+0x210>)
 8007a3a:	4b62      	ldr	r3, [pc, #392]	@ (8007bc4 <Device_Init+0x1fc>)
 8007a3c:	0019      	movs	r1, r3
 8007a3e:	2001      	movs	r0, #1
 8007a40:	f005 ff12 	bl	800d868 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8007a44:	4b61      	ldr	r3, [pc, #388]	@ (8007bcc <Device_Init+0x204>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	705a      	strb	r2, [r3, #1]
 8007a4a:	e008      	b.n	8007a5e <Device_Init+0x96>
  }
  else{
    SensorProbe.VOC_Present = true;
 8007a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8007bc8 <Device_Init+0x200>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8007a52:	4a62      	ldr	r2, [pc, #392]	@ (8007bdc <Device_Init+0x214>)
 8007a54:	4b5f      	ldr	r3, [pc, #380]	@ (8007bd4 <Device_Init+0x20c>)
 8007a56:	0019      	movs	r1, r3
 8007a58:	2003      	movs	r0, #3
 8007a5a:	f005 ff05 	bl	800d868 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8007a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8007bc8 <Device_Init+0x200>)
 8007a60:	785b      	ldrb	r3, [r3, #1]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <Device_Init+0xb2>
 8007a66:	4b58      	ldr	r3, [pc, #352]	@ (8007bc8 <Device_Init+0x200>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <Device_Init+0xb2>
    SetDBLED(false, true, false);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2101      	movs	r1, #1
 8007a72:	2000      	movs	r0, #0
 8007a74:	f004 ff6e 	bl	800c954 <SetDBLED>
 8007a78:	e018      	b.n	8007aac <Device_Init+0xe4>
  }
  else{
    SetDBLED(true, false, false);
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	2001      	movs	r0, #1
 8007a80:	f004 ff68 	bl	800c954 <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007a84:	4b56      	ldr	r3, [pc, #344]	@ (8007be0 <Device_Init+0x218>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	2101      	movs	r1, #1
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f007 fdb3 	bl	800f5f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007a90:	2380      	movs	r3, #128	@ 0x80
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	4852      	ldr	r0, [pc, #328]	@ (8007be0 <Device_Init+0x218>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	0019      	movs	r1, r3
 8007a9a:	f007 fdac 	bl	800f5f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007a9e:	2380      	movs	r3, #128	@ 0x80
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	484f      	ldr	r0, [pc, #316]	@ (8007be0 <Device_Init+0x218>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	0019      	movs	r1, r3
 8007aa8:	f007 fda5 	bl	800f5f6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 8007aac:	4b47      	ldr	r3, [pc, #284]	@ (8007bcc <Device_Init+0x204>)
 8007aae:	78db      	ldrb	r3, [r3, #3]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d028      	beq.n	8007b06 <Device_Init+0x13e>
    Info("Device_Init calls enableMicrophone");
 8007ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8007be4 <Device_Init+0x21c>)
 8007ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8007be8 <Device_Init+0x220>)
 8007ab8:	0019      	movs	r1, r3
 8007aba:	2002      	movs	r0, #2
 8007abc:	f005 fed4 	bl	800d868 <CreateLine>
    if (!enableMicrophone(true)) {
 8007ac0:	2001      	movs	r0, #1
 8007ac2:	f004 f89b 	bl	800bbfc <enableMicrophone>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	001a      	movs	r2, r3
 8007aca:	2301      	movs	r3, #1
 8007acc:	4053      	eors	r3, r2
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00c      	beq.n	8007aee <Device_Init+0x126>
      Error("Microphone device not connected! DMA Error.");
 8007ad4:	4a45      	ldr	r2, [pc, #276]	@ (8007bec <Device_Init+0x224>)
 8007ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8007bc4 <Device_Init+0x1fc>)
 8007ad8:	0019      	movs	r1, r3
 8007ada:	2001      	movs	r0, #1
 8007adc:	f005 fec4 	bl	800d868 <CreateLine>
      SensorProbe.MIC_Present = false;
 8007ae0:	4b39      	ldr	r3, [pc, #228]	@ (8007bc8 <Device_Init+0x200>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8007ae6:	4b39      	ldr	r3, [pc, #228]	@ (8007bcc <Device_Init+0x204>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	70da      	strb	r2, [r3, #3]
 8007aec:	e00b      	b.n	8007b06 <Device_Init+0x13e>
    }
    else{
      SensorProbe.MIC_Present = true;
 8007aee:	4b36      	ldr	r3, [pc, #216]	@ (8007bc8 <Device_Init+0x200>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007af4:	4b35      	ldr	r3, [pc, #212]	@ (8007bcc <Device_Init+0x204>)
 8007af6:	2201      	movs	r2, #1
 8007af8:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 8007afa:	4a3d      	ldr	r2, [pc, #244]	@ (8007bf0 <Device_Init+0x228>)
 8007afc:	4b35      	ldr	r3, [pc, #212]	@ (8007bd4 <Device_Init+0x20c>)
 8007afe:	0019      	movs	r1, r3
 8007b00:	2003      	movs	r0, #3
 8007b02:	f005 feb1 	bl	800d868 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8007b06:	f001 f86f 	bl	8008be8 <probe_sen5x>
 8007b0a:	1e03      	subs	r3, r0, #0
 8007b0c:	d10c      	bne.n	8007b28 <Device_Init+0x160>
    Debug("PM sensor initialised.");
 8007b0e:	4a39      	ldr	r2, [pc, #228]	@ (8007bf4 <Device_Init+0x22c>)
 8007b10:	4b30      	ldr	r3, [pc, #192]	@ (8007bd4 <Device_Init+0x20c>)
 8007b12:	0019      	movs	r1, r3
 8007b14:	2003      	movs	r0, #3
 8007b16:	f005 fea7 	bl	800d868 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 8007b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007bc8 <Device_Init+0x200>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8007b20:	4b2a      	ldr	r3, [pc, #168]	@ (8007bcc <Device_Init+0x204>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	709a      	strb	r2, [r3, #2]
 8007b26:	e00d      	b.n	8007b44 <Device_Init+0x17c>
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8007b28:	f001 f836 	bl	8008b98 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 8007b2c:	4a32      	ldr	r2, [pc, #200]	@ (8007bf8 <Device_Init+0x230>)
 8007b2e:	4b29      	ldr	r3, [pc, #164]	@ (8007bd4 <Device_Init+0x20c>)
 8007b30:	0019      	movs	r1, r3
 8007b32:	2003      	movs	r0, #3
 8007b34:	f005 fe98 	bl	800d868 <CreateLine>
    SensorProbe.MIC_Present = false;
 8007b38:	4b23      	ldr	r3, [pc, #140]	@ (8007bc8 <Device_Init+0x200>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	70da      	strb	r2, [r3, #3]
    Sensor.PM_measurementEnabled = false;
 8007b3e:	4b23      	ldr	r3, [pc, #140]	@ (8007bcc <Device_Init+0x204>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 8007b44:	4b20      	ldr	r3, [pc, #128]	@ (8007bc8 <Device_Init+0x200>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <Device_Init+0x188>
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <Device_Init+0x234>)
 8007b4e:	e000      	b.n	8007b52 <Device_Init+0x18a>
 8007b50:	4b2b      	ldr	r3, [pc, #172]	@ (8007c00 <Device_Init+0x238>)
 8007b52:	4a2c      	ldr	r2, [pc, #176]	@ (8007c04 <Device_Init+0x23c>)
 8007b54:	4924      	ldr	r1, [pc, #144]	@ (8007be8 <Device_Init+0x220>)
 8007b56:	2002      	movs	r0, #2
 8007b58:	f005 fe86 	bl	800d868 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc8 <Device_Init+0x200>)
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <Device_Init+0x1a0>
 8007b64:	4b25      	ldr	r3, [pc, #148]	@ (8007bfc <Device_Init+0x234>)
 8007b66:	e000      	b.n	8007b6a <Device_Init+0x1a2>
 8007b68:	4b25      	ldr	r3, [pc, #148]	@ (8007c00 <Device_Init+0x238>)
 8007b6a:	4a27      	ldr	r2, [pc, #156]	@ (8007c08 <Device_Init+0x240>)
 8007b6c:	491e      	ldr	r1, [pc, #120]	@ (8007be8 <Device_Init+0x220>)
 8007b6e:	2002      	movs	r0, #2
 8007b70:	f005 fe7a 	bl	800d868 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 8007b74:	4b14      	ldr	r3, [pc, #80]	@ (8007bc8 <Device_Init+0x200>)
 8007b76:	789b      	ldrb	r3, [r3, #2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <Device_Init+0x1b8>
 8007b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bfc <Device_Init+0x234>)
 8007b7e:	e000      	b.n	8007b82 <Device_Init+0x1ba>
 8007b80:	4b1f      	ldr	r3, [pc, #124]	@ (8007c00 <Device_Init+0x238>)
 8007b82:	4a22      	ldr	r2, [pc, #136]	@ (8007c0c <Device_Init+0x244>)
 8007b84:	4918      	ldr	r1, [pc, #96]	@ (8007be8 <Device_Init+0x220>)
 8007b86:	2002      	movs	r0, #2
 8007b88:	f005 fe6e 	bl	800d868 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc8 <Device_Init+0x200>)
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <Device_Init+0x1d0>
 8007b94:	4b19      	ldr	r3, [pc, #100]	@ (8007bfc <Device_Init+0x234>)
 8007b96:	e000      	b.n	8007b9a <Device_Init+0x1d2>
 8007b98:	4b19      	ldr	r3, [pc, #100]	@ (8007c00 <Device_Init+0x238>)
 8007b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8007c10 <Device_Init+0x248>)
 8007b9c:	4912      	ldr	r1, [pc, #72]	@ (8007be8 <Device_Init+0x220>)
 8007b9e:	2002      	movs	r0, #2
 8007ba0:	f005 fe62 	bl	800d868 <CreateLine>
  ESP_Init(espUart);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f7fb ff2a 	bl	8003a00 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 8007bac:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <Device_Init+0x24c>)
 8007bae:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <Device_Init+0x20c>)
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	2003      	movs	r0, #3
 8007bb4:	f005 fe58 	bl	800d868 <CreateLine>
}
 8007bb8:	46c0      	nop			@ (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b004      	add	sp, #16
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	08023194 	.word	0x08023194
 8007bc4:	080231c4 	.word	0x080231c4
 8007bc8:	20000f34 	.word	0x20000f34
 8007bcc:	2000007c 	.word	0x2000007c
 8007bd0:	080231c8 	.word	0x080231c8
 8007bd4:	080231f4 	.word	0x080231f4
 8007bd8:	080231f8 	.word	0x080231f8
 8007bdc:	08023214 	.word	0x08023214
 8007be0:	50000400 	.word	0x50000400
 8007be4:	0802322c 	.word	0x0802322c
 8007be8:	08023250 	.word	0x08023250
 8007bec:	08023254 	.word	0x08023254
 8007bf0:	08023280 	.word	0x08023280
 8007bf4:	080232ac 	.word	0x080232ac
 8007bf8:	080232c4 	.word	0x080232c4
 8007bfc:	080232e8 	.word	0x080232e8
 8007c00:	080232ec 	.word	0x080232ec
 8007c04:	080232f0 	.word	0x080232f0
 8007c08:	0802330c 	.word	0x0802330c
 8007c0c:	08023328 	.word	0x08023328
 8007c10:	08023344 	.word	0x08023344
 8007c14:	08023360 	.word	0x08023360

08007c18 <Device_Test>:

void Device_Test(){
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8007c1c:	4b31      	ldr	r3, [pc, #196]	@ (8007ce4 <Device_Test+0xcc>)
 8007c1e:	78db      	ldrb	r3, [r3, #3]
 8007c20:	2201      	movs	r2, #1
 8007c22:	4053      	eors	r3, r2
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d021      	beq.n	8007c6e <Device_Test+0x56>
    if(MIC_TestMeasurementDone()){
 8007c2a:	f000 fd4d 	bl	80086c8 <MIC_TestMeasurementDone>
 8007c2e:	1e03      	subs	r3, r0, #0
 8007c30:	d00e      	beq.n	8007c50 <Device_Test+0x38>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 8007c32:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce4 <Device_Test+0xcc>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8007c38:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce8 <Device_Test+0xd0>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007c3e:	23fa      	movs	r3, #250	@ 0xfa
 8007c40:	011a      	lsls	r2, r3, #4
 8007c42:	492a      	ldr	r1, [pc, #168]	@ (8007cec <Device_Test+0xd4>)
 8007c44:	23fa      	movs	r3, #250	@ 0xfa
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f004 fe4f 	bl	800c8ec <SetStatusLED>
 8007c4e:	e00e      	b.n	8007c6e <Device_Test+0x56>
    }
    else{
      if (micSettlingComplete()) {
 8007c50:	f003 ffb0 	bl	800bbb4 <micSettlingComplete>
 8007c54:	1e03      	subs	r3, r0, #0
 8007c56:	d00a      	beq.n	8007c6e <Device_Test+0x56>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 8007c58:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <Device_Test+0xd0>)
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	70da      	strb	r2, [r3, #3]
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007c5e:	23fa      	movs	r3, #250	@ 0xfa
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	23fa      	movs	r3, #250	@ 0xfa
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	4821      	ldr	r0, [pc, #132]	@ (8007cec <Device_Test+0xd4>)
 8007c68:	0019      	movs	r1, r3
 8007c6a:	f004 fe3f 	bl	800c8ec <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 8007c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce4 <Device_Test+0xcc>)
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	4053      	eors	r3, r2
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <Device_Test+0x68>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 8007c7c:	f7fd fa2a 	bl	80050d4 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 8007c80:	4b18      	ldr	r3, [pc, #96]	@ (8007ce4 <Device_Test+0xcc>)
 8007c82:	791b      	ldrb	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <Device_Test+0x78>
 8007c88:	4b16      	ldr	r3, [pc, #88]	@ (8007ce4 <Device_Test+0xcc>)
 8007c8a:	78db      	ldrb	r3, [r3, #3]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <Device_Test+0x86>
 8007c90:	4b17      	ldr	r3, [pc, #92]	@ (8007cf0 <Device_Test+0xd8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	0018      	movs	r0, r3
 8007c96:	f005 fd91 	bl	800d7bc <TimestampIsReached>
 8007c9a:	1e03      	subs	r3, r0, #0
 8007c9c:	d01f      	beq.n	8007cde <Device_Test+0xc6>
    Info("Test completed");
 8007c9e:	4a15      	ldr	r2, [pc, #84]	@ (8007cf4 <Device_Test+0xdc>)
 8007ca0:	4b15      	ldr	r3, [pc, #84]	@ (8007cf8 <Device_Test+0xe0>)
 8007ca2:	0019      	movs	r1, r3
 8007ca4:	2002      	movs	r0, #2
 8007ca6:	f005 fddf 	bl	800d868 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 8007caa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ce4 <Device_Test+0xcc>)
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <Device_Test+0x9e>
 8007cb2:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <Device_Test+0xe4>)
 8007cb4:	e000      	b.n	8007cb8 <Device_Test+0xa0>
 8007cb6:	4b12      	ldr	r3, [pc, #72]	@ (8007d00 <Device_Test+0xe8>)
 8007cb8:	4a12      	ldr	r2, [pc, #72]	@ (8007d04 <Device_Test+0xec>)
 8007cba:	490f      	ldr	r1, [pc, #60]	@ (8007cf8 <Device_Test+0xe0>)
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f005 fdd3 	bl	800d868 <CreateLine>
    Info("MIC function:%s", SensorProbe.MIC_Present?"passed": "failed");
 8007cc2:	4b08      	ldr	r3, [pc, #32]	@ (8007ce4 <Device_Test+0xcc>)
 8007cc4:	78db      	ldrb	r3, [r3, #3]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <Device_Test+0xb6>
 8007cca:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <Device_Test+0xe4>)
 8007ccc:	e000      	b.n	8007cd0 <Device_Test+0xb8>
 8007cce:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <Device_Test+0xe8>)
 8007cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8007d08 <Device_Test+0xf0>)
 8007cd2:	4909      	ldr	r1, [pc, #36]	@ (8007cf8 <Device_Test+0xe0>)
 8007cd4:	2002      	movs	r0, #2
 8007cd6:	f005 fdc7 	bl	800d868 <CreateLine>
    SetTestDone();
 8007cda:	f7ff fdfd 	bl	80078d8 <SetTestDone>
  }
}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20000f34 	.word	0x20000f34
 8007ce8:	2000007c 	.word	0x2000007c
 8007cec:	00000bb8 	.word	0x00000bb8
 8007cf0:	20000f2c 	.word	0x20000f2c
 8007cf4:	08023384 	.word	0x08023384
 8007cf8:	08023250 	.word	0x08023250
 8007cfc:	08023394 	.word	0x08023394
 8007d00:	0802339c 	.word	0x0802339c
 8007d04:	080233a4 	.word	0x080233a4
 8007d08:	080233b8 	.word	0x080233b8

08007d0c <AllDevicesReady>:

bool AllDevicesReady() {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8007d10:	4b27      	ldr	r3, [pc, #156]	@ (8007db0 <AllDevicesReady+0xa4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	0018      	movs	r0, r3
 8007d16:	f005 fd51 	bl	800d7bc <TimestampIsReached>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d043      	beq.n	8007da6 <AllDevicesReady+0x9a>
    if (HIDSstate == HIDS_STATE_WAIT) {
 8007d1e:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <AllDevicesReady+0xa8>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d102      	bne.n	8007d2c <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
    }
    if (SGPstate == SGP_STATE_WAIT) {
 8007d2c:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <AllDevicesReady+0xb0>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b06      	cmp	r3, #6
 8007d32:	d102      	bne.n	8007d3a <AllDevicesReady+0x2e>
      Sensor.VOC_measurementEnabled = false;
 8007d34:	4b20      	ldr	r3, [pc, #128]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d36:	2200      	movs	r2, #0
 8007d38:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 8007d3a:	4b21      	ldr	r3, [pc, #132]	@ (8007dc0 <AllDevicesReady+0xb4>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <AllDevicesReady+0x3c>
      Sensor.PM_measurementEnabled = false;
 8007d42:	4b1d      	ldr	r3, [pc, #116]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	709a      	strb	r2, [r3, #2]
    }
    if (mic_Status == MIC_STATE_WAIT){
 8007d48:	4b1e      	ldr	r3, [pc, #120]	@ (8007dc4 <AllDevicesReady+0xb8>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d102      	bne.n	8007d56 <AllDevicesReady+0x4a>
      Sensor.MIC_measurementEnabled = false;
 8007d50:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	70da      	strb	r2, [r3, #3]
    }
    if (ESP_Status == ESP_STATE_RESET) {
 8007d56:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <AllDevicesReady+0xbc>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b09      	cmp	r3, #9
 8007d5c:	d123      	bne.n	8007da6 <AllDevicesReady+0x9a>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007d5e:	4b16      	ldr	r3, [pc, #88]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2201      	movs	r2, #1
 8007d64:	4053      	eors	r3, r2
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d016      	beq.n	8007d9a <AllDevicesReady+0x8e>
 8007d6c:	4b12      	ldr	r3, [pc, #72]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2201      	movs	r2, #1
 8007d72:	4053      	eors	r3, r2
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00f      	beq.n	8007d9a <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d7c:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007d7e:	2201      	movs	r2, #1
 8007d80:	4053      	eors	r3, r2
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d008      	beq.n	8007d9a <AllDevicesReady+0x8e>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8007d88:	4b0b      	ldr	r3, [pc, #44]	@ (8007db8 <AllDevicesReady+0xac>)
 8007d8a:	78db      	ldrb	r3, [r3, #3]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	4053      	eors	r3, r2
 8007d90:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <AllDevicesReady+0x8e>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <AllDevicesReady+0x90>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	1c1a      	adds	r2, r3, #0
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4013      	ands	r3, r2
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	e000      	b.n	8007da8 <AllDevicesReady+0x9c>
    }
  }
  return false;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	0018      	movs	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	46c0      	nop			@ (mov r8, r8)
 8007db0:	20000f2c 	.word	0x20000f2c
 8007db4:	20000f18 	.word	0x20000f18
 8007db8:	2000007c 	.word	0x2000007c
 8007dbc:	20000f17 	.word	0x20000f17
 8007dc0:	20000081 	.word	0x20000081
 8007dc4:	20000f3b 	.word	0x20000f3b
 8007dc8:	20000f3a 	.word	0x20000f3a

08007dcc <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8007dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e10 <EnabledConnectedDevices+0x44>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8007dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007e14 <EnabledConnectedDevices+0x48>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	701a      	strb	r2, [r3, #0]
  }
  if (SensorProbe.VOC_Present) {
 8007dde:	4b0c      	ldr	r3, [pc, #48]	@ (8007e10 <EnabledConnectedDevices+0x44>)
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <EnabledConnectedDevices+0x20>
    Sensor.VOC_measurementEnabled = true;
 8007de6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e14 <EnabledConnectedDevices+0x48>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8007dec:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <EnabledConnectedDevices+0x44>)
 8007dee:	789b      	ldrb	r3, [r3, #2]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <EnabledConnectedDevices+0x2e>
    Sensor.PM_measurementEnabled = true;
 8007df4:	4b07      	ldr	r3, [pc, #28]	@ (8007e14 <EnabledConnectedDevices+0x48>)
 8007df6:	2201      	movs	r2, #1
 8007df8:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8007dfa:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <EnabledConnectedDevices+0x44>)
 8007dfc:	78db      	ldrb	r3, [r3, #3]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <EnabledConnectedDevices+0x3c>
    Sensor.MIC_measurementEnabled = true;
 8007e02:	4b04      	ldr	r3, [pc, #16]	@ (8007e14 <EnabledConnectedDevices+0x48>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	70da      	strb	r2, [r3, #3]
  }
}
 8007e08:	46c0      	nop			@ (mov r8, r8)
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	20000f34 	.word	0x20000f34
 8007e14:	2000007c 	.word	0x2000007c

08007e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e1c:	f006 f90a 	bl	800e034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e20:	f000 f96c 	bl	80080fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e24:	f7ff f9e4 	bl	80071f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007e28:	f7ff f8b2 	bl	8006f90 <MX_DMA_Init>
  MX_I2C1_Init();
 8007e2c:	f7ff fb5e 	bl	80074ec <MX_I2C1_Init>
  MX_I2S2_Init();
 8007e30:	f7ff fcb6 	bl	80077a0 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007e34:	f005 fb26 	bl	800d484 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007e38:	f7ff fb98 	bl	800756c <MX_I2C2_Init>
  MX_TIM2_Init();
 8007e3c:	f005 f91a 	bl	800d074 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007e40:	f005 f98c 	bl	800d15c <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007e44:	f005 fb52 	bl	800d4ec <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007e48:	f7fe fff0 	bl	8006e2c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007e4c:	f014 f892 	bl	801bf74 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007e50:	f000 fda0 	bl	8008994 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007e54:	f005 fae0 	bl	800d418 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007e58:	f005 f9fe 	bl	800d258 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007e5c:	4a83      	ldr	r2, [pc, #524]	@ (800806c <main+0x254>)
 8007e5e:	4b84      	ldr	r3, [pc, #528]	@ (8008070 <main+0x258>)
 8007e60:	0011      	movs	r1, r2
 8007e62:	0018      	movs	r0, r3
 8007e64:	f7ff faf4 	bl	8007450 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007e68:	f7fe fa16 	bl	8006298 <UserButton_Pressed>
 8007e6c:	1e03      	subs	r3, r0, #0
 8007e6e:	d004      	beq.n	8007e7a <main+0x62>
    EnableESPProg();
 8007e70:	f014 f950 	bl	801c114 <EnableESPProg>
    ESP_Programming = true;
 8007e74:	4b7f      	ldr	r3, [pc, #508]	@ (8008074 <main+0x25c>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007e7a:	2003      	movs	r0, #3
 8007e7c:	f005 fd5e 	bl	800d93c <SetVerboseLevel>
  BinaryReleaseInfo();
 8007e80:	f005 fd6c 	bl	800d95c <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007e84:	497c      	ldr	r1, [pc, #496]	@ (8008078 <main+0x260>)
 8007e86:	4b7d      	ldr	r3, [pc, #500]	@ (800807c <main+0x264>)
 8007e88:	2201      	movs	r2, #1
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f00e fbd8 	bl	8016640 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007e90:	4b7b      	ldr	r3, [pc, #492]	@ (8008080 <main+0x268>)
 8007e92:	0018      	movs	r0, r3
 8007e94:	f7fe fdd0 	bl	8006a38 <InitClock>
  Debug("Clock init done");
 8007e98:	4a7a      	ldr	r2, [pc, #488]	@ (8008084 <main+0x26c>)
 8007e9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008088 <main+0x270>)
 8007e9c:	0019      	movs	r1, r3
 8007e9e:	2003      	movs	r0, #3
 8007ea0:	f005 fce2 	bl	800d868 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007ea4:	4a79      	ldr	r2, [pc, #484]	@ (800808c <main+0x274>)
 8007ea6:	497a      	ldr	r1, [pc, #488]	@ (8008090 <main+0x278>)
 8007ea8:	487a      	ldr	r0, [pc, #488]	@ (8008094 <main+0x27c>)
 8007eaa:	230b      	movs	r3, #11
 8007eac:	f003 fe3e 	bl	800bb2c <soundInit>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	001a      	movs	r2, r3
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	4053      	eors	r3, r2
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d006      	beq.n	8007ecc <main+0xb4>
    errorHandler(__func__, __LINE__, __FILE__);
 8007ebe:	4a76      	ldr	r2, [pc, #472]	@ (8008098 <main+0x280>)
 8007ec0:	23da      	movs	r3, #218	@ 0xda
 8007ec2:	0059      	lsls	r1, r3, #1
 8007ec4:	4b75      	ldr	r3, [pc, #468]	@ (800809c <main+0x284>)
 8007ec6:	0018      	movs	r0, r3
 8007ec8:	f005 fd7c 	bl	800d9c4 <errorHandler>
  }

//  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007ecc:	4b74      	ldr	r3, [pc, #464]	@ (80080a0 <main+0x288>)
 8007ece:	4a75      	ldr	r2, [pc, #468]	@ (80080a4 <main+0x28c>)
 8007ed0:	496f      	ldr	r1, [pc, #444]	@ (8008090 <main+0x278>)
 8007ed2:	4875      	ldr	r0, [pc, #468]	@ (80080a8 <main+0x290>)
 8007ed4:	f7ff fd78 	bl	80079c8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007ed8:	f006 f912 	bl	800e100 <HAL_GetTick>
 8007edc:	0003      	movs	r3, r0
 8007ede:	4a73      	ldr	r2, [pc, #460]	@ (80080ac <main+0x294>)
 8007ee0:	189a      	adds	r2, r3, r2
 8007ee2:	4b73      	ldr	r3, [pc, #460]	@ (80080b0 <main+0x298>)
 8007ee4:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007ee6:	4b73      	ldr	r3, [pc, #460]	@ (80080b4 <main+0x29c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	0018      	movs	r0, r3
 8007eec:	f005 fc66 	bl	800d7bc <TimestampIsReached>
 8007ef0:	1e03      	subs	r3, r0, #0
 8007ef2:	d00e      	beq.n	8007f12 <main+0xfa>
      charge = Battery_Upkeep();
 8007ef4:	f004 ff48 	bl	800cd88 <Battery_Upkeep>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	001a      	movs	r2, r3
 8007efc:	4b6e      	ldr	r3, [pc, #440]	@ (80080b8 <main+0x2a0>)
 8007efe:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007f00:	f006 f8fe 	bl	800e100 <HAL_GetTick>
 8007f04:	0003      	movs	r3, r0
 8007f06:	4a6d      	ldr	r2, [pc, #436]	@ (80080bc <main+0x2a4>)
 8007f08:	189a      	adds	r2, r3, r2
 8007f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80080b4 <main+0x29c>)
 8007f0c:	601a      	str	r2, [r3, #0]
        showTime();
 8007f0e:	f7fe f9d3 	bl	80062b8 <showTime>
        else{
          batteryEmpty = false;
        }
    //====
    */
    if (!usbPluggedIn) {
 8007f12:	4b6b      	ldr	r3, [pc, #428]	@ (80080c0 <main+0x2a8>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2201      	movs	r2, #1
 8007f18:	4053      	eors	r3, r2
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d022      	beq.n	8007f66 <main+0x14e>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007f20:	4b68      	ldr	r3, [pc, #416]	@ (80080c4 <main+0x2ac>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2201      	movs	r2, #1
 8007f26:	4053      	eors	r3, r2
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <main+0x14e>
 8007f2e:	f7ff feed 	bl	8007d0c <AllDevicesReady>
 8007f32:	1e03      	subs	r3, r0, #0
 8007f34:	d017      	beq.n	8007f66 <main+0x14e>
 8007f36:	4b64      	ldr	r3, [pc, #400]	@ (80080c8 <main+0x2b0>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <main+0x14e>
//        Debug("SensorProbe.ESP_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM => %d", SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007f3e:	4b63      	ldr	r3, [pc, #396]	@ (80080cc <main+0x2b4>)
 8007f40:	789b      	ldrb	r3, [r3, #2]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <main+0x132>
 8007f46:	4b62      	ldr	r3, [pc, #392]	@ (80080d0 <main+0x2b8>)
 8007f48:	e001      	b.n	8007f4e <main+0x136>
 8007f4a:	23e1      	movs	r3, #225	@ 0xe1
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f7fe fcde 	bl	8006910 <Enter_Stop_Mode>
        EnabledConnectedDevices();
 8007f54:	f7ff ff3a 	bl	8007dcc <EnabledConnectedDevices>
        deviceTimeOut = HAL_GetTick() + 3000;
 8007f58:	f006 f8d2 	bl	800e100 <HAL_GetTick>
 8007f5c:	0003      	movs	r3, r0
 8007f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80080d4 <main+0x2bc>)
 8007f60:	189a      	adds	r2, r3, r2
 8007f62:	4b53      	ldr	r3, [pc, #332]	@ (80080b0 <main+0x298>)
 8007f64:	601a      	str	r2, [r3, #0]
      }
    }
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007f66:	4b5c      	ldr	r3, [pc, #368]	@ (80080d8 <main+0x2c0>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d100      	bne.n	8007f70 <main+0x158>
 8007f6e:	e063      	b.n	8008038 <main+0x220>
 8007f70:	4b40      	ldr	r3, [pc, #256]	@ (8008074 <main+0x25c>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	4053      	eors	r3, r2
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d05c      	beq.n	8008038 <main+0x220>
 8007f7e:	4b57      	ldr	r3, [pc, #348]	@ (80080dc <main+0x2c4>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2201      	movs	r2, #1
 8007f84:	4053      	eors	r3, r2
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d055      	beq.n	8008038 <main+0x220>
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007f8c:	4b54      	ldr	r3, [pc, #336]	@ (80080e0 <main+0x2c8>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d00d      	beq.n	8007fb0 <main+0x198>
 8007f94:	4b52      	ldr	r3, [pc, #328]	@ (80080e0 <main+0x2c8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d009      	beq.n	8007fb0 <main+0x198>
 8007f9c:	4b51      	ldr	r3, [pc, #324]	@ (80080e4 <main+0x2cc>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <main+0x198>
        HIDSstate = HIDS_Upkeep();
 8007fa4:	f005 ff90 	bl	800dec8 <HIDS_Upkeep>
 8007fa8:	0003      	movs	r3, r0
 8007faa:	001a      	movs	r2, r3
 8007fac:	4b4e      	ldr	r3, [pc, #312]	@ (80080e8 <main+0x2d0>)
 8007fae:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80080e8 <main+0x2d0>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d00d      	beq.n	8007fd4 <main+0x1bc>
 8007fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80080e8 <main+0x2d0>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d009      	beq.n	8007fd4 <main+0x1bc>
 8007fc0:	4b48      	ldr	r3, [pc, #288]	@ (80080e4 <main+0x2cc>)
 8007fc2:	785b      	ldrb	r3, [r3, #1]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <main+0x1bc>
        SGPstate = SGP_Upkeep();
 8007fc8:	f003 fc0e 	bl	800b7e8 <SGP_Upkeep>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	001a      	movs	r2, r3
 8007fd0:	4b43      	ldr	r3, [pc, #268]	@ (80080e0 <main+0x2c8>)
 8007fd2:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007fd4:	4b43      	ldr	r3, [pc, #268]	@ (80080e4 <main+0x2cc>)
 8007fd6:	78db      	ldrb	r3, [r3, #3]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d005      	beq.n	8007fe8 <main+0x1d0>
        mic_Status = Mic_Upkeep();
 8007fdc:	f000 fba4 	bl	8008728 <Mic_Upkeep>
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	4b41      	ldr	r3, [pc, #260]	@ (80080ec <main+0x2d4>)
 8007fe6:	701a      	strb	r2, [r3, #0]
      }
      if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && Sensor.PM_measurementEnabled) {
 8007fe8:	4b33      	ldr	r3, [pc, #204]	@ (80080b8 <main+0x2a0>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d803      	bhi.n	8007ff8 <main+0x1e0>
 8007ff0:	4b31      	ldr	r3, [pc, #196]	@ (80080b8 <main+0x2a0>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d119      	bne.n	800802c <main+0x214>
 8007ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80080e4 <main+0x2cc>)
 8007ffa:	789b      	ldrb	r3, [r3, #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d015      	beq.n	800802c <main+0x214>
        if  (charge > BATTERY_LOW) {
 8008000:	4b2d      	ldr	r3, [pc, #180]	@ (80080b8 <main+0x2a0>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d903      	bls.n	8008010 <main+0x1f8>
          sen5x_statemachine(0);
 8008008:	2000      	movs	r0, #0
 800800a:	f001 f993 	bl	8009334 <sen5x_statemachine>
 800800e:	e00d      	b.n	800802c <main+0x214>
        }
        else {
          if (charge == USB_PLUGGED_IN) {
 8008010:	4b29      	ldr	r3, [pc, #164]	@ (80080b8 <main+0x2a0>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d103      	bne.n	8008020 <main+0x208>
            sen5x_statemachine(USB_PLUGGED_IN);
 8008018:	2001      	movs	r0, #1
 800801a:	f001 f98b 	bl	8009334 <sen5x_statemachine>
 800801e:	e005      	b.n	800802c <main+0x214>
          }
          else  {
            Info("Battery level insufficient for sen5x operation");
 8008020:	4a33      	ldr	r2, [pc, #204]	@ (80080f0 <main+0x2d8>)
 8008022:	4b34      	ldr	r3, [pc, #208]	@ (80080f4 <main+0x2dc>)
 8008024:	0019      	movs	r1, r3
 8008026:	2002      	movs	r0, #2
 8008028:	f005 fc1e 	bl	800d868 <CreateLine>
          }
        }
      }
      ESP_Status = ESP_Upkeep();
 800802c:	f7fd f968 	bl	8005300 <ESP_Upkeep>
 8008030:	0003      	movs	r3, r0
 8008032:	001a      	movs	r2, r3
 8008034:	4b30      	ldr	r3, [pc, #192]	@ (80080f8 <main+0x2e0>)
 8008036:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8008038:	4b27      	ldr	r3, [pc, #156]	@ (80080d8 <main+0x2c0>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	4053      	eors	r3, r2
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00f      	beq.n	8008066 <main+0x24e>
 8008046:	4b0b      	ldr	r3, [pc, #44]	@ (8008074 <main+0x25c>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2201      	movs	r2, #1
 800804c:	4053      	eors	r3, r2
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b00      	cmp	r3, #0
 8008052:	d008      	beq.n	8008066 <main+0x24e>
 8008054:	4b21      	ldr	r3, [pc, #132]	@ (80080dc <main+0x2c4>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2201      	movs	r2, #1
 800805a:	4053      	eors	r3, r2
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <main+0x24e>
      Device_Test();  // for device with startup time
 8008062:	f7ff fdd9 	bl	8007c18 <Device_Test>
    }
    configCheck();
 8008066:	f004 fdfd 	bl	800cc64 <configCheck>
    if(TimestampIsReached(batteryReadTimer)){
 800806a:	e73c      	b.n	8007ee6 <main+0xce>
 800806c:	20002198 	.word	0x20002198
 8008070:	20002158 	.word	0x20002158
 8008074:	20000f15 	.word	0x20000f15
 8008078:	20000f1c 	.word	0x20000f1c
 800807c:	200022d0 	.word	0x200022d0
 8008080:	200011a0 	.word	0x200011a0
 8008084:	080233c8 	.word	0x080233c8
 8008088:	080231f4 	.word	0x080231f4
 800808c:	200021d8 	.word	0x200021d8
 8008090:	20000e90 	.word	0x20000e90
 8008094:	20000ecc 	.word	0x20000ecc
 8008098:	080233d8 	.word	0x080233d8
 800809c:	080244b4 	.word	0x080244b4
 80080a0:	20002388 	.word	0x20002388
 80080a4:	20000cfc 	.word	0x20000cfc
 80080a8:	20000d58 	.word	0x20000d58
 80080ac:	00001388 	.word	0x00001388
 80080b0:	20000f2c 	.word	0x20000f2c
 80080b4:	20000f30 	.word	0x20000f30
 80080b8:	20000f39 	.word	0x20000f39
 80080bc:	0000c350 	.word	0x0000c350
 80080c0:	2000214d 	.word	0x2000214d
 80080c4:	2000214e 	.word	0x2000214e
 80080c8:	2000054f 	.word	0x2000054f
 80080cc:	20000f34 	.word	0x20000f34
 80080d0:	00000366 	.word	0x00000366
 80080d4:	00000bb8 	.word	0x00000bb8
 80080d8:	20000f14 	.word	0x20000f14
 80080dc:	20000f16 	.word	0x20000f16
 80080e0:	20000f17 	.word	0x20000f17
 80080e4:	2000007c 	.word	0x2000007c
 80080e8:	20000f18 	.word	0x20000f18
 80080ec:	20000f3b 	.word	0x20000f3b
 80080f0:	080233ec 	.word	0x080233ec
 80080f4:	08023250 	.word	0x08023250
 80080f8:	20000f3a 	.word	0x20000f3a

080080fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b09d      	sub	sp, #116	@ 0x74
 8008100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008102:	2438      	movs	r4, #56	@ 0x38
 8008104:	193b      	adds	r3, r7, r4
 8008106:	0018      	movs	r0, r3
 8008108:	2338      	movs	r3, #56	@ 0x38
 800810a:	001a      	movs	r2, r3
 800810c:	2100      	movs	r1, #0
 800810e:	f017 fa23 	bl	801f558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008112:	2324      	movs	r3, #36	@ 0x24
 8008114:	18fb      	adds	r3, r7, r3
 8008116:	0018      	movs	r0, r3
 8008118:	2314      	movs	r3, #20
 800811a:	001a      	movs	r2, r3
 800811c:	2100      	movs	r1, #0
 800811e:	f017 fa1b 	bl	801f558 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008122:	003b      	movs	r3, r7
 8008124:	0018      	movs	r0, r3
 8008126:	2324      	movs	r3, #36	@ 0x24
 8008128:	001a      	movs	r2, r3
 800812a:	2100      	movs	r1, #0
 800812c:	f017 fa14 	bl	801f558 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008130:	4b34      	ldr	r3, [pc, #208]	@ (8008204 <SystemClock_Config+0x108>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a34      	ldr	r2, [pc, #208]	@ (8008208 <SystemClock_Config+0x10c>)
 8008136:	401a      	ands	r2, r3
 8008138:	4b32      	ldr	r3, [pc, #200]	@ (8008204 <SystemClock_Config+0x108>)
 800813a:	2180      	movs	r1, #128	@ 0x80
 800813c:	0109      	lsls	r1, r1, #4
 800813e:	430a      	orrs	r2, r1
 8008140:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008142:	f00c f867 	bl	8014214 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8008146:	4b31      	ldr	r3, [pc, #196]	@ (800820c <SystemClock_Config+0x110>)
 8008148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800814a:	4a2f      	ldr	r2, [pc, #188]	@ (8008208 <SystemClock_Config+0x10c>)
 800814c:	401a      	ands	r2, r3
 800814e:	4b2f      	ldr	r3, [pc, #188]	@ (800820c <SystemClock_Config+0x110>)
 8008150:	2180      	movs	r1, #128	@ 0x80
 8008152:	0149      	lsls	r1, r1, #5
 8008154:	430a      	orrs	r2, r1
 8008156:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008158:	193b      	adds	r3, r7, r4
 800815a:	2226      	movs	r2, #38	@ 0x26
 800815c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800815e:	193b      	adds	r3, r7, r4
 8008160:	2280      	movs	r2, #128	@ 0x80
 8008162:	0052      	lsls	r2, r2, #1
 8008164:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008166:	0021      	movs	r1, r4
 8008168:	187b      	adds	r3, r7, r1
 800816a:	2201      	movs	r2, #1
 800816c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800816e:	187b      	adds	r3, r7, r1
 8008170:	2210      	movs	r2, #16
 8008172:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008174:	187b      	adds	r3, r7, r1
 8008176:	2201      	movs	r2, #1
 8008178:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800817a:	187b      	adds	r3, r7, r1
 800817c:	2200      	movs	r2, #0
 800817e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008180:	187b      	adds	r3, r7, r1
 8008182:	0018      	movs	r0, r3
 8008184:	f00c f8c0 	bl	8014308 <HAL_RCC_OscConfig>
 8008188:	1e03      	subs	r3, r0, #0
 800818a:	d001      	beq.n	8008190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800818c:	f000 f900 	bl	8008390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008190:	2124      	movs	r1, #36	@ 0x24
 8008192:	187b      	adds	r3, r7, r1
 8008194:	220f      	movs	r2, #15
 8008196:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008198:	187b      	adds	r3, r7, r1
 800819a:	2201      	movs	r2, #1
 800819c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800819e:	187b      	adds	r3, r7, r1
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80081a4:	187b      	adds	r3, r7, r1
 80081a6:	2200      	movs	r2, #0
 80081a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081aa:	187b      	adds	r3, r7, r1
 80081ac:	2200      	movs	r2, #0
 80081ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80081b0:	187b      	adds	r3, r7, r1
 80081b2:	2100      	movs	r1, #0
 80081b4:	0018      	movs	r0, r3
 80081b6:	f00c fc7b 	bl	8014ab0 <HAL_RCC_ClockConfig>
 80081ba:	1e03      	subs	r3, r0, #0
 80081bc:	d001      	beq.n	80081c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80081be:	f000 f8e7 	bl	8008390 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80081c2:	003b      	movs	r3, r7
 80081c4:	226d      	movs	r2, #109	@ 0x6d
 80081c6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80081c8:	003b      	movs	r3, r7
 80081ca:	2200      	movs	r2, #0
 80081cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80081ce:	003b      	movs	r3, r7
 80081d0:	2200      	movs	r2, #0
 80081d2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80081d4:	003b      	movs	r3, r7
 80081d6:	2200      	movs	r2, #0
 80081d8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80081da:	003b      	movs	r3, r7
 80081dc:	2280      	movs	r2, #128	@ 0x80
 80081de:	0252      	lsls	r2, r2, #9
 80081e0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80081e2:	003b      	movs	r3, r7
 80081e4:	2280      	movs	r2, #128	@ 0x80
 80081e6:	04d2      	lsls	r2, r2, #19
 80081e8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081ea:	003b      	movs	r3, r7
 80081ec:	0018      	movs	r0, r3
 80081ee:	f00c fe83 	bl	8014ef8 <HAL_RCCEx_PeriphCLKConfig>
 80081f2:	1e03      	subs	r3, r0, #0
 80081f4:	d001      	beq.n	80081fa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80081f6:	f000 f8cb 	bl	8008390 <Error_Handler>
  }
}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b01d      	add	sp, #116	@ 0x74
 8008200:	bd90      	pop	{r4, r7, pc}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	40007000 	.word	0x40007000
 8008208:	ffffe7ff 	.word	0xffffe7ff
 800820c:	40021000 	.word	0x40021000

08008210 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	000a      	movs	r2, r1
 800821a:	1cbb      	adds	r3, r7, #2
 800821c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 800821e:	4c06      	ldr	r4, [pc, #24]	@ (8008238 <printString+0x28>)
 8008220:	1cbb      	adds	r3, r7, #2
 8008222:	881a      	ldrh	r2, [r3, #0]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4805      	ldr	r0, [pc, #20]	@ (800823c <printString+0x2c>)
 8008228:	0023      	movs	r3, r4
 800822a:	f00e f969 	bl	8016500 <HAL_UART_Transmit>
}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b003      	add	sp, #12
 8008234:	bd90      	pop	{r4, r7, pc}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	0000ffff 	.word	0x0000ffff
 800823c:	200022d0 	.word	0x200022d0

08008240 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008248:	4936      	ldr	r1, [pc, #216]	@ (8008324 <HAL_UART_RxCpltCallback+0xe4>)
 800824a:	4b37      	ldr	r3, [pc, #220]	@ (8008328 <HAL_UART_RxCpltCallback+0xe8>)
 800824c:	2201      	movs	r2, #1
 800824e:	0018      	movs	r0, r3
 8008250:	f00e f9f6 	bl	8016640 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8008254:	4b33      	ldr	r3, [pc, #204]	@ (8008324 <HAL_UART_RxCpltCallback+0xe4>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	3b61      	subs	r3, #97	@ 0x61
 800825a:	2b13      	cmp	r3, #19
 800825c:	d830      	bhi.n	80082c0 <HAL_UART_RxCpltCallback+0x80>
 800825e:	009a      	lsls	r2, r3, #2
 8008260:	4b32      	ldr	r3, [pc, #200]	@ (800832c <HAL_UART_RxCpltCallback+0xec>)
 8008262:	18d3      	adds	r3, r2, r3
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008268:	4b31      	ldr	r3, [pc, #196]	@ (8008330 <HAL_UART_RxCpltCallback+0xf0>)
 800826a:	0018      	movs	r0, r3
 800826c:	f017 f826 	bl	801f2bc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008270:	2003      	movs	r0, #3
 8008272:	f005 fb63 	bl	800d93c <SetVerboseLevel>
      break;
 8008276:	e04a      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008278:	f7fb fa90 	bl	800379c <forceNTPupdate>
    break;
 800827c:	e047      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800827e:	4b2d      	ldr	r3, [pc, #180]	@ (8008334 <HAL_UART_RxCpltCallback+0xf4>)
 8008280:	0018      	movs	r0, r3
 8008282:	f017 f81b 	bl	801f2bc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8008286:	2002      	movs	r0, #2
 8008288:	f005 fb58 	bl	800d93c <SetVerboseLevel>
      break;
 800828c:	e03f      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800828e:	4b2a      	ldr	r3, [pc, #168]	@ (8008338 <HAL_UART_RxCpltCallback+0xf8>)
 8008290:	0018      	movs	r0, r3
 8008292:	f017 f813 	bl	801f2bc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8008296:	2001      	movs	r0, #1
 8008298:	f005 fb50 	bl	800d93c <SetVerboseLevel>
      break;
 800829c:	e037      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800829e:	4b27      	ldr	r3, [pc, #156]	@ (800833c <HAL_UART_RxCpltCallback+0xfc>)
 80082a0:	0018      	movs	r0, r3
 80082a2:	f017 f80b 	bl	801f2bc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80082a6:	2000      	movs	r0, #0
 80082a8:	f005 fb48 	bl	800d93c <SetVerboseLevel>
      break;
 80082ac:	e02f      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80082ae:	f005 ff27 	bl	800e100 <HAL_GetTick>
 80082b2:	0002      	movs	r2, r0
 80082b4:	4b22      	ldr	r3, [pc, #136]	@ (8008340 <HAL_UART_RxCpltCallback+0x100>)
 80082b6:	601a      	str	r2, [r3, #0]
      break;
 80082b8:	e029      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80082ba:	f7fd fffd 	bl	80062b8 <showTime>
      break;
 80082be:	e026      	b.n	800830e <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80082c0:	4a20      	ldr	r2, [pc, #128]	@ (8008344 <HAL_UART_RxCpltCallback+0x104>)
 80082c2:	4b21      	ldr	r3, [pc, #132]	@ (8008348 <HAL_UART_RxCpltCallback+0x108>)
 80082c4:	0019      	movs	r1, r3
 80082c6:	2001      	movs	r0, #1
 80082c8:	f005 face 	bl	800d868 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80082cc:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <HAL_UART_RxCpltCallback+0x10c>)
 80082ce:	0018      	movs	r0, r3
 80082d0:	f016 fff4 	bl	801f2bc <puts>
      printf("a - VerboseLevel set to all\r\n");
 80082d4:	4b1e      	ldr	r3, [pc, #120]	@ (8008350 <HAL_UART_RxCpltCallback+0x110>)
 80082d6:	0018      	movs	r0, r3
 80082d8:	f016 fff0 	bl	801f2bc <puts>
      printf("f - Force NTP time synchronization\r\n");
 80082dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008354 <HAL_UART_RxCpltCallback+0x114>)
 80082de:	0018      	movs	r0, r3
 80082e0:	f016 ffec 	bl	801f2bc <puts>
      printf("i - VerboseLevel set to info\r\n");
 80082e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008358 <HAL_UART_RxCpltCallback+0x118>)
 80082e6:	0018      	movs	r0, r3
 80082e8:	f016 ffe8 	bl	801f2bc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80082ec:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <HAL_UART_RxCpltCallback+0x11c>)
 80082ee:	0018      	movs	r0, r3
 80082f0:	f016 ffe4 	bl	801f2bc <puts>
      printf("n - VerboseLevel set to none\r\n");
 80082f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008360 <HAL_UART_RxCpltCallback+0x120>)
 80082f6:	0018      	movs	r0, r3
 80082f8:	f016 ffe0 	bl	801f2bc <puts>
      printf("s - Start particle measurement\r\n");
 80082fc:	4b19      	ldr	r3, [pc, #100]	@ (8008364 <HAL_UART_RxCpltCallback+0x124>)
 80082fe:	0018      	movs	r0, r3
 8008300:	f016 ffdc 	bl	801f2bc <puts>
      printf("t - Show actual systemtime\r\n");
 8008304:	4b18      	ldr	r3, [pc, #96]	@ (8008368 <HAL_UART_RxCpltCallback+0x128>)
 8008306:	0018      	movs	r0, r3
 8008308:	f016 ffd8 	bl	801f2bc <puts>
  break;
 800830c:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800830e:	4905      	ldr	r1, [pc, #20]	@ (8008324 <HAL_UART_RxCpltCallback+0xe4>)
 8008310:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <HAL_UART_RxCpltCallback+0xe8>)
 8008312:	2201      	movs	r2, #1
 8008314:	0018      	movs	r0, r3
 8008316:	f00e f993 	bl	8016640 <HAL_UART_Receive_IT>
}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b002      	add	sp, #8
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	20000f1c 	.word	0x20000f1c
 8008328:	200022d0 	.word	0x200022d0
 800832c:	08024464 	.word	0x08024464
 8008330:	0802341c 	.word	0x0802341c
 8008334:	08023438 	.word	0x08023438
 8008338:	08023454 	.word	0x08023454
 800833c:	08023474 	.word	0x08023474
 8008340:	200011c8 	.word	0x200011c8
 8008344:	08023490 	.word	0x08023490
 8008348:	080231c4 	.word	0x080231c4
 800834c:	080234c0 	.word	0x080234c0
 8008350:	080234d8 	.word	0x080234d8
 8008354:	080234f8 	.word	0x080234f8
 8008358:	0802351c 	.word	0x0802351c
 800835c:	0802353c 	.word	0x0802353c
 8008360:	08023560 	.word	0x08023560
 8008364:	08023580 	.word	0x08023580
 8008368:	080235a0 	.word	0x080235a0

0800836c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	0002      	movs	r2, r0
 8008374:	1dbb      	adds	r3, r7, #6
 8008376:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008378:	1dbb      	adds	r3, r7, #6
 800837a:	881a      	ldrh	r2, [r3, #0]
 800837c:	2380      	movs	r3, #128	@ 0x80
 800837e:	021b      	lsls	r3, r3, #8
 8008380:	429a      	cmp	r2, r3
 8008382:	d101      	bne.n	8008388 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8008384:	f004 fd14 	bl	800cdb0 <setuserToggle>
  }
}
 8008388:	46c0      	nop			@ (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	b002      	add	sp, #8
 800838e:	bd80      	pop	{r7, pc}

08008390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8008394:	4a04      	ldr	r2, [pc, #16]	@ (80083a8 <Error_Handler+0x18>)
 8008396:	4b05      	ldr	r3, [pc, #20]	@ (80083ac <Error_Handler+0x1c>)
 8008398:	0019      	movs	r1, r3
 800839a:	2001      	movs	r0, #1
 800839c:	f005 fa64 	bl	800d868 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80083a0:	b672      	cpsid	i
}
 80083a2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 80083a4:	46c0      	nop			@ (mov r8, r8)
 80083a6:	e7fd      	b.n	80083a4 <Error_Handler+0x14>
 80083a8:	080235bc 	.word	0x080235bc
 80083ac:	080231c4 	.word	0x080231c4

080083b0 <setMICTimeStamp>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void setMICTimeStamp(uint32_t ticks) {
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80083b8:	f005 fea2 	bl	800e100 <HAL_GetTick>
 80083bc:	0002      	movs	r2, r0
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	18d2      	adds	r2, r2, r3
 80083c2:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <setMICTimeStamp+0x20>)
 80083c4:	601a      	str	r2, [r3, #0]
}
 80083c6:	46c0      	nop			@ (mov r8, r8)
 80083c8:	46bd      	mov	sp, r7
 80083ca:	b002      	add	sp, #8
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	20000f88 	.word	0x20000f88

080083d4 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  counter = 0;
 80083d8:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <ResetDBACalculator+0x1c>)
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 80083de:	4b05      	ldr	r3, [pc, #20]	@ (80083f4 <ResetDBACalculator+0x20>)
 80083e0:	2201      	movs	r2, #1
 80083e2:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 80083e4:	4b04      	ldr	r3, [pc, #16]	@ (80083f8 <ResetDBACalculator+0x24>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000f84 	.word	0x20000f84
 80083f4:	20000080 	.word	0x20000080
 80083f8:	20000f85 	.word	0x20000f85

080083fc <MIC_Print>:

void MIC_Print(void) {
 80083fc:	b5b0      	push	{r4, r5, r7, lr}
 80083fe:	b08a      	sub	sp, #40	@ 0x28
 8008400:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 8008402:	4b9f      	ldr	r3, [pc, #636]	@ (8008680 <MIC_Print+0x284>)
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	4b9f      	ldr	r3, [pc, #636]	@ (8008684 <MIC_Print+0x288>)
 8008408:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800840a:	4b9f      	ldr	r3, [pc, #636]	@ (8008688 <MIC_Print+0x28c>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	001a      	movs	r2, r3
 8008410:	4b9c      	ldr	r3, [pc, #624]	@ (8008684 <MIC_Print+0x288>)
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	4b9d      	ldr	r3, [pc, #628]	@ (800868c <MIC_Print+0x290>)
 8008416:	0092      	lsls	r2, r2, #2
 8008418:	50d1      	str	r1, [r2, r3]
  counter++;
 800841a:	4b9b      	ldr	r3, [pc, #620]	@ (8008688 <MIC_Print+0x28c>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	4b99      	ldr	r3, [pc, #612]	@ (8008688 <MIC_Print+0x28c>)
 8008424:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008426:	4b98      	ldr	r3, [pc, #608]	@ (8008688 <MIC_Print+0x28c>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b09      	cmp	r3, #9
 800842c:	d80b      	bhi.n	8008446 <MIC_Print+0x4a>
 800842e:	4b98      	ldr	r3, [pc, #608]	@ (8008690 <MIC_Print+0x294>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	4053      	eors	r3, r2
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <MIC_Print+0x4a>
    denominator = counter;
 800843c:	4b92      	ldr	r3, [pc, #584]	@ (8008688 <MIC_Print+0x28c>)
 800843e:	781a      	ldrb	r2, [r3, #0]
 8008440:	4b94      	ldr	r3, [pc, #592]	@ (8008694 <MIC_Print+0x298>)
 8008442:	701a      	strb	r2, [r3, #0]
 8008444:	e005      	b.n	8008452 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008446:	4b93      	ldr	r3, [pc, #588]	@ (8008694 <MIC_Print+0x298>)
 8008448:	220a      	movs	r2, #10
 800844a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800844c:	4b90      	ldr	r3, [pc, #576]	@ (8008690 <MIC_Print+0x294>)
 800844e:	2201      	movs	r2, #1
 8008450:	701a      	strb	r2, [r3, #0]
  }
  dBAmax = 0.0;
 8008452:	4b91      	ldr	r3, [pc, #580]	@ (8008698 <MIC_Print+0x29c>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]
  dBAsum = 0.0;
 8008458:	4b90      	ldr	r3, [pc, #576]	@ (800869c <MIC_Print+0x2a0>)
 800845a:	2200      	movs	r2, #0
 800845c:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800845e:	230f      	movs	r3, #15
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	2200      	movs	r2, #0
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e03e      	b.n	80084e6 <MIC_Print+0xea>
    dBAsum += dBASamples[i];
 8008468:	240f      	movs	r4, #15
 800846a:	193b      	adds	r3, r7, r4
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	4b87      	ldr	r3, [pc, #540]	@ (800868c <MIC_Print+0x290>)
 8008470:	0092      	lsls	r2, r2, #2
 8008472:	58d2      	ldr	r2, [r2, r3]
 8008474:	4b89      	ldr	r3, [pc, #548]	@ (800869c <MIC_Print+0x2a0>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	1c19      	adds	r1, r3, #0
 800847a:	1c10      	adds	r0, r2, #0
 800847c:	f7f8 fa20 	bl	80008c0 <__aeabi_fadd>
 8008480:	1c03      	adds	r3, r0, #0
 8008482:	1c1a      	adds	r2, r3, #0
 8008484:	4b85      	ldr	r3, [pc, #532]	@ (800869c <MIC_Print+0x2a0>)
 8008486:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 8008488:	193b      	adds	r3, r7, r4
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	4b7f      	ldr	r3, [pc, #508]	@ (800868c <MIC_Print+0x290>)
 800848e:	0092      	lsls	r2, r2, #2
 8008490:	58d2      	ldr	r2, [r2, r3]
 8008492:	4b81      	ldr	r3, [pc, #516]	@ (8008698 <MIC_Print+0x29c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	1c19      	adds	r1, r3, #0
 8008498:	1c10      	adds	r0, r2, #0
 800849a:	f7f8 f85d 	bl	8000558 <__aeabi_fcmpgt>
 800849e:	1e03      	subs	r3, r0, #0
 80084a0:	d006      	beq.n	80084b0 <MIC_Print+0xb4>
      dBAmax = dBASamples[i];
 80084a2:	193b      	adds	r3, r7, r4
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	4b79      	ldr	r3, [pc, #484]	@ (800868c <MIC_Print+0x290>)
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	58d2      	ldr	r2, [r2, r3]
 80084ac:	4b7a      	ldr	r3, [pc, #488]	@ (8008698 <MIC_Print+0x29c>)
 80084ae:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80084b0:	4b7a      	ldr	r3, [pc, #488]	@ (800869c <MIC_Print+0x2a0>)
 80084b2:	681c      	ldr	r4, [r3, #0]
 80084b4:	4b77      	ldr	r3, [pc, #476]	@ (8008694 <MIC_Print+0x298>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	0018      	movs	r0, r3
 80084ba:	f7f9 f8d5 	bl	8001668 <__aeabi_ui2f>
 80084be:	1c03      	adds	r3, r0, #0
 80084c0:	1c19      	adds	r1, r3, #0
 80084c2:	1c20      	adds	r0, r4, #0
 80084c4:	f7f8 fb86 	bl	8000bd4 <__aeabi_fdiv>
 80084c8:	1c03      	adds	r3, r0, #0
 80084ca:	1c1a      	adds	r2, r3, #0
 80084cc:	4b74      	ldr	r3, [pc, #464]	@ (80086a0 <MIC_Print+0x2a4>)
 80084ce:	601a      	str	r2, [r3, #0]
  setMic(dBAAverage);
 80084d0:	4b73      	ldr	r3, [pc, #460]	@ (80086a0 <MIC_Print+0x2a4>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	1c18      	adds	r0, r3, #0
 80084d6:	f7fb fa35 	bl	8003944 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 80084da:	210f      	movs	r1, #15
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	187b      	adds	r3, r7, r1
 80084e2:	3201      	adds	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
 80084e6:	4b6b      	ldr	r3, [pc, #428]	@ (8008694 <MIC_Print+0x298>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	220f      	movs	r2, #15
 80084ec:	18ba      	adds	r2, r7, r2
 80084ee:	7812      	ldrb	r2, [r2, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d3b9      	bcc.n	8008468 <MIC_Print+0x6c>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 80084f4:	4b63      	ldr	r3, [pc, #396]	@ (8008684 <MIC_Print+0x288>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	1c18      	adds	r0, r3, #0
 80084fa:	f7fa ffb3 	bl	8003464 <__aeabi_f2d>
 80084fe:	6038      	str	r0, [r7, #0]
 8008500:	6079      	str	r1, [r7, #4]
 8008502:	4b65      	ldr	r3, [pc, #404]	@ (8008698 <MIC_Print+0x29c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	1c18      	adds	r0, r3, #0
 8008508:	f7fa ffac 	bl	8003464 <__aeabi_f2d>
 800850c:	0004      	movs	r4, r0
 800850e:	000d      	movs	r5, r1
 8008510:	4b63      	ldr	r3, [pc, #396]	@ (80086a0 <MIC_Print+0x2a4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	1c18      	adds	r0, r3, #0
 8008516:	f7fa ffa5 	bl	8003464 <__aeabi_f2d>
 800851a:	0002      	movs	r2, r0
 800851c:	000b      	movs	r3, r1
 800851e:	4961      	ldr	r1, [pc, #388]	@ (80086a4 <MIC_Print+0x2a8>)
 8008520:	9204      	str	r2, [sp, #16]
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	9402      	str	r4, [sp, #8]
 8008526:	9503      	str	r5, [sp, #12]
 8008528:	4b5f      	ldr	r3, [pc, #380]	@ (80086a8 <MIC_Print+0x2ac>)
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0008      	movs	r0, r1
 8008532:	f000 fa0d 	bl	8008950 <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008536:	4b54      	ldr	r3, [pc, #336]	@ (8008688 <MIC_Print+0x28c>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b0a      	cmp	r3, #10
 800853c:	d902      	bls.n	8008544 <MIC_Print+0x148>
    counter = 0;
 800853e:	4b52      	ldr	r3, [pc, #328]	@ (8008688 <MIC_Print+0x28c>)
 8008540:	2200      	movs	r2, #0
 8008542:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008544:	4b4f      	ldr	r3, [pc, #316]	@ (8008684 <MIC_Print+0x288>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4958      	ldr	r1, [pc, #352]	@ (80086ac <MIC_Print+0x2b0>)
 800854a:	1c18      	adds	r0, r3, #0
 800854c:	f7f8 f80e 	bl	800056c <__aeabi_fcmpge>
 8008550:	1e03      	subs	r3, r0, #0
 8008552:	d004      	beq.n	800855e <MIC_Print+0x162>
    SetDBLED(true, true, true);
 8008554:	2201      	movs	r2, #1
 8008556:	2101      	movs	r1, #1
 8008558:	2001      	movs	r0, #1
 800855a:	f004 f9fb 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800855e:	4b49      	ldr	r3, [pc, #292]	@ (8008684 <MIC_Print+0x288>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4953      	ldr	r1, [pc, #332]	@ (80086b0 <MIC_Print+0x2b4>)
 8008564:	1c18      	adds	r0, r3, #0
 8008566:	f7f8 f801 	bl	800056c <__aeabi_fcmpge>
 800856a:	1e03      	subs	r3, r0, #0
 800856c:	d00c      	beq.n	8008588 <MIC_Print+0x18c>
 800856e:	4b45      	ldr	r3, [pc, #276]	@ (8008684 <MIC_Print+0x288>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	494e      	ldr	r1, [pc, #312]	@ (80086ac <MIC_Print+0x2b0>)
 8008574:	1c18      	adds	r0, r3, #0
 8008576:	f7f7 ffdb 	bl	8000530 <__aeabi_fcmplt>
 800857a:	1e03      	subs	r3, r0, #0
 800857c:	d004      	beq.n	8008588 <MIC_Print+0x18c>
    SetDBLED(true, false, false);
 800857e:	2200      	movs	r2, #0
 8008580:	2100      	movs	r1, #0
 8008582:	2001      	movs	r0, #1
 8008584:	f004 f9e6 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008588:	4b3e      	ldr	r3, [pc, #248]	@ (8008684 <MIC_Print+0x288>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4949      	ldr	r1, [pc, #292]	@ (80086b4 <MIC_Print+0x2b8>)
 800858e:	1c18      	adds	r0, r3, #0
 8008590:	f7f7 ffec 	bl	800056c <__aeabi_fcmpge>
 8008594:	1e03      	subs	r3, r0, #0
 8008596:	d00c      	beq.n	80085b2 <MIC_Print+0x1b6>
 8008598:	4b3a      	ldr	r3, [pc, #232]	@ (8008684 <MIC_Print+0x288>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4944      	ldr	r1, [pc, #272]	@ (80086b0 <MIC_Print+0x2b4>)
 800859e:	1c18      	adds	r0, r3, #0
 80085a0:	f7f7 ffc6 	bl	8000530 <__aeabi_fcmplt>
 80085a4:	1e03      	subs	r3, r0, #0
 80085a6:	d004      	beq.n	80085b2 <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 80085a8:	2200      	movs	r2, #0
 80085aa:	2101      	movs	r1, #1
 80085ac:	2001      	movs	r0, #1
 80085ae:	f004 f9d1 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 80085b2:	4b34      	ldr	r3, [pc, #208]	@ (8008684 <MIC_Print+0x288>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4940      	ldr	r1, [pc, #256]	@ (80086b8 <MIC_Print+0x2bc>)
 80085b8:	1c18      	adds	r0, r3, #0
 80085ba:	f7f7 ffd7 	bl	800056c <__aeabi_fcmpge>
 80085be:	1e03      	subs	r3, r0, #0
 80085c0:	d00c      	beq.n	80085dc <MIC_Print+0x1e0>
 80085c2:	4b30      	ldr	r3, [pc, #192]	@ (8008684 <MIC_Print+0x288>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	493b      	ldr	r1, [pc, #236]	@ (80086b4 <MIC_Print+0x2b8>)
 80085c8:	1c18      	adds	r0, r3, #0
 80085ca:	f7f7 ffb1 	bl	8000530 <__aeabi_fcmplt>
 80085ce:	1e03      	subs	r3, r0, #0
 80085d0:	d004      	beq.n	80085dc <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 80085d2:	2200      	movs	r2, #0
 80085d4:	2101      	movs	r1, #1
 80085d6:	2000      	movs	r0, #0
 80085d8:	f004 f9bc 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 80085dc:	4b29      	ldr	r3, [pc, #164]	@ (8008684 <MIC_Print+0x288>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4936      	ldr	r1, [pc, #216]	@ (80086bc <MIC_Print+0x2c0>)
 80085e2:	1c18      	adds	r0, r3, #0
 80085e4:	f7f7 ffc2 	bl	800056c <__aeabi_fcmpge>
 80085e8:	1e03      	subs	r3, r0, #0
 80085ea:	d00c      	beq.n	8008606 <MIC_Print+0x20a>
 80085ec:	4b25      	ldr	r3, [pc, #148]	@ (8008684 <MIC_Print+0x288>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4931      	ldr	r1, [pc, #196]	@ (80086b8 <MIC_Print+0x2bc>)
 80085f2:	1c18      	adds	r0, r3, #0
 80085f4:	f7f7 ff9c 	bl	8000530 <__aeabi_fcmplt>
 80085f8:	1e03      	subs	r3, r0, #0
 80085fa:	d004      	beq.n	8008606 <MIC_Print+0x20a>
    SetDBLED(false, true, true);
 80085fc:	2201      	movs	r2, #1
 80085fe:	2101      	movs	r1, #1
 8008600:	2000      	movs	r0, #0
 8008602:	f004 f9a7 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008606:	4b1f      	ldr	r3, [pc, #124]	@ (8008684 <MIC_Print+0x288>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	492d      	ldr	r1, [pc, #180]	@ (80086c0 <MIC_Print+0x2c4>)
 800860c:	1c18      	adds	r0, r3, #0
 800860e:	f7f7 ffad 	bl	800056c <__aeabi_fcmpge>
 8008612:	1e03      	subs	r3, r0, #0
 8008614:	d00c      	beq.n	8008630 <MIC_Print+0x234>
 8008616:	4b1b      	ldr	r3, [pc, #108]	@ (8008684 <MIC_Print+0x288>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4928      	ldr	r1, [pc, #160]	@ (80086bc <MIC_Print+0x2c0>)
 800861c:	1c18      	adds	r0, r3, #0
 800861e:	f7f7 ff87 	bl	8000530 <__aeabi_fcmplt>
 8008622:	1e03      	subs	r3, r0, #0
 8008624:	d004      	beq.n	8008630 <MIC_Print+0x234>
    SetDBLED(false, false, true);
 8008626:	2201      	movs	r2, #1
 8008628:	2100      	movs	r1, #0
 800862a:	2000      	movs	r0, #0
 800862c:	f004 f992 	bl	800c954 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008630:	4b14      	ldr	r3, [pc, #80]	@ (8008684 <MIC_Print+0x288>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4923      	ldr	r1, [pc, #140]	@ (80086c4 <MIC_Print+0x2c8>)
 8008636:	1c18      	adds	r0, r3, #0
 8008638:	f7f7 ff98 	bl	800056c <__aeabi_fcmpge>
 800863c:	1e03      	subs	r3, r0, #0
 800863e:	d00c      	beq.n	800865a <MIC_Print+0x25e>
 8008640:	4b10      	ldr	r3, [pc, #64]	@ (8008684 <MIC_Print+0x288>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	491e      	ldr	r1, [pc, #120]	@ (80086c0 <MIC_Print+0x2c4>)
 8008646:	1c18      	adds	r0, r3, #0
 8008648:	f7f7 ff72 	bl	8000530 <__aeabi_fcmplt>
 800864c:	1e03      	subs	r3, r0, #0
 800864e:	d004      	beq.n	800865a <MIC_Print+0x25e>
    SetDBLED(true, false, true);
 8008650:	2201      	movs	r2, #1
 8008652:	2100      	movs	r1, #0
 8008654:	2001      	movs	r0, #1
 8008656:	f004 f97d 	bl	800c954 <SetDBLED>
  }
  if(dBA < 35){//off
 800865a:	4b0a      	ldr	r3, [pc, #40]	@ (8008684 <MIC_Print+0x288>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4919      	ldr	r1, [pc, #100]	@ (80086c4 <MIC_Print+0x2c8>)
 8008660:	1c18      	adds	r0, r3, #0
 8008662:	f7f7 ff65 	bl	8000530 <__aeabi_fcmplt>
 8008666:	1e03      	subs	r3, r0, #0
 8008668:	d100      	bne.n	800866c <MIC_Print+0x270>
    SetDBLED(false, false, false);
  }
}
 800866a:	e004      	b.n	8008676 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
 800866c:	2200      	movs	r2, #0
 800866e:	2100      	movs	r1, #0
 8008670:	2000      	movs	r0, #0
 8008672:	f004 f96f 	bl	800c954 <SetDBLED>
}
 8008676:	46c0      	nop			@ (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b004      	add	sp, #16
 800867c:	bdb0      	pop	{r4, r5, r7, pc}
 800867e:	46c0      	nop			@ (mov r8, r8)
 8008680:	20000f7c 	.word	0x20000f7c
 8008684:	20000f48 	.word	0x20000f48
 8008688:	20000f84 	.word	0x20000f84
 800868c:	20000f4c 	.word	0x20000f4c
 8008690:	20000f85 	.word	0x20000f85
 8008694:	20000080 	.word	0x20000080
 8008698:	20000f80 	.word	0x20000f80
 800869c:	20000f78 	.word	0x20000f78
 80086a0:	20000f74 	.word	0x20000f74
 80086a4:	080235e8 	.word	0x080235e8
 80086a8:	20000f3c 	.word	0x20000f3c
 80086ac:	42b40000 	.word	0x42b40000
 80086b0:	42a00000 	.word	0x42a00000
 80086b4:	428c0000 	.word	0x428c0000
 80086b8:	42700000 	.word	0x42700000
 80086bc:	42480000 	.word	0x42480000
 80086c0:	42200000 	.word	0x42200000
 80086c4:	420c0000 	.word	0x420c0000

080086c8 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80086ce:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <MIC_TestMeasurementDone+0x4c>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	4a10      	ldr	r2, [pc, #64]	@ (8008718 <MIC_TestMeasurementDone+0x50>)
 80086d6:	4911      	ldr	r1, [pc, #68]	@ (800871c <MIC_TestMeasurementDone+0x54>)
 80086d8:	2002      	movs	r0, #2
 80086da:	f005 f8c5 	bl	800d868 <CreateLine>
  if(DataReady) {
 80086de:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <MIC_TestMeasurementDone+0x4c>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d010      	beq.n	800870a <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008720 <MIC_TestMeasurementDone+0x58>)
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 80086f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008720 <MIC_TestMeasurementDone+0x58>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	4a0b      	ldr	r2, [pc, #44]	@ (8008724 <MIC_TestMeasurementDone+0x5c>)
 80086f8:	4908      	ldr	r1, [pc, #32]	@ (800871c <MIC_TestMeasurementDone+0x54>)
 80086fa:	2002      	movs	r0, #2
 80086fc:	f005 f8b4 	bl	800d868 <CreateLine>
    ResetMICIndicator();
 8008700:	f004 f9ec 	bl	800cadc <ResetMICIndicator>
    return Check;
 8008704:	1dfb      	adds	r3, r7, #7
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	e000      	b.n	800870c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800870a:	2300      	movs	r3, #0
}
 800870c:	0018      	movs	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	b002      	add	sp, #8
 8008712:	bd80      	pop	{r7, pc}
 8008714:	200012b3 	.word	0x200012b3
 8008718:	08023630 	.word	0x08023630
 800871c:	0802365c 	.word	0x0802365c
 8008720:	200012b4 	.word	0x200012b4
 8008724:	08023660 	.word	0x08023660

08008728 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800872e:	4b78      	ldr	r3, [pc, #480]	@ (8008910 <Mic_Upkeep+0x1e8>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d100      	bne.n	8008738 <Mic_Upkeep+0x10>
 8008736:	e0b8      	b.n	80088aa <Mic_Upkeep+0x182>
 8008738:	dd00      	ble.n	800873c <Mic_Upkeep+0x14>
 800873a:	e0d3      	b.n	80088e4 <Mic_Upkeep+0x1bc>
 800873c:	2b02      	cmp	r3, #2
 800873e:	d037      	beq.n	80087b0 <Mic_Upkeep+0x88>
 8008740:	dd00      	ble.n	8008744 <Mic_Upkeep+0x1c>
 8008742:	e0cf      	b.n	80088e4 <Mic_Upkeep+0x1bc>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <Mic_Upkeep+0x26>
 8008748:	2b01      	cmp	r3, #1
 800874a:	d014      	beq.n	8008776 <Mic_Upkeep+0x4e>
 800874c:	e0ca      	b.n	80088e4 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800874e:	2001      	movs	r0, #1
 8008750:	f003 fa54 	bl	800bbfc <enableMicrophone>
 8008754:	0003      	movs	r3, r0
 8008756:	001a      	movs	r2, r3
 8008758:	2301      	movs	r3, #1
 800875a:	4053      	eors	r3, r2
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008762:	4a6c      	ldr	r2, [pc, #432]	@ (8008914 <Mic_Upkeep+0x1ec>)
 8008764:	4b6c      	ldr	r3, [pc, #432]	@ (8008918 <Mic_Upkeep+0x1f0>)
 8008766:	217c      	movs	r1, #124	@ 0x7c
 8008768:	0018      	movs	r0, r3
 800876a:	f005 f92b 	bl	800d9c4 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800876e:	4b68      	ldr	r3, [pc, #416]	@ (8008910 <Mic_Upkeep+0x1e8>)
 8008770:	2201      	movs	r2, #1
 8008772:	701a      	strb	r2, [r3, #0]
    break;
 8008774:	e0c5      	b.n	8008902 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008776:	f003 fa1d 	bl	800bbb4 <micSettlingComplete>
 800877a:	1e03      	subs	r3, r0, #0
 800877c:	d105      	bne.n	800878a <Mic_Upkeep+0x62>
 800877e:	4b67      	ldr	r3, [pc, #412]	@ (800891c <Mic_Upkeep+0x1f4>)
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d100      	bne.n	800878a <Mic_Upkeep+0x62>
 8008788:	e0b6      	b.n	80088f8 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800878a:	f003 faa1 	bl	800bcd0 <startSPLcalculation>
 800878e:	0003      	movs	r3, r0
 8008790:	001a      	movs	r2, r3
 8008792:	2301      	movs	r3, #1
 8008794:	4053      	eors	r3, r2
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800879c:	4a5d      	ldr	r2, [pc, #372]	@ (8008914 <Mic_Upkeep+0x1ec>)
 800879e:	4b5e      	ldr	r3, [pc, #376]	@ (8008918 <Mic_Upkeep+0x1f0>)
 80087a0:	2185      	movs	r1, #133	@ 0x85
 80087a2:	0018      	movs	r0, r3
 80087a4:	f005 f90e 	bl	800d9c4 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80087a8:	4b59      	ldr	r3, [pc, #356]	@ (8008910 <Mic_Upkeep+0x1e8>)
 80087aa:	2202      	movs	r2, #2
 80087ac:	701a      	strb	r2, [r3, #0]
    }
    break;
 80087ae:	e0a3      	b.n	80088f8 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80087b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008920 <Mic_Upkeep+0x1f8>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	2101      	movs	r1, #1
 80087b6:	0018      	movs	r0, r3
 80087b8:	f003 f8de 	bl	800b978 <getSoundData>
 80087bc:	1e03      	subs	r3, r0, #0
 80087be:	d100      	bne.n	80087c2 <Mic_Upkeep+0x9a>
 80087c0:	e09c      	b.n	80088fc <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80087c2:	f003 f9d7 	bl	800bb74 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80087c6:	4b56      	ldr	r3, [pc, #344]	@ (8008920 <Mic_Upkeep+0x1f8>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	001a      	movs	r2, r3
 80087cc:	4b54      	ldr	r3, [pc, #336]	@ (8008920 <Mic_Upkeep+0x1f8>)
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	4954      	ldr	r1, [pc, #336]	@ (8008924 <Mic_Upkeep+0x1fc>)
 80087d2:	0038      	movs	r0, r7
 80087d4:	f016 fd7c 	bl	801f2d0 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80087d8:	4b51      	ldr	r3, [pc, #324]	@ (8008920 <Mic_Upkeep+0x1f8>)
 80087da:	89db      	ldrh	r3, [r3, #14]
 80087dc:	001a      	movs	r2, r3
 80087de:	4b50      	ldr	r3, [pc, #320]	@ (8008920 <Mic_Upkeep+0x1f8>)
 80087e0:	7c1b      	ldrb	r3, [r3, #16]
 80087e2:	4951      	ldr	r1, [pc, #324]	@ (8008928 <Mic_Upkeep+0x200>)
 80087e4:	4851      	ldr	r0, [pc, #324]	@ (800892c <Mic_Upkeep+0x204>)
 80087e6:	f016 fd73 	bl	801f2d0 <siprintf>
      dBValue = atof(dBbuffer);
 80087ea:	003b      	movs	r3, r7
 80087ec:	0018      	movs	r0, r3
 80087ee:	f015 f91f 	bl	801da30 <atof>
 80087f2:	0002      	movs	r2, r0
 80087f4:	000b      	movs	r3, r1
 80087f6:	0010      	movs	r0, r2
 80087f8:	0019      	movs	r1, r3
 80087fa:	f7fa fe7b 	bl	80034f4 <__aeabi_d2f>
 80087fe:	1c02      	adds	r2, r0, #0
 8008800:	4b4b      	ldr	r3, [pc, #300]	@ (8008930 <Mic_Upkeep+0x208>)
 8008802:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008804:	4b4a      	ldr	r3, [pc, #296]	@ (8008930 <Mic_Upkeep+0x208>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	494a      	ldr	r1, [pc, #296]	@ (8008934 <Mic_Upkeep+0x20c>)
 800880a:	1c18      	adds	r0, r3, #0
 800880c:	f7f8 fbc8 	bl	8000fa0 <__aeabi_fmul>
 8008810:	1c03      	adds	r3, r0, #0
 8008812:	1c18      	adds	r0, r3, #0
 8008814:	f7fa fe26 	bl	8003464 <__aeabi_f2d>
 8008818:	2200      	movs	r2, #0
 800881a:	4b47      	ldr	r3, [pc, #284]	@ (8008938 <Mic_Upkeep+0x210>)
 800881c:	f7f8 ff66 	bl	80016ec <__aeabi_dadd>
 8008820:	0002      	movs	r2, r0
 8008822:	000b      	movs	r3, r1
 8008824:	0010      	movs	r0, r2
 8008826:	0019      	movs	r1, r3
 8008828:	f7fa fd8e 	bl	8003348 <__aeabi_d2iz>
 800882c:	0003      	movs	r3, r0
 800882e:	0018      	movs	r0, r3
 8008830:	f7fa fdc6 	bl	80033c0 <__aeabi_i2d>
 8008834:	2200      	movs	r2, #0
 8008836:	4b41      	ldr	r3, [pc, #260]	@ (800893c <Mic_Upkeep+0x214>)
 8008838:	f7f9 fabc 	bl	8001db4 <__aeabi_ddiv>
 800883c:	0002      	movs	r2, r0
 800883e:	000b      	movs	r3, r1
 8008840:	0010      	movs	r0, r2
 8008842:	0019      	movs	r1, r3
 8008844:	f7fa fe56 	bl	80034f4 <__aeabi_d2f>
 8008848:	1c02      	adds	r2, r0, #0
 800884a:	4b39      	ldr	r3, [pc, #228]	@ (8008930 <Mic_Upkeep+0x208>)
 800884c:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800884e:	f7ff fdd5 	bl	80083fc <MIC_Print>
      if (!startSPLcalculation()) {
 8008852:	f003 fa3d 	bl	800bcd0 <startSPLcalculation>
 8008856:	0003      	movs	r3, r0
 8008858:	001a      	movs	r2, r3
 800885a:	2301      	movs	r3, #1
 800885c:	4053      	eors	r3, r2
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008864:	4a2b      	ldr	r2, [pc, #172]	@ (8008914 <Mic_Upkeep+0x1ec>)
 8008866:	4b2c      	ldr	r3, [pc, #176]	@ (8008918 <Mic_Upkeep+0x1f0>)
 8008868:	2195      	movs	r1, #149	@ 0x95
 800886a:	0018      	movs	r0, r3
 800886c:	f005 f8aa 	bl	800d9c4 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008870:	2000      	movs	r0, #0
 8008872:	f003 f9c3 	bl	800bbfc <enableMicrophone>
 8008876:	0003      	movs	r3, r0
 8008878:	001a      	movs	r2, r3
 800887a:	2301      	movs	r3, #1
 800887c:	4053      	eors	r3, r2
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008884:	4a23      	ldr	r2, [pc, #140]	@ (8008914 <Mic_Upkeep+0x1ec>)
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <Mic_Upkeep+0x1f0>)
 8008888:	2198      	movs	r1, #152	@ 0x98
 800888a:	0018      	movs	r0, r3
 800888c:	f005 f89a 	bl	800d9c4 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008890:	f005 fc36 	bl	800e100 <HAL_GetTick>
 8008894:	0003      	movs	r3, r0
 8008896:	4a2a      	ldr	r2, [pc, #168]	@ (8008940 <Mic_Upkeep+0x218>)
 8008898:	189a      	adds	r2, r3, r2
 800889a:	4b2a      	ldr	r3, [pc, #168]	@ (8008944 <Mic_Upkeep+0x21c>)
 800889c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800889e:	4b1c      	ldr	r3, [pc, #112]	@ (8008910 <Mic_Upkeep+0x1e8>)
 80088a0:	2203      	movs	r2, #3
 80088a2:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80088a4:	f004 f91a 	bl	800cadc <ResetMICIndicator>
    }
    break;
 80088a8:	e028      	b.n	80088fc <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 80088aa:	4b26      	ldr	r3, [pc, #152]	@ (8008944 <Mic_Upkeep+0x21c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	0018      	movs	r0, r3
 80088b0:	f004 ff84 	bl	800d7bc <TimestampIsReached>
 80088b4:	1e03      	subs	r3, r0, #0
 80088b6:	d023      	beq.n	8008900 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 80088b8:	2001      	movs	r0, #1
 80088ba:	f003 f99f 	bl	800bbfc <enableMicrophone>
 80088be:	0003      	movs	r3, r0
 80088c0:	001a      	movs	r2, r3
 80088c2:	2301      	movs	r3, #1
 80088c4:	4053      	eors	r3, r2
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d005      	beq.n	80088d8 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 80088cc:	4a11      	ldr	r2, [pc, #68]	@ (8008914 <Mic_Upkeep+0x1ec>)
 80088ce:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <Mic_Upkeep+0x1f0>)
 80088d0:	21a3      	movs	r1, #163	@ 0xa3
 80088d2:	0018      	movs	r0, r3
 80088d4:	f005 f876 	bl	800d9c4 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 80088d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <Mic_Upkeep+0x1e8>)
 80088da:	2201      	movs	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80088de:	f004 f8e5 	bl	800caac <SetMICIndicator>
    }
    break;
 80088e2:	e00d      	b.n	8008900 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 80088e4:	4a18      	ldr	r2, [pc, #96]	@ (8008948 <Mic_Upkeep+0x220>)
 80088e6:	4b19      	ldr	r3, [pc, #100]	@ (800894c <Mic_Upkeep+0x224>)
 80088e8:	0019      	movs	r1, r3
 80088ea:	2003      	movs	r0, #3
 80088ec:	f004 ffbc 	bl	800d868 <CreateLine>
    MicState = MIC_STATE_INIT;
 80088f0:	4b07      	ldr	r3, [pc, #28]	@ (8008910 <Mic_Upkeep+0x1e8>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	701a      	strb	r2, [r3, #0]
    break;
 80088f6:	e004      	b.n	8008902 <Mic_Upkeep+0x1da>
    break;
 80088f8:	46c0      	nop			@ (mov r8, r8)
 80088fa:	e002      	b.n	8008902 <Mic_Upkeep+0x1da>
    break;
 80088fc:	46c0      	nop			@ (mov r8, r8)
 80088fe:	e000      	b.n	8008902 <Mic_Upkeep+0x1da>
    break;
 8008900:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008902:	4b03      	ldr	r3, [pc, #12]	@ (8008910 <Mic_Upkeep+0x1e8>)
 8008904:	781b      	ldrb	r3, [r3, #0]
}
 8008906:	0018      	movs	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	b002      	add	sp, #8
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	20000f9e 	.word	0x20000f9e
 8008914:	08023678 	.word	0x08023678
 8008918:	080244bc 	.word	0x080244bc
 800891c:	200012b3 	.word	0x200012b3
 8008920:	20000f8c 	.word	0x20000f8c
 8008924:	08023694 	.word	0x08023694
 8008928:	0802369c 	.word	0x0802369c
 800892c:	20000f3c 	.word	0x20000f3c
 8008930:	20000f7c 	.word	0x20000f7c
 8008934:	42c80000 	.word	0x42c80000
 8008938:	3fe00000 	.word	0x3fe00000
 800893c:	40590000 	.word	0x40590000
 8008940:	000002f3 	.word	0x000002f3
 8008944:	20000f88 	.word	0x20000f88
 8008948:	080236a4 	.word	0x080236a4
 800894c:	080236c4 	.word	0x080236c4

08008950 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008950:	b40f      	push	{r0, r1, r2, r3}
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008958:	2314      	movs	r3, #20
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	2180      	movs	r1, #128	@ 0x80
 8008964:	0089      	lsls	r1, r1, #2
 8008966:	480a      	ldr	r0, [pc, #40]	@ (8008990 <print+0x40>)
 8008968:	f016 fd4a 	bl	801f400 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 800896c:	4b08      	ldr	r3, [pc, #32]	@ (8008990 <print+0x40>)
 800896e:	0018      	movs	r0, r3
 8008970:	f7f7 fbfc 	bl	800016c <strlen>
 8008974:	0003      	movs	r3, r0
 8008976:	b29a      	uxth	r2, r3
 8008978:	4b05      	ldr	r3, [pc, #20]	@ (8008990 <print+0x40>)
 800897a:	0011      	movs	r1, r2
 800897c:	0018      	movs	r0, r3
 800897e:	f7ff fc47 	bl	8008210 <printString>
}
 8008982:	46c0      	nop			@ (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	b002      	add	sp, #8
 8008988:	bc80      	pop	{r7}
 800898a:	bc08      	pop	{r3}
 800898c:	b004      	add	sp, #16
 800898e:	4718      	bx	r3
 8008990:	20000fa0 	.word	0x20000fa0

08008994 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800899a:	1d3b      	adds	r3, r7, #4
 800899c:	0018      	movs	r0, r3
 800899e:	2314      	movs	r3, #20
 80089a0:	001a      	movs	r2, r3
 80089a2:	2100      	movs	r1, #0
 80089a4:	f016 fdd8 	bl	801f558 <memset>
  RTC_DateTypeDef sDate = {0};
 80089a8:	003b      	movs	r3, r7
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80089ae:	4b2e      	ldr	r3, [pc, #184]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089b0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a6c <MX_RTC_Init+0xd8>)
 80089b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80089b4:	4b2c      	ldr	r3, [pc, #176]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80089ba:	4b2b      	ldr	r3, [pc, #172]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089bc:	227f      	movs	r2, #127	@ 0x7f
 80089be:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80089c0:	4b29      	ldr	r3, [pc, #164]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089c2:	22ff      	movs	r2, #255	@ 0xff
 80089c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80089c6:	4b28      	ldr	r3, [pc, #160]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80089cc:	4b26      	ldr	r3, [pc, #152]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80089d2:	4b25      	ldr	r3, [pc, #148]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80089d8:	4b23      	ldr	r3, [pc, #140]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089da:	2200      	movs	r2, #0
 80089dc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80089de:	4b22      	ldr	r3, [pc, #136]	@ (8008a68 <MX_RTC_Init+0xd4>)
 80089e0:	0018      	movs	r0, r3
 80089e2:	f00c fbe5 	bl	80151b0 <HAL_RTC_Init>
 80089e6:	1e03      	subs	r3, r0, #0
 80089e8:	d001      	beq.n	80089ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80089ea:	f7ff fcd1 	bl	8008390 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80089ee:	1d3b      	adds	r3, r7, #4
 80089f0:	220d      	movs	r2, #13
 80089f2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80089f4:	1d3b      	adds	r3, r7, #4
 80089f6:	2200      	movs	r2, #0
 80089f8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	2200      	movs	r2, #0
 80089fe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008a00:	1d3b      	adds	r3, r7, #4
 8008a02:	2200      	movs	r2, #0
 8008a04:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008a06:	1d3b      	adds	r3, r7, #4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008a0c:	1d39      	adds	r1, r7, #4
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <MX_RTC_Init+0xd4>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	0018      	movs	r0, r3
 8008a14:	f00c fc68 	bl	80152e8 <HAL_RTC_SetTime>
 8008a18:	1e03      	subs	r3, r0, #0
 8008a1a:	d001      	beq.n	8008a20 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008a1c:	f7ff fcb8 	bl	8008390 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008a20:	003b      	movs	r3, r7
 8008a22:	2206      	movs	r2, #6
 8008a24:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008a26:	003b      	movs	r3, r7
 8008a28:	2211      	movs	r2, #17
 8008a2a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008a2c:	003b      	movs	r3, r7
 8008a2e:	2217      	movs	r2, #23
 8008a30:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008a32:	003b      	movs	r3, r7
 8008a34:	2218      	movs	r2, #24
 8008a36:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008a38:	0039      	movs	r1, r7
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a68 <MX_RTC_Init+0xd4>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f00c fd5a 	bl	80154f8 <HAL_RTC_SetDate>
 8008a44:	1e03      	subs	r3, r0, #0
 8008a46:	d001      	beq.n	8008a4c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008a48:	f7ff fca2 	bl	8008390 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008a4c:	4b06      	ldr	r3, [pc, #24]	@ (8008a68 <MX_RTC_Init+0xd4>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	0018      	movs	r0, r3
 8008a54:	f00c ff0a 	bl	801586c <HAL_RTCEx_SetWakeUpTimer_IT>
 8008a58:	1e03      	subs	r3, r0, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008a5c:	f7ff fc98 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008a60:	46c0      	nop			@ (mov r8, r8)
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b006      	add	sp, #24
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	200011a0 	.word	0x200011a0
 8008a6c:	40002800 	.word	0x40002800

08008a70 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008aa8 <HAL_RTC_MspInit+0x38>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10e      	bne.n	8008aa0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008a82:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <HAL_RTC_MspInit+0x3c>)
 8008a84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a86:	4b09      	ldr	r3, [pc, #36]	@ (8008aac <HAL_RTC_MspInit+0x3c>)
 8008a88:	2180      	movs	r1, #128	@ 0x80
 8008a8a:	02c9      	lsls	r1, r1, #11
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008a90:	2200      	movs	r2, #0
 8008a92:	2100      	movs	r1, #0
 8008a94:	2002      	movs	r0, #2
 8008a96:	f005 ffc5 	bl	800ea24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008a9a:	2002      	movs	r0, #2
 8008a9c:	f005 ffd7 	bl	800ea4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008aa0:	46c0      	nop			@ (mov r8, r8)
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	b002      	add	sp, #8
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	40002800 	.word	0x40002800
 8008aac:	40021000 	.word	0x40021000

08008ab0 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008ab8:	f005 fb22 	bl	800e100 <HAL_GetTick>
 8008abc:	0002      	movs	r2, r0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	18d2      	adds	r2, r2, r3
 8008ac2:	4b03      	ldr	r3, [pc, #12]	@ (8008ad0 <setsen5xReadTimer+0x20>)
 8008ac4:	601a      	str	r2, [r3, #0]
}
 8008ac6:	46c0      	nop			@ (mov r8, r8)
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	b002      	add	sp, #8
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			@ (mov r8, r8)
 8008ad0:	200011c8 	.word	0x200011c8

08008ad4 <enable_sen5x>:

bool enable_sen5x(uint32_t sleepTime) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8008adc:	f7fe ff60 	bl	80079a0 <IsPMSensorEnabled>
 8008ae0:	1e03      	subs	r3, r0, #0
 8008ae2:	d026      	beq.n	8008b32 <enable_sen5x+0x5e>
    sen5x_Enable = !sen5x_Enable;
 8008ae4:	4b17      	ldr	r3, [pc, #92]	@ (8008b44 <enable_sen5x+0x70>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	4193      	sbcs	r3, r2
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2201      	movs	r2, #1
 8008af0:	4053      	eors	r3, r2
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	1c1a      	adds	r2, r3, #0
 8008af6:	2301      	movs	r3, #1
 8008af8:	4013      	ands	r3, r2
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <enable_sen5x+0x70>)
 8008afe:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008b00:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <enable_sen5x+0x70>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <enable_sen5x+0x4a>
      setsen5xReadTimer(0);
 8008b08:	2000      	movs	r0, #0
 8008b0a:	f7ff ffd1 	bl	8008ab0 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <enable_sen5x+0x70>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	4a0d      	ldr	r2, [pc, #52]	@ (8008b48 <enable_sen5x+0x74>)
 8008b14:	490d      	ldr	r1, [pc, #52]	@ (8008b4c <enable_sen5x+0x78>)
 8008b16:	2003      	movs	r0, #3
 8008b18:	f004 fea6 	bl	800d868 <CreateLine>
 8008b1c:	e009      	b.n	8008b32 <enable_sen5x+0x5e>
    }
    else {
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008b1e:	f005 faef 	bl	800e100 <HAL_GetTick>
 8008b22:	0002      	movs	r2, r0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	490a      	ldr	r1, [pc, #40]	@ (8008b50 <enable_sen5x+0x7c>)
 8008b28:	434b      	muls	r3, r1
 8008b2a:	18d3      	adds	r3, r2, r3
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f7ff ffbf 	bl	8008ab0 <setsen5xReadTimer>
    }
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008b32:	4b08      	ldr	r3, [pc, #32]	@ (8008b54 <enable_sen5x+0x80>)
 8008b34:	2201      	movs	r2, #1
 8008b36:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008b38:	4b02      	ldr	r3, [pc, #8]	@ (8008b44 <enable_sen5x+0x70>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b002      	add	sp, #8
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200011c6 	.word	0x200011c6
 8008b48:	080236c8 	.word	0x080236c8
 8008b4c:	080236e8 	.word	0x080236e8
 8008b50:	00000bb8 	.word	0x00000bb8
 8008b54:	20000081 	.word	0x20000081

08008b58 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b88 <sen5x_Power_On+0x30>)
 8008b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b8c <sen5x_Power_On+0x34>)
 8008b60:	0019      	movs	r1, r3
 8008b62:	2003      	movs	r0, #3
 8008b64:	f004 fe80 	bl	800d868 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008b68:	2380      	movs	r3, #128	@ 0x80
 8008b6a:	015b      	lsls	r3, r3, #5
 8008b6c:	4808      	ldr	r0, [pc, #32]	@ (8008b90 <sen5x_Power_On+0x38>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	0019      	movs	r1, r3
 8008b72:	f006 fd40 	bl	800f5f6 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008b76:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <sen5x_Power_On+0x3c>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8008b7c:	20c8      	movs	r0, #200	@ 0xc8
 8008b7e:	f005 fac9 	bl	800e114 <HAL_Delay>
  return;
 8008b82:	46c0      	nop			@ (mov r8, r8)
}
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	080236ec 	.word	0x080236ec
 8008b8c:	080236e8 	.word	0x080236e8
 8008b90:	50000800 	.word	0x50000800
 8008b94:	200011c5 	.word	0x200011c5

08008b98 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008b9c:	4a09      	ldr	r2, [pc, #36]	@ (8008bc4 <sen5x_Power_Off+0x2c>)
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc8 <sen5x_Power_Off+0x30>)
 8008ba0:	0019      	movs	r1, r3
 8008ba2:	2003      	movs	r0, #3
 8008ba4:	f004 fe60 	bl	800d868 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008ba8:	2380      	movs	r3, #128	@ 0x80
 8008baa:	015b      	lsls	r3, r3, #5
 8008bac:	4807      	ldr	r0, [pc, #28]	@ (8008bcc <sen5x_Power_Off+0x34>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	f006 fd20 	bl	800f5f6 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008bb6:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <sen5x_Power_Off+0x38>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
  return;
 8008bbc:	46c0      	nop			@ (mov r8, r8)
}
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	46c0      	nop			@ (mov r8, r8)
 8008bc4:	08023708 	.word	0x08023708
 8008bc8:	080236e8 	.word	0x080236e8
 8008bcc:	50000800 	.word	0x50000800
 8008bd0:	200011c5 	.word	0x200011c5

08008bd4 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <reset_fanCleaningDone+0x10>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
}
 8008bde:	46c0      	nop			@ (mov r8, r8)
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	200011c4 	.word	0x200011c4

08008be8 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	b09b      	sub	sp, #108	@ 0x6c
 8008bec:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008bee:	2456      	movs	r4, #86	@ 0x56
 8008bf0:	193b      	adds	r3, r7, r4
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008bf6:	2355      	movs	r3, #85	@ 0x55
 8008bf8:	18fb      	adds	r3, r7, r3
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008bfe:	2354      	movs	r3, #84	@ 0x54
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	2220      	movs	r2, #32
 8008c04:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008c06:	f7ff ffa7 	bl	8008b58 <sen5x_Power_On>

  error = sen5x_device_reset();
 8008c0a:	0025      	movs	r5, r4
 8008c0c:	193c      	adds	r4, r7, r4
 8008c0e:	f000 fff9 	bl	8009c04 <sen5x_device_reset>
 8008c12:	0003      	movs	r3, r0
 8008c14:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008c16:	002c      	movs	r4, r5
 8008c18:	193b      	adds	r3, r7, r4
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	5e9b      	ldrsh	r3, [r3, r2]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008c22:	193b      	adds	r3, r7, r4
 8008c24:	2200      	movs	r2, #0
 8008c26:	5e9b      	ldrsh	r3, [r3, r2]
 8008c28:	4a6d      	ldr	r2, [pc, #436]	@ (8008de0 <probe_sen5x+0x1f8>)
 8008c2a:	496e      	ldr	r1, [pc, #440]	@ (8008de4 <probe_sen5x+0x1fc>)
 8008c2c:	2001      	movs	r0, #1
 8008c2e:	f004 fe1b 	bl	800d868 <CreateLine>
      return error;
 8008c32:	193b      	adds	r3, r7, r4
 8008c34:	2200      	movs	r2, #0
 8008c36:	5e9b      	ldrsh	r3, [r3, r2]
 8008c38:	e0ce      	b.n	8008dd8 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008c3a:	2556      	movs	r5, #86	@ 0x56
 8008c3c:	197c      	adds	r4, r7, r5
 8008c3e:	2355      	movs	r3, #85	@ 0x55
 8008c40:	18fb      	adds	r3, r7, r3
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	232c      	movs	r3, #44	@ 0x2c
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	0011      	movs	r1, r2
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f000 fec6 	bl	80099dc <sen5x_get_serial_number>
 8008c50:	0003      	movs	r3, r0
 8008c52:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008c54:	197b      	adds	r3, r7, r5
 8008c56:	2200      	movs	r2, #0
 8008c58:	5e9b      	ldrsh	r3, [r3, r2]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008c5e:	197b      	adds	r3, r7, r5
 8008c60:	2200      	movs	r2, #0
 8008c62:	5e9a      	ldrsh	r2, [r3, r2]
 8008c64:	4b60      	ldr	r3, [pc, #384]	@ (8008de8 <probe_sen5x+0x200>)
 8008c66:	0011      	movs	r1, r2
 8008c68:	0018      	movs	r0, r3
 8008c6a:	f016 fac1 	bl	801f1f0 <iprintf>
      return error;
 8008c6e:	197b      	adds	r3, r7, r5
 8008c70:	2200      	movs	r2, #0
 8008c72:	5e9b      	ldrsh	r3, [r3, r2]
 8008c74:	e0b0      	b.n	8008dd8 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008c76:	232c      	movs	r3, #44	@ 0x2c
 8008c78:	18fa      	adds	r2, r7, r3
 8008c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8008dec <probe_sen5x+0x204>)
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f016 fab6 	bl	801f1f0 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008c84:	2556      	movs	r5, #86	@ 0x56
 8008c86:	197c      	adds	r4, r7, r5
 8008c88:	2354      	movs	r3, #84	@ 0x54
 8008c8a:	18fb      	adds	r3, r7, r3
 8008c8c:	781a      	ldrb	r2, [r3, #0]
 8008c8e:	230c      	movs	r3, #12
 8008c90:	18fb      	adds	r3, r7, r3
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f000 fe4b 	bl	8009930 <sen5x_get_product_name>
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008c9e:	197b      	adds	r3, r7, r5
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008ca8:	197b      	adds	r3, r7, r5
 8008caa:	2200      	movs	r2, #0
 8008cac:	5e9a      	ldrsh	r2, [r3, r2]
 8008cae:	4b50      	ldr	r3, [pc, #320]	@ (8008df0 <probe_sen5x+0x208>)
 8008cb0:	0011      	movs	r1, r2
 8008cb2:	0018      	movs	r0, r3
 8008cb4:	f016 fa9c 	bl	801f1f0 <iprintf>
      return error;
 8008cb8:	197b      	adds	r3, r7, r5
 8008cba:	2200      	movs	r2, #0
 8008cbc:	5e9b      	ldrsh	r3, [r3, r2]
 8008cbe:	e08b      	b.n	8008dd8 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	18fa      	adds	r2, r7, r3
 8008cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8008df4 <probe_sen5x+0x20c>)
 8008cc6:	0011      	movs	r1, r2
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f016 fa91 	bl	801f1f0 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008cce:	2656      	movs	r6, #86	@ 0x56
 8008cd0:	19bc      	adds	r4, r7, r6
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	18fd      	adds	r5, r7, r3
 8008cd6:	2309      	movs	r3, #9
 8008cd8:	18fa      	adds	r2, r7, r3
 8008cda:	230a      	movs	r3, #10
 8008cdc:	18f9      	adds	r1, r7, r3
 8008cde:	230b      	movs	r3, #11
 8008ce0:	18f8      	adds	r0, r7, r3
 8008ce2:	1d7b      	adds	r3, r7, #5
 8008ce4:	9302      	str	r3, [sp, #8]
 8008ce6:	1dbb      	adds	r3, r7, #6
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	1dfb      	adds	r3, r7, #7
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	002b      	movs	r3, r5
 8008cf0:	f000 feca 	bl	8009a88 <sen5x_get_version>
 8008cf4:	0003      	movs	r3, r0
 8008cf6:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008cf8:	19bb      	adds	r3, r7, r6
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	5e9b      	ldrsh	r3, [r3, r2]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008d02:	19bb      	adds	r3, r7, r6
 8008d04:	2200      	movs	r2, #0
 8008d06:	5e9a      	ldrsh	r2, [r3, r2]
 8008d08:	4b3b      	ldr	r3, [pc, #236]	@ (8008df8 <probe_sen5x+0x210>)
 8008d0a:	0011      	movs	r1, r2
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f016 fa6f 	bl	801f1f0 <iprintf>
      return error;
 8008d12:	19bb      	adds	r3, r7, r6
 8008d14:	2200      	movs	r2, #0
 8008d16:	5e9b      	ldrsh	r3, [r3, r2]
 8008d18:	e05e      	b.n	8008dd8 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008d1a:	230b      	movs	r3, #11
 8008d1c:	18fb      	adds	r3, r7, r3
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	0019      	movs	r1, r3
 8008d22:	230a      	movs	r3, #10
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	001a      	movs	r2, r3
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	18fb      	adds	r3, r7, r3
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	001c      	movs	r4, r3
 8008d32:	1dfb      	adds	r3, r7, #7
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	4831      	ldr	r0, [pc, #196]	@ (8008dfc <probe_sen5x+0x214>)
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	0023      	movs	r3, r4
 8008d3c:	f016 fa58 	bl	801f1f0 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008d40:	2300      	movs	r3, #0
 8008d42:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008d44:	264e      	movs	r6, #78	@ 0x4e
 8008d46:	19bb      	adds	r3, r7, r6
 8008d48:	2200      	movs	r2, #0
 8008d4a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008d4c:	234c      	movs	r3, #76	@ 0x4c
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	2200      	movs	r2, #0
 8008d52:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008d54:	492a      	ldr	r1, [pc, #168]	@ (8008e00 <probe_sen5x+0x218>)
 8008d56:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008d58:	f7f8 f922 	bl	8000fa0 <__aeabi_fmul>
 8008d5c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008d5e:	1c18      	adds	r0, r3, #0
 8008d60:	f7f8 fc16 	bl	8001590 <__aeabi_f2iz>
 8008d64:	0003      	movs	r3, r0
 8008d66:	b218      	sxth	r0, r3
 8008d68:	2556      	movs	r5, #86	@ 0x56
 8008d6a:	197c      	adds	r4, r7, r5
 8008d6c:	234c      	movs	r3, #76	@ 0x4c
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	881a      	ldrh	r2, [r3, #0]
 8008d72:	19bb      	adds	r3, r7, r6
 8008d74:	2100      	movs	r1, #0
 8008d76:	5e5b      	ldrsh	r3, [r3, r1]
 8008d78:	0019      	movs	r1, r3
 8008d7a:	f000 fd75 	bl	8009868 <sen5x_set_temperature_offset_parameters>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008d82:	197b      	adds	r3, r7, r5
 8008d84:	2200      	movs	r2, #0
 8008d86:	5e9b      	ldrsh	r3, [r3, r2]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008d8c:	197b      	adds	r3, r7, r5
 8008d8e:	2200      	movs	r2, #0
 8008d90:	5e9b      	ldrsh	r3, [r3, r2]
 8008d92:	4a1c      	ldr	r2, [pc, #112]	@ (8008e04 <probe_sen5x+0x21c>)
 8008d94:	4913      	ldr	r1, [pc, #76]	@ (8008de4 <probe_sen5x+0x1fc>)
 8008d96:	2001      	movs	r0, #1
 8008d98:	f004 fd66 	bl	800d868 <CreateLine>
      return error;
 8008d9c:	197b      	adds	r3, r7, r5
 8008d9e:	2200      	movs	r2, #0
 8008da0:	5e9b      	ldrsh	r3, [r3, r2]
 8008da2:	e019      	b.n	8008dd8 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008da4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008da6:	f7fa fb5d 	bl	8003464 <__aeabi_f2d>
 8008daa:	0002      	movs	r2, r0
 8008dac:	000b      	movs	r3, r1
 8008dae:	4816      	ldr	r0, [pc, #88]	@ (8008e08 <probe_sen5x+0x220>)
 8008db0:	4916      	ldr	r1, [pc, #88]	@ (8008e0c <probe_sen5x+0x224>)
 8008db2:	9200      	str	r2, [sp, #0]
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	0002      	movs	r2, r0
 8008db8:	2002      	movs	r0, #2
 8008dba:	f004 fd55 	bl	800d868 <CreateLine>
  }
  sen5x_Power_Off();
 8008dbe:	f7ff feeb 	bl	8008b98 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008dc2:	f005 f99d 	bl	800e100 <HAL_GetTick>
 8008dc6:	0003      	movs	r3, r0
 8008dc8:	4a11      	ldr	r2, [pc, #68]	@ (8008e10 <probe_sen5x+0x228>)
 8008dca:	189a      	adds	r2, r3, r2
 8008dcc:	4b11      	ldr	r3, [pc, #68]	@ (8008e14 <probe_sen5x+0x22c>)
 8008dce:	601a      	str	r2, [r3, #0]
  return error;
 8008dd0:	2356      	movs	r3, #86	@ 0x56
 8008dd2:	18fb      	adds	r3, r7, r3
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008dd8:	0018      	movs	r0, r3
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	b017      	add	sp, #92	@ 0x5c
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de0:	08023724 	.word	0x08023724
 8008de4:	08023750 	.word	0x08023750
 8008de8:	08023754 	.word	0x08023754
 8008dec:	08023784 	.word	0x08023784
 8008df0:	08023798 	.word	0x08023798
 8008df4:	080237c8 	.word	0x080237c8
 8008df8:	080237dc 	.word	0x080237dc
 8008dfc:	08023808 	.word	0x08023808
 8008e00:	43480000 	.word	0x43480000
 8008e04:	0802382c 	.word	0x0802382c
 8008e08:	0802386c 	.word	0x0802386c
 8008e0c:	080238a4 	.word	0x080238a4
 8008e10:	000061a8 	.word	0x000061a8
 8008e14:	200011c8 	.word	0x200011c8

08008e18 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008e1e:	1dbb      	adds	r3, r7, #6
 8008e20:	2200      	movs	r2, #0
 8008e22:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008e24:	1dbc      	adds	r4, r7, #6
 8008e26:	f000 fbab 	bl	8009580 <sen5x_start_measurement>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e2e:	1dbb      	adds	r3, r7, #6
 8008e30:	2200      	movs	r2, #0
 8008e32:	5e9b      	ldrsh	r3, [r3, r2]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d007      	beq.n	8008e48 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008e38:	1dbb      	adds	r3, r7, #6
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e3e:	4a06      	ldr	r2, [pc, #24]	@ (8008e58 <sen5x_lightup_measurement+0x40>)
 8008e40:	4906      	ldr	r1, [pc, #24]	@ (8008e5c <sen5x_lightup_measurement+0x44>)
 8008e42:	2001      	movs	r0, #1
 8008e44:	f004 fd10 	bl	800d868 <CreateLine>
  }
  return error;
 8008e48:	1dbb      	adds	r3, r7, #6
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008e4e:	0018      	movs	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b003      	add	sp, #12
 8008e54:	bd90      	pop	{r4, r7, pc}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	080238a8 	.word	0x080238a8
 8008e5c:	08023750 	.word	0x08023750

08008e60 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008e60:	b590      	push	{r4, r7, lr}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008e66:	1dbb      	adds	r3, r7, #6
 8008e68:	2200      	movs	r2, #0
 8008e6a:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008e6c:	1dbc      	adds	r4, r7, #6
 8008e6e:	f000 fbb5 	bl	80095dc <sen5x_stop_measurement>
 8008e72:	0003      	movs	r3, r0
 8008e74:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e76:	1dbb      	adds	r3, r7, #6
 8008e78:	2200      	movs	r2, #0
 8008e7a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008e80:	1dbb      	adds	r3, r7, #6
 8008e82:	2200      	movs	r2, #0
 8008e84:	5e9b      	ldrsh	r3, [r3, r2]
 8008e86:	4a06      	ldr	r2, [pc, #24]	@ (8008ea0 <sen5x_extinguish_measurement+0x40>)
 8008e88:	4906      	ldr	r1, [pc, #24]	@ (8008ea4 <sen5x_extinguish_measurement+0x44>)
 8008e8a:	2001      	movs	r0, #1
 8008e8c:	f004 fcec 	bl	800d868 <CreateLine>
  }
  return error;
 8008e90:	1dbb      	adds	r3, r7, #6
 8008e92:	2200      	movs	r2, #0
 8008e94:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008e96:	0018      	movs	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b003      	add	sp, #12
 8008e9c:	bd90      	pop	{r4, r7, pc}
 8008e9e:	46c0      	nop			@ (mov r8, r8)
 8008ea0:	080238d8 	.word	0x080238d8
 8008ea4:	08023750 	.word	0x08023750

08008ea8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eaa:	b08d      	sub	sp, #52	@ 0x34
 8008eac:	af04      	add	r7, sp, #16
 8008eae:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008eb0:	261e      	movs	r6, #30
 8008eb2:	19bb      	adds	r3, r7, r6
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008eb8:	19bc      	adds	r4, r7, r6
 8008eba:	2316      	movs	r3, #22
 8008ebc:	18fd      	adds	r5, r7, r3
 8008ebe:	2318      	movs	r3, #24
 8008ec0:	18fa      	adds	r2, r7, r3
 8008ec2:	231a      	movs	r3, #26
 8008ec4:	18f9      	adds	r1, r7, r3
 8008ec6:	231c      	movs	r3, #28
 8008ec8:	18f8      	adds	r0, r7, r3
 8008eca:	230e      	movs	r3, #14
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	9303      	str	r3, [sp, #12]
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	2312      	movs	r3, #18
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	2314      	movs	r3, #20
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	002b      	movs	r3, r5
 8008ee4:	f000 fbfc 	bl	80096e0 <sen5x_read_measured_values>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8008eec:	19bb      	adds	r3, r7, r6
 8008eee:	2200      	movs	r2, #0
 8008ef0:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <sen5x_read_measurement+0x56>
    return error;
 8008ef6:	19bb      	adds	r3, r7, r6
 8008ef8:	2200      	movs	r2, #0
 8008efa:	5e9b      	ldrsh	r3, [r3, r2]
 8008efc:	e034      	b.n	8008f68 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8008efe:	231c      	movs	r3, #28
 8008f00:	18fb      	adds	r3, r7, r3
 8008f02:	881a      	ldrh	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8008f08:	211a      	movs	r1, #26
 8008f0a:	187b      	adds	r3, r7, r1
 8008f0c:	881a      	ldrh	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8008f12:	2318      	movs	r3, #24
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	881a      	ldrh	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8008f1c:	2016      	movs	r0, #22
 8008f1e:	183b      	adds	r3, r7, r0
 8008f20:	881a      	ldrh	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8008f26:	2314      	movs	r3, #20
 8008f28:	18fb      	adds	r3, r7, r3
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	5e9a      	ldrsh	r2, [r3, r2]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8008f32:	2312      	movs	r3, #18
 8008f34:	18fb      	adds	r3, r7, r3
 8008f36:	2200      	movs	r2, #0
 8008f38:	5e9a      	ldrsh	r2, [r3, r2]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8008f3e:	2310      	movs	r3, #16
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	2200      	movs	r2, #0
 8008f44:	5e9a      	ldrsh	r2, [r3, r2]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8008f4a:	230e      	movs	r3, #14
 8008f4c:	18fb      	adds	r3, r7, r3
 8008f4e:	2200      	movs	r2, #0
 8008f50:	5e9a      	ldrsh	r2, [r3, r2]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8008f56:	187b      	adds	r3, r7, r1
 8008f58:	881a      	ldrh	r2, [r3, #0]
 8008f5a:	183b      	adds	r3, r7, r0
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	0019      	movs	r1, r3
 8008f60:	0010      	movs	r0, r2
 8008f62:	f7fa fcfd 	bl	8003960 <setPMs>
  return 0;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	0018      	movs	r0, r3
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b009      	add	sp, #36	@ 0x24
 8008f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f70 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 8008f76:	1dbb      	adds	r3, r7, #6
 8008f78:	2200      	movs	r2, #0
 8008f7a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 8008f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800912c <sen5x_measurement+0x1bc>)
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f7ff ff92 	bl	8008ea8 <sen5x_read_measurement>
 8008f84:	1e03      	subs	r3, r0, #0
 8008f86:	d008      	beq.n	8008f9a <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 8008f88:	1dbb      	adds	r3, r7, #6
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	5e9b      	ldrsh	r3, [r3, r2]
 8008f8e:	4a68      	ldr	r2, [pc, #416]	@ (8009130 <sen5x_measurement+0x1c0>)
 8008f90:	4968      	ldr	r1, [pc, #416]	@ (8009134 <sen5x_measurement+0x1c4>)
 8008f92:	2001      	movs	r0, #1
 8008f94:	f004 fc68 	bl	800d868 <CreateLine>
 8008f98:	e0c1      	b.n	800911e <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 8008f9a:	4b67      	ldr	r3, [pc, #412]	@ (8009138 <sen5x_measurement+0x1c8>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	e0be      	b.n	8009124 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8008fa6:	4b61      	ldr	r3, [pc, #388]	@ (800912c <sen5x_measurement+0x1bc>)
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	0018      	movs	r0, r3
 8008fac:	f7f8 fb10 	bl	80015d0 <__aeabi_i2f>
 8008fb0:	1c03      	adds	r3, r0, #0
 8008fb2:	4962      	ldr	r1, [pc, #392]	@ (800913c <sen5x_measurement+0x1cc>)
 8008fb4:	1c18      	adds	r0, r3, #0
 8008fb6:	f7f7 fe0d 	bl	8000bd4 <__aeabi_fdiv>
 8008fba:	1c03      	adds	r3, r0, #0
 8008fbc:	1c18      	adds	r0, r3, #0
 8008fbe:	f7fa fa51 	bl	8003464 <__aeabi_f2d>
 8008fc2:	0002      	movs	r2, r0
 8008fc4:	000b      	movs	r3, r1
 8008fc6:	495e      	ldr	r1, [pc, #376]	@ (8009140 <sen5x_measurement+0x1d0>)
 8008fc8:	0008      	movs	r0, r1
 8008fca:	f016 f911 	bl	801f1f0 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8008fce:	4b57      	ldr	r3, [pc, #348]	@ (800912c <sen5x_measurement+0x1bc>)
 8008fd0:	885b      	ldrh	r3, [r3, #2]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7f8 fafc 	bl	80015d0 <__aeabi_i2f>
 8008fd8:	1c03      	adds	r3, r0, #0
 8008fda:	4958      	ldr	r1, [pc, #352]	@ (800913c <sen5x_measurement+0x1cc>)
 8008fdc:	1c18      	adds	r0, r3, #0
 8008fde:	f7f7 fdf9 	bl	8000bd4 <__aeabi_fdiv>
 8008fe2:	1c03      	adds	r3, r0, #0
 8008fe4:	1c18      	adds	r0, r3, #0
 8008fe6:	f7fa fa3d 	bl	8003464 <__aeabi_f2d>
 8008fea:	0002      	movs	r2, r0
 8008fec:	000b      	movs	r3, r1
 8008fee:	4955      	ldr	r1, [pc, #340]	@ (8009144 <sen5x_measurement+0x1d4>)
 8008ff0:	0008      	movs	r0, r1
 8008ff2:	f016 f8fd 	bl	801f1f0 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8008ff6:	4b4d      	ldr	r3, [pc, #308]	@ (800912c <sen5x_measurement+0x1bc>)
 8008ff8:	889b      	ldrh	r3, [r3, #4]
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f7f8 fae8 	bl	80015d0 <__aeabi_i2f>
 8009000:	1c03      	adds	r3, r0, #0
 8009002:	494e      	ldr	r1, [pc, #312]	@ (800913c <sen5x_measurement+0x1cc>)
 8009004:	1c18      	adds	r0, r3, #0
 8009006:	f7f7 fde5 	bl	8000bd4 <__aeabi_fdiv>
 800900a:	1c03      	adds	r3, r0, #0
 800900c:	1c18      	adds	r0, r3, #0
 800900e:	f7fa fa29 	bl	8003464 <__aeabi_f2d>
 8009012:	0002      	movs	r2, r0
 8009014:	000b      	movs	r3, r1
 8009016:	494c      	ldr	r1, [pc, #304]	@ (8009148 <sen5x_measurement+0x1d8>)
 8009018:	0008      	movs	r0, r1
 800901a:	f016 f8e9 	bl	801f1f0 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800901e:	4b43      	ldr	r3, [pc, #268]	@ (800912c <sen5x_measurement+0x1bc>)
 8009020:	88db      	ldrh	r3, [r3, #6]
 8009022:	0018      	movs	r0, r3
 8009024:	f7f8 fad4 	bl	80015d0 <__aeabi_i2f>
 8009028:	1c03      	adds	r3, r0, #0
 800902a:	4944      	ldr	r1, [pc, #272]	@ (800913c <sen5x_measurement+0x1cc>)
 800902c:	1c18      	adds	r0, r3, #0
 800902e:	f7f7 fdd1 	bl	8000bd4 <__aeabi_fdiv>
 8009032:	1c03      	adds	r3, r0, #0
 8009034:	1c18      	adds	r0, r3, #0
 8009036:	f7fa fa15 	bl	8003464 <__aeabi_f2d>
 800903a:	0002      	movs	r2, r0
 800903c:	000b      	movs	r3, r1
 800903e:	4943      	ldr	r1, [pc, #268]	@ (800914c <sen5x_measurement+0x1dc>)
 8009040:	0008      	movs	r0, r1
 8009042:	f016 f8d5 	bl	801f1f0 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 8009046:	4b39      	ldr	r3, [pc, #228]	@ (800912c <sen5x_measurement+0x1bc>)
 8009048:	2208      	movs	r2, #8
 800904a:	5e9b      	ldrsh	r3, [r3, r2]
 800904c:	4a40      	ldr	r2, [pc, #256]	@ (8009150 <sen5x_measurement+0x1e0>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d014      	beq.n	800907c <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009052:	4b36      	ldr	r3, [pc, #216]	@ (800912c <sen5x_measurement+0x1bc>)
 8009054:	2208      	movs	r2, #8
 8009056:	5e9b      	ldrsh	r3, [r3, r2]
 8009058:	0018      	movs	r0, r3
 800905a:	f7f8 fab9 	bl	80015d0 <__aeabi_i2f>
 800905e:	1c03      	adds	r3, r0, #0
 8009060:	493c      	ldr	r1, [pc, #240]	@ (8009154 <sen5x_measurement+0x1e4>)
 8009062:	1c18      	adds	r0, r3, #0
 8009064:	f7f7 fdb6 	bl	8000bd4 <__aeabi_fdiv>
 8009068:	1c03      	adds	r3, r0, #0
 800906a:	1c18      	adds	r0, r3, #0
 800906c:	f7fa f9fa 	bl	8003464 <__aeabi_f2d>
 8009070:	0002      	movs	r2, r0
 8009072:	000b      	movs	r3, r1
 8009074:	4938      	ldr	r1, [pc, #224]	@ (8009158 <sen5x_measurement+0x1e8>)
 8009076:	0008      	movs	r0, r1
 8009078:	f016 f8ba 	bl	801f1f0 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 800907c:	4b2b      	ldr	r3, [pc, #172]	@ (800912c <sen5x_measurement+0x1bc>)
 800907e:	220a      	movs	r2, #10
 8009080:	5e9b      	ldrsh	r3, [r3, r2]
 8009082:	4a33      	ldr	r2, [pc, #204]	@ (8009150 <sen5x_measurement+0x1e0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d014      	beq.n	80090b2 <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8009088:	4b28      	ldr	r3, [pc, #160]	@ (800912c <sen5x_measurement+0x1bc>)
 800908a:	220a      	movs	r2, #10
 800908c:	5e9b      	ldrsh	r3, [r3, r2]
 800908e:	0018      	movs	r0, r3
 8009090:	f7f8 fa9e 	bl	80015d0 <__aeabi_i2f>
 8009094:	1c03      	adds	r3, r0, #0
 8009096:	4931      	ldr	r1, [pc, #196]	@ (800915c <sen5x_measurement+0x1ec>)
 8009098:	1c18      	adds	r0, r3, #0
 800909a:	f7f7 fd9b 	bl	8000bd4 <__aeabi_fdiv>
 800909e:	1c03      	adds	r3, r0, #0
 80090a0:	1c18      	adds	r0, r3, #0
 80090a2:	f7fa f9df 	bl	8003464 <__aeabi_f2d>
 80090a6:	0002      	movs	r2, r0
 80090a8:	000b      	movs	r3, r1
 80090aa:	492d      	ldr	r1, [pc, #180]	@ (8009160 <sen5x_measurement+0x1f0>)
 80090ac:	0008      	movs	r0, r1
 80090ae:	f016 f89f 	bl	801f1f0 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 80090b2:	4b1e      	ldr	r3, [pc, #120]	@ (800912c <sen5x_measurement+0x1bc>)
 80090b4:	220c      	movs	r2, #12
 80090b6:	5e9b      	ldrsh	r3, [r3, r2]
 80090b8:	4a25      	ldr	r2, [pc, #148]	@ (8009150 <sen5x_measurement+0x1e0>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d014      	beq.n	80090e8 <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80090be:	4b1b      	ldr	r3, [pc, #108]	@ (800912c <sen5x_measurement+0x1bc>)
 80090c0:	220c      	movs	r2, #12
 80090c2:	5e9b      	ldrsh	r3, [r3, r2]
 80090c4:	0018      	movs	r0, r3
 80090c6:	f7f8 fa83 	bl	80015d0 <__aeabi_i2f>
 80090ca:	1c03      	adds	r3, r0, #0
 80090cc:	491b      	ldr	r1, [pc, #108]	@ (800913c <sen5x_measurement+0x1cc>)
 80090ce:	1c18      	adds	r0, r3, #0
 80090d0:	f7f7 fd80 	bl	8000bd4 <__aeabi_fdiv>
 80090d4:	1c03      	adds	r3, r0, #0
 80090d6:	1c18      	adds	r0, r3, #0
 80090d8:	f7fa f9c4 	bl	8003464 <__aeabi_f2d>
 80090dc:	0002      	movs	r2, r0
 80090de:	000b      	movs	r3, r1
 80090e0:	4920      	ldr	r1, [pc, #128]	@ (8009164 <sen5x_measurement+0x1f4>)
 80090e2:	0008      	movs	r0, r1
 80090e4:	f016 f884 	bl	801f1f0 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 80090e8:	4b10      	ldr	r3, [pc, #64]	@ (800912c <sen5x_measurement+0x1bc>)
 80090ea:	220e      	movs	r2, #14
 80090ec:	5e9b      	ldrsh	r3, [r3, r2]
 80090ee:	4a18      	ldr	r2, [pc, #96]	@ (8009150 <sen5x_measurement+0x1e0>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d014      	beq.n	800911e <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 80090f4:	4b0d      	ldr	r3, [pc, #52]	@ (800912c <sen5x_measurement+0x1bc>)
 80090f6:	220e      	movs	r2, #14
 80090f8:	5e9b      	ldrsh	r3, [r3, r2]
 80090fa:	0018      	movs	r0, r3
 80090fc:	f7f8 fa68 	bl	80015d0 <__aeabi_i2f>
 8009100:	1c03      	adds	r3, r0, #0
 8009102:	490e      	ldr	r1, [pc, #56]	@ (800913c <sen5x_measurement+0x1cc>)
 8009104:	1c18      	adds	r0, r3, #0
 8009106:	f7f7 fd65 	bl	8000bd4 <__aeabi_fdiv>
 800910a:	1c03      	adds	r3, r0, #0
 800910c:	1c18      	adds	r0, r3, #0
 800910e:	f7fa f9a9 	bl	8003464 <__aeabi_f2d>
 8009112:	0002      	movs	r2, r0
 8009114:	000b      	movs	r3, r1
 8009116:	4914      	ldr	r1, [pc, #80]	@ (8009168 <sen5x_measurement+0x1f8>)
 8009118:	0008      	movs	r0, r1
 800911a:	f016 f869 	bl	801f1f0 <iprintf>
    }
  }
  return error;
 800911e:	1dbb      	adds	r3, r7, #6
 8009120:	2200      	movs	r2, #0
 8009122:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b002      	add	sp, #8
 800912a:	bd80      	pop	{r7, pc}
 800912c:	200011d0 	.word	0x200011d0
 8009130:	08023908 	.word	0x08023908
 8009134:	08023750 	.word	0x08023750
 8009138:	200011cc 	.word	0x200011cc
 800913c:	41200000 	.word	0x41200000
 8009140:	0802393c 	.word	0x0802393c
 8009144:	08023968 	.word	0x08023968
 8009148:	08023994 	.word	0x08023994
 800914c:	080239c0 	.word	0x080239c0
 8009150:	00007fff 	.word	0x00007fff
 8009154:	42c80000 	.word	0x42c80000
 8009158:	080239ec 	.word	0x080239ec
 800915c:	43480000 	.word	0x43480000
 8009160:	08023a0c 	.word	0x08023a0c
 8009164:	08023a2c 	.word	0x08023a2c
 8009168:	08023a40 	.word	0x08023a40

0800916c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800916c:	b590      	push	{r4, r7, lr}
 800916e:	b085      	sub	sp, #20
 8009170:	af02      	add	r7, sp, #8
 8009172:	6039      	str	r1, [r7, #0]
 8009174:	0011      	movs	r1, r2
 8009176:	1dfb      	adds	r3, r7, #7
 8009178:	1c02      	adds	r2, r0, #0
 800917a:	701a      	strb	r2, [r3, #0]
 800917c:	1d3b      	adds	r3, r7, #4
 800917e:	1c0a      	adds	r2, r1, #0
 8009180:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8009182:	1dfb      	adds	r3, r7, #7
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	18db      	adds	r3, r3, r3
 800918a:	b299      	uxth	r1, r3
 800918c:	1d3b      	adds	r3, r7, #4
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	4805      	ldr	r0, [pc, #20]	@ (80091a8 <sensirion_i2c_hal_read+0x3c>)
 8009194:	2464      	movs	r4, #100	@ 0x64
 8009196:	9400      	str	r4, [sp, #0]
 8009198:	f006 fc04 	bl	800f9a4 <HAL_I2C_Master_Receive>
 800919c:	0003      	movs	r3, r0
 800919e:	b25b      	sxtb	r3, r3
}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b003      	add	sp, #12
 80091a6:	bd90      	pop	{r4, r7, pc}
 80091a8:	20000dac 	.word	0x20000dac

080091ac <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	6039      	str	r1, [r7, #0]
 80091b4:	0011      	movs	r1, r2
 80091b6:	1dfb      	adds	r3, r7, #7
 80091b8:	1c02      	adds	r2, r0, #0
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	1d3b      	adds	r3, r7, #4
 80091be:	1c0a      	adds	r2, r1, #0
 80091c0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80091c2:	1dfb      	adds	r3, r7, #7
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	18db      	adds	r3, r3, r3
 80091ca:	b299      	uxth	r1, r3
 80091cc:	1d3b      	adds	r3, r7, #4
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	4805      	ldr	r0, [pc, #20]	@ (80091e8 <sensirion_i2c_hal_write+0x3c>)
 80091d4:	2464      	movs	r4, #100	@ 0x64
 80091d6:	9400      	str	r4, [sp, #0]
 80091d8:	f006 fadc 	bl	800f794 <HAL_I2C_Master_Transmit>
 80091dc:	0003      	movs	r3, r0
 80091de:	b25b      	sxtb	r3, r3
}
 80091e0:	0018      	movs	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b003      	add	sp, #12
 80091e6:	bd90      	pop	{r4, r7, pc}
 80091e8:	20000dac 	.word	0x20000dac

080091ec <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	22fa      	movs	r2, #250	@ 0xfa
 80091f8:	0091      	lsls	r1, r2, #2
 80091fa:	0018      	movs	r0, r3
 80091fc:	f7f6 ffd2 	bl	80001a4 <__udivsi3>
 8009200:	0003      	movs	r3, r0
 8009202:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	22fa      	movs	r2, #250	@ 0xfa
 8009208:	0091      	lsls	r1, r2, #2
 800920a:	0018      	movs	r0, r3
 800920c:	f7f7 f850 	bl	80002b0 <__aeabi_uidivmod>
 8009210:	1e0b      	subs	r3, r1, #0
 8009212:	d002      	beq.n	800921a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	0018      	movs	r0, r3
 800921e:	f004 ff79 	bl	800e114 <HAL_Delay>
}
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	46bd      	mov	sp, r7
 8009226:	b004      	add	sp, #16
 8009228:	bd80      	pop	{r7, pc}
	...

0800922c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8009236:	1d3b      	adds	r3, r7, #4
 8009238:	0018      	movs	r0, r3
 800923a:	f000 fc91 	bl	8009b60 <sen5x_read_device_status>
 800923e:	1e03      	subs	r3, r0, #0
 8009240:	d007      	beq.n	8009252 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009242:	4a2b      	ldr	r2, [pc, #172]	@ (80092f0 <sen5x_check_for_errors+0xc4>)
 8009244:	4b2b      	ldr	r3, [pc, #172]	@ (80092f4 <sen5x_check_for_errors+0xc8>)
 8009246:	0019      	movs	r1, r3
 8009248:	2001      	movs	r0, #1
 800924a:	f004 fb0d 	bl	800d868 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 800924e:	2300      	movs	r3, #0
 8009250:	e049      	b.n	80092e6 <sen5x_check_for_errors+0xba>
  }
  if (device_status == 0) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d107      	bne.n	8009268 <sen5x_check_for_errors+0x3c>
    Debug("sen5x operates normal");
 8009258:	4a27      	ldr	r2, [pc, #156]	@ (80092f8 <sen5x_check_for_errors+0xcc>)
 800925a:	4b28      	ldr	r3, [pc, #160]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 800925c:	0019      	movs	r1, r3
 800925e:	2003      	movs	r0, #3
 8009260:	f004 fb02 	bl	800d868 <CreateLine>
    return 0;
 8009264:	2300      	movs	r3, #0
 8009266:	e03e      	b.n	80092e6 <sen5x_check_for_errors+0xba>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	2380      	movs	r3, #128	@ 0x80
 800926c:	039b      	lsls	r3, r3, #14
 800926e:	4013      	ands	r3, r2
 8009270:	d005      	beq.n	800927e <sen5x_check_for_errors+0x52>
    Debug("sen5x Fan speed out of range");
 8009272:	4a23      	ldr	r2, [pc, #140]	@ (8009300 <sen5x_check_for_errors+0xd4>)
 8009274:	4b21      	ldr	r3, [pc, #132]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 8009276:	0019      	movs	r1, r3
 8009278:	2003      	movs	r0, #3
 800927a:	f004 faf5 	bl	800d868 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	2380      	movs	r3, #128	@ 0x80
 8009282:	031b      	lsls	r3, r3, #12
 8009284:	4013      	ands	r3, r2
 8009286:	d005      	beq.n	8009294 <sen5x_check_for_errors+0x68>
    Debug("sen5x Fan cleaning active");
 8009288:	4a1e      	ldr	r2, [pc, #120]	@ (8009304 <sen5x_check_for_errors+0xd8>)
 800928a:	4b1c      	ldr	r3, [pc, #112]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 800928c:	0019      	movs	r1, r3
 800928e:	2003      	movs	r0, #3
 8009290:	f004 faea 	bl	800d868 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2280      	movs	r2, #128	@ 0x80
 8009298:	4013      	ands	r3, r2
 800929a:	d005      	beq.n	80092a8 <sen5x_check_for_errors+0x7c>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800929c:	4a1a      	ldr	r2, [pc, #104]	@ (8009308 <sen5x_check_for_errors+0xdc>)
 800929e:	4b17      	ldr	r3, [pc, #92]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 80092a0:	0019      	movs	r1, r3
 80092a2:	2003      	movs	r0, #3
 80092a4:	f004 fae0 	bl	800d868 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2240      	movs	r2, #64	@ 0x40
 80092ac:	4013      	ands	r3, r2
 80092ae:	d005      	beq.n	80092bc <sen5x_check_for_errors+0x90>
    Debug("sen5x RHT communication error");
 80092b0:	4a16      	ldr	r2, [pc, #88]	@ (800930c <sen5x_check_for_errors+0xe0>)
 80092b2:	4b12      	ldr	r3, [pc, #72]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 80092b4:	0019      	movs	r1, r3
 80092b6:	2003      	movs	r0, #3
 80092b8:	f004 fad6 	bl	800d868 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2220      	movs	r2, #32
 80092c0:	4013      	ands	r3, r2
 80092c2:	d005      	beq.n	80092d0 <sen5x_check_for_errors+0xa4>
    Debug("sen5x Laser failure");
 80092c4:	4a12      	ldr	r2, [pc, #72]	@ (8009310 <sen5x_check_for_errors+0xe4>)
 80092c6:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 80092c8:	0019      	movs	r1, r3
 80092ca:	2003      	movs	r0, #3
 80092cc:	f004 facc 	bl	800d868 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2210      	movs	r2, #16
 80092d4:	4013      	ands	r3, r2
 80092d6:	d005      	beq.n	80092e4 <sen5x_check_for_errors+0xb8>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 80092d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009314 <sen5x_check_for_errors+0xe8>)
 80092da:	4b08      	ldr	r3, [pc, #32]	@ (80092fc <sen5x_check_for_errors+0xd0>)
 80092dc:	0019      	movs	r1, r3
 80092de:	2003      	movs	r0, #3
 80092e0:	f004 fac2 	bl	800d868 <CreateLine>
  }
  return 1;
 80092e4:	2301      	movs	r3, #1
}
 80092e6:	0018      	movs	r0, r3
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b002      	add	sp, #8
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	08023a54 	.word	0x08023a54
 80092f4:	08023750 	.word	0x08023750
 80092f8:	08023a80 	.word	0x08023a80
 80092fc:	080236e8 	.word	0x080236e8
 8009300:	08023a98 	.word	0x08023a98
 8009304:	08023ab8 	.word	0x08023ab8
 8009308:	08023ad4 	.word	0x08023ad4
 800930c:	08023af8 	.word	0x08023af8
 8009310:	08023b18 	.word	0x08023b18
 8009314:	08023b2c 	.word	0x08023b2c

08009318 <set_light_on_state>:

void set_light_on_state(void) {
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
  PMsamplesState = LIGHT_OUT;
 800931c:	4b04      	ldr	r3, [pc, #16]	@ (8009330 <set_light_on_state+0x18>)
 800931e:	2201      	movs	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
  setsen5xReadTimer(0);
 8009322:	2000      	movs	r0, #0
 8009324:	f7ff fbc4 	bl	8008ab0 <setsen5xReadTimer>
}
 8009328:	46c0      	nop			@ (mov r8, r8)
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	46c0      	nop			@ (mov r8, r8)
 8009330:	20000081 	.word	0x20000081

08009334 <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 8009334:	b590      	push	{r4, r7, lr}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	0002      	movs	r2, r0
 800933c:	1dfb      	adds	r3, r7, #7
 800933e:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 8009340:	230f      	movs	r3, #15
 8009342:	18fb      	adds	r3, r7, r3
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 8009348:	1dfb      	adds	r3, r7, #7
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d103      	bne.n	8009358 <sen5x_statemachine+0x24>
    delayfactor =100; // if operated on USB read about every 30 seconds
 8009350:	1dfb      	adds	r3, r7, #7
 8009352:	2264      	movs	r2, #100	@ 0x64
 8009354:	701a      	strb	r2, [r3, #0]
 8009356:	e002      	b.n	800935e <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 8009358:	1dfb      	adds	r3, r7, #7
 800935a:	2201      	movs	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 800935e:	4b74      	ldr	r3, [pc, #464]	@ (8009530 <sen5x_statemachine+0x1fc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	0018      	movs	r0, r3
 8009364:	f004 fa2a 	bl	800d7bc <TimestampIsReached>
 8009368:	1e03      	subs	r3, r0, #0
 800936a:	d100      	bne.n	800936e <sen5x_statemachine+0x3a>
 800936c:	e0db      	b.n	8009526 <sen5x_statemachine+0x1f2>
    switch (PMsamplesState) {
 800936e:	4b71      	ldr	r3, [pc, #452]	@ (8009534 <sen5x_statemachine+0x200>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b05      	cmp	r3, #5
 8009374:	d900      	bls.n	8009378 <sen5x_statemachine+0x44>
 8009376:	e0d6      	b.n	8009526 <sen5x_statemachine+0x1f2>
 8009378:	009a      	lsls	r2, r3, #2
 800937a:	4b6f      	ldr	r3, [pc, #444]	@ (8009538 <sen5x_statemachine+0x204>)
 800937c:	18d3      	adds	r3, r2, r3
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009382:	4a6e      	ldr	r2, [pc, #440]	@ (800953c <sen5x_statemachine+0x208>)
 8009384:	4b6e      	ldr	r3, [pc, #440]	@ (8009540 <sen5x_statemachine+0x20c>)
 8009386:	0019      	movs	r1, r3
 8009388:	2001      	movs	r0, #1
 800938a:	f004 fa6d 	bl	800d868 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour a message
 800938e:	f004 feb7 	bl	800e100 <HAL_GetTick>
 8009392:	0004      	movs	r4, r0
 8009394:	1dfb      	adds	r3, r7, #7
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	0019      	movs	r1, r3
 800939a:	486a      	ldr	r0, [pc, #424]	@ (8009544 <sen5x_statemachine+0x210>)
 800939c:	f7f6 ff8c 	bl	80002b8 <__divsi3>
 80093a0:	0003      	movs	r3, r0
 80093a2:	18e2      	adds	r2, r4, r3
 80093a4:	4b62      	ldr	r3, [pc, #392]	@ (8009530 <sen5x_statemachine+0x1fc>)
 80093a6:	601a      	str	r2, [r3, #0]
      break;
 80093a8:	e0bd      	b.n	8009526 <sen5x_statemachine+0x1f2>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      sen5x_Power_On();
 80093aa:	f7ff fbd5 	bl	8008b58 <sen5x_Power_On>
      Debug("sen5x powered on, warming up for 30 sec.");
 80093ae:	4a66      	ldr	r2, [pc, #408]	@ (8009548 <sen5x_statemachine+0x214>)
 80093b0:	4b66      	ldr	r3, [pc, #408]	@ (800954c <sen5x_statemachine+0x218>)
 80093b2:	0019      	movs	r1, r3
 80093b4:	2003      	movs	r0, #3
 80093b6:	f004 fa57 	bl	800d868 <CreateLine>
      if (sen5x_lightup_measurement()) {
 80093ba:	f7ff fd2d 	bl	8008e18 <sen5x_lightup_measurement>
 80093be:	1e03      	subs	r3, r0, #0
 80093c0:	d005      	beq.n	80093ce <sen5x_statemachine+0x9a>
        Error("Error executing sen5x_lightup_measurement()");
 80093c2:	4a63      	ldr	r2, [pc, #396]	@ (8009550 <sen5x_statemachine+0x21c>)
 80093c4:	4b5e      	ldr	r3, [pc, #376]	@ (8009540 <sen5x_statemachine+0x20c>)
 80093c6:	0019      	movs	r1, r3
 80093c8:	2001      	movs	r0, #1
 80093ca:	f004 fa4d 	bl	800d868 <CreateLine>
      }
      PMsamplesState = CHECK_SEN5X;
 80093ce:	4b59      	ldr	r3, [pc, #356]	@ (8009534 <sen5x_statemachine+0x200>)
 80093d0:	2203      	movs	r2, #3
 80093d2:	701a      	strb	r2, [r3, #0]
      sen5xReadTimer = HAL_GetTick() + 228000; // about every 50 minutes with microphone enabled
 80093d4:	f004 fe94 	bl	800e100 <HAL_GetTick>
 80093d8:	0003      	movs	r3, r0
 80093da:	4a5e      	ldr	r2, [pc, #376]	@ (8009554 <sen5x_statemachine+0x220>)
 80093dc:	189a      	adds	r2, r3, r2
 80093de:	4b54      	ldr	r3, [pc, #336]	@ (8009530 <sen5x_statemachine+0x1fc>)
 80093e0:	601a      	str	r2, [r3, #0]
      break;
 80093e2:	e0a0      	b.n	8009526 <sen5x_statemachine+0x1f2>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 80093e4:	4b53      	ldr	r3, [pc, #332]	@ (8009534 <sen5x_statemachine+0x200>)
 80093e6:	2202      	movs	r2, #2
 80093e8:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 80093ea:	4b5b      	ldr	r3, [pc, #364]	@ (8009558 <sen5x_statemachine+0x224>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	d905      	bls.n	80093fe <sen5x_statemachine+0xca>
        PMsamplesState = S5X_DISABLED;
 80093f2:	4b50      	ldr	r3, [pc, #320]	@ (8009534 <sen5x_statemachine+0x200>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 80093f8:	f7ff fbce 	bl	8008b98 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 80093fc:	e092      	b.n	8009524 <sen5x_statemachine+0x1f0>
        if (sen5x_check_for_errors()) {
 80093fe:	f7ff ff15 	bl	800922c <sen5x_check_for_errors>
 8009402:	1e03      	subs	r3, r0, #0
 8009404:	d100      	bne.n	8009408 <sen5x_statemachine+0xd4>
 8009406:	e08d      	b.n	8009524 <sen5x_statemachine+0x1f0>
          if (sen5x_device_reset()) {
 8009408:	f000 fbfc 	bl	8009c04 <sen5x_device_reset>
 800940c:	1e03      	subs	r3, r0, #0
 800940e:	d006      	beq.n	800941e <sen5x_statemachine+0xea>
            Error("Error resetting sen5x");
 8009410:	4a52      	ldr	r2, [pc, #328]	@ (800955c <sen5x_statemachine+0x228>)
 8009412:	4b4b      	ldr	r3, [pc, #300]	@ (8009540 <sen5x_statemachine+0x20c>)
 8009414:	0019      	movs	r1, r3
 8009416:	2001      	movs	r0, #1
 8009418:	f004 fa26 	bl	800d868 <CreateLine>
 800941c:	e005      	b.n	800942a <sen5x_statemachine+0xf6>
            Info("sen5x reset executed");
 800941e:	4a50      	ldr	r2, [pc, #320]	@ (8009560 <sen5x_statemachine+0x22c>)
 8009420:	4b50      	ldr	r3, [pc, #320]	@ (8009564 <sen5x_statemachine+0x230>)
 8009422:	0019      	movs	r1, r3
 8009424:	2002      	movs	r0, #2
 8009426:	f004 fa1f 	bl	800d868 <CreateLine>
          sen5xErrors++;
 800942a:	4b4b      	ldr	r3, [pc, #300]	@ (8009558 <sen5x_statemachine+0x224>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b49      	ldr	r3, [pc, #292]	@ (8009558 <sen5x_statemachine+0x224>)
 8009434:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009436:	f004 fe63 	bl	800e100 <HAL_GetTick>
 800943a:	0003      	movs	r3, r0
 800943c:	3396      	adds	r3, #150	@ 0x96
 800943e:	001a      	movs	r2, r3
 8009440:	4b3b      	ldr	r3, [pc, #236]	@ (8009530 <sen5x_statemachine+0x1fc>)
 8009442:	601a      	str	r2, [r3, #0]
      break;
 8009444:	e06e      	b.n	8009524 <sen5x_statemachine+0x1f0>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8009446:	240f      	movs	r4, #15
 8009448:	193b      	adds	r3, r7, r4
 800944a:	0018      	movs	r0, r3
 800944c:	f000 f8f6 	bl	800963c <sen5x_read_data_ready>
      if (data_ready) {
 8009450:	193b      	adds	r3, r7, r4
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d026      	beq.n	80094a6 <sen5x_statemachine+0x172>
        if (sen5x_measurement()) {
 8009458:	f7ff fd8a 	bl	8008f70 <sen5x_measurement>
 800945c:	1e03      	subs	r3, r0, #0
 800945e:	d005      	beq.n	800946c <sen5x_statemachine+0x138>
          Error("Error executing sen5x_measurement()");
 8009460:	4a41      	ldr	r2, [pc, #260]	@ (8009568 <sen5x_statemachine+0x234>)
 8009462:	4b37      	ldr	r3, [pc, #220]	@ (8009540 <sen5x_statemachine+0x20c>)
 8009464:	0019      	movs	r1, r3
 8009466:	2001      	movs	r0, #1
 8009468:	f004 f9fe 	bl	800d868 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 800946c:	4b3f      	ldr	r3, [pc, #252]	@ (800956c <sen5x_statemachine+0x238>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d012      	beq.n	800949a <sen5x_statemachine+0x166>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009474:	f7fd f9cc 	bl	8006810 <RTC_GetWeekday>
 8009478:	0003      	movs	r3, r0
 800947a:	2b01      	cmp	r3, #1
 800947c:	d10a      	bne.n	8009494 <sen5x_statemachine+0x160>
 800947e:	4b3c      	ldr	r3, [pc, #240]	@ (8009570 <sen5x_statemachine+0x23c>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	2201      	movs	r2, #1
 8009484:	4053      	eors	r3, r2
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <sen5x_statemachine+0x160>
            PMsamplesState = CLEAN_FAN;
 800948c:	4b29      	ldr	r3, [pc, #164]	@ (8009534 <sen5x_statemachine+0x200>)
 800948e:	2204      	movs	r2, #4
 8009490:	701a      	strb	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <sen5x_statemachine+0x166>
          }
          else {
            PMsamplesState = SAMPLES_TAKEN;
 8009494:	4b27      	ldr	r3, [pc, #156]	@ (8009534 <sen5x_statemachine+0x200>)
 8009496:	2205      	movs	r2, #5
 8009498:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 800949a:	4b34      	ldr	r3, [pc, #208]	@ (800956c <sen5x_statemachine+0x238>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	4b32      	ldr	r3, [pc, #200]	@ (800956c <sen5x_statemachine+0x238>)
 80094a4:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 80094a6:	f004 fe2b 	bl	800e100 <HAL_GetTick>
 80094aa:	0003      	movs	r3, r0
 80094ac:	22fa      	movs	r2, #250	@ 0xfa
 80094ae:	0092      	lsls	r2, r2, #2
 80094b0:	189a      	adds	r2, r3, r2
 80094b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009530 <sen5x_statemachine+0x1fc>)
 80094b4:	601a      	str	r2, [r3, #0]
      break;
 80094b6:	e036      	b.n	8009526 <sen5x_statemachine+0x1f2>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 80094b8:	f000 f9a6 	bl	8009808 <sen5x_start_fan_cleaning>
      Info("executing fan cleaning");
 80094bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009574 <sen5x_statemachine+0x240>)
 80094be:	4b29      	ldr	r3, [pc, #164]	@ (8009564 <sen5x_statemachine+0x230>)
 80094c0:	0019      	movs	r1, r3
 80094c2:	2002      	movs	r0, #2
 80094c4:	f004 f9d0 	bl	800d868 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 11000;
 80094c8:	f004 fe1a 	bl	800e100 <HAL_GetTick>
 80094cc:	0003      	movs	r3, r0
 80094ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009578 <sen5x_statemachine+0x244>)
 80094d0:	189a      	adds	r2, r3, r2
 80094d2:	4b17      	ldr	r3, [pc, #92]	@ (8009530 <sen5x_statemachine+0x1fc>)
 80094d4:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 80094d6:	4b26      	ldr	r3, [pc, #152]	@ (8009570 <sen5x_statemachine+0x23c>)
 80094d8:	2201      	movs	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
      PMsamplesState = SAMPLES_TAKEN;
 80094dc:	4b15      	ldr	r3, [pc, #84]	@ (8009534 <sen5x_statemachine+0x200>)
 80094de:	2205      	movs	r2, #5
 80094e0:	701a      	strb	r2, [r3, #0]
      break;
 80094e2:	e020      	b.n	8009526 <sen5x_statemachine+0x1f2>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 80094e4:	4b21      	ldr	r3, [pc, #132]	@ (800956c <sen5x_statemachine+0x238>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 80094ea:	f7ff fcb9 	bl	8008e60 <sen5x_extinguish_measurement>
 80094ee:	1e03      	subs	r3, r0, #0
 80094f0:	d005      	beq.n	80094fe <sen5x_statemachine+0x1ca>
        Error("Error executing sen5x_extinguish_measurement()");
 80094f2:	4a22      	ldr	r2, [pc, #136]	@ (800957c <sen5x_statemachine+0x248>)
 80094f4:	4b12      	ldr	r3, [pc, #72]	@ (8009540 <sen5x_statemachine+0x20c>)
 80094f6:	0019      	movs	r1, r3
 80094f8:	2001      	movs	r0, #1
 80094fa:	f004 f9b5 	bl	800d868 <CreateLine>
      }
      sen5x_Power_Off();
 80094fe:	f7ff fb4b 	bl	8008b98 <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8009502:	f004 fdfd 	bl	800e100 <HAL_GetTick>
 8009506:	0004      	movs	r4, r0
 8009508:	1dfb      	adds	r3, r7, #7
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	0019      	movs	r1, r3
 800950e:	480d      	ldr	r0, [pc, #52]	@ (8009544 <sen5x_statemachine+0x210>)
 8009510:	f7f6 fed2 	bl	80002b8 <__divsi3>
 8009514:	0003      	movs	r3, r0
 8009516:	18e2      	adds	r2, r4, r3
 8009518:	4b05      	ldr	r3, [pc, #20]	@ (8009530 <sen5x_statemachine+0x1fc>)
 800951a:	601a      	str	r2, [r3, #0]
      PMsamplesState = LIGHT_OUT;
 800951c:	4b05      	ldr	r3, [pc, #20]	@ (8009534 <sen5x_statemachine+0x200>)
 800951e:	2201      	movs	r2, #1
 8009520:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009522:	e000      	b.n	8009526 <sen5x_statemachine+0x1f2>
      break;
 8009524:	46c0      	nop			@ (mov r8, r8)
}
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	46bd      	mov	sp, r7
 800952a:	b005      	add	sp, #20
 800952c:	bd90      	pop	{r4, r7, pc}
 800952e:	46c0      	nop			@ (mov r8, r8)
 8009530:	200011c8 	.word	0x200011c8
 8009534:	20000081 	.word	0x20000081
 8009538:	080244c8 	.word	0x080244c8
 800953c:	08023b68 	.word	0x08023b68
 8009540:	08023750 	.word	0x08023750
 8009544:	002fefd8 	.word	0x002fefd8
 8009548:	08023b98 	.word	0x08023b98
 800954c:	080236e8 	.word	0x080236e8
 8009550:	08023bc4 	.word	0x08023bc4
 8009554:	00037aa0 	.word	0x00037aa0
 8009558:	200011cd 	.word	0x200011cd
 800955c:	08023bf0 	.word	0x08023bf0
 8009560:	08023c08 	.word	0x08023c08
 8009564:	080238a4 	.word	0x080238a4
 8009568:	08023c20 	.word	0x08023c20
 800956c:	200011cc 	.word	0x200011cc
 8009570:	200011c4 	.word	0x200011c4
 8009574:	08023c44 	.word	0x08023c44
 8009578:	00002af8 	.word	0x00002af8
 800957c:	08023c5c 	.word	0x08023c5c

08009580 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009580:	b590      	push	{r4, r7, lr}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009586:	1dbb      	adds	r3, r7, #6
 8009588:	2200      	movs	r2, #0
 800958a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800958c:	1dbc      	adds	r4, r7, #6
 800958e:	1dbb      	adds	r3, r7, #6
 8009590:	8819      	ldrh	r1, [r3, #0]
 8009592:	003b      	movs	r3, r7
 8009594:	2221      	movs	r2, #33	@ 0x21
 8009596:	0018      	movs	r0, r3
 8009598:	f001 fb28 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 800959c:	0003      	movs	r3, r0
 800959e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80095a0:	1d3c      	adds	r4, r7, #4
 80095a2:	1dbb      	adds	r3, r7, #6
 80095a4:	881a      	ldrh	r2, [r3, #0]
 80095a6:	003b      	movs	r3, r7
 80095a8:	0019      	movs	r1, r3
 80095aa:	2069      	movs	r0, #105	@ 0x69
 80095ac:	f001 fba2 	bl	800acf4 <sensirion_i2c_write_data>
 80095b0:	0003      	movs	r3, r0
 80095b2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80095b4:	1d3b      	adds	r3, r7, #4
 80095b6:	2200      	movs	r2, #0
 80095b8:	5e9b      	ldrsh	r3, [r3, r2]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <sen5x_start_measurement+0x46>
        return error;
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	2200      	movs	r2, #0
 80095c2:	5e9b      	ldrsh	r3, [r3, r2]
 80095c4:	e004      	b.n	80095d0 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 80095c6:	4b04      	ldr	r3, [pc, #16]	@ (80095d8 <sen5x_start_measurement+0x58>)
 80095c8:	0018      	movs	r0, r3
 80095ca:	f7ff fe0f 	bl	80091ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b003      	add	sp, #12
 80095d6:	bd90      	pop	{r4, r7, pc}
 80095d8:	0000c350 	.word	0x0000c350

080095dc <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 80095dc:	b590      	push	{r4, r7, lr}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80095e2:	1dbb      	adds	r3, r7, #6
 80095e4:	2200      	movs	r2, #0
 80095e6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 80095e8:	1dbc      	adds	r4, r7, #6
 80095ea:	2382      	movs	r3, #130	@ 0x82
 80095ec:	005a      	lsls	r2, r3, #1
 80095ee:	1dbb      	adds	r3, r7, #6
 80095f0:	8819      	ldrh	r1, [r3, #0]
 80095f2:	003b      	movs	r3, r7
 80095f4:	0018      	movs	r0, r3
 80095f6:	f001 faf9 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 80095fa:	0003      	movs	r3, r0
 80095fc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80095fe:	1d3c      	adds	r4, r7, #4
 8009600:	1dbb      	adds	r3, r7, #6
 8009602:	881a      	ldrh	r2, [r3, #0]
 8009604:	003b      	movs	r3, r7
 8009606:	0019      	movs	r1, r3
 8009608:	2069      	movs	r0, #105	@ 0x69
 800960a:	f001 fb73 	bl	800acf4 <sensirion_i2c_write_data>
 800960e:	0003      	movs	r3, r0
 8009610:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009612:	1d3b      	adds	r3, r7, #4
 8009614:	2200      	movs	r2, #0
 8009616:	5e9b      	ldrsh	r3, [r3, r2]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <sen5x_stop_measurement+0x48>
        return error;
 800961c:	1d3b      	adds	r3, r7, #4
 800961e:	2200      	movs	r2, #0
 8009620:	5e9b      	ldrsh	r3, [r3, r2]
 8009622:	e004      	b.n	800962e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <sen5x_stop_measurement+0x5c>)
 8009626:	0018      	movs	r0, r3
 8009628:	f7ff fde0 	bl	80091ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800962c:	2300      	movs	r3, #0
}
 800962e:	0018      	movs	r0, r3
 8009630:	46bd      	mov	sp, r7
 8009632:	b003      	add	sp, #12
 8009634:	bd90      	pop	{r4, r7, pc}
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	00030d40 	.word	0x00030d40

0800963c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009644:	250e      	movs	r5, #14
 8009646:	197b      	adds	r3, r7, r5
 8009648:	2200      	movs	r2, #0
 800964a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800964c:	197c      	adds	r4, r7, r5
 800964e:	4a22      	ldr	r2, [pc, #136]	@ (80096d8 <sen5x_read_data_ready+0x9c>)
 8009650:	197b      	adds	r3, r7, r5
 8009652:	8819      	ldrh	r1, [r3, #0]
 8009654:	2308      	movs	r3, #8
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	0018      	movs	r0, r3
 800965a:	f001 fac7 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 800965e:	0003      	movs	r3, r0
 8009660:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009662:	260c      	movs	r6, #12
 8009664:	19bc      	adds	r4, r7, r6
 8009666:	197b      	adds	r3, r7, r5
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	2308      	movs	r3, #8
 800966c:	18fb      	adds	r3, r7, r3
 800966e:	0019      	movs	r1, r3
 8009670:	2069      	movs	r0, #105	@ 0x69
 8009672:	f001 fb3f 	bl	800acf4 <sensirion_i2c_write_data>
 8009676:	0003      	movs	r3, r0
 8009678:	8023      	strh	r3, [r4, #0]
    if (error) {
 800967a:	19bb      	adds	r3, r7, r6
 800967c:	2200      	movs	r2, #0
 800967e:	5e9b      	ldrsh	r3, [r3, r2]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <sen5x_read_data_ready+0x50>
        return error;
 8009684:	19bb      	adds	r3, r7, r6
 8009686:	2200      	movs	r2, #0
 8009688:	5e9b      	ldrsh	r3, [r3, r2]
 800968a:	e020      	b.n	80096ce <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800968c:	4b13      	ldr	r3, [pc, #76]	@ (80096dc <sen5x_read_data_ready+0xa0>)
 800968e:	0018      	movs	r0, r3
 8009690:	f7ff fdac 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009694:	250c      	movs	r5, #12
 8009696:	197c      	adds	r4, r7, r5
 8009698:	2308      	movs	r3, #8
 800969a:	18fb      	adds	r3, r7, r3
 800969c:	2202      	movs	r2, #2
 800969e:	0019      	movs	r1, r3
 80096a0:	2069      	movs	r0, #105	@ 0x69
 80096a2:	f001 fb3f 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 80096a6:	0003      	movs	r3, r0
 80096a8:	8023      	strh	r3, [r4, #0]
    if (error) {
 80096aa:	197b      	adds	r3, r7, r5
 80096ac:	2200      	movs	r2, #0
 80096ae:	5e9b      	ldrsh	r3, [r3, r2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <sen5x_read_data_ready+0x80>
        return error;
 80096b4:	197b      	adds	r3, r7, r5
 80096b6:	2200      	movs	r2, #0
 80096b8:	5e9b      	ldrsh	r3, [r3, r2]
 80096ba:	e008      	b.n	80096ce <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 80096bc:	2308      	movs	r3, #8
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	785b      	ldrb	r3, [r3, #1]
 80096c2:	1e5a      	subs	r2, r3, #1
 80096c4:	4193      	sbcs	r3, r2
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	0018      	movs	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	b005      	add	sp, #20
 80096d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	00000202 	.word	0x00000202
 80096dc:	00004e20 	.word	0x00004e20

080096e0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 80096e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e2:	b08d      	sub	sp, #52	@ 0x34
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 80096ee:	252e      	movs	r5, #46	@ 0x2e
 80096f0:	197b      	adds	r3, r7, r5
 80096f2:	2200      	movs	r2, #0
 80096f4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 80096f6:	197c      	adds	r4, r7, r5
 80096f8:	23f1      	movs	r3, #241	@ 0xf1
 80096fa:	009a      	lsls	r2, r3, #2
 80096fc:	197b      	adds	r3, r7, r5
 80096fe:	8819      	ldrh	r1, [r3, #0]
 8009700:	2314      	movs	r3, #20
 8009702:	18fb      	adds	r3, r7, r3
 8009704:	0018      	movs	r0, r3
 8009706:	f001 fa71 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 800970a:	0003      	movs	r3, r0
 800970c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800970e:	262c      	movs	r6, #44	@ 0x2c
 8009710:	19bc      	adds	r4, r7, r6
 8009712:	197b      	adds	r3, r7, r5
 8009714:	881a      	ldrh	r2, [r3, #0]
 8009716:	2314      	movs	r3, #20
 8009718:	18fb      	adds	r3, r7, r3
 800971a:	0019      	movs	r1, r3
 800971c:	2069      	movs	r0, #105	@ 0x69
 800971e:	f001 fae9 	bl	800acf4 <sensirion_i2c_write_data>
 8009722:	0003      	movs	r3, r0
 8009724:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009726:	19bb      	adds	r3, r7, r6
 8009728:	2200      	movs	r2, #0
 800972a:	5e9b      	ldrsh	r3, [r3, r2]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d003      	beq.n	8009738 <sen5x_read_measured_values+0x58>
        return error;
 8009730:	19bb      	adds	r3, r7, r6
 8009732:	2200      	movs	r2, #0
 8009734:	5e9b      	ldrsh	r3, [r3, r2]
 8009736:	e060      	b.n	80097fa <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009738:	4b32      	ldr	r3, [pc, #200]	@ (8009804 <sen5x_read_measured_values+0x124>)
 800973a:	0018      	movs	r0, r3
 800973c:	f7ff fd56 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009740:	252c      	movs	r5, #44	@ 0x2c
 8009742:	197c      	adds	r4, r7, r5
 8009744:	2314      	movs	r3, #20
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	2210      	movs	r2, #16
 800974a:	0019      	movs	r1, r3
 800974c:	2069      	movs	r0, #105	@ 0x69
 800974e:	f001 fae9 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 8009752:	0003      	movs	r3, r0
 8009754:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009756:	197b      	adds	r3, r7, r5
 8009758:	2200      	movs	r2, #0
 800975a:	5e9b      	ldrsh	r3, [r3, r2]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d003      	beq.n	8009768 <sen5x_read_measured_values+0x88>
        return error;
 8009760:	197b      	adds	r3, r7, r5
 8009762:	2200      	movs	r2, #0
 8009764:	5e9b      	ldrsh	r3, [r3, r2]
 8009766:	e048      	b.n	80097fa <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009768:	2414      	movs	r4, #20
 800976a:	193b      	adds	r3, r7, r4
 800976c:	0018      	movs	r0, r3
 800976e:	f000 fa79 	bl	8009c64 <sensirion_common_bytes_to_uint16_t>
 8009772:	0003      	movs	r3, r0
 8009774:	001a      	movs	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800977a:	193b      	adds	r3, r7, r4
 800977c:	3302      	adds	r3, #2
 800977e:	0018      	movs	r0, r3
 8009780:	f000 fa70 	bl	8009c64 <sensirion_common_bytes_to_uint16_t>
 8009784:	0003      	movs	r3, r0
 8009786:	001a      	movs	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800978c:	193b      	adds	r3, r7, r4
 800978e:	3304      	adds	r3, #4
 8009790:	0018      	movs	r0, r3
 8009792:	f000 fa67 	bl	8009c64 <sensirion_common_bytes_to_uint16_t>
 8009796:	0003      	movs	r3, r0
 8009798:	001a      	movs	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800979e:	193b      	adds	r3, r7, r4
 80097a0:	3306      	adds	r3, #6
 80097a2:	0018      	movs	r0, r3
 80097a4:	f000 fa5e 	bl	8009c64 <sensirion_common_bytes_to_uint16_t>
 80097a8:	0003      	movs	r3, r0
 80097aa:	001a      	movs	r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80097b0:	193b      	adds	r3, r7, r4
 80097b2:	3308      	adds	r3, #8
 80097b4:	0018      	movs	r0, r3
 80097b6:	f000 fa81 	bl	8009cbc <sensirion_common_bytes_to_int16_t>
 80097ba:	0003      	movs	r3, r0
 80097bc:	001a      	movs	r2, r3
 80097be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097c0:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80097c2:	193b      	adds	r3, r7, r4
 80097c4:	330a      	adds	r3, #10
 80097c6:	0018      	movs	r0, r3
 80097c8:	f000 fa78 	bl	8009cbc <sensirion_common_bytes_to_int16_t>
 80097cc:	0003      	movs	r3, r0
 80097ce:	001a      	movs	r2, r3
 80097d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 80097d4:	193b      	adds	r3, r7, r4
 80097d6:	330c      	adds	r3, #12
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 fa6f 	bl	8009cbc <sensirion_common_bytes_to_int16_t>
 80097de:	0003      	movs	r3, r0
 80097e0:	001a      	movs	r2, r3
 80097e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097e4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 80097e6:	193b      	adds	r3, r7, r4
 80097e8:	330e      	adds	r3, #14
 80097ea:	0018      	movs	r0, r3
 80097ec:	f000 fa66 	bl	8009cbc <sensirion_common_bytes_to_int16_t>
 80097f0:	0003      	movs	r3, r0
 80097f2:	001a      	movs	r2, r3
 80097f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097f6:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b00d      	add	sp, #52	@ 0x34
 8009800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009802:	46c0      	nop			@ (mov r8, r8)
 8009804:	00004e20 	.word	0x00004e20

08009808 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009808:	b590      	push	{r4, r7, lr}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800980e:	1dbb      	adds	r3, r7, #6
 8009810:	2200      	movs	r2, #0
 8009812:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009814:	1dbc      	adds	r4, r7, #6
 8009816:	4a12      	ldr	r2, [pc, #72]	@ (8009860 <sen5x_start_fan_cleaning+0x58>)
 8009818:	1dbb      	adds	r3, r7, #6
 800981a:	8819      	ldrh	r1, [r3, #0]
 800981c:	003b      	movs	r3, r7
 800981e:	0018      	movs	r0, r3
 8009820:	f001 f9e4 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009824:	0003      	movs	r3, r0
 8009826:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009828:	1d3c      	adds	r4, r7, #4
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	881a      	ldrh	r2, [r3, #0]
 800982e:	003b      	movs	r3, r7
 8009830:	0019      	movs	r1, r3
 8009832:	2069      	movs	r0, #105	@ 0x69
 8009834:	f001 fa5e 	bl	800acf4 <sensirion_i2c_write_data>
 8009838:	0003      	movs	r3, r0
 800983a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800983c:	1d3b      	adds	r3, r7, #4
 800983e:	2200      	movs	r2, #0
 8009840:	5e9b      	ldrsh	r3, [r3, r2]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d003      	beq.n	800984e <sen5x_start_fan_cleaning+0x46>
        return error;
 8009846:	1d3b      	adds	r3, r7, #4
 8009848:	2200      	movs	r2, #0
 800984a:	5e9b      	ldrsh	r3, [r3, r2]
 800984c:	e004      	b.n	8009858 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800984e:	4b05      	ldr	r3, [pc, #20]	@ (8009864 <sen5x_start_fan_cleaning+0x5c>)
 8009850:	0018      	movs	r0, r3
 8009852:	f7ff fccb 	bl	80091ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009856:	2300      	movs	r3, #0
}
 8009858:	0018      	movs	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	b003      	add	sp, #12
 800985e:	bd90      	pop	{r4, r7, pc}
 8009860:	00005607 	.word	0x00005607
 8009864:	00004e20 	.word	0x00004e20

08009868 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	0004      	movs	r4, r0
 8009870:	0008      	movs	r0, r1
 8009872:	0011      	movs	r1, r2
 8009874:	1dbb      	adds	r3, r7, #6
 8009876:	1c22      	adds	r2, r4, #0
 8009878:	801a      	strh	r2, [r3, #0]
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	1c02      	adds	r2, r0, #0
 800987e:	801a      	strh	r2, [r3, #0]
 8009880:	1cbb      	adds	r3, r7, #2
 8009882:	1c0a      	adds	r2, r1, #0
 8009884:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009886:	2516      	movs	r5, #22
 8009888:	197b      	adds	r3, r7, r5
 800988a:	2200      	movs	r2, #0
 800988c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800988e:	197c      	adds	r4, r7, r5
 8009890:	4a25      	ldr	r2, [pc, #148]	@ (8009928 <sen5x_set_temperature_offset_parameters+0xc0>)
 8009892:	197b      	adds	r3, r7, r5
 8009894:	8819      	ldrh	r1, [r3, #0]
 8009896:	2608      	movs	r6, #8
 8009898:	19bb      	adds	r3, r7, r6
 800989a:	0018      	movs	r0, r3
 800989c:	f001 f9a6 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 80098a0:	0003      	movs	r3, r0
 80098a2:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 80098a4:	197c      	adds	r4, r7, r5
 80098a6:	1dbb      	adds	r3, r7, #6
 80098a8:	2200      	movs	r2, #0
 80098aa:	5e9a      	ldrsh	r2, [r3, r2]
 80098ac:	197b      	adds	r3, r7, r5
 80098ae:	8819      	ldrh	r1, [r3, #0]
 80098b0:	19bb      	adds	r3, r7, r6
 80098b2:	0018      	movs	r0, r3
 80098b4:	f001 fa05 	bl	800acc2 <sensirion_i2c_add_int16_t_to_buffer>
 80098b8:	0003      	movs	r3, r0
 80098ba:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 80098bc:	197c      	adds	r4, r7, r5
 80098be:	1d3b      	adds	r3, r7, #4
 80098c0:	2200      	movs	r2, #0
 80098c2:	5e9a      	ldrsh	r2, [r3, r2]
 80098c4:	197b      	adds	r3, r7, r5
 80098c6:	8819      	ldrh	r1, [r3, #0]
 80098c8:	19bb      	adds	r3, r7, r6
 80098ca:	0018      	movs	r0, r3
 80098cc:	f001 f9f9 	bl	800acc2 <sensirion_i2c_add_int16_t_to_buffer>
 80098d0:	0003      	movs	r3, r0
 80098d2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 80098d4:	197c      	adds	r4, r7, r5
 80098d6:	1cbb      	adds	r3, r7, #2
 80098d8:	881a      	ldrh	r2, [r3, #0]
 80098da:	197b      	adds	r3, r7, r5
 80098dc:	8819      	ldrh	r1, [r3, #0]
 80098de:	19bb      	adds	r3, r7, r6
 80098e0:	0018      	movs	r0, r3
 80098e2:	f001 f9af 	bl	800ac44 <sensirion_i2c_add_uint16_t_to_buffer>
 80098e6:	0003      	movs	r3, r0
 80098e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098ea:	2214      	movs	r2, #20
 80098ec:	18bc      	adds	r4, r7, r2
 80098ee:	197b      	adds	r3, r7, r5
 80098f0:	881a      	ldrh	r2, [r3, #0]
 80098f2:	19bb      	adds	r3, r7, r6
 80098f4:	0019      	movs	r1, r3
 80098f6:	2069      	movs	r0, #105	@ 0x69
 80098f8:	f001 f9fc 	bl	800acf4 <sensirion_i2c_write_data>
 80098fc:	0003      	movs	r3, r0
 80098fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009900:	2214      	movs	r2, #20
 8009902:	18bb      	adds	r3, r7, r2
 8009904:	2100      	movs	r1, #0
 8009906:	5e5b      	ldrsh	r3, [r3, r1]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800990c:	18bb      	adds	r3, r7, r2
 800990e:	2200      	movs	r2, #0
 8009910:	5e9b      	ldrsh	r3, [r3, r2]
 8009912:	e004      	b.n	800991e <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <sen5x_set_temperature_offset_parameters+0xc4>)
 8009916:	0018      	movs	r0, r3
 8009918:	f7ff fc68 	bl	80091ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800991c:	2300      	movs	r3, #0
}
 800991e:	0018      	movs	r0, r3
 8009920:	46bd      	mov	sp, r7
 8009922:	b007      	add	sp, #28
 8009924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009926:	46c0      	nop			@ (mov r8, r8)
 8009928:	000060b2 	.word	0x000060b2
 800992c:	00004e20 	.word	0x00004e20

08009930 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009932:	b091      	sub	sp, #68	@ 0x44
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	000a      	movs	r2, r1
 800993a:	1cfb      	adds	r3, r7, #3
 800993c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800993e:	253e      	movs	r5, #62	@ 0x3e
 8009940:	197b      	adds	r3, r7, r5
 8009942:	2200      	movs	r2, #0
 8009944:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009946:	197c      	adds	r4, r7, r5
 8009948:	4a22      	ldr	r2, [pc, #136]	@ (80099d4 <sen5x_get_product_name+0xa4>)
 800994a:	197b      	adds	r3, r7, r5
 800994c:	8819      	ldrh	r1, [r3, #0]
 800994e:	230c      	movs	r3, #12
 8009950:	18fb      	adds	r3, r7, r3
 8009952:	0018      	movs	r0, r3
 8009954:	f001 f94a 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009958:	0003      	movs	r3, r0
 800995a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800995c:	263c      	movs	r6, #60	@ 0x3c
 800995e:	19bc      	adds	r4, r7, r6
 8009960:	197b      	adds	r3, r7, r5
 8009962:	881a      	ldrh	r2, [r3, #0]
 8009964:	230c      	movs	r3, #12
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	0019      	movs	r1, r3
 800996a:	2069      	movs	r0, #105	@ 0x69
 800996c:	f001 f9c2 	bl	800acf4 <sensirion_i2c_write_data>
 8009970:	0003      	movs	r3, r0
 8009972:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009974:	19bb      	adds	r3, r7, r6
 8009976:	2200      	movs	r2, #0
 8009978:	5e9b      	ldrsh	r3, [r3, r2]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <sen5x_get_product_name+0x56>
        return error;
 800997e:	19bb      	adds	r3, r7, r6
 8009980:	2200      	movs	r2, #0
 8009982:	5e9b      	ldrsh	r3, [r3, r2]
 8009984:	e021      	b.n	80099ca <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009986:	4b14      	ldr	r3, [pc, #80]	@ (80099d8 <sen5x_get_product_name+0xa8>)
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff fc2f 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800998e:	253c      	movs	r5, #60	@ 0x3c
 8009990:	197c      	adds	r4, r7, r5
 8009992:	230c      	movs	r3, #12
 8009994:	18fb      	adds	r3, r7, r3
 8009996:	2220      	movs	r2, #32
 8009998:	0019      	movs	r1, r3
 800999a:	2069      	movs	r0, #105	@ 0x69
 800999c:	f001 f9c2 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 80099a0:	0003      	movs	r3, r0
 80099a2:	8023      	strh	r3, [r4, #0]
    if (error) {
 80099a4:	197b      	adds	r3, r7, r5
 80099a6:	2200      	movs	r2, #0
 80099a8:	5e9b      	ldrsh	r3, [r3, r2]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <sen5x_get_product_name+0x86>
        return error;
 80099ae:	197b      	adds	r3, r7, r5
 80099b0:	2200      	movs	r2, #0
 80099b2:	5e9b      	ldrsh	r3, [r3, r2]
 80099b4:	e009      	b.n	80099ca <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 80099b6:	1cfb      	adds	r3, r7, #3
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	230c      	movs	r3, #12
 80099c0:	18fb      	adds	r3, r7, r3
 80099c2:	0018      	movs	r0, r3
 80099c4:	f000 f988 	bl	8009cd8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	0018      	movs	r0, r3
 80099cc:	46bd      	mov	sp, r7
 80099ce:	b011      	add	sp, #68	@ 0x44
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	46c0      	nop			@ (mov r8, r8)
 80099d4:	0000d014 	.word	0x0000d014
 80099d8:	0000c350 	.word	0x0000c350

080099dc <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b091      	sub	sp, #68	@ 0x44
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	000a      	movs	r2, r1
 80099e6:	1cfb      	adds	r3, r7, #3
 80099e8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 80099ea:	253e      	movs	r5, #62	@ 0x3e
 80099ec:	197b      	adds	r3, r7, r5
 80099ee:	2200      	movs	r2, #0
 80099f0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 80099f2:	197c      	adds	r4, r7, r5
 80099f4:	4a22      	ldr	r2, [pc, #136]	@ (8009a80 <sen5x_get_serial_number+0xa4>)
 80099f6:	197b      	adds	r3, r7, r5
 80099f8:	8819      	ldrh	r1, [r3, #0]
 80099fa:	230c      	movs	r3, #12
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	0018      	movs	r0, r3
 8009a00:	f001 f8f4 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009a04:	0003      	movs	r3, r0
 8009a06:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a08:	263c      	movs	r6, #60	@ 0x3c
 8009a0a:	19bc      	adds	r4, r7, r6
 8009a0c:	197b      	adds	r3, r7, r5
 8009a0e:	881a      	ldrh	r2, [r3, #0]
 8009a10:	230c      	movs	r3, #12
 8009a12:	18fb      	adds	r3, r7, r3
 8009a14:	0019      	movs	r1, r3
 8009a16:	2069      	movs	r0, #105	@ 0x69
 8009a18:	f001 f96c 	bl	800acf4 <sensirion_i2c_write_data>
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a20:	19bb      	adds	r3, r7, r6
 8009a22:	2200      	movs	r2, #0
 8009a24:	5e9b      	ldrsh	r3, [r3, r2]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <sen5x_get_serial_number+0x56>
        return error;
 8009a2a:	19bb      	adds	r3, r7, r6
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	5e9b      	ldrsh	r3, [r3, r2]
 8009a30:	e021      	b.n	8009a76 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <sen5x_get_serial_number+0xa8>)
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7ff fbd9 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009a3a:	253c      	movs	r5, #60	@ 0x3c
 8009a3c:	197c      	adds	r4, r7, r5
 8009a3e:	230c      	movs	r3, #12
 8009a40:	18fb      	adds	r3, r7, r3
 8009a42:	2220      	movs	r2, #32
 8009a44:	0019      	movs	r1, r3
 8009a46:	2069      	movs	r0, #105	@ 0x69
 8009a48:	f001 f96c 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 8009a4c:	0003      	movs	r3, r0
 8009a4e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a50:	197b      	adds	r3, r7, r5
 8009a52:	2200      	movs	r2, #0
 8009a54:	5e9b      	ldrsh	r3, [r3, r2]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <sen5x_get_serial_number+0x86>
        return error;
 8009a5a:	197b      	adds	r3, r7, r5
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	5e9b      	ldrsh	r3, [r3, r2]
 8009a60:	e009      	b.n	8009a76 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009a62:	1cfb      	adds	r3, r7, #3
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	18fb      	adds	r3, r7, r3
 8009a6e:	0018      	movs	r0, r3
 8009a70:	f000 f932 	bl	8009cd8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	0018      	movs	r0, r3
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	b011      	add	sp, #68	@ 0x44
 8009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7e:	46c0      	nop			@ (mov r8, r8)
 8009a80:	0000d033 	.word	0x0000d033
 8009a84:	0000c350 	.word	0x0000c350

08009a88 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a8a:	b089      	sub	sp, #36	@ 0x24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009a96:	251e      	movs	r5, #30
 8009a98:	197b      	adds	r3, r7, r5
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009a9e:	197c      	adds	r4, r7, r5
 8009aa0:	23d1      	movs	r3, #209	@ 0xd1
 8009aa2:	021a      	lsls	r2, r3, #8
 8009aa4:	197b      	adds	r3, r7, r5
 8009aa6:	8819      	ldrh	r1, [r3, #0]
 8009aa8:	2310      	movs	r3, #16
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	0018      	movs	r0, r3
 8009aae:	f001 f89d 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009ab2:	0003      	movs	r3, r0
 8009ab4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009ab6:	261c      	movs	r6, #28
 8009ab8:	19bc      	adds	r4, r7, r6
 8009aba:	197b      	adds	r3, r7, r5
 8009abc:	881a      	ldrh	r2, [r3, #0]
 8009abe:	2310      	movs	r3, #16
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	0019      	movs	r1, r3
 8009ac4:	2069      	movs	r0, #105	@ 0x69
 8009ac6:	f001 f915 	bl	800acf4 <sensirion_i2c_write_data>
 8009aca:	0003      	movs	r3, r0
 8009acc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ace:	19bb      	adds	r3, r7, r6
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <sen5x_get_version+0x58>
        return error;
 8009ad8:	19bb      	adds	r3, r7, r6
 8009ada:	2200      	movs	r2, #0
 8009adc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ade:	e038      	b.n	8009b52 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8009b5c <sen5x_get_version+0xd4>)
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f7ff fb82 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009ae8:	251c      	movs	r5, #28
 8009aea:	197c      	adds	r4, r7, r5
 8009aec:	2310      	movs	r3, #16
 8009aee:	18fb      	adds	r3, r7, r3
 8009af0:	2208      	movs	r2, #8
 8009af2:	0019      	movs	r1, r3
 8009af4:	2069      	movs	r0, #105	@ 0x69
 8009af6:	f001 f915 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 8009afa:	0003      	movs	r3, r0
 8009afc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009afe:	197b      	adds	r3, r7, r5
 8009b00:	2200      	movs	r2, #0
 8009b02:	5e9b      	ldrsh	r3, [r3, r2]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <sen5x_get_version+0x88>
        return error;
 8009b08:	197b      	adds	r3, r7, r5
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	5e9b      	ldrsh	r3, [r3, r2]
 8009b0e:	e020      	b.n	8009b52 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009b10:	2110      	movs	r1, #16
 8009b12:	187b      	adds	r3, r7, r1
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009b1a:	187b      	adds	r3, r7, r1
 8009b1c:	785a      	ldrb	r2, [r3, #1]
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009b22:	187b      	adds	r3, r7, r1
 8009b24:	789b      	ldrb	r3, [r3, #2]
 8009b26:	1e5a      	subs	r2, r3, #1
 8009b28:	4193      	sbcs	r3, r2
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009b30:	187b      	adds	r3, r7, r1
 8009b32:	78da      	ldrb	r2, [r3, #3]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009b38:	187b      	adds	r3, r7, r1
 8009b3a:	791a      	ldrb	r2, [r3, #4]
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009b40:	187b      	adds	r3, r7, r1
 8009b42:	795a      	ldrb	r2, [r3, #5]
 8009b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b46:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009b48:	187b      	adds	r3, r7, r1
 8009b4a:	799a      	ldrb	r2, [r3, #6]
 8009b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b4e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	0018      	movs	r0, r3
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b009      	add	sp, #36	@ 0x24
 8009b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	00004e20 	.word	0x00004e20

08009b60 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009b68:	2516      	movs	r5, #22
 8009b6a:	197b      	adds	r3, r7, r5
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009b70:	197c      	adds	r4, r7, r5
 8009b72:	4a22      	ldr	r2, [pc, #136]	@ (8009bfc <sen5x_read_device_status+0x9c>)
 8009b74:	197b      	adds	r3, r7, r5
 8009b76:	8819      	ldrh	r1, [r3, #0]
 8009b78:	230c      	movs	r3, #12
 8009b7a:	18fb      	adds	r3, r7, r3
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	f001 f835 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009b82:	0003      	movs	r3, r0
 8009b84:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b86:	2614      	movs	r6, #20
 8009b88:	19bc      	adds	r4, r7, r6
 8009b8a:	197b      	adds	r3, r7, r5
 8009b8c:	881a      	ldrh	r2, [r3, #0]
 8009b8e:	230c      	movs	r3, #12
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	0019      	movs	r1, r3
 8009b94:	2069      	movs	r0, #105	@ 0x69
 8009b96:	f001 f8ad 	bl	800acf4 <sensirion_i2c_write_data>
 8009b9a:	0003      	movs	r3, r0
 8009b9c:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b9e:	19bb      	adds	r3, r7, r6
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <sen5x_read_device_status+0x50>
        return error;
 8009ba8:	19bb      	adds	r3, r7, r6
 8009baa:	2200      	movs	r2, #0
 8009bac:	5e9b      	ldrsh	r3, [r3, r2]
 8009bae:	e020      	b.n	8009bf2 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009bb0:	4b13      	ldr	r3, [pc, #76]	@ (8009c00 <sen5x_read_device_status+0xa0>)
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7ff fb1a 	bl	80091ec <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009bb8:	2514      	movs	r5, #20
 8009bba:	197c      	adds	r4, r7, r5
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	18fb      	adds	r3, r7, r3
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	0019      	movs	r1, r3
 8009bc4:	2069      	movs	r0, #105	@ 0x69
 8009bc6:	f001 f8ad 	bl	800ad24 <sensirion_i2c_read_data_inplace>
 8009bca:	0003      	movs	r3, r0
 8009bcc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bce:	197b      	adds	r3, r7, r5
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <sen5x_read_device_status+0x80>
        return error;
 8009bd8:	197b      	adds	r3, r7, r5
 8009bda:	2200      	movs	r2, #0
 8009bdc:	5e9b      	ldrsh	r3, [r3, r2]
 8009bde:	e008      	b.n	8009bf2 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009be0:	230c      	movs	r3, #12
 8009be2:	18fb      	adds	r3, r7, r3
 8009be4:	0018      	movs	r0, r3
 8009be6:	f000 f850 	bl	8009c8a <sensirion_common_bytes_to_uint32_t>
 8009bea:	0002      	movs	r2, r0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	0018      	movs	r0, r3
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	b007      	add	sp, #28
 8009bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	0000d206 	.word	0x0000d206
 8009c00:	00004e20 	.word	0x00004e20

08009c04 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009c04:	b590      	push	{r4, r7, lr}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009c0a:	1dbb      	adds	r3, r7, #6
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009c10:	1dbc      	adds	r4, r7, #6
 8009c12:	4a12      	ldr	r2, [pc, #72]	@ (8009c5c <sen5x_device_reset+0x58>)
 8009c14:	1dbb      	adds	r3, r7, #6
 8009c16:	8819      	ldrh	r1, [r3, #0]
 8009c18:	003b      	movs	r3, r7
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f000 ffe6 	bl	800abec <sensirion_i2c_add_command_to_buffer>
 8009c20:	0003      	movs	r3, r0
 8009c22:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c24:	1d3c      	adds	r4, r7, #4
 8009c26:	1dbb      	adds	r3, r7, #6
 8009c28:	881a      	ldrh	r2, [r3, #0]
 8009c2a:	003b      	movs	r3, r7
 8009c2c:	0019      	movs	r1, r3
 8009c2e:	2069      	movs	r0, #105	@ 0x69
 8009c30:	f001 f860 	bl	800acf4 <sensirion_i2c_write_data>
 8009c34:	0003      	movs	r3, r0
 8009c36:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c38:	1d3b      	adds	r3, r7, #4
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	5e9b      	ldrsh	r3, [r3, r2]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <sen5x_device_reset+0x46>
        return error;
 8009c42:	1d3b      	adds	r3, r7, #4
 8009c44:	2200      	movs	r2, #0
 8009c46:	5e9b      	ldrsh	r3, [r3, r2]
 8009c48:	e004      	b.n	8009c54 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009c4a:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <sen5x_device_reset+0x5c>)
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f7ff facd 	bl	80091ec <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	0018      	movs	r0, r3
 8009c56:	46bd      	mov	sp, r7
 8009c58:	b003      	add	sp, #12
 8009c5a:	bd90      	pop	{r4, r7, pc}
 8009c5c:	0000d304 	.word	0x0000d304
 8009c60:	00030d40 	.word	0x00030d40

08009c64 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	b21a      	sxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3301      	adds	r3, #1
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	b21b      	sxth	r3, r3
 8009c80:	b29b      	uxth	r3, r3
}
 8009c82:	0018      	movs	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	b002      	add	sp, #8
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	061a      	lsls	r2, r3, #24
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	041b      	lsls	r3, r3, #16
 8009ca0:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009caa:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	3203      	adds	r2, #3
 8009cb0:	7812      	ldrb	r2, [r2, #0]
 8009cb2:	4313      	orrs	r3, r2
}
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b002      	add	sp, #8
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f7ff ffcc 	bl	8009c64 <sensirion_common_bytes_to_uint16_t>
 8009ccc:	0003      	movs	r3, r0
 8009cce:	b21b      	sxth	r3, r3
}
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	b002      	add	sp, #8
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	1dbb      	adds	r3, r7, #6
 8009ce4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009ce6:	2316      	movs	r3, #22
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	e00f      	b.n	8009d10 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009cf0:	2016      	movs	r0, #22
 8009cf2:	183b      	adds	r3, r7, r0
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	18d2      	adds	r2, r2, r3
 8009cfa:	183b      	adds	r3, r7, r0
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	18cb      	adds	r3, r1, r3
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009d06:	183b      	adds	r3, r7, r0
 8009d08:	881a      	ldrh	r2, [r3, #0]
 8009d0a:	183b      	adds	r3, r7, r0
 8009d0c:	3201      	adds	r2, #1
 8009d0e:	801a      	strh	r2, [r3, #0]
 8009d10:	2316      	movs	r3, #22
 8009d12:	18fa      	adds	r2, r7, r3
 8009d14:	1dbb      	adds	r3, r7, #6
 8009d16:	8812      	ldrh	r2, [r2, #0]
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d3e8      	bcc.n	8009cf0 <sensirion_common_copy_bytes+0x18>
    }
}
 8009d1e:	46c0      	nop			@ (mov r8, r8)
 8009d20:	46c0      	nop			@ (mov r8, r8)
 8009d22:	46bd      	mov	sp, r7
 8009d24:	b006      	add	sp, #24
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d113      	bne.n	8009d6e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	22fe      	movs	r2, #254	@ 0xfe
 8009d4a:	0592      	lsls	r2, r2, #22
 8009d4c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	4a1a      	ldr	r2, [pc, #104]	@ (8009dbc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009d52:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4a1a      	ldr	r2, [pc, #104]	@ (8009dc0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009d58:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	4a19      	ldr	r2, [pc, #100]	@ (8009dc4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009d5e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4a19      	ldr	r2, [pc, #100]	@ (8009dc8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009d64:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4a18      	ldr	r2, [pc, #96]	@ (8009dcc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009d6a:	61da      	str	r2, [r3, #28]
 8009d6c:	e011      	b.n	8009d92 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4a17      	ldr	r2, [pc, #92]	@ (8009dd0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009d72:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4a17      	ldr	r2, [pc, #92]	@ (8009dd4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009d78:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	4a16      	ldr	r2, [pc, #88]	@ (8009dd8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009d7e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4a16      	ldr	r2, [pc, #88]	@ (8009ddc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009d84:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4a15      	ldr	r2, [pc, #84]	@ (8009de0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009d8a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a15      	ldr	r2, [pc, #84]	@ (8009de4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009d90:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4a14      	ldr	r2, [pc, #80]	@ (8009de8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009d96:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4a14      	ldr	r2, [pc, #80]	@ (8009dec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009d9c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4a12      	ldr	r2, [pc, #72]	@ (8009dec <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009da2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a12      	ldr	r2, [pc, #72]	@ (8009df0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009da8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	0018      	movs	r0, r3
 8009dae:	f000 f833 	bl	8009e18 <GasIndexAlgorithm_reset>
}
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	46bd      	mov	sp, r7
 8009db6:	b004      	add	sp, #16
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	46c0      	nop			@ (mov r8, r8)
 8009dbc:	00002710 	.word	0x00002710
 8009dc0:	44340000 	.word	0x44340000
 8009dc4:	46859800 	.word	0x46859800
 8009dc8:	46a05000 	.word	0x46a05000
 8009dcc:	41f00000 	.word	0x41f00000
 8009dd0:	42c80000 	.word	0x42c80000
 8009dd4:	00004e20 	.word	0x00004e20
 8009dd8:	43340000 	.word	0x43340000
 8009ddc:	4528c000 	.word	0x4528c000
 8009de0:	45a32000 	.word	0x45a32000
 8009de4:	43aa0000 	.word	0x43aa0000
 8009de8:	43660000 	.word	0x43660000
 8009dec:	41400000 	.word	0x41400000
 8009df0:	42480000 	.word	0x42480000

08009df4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009dfe:	4a05      	ldr	r2, [pc, #20]	@ (8009e14 <GasIndexAlgorithm_init+0x20>)
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f7ff ff8f 	bl	8009d28 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009e0a:	46c0      	nop			@ (mov r8, r8)
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	b002      	add	sp, #8
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	44610000 	.word	0x44610000

08009e18 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	0018      	movs	r0, r3
 8009e36:	f000 f805 	bl	8009e44 <GasIndexAlgorithm__init_instances>
}
 8009e3a:	46c0      	nop			@ (mov r8, r8)
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	b002      	add	sp, #8
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	0018      	movs	r0, r3
 8009e50:	f000 f8e8 	bl	800a024 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	0018      	movs	r0, r3
 8009e58:	f000 f9a6 	bl	800a1a8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009e5c:	1c04      	adds	r4, r0, #0
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	0018      	movs	r0, r3
 8009e62:	f000 f9ab 	bl	800a1bc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009e66:	1c02      	adds	r2, r0, #0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1c21      	adds	r1, r4, #0
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f000 fc3b 	bl	800a6e8 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d107      	bne.n	8009e8a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009e7a:	23fe      	movs	r3, #254	@ 0xfe
 8009e7c:	059b      	lsls	r3, r3, #22
 8009e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ea8 <GasIndexAlgorithm__init_instances+0x64>)
 8009e80:	490a      	ldr	r1, [pc, #40]	@ (8009eac <GasIndexAlgorithm__init_instances+0x68>)
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 fc86 	bl	800a794 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009e88:	e005      	b.n	8009e96 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <GasIndexAlgorithm__init_instances+0x6c>)
 8009e8c:	4a09      	ldr	r2, [pc, #36]	@ (8009eb4 <GasIndexAlgorithm__init_instances+0x70>)
 8009e8e:	490a      	ldr	r1, [pc, #40]	@ (8009eb8 <GasIndexAlgorithm__init_instances+0x74>)
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fc7f 	bl	800a794 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	0018      	movs	r0, r3
 8009e9a:	f000 fd35 	bl	800a908 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8009e9e:	46c0      	nop			@ (mov r8, r8)
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	b003      	add	sp, #12
 8009ea4:	bd90      	pop	{r4, r7, pc}
 8009ea6:	46c0      	nop			@ (mov r8, r8)
 8009ea8:	bc257a78 	.word	0xbc257a78
 8009eac:	44198000 	.word	0x44198000
 8009eb0:	42c80000 	.word	0x42c80000
 8009eb4:	bbd4fdf4 	.word	0xbbd4fdf4
 8009eb8:	43550000 	.word	0x43550000

08009ebc <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8009ebc:	b590      	push	{r4, r7, lr}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ecc:	4952      	ldr	r1, [pc, #328]	@ (800a018 <GasIndexAlgorithm_process+0x15c>)
 8009ece:	1c18      	adds	r0, r3, #0
 8009ed0:	f7f6 fb38 	bl	8000544 <__aeabi_fcmple>
 8009ed4:	1e03      	subs	r3, r0, #0
 8009ed6:	d00c      	beq.n	8009ef2 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	1c19      	adds	r1, r3, #0
 8009ee2:	1c10      	adds	r0, r2, #0
 8009ee4:	f7f6 fcec 	bl	80008c0 <__aeabi_fadd>
 8009ee8:	1c03      	adds	r3, r0, #0
 8009eea:	1c1a      	adds	r2, r3, #0
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ef0:	e080      	b.n	8009ff4 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	dd25      	ble.n	8009f44 <GasIndexAlgorithm_process+0x88>
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	4a48      	ldr	r2, [pc, #288]	@ (800a01c <GasIndexAlgorithm_process+0x160>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	dc21      	bgt.n	8009f44 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	dc04      	bgt.n	8009f14 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60bb      	str	r3, [r7, #8]
 8009f12:	e00d      	b.n	8009f30 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	4a41      	ldr	r2, [pc, #260]	@ (800a020 <GasIndexAlgorithm_process+0x164>)
 8009f1a:	4694      	mov	ip, r2
 8009f1c:	4463      	add	r3, ip
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	dd05      	ble.n	8009f30 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	4a3d      	ldr	r2, [pc, #244]	@ (800a020 <GasIndexAlgorithm_process+0x164>)
 8009f2a:	4694      	mov	ip, r2
 8009f2c:	4463      	add	r3, ip
 8009f2e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f7f7 fb49 	bl	80015d0 <__aeabi_i2f>
 8009f3e:	1c02      	adds	r2, r0, #0
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d005      	beq.n	8009f58 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	0018      	movs	r0, r3
 8009f50:	f000 f945 	bl	800a1de <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8009f54:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8009f56:	d014      	beq.n	8009f82 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	1c11      	adds	r1, r2, #0
 8009f60:	0018      	movs	r0, r3
 8009f62:	f000 fbd1 	bl	800a708 <GasIndexAlgorithm__mox_model__process>
 8009f66:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1c11      	adds	r1, r2, #0
 8009f74:	0018      	movs	r0, r3
 8009f76:	f000 fc25 	bl	800a7c4 <GasIndexAlgorithm__sigmoid_scaled__process>
 8009f7a:	1c02      	adds	r2, r0, #0
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f80:	e003      	b.n	8009f8a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1c11      	adds	r1, r2, #0
 8009f92:	0018      	movs	r0, r3
 8009f94:	f000 fcec 	bl	800a970 <GasIndexAlgorithm__adaptive_lowpass__process>
 8009f98:	1c02      	adds	r2, r0, #0
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa2:	21fc      	movs	r1, #252	@ 0xfc
 8009fa4:	0589      	lsls	r1, r1, #22
 8009fa6:	1c18      	adds	r0, r3, #0
 8009fa8:	f7f6 fac2 	bl	8000530 <__aeabi_fcmplt>
 8009fac:	1e03      	subs	r3, r0, #0
 8009fae:	d003      	beq.n	8009fb8 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	22fc      	movs	r2, #252	@ 0xfc
 8009fb4:	0592      	lsls	r2, r2, #22
 8009fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	1c18      	adds	r0, r3, #0
 8009fc0:	f7f6 faca 	bl	8000558 <__aeabi_fcmpgt>
 8009fc4:	1e03      	subs	r3, r0, #0
 8009fc6:	d015      	beq.n	8009ff4 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	1c11      	adds	r1, r2, #0
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	f000 fa4f 	bl	800a474 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 f8e5 	bl	800a1a8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009fde:	1c04      	adds	r4, r0, #0
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f000 f8ea 	bl	800a1bc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009fe8:	1c02      	adds	r2, r0, #0
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1c21      	adds	r1, r4, #0
 8009fee:	0018      	movs	r0, r3
 8009ff0:	f000 fb7a 	bl	800a6e8 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	21fc      	movs	r1, #252	@ 0xfc
 8009ffa:	0589      	lsls	r1, r1, #22
 8009ffc:	1c18      	adds	r0, r3, #0
 8009ffe:	f7f6 fc5f 	bl	80008c0 <__aeabi_fadd>
 800a002:	1c03      	adds	r3, r0, #0
 800a004:	1c18      	adds	r0, r3, #0
 800a006:	f7f7 fac3 	bl	8001590 <__aeabi_f2iz>
 800a00a:	0002      	movs	r2, r0
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	601a      	str	r2, [r3, #0]
    return;
 800a010:	46c0      	nop			@ (mov r8, r8)
}
 800a012:	46bd      	mov	sp, r7
 800a014:	b005      	add	sp, #20
 800a016:	bd90      	pop	{r4, r7, pc}
 800a018:	42340000 	.word	0x42340000
 800a01c:	0000fde7 	.word	0x0000fde7
 800a020:	00007fff 	.word	0x00007fff

0800a024 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a024:	b5b0      	push	{r4, r5, r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	223c      	movs	r2, #60	@ 0x3c
 800a030:	2100      	movs	r1, #0
 800a032:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	4952      	ldr	r1, [pc, #328]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a04e:	1c18      	adds	r0, r3, #0
 800a050:	f7f6 fdc0 	bl	8000bd4 <__aeabi_fdiv>
 800a054:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a056:	2188      	movs	r1, #136	@ 0x88
 800a058:	05c9      	lsls	r1, r1, #23
 800a05a:	1c18      	adds	r0, r3, #0
 800a05c:	f7f6 ffa0 	bl	8000fa0 <__aeabi_fmul>
 800a060:	1c03      	adds	r3, r0, #0
 800a062:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	494a      	ldr	r1, [pc, #296]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a06e:	1c18      	adds	r0, r3, #0
 800a070:	f7f6 fdb0 	bl	8000bd4 <__aeabi_fdiv>
 800a074:	1c03      	adds	r3, r0, #0
 800a076:	1c19      	adds	r1, r3, #0
 800a078:	1c20      	adds	r0, r4, #0
 800a07a:	f7f6 fc21 	bl	80008c0 <__aeabi_fadd>
 800a07e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a080:	1c19      	adds	r1, r3, #0
 800a082:	1c28      	adds	r0, r5, #0
 800a084:	f7f6 fda6 	bl	8000bd4 <__aeabi_fdiv>
 800a088:	1c03      	adds	r3, r0, #0
 800a08a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	4940      	ldr	r1, [pc, #256]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a096:	1c18      	adds	r0, r3, #0
 800a098:	f7f6 fd9c 	bl	8000bd4 <__aeabi_fdiv>
 800a09c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a09e:	2185      	movs	r1, #133	@ 0x85
 800a0a0:	05c9      	lsls	r1, r1, #23
 800a0a2:	1c18      	adds	r0, r3, #0
 800a0a4:	f7f6 ff7c 	bl	8000fa0 <__aeabi_fmul>
 800a0a8:	1c03      	adds	r3, r0, #0
 800a0aa:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4938      	ldr	r1, [pc, #224]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a0b6:	1c18      	adds	r0, r3, #0
 800a0b8:	f7f6 fd8c 	bl	8000bd4 <__aeabi_fdiv>
 800a0bc:	1c03      	adds	r3, r0, #0
 800a0be:	1c19      	adds	r1, r3, #0
 800a0c0:	1c20      	adds	r0, r4, #0
 800a0c2:	f7f6 fbfd 	bl	80008c0 <__aeabi_fadd>
 800a0c6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a0c8:	1c19      	adds	r1, r3, #0
 800a0ca:	1c28      	adds	r0, r5, #0
 800a0cc:	f7f6 fd82 	bl	8000bd4 <__aeabi_fdiv>
 800a0d0:	1c03      	adds	r3, r0, #0
 800a0d2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d118      	bne.n	800a112 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a0e4:	2188      	movs	r1, #136	@ 0x88
 800a0e6:	05c9      	lsls	r1, r1, #23
 800a0e8:	1c18      	adds	r0, r3, #0
 800a0ea:	f7f6 ff59 	bl	8000fa0 <__aeabi_fmul>
 800a0ee:	1c03      	adds	r3, r0, #0
 800a0f0:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a0f6:	4929      	ldr	r1, [pc, #164]	@ (800a19c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a0f8:	1c18      	adds	r0, r3, #0
 800a0fa:	f7f6 fbe1 	bl	80008c0 <__aeabi_fadd>
 800a0fe:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a100:	1c19      	adds	r1, r3, #0
 800a102:	1c20      	adds	r0, r4, #0
 800a104:	f7f6 fd66 	bl	8000bd4 <__aeabi_fdiv>
 800a108:	1c03      	adds	r3, r0, #0
 800a10a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a110:	e017      	b.n	800a142 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a116:	2188      	movs	r1, #136	@ 0x88
 800a118:	05c9      	lsls	r1, r1, #23
 800a11a:	1c18      	adds	r0, r3, #0
 800a11c:	f7f6 ff40 	bl	8000fa0 <__aeabi_fmul>
 800a120:	1c03      	adds	r3, r0, #0
 800a122:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a128:	491d      	ldr	r1, [pc, #116]	@ (800a1a0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a12a:	1c18      	adds	r0, r3, #0
 800a12c:	f7f6 fbc8 	bl	80008c0 <__aeabi_fadd>
 800a130:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a132:	1c19      	adds	r1, r3, #0
 800a134:	1c20      	adds	r0, r4, #0
 800a136:	f7f6 fd4d 	bl	8000bd4 <__aeabi_fdiv>
 800a13a:	1c03      	adds	r3, r0, #0
 800a13c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a146:	2185      	movs	r1, #133	@ 0x85
 800a148:	05c9      	lsls	r1, r1, #23
 800a14a:	1c18      	adds	r0, r3, #0
 800a14c:	f7f6 ff28 	bl	8000fa0 <__aeabi_fmul>
 800a150:	1c03      	adds	r3, r0, #0
 800a152:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	4912      	ldr	r1, [pc, #72]	@ (800a1a4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a15a:	1c18      	adds	r0, r3, #0
 800a15c:	f7f6 fbb0 	bl	80008c0 <__aeabi_fadd>
 800a160:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a162:	1c19      	adds	r1, r3, #0
 800a164:	1c20      	adds	r0, r4, #0
 800a166:	f7f6 fd35 	bl	8000bd4 <__aeabi_fdiv>
 800a16a:	1c03      	adds	r3, r0, #0
 800a16c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a190:	46c0      	nop			@ (mov r8, r8)
 800a192:	46bd      	mov	sp, r7
 800a194:	b002      	add	sp, #8
 800a196:	bdb0      	pop	{r4, r5, r7, pc}
 800a198:	45610000 	.word	0x45610000
 800a19c:	44960000 	.word	0x44960000
 800a1a0:	41a00000 	.word	0x41a00000
 800a1a4:	451c4000 	.word	0x451c4000

0800a1a8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a1b4:	1c18      	adds	r0, r3, #0
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	b002      	add	sp, #8
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a1cc:	1c19      	adds	r1, r3, #0
 800a1ce:	1c10      	adds	r0, r2, #0
 800a1d0:	f7f6 fb76 	bl	80008c0 <__aeabi_fadd>
 800a1d4:	1c03      	adds	r3, r0, #0
}
 800a1d6:	1c18      	adds	r0, r3, #0
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	b002      	add	sp, #8
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	223c      	movs	r2, #60	@ 0x3c
 800a1ea:	5c9b      	ldrb	r3, [r3, r2]
}
 800a1ec:	0018      	movs	r0, r3
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	b002      	add	sp, #8
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a1f4:	b5b0      	push	{r4, r5, r7, lr}
 800a1f6:	b08c      	sub	sp, #48	@ 0x30
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a200:	1c19      	adds	r1, r3, #0
 800a202:	4895      	ldr	r0, [pc, #596]	@ (800a458 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a204:	f7f7 f80a 	bl	800121c <__aeabi_fsub>
 800a208:	1c03      	adds	r3, r0, #0
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a210:	1c19      	adds	r1, r3, #0
 800a212:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a214:	f7f6 f9a0 	bl	8000558 <__aeabi_fcmpgt>
 800a218:	1e03      	subs	r3, r0, #0
 800a21a:	d00b      	beq.n	800a234 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a224:	1c19      	adds	r1, r3, #0
 800a226:	1c10      	adds	r0, r2, #0
 800a228:	f7f6 fb4a 	bl	80008c0 <__aeabi_fadd>
 800a22c:	1c03      	adds	r3, r0, #0
 800a22e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a238:	1c19      	adds	r1, r3, #0
 800a23a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a23c:	f7f6 f98c 	bl	8000558 <__aeabi_fcmpgt>
 800a240:	1e03      	subs	r3, r0, #0
 800a242:	d00b      	beq.n	800a25c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a24c:	1c19      	adds	r1, r3, #0
 800a24e:	1c10      	adds	r0, r2, #0
 800a250:	f7f6 fb36 	bl	80008c0 <__aeabi_fadd>
 800a254:	1c03      	adds	r3, r0, #0
 800a256:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6959      	ldr	r1, [r3, #20]
 800a260:	4a7e      	ldr	r2, [pc, #504]	@ (800a45c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	0018      	movs	r0, r3
 800a266:	f000 f9f1 	bl	800a64c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	1c11      	adds	r1, r2, #0
 800a272:	0018      	movs	r0, r3
 800a274:	f000 f9fa 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a278:	1c03      	adds	r3, r0, #0
 800a27a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a288:	1c19      	adds	r1, r3, #0
 800a28a:	1c10      	adds	r0, r2, #0
 800a28c:	f7f6 ffc6 	bl	800121c <__aeabi_fsub>
 800a290:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a294:	1c18      	adds	r0, r3, #0
 800a296:	f7f6 fe83 	bl	8000fa0 <__aeabi_fmul>
 800a29a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a29c:	1c19      	adds	r1, r3, #0
 800a29e:	1c20      	adds	r0, r4, #0
 800a2a0:	f7f6 fb0e 	bl	80008c0 <__aeabi_fadd>
 800a2a4:	1c03      	adds	r3, r0, #0
 800a2a6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a2b0:	1c19      	adds	r1, r3, #0
 800a2b2:	486b      	ldr	r0, [pc, #428]	@ (800a460 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a2b4:	f7f6 ffb2 	bl	800121c <__aeabi_fsub>
 800a2b8:	1c03      	adds	r3, r0, #0
 800a2ba:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	1c11      	adds	r1, r2, #0
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f000 f9d1 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a2ca:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a2cc:	1c19      	adds	r1, r3, #0
 800a2ce:	1c28      	adds	r0, r5, #0
 800a2d0:	f7f6 fe66 	bl	8000fa0 <__aeabi_fmul>
 800a2d4:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a2d6:	1c19      	adds	r1, r3, #0
 800a2d8:	1c20      	adds	r0, r4, #0
 800a2da:	f7f6 faf1 	bl	80008c0 <__aeabi_fadd>
 800a2de:	1c03      	adds	r3, r0, #0
 800a2e0:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a2e2:	4a60      	ldr	r2, [pc, #384]	@ (800a464 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a2e4:	6a39      	ldr	r1, [r7, #32]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	0018      	movs	r0, r3
 800a2ea:	f000 f9af 	bl	800a64c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	1c11      	adds	r1, r2, #0
 800a2f6:	0018      	movs	r0, r3
 800a2f8:	f000 f9b8 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a2fc:	1c03      	adds	r3, r0, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a302:	69f8      	ldr	r0, [r7, #28]
 800a304:	f7f6 fe4c 	bl	8000fa0 <__aeabi_fmul>
 800a308:	1c03      	adds	r3, r0, #0
 800a30a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6999      	ldr	r1, [r3, #24]
 800a314:	4a51      	ldr	r2, [pc, #324]	@ (800a45c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	0018      	movs	r0, r3
 800a31a:	f000 f997 	bl	800a64c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	1c11      	adds	r1, r2, #0
 800a326:	0018      	movs	r0, r3
 800a328:	f000 f9a0 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a32c:	1c03      	adds	r3, r0, #0
 800a32e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a33c:	1c19      	adds	r1, r3, #0
 800a33e:	1c10      	adds	r0, r2, #0
 800a340:	f7f6 ff6c 	bl	800121c <__aeabi_fsub>
 800a344:	1c03      	adds	r3, r0, #0
 800a346:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a34a:	69b8      	ldr	r0, [r7, #24]
 800a34c:	f7f6 ff66 	bl	800121c <__aeabi_fsub>
 800a350:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a352:	1c19      	adds	r1, r3, #0
 800a354:	1c28      	adds	r0, r5, #0
 800a356:	f7f6 fe23 	bl	8000fa0 <__aeabi_fmul>
 800a35a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a35c:	1c19      	adds	r1, r3, #0
 800a35e:	1c20      	adds	r0, r4, #0
 800a360:	f7f6 faae 	bl	80008c0 <__aeabi_fadd>
 800a364:	1c03      	adds	r3, r0, #0
 800a366:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a370:	1c19      	adds	r1, r3, #0
 800a372:	483b      	ldr	r0, [pc, #236]	@ (800a460 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a374:	f7f6 ff52 	bl	800121c <__aeabi_fsub>
 800a378:	1c03      	adds	r3, r0, #0
 800a37a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	1c11      	adds	r1, r2, #0
 800a384:	0018      	movs	r0, r3
 800a386:	f000 f971 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a38a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a38c:	1c19      	adds	r1, r3, #0
 800a38e:	1c28      	adds	r0, r5, #0
 800a390:	f7f6 fe06 	bl	8000fa0 <__aeabi_fmul>
 800a394:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a396:	1c19      	adds	r1, r3, #0
 800a398:	1c20      	adds	r0, r4, #0
 800a39a:	f7f6 fa91 	bl	80008c0 <__aeabi_fadd>
 800a39e:	1c03      	adds	r3, r0, #0
 800a3a0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a3a2:	4a30      	ldr	r2, [pc, #192]	@ (800a464 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a3a4:	6939      	ldr	r1, [r7, #16]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f000 f94f 	bl	800a64c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	1c11      	adds	r1, r2, #0
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f000 f958 	bl	800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a3bc:	1c03      	adds	r3, r0, #0
 800a3be:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a3c0:	6979      	ldr	r1, [r7, #20]
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7f6 fdec 	bl	8000fa0 <__aeabi_fmul>
 800a3c8:	1c03      	adds	r3, r0, #0
 800a3ca:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4923      	ldr	r1, [pc, #140]	@ (800a468 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a3da:	1c18      	adds	r0, r3, #0
 800a3dc:	f7f6 fbfa 	bl	8000bd4 <__aeabi_fdiv>
 800a3e0:	1c03      	adds	r3, r0, #0
 800a3e2:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a3e4:	69f9      	ldr	r1, [r7, #28]
 800a3e6:	20fe      	movs	r0, #254	@ 0xfe
 800a3e8:	0580      	lsls	r0, r0, #22
 800a3ea:	f7f6 ff17 	bl	800121c <__aeabi_fsub>
 800a3ee:	1c03      	adds	r3, r0, #0
 800a3f0:	491e      	ldr	r1, [pc, #120]	@ (800a46c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a3f2:	1c18      	adds	r0, r3, #0
 800a3f4:	f7f6 fdd4 	bl	8000fa0 <__aeabi_fmul>
 800a3f8:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a3fa:	491d      	ldr	r1, [pc, #116]	@ (800a470 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a3fc:	1c18      	adds	r0, r3, #0
 800a3fe:	f7f6 ff0d 	bl	800121c <__aeabi_fsub>
 800a402:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a404:	1c19      	adds	r1, r3, #0
 800a406:	1c28      	adds	r0, r5, #0
 800a408:	f7f6 fdca 	bl	8000fa0 <__aeabi_fmul>
 800a40c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a40e:	1c19      	adds	r1, r3, #0
 800a410:	1c20      	adds	r0, r4, #0
 800a412:	f7f6 fa55 	bl	80008c0 <__aeabi_fadd>
 800a416:	1c03      	adds	r3, r0, #0
 800a418:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a422:	2100      	movs	r1, #0
 800a424:	1c18      	adds	r0, r3, #0
 800a426:	f7f6 f883 	bl	8000530 <__aeabi_fcmplt>
 800a42a:	1e03      	subs	r3, r0, #0
 800a42c:	d002      	beq.n	800a434 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a43c:	1c19      	adds	r1, r3, #0
 800a43e:	1c10      	adds	r0, r2, #0
 800a440:	f7f6 f88a 	bl	8000558 <__aeabi_fcmpgt>
 800a444:	1e03      	subs	r3, r0, #0
 800a446:	d100      	bne.n	800a44a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a448:	e002      	b.n	800a450 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a450:	46c0      	nop			@ (mov r8, r8)
 800a452:	46bd      	mov	sp, r7
 800a454:	b00c      	add	sp, #48	@ 0x30
 800a456:	bdb0      	pop	{r4, r5, r7, pc}
 800a458:	46fffe00 	.word	0x46fffe00
 800a45c:	3c23d70a 	.word	0x3c23d70a
 800a460:	43ff0000 	.word	0x43ff0000
 800a464:	3db851ec 	.word	0x3db851ec
 800a468:	42700000 	.word	0x42700000
 800a46c:	3fa66666 	.word	0x3fa66666
 800a470:	3e99999a 	.word	0x3e99999a

0800a474 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	223c      	movs	r2, #60	@ 0x3c
 800a482:	5c9b      	ldrb	r3, [r3, r2]
 800a484:	2201      	movs	r2, #1
 800a486:	4053      	eors	r3, r2
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00a      	beq.n	800a4a4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	223c      	movs	r2, #60	@ 0x3c
 800a492:	2101      	movs	r1, #1
 800a494:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a4a2:	e0c8      	b.n	800a636 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a8:	4965      	ldr	r1, [pc, #404]	@ (800a640 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a4aa:	1c18      	adds	r0, r3, #0
 800a4ac:	f7f6 f85e 	bl	800056c <__aeabi_fcmpge>
 800a4b0:	1e03      	subs	r3, r0, #0
 800a4b2:	d107      	bne.n	800a4c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a4b8:	4962      	ldr	r1, [pc, #392]	@ (800a644 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a4ba:	1c18      	adds	r0, r3, #0
 800a4bc:	f7f6 f842 	bl	8000544 <__aeabi_fcmple>
 800a4c0:	1e03      	subs	r3, r0, #0
 800a4c2:	d00e      	beq.n	800a4e2 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a4cc:	1c19      	adds	r1, r3, #0
 800a4ce:	1c10      	adds	r0, r2, #0
 800a4d0:	f7f6 f9f6 	bl	80008c0 <__aeabi_fadd>
 800a4d4:	1c03      	adds	r3, r0, #0
 800a4d6:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e6:	1c19      	adds	r1, r3, #0
 800a4e8:	6838      	ldr	r0, [r7, #0]
 800a4ea:	f7f6 fe97 	bl	800121c <__aeabi_fsub>
 800a4ee:	1c03      	adds	r3, r0, #0
 800a4f0:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	0018      	movs	r0, r3
 800a4f6:	f7ff fe7d 	bl	800a1f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	1c19      	adds	r1, r3, #0
 800a500:	6838      	ldr	r0, [r7, #0]
 800a502:	f7f6 fe8b 	bl	800121c <__aeabi_fsub>
 800a506:	1c03      	adds	r3, r0, #0
 800a508:	2185      	movs	r1, #133	@ 0x85
 800a50a:	05c9      	lsls	r1, r1, #23
 800a50c:	1c18      	adds	r0, r3, #0
 800a50e:	f7f6 fb61 	bl	8000bd4 <__aeabi_fdiv>
 800a512:	1c03      	adds	r3, r0, #0
 800a514:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a516:	2100      	movs	r1, #0
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7f6 f809 	bl	8000530 <__aeabi_fcmplt>
 800a51e:	1e03      	subs	r3, r0, #0
 800a520:	d008      	beq.n	800a534 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	1c18      	adds	r0, r3, #0
 800a52a:	f7f6 fe77 	bl	800121c <__aeabi_fsub>
 800a52e:	1c03      	adds	r3, r0, #0
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	e007      	b.n	800a544 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a538:	1c19      	adds	r1, r3, #0
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7f6 f9c0 	bl	80008c0 <__aeabi_fadd>
 800a540:	1c03      	adds	r3, r0, #0
 800a542:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a544:	23fe      	movs	r3, #254	@ 0xfe
 800a546:	059b      	lsls	r3, r3, #22
 800a548:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a54a:	493f      	ldr	r1, [pc, #252]	@ (800a648 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a54c:	6978      	ldr	r0, [r7, #20]
 800a54e:	f7f6 f803 	bl	8000558 <__aeabi_fcmpgt>
 800a552:	1e03      	subs	r3, r0, #0
 800a554:	d010      	beq.n	800a578 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a556:	493c      	ldr	r1, [pc, #240]	@ (800a648 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a558:	6978      	ldr	r0, [r7, #20]
 800a55a:	f7f6 fb3b 	bl	8000bd4 <__aeabi_fdiv>
 800a55e:	1c03      	adds	r3, r0, #0
 800a560:	1c1c      	adds	r4, r3, #0
 800a562:	4939      	ldr	r1, [pc, #228]	@ (800a648 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a564:	6978      	ldr	r0, [r7, #20]
 800a566:	f7f6 fb35 	bl	8000bd4 <__aeabi_fdiv>
 800a56a:	1c03      	adds	r3, r0, #0
 800a56c:	1c19      	adds	r1, r3, #0
 800a56e:	1c20      	adds	r0, r4, #0
 800a570:	f7f6 fd16 	bl	8000fa0 <__aeabi_fmul>
 800a574:	1c03      	adds	r3, r0, #0
 800a576:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a57c:	1c19      	adds	r1, r3, #0
 800a57e:	2085      	movs	r0, #133	@ 0x85
 800a580:	05c0      	lsls	r0, r0, #23
 800a582:	f7f6 fe4b 	bl	800121c <__aeabi_fsub>
 800a586:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a588:	6939      	ldr	r1, [r7, #16]
 800a58a:	1c18      	adds	r0, r3, #0
 800a58c:	f7f6 fd08 	bl	8000fa0 <__aeabi_fmul>
 800a590:	1c03      	adds	r3, r0, #0
 800a592:	1c18      	adds	r0, r3, #0
 800a594:	f017 fdaa 	bl	80220ec <sqrtf>
 800a598:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a5a2:	2185      	movs	r1, #133	@ 0x85
 800a5a4:	05c9      	lsls	r1, r1, #23
 800a5a6:	6938      	ldr	r0, [r7, #16]
 800a5a8:	f7f6 fcfa 	bl	8000fa0 <__aeabi_fmul>
 800a5ac:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a5ae:	1c19      	adds	r1, r3, #0
 800a5b0:	1c28      	adds	r0, r5, #0
 800a5b2:	f7f6 fb0f 	bl	8000bd4 <__aeabi_fdiv>
 800a5b6:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a5b8:	1c19      	adds	r1, r3, #0
 800a5ba:	1c20      	adds	r0, r4, #0
 800a5bc:	f7f6 fcf0 	bl	8000fa0 <__aeabi_fmul>
 800a5c0:	1c03      	adds	r3, r0, #0
 800a5c2:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5c8:	68f9      	ldr	r1, [r7, #12]
 800a5ca:	1c18      	adds	r0, r3, #0
 800a5cc:	f7f6 fce8 	bl	8000fa0 <__aeabi_fmul>
 800a5d0:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a5d2:	6939      	ldr	r1, [r7, #16]
 800a5d4:	1c18      	adds	r0, r3, #0
 800a5d6:	f7f6 fafd 	bl	8000bd4 <__aeabi_fdiv>
 800a5da:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a5dc:	68f9      	ldr	r1, [r7, #12]
 800a5de:	1c18      	adds	r0, r3, #0
 800a5e0:	f7f6 fcde 	bl	8000fa0 <__aeabi_fmul>
 800a5e4:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a5e6:	1c19      	adds	r1, r3, #0
 800a5e8:	1c20      	adds	r0, r4, #0
 800a5ea:	f7f6 f969 	bl	80008c0 <__aeabi_fadd>
 800a5ee:	1c03      	adds	r3, r0, #0
 800a5f0:	1c18      	adds	r0, r3, #0
 800a5f2:	f017 fd7b 	bl	80220ec <sqrtf>
 800a5f6:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a5f8:	1c19      	adds	r1, r3, #0
 800a5fa:	1c30      	adds	r0, r6, #0
 800a5fc:	f7f6 fcd0 	bl	8000fa0 <__aeabi_fmul>
 800a600:	1c03      	adds	r3, r0, #0
 800a602:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	1c18      	adds	r0, r3, #0
 800a614:	f7f6 fcc4 	bl	8000fa0 <__aeabi_fmul>
 800a618:	1c03      	adds	r3, r0, #0
 800a61a:	2182      	movs	r1, #130	@ 0x82
 800a61c:	05c9      	lsls	r1, r1, #23
 800a61e:	1c18      	adds	r0, r3, #0
 800a620:	f7f6 fad8 	bl	8000bd4 <__aeabi_fdiv>
 800a624:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a626:	1c19      	adds	r1, r3, #0
 800a628:	1c20      	adds	r0, r4, #0
 800a62a:	f7f6 f949 	bl	80008c0 <__aeabi_fadd>
 800a62e:	1c03      	adds	r3, r0, #0
 800a630:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	b007      	add	sp, #28
 800a63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	42c80000 	.word	0x42c80000
 800a644:	c2c80000 	.word	0xc2c80000
 800a648:	44b40000 	.word	0x44b40000

0800a64c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a664:	46c0      	nop			@ (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	b004      	add	sp, #16
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a66c:	b590      	push	{r4, r7, lr}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a67e:	1c19      	adds	r1, r3, #0
 800a680:	6838      	ldr	r0, [r7, #0]
 800a682:	f7f6 fdcb 	bl	800121c <__aeabi_fsub>
 800a686:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a688:	1c19      	adds	r1, r3, #0
 800a68a:	1c20      	adds	r0, r4, #0
 800a68c:	f7f6 fc88 	bl	8000fa0 <__aeabi_fmul>
 800a690:	1c03      	adds	r3, r0, #0
 800a692:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a694:	4912      	ldr	r1, [pc, #72]	@ (800a6e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7f5 ff4a 	bl	8000530 <__aeabi_fcmplt>
 800a69c:	1e03      	subs	r3, r0, #0
 800a69e:	d002      	beq.n	800a6a6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a6a0:	23fe      	movs	r3, #254	@ 0xfe
 800a6a2:	059b      	lsls	r3, r3, #22
 800a6a4:	e018      	b.n	800a6d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a6a6:	490f      	ldr	r1, [pc, #60]	@ (800a6e4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f7f5 ff55 	bl	8000558 <__aeabi_fcmpgt>
 800a6ae:	1e03      	subs	r3, r0, #0
 800a6b0:	d001      	beq.n	800a6b6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	e010      	b.n	800a6d8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	1c18      	adds	r0, r3, #0
 800a6ba:	f017 fcef 	bl	802209c <expf>
 800a6be:	1c03      	adds	r3, r0, #0
 800a6c0:	21fe      	movs	r1, #254	@ 0xfe
 800a6c2:	0589      	lsls	r1, r1, #22
 800a6c4:	1c18      	adds	r0, r3, #0
 800a6c6:	f7f6 f8fb 	bl	80008c0 <__aeabi_fadd>
 800a6ca:	1c03      	adds	r3, r0, #0
 800a6cc:	1c19      	adds	r1, r3, #0
 800a6ce:	20fe      	movs	r0, #254	@ 0xfe
 800a6d0:	0580      	lsls	r0, r0, #22
 800a6d2:	f7f6 fa7f 	bl	8000bd4 <__aeabi_fdiv>
 800a6d6:	1c03      	adds	r3, r0, #0
    }
}
 800a6d8:	1c18      	adds	r0, r3, #0
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b005      	add	sp, #20
 800a6de:	bd90      	pop	{r4, r7, pc}
 800a6e0:	c2480000 	.word	0xc2480000
 800a6e4:	42480000 	.word	0x42480000

0800a6e8 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a700:	46c0      	nop			@ (mov r8, r8)
 800a702:	46bd      	mov	sp, r7
 800a704:	b004      	add	sp, #16
 800a706:	bd80      	pop	{r7, pc}

0800a708 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a708:	b590      	push	{r4, r7, lr}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d114      	bne.n	800a744 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a71e:	1c19      	adds	r1, r3, #0
 800a720:	6838      	ldr	r0, [r7, #0]
 800a722:	f7f6 fd7b 	bl	800121c <__aeabi_fsub>
 800a726:	1c03      	adds	r3, r0, #0
 800a728:	4918      	ldr	r1, [pc, #96]	@ (800a78c <GasIndexAlgorithm__mox_model__process+0x84>)
 800a72a:	1c18      	adds	r0, r3, #0
 800a72c:	f7f6 fa52 	bl	8000bd4 <__aeabi_fdiv>
 800a730:	1c03      	adds	r3, r0, #0
 800a732:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a738:	1c19      	adds	r1, r3, #0
 800a73a:	1c10      	adds	r0, r2, #0
 800a73c:	f7f6 fc30 	bl	8000fa0 <__aeabi_fmul>
 800a740:	1c03      	adds	r3, r0, #0
 800a742:	e01f      	b.n	800a784 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a748:	1c19      	adds	r1, r3, #0
 800a74a:	6838      	ldr	r0, [r7, #0]
 800a74c:	f7f6 fd66 	bl	800121c <__aeabi_fsub>
 800a750:	1c03      	adds	r3, r0, #0
 800a752:	1c1a      	adds	r2, r3, #0
 800a754:	2380      	movs	r3, #128	@ 0x80
 800a756:	061b      	lsls	r3, r3, #24
 800a758:	4053      	eors	r3, r2
 800a75a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a760:	490b      	ldr	r1, [pc, #44]	@ (800a790 <GasIndexAlgorithm__mox_model__process+0x88>)
 800a762:	1c18      	adds	r0, r3, #0
 800a764:	f7f6 f8ac 	bl	80008c0 <__aeabi_fadd>
 800a768:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a76a:	1c19      	adds	r1, r3, #0
 800a76c:	1c20      	adds	r0, r4, #0
 800a76e:	f7f6 fa31 	bl	8000bd4 <__aeabi_fdiv>
 800a772:	1c03      	adds	r3, r0, #0
 800a774:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a77a:	1c19      	adds	r1, r3, #0
 800a77c:	1c10      	adds	r0, r2, #0
 800a77e:	f7f6 fc0f 	bl	8000fa0 <__aeabi_fmul>
 800a782:	1c03      	adds	r3, r0, #0
    }
}
 800a784:	1c18      	adds	r0, r3, #0
 800a786:	46bd      	mov	sp, r7
 800a788:	b003      	add	sp, #12
 800a78a:	bd90      	pop	{r4, r7, pc}
 800a78c:	44fa0000 	.word	0x44fa0000
 800a790:	435c0000 	.word	0x435c0000

0800a794 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2180      	movs	r1, #128	@ 0x80
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2184      	movs	r1, #132	@ 0x84
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2188      	movs	r1, #136	@ 0x88
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	505a      	str	r2, [r3, r1]
}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	b004      	add	sp, #16
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2280      	movs	r2, #128	@ 0x80
 800a7d2:	589c      	ldr	r4, [r3, r2]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2284      	movs	r2, #132	@ 0x84
 800a7d8:	589b      	ldr	r3, [r3, r2]
 800a7da:	1c19      	adds	r1, r3, #0
 800a7dc:	6838      	ldr	r0, [r7, #0]
 800a7de:	f7f6 fd1d 	bl	800121c <__aeabi_fsub>
 800a7e2:	1c03      	adds	r3, r0, #0
 800a7e4:	1c19      	adds	r1, r3, #0
 800a7e6:	1c20      	adds	r0, r4, #0
 800a7e8:	f7f6 fbda 	bl	8000fa0 <__aeabi_fmul>
 800a7ec:	1c03      	adds	r3, r0, #0
 800a7ee:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a7f0:	4940      	ldr	r1, [pc, #256]	@ (800a8f4 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a7f2:	68b8      	ldr	r0, [r7, #8]
 800a7f4:	f7f5 fe9c 	bl	8000530 <__aeabi_fcmplt>
 800a7f8:	1e03      	subs	r3, r0, #0
 800a7fa:	d001      	beq.n	800a800 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a7fc:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a7fe:	e075      	b.n	800a8ec <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a800:	493e      	ldr	r1, [pc, #248]	@ (800a8fc <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a802:	68b8      	ldr	r0, [r7, #8]
 800a804:	f7f5 fea8 	bl	8000558 <__aeabi_fcmpgt>
 800a808:	1e03      	subs	r3, r0, #0
 800a80a:	d001      	beq.n	800a810 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a80c:	2300      	movs	r3, #0
 800a80e:	e06d      	b.n	800a8ec <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a810:	2100      	movs	r1, #0
 800a812:	6838      	ldr	r0, [r7, #0]
 800a814:	f7f5 feaa 	bl	800056c <__aeabi_fcmpge>
 800a818:	1e03      	subs	r3, r0, #0
 800a81a:	d047      	beq.n	800a8ac <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2288      	movs	r2, #136	@ 0x88
 800a820:	589b      	ldr	r3, [r3, r2]
 800a822:	21fe      	movs	r1, #254	@ 0xfe
 800a824:	0589      	lsls	r1, r1, #22
 800a826:	1c18      	adds	r0, r3, #0
 800a828:	f7f5 fe7c 	bl	8000524 <__aeabi_fcmpeq>
 800a82c:	1e03      	subs	r3, r0, #0
 800a82e:	d00e      	beq.n	800a84e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	1c19      	adds	r1, r3, #0
 800a836:	20fe      	movs	r0, #254	@ 0xfe
 800a838:	0580      	lsls	r0, r0, #22
 800a83a:	f7f6 fcef 	bl	800121c <__aeabi_fsub>
 800a83e:	1c03      	adds	r3, r0, #0
 800a840:	492f      	ldr	r1, [pc, #188]	@ (800a900 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a842:	1c18      	adds	r0, r3, #0
 800a844:	f7f6 fbac 	bl	8000fa0 <__aeabi_fmul>
 800a848:	1c03      	adds	r3, r0, #0
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e012      	b.n	800a874 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	492c      	ldr	r1, [pc, #176]	@ (800a904 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a854:	1c18      	adds	r0, r3, #0
 800a856:	f7f6 fba3 	bl	8000fa0 <__aeabi_fmul>
 800a85a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a85c:	1c19      	adds	r1, r3, #0
 800a85e:	4826      	ldr	r0, [pc, #152]	@ (800a8f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a860:	f7f6 fcdc 	bl	800121c <__aeabi_fsub>
 800a864:	1c03      	adds	r3, r0, #0
 800a866:	2181      	movs	r1, #129	@ 0x81
 800a868:	05c9      	lsls	r1, r1, #23
 800a86a:	1c18      	adds	r0, r3, #0
 800a86c:	f7f6 f9b2 	bl	8000bd4 <__aeabi_fdiv>
 800a870:	1c03      	adds	r3, r0, #0
 800a872:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a874:	4920      	ldr	r1, [pc, #128]	@ (800a8f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7f6 f822 	bl	80008c0 <__aeabi_fadd>
 800a87c:	1c03      	adds	r3, r0, #0
 800a87e:	1c1c      	adds	r4, r3, #0
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	1c18      	adds	r0, r3, #0
 800a884:	f017 fc0a 	bl	802209c <expf>
 800a888:	1c03      	adds	r3, r0, #0
 800a88a:	21fe      	movs	r1, #254	@ 0xfe
 800a88c:	0589      	lsls	r1, r1, #22
 800a88e:	1c18      	adds	r0, r3, #0
 800a890:	f7f6 f816 	bl	80008c0 <__aeabi_fadd>
 800a894:	1c03      	adds	r3, r0, #0
 800a896:	1c19      	adds	r1, r3, #0
 800a898:	1c20      	adds	r0, r4, #0
 800a89a:	f7f6 f99b 	bl	8000bd4 <__aeabi_fdiv>
 800a89e:	1c03      	adds	r3, r0, #0
 800a8a0:	68f9      	ldr	r1, [r7, #12]
 800a8a2:	1c18      	adds	r0, r3, #0
 800a8a4:	f7f6 fcba 	bl	800121c <__aeabi_fsub>
 800a8a8:	1c03      	adds	r3, r0, #0
 800a8aa:	e01f      	b.n	800a8ec <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2188      	movs	r1, #136	@ 0x88
 800a8b4:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a8b6:	1c19      	adds	r1, r3, #0
 800a8b8:	1c10      	adds	r0, r2, #0
 800a8ba:	f7f6 f98b 	bl	8000bd4 <__aeabi_fdiv>
 800a8be:	1c03      	adds	r3, r0, #0
 800a8c0:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	1c18      	adds	r0, r3, #0
 800a8c6:	f017 fbe9 	bl	802209c <expf>
 800a8ca:	1c03      	adds	r3, r0, #0
 800a8cc:	21fe      	movs	r1, #254	@ 0xfe
 800a8ce:	0589      	lsls	r1, r1, #22
 800a8d0:	1c18      	adds	r0, r3, #0
 800a8d2:	f7f5 fff5 	bl	80008c0 <__aeabi_fadd>
 800a8d6:	1c03      	adds	r3, r0, #0
 800a8d8:	1c19      	adds	r1, r3, #0
 800a8da:	4807      	ldr	r0, [pc, #28]	@ (800a8f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a8dc:	f7f6 f97a 	bl	8000bd4 <__aeabi_fdiv>
 800a8e0:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a8e2:	1c19      	adds	r1, r3, #0
 800a8e4:	1c20      	adds	r0, r4, #0
 800a8e6:	f7f6 fb5b 	bl	8000fa0 <__aeabi_fmul>
 800a8ea:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a8ec:	1c18      	adds	r0, r3, #0
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	b005      	add	sp, #20
 800a8f2:	bd90      	pop	{r4, r7, pc}
 800a8f4:	c2480000 	.word	0xc2480000
 800a8f8:	43fa0000 	.word	0x43fa0000
 800a8fc:	42480000 	.word	0x42480000
 800a900:	3f8041ab 	.word	0x3f8041ab
 800a904:	40a00000 	.word	0x40a00000

0800a908 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a908:	b590      	push	{r4, r7, lr}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4913      	ldr	r1, [pc, #76]	@ (800a968 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a91a:	1c18      	adds	r0, r3, #0
 800a91c:	f7f5 ffd0 	bl	80008c0 <__aeabi_fadd>
 800a920:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a922:	1c19      	adds	r1, r3, #0
 800a924:	1c20      	adds	r0, r4, #0
 800a926:	f7f6 f955 	bl	8000bd4 <__aeabi_fdiv>
 800a92a:	1c03      	adds	r3, r0, #0
 800a92c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	228c      	movs	r2, #140	@ 0x8c
 800a932:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	490b      	ldr	r1, [pc, #44]	@ (800a96c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a93e:	1c18      	adds	r0, r3, #0
 800a940:	f7f5 ffbe 	bl	80008c0 <__aeabi_fadd>
 800a944:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a946:	1c19      	adds	r1, r3, #0
 800a948:	1c20      	adds	r0, r4, #0
 800a94a:	f7f6 f943 	bl	8000bd4 <__aeabi_fdiv>
 800a94e:	1c03      	adds	r3, r0, #0
 800a950:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2290      	movs	r2, #144	@ 0x90
 800a956:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2294      	movs	r2, #148	@ 0x94
 800a95c:	2100      	movs	r1, #0
 800a95e:	5499      	strb	r1, [r3, r2]
}
 800a960:	46c0      	nop			@ (mov r8, r8)
 800a962:	46bd      	mov	sp, r7
 800a964:	b003      	add	sp, #12
 800a966:	bd90      	pop	{r4, r7, pc}
 800a968:	41a00000 	.word	0x41a00000
 800a96c:	43fa0000 	.word	0x43fa0000

0800a970 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800a970:	b590      	push	{r4, r7, lr}
 800a972:	b087      	sub	sp, #28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2294      	movs	r2, #148	@ 0x94
 800a97e:	5c9b      	ldrb	r3, [r3, r2]
 800a980:	2201      	movs	r2, #1
 800a982:	4053      	eors	r3, r2
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00f      	beq.n	800a9aa <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2198      	movs	r1, #152	@ 0x98
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	219c      	movs	r1, #156	@ 0x9c
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	21a0      	movs	r1, #160	@ 0xa0
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2294      	movs	r2, #148	@ 0x94
 800a9a6:	2101      	movs	r1, #1
 800a9a8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	228c      	movs	r2, #140	@ 0x8c
 800a9ae:	589b      	ldr	r3, [r3, r2]
 800a9b0:	1c19      	adds	r1, r3, #0
 800a9b2:	20fe      	movs	r0, #254	@ 0xfe
 800a9b4:	0580      	lsls	r0, r0, #22
 800a9b6:	f7f6 fc31 	bl	800121c <__aeabi_fsub>
 800a9ba:	1c03      	adds	r3, r0, #0
 800a9bc:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2298      	movs	r2, #152	@ 0x98
 800a9c2:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a9c4:	1c19      	adds	r1, r3, #0
 800a9c6:	f7f6 faeb 	bl	8000fa0 <__aeabi_fmul>
 800a9ca:	1c03      	adds	r3, r0, #0
 800a9cc:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	228c      	movs	r2, #140	@ 0x8c
 800a9d2:	589b      	ldr	r3, [r3, r2]
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	1c18      	adds	r0, r3, #0
 800a9d8:	f7f6 fae2 	bl	8000fa0 <__aeabi_fmul>
 800a9dc:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800a9de:	1c19      	adds	r1, r3, #0
 800a9e0:	1c20      	adds	r0, r4, #0
 800a9e2:	f7f5 ff6d 	bl	80008c0 <__aeabi_fadd>
 800a9e6:	1c03      	adds	r3, r0, #0
 800a9e8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2298      	movs	r2, #152	@ 0x98
 800a9ee:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2290      	movs	r2, #144	@ 0x90
 800a9f4:	589b      	ldr	r3, [r3, r2]
 800a9f6:	1c19      	adds	r1, r3, #0
 800a9f8:	20fe      	movs	r0, #254	@ 0xfe
 800a9fa:	0580      	lsls	r0, r0, #22
 800a9fc:	f7f6 fc0e 	bl	800121c <__aeabi_fsub>
 800aa00:	1c03      	adds	r3, r0, #0
 800aa02:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	229c      	movs	r2, #156	@ 0x9c
 800aa08:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800aa0a:	1c19      	adds	r1, r3, #0
 800aa0c:	f7f6 fac8 	bl	8000fa0 <__aeabi_fmul>
 800aa10:	1c03      	adds	r3, r0, #0
 800aa12:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2290      	movs	r2, #144	@ 0x90
 800aa18:	589b      	ldr	r3, [r3, r2]
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	1c18      	adds	r0, r3, #0
 800aa1e:	f7f6 fabf 	bl	8000fa0 <__aeabi_fmul>
 800aa22:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800aa24:	1c19      	adds	r1, r3, #0
 800aa26:	1c20      	adds	r0, r4, #0
 800aa28:	f7f5 ff4a 	bl	80008c0 <__aeabi_fadd>
 800aa2c:	1c03      	adds	r3, r0, #0
 800aa2e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	229c      	movs	r2, #156	@ 0x9c
 800aa34:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2298      	movs	r2, #152	@ 0x98
 800aa3a:	589a      	ldr	r2, [r3, r2]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	219c      	movs	r1, #156	@ 0x9c
 800aa40:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800aa42:	1c19      	adds	r1, r3, #0
 800aa44:	1c10      	adds	r0, r2, #0
 800aa46:	f7f6 fbe9 	bl	800121c <__aeabi_fsub>
 800aa4a:	1c03      	adds	r3, r0, #0
 800aa4c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800aa4e:	2100      	movs	r1, #0
 800aa50:	6978      	ldr	r0, [r7, #20]
 800aa52:	f7f5 fd6d 	bl	8000530 <__aeabi_fcmplt>
 800aa56:	1e03      	subs	r3, r0, #0
 800aa58:	d004      	beq.n	800aa64 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2280      	movs	r2, #128	@ 0x80
 800aa5e:	0612      	lsls	r2, r2, #24
 800aa60:	4053      	eors	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800aa64:	4923      	ldr	r1, [pc, #140]	@ (800aaf4 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800aa66:	6978      	ldr	r0, [r7, #20]
 800aa68:	f7f6 fa9a 	bl	8000fa0 <__aeabi_fmul>
 800aa6c:	1c03      	adds	r3, r0, #0
 800aa6e:	1c18      	adds	r0, r3, #0
 800aa70:	f017 fb14 	bl	802209c <expf>
 800aa74:	1c03      	adds	r3, r0, #0
 800aa76:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800aa78:	491f      	ldr	r1, [pc, #124]	@ (800aaf8 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800aa7a:	6938      	ldr	r0, [r7, #16]
 800aa7c:	f7f6 fa90 	bl	8000fa0 <__aeabi_fmul>
 800aa80:	1c03      	adds	r3, r0, #0
 800aa82:	491e      	ldr	r1, [pc, #120]	@ (800aafc <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800aa84:	1c18      	adds	r0, r3, #0
 800aa86:	f7f5 ff1b 	bl	80008c0 <__aeabi_fadd>
 800aa8a:	1c03      	adds	r3, r0, #0
 800aa8c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685c      	ldr	r4, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	68f9      	ldr	r1, [r7, #12]
 800aa98:	1c18      	adds	r0, r3, #0
 800aa9a:	f7f5 ff11 	bl	80008c0 <__aeabi_fadd>
 800aa9e:	1c03      	adds	r3, r0, #0
 800aaa0:	1c19      	adds	r1, r3, #0
 800aaa2:	1c20      	adds	r0, r4, #0
 800aaa4:	f7f6 f896 	bl	8000bd4 <__aeabi_fdiv>
 800aaa8:	1c03      	adds	r3, r0, #0
 800aaaa:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	20fe      	movs	r0, #254	@ 0xfe
 800aab0:	0580      	lsls	r0, r0, #22
 800aab2:	f7f6 fbb3 	bl	800121c <__aeabi_fsub>
 800aab6:	1c03      	adds	r3, r0, #0
 800aab8:	1c18      	adds	r0, r3, #0
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	22a0      	movs	r2, #160	@ 0xa0
 800aabe:	589b      	ldr	r3, [r3, r2]
 800aac0:	1c19      	adds	r1, r3, #0
 800aac2:	f7f6 fa6d 	bl	8000fa0 <__aeabi_fmul>
 800aac6:	1c03      	adds	r3, r0, #0
 800aac8:	1c1c      	adds	r4, r3, #0
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	68b8      	ldr	r0, [r7, #8]
 800aace:	f7f6 fa67 	bl	8000fa0 <__aeabi_fmul>
 800aad2:	1c03      	adds	r3, r0, #0
 800aad4:	1c19      	adds	r1, r3, #0
 800aad6:	1c20      	adds	r0, r4, #0
 800aad8:	f7f5 fef2 	bl	80008c0 <__aeabi_fadd>
 800aadc:	1c03      	adds	r3, r0, #0
 800aade:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	22a0      	movs	r2, #160	@ 0xa0
 800aae4:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	22a0      	movs	r2, #160	@ 0xa0
 800aaea:	589b      	ldr	r3, [r3, r2]
}
 800aaec:	1c18      	adds	r0, r3, #0
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	b007      	add	sp, #28
 800aaf2:	bd90      	pop	{r4, r7, pc}
 800aaf4:	be4ccccd 	.word	0xbe4ccccd
 800aaf8:	43f00000 	.word	0x43f00000
 800aafc:	41a00000 	.word	0x41a00000

0800ab00 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	000a      	movs	r2, r1
 800ab0a:	1cbb      	adds	r3, r7, #2
 800ab0c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ab0e:	230d      	movs	r3, #13
 800ab10:	18fb      	adds	r3, r7, r3
 800ab12:	22ff      	movs	r2, #255	@ 0xff
 800ab14:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ab16:	230e      	movs	r3, #14
 800ab18:	18fb      	adds	r3, r7, r3
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	801a      	strh	r2, [r3, #0]
 800ab1e:	e037      	b.n	800ab90 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ab20:	230e      	movs	r3, #14
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	881b      	ldrh	r3, [r3, #0]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	18d3      	adds	r3, r2, r3
 800ab2a:	7819      	ldrb	r1, [r3, #0]
 800ab2c:	220d      	movs	r2, #13
 800ab2e:	18bb      	adds	r3, r7, r2
 800ab30:	18ba      	adds	r2, r7, r2
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	404a      	eors	r2, r1
 800ab36:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ab38:	230c      	movs	r3, #12
 800ab3a:	18fb      	adds	r3, r7, r3
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e01b      	b.n	800ab7a <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800ab42:	210d      	movs	r1, #13
 800ab44:	187b      	adds	r3, r7, r1
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b25b      	sxtb	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	da09      	bge.n	800ab62 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800ab4e:	187b      	adds	r3, r7, r1
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	b25b      	sxtb	r3, r3
 800ab56:	2231      	movs	r2, #49	@ 0x31
 800ab58:	4053      	eors	r3, r2
 800ab5a:	b25a      	sxtb	r2, r3
 800ab5c:	187b      	adds	r3, r7, r1
 800ab5e:	701a      	strb	r2, [r3, #0]
 800ab60:	e005      	b.n	800ab6e <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800ab62:	230d      	movs	r3, #13
 800ab64:	18fa      	adds	r2, r7, r3
 800ab66:	18fb      	adds	r3, r7, r3
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	18db      	adds	r3, r3, r3
 800ab6c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ab6e:	220c      	movs	r2, #12
 800ab70:	18bb      	adds	r3, r7, r2
 800ab72:	18ba      	adds	r2, r7, r2
 800ab74:	7812      	ldrb	r2, [r2, #0]
 800ab76:	3a01      	subs	r2, #1
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	18fb      	adds	r3, r7, r3
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1de      	bne.n	800ab42 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ab84:	220e      	movs	r2, #14
 800ab86:	18bb      	adds	r3, r7, r2
 800ab88:	18ba      	adds	r2, r7, r2
 800ab8a:	8812      	ldrh	r2, [r2, #0]
 800ab8c:	3201      	adds	r2, #1
 800ab8e:	801a      	strh	r2, [r3, #0]
 800ab90:	230e      	movs	r3, #14
 800ab92:	18fa      	adds	r2, r7, r3
 800ab94:	1cbb      	adds	r3, r7, #2
 800ab96:	8812      	ldrh	r2, [r2, #0]
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d3c0      	bcc.n	800ab20 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800ab9e:	230d      	movs	r3, #13
 800aba0:	18fb      	adds	r3, r7, r3
 800aba2:	781b      	ldrb	r3, [r3, #0]
}
 800aba4:	0018      	movs	r0, r3
 800aba6:	46bd      	mov	sp, r7
 800aba8:	b004      	add	sp, #16
 800abaa:	bd80      	pop	{r7, pc}

0800abac <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	0008      	movs	r0, r1
 800abb6:	0011      	movs	r1, r2
 800abb8:	1cbb      	adds	r3, r7, #2
 800abba:	1c02      	adds	r2, r0, #0
 800abbc:	801a      	strh	r2, [r3, #0]
 800abbe:	1c7b      	adds	r3, r7, #1
 800abc0:	1c0a      	adds	r2, r1, #0
 800abc2:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800abc4:	1cbb      	adds	r3, r7, #2
 800abc6:	881a      	ldrh	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	0011      	movs	r1, r2
 800abcc:	0018      	movs	r0, r3
 800abce:	f7ff ff97 	bl	800ab00 <sensirion_i2c_generate_crc>
 800abd2:	0003      	movs	r3, r0
 800abd4:	001a      	movs	r2, r3
 800abd6:	1c7b      	adds	r3, r7, #1
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	4293      	cmp	r3, r2
 800abdc:	d001      	beq.n	800abe2 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	0018      	movs	r0, r3
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b002      	add	sp, #8
 800abea:	bd80      	pop	{r7, pc}

0800abec <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	0008      	movs	r0, r1
 800abf6:	0011      	movs	r1, r2
 800abf8:	1cbb      	adds	r3, r7, #2
 800abfa:	1c02      	adds	r2, r0, #0
 800abfc:	801a      	strh	r2, [r3, #0]
 800abfe:	003b      	movs	r3, r7
 800ac00:	1c0a      	adds	r2, r1, #0
 800ac02:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ac04:	003b      	movs	r3, r7
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	0a1b      	lsrs	r3, r3, #8
 800ac0a:	b299      	uxth	r1, r3
 800ac0c:	1cbb      	adds	r3, r7, #2
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	1cba      	adds	r2, r7, #2
 800ac12:	1c58      	adds	r0, r3, #1
 800ac14:	8010      	strh	r0, [r2, #0]
 800ac16:	001a      	movs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	189b      	adds	r3, r3, r2
 800ac1c:	b2ca      	uxtb	r2, r1
 800ac1e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ac20:	1cbb      	adds	r3, r7, #2
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	1cba      	adds	r2, r7, #2
 800ac26:	1c59      	adds	r1, r3, #1
 800ac28:	8011      	strh	r1, [r2, #0]
 800ac2a:	001a      	movs	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	189b      	adds	r3, r3, r2
 800ac30:	003a      	movs	r2, r7
 800ac32:	8812      	ldrh	r2, [r2, #0]
 800ac34:	b2d2      	uxtb	r2, r2
 800ac36:	701a      	strb	r2, [r3, #0]
    return offset;
 800ac38:	1cbb      	adds	r3, r7, #2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
}
 800ac3c:	0018      	movs	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	b002      	add	sp, #8
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800ac44:	b590      	push	{r4, r7, lr}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	0008      	movs	r0, r1
 800ac4e:	0011      	movs	r1, r2
 800ac50:	1cbb      	adds	r3, r7, #2
 800ac52:	1c02      	adds	r2, r0, #0
 800ac54:	801a      	strh	r2, [r3, #0]
 800ac56:	003b      	movs	r3, r7
 800ac58:	1c0a      	adds	r2, r1, #0
 800ac5a:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ac5c:	003b      	movs	r3, r7
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	0a1b      	lsrs	r3, r3, #8
 800ac62:	b299      	uxth	r1, r3
 800ac64:	1cbb      	adds	r3, r7, #2
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	1cba      	adds	r2, r7, #2
 800ac6a:	1c58      	adds	r0, r3, #1
 800ac6c:	8010      	strh	r0, [r2, #0]
 800ac6e:	001a      	movs	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	189b      	adds	r3, r3, r2
 800ac74:	b2ca      	uxtb	r2, r1
 800ac76:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800ac78:	1cbb      	adds	r3, r7, #2
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	1cba      	adds	r2, r7, #2
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	8011      	strh	r1, [r2, #0]
 800ac82:	001a      	movs	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	189b      	adds	r3, r3, r2
 800ac88:	003a      	movs	r2, r7
 800ac8a:	8812      	ldrh	r2, [r2, #0]
 800ac8c:	b2d2      	uxtb	r2, r2
 800ac8e:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800ac90:	1cbb      	adds	r3, r7, #2
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	3b02      	subs	r3, #2
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800ac9a:	1cbb      	adds	r3, r7, #2
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	18d4      	adds	r4, r2, r3
 800aca2:	2102      	movs	r1, #2
 800aca4:	f7ff ff2c 	bl	800ab00 <sensirion_i2c_generate_crc>
 800aca8:	0003      	movs	r3, r0
 800acaa:	7023      	strb	r3, [r4, #0]
    offset++;
 800acac:	1cbb      	adds	r3, r7, #2
 800acae:	881a      	ldrh	r2, [r3, #0]
 800acb0:	1cbb      	adds	r3, r7, #2
 800acb2:	3201      	adds	r2, #1
 800acb4:	801a      	strh	r2, [r3, #0]

    return offset;
 800acb6:	1cbb      	adds	r3, r7, #2
 800acb8:	881b      	ldrh	r3, [r3, #0]
}
 800acba:	0018      	movs	r0, r3
 800acbc:	46bd      	mov	sp, r7
 800acbe:	b003      	add	sp, #12
 800acc0:	bd90      	pop	{r4, r7, pc}

0800acc2 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	0008      	movs	r0, r1
 800accc:	0011      	movs	r1, r2
 800acce:	1cbb      	adds	r3, r7, #2
 800acd0:	1c02      	adds	r2, r0, #0
 800acd2:	801a      	strh	r2, [r3, #0]
 800acd4:	003b      	movs	r3, r7
 800acd6:	1c0a      	adds	r2, r1, #0
 800acd8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800acda:	003b      	movs	r3, r7
 800acdc:	881a      	ldrh	r2, [r3, #0]
 800acde:	1cbb      	adds	r3, r7, #2
 800ace0:	8819      	ldrh	r1, [r3, #0]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	0018      	movs	r0, r3
 800ace6:	f7ff ffad 	bl	800ac44 <sensirion_i2c_add_uint16_t_to_buffer>
 800acea:	0003      	movs	r3, r0
}
 800acec:	0018      	movs	r0, r3
 800acee:	46bd      	mov	sp, r7
 800acf0:	b002      	add	sp, #8
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6039      	str	r1, [r7, #0]
 800acfc:	0011      	movs	r1, r2
 800acfe:	1dfb      	adds	r3, r7, #7
 800ad00:	1c02      	adds	r2, r0, #0
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	1d3b      	adds	r3, r7, #4
 800ad06:	1c0a      	adds	r2, r1, #0
 800ad08:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800ad0a:	1d3b      	adds	r3, r7, #4
 800ad0c:	881a      	ldrh	r2, [r3, #0]
 800ad0e:	6839      	ldr	r1, [r7, #0]
 800ad10:	1dfb      	adds	r3, r7, #7
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	0018      	movs	r0, r3
 800ad16:	f7fe fa49 	bl	80091ac <sensirion_i2c_hal_write>
 800ad1a:	0003      	movs	r3, r0
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b002      	add	sp, #8
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800ad24:	b5b0      	push	{r4, r5, r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6039      	str	r1, [r7, #0]
 800ad2c:	0011      	movs	r1, r2
 800ad2e:	1dfb      	adds	r3, r7, #7
 800ad30:	1c02      	adds	r2, r0, #0
 800ad32:	701a      	strb	r2, [r3, #0]
 800ad34:	1d3b      	adds	r3, r7, #4
 800ad36:	1c0a      	adds	r2, r1, #0
 800ad38:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800ad3a:	1d3b      	adds	r3, r7, #4
 800ad3c:	881b      	ldrh	r3, [r3, #0]
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	220a      	movs	r2, #10
 800ad44:	18ba      	adds	r2, r7, r2
 800ad46:	1c19      	adds	r1, r3, #0
 800ad48:	1c0b      	adds	r3, r1, #0
 800ad4a:	18db      	adds	r3, r3, r3
 800ad4c:	185b      	adds	r3, r3, r1
 800ad4e:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800ad50:	1d3b      	adds	r3, r7, #4
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	2201      	movs	r2, #1
 800ad56:	4013      	ands	r3, r2
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800ad5e:	2304      	movs	r3, #4
 800ad60:	e06b      	b.n	800ae3a <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800ad62:	230a      	movs	r3, #10
 800ad64:	18fb      	adds	r3, r7, r3
 800ad66:	881a      	ldrh	r2, [r3, #0]
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	1dfb      	adds	r3, r7, #7
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f7fe f9fc 	bl	800916c <sensirion_i2c_hal_read>
 800ad74:	0003      	movs	r3, r0
 800ad76:	001a      	movs	r2, r3
 800ad78:	2108      	movs	r1, #8
 800ad7a:	187b      	adds	r3, r7, r1
 800ad7c:	801a      	strh	r2, [r3, #0]
    if (error) {
 800ad7e:	000a      	movs	r2, r1
 800ad80:	18bb      	adds	r3, r7, r2
 800ad82:	2100      	movs	r1, #0
 800ad84:	5e5b      	ldrsh	r3, [r3, r1]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800ad8a:	18bb      	adds	r3, r7, r2
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	5e9b      	ldrsh	r3, [r3, r2]
 800ad90:	e053      	b.n	800ae3a <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ad92:	230e      	movs	r3, #14
 800ad94:	18fb      	adds	r3, r7, r3
 800ad96:	2200      	movs	r2, #0
 800ad98:	801a      	strh	r2, [r3, #0]
 800ad9a:	230c      	movs	r3, #12
 800ad9c:	18fb      	adds	r3, r7, r3
 800ad9e:	2200      	movs	r2, #0
 800ada0:	801a      	strh	r2, [r3, #0]
 800ada2:	e041      	b.n	800ae28 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800ada4:	210e      	movs	r1, #14
 800ada6:	187b      	adds	r3, r7, r1
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800adae:	187b      	adds	r3, r7, r1
 800adb0:	881b      	ldrh	r3, [r3, #0]
 800adb2:	3302      	adds	r3, #2
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	001a      	movs	r2, r3
 800adbc:	2102      	movs	r1, #2
 800adbe:	f7ff fef5 	bl	800abac <sensirion_i2c_check_crc>
 800adc2:	0003      	movs	r3, r0
 800adc4:	001a      	movs	r2, r3
 800adc6:	2108      	movs	r1, #8
 800adc8:	187b      	adds	r3, r7, r1
 800adca:	801a      	strh	r2, [r3, #0]
        if (error) {
 800adcc:	000a      	movs	r2, r1
 800adce:	18bb      	adds	r3, r7, r2
 800add0:	2100      	movs	r1, #0
 800add2:	5e5b      	ldrsh	r3, [r3, r1]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d003      	beq.n	800ade0 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800add8:	18bb      	adds	r3, r7, r2
 800adda:	2200      	movs	r2, #0
 800addc:	5e9b      	ldrsh	r3, [r3, r2]
 800adde:	e02c      	b.n	800ae3a <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800ade0:	240e      	movs	r4, #14
 800ade2:	193b      	adds	r3, r7, r4
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	18d2      	adds	r2, r2, r3
 800adea:	250c      	movs	r5, #12
 800adec:	197b      	adds	r3, r7, r5
 800adee:	881b      	ldrh	r3, [r3, #0]
 800adf0:	1979      	adds	r1, r7, r5
 800adf2:	1c58      	adds	r0, r3, #1
 800adf4:	8008      	strh	r0, [r1, #0]
 800adf6:	0019      	movs	r1, r3
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	185b      	adds	r3, r3, r1
 800adfc:	7812      	ldrb	r2, [r2, #0]
 800adfe:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800ae00:	193b      	adds	r3, r7, r4
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	18d2      	adds	r2, r2, r3
 800ae0a:	197b      	adds	r3, r7, r5
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	1979      	adds	r1, r7, r5
 800ae10:	1c58      	adds	r0, r3, #1
 800ae12:	8008      	strh	r0, [r1, #0]
 800ae14:	0019      	movs	r1, r3
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	185b      	adds	r3, r3, r1
 800ae1a:	7812      	ldrb	r2, [r2, #0]
 800ae1c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ae1e:	193b      	adds	r3, r7, r4
 800ae20:	193a      	adds	r2, r7, r4
 800ae22:	8812      	ldrh	r2, [r2, #0]
 800ae24:	3203      	adds	r2, #3
 800ae26:	801a      	strh	r2, [r3, #0]
 800ae28:	230e      	movs	r3, #14
 800ae2a:	18fa      	adds	r2, r7, r3
 800ae2c:	230a      	movs	r3, #10
 800ae2e:	18fb      	adds	r3, r7, r3
 800ae30:	8812      	ldrh	r2, [r2, #0]
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d3b5      	bcc.n	800ada4 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	0018      	movs	r0, r3
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	b004      	add	sp, #16
 800ae40:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ae44 <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ae44:	b590      	push	{r4, r7, lr}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6039      	str	r1, [r7, #0]
 800ae4c:	0011      	movs	r1, r2
 800ae4e:	1dfb      	adds	r3, r7, #7
 800ae50:	1c02      	adds	r2, r0, #0
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	1dbb      	adds	r3, r7, #6
 800ae56:	1c0a      	adds	r2, r1, #0
 800ae58:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ae5a:	4b08      	ldr	r3, [pc, #32]	@ (800ae7c <ReadRegister+0x38>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d008      	beq.n	800ae74 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800ae62:	4b06      	ldr	r3, [pc, #24]	@ (800ae7c <ReadRegister+0x38>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	1dba      	adds	r2, r7, #6
 800ae68:	7814      	ldrb	r4, [r2, #0]
 800ae6a:	6839      	ldr	r1, [r7, #0]
 800ae6c:	1dfa      	adds	r2, r7, #7
 800ae6e:	7810      	ldrb	r0, [r2, #0]
 800ae70:	0022      	movs	r2, r4
 800ae72:	4798      	blx	r3
  }
}
 800ae74:	46c0      	nop			@ (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b003      	add	sp, #12
 800ae7a:	bd90      	pop	{r4, r7, pc}
 800ae7c:	200011e0 	.word	0x200011e0

0800ae80 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6039      	str	r1, [r7, #0]
 800ae88:	0011      	movs	r1, r2
 800ae8a:	1dfb      	adds	r3, r7, #7
 800ae8c:	1c02      	adds	r2, r0, #0
 800ae8e:	701a      	strb	r2, [r3, #0]
 800ae90:	1dbb      	adds	r3, r7, #6
 800ae92:	1c0a      	adds	r2, r1, #0
 800ae94:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ae96:	4b08      	ldr	r3, [pc, #32]	@ (800aeb8 <WriteRegister+0x38>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d008      	beq.n	800aeb0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800ae9e:	4b06      	ldr	r3, [pc, #24]	@ (800aeb8 <WriteRegister+0x38>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	1dba      	adds	r2, r7, #6
 800aea4:	7814      	ldrb	r4, [r2, #0]
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	1dfa      	adds	r2, r7, #7
 800aeaa:	7810      	ldrb	r0, [r2, #0]
 800aeac:	0022      	movs	r2, r4
 800aeae:	4798      	blx	r3
  }
}
 800aeb0:	46c0      	nop			@ (mov r8, r8)
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	b003      	add	sp, #12
 800aeb6:	bd90      	pop	{r4, r7, pc}
 800aeb8:	200011e4 	.word	0x200011e4

0800aebc <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800aec6:	4b07      	ldr	r3, [pc, #28]	@ (800aee4 <SGP_Init+0x28>)
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <SGP_Init+0x2c>)
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800aed2:	4b06      	ldr	r3, [pc, #24]	@ (800aeec <SGP_Init+0x30>)
 800aed4:	2100      	movs	r1, #0
 800aed6:	0018      	movs	r0, r3
 800aed8:	f7fe ff8c 	bl	8009df4 <GasIndexAlgorithm_init>
}
 800aedc:	46c0      	nop			@ (mov r8, r8)
 800aede:	46bd      	mov	sp, r7
 800aee0:	b002      	add	sp, #8
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	200011e0 	.word	0x200011e0
 800aee8:	200011e4 	.word	0x200011e4
 800aeec:	200011fc 	.word	0x200011fc

0800aef0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800aef4:	4b13      	ldr	r3, [pc, #76]	@ (800af44 <SGP_StartMeasurement+0x54>)
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00d      	beq.n	800af18 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800aefc:	4b12      	ldr	r3, [pc, #72]	@ (800af48 <SGP_StartMeasurement+0x58>)
 800aefe:	2208      	movs	r2, #8
 800af00:	0019      	movs	r1, r3
 800af02:	2059      	movs	r0, #89	@ 0x59
 800af04:	f7ff ffbc 	bl	800ae80 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800af08:	f003 f8fa 	bl	800e100 <HAL_GetTick>
 800af0c:	0003      	movs	r3, r0
 800af0e:	331e      	adds	r3, #30
 800af10:	001a      	movs	r2, r3
 800af12:	4b0e      	ldr	r3, [pc, #56]	@ (800af4c <SGP_StartMeasurement+0x5c>)
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	e00c      	b.n	800af32 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800af18:	4b0d      	ldr	r3, [pc, #52]	@ (800af50 <SGP_StartMeasurement+0x60>)
 800af1a:	2208      	movs	r2, #8
 800af1c:	0019      	movs	r1, r3
 800af1e:	2059      	movs	r0, #89	@ 0x59
 800af20:	f7ff ffae 	bl	800ae80 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800af24:	f003 f8ec 	bl	800e100 <HAL_GetTick>
 800af28:	0003      	movs	r3, r0
 800af2a:	33aa      	adds	r3, #170	@ 0xaa
 800af2c:	001a      	movs	r2, r3
 800af2e:	4b09      	ldr	r3, [pc, #36]	@ (800af54 <SGP_StartMeasurement+0x64>)
 800af30:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800af32:	4b09      	ldr	r3, [pc, #36]	@ (800af58 <SGP_StartMeasurement+0x68>)
 800af34:	2200      	movs	r2, #0
 800af36:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800af38:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <SGP_StartMeasurement+0x6c>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
}
 800af3e:	46c0      	nop			@ (mov r8, r8)
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	200012a4 	.word	0x200012a4
 800af48:	20000094 	.word	0x20000094
 800af4c:	200000a8 	.word	0x200000a8
 800af50:	2000008c 	.word	0x2000008c
 800af54:	200000a0 	.word	0x200000a0
 800af58:	200011f8 	.word	0x200011f8
 800af5c:	200011f9 	.word	0x200011f9

0800af60 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800af64:	4b04      	ldr	r3, [pc, #16]	@ (800af78 <SGP_HeatedUp+0x18>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	0018      	movs	r0, r3
 800af6a:	f002 fc27 	bl	800d7bc <TimestampIsReached>
 800af6e:	0003      	movs	r3, r0
}
 800af70:	0018      	movs	r0, r3
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	46c0      	nop			@ (mov r8, r8)
 800af78:	200000a0 	.word	0x200000a0

0800af7c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800af80:	4b04      	ldr	r3, [pc, #16]	@ (800af94 <SGP_MeasurementReady+0x18>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	0018      	movs	r0, r3
 800af86:	f002 fc19 	bl	800d7bc <TimestampIsReached>
 800af8a:	0003      	movs	r3, r0
}
 800af8c:	0018      	movs	r0, r3
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	46c0      	nop			@ (mov r8, r8)
 800af94:	200000a8 	.word	0x200000a8

0800af98 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800af9c:	4b04      	ldr	r3, [pc, #16]	@ (800afb0 <SGP_MeasurementDone+0x18>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	0018      	movs	r0, r3
 800afa2:	f002 fc0b 	bl	800d7bc <TimestampIsReached>
 800afa6:	0003      	movs	r3, r0
}
 800afa8:	0018      	movs	r0, r3
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	46c0      	nop			@ (mov r8, r8)
 800afb0:	200000a4 	.word	0x200000a4

0800afb4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800afb8:	4b04      	ldr	r3, [pc, #16]	@ (800afcc <SGP_TurnHeaterOff+0x18>)
 800afba:	2202      	movs	r2, #2
 800afbc:	0019      	movs	r1, r3
 800afbe:	2059      	movs	r0, #89	@ 0x59
 800afc0:	f7ff ff5e 	bl	800ae80 <WriteRegister>
}
 800afc4:	46c0      	nop			@ (mov r8, r8)
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	46c0      	nop			@ (mov r8, r8)
 800afcc:	20000084 	.word	0x20000084

0800afd0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800afd0:	b5b0      	push	{r4, r5, r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af02      	add	r7, sp, #8
 800afd6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800afd8:	f7ff ffc2 	bl	800af60 <SGP_HeatedUp>
 800afdc:	1e03      	subs	r3, r0, #0
 800afde:	d038      	beq.n	800b052 <SGP_GetMeasurementValues+0x82>
 800afe0:	4bcf      	ldr	r3, [pc, #828]	@ (800b320 <SGP_GetMeasurementValues+0x350>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2201      	movs	r2, #1
 800afe6:	4053      	eors	r3, r2
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d031      	beq.n	800b052 <SGP_GetMeasurementValues+0x82>
 800afee:	4bcd      	ldr	r3, [pc, #820]	@ (800b324 <SGP_GetMeasurementValues+0x354>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2201      	movs	r2, #1
 800aff4:	4053      	eors	r3, r2
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d02a      	beq.n	800b052 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800affc:	4aca      	ldr	r2, [pc, #808]	@ (800b328 <SGP_GetMeasurementValues+0x358>)
 800affe:	4bcb      	ldr	r3, [pc, #812]	@ (800b32c <SGP_GetMeasurementValues+0x35c>)
 800b000:	0019      	movs	r1, r3
 800b002:	2003      	movs	r0, #3
 800b004:	f002 fc30 	bl	800d868 <CreateLine>
    HeatUpIsDone = true;
 800b008:	4bc5      	ldr	r3, [pc, #788]	@ (800b320 <SGP_GetMeasurementValues+0x350>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b00e:	4bc8      	ldr	r3, [pc, #800]	@ (800b330 <SGP_GetMeasurementValues+0x360>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00d      	beq.n	800b032 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b016:	4bc7      	ldr	r3, [pc, #796]	@ (800b334 <SGP_GetMeasurementValues+0x364>)
 800b018:	2208      	movs	r2, #8
 800b01a:	0019      	movs	r1, r3
 800b01c:	2059      	movs	r0, #89	@ 0x59
 800b01e:	f7ff ff2f 	bl	800ae80 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b022:	f003 f86d 	bl	800e100 <HAL_GetTick>
 800b026:	0003      	movs	r3, r0
 800b028:	331e      	adds	r3, #30
 800b02a:	001a      	movs	r2, r3
 800b02c:	4bc2      	ldr	r3, [pc, #776]	@ (800b338 <SGP_GetMeasurementValues+0x368>)
 800b02e:	601a      	str	r2, [r3, #0]
 800b030:	e00c      	b.n	800b04c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b032:	4bc2      	ldr	r3, [pc, #776]	@ (800b33c <SGP_GetMeasurementValues+0x36c>)
 800b034:	2208      	movs	r2, #8
 800b036:	0019      	movs	r1, r3
 800b038:	2059      	movs	r0, #89	@ 0x59
 800b03a:	f7ff ff21 	bl	800ae80 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b03e:	f003 f85f 	bl	800e100 <HAL_GetTick>
 800b042:	0003      	movs	r3, r0
 800b044:	331e      	adds	r3, #30
 800b046:	001a      	movs	r2, r3
 800b048:	4bbb      	ldr	r3, [pc, #748]	@ (800b338 <SGP_GetMeasurementValues+0x368>)
 800b04a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b04c:	4bb5      	ldr	r3, [pc, #724]	@ (800b324 <SGP_GetMeasurementValues+0x354>)
 800b04e:	2201      	movs	r2, #1
 800b050:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b052:	4bb3      	ldr	r3, [pc, #716]	@ (800b320 <SGP_GetMeasurementValues+0x350>)
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d100      	bne.n	800b05c <SGP_GetMeasurementValues+0x8c>
 800b05a:	e199      	b.n	800b390 <SGP_GetMeasurementValues+0x3c0>
 800b05c:	f7ff ff8e 	bl	800af7c <SGP_MeasurementReady>
 800b060:	1e03      	subs	r3, r0, #0
 800b062:	d100      	bne.n	800b066 <SGP_GetMeasurementValues+0x96>
 800b064:	e194      	b.n	800b390 <SGP_GetMeasurementValues+0x3c0>
 800b066:	4bb6      	ldr	r3, [pc, #728]	@ (800b340 <SGP_GetMeasurementValues+0x370>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2201      	movs	r2, #1
 800b06c:	4053      	eors	r3, r2
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b00      	cmp	r3, #0
 800b072:	d100      	bne.n	800b076 <SGP_GetMeasurementValues+0xa6>
 800b074:	e18c      	b.n	800b390 <SGP_GetMeasurementValues+0x3c0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800b076:	4bb3      	ldr	r3, [pc, #716]	@ (800b344 <SGP_GetMeasurementValues+0x374>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4ab2      	ldr	r2, [pc, #712]	@ (800b348 <SGP_GetMeasurementValues+0x378>)
 800b07e:	49ab      	ldr	r1, [pc, #684]	@ (800b32c <SGP_GetMeasurementValues+0x35c>)
 800b080:	2003      	movs	r0, #3
 800b082:	f002 fbf1 	bl	800d868 <CreateLine>
    MeasurementIsReady = true;
 800b086:	4bae      	ldr	r3, [pc, #696]	@ (800b340 <SGP_GetMeasurementValues+0x370>)
 800b088:	2201      	movs	r2, #1
 800b08a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b08c:	4baf      	ldr	r3, [pc, #700]	@ (800b34c <SGP_GetMeasurementValues+0x37c>)
 800b08e:	2203      	movs	r2, #3
 800b090:	0019      	movs	r1, r3
 800b092:	2059      	movs	r0, #89	@ 0x59
 800b094:	f7ff fed6 	bl	800ae44 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b098:	4bac      	ldr	r3, [pc, #688]	@ (800b34c <SGP_GetMeasurementValues+0x37c>)
 800b09a:	2203      	movs	r2, #3
 800b09c:	2103      	movs	r1, #3
 800b09e:	0018      	movs	r0, r3
 800b0a0:	f000 f9dc 	bl	800b45c <CheckCRC>
 800b0a4:	0003      	movs	r3, r0
 800b0a6:	001a      	movs	r2, r3
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	4053      	eors	r3, r2
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d02a      	beq.n	800b108 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800b0b2:	4aa7      	ldr	r2, [pc, #668]	@ (800b350 <SGP_GetMeasurementValues+0x380>)
 800b0b4:	4ba7      	ldr	r3, [pc, #668]	@ (800b354 <SGP_GetMeasurementValues+0x384>)
 800b0b6:	0019      	movs	r1, r3
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	f002 fbd5 	bl	800d868 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b0be:	4aa6      	ldr	r2, [pc, #664]	@ (800b358 <SGP_GetMeasurementValues+0x388>)
 800b0c0:	4ba6      	ldr	r3, [pc, #664]	@ (800b35c <SGP_GetMeasurementValues+0x38c>)
 800b0c2:	0019      	movs	r1, r3
 800b0c4:	2002      	movs	r0, #2
 800b0c6:	f002 fbcf 	bl	800d868 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b0ca:	230f      	movs	r3, #15
 800b0cc:	18fb      	adds	r3, r7, r3
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	e012      	b.n	800b0fa <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b0d4:	240f      	movs	r4, #15
 800b0d6:	193b      	adds	r3, r7, r4
 800b0d8:	7818      	ldrb	r0, [r3, #0]
 800b0da:	193b      	adds	r3, r7, r4
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	4a9b      	ldr	r2, [pc, #620]	@ (800b34c <SGP_GetMeasurementValues+0x37c>)
 800b0e0:	5cd3      	ldrb	r3, [r2, r3]
 800b0e2:	4a9f      	ldr	r2, [pc, #636]	@ (800b360 <SGP_GetMeasurementValues+0x390>)
 800b0e4:	4991      	ldr	r1, [pc, #580]	@ (800b32c <SGP_GetMeasurementValues+0x35c>)
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	0003      	movs	r3, r0
 800b0ea:	2003      	movs	r0, #3
 800b0ec:	f002 fbbc 	bl	800d868 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b0f0:	193b      	adds	r3, r7, r4
 800b0f2:	781a      	ldrb	r2, [r3, #0]
 800b0f4:	193b      	adds	r3, r7, r4
 800b0f6:	3201      	adds	r2, #1
 800b0f8:	701a      	strb	r2, [r3, #0]
 800b0fa:	230f      	movs	r3, #15
 800b0fc:	18fb      	adds	r3, r7, r3
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b02      	cmp	r3, #2
 800b102:	d9e7      	bls.n	800b0d4 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800b104:	2300      	movs	r3, #0
 800b106:	e15b      	b.n	800b3c0 <SGP_GetMeasurementValues+0x3f0>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b108:	f002 fffa 	bl	800e100 <HAL_GetTick>
 800b10c:	0003      	movs	r3, r0
 800b10e:	22fa      	movs	r2, #250	@ 0xfa
 800b110:	0092      	lsls	r2, r2, #2
 800b112:	189a      	adds	r2, r3, r2
 800b114:	4b93      	ldr	r3, [pc, #588]	@ (800b364 <SGP_GetMeasurementValues+0x394>)
 800b116:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b118:	f7ff ff4c 	bl	800afb4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b11c:	4b89      	ldr	r3, [pc, #548]	@ (800b344 <SGP_GetMeasurementValues+0x374>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	3301      	adds	r3, #1
 800b122:	b2da      	uxtb	r2, r3
 800b124:	4b87      	ldr	r3, [pc, #540]	@ (800b344 <SGP_GetMeasurementValues+0x374>)
 800b126:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b128:	4b86      	ldr	r3, [pc, #536]	@ (800b344 <SGP_GetMeasurementValues+0x374>)
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	4b8e      	ldr	r3, [pc, #568]	@ (800b368 <SGP_GetMeasurementValues+0x398>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d200      	bcs.n	800b136 <SGP_GetMeasurementValues+0x166>
 800b134:	e12c      	b.n	800b390 <SGP_GetMeasurementValues+0x3c0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b136:	4b85      	ldr	r3, [pc, #532]	@ (800b34c <SGP_GetMeasurementValues+0x37c>)
 800b138:	785b      	ldrb	r3, [r3, #1]
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	b21a      	sxth	r2, r3
 800b13e:	4b83      	ldr	r3, [pc, #524]	@ (800b34c <SGP_GetMeasurementValues+0x37c>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	b21b      	sxth	r3, r3
 800b144:	4313      	orrs	r3, r2
 800b146:	b21a      	sxth	r2, r3
 800b148:	240c      	movs	r4, #12
 800b14a:	193b      	adds	r3, r7, r4
 800b14c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800b14e:	193b      	adds	r3, r7, r4
 800b150:	881b      	ldrh	r3, [r3, #0]
 800b152:	4a86      	ldr	r2, [pc, #536]	@ (800b36c <SGP_GetMeasurementValues+0x39c>)
 800b154:	4975      	ldr	r1, [pc, #468]	@ (800b32c <SGP_GetMeasurementValues+0x35c>)
 800b156:	2003      	movs	r0, #3
 800b158:	f002 fb86 	bl	800d868 <CreateLine>
      int32_t tempVocIndex = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b160:	193b      	adds	r3, r7, r4
 800b162:	8819      	ldrh	r1, [r3, #0]
 800b164:	2308      	movs	r3, #8
 800b166:	18fa      	adds	r2, r7, r3
 800b168:	4b81      	ldr	r3, [pc, #516]	@ (800b370 <SGP_GetMeasurementValues+0x3a0>)
 800b16a:	0018      	movs	r0, r3
 800b16c:	f7fe fea6 	bl	8009ebc <GasIndexAlgorithm_process>
//      Debug("vocIndex value: %d", tempVocIndex);
      *vocIndex = tempVocIndex;
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dd5a      	ble.n	800b234 <SGP_GetMeasurementValues+0x264>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b64      	cmp	r3, #100	@ 0x64
 800b184:	dc56      	bgt.n	800b234 <SGP_GetMeasurementValues+0x264>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	0018      	movs	r0, r3
 800b18c:	f7f8 f918 	bl	80033c0 <__aeabi_i2d>
 800b190:	2200      	movs	r2, #0
 800b192:	4b78      	ldr	r3, [pc, #480]	@ (800b374 <SGP_GetMeasurementValues+0x3a4>)
 800b194:	f7f6 fe0e 	bl	8001db4 <__aeabi_ddiv>
 800b198:	0002      	movs	r2, r0
 800b19a:	000b      	movs	r3, r1
 800b19c:	2000      	movs	r0, #0
 800b19e:	4976      	ldr	r1, [pc, #472]	@ (800b378 <SGP_GetMeasurementValues+0x3a8>)
 800b1a0:	f7f7 fd14 	bl	8002bcc <__aeabi_dsub>
 800b1a4:	0002      	movs	r2, r0
 800b1a6:	000b      	movs	r3, r1
 800b1a8:	0014      	movs	r4, r2
 800b1aa:	001d      	movs	r5, r3
 800b1ac:	4b73      	ldr	r3, [pc, #460]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f7f8 f905 	bl	80033c0 <__aeabi_i2d>
 800b1b6:	0002      	movs	r2, r0
 800b1b8:	000b      	movs	r3, r1
 800b1ba:	0020      	movs	r0, r4
 800b1bc:	0029      	movs	r1, r5
 800b1be:	f7f7 fa3d 	bl	800263c <__aeabi_dmul>
 800b1c2:	0002      	movs	r2, r0
 800b1c4:	000b      	movs	r3, r1
 800b1c6:	0010      	movs	r0, r2
 800b1c8:	0019      	movs	r1, r3
 800b1ca:	f7f5 fa3f 	bl	800064c <__aeabi_d2uiz>
 800b1ce:	0003      	movs	r3, r0
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	4b6b      	ldr	r3, [pc, #428]	@ (800b380 <SGP_GetMeasurementValues+0x3b0>)
 800b1d4:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f7f8 f8f0 	bl	80033c0 <__aeabi_i2d>
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4b64      	ldr	r3, [pc, #400]	@ (800b374 <SGP_GetMeasurementValues+0x3a4>)
 800b1e4:	f7f6 fde6 	bl	8001db4 <__aeabi_ddiv>
 800b1e8:	0002      	movs	r2, r0
 800b1ea:	000b      	movs	r3, r1
 800b1ec:	0014      	movs	r4, r2
 800b1ee:	001d      	movs	r5, r3
 800b1f0:	4b62      	ldr	r3, [pc, #392]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f7f8 f8e3 	bl	80033c0 <__aeabi_i2d>
 800b1fa:	0002      	movs	r2, r0
 800b1fc:	000b      	movs	r3, r1
 800b1fe:	0020      	movs	r0, r4
 800b200:	0029      	movs	r1, r5
 800b202:	f7f7 fa1b 	bl	800263c <__aeabi_dmul>
 800b206:	0002      	movs	r2, r0
 800b208:	000b      	movs	r3, r1
 800b20a:	0010      	movs	r0, r2
 800b20c:	0019      	movs	r1, r3
 800b20e:	f7f5 fa1d 	bl	800064c <__aeabi_d2uiz>
 800b212:	0003      	movs	r3, r0
 800b214:	b29a      	uxth	r2, r3
 800b216:	4b5b      	ldr	r3, [pc, #364]	@ (800b384 <SGP_GetMeasurementValues+0x3b4>)
 800b218:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800b21a:	4b58      	ldr	r3, [pc, #352]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b21c:	881a      	ldrh	r2, [r3, #0]
 800b21e:	4b5a      	ldr	r3, [pc, #360]	@ (800b388 <SGP_GetMeasurementValues+0x3b8>)
 800b220:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800b222:	4b59      	ldr	r3, [pc, #356]	@ (800b388 <SGP_GetMeasurementValues+0x3b8>)
 800b224:	8818      	ldrh	r0, [r3, #0]
 800b226:	4b56      	ldr	r3, [pc, #344]	@ (800b380 <SGP_GetMeasurementValues+0x3b0>)
 800b228:	8819      	ldrh	r1, [r3, #0]
 800b22a:	4b56      	ldr	r3, [pc, #344]	@ (800b384 <SGP_GetMeasurementValues+0x3b4>)
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	001a      	movs	r2, r3
 800b230:	f001 fbda 	bl	800c9e8 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b64      	cmp	r3, #100	@ 0x64
 800b23a:	dd66      	ble.n	800b30a <SGP_GetMeasurementValues+0x33a>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	0018      	movs	r0, r3
 800b242:	f7f8 f8bd 	bl	80033c0 <__aeabi_i2d>
 800b246:	2200      	movs	r2, #0
 800b248:	4b4a      	ldr	r3, [pc, #296]	@ (800b374 <SGP_GetMeasurementValues+0x3a4>)
 800b24a:	f7f7 fcbf 	bl	8002bcc <__aeabi_dsub>
 800b24e:	0002      	movs	r2, r0
 800b250:	000b      	movs	r3, r1
 800b252:	0010      	movs	r0, r2
 800b254:	0019      	movs	r1, r3
 800b256:	2200      	movs	r2, #0
 800b258:	4b4c      	ldr	r3, [pc, #304]	@ (800b38c <SGP_GetMeasurementValues+0x3bc>)
 800b25a:	f7f6 fdab 	bl	8001db4 <__aeabi_ddiv>
 800b25e:	0002      	movs	r2, r0
 800b260:	000b      	movs	r3, r1
 800b262:	0014      	movs	r4, r2
 800b264:	001d      	movs	r5, r3
 800b266:	4b45      	ldr	r3, [pc, #276]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b268:	881b      	ldrh	r3, [r3, #0]
 800b26a:	0018      	movs	r0, r3
 800b26c:	f7f8 f8a8 	bl	80033c0 <__aeabi_i2d>
 800b270:	0002      	movs	r2, r0
 800b272:	000b      	movs	r3, r1
 800b274:	0020      	movs	r0, r4
 800b276:	0029      	movs	r1, r5
 800b278:	f7f7 f9e0 	bl	800263c <__aeabi_dmul>
 800b27c:	0002      	movs	r2, r0
 800b27e:	000b      	movs	r3, r1
 800b280:	0010      	movs	r0, r2
 800b282:	0019      	movs	r1, r3
 800b284:	f7f5 f9e2 	bl	800064c <__aeabi_d2uiz>
 800b288:	0003      	movs	r3, r0
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	4b3c      	ldr	r3, [pc, #240]	@ (800b380 <SGP_GetMeasurementValues+0x3b0>)
 800b28e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	0018      	movs	r0, r3
 800b296:	f7f8 f893 	bl	80033c0 <__aeabi_i2d>
 800b29a:	2200      	movs	r2, #0
 800b29c:	4b35      	ldr	r3, [pc, #212]	@ (800b374 <SGP_GetMeasurementValues+0x3a4>)
 800b29e:	f7f7 fc95 	bl	8002bcc <__aeabi_dsub>
 800b2a2:	0002      	movs	r2, r0
 800b2a4:	000b      	movs	r3, r1
 800b2a6:	0010      	movs	r0, r2
 800b2a8:	0019      	movs	r1, r3
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	4b37      	ldr	r3, [pc, #220]	@ (800b38c <SGP_GetMeasurementValues+0x3bc>)
 800b2ae:	f7f6 fd81 	bl	8001db4 <__aeabi_ddiv>
 800b2b2:	0002      	movs	r2, r0
 800b2b4:	000b      	movs	r3, r1
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	492f      	ldr	r1, [pc, #188]	@ (800b378 <SGP_GetMeasurementValues+0x3a8>)
 800b2ba:	f7f7 fc87 	bl	8002bcc <__aeabi_dsub>
 800b2be:	0002      	movs	r2, r0
 800b2c0:	000b      	movs	r3, r1
 800b2c2:	0014      	movs	r4, r2
 800b2c4:	001d      	movs	r5, r3
 800b2c6:	4b2d      	ldr	r3, [pc, #180]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f7f8 f878 	bl	80033c0 <__aeabi_i2d>
 800b2d0:	0002      	movs	r2, r0
 800b2d2:	000b      	movs	r3, r1
 800b2d4:	0020      	movs	r0, r4
 800b2d6:	0029      	movs	r1, r5
 800b2d8:	f7f7 f9b0 	bl	800263c <__aeabi_dmul>
 800b2dc:	0002      	movs	r2, r0
 800b2de:	000b      	movs	r3, r1
 800b2e0:	0010      	movs	r0, r2
 800b2e2:	0019      	movs	r1, r3
 800b2e4:	f7f5 f9b2 	bl	800064c <__aeabi_d2uiz>
 800b2e8:	0003      	movs	r3, r0
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	4b26      	ldr	r3, [pc, #152]	@ (800b388 <SGP_GetMeasurementValues+0x3b8>)
 800b2ee:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b2f0:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <SGP_GetMeasurementValues+0x3ac>)
 800b2f2:	881a      	ldrh	r2, [r3, #0]
 800b2f4:	4b23      	ldr	r3, [pc, #140]	@ (800b384 <SGP_GetMeasurementValues+0x3b4>)
 800b2f6:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b2f8:	4b23      	ldr	r3, [pc, #140]	@ (800b388 <SGP_GetMeasurementValues+0x3b8>)
 800b2fa:	8818      	ldrh	r0, [r3, #0]
 800b2fc:	4b20      	ldr	r3, [pc, #128]	@ (800b380 <SGP_GetMeasurementValues+0x3b0>)
 800b2fe:	8819      	ldrh	r1, [r3, #0]
 800b300:	4b20      	ldr	r3, [pc, #128]	@ (800b384 <SGP_GetMeasurementValues+0x3b4>)
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	001a      	movs	r2, r3
 800b306:	f001 fb6f 	bl	800c9e8 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b30a:	4b0e      	ldr	r3, [pc, #56]	@ (800b344 <SGP_GetMeasurementValues+0x374>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b310:	4b07      	ldr	r3, [pc, #28]	@ (800b330 <SGP_GetMeasurementValues+0x360>)
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b316:	4b03      	ldr	r3, [pc, #12]	@ (800b324 <SGP_GetMeasurementValues+0x354>)
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e04f      	b.n	800b3c0 <SGP_GetMeasurementValues+0x3f0>
 800b320:	200011f8 	.word	0x200011f8
 800b324:	200012a5 	.word	0x200012a5
 800b328:	08023c8c 	.word	0x08023c8c
 800b32c:	08023ca0 	.word	0x08023ca0
 800b330:	200012a4 	.word	0x200012a4
 800b334:	20000094 	.word	0x20000094
 800b338:	200000a8 	.word	0x200000a8
 800b33c:	2000008c 	.word	0x2000008c
 800b340:	200011f9 	.word	0x200011f9
 800b344:	200011f1 	.word	0x200011f1
 800b348:	08023ca4 	.word	0x08023ca4
 800b34c:	200011e8 	.word	0x200011e8
 800b350:	08023cbc 	.word	0x08023cbc
 800b354:	08023ce0 	.word	0x08023ce0
 800b358:	08023ce4 	.word	0x08023ce4
 800b35c:	08023d04 	.word	0x08023d04
 800b360:	08023d08 	.word	0x08023d08
 800b364:	200000a4 	.word	0x200000a4
 800b368:	2000009e 	.word	0x2000009e
 800b36c:	08023d28 	.word	0x08023d28
 800b370:	200011fc 	.word	0x200011fc
 800b374:	40590000 	.word	0x40590000
 800b378:	3ff00000 	.word	0x3ff00000
 800b37c:	200000ac 	.word	0x200000ac
 800b380:	200012b0 	.word	0x200012b0
 800b384:	200012ae 	.word	0x200012ae
 800b388:	200012ac 	.word	0x200012ac
 800b38c:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b390:	f7ff fe02 	bl	800af98 <SGP_MeasurementDone>
 800b394:	1e03      	subs	r3, r0, #0
 800b396:	d012      	beq.n	800b3be <SGP_GetMeasurementValues+0x3ee>
 800b398:	4b0b      	ldr	r3, [pc, #44]	@ (800b3c8 <SGP_GetMeasurementValues+0x3f8>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00e      	beq.n	800b3be <SGP_GetMeasurementValues+0x3ee>
 800b3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3cc <SGP_GetMeasurementValues+0x3fc>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <SGP_GetMeasurementValues+0x3ee>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b3a8:	4a09      	ldr	r2, [pc, #36]	@ (800b3d0 <SGP_GetMeasurementValues+0x400>)
 800b3aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d4 <SGP_GetMeasurementValues+0x404>)
 800b3ac:	0019      	movs	r1, r3
 800b3ae:	2003      	movs	r0, #3
 800b3b0:	f002 fa5a 	bl	800d868 <CreateLine>
    SGP_StartMeasurement();
 800b3b4:	f7ff fd9c 	bl	800aef0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b3b8:	4b07      	ldr	r3, [pc, #28]	@ (800b3d8 <SGP_GetMeasurementValues+0x408>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b004      	add	sp, #16
 800b3c6:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c8:	200011f8 	.word	0x200011f8
 800b3cc:	200011f9 	.word	0x200011f9
 800b3d0:	08023d3c 	.word	0x08023d3c
 800b3d4:	08023ca0 	.word	0x08023ca0
 800b3d8:	200012a5 	.word	0x200012a5

0800b3dc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b3e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b44c <SGP_DeviceConnected+0x70>)
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	0019      	movs	r1, r3
 800b3e8:	2059      	movs	r0, #89	@ 0x59
 800b3ea:	f7ff fd49 	bl	800ae80 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	f002 fe90 	bl	800e114 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b3f4:	4b16      	ldr	r3, [pc, #88]	@ (800b450 <SGP_DeviceConnected+0x74>)
 800b3f6:	2209      	movs	r2, #9
 800b3f8:	0019      	movs	r1, r3
 800b3fa:	2059      	movs	r0, #89	@ 0x59
 800b3fc:	f7ff fd22 	bl	800ae44 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b400:	1dfb      	adds	r3, r7, #7
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	e011      	b.n	800b42c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b408:	1dfb      	adds	r3, r7, #7
 800b40a:	7818      	ldrb	r0, [r3, #0]
 800b40c:	1dfb      	adds	r3, r7, #7
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	4a0f      	ldr	r2, [pc, #60]	@ (800b450 <SGP_DeviceConnected+0x74>)
 800b412:	5cd3      	ldrb	r3, [r2, r3]
 800b414:	4a0f      	ldr	r2, [pc, #60]	@ (800b454 <SGP_DeviceConnected+0x78>)
 800b416:	4910      	ldr	r1, [pc, #64]	@ (800b458 <SGP_DeviceConnected+0x7c>)
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	0003      	movs	r3, r0
 800b41c:	2002      	movs	r0, #2
 800b41e:	f002 fa23 	bl	800d868 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b422:	1dfb      	adds	r3, r7, #7
 800b424:	781a      	ldrb	r2, [r3, #0]
 800b426:	1dfb      	adds	r3, r7, #7
 800b428:	3201      	adds	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	1dfb      	adds	r3, r7, #7
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b08      	cmp	r3, #8
 800b432:	d9e9      	bls.n	800b408 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b434:	4b06      	ldr	r3, [pc, #24]	@ (800b450 <SGP_DeviceConnected+0x74>)
 800b436:	2203      	movs	r2, #3
 800b438:	2109      	movs	r1, #9
 800b43a:	0018      	movs	r0, r3
 800b43c:	f000 f80e 	bl	800b45c <CheckCRC>
 800b440:	0003      	movs	r3, r0
}
 800b442:	0018      	movs	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	b002      	add	sp, #8
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	20000088 	.word	0x20000088
 800b450:	200011e8 	.word	0x200011e8
 800b454:	08023d5c 	.word	0x08023d5c
 800b458:	08023d04 	.word	0x08023d04

0800b45c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45e:	b08f      	sub	sp, #60	@ 0x3c
 800b460:	af00      	add	r7, sp, #0
 800b462:	6278      	str	r0, [r7, #36]	@ 0x24
 800b464:	0008      	movs	r0, r1
 800b466:	0011      	movs	r1, r2
 800b468:	2323      	movs	r3, #35	@ 0x23
 800b46a:	18fb      	adds	r3, r7, r3
 800b46c:	1c02      	adds	r2, r0, #0
 800b46e:	701a      	strb	r2, [r3, #0]
 800b470:	2322      	movs	r3, #34	@ 0x22
 800b472:	18fb      	adds	r3, r7, r3
 800b474:	1c0a      	adds	r2, r1, #0
 800b476:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b478:	2317      	movs	r3, #23
 800b47a:	2220      	movs	r2, #32
 800b47c:	189b      	adds	r3, r3, r2
 800b47e:	19db      	adds	r3, r3, r7
 800b480:	2200      	movs	r2, #0
 800b482:	701a      	strb	r2, [r3, #0]
 800b484:	e09f      	b.n	800b5c6 <CheckCRC+0x16a>
 800b486:	466b      	mov	r3, sp
 800b488:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b48a:	2322      	movs	r3, #34	@ 0x22
 800b48c:	18fb      	adds	r3, r7, r3
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	001a      	movs	r2, r3
 800b492:	3a01      	subs	r2, #1
 800b494:	633a      	str	r2, [r7, #48]	@ 0x30
 800b496:	60bb      	str	r3, [r7, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	60fa      	str	r2, [r7, #12]
 800b49c:	68b8      	ldr	r0, [r7, #8]
 800b49e:	68f9      	ldr	r1, [r7, #12]
 800b4a0:	0002      	movs	r2, r0
 800b4a2:	0f52      	lsrs	r2, r2, #29
 800b4a4:	000c      	movs	r4, r1
 800b4a6:	00e4      	lsls	r4, r4, #3
 800b4a8:	61fc      	str	r4, [r7, #28]
 800b4aa:	69fc      	ldr	r4, [r7, #28]
 800b4ac:	4314      	orrs	r4, r2
 800b4ae:	61fc      	str	r4, [r7, #28]
 800b4b0:	0002      	movs	r2, r0
 800b4b2:	00d2      	lsls	r2, r2, #3
 800b4b4:	61ba      	str	r2, [r7, #24]
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	6838      	ldr	r0, [r7, #0]
 800b4be:	6879      	ldr	r1, [r7, #4]
 800b4c0:	0002      	movs	r2, r0
 800b4c2:	0f52      	lsrs	r2, r2, #29
 800b4c4:	000c      	movs	r4, r1
 800b4c6:	00e4      	lsls	r4, r4, #3
 800b4c8:	617c      	str	r4, [r7, #20]
 800b4ca:	697c      	ldr	r4, [r7, #20]
 800b4cc:	4314      	orrs	r4, r2
 800b4ce:	617c      	str	r4, [r7, #20]
 800b4d0:	0002      	movs	r2, r0
 800b4d2:	00d2      	lsls	r2, r2, #3
 800b4d4:	613a      	str	r2, [r7, #16]
 800b4d6:	3307      	adds	r3, #7
 800b4d8:	08db      	lsrs	r3, r3, #3
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	466a      	mov	r2, sp
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	469d      	mov	sp, r3
 800b4e2:	466b      	mov	r3, sp
 800b4e4:	3300      	adds	r3, #0
 800b4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b4e8:	2316      	movs	r3, #22
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	19db      	adds	r3, r3, r7
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	e01e      	b.n	800b534 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b4f6:	2317      	movs	r3, #23
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	189b      	adds	r3, r3, r2
 800b4fc:	19db      	adds	r3, r3, r7
 800b4fe:	781a      	ldrb	r2, [r3, #0]
 800b500:	2116      	movs	r1, #22
 800b502:	2320      	movs	r3, #32
 800b504:	18cb      	adds	r3, r1, r3
 800b506:	19db      	adds	r3, r3, r7
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	18d3      	adds	r3, r2, r3
 800b50c:	001a      	movs	r2, r3
 800b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b510:	189a      	adds	r2, r3, r2
 800b512:	0008      	movs	r0, r1
 800b514:	2320      	movs	r3, #32
 800b516:	18cb      	adds	r3, r1, r3
 800b518:	19db      	adds	r3, r3, r7
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	7811      	ldrb	r1, [r2, #0]
 800b51e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b520:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b522:	2320      	movs	r3, #32
 800b524:	18c3      	adds	r3, r0, r3
 800b526:	19db      	adds	r3, r3, r7
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	2320      	movs	r3, #32
 800b52c:	18c3      	adds	r3, r0, r3
 800b52e:	19db      	adds	r3, r3, r7
 800b530:	3201      	adds	r2, #1
 800b532:	701a      	strb	r2, [r3, #0]
 800b534:	2316      	movs	r3, #22
 800b536:	2220      	movs	r2, #32
 800b538:	189b      	adds	r3, r3, r2
 800b53a:	19da      	adds	r2, r3, r7
 800b53c:	2322      	movs	r3, #34	@ 0x22
 800b53e:	18fb      	adds	r3, r7, r3
 800b540:	7812      	ldrb	r2, [r2, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d3d6      	bcc.n	800b4f6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b548:	2417      	movs	r4, #23
 800b54a:	2320      	movs	r3, #32
 800b54c:	18e3      	adds	r3, r4, r3
 800b54e:	19db      	adds	r3, r3, r7
 800b550:	781a      	ldrb	r2, [r3, #0]
 800b552:	2322      	movs	r3, #34	@ 0x22
 800b554:	18fb      	adds	r3, r7, r3
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	18d3      	adds	r3, r2, r3
 800b55a:	3b01      	subs	r3, #1
 800b55c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b55e:	18d2      	adds	r2, r2, r3
 800b560:	250b      	movs	r5, #11
 800b562:	2320      	movs	r3, #32
 800b564:	18eb      	adds	r3, r5, r3
 800b566:	19db      	adds	r3, r3, r7
 800b568:	7812      	ldrb	r2, [r2, #0]
 800b56a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b56c:	2322      	movs	r3, #34	@ 0x22
 800b56e:	18fb      	adds	r3, r7, r3
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	3b01      	subs	r3, #1
 800b574:	b2da      	uxtb	r2, r3
 800b576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b578:	0011      	movs	r1, r2
 800b57a:	0018      	movs	r0, r3
 800b57c:	f000 f838 	bl	800b5f0 <CalculateCRC>
 800b580:	0003      	movs	r3, r0
 800b582:	001a      	movs	r2, r3
 800b584:	2320      	movs	r3, #32
 800b586:	18eb      	adds	r3, r5, r3
 800b588:	19db      	adds	r3, r3, r7
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d00c      	beq.n	800b5aa <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b590:	2320      	movs	r3, #32
 800b592:	18e3      	adds	r3, r4, r3
 800b594:	19db      	adds	r3, r3, r7
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	3301      	adds	r3, #1
 800b59a:	4a13      	ldr	r2, [pc, #76]	@ (800b5e8 <CheckCRC+0x18c>)
 800b59c:	4913      	ldr	r1, [pc, #76]	@ (800b5ec <CheckCRC+0x190>)
 800b59e:	2001      	movs	r0, #1
 800b5a0:	f002 f962 	bl	800d868 <CreateLine>
      return false;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	46b5      	mov	sp, r6
 800b5a8:	e019      	b.n	800b5de <CheckCRC+0x182>
 800b5aa:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b5ac:	2217      	movs	r2, #23
 800b5ae:	2320      	movs	r3, #32
 800b5b0:	18d3      	adds	r3, r2, r3
 800b5b2:	19db      	adds	r3, r3, r7
 800b5b4:	2120      	movs	r1, #32
 800b5b6:	1852      	adds	r2, r2, r1
 800b5b8:	19d1      	adds	r1, r2, r7
 800b5ba:	2222      	movs	r2, #34	@ 0x22
 800b5bc:	18ba      	adds	r2, r7, r2
 800b5be:	7809      	ldrb	r1, [r1, #0]
 800b5c0:	7812      	ldrb	r2, [r2, #0]
 800b5c2:	188a      	adds	r2, r1, r2
 800b5c4:	701a      	strb	r2, [r3, #0]
 800b5c6:	2317      	movs	r3, #23
 800b5c8:	2220      	movs	r2, #32
 800b5ca:	189b      	adds	r3, r3, r2
 800b5cc:	19da      	adds	r2, r3, r7
 800b5ce:	2323      	movs	r3, #35	@ 0x23
 800b5d0:	18fb      	adds	r3, r7, r3
 800b5d2:	7812      	ldrb	r2, [r2, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d200      	bcs.n	800b5dc <CheckCRC+0x180>
 800b5da:	e754      	b.n	800b486 <CheckCRC+0x2a>
    }
  }
  return true;
 800b5dc:	2301      	movs	r3, #1
}
 800b5de:	0018      	movs	r0, r3
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	b00f      	add	sp, #60	@ 0x3c
 800b5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5e6:	46c0      	nop			@ (mov r8, r8)
 800b5e8:	08023d7c 	.word	0x08023d7c
 800b5ec:	08023ce0 	.word	0x08023ce0

0800b5f0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	000a      	movs	r2, r1
 800b5fa:	1cfb      	adds	r3, r7, #3
 800b5fc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b5fe:	230f      	movs	r3, #15
 800b600:	18fb      	adds	r3, r7, r3
 800b602:	22ff      	movs	r2, #255	@ 0xff
 800b604:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b606:	230e      	movs	r3, #14
 800b608:	18fb      	adds	r3, r7, r3
 800b60a:	2200      	movs	r2, #0
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e037      	b.n	800b680 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b610:	230e      	movs	r3, #14
 800b612:	18fb      	adds	r3, r7, r3
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	18d3      	adds	r3, r2, r3
 800b61a:	7819      	ldrb	r1, [r3, #0]
 800b61c:	220f      	movs	r2, #15
 800b61e:	18bb      	adds	r3, r7, r2
 800b620:	18ba      	adds	r2, r7, r2
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	404a      	eors	r2, r1
 800b626:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b628:	230d      	movs	r3, #13
 800b62a:	18fb      	adds	r3, r7, r3
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
 800b630:	e01b      	b.n	800b66a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b632:	210f      	movs	r1, #15
 800b634:	187b      	adds	r3, r7, r1
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	b25b      	sxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	da09      	bge.n	800b652 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b63e:	187b      	adds	r3, r7, r1
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	b25b      	sxtb	r3, r3
 800b646:	2231      	movs	r2, #49	@ 0x31
 800b648:	4053      	eors	r3, r2
 800b64a:	b25a      	sxtb	r2, r3
 800b64c:	187b      	adds	r3, r7, r1
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	e005      	b.n	800b65e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b652:	230f      	movs	r3, #15
 800b654:	18fa      	adds	r2, r7, r3
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	18db      	adds	r3, r3, r3
 800b65c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b65e:	210d      	movs	r1, #13
 800b660:	187b      	adds	r3, r7, r1
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	187b      	adds	r3, r7, r1
 800b666:	3201      	adds	r2, #1
 800b668:	701a      	strb	r2, [r3, #0]
 800b66a:	230d      	movs	r3, #13
 800b66c:	18fb      	adds	r3, r7, r3
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b07      	cmp	r3, #7
 800b672:	d9de      	bls.n	800b632 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b674:	210e      	movs	r1, #14
 800b676:	187b      	adds	r3, r7, r1
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	187b      	adds	r3, r7, r1
 800b67c:	3201      	adds	r2, #1
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	230e      	movs	r3, #14
 800b682:	18fa      	adds	r2, r7, r3
 800b684:	1cfb      	adds	r3, r7, #3
 800b686:	7812      	ldrb	r2, [r2, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d3c0      	bcc.n	800b610 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b68e:	230f      	movs	r3, #15
 800b690:	18fb      	adds	r3, r7, r3
 800b692:	781b      	ldrb	r3, [r3, #0]
}
 800b694:	0018      	movs	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	b004      	add	sp, #16
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4936      	ldr	r1, [pc, #216]	@ (800b784 <SGP_GetHT+0xe8>)
 800b6ac:	1c18      	adds	r0, r3, #0
 800b6ae:	f7f5 f907 	bl	80008c0 <__aeabi_fadd>
 800b6b2:	1c03      	adds	r3, r0, #0
 800b6b4:	4934      	ldr	r1, [pc, #208]	@ (800b788 <SGP_GetHT+0xec>)
 800b6b6:	1c18      	adds	r0, r3, #0
 800b6b8:	f7f5 fa8c 	bl	8000bd4 <__aeabi_fdiv>
 800b6bc:	1c03      	adds	r3, r0, #0
 800b6be:	4933      	ldr	r1, [pc, #204]	@ (800b78c <SGP_GetHT+0xf0>)
 800b6c0:	1c18      	adds	r0, r3, #0
 800b6c2:	f7f5 fc6d 	bl	8000fa0 <__aeabi_fmul>
 800b6c6:	1c03      	adds	r3, r0, #0
 800b6c8:	1c18      	adds	r0, r3, #0
 800b6ca:	f7f4 ffa7 	bl	800061c <__aeabi_f2uiz>
 800b6ce:	0003      	movs	r3, r0
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	4b2f      	ldr	r3, [pc, #188]	@ (800b790 <SGP_GetHT+0xf4>)
 800b6d4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	492e      	ldr	r1, [pc, #184]	@ (800b794 <SGP_GetHT+0xf8>)
 800b6dc:	1c18      	adds	r0, r3, #0
 800b6de:	f7f5 fa79 	bl	8000bd4 <__aeabi_fdiv>
 800b6e2:	1c03      	adds	r3, r0, #0
 800b6e4:	4929      	ldr	r1, [pc, #164]	@ (800b78c <SGP_GetHT+0xf0>)
 800b6e6:	1c18      	adds	r0, r3, #0
 800b6e8:	f7f5 fc5a 	bl	8000fa0 <__aeabi_fmul>
 800b6ec:	1c03      	adds	r3, r0, #0
 800b6ee:	1c18      	adds	r0, r3, #0
 800b6f0:	f7f4 ff94 	bl	800061c <__aeabi_f2uiz>
 800b6f4:	0003      	movs	r3, r0
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	4b27      	ldr	r3, [pc, #156]	@ (800b798 <SGP_GetHT+0xfc>)
 800b6fa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b6fc:	4b26      	ldr	r3, [pc, #152]	@ (800b798 <SGP_GetHT+0xfc>)
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	b29b      	uxth	r3, r3
 800b704:	b2da      	uxtb	r2, r3
 800b706:	4b25      	ldr	r3, [pc, #148]	@ (800b79c <SGP_GetHT+0x100>)
 800b708:	709a      	strb	r2, [r3, #2]
 800b70a:	4b24      	ldr	r3, [pc, #144]	@ (800b79c <SGP_GetHT+0x100>)
 800b70c:	789a      	ldrb	r2, [r3, #2]
 800b70e:	210c      	movs	r1, #12
 800b710:	187b      	adds	r3, r7, r1
 800b712:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b714:	4b20      	ldr	r3, [pc, #128]	@ (800b798 <SGP_GetHT+0xfc>)
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	4b20      	ldr	r3, [pc, #128]	@ (800b79c <SGP_GetHT+0x100>)
 800b71c:	70da      	strb	r2, [r3, #3]
 800b71e:	4b1f      	ldr	r3, [pc, #124]	@ (800b79c <SGP_GetHT+0x100>)
 800b720:	78da      	ldrb	r2, [r3, #3]
 800b722:	187b      	adds	r3, r7, r1
 800b724:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b726:	187b      	adds	r3, r7, r1
 800b728:	2102      	movs	r1, #2
 800b72a:	0018      	movs	r0, r3
 800b72c:	f7ff ff60 	bl	800b5f0 <CalculateCRC>
 800b730:	0003      	movs	r3, r0
 800b732:	001a      	movs	r2, r3
 800b734:	4b19      	ldr	r3, [pc, #100]	@ (800b79c <SGP_GetHT+0x100>)
 800b736:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b738:	4b15      	ldr	r3, [pc, #84]	@ (800b790 <SGP_GetHT+0xf4>)
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	0a1b      	lsrs	r3, r3, #8
 800b73e:	b29b      	uxth	r3, r3
 800b740:	b2da      	uxtb	r2, r3
 800b742:	4b16      	ldr	r3, [pc, #88]	@ (800b79c <SGP_GetHT+0x100>)
 800b744:	715a      	strb	r2, [r3, #5]
 800b746:	4b15      	ldr	r3, [pc, #84]	@ (800b79c <SGP_GetHT+0x100>)
 800b748:	795a      	ldrb	r2, [r3, #5]
 800b74a:	2108      	movs	r1, #8
 800b74c:	187b      	adds	r3, r7, r1
 800b74e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b750:	4b0f      	ldr	r3, [pc, #60]	@ (800b790 <SGP_GetHT+0xf4>)
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	b2da      	uxtb	r2, r3
 800b756:	4b11      	ldr	r3, [pc, #68]	@ (800b79c <SGP_GetHT+0x100>)
 800b758:	719a      	strb	r2, [r3, #6]
 800b75a:	4b10      	ldr	r3, [pc, #64]	@ (800b79c <SGP_GetHT+0x100>)
 800b75c:	799a      	ldrb	r2, [r3, #6]
 800b75e:	187b      	adds	r3, r7, r1
 800b760:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b762:	187b      	adds	r3, r7, r1
 800b764:	2102      	movs	r1, #2
 800b766:	0018      	movs	r0, r3
 800b768:	f7ff ff42 	bl	800b5f0 <CalculateCRC>
 800b76c:	0003      	movs	r3, r0
 800b76e:	001a      	movs	r2, r3
 800b770:	4b0a      	ldr	r3, [pc, #40]	@ (800b79c <SGP_GetHT+0x100>)
 800b772:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b774:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a0 <SGP_GetHT+0x104>)
 800b776:	2201      	movs	r2, #1
 800b778:	701a      	strb	r2, [r3, #0]
}
 800b77a:	46c0      	nop			@ (mov r8, r8)
 800b77c:	46bd      	mov	sp, r7
 800b77e:	b004      	add	sp, #16
 800b780:	bd80      	pop	{r7, pc}
 800b782:	46c0      	nop			@ (mov r8, r8)
 800b784:	42340000 	.word	0x42340000
 800b788:	432f0000 	.word	0x432f0000
 800b78c:	477fff00 	.word	0x477fff00
 800b790:	200012a2 	.word	0x200012a2
 800b794:	42c80000 	.word	0x42c80000
 800b798:	200012a0 	.word	0x200012a0
 800b79c:	20000094 	.word	0x20000094
 800b7a0:	200012a4 	.word	0x200012a4

0800b7a4 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brougt to idle");
 800b7a8:	4a07      	ldr	r2, [pc, #28]	@ (800b7c8 <SGP_SoftReset+0x24>)
 800b7aa:	4b08      	ldr	r3, [pc, #32]	@ (800b7cc <SGP_SoftReset+0x28>)
 800b7ac:	0019      	movs	r1, r3
 800b7ae:	2003      	movs	r0, #3
 800b7b0:	f002 f85a 	bl	800d868 <CreateLine>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b7b4:	4b06      	ldr	r3, [pc, #24]	@ (800b7d0 <SGP_SoftReset+0x2c>)
 800b7b6:	2202      	movs	r2, #2
 800b7b8:	0019      	movs	r1, r3
 800b7ba:	2059      	movs	r0, #89	@ 0x59
 800b7bc:	f7ff fb60 	bl	800ae80 <WriteRegister>
}
 800b7c0:	46c0      	nop			@ (mov r8, r8)
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	46c0      	nop			@ (mov r8, r8)
 800b7c8:	08023e24 	.word	0x08023e24
 800b7cc:	08023ca0 	.word	0x08023ca0
 800b7d0:	2000009c 	.word	0x2000009c

0800b7d4 <ResetVOCresult>:

void ResetVOCresult(void) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800b7d8:	4b02      	ldr	r3, [pc, #8]	@ (800b7e4 <ResetVOCresult+0x10>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
}
 800b7de:	46c0      	nop			@ (mov r8, r8)
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	200012a8 	.word	0x200012a8

0800b7e8 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800b7ec:	4b32      	ldr	r3, [pc, #200]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	2b06      	cmp	r3, #6
 800b7f2:	d855      	bhi.n	800b8a0 <SGP_Upkeep+0xb8>
 800b7f4:	009a      	lsls	r2, r3, #2
 800b7f6:	4b31      	ldr	r3, [pc, #196]	@ (800b8bc <SGP_Upkeep+0xd4>)
 800b7f8:	18d3      	adds	r3, r2, r3
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800b7fe:	4a30      	ldr	r2, [pc, #192]	@ (800b8c0 <SGP_Upkeep+0xd8>)
 800b800:	4b30      	ldr	r3, [pc, #192]	@ (800b8c4 <SGP_Upkeep+0xdc>)
 800b802:	0019      	movs	r1, r3
 800b804:	2003      	movs	r0, #3
 800b806:	f002 f82f 	bl	800d868 <CreateLine>
    break;
 800b80a:	e050      	b.n	800b8ae <SGP_Upkeep+0xc6>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800b80c:	f7ff ffe2 	bl	800b7d4 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800b810:	4b29      	ldr	r3, [pc, #164]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b812:	2201      	movs	r2, #1
 800b814:	701a      	strb	r2, [r3, #0]
    break;
 800b816:	e04a      	b.n	800b8ae <SGP_Upkeep+0xc6>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800b818:	f7ff fb6a 	bl	800aef0 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800b81c:	f001 f918 	bl	800ca50 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800b820:	4b25      	ldr	r3, [pc, #148]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b822:	2202      	movs	r2, #2
 800b824:	701a      	strb	r2, [r3, #0]
   break;
 800b826:	e042      	b.n	800b8ae <SGP_Upkeep+0xc6>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800b828:	4b27      	ldr	r3, [pc, #156]	@ (800b8c8 <SGP_Upkeep+0xe0>)
 800b82a:	0018      	movs	r0, r3
 800b82c:	f7ff fbd0 	bl	800afd0 <SGP_GetMeasurementValues>
 800b830:	1e03      	subs	r3, r0, #0
 800b832:	d039      	beq.n	800b8a8 <SGP_Upkeep+0xc0>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800b834:	4b20      	ldr	r3, [pc, #128]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b836:	2203      	movs	r2, #3
 800b838:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b83a:	e035      	b.n	800b8a8 <SGP_Upkeep+0xc0>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", vocIndex);
 800b83c:	4b22      	ldr	r3, [pc, #136]	@ (800b8c8 <SGP_Upkeep+0xe0>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a22      	ldr	r2, [pc, #136]	@ (800b8cc <SGP_Upkeep+0xe4>)
 800b842:	4920      	ldr	r1, [pc, #128]	@ (800b8c4 <SGP_Upkeep+0xdc>)
 800b844:	2003      	movs	r0, #3
 800b846:	f002 f80f 	bl	800d868 <CreateLine>
    setVOC(vocIndex);
 800b84a:	4b1f      	ldr	r3, [pc, #124]	@ (800b8c8 <SGP_Upkeep+0xe0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	0018      	movs	r0, r3
 800b852:	f7f8 f867 	bl	8003924 <setVOC>
    ResetMeasurementIndicator();
 800b856:	f001 f913 	bl	800ca80 <ResetMeasurementIndicator>
    if (powerCheck() == USB_PLUGGED_IN) {
 800b85a:	f001 f99f 	bl	800cb9c <powerCheck>
 800b85e:	0003      	movs	r3, r0
 800b860:	2b01      	cmp	r3, #1
 800b862:	d107      	bne.n	800b874 <SGP_Upkeep+0x8c>
      SGP40TimeStamp = HAL_GetTick() + 60000;  // about every minute
 800b864:	f002 fc4c 	bl	800e100 <HAL_GetTick>
 800b868:	0003      	movs	r3, r0
 800b86a:	4a19      	ldr	r2, [pc, #100]	@ (800b8d0 <SGP_Upkeep+0xe8>)
 800b86c:	189a      	adds	r2, r3, r2
 800b86e:	4b19      	ldr	r3, [pc, #100]	@ (800b8d4 <SGP_Upkeep+0xec>)
 800b870:	601a      	str	r2, [r3, #0]
 800b872:	e006      	b.n	800b882 <SGP_Upkeep+0x9a>
    }
    else {
      SGP40TimeStamp = HAL_GetTick() + 300000;  // about every 5 minutes
 800b874:	f002 fc44 	bl	800e100 <HAL_GetTick>
 800b878:	0003      	movs	r3, r0
 800b87a:	4a17      	ldr	r2, [pc, #92]	@ (800b8d8 <SGP_Upkeep+0xf0>)
 800b87c:	189a      	adds	r2, r3, r2
 800b87e:	4b15      	ldr	r3, [pc, #84]	@ (800b8d4 <SGP_Upkeep+0xec>)
 800b880:	601a      	str	r2, [r3, #0]
    }
    SGPState = SGP_STATE_WAIT;
 800b882:	4b0d      	ldr	r3, [pc, #52]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b884:	2206      	movs	r2, #6
 800b886:	701a      	strb	r2, [r3, #0]
    break;
 800b888:	e011      	b.n	800b8ae <SGP_Upkeep+0xc6>

  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800b88a:	4b12      	ldr	r3, [pc, #72]	@ (800b8d4 <SGP_Upkeep+0xec>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	0018      	movs	r0, r3
 800b890:	f001 ff94 	bl	800d7bc <TimestampIsReached>
 800b894:	1e03      	subs	r3, r0, #0
 800b896:	d009      	beq.n	800b8ac <SGP_Upkeep+0xc4>
      SGPState = SGP_STATE_INIT;
 800b898:	4b07      	ldr	r3, [pc, #28]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b89e:	e005      	b.n	800b8ac <SGP_Upkeep+0xc4>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800b8a0:	4b05      	ldr	r3, [pc, #20]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	701a      	strb	r2, [r3, #0]
    break;
 800b8a6:	e002      	b.n	800b8ae <SGP_Upkeep+0xc6>
    break;
 800b8a8:	46c0      	nop			@ (mov r8, r8)
 800b8aa:	e000      	b.n	800b8ae <SGP_Upkeep+0xc6>
    break;
 800b8ac:	46c0      	nop			@ (mov r8, r8)
  }

  return SGPState;
 800b8ae:	4b02      	ldr	r3, [pc, #8]	@ (800b8b8 <SGP_Upkeep+0xd0>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
}
 800b8b2:	0018      	movs	r0, r3
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	200012b2 	.word	0x200012b2
 800b8bc:	080244e0 	.word	0x080244e0
 800b8c0:	08023e3c 	.word	0x08023e3c
 800b8c4:	08023ca0 	.word	0x08023ca0
 800b8c8:	200012a8 	.word	0x200012a8
 800b8cc:	08023e64 	.word	0x08023e64
 800b8d0:	0000ea60 	.word	0x0000ea60
 800b8d4:	200011f4 	.word	0x200011f4
 800b8d8:	000493e0 	.word	0x000493e0

0800b8dc <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b8e4:	f002 fc0c 	bl	800e100 <HAL_GetTick>
 800b8e8:	0002      	movs	r2, r0
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	18d2      	adds	r2, r2, r3
 800b8ee:	4b03      	ldr	r3, [pc, #12]	@ (800b8fc <setSGP40TimeStamp+0x20>)
 800b8f0:	601a      	str	r2, [r3, #0]
}
 800b8f2:	46c0      	nop			@ (mov r8, r8)
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	b002      	add	sp, #8
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	200011f4 	.word	0x200011f4

0800b900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	0002      	movs	r2, r0
 800b908:	1dfb      	adds	r3, r7, #7
 800b90a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b90c:	1dfb      	adds	r3, r7, #7
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b7f      	cmp	r3, #127	@ 0x7f
 800b912:	d809      	bhi.n	800b928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b914:	1dfb      	adds	r3, r7, #7
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	001a      	movs	r2, r3
 800b91a:	231f      	movs	r3, #31
 800b91c:	401a      	ands	r2, r3
 800b91e:	4b04      	ldr	r3, [pc, #16]	@ (800b930 <__NVIC_EnableIRQ+0x30>)
 800b920:	2101      	movs	r1, #1
 800b922:	4091      	lsls	r1, r2
 800b924:	000a      	movs	r2, r1
 800b926:	601a      	str	r2, [r3, #0]
  }
}
 800b928:	46c0      	nop			@ (mov r8, r8)
 800b92a:	46bd      	mov	sp, r7
 800b92c:	b002      	add	sp, #8
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	e000e100 	.word	0xe000e100

0800b934 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	0002      	movs	r2, r0
 800b93c:	1dfb      	adds	r3, r7, #7
 800b93e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b940:	1dfb      	adds	r3, r7, #7
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b7f      	cmp	r3, #127	@ 0x7f
 800b946:	d810      	bhi.n	800b96a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b948:	1dfb      	adds	r3, r7, #7
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	001a      	movs	r2, r3
 800b94e:	231f      	movs	r3, #31
 800b950:	4013      	ands	r3, r2
 800b952:	4908      	ldr	r1, [pc, #32]	@ (800b974 <__NVIC_DisableIRQ+0x40>)
 800b954:	2201      	movs	r2, #1
 800b956:	409a      	lsls	r2, r3
 800b958:	0013      	movs	r3, r2
 800b95a:	2280      	movs	r2, #128	@ 0x80
 800b95c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b95e:	f3bf 8f4f 	dsb	sy
}
 800b962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b964:	f3bf 8f6f 	isb	sy
}
 800b968:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800b96a:	46c0      	nop			@ (mov r8, r8)
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b002      	add	sp, #8
 800b970:	bd80      	pop	{r7, pc}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	e000e100 	.word	0xe000e100

0800b978 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800b978:	b5b0      	push	{r4, r5, r7, lr}
 800b97a:	b088      	sub	sp, #32
 800b97c:	af02      	add	r7, sp, #8
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	0008      	movs	r0, r1
 800b982:	0011      	movs	r1, r2
 800b984:	1cfb      	adds	r3, r7, #3
 800b986:	1c02      	adds	r2, r0, #0
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	1cbb      	adds	r3, r7, #2
 800b98c:	1c0a      	adds	r2, r1, #0
 800b98e:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800b990:	4b5b      	ldr	r3, [pc, #364]	@ (800bb00 <getSoundData+0x188>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2201      	movs	r2, #1
 800b998:	4053      	eors	r3, r2
 800b99a:	b2db      	uxtb	r3, r3
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d107      	bne.n	800b9b0 <getSoundData+0x38>
 800b9a0:	4b58      	ldr	r3, [pc, #352]	@ (800bb04 <getSoundData+0x18c>)
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	4053      	eors	r3, r2
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <getSoundData+0x3c>
    {
        return false;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e0a0      	b.n	800baf6 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b9b4:	4b54      	ldr	r3, [pc, #336]	@ (800bb08 <getSoundData+0x190>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d005      	beq.n	800b9ca <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b9be:	4b53      	ldr	r3, [pc, #332]	@ (800bb0c <getSoundData+0x194>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	b25b      	sxtb	r3, r3
 800b9c4:	0018      	movs	r0, r3
 800b9c6:	f7ff ffb5 	bl	800b934 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b9ca:	f3bf 8f4f 	dsb	sy
}
 800b9ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b9d0:	f3bf 8f6f 	isb	sy
}
 800b9d4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b9d6:	1cfb      	adds	r3, r7, #3
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d04c      	beq.n	800ba78 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b9de:	4b4c      	ldr	r3, [pc, #304]	@ (800bb10 <getSoundData+0x198>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d11b      	bne.n	800ba1e <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e00e      	b.n	800ba16 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	18d3      	adds	r3, r2, r3
 800b9fe:	3302      	adds	r3, #2
 800ba00:	2200      	movs	r2, #0
 800ba02:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	18d3      	adds	r3, r2, r3
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	3301      	adds	r3, #1
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	2b05      	cmp	r3, #5
 800ba1a:	d9ed      	bls.n	800b9f8 <getSoundData+0x80>
 800ba1c:	e02c      	b.n	800ba78 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	1c59      	adds	r1, r3, #1
 800ba24:	4b3b      	ldr	r3, [pc, #236]	@ (800bb14 <getSoundData+0x19c>)
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	4b3b      	ldr	r3, [pc, #236]	@ (800bb18 <getSoundData+0x1a0>)
 800ba2a:	681c      	ldr	r4, [r3, #0]
 800ba2c:	4b38      	ldr	r3, [pc, #224]	@ (800bb10 <getSoundData+0x198>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	0023      	movs	r3, r4
 800ba34:	f000 fde8 	bl	800c608 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ba38:	2300      	movs	r3, #0
 800ba3a:	613b      	str	r3, [r7, #16]
 800ba3c:	e019      	b.n	800ba72 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	18d3      	adds	r3, r2, r3
 800ba44:	1c98      	adds	r0, r3, #2
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3308      	adds	r3, #8
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800ba4e:	4b33      	ldr	r3, [pc, #204]	@ (800bb1c <getSoundData+0x1a4>)
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	0092      	lsls	r2, r2, #2
 800ba54:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800ba56:	4b32      	ldr	r3, [pc, #200]	@ (800bb20 <getSoundData+0x1a8>)
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	0092      	lsls	r2, r2, #2
 800ba5c:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800ba5e:	4b2c      	ldr	r3, [pc, #176]	@ (800bb10 <getSoundData+0x198>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	0013      	movs	r3, r2
 800ba66:	0022      	movs	r2, r4
 800ba68:	f000 fdce 	bl	800c608 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2b05      	cmp	r3, #5
 800ba76:	d9e2      	bls.n	800ba3e <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800ba78:	1cbb      	adds	r3, r7, #2
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d028      	beq.n	800bad2 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800ba80:	240e      	movs	r4, #14
 800ba82:	193b      	adds	r3, r7, r4
 800ba84:	2200      	movs	r2, #0
 800ba86:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800ba88:	250d      	movs	r5, #13
 800ba8a:	197b      	adds	r3, r7, r5
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800ba90:	4b24      	ldr	r3, [pc, #144]	@ (800bb24 <getSoundData+0x1ac>)
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	4924      	ldr	r1, [pc, #144]	@ (800bb28 <getSoundData+0x1b0>)
 800ba96:	197b      	adds	r3, r7, r5
 800ba98:	193a      	adds	r2, r7, r4
 800ba9a:	f000 fe59 	bl	800c750 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800ba9e:	193b      	adds	r3, r7, r4
 800baa0:	881a      	ldrh	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	21ff      	movs	r1, #255	@ 0xff
 800baa6:	4011      	ands	r1, r2
 800baa8:	000c      	movs	r4, r1
 800baaa:	7b99      	ldrb	r1, [r3, #14]
 800baac:	2000      	movs	r0, #0
 800baae:	4001      	ands	r1, r0
 800bab0:	1c08      	adds	r0, r1, #0
 800bab2:	1c21      	adds	r1, r4, #0
 800bab4:	4301      	orrs	r1, r0
 800bab6:	7399      	strb	r1, [r3, #14]
 800bab8:	0a12      	lsrs	r2, r2, #8
 800baba:	b290      	uxth	r0, r2
 800babc:	7bda      	ldrb	r2, [r3, #15]
 800babe:	2100      	movs	r1, #0
 800bac0:	400a      	ands	r2, r1
 800bac2:	1c11      	adds	r1, r2, #0
 800bac4:	1c02      	adds	r2, r0, #0
 800bac6:	430a      	orrs	r2, r1
 800bac8:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800baca:	197b      	adds	r3, r7, r5
 800bacc:	781a      	ldrb	r2, [r3, #0]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bad2:	f000 f86f 	bl	800bbb4 <micSettlingComplete>
 800bad6:	0003      	movs	r3, r0
 800bad8:	001a      	movs	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <getSoundData+0x190>)
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bae8:	4b08      	ldr	r3, [pc, #32]	@ (800bb0c <getSoundData+0x194>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	b25b      	sxtb	r3, r3
 800baee:	0018      	movs	r0, r3
 800baf0:	f7ff ff06 	bl	800b900 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800baf4:	2301      	movs	r3, #1
}
 800baf6:	0018      	movs	r0, r3
 800baf8:	46bd      	mov	sp, r7
 800bafa:	b006      	add	sp, #24
 800bafc:	bdb0      	pop	{r4, r5, r7, pc}
 800bafe:	46c0      	nop			@ (mov r8, r8)
 800bb00:	200012b4 	.word	0x200012b4
 800bb04:	200012b7 	.word	0x200012b7
 800bb08:	200012b6 	.word	0x200012b6
 800bb0c:	20001d04 	.word	0x20001d04
 800bb10:	20001d40 	.word	0x20001d40
 800bb14:	20001d08 	.word	0x20001d08
 800bb18:	20001d0c 	.word	0x20001d0c
 800bb1c:	20001d10 	.word	0x20001d10
 800bb20:	20001d28 	.word	0x20001d28
 800bb24:	200012bc 	.word	0x200012bc
 800bb28:	3b5c7333 	.word	0x3b5c7333

0800bb2c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
 800bb38:	001a      	movs	r2, r3
 800bb3a:	1cfb      	adds	r3, r7, #3
 800bb3c:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bb3e:	4b09      	ldr	r3, [pc, #36]	@ (800bb64 <soundInit+0x38>)
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bb44:	4b08      	ldr	r3, [pc, #32]	@ (800bb68 <soundInit+0x3c>)
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bb4a:	4b08      	ldr	r3, [pc, #32]	@ (800bb6c <soundInit+0x40>)
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bb50:	4b07      	ldr	r3, [pc, #28]	@ (800bb70 <soundInit+0x44>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	569a      	ldrsb	r2, [r3, r2]
 800bb56:	4b06      	ldr	r3, [pc, #24]	@ (800bb70 <soundInit+0x44>)
 800bb58:	701a      	strb	r2, [r3, #0]

    return true;
 800bb5a:	2301      	movs	r3, #1
}
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	b004      	add	sp, #16
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20001cfc 	.word	0x20001cfc
 800bb68:	20001cf8 	.word	0x20001cf8
 800bb6c:	20001d00 	.word	0x20001d00
 800bb70:	20001d04 	.word	0x20001d04

0800bb74 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bb78:	4b02      	ldr	r3, [pc, #8]	@ (800bb84 <clearMaximumAmplitude+0x10>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	601a      	str	r2, [r3, #0]
}
 800bb7e:	46c0      	nop			@ (mov r8, r8)
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	200012bc 	.word	0x200012bc

0800bb88 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bb8c:	4b08      	ldr	r3, [pc, #32]	@ (800bbb0 <startMicSettlingPeriod+0x28>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bb96:	4b06      	ldr	r3, [pc, #24]	@ (800bbb0 <startMicSettlingPeriod+0x28>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f00a f848 	bl	8015c30 <HAL_TIM_Base_Start>
 800bba0:	1e03      	subs	r3, r0, #0
 800bba2:	d001      	beq.n	800bba8 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e000      	b.n	800bbaa <startMicSettlingPeriod+0x22>
    }
    return true;
 800bba8:	2301      	movs	r3, #1
}
 800bbaa:	0018      	movs	r0, r3
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20001cf8 	.word	0x20001cf8

0800bbb4 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bbba:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <micSettlingComplete+0x40>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	401a      	ands	r2, r3
 800bbc6:	1dfb      	adds	r3, r7, #7
 800bbc8:	3a01      	subs	r2, #1
 800bbca:	4251      	negs	r1, r2
 800bbcc:	414a      	adcs	r2, r1
 800bbce:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bbd0:	1dfb      	adds	r3, r7, #7
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d007      	beq.n	800bbe8 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bbd8:	4b06      	ldr	r3, [pc, #24]	@ (800bbf4 <micSettlingComplete+0x40>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f00a f871 	bl	8015cc4 <HAL_TIM_Base_Stop>
      DataReady = true;
 800bbe2:	4b05      	ldr	r3, [pc, #20]	@ (800bbf8 <micSettlingComplete+0x44>)
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bbe8:	1dfb      	adds	r3, r7, #7
 800bbea:	781b      	ldrb	r3, [r3, #0]
}
 800bbec:	0018      	movs	r0, r3
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	b002      	add	sp, #8
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20001cf8 	.word	0x20001cf8
 800bbf8:	200012b3 	.word	0x200012b3

0800bbfc <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	0002      	movs	r2, r0
 800bc04:	1dfb      	adds	r3, r7, #7
 800bc06:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bc08:	4b29      	ldr	r3, [pc, #164]	@ (800bcb0 <enableMicrophone+0xb4>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	1dfa      	adds	r2, r7, #7
 800bc10:	7812      	ldrb	r2, [r2, #0]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d101      	bne.n	800bc1a <enableMicrophone+0x1e>
    {
        return true;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e045      	b.n	800bca6 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bc1a:	1dfb      	adds	r3, r7, #7
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d025      	beq.n	800bc6e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bc22:	f7ff ffb1 	bl	800bb88 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bc26:	4b23      	ldr	r3, [pc, #140]	@ (800bcb4 <enableMicrophone+0xb8>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2280      	movs	r2, #128	@ 0x80
 800bc2c:	0092      	lsls	r2, r2, #2
 800bc2e:	4922      	ldr	r1, [pc, #136]	@ (800bcb8 <enableMicrophone+0xbc>)
 800bc30:	0018      	movs	r0, r3
 800bc32:	f006 fa7d 	bl	8012130 <HAL_I2S_Receive_DMA>
 800bc36:	1e03      	subs	r3, r0, #0
 800bc38:	d001      	beq.n	800bc3e <enableMicrophone+0x42>
        {
            return false;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e033      	b.n	800bca6 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bc3e:	f7ff ff99 	bl	800bb74 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bc42:	4b1e      	ldr	r3, [pc, #120]	@ (800bcbc <enableMicrophone+0xc0>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bc48:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc0 <enableMicrophone+0xc4>)
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b25b      	sxtb	r3, r3
 800bc4e:	0018      	movs	r0, r3
 800bc50:	f7ff fe56 	bl	800b900 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bc54:	4b1b      	ldr	r3, [pc, #108]	@ (800bcc4 <enableMicrophone+0xc8>)
 800bc56:	2201      	movs	r2, #1
 800bc58:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bc5a:	4b15      	ldr	r3, [pc, #84]	@ (800bcb0 <enableMicrophone+0xb4>)
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bc60:	4b19      	ldr	r3, [pc, #100]	@ (800bcc8 <enableMicrophone+0xcc>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bc66:	4b19      	ldr	r3, [pc, #100]	@ (800bccc <enableMicrophone+0xd0>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
 800bc6c:	e01a      	b.n	800bca4 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bc6e:	4b14      	ldr	r3, [pc, #80]	@ (800bcc0 <enableMicrophone+0xc4>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b25b      	sxtb	r3, r3
 800bc74:	0018      	movs	r0, r3
 800bc76:	f7ff fe5d 	bl	800b934 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bc7a:	4b12      	ldr	r3, [pc, #72]	@ (800bcc4 <enableMicrophone+0xc8>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bc80:	4b11      	ldr	r3, [pc, #68]	@ (800bcc8 <enableMicrophone+0xcc>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bc86:	4b11      	ldr	r3, [pc, #68]	@ (800bccc <enableMicrophone+0xd0>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bc8c:	4b09      	ldr	r3, [pc, #36]	@ (800bcb4 <enableMicrophone+0xb8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	0018      	movs	r0, r3
 800bc92:	f006 fb0f 	bl	80122b4 <HAL_I2S_DMAStop>
 800bc96:	1e03      	subs	r3, r0, #0
 800bc98:	d001      	beq.n	800bc9e <enableMicrophone+0xa2>
        {
            return false;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	e003      	b.n	800bca6 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800bc9e:	4b04      	ldr	r3, [pc, #16]	@ (800bcb0 <enableMicrophone+0xb4>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800bca4:	2301      	movs	r3, #1
}
 800bca6:	0018      	movs	r0, r3
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	b002      	add	sp, #8
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	46c0      	nop			@ (mov r8, r8)
 800bcb0:	200012b4 	.word	0x200012b4
 800bcb4:	20001cfc 	.word	0x20001cfc
 800bcb8:	200012f8 	.word	0x200012f8
 800bcbc:	200012b8 	.word	0x200012b8
 800bcc0:	20001d04 	.word	0x20001d04
 800bcc4:	200012b6 	.word	0x200012b6
 800bcc8:	200012b5 	.word	0x200012b5
 800bccc:	200012b7 	.word	0x200012b7

0800bcd0 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	@ (800bd08 <startSPLcalculation+0x38>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2201      	movs	r2, #1
 800bcdc:	4053      	eors	r3, r2
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <startSPLcalculation+0x18>
    {
        return false;
 800bce4:	2300      	movs	r3, #0
 800bce6:	e00c      	b.n	800bd02 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800bce8:	4b08      	ldr	r3, [pc, #32]	@ (800bd0c <startSPLcalculation+0x3c>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d001      	beq.n	800bcf6 <startSPLcalculation+0x26>
    {
        return true;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e005      	b.n	800bd02 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800bcf6:	f000 fb63 	bl	800c3c0 <resetSPLstate>
    SPLcalcEnabled = true;
 800bcfa:	4b04      	ldr	r3, [pc, #16]	@ (800bd0c <startSPLcalculation+0x3c>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	701a      	strb	r2, [r3, #0]
    return true;
 800bd00:	2301      	movs	r3, #1
}
 800bd02:	0018      	movs	r0, r3
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	200012b4 	.word	0x200012b4
 800bd0c:	200012b5 	.word	0x200012b5

0800bd10 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bd18:	4b05      	ldr	r3, [pc, #20]	@ (800bd30 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d102      	bne.n	800bd28 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800bd22:	2000      	movs	r0, #0
 800bd24:	f000 f81a 	bl	800bd5c <processHalfDMAbuffer>
  }
}
 800bd28:	46c0      	nop			@ (mov r8, r8)
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	b002      	add	sp, #8
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20001cfc 	.word	0x20001cfc

0800bd34 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bd3c:	4b06      	ldr	r3, [pc, #24]	@ (800bd58 <HAL_I2S_RxCpltCallback+0x24>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d104      	bne.n	800bd50 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800bd46:	2380      	movs	r3, #128	@ 0x80
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	0018      	movs	r0, r3
 800bd4c:	f000 f806 	bl	800bd5c <processHalfDMAbuffer>
  }
}
 800bd50:	46c0      	nop			@ (mov r8, r8)
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b002      	add	sp, #8
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20001cfc 	.word	0x20001cfc

0800bd5c <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	005a      	lsls	r2, r3, #1
 800bd68:	4b15      	ldr	r3, [pc, #84]	@ (800bdc0 <processHalfDMAbuffer+0x64>)
 800bd6a:	18d3      	adds	r3, r2, r3
 800bd6c:	4a15      	ldr	r2, [pc, #84]	@ (800bdc4 <processHalfDMAbuffer+0x68>)
 800bd6e:	2180      	movs	r1, #128	@ 0x80
 800bd70:	0089      	lsls	r1, r1, #2
 800bd72:	0018      	movs	r0, r3
 800bd74:	f000 fd35 	bl	800c7e2 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800bd78:	4b13      	ldr	r3, [pc, #76]	@ (800bdc8 <processHalfDMAbuffer+0x6c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	425a      	negs	r2, r3
 800bd7e:	4153      	adcs	r3, r2
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	4b11      	ldr	r3, [pc, #68]	@ (800bdc8 <processHalfDMAbuffer+0x6c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2109      	movs	r1, #9
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	419b      	sbcs	r3, r3
 800bd8c:	425b      	negs	r3, r3
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	480c      	ldr	r0, [pc, #48]	@ (800bdc4 <processHalfDMAbuffer+0x68>)
 800bd92:	2180      	movs	r1, #128	@ 0x80
 800bd94:	f000 fb46 	bl	800c424 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800bd98:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc8 <processHalfDMAbuffer+0x6c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d804      	bhi.n	800bdaa <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800bda0:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <processHalfDMAbuffer+0x6c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	4b08      	ldr	r3, [pc, #32]	@ (800bdc8 <processHalfDMAbuffer+0x6c>)
 800bda8:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800bdaa:	4b08      	ldr	r3, [pc, #32]	@ (800bdcc <processHalfDMAbuffer+0x70>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800bdb4:	f000 f826 	bl	800be04 <calculateSPLQ31>
    }
}
 800bdb8:	46c0      	nop			@ (mov r8, r8)
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	b002      	add	sp, #8
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	200012f8 	.word	0x200012f8
 800bdc4:	20001af8 	.word	0x20001af8
 800bdc8:	200012b8 	.word	0x200012b8
 800bdcc:	200012b5 	.word	0x200012b5

0800bdd0 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bdd8:	4b07      	ldr	r3, [pc, #28]	@ (800bdf8 <HAL_I2S_ErrorCallback+0x28>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d106      	bne.n	800bdf0 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bde2:	4a06      	ldr	r2, [pc, #24]	@ (800bdfc <HAL_I2S_ErrorCallback+0x2c>)
 800bde4:	239f      	movs	r3, #159	@ 0x9f
 800bde6:	0059      	lsls	r1, r3, #1
 800bde8:	4b05      	ldr	r3, [pc, #20]	@ (800be00 <HAL_I2S_ErrorCallback+0x30>)
 800bdea:	0018      	movs	r0, r3
 800bdec:	f001 fdea 	bl	800d9c4 <errorHandler>
  }
}
 800bdf0:	46c0      	nop			@ (mov r8, r8)
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	b002      	add	sp, #8
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20001cfc 	.word	0x20001cfc
 800bdfc:	08023e7c 	.word	0x08023e7c
 800be00:	080245cc 	.word	0x080245cc

0800be04 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800be04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be06:	b0b3      	sub	sp, #204	@ 0xcc
 800be08:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800be0a:	4ae2      	ldr	r2, [pc, #904]	@ (800c194 <calculateSPLQ31+0x390>)
 800be0c:	2338      	movs	r3, #56	@ 0x38
 800be0e:	2030      	movs	r0, #48	@ 0x30
 800be10:	181b      	adds	r3, r3, r0
 800be12:	19d9      	adds	r1, r3, r7
 800be14:	2334      	movs	r3, #52	@ 0x34
 800be16:	181b      	adds	r3, r3, r0
 800be18:	19d8      	adds	r0, r3, r7
 800be1a:	2380      	movs	r3, #128	@ 0x80
 800be1c:	f000 fc36 	bl	800c68c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800be20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be22:	2b00      	cmp	r3, #0
 800be24:	da00      	bge.n	800be28 <calculateSPLQ31+0x24>
 800be26:	3301      	adds	r3, #1
 800be28:	105b      	asrs	r3, r3, #1
 800be2a:	001a      	movs	r2, r3
 800be2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be2e:	2b00      	cmp	r3, #0
 800be30:	da00      	bge.n	800be34 <calculateSPLQ31+0x30>
 800be32:	3301      	adds	r3, #1
 800be34:	105b      	asrs	r3, r3, #1
 800be36:	18d3      	adds	r3, r2, r3
 800be38:	2188      	movs	r1, #136	@ 0x88
 800be3a:	187a      	adds	r2, r7, r1
 800be3c:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800be3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be40:	187b      	adds	r3, r7, r1
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	3304      	adds	r3, #4
 800be48:	2284      	movs	r2, #132	@ 0x84
 800be4a:	18b9      	adds	r1, r7, r2
 800be4c:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800be4e:	18bb      	adds	r3, r7, r2
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4ad1      	ldr	r2, [pc, #836]	@ (800c198 <calculateSPLQ31+0x394>)
 800be54:	0019      	movs	r1, r3
 800be56:	0010      	movs	r0, r2
 800be58:	f000 fc58 	bl	800c70c <getPo2factor>
 800be5c:	0003      	movs	r3, r0
 800be5e:	2280      	movs	r2, #128	@ 0x80
 800be60:	18ba      	adds	r2, r7, r2
 800be62:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	2284      	movs	r2, #132	@ 0x84
 800be68:	2130      	movs	r1, #48	@ 0x30
 800be6a:	1852      	adds	r2, r2, r1
 800be6c:	19d2      	adds	r2, r2, r7
 800be6e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800be70:	2300      	movs	r3, #0
 800be72:	2280      	movs	r2, #128	@ 0x80
 800be74:	1852      	adds	r2, r2, r1
 800be76:	19d2      	adds	r2, r2, r7
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	e032      	b.n	800bee2 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800be7c:	4ac5      	ldr	r2, [pc, #788]	@ (800c194 <calculateSPLQ31+0x390>)
 800be7e:	2680      	movs	r6, #128	@ 0x80
 800be80:	2330      	movs	r3, #48	@ 0x30
 800be82:	18f1      	adds	r1, r6, r3
 800be84:	19cb      	adds	r3, r1, r7
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	589a      	ldr	r2, [r3, r2]
 800be8c:	2188      	movs	r1, #136	@ 0x88
 800be8e:	1879      	adds	r1, r7, r1
 800be90:	680b      	ldr	r3, [r1, #0]
 800be92:	1ad2      	subs	r2, r2, r3
 800be94:	2180      	movs	r1, #128	@ 0x80
 800be96:	1879      	adds	r1, r7, r1
 800be98:	680b      	ldr	r3, [r1, #0]
 800be9a:	409a      	lsls	r2, r3
 800be9c:	0011      	movs	r1, r2
 800be9e:	4abf      	ldr	r2, [pc, #764]	@ (800c19c <calculateSPLQ31+0x398>)
 800bea0:	2084      	movs	r0, #132	@ 0x84
 800bea2:	2330      	movs	r3, #48	@ 0x30
 800bea4:	18c3      	adds	r3, r0, r3
 800bea6:	19db      	adds	r3, r3, r7
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800beae:	2230      	movs	r2, #48	@ 0x30
 800beb0:	1883      	adds	r3, r0, r2
 800beb2:	19db      	adds	r3, r3, r7
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3301      	adds	r3, #1
 800beb8:	49b8      	ldr	r1, [pc, #736]	@ (800c19c <calculateSPLQ31+0x398>)
 800beba:	009a      	lsls	r2, r3, #2
 800bebc:	2300      	movs	r3, #0
 800bebe:	5053      	str	r3, [r2, r1]
        count += 2;
 800bec0:	2230      	movs	r2, #48	@ 0x30
 800bec2:	1883      	adds	r3, r0, r2
 800bec4:	19db      	adds	r3, r3, r7
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	3302      	adds	r3, #2
 800beca:	0011      	movs	r1, r2
 800becc:	1882      	adds	r2, r0, r2
 800bece:	19d2      	adds	r2, r2, r7
 800bed0:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bed2:	000a      	movs	r2, r1
 800bed4:	18b3      	adds	r3, r6, r2
 800bed6:	19db      	adds	r3, r3, r7
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3301      	adds	r3, #1
 800bedc:	18b2      	adds	r2, r6, r2
 800bede:	19d2      	adds	r2, r2, r7
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	2380      	movs	r3, #128	@ 0x80
 800bee4:	2630      	movs	r6, #48	@ 0x30
 800bee6:	199b      	adds	r3, r3, r6
 800bee8:	19db      	adds	r3, r3, r7
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b7f      	cmp	r3, #127	@ 0x7f
 800beee:	d9c5      	bls.n	800be7c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800bef0:	4bab      	ldr	r3, [pc, #684]	@ (800c1a0 <calculateSPLQ31+0x39c>)
 800bef2:	6818      	ldr	r0, [r3, #0]
 800bef4:	49a9      	ldr	r1, [pc, #676]	@ (800c19c <calculateSPLQ31+0x398>)
 800bef6:	2301      	movs	r3, #1
 800bef8:	2200      	movs	r2, #0
 800befa:	f010 ff5f 	bl	801cdbc <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800befe:	4aa9      	ldr	r2, [pc, #676]	@ (800c1a4 <calculateSPLQ31+0x3a0>)
 800bf00:	2338      	movs	r3, #56	@ 0x38
 800bf02:	199b      	adds	r3, r3, r6
 800bf04:	19d9      	adds	r1, r3, r7
 800bf06:	2334      	movs	r3, #52	@ 0x34
 800bf08:	199b      	adds	r3, r3, r6
 800bf0a:	19d8      	adds	r0, r3, r7
 800bf0c:	237e      	movs	r3, #126	@ 0x7e
 800bf0e:	f000 fbbd 	bl	800c68c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800bf12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf14:	2380      	movs	r3, #128	@ 0x80
 800bf16:	061b      	lsls	r3, r3, #24
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d101      	bne.n	800bf20 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800bf1c:	4b9e      	ldr	r3, [pc, #632]	@ (800c198 <calculateSPLQ31+0x394>)
 800bf1e:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800bf20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf22:	2380      	movs	r3, #128	@ 0x80
 800bf24:	061b      	lsls	r3, r3, #24
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d101      	bne.n	800bf2e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800bf2a:	4b9b      	ldr	r3, [pc, #620]	@ (800c198 <calculateSPLQ31+0x394>)
 800bf2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800bf2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf30:	17da      	asrs	r2, r3, #31
 800bf32:	189b      	adds	r3, r3, r2
 800bf34:	4053      	eors	r3, r2
 800bf36:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800bf38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf3a:	17da      	asrs	r2, r3, #31
 800bf3c:	189b      	adds	r3, r3, r2
 800bf3e:	4053      	eors	r3, r2
 800bf40:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800bf42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf46:	429a      	cmp	r2, r3
 800bf48:	dd01      	ble.n	800bf4e <calculateSPLQ31+0x14a>
    {
        max = min;
 800bf4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800bf4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf50:	3304      	adds	r3, #4
 800bf52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800bf54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bf56:	4a90      	ldr	r2, [pc, #576]	@ (800c198 <calculateSPLQ31+0x394>)
 800bf58:	0019      	movs	r1, r3
 800bf5a:	0010      	movs	r0, r2
 800bf5c:	f000 fbd6 	bl	800c70c <getPo2factor>
 800bf60:	0003      	movs	r3, r0
 800bf62:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800bf64:	2302      	movs	r3, #2
 800bf66:	22ac      	movs	r2, #172	@ 0xac
 800bf68:	18ba      	adds	r2, r7, r2
 800bf6a:	6013      	str	r3, [r2, #0]
 800bf6c:	e012      	b.n	800bf94 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800bf6e:	4a8b      	ldr	r2, [pc, #556]	@ (800c19c <calculateSPLQ31+0x398>)
 800bf70:	20ac      	movs	r0, #172	@ 0xac
 800bf72:	183b      	adds	r3, r7, r0
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	589a      	ldr	r2, [r3, r2]
 800bf7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf7c:	409a      	lsls	r2, r3
 800bf7e:	0011      	movs	r1, r2
 800bf80:	4a86      	ldr	r2, [pc, #536]	@ (800c19c <calculateSPLQ31+0x398>)
 800bf82:	183b      	adds	r3, r7, r0
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800bf8a:	183b      	adds	r3, r7, r0
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	183a      	adds	r2, r7, r0
 800bf92:	6013      	str	r3, [r2, #0]
 800bf94:	23ac      	movs	r3, #172	@ 0xac
 800bf96:	18fb      	adds	r3, r7, r3
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf9c:	d9e7      	bls.n	800bf6e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800bf9e:	4b7d      	ldr	r3, [pc, #500]	@ (800c194 <calculateSPLQ31+0x390>)
 800bfa0:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800bfa2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800bfa4:	4b7d      	ldr	r3, [pc, #500]	@ (800c19c <calculateSPLQ31+0x398>)
 800bfa6:	2240      	movs	r2, #64	@ 0x40
 800bfa8:	0018      	movs	r0, r3
 800bfaa:	f011 fcb1 	bl	801d910 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800bfae:	2330      	movs	r3, #48	@ 0x30
 800bfb0:	18fb      	adds	r3, r7, r3
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	2330      	movs	r3, #48	@ 0x30
 800bfb6:	001a      	movs	r2, r3
 800bfb8:	2100      	movs	r1, #0
 800bfba:	f013 facd 	bl	801f558 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	21a0      	movs	r1, #160	@ 0xa0
 800bfc4:	1879      	adds	r1, r7, r1
 800bfc6:	600a      	str	r2, [r1, #0]
 800bfc8:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bfca:	2301      	movs	r3, #1
 800bfcc:	229c      	movs	r2, #156	@ 0x9c
 800bfce:	18ba      	adds	r2, r7, r2
 800bfd0:	6013      	str	r3, [r2, #0]
 800bfd2:	e05b      	b.n	800c08c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800bfd4:	269c      	movs	r6, #156	@ 0x9c
 800bfd6:	19bb      	adds	r3, r7, r6
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	009a      	lsls	r2, r3, #2
 800bfdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfde:	189b      	adds	r3, r3, r2
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	17db      	asrs	r3, r3, #31
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	4b6f      	ldr	r3, [pc, #444]	@ (800c1a8 <calculateSPLQ31+0x3a4>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	19bb      	adds	r3, r7, r6
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	18d3      	adds	r3, r2, r3
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	60bb      	str	r3, [r7, #8]
 800bff8:	2300      	movs	r3, #0
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6938      	ldr	r0, [r7, #16]
 800c002:	6979      	ldr	r1, [r7, #20]
 800c004:	f7f4 fadc 	bl	80005c0 <__aeabi_lmul>
 800c008:	0002      	movs	r2, r0
 800c00a:	000b      	movs	r3, r1
 800c00c:	0010      	movs	r0, r2
 800c00e:	0019      	movs	r1, r3
 800c010:	23a0      	movs	r3, #160	@ 0xa0
 800c012:	18fa      	adds	r2, r7, r3
 800c014:	6853      	ldr	r3, [r2, #4]
 800c016:	6812      	ldr	r2, [r2, #0]
 800c018:	1812      	adds	r2, r2, r0
 800c01a:	414b      	adcs	r3, r1
 800c01c:	21a0      	movs	r1, #160	@ 0xa0
 800c01e:	1879      	adds	r1, r7, r1
 800c020:	600a      	str	r2, [r1, #0]
 800c022:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c024:	4b61      	ldr	r3, [pc, #388]	@ (800c1ac <calculateSPLQ31+0x3a8>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	19bb      	adds	r3, r7, r6
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	18d3      	adds	r3, r2, r3
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b06      	cmp	r3, #6
 800c032:	d025      	beq.n	800c080 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c034:	4b5d      	ldr	r3, [pc, #372]	@ (800c1ac <calculateSPLQ31+0x3a8>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	19bb      	adds	r3, r7, r6
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	18d3      	adds	r3, r2, r3
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	2230      	movs	r2, #48	@ 0x30
 800c042:	18ba      	adds	r2, r7, r2
 800c044:	00db      	lsls	r3, r3, #3
 800c046:	18d3      	adds	r3, r2, r3
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	6859      	ldr	r1, [r3, #4]
 800c04c:	19bb      	adds	r3, r7, r6
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	009a      	lsls	r2, r3, #2
 800c052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c054:	189b      	adds	r3, r3, r2
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	603b      	str	r3, [r7, #0]
 800c05a:	17db      	asrs	r3, r3, #31
 800c05c:	607b      	str	r3, [r7, #4]
 800c05e:	4b53      	ldr	r3, [pc, #332]	@ (800c1ac <calculateSPLQ31+0x3a8>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	19be      	adds	r6, r7, r6
 800c064:	6833      	ldr	r3, [r6, #0]
 800c066:	18d3      	adds	r3, r2, r3
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	001e      	movs	r6, r3
 800c06c:	683a      	ldr	r2, [r7, #0]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	1880      	adds	r0, r0, r2
 800c072:	4159      	adcs	r1, r3
 800c074:	2330      	movs	r3, #48	@ 0x30
 800c076:	18fa      	adds	r2, r7, r3
 800c078:	00f3      	lsls	r3, r6, #3
 800c07a:	18d3      	adds	r3, r2, r3
 800c07c:	6018      	str	r0, [r3, #0]
 800c07e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c080:	229c      	movs	r2, #156	@ 0x9c
 800c082:	18bb      	adds	r3, r7, r2
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	3301      	adds	r3, #1
 800c088:	18ba      	adds	r2, r7, r2
 800c08a:	6013      	str	r3, [r2, #0]
 800c08c:	239c      	movs	r3, #156	@ 0x9c
 800c08e:	18fb      	adds	r3, r7, r3
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b3f      	cmp	r3, #63	@ 0x3f
 800c094:	d99e      	bls.n	800bfd4 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c096:	2380      	movs	r3, #128	@ 0x80
 800c098:	18fb      	adds	r3, r7, r3
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	001a      	movs	r2, r3
 800c0a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	18d3      	adds	r3, r2, r3
 800c0a6:	3b22      	subs	r3, #34	@ 0x22
 800c0a8:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c0aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0ac:	17da      	asrs	r2, r3, #31
 800c0ae:	189b      	adds	r3, r3, r2
 800c0b0:	4053      	eors	r3, r2
 800c0b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c0b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	da62      	bge.n	800c180 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c0ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0bc:	3b20      	subs	r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	db05      	blt.n	800c0ce <calculateSPLQ31+0x2ca>
 800c0c2:	22a0      	movs	r2, #160	@ 0xa0
 800c0c4:	18ba      	adds	r2, r7, r2
 800c0c6:	6812      	ldr	r2, [r2, #0]
 800c0c8:	409a      	lsls	r2, r3
 800c0ca:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0cc:	e010      	b.n	800c0f0 <calculateSPLQ31+0x2ec>
 800c0ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	22a0      	movs	r2, #160	@ 0xa0
 800c0d6:	18ba      	adds	r2, r7, r2
 800c0d8:	6812      	ldr	r2, [r2, #0]
 800c0da:	40da      	lsrs	r2, r3
 800c0dc:	0013      	movs	r3, r2
 800c0de:	22a4      	movs	r2, #164	@ 0xa4
 800c0e0:	18ba      	adds	r2, r7, r2
 800c0e2:	6811      	ldr	r1, [r2, #0]
 800c0e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0e6:	4091      	lsls	r1, r2
 800c0e8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c0ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ec:	431a      	orrs	r2, r3
 800c0ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0f0:	21a0      	movs	r1, #160	@ 0xa0
 800c0f2:	187b      	adds	r3, r7, r1
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f8:	409a      	lsls	r2, r3
 800c0fa:	623a      	str	r2, [r7, #32]
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c100:	187a      	adds	r2, r7, r1
 800c102:	6013      	str	r3, [r2, #0]
 800c104:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c106:	2300      	movs	r3, #0
 800c108:	2298      	movs	r2, #152	@ 0x98
 800c10a:	18ba      	adds	r2, r7, r2
 800c10c:	6013      	str	r3, [r2, #0]
 800c10e:	e031      	b.n	800c174 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c110:	2330      	movs	r3, #48	@ 0x30
 800c112:	18fa      	adds	r2, r7, r3
 800c114:	2398      	movs	r3, #152	@ 0x98
 800c116:	18fb      	adds	r3, r7, r3
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	18d3      	adds	r3, r2, r3
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c124:	3920      	subs	r1, #32
 800c126:	2900      	cmp	r1, #0
 800c128:	db03      	blt.n	800c132 <calculateSPLQ31+0x32e>
 800c12a:	0010      	movs	r0, r2
 800c12c:	4088      	lsls	r0, r1
 800c12e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c130:	e00c      	b.n	800c14c <calculateSPLQ31+0x348>
 800c132:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c134:	2020      	movs	r0, #32
 800c136:	1a41      	subs	r1, r0, r1
 800c138:	0010      	movs	r0, r2
 800c13a:	40c8      	lsrs	r0, r1
 800c13c:	0001      	movs	r1, r0
 800c13e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c140:	001c      	movs	r4, r3
 800c142:	4084      	lsls	r4, r0
 800c144:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c148:	4308      	orrs	r0, r1
 800c14a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c14c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c14e:	0013      	movs	r3, r2
 800c150:	408b      	lsls	r3, r1
 800c152:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c154:	2330      	movs	r3, #48	@ 0x30
 800c156:	18fa      	adds	r2, r7, r3
 800c158:	2098      	movs	r0, #152	@ 0x98
 800c15a:	183b      	adds	r3, r7, r0
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	18d3      	adds	r3, r2, r3
 800c162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c166:	6019      	str	r1, [r3, #0]
 800c168:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c16a:	183b      	adds	r3, r7, r0
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3301      	adds	r3, #1
 800c170:	183a      	adds	r2, r7, r0
 800c172:	6013      	str	r3, [r2, #0]
 800c174:	2398      	movs	r3, #152	@ 0x98
 800c176:	18fb      	adds	r3, r7, r3
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2b05      	cmp	r3, #5
 800c17c:	d9c8      	bls.n	800c110 <calculateSPLQ31+0x30c>
 800c17e:	e06b      	b.n	800c258 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c182:	3b20      	subs	r3, #32
 800c184:	2b00      	cmp	r3, #0
 800c186:	db13      	blt.n	800c1b0 <calculateSPLQ31+0x3ac>
 800c188:	22a4      	movs	r2, #164	@ 0xa4
 800c18a:	18ba      	adds	r2, r7, r2
 800c18c:	6812      	ldr	r2, [r2, #0]
 800c18e:	40da      	lsrs	r2, r3
 800c190:	61ba      	str	r2, [r7, #24]
 800c192:	e01e      	b.n	800c1d2 <calculateSPLQ31+0x3ce>
 800c194:	20001af8 	.word	0x20001af8
 800c198:	7fffffff 	.word	0x7fffffff
 800c19c:	20001d44 	.word	0x20001d44
 800c1a0:	200000b0 	.word	0x200000b0
 800c1a4:	20001d4c 	.word	0x20001d4c
 800c1a8:	200000b4 	.word	0x200000b4
 800c1ac:	200000c0 	.word	0x200000c0
 800c1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	22a4      	movs	r2, #164	@ 0xa4
 800c1b8:	18ba      	adds	r2, r7, r2
 800c1ba:	6812      	ldr	r2, [r2, #0]
 800c1bc:	409a      	lsls	r2, r3
 800c1be:	0013      	movs	r3, r2
 800c1c0:	22a0      	movs	r2, #160	@ 0xa0
 800c1c2:	18ba      	adds	r2, r7, r2
 800c1c4:	6811      	ldr	r1, [r2, #0]
 800c1c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1c8:	40d1      	lsrs	r1, r2
 800c1ca:	61b9      	str	r1, [r7, #24]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	61ba      	str	r2, [r7, #24]
 800c1d2:	23a4      	movs	r3, #164	@ 0xa4
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1da:	40da      	lsrs	r2, r3
 800c1dc:	61fa      	str	r2, [r7, #28]
 800c1de:	69ba      	ldr	r2, [r7, #24]
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	21a0      	movs	r1, #160	@ 0xa0
 800c1e4:	1879      	adds	r1, r7, r1
 800c1e6:	600a      	str	r2, [r1, #0]
 800c1e8:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2294      	movs	r2, #148	@ 0x94
 800c1ee:	18ba      	adds	r2, r7, r2
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e02c      	b.n	800c24e <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c1f4:	2330      	movs	r3, #48	@ 0x30
 800c1f6:	18fa      	adds	r2, r7, r3
 800c1f8:	2394      	movs	r3, #148	@ 0x94
 800c1fa:	18fb      	adds	r3, r7, r3
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	00db      	lsls	r3, r3, #3
 800c200:	18d3      	adds	r3, r2, r3
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c208:	3920      	subs	r1, #32
 800c20a:	2900      	cmp	r1, #0
 800c20c:	db03      	blt.n	800c216 <calculateSPLQ31+0x412>
 800c20e:	0018      	movs	r0, r3
 800c210:	40c8      	lsrs	r0, r1
 800c212:	0004      	movs	r4, r0
 800c214:	e00a      	b.n	800c22c <calculateSPLQ31+0x428>
 800c216:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c218:	2020      	movs	r0, #32
 800c21a:	1a41      	subs	r1, r0, r1
 800c21c:	0018      	movs	r0, r3
 800c21e:	4088      	lsls	r0, r1
 800c220:	0001      	movs	r1, r0
 800c222:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c224:	0016      	movs	r6, r2
 800c226:	40c6      	lsrs	r6, r0
 800c228:	0034      	movs	r4, r6
 800c22a:	430c      	orrs	r4, r1
 800c22c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c22e:	40cb      	lsrs	r3, r1
 800c230:	001d      	movs	r5, r3
 800c232:	2330      	movs	r3, #48	@ 0x30
 800c234:	18fa      	adds	r2, r7, r3
 800c236:	2194      	movs	r1, #148	@ 0x94
 800c238:	187b      	adds	r3, r7, r1
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	00db      	lsls	r3, r3, #3
 800c23e:	18d3      	adds	r3, r2, r3
 800c240:	601c      	str	r4, [r3, #0]
 800c242:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c244:	187b      	adds	r3, r7, r1
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	187a      	adds	r2, r7, r1
 800c24c:	6013      	str	r3, [r2, #0]
 800c24e:	2394      	movs	r3, #148	@ 0x94
 800c250:	18fb      	adds	r3, r7, r3
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b05      	cmp	r3, #5
 800c256:	d9cd      	bls.n	800c1f4 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c258:	230f      	movs	r3, #15
 800c25a:	425d      	negs	r5, r3
 800c25c:	2305      	movs	r3, #5
 800c25e:	425e      	negs	r6, r3
 800c260:	4b4a      	ldr	r3, [pc, #296]	@ (800c38c <calculateSPLQ31+0x588>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	4b4a      	ldr	r3, [pc, #296]	@ (800c390 <calculateSPLQ31+0x58c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	21a0      	movs	r1, #160	@ 0xa0
 800c26e:	1879      	adds	r1, r7, r1
 800c270:	6808      	ldr	r0, [r1, #0]
 800c272:	6849      	ldr	r1, [r1, #4]
 800c274:	4c47      	ldr	r4, [pc, #284]	@ (800c394 <calculateSPLQ31+0x590>)
 800c276:	9403      	str	r4, [sp, #12]
 800c278:	4c47      	ldr	r4, [pc, #284]	@ (800c398 <calculateSPLQ31+0x594>)
 800c27a:	9402      	str	r4, [sp, #8]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	9200      	str	r2, [sp, #0]
 800c280:	0033      	movs	r3, r6
 800c282:	002a      	movs	r2, r5
 800c284:	f000 fa86 	bl	800c794 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c288:	2300      	movs	r3, #0
 800c28a:	2290      	movs	r2, #144	@ 0x90
 800c28c:	18ba      	adds	r2, r7, r2
 800c28e:	6013      	str	r3, [r2, #0]
 800c290:	e026      	b.n	800c2e0 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c292:	2330      	movs	r3, #48	@ 0x30
 800c294:	18fa      	adds	r2, r7, r3
 800c296:	2490      	movs	r4, #144	@ 0x90
 800c298:	193b      	adds	r3, r7, r4
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	18d3      	adds	r3, r2, r3
 800c2a0:	6818      	ldr	r0, [r3, #0]
 800c2a2:	6859      	ldr	r1, [r3, #4]
 800c2a4:	230f      	movs	r3, #15
 800c2a6:	425d      	negs	r5, r3
 800c2a8:	2305      	movs	r3, #5
 800c2aa:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c2ac:	193b      	adds	r3, r7, r4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	009a      	lsls	r2, r3, #2
 800c2b2:	4b3a      	ldr	r3, [pc, #232]	@ (800c39c <calculateSPLQ31+0x598>)
 800c2b4:	18d3      	adds	r3, r2, r3
 800c2b6:	193a      	adds	r2, r7, r4
 800c2b8:	6812      	ldr	r2, [r2, #0]
 800c2ba:	0094      	lsls	r4, r2, #2
 800c2bc:	4a38      	ldr	r2, [pc, #224]	@ (800c3a0 <calculateSPLQ31+0x59c>)
 800c2be:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c2c0:	9203      	str	r2, [sp, #12]
 800c2c2:	9302      	str	r3, [sp, #8]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	0033      	movs	r3, r6
 800c2ce:	002a      	movs	r2, r5
 800c2d0:	f000 fa60 	bl	800c794 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c2d4:	2490      	movs	r4, #144	@ 0x90
 800c2d6:	193b      	adds	r3, r7, r4
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	193a      	adds	r2, r7, r4
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	2390      	movs	r3, #144	@ 0x90
 800c2e2:	18fb      	adds	r3, r7, r3
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b05      	cmp	r3, #5
 800c2e8:	d9d3      	bls.n	800c292 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c2ea:	4b2b      	ldr	r3, [pc, #172]	@ (800c398 <calculateSPLQ31+0x594>)
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	4b2d      	ldr	r3, [pc, #180]	@ (800c3a4 <calculateSPLQ31+0x5a0>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	18d2      	adds	r2, r2, r3
 800c2f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a4 <calculateSPLQ31+0x5a0>)
 800c2f6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c2f8:	4b26      	ldr	r3, [pc, #152]	@ (800c394 <calculateSPLQ31+0x590>)
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c3a8 <calculateSPLQ31+0x5a4>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	18d2      	adds	r2, r2, r3
 800c302:	4b29      	ldr	r3, [pc, #164]	@ (800c3a8 <calculateSPLQ31+0x5a4>)
 800c304:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c306:	2300      	movs	r3, #0
 800c308:	228c      	movs	r2, #140	@ 0x8c
 800c30a:	18ba      	adds	r2, r7, r2
 800c30c:	6013      	str	r3, [r2, #0]
 800c30e:	e025      	b.n	800c35c <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c310:	4b22      	ldr	r3, [pc, #136]	@ (800c39c <calculateSPLQ31+0x598>)
 800c312:	208c      	movs	r0, #140	@ 0x8c
 800c314:	183a      	adds	r2, r7, r0
 800c316:	6812      	ldr	r2, [r2, #0]
 800c318:	0092      	lsls	r2, r2, #2
 800c31a:	58d2      	ldr	r2, [r2, r3]
 800c31c:	4b23      	ldr	r3, [pc, #140]	@ (800c3ac <calculateSPLQ31+0x5a8>)
 800c31e:	1839      	adds	r1, r7, r0
 800c320:	6809      	ldr	r1, [r1, #0]
 800c322:	0089      	lsls	r1, r1, #2
 800c324:	58cb      	ldr	r3, [r1, r3]
 800c326:	18d1      	adds	r1, r2, r3
 800c328:	4b20      	ldr	r3, [pc, #128]	@ (800c3ac <calculateSPLQ31+0x5a8>)
 800c32a:	183a      	adds	r2, r7, r0
 800c32c:	6812      	ldr	r2, [r2, #0]
 800c32e:	0092      	lsls	r2, r2, #2
 800c330:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c332:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a0 <calculateSPLQ31+0x59c>)
 800c334:	183a      	adds	r2, r7, r0
 800c336:	6812      	ldr	r2, [r2, #0]
 800c338:	0092      	lsls	r2, r2, #2
 800c33a:	58d2      	ldr	r2, [r2, r3]
 800c33c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3b0 <calculateSPLQ31+0x5ac>)
 800c33e:	1839      	adds	r1, r7, r0
 800c340:	6809      	ldr	r1, [r1, #0]
 800c342:	0089      	lsls	r1, r1, #2
 800c344:	58cb      	ldr	r3, [r1, r3]
 800c346:	18d1      	adds	r1, r2, r3
 800c348:	4b19      	ldr	r3, [pc, #100]	@ (800c3b0 <calculateSPLQ31+0x5ac>)
 800c34a:	183a      	adds	r2, r7, r0
 800c34c:	6812      	ldr	r2, [r2, #0]
 800c34e:	0092      	lsls	r2, r2, #2
 800c350:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c352:	183b      	adds	r3, r7, r0
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	3301      	adds	r3, #1
 800c358:	183a      	adds	r2, r7, r0
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	238c      	movs	r3, #140	@ 0x8c
 800c35e:	18fb      	adds	r3, r7, r3
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b05      	cmp	r3, #5
 800c364:	d9d4      	bls.n	800c310 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <calculateSPLQ31+0x5b0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	4b11      	ldr	r3, [pc, #68]	@ (800c3b4 <calculateSPLQ31+0x5b0>)
 800c36e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c370:	4b10      	ldr	r3, [pc, #64]	@ (800c3b4 <calculateSPLQ31+0x5b0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b0f      	cmp	r3, #15
 800c376:	d905      	bls.n	800c384 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c378:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b8 <calculateSPLQ31+0x5b4>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c37e:	4b0f      	ldr	r3, [pc, #60]	@ (800c3bc <calculateSPLQ31+0x5b8>)
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
    }
}
 800c384:	46c0      	nop			@ (mov r8, r8)
 800c386:	46bd      	mov	sp, r7
 800c388:	b02f      	add	sp, #188	@ 0xbc
 800c38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c38c:	200000b8 	.word	0x200000b8
 800c390:	200000bc 	.word	0x200000bc
 800c394:	200012c4 	.word	0x200012c4
 800c398:	200012c0 	.word	0x200012c0
 800c39c:	200012c8 	.word	0x200012c8
 800c3a0:	200012e0 	.word	0x200012e0
 800c3a4:	20001d08 	.word	0x20001d08
 800c3a8:	20001d0c 	.word	0x20001d0c
 800c3ac:	20001d10 	.word	0x20001d10
 800c3b0:	20001d28 	.word	0x20001d28
 800c3b4:	20001d40 	.word	0x20001d40
 800c3b8:	200012b7 	.word	0x200012b7
 800c3bc:	200012b5 	.word	0x200012b5

0800c3c0 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c3c6:	4b11      	ldr	r3, [pc, #68]	@ (800c40c <resetSPLstate+0x4c>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c3cc:	4b10      	ldr	r3, [pc, #64]	@ (800c410 <resetSPLstate+0x50>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c3d2:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <resetSPLstate+0x54>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c3d8:	2300      	movs	r3, #0
 800c3da:	607b      	str	r3, [r7, #4]
 800c3dc:	e00c      	b.n	800c3f8 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c3de:	4b0e      	ldr	r3, [pc, #56]	@ (800c418 <resetSPLstate+0x58>)
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	0092      	lsls	r2, r2, #2
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c3e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c41c <resetSPLstate+0x5c>)
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	607b      	str	r3, [r7, #4]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b05      	cmp	r3, #5
 800c3fc:	d9ef      	bls.n	800c3de <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c3fe:	4b08      	ldr	r3, [pc, #32]	@ (800c420 <resetSPLstate+0x60>)
 800c400:	2200      	movs	r2, #0
 800c402:	701a      	strb	r2, [r3, #0]
}
 800c404:	46c0      	nop			@ (mov r8, r8)
 800c406:	46bd      	mov	sp, r7
 800c408:	b002      	add	sp, #8
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	20001d08 	.word	0x20001d08
 800c410:	20001d0c 	.word	0x20001d0c
 800c414:	20001d40 	.word	0x20001d40
 800c418:	20001d10 	.word	0x20001d10
 800c41c:	20001d28 	.word	0x20001d28
 800c420:	200012b7 	.word	0x200012b7

0800c424 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c424:	b5b0      	push	{r4, r5, r7, lr}
 800c426:	b090      	sub	sp, #64	@ 0x40
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	0019      	movs	r1, r3
 800c430:	1dfb      	adds	r3, r7, #7
 800c432:	701a      	strb	r2, [r3, #0]
 800c434:	1dbb      	adds	r3, r7, #6
 800c436:	1c0a      	adds	r2, r1, #0
 800c438:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c43a:	1dfb      	adds	r3, r7, #7
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d005      	beq.n	800c44e <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c442:	4b3b      	ldr	r3, [pc, #236]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c444:	2200      	movs	r2, #0
 800c446:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c448:	4b3a      	ldr	r3, [pc, #232]	@ (800c534 <getFilteredMaxAmplitudeQ31+0x110>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c456:	2305      	movs	r3, #5
 800c458:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c45a:	2300      	movs	r3, #0
 800c45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c45e:	e040      	b.n	800c4e2 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	18d3      	adds	r3, r2, r3
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46c:	409a      	lsls	r2, r3
 800c46e:	0013      	movs	r3, r2
 800c470:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c472:	4b30      	ldr	r3, [pc, #192]	@ (800c534 <getFilteredMaxAmplitudeQ31+0x110>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	425a      	negs	r2, r3
 800c478:	4b2e      	ldr	r3, [pc, #184]	@ (800c534 <getFilteredMaxAmplitudeQ31+0x110>)
 800c47a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c47c:	2418      	movs	r4, #24
 800c47e:	193a      	adds	r2, r7, r4
 800c480:	492c      	ldr	r1, [pc, #176]	@ (800c534 <getFilteredMaxAmplitudeQ31+0x110>)
 800c482:	231c      	movs	r3, #28
 800c484:	18f8      	adds	r0, r7, r3
 800c486:	2301      	movs	r3, #1
 800c488:	f011 fa9a 	bl	801d9c0 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c48c:	2514      	movs	r5, #20
 800c48e:	197a      	adds	r2, r7, r5
 800c490:	1939      	adds	r1, r7, r4
 800c492:	4829      	ldr	r0, [pc, #164]	@ (800c538 <getFilteredMaxAmplitudeQ31+0x114>)
 800c494:	2301      	movs	r3, #1
 800c496:	f011 fa61 	bl	801d95c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c49a:	2410      	movs	r4, #16
 800c49c:	193a      	adds	r2, r7, r4
 800c49e:	4924      	ldr	r1, [pc, #144]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4a0:	4826      	ldr	r0, [pc, #152]	@ (800c53c <getFilteredMaxAmplitudeQ31+0x118>)
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	f011 fa5a 	bl	801d95c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c4a8:	4a21      	ldr	r2, [pc, #132]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4aa:	1939      	adds	r1, r7, r4
 800c4ac:	1978      	adds	r0, r7, r5
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	f011 fa86 	bl	801d9c0 <arm_add_q31>

        lastData = fx;
 800c4b4:	69fa      	ldr	r2, [r7, #28]
 800c4b6:	4b1f      	ldr	r3, [pc, #124]	@ (800c534 <getFilteredMaxAmplitudeQ31+0x110>)
 800c4b8:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	da03      	bge.n	800c4cc <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c4c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ca:	e007      	b.n	800c4dc <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c4cc:	4b18      	ldr	r3, [pc, #96]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	dd02      	ble.n	800c4dc <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c4d6:	4b16      	ldr	r3, [pc, #88]	@ (800c530 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c4dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4de:	3301      	adds	r3, #1
 800c4e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d3ba      	bcc.n	800c460 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ec:	17da      	asrs	r2, r3, #31
 800c4ee:	189b      	adds	r3, r3, r2
 800c4f0:	4053      	eors	r3, r2
 800c4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c4f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d200      	bcs.n	800c502 <getFilteredMaxAmplitudeQ31+0xde>
 800c500:	0013      	movs	r3, r2
 800c502:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c508:	40da      	lsrs	r2, r3
 800c50a:	0013      	movs	r3, r2
 800c50c:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c50e:	1dbb      	adds	r3, r7, #6
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d007      	beq.n	800c526 <getFilteredMaxAmplitudeQ31+0x102>
 800c516:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6a3a      	ldr	r2, [r7, #32]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d902      	bls.n	800c526 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c520:	4b07      	ldr	r3, [pc, #28]	@ (800c540 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c522:	6a3a      	ldr	r2, [r7, #32]
 800c524:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c526:	6a3b      	ldr	r3, [r7, #32]
}
 800c528:	0018      	movs	r0, r3
 800c52a:	46bd      	mov	sp, r7
 800c52c:	b010      	add	sp, #64	@ 0x40
 800c52e:	bdb0      	pop	{r4, r5, r7, pc}
 800c530:	20002144 	.word	0x20002144
 800c534:	20002148 	.word	0x20002148
 800c538:	080245c4 	.word	0x080245c4
 800c53c:	080245c8 	.word	0x080245c8
 800c540:	200012bc 	.word	0x200012bc

0800c544 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c550:	4913      	ldr	r1, [pc, #76]	@ (800c5a0 <floatToIntAndFrac2dp+0x5c>)
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f7f4 fd24 	bl	8000fa0 <__aeabi_fmul>
 800c558:	1c03      	adds	r3, r0, #0
 800c55a:	1c18      	adds	r0, r3, #0
 800c55c:	f015 fe64 	bl	8022228 <roundf>
 800c560:	1c03      	adds	r3, r0, #0
 800c562:	1c18      	adds	r0, r3, #0
 800c564:	f7f4 f85a 	bl	800061c <__aeabi_f2uiz>
 800c568:	0003      	movs	r3, r0
 800c56a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	2164      	movs	r1, #100	@ 0x64
 800c570:	0018      	movs	r0, r3
 800c572:	f7f3 fe17 	bl	80001a4 <__udivsi3>
 800c576:	0003      	movs	r3, r0
 800c578:	001a      	movs	r2, r3
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	b2da      	uxtb	r2, r3
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2164      	movs	r1, #100	@ 0x64
 800c58a:	434b      	muls	r3, r1
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	b2da      	uxtb	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	701a      	strb	r2, [r3, #0]
}
 800c596:	46c0      	nop			@ (mov r8, r8)
 800c598:	46bd      	mov	sp, r7
 800c59a:	b006      	add	sp, #24
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	46c0      	nop			@ (mov r8, r8)
 800c5a0:	42c80000 	.word	0x42c80000

0800c5a4 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c5b0:	4914      	ldr	r1, [pc, #80]	@ (800c604 <floatToIntAndFrac1dp+0x60>)
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7f4 fcf4 	bl	8000fa0 <__aeabi_fmul>
 800c5b8:	1c03      	adds	r3, r0, #0
 800c5ba:	1c18      	adds	r0, r3, #0
 800c5bc:	f015 fe34 	bl	8022228 <roundf>
 800c5c0:	1c03      	adds	r3, r0, #0
 800c5c2:	1c18      	adds	r0, r3, #0
 800c5c4:	f7f4 f82a 	bl	800061c <__aeabi_f2uiz>
 800c5c8:	0003      	movs	r3, r0
 800c5ca:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	210a      	movs	r1, #10
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	f7f3 fde7 	bl	80001a4 <__udivsi3>
 800c5d6:	0003      	movs	r3, r0
 800c5d8:	001a      	movs	r2, r3
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	1c19      	adds	r1, r3, #0
 800c5ea:	0089      	lsls	r1, r1, #2
 800c5ec:	18cb      	adds	r3, r1, r3
 800c5ee:	18db      	adds	r3, r3, r3
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	b2da      	uxtb	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	701a      	strb	r2, [r3, #0]
}
 800c5fa:	46c0      	nop			@ (mov r8, r8)
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	b006      	add	sp, #24
 800c600:	bd80      	pop	{r7, pc}
 800c602:	46c0      	nop			@ (mov r8, r8)
 800c604:	41200000 	.word	0x41200000

0800c608 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c608:	b590      	push	{r4, r7, lr}
 800c60a:	b087      	sub	sp, #28
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7f4 ffda 	bl	80015d0 <__aeabi_i2f>
 800c61c:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c61e:	6838      	ldr	r0, [r7, #0]
 800c620:	f7f4 ffd6 	bl	80015d0 <__aeabi_i2f>
 800c624:	1c03      	adds	r3, r0, #0
 800c626:	4918      	ldr	r1, [pc, #96]	@ (800c688 <sumToIntAverage+0x80>)
 800c628:	1c18      	adds	r0, r3, #0
 800c62a:	f7f4 fad3 	bl	8000bd4 <__aeabi_fdiv>
 800c62e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c630:	1c19      	adds	r1, r3, #0
 800c632:	1c20      	adds	r0, r4, #0
 800c634:	f7f4 f944 	bl	80008c0 <__aeabi_fadd>
 800c638:	1c03      	adds	r3, r0, #0
 800c63a:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63e:	f7f5 f813 	bl	8001668 <__aeabi_ui2f>
 800c642:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c644:	1c19      	adds	r1, r3, #0
 800c646:	1c20      	adds	r0, r4, #0
 800c648:	f7f4 fac4 	bl	8000bd4 <__aeabi_fdiv>
 800c64c:	1c03      	adds	r3, r0, #0
 800c64e:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	2310      	movs	r3, #16
 800c658:	18f9      	adds	r1, r7, r3
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	1c18      	adds	r0, r3, #0
 800c65e:	f7ff ffa1 	bl	800c5a4 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	2bff      	cmp	r3, #255	@ 0xff
 800c666:	d906      	bls.n	800c676 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	22ff      	movs	r2, #255	@ 0xff
 800c66c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2209      	movs	r2, #9
 800c672:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c674:	e003      	b.n	800c67e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	701a      	strb	r2, [r3, #0]
}
 800c67e:	46c0      	nop			@ (mov r8, r8)
 800c680:	46bd      	mov	sp, r7
 800c682:	b007      	add	sp, #28
 800c684:	bd90      	pop	{r4, r7, pc}
 800c686:	46c0      	nop			@ (mov r8, r8)
 800c688:	41200000 	.word	0x41200000

0800c68c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2280      	movs	r2, #128	@ 0x80
 800c69e:	0612      	lsls	r2, r2, #24
 800c6a0:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	4a18      	ldr	r2, [pc, #96]	@ (800c708 <findMinMax+0x7c>)
 800c6a6:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	e022      	b.n	800c6f4 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	18d3      	adds	r3, r2, r3
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	da06      	bge.n	800c6ce <findMinMax+0x42>
        {
            min[0] = array[i];
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	18d3      	adds	r3, r2, r3
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	18d3      	adds	r3, r2, r3
 800c6d6:	681a      	ldr	r2, [r3, #0]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	dd06      	ble.n	800c6ee <findMinMax+0x62>
        {
            max[0] = array[i];
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	18d3      	adds	r3, r2, r3
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d3d8      	bcc.n	800c6ae <findMinMax+0x22>
        }
    }
}
 800c6fc:	46c0      	nop			@ (mov r8, r8)
 800c6fe:	46c0      	nop			@ (mov r8, r8)
 800c700:	46bd      	mov	sp, r7
 800c702:	b006      	add	sp, #24
 800c704:	bd80      	pop	{r7, pc}
 800c706:	46c0      	nop			@ (mov r8, r8)
 800c708:	7fffffff 	.word	0x7fffffff

0800c70c <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d302      	bcc.n	800c728 <getPo2factor+0x1c>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d107      	bne.n	800c738 <getPo2factor+0x2c>
    {
        return 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	e00d      	b.n	800c748 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d2f5      	bcs.n	800c72c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3b01      	subs	r3, #1
 800c744:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c746:	68fb      	ldr	r3, [r7, #12]
}
 800c748:	0018      	movs	r0, r3
 800c74a:	46bd      	mov	sp, r7
 800c74c:	b004      	add	sp, #16
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f7f4 ff82 	bl	8001668 <__aeabi_ui2f>
 800c764:	1c03      	adds	r3, r0, #0
 800c766:	1c19      	adds	r1, r3, #0
 800c768:	68b8      	ldr	r0, [r7, #8]
 800c76a:	f7f4 fc19 	bl	8000fa0 <__aeabi_fmul>
 800c76e:	1c03      	adds	r3, r0, #0
 800c770:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c772:	2300      	movs	r3, #0
 800c774:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	2310      	movs	r3, #16
 800c77a:	18f9      	adds	r1, r7, r3
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	1c18      	adds	r0, r3, #0
 800c780:	f7ff fee0 	bl	800c544 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	b29a      	uxth	r2, r3
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	801a      	strh	r2, [r3, #0]
}
 800c78c:	46c0      	nop			@ (mov r8, r8)
 800c78e:	46bd      	mov	sp, r7
 800c790:	b006      	add	sp, #24
 800c792:	bd80      	pop	{r7, pc}

0800c794 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60b8      	str	r0, [r7, #8]
 800c79c:	60f9      	str	r1, [r7, #12]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	6a3a      	ldr	r2, [r7, #32]
 800c7a6:	68b8      	ldr	r0, [r7, #8]
 800c7a8:	68f9      	ldr	r1, [r7, #12]
 800c7aa:	f7fa fc41 	bl	8007030 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c7ae:	6a3b      	ldr	r3, [r7, #32]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	18d2      	adds	r2, r2, r3
 800c7b6:	69bb      	ldr	r3, [r7, #24]
 800c7b8:	18d2      	adds	r2, r2, r3
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	18d2      	adds	r2, r2, r3
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	18d2      	adds	r2, r2, r3
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c7ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	0011      	movs	r1, r2
 800c7d4:	0018      	movs	r0, r3
 800c7d6:	f7fa fcbb 	bl	8007150 <correctIntFracNumber>
}
 800c7da:	46c0      	nop			@ (mov r8, r8)
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	b004      	add	sp, #16
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b086      	sub	sp, #24
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	60f8      	str	r0, [r7, #12]
 800c7ea:	60b9      	str	r1, [r7, #8]
 800c7ec:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	613b      	str	r3, [r7, #16]
 800c7f6:	e019      	b.n	800c82c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	18d3      	adds	r3, r2, r3
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	3201      	adds	r2, #1
 800c808:	0052      	lsls	r2, r2, #1
 800c80a:	68f9      	ldr	r1, [r7, #12]
 800c80c:	188a      	adds	r2, r1, r2
 800c80e:	8812      	ldrh	r2, [r2, #0]
 800c810:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c812:	0019      	movs	r1, r3
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c81c:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c81e:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	3301      	adds	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	3304      	adds	r3, #4
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	429a      	cmp	r2, r3
 800c832:	d3e1      	bcc.n	800c7f8 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c834:	46c0      	nop			@ (mov r8, r8)
 800c836:	46c0      	nop			@ (mov r8, r8)
 800c838:	46bd      	mov	sp, r7
 800c83a:	b006      	add	sp, #24
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  init = false;
 800c844:	4b02      	ldr	r3, [pc, #8]	@ (800c850 <InitDone+0x10>)
 800c846:	2200      	movs	r2, #0
 800c848:	701a      	strb	r2, [r3, #0]
}
 800c84a:	46c0      	nop			@ (mov r8, r8)
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	200000c4 	.word	0x200000c4

0800c854 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800c85a:	f7f9 fc37 	bl	80060cc <ReadBatteryVoltage>
 800c85e:	1c03      	adds	r3, r0, #0
 800c860:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800c862:	491f      	ldr	r1, [pc, #124]	@ (800c8e0 <batteryChargeCheck+0x8c>)
 800c864:	6838      	ldr	r0, [r7, #0]
 800c866:	f7f3 fe63 	bl	8000530 <__aeabi_fcmplt>
 800c86a:	1e03      	subs	r3, r0, #0
 800c86c:	d002      	beq.n	800c874 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800c86e:	1dfb      	adds	r3, r7, #7
 800c870:	2200      	movs	r2, #0
 800c872:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c874:	6838      	ldr	r0, [r7, #0]
 800c876:	f7f6 fdf5 	bl	8003464 <__aeabi_f2d>
 800c87a:	4a1a      	ldr	r2, [pc, #104]	@ (800c8e4 <batteryChargeCheck+0x90>)
 800c87c:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e8 <batteryChargeCheck+0x94>)
 800c87e:	f7f3 fe1d 	bl	80004bc <__aeabi_dcmplt>
 800c882:	1e03      	subs	r3, r0, #0
 800c884:	d008      	beq.n	800c898 <batteryChargeCheck+0x44>
 800c886:	4916      	ldr	r1, [pc, #88]	@ (800c8e0 <batteryChargeCheck+0x8c>)
 800c888:	6838      	ldr	r0, [r7, #0]
 800c88a:	f7f3 fe6f 	bl	800056c <__aeabi_fcmpge>
 800c88e:	1e03      	subs	r3, r0, #0
 800c890:	d002      	beq.n	800c898 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800c892:	1dfb      	adds	r3, r7, #7
 800c894:	2202      	movs	r2, #2
 800c896:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c898:	2181      	movs	r1, #129	@ 0x81
 800c89a:	05c9      	lsls	r1, r1, #23
 800c89c:	6838      	ldr	r0, [r7, #0]
 800c89e:	f7f3 fe47 	bl	8000530 <__aeabi_fcmplt>
 800c8a2:	1e03      	subs	r3, r0, #0
 800c8a4:	d00b      	beq.n	800c8be <batteryChargeCheck+0x6a>
 800c8a6:	6838      	ldr	r0, [r7, #0]
 800c8a8:	f7f6 fddc 	bl	8003464 <__aeabi_f2d>
 800c8ac:	4a0d      	ldr	r2, [pc, #52]	@ (800c8e4 <batteryChargeCheck+0x90>)
 800c8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c8e8 <batteryChargeCheck+0x94>)
 800c8b0:	f7f3 fe22 	bl	80004f8 <__aeabi_dcmpge>
 800c8b4:	1e03      	subs	r3, r0, #0
 800c8b6:	d002      	beq.n	800c8be <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800c8b8:	1dfb      	adds	r3, r7, #7
 800c8ba:	2203      	movs	r2, #3
 800c8bc:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800c8be:	2181      	movs	r1, #129	@ 0x81
 800c8c0:	05c9      	lsls	r1, r1, #23
 800c8c2:	6838      	ldr	r0, [r7, #0]
 800c8c4:	f7f3 fe52 	bl	800056c <__aeabi_fcmpge>
 800c8c8:	1e03      	subs	r3, r0, #0
 800c8ca:	d002      	beq.n	800c8d2 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800c8cc:	1dfb      	adds	r3, r7, #7
 800c8ce:	2204      	movs	r2, #4
 800c8d0:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800c8d2:	1dfb      	adds	r3, r7, #7
 800c8d4:	781b      	ldrb	r3, [r3, #0]
}
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	b002      	add	sp, #8
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	46c0      	nop			@ (mov r8, r8)
 800c8e0:	40600000 	.word	0x40600000
 800c8e4:	9999999a 	.word	0x9999999a
 800c8e8:	400d9999 	.word	0x400d9999

0800c8ec <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800c8ec:	b590      	push	{r4, r7, lr}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	0004      	movs	r4, r0
 800c8f4:	0008      	movs	r0, r1
 800c8f6:	0011      	movs	r1, r2
 800c8f8:	1dbb      	adds	r3, r7, #6
 800c8fa:	1c22      	adds	r2, r4, #0
 800c8fc:	801a      	strh	r2, [r3, #0]
 800c8fe:	1d3b      	adds	r3, r7, #4
 800c900:	1c02      	adds	r2, r0, #0
 800c902:	801a      	strh	r2, [r3, #0]
 800c904:	1cbb      	adds	r3, r7, #2
 800c906:	1c0a      	adds	r2, r1, #0
 800c908:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c90a:	4b0f      	ldr	r3, [pc, #60]	@ (800c948 <SetStatusLED+0x5c>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d107      	bne.n	800c922 <SetStatusLED+0x36>
 800c912:	4b0e      	ldr	r3, [pc, #56]	@ (800c94c <SetStatusLED+0x60>)
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d103      	bne.n	800c922 <SetStatusLED+0x36>
 800c91a:	4b0d      	ldr	r3, [pc, #52]	@ (800c950 <SetStatusLED+0x64>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00e      	beq.n	800c940 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800c922:	2380      	movs	r3, #128	@ 0x80
 800c924:	05db      	lsls	r3, r3, #23
 800c926:	1dba      	adds	r2, r7, #6
 800c928:	8812      	ldrh	r2, [r2, #0]
 800c92a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	05db      	lsls	r3, r3, #23
 800c930:	1d3a      	adds	r2, r7, #4
 800c932:	8812      	ldrh	r2, [r2, #0]
 800c934:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800c936:	2380      	movs	r3, #128	@ 0x80
 800c938:	05db      	lsls	r3, r3, #23
 800c93a:	1cba      	adds	r2, r7, #2
 800c93c:	8812      	ldrh	r2, [r2, #0]
 800c93e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c940:	46c0      	nop			@ (mov r8, r8)
 800c942:	46bd      	mov	sp, r7
 800c944:	b003      	add	sp, #12
 800c946:	bd90      	pop	{r4, r7, pc}
 800c948:	2000214d 	.word	0x2000214d
 800c94c:	200000c4 	.word	0x200000c4
 800c950:	2000214e 	.word	0x2000214e

0800c954 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800c954:	b590      	push	{r4, r7, lr}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	0004      	movs	r4, r0
 800c95c:	0008      	movs	r0, r1
 800c95e:	0011      	movs	r1, r2
 800c960:	1dfb      	adds	r3, r7, #7
 800c962:	1c22      	adds	r2, r4, #0
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	1dbb      	adds	r3, r7, #6
 800c968:	1c02      	adds	r2, r0, #0
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	1d7b      	adds	r3, r7, #5
 800c96e:	1c0a      	adds	r2, r1, #0
 800c970:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800c972:	4b19      	ldr	r3, [pc, #100]	@ (800c9d8 <SetDBLED+0x84>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d107      	bne.n	800c98a <SetDBLED+0x36>
 800c97a:	4b18      	ldr	r3, [pc, #96]	@ (800c9dc <SetDBLED+0x88>)
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d103      	bne.n	800c98a <SetDBLED+0x36>
 800c982:	4b17      	ldr	r3, [pc, #92]	@ (800c9e0 <SetDBLED+0x8c>)
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d022      	beq.n	800c9d0 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800c98a:	1dfb      	adds	r3, r7, #7
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	2201      	movs	r2, #1
 800c990:	4053      	eors	r3, r2
 800c992:	b2db      	uxtb	r3, r3
 800c994:	001a      	movs	r2, r3
 800c996:	4b13      	ldr	r3, [pc, #76]	@ (800c9e4 <SetDBLED+0x90>)
 800c998:	2101      	movs	r1, #1
 800c99a:	0018      	movs	r0, r3
 800c99c:	f002 fe2b 	bl	800f5f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800c9a0:	1dbb      	adds	r3, r7, #6
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	4053      	eors	r3, r2
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	001a      	movs	r2, r3
 800c9ac:	2380      	movs	r3, #128	@ 0x80
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	480c      	ldr	r0, [pc, #48]	@ (800c9e4 <SetDBLED+0x90>)
 800c9b2:	0019      	movs	r1, r3
 800c9b4:	f002 fe1f 	bl	800f5f6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c9b8:	1d7b      	adds	r3, r7, #5
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	4053      	eors	r3, r2
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	001a      	movs	r2, r3
 800c9c4:	2380      	movs	r3, #128	@ 0x80
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4806      	ldr	r0, [pc, #24]	@ (800c9e4 <SetDBLED+0x90>)
 800c9ca:	0019      	movs	r1, r3
 800c9cc:	f002 fe13 	bl	800f5f6 <HAL_GPIO_WritePin>
  }
}
 800c9d0:	46c0      	nop			@ (mov r8, r8)
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	b003      	add	sp, #12
 800c9d6:	bd90      	pop	{r4, r7, pc}
 800c9d8:	2000214d 	.word	0x2000214d
 800c9dc:	200000c4 	.word	0x200000c4
 800c9e0:	2000214e 	.word	0x2000214e
 800c9e4:	50000400 	.word	0x50000400

0800c9e8 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c9e8:	b590      	push	{r4, r7, lr}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	0004      	movs	r4, r0
 800c9f0:	0008      	movs	r0, r1
 800c9f2:	0011      	movs	r1, r2
 800c9f4:	1dbb      	adds	r3, r7, #6
 800c9f6:	1c22      	adds	r2, r4, #0
 800c9f8:	801a      	strh	r2, [r3, #0]
 800c9fa:	1d3b      	adds	r3, r7, #4
 800c9fc:	1c02      	adds	r2, r0, #0
 800c9fe:	801a      	strh	r2, [r3, #0]
 800ca00:	1cbb      	adds	r3, r7, #2
 800ca02:	1c0a      	adds	r2, r1, #0
 800ca04:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800ca06:	4b0e      	ldr	r3, [pc, #56]	@ (800ca40 <SetVocLED+0x58>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d107      	bne.n	800ca1e <SetVocLED+0x36>
 800ca0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <SetVocLED+0x5c>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d103      	bne.n	800ca1e <SetVocLED+0x36>
 800ca16:	4b0c      	ldr	r3, [pc, #48]	@ (800ca48 <SetVocLED+0x60>)
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800ca1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca4c <SetVocLED+0x64>)
 800ca20:	1dba      	adds	r2, r7, #6
 800ca22:	8812      	ldrh	r2, [r2, #0]
 800ca24:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800ca26:	4b09      	ldr	r3, [pc, #36]	@ (800ca4c <SetVocLED+0x64>)
 800ca28:	1d3a      	adds	r2, r7, #4
 800ca2a:	8812      	ldrh	r2, [r2, #0]
 800ca2c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800ca2e:	4b07      	ldr	r3, [pc, #28]	@ (800ca4c <SetVocLED+0x64>)
 800ca30:	1cba      	adds	r2, r7, #2
 800ca32:	8812      	ldrh	r2, [r2, #0]
 800ca34:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ca36:	46c0      	nop			@ (mov r8, r8)
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	b003      	add	sp, #12
 800ca3c:	bd90      	pop	{r4, r7, pc}
 800ca3e:	46c0      	nop			@ (mov r8, r8)
 800ca40:	2000214d 	.word	0x2000214d
 800ca44:	200000c4 	.word	0x200000c4
 800ca48:	2000214e 	.word	0x2000214e
 800ca4c:	40000400 	.word	0x40000400

0800ca50 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800ca50:	b580      	push	{r7, lr}
 800ca52:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <SetMeasurementIndicator+0x24>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d103      	bne.n	800ca64 <SetMeasurementIndicator+0x14>
 800ca5c:	4b06      	ldr	r3, [pc, #24]	@ (800ca78 <SetMeasurementIndicator+0x28>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d003      	beq.n	800ca6c <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800ca64:	2380      	movs	r3, #128	@ 0x80
 800ca66:	05db      	lsls	r3, r3, #23
 800ca68:	4a04      	ldr	r2, [pc, #16]	@ (800ca7c <SetMeasurementIndicator+0x2c>)
 800ca6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ca6c:	46c0      	nop			@ (mov r8, r8)
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	46c0      	nop			@ (mov r8, r8)
 800ca74:	2000214d 	.word	0x2000214d
 800ca78:	2000214e 	.word	0x2000214e
 800ca7c:	00000bb8 	.word	0x00000bb8

0800ca80 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800ca84:	4b07      	ldr	r3, [pc, #28]	@ (800caa4 <ResetMeasurementIndicator+0x24>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d103      	bne.n	800ca94 <ResetMeasurementIndicator+0x14>
 800ca8c:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <ResetMeasurementIndicator+0x28>)
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d004      	beq.n	800ca9e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800ca94:	2380      	movs	r3, #128	@ 0x80
 800ca96:	05db      	lsls	r3, r3, #23
 800ca98:	22fa      	movs	r2, #250	@ 0xfa
 800ca9a:	0112      	lsls	r2, r2, #4
 800ca9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800ca9e:	46c0      	nop			@ (mov r8, r8)
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	2000214d 	.word	0x2000214d
 800caa8:	2000214e 	.word	0x2000214e

0800caac <SetMICIndicator>:
void SetMICIndicator(){
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cab0:	4b07      	ldr	r3, [pc, #28]	@ (800cad0 <SetMICIndicator+0x24>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d103      	bne.n	800cac0 <SetMICIndicator+0x14>
 800cab8:	4b06      	ldr	r3, [pc, #24]	@ (800cad4 <SetMICIndicator+0x28>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800cac0:	2380      	movs	r3, #128	@ 0x80
 800cac2:	05db      	lsls	r3, r3, #23
 800cac4:	4a04      	ldr	r2, [pc, #16]	@ (800cad8 <SetMICIndicator+0x2c>)
 800cac6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800cac8:	46c0      	nop			@ (mov r8, r8)
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	46c0      	nop			@ (mov r8, r8)
 800cad0:	2000214d 	.word	0x2000214d
 800cad4:	2000214e 	.word	0x2000214e
 800cad8:	00000bb8 	.word	0x00000bb8

0800cadc <ResetMICIndicator>:
void ResetMICIndicator(){
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cae0:	4b07      	ldr	r3, [pc, #28]	@ (800cb00 <ResetMICIndicator+0x24>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d103      	bne.n	800caf0 <ResetMICIndicator+0x14>
 800cae8:	4b06      	ldr	r3, [pc, #24]	@ (800cb04 <ResetMICIndicator+0x28>)
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800caf0:	2380      	movs	r3, #128	@ 0x80
 800caf2:	05db      	lsls	r3, r3, #23
 800caf4:	22fa      	movs	r2, #250	@ 0xfa
 800caf6:	0112      	lsls	r2, r2, #4
 800caf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800cafa:	46c0      	nop			@ (mov r8, r8)
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	2000214d 	.word	0x2000214d
 800cb04:	2000214e 	.word	0x2000214e

0800cb08 <SetESPIndicator>:
void SetESPIndicator(){
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cb0c:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <SetESPIndicator+0x24>)
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d103      	bne.n	800cb1c <SetESPIndicator+0x14>
 800cb14:	4b06      	ldr	r3, [pc, #24]	@ (800cb30 <SetESPIndicator+0x28>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d003      	beq.n	800cb24 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cb1c:	2380      	movs	r3, #128	@ 0x80
 800cb1e:	05db      	lsls	r3, r3, #23
 800cb20:	4a04      	ldr	r2, [pc, #16]	@ (800cb34 <SetESPIndicator+0x2c>)
 800cb22:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cb24:	46c0      	nop			@ (mov r8, r8)
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	46c0      	nop			@ (mov r8, r8)
 800cb2c:	2000214d 	.word	0x2000214d
 800cb30:	2000214e 	.word	0x2000214e
 800cb34:	00000bb8 	.word	0x00000bb8

0800cb38 <ResetESPIndicator>:
void ResetESPIndicator(){
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cb3c:	4b07      	ldr	r3, [pc, #28]	@ (800cb5c <ResetESPIndicator+0x24>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d103      	bne.n	800cb4c <ResetESPIndicator+0x14>
 800cb44:	4b06      	ldr	r3, [pc, #24]	@ (800cb60 <ResetESPIndicator+0x28>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d004      	beq.n	800cb56 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cb4c:	2380      	movs	r3, #128	@ 0x80
 800cb4e:	05db      	lsls	r3, r3, #23
 800cb50:	22fa      	movs	r2, #250	@ 0xfa
 800cb52:	0112      	lsls	r2, r2, #4
 800cb54:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cb56:	46c0      	nop			@ (mov r8, r8)
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	2000214d 	.word	0x2000214d
 800cb60:	2000214e 	.word	0x2000214e

0800cb64 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cb64:	b580      	push	{r7, lr}
 800cb66:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cb68:	23fa      	movs	r3, #250	@ 0xfa
 800cb6a:	011a      	lsls	r2, r3, #4
 800cb6c:	23fa      	movs	r3, #250	@ 0xfa
 800cb6e:	0119      	lsls	r1, r3, #4
 800cb70:	23fa      	movs	r3, #250	@ 0xfa
 800cb72:	011b      	lsls	r3, r3, #4
 800cb74:	0018      	movs	r0, r3
 800cb76:	f7ff feb9 	bl	800c8ec <SetStatusLED>
  SetDBLED(false,false,false);
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	2000      	movs	r0, #0
 800cb80:	f7ff fee8 	bl	800c954 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cb84:	23fa      	movs	r3, #250	@ 0xfa
 800cb86:	011a      	lsls	r2, r3, #4
 800cb88:	23fa      	movs	r3, #250	@ 0xfa
 800cb8a:	0119      	lsls	r1, r3, #4
 800cb8c:	23fa      	movs	r3, #250	@ 0xfa
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	0018      	movs	r0, r3
 800cb92:	f7ff ff29 	bl	800c9e8 <SetVocLED>
return;
 800cb96:	46c0      	nop			@ (mov r8, r8)
}
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <powerCheck>:

Battery_Status powerCheck(){
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cba2:	f7f9 fb59 	bl	8006258 <Check_USB_PowerOn>
 800cba6:	0003      	movs	r3, r0
 800cba8:	001a      	movs	r2, r3
 800cbaa:	2301      	movs	r3, #1
 800cbac:	4053      	eors	r3, r2
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cbb4:	1dfc      	adds	r4, r7, #7
 800cbb6:	f7ff fe4d 	bl	800c854 <batteryChargeCheck>
 800cbba:	0003      	movs	r3, r0
 800cbbc:	7023      	strb	r3, [r4, #0]
 800cbbe:	e002      	b.n	800cbc6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cbc0:	1dfb      	adds	r3, r7, #7
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cbc6:	1dfb      	adds	r3, r7, #7
 800cbc8:	781b      	ldrb	r3, [r3, #0]
}
 800cbca:	0018      	movs	r0, r3
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	b003      	add	sp, #12
 800cbd0:	bd90      	pop	{r4, r7, pc}
	...

0800cbd4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	0002      	movs	r2, r0
 800cbdc:	1dfb      	adds	r3, r7, #7
 800cbde:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800cbe0:	1dfb      	adds	r3, r7, #7
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d105      	bne.n	800cbf4 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800cbe8:	4a18      	ldr	r2, [pc, #96]	@ (800cc4c <powerDisplay+0x78>)
 800cbea:	4b19      	ldr	r3, [pc, #100]	@ (800cc50 <powerDisplay+0x7c>)
 800cbec:	0019      	movs	r1, r3
 800cbee:	2003      	movs	r0, #3
 800cbf0:	f000 fe3a 	bl	800d868 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800cbf4:	1dfb      	adds	r3, r7, #7
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b04      	cmp	r3, #4
 800cbfa:	d105      	bne.n	800cc08 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800cbfc:	4a15      	ldr	r2, [pc, #84]	@ (800cc54 <powerDisplay+0x80>)
 800cbfe:	4b14      	ldr	r3, [pc, #80]	@ (800cc50 <powerDisplay+0x7c>)
 800cc00:	0019      	movs	r1, r3
 800cc02:	2003      	movs	r0, #3
 800cc04:	f000 fe30 	bl	800d868 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cc08:	1dfb      	adds	r3, r7, #7
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d105      	bne.n	800cc1c <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800cc10:	4a11      	ldr	r2, [pc, #68]	@ (800cc58 <powerDisplay+0x84>)
 800cc12:	4b0f      	ldr	r3, [pc, #60]	@ (800cc50 <powerDisplay+0x7c>)
 800cc14:	0019      	movs	r1, r3
 800cc16:	2003      	movs	r0, #3
 800cc18:	f000 fe26 	bl	800d868 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800cc1c:	1dfb      	adds	r3, r7, #7
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b02      	cmp	r3, #2
 800cc22:	d105      	bne.n	800cc30 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800cc24:	4a0d      	ldr	r2, [pc, #52]	@ (800cc5c <powerDisplay+0x88>)
 800cc26:	4b0a      	ldr	r3, [pc, #40]	@ (800cc50 <powerDisplay+0x7c>)
 800cc28:	0019      	movs	r1, r3
 800cc2a:	2003      	movs	r0, #3
 800cc2c:	f000 fe1c 	bl	800d868 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800cc30:	1dfb      	adds	r3, r7, #7
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d105      	bne.n	800cc44 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800cc38:	4a09      	ldr	r2, [pc, #36]	@ (800cc60 <powerDisplay+0x8c>)
 800cc3a:	4b05      	ldr	r3, [pc, #20]	@ (800cc50 <powerDisplay+0x7c>)
 800cc3c:	0019      	movs	r1, r3
 800cc3e:	2003      	movs	r0, #3
 800cc40:	f000 fe12 	bl	800d868 <CreateLine>
  }
}
 800cc44:	46c0      	nop			@ (mov r8, r8)
 800cc46:	46bd      	mov	sp, r7
 800cc48:	b002      	add	sp, #8
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	08023e9c 	.word	0x08023e9c
 800cc50:	08023eac 	.word	0x08023eac
 800cc54:	08023eb0 	.word	0x08023eb0
 800cc58:	08023ec8 	.word	0x08023ec8
 800cc5c:	08023ee8 	.word	0x08023ee8
 800cc60:	08023f00 	.word	0x08023f00

0800cc64 <configCheck>:

void configCheck(){
 800cc64:	b580      	push	{r7, lr}
 800cc66:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800cc68:	f7f9 fb05 	bl	8006276 <BootButton_Pressed>
 800cc6c:	1e03      	subs	r3, r0, #0
 800cc6e:	d007      	beq.n	800cc80 <configCheck+0x1c>
 800cc70:	f7f9 fb12 	bl	8006298 <UserButton_Pressed>
 800cc74:	1e03      	subs	r3, r0, #0
 800cc76:	d003      	beq.n	800cc80 <configCheck+0x1c>
    configSet = true;
 800cc78:	4b3d      	ldr	r3, [pc, #244]	@ (800cd70 <configCheck+0x10c>)
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	701a      	strb	r2, [r3, #0]
 800cc7e:	e00a      	b.n	800cc96 <configCheck+0x32>
  }
  else{
    configSet = false;
 800cc80:	4b3b      	ldr	r3, [pc, #236]	@ (800cd70 <configCheck+0x10c>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800cc86:	f001 fa3b 	bl	800e100 <HAL_GetTick>
 800cc8a:	0003      	movs	r3, r0
 800cc8c:	22fa      	movs	r2, #250	@ 0xfa
 800cc8e:	00d2      	lsls	r2, r2, #3
 800cc90:	189a      	adds	r2, r3, r2
 800cc92:	4b38      	ldr	r3, [pc, #224]	@ (800cd74 <configCheck+0x110>)
 800cc94:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800cc96:	4b36      	ldr	r3, [pc, #216]	@ (800cd70 <configCheck+0x10c>)
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00d      	beq.n	800ccba <configCheck+0x56>
 800cc9e:	4b35      	ldr	r3, [pc, #212]	@ (800cd74 <configCheck+0x110>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	0018      	movs	r0, r3
 800cca4:	f000 fd8a 	bl	800d7bc <TimestampIsReached>
 800cca8:	1e03      	subs	r3, r0, #0
 800ccaa:	d006      	beq.n	800ccba <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800ccac:	f7f6 fe88 	bl	80039c0 <SetConfigMode>
    SetDBLED(true, true, true);
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	2101      	movs	r1, #1
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	f7ff fe4d 	bl	800c954 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ccba:	f7f9 fadc 	bl	8006276 <BootButton_Pressed>
 800ccbe:	0003      	movs	r3, r0
 800ccc0:	001a      	movs	r2, r3
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	4053      	eors	r3, r2
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01d      	beq.n	800cd08 <configCheck+0xa4>
 800cccc:	f7f9 fae4 	bl	8006298 <UserButton_Pressed>
 800ccd0:	1e03      	subs	r3, r0, #0
 800ccd2:	d019      	beq.n	800cd08 <configCheck+0xa4>
 800ccd4:	4b28      	ldr	r3, [pc, #160]	@ (800cd78 <configCheck+0x114>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	4053      	eors	r3, r2
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d012      	beq.n	800cd08 <configCheck+0xa4>
    SetLEDsOff();
 800cce2:	f7ff ff3f 	bl	800cb64 <SetLEDsOff>
    userToggle = !userToggle;
 800cce6:	4b25      	ldr	r3, [pc, #148]	@ (800cd7c <configCheck+0x118>)
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	1e5a      	subs	r2, r3, #1
 800ccec:	4193      	sbcs	r3, r2
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	4053      	eors	r3, r2
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	1c1a      	adds	r2, r3, #0
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	4b1f      	ldr	r3, [pc, #124]	@ (800cd7c <configCheck+0x118>)
 800cd00:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800cd02:	4b1d      	ldr	r3, [pc, #116]	@ (800cd78 <configCheck+0x114>)
 800cd04:	2201      	movs	r2, #1
 800cd06:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cd08:	f7f9 fab5 	bl	8006276 <BootButton_Pressed>
 800cd0c:	0003      	movs	r3, r0
 800cd0e:	001a      	movs	r2, r3
 800cd10:	2301      	movs	r3, #1
 800cd12:	4053      	eors	r3, r2
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00b      	beq.n	800cd32 <configCheck+0xce>
 800cd1a:	f7f9 fabd 	bl	8006298 <UserButton_Pressed>
 800cd1e:	0003      	movs	r3, r0
 800cd20:	001a      	movs	r2, r3
 800cd22:	2301      	movs	r3, #1
 800cd24:	4053      	eors	r3, r2
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <configCheck+0xce>
    buttonHeld = false;
 800cd2c:	4b12      	ldr	r3, [pc, #72]	@ (800cd78 <configCheck+0x114>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800cd32:	f7f9 fa91 	bl	8006258 <Check_USB_PowerOn>
 800cd36:	1e03      	subs	r3, r0, #0
 800cd38:	d003      	beq.n	800cd42 <configCheck+0xde>
    usbPluggedIn = true;
 800cd3a:	4b11      	ldr	r3, [pc, #68]	@ (800cd80 <configCheck+0x11c>)
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800cd40:	e012      	b.n	800cd68 <configCheck+0x104>
    if(!userToggle && !init){
 800cd42:	4b0e      	ldr	r3, [pc, #56]	@ (800cd7c <configCheck+0x118>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2201      	movs	r2, #1
 800cd48:	4053      	eors	r3, r2
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d008      	beq.n	800cd62 <configCheck+0xfe>
 800cd50:	4b0c      	ldr	r3, [pc, #48]	@ (800cd84 <configCheck+0x120>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2201      	movs	r2, #1
 800cd56:	4053      	eors	r3, r2
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <configCheck+0xfe>
      SetLEDsOff();
 800cd5e:	f7ff ff01 	bl	800cb64 <SetLEDsOff>
    usbPluggedIn = false;
 800cd62:	4b07      	ldr	r3, [pc, #28]	@ (800cd80 <configCheck+0x11c>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
}
 800cd68:	46c0      	nop			@ (mov r8, r8)
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	46c0      	nop			@ (mov r8, r8)
 800cd70:	2000214c 	.word	0x2000214c
 800cd74:	20002150 	.word	0x20002150
 800cd78:	2000214f 	.word	0x2000214f
 800cd7c:	2000214e 	.word	0x2000214e
 800cd80:	2000214d 	.word	0x2000214d
 800cd84:	200000c4 	.word	0x200000c4

0800cd88 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800cd88:	b590      	push	{r4, r7, lr}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800cd8e:	1dfc      	adds	r4, r7, #7
 800cd90:	f7ff ff04 	bl	800cb9c <powerCheck>
 800cd94:	0003      	movs	r3, r0
 800cd96:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800cd98:	1dfb      	adds	r3, r7, #7
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	0018      	movs	r0, r3
 800cd9e:	f7ff ff19 	bl	800cbd4 <powerDisplay>
  return status;
 800cda2:	1dfb      	adds	r3, r7, #7
 800cda4:	781b      	ldrb	r3, [r3, #0]

}
 800cda6:	0018      	movs	r0, r3
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	b003      	add	sp, #12
 800cdac:	bd90      	pop	{r4, r7, pc}
	...

0800cdb0 <setuserToggle>:

void setuserToggle(void) {
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800cdb4:	f7ff fef2 	bl	800cb9c <powerCheck>
 800cdb8:	0003      	movs	r3, r0
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d002      	beq.n	800cdc4 <setuserToggle+0x14>
    userToggle = true;
 800cdbe:	4b03      	ldr	r3, [pc, #12]	@ (800cdcc <setuserToggle+0x1c>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	701a      	strb	r2, [r3, #0]
  }
}
 800cdc4:	46c0      	nop			@ (mov r8, r8)
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	46c0      	nop			@ (mov r8, r8)
 800cdcc:	2000214e 	.word	0x2000214e

0800cdd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cdd4:	4b07      	ldr	r3, [pc, #28]	@ (800cdf4 <HAL_MspInit+0x24>)
 800cdd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdd8:	4b06      	ldr	r3, [pc, #24]	@ (800cdf4 <HAL_MspInit+0x24>)
 800cdda:	2101      	movs	r1, #1
 800cddc:	430a      	orrs	r2, r1
 800cdde:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800cde0:	4b04      	ldr	r3, [pc, #16]	@ (800cdf4 <HAL_MspInit+0x24>)
 800cde2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cde4:	4b03      	ldr	r3, [pc, #12]	@ (800cdf4 <HAL_MspInit+0x24>)
 800cde6:	2180      	movs	r1, #128	@ 0x80
 800cde8:	0549      	lsls	r1, r1, #21
 800cdea:	430a      	orrs	r2, r1
 800cdec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800cdee:	46c0      	nop			@ (mov r8, r8)
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	40021000 	.word	0x40021000

0800cdf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800cdfc:	46c0      	nop			@ (mov r8, r8)
 800cdfe:	e7fd      	b.n	800cdfc <NMI_Handler+0x4>

0800ce00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ce04:	46c0      	nop			@ (mov r8, r8)
 800ce06:	e7fd      	b.n	800ce04 <HardFault_Handler+0x4>

0800ce08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ce0c:	46c0      	nop			@ (mov r8, r8)
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ce16:	46c0      	nop			@ (mov r8, r8)
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ce20:	f001 f95c 	bl	800e0dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ce24:	46c0      	nop			@ (mov r8, r8)
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800ce30:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <RTC_IRQHandler+0x14>)
 800ce32:	0018      	movs	r0, r3
 800ce34:	f008 fe56 	bl	8015ae4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	46c0      	nop			@ (mov r8, r8)
 800ce40:	200011a0 	.word	0x200011a0

0800ce44 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800ce48:	2380      	movs	r3, #128	@ 0x80
 800ce4a:	021b      	lsls	r3, r3, #8
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	f002 fbef 	bl	800f630 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800ce52:	46c0      	nop			@ (mov r8, r8)
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ce5c:	4b05      	ldr	r3, [pc, #20]	@ (800ce74 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ce5e:	0018      	movs	r0, r3
 800ce60:	f001 ff77 	bl	800ed52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ce64:	4b04      	ldr	r3, [pc, #16]	@ (800ce78 <DMA1_Channel2_3_IRQHandler+0x20>)
 800ce66:	0018      	movs	r0, r3
 800ce68:	f001 ff73 	bl	800ed52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ce6c:	46c0      	nop			@ (mov r8, r8)
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	46c0      	nop			@ (mov r8, r8)
 800ce74:	20000e48 	.word	0x20000e48
 800ce78:	20000e00 	.word	0x20000e00

0800ce7c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ce80:	4b07      	ldr	r3, [pc, #28]	@ (800cea0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ce82:	0018      	movs	r0, r3
 800ce84:	f001 ff65 	bl	800ed52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ce88:	4b06      	ldr	r3, [pc, #24]	@ (800cea4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ce8a:	0018      	movs	r0, r3
 800ce8c:	f001 ff61 	bl	800ed52 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ce90:	4b05      	ldr	r3, [pc, #20]	@ (800cea8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ce92:	0018      	movs	r0, r3
 800ce94:	f001 ff5d 	bl	800ed52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ce98:	46c0      	nop			@ (mov r8, r8)
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	46c0      	nop			@ (mov r8, r8)
 800cea0:	20000ecc 	.word	0x20000ecc
 800cea4:	20002440 	.word	0x20002440
 800cea8:	20002488 	.word	0x20002488

0800ceac <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ceb0:	4b03      	ldr	r3, [pc, #12]	@ (800cec0 <USART4_5_IRQHandler+0x14>)
 800ceb2:	0018      	movs	r0, r3
 800ceb4:	f009 fd10 	bl	80168d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ceb8:	46c0      	nop			@ (mov r8, r8)
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	46c0      	nop			@ (mov r8, r8)
 800cec0:	20002388 	.word	0x20002388

0800cec4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800cec8:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <I2C1_IRQHandler+0x2c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699a      	ldr	r2, [r3, #24]
 800cece:	23e0      	movs	r3, #224	@ 0xe0
 800ced0:	00db      	lsls	r3, r3, #3
 800ced2:	4013      	ands	r3, r2
 800ced4:	d004      	beq.n	800cee0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800ced6:	4b06      	ldr	r3, [pc, #24]	@ (800cef0 <I2C1_IRQHandler+0x2c>)
 800ced8:	0018      	movs	r0, r3
 800ceda:	f003 f891 	bl	8010000 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800cede:	e003      	b.n	800cee8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800cee0:	4b03      	ldr	r3, [pc, #12]	@ (800cef0 <I2C1_IRQHandler+0x2c>)
 800cee2:	0018      	movs	r0, r3
 800cee4:	f003 f872 	bl	800ffcc <HAL_I2C_EV_IRQHandler>
}
 800cee8:	46c0      	nop			@ (mov r8, r8)
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	46c0      	nop			@ (mov r8, r8)
 800cef0:	20000d58 	.word	0x20000d58

0800cef4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800cef8:	4b03      	ldr	r3, [pc, #12]	@ (800cf08 <USART1_IRQHandler+0x14>)
 800cefa:	0018      	movs	r0, r3
 800cefc:	f009 fcec 	bl	80168d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800cf00:	46c0      	nop			@ (mov r8, r8)
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	46c0      	nop			@ (mov r8, r8)
 800cf08:	200022d0 	.word	0x200022d0

0800cf0c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800cf10:	4b03      	ldr	r3, [pc, #12]	@ (800cf20 <USB_IRQHandler+0x14>)
 800cf12:	0018      	movs	r0, r3
 800cf14:	f005 fc52 	bl	80127bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800cf18:	46c0      	nop			@ (mov r8, r8)
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	46c0      	nop			@ (mov r8, r8)
 800cf20:	2000329c 	.word	0x2000329c

0800cf24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
  return 1;
 800cf28:	2301      	movs	r3, #1
}
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <_kill>:

int _kill(int pid, int sig)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cf3a:	f012 fbb1 	bl	801f6a0 <__errno>
 800cf3e:	0003      	movs	r3, r0
 800cf40:	2216      	movs	r2, #22
 800cf42:	601a      	str	r2, [r3, #0]
  return -1;
 800cf44:	2301      	movs	r3, #1
 800cf46:	425b      	negs	r3, r3
}
 800cf48:	0018      	movs	r0, r3
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	b002      	add	sp, #8
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <_exit>:

void _exit (int status)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cf58:	2301      	movs	r3, #1
 800cf5a:	425a      	negs	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	0011      	movs	r1, r2
 800cf60:	0018      	movs	r0, r3
 800cf62:	f7ff ffe5 	bl	800cf30 <_kill>
  while (1) {}    /* Make sure we hang here */
 800cf66:	46c0      	nop			@ (mov r8, r8)
 800cf68:	e7fd      	b.n	800cf66 <_exit+0x16>

0800cf6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b086      	sub	sp, #24
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	e00a      	b.n	800cf92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cf7c:	e000      	b.n	800cf80 <_read+0x16>
 800cf7e:	bf00      	nop
 800cf80:	0001      	movs	r1, r0
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	1c5a      	adds	r2, r3, #1
 800cf86:	60ba      	str	r2, [r7, #8]
 800cf88:	b2ca      	uxtb	r2, r1
 800cf8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	429a      	cmp	r2, r3
 800cf98:	dbf0      	blt.n	800cf7c <_read+0x12>
  }

  return len;
 800cf9a:	687b      	ldr	r3, [r7, #4]
}
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	b006      	add	sp, #24
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <_close>:
  }
  return len;
}

int _close(int file)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	425b      	negs	r3, r3
}
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	b002      	add	sp, #8
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	2280      	movs	r2, #128	@ 0x80
 800cfc6:	0192      	lsls	r2, r2, #6
 800cfc8:	605a      	str	r2, [r3, #4]
  return 0;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	0018      	movs	r0, r3
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	b002      	add	sp, #8
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <_isatty>:

int _isatty(int file)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cfdc:	2301      	movs	r3, #1
}
 800cfde:	0018      	movs	r0, r3
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	b002      	add	sp, #8
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	60f8      	str	r0, [r7, #12]
 800cfee:	60b9      	str	r1, [r7, #8]
 800cff0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	0018      	movs	r0, r3
 800cff6:	46bd      	mov	sp, r7
 800cff8:	b004      	add	sp, #16
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b086      	sub	sp, #24
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d004:	4a14      	ldr	r2, [pc, #80]	@ (800d058 <_sbrk+0x5c>)
 800d006:	4b15      	ldr	r3, [pc, #84]	@ (800d05c <_sbrk+0x60>)
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d010:	4b13      	ldr	r3, [pc, #76]	@ (800d060 <_sbrk+0x64>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d018:	4b11      	ldr	r3, [pc, #68]	@ (800d060 <_sbrk+0x64>)
 800d01a:	4a12      	ldr	r2, [pc, #72]	@ (800d064 <_sbrk+0x68>)
 800d01c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d01e:	4b10      	ldr	r3, [pc, #64]	@ (800d060 <_sbrk+0x64>)
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	18d3      	adds	r3, r2, r3
 800d026:	693a      	ldr	r2, [r7, #16]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d207      	bcs.n	800d03c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d02c:	f012 fb38 	bl	801f6a0 <__errno>
 800d030:	0003      	movs	r3, r0
 800d032:	220c      	movs	r2, #12
 800d034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d036:	2301      	movs	r3, #1
 800d038:	425b      	negs	r3, r3
 800d03a:	e009      	b.n	800d050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d03c:	4b08      	ldr	r3, [pc, #32]	@ (800d060 <_sbrk+0x64>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d042:	4b07      	ldr	r3, [pc, #28]	@ (800d060 <_sbrk+0x64>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	18d2      	adds	r2, r2, r3
 800d04a:	4b05      	ldr	r3, [pc, #20]	@ (800d060 <_sbrk+0x64>)
 800d04c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d04e:	68fb      	ldr	r3, [r7, #12]
}
 800d050:	0018      	movs	r0, r3
 800d052:	46bd      	mov	sp, r7
 800d054:	b006      	add	sp, #24
 800d056:	bd80      	pop	{r7, pc}
 800d058:	20005000 	.word	0x20005000
 800d05c:	00000400 	.word	0x00000400
 800d060:	20002154 	.word	0x20002154
 800d064:	20003900 	.word	0x20003900

0800d068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d06c:	46c0      	nop			@ (mov r8, r8)
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d07a:	2310      	movs	r3, #16
 800d07c:	18fb      	adds	r3, r7, r3
 800d07e:	0018      	movs	r0, r3
 800d080:	2308      	movs	r3, #8
 800d082:	001a      	movs	r2, r3
 800d084:	2100      	movs	r1, #0
 800d086:	f012 fa67 	bl	801f558 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d08a:	003b      	movs	r3, r7
 800d08c:	0018      	movs	r0, r3
 800d08e:	2310      	movs	r3, #16
 800d090:	001a      	movs	r2, r3
 800d092:	2100      	movs	r1, #0
 800d094:	f012 fa60 	bl	801f558 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d098:	4b2e      	ldr	r3, [pc, #184]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d09a:	2280      	movs	r2, #128	@ 0x80
 800d09c:	05d2      	lsls	r2, r2, #23
 800d09e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d0a0:	4b2c      	ldr	r3, [pc, #176]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0a6:	4b2b      	ldr	r3, [pc, #172]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d0ac:	4b29      	ldr	r3, [pc, #164]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d158 <MX_TIM2_Init+0xe4>)
 800d0b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0b2:	4b28      	ldr	r3, [pc, #160]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d0b8:	4b26      	ldr	r3, [pc, #152]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d0be:	4b25      	ldr	r3, [pc, #148]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0c0:	0018      	movs	r0, r3
 800d0c2:	f008 fe1d 	bl	8015d00 <HAL_TIM_PWM_Init>
 800d0c6:	1e03      	subs	r3, r0, #0
 800d0c8:	d001      	beq.n	800d0ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d0ca:	f7fb f961 	bl	8008390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0ce:	2110      	movs	r1, #16
 800d0d0:	187b      	adds	r3, r7, r1
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0d6:	187b      	adds	r3, r7, r1
 800d0d8:	2200      	movs	r2, #0
 800d0da:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d0dc:	187a      	adds	r2, r7, r1
 800d0de:	4b1d      	ldr	r3, [pc, #116]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d0e0:	0011      	movs	r1, r2
 800d0e2:	0018      	movs	r0, r3
 800d0e4:	f009 f92a 	bl	801633c <HAL_TIMEx_MasterConfigSynchronization>
 800d0e8:	1e03      	subs	r3, r0, #0
 800d0ea:	d001      	beq.n	800d0f0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d0ec:	f7fb f950 	bl	8008390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d0f0:	003b      	movs	r3, r7
 800d0f2:	2260      	movs	r2, #96	@ 0x60
 800d0f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d0f6:	003b      	movs	r3, r7
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d0fc:	003b      	movs	r3, r7
 800d0fe:	2200      	movs	r2, #0
 800d100:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d102:	003b      	movs	r3, r7
 800d104:	2200      	movs	r2, #0
 800d106:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d108:	0039      	movs	r1, r7
 800d10a:	4b12      	ldr	r3, [pc, #72]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	0018      	movs	r0, r3
 800d110:	f008 fec8 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d114:	1e03      	subs	r3, r0, #0
 800d116:	d001      	beq.n	800d11c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d118:	f7fb f93a 	bl	8008390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d11c:	0039      	movs	r1, r7
 800d11e:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d120:	2208      	movs	r2, #8
 800d122:	0018      	movs	r0, r3
 800d124:	f008 febe 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d128:	1e03      	subs	r3, r0, #0
 800d12a:	d001      	beq.n	800d130 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d12c:	f7fb f930 	bl	8008390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d130:	0039      	movs	r1, r7
 800d132:	4b08      	ldr	r3, [pc, #32]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d134:	220c      	movs	r2, #12
 800d136:	0018      	movs	r0, r3
 800d138:	f008 feb4 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d13c:	1e03      	subs	r3, r0, #0
 800d13e:	d001      	beq.n	800d144 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d140:	f7fb f926 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d144:	4b03      	ldr	r3, [pc, #12]	@ (800d154 <MX_TIM2_Init+0xe0>)
 800d146:	0018      	movs	r0, r3
 800d148:	f000 f8fe 	bl	800d348 <HAL_TIM_MspPostInit>

}
 800d14c:	46c0      	nop			@ (mov r8, r8)
 800d14e:	46bd      	mov	sp, r7
 800d150:	b006      	add	sp, #24
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20002158 	.word	0x20002158
 800d158:	0000ffff 	.word	0x0000ffff

0800d15c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d162:	2310      	movs	r3, #16
 800d164:	18fb      	adds	r3, r7, r3
 800d166:	0018      	movs	r0, r3
 800d168:	2308      	movs	r3, #8
 800d16a:	001a      	movs	r2, r3
 800d16c:	2100      	movs	r1, #0
 800d16e:	f012 f9f3 	bl	801f558 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d172:	003b      	movs	r3, r7
 800d174:	0018      	movs	r0, r3
 800d176:	2310      	movs	r3, #16
 800d178:	001a      	movs	r2, r3
 800d17a:	2100      	movs	r1, #0
 800d17c:	f012 f9ec 	bl	801f558 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d180:	4b32      	ldr	r3, [pc, #200]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d182:	4a33      	ldr	r2, [pc, #204]	@ (800d250 <MX_TIM3_Init+0xf4>)
 800d184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d186:	4b31      	ldr	r3, [pc, #196]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d188:	2200      	movs	r2, #0
 800d18a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d18c:	4b2f      	ldr	r3, [pc, #188]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d18e:	2200      	movs	r2, #0
 800d190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d192:	4b2e      	ldr	r3, [pc, #184]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d194:	4a2f      	ldr	r2, [pc, #188]	@ (800d254 <MX_TIM3_Init+0xf8>)
 800d196:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d198:	4b2c      	ldr	r3, [pc, #176]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d19e:	4b2b      	ldr	r3, [pc, #172]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d1a4:	4b29      	ldr	r3, [pc, #164]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f008 fdaa 	bl	8015d00 <HAL_TIM_PWM_Init>
 800d1ac:	1e03      	subs	r3, r0, #0
 800d1ae:	d001      	beq.n	800d1b4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d1b0:	f7fb f8ee 	bl	8008390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1b4:	2110      	movs	r1, #16
 800d1b6:	187b      	adds	r3, r7, r1
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1bc:	187b      	adds	r3, r7, r1
 800d1be:	2200      	movs	r2, #0
 800d1c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d1c2:	187a      	adds	r2, r7, r1
 800d1c4:	4b21      	ldr	r3, [pc, #132]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d1c6:	0011      	movs	r1, r2
 800d1c8:	0018      	movs	r0, r3
 800d1ca:	f009 f8b7 	bl	801633c <HAL_TIMEx_MasterConfigSynchronization>
 800d1ce:	1e03      	subs	r3, r0, #0
 800d1d0:	d001      	beq.n	800d1d6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d1d2:	f7fb f8dd 	bl	8008390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d1d6:	003b      	movs	r3, r7
 800d1d8:	2260      	movs	r2, #96	@ 0x60
 800d1da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d1dc:	003b      	movs	r3, r7
 800d1de:	2200      	movs	r2, #0
 800d1e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d1e2:	003b      	movs	r3, r7
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d1e8:	003b      	movs	r3, r7
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d1ee:	0039      	movs	r1, r7
 800d1f0:	4b16      	ldr	r3, [pc, #88]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	0018      	movs	r0, r3
 800d1f6:	f008 fe55 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d1fa:	1e03      	subs	r3, r0, #0
 800d1fc:	d001      	beq.n	800d202 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d1fe:	f7fb f8c7 	bl	8008390 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d202:	4b12      	ldr	r3, [pc, #72]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d204:	2104      	movs	r1, #4
 800d206:	0018      	movs	r0, r3
 800d208:	f009 f8f6 	bl	80163f8 <HAL_TIMEx_RemapConfig>
 800d20c:	1e03      	subs	r3, r0, #0
 800d20e:	d001      	beq.n	800d214 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d210:	f7fb f8be 	bl	8008390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d214:	0039      	movs	r1, r7
 800d216:	4b0d      	ldr	r3, [pc, #52]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d218:	2204      	movs	r2, #4
 800d21a:	0018      	movs	r0, r3
 800d21c:	f008 fe42 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d220:	1e03      	subs	r3, r0, #0
 800d222:	d001      	beq.n	800d228 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d224:	f7fb f8b4 	bl	8008390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d228:	0039      	movs	r1, r7
 800d22a:	4b08      	ldr	r3, [pc, #32]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d22c:	2208      	movs	r2, #8
 800d22e:	0018      	movs	r0, r3
 800d230:	f008 fe38 	bl	8015ea4 <HAL_TIM_PWM_ConfigChannel>
 800d234:	1e03      	subs	r3, r0, #0
 800d236:	d001      	beq.n	800d23c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d238:	f7fb f8aa 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d23c:	4b03      	ldr	r3, [pc, #12]	@ (800d24c <MX_TIM3_Init+0xf0>)
 800d23e:	0018      	movs	r0, r3
 800d240:	f000 f882 	bl	800d348 <HAL_TIM_MspPostInit>

}
 800d244:	46c0      	nop			@ (mov r8, r8)
 800d246:	46bd      	mov	sp, r7
 800d248:	b006      	add	sp, #24
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	20002198 	.word	0x20002198
 800d250:	40000400 	.word	0x40000400
 800d254:	0000ffff 	.word	0x0000ffff

0800d258 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d25e:	003b      	movs	r3, r7
 800d260:	0018      	movs	r0, r3
 800d262:	2308      	movs	r3, #8
 800d264:	001a      	movs	r2, r3
 800d266:	2100      	movs	r1, #0
 800d268:	f012 f976 	bl	801f558 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d26c:	4b15      	ldr	r3, [pc, #84]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d26e:	4a16      	ldr	r2, [pc, #88]	@ (800d2c8 <MX_TIM6_Init+0x70>)
 800d270:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d272:	4b14      	ldr	r3, [pc, #80]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d274:	220a      	movs	r2, #10
 800d276:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d278:	4b12      	ldr	r3, [pc, #72]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d27e:	4b11      	ldr	r3, [pc, #68]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d280:	4a12      	ldr	r2, [pc, #72]	@ (800d2cc <MX_TIM6_Init+0x74>)
 800d282:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d284:	4b0f      	ldr	r3, [pc, #60]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d286:	2200      	movs	r2, #0
 800d288:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d28a:	4b0e      	ldr	r3, [pc, #56]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d28c:	0018      	movs	r0, r3
 800d28e:	f008 fc8f 	bl	8015bb0 <HAL_TIM_Base_Init>
 800d292:	1e03      	subs	r3, r0, #0
 800d294:	d001      	beq.n	800d29a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d296:	f7fb f87b 	bl	8008390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d29a:	003b      	movs	r3, r7
 800d29c:	2200      	movs	r2, #0
 800d29e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2a0:	003b      	movs	r3, r7
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d2a6:	003a      	movs	r2, r7
 800d2a8:	4b06      	ldr	r3, [pc, #24]	@ (800d2c4 <MX_TIM6_Init+0x6c>)
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	0018      	movs	r0, r3
 800d2ae:	f009 f845 	bl	801633c <HAL_TIMEx_MasterConfigSynchronization>
 800d2b2:	1e03      	subs	r3, r0, #0
 800d2b4:	d001      	beq.n	800d2ba <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d2b6:	f7fb f86b 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d2ba:	46c0      	nop			@ (mov r8, r8)
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	b002      	add	sp, #8
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	46c0      	nop			@ (mov r8, r8)
 800d2c4:	200021d8 	.word	0x200021d8
 800d2c8:	40001000 	.word	0x40001000
 800d2cc:	0000ffff 	.word	0x0000ffff

0800d2d0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	2380      	movs	r3, #128	@ 0x80
 800d2de:	05db      	lsls	r3, r3, #23
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d106      	bne.n	800d2f2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800d310 <HAL_TIM_PWM_MspInit+0x40>)
 800d2e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2e8:	4b09      	ldr	r3, [pc, #36]	@ (800d310 <HAL_TIM_PWM_MspInit+0x40>)
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d2f0:	e00a      	b.n	800d308 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a07      	ldr	r2, [pc, #28]	@ (800d314 <HAL_TIM_PWM_MspInit+0x44>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d105      	bne.n	800d308 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d2fc:	4b04      	ldr	r3, [pc, #16]	@ (800d310 <HAL_TIM_PWM_MspInit+0x40>)
 800d2fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d300:	4b03      	ldr	r3, [pc, #12]	@ (800d310 <HAL_TIM_PWM_MspInit+0x40>)
 800d302:	2102      	movs	r1, #2
 800d304:	430a      	orrs	r2, r1
 800d306:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d308:	46c0      	nop			@ (mov r8, r8)
 800d30a:	46bd      	mov	sp, r7
 800d30c:	b002      	add	sp, #8
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	40021000 	.word	0x40021000
 800d314:	40000400 	.word	0x40000400

0800d318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a06      	ldr	r2, [pc, #24]	@ (800d340 <HAL_TIM_Base_MspInit+0x28>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d105      	bne.n	800d336 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d32a:	4b06      	ldr	r3, [pc, #24]	@ (800d344 <HAL_TIM_Base_MspInit+0x2c>)
 800d32c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d32e:	4b05      	ldr	r3, [pc, #20]	@ (800d344 <HAL_TIM_Base_MspInit+0x2c>)
 800d330:	2110      	movs	r1, #16
 800d332:	430a      	orrs	r2, r1
 800d334:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d336:	46c0      	nop			@ (mov r8, r8)
 800d338:	46bd      	mov	sp, r7
 800d33a:	b002      	add	sp, #8
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	46c0      	nop			@ (mov r8, r8)
 800d340:	40001000 	.word	0x40001000
 800d344:	40021000 	.word	0x40021000

0800d348 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d348:	b590      	push	{r4, r7, lr}
 800d34a:	b08b      	sub	sp, #44	@ 0x2c
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d350:	2414      	movs	r4, #20
 800d352:	193b      	adds	r3, r7, r4
 800d354:	0018      	movs	r0, r3
 800d356:	2314      	movs	r3, #20
 800d358:	001a      	movs	r2, r3
 800d35a:	2100      	movs	r1, #0
 800d35c:	f012 f8fc 	bl	801f558 <memset>
  if(timHandle->Instance==TIM2)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	2380      	movs	r3, #128	@ 0x80
 800d366:	05db      	lsls	r3, r3, #23
 800d368:	429a      	cmp	r2, r3
 800d36a:	d123      	bne.n	800d3b4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d36c:	4b27      	ldr	r3, [pc, #156]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d370:	4b26      	ldr	r3, [pc, #152]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d372:	2101      	movs	r1, #1
 800d374:	430a      	orrs	r2, r1
 800d376:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d378:	4b24      	ldr	r3, [pc, #144]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37c:	2201      	movs	r2, #1
 800d37e:	4013      	ands	r3, r2
 800d380:	613b      	str	r3, [r7, #16]
 800d382:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d384:	0021      	movs	r1, r4
 800d386:	187b      	adds	r3, r7, r1
 800d388:	220d      	movs	r2, #13
 800d38a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d38c:	187b      	adds	r3, r7, r1
 800d38e:	2202      	movs	r2, #2
 800d390:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d392:	187b      	adds	r3, r7, r1
 800d394:	2200      	movs	r2, #0
 800d396:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d398:	187b      	adds	r3, r7, r1
 800d39a:	2200      	movs	r2, #0
 800d39c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d39e:	187b      	adds	r3, r7, r1
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3a4:	187a      	adds	r2, r7, r1
 800d3a6:	23a0      	movs	r3, #160	@ 0xa0
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	0011      	movs	r1, r2
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f001 ff87 	bl	800f2c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d3b2:	e027      	b.n	800d404 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a15      	ldr	r2, [pc, #84]	@ (800d410 <HAL_TIM_MspPostInit+0xc8>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d122      	bne.n	800d404 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d3be:	4b13      	ldr	r3, [pc, #76]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c2:	4b12      	ldr	r3, [pc, #72]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d3c4:	2104      	movs	r1, #4
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d3ca:	4b10      	ldr	r3, [pc, #64]	@ (800d40c <HAL_TIM_MspPostInit+0xc4>)
 800d3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ce:	2204      	movs	r2, #4
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	60fb      	str	r3, [r7, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d3d6:	2114      	movs	r1, #20
 800d3d8:	187b      	adds	r3, r7, r1
 800d3da:	22e0      	movs	r2, #224	@ 0xe0
 800d3dc:	0052      	lsls	r2, r2, #1
 800d3de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e0:	187b      	adds	r3, r7, r1
 800d3e2:	2202      	movs	r2, #2
 800d3e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3e6:	187b      	adds	r3, r7, r1
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3ec:	187b      	adds	r3, r7, r1
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d3f8:	187b      	adds	r3, r7, r1
 800d3fa:	4a06      	ldr	r2, [pc, #24]	@ (800d414 <HAL_TIM_MspPostInit+0xcc>)
 800d3fc:	0019      	movs	r1, r3
 800d3fe:	0010      	movs	r0, r2
 800d400:	f001 ff5e 	bl	800f2c0 <HAL_GPIO_Init>
}
 800d404:	46c0      	nop			@ (mov r8, r8)
 800d406:	46bd      	mov	sp, r7
 800d408:	b00b      	add	sp, #44	@ 0x2c
 800d40a:	bd90      	pop	{r4, r7, pc}
 800d40c:	40021000 	.word	0x40021000
 800d410:	40000400 	.word	0x40000400
 800d414:	50000800 	.word	0x50000800

0800d418 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d41c:	4b17      	ldr	r3, [pc, #92]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d41e:	4a18      	ldr	r2, [pc, #96]	@ (800d480 <MX_LPUART1_UART_Init+0x68>)
 800d420:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d422:	4b16      	ldr	r3, [pc, #88]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d424:	22e1      	movs	r2, #225	@ 0xe1
 800d426:	0252      	lsls	r2, r2, #9
 800d428:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d42a:	4b14      	ldr	r3, [pc, #80]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d430:	4b12      	ldr	r3, [pc, #72]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d432:	2200      	movs	r2, #0
 800d434:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d436:	4b11      	ldr	r3, [pc, #68]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d438:	2200      	movs	r2, #0
 800d43a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d43c:	4b0f      	ldr	r3, [pc, #60]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d43e:	220c      	movs	r2, #12
 800d440:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d442:	4b0e      	ldr	r3, [pc, #56]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d444:	2200      	movs	r2, #0
 800d446:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d448:	4b0c      	ldr	r3, [pc, #48]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d44e:	4b0b      	ldr	r3, [pc, #44]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d450:	2218      	movs	r2, #24
 800d452:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d454:	4b09      	ldr	r3, [pc, #36]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d456:	2280      	movs	r2, #128	@ 0x80
 800d458:	0212      	lsls	r2, r2, #8
 800d45a:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d45c:	4b07      	ldr	r3, [pc, #28]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d45e:	2280      	movs	r2, #128	@ 0x80
 800d460:	0152      	lsls	r2, r2, #5
 800d462:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d464:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <MX_LPUART1_UART_Init+0x64>)
 800d466:	0018      	movs	r0, r3
 800d468:	f008 ffe4 	bl	8016434 <HAL_UART_Init>
 800d46c:	1e03      	subs	r3, r0, #0
 800d46e:	d001      	beq.n	800d474 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d470:	f7fa ff8e 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d474:	46c0      	nop			@ (mov r8, r8)
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	46c0      	nop			@ (mov r8, r8)
 800d47c:	20002218 	.word	0x20002218
 800d480:	40004800 	.word	0x40004800

0800d484 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d488:	4b16      	ldr	r3, [pc, #88]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d48a:	4a17      	ldr	r2, [pc, #92]	@ (800d4e8 <MX_USART1_UART_Init+0x64>)
 800d48c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d48e:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d490:	22e1      	movs	r2, #225	@ 0xe1
 800d492:	0252      	lsls	r2, r2, #9
 800d494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d496:	4b13      	ldr	r3, [pc, #76]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d498:	2200      	movs	r2, #0
 800d49a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d49c:	4b11      	ldr	r3, [pc, #68]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d4a2:	4b10      	ldr	r3, [pc, #64]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4aa:	220c      	movs	r2, #12
 800d4ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4bc:	2200      	movs	r2, #0
 800d4be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d4c0:	4b08      	ldr	r3, [pc, #32]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4c2:	2208      	movs	r2, #8
 800d4c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d4c6:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4c8:	2280      	movs	r2, #128	@ 0x80
 800d4ca:	0212      	lsls	r2, r2, #8
 800d4cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d4ce:	4b05      	ldr	r3, [pc, #20]	@ (800d4e4 <MX_USART1_UART_Init+0x60>)
 800d4d0:	0018      	movs	r0, r3
 800d4d2:	f008 ffaf 	bl	8016434 <HAL_UART_Init>
 800d4d6:	1e03      	subs	r3, r0, #0
 800d4d8:	d001      	beq.n	800d4de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d4da:	f7fa ff59 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d4de:	46c0      	nop			@ (mov r8, r8)
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	200022d0 	.word	0x200022d0
 800d4e8:	40013800 	.word	0x40013800

0800d4ec <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d4f0:	4b14      	ldr	r3, [pc, #80]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d4f2:	4a15      	ldr	r2, [pc, #84]	@ (800d548 <MX_USART4_UART_Init+0x5c>)
 800d4f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d4f6:	4b13      	ldr	r3, [pc, #76]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d4f8:	22e1      	movs	r2, #225	@ 0xe1
 800d4fa:	0252      	lsls	r2, r2, #9
 800d4fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d4fe:	4b11      	ldr	r3, [pc, #68]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d500:	2200      	movs	r2, #0
 800d502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d504:	4b0f      	ldr	r3, [pc, #60]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d506:	2200      	movs	r2, #0
 800d508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d50a:	4b0e      	ldr	r3, [pc, #56]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d510:	4b0c      	ldr	r3, [pc, #48]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d512:	220c      	movs	r2, #12
 800d514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d516:	4b0b      	ldr	r3, [pc, #44]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d518:	2200      	movs	r2, #0
 800d51a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d51c:	4b09      	ldr	r3, [pc, #36]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d51e:	2200      	movs	r2, #0
 800d520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d522:	4b08      	ldr	r3, [pc, #32]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d524:	2200      	movs	r2, #0
 800d526:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d528:	4b06      	ldr	r3, [pc, #24]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d52e:	4b05      	ldr	r3, [pc, #20]	@ (800d544 <MX_USART4_UART_Init+0x58>)
 800d530:	0018      	movs	r0, r3
 800d532:	f008 ff7f 	bl	8016434 <HAL_UART_Init>
 800d536:	1e03      	subs	r3, r0, #0
 800d538:	d001      	beq.n	800d53e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d53a:	f7fa ff29 	bl	8008390 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d53e:	46c0      	nop			@ (mov r8, r8)
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	20002388 	.word	0x20002388
 800d548:	40004c00 	.word	0x40004c00

0800d54c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d54c:	b590      	push	{r4, r7, lr}
 800d54e:	b08d      	sub	sp, #52	@ 0x34
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d554:	241c      	movs	r4, #28
 800d556:	193b      	adds	r3, r7, r4
 800d558:	0018      	movs	r0, r3
 800d55a:	2314      	movs	r3, #20
 800d55c:	001a      	movs	r2, r3
 800d55e:	2100      	movs	r1, #0
 800d560:	f011 fffa 	bl	801f558 <memset>
  if(uartHandle->Instance==LPUART1)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a8b      	ldr	r2, [pc, #556]	@ (800d798 <HAL_UART_MspInit+0x24c>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d129      	bne.n	800d5c2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d56e:	4b8b      	ldr	r3, [pc, #556]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d572:	4b8a      	ldr	r3, [pc, #552]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d574:	2180      	movs	r1, #128	@ 0x80
 800d576:	02c9      	lsls	r1, r1, #11
 800d578:	430a      	orrs	r2, r1
 800d57a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d57c:	4b87      	ldr	r3, [pc, #540]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d580:	4b86      	ldr	r3, [pc, #536]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d582:	2104      	movs	r1, #4
 800d584:	430a      	orrs	r2, r1
 800d586:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d588:	4b84      	ldr	r3, [pc, #528]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58c:	2204      	movs	r2, #4
 800d58e:	4013      	ands	r3, r2
 800d590:	61bb      	str	r3, [r7, #24]
 800d592:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d594:	0021      	movs	r1, r4
 800d596:	187b      	adds	r3, r7, r1
 800d598:	2203      	movs	r2, #3
 800d59a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d59c:	187b      	adds	r3, r7, r1
 800d59e:	2202      	movs	r2, #2
 800d5a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5a2:	187b      	adds	r3, r7, r1
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5a8:	187b      	adds	r3, r7, r1
 800d5aa:	2203      	movs	r2, #3
 800d5ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d5ae:	187b      	adds	r3, r7, r1
 800d5b0:	2206      	movs	r2, #6
 800d5b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5b4:	187b      	adds	r3, r7, r1
 800d5b6:	4a7a      	ldr	r2, [pc, #488]	@ (800d7a0 <HAL_UART_MspInit+0x254>)
 800d5b8:	0019      	movs	r1, r3
 800d5ba:	0010      	movs	r0, r2
 800d5bc:	f001 fe80 	bl	800f2c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d5c0:	e0e5      	b.n	800d78e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a77      	ldr	r2, [pc, #476]	@ (800d7a4 <HAL_UART_MspInit+0x258>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d133      	bne.n	800d634 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d5cc:	4b73      	ldr	r3, [pc, #460]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d5ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5d0:	4b72      	ldr	r3, [pc, #456]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d5d2:	2180      	movs	r1, #128	@ 0x80
 800d5d4:	01c9      	lsls	r1, r1, #7
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5da:	4b70      	ldr	r3, [pc, #448]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5de:	4b6f      	ldr	r3, [pc, #444]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d5e0:	2101      	movs	r1, #1
 800d5e2:	430a      	orrs	r2, r1
 800d5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5e6:	4b6d      	ldr	r3, [pc, #436]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	617b      	str	r3, [r7, #20]
 800d5f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d5f2:	211c      	movs	r1, #28
 800d5f4:	187b      	adds	r3, r7, r1
 800d5f6:	22c0      	movs	r2, #192	@ 0xc0
 800d5f8:	00d2      	lsls	r2, r2, #3
 800d5fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5fc:	187b      	adds	r3, r7, r1
 800d5fe:	2202      	movs	r2, #2
 800d600:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d602:	187b      	adds	r3, r7, r1
 800d604:	2200      	movs	r2, #0
 800d606:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d608:	187b      	adds	r3, r7, r1
 800d60a:	2203      	movs	r2, #3
 800d60c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d60e:	187b      	adds	r3, r7, r1
 800d610:	2204      	movs	r2, #4
 800d612:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d614:	187a      	adds	r2, r7, r1
 800d616:	23a0      	movs	r3, #160	@ 0xa0
 800d618:	05db      	lsls	r3, r3, #23
 800d61a:	0011      	movs	r1, r2
 800d61c:	0018      	movs	r0, r3
 800d61e:	f001 fe4f 	bl	800f2c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d622:	2200      	movs	r2, #0
 800d624:	2100      	movs	r1, #0
 800d626:	201b      	movs	r0, #27
 800d628:	f001 f9fc 	bl	800ea24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d62c:	201b      	movs	r0, #27
 800d62e:	f001 fa0e 	bl	800ea4e <HAL_NVIC_EnableIRQ>
}
 800d632:	e0ac      	b.n	800d78e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4a5b      	ldr	r2, [pc, #364]	@ (800d7a8 <HAL_UART_MspInit+0x25c>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d000      	beq.n	800d640 <HAL_UART_MspInit+0xf4>
 800d63e:	e0a6      	b.n	800d78e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d640:	4b56      	ldr	r3, [pc, #344]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d644:	4b55      	ldr	r3, [pc, #340]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d646:	2180      	movs	r1, #128	@ 0x80
 800d648:	0309      	lsls	r1, r1, #12
 800d64a:	430a      	orrs	r2, r1
 800d64c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d64e:	4b53      	ldr	r3, [pc, #332]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d652:	4b52      	ldr	r3, [pc, #328]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d654:	2101      	movs	r1, #1
 800d656:	430a      	orrs	r2, r1
 800d658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d65a:	4b50      	ldr	r3, [pc, #320]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65e:	2201      	movs	r2, #1
 800d660:	4013      	ands	r3, r2
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d666:	4b4d      	ldr	r3, [pc, #308]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d66a:	4b4c      	ldr	r3, [pc, #304]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d66c:	2104      	movs	r1, #4
 800d66e:	430a      	orrs	r2, r1
 800d670:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d672:	4b4a      	ldr	r3, [pc, #296]	@ (800d79c <HAL_UART_MspInit+0x250>)
 800d674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d676:	2204      	movs	r2, #4
 800d678:	4013      	ands	r3, r2
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d67e:	241c      	movs	r4, #28
 800d680:	193b      	adds	r3, r7, r4
 800d682:	2202      	movs	r2, #2
 800d684:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d686:	193b      	adds	r3, r7, r4
 800d688:	2202      	movs	r2, #2
 800d68a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d68c:	193b      	adds	r3, r7, r4
 800d68e:	2200      	movs	r2, #0
 800d690:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d692:	193b      	adds	r3, r7, r4
 800d694:	2203      	movs	r2, #3
 800d696:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d698:	193b      	adds	r3, r7, r4
 800d69a:	2206      	movs	r2, #6
 800d69c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d69e:	193a      	adds	r2, r7, r4
 800d6a0:	23a0      	movs	r3, #160	@ 0xa0
 800d6a2:	05db      	lsls	r3, r3, #23
 800d6a4:	0011      	movs	r1, r2
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	f001 fe0a 	bl	800f2c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d6ac:	0021      	movs	r1, r4
 800d6ae:	187b      	adds	r3, r7, r1
 800d6b0:	2280      	movs	r2, #128	@ 0x80
 800d6b2:	00d2      	lsls	r2, r2, #3
 800d6b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6b6:	187b      	adds	r3, r7, r1
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6bc:	187b      	adds	r3, r7, r1
 800d6be:	2200      	movs	r2, #0
 800d6c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6c2:	187b      	adds	r3, r7, r1
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d6c8:	187b      	adds	r3, r7, r1
 800d6ca:	2206      	movs	r2, #6
 800d6cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6ce:	187b      	adds	r3, r7, r1
 800d6d0:	4a33      	ldr	r2, [pc, #204]	@ (800d7a0 <HAL_UART_MspInit+0x254>)
 800d6d2:	0019      	movs	r1, r3
 800d6d4:	0010      	movs	r0, r2
 800d6d6:	f001 fdf3 	bl	800f2c0 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d6da:	4b34      	ldr	r3, [pc, #208]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6dc:	4a34      	ldr	r2, [pc, #208]	@ (800d7b0 <HAL_UART_MspInit+0x264>)
 800d6de:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d6e0:	4b32      	ldr	r3, [pc, #200]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6e2:	220c      	movs	r2, #12
 800d6e4:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d6e6:	4b31      	ldr	r3, [pc, #196]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d6ec:	4b2f      	ldr	r3, [pc, #188]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d6f2:	4b2e      	ldr	r3, [pc, #184]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6f4:	2280      	movs	r2, #128	@ 0x80
 800d6f6:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d6f8:	4b2c      	ldr	r3, [pc, #176]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d6fe:	4b2b      	ldr	r3, [pc, #172]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d700:	2200      	movs	r2, #0
 800d702:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d704:	4b29      	ldr	r3, [pc, #164]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d706:	2220      	movs	r2, #32
 800d708:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d70a:	4b28      	ldr	r3, [pc, #160]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d710:	4b26      	ldr	r3, [pc, #152]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d712:	0018      	movs	r0, r3
 800d714:	f001 f9b8 	bl	800ea88 <HAL_DMA_Init>
 800d718:	1e03      	subs	r3, r0, #0
 800d71a:	d001      	beq.n	800d720 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d71c:	f7fa fe38 	bl	8008390 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4a22      	ldr	r2, [pc, #136]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d724:	675a      	str	r2, [r3, #116]	@ 0x74
 800d726:	4b21      	ldr	r3, [pc, #132]	@ (800d7ac <HAL_UART_MspInit+0x260>)
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d72c:	4b21      	ldr	r3, [pc, #132]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d72e:	4a22      	ldr	r2, [pc, #136]	@ (800d7b8 <HAL_UART_MspInit+0x26c>)
 800d730:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d732:	4b20      	ldr	r3, [pc, #128]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d734:	220c      	movs	r2, #12
 800d736:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d738:	4b1e      	ldr	r3, [pc, #120]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d73a:	2210      	movs	r2, #16
 800d73c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d73e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d740:	2200      	movs	r2, #0
 800d742:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d744:	4b1b      	ldr	r3, [pc, #108]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d746:	2280      	movs	r2, #128	@ 0x80
 800d748:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d74a:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d74c:	2200      	movs	r2, #0
 800d74e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d750:	4b18      	ldr	r3, [pc, #96]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d752:	2200      	movs	r2, #0
 800d754:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d756:	4b17      	ldr	r3, [pc, #92]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d758:	2200      	movs	r2, #0
 800d75a:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d75c:	4b15      	ldr	r3, [pc, #84]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d75e:	2200      	movs	r2, #0
 800d760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d762:	4b14      	ldr	r3, [pc, #80]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d764:	0018      	movs	r0, r3
 800d766:	f001 f98f 	bl	800ea88 <HAL_DMA_Init>
 800d76a:	1e03      	subs	r3, r0, #0
 800d76c:	d001      	beq.n	800d772 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d76e:	f7fa fe0f 	bl	8008390 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a0f      	ldr	r2, [pc, #60]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d776:	671a      	str	r2, [r3, #112]	@ 0x70
 800d778:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b4 <HAL_UART_MspInit+0x268>)
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d77e:	2200      	movs	r2, #0
 800d780:	2100      	movs	r1, #0
 800d782:	200e      	movs	r0, #14
 800d784:	f001 f94e 	bl	800ea24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d788:	200e      	movs	r0, #14
 800d78a:	f001 f960 	bl	800ea4e <HAL_NVIC_EnableIRQ>
}
 800d78e:	46c0      	nop			@ (mov r8, r8)
 800d790:	46bd      	mov	sp, r7
 800d792:	b00d      	add	sp, #52	@ 0x34
 800d794:	bd90      	pop	{r4, r7, pc}
 800d796:	46c0      	nop			@ (mov r8, r8)
 800d798:	40004800 	.word	0x40004800
 800d79c:	40021000 	.word	0x40021000
 800d7a0:	50000800 	.word	0x50000800
 800d7a4:	40013800 	.word	0x40013800
 800d7a8:	40004c00 	.word	0x40004c00
 800d7ac:	20002440 	.word	0x20002440
 800d7b0:	4002006c 	.word	0x4002006c
 800d7b4:	20002488 	.word	0x20002488
 800d7b8:	40020080 	.word	0x40020080

0800d7bc <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d7c4:	f000 fc9c 	bl	800e100 <HAL_GetTick>
 800d7c8:	0003      	movs	r3, r0
 800d7ca:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d7cc:	4b1c      	ldr	r3, [pc, #112]	@ (800d840 <TimestampIsReached+0x84>)
 800d7ce:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d7d0:	697a      	ldr	r2, [r7, #20]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d307      	bcc.n	800d7e8 <TimestampIsReached+0x2c>
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	693a      	ldr	r2, [r7, #16]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d901      	bls.n	800d7e8 <TimestampIsReached+0x2c>
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	e000      	b.n	800d7ea <TimestampIsReached+0x2e>
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	230f      	movs	r3, #15
 800d7ec:	18fb      	adds	r3, r7, r3
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	400a      	ands	r2, r1
 800d7f6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800d7f8:	697a      	ldr	r2, [r7, #20]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d207      	bcs.n	800d810 <TimestampIsReached+0x54>
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d201      	bcs.n	800d810 <TimestampIsReached+0x54>
 800d80c:	2201      	movs	r2, #1
 800d80e:	e000      	b.n	800d812 <TimestampIsReached+0x56>
 800d810:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800d812:	200e      	movs	r0, #14
 800d814:	183b      	adds	r3, r7, r0
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	781a      	ldrb	r2, [r3, #0]
 800d81a:	2101      	movs	r1, #1
 800d81c:	400a      	ands	r2, r1
 800d81e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800d820:	230f      	movs	r3, #15
 800d822:	18fb      	adds	r3, r7, r3
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d103      	bne.n	800d832 <TimestampIsReached+0x76>
 800d82a:	183b      	adds	r3, r7, r0
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800d832:	2301      	movs	r3, #1
 800d834:	e000      	b.n	800d838 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800d836:	2300      	movs	r3, #0
}
 800d838:	0018      	movs	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	b006      	add	sp, #24
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	7fffffff 	.word	0x7fffffff

0800d844 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800d84c:	f000 fc58 	bl	800e100 <HAL_GetTick>
 800d850:	0002      	movs	r2, r0
 800d852:	4904      	ldr	r1, [pc, #16]	@ (800d864 <AddTimestamp+0x20>)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	0018      	movs	r0, r3
 800d858:	f011 fd3a 	bl	801f2d0 <siprintf>
}
 800d85c:	46c0      	nop			@ (mov r8, r8)
 800d85e:	46bd      	mov	sp, r7
 800d860:	b002      	add	sp, #8
 800d862:	bd80      	pop	{r7, pc}
 800d864:	08023f48 	.word	0x08023f48

0800d868 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800d868:	b40c      	push	{r2, r3}
 800d86a:	b5b0      	push	{r4, r5, r7, lr}
 800d86c:	b0a4      	sub	sp, #144	@ 0x90
 800d86e:	af00      	add	r7, sp, #0
 800d870:	0002      	movs	r2, r0
 800d872:	6039      	str	r1, [r7, #0]
 800d874:	1dfb      	adds	r3, r7, #7
 800d876:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800d878:	4b23      	ldr	r3, [pc, #140]	@ (800d908 <CreateLine+0xa0>)
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	1dfa      	adds	r2, r7, #7
 800d87e:	7812      	ldrb	r2, [r2, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d839      	bhi.n	800d8f8 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	4921      	ldr	r1, [pc, #132]	@ (800d90c <CreateLine+0xa4>)
 800d888:	240c      	movs	r4, #12
 800d88a:	193b      	adds	r3, r7, r4
 800d88c:	0018      	movs	r0, r3
 800d88e:	f011 fd1f 	bl	801f2d0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800d892:	4b1d      	ldr	r3, [pc, #116]	@ (800d908 <CreateLine+0xa0>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d909      	bls.n	800d8ae <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800d89a:	193b      	adds	r3, r7, r4
 800d89c:	0018      	movs	r0, r3
 800d89e:	f7f2 fc65 	bl	800016c <strlen>
 800d8a2:	0002      	movs	r2, r0
 800d8a4:	193b      	adds	r3, r7, r4
 800d8a6:	189b      	adds	r3, r3, r2
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f7ff ffcb 	bl	800d844 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800d8ae:	240c      	movs	r4, #12
 800d8b0:	193b      	adds	r3, r7, r4
 800d8b2:	0018      	movs	r0, r3
 800d8b4:	f7f2 fc5a 	bl	800016c <strlen>
 800d8b8:	0003      	movs	r3, r0
 800d8ba:	218c      	movs	r1, #140	@ 0x8c
 800d8bc:	187a      	adds	r2, r7, r1
 800d8be:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800d8c0:	239c      	movs	r3, #156	@ 0x9c
 800d8c2:	2508      	movs	r5, #8
 800d8c4:	195b      	adds	r3, r3, r5
 800d8c6:	19db      	adds	r3, r3, r7
 800d8c8:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800d8ca:	193a      	adds	r2, r7, r4
 800d8cc:	187b      	adds	r3, r7, r1
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	18d0      	adds	r0, r2, r3
 800d8d2:	187b      	adds	r3, r7, r1
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2280      	movs	r2, #128	@ 0x80
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	0019      	movs	r1, r3
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2298      	movs	r2, #152	@ 0x98
 800d8e0:	1952      	adds	r2, r2, r5
 800d8e2:	19d2      	adds	r2, r2, r7
 800d8e4:	6812      	ldr	r2, [r2, #0]
 800d8e6:	f011 fd8b 	bl	801f400 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800d8ea:	193a      	adds	r2, r7, r4
 800d8ec:	4b08      	ldr	r3, [pc, #32]	@ (800d910 <CreateLine+0xa8>)
 800d8ee:	0011      	movs	r1, r2
 800d8f0:	0018      	movs	r0, r3
 800d8f2:	f011 fc7d 	bl	801f1f0 <iprintf>
 800d8f6:	e000      	b.n	800d8fa <CreateLine+0x92>
    return;
 800d8f8:	46c0      	nop			@ (mov r8, r8)
}
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	b024      	add	sp, #144	@ 0x90
 800d8fe:	bcb0      	pop	{r4, r5, r7}
 800d900:	bc08      	pop	{r3}
 800d902:	b002      	add	sp, #8
 800d904:	4718      	bx	r3
 800d906:	46c0      	nop			@ (mov r8, r8)
 800d908:	200000cc 	.word	0x200000cc
 800d90c:	08023f54 	.word	0x08023f54
 800d910:	08023f58 	.word	0x08023f58

0800d914 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	b29a      	uxth	r2, r3
 800d924:	68b9      	ldr	r1, [r7, #8]
 800d926:	4804      	ldr	r0, [pc, #16]	@ (800d938 <_write+0x24>)
 800d928:	2364      	movs	r3, #100	@ 0x64
 800d92a:	f008 fde9 	bl	8016500 <HAL_UART_Transmit>
  return count;
 800d92e:	687b      	ldr	r3, [r7, #4]
}
 800d930:	0018      	movs	r0, r3
 800d932:	46bd      	mov	sp, r7
 800d934:	b004      	add	sp, #16
 800d936:	bd80      	pop	{r7, pc}
 800d938:	200022d0 	.word	0x200022d0

0800d93c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	0002      	movs	r2, r0
 800d944:	1dfb      	adds	r3, r7, #7
 800d946:	701a      	strb	r2, [r3, #0]
 800d948:	4b03      	ldr	r3, [pc, #12]	@ (800d958 <SetVerboseLevel+0x1c>)
 800d94a:	1dfa      	adds	r2, r7, #7
 800d94c:	7812      	ldrb	r2, [r2, #0]
 800d94e:	701a      	strb	r2, [r3, #0]
 800d950:	46c0      	nop			@ (mov r8, r8)
 800d952:	46bd      	mov	sp, r7
 800d954:	b002      	add	sp, #8
 800d956:	bd80      	pop	{r7, pc}
 800d958:	200000cc 	.word	0x200000cc

0800d95c <BinaryReleaseInfo>:

//uint32_t GetCurrentHalTicks(void) {
//  return HAL_GetTick();
//}

void BinaryReleaseInfo() {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800d962:	4a0f      	ldr	r2, [pc, #60]	@ (800d9a0 <BinaryReleaseInfo+0x44>)
 800d964:	4b0f      	ldr	r3, [pc, #60]	@ (800d9a4 <BinaryReleaseInfo+0x48>)
 800d966:	0019      	movs	r1, r3
 800d968:	2002      	movs	r0, #2
 800d96a:	f7ff ff7d 	bl	800d868 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800d96e:	480e      	ldr	r0, [pc, #56]	@ (800d9a8 <BinaryReleaseInfo+0x4c>)
 800d970:	4a0e      	ldr	r2, [pc, #56]	@ (800d9ac <BinaryReleaseInfo+0x50>)
 800d972:	490c      	ldr	r1, [pc, #48]	@ (800d9a4 <BinaryReleaseInfo+0x48>)
 800d974:	4b0e      	ldr	r3, [pc, #56]	@ (800d9b0 <BinaryReleaseInfo+0x54>)
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	0003      	movs	r3, r0
 800d97a:	2002      	movs	r0, #2
 800d97c:	f7ff ff74 	bl	800d868 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800d980:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b4 <BinaryReleaseInfo+0x58>)
 800d982:	4a0d      	ldr	r2, [pc, #52]	@ (800d9b8 <BinaryReleaseInfo+0x5c>)
 800d984:	4907      	ldr	r1, [pc, #28]	@ (800d9a4 <BinaryReleaseInfo+0x48>)
 800d986:	2002      	movs	r0, #2
 800d988:	f7ff ff6e 	bl	800d868 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800d98c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9bc <BinaryReleaseInfo+0x60>)
 800d98e:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c0 <BinaryReleaseInfo+0x64>)
 800d990:	4904      	ldr	r1, [pc, #16]	@ (800d9a4 <BinaryReleaseInfo+0x48>)
 800d992:	2002      	movs	r0, #2
 800d994:	f7ff ff68 	bl	800d868 <CreateLine>
}
 800d998:	46c0      	nop			@ (mov r8, r8)
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	08023f60 	.word	0x08023f60
 800d9a4:	08023f8c 	.word	0x08023f8c
 800d9a8:	08023f90 	.word	0x08023f90
 800d9ac:	08023f9c 	.word	0x08023f9c
 800d9b0:	08023fb0 	.word	0x08023fb0
 800d9b4:	08023fbc 	.word	0x08023fbc
 800d9b8:	08023fc4 	.word	0x08023fc4
 800d9bc:	08023fcc 	.word	0x08023fcc
 800d9c0:	08023fd4 	.word	0x08023fd4

0800d9c4 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b084      	sub	sp, #16
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	68f9      	ldr	r1, [r7, #12]
 800d9d6:	4803      	ldr	r0, [pc, #12]	@ (800d9e4 <errorHandler+0x20>)
 800d9d8:	f011 fc0a 	bl	801f1f0 <iprintf>
//    while (true)
//    {
//    }
}
 800d9dc:	46c0      	nop			@ (mov r8, r8)
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	b004      	add	sp, #16
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	08023fec 	.word	0x08023fec

0800d9e8 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d9e8:	b590      	push	{r4, r7, lr}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6039      	str	r1, [r7, #0]
 800d9f0:	0011      	movs	r1, r2
 800d9f2:	1dfb      	adds	r3, r7, #7
 800d9f4:	1c02      	adds	r2, r0, #0
 800d9f6:	701a      	strb	r2, [r3, #0]
 800d9f8:	1dbb      	adds	r3, r7, #6
 800d9fa:	1c0a      	adds	r2, r1, #0
 800d9fc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800da28 <ReadRegister+0x40>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800da06:	4b08      	ldr	r3, [pc, #32]	@ (800da28 <ReadRegister+0x40>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	1dba      	adds	r2, r7, #6
 800da0c:	7814      	ldrb	r4, [r2, #0]
 800da0e:	6839      	ldr	r1, [r7, #0]
 800da10:	1dfa      	adds	r2, r7, #7
 800da12:	7810      	ldrb	r0, [r2, #0]
 800da14:	0022      	movs	r2, r4
 800da16:	4798      	blx	r3
 800da18:	0003      	movs	r3, r0
 800da1a:	e000      	b.n	800da1e <ReadRegister+0x36>
	}
	return false;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	0018      	movs	r0, r3
 800da20:	46bd      	mov	sp, r7
 800da22:	b003      	add	sp, #12
 800da24:	bd90      	pop	{r4, r7, pc}
 800da26:	46c0      	nop			@ (mov r8, r8)
 800da28:	200024d8 	.word	0x200024d8

0800da2c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800da2c:	b590      	push	{r4, r7, lr}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6039      	str	r1, [r7, #0]
 800da34:	0011      	movs	r1, r2
 800da36:	1dfb      	adds	r3, r7, #7
 800da38:	1c02      	adds	r2, r0, #0
 800da3a:	701a      	strb	r2, [r3, #0]
 800da3c:	1dbb      	adds	r3, r7, #6
 800da3e:	1c0a      	adds	r2, r1, #0
 800da40:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800da42:	4b0a      	ldr	r3, [pc, #40]	@ (800da6c <WriteRegister+0x40>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00a      	beq.n	800da60 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800da4a:	4b08      	ldr	r3, [pc, #32]	@ (800da6c <WriteRegister+0x40>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	1dba      	adds	r2, r7, #6
 800da50:	7814      	ldrb	r4, [r2, #0]
 800da52:	6839      	ldr	r1, [r7, #0]
 800da54:	1dfa      	adds	r2, r7, #7
 800da56:	7810      	ldrb	r0, [r2, #0]
 800da58:	0022      	movs	r2, r4
 800da5a:	4798      	blx	r3
 800da5c:	0003      	movs	r3, r0
 800da5e:	e000      	b.n	800da62 <WriteRegister+0x36>
  }
  return false;
 800da60:	2300      	movs	r3, #0
}
 800da62:	0018      	movs	r0, r3
 800da64:	46bd      	mov	sp, r7
 800da66:	b003      	add	sp, #12
 800da68:	bd90      	pop	{r4, r7, pc}
 800da6a:	46c0      	nop			@ (mov r8, r8)
 800da6c:	200024dc 	.word	0x200024dc

0800da70 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	000a      	movs	r2, r1
 800da7a:	1cfb      	adds	r3, r7, #3
 800da7c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800da7e:	230f      	movs	r3, #15
 800da80:	18fb      	adds	r3, r7, r3
 800da82:	22ff      	movs	r2, #255	@ 0xff
 800da84:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800da86:	230e      	movs	r3, #14
 800da88:	18fb      	adds	r3, r7, r3
 800da8a:	2200      	movs	r2, #0
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	e037      	b.n	800db00 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800da90:	230e      	movs	r3, #14
 800da92:	18fb      	adds	r3, r7, r3
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	18d3      	adds	r3, r2, r3
 800da9a:	7819      	ldrb	r1, [r3, #0]
 800da9c:	220f      	movs	r2, #15
 800da9e:	18bb      	adds	r3, r7, r2
 800daa0:	18ba      	adds	r2, r7, r2
 800daa2:	7812      	ldrb	r2, [r2, #0]
 800daa4:	404a      	eors	r2, r1
 800daa6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800daa8:	230d      	movs	r3, #13
 800daaa:	18fb      	adds	r3, r7, r3
 800daac:	2200      	movs	r2, #0
 800daae:	701a      	strb	r2, [r3, #0]
 800dab0:	e01b      	b.n	800daea <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800dab2:	210f      	movs	r1, #15
 800dab4:	187b      	adds	r3, r7, r1
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	b25b      	sxtb	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	da09      	bge.n	800dad2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800dabe:	187b      	adds	r3, r7, r1
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	2231      	movs	r2, #49	@ 0x31
 800dac8:	4053      	eors	r3, r2
 800daca:	b25a      	sxtb	r2, r3
 800dacc:	187b      	adds	r3, r7, r1
 800dace:	701a      	strb	r2, [r3, #0]
 800dad0:	e005      	b.n	800dade <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800dad2:	230f      	movs	r3, #15
 800dad4:	18fa      	adds	r2, r7, r3
 800dad6:	18fb      	adds	r3, r7, r3
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	18db      	adds	r3, r3, r3
 800dadc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dade:	210d      	movs	r1, #13
 800dae0:	187b      	adds	r3, r7, r1
 800dae2:	781a      	ldrb	r2, [r3, #0]
 800dae4:	187b      	adds	r3, r7, r1
 800dae6:	3201      	adds	r2, #1
 800dae8:	701a      	strb	r2, [r3, #0]
 800daea:	230d      	movs	r3, #13
 800daec:	18fb      	adds	r3, r7, r3
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b07      	cmp	r3, #7
 800daf2:	d9de      	bls.n	800dab2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800daf4:	210e      	movs	r1, #14
 800daf6:	187b      	adds	r3, r7, r1
 800daf8:	781a      	ldrb	r2, [r3, #0]
 800dafa:	187b      	adds	r3, r7, r1
 800dafc:	3201      	adds	r2, #1
 800dafe:	701a      	strb	r2, [r3, #0]
 800db00:	230e      	movs	r3, #14
 800db02:	18fa      	adds	r2, r7, r3
 800db04:	1cfb      	adds	r3, r7, #3
 800db06:	7812      	ldrb	r2, [r2, #0]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d3c0      	bcc.n	800da90 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800db0e:	230f      	movs	r3, #15
 800db10:	18fb      	adds	r3, r7, r3
 800db12:	781b      	ldrb	r3, [r3, #0]
}
 800db14:	0018      	movs	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	b004      	add	sp, #16
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800db26:	4b0a      	ldr	r3, [pc, #40]	@ (800db50 <HIDS_Init+0x34>)
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800db2c:	4b09      	ldr	r3, [pc, #36]	@ (800db54 <HIDS_Init+0x38>)
 800db2e:	683a      	ldr	r2, [r7, #0]
 800db30:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800db32:	4b09      	ldr	r3, [pc, #36]	@ (800db58 <HIDS_Init+0x3c>)
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	0018      	movs	r0, r3
 800db38:	f000 f840 	bl	800dbbc <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800db3c:	4b07      	ldr	r3, [pc, #28]	@ (800db5c <HIDS_Init+0x40>)
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	0018      	movs	r0, r3
 800db42:	f000 f82b 	bl	800db9c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800db46:	46c0      	nop			@ (mov r8, r8)
 800db48:	46bd      	mov	sp, r7
 800db4a:	b002      	add	sp, #8
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	46c0      	nop			@ (mov r8, r8)
 800db50:	200024d8 	.word	0x200024d8
 800db54:	200024dc 	.word	0x200024dc
 800db58:	200000ce 	.word	0x200000ce
 800db5c:	200000cd 	.word	0x200000cd

0800db60 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800db60:	b580      	push	{r7, lr}
 800db62:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800db64:	f000 facc 	bl	800e100 <HAL_GetTick>
 800db68:	0002      	movs	r2, r0
 800db6a:	4b08      	ldr	r3, [pc, #32]	@ (800db8c <HIDS_StartMeasurement+0x2c>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	18d2      	adds	r2, r2, r3
 800db70:	4b07      	ldr	r3, [pc, #28]	@ (800db90 <HIDS_StartMeasurement+0x30>)
 800db72:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800db74:	4b07      	ldr	r3, [pc, #28]	@ (800db94 <HIDS_StartMeasurement+0x34>)
 800db76:	2201      	movs	r2, #1
 800db78:	0019      	movs	r1, r3
 800db7a:	2044      	movs	r0, #68	@ 0x44
 800db7c:	f7ff ff56 	bl	800da2c <WriteRegister>
  MeasurementDone = false;
 800db80:	4b05      	ldr	r3, [pc, #20]	@ (800db98 <HIDS_StartMeasurement+0x38>)
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
}
 800db86:	46c0      	nop			@ (mov r8, r8)
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	200000d4 	.word	0x200000d4
 800db90:	200000d0 	.word	0x200000d0
 800db94:	200000ce 	.word	0x200000ce
 800db98:	200024ee 	.word	0x200024ee

0800db9c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	0002      	movs	r2, r0
 800dba4:	1dfb      	adds	r3, r7, #7
 800dba6:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800dba8:	4b03      	ldr	r3, [pc, #12]	@ (800dbb8 <HIDS_SetHeaterMode+0x1c>)
 800dbaa:	1dfa      	adds	r2, r7, #7
 800dbac:	7812      	ldrb	r2, [r2, #0]
 800dbae:	701a      	strb	r2, [r3, #0]
}
 800dbb0:	46c0      	nop			@ (mov r8, r8)
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	b002      	add	sp, #8
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	200000cd 	.word	0x200000cd

0800dbbc <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	0002      	movs	r2, r0
 800dbc4:	1dfb      	adds	r3, r7, #7
 800dbc6:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800dbc8:	4b03      	ldr	r3, [pc, #12]	@ (800dbd8 <HIDS_SetMeasurementMode+0x1c>)
 800dbca:	1dfa      	adds	r2, r7, #7
 800dbcc:	7812      	ldrb	r2, [r2, #0]
 800dbce:	701a      	strb	r2, [r3, #0]
}
 800dbd0:	46c0      	nop			@ (mov r8, r8)
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	b002      	add	sp, #8
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	200000ce 	.word	0x200000ce

0800dbdc <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800dbe4:	f000 fa8c 	bl	800e100 <HAL_GetTick>
 800dbe8:	0002      	movs	r2, r0
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	18d2      	adds	r2, r2, r3
 800dbee:	4b03      	ldr	r3, [pc, #12]	@ (800dbfc <setHIDSTimeStamp+0x20>)
 800dbf0:	601a      	str	r2, [r3, #0]
}
 800dbf2:	46c0      	nop			@ (mov r8, r8)
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	b002      	add	sp, #8
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	46c0      	nop			@ (mov r8, r8)
 800dbfc:	200024f0 	.word	0x200024f0

0800dc00 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	210c      	movs	r1, #12
 800dc0e:	187b      	adds	r3, r7, r1
 800dc10:	701a      	strb	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	785a      	ldrb	r2, [r3, #1]
 800dc16:	187b      	adds	r3, r7, r1
 800dc18:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800dc1a:	240f      	movs	r4, #15
 800dc1c:	193b      	adds	r3, r7, r4
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	7892      	ldrb	r2, [r2, #2]
 800dc22:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800dc24:	187b      	adds	r3, r7, r1
 800dc26:	2102      	movs	r1, #2
 800dc28:	0018      	movs	r0, r3
 800dc2a:	f7ff ff21 	bl	800da70 <CalculateCRC>
 800dc2e:	0003      	movs	r3, r0
 800dc30:	001a      	movs	r2, r3
 800dc32:	193b      	adds	r3, r7, r4
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d007      	beq.n	800dc4a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800dc3a:	4a1a      	ldr	r2, [pc, #104]	@ (800dca4 <CheckCRC+0xa4>)
 800dc3c:	4b1a      	ldr	r3, [pc, #104]	@ (800dca8 <CheckCRC+0xa8>)
 800dc3e:	0019      	movs	r1, r3
 800dc40:	2001      	movs	r0, #1
 800dc42:	f7ff fe11 	bl	800d868 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e027      	b.n	800dc9a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	78da      	ldrb	r2, [r3, #3]
 800dc4e:	2108      	movs	r1, #8
 800dc50:	187b      	adds	r3, r7, r1
 800dc52:	701a      	strb	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	791a      	ldrb	r2, [r3, #4]
 800dc58:	187b      	adds	r3, r7, r1
 800dc5a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800dc5c:	240e      	movs	r4, #14
 800dc5e:	193b      	adds	r3, r7, r4
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	7952      	ldrb	r2, [r2, #5]
 800dc64:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800dc66:	187b      	adds	r3, r7, r1
 800dc68:	2102      	movs	r1, #2
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	f7ff ff00 	bl	800da70 <CalculateCRC>
 800dc70:	0003      	movs	r3, r0
 800dc72:	001a      	movs	r2, r3
 800dc74:	193b      	adds	r3, r7, r4
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d00d      	beq.n	800dc98 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800dc7c:	4a0b      	ldr	r2, [pc, #44]	@ (800dcac <CheckCRC+0xac>)
 800dc7e:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <CheckCRC+0xa8>)
 800dc80:	0019      	movs	r1, r3
 800dc82:	2001      	movs	r0, #1
 800dc84:	f7ff fdf0 	bl	800d868 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800dc88:	4a09      	ldr	r2, [pc, #36]	@ (800dcb0 <CheckCRC+0xb0>)
 800dc8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dcb4 <CheckCRC+0xb4>)
 800dc8c:	217c      	movs	r1, #124	@ 0x7c
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f7ff fe98 	bl	800d9c4 <errorHandler>
		return false;
 800dc94:	2300      	movs	r3, #0
 800dc96:	e000      	b.n	800dc9a <CheckCRC+0x9a>
	}
	return true;
 800dc98:	2301      	movs	r3, #1
}
 800dc9a:	0018      	movs	r0, r3
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	b005      	add	sp, #20
 800dca0:	bd90      	pop	{r4, r7, pc}
 800dca2:	46c0      	nop			@ (mov r8, r8)
 800dca4:	08024038 	.word	0x08024038
 800dca8:	08024060 	.word	0x08024060
 800dcac:	08024064 	.word	0x08024064
 800dcb0:	08024090 	.word	0x08024090
 800dcb4:	08024624 	.word	0x08024624

0800dcb8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800dcbe:	1dbb      	adds	r3, r7, #6
 800dcc0:	2289      	movs	r2, #137	@ 0x89
 800dcc2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800dcc4:	1dbb      	adds	r3, r7, #6
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	0019      	movs	r1, r3
 800dcca:	2044      	movs	r0, #68	@ 0x44
 800dccc:	f7ff feae 	bl	800da2c <WriteRegister>
	HAL_Delay(30);
 800dcd0:	201e      	movs	r0, #30
 800dcd2:	f000 fa1f 	bl	800e114 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800dcd6:	4b14      	ldr	r3, [pc, #80]	@ (800dd28 <HIDS_DeviceConnected+0x70>)
 800dcd8:	2206      	movs	r2, #6
 800dcda:	0019      	movs	r1, r3
 800dcdc:	2044      	movs	r0, #68	@ 0x44
 800dcde:	f7ff fe83 	bl	800d9e8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800dce2:	1dfb      	adds	r3, r7, #7
 800dce4:	2200      	movs	r2, #0
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	e011      	b.n	800dd0e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800dcea:	1dfb      	adds	r3, r7, #7
 800dcec:	7818      	ldrb	r0, [r3, #0]
 800dcee:	1dfb      	adds	r3, r7, #7
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	4a0d      	ldr	r2, [pc, #52]	@ (800dd28 <HIDS_DeviceConnected+0x70>)
 800dcf4:	5cd3      	ldrb	r3, [r2, r3]
 800dcf6:	4a0d      	ldr	r2, [pc, #52]	@ (800dd2c <HIDS_DeviceConnected+0x74>)
 800dcf8:	490d      	ldr	r1, [pc, #52]	@ (800dd30 <HIDS_DeviceConnected+0x78>)
 800dcfa:	9300      	str	r3, [sp, #0]
 800dcfc:	0003      	movs	r3, r0
 800dcfe:	2002      	movs	r0, #2
 800dd00:	f7ff fdb2 	bl	800d868 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800dd04:	1dfb      	adds	r3, r7, #7
 800dd06:	781a      	ldrb	r2, [r3, #0]
 800dd08:	1dfb      	adds	r3, r7, #7
 800dd0a:	3201      	adds	r2, #1
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	1dfb      	adds	r3, r7, #7
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	2b05      	cmp	r3, #5
 800dd14:	d9e9      	bls.n	800dcea <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800dd16:	4b04      	ldr	r3, [pc, #16]	@ (800dd28 <HIDS_DeviceConnected+0x70>)
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f7ff ff71 	bl	800dc00 <CheckCRC>
 800dd1e:	0003      	movs	r3, r0
}
 800dd20:	0018      	movs	r0, r3
 800dd22:	46bd      	mov	sp, r7
 800dd24:	b002      	add	sp, #8
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	200024e0 	.word	0x200024e0
 800dd2c:	080240a8 	.word	0x080240a8
 800dd30:	08024034 	.word	0x08024034

0800dd34 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800dd38:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <HIDS_MeasurementReady+0x18>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f7ff fd3d 	bl	800d7bc <TimestampIsReached>
 800dd42:	0003      	movs	r3, r0
}
 800dd44:	0018      	movs	r0, r3
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	46c0      	nop			@ (mov r8, r8)
 800dd4c:	200000d0 	.word	0x200000d0

0800dd50 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b086      	sub	sp, #24
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800dd5a:	4b4c      	ldr	r3, [pc, #304]	@ (800de8c <HIDS_GetMeasurementValues+0x13c>)
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <HIDS_GetMeasurementValues+0x16>
 800dd62:	2301      	movs	r3, #1
 800dd64:	e08d      	b.n	800de82 <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800dd66:	f7ff ffe5 	bl	800dd34 <HIDS_MeasurementReady>
 800dd6a:	0003      	movs	r3, r0
 800dd6c:	001a      	movs	r2, r3
 800dd6e:	2301      	movs	r3, #1
 800dd70:	4053      	eors	r3, r2
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <HIDS_GetMeasurementValues+0x2c>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e082      	b.n	800de82 <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800dd7c:	4b44      	ldr	r3, [pc, #272]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800dd7e:	2206      	movs	r2, #6
 800dd80:	0019      	movs	r1, r3
 800dd82:	2044      	movs	r0, #68	@ 0x44
 800dd84:	f7ff fe30 	bl	800d9e8 <ReadRegister>
 800dd88:	0003      	movs	r3, r0
 800dd8a:	001a      	movs	r2, r3
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	4053      	eors	r3, r2
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d005      	beq.n	800dda2 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800dd96:	4a3f      	ldr	r2, [pc, #252]	@ (800de94 <HIDS_GetMeasurementValues+0x144>)
 800dd98:	4b3f      	ldr	r3, [pc, #252]	@ (800de98 <HIDS_GetMeasurementValues+0x148>)
 800dd9a:	0019      	movs	r1, r3
 800dd9c:	2001      	movs	r0, #1
 800dd9e:	f7ff fd63 	bl	800d868 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800dda2:	4b3b      	ldr	r3, [pc, #236]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800dda4:	0018      	movs	r0, r3
 800dda6:	f7ff ff2b 	bl	800dc00 <CheckCRC>
 800ddaa:	0003      	movs	r3, r0
 800ddac:	001a      	movs	r2, r3
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4053      	eors	r3, r2
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d011      	beq.n	800dddc <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800ddb8:	2317      	movs	r3, #23
 800ddba:	18fb      	adds	r3, r7, r3
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
 800ddc0:	e005      	b.n	800ddce <HIDS_GetMeasurementValues+0x7e>
 800ddc2:	2117      	movs	r1, #23
 800ddc4:	187b      	adds	r3, r7, r1
 800ddc6:	781a      	ldrb	r2, [r3, #0]
 800ddc8:	187b      	adds	r3, r7, r1
 800ddca:	3201      	adds	r2, #1
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	2317      	movs	r3, #23
 800ddd0:	18fb      	adds	r3, r7, r3
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	2b05      	cmp	r3, #5
 800ddd6:	d9f4      	bls.n	800ddc2 <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	e052      	b.n	800de82 <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800dddc:	4b2c      	ldr	r3, [pc, #176]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	4a2b      	ldr	r2, [pc, #172]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800dde4:	7852      	ldrb	r2, [r2, #1]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	22af      	movs	r2, #175	@ 0xaf
 800ddea:	4353      	muls	r3, r2
 800ddec:	0018      	movs	r0, r3
 800ddee:	f7f5 fae7 	bl	80033c0 <__aeabi_i2d>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4b29      	ldr	r3, [pc, #164]	@ (800de9c <HIDS_GetMeasurementValues+0x14c>)
 800ddf6:	f7f3 ffdd 	bl	8001db4 <__aeabi_ddiv>
 800ddfa:	0002      	movs	r2, r0
 800ddfc:	000b      	movs	r3, r1
 800ddfe:	0010      	movs	r0, r2
 800de00:	0019      	movs	r1, r3
 800de02:	f7f5 fb77 	bl	80034f4 <__aeabi_d2f>
 800de06:	1c03      	adds	r3, r0, #0
 800de08:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800de0a:	4925      	ldr	r1, [pc, #148]	@ (800dea0 <HIDS_GetMeasurementValues+0x150>)
 800de0c:	6938      	ldr	r0, [r7, #16]
 800de0e:	f7f3 fa05 	bl	800121c <__aeabi_fsub>
 800de12:	1c03      	adds	r3, r0, #0
 800de14:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800de16:	4b1e      	ldr	r3, [pc, #120]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800de18:	78db      	ldrb	r3, [r3, #3]
 800de1a:	021b      	lsls	r3, r3, #8
 800de1c:	4a1c      	ldr	r2, [pc, #112]	@ (800de90 <HIDS_GetMeasurementValues+0x140>)
 800de1e:	7912      	ldrb	r2, [r2, #4]
 800de20:	431a      	orrs	r2, r3
 800de22:	0013      	movs	r3, r2
 800de24:	015b      	lsls	r3, r3, #5
 800de26:	1a9b      	subs	r3, r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	189b      	adds	r3, r3, r2
 800de2c:	0018      	movs	r0, r3
 800de2e:	f7f5 fac7 	bl	80033c0 <__aeabi_i2d>
 800de32:	2200      	movs	r2, #0
 800de34:	4b19      	ldr	r3, [pc, #100]	@ (800de9c <HIDS_GetMeasurementValues+0x14c>)
 800de36:	f7f3 ffbd 	bl	8001db4 <__aeabi_ddiv>
 800de3a:	0002      	movs	r2, r0
 800de3c:	000b      	movs	r3, r1
 800de3e:	0010      	movs	r0, r2
 800de40:	0019      	movs	r1, r3
 800de42:	f7f5 fb57 	bl	80034f4 <__aeabi_d2f>
 800de46:	1c03      	adds	r3, r0, #0
 800de48:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800de4a:	4916      	ldr	r1, [pc, #88]	@ (800dea4 <HIDS_GetMeasurementValues+0x154>)
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7f3 f9e5 	bl	800121c <__aeabi_fsub>
 800de52:	1c03      	adds	r3, r0, #0
 800de54:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	0011      	movs	r1, r2
 800de68:	0018      	movs	r0, r3
 800de6a:	f7fd fc17 	bl	800b69c <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800de6e:	68fa      	ldr	r2, [r7, #12]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	1c11      	adds	r1, r2, #0
 800de74:	1c18      	adds	r0, r3, #0
 800de76:	f7f5 fd2d 	bl	80038d4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800de7a:	4b04      	ldr	r3, [pc, #16]	@ (800de8c <HIDS_GetMeasurementValues+0x13c>)
 800de7c:	2201      	movs	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800de80:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800de82:	0018      	movs	r0, r3
 800de84:	46bd      	mov	sp, r7
 800de86:	b006      	add	sp, #24
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	46c0      	nop			@ (mov r8, r8)
 800de8c:	200024ee 	.word	0x200024ee
 800de90:	200024e8 	.word	0x200024e8
 800de94:	080240c8 	.word	0x080240c8
 800de98:	08024060 	.word	0x08024060
 800de9c:	40efffe0 	.word	0x40efffe0
 800dea0:	42340000 	.word	0x42340000
 800dea4:	40c00000 	.word	0x40c00000

0800dea8 <ResetHIDSresults>:
void ResetHIDSresults() {
 800dea8:	b580      	push	{r7, lr}
 800deaa:	af00      	add	r7, sp, #0
  humid = 0.0;
 800deac:	4b04      	ldr	r3, [pc, #16]	@ (800dec0 <ResetHIDSresults+0x18>)
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800deb2:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <ResetHIDSresults+0x1c>)
 800deb4:	2200      	movs	r2, #0
 800deb6:	601a      	str	r2, [r3, #0]
}
 800deb8:	46c0      	nop			@ (mov r8, r8)
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	46c0      	nop			@ (mov r8, r8)
 800dec0:	200024d0 	.word	0x200024d0
 800dec4:	200024d4 	.word	0x200024d4

0800dec8 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800dec8:	b5b0      	push	{r4, r5, r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800dece:	4b3b      	ldr	r3, [pc, #236]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b06      	cmp	r3, #6
 800ded4:	d865      	bhi.n	800dfa2 <HIDS_Upkeep+0xda>
 800ded6:	009a      	lsls	r2, r3, #2
 800ded8:	4b39      	ldr	r3, [pc, #228]	@ (800dfc0 <HIDS_Upkeep+0xf8>)
 800deda:	18d3      	adds	r3, r2, r3
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800dee0:	4a38      	ldr	r2, [pc, #224]	@ (800dfc4 <HIDS_Upkeep+0xfc>)
 800dee2:	4b39      	ldr	r3, [pc, #228]	@ (800dfc8 <HIDS_Upkeep+0x100>)
 800dee4:	0019      	movs	r1, r3
 800dee6:	2003      	movs	r0, #3
 800dee8:	f7ff fcbe 	bl	800d868 <CreateLine>
      break;
 800deec:	e060      	b.n	800dfb0 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800deee:	f7ff ffdb 	bl	800dea8 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800def2:	4b32      	ldr	r3, [pc, #200]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800def4:	2201      	movs	r2, #1
 800def6:	701a      	strb	r2, [r3, #0]
      break;
 800def8:	e05a      	b.n	800dfb0 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800defa:	f7fe fda9 	bl	800ca50 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800defe:	f7ff fe2f 	bl	800db60 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800df02:	4b2e      	ldr	r3, [pc, #184]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800df04:	2202      	movs	r2, #2
 800df06:	701a      	strb	r2, [r3, #0]
      break;
 800df08:	e052      	b.n	800dfb0 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800df0a:	4a30      	ldr	r2, [pc, #192]	@ (800dfcc <HIDS_Upkeep+0x104>)
 800df0c:	4b30      	ldr	r3, [pc, #192]	@ (800dfd0 <HIDS_Upkeep+0x108>)
 800df0e:	0011      	movs	r1, r2
 800df10:	0018      	movs	r0, r3
 800df12:	f7ff ff1d 	bl	800dd50 <HIDS_GetMeasurementValues>
 800df16:	1e03      	subs	r3, r0, #0
 800df18:	d047      	beq.n	800dfaa <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800df1a:	4b28      	ldr	r3, [pc, #160]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800df1c:	2203      	movs	r2, #3
 800df1e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800df20:	e043      	b.n	800dfaa <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800df22:	4b2b      	ldr	r3, [pc, #172]	@ (800dfd0 <HIDS_Upkeep+0x108>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	1c18      	adds	r0, r3, #0
 800df28:	f7f5 fa9c 	bl	8003464 <__aeabi_f2d>
 800df2c:	0004      	movs	r4, r0
 800df2e:	000d      	movs	r5, r1
 800df30:	4b26      	ldr	r3, [pc, #152]	@ (800dfcc <HIDS_Upkeep+0x104>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1c18      	adds	r0, r3, #0
 800df36:	f7f5 fa95 	bl	8003464 <__aeabi_f2d>
 800df3a:	0002      	movs	r2, r0
 800df3c:	000b      	movs	r3, r1
 800df3e:	4825      	ldr	r0, [pc, #148]	@ (800dfd4 <HIDS_Upkeep+0x10c>)
 800df40:	4921      	ldr	r1, [pc, #132]	@ (800dfc8 <HIDS_Upkeep+0x100>)
 800df42:	9202      	str	r2, [sp, #8]
 800df44:	9303      	str	r3, [sp, #12]
 800df46:	9400      	str	r4, [sp, #0]
 800df48:	9501      	str	r5, [sp, #4]
 800df4a:	0002      	movs	r2, r0
 800df4c:	2003      	movs	r0, #3
 800df4e:	f7ff fc8b 	bl	800d868 <CreateLine>
      setHIDS(temp, humid);
 800df52:	4b1e      	ldr	r3, [pc, #120]	@ (800dfcc <HIDS_Upkeep+0x104>)
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	4b1e      	ldr	r3, [pc, #120]	@ (800dfd0 <HIDS_Upkeep+0x108>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	1c19      	adds	r1, r3, #0
 800df5c:	1c10      	adds	r0, r2, #0
 800df5e:	f7f5 fccd 	bl	80038fc <setHIDS>
      ResetMeasurementIndicator();
 800df62:	f7fe fd8d 	bl	800ca80 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + powerCheck()==USB_PLUGGED_IN?10000:1000;  // about every ten seconds when power is plugged
 800df66:	f000 f8cb 	bl	800e100 <HAL_GetTick>
 800df6a:	0004      	movs	r4, r0
 800df6c:	f7fe fe16 	bl	800cb9c <powerCheck>
 800df70:	0003      	movs	r3, r0
 800df72:	18e3      	adds	r3, r4, r3
 800df74:	2b01      	cmp	r3, #1
 800df76:	d101      	bne.n	800df7c <HIDS_Upkeep+0xb4>
 800df78:	4a17      	ldr	r2, [pc, #92]	@ (800dfd8 <HIDS_Upkeep+0x110>)
 800df7a:	e001      	b.n	800df80 <HIDS_Upkeep+0xb8>
 800df7c:	23fa      	movs	r3, #250	@ 0xfa
 800df7e:	009a      	lsls	r2, r3, #2
 800df80:	4b16      	ldr	r3, [pc, #88]	@ (800dfdc <HIDS_Upkeep+0x114>)
 800df82:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800df84:	4b0d      	ldr	r3, [pc, #52]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800df86:	2206      	movs	r2, #6
 800df88:	701a      	strb	r2, [r3, #0]
      break;
 800df8a:	e011      	b.n	800dfb0 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800df8c:	4b13      	ldr	r3, [pc, #76]	@ (800dfdc <HIDS_Upkeep+0x114>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	0018      	movs	r0, r3
 800df92:	f7ff fc13 	bl	800d7bc <TimestampIsReached>
 800df96:	1e03      	subs	r3, r0, #0
 800df98:	d009      	beq.n	800dfae <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800df9a:	4b08      	ldr	r3, [pc, #32]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800df9c:	2200      	movs	r2, #0
 800df9e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800dfa0:	e005      	b.n	800dfae <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800dfa2:	4b06      	ldr	r3, [pc, #24]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	701a      	strb	r2, [r3, #0]
      break;
 800dfa8:	e002      	b.n	800dfb0 <HIDS_Upkeep+0xe8>
      break;
 800dfaa:	46c0      	nop			@ (mov r8, r8)
 800dfac:	e000      	b.n	800dfb0 <HIDS_Upkeep+0xe8>
      break;
 800dfae:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800dfb0:	4b02      	ldr	r3, [pc, #8]	@ (800dfbc <HIDS_Upkeep+0xf4>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
}
 800dfb4:	0018      	movs	r0, r3
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bdb0      	pop	{r4, r5, r7, pc}
 800dfba:	46c0      	nop			@ (mov r8, r8)
 800dfbc:	200024f4 	.word	0x200024f4
 800dfc0:	08024608 	.word	0x08024608
 800dfc4:	080240fc 	.word	0x080240fc
 800dfc8:	08024130 	.word	0x08024130
 800dfcc:	200024d4 	.word	0x200024d4
 800dfd0:	200024d0 	.word	0x200024d0
 800dfd4:	08024134 	.word	0x08024134
 800dfd8:	00002710 	.word	0x00002710
 800dfdc:	200024f0 	.word	0x200024f0

0800dfe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800dfe0:	480d      	ldr	r0, [pc, #52]	@ (800e018 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800dfe2:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800dfe4:	f7ff f840 	bl	800d068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dfe8:	480c      	ldr	r0, [pc, #48]	@ (800e01c <LoopForever+0x6>)
  ldr r1, =_edata
 800dfea:	490d      	ldr	r1, [pc, #52]	@ (800e020 <LoopForever+0xa>)
  ldr r2, =_sidata
 800dfec:	4a0d      	ldr	r2, [pc, #52]	@ (800e024 <LoopForever+0xe>)
  movs r3, #0
 800dfee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dff0:	e002      	b.n	800dff8 <LoopCopyDataInit>

0800dff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dff6:	3304      	adds	r3, #4

0800dff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dffc:	d3f9      	bcc.n	800dff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dffe:	4a0a      	ldr	r2, [pc, #40]	@ (800e028 <LoopForever+0x12>)
  ldr r4, =_ebss
 800e000:	4c0a      	ldr	r4, [pc, #40]	@ (800e02c <LoopForever+0x16>)
  movs r3, #0
 800e002:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e004:	e001      	b.n	800e00a <LoopFillZerobss>

0800e006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e008:	3204      	adds	r2, #4

0800e00a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e00a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e00c:	d3fb      	bcc.n	800e006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e00e:	f011 fb4d 	bl	801f6ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e012:	f7f9 ff01 	bl	8007e18 <main>

0800e016 <LoopForever>:

LoopForever:
    b LoopForever
 800e016:	e7fe      	b.n	800e016 <LoopForever>
   ldr   r0, =_estack
 800e018:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800e01c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e020:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800e024:	08024fa8 	.word	0x08024fa8
  ldr r2, =_sbss
 800e028:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800e02c:	200038fc 	.word	0x200038fc

0800e030 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e030:	e7fe      	b.n	800e030 <ADC1_COMP_IRQHandler>
	...

0800e034 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800e03a:	1dfb      	adds	r3, r7, #7
 800e03c:	2200      	movs	r2, #0
 800e03e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800e040:	4b0b      	ldr	r3, [pc, #44]	@ (800e070 <HAL_Init+0x3c>)
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	4b0a      	ldr	r3, [pc, #40]	@ (800e070 <HAL_Init+0x3c>)
 800e046:	2140      	movs	r1, #64	@ 0x40
 800e048:	430a      	orrs	r2, r1
 800e04a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e04c:	2003      	movs	r0, #3
 800e04e:	f000 f811 	bl	800e074 <HAL_InitTick>
 800e052:	1e03      	subs	r3, r0, #0
 800e054:	d003      	beq.n	800e05e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800e056:	1dfb      	adds	r3, r7, #7
 800e058:	2201      	movs	r2, #1
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	e001      	b.n	800e062 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800e05e:	f7fe feb7 	bl	800cdd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800e062:	1dfb      	adds	r3, r7, #7
 800e064:	781b      	ldrb	r3, [r3, #0]
}
 800e066:	0018      	movs	r0, r3
 800e068:	46bd      	mov	sp, r7
 800e06a:	b002      	add	sp, #8
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	46c0      	nop			@ (mov r8, r8)
 800e070:	40022000 	.word	0x40022000

0800e074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e07c:	4b14      	ldr	r3, [pc, #80]	@ (800e0d0 <HAL_InitTick+0x5c>)
 800e07e:	681c      	ldr	r4, [r3, #0]
 800e080:	4b14      	ldr	r3, [pc, #80]	@ (800e0d4 <HAL_InitTick+0x60>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	0019      	movs	r1, r3
 800e086:	23fa      	movs	r3, #250	@ 0xfa
 800e088:	0098      	lsls	r0, r3, #2
 800e08a:	f7f2 f88b 	bl	80001a4 <__udivsi3>
 800e08e:	0003      	movs	r3, r0
 800e090:	0019      	movs	r1, r3
 800e092:	0020      	movs	r0, r4
 800e094:	f7f2 f886 	bl	80001a4 <__udivsi3>
 800e098:	0003      	movs	r3, r0
 800e09a:	0018      	movs	r0, r3
 800e09c:	f000 fce7 	bl	800ea6e <HAL_SYSTICK_Config>
 800e0a0:	1e03      	subs	r3, r0, #0
 800e0a2:	d001      	beq.n	800e0a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e00f      	b.n	800e0c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d80b      	bhi.n	800e0c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e0ae:	6879      	ldr	r1, [r7, #4]
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	425b      	negs	r3, r3
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	0018      	movs	r0, r3
 800e0b8:	f000 fcb4 	bl	800ea24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e0bc:	4b06      	ldr	r3, [pc, #24]	@ (800e0d8 <HAL_InitTick+0x64>)
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	e000      	b.n	800e0c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
}
 800e0c8:	0018      	movs	r0, r3
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	b003      	add	sp, #12
 800e0ce:	bd90      	pop	{r4, r7, pc}
 800e0d0:	200000c8 	.word	0x200000c8
 800e0d4:	200000dc 	.word	0x200000dc
 800e0d8:	200000d8 	.word	0x200000d8

0800e0dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e0e0:	4b05      	ldr	r3, [pc, #20]	@ (800e0f8 <HAL_IncTick+0x1c>)
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	001a      	movs	r2, r3
 800e0e6:	4b05      	ldr	r3, [pc, #20]	@ (800e0fc <HAL_IncTick+0x20>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	18d2      	adds	r2, r2, r3
 800e0ec:	4b03      	ldr	r3, [pc, #12]	@ (800e0fc <HAL_IncTick+0x20>)
 800e0ee:	601a      	str	r2, [r3, #0]
}
 800e0f0:	46c0      	nop			@ (mov r8, r8)
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	46c0      	nop			@ (mov r8, r8)
 800e0f8:	200000dc 	.word	0x200000dc
 800e0fc:	200024f8 	.word	0x200024f8

0800e100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	af00      	add	r7, sp, #0
  return uwTick;
 800e104:	4b02      	ldr	r3, [pc, #8]	@ (800e110 <HAL_GetTick+0x10>)
 800e106:	681b      	ldr	r3, [r3, #0]
}
 800e108:	0018      	movs	r0, r3
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	46c0      	nop			@ (mov r8, r8)
 800e110:	200024f8 	.word	0x200024f8

0800e114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e11c:	f7ff fff0 	bl	800e100 <HAL_GetTick>
 800e120:	0003      	movs	r3, r0
 800e122:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	d005      	beq.n	800e13a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e12e:	4b0a      	ldr	r3, [pc, #40]	@ (800e158 <HAL_Delay+0x44>)
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	001a      	movs	r2, r3
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	189b      	adds	r3, r3, r2
 800e138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e13a:	46c0      	nop			@ (mov r8, r8)
 800e13c:	f7ff ffe0 	bl	800e100 <HAL_GetTick>
 800e140:	0002      	movs	r2, r0
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d8f7      	bhi.n	800e13c <HAL_Delay+0x28>
  {
  }
}
 800e14c:	46c0      	nop			@ (mov r8, r8)
 800e14e:	46c0      	nop			@ (mov r8, r8)
 800e150:	46bd      	mov	sp, r7
 800e152:	b004      	add	sp, #16
 800e154:	bd80      	pop	{r7, pc}
 800e156:	46c0      	nop			@ (mov r8, r8)
 800e158:	200000dc 	.word	0x200000dc

0800e15c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e160:	4b04      	ldr	r3, [pc, #16]	@ (800e174 <HAL_SuspendTick+0x18>)
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	4b03      	ldr	r3, [pc, #12]	@ (800e174 <HAL_SuspendTick+0x18>)
 800e166:	2102      	movs	r1, #2
 800e168:	438a      	bics	r2, r1
 800e16a:	601a      	str	r2, [r3, #0]
}
 800e16c:	46c0      	nop			@ (mov r8, r8)
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	46c0      	nop			@ (mov r8, r8)
 800e174:	e000e010 	.word	0xe000e010

0800e178 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e17c:	4b04      	ldr	r3, [pc, #16]	@ (800e190 <HAL_ResumeTick+0x18>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	4b03      	ldr	r3, [pc, #12]	@ (800e190 <HAL_ResumeTick+0x18>)
 800e182:	2102      	movs	r1, #2
 800e184:	430a      	orrs	r2, r1
 800e186:	601a      	str	r2, [r3, #0]
}
 800e188:	46c0      	nop			@ (mov r8, r8)
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	46c0      	nop			@ (mov r8, r8)
 800e190:	e000e010 	.word	0xe000e010

0800e194 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e198:	4b02      	ldr	r3, [pc, #8]	@ (800e1a4 <HAL_GetUIDw0+0x10>)
 800e19a:	681b      	ldr	r3, [r3, #0]
}
 800e19c:	0018      	movs	r0, r3
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	46c0      	nop			@ (mov r8, r8)
 800e1a4:	1ff80050 	.word	0x1ff80050

0800e1a8 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e1ac:	4b02      	ldr	r3, [pc, #8]	@ (800e1b8 <HAL_GetUIDw1+0x10>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
}
 800e1b0:	0018      	movs	r0, r3
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	46c0      	nop			@ (mov r8, r8)
 800e1b8:	1ff80054 	.word	0x1ff80054

0800e1bc <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e1c0:	4b02      	ldr	r3, [pc, #8]	@ (800e1cc <HAL_GetUIDw2+0x10>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
}
 800e1c4:	0018      	movs	r0, r3
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	46c0      	nop			@ (mov r8, r8)
 800e1cc:	1ff80064 	.word	0x1ff80064

0800e1d0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d101      	bne.n	800e1e2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	e159      	b.n	800e496 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d10a      	bne.n	800e200 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2250      	movs	r2, #80	@ 0x50
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	f7f8 fe8a 	bl	8006f14 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e204:	2210      	movs	r2, #16
 800e206:	4013      	ands	r3, r2
 800e208:	2b10      	cmp	r3, #16
 800e20a:	d005      	beq.n	800e218 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	689b      	ldr	r3, [r3, #8]
 800e212:	2204      	movs	r2, #4
 800e214:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e216:	d00b      	beq.n	800e230 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e21c:	2210      	movs	r2, #16
 800e21e:	431a      	orrs	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2250      	movs	r2, #80	@ 0x50
 800e228:	2100      	movs	r1, #0
 800e22a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e132      	b.n	800e496 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e234:	4a9a      	ldr	r2, [pc, #616]	@ (800e4a0 <HAL_ADC_Init+0x2d0>)
 800e236:	4013      	ands	r3, r2
 800e238:	2202      	movs	r2, #2
 800e23a:	431a      	orrs	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	2203      	movs	r2, #3
 800e248:	4013      	ands	r3, r2
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d108      	bne.n	800e260 <HAL_ADC_Init+0x90>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2201      	movs	r2, #1
 800e256:	4013      	ands	r3, r2
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d101      	bne.n	800e260 <HAL_ADC_Init+0x90>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <HAL_ADC_Init+0x92>
 800e260:	2300      	movs	r3, #0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d149      	bne.n	800e2fa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	23c0      	movs	r3, #192	@ 0xc0
 800e26c:	061b      	lsls	r3, r3, #24
 800e26e:	429a      	cmp	r2, r3
 800e270:	d00b      	beq.n	800e28a <HAL_ADC_Init+0xba>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685a      	ldr	r2, [r3, #4]
 800e276:	2380      	movs	r3, #128	@ 0x80
 800e278:	05db      	lsls	r3, r3, #23
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d005      	beq.n	800e28a <HAL_ADC_Init+0xba>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	2380      	movs	r3, #128	@ 0x80
 800e284:	061b      	lsls	r3, r3, #24
 800e286:	429a      	cmp	r2, r3
 800e288:	d111      	bne.n	800e2ae <HAL_ADC_Init+0xde>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	691a      	ldr	r2, [r3, #16]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	0092      	lsls	r2, r2, #2
 800e296:	0892      	lsrs	r2, r2, #2
 800e298:	611a      	str	r2, [r3, #16]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6919      	ldr	r1, [r3, #16]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685a      	ldr	r2, [r3, #4]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	430a      	orrs	r2, r1
 800e2aa:	611a      	str	r2, [r3, #16]
 800e2ac:	e014      	b.n	800e2d8 <HAL_ADC_Init+0x108>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	691a      	ldr	r2, [r3, #16]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	0092      	lsls	r2, r2, #2
 800e2ba:	0892      	lsrs	r2, r2, #2
 800e2bc:	611a      	str	r2, [r3, #16]
 800e2be:	4b79      	ldr	r3, [pc, #484]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	4b78      	ldr	r3, [pc, #480]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e2c4:	4978      	ldr	r1, [pc, #480]	@ (800e4a8 <HAL_ADC_Init+0x2d8>)
 800e2c6:	400a      	ands	r2, r1
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	4b76      	ldr	r3, [pc, #472]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e2cc:	6819      	ldr	r1, [r3, #0]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	4b74      	ldr	r3, [pc, #464]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e2d4:	430a      	orrs	r2, r1
 800e2d6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68da      	ldr	r2, [r3, #12]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2118      	movs	r1, #24
 800e2e4:	438a      	bics	r2, r1
 800e2e6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68d9      	ldr	r1, [r3, #12]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	689a      	ldr	r2, [r3, #8]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	430a      	orrs	r2, r1
 800e2f8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e2fa:	4b6a      	ldr	r3, [pc, #424]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	4b69      	ldr	r3, [pc, #420]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e300:	496a      	ldr	r1, [pc, #424]	@ (800e4ac <HAL_ADC_Init+0x2dc>)
 800e302:	400a      	ands	r2, r1
 800e304:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e306:	4b67      	ldr	r3, [pc, #412]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e308:	6819      	ldr	r1, [r3, #0]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e30e:	065a      	lsls	r2, r3, #25
 800e310:	4b64      	ldr	r3, [pc, #400]	@ (800e4a4 <HAL_ADC_Init+0x2d4>)
 800e312:	430a      	orrs	r2, r1
 800e314:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	689a      	ldr	r2, [r3, #8]
 800e31c:	2380      	movs	r3, #128	@ 0x80
 800e31e:	055b      	lsls	r3, r3, #21
 800e320:	4013      	ands	r3, r2
 800e322:	d108      	bne.n	800e336 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	689a      	ldr	r2, [r3, #8]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2180      	movs	r1, #128	@ 0x80
 800e330:	0549      	lsls	r1, r1, #21
 800e332:	430a      	orrs	r2, r1
 800e334:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68da      	ldr	r2, [r3, #12]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	495b      	ldr	r1, [pc, #364]	@ (800e4b0 <HAL_ADC_Init+0x2e0>)
 800e342:	400a      	ands	r2, r1
 800e344:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	68d9      	ldr	r1, [r3, #12]
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d101      	bne.n	800e35c <HAL_ADC_Init+0x18c>
 800e358:	2304      	movs	r3, #4
 800e35a:	e000      	b.n	800e35e <HAL_ADC_Init+0x18e>
 800e35c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e35e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2020      	movs	r0, #32
 800e364:	5c1b      	ldrb	r3, [r3, r0]
 800e366:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e368:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	202c      	movs	r0, #44	@ 0x2c
 800e36e:	5c1b      	ldrb	r3, [r3, r0]
 800e370:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e372:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e378:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e380:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	69db      	ldr	r3, [r3, #28]
 800e386:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e388:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	430a      	orrs	r2, r1
 800e390:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e396:	23c2      	movs	r3, #194	@ 0xc2
 800e398:	33ff      	adds	r3, #255	@ 0xff
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d00b      	beq.n	800e3b6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	68d9      	ldr	r1, [r3, #12]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e3ac:	431a      	orrs	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2221      	movs	r2, #33	@ 0x21
 800e3ba:	5c9b      	ldrb	r3, [r3, r2]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d11a      	bne.n	800e3f6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2220      	movs	r2, #32
 800e3c4:	5c9b      	ldrb	r3, [r3, r2]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d109      	bne.n	800e3de <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	68da      	ldr	r2, [r3, #12]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2180      	movs	r1, #128	@ 0x80
 800e3d6:	0249      	lsls	r1, r1, #9
 800e3d8:	430a      	orrs	r2, r1
 800e3da:	60da      	str	r2, [r3, #12]
 800e3dc:	e00b      	b.n	800e3f6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e3e2:	2220      	movs	r2, #32
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	431a      	orrs	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d11f      	bne.n	800e43e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	691a      	ldr	r2, [r3, #16]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	492a      	ldr	r1, [pc, #168]	@ (800e4b4 <HAL_ADC_Init+0x2e4>)
 800e40a:	400a      	ands	r2, r1
 800e40c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6919      	ldr	r1, [r3, #16]
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e41c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e422:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	430a      	orrs	r2, r1
 800e42a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	691a      	ldr	r2, [r3, #16]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	2101      	movs	r1, #1
 800e438:	430a      	orrs	r2, r1
 800e43a:	611a      	str	r2, [r3, #16]
 800e43c:	e00e      	b.n	800e45c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	2201      	movs	r2, #1
 800e446:	4013      	ands	r3, r2
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d107      	bne.n	800e45c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	691a      	ldr	r2, [r3, #16]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2101      	movs	r1, #1
 800e458:	438a      	bics	r2, r1
 800e45a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	695a      	ldr	r2, [r3, #20]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2107      	movs	r1, #7
 800e468:	438a      	bics	r2, r1
 800e46a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6959      	ldr	r1, [r3, #20]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	430a      	orrs	r2, r1
 800e47c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e488:	2203      	movs	r2, #3
 800e48a:	4393      	bics	r3, r2
 800e48c:	2201      	movs	r2, #1
 800e48e:	431a      	orrs	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	0018      	movs	r0, r3
 800e498:	46bd      	mov	sp, r7
 800e49a:	b002      	add	sp, #8
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	46c0      	nop			@ (mov r8, r8)
 800e4a0:	fffffefd 	.word	0xfffffefd
 800e4a4:	40012708 	.word	0x40012708
 800e4a8:	ffc3ffff 	.word	0xffc3ffff
 800e4ac:	fdffffff 	.word	0xfdffffff
 800e4b0:	fffe0219 	.word	0xfffe0219
 800e4b4:	fffffc03 	.word	0xfffffc03

0800e4b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e4b8:	b590      	push	{r4, r7, lr}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e4c0:	230f      	movs	r3, #15
 800e4c2:	18fb      	adds	r3, r7, r3
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	2204      	movs	r2, #4
 800e4d0:	4013      	ands	r3, r2
 800e4d2:	d138      	bne.n	800e546 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2250      	movs	r2, #80	@ 0x50
 800e4d8:	5c9b      	ldrb	r3, [r3, r2]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d101      	bne.n	800e4e2 <HAL_ADC_Start+0x2a>
 800e4de:	2302      	movs	r3, #2
 800e4e0:	e038      	b.n	800e554 <HAL_ADC_Start+0x9c>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2250      	movs	r2, #80	@ 0x50
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d007      	beq.n	800e502 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e4f2:	230f      	movs	r3, #15
 800e4f4:	18fc      	adds	r4, r7, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f000 f95f 	bl	800e7bc <ADC_Enable>
 800e4fe:	0003      	movs	r3, r0
 800e500:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e502:	230f      	movs	r3, #15
 800e504:	18fb      	adds	r3, r7, r3
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d120      	bne.n	800e54e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e510:	4a12      	ldr	r2, [pc, #72]	@ (800e55c <HAL_ADC_Start+0xa4>)
 800e512:	4013      	ands	r3, r2
 800e514:	2280      	movs	r2, #128	@ 0x80
 800e516:	0052      	lsls	r2, r2, #1
 800e518:	431a      	orrs	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2250      	movs	r2, #80	@ 0x50
 800e528:	2100      	movs	r1, #0
 800e52a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	221c      	movs	r2, #28
 800e532:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2104      	movs	r1, #4
 800e540:	430a      	orrs	r2, r1
 800e542:	609a      	str	r2, [r3, #8]
 800e544:	e003      	b.n	800e54e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e546:	230f      	movs	r3, #15
 800e548:	18fb      	adds	r3, r7, r3
 800e54a:	2202      	movs	r2, #2
 800e54c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e54e:	230f      	movs	r3, #15
 800e550:	18fb      	adds	r3, r7, r3
 800e552:	781b      	ldrb	r3, [r3, #0]
}
 800e554:	0018      	movs	r0, r3
 800e556:	46bd      	mov	sp, r7
 800e558:	b005      	add	sp, #20
 800e55a:	bd90      	pop	{r4, r7, pc}
 800e55c:	fffff0fe 	.word	0xfffff0fe

0800e560 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b084      	sub	sp, #16
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e56e:	2300      	movs	r3, #0
 800e570:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	695b      	ldr	r3, [r3, #20]
 800e576:	2b08      	cmp	r3, #8
 800e578:	d102      	bne.n	800e580 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e57a:	2308      	movs	r3, #8
 800e57c:	60fb      	str	r3, [r7, #12]
 800e57e:	e014      	b.n	800e5aa <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	2201      	movs	r2, #1
 800e588:	4013      	ands	r3, r2
 800e58a:	2b01      	cmp	r3, #1
 800e58c:	d10b      	bne.n	800e5a6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e592:	2220      	movs	r2, #32
 800e594:	431a      	orrs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2250      	movs	r2, #80	@ 0x50
 800e59e:	2100      	movs	r1, #0
 800e5a0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e072      	b.n	800e68c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e5a6:	230c      	movs	r3, #12
 800e5a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e5aa:	f7ff fda9 	bl	800e100 <HAL_GetTick>
 800e5ae:	0003      	movs	r3, r0
 800e5b0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e5b2:	e01f      	b.n	800e5f4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	d01c      	beq.n	800e5f4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <HAL_ADC_PollForConversion+0x70>
 800e5c0:	f7ff fd9e 	bl	800e100 <HAL_GetTick>
 800e5c4:	0002      	movs	r2, r0
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d211      	bcs.n	800e5f4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4013      	ands	r3, r2
 800e5da:	d10b      	bne.n	800e5f4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5e0:	2204      	movs	r2, #4
 800e5e2:	431a      	orrs	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2250      	movs	r2, #80	@ 0x50
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	e04b      	b.n	800e68c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	d0d9      	beq.n	800e5b4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e604:	2280      	movs	r2, #128	@ 0x80
 800e606:	0092      	lsls	r2, r2, #2
 800e608:	431a      	orrs	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68da      	ldr	r2, [r3, #12]
 800e614:	23c0      	movs	r3, #192	@ 0xc0
 800e616:	011b      	lsls	r3, r3, #4
 800e618:	4013      	ands	r3, r2
 800e61a:	d12e      	bne.n	800e67a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2220      	movs	r2, #32
 800e620:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e622:	2b00      	cmp	r3, #0
 800e624:	d129      	bne.n	800e67a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2208      	movs	r2, #8
 800e62e:	4013      	ands	r3, r2
 800e630:	2b08      	cmp	r3, #8
 800e632:	d122      	bne.n	800e67a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	2204      	movs	r2, #4
 800e63c:	4013      	ands	r3, r2
 800e63e:	d110      	bne.n	800e662 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	210c      	movs	r1, #12
 800e64c:	438a      	bics	r2, r1
 800e64e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e654:	4a0f      	ldr	r2, [pc, #60]	@ (800e694 <HAL_ADC_PollForConversion+0x134>)
 800e656:	4013      	ands	r3, r2
 800e658:	2201      	movs	r2, #1
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	655a      	str	r2, [r3, #84]	@ 0x54
 800e660:	e00b      	b.n	800e67a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e666:	2220      	movs	r2, #32
 800e668:	431a      	orrs	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e672:	2201      	movs	r2, #1
 800e674:	431a      	orrs	r2, r3
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	699b      	ldr	r3, [r3, #24]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d103      	bne.n	800e68a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	220c      	movs	r2, #12
 800e688:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	0018      	movs	r0, r3
 800e68e:	46bd      	mov	sp, r7
 800e690:	b004      	add	sp, #16
 800e692:	bd80      	pop	{r7, pc}
 800e694:	fffffefe 	.word	0xfffffefe

0800e698 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e6a6:	0018      	movs	r0, r3
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	b002      	add	sp, #8
 800e6ac:	bd80      	pop	{r7, pc}
	...

0800e6b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2250      	movs	r2, #80	@ 0x50
 800e6be:	5c9b      	ldrb	r3, [r3, r2]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d101      	bne.n	800e6c8 <HAL_ADC_ConfigChannel+0x18>
 800e6c4:	2302      	movs	r3, #2
 800e6c6:	e06c      	b.n	800e7a2 <HAL_ADC_ConfigChannel+0xf2>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2250      	movs	r2, #80	@ 0x50
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	4013      	ands	r3, r2
 800e6da:	d00b      	beq.n	800e6f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	431a      	orrs	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2250      	movs	r2, #80	@ 0x50
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e056      	b.n	800e7a2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	4a2c      	ldr	r2, [pc, #176]	@ (800e7ac <HAL_ADC_ConfigChannel+0xfc>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d028      	beq.n	800e750 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	035b      	lsls	r3, r3, #13
 800e70a:	0b5a      	lsrs	r2, r3, #13
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	430a      	orrs	r2, r1
 800e712:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	2380      	movs	r3, #128	@ 0x80
 800e71a:	02db      	lsls	r3, r3, #11
 800e71c:	4013      	ands	r3, r2
 800e71e:	d009      	beq.n	800e734 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e720:	4b23      	ldr	r3, [pc, #140]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	4b22      	ldr	r3, [pc, #136]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e726:	2180      	movs	r1, #128	@ 0x80
 800e728:	0409      	lsls	r1, r1, #16
 800e72a:	430a      	orrs	r2, r1
 800e72c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e72e:	200a      	movs	r0, #10
 800e730:	f000 f8ac 	bl	800e88c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	681a      	ldr	r2, [r3, #0]
 800e738:	2380      	movs	r3, #128	@ 0x80
 800e73a:	029b      	lsls	r3, r3, #10
 800e73c:	4013      	ands	r3, r2
 800e73e:	d02b      	beq.n	800e798 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e740:	4b1b      	ldr	r3, [pc, #108]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	4b1a      	ldr	r3, [pc, #104]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e746:	2180      	movs	r1, #128	@ 0x80
 800e748:	03c9      	lsls	r1, r1, #15
 800e74a:	430a      	orrs	r2, r1
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	e023      	b.n	800e798 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	035b      	lsls	r3, r3, #13
 800e75c:	0b5b      	lsrs	r3, r3, #13
 800e75e:	43d9      	mvns	r1, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	400a      	ands	r2, r1
 800e766:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	2380      	movs	r3, #128	@ 0x80
 800e76e:	02db      	lsls	r3, r3, #11
 800e770:	4013      	ands	r3, r2
 800e772:	d005      	beq.n	800e780 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e774:	4b0e      	ldr	r3, [pc, #56]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e77a:	490e      	ldr	r1, [pc, #56]	@ (800e7b4 <HAL_ADC_ConfigChannel+0x104>)
 800e77c:	400a      	ands	r2, r1
 800e77e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	2380      	movs	r3, #128	@ 0x80
 800e786:	029b      	lsls	r3, r3, #10
 800e788:	4013      	ands	r3, r2
 800e78a:	d005      	beq.n	800e798 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e78c:	4b08      	ldr	r3, [pc, #32]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	4b07      	ldr	r3, [pc, #28]	@ (800e7b0 <HAL_ADC_ConfigChannel+0x100>)
 800e792:	4909      	ldr	r1, [pc, #36]	@ (800e7b8 <HAL_ADC_ConfigChannel+0x108>)
 800e794:	400a      	ands	r2, r1
 800e796:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2250      	movs	r2, #80	@ 0x50
 800e79c:	2100      	movs	r1, #0
 800e79e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	0018      	movs	r0, r3
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	b002      	add	sp, #8
 800e7a8:	bd80      	pop	{r7, pc}
 800e7aa:	46c0      	nop			@ (mov r8, r8)
 800e7ac:	00001001 	.word	0x00001001
 800e7b0:	40012708 	.word	0x40012708
 800e7b4:	ff7fffff 	.word	0xff7fffff
 800e7b8:	ffbfffff 	.word	0xffbfffff

0800e7bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	2203      	movs	r2, #3
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d108      	bne.n	800e7e8 <ADC_Enable+0x2c>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	4013      	ands	r3, r2
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d101      	bne.n	800e7e8 <ADC_Enable+0x2c>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e000      	b.n	800e7ea <ADC_Enable+0x2e>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d146      	bne.n	800e87c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	4a24      	ldr	r2, [pc, #144]	@ (800e888 <ADC_Enable+0xcc>)
 800e7f6:	4013      	ands	r3, r2
 800e7f8:	d00d      	beq.n	800e816 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7fe:	2210      	movs	r2, #16
 800e800:	431a      	orrs	r2, r3
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e80a:	2201      	movs	r2, #1
 800e80c:	431a      	orrs	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800e812:	2301      	movs	r3, #1
 800e814:	e033      	b.n	800e87e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2101      	movs	r1, #1
 800e822:	430a      	orrs	r2, r1
 800e824:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800e826:	2001      	movs	r0, #1
 800e828:	f000 f830 	bl	800e88c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800e82c:	f7ff fc68 	bl	800e100 <HAL_GetTick>
 800e830:	0003      	movs	r3, r0
 800e832:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e834:	e01b      	b.n	800e86e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e836:	f7ff fc63 	bl	800e100 <HAL_GetTick>
 800e83a:	0002      	movs	r2, r0
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	2b0a      	cmp	r3, #10
 800e842:	d914      	bls.n	800e86e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2201      	movs	r2, #1
 800e84c:	4013      	ands	r3, r2
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d00d      	beq.n	800e86e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e856:	2210      	movs	r2, #16
 800e858:	431a      	orrs	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e862:	2201      	movs	r2, #1
 800e864:	431a      	orrs	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800e86a:	2301      	movs	r3, #1
 800e86c:	e007      	b.n	800e87e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2201      	movs	r2, #1
 800e876:	4013      	ands	r3, r2
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d1dc      	bne.n	800e836 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	0018      	movs	r0, r3
 800e880:	46bd      	mov	sp, r7
 800e882:	b004      	add	sp, #16
 800e884:	bd80      	pop	{r7, pc}
 800e886:	46c0      	nop			@ (mov r8, r8)
 800e888:	80000017 	.word	0x80000017

0800e88c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800e894:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c4 <ADC_DelayMicroSecond+0x38>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	490b      	ldr	r1, [pc, #44]	@ (800e8c8 <ADC_DelayMicroSecond+0x3c>)
 800e89a:	0018      	movs	r0, r3
 800e89c:	f7f1 fc82 	bl	80001a4 <__udivsi3>
 800e8a0:	0003      	movs	r3, r0
 800e8a2:	001a      	movs	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4353      	muls	r3, r2
 800e8a8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800e8aa:	e002      	b.n	800e8b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f9      	bne.n	800e8ac <ADC_DelayMicroSecond+0x20>
  }
}
 800e8b8:	46c0      	nop			@ (mov r8, r8)
 800e8ba:	46c0      	nop			@ (mov r8, r8)
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	b004      	add	sp, #16
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	46c0      	nop			@ (mov r8, r8)
 800e8c4:	200000c8 	.word	0x200000c8
 800e8c8:	000f4240 	.word	0x000f4240

0800e8cc <__NVIC_EnableIRQ>:
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	0002      	movs	r2, r0
 800e8d4:	1dfb      	adds	r3, r7, #7
 800e8d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e8d8:	1dfb      	adds	r3, r7, #7
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8de:	d809      	bhi.n	800e8f4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e8e0:	1dfb      	adds	r3, r7, #7
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	001a      	movs	r2, r3
 800e8e6:	231f      	movs	r3, #31
 800e8e8:	401a      	ands	r2, r3
 800e8ea:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <__NVIC_EnableIRQ+0x30>)
 800e8ec:	2101      	movs	r1, #1
 800e8ee:	4091      	lsls	r1, r2
 800e8f0:	000a      	movs	r2, r1
 800e8f2:	601a      	str	r2, [r3, #0]
}
 800e8f4:	46c0      	nop			@ (mov r8, r8)
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	b002      	add	sp, #8
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	e000e100 	.word	0xe000e100

0800e900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e900:	b590      	push	{r4, r7, lr}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	0002      	movs	r2, r0
 800e908:	6039      	str	r1, [r7, #0]
 800e90a:	1dfb      	adds	r3, r7, #7
 800e90c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e90e:	1dfb      	adds	r3, r7, #7
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b7f      	cmp	r3, #127	@ 0x7f
 800e914:	d828      	bhi.n	800e968 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e916:	4a2f      	ldr	r2, [pc, #188]	@ (800e9d4 <__NVIC_SetPriority+0xd4>)
 800e918:	1dfb      	adds	r3, r7, #7
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	b25b      	sxtb	r3, r3
 800e91e:	089b      	lsrs	r3, r3, #2
 800e920:	33c0      	adds	r3, #192	@ 0xc0
 800e922:	009b      	lsls	r3, r3, #2
 800e924:	589b      	ldr	r3, [r3, r2]
 800e926:	1dfa      	adds	r2, r7, #7
 800e928:	7812      	ldrb	r2, [r2, #0]
 800e92a:	0011      	movs	r1, r2
 800e92c:	2203      	movs	r2, #3
 800e92e:	400a      	ands	r2, r1
 800e930:	00d2      	lsls	r2, r2, #3
 800e932:	21ff      	movs	r1, #255	@ 0xff
 800e934:	4091      	lsls	r1, r2
 800e936:	000a      	movs	r2, r1
 800e938:	43d2      	mvns	r2, r2
 800e93a:	401a      	ands	r2, r3
 800e93c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	019b      	lsls	r3, r3, #6
 800e942:	22ff      	movs	r2, #255	@ 0xff
 800e944:	401a      	ands	r2, r3
 800e946:	1dfb      	adds	r3, r7, #7
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	0018      	movs	r0, r3
 800e94c:	2303      	movs	r3, #3
 800e94e:	4003      	ands	r3, r0
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e954:	481f      	ldr	r0, [pc, #124]	@ (800e9d4 <__NVIC_SetPriority+0xd4>)
 800e956:	1dfb      	adds	r3, r7, #7
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	089b      	lsrs	r3, r3, #2
 800e95e:	430a      	orrs	r2, r1
 800e960:	33c0      	adds	r3, #192	@ 0xc0
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e966:	e031      	b.n	800e9cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e968:	4a1b      	ldr	r2, [pc, #108]	@ (800e9d8 <__NVIC_SetPriority+0xd8>)
 800e96a:	1dfb      	adds	r3, r7, #7
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	0019      	movs	r1, r3
 800e970:	230f      	movs	r3, #15
 800e972:	400b      	ands	r3, r1
 800e974:	3b08      	subs	r3, #8
 800e976:	089b      	lsrs	r3, r3, #2
 800e978:	3306      	adds	r3, #6
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	18d3      	adds	r3, r2, r3
 800e97e:	3304      	adds	r3, #4
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	1dfa      	adds	r2, r7, #7
 800e984:	7812      	ldrb	r2, [r2, #0]
 800e986:	0011      	movs	r1, r2
 800e988:	2203      	movs	r2, #3
 800e98a:	400a      	ands	r2, r1
 800e98c:	00d2      	lsls	r2, r2, #3
 800e98e:	21ff      	movs	r1, #255	@ 0xff
 800e990:	4091      	lsls	r1, r2
 800e992:	000a      	movs	r2, r1
 800e994:	43d2      	mvns	r2, r2
 800e996:	401a      	ands	r2, r3
 800e998:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	019b      	lsls	r3, r3, #6
 800e99e:	22ff      	movs	r2, #255	@ 0xff
 800e9a0:	401a      	ands	r2, r3
 800e9a2:	1dfb      	adds	r3, r7, #7
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	0018      	movs	r0, r3
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	4003      	ands	r3, r0
 800e9ac:	00db      	lsls	r3, r3, #3
 800e9ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e9b0:	4809      	ldr	r0, [pc, #36]	@ (800e9d8 <__NVIC_SetPriority+0xd8>)
 800e9b2:	1dfb      	adds	r3, r7, #7
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	001c      	movs	r4, r3
 800e9b8:	230f      	movs	r3, #15
 800e9ba:	4023      	ands	r3, r4
 800e9bc:	3b08      	subs	r3, #8
 800e9be:	089b      	lsrs	r3, r3, #2
 800e9c0:	430a      	orrs	r2, r1
 800e9c2:	3306      	adds	r3, #6
 800e9c4:	009b      	lsls	r3, r3, #2
 800e9c6:	18c3      	adds	r3, r0, r3
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	601a      	str	r2, [r3, #0]
}
 800e9cc:	46c0      	nop			@ (mov r8, r8)
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	b003      	add	sp, #12
 800e9d2:	bd90      	pop	{r4, r7, pc}
 800e9d4:	e000e100 	.word	0xe000e100
 800e9d8:	e000ed00 	.word	0xe000ed00

0800e9dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	1e5a      	subs	r2, r3, #1
 800e9e8:	2380      	movs	r3, #128	@ 0x80
 800e9ea:	045b      	lsls	r3, r3, #17
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d301      	bcc.n	800e9f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e010      	b.n	800ea16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800ea20 <SysTick_Config+0x44>)
 800e9f6:	687a      	ldr	r2, [r7, #4]
 800e9f8:	3a01      	subs	r2, #1
 800e9fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	425b      	negs	r3, r3
 800ea00:	2103      	movs	r1, #3
 800ea02:	0018      	movs	r0, r3
 800ea04:	f7ff ff7c 	bl	800e900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ea08:	4b05      	ldr	r3, [pc, #20]	@ (800ea20 <SysTick_Config+0x44>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ea0e:	4b04      	ldr	r3, [pc, #16]	@ (800ea20 <SysTick_Config+0x44>)
 800ea10:	2207      	movs	r2, #7
 800ea12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	0018      	movs	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	b002      	add	sp, #8
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	46c0      	nop			@ (mov r8, r8)
 800ea20:	e000e010 	.word	0xe000e010

0800ea24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60b9      	str	r1, [r7, #8]
 800ea2c:	607a      	str	r2, [r7, #4]
 800ea2e:	210f      	movs	r1, #15
 800ea30:	187b      	adds	r3, r7, r1
 800ea32:	1c02      	adds	r2, r0, #0
 800ea34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	187b      	adds	r3, r7, r1
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b25b      	sxtb	r3, r3
 800ea3e:	0011      	movs	r1, r2
 800ea40:	0018      	movs	r0, r3
 800ea42:	f7ff ff5d 	bl	800e900 <__NVIC_SetPriority>
}
 800ea46:	46c0      	nop			@ (mov r8, r8)
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	b004      	add	sp, #16
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	0002      	movs	r2, r0
 800ea56:	1dfb      	adds	r3, r7, #7
 800ea58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ea5a:	1dfb      	adds	r3, r7, #7
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	b25b      	sxtb	r3, r3
 800ea60:	0018      	movs	r0, r3
 800ea62:	f7ff ff33 	bl	800e8cc <__NVIC_EnableIRQ>
}
 800ea66:	46c0      	nop			@ (mov r8, r8)
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	b002      	add	sp, #8
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b082      	sub	sp, #8
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	0018      	movs	r0, r3
 800ea7a:	f7ff ffaf 	bl	800e9dc <SysTick_Config>
 800ea7e:	0003      	movs	r3, r0
}
 800ea80:	0018      	movs	r0, r3
 800ea82:	46bd      	mov	sp, r7
 800ea84:	b002      	add	sp, #8
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d101      	bne.n	800ea9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ea96:	2301      	movs	r3, #1
 800ea98:	e061      	b.n	800eb5e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4a32      	ldr	r2, [pc, #200]	@ (800eb68 <HAL_DMA_Init+0xe0>)
 800eaa0:	4694      	mov	ip, r2
 800eaa2:	4463      	add	r3, ip
 800eaa4:	2114      	movs	r1, #20
 800eaa6:	0018      	movs	r0, r3
 800eaa8:	f7f1 fb7c 	bl	80001a4 <__udivsi3>
 800eaac:	0003      	movs	r3, r0
 800eaae:	009a      	lsls	r2, r3, #2
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a2d      	ldr	r2, [pc, #180]	@ (800eb6c <HAL_DMA_Init+0xe4>)
 800eab8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2225      	movs	r2, #37	@ 0x25
 800eabe:	2102      	movs	r1, #2
 800eac0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	4a28      	ldr	r2, [pc, #160]	@ (800eb70 <HAL_DMA_Init+0xe8>)
 800eace:	4013      	ands	r3, r2
 800ead0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800eada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	691b      	ldr	r3, [r3, #16]
 800eae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800eae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	699b      	ldr	r3, [r3, #24]
 800eaec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800eaf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6a1b      	ldr	r3, [r3, #32]
 800eaf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68fa      	ldr	r2, [r7, #12]
 800eb06:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	689a      	ldr	r2, [r3, #8]
 800eb0c:	2380      	movs	r3, #128	@ 0x80
 800eb0e:	01db      	lsls	r3, r3, #7
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d018      	beq.n	800eb46 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800eb14:	4b17      	ldr	r3, [pc, #92]	@ (800eb74 <HAL_DMA_Init+0xec>)
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb1c:	211c      	movs	r1, #28
 800eb1e:	400b      	ands	r3, r1
 800eb20:	210f      	movs	r1, #15
 800eb22:	4099      	lsls	r1, r3
 800eb24:	000b      	movs	r3, r1
 800eb26:	43d9      	mvns	r1, r3
 800eb28:	4b12      	ldr	r3, [pc, #72]	@ (800eb74 <HAL_DMA_Init+0xec>)
 800eb2a:	400a      	ands	r2, r1
 800eb2c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800eb2e:	4b11      	ldr	r3, [pc, #68]	@ (800eb74 <HAL_DMA_Init+0xec>)
 800eb30:	6819      	ldr	r1, [r3, #0]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb3a:	201c      	movs	r0, #28
 800eb3c:	4003      	ands	r3, r0
 800eb3e:	409a      	lsls	r2, r3
 800eb40:	4b0c      	ldr	r3, [pc, #48]	@ (800eb74 <HAL_DMA_Init+0xec>)
 800eb42:	430a      	orrs	r2, r1
 800eb44:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2225      	movs	r2, #37	@ 0x25
 800eb50:	2101      	movs	r1, #1
 800eb52:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2224      	movs	r2, #36	@ 0x24
 800eb58:	2100      	movs	r1, #0
 800eb5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	0018      	movs	r0, r3
 800eb60:	46bd      	mov	sp, r7
 800eb62:	b004      	add	sp, #16
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	46c0      	nop			@ (mov r8, r8)
 800eb68:	bffdfff8 	.word	0xbffdfff8
 800eb6c:	40020000 	.word	0x40020000
 800eb70:	ffff800f 	.word	0xffff800f
 800eb74:	400200a8 	.word	0x400200a8

0800eb78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
 800eb84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb86:	2317      	movs	r3, #23
 800eb88:	18fb      	adds	r3, r7, r3
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2224      	movs	r2, #36	@ 0x24
 800eb92:	5c9b      	ldrb	r3, [r3, r2]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d101      	bne.n	800eb9c <HAL_DMA_Start_IT+0x24>
 800eb98:	2302      	movs	r3, #2
 800eb9a:	e04f      	b.n	800ec3c <HAL_DMA_Start_IT+0xc4>
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2224      	movs	r2, #36	@ 0x24
 800eba0:	2101      	movs	r1, #1
 800eba2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2225      	movs	r2, #37	@ 0x25
 800eba8:	5c9b      	ldrb	r3, [r3, r2]
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d13a      	bne.n	800ec26 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2225      	movs	r2, #37	@ 0x25
 800ebb4:	2102      	movs	r1, #2
 800ebb6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2101      	movs	r1, #1
 800ebca:	438a      	bics	r2, r1
 800ebcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	68b9      	ldr	r1, [r7, #8]
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f000 f976 	bl	800eec6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d008      	beq.n	800ebf4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	210e      	movs	r1, #14
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	e00f      	b.n	800ec14 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2104      	movs	r1, #4
 800ec00:	438a      	bics	r2, r1
 800ec02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	210a      	movs	r1, #10
 800ec10:	430a      	orrs	r2, r1
 800ec12:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2101      	movs	r1, #1
 800ec20:	430a      	orrs	r2, r1
 800ec22:	601a      	str	r2, [r3, #0]
 800ec24:	e007      	b.n	800ec36 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2224      	movs	r2, #36	@ 0x24
 800ec2a:	2100      	movs	r1, #0
 800ec2c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ec2e:	2317      	movs	r3, #23
 800ec30:	18fb      	adds	r3, r7, r3
 800ec32:	2202      	movs	r2, #2
 800ec34:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ec36:	2317      	movs	r3, #23
 800ec38:	18fb      	adds	r3, r7, r3
 800ec3a:	781b      	ldrb	r3, [r3, #0]
}
 800ec3c:	0018      	movs	r0, r3
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	b006      	add	sp, #24
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec4c:	230f      	movs	r3, #15
 800ec4e:	18fb      	adds	r3, r7, r3
 800ec50:	2200      	movs	r2, #0
 800ec52:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2225      	movs	r2, #37	@ 0x25
 800ec58:	5c9b      	ldrb	r3, [r3, r2]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d008      	beq.n	800ec72 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2204      	movs	r2, #4
 800ec64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2224      	movs	r2, #36	@ 0x24
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e024      	b.n	800ecbc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	210e      	movs	r1, #14
 800ec7e:	438a      	bics	r2, r1
 800ec80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	2101      	movs	r1, #1
 800ec8e:	438a      	bics	r2, r1
 800ec90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec96:	221c      	movs	r2, #28
 800ec98:	401a      	ands	r2, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec9e:	2101      	movs	r1, #1
 800eca0:	4091      	lsls	r1, r2
 800eca2:	000a      	movs	r2, r1
 800eca4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2225      	movs	r2, #37	@ 0x25
 800ecaa:	2101      	movs	r1, #1
 800ecac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2224      	movs	r2, #36	@ 0x24
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	5499      	strb	r1, [r3, r2]

    return status;
 800ecb6:	230f      	movs	r3, #15
 800ecb8:	18fb      	adds	r3, r7, r3
 800ecba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecbc:	0018      	movs	r0, r3
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	b004      	add	sp, #16
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eccc:	210f      	movs	r1, #15
 800ecce:	187b      	adds	r3, r7, r1
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2225      	movs	r2, #37	@ 0x25
 800ecd8:	5c9b      	ldrb	r3, [r3, r2]
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	2b02      	cmp	r3, #2
 800ecde:	d006      	beq.n	800ecee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2204      	movs	r2, #4
 800ece4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ece6:	187b      	adds	r3, r7, r1
 800ece8:	2201      	movs	r2, #1
 800ecea:	701a      	strb	r2, [r3, #0]
 800ecec:	e02a      	b.n	800ed44 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	681a      	ldr	r2, [r3, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	210e      	movs	r1, #14
 800ecfa:	438a      	bics	r2, r1
 800ecfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2101      	movs	r1, #1
 800ed0a:	438a      	bics	r2, r1
 800ed0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed12:	221c      	movs	r2, #28
 800ed14:	401a      	ands	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	4091      	lsls	r1, r2
 800ed1e:	000a      	movs	r2, r1
 800ed20:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2225      	movs	r2, #37	@ 0x25
 800ed26:	2101      	movs	r1, #1
 800ed28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2224      	movs	r2, #36	@ 0x24
 800ed2e:	2100      	movs	r1, #0
 800ed30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d004      	beq.n	800ed44 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	0010      	movs	r0, r2
 800ed42:	4798      	blx	r3
    }
  }
  return status;
 800ed44:	230f      	movs	r3, #15
 800ed46:	18fb      	adds	r3, r7, r3
 800ed48:	781b      	ldrb	r3, [r3, #0]
}
 800ed4a:	0018      	movs	r0, r3
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	b004      	add	sp, #16
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed6e:	221c      	movs	r2, #28
 800ed70:	4013      	ands	r3, r2
 800ed72:	2204      	movs	r2, #4
 800ed74:	409a      	lsls	r2, r3
 800ed76:	0013      	movs	r3, r2
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	d026      	beq.n	800edcc <HAL_DMA_IRQHandler+0x7a>
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	2204      	movs	r2, #4
 800ed82:	4013      	ands	r3, r2
 800ed84:	d022      	beq.n	800edcc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2220      	movs	r2, #32
 800ed8e:	4013      	ands	r3, r2
 800ed90:	d107      	bne.n	800eda2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2104      	movs	r1, #4
 800ed9e:	438a      	bics	r2, r1
 800eda0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eda6:	221c      	movs	r2, #28
 800eda8:	401a      	ands	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edae:	2104      	movs	r1, #4
 800edb0:	4091      	lsls	r1, r2
 800edb2:	000a      	movs	r2, r1
 800edb4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d100      	bne.n	800edc0 <HAL_DMA_IRQHandler+0x6e>
 800edbe:	e071      	b.n	800eea4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	0010      	movs	r0, r2
 800edc8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800edca:	e06b      	b.n	800eea4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edd0:	221c      	movs	r2, #28
 800edd2:	4013      	ands	r3, r2
 800edd4:	2202      	movs	r2, #2
 800edd6:	409a      	lsls	r2, r3
 800edd8:	0013      	movs	r3, r2
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	4013      	ands	r3, r2
 800edde:	d02d      	beq.n	800ee3c <HAL_DMA_IRQHandler+0xea>
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2202      	movs	r2, #2
 800ede4:	4013      	ands	r3, r2
 800ede6:	d029      	beq.n	800ee3c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2220      	movs	r2, #32
 800edf0:	4013      	ands	r3, r2
 800edf2:	d10b      	bne.n	800ee0c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	210a      	movs	r1, #10
 800ee00:	438a      	bics	r2, r1
 800ee02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2225      	movs	r2, #37	@ 0x25
 800ee08:	2101      	movs	r1, #1
 800ee0a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee10:	221c      	movs	r2, #28
 800ee12:	401a      	ands	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee18:	2102      	movs	r1, #2
 800ee1a:	4091      	lsls	r1, r2
 800ee1c:	000a      	movs	r2, r1
 800ee1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2224      	movs	r2, #36	@ 0x24
 800ee24:	2100      	movs	r1, #0
 800ee26:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d039      	beq.n	800eea4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	0010      	movs	r0, r2
 800ee38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ee3a:	e033      	b.n	800eea4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee40:	221c      	movs	r2, #28
 800ee42:	4013      	ands	r3, r2
 800ee44:	2208      	movs	r2, #8
 800ee46:	409a      	lsls	r2, r3
 800ee48:	0013      	movs	r3, r2
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	4013      	ands	r3, r2
 800ee4e:	d02a      	beq.n	800eea6 <HAL_DMA_IRQHandler+0x154>
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	2208      	movs	r2, #8
 800ee54:	4013      	ands	r3, r2
 800ee56:	d026      	beq.n	800eea6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	210e      	movs	r1, #14
 800ee64:	438a      	bics	r2, r1
 800ee66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee6c:	221c      	movs	r2, #28
 800ee6e:	401a      	ands	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee74:	2101      	movs	r1, #1
 800ee76:	4091      	lsls	r1, r2
 800ee78:	000a      	movs	r2, r1
 800ee7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2201      	movs	r2, #1
 800ee80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2225      	movs	r2, #37	@ 0x25
 800ee86:	2101      	movs	r1, #1
 800ee88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2224      	movs	r2, #36	@ 0x24
 800ee8e:	2100      	movs	r1, #0
 800ee90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	0010      	movs	r0, r2
 800eea2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800eea4:	46c0      	nop			@ (mov r8, r8)
 800eea6:	46c0      	nop			@ (mov r8, r8)
}
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	b004      	add	sp, #16
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b082      	sub	sp, #8
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2225      	movs	r2, #37	@ 0x25
 800eeba:	5c9b      	ldrb	r3, [r3, r2]
 800eebc:	b2db      	uxtb	r3, r3
}
 800eebe:	0018      	movs	r0, r3
 800eec0:	46bd      	mov	sp, r7
 800eec2:	b002      	add	sp, #8
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	60f8      	str	r0, [r7, #12]
 800eece:	60b9      	str	r1, [r7, #8]
 800eed0:	607a      	str	r2, [r7, #4]
 800eed2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eed8:	221c      	movs	r2, #28
 800eeda:	401a      	ands	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eee0:	2101      	movs	r1, #1
 800eee2:	4091      	lsls	r1, r2
 800eee4:	000a      	movs	r2, r1
 800eee6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	2b10      	cmp	r3, #16
 800eef6:	d108      	bne.n	800ef0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ef08:	e007      	b.n	800ef1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	60da      	str	r2, [r3, #12]
}
 800ef1a:	46c0      	nop			@ (mov r8, r8)
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	b004      	add	sp, #16
 800ef20:	bd80      	pop	{r7, pc}
	...

0800ef24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ef2c:	f7ff f8e8 	bl	800e100 <HAL_GetTick>
 800ef30:	0003      	movs	r3, r0
 800ef32:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ef34:	e00f      	b.n	800ef56 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	d00c      	beq.n	800ef56 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d007      	beq.n	800ef52 <FLASH_WaitForLastOperation+0x2e>
 800ef42:	f7ff f8dd 	bl	800e100 <HAL_GetTick>
 800ef46:	0002      	movs	r2, r0
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d201      	bcs.n	800ef56 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800ef52:	2303      	movs	r3, #3
 800ef54:	e052      	b.n	800effc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800ef56:	4b2b      	ldr	r3, [pc, #172]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef58:	699b      	ldr	r3, [r3, #24]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d0e9      	beq.n	800ef36 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ef62:	4b28      	ldr	r3, [pc, #160]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	2202      	movs	r2, #2
 800ef68:	4013      	ands	r3, r2
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d102      	bne.n	800ef74 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ef6e:	4b25      	ldr	r3, [pc, #148]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef70:	2202      	movs	r2, #2
 800ef72:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ef74:	4b23      	ldr	r3, [pc, #140]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef76:	699a      	ldr	r2, [r3, #24]
 800ef78:	2380      	movs	r3, #128	@ 0x80
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	401a      	ands	r2, r3
 800ef7e:	2380      	movs	r3, #128	@ 0x80
 800ef80:	005b      	lsls	r3, r3, #1
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d035      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ef86:	4b1f      	ldr	r3, [pc, #124]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef88:	699a      	ldr	r2, [r3, #24]
 800ef8a:	2380      	movs	r3, #128	@ 0x80
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ef90:	2380      	movs	r3, #128	@ 0x80
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d02c      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ef98:	4b1a      	ldr	r3, [pc, #104]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800ef9a:	699a      	ldr	r2, [r3, #24]
 800ef9c:	2380      	movs	r3, #128	@ 0x80
 800ef9e:	00db      	lsls	r3, r3, #3
 800efa0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800efa2:	2380      	movs	r3, #128	@ 0x80
 800efa4:	00db      	lsls	r3, r3, #3
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d023      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800efaa:	4b16      	ldr	r3, [pc, #88]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800efac:	699a      	ldr	r2, [r3, #24]
 800efae:	2380      	movs	r3, #128	@ 0x80
 800efb0:	011b      	lsls	r3, r3, #4
 800efb2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800efb4:	2380      	movs	r3, #128	@ 0x80
 800efb6:	011b      	lsls	r3, r3, #4
 800efb8:	429a      	cmp	r2, r3
 800efba:	d01a      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800efbc:	4b11      	ldr	r3, [pc, #68]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800efbe:	699a      	ldr	r2, [r3, #24]
 800efc0:	2380      	movs	r3, #128	@ 0x80
 800efc2:	019b      	lsls	r3, r3, #6
 800efc4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800efc6:	2380      	movs	r3, #128	@ 0x80
 800efc8:	019b      	lsls	r3, r3, #6
 800efca:	429a      	cmp	r2, r3
 800efcc:	d011      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800efce:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800efd0:	699a      	ldr	r2, [r3, #24]
 800efd2:	2380      	movs	r3, #128	@ 0x80
 800efd4:	029b      	lsls	r3, r3, #10
 800efd6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800efd8:	2380      	movs	r3, #128	@ 0x80
 800efda:	029b      	lsls	r3, r3, #10
 800efdc:	429a      	cmp	r2, r3
 800efde:	d008      	beq.n	800eff2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800efe0:	4b08      	ldr	r3, [pc, #32]	@ (800f004 <FLASH_WaitForLastOperation+0xe0>)
 800efe2:	699a      	ldr	r2, [r3, #24]
 800efe4:	2380      	movs	r3, #128	@ 0x80
 800efe6:	025b      	lsls	r3, r3, #9
 800efe8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800efea:	2380      	movs	r3, #128	@ 0x80
 800efec:	025b      	lsls	r3, r3, #9
 800efee:	429a      	cmp	r2, r3
 800eff0:	d103      	bne.n	800effa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800eff2:	f000 f809 	bl	800f008 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800eff6:	2301      	movs	r3, #1
 800eff8:	e000      	b.n	800effc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	0018      	movs	r0, r3
 800effe:	46bd      	mov	sp, r7
 800f000:	b004      	add	sp, #16
 800f002:	bd80      	pop	{r7, pc}
 800f004:	40022000 	.word	0x40022000

0800f008 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800f00e:	2300      	movs	r3, #0
 800f010:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800f012:	4b49      	ldr	r3, [pc, #292]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f014:	699a      	ldr	r2, [r3, #24]
 800f016:	2380      	movs	r3, #128	@ 0x80
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	401a      	ands	r2, r3
 800f01c:	2380      	movs	r3, #128	@ 0x80
 800f01e:	005b      	lsls	r3, r3, #1
 800f020:	429a      	cmp	r2, r3
 800f022:	d10a      	bne.n	800f03a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f024:	4b45      	ldr	r3, [pc, #276]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	2202      	movs	r2, #2
 800f02a:	431a      	orrs	r2, r3
 800f02c:	4b43      	ldr	r3, [pc, #268]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f02e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2280      	movs	r2, #128	@ 0x80
 800f034:	0052      	lsls	r2, r2, #1
 800f036:	4313      	orrs	r3, r2
 800f038:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800f03a:	4b3f      	ldr	r3, [pc, #252]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f03c:	699a      	ldr	r2, [r3, #24]
 800f03e:	2380      	movs	r3, #128	@ 0x80
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	401a      	ands	r2, r3
 800f044:	2380      	movs	r3, #128	@ 0x80
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	429a      	cmp	r2, r3
 800f04a:	d10a      	bne.n	800f062 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f04c:	4b3b      	ldr	r3, [pc, #236]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	2201      	movs	r2, #1
 800f052:	431a      	orrs	r2, r3
 800f054:	4b39      	ldr	r3, [pc, #228]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f056:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2280      	movs	r2, #128	@ 0x80
 800f05c:	0092      	lsls	r2, r2, #2
 800f05e:	4313      	orrs	r3, r2
 800f060:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800f062:	4b35      	ldr	r3, [pc, #212]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f064:	699a      	ldr	r2, [r3, #24]
 800f066:	2380      	movs	r3, #128	@ 0x80
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	401a      	ands	r2, r3
 800f06c:	2380      	movs	r3, #128	@ 0x80
 800f06e:	00db      	lsls	r3, r3, #3
 800f070:	429a      	cmp	r2, r3
 800f072:	d10a      	bne.n	800f08a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f074:	4b31      	ldr	r3, [pc, #196]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	2208      	movs	r2, #8
 800f07a:	431a      	orrs	r2, r3
 800f07c:	4b2f      	ldr	r3, [pc, #188]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f07e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2280      	movs	r2, #128	@ 0x80
 800f084:	00d2      	lsls	r2, r2, #3
 800f086:	4313      	orrs	r3, r2
 800f088:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f08a:	4b2b      	ldr	r3, [pc, #172]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f08c:	699a      	ldr	r2, [r3, #24]
 800f08e:	2380      	movs	r3, #128	@ 0x80
 800f090:	011b      	lsls	r3, r3, #4
 800f092:	401a      	ands	r2, r3
 800f094:	2380      	movs	r3, #128	@ 0x80
 800f096:	011b      	lsls	r3, r3, #4
 800f098:	429a      	cmp	r2, r3
 800f09a:	d10a      	bne.n	800f0b2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f09c:	4b27      	ldr	r3, [pc, #156]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f09e:	695b      	ldr	r3, [r3, #20]
 800f0a0:	2204      	movs	r2, #4
 800f0a2:	431a      	orrs	r2, r3
 800f0a4:	4b25      	ldr	r3, [pc, #148]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f0a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2280      	movs	r2, #128	@ 0x80
 800f0ac:	0112      	lsls	r2, r2, #4
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f0b2:	4b21      	ldr	r3, [pc, #132]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f0b4:	699a      	ldr	r2, [r3, #24]
 800f0b6:	2380      	movs	r3, #128	@ 0x80
 800f0b8:	019b      	lsls	r3, r3, #6
 800f0ba:	401a      	ands	r2, r3
 800f0bc:	2380      	movs	r3, #128	@ 0x80
 800f0be:	019b      	lsls	r3, r3, #6
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d10a      	bne.n	800f0da <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f0c4:	4b1d      	ldr	r3, [pc, #116]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f0c6:	695b      	ldr	r3, [r3, #20]
 800f0c8:	2210      	movs	r2, #16
 800f0ca:	431a      	orrs	r2, r3
 800f0cc:	4b1b      	ldr	r3, [pc, #108]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f0ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2280      	movs	r2, #128	@ 0x80
 800f0d4:	0192      	lsls	r2, r2, #6
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f0da:	4b17      	ldr	r3, [pc, #92]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f0dc:	699a      	ldr	r2, [r3, #24]
 800f0de:	2380      	movs	r3, #128	@ 0x80
 800f0e0:	029b      	lsls	r3, r3, #10
 800f0e2:	401a      	ands	r2, r3
 800f0e4:	2380      	movs	r3, #128	@ 0x80
 800f0e6:	029b      	lsls	r3, r3, #10
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d109      	bne.n	800f100 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f0ec:	4b13      	ldr	r3, [pc, #76]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	2220      	movs	r2, #32
 800f0f2:	431a      	orrs	r2, r3
 800f0f4:	4b11      	ldr	r3, [pc, #68]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f0f6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2220      	movs	r2, #32
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f100:	4b0d      	ldr	r3, [pc, #52]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f102:	699a      	ldr	r2, [r3, #24]
 800f104:	2380      	movs	r3, #128	@ 0x80
 800f106:	025b      	lsls	r3, r3, #9
 800f108:	401a      	ands	r2, r3
 800f10a:	2380      	movs	r3, #128	@ 0x80
 800f10c:	025b      	lsls	r3, r3, #9
 800f10e:	429a      	cmp	r2, r3
 800f110:	d10a      	bne.n	800f128 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f112:	4b0a      	ldr	r3, [pc, #40]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f114:	695b      	ldr	r3, [r3, #20]
 800f116:	2240      	movs	r2, #64	@ 0x40
 800f118:	431a      	orrs	r2, r3
 800f11a:	4b08      	ldr	r3, [pc, #32]	@ (800f13c <FLASH_SetErrorCode+0x134>)
 800f11c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2280      	movs	r2, #128	@ 0x80
 800f122:	0252      	lsls	r2, r2, #9
 800f124:	4313      	orrs	r3, r2
 800f126:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f128:	4b03      	ldr	r3, [pc, #12]	@ (800f138 <FLASH_SetErrorCode+0x130>)
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	619a      	str	r2, [r3, #24]
}  
 800f12e:	46c0      	nop			@ (mov r8, r8)
 800f130:	46bd      	mov	sp, r7
 800f132:	b002      	add	sp, #8
 800f134:	bd80      	pop	{r7, pc}
 800f136:	46c0      	nop			@ (mov r8, r8)
 800f138:	40022000 	.word	0x40022000
 800f13c:	200024fc 	.word	0x200024fc

0800f140 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f146:	4b12      	ldr	r3, [pc, #72]	@ (800f190 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	2201      	movs	r2, #1
 800f14c:	4013      	ands	r3, r2
 800f14e:	d019      	beq.n	800f184 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f150:	f3ef 8310 	mrs	r3, PRIMASK
 800f154:	607b      	str	r3, [r7, #4]
  return(result);
 800f156:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f158:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f15a:	b672      	cpsid	i
}
 800f15c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f15e:	4b0c      	ldr	r3, [pc, #48]	@ (800f190 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f160:	4a0c      	ldr	r2, [pc, #48]	@ (800f194 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f162:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f164:	4b0a      	ldr	r3, [pc, #40]	@ (800f190 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f166:	4a0c      	ldr	r2, [pc, #48]	@ (800f198 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f168:	60da      	str	r2, [r3, #12]
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	f383 8810 	msr	PRIMASK, r3
}
 800f174:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f176:	4b06      	ldr	r3, [pc, #24]	@ (800f190 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	4013      	ands	r3, r2
 800f17e:	d001      	beq.n	800f184 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	e000      	b.n	800f186 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f184:	2300      	movs	r3, #0
}
 800f186:	0018      	movs	r0, r3
 800f188:	46bd      	mov	sp, r7
 800f18a:	b004      	add	sp, #16
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	46c0      	nop			@ (mov r8, r8)
 800f190:	40022000 	.word	0x40022000
 800f194:	89abcdef 	.word	0x89abcdef
 800f198:	02030405 	.word	0x02030405

0800f19c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f1a0:	4b04      	ldr	r3, [pc, #16]	@ (800f1b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	4b03      	ldr	r3, [pc, #12]	@ (800f1b4 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f1a6:	2101      	movs	r1, #1
 800f1a8:	430a      	orrs	r2, r1
 800f1aa:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f1ac:	2300      	movs	r3, #0
}
 800f1ae:	0018      	movs	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	40022000 	.word	0x40022000

0800f1b8 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f1b8:	b5b0      	push	{r4, r5, r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1c0:	250f      	movs	r5, #15
 800f1c2:	197b      	adds	r3, r7, r5
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f1c8:	197c      	adds	r4, r7, r5
 800f1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f208 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f1cc:	0018      	movs	r0, r3
 800f1ce:	f7ff fea9 	bl	800ef24 <FLASH_WaitForLastOperation>
 800f1d2:	0003      	movs	r3, r0
 800f1d4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f1d6:	0029      	movs	r1, r5
 800f1d8:	187b      	adds	r3, r7, r1
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10c      	bne.n	800f1fa <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f1e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f20c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f1ec:	187c      	adds	r4, r7, r1
 800f1ee:	4b06      	ldr	r3, [pc, #24]	@ (800f208 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f1f0:	0018      	movs	r0, r3
 800f1f2:	f7ff fe97 	bl	800ef24 <FLASH_WaitForLastOperation>
 800f1f6:	0003      	movs	r3, r0
 800f1f8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f1fa:	230f      	movs	r3, #15
 800f1fc:	18fb      	adds	r3, r7, r3
 800f1fe:	781b      	ldrb	r3, [r3, #0]
}  
 800f200:	0018      	movs	r0, r3
 800f202:	46bd      	mov	sp, r7
 800f204:	b004      	add	sp, #16
 800f206:	bdb0      	pop	{r4, r5, r7, pc}
 800f208:	0000c350 	.word	0x0000c350
 800f20c:	200024fc 	.word	0x200024fc

0800f210 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f210:	b5b0      	push	{r4, r5, r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f21c:	2317      	movs	r3, #23
 800f21e:	18fb      	adds	r3, r7, r3
 800f220:	2201      	movs	r2, #1
 800f222:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f224:	4b24      	ldr	r3, [pc, #144]	@ (800f2b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f226:	7c1b      	ldrb	r3, [r3, #16]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d101      	bne.n	800f230 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f22c:	2302      	movs	r3, #2
 800f22e:	e03e      	b.n	800f2ae <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f230:	4b21      	ldr	r3, [pc, #132]	@ (800f2b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f232:	2201      	movs	r2, #1
 800f234:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f236:	2517      	movs	r5, #23
 800f238:	197c      	adds	r4, r7, r5
 800f23a:	4b20      	ldr	r3, [pc, #128]	@ (800f2bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f23c:	0018      	movs	r0, r3
 800f23e:	f7ff fe71 	bl	800ef24 <FLASH_WaitForLastOperation>
 800f242:	0003      	movs	r3, r0
 800f244:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f246:	197b      	adds	r3, r7, r5
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d129      	bne.n	800f2a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f24e:	4b1a      	ldr	r3, [pc, #104]	@ (800f2b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f250:	2200      	movs	r2, #0
 800f252:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b02      	cmp	r3, #2
 800f258:	d103      	bne.n	800f262 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	e013      	b.n	800f28a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d104      	bne.n	800f272 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	b292      	uxth	r2, r2
 800f26e:	801a      	strh	r2, [r3, #0]
 800f270:	e00b      	b.n	800f28a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d104      	bne.n	800f282 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	b2d2      	uxtb	r2, r2
 800f27e:	701a      	strb	r2, [r3, #0]
 800f280:	e003      	b.n	800f28a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f282:	2317      	movs	r3, #23
 800f284:	18fb      	adds	r3, r7, r3
 800f286:	2201      	movs	r2, #1
 800f288:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f28a:	2217      	movs	r2, #23
 800f28c:	18bb      	adds	r3, r7, r2
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d106      	bne.n	800f2a2 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f294:	18bc      	adds	r4, r7, r2
 800f296:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f298:	0018      	movs	r0, r3
 800f29a:	f7ff fe43 	bl	800ef24 <FLASH_WaitForLastOperation>
 800f29e:	0003      	movs	r3, r0
 800f2a0:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f2a2:	4b05      	ldr	r3, [pc, #20]	@ (800f2b8 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	741a      	strb	r2, [r3, #16]

  return status;
 800f2a8:	2317      	movs	r3, #23
 800f2aa:	18fb      	adds	r3, r7, r3
 800f2ac:	781b      	ldrb	r3, [r3, #0]
}
 800f2ae:	0018      	movs	r0, r3
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	b006      	add	sp, #24
 800f2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2b6:	46c0      	nop			@ (mov r8, r8)
 800f2b8:	200024fc 	.word	0x200024fc
 800f2bc:	0000c350 	.word	0x0000c350

0800f2c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f2d6:	e155      	b.n	800f584 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2101      	movs	r1, #1
 800f2de:	697a      	ldr	r2, [r7, #20]
 800f2e0:	4091      	lsls	r1, r2
 800f2e2:	000a      	movs	r2, r1
 800f2e4:	4013      	ands	r3, r2
 800f2e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d100      	bne.n	800f2f0 <HAL_GPIO_Init+0x30>
 800f2ee:	e146      	b.n	800f57e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	2203      	movs	r2, #3
 800f2f6:	4013      	ands	r3, r2
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d005      	beq.n	800f308 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	2203      	movs	r2, #3
 800f302:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f304:	2b02      	cmp	r3, #2
 800f306:	d130      	bne.n	800f36a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	005b      	lsls	r3, r3, #1
 800f312:	2203      	movs	r2, #3
 800f314:	409a      	lsls	r2, r3
 800f316:	0013      	movs	r3, r2
 800f318:	43da      	mvns	r2, r3
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	4013      	ands	r3, r2
 800f31e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	68da      	ldr	r2, [r3, #12]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	409a      	lsls	r2, r3
 800f32a:	0013      	movs	r3, r2
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	4313      	orrs	r3, r2
 800f330:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	693a      	ldr	r2, [r7, #16]
 800f336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f33e:	2201      	movs	r2, #1
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	409a      	lsls	r2, r3
 800f344:	0013      	movs	r3, r2
 800f346:	43da      	mvns	r2, r3
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	4013      	ands	r3, r2
 800f34c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	091b      	lsrs	r3, r3, #4
 800f354:	2201      	movs	r2, #1
 800f356:	401a      	ands	r2, r3
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	409a      	lsls	r2, r3
 800f35c:	0013      	movs	r3, r2
 800f35e:	693a      	ldr	r2, [r7, #16]
 800f360:	4313      	orrs	r3, r2
 800f362:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	693a      	ldr	r2, [r7, #16]
 800f368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	2203      	movs	r2, #3
 800f370:	4013      	ands	r3, r2
 800f372:	2b03      	cmp	r3, #3
 800f374:	d017      	beq.n	800f3a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68db      	ldr	r3, [r3, #12]
 800f37a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	2203      	movs	r2, #3
 800f382:	409a      	lsls	r2, r3
 800f384:	0013      	movs	r3, r2
 800f386:	43da      	mvns	r2, r3
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	4013      	ands	r3, r2
 800f38c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	689a      	ldr	r2, [r3, #8]
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	005b      	lsls	r3, r3, #1
 800f396:	409a      	lsls	r2, r3
 800f398:	0013      	movs	r3, r2
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	693a      	ldr	r2, [r7, #16]
 800f3a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	2203      	movs	r2, #3
 800f3ac:	4013      	ands	r3, r2
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d123      	bne.n	800f3fa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	08da      	lsrs	r2, r3, #3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3208      	adds	r2, #8
 800f3ba:	0092      	lsls	r2, r2, #2
 800f3bc:	58d3      	ldr	r3, [r2, r3]
 800f3be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2207      	movs	r2, #7
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	220f      	movs	r2, #15
 800f3ca:	409a      	lsls	r2, r3
 800f3cc:	0013      	movs	r3, r2
 800f3ce:	43da      	mvns	r2, r3
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	691a      	ldr	r2, [r3, #16]
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2107      	movs	r1, #7
 800f3de:	400b      	ands	r3, r1
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	409a      	lsls	r2, r3
 800f3e4:	0013      	movs	r3, r2
 800f3e6:	693a      	ldr	r2, [r7, #16]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	08da      	lsrs	r2, r3, #3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3208      	adds	r2, #8
 800f3f4:	0092      	lsls	r2, r2, #2
 800f3f6:	6939      	ldr	r1, [r7, #16]
 800f3f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	005b      	lsls	r3, r3, #1
 800f404:	2203      	movs	r2, #3
 800f406:	409a      	lsls	r2, r3
 800f408:	0013      	movs	r3, r2
 800f40a:	43da      	mvns	r2, r3
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	4013      	ands	r3, r2
 800f410:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	2203      	movs	r2, #3
 800f418:	401a      	ands	r2, r3
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	005b      	lsls	r3, r3, #1
 800f41e:	409a      	lsls	r2, r3
 800f420:	0013      	movs	r3, r2
 800f422:	693a      	ldr	r2, [r7, #16]
 800f424:	4313      	orrs	r3, r2
 800f426:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	693a      	ldr	r2, [r7, #16]
 800f42c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	685a      	ldr	r2, [r3, #4]
 800f432:	23c0      	movs	r3, #192	@ 0xc0
 800f434:	029b      	lsls	r3, r3, #10
 800f436:	4013      	ands	r3, r2
 800f438:	d100      	bne.n	800f43c <HAL_GPIO_Init+0x17c>
 800f43a:	e0a0      	b.n	800f57e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f43c:	4b57      	ldr	r3, [pc, #348]	@ (800f59c <HAL_GPIO_Init+0x2dc>)
 800f43e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f440:	4b56      	ldr	r3, [pc, #344]	@ (800f59c <HAL_GPIO_Init+0x2dc>)
 800f442:	2101      	movs	r1, #1
 800f444:	430a      	orrs	r2, r1
 800f446:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f448:	4a55      	ldr	r2, [pc, #340]	@ (800f5a0 <HAL_GPIO_Init+0x2e0>)
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	089b      	lsrs	r3, r3, #2
 800f44e:	3302      	adds	r3, #2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	589b      	ldr	r3, [r3, r2]
 800f454:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	2203      	movs	r2, #3
 800f45a:	4013      	ands	r3, r2
 800f45c:	009b      	lsls	r3, r3, #2
 800f45e:	220f      	movs	r2, #15
 800f460:	409a      	lsls	r2, r3
 800f462:	0013      	movs	r3, r2
 800f464:	43da      	mvns	r2, r3
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	4013      	ands	r3, r2
 800f46a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	23a0      	movs	r3, #160	@ 0xa0
 800f470:	05db      	lsls	r3, r3, #23
 800f472:	429a      	cmp	r2, r3
 800f474:	d01f      	beq.n	800f4b6 <HAL_GPIO_Init+0x1f6>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a4a      	ldr	r2, [pc, #296]	@ (800f5a4 <HAL_GPIO_Init+0x2e4>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d019      	beq.n	800f4b2 <HAL_GPIO_Init+0x1f2>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a49      	ldr	r2, [pc, #292]	@ (800f5a8 <HAL_GPIO_Init+0x2e8>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d013      	beq.n	800f4ae <HAL_GPIO_Init+0x1ee>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a48      	ldr	r2, [pc, #288]	@ (800f5ac <HAL_GPIO_Init+0x2ec>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00d      	beq.n	800f4aa <HAL_GPIO_Init+0x1ea>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a47      	ldr	r2, [pc, #284]	@ (800f5b0 <HAL_GPIO_Init+0x2f0>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d007      	beq.n	800f4a6 <HAL_GPIO_Init+0x1e6>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a46      	ldr	r2, [pc, #280]	@ (800f5b4 <HAL_GPIO_Init+0x2f4>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d101      	bne.n	800f4a2 <HAL_GPIO_Init+0x1e2>
 800f49e:	2305      	movs	r3, #5
 800f4a0:	e00a      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4a2:	2306      	movs	r3, #6
 800f4a4:	e008      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4a6:	2304      	movs	r3, #4
 800f4a8:	e006      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	e004      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4ae:	2302      	movs	r3, #2
 800f4b0:	e002      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e000      	b.n	800f4b8 <HAL_GPIO_Init+0x1f8>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	697a      	ldr	r2, [r7, #20]
 800f4ba:	2103      	movs	r1, #3
 800f4bc:	400a      	ands	r2, r1
 800f4be:	0092      	lsls	r2, r2, #2
 800f4c0:	4093      	lsls	r3, r2
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	4313      	orrs	r3, r2
 800f4c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f4c8:	4935      	ldr	r1, [pc, #212]	@ (800f5a0 <HAL_GPIO_Init+0x2e0>)
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	089b      	lsrs	r3, r3, #2
 800f4ce:	3302      	adds	r3, #2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	693a      	ldr	r2, [r7, #16]
 800f4d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f4d6:	4b38      	ldr	r3, [pc, #224]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f4d8:	689b      	ldr	r3, [r3, #8]
 800f4da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	43da      	mvns	r2, r3
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	4013      	ands	r3, r2
 800f4e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	685a      	ldr	r2, [r3, #4]
 800f4ea:	2380      	movs	r3, #128	@ 0x80
 800f4ec:	035b      	lsls	r3, r3, #13
 800f4ee:	4013      	ands	r3, r2
 800f4f0:	d003      	beq.n	800f4fa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f4f2:	693a      	ldr	r2, [r7, #16]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f4fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f500:	4b2d      	ldr	r3, [pc, #180]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	43da      	mvns	r2, r3
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	4013      	ands	r3, r2
 800f50e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	685a      	ldr	r2, [r3, #4]
 800f514:	2380      	movs	r3, #128	@ 0x80
 800f516:	039b      	lsls	r3, r3, #14
 800f518:	4013      	ands	r3, r2
 800f51a:	d003      	beq.n	800f524 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f51c:	693a      	ldr	r2, [r7, #16]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	4313      	orrs	r3, r2
 800f522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f524:	4b24      	ldr	r3, [pc, #144]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f52a:	4b23      	ldr	r3, [pc, #140]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	43da      	mvns	r2, r3
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	4013      	ands	r3, r2
 800f538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	685a      	ldr	r2, [r3, #4]
 800f53e:	2380      	movs	r3, #128	@ 0x80
 800f540:	029b      	lsls	r3, r3, #10
 800f542:	4013      	ands	r3, r2
 800f544:	d003      	beq.n	800f54e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f546:	693a      	ldr	r2, [r7, #16]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f54e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f550:	693a      	ldr	r2, [r7, #16]
 800f552:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f554:	4b18      	ldr	r3, [pc, #96]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	43da      	mvns	r2, r3
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	4013      	ands	r3, r2
 800f562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	2380      	movs	r3, #128	@ 0x80
 800f56a:	025b      	lsls	r3, r3, #9
 800f56c:	4013      	ands	r3, r2
 800f56e:	d003      	beq.n	800f578 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	4313      	orrs	r3, r2
 800f576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f578:	4b0f      	ldr	r3, [pc, #60]	@ (800f5b8 <HAL_GPIO_Init+0x2f8>)
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	3301      	adds	r3, #1
 800f582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	40da      	lsrs	r2, r3
 800f58c:	1e13      	subs	r3, r2, #0
 800f58e:	d000      	beq.n	800f592 <HAL_GPIO_Init+0x2d2>
 800f590:	e6a2      	b.n	800f2d8 <HAL_GPIO_Init+0x18>
  }
}
 800f592:	46c0      	nop			@ (mov r8, r8)
 800f594:	46c0      	nop			@ (mov r8, r8)
 800f596:	46bd      	mov	sp, r7
 800f598:	b006      	add	sp, #24
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	40021000 	.word	0x40021000
 800f5a0:	40010000 	.word	0x40010000
 800f5a4:	50000400 	.word	0x50000400
 800f5a8:	50000800 	.word	0x50000800
 800f5ac:	50000c00 	.word	0x50000c00
 800f5b0:	50001000 	.word	0x50001000
 800f5b4:	50001c00 	.word	0x50001c00
 800f5b8:	40010400 	.word	0x40010400

0800f5bc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	000a      	movs	r2, r1
 800f5c6:	1cbb      	adds	r3, r7, #2
 800f5c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	691b      	ldr	r3, [r3, #16]
 800f5ce:	1cba      	adds	r2, r7, #2
 800f5d0:	8812      	ldrh	r2, [r2, #0]
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	d004      	beq.n	800f5e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f5d6:	230f      	movs	r3, #15
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	2201      	movs	r2, #1
 800f5dc:	701a      	strb	r2, [r3, #0]
 800f5de:	e003      	b.n	800f5e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f5e0:	230f      	movs	r3, #15
 800f5e2:	18fb      	adds	r3, r7, r3
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f5e8:	230f      	movs	r3, #15
 800f5ea:	18fb      	adds	r3, r7, r3
 800f5ec:	781b      	ldrb	r3, [r3, #0]
}
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	b004      	add	sp, #16
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	0008      	movs	r0, r1
 800f600:	0011      	movs	r1, r2
 800f602:	1cbb      	adds	r3, r7, #2
 800f604:	1c02      	adds	r2, r0, #0
 800f606:	801a      	strh	r2, [r3, #0]
 800f608:	1c7b      	adds	r3, r7, #1
 800f60a:	1c0a      	adds	r2, r1, #0
 800f60c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f60e:	1c7b      	adds	r3, r7, #1
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d004      	beq.n	800f620 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f616:	1cbb      	adds	r3, r7, #2
 800f618:	881a      	ldrh	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f61e:	e003      	b.n	800f628 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f620:	1cbb      	adds	r3, r7, #2
 800f622:	881a      	ldrh	r2, [r3, #0]
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f628:	46c0      	nop			@ (mov r8, r8)
 800f62a:	46bd      	mov	sp, r7
 800f62c:	b002      	add	sp, #8
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	0002      	movs	r2, r0
 800f638:	1dbb      	adds	r3, r7, #6
 800f63a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f63c:	4b09      	ldr	r3, [pc, #36]	@ (800f664 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f63e:	695b      	ldr	r3, [r3, #20]
 800f640:	1dba      	adds	r2, r7, #6
 800f642:	8812      	ldrh	r2, [r2, #0]
 800f644:	4013      	ands	r3, r2
 800f646:	d008      	beq.n	800f65a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f648:	4b06      	ldr	r3, [pc, #24]	@ (800f664 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f64a:	1dba      	adds	r2, r7, #6
 800f64c:	8812      	ldrh	r2, [r2, #0]
 800f64e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f650:	1dbb      	adds	r3, r7, #6
 800f652:	881b      	ldrh	r3, [r3, #0]
 800f654:	0018      	movs	r0, r3
 800f656:	f7f8 fe89 	bl	800836c <HAL_GPIO_EXTI_Callback>
  }
}
 800f65a:	46c0      	nop			@ (mov r8, r8)
 800f65c:	46bd      	mov	sp, r7
 800f65e:	b002      	add	sp, #8
 800f660:	bd80      	pop	{r7, pc}
 800f662:	46c0      	nop			@ (mov r8, r8)
 800f664:	40010400 	.word	0x40010400

0800f668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f676:	2301      	movs	r3, #1
 800f678:	e082      	b.n	800f780 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2241      	movs	r2, #65	@ 0x41
 800f67e:	5c9b      	ldrb	r3, [r3, r2]
 800f680:	b2db      	uxtb	r3, r3
 800f682:	2b00      	cmp	r3, #0
 800f684:	d107      	bne.n	800f696 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2240      	movs	r2, #64	@ 0x40
 800f68a:	2100      	movs	r1, #0
 800f68c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	0018      	movs	r0, r3
 800f692:	f7f7 ffab 	bl	80075ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2241      	movs	r2, #65	@ 0x41
 800f69a:	2124      	movs	r1, #36	@ 0x24
 800f69c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	681a      	ldr	r2, [r3, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	438a      	bics	r2, r1
 800f6ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	685a      	ldr	r2, [r3, #4]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4934      	ldr	r1, [pc, #208]	@ (800f788 <HAL_I2C_Init+0x120>)
 800f6b8:	400a      	ands	r2, r1
 800f6ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	689a      	ldr	r2, [r3, #8]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4931      	ldr	r1, [pc, #196]	@ (800f78c <HAL_I2C_Init+0x124>)
 800f6c8:	400a      	ands	r2, r1
 800f6ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	2b01      	cmp	r3, #1
 800f6d2:	d108      	bne.n	800f6e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	689a      	ldr	r2, [r3, #8]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2180      	movs	r1, #128	@ 0x80
 800f6de:	0209      	lsls	r1, r1, #8
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	609a      	str	r2, [r3, #8]
 800f6e4:	e007      	b.n	800f6f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	689a      	ldr	r2, [r3, #8]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	2184      	movs	r1, #132	@ 0x84
 800f6f0:	0209      	lsls	r1, r1, #8
 800f6f2:	430a      	orrs	r2, r1
 800f6f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d104      	bne.n	800f708 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2280      	movs	r2, #128	@ 0x80
 800f704:	0112      	lsls	r2, r2, #4
 800f706:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	491f      	ldr	r1, [pc, #124]	@ (800f790 <HAL_I2C_Init+0x128>)
 800f714:	430a      	orrs	r2, r1
 800f716:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	68da      	ldr	r2, [r3, #12]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	491a      	ldr	r1, [pc, #104]	@ (800f78c <HAL_I2C_Init+0x124>)
 800f724:	400a      	ands	r2, r1
 800f726:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	691a      	ldr	r2, [r3, #16]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	695b      	ldr	r3, [r3, #20]
 800f730:	431a      	orrs	r2, r3
 800f732:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	430a      	orrs	r2, r1
 800f740:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	69d9      	ldr	r1, [r3, #28]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1a      	ldr	r2, [r3, #32]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	430a      	orrs	r2, r1
 800f750:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	681a      	ldr	r2, [r3, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2101      	movs	r1, #1
 800f75e:	430a      	orrs	r2, r1
 800f760:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2241      	movs	r2, #65	@ 0x41
 800f76c:	2120      	movs	r1, #32
 800f76e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2242      	movs	r2, #66	@ 0x42
 800f77a:	2100      	movs	r1, #0
 800f77c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	0018      	movs	r0, r3
 800f782:	46bd      	mov	sp, r7
 800f784:	b002      	add	sp, #8
 800f786:	bd80      	pop	{r7, pc}
 800f788:	f0ffffff 	.word	0xf0ffffff
 800f78c:	ffff7fff 	.word	0xffff7fff
 800f790:	02008000 	.word	0x02008000

0800f794 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f794:	b590      	push	{r4, r7, lr}
 800f796:	b089      	sub	sp, #36	@ 0x24
 800f798:	af02      	add	r7, sp, #8
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	0008      	movs	r0, r1
 800f79e:	607a      	str	r2, [r7, #4]
 800f7a0:	0019      	movs	r1, r3
 800f7a2:	230a      	movs	r3, #10
 800f7a4:	18fb      	adds	r3, r7, r3
 800f7a6:	1c02      	adds	r2, r0, #0
 800f7a8:	801a      	strh	r2, [r3, #0]
 800f7aa:	2308      	movs	r3, #8
 800f7ac:	18fb      	adds	r3, r7, r3
 800f7ae:	1c0a      	adds	r2, r1, #0
 800f7b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2241      	movs	r2, #65	@ 0x41
 800f7b6:	5c9b      	ldrb	r3, [r3, r2]
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b20      	cmp	r3, #32
 800f7bc:	d000      	beq.n	800f7c0 <HAL_I2C_Master_Transmit+0x2c>
 800f7be:	e0e7      	b.n	800f990 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2240      	movs	r2, #64	@ 0x40
 800f7c4:	5c9b      	ldrb	r3, [r3, r2]
 800f7c6:	2b01      	cmp	r3, #1
 800f7c8:	d101      	bne.n	800f7ce <HAL_I2C_Master_Transmit+0x3a>
 800f7ca:	2302      	movs	r3, #2
 800f7cc:	e0e1      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	2240      	movs	r2, #64	@ 0x40
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f7d6:	f7fe fc93 	bl	800e100 <HAL_GetTick>
 800f7da:	0003      	movs	r3, r0
 800f7dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f7de:	2380      	movs	r3, #128	@ 0x80
 800f7e0:	0219      	lsls	r1, r3, #8
 800f7e2:	68f8      	ldr	r0, [r7, #12]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	2319      	movs	r3, #25
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	f001 ff98 	bl	8011720 <I2C_WaitOnFlagUntilTimeout>
 800f7f0:	1e03      	subs	r3, r0, #0
 800f7f2:	d001      	beq.n	800f7f8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	e0cc      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2241      	movs	r2, #65	@ 0x41
 800f7fc:	2121      	movs	r1, #33	@ 0x21
 800f7fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	2242      	movs	r2, #66	@ 0x42
 800f804:	2110      	movs	r1, #16
 800f806:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2200      	movs	r2, #0
 800f80c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2208      	movs	r2, #8
 800f818:	18ba      	adds	r2, r7, r2
 800f81a:	8812      	ldrh	r2, [r2, #0]
 800f81c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f828:	b29b      	uxth	r3, r3
 800f82a:	2bff      	cmp	r3, #255	@ 0xff
 800f82c:	d911      	bls.n	800f852 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	22ff      	movs	r2, #255	@ 0xff
 800f832:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	2380      	movs	r3, #128	@ 0x80
 800f83c:	045c      	lsls	r4, r3, #17
 800f83e:	230a      	movs	r3, #10
 800f840:	18fb      	adds	r3, r7, r3
 800f842:	8819      	ldrh	r1, [r3, #0]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	4b55      	ldr	r3, [pc, #340]	@ (800f99c <HAL_I2C_Master_Transmit+0x208>)
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	0023      	movs	r3, r4
 800f84c:	f002 f9ba 	bl	8011bc4 <I2C_TransferConfig>
 800f850:	e075      	b.n	800f93e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f856:	b29a      	uxth	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f860:	b2da      	uxtb	r2, r3
 800f862:	2380      	movs	r3, #128	@ 0x80
 800f864:	049c      	lsls	r4, r3, #18
 800f866:	230a      	movs	r3, #10
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	8819      	ldrh	r1, [r3, #0]
 800f86c:	68f8      	ldr	r0, [r7, #12]
 800f86e:	4b4b      	ldr	r3, [pc, #300]	@ (800f99c <HAL_I2C_Master_Transmit+0x208>)
 800f870:	9300      	str	r3, [sp, #0]
 800f872:	0023      	movs	r3, r4
 800f874:	f002 f9a6 	bl	8011bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f878:	e061      	b.n	800f93e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f87a:	697a      	ldr	r2, [r7, #20]
 800f87c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	0018      	movs	r0, r3
 800f882:	f001 ff9b 	bl	80117bc <I2C_WaitOnTXISFlagUntilTimeout>
 800f886:	1e03      	subs	r3, r0, #0
 800f888:	d001      	beq.n	800f88e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	e081      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f892:	781a      	ldrb	r2, [r3, #0]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d03a      	beq.n	800f93e <HAL_I2C_Master_Transmit+0x1aa>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d136      	bne.n	800f93e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f8d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	0013      	movs	r3, r2
 800f8da:	2200      	movs	r2, #0
 800f8dc:	2180      	movs	r1, #128	@ 0x80
 800f8de:	f001 ff1f 	bl	8011720 <I2C_WaitOnFlagUntilTimeout>
 800f8e2:	1e03      	subs	r3, r0, #0
 800f8e4:	d001      	beq.n	800f8ea <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e053      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	2bff      	cmp	r3, #255	@ 0xff
 800f8f2:	d911      	bls.n	800f918 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	22ff      	movs	r2, #255	@ 0xff
 800f8f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8fe:	b2da      	uxtb	r2, r3
 800f900:	2380      	movs	r3, #128	@ 0x80
 800f902:	045c      	lsls	r4, r3, #17
 800f904:	230a      	movs	r3, #10
 800f906:	18fb      	adds	r3, r7, r3
 800f908:	8819      	ldrh	r1, [r3, #0]
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	2300      	movs	r3, #0
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	0023      	movs	r3, r4
 800f912:	f002 f957 	bl	8011bc4 <I2C_TransferConfig>
 800f916:	e012      	b.n	800f93e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f926:	b2da      	uxtb	r2, r3
 800f928:	2380      	movs	r3, #128	@ 0x80
 800f92a:	049c      	lsls	r4, r3, #18
 800f92c:	230a      	movs	r3, #10
 800f92e:	18fb      	adds	r3, r7, r3
 800f930:	8819      	ldrh	r1, [r3, #0]
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	2300      	movs	r3, #0
 800f936:	9300      	str	r3, [sp, #0]
 800f938:	0023      	movs	r3, r4
 800f93a:	f002 f943 	bl	8011bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f942:	b29b      	uxth	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	d198      	bne.n	800f87a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f948:	697a      	ldr	r2, [r7, #20]
 800f94a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	0018      	movs	r0, r3
 800f950:	f001 ff7a 	bl	8011848 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f954:	1e03      	subs	r3, r0, #0
 800f956:	d001      	beq.n	800f95c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f958:	2301      	movs	r3, #1
 800f95a:	e01a      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2220      	movs	r2, #32
 800f962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	685a      	ldr	r2, [r3, #4]
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	490c      	ldr	r1, [pc, #48]	@ (800f9a0 <HAL_I2C_Master_Transmit+0x20c>)
 800f970:	400a      	ands	r2, r1
 800f972:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2241      	movs	r2, #65	@ 0x41
 800f978:	2120      	movs	r1, #32
 800f97a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2242      	movs	r2, #66	@ 0x42
 800f980:	2100      	movs	r1, #0
 800f982:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2240      	movs	r2, #64	@ 0x40
 800f988:	2100      	movs	r1, #0
 800f98a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	e000      	b.n	800f992 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f990:	2302      	movs	r3, #2
  }
}
 800f992:	0018      	movs	r0, r3
 800f994:	46bd      	mov	sp, r7
 800f996:	b007      	add	sp, #28
 800f998:	bd90      	pop	{r4, r7, pc}
 800f99a:	46c0      	nop			@ (mov r8, r8)
 800f99c:	80002000 	.word	0x80002000
 800f9a0:	fe00e800 	.word	0xfe00e800

0800f9a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f9a4:	b590      	push	{r4, r7, lr}
 800f9a6:	b089      	sub	sp, #36	@ 0x24
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	0008      	movs	r0, r1
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	0019      	movs	r1, r3
 800f9b2:	230a      	movs	r3, #10
 800f9b4:	18fb      	adds	r3, r7, r3
 800f9b6:	1c02      	adds	r2, r0, #0
 800f9b8:	801a      	strh	r2, [r3, #0]
 800f9ba:	2308      	movs	r3, #8
 800f9bc:	18fb      	adds	r3, r7, r3
 800f9be:	1c0a      	adds	r2, r1, #0
 800f9c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2241      	movs	r2, #65	@ 0x41
 800f9c6:	5c9b      	ldrb	r3, [r3, r2]
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b20      	cmp	r3, #32
 800f9cc:	d000      	beq.n	800f9d0 <HAL_I2C_Master_Receive+0x2c>
 800f9ce:	e0e8      	b.n	800fba2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2240      	movs	r2, #64	@ 0x40
 800f9d4:	5c9b      	ldrb	r3, [r3, r2]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d101      	bne.n	800f9de <HAL_I2C_Master_Receive+0x3a>
 800f9da:	2302      	movs	r3, #2
 800f9dc:	e0e2      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2240      	movs	r2, #64	@ 0x40
 800f9e2:	2101      	movs	r1, #1
 800f9e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f9e6:	f7fe fb8b 	bl	800e100 <HAL_GetTick>
 800f9ea:	0003      	movs	r3, r0
 800f9ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f9ee:	2380      	movs	r3, #128	@ 0x80
 800f9f0:	0219      	lsls	r1, r3, #8
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	2319      	movs	r3, #25
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	f001 fe90 	bl	8011720 <I2C_WaitOnFlagUntilTimeout>
 800fa00:	1e03      	subs	r3, r0, #0
 800fa02:	d001      	beq.n	800fa08 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	e0cd      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2241      	movs	r2, #65	@ 0x41
 800fa0c:	2122      	movs	r1, #34	@ 0x22
 800fa0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2242      	movs	r2, #66	@ 0x42
 800fa14:	2110      	movs	r1, #16
 800fa16:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2208      	movs	r2, #8
 800fa28:	18ba      	adds	r2, r7, r2
 800fa2a:	8812      	ldrh	r2, [r2, #0]
 800fa2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	2bff      	cmp	r3, #255	@ 0xff
 800fa3c:	d911      	bls.n	800fa62 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	22ff      	movs	r2, #255	@ 0xff
 800fa42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	2380      	movs	r3, #128	@ 0x80
 800fa4c:	045c      	lsls	r4, r3, #17
 800fa4e:	230a      	movs	r3, #10
 800fa50:	18fb      	adds	r3, r7, r3
 800fa52:	8819      	ldrh	r1, [r3, #0]
 800fa54:	68f8      	ldr	r0, [r7, #12]
 800fa56:	4b55      	ldr	r3, [pc, #340]	@ (800fbac <HAL_I2C_Master_Receive+0x208>)
 800fa58:	9300      	str	r3, [sp, #0]
 800fa5a:	0023      	movs	r3, r4
 800fa5c:	f002 f8b2 	bl	8011bc4 <I2C_TransferConfig>
 800fa60:	e076      	b.n	800fb50 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	2380      	movs	r3, #128	@ 0x80
 800fa74:	049c      	lsls	r4, r3, #18
 800fa76:	230a      	movs	r3, #10
 800fa78:	18fb      	adds	r3, r7, r3
 800fa7a:	8819      	ldrh	r1, [r3, #0]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	4b4b      	ldr	r3, [pc, #300]	@ (800fbac <HAL_I2C_Master_Receive+0x208>)
 800fa80:	9300      	str	r3, [sp, #0]
 800fa82:	0023      	movs	r3, r4
 800fa84:	f002 f89e 	bl	8011bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fa88:	e062      	b.n	800fb50 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	0018      	movs	r0, r3
 800fa92:	f001 ff1d 	bl	80118d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fa96:	1e03      	subs	r3, r0, #0
 800fa98:	d001      	beq.n	800fa9e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e082      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa8:	b2d2      	uxtb	r2, r2
 800faaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800faba:	3b01      	subs	r3, #1
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	3b01      	subs	r3, #1
 800faca:	b29a      	uxth	r2, r3
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d03a      	beq.n	800fb50 <HAL_I2C_Master_Receive+0x1ac>
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d136      	bne.n	800fb50 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	0013      	movs	r3, r2
 800faec:	2200      	movs	r2, #0
 800faee:	2180      	movs	r1, #128	@ 0x80
 800faf0:	f001 fe16 	bl	8011720 <I2C_WaitOnFlagUntilTimeout>
 800faf4:	1e03      	subs	r3, r0, #0
 800faf6:	d001      	beq.n	800fafc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800faf8:	2301      	movs	r3, #1
 800fafa:	e053      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	2bff      	cmp	r3, #255	@ 0xff
 800fb04:	d911      	bls.n	800fb2a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	22ff      	movs	r2, #255	@ 0xff
 800fb0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb10:	b2da      	uxtb	r2, r3
 800fb12:	2380      	movs	r3, #128	@ 0x80
 800fb14:	045c      	lsls	r4, r3, #17
 800fb16:	230a      	movs	r3, #10
 800fb18:	18fb      	adds	r3, r7, r3
 800fb1a:	8819      	ldrh	r1, [r3, #0]
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	2300      	movs	r3, #0
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	0023      	movs	r3, r4
 800fb24:	f002 f84e 	bl	8011bc4 <I2C_TransferConfig>
 800fb28:	e012      	b.n	800fb50 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb38:	b2da      	uxtb	r2, r3
 800fb3a:	2380      	movs	r3, #128	@ 0x80
 800fb3c:	049c      	lsls	r4, r3, #18
 800fb3e:	230a      	movs	r3, #10
 800fb40:	18fb      	adds	r3, r7, r3
 800fb42:	8819      	ldrh	r1, [r3, #0]
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	2300      	movs	r3, #0
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	0023      	movs	r3, r4
 800fb4c:	f002 f83a 	bl	8011bc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d197      	bne.n	800fa8a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fb5a:	697a      	ldr	r2, [r7, #20]
 800fb5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	0018      	movs	r0, r3
 800fb62:	f001 fe71 	bl	8011848 <I2C_WaitOnSTOPFlagUntilTimeout>
 800fb66:	1e03      	subs	r3, r0, #0
 800fb68:	d001      	beq.n	800fb6e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e01a      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2220      	movs	r2, #32
 800fb74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	490b      	ldr	r1, [pc, #44]	@ (800fbb0 <HAL_I2C_Master_Receive+0x20c>)
 800fb82:	400a      	ands	r2, r1
 800fb84:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2241      	movs	r2, #65	@ 0x41
 800fb8a:	2120      	movs	r1, #32
 800fb8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2242      	movs	r2, #66	@ 0x42
 800fb92:	2100      	movs	r1, #0
 800fb94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2240      	movs	r2, #64	@ 0x40
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	e000      	b.n	800fba4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800fba2:	2302      	movs	r3, #2
  }
}
 800fba4:	0018      	movs	r0, r3
 800fba6:	46bd      	mov	sp, r7
 800fba8:	b007      	add	sp, #28
 800fbaa:	bd90      	pop	{r4, r7, pc}
 800fbac:	80002400 	.word	0x80002400
 800fbb0:	fe00e800 	.word	0xfe00e800

0800fbb4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800fbb4:	b5b0      	push	{r4, r5, r7, lr}
 800fbb6:	b088      	sub	sp, #32
 800fbb8:	af02      	add	r7, sp, #8
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	0008      	movs	r0, r1
 800fbbe:	607a      	str	r2, [r7, #4]
 800fbc0:	0019      	movs	r1, r3
 800fbc2:	230a      	movs	r3, #10
 800fbc4:	18fb      	adds	r3, r7, r3
 800fbc6:	1c02      	adds	r2, r0, #0
 800fbc8:	801a      	strh	r2, [r3, #0]
 800fbca:	2308      	movs	r3, #8
 800fbcc:	18fb      	adds	r3, r7, r3
 800fbce:	1c0a      	adds	r2, r1, #0
 800fbd0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	2241      	movs	r2, #65	@ 0x41
 800fbd6:	5c9b      	ldrb	r3, [r3, r2]
 800fbd8:	b2db      	uxtb	r3, r3
 800fbda:	2b20      	cmp	r3, #32
 800fbdc:	d000      	beq.n	800fbe0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800fbde:	e0dd      	b.n	800fd9c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	699a      	ldr	r2, [r3, #24]
 800fbe6:	2380      	movs	r3, #128	@ 0x80
 800fbe8:	021b      	lsls	r3, r3, #8
 800fbea:	401a      	ands	r2, r3
 800fbec:	2380      	movs	r3, #128	@ 0x80
 800fbee:	021b      	lsls	r3, r3, #8
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d101      	bne.n	800fbf8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	e0d2      	b.n	800fd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2240      	movs	r2, #64	@ 0x40
 800fbfc:	5c9b      	ldrb	r3, [r3, r2]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d101      	bne.n	800fc06 <HAL_I2C_Master_Transmit_DMA+0x52>
 800fc02:	2302      	movs	r3, #2
 800fc04:	e0cb      	b.n	800fd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2240      	movs	r2, #64	@ 0x40
 800fc0a:	2101      	movs	r1, #1
 800fc0c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2241      	movs	r2, #65	@ 0x41
 800fc12:	2121      	movs	r1, #33	@ 0x21
 800fc14:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2242      	movs	r2, #66	@ 0x42
 800fc1a:	2110      	movs	r1, #16
 800fc1c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2208      	movs	r2, #8
 800fc2e:	18ba      	adds	r2, r7, r2
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	4a5c      	ldr	r2, [pc, #368]	@ (800fda8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fc38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4a5b      	ldr	r2, [pc, #364]	@ (800fdac <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800fc3e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	2bff      	cmp	r3, #255	@ 0xff
 800fc48:	d906      	bls.n	800fc58 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	22ff      	movs	r2, #255	@ 0xff
 800fc4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fc50:	2380      	movs	r3, #128	@ 0x80
 800fc52:	045b      	lsls	r3, r3, #17
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e007      	b.n	800fc68 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fc62:	2380      	movs	r3, #128	@ 0x80
 800fc64:	049b      	lsls	r3, r3, #18
 800fc66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d100      	bne.n	800fc72 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800fc70:	e078      	b.n	800fd64 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d023      	beq.n	800fcc2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc7e:	4a4c      	ldr	r2, [pc, #304]	@ (800fdb0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800fc80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc86:	4a4b      	ldr	r2, [pc, #300]	@ (800fdb4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800fc88:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc8e:	2200      	movs	r2, #0
 800fc90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc96:	2200      	movs	r2, #0
 800fc98:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fc9e:	6879      	ldr	r1, [r7, #4]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	3328      	adds	r3, #40	@ 0x28
 800fca6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fcac:	2513      	movs	r5, #19
 800fcae:	197c      	adds	r4, r7, r5
 800fcb0:	f7fe ff62 	bl	800eb78 <HAL_DMA_Start_IT>
 800fcb4:	0003      	movs	r3, r0
 800fcb6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fcb8:	197b      	adds	r3, r7, r5
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d13d      	bne.n	800fd3c <HAL_I2C_Master_Transmit_DMA+0x188>
 800fcc0:	e013      	b.n	800fcea <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2241      	movs	r2, #65	@ 0x41
 800fcc6:	2120      	movs	r1, #32
 800fcc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2242      	movs	r2, #66	@ 0x42
 800fcce:	2100      	movs	r1, #0
 800fcd0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcd6:	2280      	movs	r2, #128	@ 0x80
 800fcd8:	431a      	orrs	r2, r3
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2240      	movs	r2, #64	@ 0x40
 800fce2:	2100      	movs	r1, #0
 800fce4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fce6:	2301      	movs	r3, #1
 800fce8:	e059      	b.n	800fd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	697c      	ldr	r4, [r7, #20]
 800fcf2:	230a      	movs	r3, #10
 800fcf4:	18fb      	adds	r3, r7, r3
 800fcf6:	8819      	ldrh	r1, [r3, #0]
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	4b2f      	ldr	r3, [pc, #188]	@ (800fdb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fcfc:	9300      	str	r3, [sp, #0]
 800fcfe:	0023      	movs	r3, r4
 800fd00:	f001 ff60 	bl	8011bc4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd0e:	1ad3      	subs	r3, r2, r3
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2240      	movs	r2, #64	@ 0x40
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2110      	movs	r1, #16
 800fd22:	0018      	movs	r0, r3
 800fd24:	f001 ff88 	bl	8011c38 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	2180      	movs	r1, #128	@ 0x80
 800fd34:	01c9      	lsls	r1, r1, #7
 800fd36:	430a      	orrs	r2, r1
 800fd38:	601a      	str	r2, [r3, #0]
 800fd3a:	e02d      	b.n	800fd98 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2241      	movs	r2, #65	@ 0x41
 800fd40:	2120      	movs	r1, #32
 800fd42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2242      	movs	r2, #66	@ 0x42
 800fd48:	2100      	movs	r1, #0
 800fd4a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd50:	2210      	movs	r2, #16
 800fd52:	431a      	orrs	r2, r3
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2240      	movs	r2, #64	@ 0x40
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e01c      	b.n	800fd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	4a15      	ldr	r2, [pc, #84]	@ (800fdbc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800fd68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd6e:	b2da      	uxtb	r2, r3
 800fd70:	2380      	movs	r3, #128	@ 0x80
 800fd72:	049c      	lsls	r4, r3, #18
 800fd74:	230a      	movs	r3, #10
 800fd76:	18fb      	adds	r3, r7, r3
 800fd78:	8819      	ldrh	r1, [r3, #0]
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	4b0e      	ldr	r3, [pc, #56]	@ (800fdb8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	0023      	movs	r3, r4
 800fd82:	f001 ff1f 	bl	8011bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2240      	movs	r2, #64	@ 0x40
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2101      	movs	r1, #1
 800fd92:	0018      	movs	r0, r3
 800fd94:	f001 ff50 	bl	8011c38 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	e000      	b.n	800fd9e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fd9c:	2302      	movs	r3, #2
  }
}
 800fd9e:	0018      	movs	r0, r3
 800fda0:	46bd      	mov	sp, r7
 800fda2:	b006      	add	sp, #24
 800fda4:	bdb0      	pop	{r4, r5, r7, pc}
 800fda6:	46c0      	nop			@ (mov r8, r8)
 800fda8:	ffff0000 	.word	0xffff0000
 800fdac:	080105b9 	.word	0x080105b9
 800fdb0:	08011571 	.word	0x08011571
 800fdb4:	080116b1 	.word	0x080116b1
 800fdb8:	80002000 	.word	0x80002000
 800fdbc:	08010165 	.word	0x08010165

0800fdc0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800fdc0:	b5b0      	push	{r4, r5, r7, lr}
 800fdc2:	b088      	sub	sp, #32
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	0008      	movs	r0, r1
 800fdca:	607a      	str	r2, [r7, #4]
 800fdcc:	0019      	movs	r1, r3
 800fdce:	230a      	movs	r3, #10
 800fdd0:	18fb      	adds	r3, r7, r3
 800fdd2:	1c02      	adds	r2, r0, #0
 800fdd4:	801a      	strh	r2, [r3, #0]
 800fdd6:	2308      	movs	r3, #8
 800fdd8:	18fb      	adds	r3, r7, r3
 800fdda:	1c0a      	adds	r2, r1, #0
 800fddc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2241      	movs	r2, #65	@ 0x41
 800fde2:	5c9b      	ldrb	r3, [r3, r2]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	2b20      	cmp	r3, #32
 800fde8:	d000      	beq.n	800fdec <HAL_I2C_Master_Receive_DMA+0x2c>
 800fdea:	e0dd      	b.n	800ffa8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	699a      	ldr	r2, [r3, #24]
 800fdf2:	2380      	movs	r3, #128	@ 0x80
 800fdf4:	021b      	lsls	r3, r3, #8
 800fdf6:	401a      	ands	r2, r3
 800fdf8:	2380      	movs	r3, #128	@ 0x80
 800fdfa:	021b      	lsls	r3, r3, #8
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d101      	bne.n	800fe04 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800fe00:	2302      	movs	r3, #2
 800fe02:	e0d2      	b.n	800ffaa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2240      	movs	r2, #64	@ 0x40
 800fe08:	5c9b      	ldrb	r3, [r3, r2]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d101      	bne.n	800fe12 <HAL_I2C_Master_Receive_DMA+0x52>
 800fe0e:	2302      	movs	r3, #2
 800fe10:	e0cb      	b.n	800ffaa <HAL_I2C_Master_Receive_DMA+0x1ea>
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2240      	movs	r2, #64	@ 0x40
 800fe16:	2101      	movs	r1, #1
 800fe18:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2241      	movs	r2, #65	@ 0x41
 800fe1e:	2122      	movs	r1, #34	@ 0x22
 800fe20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2242      	movs	r2, #66	@ 0x42
 800fe26:	2110      	movs	r1, #16
 800fe28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2208      	movs	r2, #8
 800fe3a:	18ba      	adds	r2, r7, r2
 800fe3c:	8812      	ldrh	r2, [r2, #0]
 800fe3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	4a5c      	ldr	r2, [pc, #368]	@ (800ffb4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800fe44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	4a5b      	ldr	r2, [pc, #364]	@ (800ffb8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800fe4a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	2bff      	cmp	r3, #255	@ 0xff
 800fe54:	d906      	bls.n	800fe64 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	22ff      	movs	r2, #255	@ 0xff
 800fe5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fe5c:	2380      	movs	r3, #128	@ 0x80
 800fe5e:	045b      	lsls	r3, r3, #17
 800fe60:	617b      	str	r3, [r7, #20]
 800fe62:	e007      	b.n	800fe74 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fe6e:	2380      	movs	r3, #128	@ 0x80
 800fe70:	049b      	lsls	r3, r3, #18
 800fe72:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d100      	bne.n	800fe7e <HAL_I2C_Master_Receive_DMA+0xbe>
 800fe7c:	e078      	b.n	800ff70 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d023      	beq.n	800fece <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe8a:	4a4c      	ldr	r2, [pc, #304]	@ (800ffbc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800fe8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe92:	4a4b      	ldr	r2, [pc, #300]	@ (800ffc0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800fe94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fea2:	2200      	movs	r2, #0
 800fea4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	3324      	adds	r3, #36	@ 0x24
 800feb0:	0019      	movs	r1, r3
 800feb2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800feb8:	2513      	movs	r5, #19
 800feba:	197c      	adds	r4, r7, r5
 800febc:	f7fe fe5c 	bl	800eb78 <HAL_DMA_Start_IT>
 800fec0:	0003      	movs	r3, r0
 800fec2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fec4:	197b      	adds	r3, r7, r5
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d13d      	bne.n	800ff48 <HAL_I2C_Master_Receive_DMA+0x188>
 800fecc:	e013      	b.n	800fef6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2241      	movs	r2, #65	@ 0x41
 800fed2:	2120      	movs	r1, #32
 800fed4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2242      	movs	r2, #66	@ 0x42
 800feda:	2100      	movs	r1, #0
 800fedc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fee2:	2280      	movs	r2, #128	@ 0x80
 800fee4:	431a      	orrs	r2, r3
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2240      	movs	r2, #64	@ 0x40
 800feee:	2100      	movs	r1, #0
 800fef0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fef2:	2301      	movs	r3, #1
 800fef4:	e059      	b.n	800ffaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	697c      	ldr	r4, [r7, #20]
 800fefe:	230a      	movs	r3, #10
 800ff00:	18fb      	adds	r3, r7, r3
 800ff02:	8819      	ldrh	r1, [r3, #0]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	4b2f      	ldr	r3, [pc, #188]	@ (800ffc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	0023      	movs	r3, r4
 800ff0c:	f001 fe5a 	bl	8011bc4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2240      	movs	r2, #64	@ 0x40
 800ff26:	2100      	movs	r1, #0
 800ff28:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2110      	movs	r1, #16
 800ff2e:	0018      	movs	r0, r3
 800ff30:	f001 fe82 	bl	8011c38 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	2180      	movs	r1, #128	@ 0x80
 800ff40:	0209      	lsls	r1, r1, #8
 800ff42:	430a      	orrs	r2, r1
 800ff44:	601a      	str	r2, [r3, #0]
 800ff46:	e02d      	b.n	800ffa4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2241      	movs	r2, #65	@ 0x41
 800ff4c:	2120      	movs	r1, #32
 800ff4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	2242      	movs	r2, #66	@ 0x42
 800ff54:	2100      	movs	r1, #0
 800ff56:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff5c:	2210      	movs	r2, #16
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	2240      	movs	r2, #64	@ 0x40
 800ff68:	2100      	movs	r1, #0
 800ff6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e01c      	b.n	800ffaa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	4a15      	ldr	r2, [pc, #84]	@ (800ffc8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ff74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff7a:	b2da      	uxtb	r2, r3
 800ff7c:	2380      	movs	r3, #128	@ 0x80
 800ff7e:	049c      	lsls	r4, r3, #18
 800ff80:	230a      	movs	r3, #10
 800ff82:	18fb      	adds	r3, r7, r3
 800ff84:	8819      	ldrh	r1, [r3, #0]
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	0023      	movs	r3, r4
 800ff8e:	f001 fe19 	bl	8011bc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	2240      	movs	r2, #64	@ 0x40
 800ff96:	2100      	movs	r1, #0
 800ff98:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2101      	movs	r1, #1
 800ff9e:	0018      	movs	r0, r3
 800ffa0:	f001 fe4a 	bl	8011c38 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	e000      	b.n	800ffaa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ffa8:	2302      	movs	r3, #2
  }
}
 800ffaa:	0018      	movs	r0, r3
 800ffac:	46bd      	mov	sp, r7
 800ffae:	b006      	add	sp, #24
 800ffb0:	bdb0      	pop	{r4, r5, r7, pc}
 800ffb2:	46c0      	nop			@ (mov r8, r8)
 800ffb4:	ffff0000 	.word	0xffff0000
 800ffb8:	080105b9 	.word	0x080105b9
 800ffbc:	08011611 	.word	0x08011611
 800ffc0:	080116b1 	.word	0x080116b1
 800ffc4:	80002400 	.word	0x80002400
 800ffc8:	08010165 	.word	0x08010165

0800ffcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b084      	sub	sp, #16
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	699b      	ldr	r3, [r3, #24]
 800ffda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d005      	beq.n	800fff8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff0:	68ba      	ldr	r2, [r7, #8]
 800fff2:	68f9      	ldr	r1, [r7, #12]
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	4798      	blx	r3
  }
}
 800fff8:	46c0      	nop			@ (mov r8, r8)
 800fffa:	46bd      	mov	sp, r7
 800fffc:	b004      	add	sp, #16
 800fffe:	bd80      	pop	{r7, pc}

08010000 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010018:	697a      	ldr	r2, [r7, #20]
 801001a:	2380      	movs	r3, #128	@ 0x80
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	4013      	ands	r3, r2
 8010020:	d00e      	beq.n	8010040 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	2280      	movs	r2, #128	@ 0x80
 8010026:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010028:	d00a      	beq.n	8010040 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801002e:	2201      	movs	r2, #1
 8010030:	431a      	orrs	r2, r3
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2280      	movs	r2, #128	@ 0x80
 801003c:	0052      	lsls	r2, r2, #1
 801003e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010040:	697a      	ldr	r2, [r7, #20]
 8010042:	2380      	movs	r3, #128	@ 0x80
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	4013      	ands	r3, r2
 8010048:	d00e      	beq.n	8010068 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	2280      	movs	r2, #128	@ 0x80
 801004e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010050:	d00a      	beq.n	8010068 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010056:	2208      	movs	r2, #8
 8010058:	431a      	orrs	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2280      	movs	r2, #128	@ 0x80
 8010064:	00d2      	lsls	r2, r2, #3
 8010066:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010068:	697a      	ldr	r2, [r7, #20]
 801006a:	2380      	movs	r3, #128	@ 0x80
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	4013      	ands	r3, r2
 8010070:	d00e      	beq.n	8010090 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	2280      	movs	r2, #128	@ 0x80
 8010076:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010078:	d00a      	beq.n	8010090 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801007e:	2202      	movs	r2, #2
 8010080:	431a      	orrs	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2280      	movs	r2, #128	@ 0x80
 801008c:	0092      	lsls	r2, r2, #2
 801008e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010094:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	220b      	movs	r2, #11
 801009a:	4013      	ands	r3, r2
 801009c:	d005      	beq.n	80100aa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	0011      	movs	r1, r2
 80100a4:	0018      	movs	r0, r3
 80100a6:	f001 f915 	bl	80112d4 <I2C_ITError>
  }
}
 80100aa:	46c0      	nop			@ (mov r8, r8)
 80100ac:	46bd      	mov	sp, r7
 80100ae:	b006      	add	sp, #24
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b082      	sub	sp, #8
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80100ba:	46c0      	nop			@ (mov r8, r8)
 80100bc:	46bd      	mov	sp, r7
 80100be:	b002      	add	sp, #8
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b082      	sub	sp, #8
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80100ca:	46c0      	nop			@ (mov r8, r8)
 80100cc:	46bd      	mov	sp, r7
 80100ce:	b002      	add	sp, #8
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80100da:	46c0      	nop			@ (mov r8, r8)
 80100dc:	46bd      	mov	sp, r7
 80100de:	b002      	add	sp, #8
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b082      	sub	sp, #8
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80100ea:	46c0      	nop			@ (mov r8, r8)
 80100ec:	46bd      	mov	sp, r7
 80100ee:	b002      	add	sp, #8
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	0008      	movs	r0, r1
 80100fc:	0011      	movs	r1, r2
 80100fe:	1cfb      	adds	r3, r7, #3
 8010100:	1c02      	adds	r2, r0, #0
 8010102:	701a      	strb	r2, [r3, #0]
 8010104:	003b      	movs	r3, r7
 8010106:	1c0a      	adds	r2, r1, #0
 8010108:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801010a:	46c0      	nop			@ (mov r8, r8)
 801010c:	46bd      	mov	sp, r7
 801010e:	b002      	add	sp, #8
 8010110:	bd80      	pop	{r7, pc}

08010112 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010112:	b580      	push	{r7, lr}
 8010114:	b082      	sub	sp, #8
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 801011a:	46c0      	nop			@ (mov r8, r8)
 801011c:	46bd      	mov	sp, r7
 801011e:	b002      	add	sp, #8
 8010120:	bd80      	pop	{r7, pc}

08010122 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010122:	b580      	push	{r7, lr}
 8010124:	b082      	sub	sp, #8
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 801012a:	46c0      	nop			@ (mov r8, r8)
 801012c:	46bd      	mov	sp, r7
 801012e:	b002      	add	sp, #8
 8010130:	bd80      	pop	{r7, pc}

08010132 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b082      	sub	sp, #8
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 801013a:	46c0      	nop			@ (mov r8, r8)
 801013c:	46bd      	mov	sp, r7
 801013e:	b002      	add	sp, #8
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 801014a:	46c0      	nop			@ (mov r8, r8)
 801014c:	46bd      	mov	sp, r7
 801014e:	b002      	add	sp, #8
 8010150:	bd80      	pop	{r7, pc}

08010152 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b082      	sub	sp, #8
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 801015a:	46c0      	nop			@ (mov r8, r8)
 801015c:	46bd      	mov	sp, r7
 801015e:	b002      	add	sp, #8
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010164:	b590      	push	{r4, r7, lr}
 8010166:	b089      	sub	sp, #36	@ 0x24
 8010168:	af02      	add	r7, sp, #8
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2240      	movs	r2, #64	@ 0x40
 8010178:	5c9b      	ldrb	r3, [r3, r2]
 801017a:	2b01      	cmp	r3, #1
 801017c:	d101      	bne.n	8010182 <I2C_Master_ISR_IT+0x1e>
 801017e:	2302      	movs	r3, #2
 8010180:	e113      	b.n	80103aa <I2C_Master_ISR_IT+0x246>
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	2240      	movs	r2, #64	@ 0x40
 8010186:	2101      	movs	r1, #1
 8010188:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	2210      	movs	r2, #16
 801018e:	4013      	ands	r3, r2
 8010190:	d012      	beq.n	80101b8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2210      	movs	r2, #16
 8010196:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010198:	d00e      	beq.n	80101b8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2210      	movs	r2, #16
 80101a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101a6:	2204      	movs	r2, #4
 80101a8:	431a      	orrs	r2, r3
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	0018      	movs	r0, r3
 80101b2:	f001 f9ba 	bl	801152a <I2C_Flush_TXDR>
 80101b6:	e0e5      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	2204      	movs	r2, #4
 80101bc:	4013      	ands	r3, r2
 80101be:	d021      	beq.n	8010204 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2204      	movs	r2, #4
 80101c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80101c6:	d01d      	beq.n	8010204 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	2204      	movs	r2, #4
 80101cc:	4393      	bics	r3, r2
 80101ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101da:	b2d2      	uxtb	r2, r2
 80101dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101e2:	1c5a      	adds	r2, r3, #1
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101ec:	3b01      	subs	r3, #1
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101f8:	b29b      	uxth	r3, r3
 80101fa:	3b01      	subs	r3, #1
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010202:	e0bf      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	2202      	movs	r2, #2
 8010208:	4013      	ands	r3, r2
 801020a:	d01c      	beq.n	8010246 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2202      	movs	r2, #2
 8010210:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010212:	d018      	beq.n	8010246 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010218:	781a      	ldrb	r2, [r3, #0]
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010224:	1c5a      	adds	r2, r3, #1
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801022e:	3b01      	subs	r3, #1
 8010230:	b29a      	uxth	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801023a:	b29b      	uxth	r3, r3
 801023c:	3b01      	subs	r3, #1
 801023e:	b29a      	uxth	r2, r3
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010244:	e09e      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2280      	movs	r2, #128	@ 0x80
 801024a:	4013      	ands	r3, r2
 801024c:	d100      	bne.n	8010250 <I2C_Master_ISR_IT+0xec>
 801024e:	e069      	b.n	8010324 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2240      	movs	r2, #64	@ 0x40
 8010254:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010256:	d065      	beq.n	8010324 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801025c:	b29b      	uxth	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d04a      	beq.n	80102f8 <I2C_Master_ISR_IT+0x194>
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010266:	2b00      	cmp	r3, #0
 8010268:	d146      	bne.n	80102f8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	b29a      	uxth	r2, r3
 8010272:	2112      	movs	r1, #18
 8010274:	187b      	adds	r3, r7, r1
 8010276:	0592      	lsls	r2, r2, #22
 8010278:	0d92      	lsrs	r2, r2, #22
 801027a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010280:	b29b      	uxth	r3, r3
 8010282:	2bff      	cmp	r3, #255	@ 0xff
 8010284:	d910      	bls.n	80102a8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	22ff      	movs	r2, #255	@ 0xff
 801028a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010290:	b2da      	uxtb	r2, r3
 8010292:	2380      	movs	r3, #128	@ 0x80
 8010294:	045c      	lsls	r4, r3, #17
 8010296:	187b      	adds	r3, r7, r1
 8010298:	8819      	ldrh	r1, [r3, #0]
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	2300      	movs	r3, #0
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	0023      	movs	r3, r4
 80102a2:	f001 fc8f 	bl	8011bc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102a6:	e03c      	b.n	8010322 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102b6:	4a3f      	ldr	r2, [pc, #252]	@ (80103b4 <I2C_Master_ISR_IT+0x250>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d00e      	beq.n	80102da <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102c0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80102c6:	2312      	movs	r3, #18
 80102c8:	18fb      	adds	r3, r7, r3
 80102ca:	8819      	ldrh	r1, [r3, #0]
 80102cc:	68f8      	ldr	r0, [r7, #12]
 80102ce:	2300      	movs	r3, #0
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	0023      	movs	r3, r4
 80102d4:	f001 fc76 	bl	8011bc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102d8:	e023      	b.n	8010322 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	2380      	movs	r3, #128	@ 0x80
 80102e2:	049c      	lsls	r4, r3, #18
 80102e4:	2312      	movs	r3, #18
 80102e6:	18fb      	adds	r3, r7, r3
 80102e8:	8819      	ldrh	r1, [r3, #0]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	2300      	movs	r3, #0
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	0023      	movs	r3, r4
 80102f2:	f001 fc67 	bl	8011bc4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102f6:	e014      	b.n	8010322 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	685a      	ldr	r2, [r3, #4]
 80102fe:	2380      	movs	r3, #128	@ 0x80
 8010300:	049b      	lsls	r3, r3, #18
 8010302:	401a      	ands	r2, r3
 8010304:	2380      	movs	r3, #128	@ 0x80
 8010306:	049b      	lsls	r3, r3, #18
 8010308:	429a      	cmp	r2, r3
 801030a:	d004      	beq.n	8010316 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	0018      	movs	r0, r3
 8010310:	f000 fcf4 	bl	8010cfc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010314:	e036      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2140      	movs	r1, #64	@ 0x40
 801031a:	0018      	movs	r0, r3
 801031c:	f000 ffda 	bl	80112d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010320:	e030      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
 8010322:	e02f      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	2240      	movs	r2, #64	@ 0x40
 8010328:	4013      	ands	r3, r2
 801032a:	d02b      	beq.n	8010384 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2240      	movs	r2, #64	@ 0x40
 8010330:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010332:	d027      	beq.n	8010384 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010338:	b29b      	uxth	r3, r3
 801033a:	2b00      	cmp	r3, #0
 801033c:	d11d      	bne.n	801037a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685a      	ldr	r2, [r3, #4]
 8010344:	2380      	movs	r3, #128	@ 0x80
 8010346:	049b      	lsls	r3, r3, #18
 8010348:	401a      	ands	r2, r3
 801034a:	2380      	movs	r3, #128	@ 0x80
 801034c:	049b      	lsls	r3, r3, #18
 801034e:	429a      	cmp	r2, r3
 8010350:	d018      	beq.n	8010384 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010356:	4a17      	ldr	r2, [pc, #92]	@ (80103b4 <I2C_Master_ISR_IT+0x250>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d109      	bne.n	8010370 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2180      	movs	r1, #128	@ 0x80
 8010368:	01c9      	lsls	r1, r1, #7
 801036a:	430a      	orrs	r2, r1
 801036c:	605a      	str	r2, [r3, #4]
 801036e:	e009      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	0018      	movs	r0, r3
 8010374:	f000 fcc2 	bl	8010cfc <I2C_ITMasterSeqCplt>
 8010378:	e004      	b.n	8010384 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2140      	movs	r1, #64	@ 0x40
 801037e:	0018      	movs	r0, r3
 8010380:	f000 ffa8 	bl	80112d4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	2220      	movs	r2, #32
 8010388:	4013      	ands	r3, r2
 801038a:	d009      	beq.n	80103a0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2220      	movs	r2, #32
 8010390:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010392:	d005      	beq.n	80103a0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010394:	697a      	ldr	r2, [r7, #20]
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	0011      	movs	r1, r2
 801039a:	0018      	movs	r0, r3
 801039c:	f000 fd54 	bl	8010e48 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2240      	movs	r2, #64	@ 0x40
 80103a4:	2100      	movs	r1, #0
 80103a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80103a8:	2300      	movs	r3, #0
}
 80103aa:	0018      	movs	r0, r3
 80103ac:	46bd      	mov	sp, r7
 80103ae:	b007      	add	sp, #28
 80103b0:	bd90      	pop	{r4, r7, pc}
 80103b2:	46c0      	nop			@ (mov r8, r8)
 80103b4:	ffff0000 	.word	0xffff0000

080103b8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b086      	sub	sp, #24
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2240      	movs	r2, #64	@ 0x40
 80103d2:	5c9b      	ldrb	r3, [r3, r2]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d101      	bne.n	80103dc <I2C_Slave_ISR_IT+0x24>
 80103d8:	2302      	movs	r3, #2
 80103da:	e0e6      	b.n	80105aa <I2C_Slave_ISR_IT+0x1f2>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	2240      	movs	r2, #64	@ 0x40
 80103e0:	2101      	movs	r1, #1
 80103e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	2220      	movs	r2, #32
 80103e8:	4013      	ands	r3, r2
 80103ea:	d009      	beq.n	8010400 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2220      	movs	r2, #32
 80103f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80103f2:	d005      	beq.n	8010400 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80103f4:	693a      	ldr	r2, [r7, #16]
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	0011      	movs	r1, r2
 80103fa:	0018      	movs	r0, r3
 80103fc:	f000 fdf2 	bl	8010fe4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2210      	movs	r2, #16
 8010404:	4013      	ands	r3, r2
 8010406:	d052      	beq.n	80104ae <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2210      	movs	r2, #16
 801040c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801040e:	d04e      	beq.n	80104ae <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010414:	b29b      	uxth	r3, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	d12d      	bne.n	8010476 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	2241      	movs	r2, #65	@ 0x41
 801041e:	5c9b      	ldrb	r3, [r3, r2]
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b28      	cmp	r3, #40	@ 0x28
 8010424:	d10b      	bne.n	801043e <I2C_Slave_ISR_IT+0x86>
 8010426:	697a      	ldr	r2, [r7, #20]
 8010428:	2380      	movs	r3, #128	@ 0x80
 801042a:	049b      	lsls	r3, r3, #18
 801042c:	429a      	cmp	r2, r3
 801042e:	d106      	bne.n	801043e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8010430:	693a      	ldr	r2, [r7, #16]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	0011      	movs	r1, r2
 8010436:	0018      	movs	r0, r3
 8010438:	f000 fef4 	bl	8011224 <I2C_ITListenCplt>
 801043c:	e036      	b.n	80104ac <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2241      	movs	r2, #65	@ 0x41
 8010442:	5c9b      	ldrb	r3, [r3, r2]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b29      	cmp	r3, #41	@ 0x29
 8010448:	d110      	bne.n	801046c <I2C_Slave_ISR_IT+0xb4>
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	4a59      	ldr	r2, [pc, #356]	@ (80105b4 <I2C_Slave_ISR_IT+0x1fc>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d00c      	beq.n	801046c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2210      	movs	r2, #16
 8010458:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	0018      	movs	r0, r3
 801045e:	f001 f864 	bl	801152a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	0018      	movs	r0, r3
 8010466:	f000 fc8b 	bl	8010d80 <I2C_ITSlaveSeqCplt>
 801046a:	e01f      	b.n	80104ac <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2210      	movs	r2, #16
 8010472:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010474:	e091      	b.n	801059a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	2210      	movs	r2, #16
 801047c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010482:	2204      	movs	r2, #4
 8010484:	431a      	orrs	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d005      	beq.n	801049c <I2C_Slave_ISR_IT+0xe4>
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	2380      	movs	r3, #128	@ 0x80
 8010494:	045b      	lsls	r3, r3, #17
 8010496:	429a      	cmp	r2, r3
 8010498:	d000      	beq.n	801049c <I2C_Slave_ISR_IT+0xe4>
 801049a:	e07e      	b.n	801059a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	0011      	movs	r1, r2
 80104a4:	0018      	movs	r0, r3
 80104a6:	f000 ff15 	bl	80112d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80104aa:	e076      	b.n	801059a <I2C_Slave_ISR_IT+0x1e2>
 80104ac:	e075      	b.n	801059a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	2204      	movs	r2, #4
 80104b2:	4013      	ands	r3, r2
 80104b4:	d02f      	beq.n	8010516 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2204      	movs	r2, #4
 80104ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80104bc:	d02b      	beq.n	8010516 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d018      	beq.n	80104fa <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104d2:	b2d2      	uxtb	r2, r2
 80104d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104da:	1c5a      	adds	r2, r3, #1
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104e4:	3b01      	subs	r3, #1
 80104e6:	b29a      	uxth	r2, r3
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	3b01      	subs	r3, #1
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104fe:	b29b      	uxth	r3, r3
 8010500:	2b00      	cmp	r3, #0
 8010502:	d14c      	bne.n	801059e <I2C_Slave_ISR_IT+0x1e6>
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	4a2b      	ldr	r2, [pc, #172]	@ (80105b4 <I2C_Slave_ISR_IT+0x1fc>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d048      	beq.n	801059e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	0018      	movs	r0, r3
 8010510:	f000 fc36 	bl	8010d80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8010514:	e043      	b.n	801059e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	2208      	movs	r2, #8
 801051a:	4013      	ands	r3, r2
 801051c:	d00a      	beq.n	8010534 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2208      	movs	r2, #8
 8010522:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010524:	d006      	beq.n	8010534 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8010526:	693a      	ldr	r2, [r7, #16]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	0011      	movs	r1, r2
 801052c:	0018      	movs	r0, r3
 801052e:	f000 fb41 	bl	8010bb4 <I2C_ITAddrCplt>
 8010532:	e035      	b.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	2202      	movs	r2, #2
 8010538:	4013      	ands	r3, r2
 801053a:	d031      	beq.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2202      	movs	r2, #2
 8010540:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010542:	d02d      	beq.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010548:	b29b      	uxth	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d018      	beq.n	8010580 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010552:	781a      	ldrb	r2, [r3, #0]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010568:	b29b      	uxth	r3, r3
 801056a:	3b01      	subs	r3, #1
 801056c:	b29a      	uxth	r2, r3
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010576:	3b01      	subs	r3, #1
 8010578:	b29a      	uxth	r2, r3
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801057e:	e00f      	b.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	2380      	movs	r3, #128	@ 0x80
 8010584:	045b      	lsls	r3, r3, #17
 8010586:	429a      	cmp	r2, r3
 8010588:	d002      	beq.n	8010590 <I2C_Slave_ISR_IT+0x1d8>
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d107      	bne.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	0018      	movs	r0, r3
 8010594:	f000 fbf4 	bl	8010d80 <I2C_ITSlaveSeqCplt>
 8010598:	e002      	b.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801059a:	46c0      	nop			@ (mov r8, r8)
 801059c:	e000      	b.n	80105a0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801059e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2240      	movs	r2, #64	@ 0x40
 80105a4:	2100      	movs	r1, #0
 80105a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	0018      	movs	r0, r3
 80105ac:	46bd      	mov	sp, r7
 80105ae:	b006      	add	sp, #24
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	46c0      	nop			@ (mov r8, r8)
 80105b4:	ffff0000 	.word	0xffff0000

080105b8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80105b8:	b590      	push	{r4, r7, lr}
 80105ba:	b089      	sub	sp, #36	@ 0x24
 80105bc:	af02      	add	r7, sp, #8
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2240      	movs	r2, #64	@ 0x40
 80105c8:	5c9b      	ldrb	r3, [r3, r2]
 80105ca:	2b01      	cmp	r3, #1
 80105cc:	d101      	bne.n	80105d2 <I2C_Master_ISR_DMA+0x1a>
 80105ce:	2302      	movs	r3, #2
 80105d0:	e0e7      	b.n	80107a2 <I2C_Master_ISR_DMA+0x1ea>
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2240      	movs	r2, #64	@ 0x40
 80105d6:	2101      	movs	r1, #1
 80105d8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	2210      	movs	r2, #16
 80105de:	4013      	ands	r3, r2
 80105e0:	d017      	beq.n	8010612 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2210      	movs	r2, #16
 80105e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80105e8:	d013      	beq.n	8010612 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2210      	movs	r2, #16
 80105f0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105f6:	2204      	movs	r2, #4
 80105f8:	431a      	orrs	r2, r3
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2120      	movs	r1, #32
 8010602:	0018      	movs	r0, r3
 8010604:	f001 fb18 	bl	8011c38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	0018      	movs	r0, r3
 801060c:	f000 ff8d 	bl	801152a <I2C_Flush_TXDR>
 8010610:	e0c2      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	2280      	movs	r2, #128	@ 0x80
 8010616:	4013      	ands	r3, r2
 8010618:	d100      	bne.n	801061c <I2C_Master_ISR_DMA+0x64>
 801061a:	e07c      	b.n	8010716 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2240      	movs	r2, #64	@ 0x40
 8010620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010622:	d100      	bne.n	8010626 <I2C_Master_ISR_DMA+0x6e>
 8010624:	e077      	b.n	8010716 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2140      	movs	r1, #64	@ 0x40
 8010632:	438a      	bics	r2, r1
 8010634:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801063a:	b29b      	uxth	r3, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d055      	beq.n	80106ec <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	685b      	ldr	r3, [r3, #4]
 8010646:	b29a      	uxth	r2, r3
 8010648:	2312      	movs	r3, #18
 801064a:	18fb      	adds	r3, r7, r3
 801064c:	0592      	lsls	r2, r2, #22
 801064e:	0d92      	lsrs	r2, r2, #22
 8010650:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010656:	b29b      	uxth	r3, r3
 8010658:	2bff      	cmp	r3, #255	@ 0xff
 801065a:	d906      	bls.n	801066a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	22ff      	movs	r2, #255	@ 0xff
 8010660:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8010662:	2380      	movs	r3, #128	@ 0x80
 8010664:	045b      	lsls	r3, r3, #17
 8010666:	617b      	str	r3, [r7, #20]
 8010668:	e010      	b.n	801068c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801066e:	b29a      	uxth	r2, r3
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010678:	4a4c      	ldr	r2, [pc, #304]	@ (80107ac <I2C_Master_ISR_DMA+0x1f4>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d003      	beq.n	8010686 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010682:	617b      	str	r3, [r7, #20]
 8010684:	e002      	b.n	801068c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010686:	2380      	movs	r3, #128	@ 0x80
 8010688:	049b      	lsls	r3, r3, #18
 801068a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010690:	b2da      	uxtb	r2, r3
 8010692:	697c      	ldr	r4, [r7, #20]
 8010694:	2312      	movs	r3, #18
 8010696:	18fb      	adds	r3, r7, r3
 8010698:	8819      	ldrh	r1, [r3, #0]
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	2300      	movs	r3, #0
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	0023      	movs	r3, r4
 80106a2:	f001 fa8f 	bl	8011bc4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	2241      	movs	r2, #65	@ 0x41
 80106bc:	5c9b      	ldrb	r3, [r3, r2]
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b22      	cmp	r3, #34	@ 0x22
 80106c2:	d109      	bne.n	80106d8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2180      	movs	r1, #128	@ 0x80
 80106d0:	0209      	lsls	r1, r1, #8
 80106d2:	430a      	orrs	r2, r1
 80106d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80106d6:	e05f      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2180      	movs	r1, #128	@ 0x80
 80106e4:	01c9      	lsls	r1, r1, #7
 80106e6:	430a      	orrs	r2, r1
 80106e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80106ea:	e055      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	685a      	ldr	r2, [r3, #4]
 80106f2:	2380      	movs	r3, #128	@ 0x80
 80106f4:	049b      	lsls	r3, r3, #18
 80106f6:	401a      	ands	r2, r3
 80106f8:	2380      	movs	r3, #128	@ 0x80
 80106fa:	049b      	lsls	r3, r3, #18
 80106fc:	429a      	cmp	r2, r3
 80106fe:	d004      	beq.n	801070a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	0018      	movs	r0, r3
 8010704:	f000 fafa 	bl	8010cfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010708:	e046      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2140      	movs	r1, #64	@ 0x40
 801070e:	0018      	movs	r0, r3
 8010710:	f000 fde0 	bl	80112d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010714:	e040      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	2240      	movs	r2, #64	@ 0x40
 801071a:	4013      	ands	r3, r2
 801071c:	d02c      	beq.n	8010778 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2240      	movs	r2, #64	@ 0x40
 8010722:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010724:	d028      	beq.n	8010778 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801072a:	b29b      	uxth	r3, r3
 801072c:	2b00      	cmp	r3, #0
 801072e:	d11d      	bne.n	801076c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	685a      	ldr	r2, [r3, #4]
 8010736:	2380      	movs	r3, #128	@ 0x80
 8010738:	049b      	lsls	r3, r3, #18
 801073a:	401a      	ands	r2, r3
 801073c:	2380      	movs	r3, #128	@ 0x80
 801073e:	049b      	lsls	r3, r3, #18
 8010740:	429a      	cmp	r2, r3
 8010742:	d028      	beq.n	8010796 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010748:	4a18      	ldr	r2, [pc, #96]	@ (80107ac <I2C_Master_ISR_DMA+0x1f4>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d109      	bne.n	8010762 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	685a      	ldr	r2, [r3, #4]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2180      	movs	r1, #128	@ 0x80
 801075a:	01c9      	lsls	r1, r1, #7
 801075c:	430a      	orrs	r2, r1
 801075e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8010760:	e019      	b.n	8010796 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	0018      	movs	r0, r3
 8010766:	f000 fac9 	bl	8010cfc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801076a:	e014      	b.n	8010796 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2140      	movs	r1, #64	@ 0x40
 8010770:	0018      	movs	r0, r3
 8010772:	f000 fdaf 	bl	80112d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010776:	e00e      	b.n	8010796 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	2220      	movs	r2, #32
 801077c:	4013      	ands	r3, r2
 801077e:	d00b      	beq.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2220      	movs	r2, #32
 8010784:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010786:	d007      	beq.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010788:	68ba      	ldr	r2, [r7, #8]
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	0011      	movs	r1, r2
 801078e:	0018      	movs	r0, r3
 8010790:	f000 fb5a 	bl	8010e48 <I2C_ITMasterCplt>
 8010794:	e000      	b.n	8010798 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8010796:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2240      	movs	r2, #64	@ 0x40
 801079c:	2100      	movs	r1, #0
 801079e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	0018      	movs	r0, r3
 80107a4:	46bd      	mov	sp, r7
 80107a6:	b007      	add	sp, #28
 80107a8:	bd90      	pop	{r4, r7, pc}
 80107aa:	46c0      	nop			@ (mov r8, r8)
 80107ac:	ffff0000 	.word	0xffff0000

080107b0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80107b0:	b590      	push	{r4, r7, lr}
 80107b2:	b089      	sub	sp, #36	@ 0x24
 80107b4:	af02      	add	r7, sp, #8
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80107bc:	4b88      	ldr	r3, [pc, #544]	@ (80109e0 <I2C_Mem_ISR_DMA+0x230>)
 80107be:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2240      	movs	r2, #64	@ 0x40
 80107c4:	5c9b      	ldrb	r3, [r3, r2]
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d101      	bne.n	80107ce <I2C_Mem_ISR_DMA+0x1e>
 80107ca:	2302      	movs	r3, #2
 80107cc:	e104      	b.n	80109d8 <I2C_Mem_ISR_DMA+0x228>
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2240      	movs	r2, #64	@ 0x40
 80107d2:	2101      	movs	r1, #1
 80107d4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	2210      	movs	r2, #16
 80107da:	4013      	ands	r3, r2
 80107dc:	d017      	beq.n	801080e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2210      	movs	r2, #16
 80107e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80107e4:	d013      	beq.n	801080e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	2210      	movs	r2, #16
 80107ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107f2:	2204      	movs	r2, #4
 80107f4:	431a      	orrs	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2120      	movs	r1, #32
 80107fe:	0018      	movs	r0, r3
 8010800:	f001 fa1a 	bl	8011c38 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	0018      	movs	r0, r3
 8010808:	f000 fe8f 	bl	801152a <I2C_Flush_TXDR>
 801080c:	e0df      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2202      	movs	r2, #2
 8010812:	4013      	ands	r3, r2
 8010814:	d00d      	beq.n	8010832 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2202      	movs	r2, #2
 801081a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801081c:	d009      	beq.n	8010832 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	68fa      	ldr	r2, [r7, #12]
 8010824:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8010826:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2201      	movs	r2, #1
 801082c:	4252      	negs	r2, r2
 801082e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010830:	e0cd      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2280      	movs	r2, #128	@ 0x80
 8010836:	4013      	ands	r3, r2
 8010838:	d05e      	beq.n	80108f8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2240      	movs	r2, #64	@ 0x40
 801083e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8010840:	d05a      	beq.n	80108f8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2110      	movs	r1, #16
 8010846:	0018      	movs	r0, r3
 8010848:	f001 f9f6 	bl	8011c38 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010850:	b29b      	uxth	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	d04a      	beq.n	80108ec <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801085a:	b29b      	uxth	r3, r3
 801085c:	2bff      	cmp	r3, #255	@ 0xff
 801085e:	d910      	bls.n	8010882 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	22ff      	movs	r2, #255	@ 0xff
 8010864:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801086a:	b299      	uxth	r1, r3
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010870:	b2da      	uxtb	r2, r3
 8010872:	2380      	movs	r3, #128	@ 0x80
 8010874:	045b      	lsls	r3, r3, #17
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	2400      	movs	r4, #0
 801087a:	9400      	str	r4, [sp, #0]
 801087c:	f001 f9a2 	bl	8011bc4 <I2C_TransferConfig>
 8010880:	e011      	b.n	80108a6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010886:	b29a      	uxth	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010890:	b299      	uxth	r1, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010896:	b2da      	uxtb	r2, r3
 8010898:	2380      	movs	r3, #128	@ 0x80
 801089a:	049b      	lsls	r3, r3, #18
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	2400      	movs	r4, #0
 80108a0:	9400      	str	r4, [sp, #0]
 80108a2:	f001 f98f 	bl	8011bc4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2241      	movs	r2, #65	@ 0x41
 80108bc:	5c9b      	ldrb	r3, [r3, r2]
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b22      	cmp	r3, #34	@ 0x22
 80108c2:	d109      	bne.n	80108d8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2180      	movs	r1, #128	@ 0x80
 80108d0:	0209      	lsls	r1, r1, #8
 80108d2:	430a      	orrs	r2, r1
 80108d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80108d6:	e07a      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	2180      	movs	r1, #128	@ 0x80
 80108e4:	01c9      	lsls	r1, r1, #7
 80108e6:	430a      	orrs	r2, r1
 80108e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80108ea:	e070      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2140      	movs	r1, #64	@ 0x40
 80108f0:	0018      	movs	r0, r3
 80108f2:	f000 fcef 	bl	80112d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80108f6:	e06a      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	2240      	movs	r2, #64	@ 0x40
 80108fc:	4013      	ands	r3, r2
 80108fe:	d058      	beq.n	80109b2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2240      	movs	r2, #64	@ 0x40
 8010904:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010906:	d054      	beq.n	80109b2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2241      	movs	r2, #65	@ 0x41
 801090c:	5c9b      	ldrb	r3, [r3, r2]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	2b22      	cmp	r3, #34	@ 0x22
 8010912:	d101      	bne.n	8010918 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8010914:	4b33      	ldr	r3, [pc, #204]	@ (80109e4 <I2C_Mem_ISR_DMA+0x234>)
 8010916:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801091c:	b29b      	uxth	r3, r3
 801091e:	2bff      	cmp	r3, #255	@ 0xff
 8010920:	d911      	bls.n	8010946 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	22ff      	movs	r2, #255	@ 0xff
 8010926:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801092c:	b299      	uxth	r1, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010932:	b2da      	uxtb	r2, r3
 8010934:	2380      	movs	r3, #128	@ 0x80
 8010936:	045c      	lsls	r4, r3, #17
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	0023      	movs	r3, r4
 8010940:	f001 f940 	bl	8011bc4 <I2C_TransferConfig>
 8010944:	e012      	b.n	801096c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801094a:	b29a      	uxth	r2, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010954:	b299      	uxth	r1, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801095a:	b2da      	uxtb	r2, r3
 801095c:	2380      	movs	r3, #128	@ 0x80
 801095e:	049c      	lsls	r4, r3, #18
 8010960:	68f8      	ldr	r0, [r7, #12]
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	0023      	movs	r3, r4
 8010968:	f001 f92c 	bl	8011bc4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010970:	b29a      	uxth	r2, r3
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	b29a      	uxth	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2241      	movs	r2, #65	@ 0x41
 8010982:	5c9b      	ldrb	r3, [r3, r2]
 8010984:	b2db      	uxtb	r3, r3
 8010986:	2b22      	cmp	r3, #34	@ 0x22
 8010988:	d109      	bne.n	801099e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2180      	movs	r1, #128	@ 0x80
 8010996:	0209      	lsls	r1, r1, #8
 8010998:	430a      	orrs	r2, r1
 801099a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801099c:	e017      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2180      	movs	r1, #128	@ 0x80
 80109aa:	01c9      	lsls	r1, r1, #7
 80109ac:	430a      	orrs	r2, r1
 80109ae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80109b0:	e00d      	b.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	2220      	movs	r2, #32
 80109b6:	4013      	ands	r3, r2
 80109b8:	d009      	beq.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2220      	movs	r2, #32
 80109be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109c0:	d005      	beq.n	80109ce <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80109c2:	68ba      	ldr	r2, [r7, #8]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	0011      	movs	r1, r2
 80109c8:	0018      	movs	r0, r3
 80109ca:	f000 fa3d 	bl	8010e48 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2240      	movs	r2, #64	@ 0x40
 80109d2:	2100      	movs	r1, #0
 80109d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	0018      	movs	r0, r3
 80109da:	46bd      	mov	sp, r7
 80109dc:	b007      	add	sp, #28
 80109de:	bd90      	pop	{r4, r7, pc}
 80109e0:	80002000 	.word	0x80002000
 80109e4:	80002400 	.word	0x80002400

080109e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80109fa:	2300      	movs	r3, #0
 80109fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2240      	movs	r2, #64	@ 0x40
 8010a02:	5c9b      	ldrb	r3, [r3, r2]
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d101      	bne.n	8010a0c <I2C_Slave_ISR_DMA+0x24>
 8010a08:	2302      	movs	r3, #2
 8010a0a:	e0cd      	b.n	8010ba8 <I2C_Slave_ISR_DMA+0x1c0>
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2240      	movs	r2, #64	@ 0x40
 8010a10:	2101      	movs	r1, #1
 8010a12:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2220      	movs	r2, #32
 8010a18:	4013      	ands	r3, r2
 8010a1a:	d009      	beq.n	8010a30 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2220      	movs	r2, #32
 8010a20:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010a22:	d005      	beq.n	8010a30 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8010a24:	68ba      	ldr	r2, [r7, #8]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	0011      	movs	r1, r2
 8010a2a:	0018      	movs	r0, r3
 8010a2c:	f000 fada 	bl	8010fe4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	2210      	movs	r2, #16
 8010a34:	4013      	ands	r3, r2
 8010a36:	d100      	bne.n	8010a3a <I2C_Slave_ISR_DMA+0x52>
 8010a38:	e0a3      	b.n	8010b82 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2210      	movs	r2, #16
 8010a3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010a40:	d100      	bne.n	8010a44 <I2C_Slave_ISR_DMA+0x5c>
 8010a42:	e09e      	b.n	8010b82 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	2380      	movs	r3, #128	@ 0x80
 8010a48:	01db      	lsls	r3, r3, #7
 8010a4a:	4013      	ands	r3, r2
 8010a4c:	d105      	bne.n	8010a5a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	2380      	movs	r3, #128	@ 0x80
 8010a52:	021b      	lsls	r3, r3, #8
 8010a54:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010a56:	d100      	bne.n	8010a5a <I2C_Slave_ISR_DMA+0x72>
 8010a58:	e08c      	b.n	8010b74 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00c      	beq.n	8010a7c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8010a62:	687a      	ldr	r2, [r7, #4]
 8010a64:	2380      	movs	r3, #128	@ 0x80
 8010a66:	021b      	lsls	r3, r3, #8
 8010a68:	4013      	ands	r3, r2
 8010a6a:	d007      	beq.n	8010a7c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00c      	beq.n	8010a9e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	2380      	movs	r3, #128	@ 0x80
 8010a88:	01db      	lsls	r3, r3, #7
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	d007      	beq.n	8010a9e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d101      	bne.n	8010a9e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d12d      	bne.n	8010b00 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2241      	movs	r2, #65	@ 0x41
 8010aa8:	5c9b      	ldrb	r3, [r3, r2]
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	2b28      	cmp	r3, #40	@ 0x28
 8010aae:	d10b      	bne.n	8010ac8 <I2C_Slave_ISR_DMA+0xe0>
 8010ab0:	69ba      	ldr	r2, [r7, #24]
 8010ab2:	2380      	movs	r3, #128	@ 0x80
 8010ab4:	049b      	lsls	r3, r3, #18
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d106      	bne.n	8010ac8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	0011      	movs	r1, r2
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f000 fbaf 	bl	8011224 <I2C_ITListenCplt>
 8010ac6:	e054      	b.n	8010b72 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2241      	movs	r2, #65	@ 0x41
 8010acc:	5c9b      	ldrb	r3, [r3, r2]
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	2b29      	cmp	r3, #41	@ 0x29
 8010ad2:	d110      	bne.n	8010af6 <I2C_Slave_ISR_DMA+0x10e>
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	4a36      	ldr	r2, [pc, #216]	@ (8010bb0 <I2C_Slave_ISR_DMA+0x1c8>)
 8010ad8:	4293      	cmp	r3, r2
 8010ada:	d00c      	beq.n	8010af6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2210      	movs	r2, #16
 8010ae2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	0018      	movs	r0, r3
 8010ae8:	f000 fd1f 	bl	801152a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	0018      	movs	r0, r3
 8010af0:	f000 f946 	bl	8010d80 <I2C_ITSlaveSeqCplt>
 8010af4:	e03d      	b.n	8010b72 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	2210      	movs	r2, #16
 8010afc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010afe:	e03e      	b.n	8010b7e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2210      	movs	r2, #16
 8010b06:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b0c:	2204      	movs	r2, #4
 8010b0e:	431a      	orrs	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010b14:	2317      	movs	r3, #23
 8010b16:	18fb      	adds	r3, r7, r3
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	2141      	movs	r1, #65	@ 0x41
 8010b1c:	5c52      	ldrb	r2, [r2, r1]
 8010b1e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d004      	beq.n	8010b30 <I2C_Slave_ISR_DMA+0x148>
 8010b26:	69ba      	ldr	r2, [r7, #24]
 8010b28:	2380      	movs	r3, #128	@ 0x80
 8010b2a:	045b      	lsls	r3, r3, #17
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d126      	bne.n	8010b7e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010b30:	2217      	movs	r2, #23
 8010b32:	18bb      	adds	r3, r7, r2
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	2b21      	cmp	r3, #33	@ 0x21
 8010b38:	d003      	beq.n	8010b42 <I2C_Slave_ISR_DMA+0x15a>
 8010b3a:	18bb      	adds	r3, r7, r2
 8010b3c:	781b      	ldrb	r3, [r3, #0]
 8010b3e:	2b29      	cmp	r3, #41	@ 0x29
 8010b40:	d103      	bne.n	8010b4a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2221      	movs	r2, #33	@ 0x21
 8010b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b48:	e00b      	b.n	8010b62 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010b4a:	2217      	movs	r2, #23
 8010b4c:	18bb      	adds	r3, r7, r2
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b22      	cmp	r3, #34	@ 0x22
 8010b52:	d003      	beq.n	8010b5c <I2C_Slave_ISR_DMA+0x174>
 8010b54:	18bb      	adds	r3, r7, r2
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b5a:	d102      	bne.n	8010b62 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2222      	movs	r2, #34	@ 0x22
 8010b60:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	0011      	movs	r1, r2
 8010b6a:	0018      	movs	r0, r3
 8010b6c:	f000 fbb2 	bl	80112d4 <I2C_ITError>
      if (treatdmanack == 1U)
 8010b70:	e005      	b.n	8010b7e <I2C_Slave_ISR_DMA+0x196>
 8010b72:	e004      	b.n	8010b7e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2210      	movs	r2, #16
 8010b7a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010b7c:	e00f      	b.n	8010b9e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010b7e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010b80:	e00d      	b.n	8010b9e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2208      	movs	r2, #8
 8010b86:	4013      	ands	r3, r2
 8010b88:	d009      	beq.n	8010b9e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2208      	movs	r2, #8
 8010b8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010b90:	d005      	beq.n	8010b9e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	0011      	movs	r1, r2
 8010b98:	0018      	movs	r0, r3
 8010b9a:	f000 f80b 	bl	8010bb4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2240      	movs	r2, #64	@ 0x40
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	0018      	movs	r0, r3
 8010baa:	46bd      	mov	sp, r7
 8010bac:	b008      	add	sp, #32
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	ffff0000 	.word	0xffff0000

08010bb4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010bb4:	b5b0      	push	{r4, r5, r7, lr}
 8010bb6:	b084      	sub	sp, #16
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2241      	movs	r2, #65	@ 0x41
 8010bc2:	5c9b      	ldrb	r3, [r3, r2]
 8010bc4:	b2db      	uxtb	r3, r3
 8010bc6:	001a      	movs	r2, r3
 8010bc8:	2328      	movs	r3, #40	@ 0x28
 8010bca:	4013      	ands	r3, r2
 8010bcc:	2b28      	cmp	r3, #40	@ 0x28
 8010bce:	d000      	beq.n	8010bd2 <I2C_ITAddrCplt+0x1e>
 8010bd0:	e088      	b.n	8010ce4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	0c1b      	lsrs	r3, r3, #16
 8010bda:	b2da      	uxtb	r2, r3
 8010bdc:	250f      	movs	r5, #15
 8010bde:	197b      	adds	r3, r7, r5
 8010be0:	2101      	movs	r1, #1
 8010be2:	400a      	ands	r2, r1
 8010be4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	699b      	ldr	r3, [r3, #24]
 8010bec:	0c1b      	lsrs	r3, r3, #16
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	200c      	movs	r0, #12
 8010bf2:	183b      	adds	r3, r7, r0
 8010bf4:	21fe      	movs	r1, #254	@ 0xfe
 8010bf6:	400a      	ands	r2, r1
 8010bf8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	689b      	ldr	r3, [r3, #8]
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	240a      	movs	r4, #10
 8010c04:	193b      	adds	r3, r7, r4
 8010c06:	0592      	lsls	r2, r2, #22
 8010c08:	0d92      	lsrs	r2, r2, #22
 8010c0a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	b29a      	uxth	r2, r3
 8010c14:	2308      	movs	r3, #8
 8010c16:	18fb      	adds	r3, r7, r3
 8010c18:	21fe      	movs	r1, #254	@ 0xfe
 8010c1a:	400a      	ands	r2, r1
 8010c1c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d148      	bne.n	8010cb8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010c26:	0021      	movs	r1, r4
 8010c28:	187b      	adds	r3, r7, r1
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	09db      	lsrs	r3, r3, #7
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	183b      	adds	r3, r7, r0
 8010c32:	881b      	ldrh	r3, [r3, #0]
 8010c34:	4053      	eors	r3, r2
 8010c36:	b29b      	uxth	r3, r3
 8010c38:	001a      	movs	r2, r3
 8010c3a:	2306      	movs	r3, #6
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	d120      	bne.n	8010c82 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010c40:	183b      	adds	r3, r7, r0
 8010c42:	187a      	adds	r2, r7, r1
 8010c44:	8812      	ldrh	r2, [r2, #0]
 8010c46:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c4c:	1c5a      	adds	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d14c      	bne.n	8010cf4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2208      	movs	r2, #8
 8010c66:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2240      	movs	r2, #64	@ 0x40
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010c70:	183b      	adds	r3, r7, r0
 8010c72:	881a      	ldrh	r2, [r3, #0]
 8010c74:	197b      	adds	r3, r7, r5
 8010c76:	7819      	ldrb	r1, [r3, #0]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	0018      	movs	r0, r3
 8010c7c:	f7ff fa39 	bl	80100f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010c80:	e038      	b.n	8010cf4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010c82:	240c      	movs	r4, #12
 8010c84:	193b      	adds	r3, r7, r4
 8010c86:	2208      	movs	r2, #8
 8010c88:	18ba      	adds	r2, r7, r2
 8010c8a:	8812      	ldrh	r2, [r2, #0]
 8010c8c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010c8e:	2380      	movs	r3, #128	@ 0x80
 8010c90:	021a      	lsls	r2, r3, #8
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	0011      	movs	r1, r2
 8010c96:	0018      	movs	r0, r3
 8010c98:	f001 f85c 	bl	8011d54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2240      	movs	r2, #64	@ 0x40
 8010ca0:	2100      	movs	r1, #0
 8010ca2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010ca4:	193b      	adds	r3, r7, r4
 8010ca6:	881a      	ldrh	r2, [r3, #0]
 8010ca8:	230f      	movs	r3, #15
 8010caa:	18fb      	adds	r3, r7, r3
 8010cac:	7819      	ldrb	r1, [r3, #0]
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	0018      	movs	r0, r3
 8010cb2:	f7ff fa1e 	bl	80100f2 <HAL_I2C_AddrCallback>
}
 8010cb6:	e01d      	b.n	8010cf4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010cb8:	2380      	movs	r3, #128	@ 0x80
 8010cba:	021a      	lsls	r2, r3, #8
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	0011      	movs	r1, r2
 8010cc0:	0018      	movs	r0, r3
 8010cc2:	f001 f847 	bl	8011d54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2240      	movs	r2, #64	@ 0x40
 8010cca:	2100      	movs	r1, #0
 8010ccc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010cce:	230c      	movs	r3, #12
 8010cd0:	18fb      	adds	r3, r7, r3
 8010cd2:	881a      	ldrh	r2, [r3, #0]
 8010cd4:	230f      	movs	r3, #15
 8010cd6:	18fb      	adds	r3, r7, r3
 8010cd8:	7819      	ldrb	r1, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	0018      	movs	r0, r3
 8010cde:	f7ff fa08 	bl	80100f2 <HAL_I2C_AddrCallback>
}
 8010ce2:	e007      	b.n	8010cf4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2208      	movs	r2, #8
 8010cea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2240      	movs	r2, #64	@ 0x40
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	5499      	strb	r1, [r3, r2]
}
 8010cf4:	46c0      	nop			@ (mov r8, r8)
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	b004      	add	sp, #16
 8010cfa:	bdb0      	pop	{r4, r5, r7, pc}

08010cfc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2242      	movs	r2, #66	@ 0x42
 8010d08:	2100      	movs	r1, #0
 8010d0a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2241      	movs	r2, #65	@ 0x41
 8010d10:	5c9b      	ldrb	r3, [r3, r2]
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	2b21      	cmp	r3, #33	@ 0x21
 8010d16:	d117      	bne.n	8010d48 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2241      	movs	r2, #65	@ 0x41
 8010d1c:	2120      	movs	r1, #32
 8010d1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2211      	movs	r2, #17
 8010d24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2101      	movs	r1, #1
 8010d30:	0018      	movs	r0, r3
 8010d32:	f001 f80f 	bl	8011d54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2240      	movs	r2, #64	@ 0x40
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	0018      	movs	r0, r3
 8010d42:	f7ff f9b6 	bl	80100b2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010d46:	e016      	b.n	8010d76 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2241      	movs	r2, #65	@ 0x41
 8010d4c:	2120      	movs	r1, #32
 8010d4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2212      	movs	r2, #18
 8010d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2102      	movs	r1, #2
 8010d60:	0018      	movs	r0, r3
 8010d62:	f000 fff7 	bl	8011d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2240      	movs	r2, #64	@ 0x40
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	0018      	movs	r0, r3
 8010d72:	f7ff f9a6 	bl	80100c2 <HAL_I2C_MasterRxCpltCallback>
}
 8010d76:	46c0      	nop			@ (mov r8, r8)
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	b002      	add	sp, #8
 8010d7c:	bd80      	pop	{r7, pc}
	...

08010d80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2242      	movs	r2, #66	@ 0x42
 8010d94:	2100      	movs	r1, #0
 8010d96:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	2380      	movs	r3, #128	@ 0x80
 8010d9c:	01db      	lsls	r3, r3, #7
 8010d9e:	4013      	ands	r3, r2
 8010da0:	d008      	beq.n	8010db4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	681a      	ldr	r2, [r3, #0]
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4924      	ldr	r1, [pc, #144]	@ (8010e40 <I2C_ITSlaveSeqCplt+0xc0>)
 8010dae:	400a      	ands	r2, r1
 8010db0:	601a      	str	r2, [r3, #0]
 8010db2:	e00c      	b.n	8010dce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	2380      	movs	r3, #128	@ 0x80
 8010db8:	021b      	lsls	r3, r3, #8
 8010dba:	4013      	ands	r3, r2
 8010dbc:	d007      	beq.n	8010dce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	491e      	ldr	r1, [pc, #120]	@ (8010e44 <I2C_ITSlaveSeqCplt+0xc4>)
 8010dca:	400a      	ands	r2, r1
 8010dcc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2241      	movs	r2, #65	@ 0x41
 8010dd2:	5c9b      	ldrb	r3, [r3, r2]
 8010dd4:	b2db      	uxtb	r3, r3
 8010dd6:	2b29      	cmp	r3, #41	@ 0x29
 8010dd8:	d114      	bne.n	8010e04 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2241      	movs	r2, #65	@ 0x41
 8010dde:	2128      	movs	r1, #40	@ 0x28
 8010de0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2221      	movs	r2, #33	@ 0x21
 8010de6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2101      	movs	r1, #1
 8010dec:	0018      	movs	r0, r3
 8010dee:	f000 ffb1 	bl	8011d54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2240      	movs	r2, #64	@ 0x40
 8010df6:	2100      	movs	r1, #0
 8010df8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	0018      	movs	r0, r3
 8010dfe:	f7ff f968 	bl	80100d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010e02:	e019      	b.n	8010e38 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2241      	movs	r2, #65	@ 0x41
 8010e08:	5c9b      	ldrb	r3, [r3, r2]
 8010e0a:	b2db      	uxtb	r3, r3
 8010e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e0e:	d113      	bne.n	8010e38 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2241      	movs	r2, #65	@ 0x41
 8010e14:	2128      	movs	r1, #40	@ 0x28
 8010e16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2222      	movs	r2, #34	@ 0x22
 8010e1c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2102      	movs	r1, #2
 8010e22:	0018      	movs	r0, r3
 8010e24:	f000 ff96 	bl	8011d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2240      	movs	r2, #64	@ 0x40
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	0018      	movs	r0, r3
 8010e34:	f7ff f955 	bl	80100e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8010e38:	46c0      	nop			@ (mov r8, r8)
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	b004      	add	sp, #16
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	ffffbfff 	.word	0xffffbfff
 8010e44:	ffff7fff 	.word	0xffff7fff

08010e48 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b086      	sub	sp, #24
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	2220      	movs	r2, #32
 8010e5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2241      	movs	r2, #65	@ 0x41
 8010e62:	5c9b      	ldrb	r3, [r3, r2]
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	2b21      	cmp	r3, #33	@ 0x21
 8010e68:	d108      	bne.n	8010e7c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2101      	movs	r1, #1
 8010e6e:	0018      	movs	r0, r3
 8010e70:	f000 ff70 	bl	8011d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2211      	movs	r2, #17
 8010e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e7a:	e00d      	b.n	8010e98 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2241      	movs	r2, #65	@ 0x41
 8010e80:	5c9b      	ldrb	r3, [r3, r2]
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	2b22      	cmp	r3, #34	@ 0x22
 8010e86:	d107      	bne.n	8010e98 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2102      	movs	r1, #2
 8010e8c:	0018      	movs	r0, r3
 8010e8e:	f000 ff61 	bl	8011d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2212      	movs	r2, #18
 8010e96:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	494e      	ldr	r1, [pc, #312]	@ (8010fdc <I2C_ITMasterCplt+0x194>)
 8010ea4:	400a      	ands	r2, r1
 8010ea6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2200      	movs	r2, #0
 8010eac:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8010fe0 <I2C_ITMasterCplt+0x198>)
 8010eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	2210      	movs	r2, #16
 8010eb8:	4013      	ands	r3, r2
 8010eba:	d009      	beq.n	8010ed0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	2210      	movs	r2, #16
 8010ec2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ec8:	2204      	movs	r2, #4
 8010eca:	431a      	orrs	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2241      	movs	r2, #65	@ 0x41
 8010ed4:	5c9b      	ldrb	r3, [r3, r2]
 8010ed6:	b2db      	uxtb	r3, r3
 8010ed8:	2b60      	cmp	r3, #96	@ 0x60
 8010eda:	d109      	bne.n	8010ef0 <I2C_ITMasterCplt+0xa8>
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	2204      	movs	r2, #4
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	d005      	beq.n	8010ef0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010eee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	0018      	movs	r0, r3
 8010ef4:	f000 fb19 	bl	801152a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010efc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2241      	movs	r2, #65	@ 0x41
 8010f02:	5c9b      	ldrb	r3, [r3, r2]
 8010f04:	b2db      	uxtb	r3, r3
 8010f06:	2b60      	cmp	r3, #96	@ 0x60
 8010f08:	d002      	beq.n	8010f10 <I2C_ITMasterCplt+0xc8>
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d007      	beq.n	8010f20 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	0011      	movs	r1, r2
 8010f18:	0018      	movs	r0, r3
 8010f1a:	f000 f9db 	bl	80112d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010f1e:	e058      	b.n	8010fd2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2241      	movs	r2, #65	@ 0x41
 8010f24:	5c9b      	ldrb	r3, [r3, r2]
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	2b21      	cmp	r3, #33	@ 0x21
 8010f2a:	d126      	bne.n	8010f7a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2241      	movs	r2, #65	@ 0x41
 8010f30:	2120      	movs	r1, #32
 8010f32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2200      	movs	r2, #0
 8010f38:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2242      	movs	r2, #66	@ 0x42
 8010f3e:	5c9b      	ldrb	r3, [r3, r2]
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b40      	cmp	r3, #64	@ 0x40
 8010f44:	d10c      	bne.n	8010f60 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2242      	movs	r2, #66	@ 0x42
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2240      	movs	r2, #64	@ 0x40
 8010f52:	2100      	movs	r1, #0
 8010f54:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	0018      	movs	r0, r3
 8010f5a:	f7ff f8e2 	bl	8010122 <HAL_I2C_MemTxCpltCallback>
}
 8010f5e:	e038      	b.n	8010fd2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2242      	movs	r2, #66	@ 0x42
 8010f64:	2100      	movs	r1, #0
 8010f66:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2240      	movs	r2, #64	@ 0x40
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	0018      	movs	r0, r3
 8010f74:	f7ff f89d 	bl	80100b2 <HAL_I2C_MasterTxCpltCallback>
}
 8010f78:	e02b      	b.n	8010fd2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2241      	movs	r2, #65	@ 0x41
 8010f7e:	5c9b      	ldrb	r3, [r3, r2]
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b22      	cmp	r3, #34	@ 0x22
 8010f84:	d125      	bne.n	8010fd2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2241      	movs	r2, #65	@ 0x41
 8010f8a:	2120      	movs	r1, #32
 8010f8c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2242      	movs	r2, #66	@ 0x42
 8010f98:	5c9b      	ldrb	r3, [r3, r2]
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	2b40      	cmp	r3, #64	@ 0x40
 8010f9e:	d10c      	bne.n	8010fba <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2242      	movs	r2, #66	@ 0x42
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2240      	movs	r2, #64	@ 0x40
 8010fac:	2100      	movs	r1, #0
 8010fae:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	0018      	movs	r0, r3
 8010fb4:	f7ff f8bd 	bl	8010132 <HAL_I2C_MemRxCpltCallback>
}
 8010fb8:	e00b      	b.n	8010fd2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2242      	movs	r2, #66	@ 0x42
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2240      	movs	r2, #64	@ 0x40
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	0018      	movs	r0, r3
 8010fce:	f7ff f878 	bl	80100c2 <HAL_I2C_MasterRxCpltCallback>
}
 8010fd2:	46c0      	nop			@ (mov r8, r8)
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	b006      	add	sp, #24
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	46c0      	nop			@ (mov r8, r8)
 8010fdc:	fe00e800 	.word	0xfe00e800
 8010fe0:	ffff0000 	.word	0xffff0000

08010fe4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010ffa:	200f      	movs	r0, #15
 8010ffc:	183b      	adds	r3, r7, r0
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	2141      	movs	r1, #65	@ 0x41
 8011002:	5c52      	ldrb	r2, [r2, r1]
 8011004:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2220      	movs	r2, #32
 801100c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801100e:	183b      	adds	r3, r7, r0
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2b21      	cmp	r3, #33	@ 0x21
 8011014:	d003      	beq.n	801101e <I2C_ITSlaveCplt+0x3a>
 8011016:	183b      	adds	r3, r7, r0
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b29      	cmp	r3, #41	@ 0x29
 801101c:	d109      	bne.n	8011032 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801101e:	4a7b      	ldr	r2, [pc, #492]	@ (801120c <I2C_ITSlaveCplt+0x228>)
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	0011      	movs	r1, r2
 8011024:	0018      	movs	r0, r3
 8011026:	f000 fe95 	bl	8011d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2221      	movs	r2, #33	@ 0x21
 801102e:	631a      	str	r2, [r3, #48]	@ 0x30
 8011030:	e011      	b.n	8011056 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011032:	220f      	movs	r2, #15
 8011034:	18bb      	adds	r3, r7, r2
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	2b22      	cmp	r3, #34	@ 0x22
 801103a:	d003      	beq.n	8011044 <I2C_ITSlaveCplt+0x60>
 801103c:	18bb      	adds	r3, r7, r2
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	2b2a      	cmp	r3, #42	@ 0x2a
 8011042:	d108      	bne.n	8011056 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011044:	4a72      	ldr	r2, [pc, #456]	@ (8011210 <I2C_ITSlaveCplt+0x22c>)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	0011      	movs	r1, r2
 801104a:	0018      	movs	r0, r3
 801104c:	f000 fe82 	bl	8011d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2222      	movs	r2, #34	@ 0x22
 8011054:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	685a      	ldr	r2, [r3, #4]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2180      	movs	r1, #128	@ 0x80
 8011062:	0209      	lsls	r1, r1, #8
 8011064:	430a      	orrs	r2, r1
 8011066:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	685a      	ldr	r2, [r3, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4968      	ldr	r1, [pc, #416]	@ (8011214 <I2C_ITSlaveCplt+0x230>)
 8011074:	400a      	ands	r2, r1
 8011076:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	0018      	movs	r0, r3
 801107c:	f000 fa55 	bl	801152a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011080:	693a      	ldr	r2, [r7, #16]
 8011082:	2380      	movs	r3, #128	@ 0x80
 8011084:	01db      	lsls	r3, r3, #7
 8011086:	4013      	ands	r3, r2
 8011088:	d013      	beq.n	80110b2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4960      	ldr	r1, [pc, #384]	@ (8011218 <I2C_ITSlaveCplt+0x234>)
 8011096:	400a      	ands	r2, r1
 8011098:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d01f      	beq.n	80110e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80110b0:	e017      	b.n	80110e2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80110b2:	693a      	ldr	r2, [r7, #16]
 80110b4:	2380      	movs	r3, #128	@ 0x80
 80110b6:	021b      	lsls	r3, r3, #8
 80110b8:	4013      	ands	r3, r2
 80110ba:	d012      	beq.n	80110e2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4955      	ldr	r1, [pc, #340]	@ (801121c <I2C_ITSlaveCplt+0x238>)
 80110c8:	400a      	ands	r2, r1
 80110ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d006      	beq.n	80110e2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	685b      	ldr	r3, [r3, #4]
 80110dc:	b29a      	uxth	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2204      	movs	r2, #4
 80110e6:	4013      	ands	r3, r2
 80110e8:	d020      	beq.n	801112c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	2204      	movs	r2, #4
 80110ee:	4393      	bics	r3, r2
 80110f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110fc:	b2d2      	uxtb	r2, r2
 80110fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00c      	beq.n	801112c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011116:	3b01      	subs	r3, #1
 8011118:	b29a      	uxth	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011122:	b29b      	uxth	r3, r3
 8011124:	3b01      	subs	r3, #1
 8011126:	b29a      	uxth	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011130:	b29b      	uxth	r3, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	d005      	beq.n	8011142 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801113a:	2204      	movs	r2, #4
 801113c:	431a      	orrs	r2, r3
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2242      	movs	r2, #66	@ 0x42
 8011146:	2100      	movs	r1, #0
 8011148:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011154:	2b00      	cmp	r3, #0
 8011156:	d013      	beq.n	8011180 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	0011      	movs	r1, r2
 8011160:	0018      	movs	r0, r3
 8011162:	f000 f8b7 	bl	80112d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2241      	movs	r2, #65	@ 0x41
 801116a:	5c9b      	ldrb	r3, [r3, r2]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	2b28      	cmp	r3, #40	@ 0x28
 8011170:	d147      	bne.n	8011202 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	0011      	movs	r1, r2
 8011178:	0018      	movs	r0, r3
 801117a:	f000 f853 	bl	8011224 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801117e:	e040      	b.n	8011202 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011184:	4a26      	ldr	r2, [pc, #152]	@ (8011220 <I2C_ITSlaveCplt+0x23c>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d016      	beq.n	80111b8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	0018      	movs	r0, r3
 801118e:	f7ff fdf7 	bl	8010d80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a22      	ldr	r2, [pc, #136]	@ (8011220 <I2C_ITSlaveCplt+0x23c>)
 8011196:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2241      	movs	r2, #65	@ 0x41
 801119c:	2120      	movs	r1, #32
 801119e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2240      	movs	r2, #64	@ 0x40
 80111aa:	2100      	movs	r1, #0
 80111ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	0018      	movs	r0, r3
 80111b2:	f7fe ffae 	bl	8010112 <HAL_I2C_ListenCpltCallback>
}
 80111b6:	e024      	b.n	8011202 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	2241      	movs	r2, #65	@ 0x41
 80111bc:	5c9b      	ldrb	r3, [r3, r2]
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	2b22      	cmp	r3, #34	@ 0x22
 80111c2:	d10f      	bne.n	80111e4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2241      	movs	r2, #65	@ 0x41
 80111c8:	2120      	movs	r1, #32
 80111ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2240      	movs	r2, #64	@ 0x40
 80111d6:	2100      	movs	r1, #0
 80111d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	0018      	movs	r0, r3
 80111de:	f7fe ff80 	bl	80100e2 <HAL_I2C_SlaveRxCpltCallback>
}
 80111e2:	e00e      	b.n	8011202 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2241      	movs	r2, #65	@ 0x41
 80111e8:	2120      	movs	r1, #32
 80111ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2240      	movs	r2, #64	@ 0x40
 80111f6:	2100      	movs	r1, #0
 80111f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	0018      	movs	r0, r3
 80111fe:	f7fe ff68 	bl	80100d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8011202:	46c0      	nop			@ (mov r8, r8)
 8011204:	46bd      	mov	sp, r7
 8011206:	b006      	add	sp, #24
 8011208:	bd80      	pop	{r7, pc}
 801120a:	46c0      	nop			@ (mov r8, r8)
 801120c:	00008001 	.word	0x00008001
 8011210:	00008002 	.word	0x00008002
 8011214:	fe00e800 	.word	0xfe00e800
 8011218:	ffffbfff 	.word	0xffffbfff
 801121c:	ffff7fff 	.word	0xffff7fff
 8011220:	ffff0000 	.word	0xffff0000

08011224 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	4a26      	ldr	r2, [pc, #152]	@ (80112cc <I2C_ITListenCplt+0xa8>)
 8011232:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2241      	movs	r2, #65	@ 0x41
 801123e:	2120      	movs	r1, #32
 8011240:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2242      	movs	r2, #66	@ 0x42
 8011246:	2100      	movs	r1, #0
 8011248:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2200      	movs	r2, #0
 801124e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	2204      	movs	r2, #4
 8011254:	4013      	ands	r3, r2
 8011256:	d022      	beq.n	801129e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011262:	b2d2      	uxtb	r2, r2
 8011264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801126a:	1c5a      	adds	r2, r3, #1
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011274:	2b00      	cmp	r3, #0
 8011276:	d012      	beq.n	801129e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801127c:	3b01      	subs	r3, #1
 801127e:	b29a      	uxth	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011288:	b29b      	uxth	r3, r3
 801128a:	3b01      	subs	r3, #1
 801128c:	b29a      	uxth	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011296:	2204      	movs	r2, #4
 8011298:	431a      	orrs	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801129e:	4a0c      	ldr	r2, [pc, #48]	@ (80112d0 <I2C_ITListenCplt+0xac>)
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	0011      	movs	r1, r2
 80112a4:	0018      	movs	r0, r3
 80112a6:	f000 fd55 	bl	8011d54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2210      	movs	r2, #16
 80112b0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2240      	movs	r2, #64	@ 0x40
 80112b6:	2100      	movs	r1, #0
 80112b8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	0018      	movs	r0, r3
 80112be:	f7fe ff28 	bl	8010112 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80112c2:	46c0      	nop			@ (mov r8, r8)
 80112c4:	46bd      	mov	sp, r7
 80112c6:	b002      	add	sp, #8
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	46c0      	nop			@ (mov r8, r8)
 80112cc:	ffff0000 	.word	0xffff0000
 80112d0:	00008003 	.word	0x00008003

080112d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b084      	sub	sp, #16
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80112de:	200f      	movs	r0, #15
 80112e0:	183b      	adds	r3, r7, r0
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	2141      	movs	r1, #65	@ 0x41
 80112e6:	5c52      	ldrb	r2, [r2, r1]
 80112e8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2242      	movs	r2, #66	@ 0x42
 80112ee:	2100      	movs	r1, #0
 80112f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	4a72      	ldr	r2, [pc, #456]	@ (80114c0 <I2C_ITError+0x1ec>)
 80112f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	431a      	orrs	r2, r3
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801130a:	183b      	adds	r3, r7, r0
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b28      	cmp	r3, #40	@ 0x28
 8011310:	d007      	beq.n	8011322 <I2C_ITError+0x4e>
 8011312:	183b      	adds	r3, r7, r0
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b29      	cmp	r3, #41	@ 0x29
 8011318:	d003      	beq.n	8011322 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801131a:	183b      	adds	r3, r7, r0
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011320:	d10c      	bne.n	801133c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2103      	movs	r1, #3
 8011326:	0018      	movs	r0, r3
 8011328:	f000 fd14 	bl	8011d54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2241      	movs	r2, #65	@ 0x41
 8011330:	2128      	movs	r1, #40	@ 0x28
 8011332:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4a63      	ldr	r2, [pc, #396]	@ (80114c4 <I2C_ITError+0x1f0>)
 8011338:	635a      	str	r2, [r3, #52]	@ 0x34
 801133a:	e032      	b.n	80113a2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801133c:	4a62      	ldr	r2, [pc, #392]	@ (80114c8 <I2C_ITError+0x1f4>)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	0011      	movs	r1, r2
 8011342:	0018      	movs	r0, r3
 8011344:	f000 fd06 	bl	8011d54 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	0018      	movs	r0, r3
 801134c:	f000 f8ed 	bl	801152a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2241      	movs	r2, #65	@ 0x41
 8011354:	5c9b      	ldrb	r3, [r3, r2]
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b60      	cmp	r3, #96	@ 0x60
 801135a:	d01f      	beq.n	801139c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2241      	movs	r2, #65	@ 0x41
 8011360:	2120      	movs	r1, #32
 8011362:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	699b      	ldr	r3, [r3, #24]
 801136a:	2220      	movs	r2, #32
 801136c:	4013      	ands	r3, r2
 801136e:	2b20      	cmp	r3, #32
 8011370:	d114      	bne.n	801139c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	699b      	ldr	r3, [r3, #24]
 8011378:	2210      	movs	r2, #16
 801137a:	4013      	ands	r3, r2
 801137c:	2b10      	cmp	r3, #16
 801137e:	d109      	bne.n	8011394 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2210      	movs	r2, #16
 8011386:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801138c:	2204      	movs	r2, #4
 801138e:	431a      	orrs	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2220      	movs	r2, #32
 801139a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2200      	movs	r2, #0
 80113a0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113a6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d03b      	beq.n	8011428 <I2C_ITError+0x154>
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	2b11      	cmp	r3, #17
 80113b4:	d002      	beq.n	80113bc <I2C_ITError+0xe8>
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2b21      	cmp	r3, #33	@ 0x21
 80113ba:	d135      	bne.n	8011428 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	2380      	movs	r3, #128	@ 0x80
 80113c4:	01db      	lsls	r3, r3, #7
 80113c6:	401a      	ands	r2, r3
 80113c8:	2380      	movs	r3, #128	@ 0x80
 80113ca:	01db      	lsls	r3, r3, #7
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d107      	bne.n	80113e0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	493c      	ldr	r1, [pc, #240]	@ (80114cc <I2C_ITError+0x1f8>)
 80113dc:	400a      	ands	r2, r1
 80113de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113e4:	0018      	movs	r0, r3
 80113e6:	f7fd fd62 	bl	800eeae <HAL_DMA_GetState>
 80113ea:	0003      	movs	r3, r0
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d016      	beq.n	801141e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113f4:	4a36      	ldr	r2, [pc, #216]	@ (80114d0 <I2C_ITError+0x1fc>)
 80113f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2240      	movs	r2, #64	@ 0x40
 80113fc:	2100      	movs	r1, #0
 80113fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011404:	0018      	movs	r0, r3
 8011406:	f7fd fc5d 	bl	800ecc4 <HAL_DMA_Abort_IT>
 801140a:	1e03      	subs	r3, r0, #0
 801140c:	d051      	beq.n	80114b2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011418:	0018      	movs	r0, r3
 801141a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801141c:	e049      	b.n	80114b2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	0018      	movs	r0, r3
 8011422:	f000 f859 	bl	80114d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011426:	e044      	b.n	80114b2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801142c:	2b00      	cmp	r3, #0
 801142e:	d03b      	beq.n	80114a8 <I2C_ITError+0x1d4>
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	2b12      	cmp	r3, #18
 8011434:	d002      	beq.n	801143c <I2C_ITError+0x168>
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b22      	cmp	r3, #34	@ 0x22
 801143a:	d135      	bne.n	80114a8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	681a      	ldr	r2, [r3, #0]
 8011442:	2380      	movs	r3, #128	@ 0x80
 8011444:	021b      	lsls	r3, r3, #8
 8011446:	401a      	ands	r2, r3
 8011448:	2380      	movs	r3, #128	@ 0x80
 801144a:	021b      	lsls	r3, r3, #8
 801144c:	429a      	cmp	r2, r3
 801144e:	d107      	bne.n	8011460 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	491e      	ldr	r1, [pc, #120]	@ (80114d4 <I2C_ITError+0x200>)
 801145c:	400a      	ands	r2, r1
 801145e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011464:	0018      	movs	r0, r3
 8011466:	f7fd fd22 	bl	800eeae <HAL_DMA_GetState>
 801146a:	0003      	movs	r3, r0
 801146c:	2b01      	cmp	r3, #1
 801146e:	d016      	beq.n	801149e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011474:	4a16      	ldr	r2, [pc, #88]	@ (80114d0 <I2C_ITError+0x1fc>)
 8011476:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	2240      	movs	r2, #64	@ 0x40
 801147c:	2100      	movs	r1, #0
 801147e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011484:	0018      	movs	r0, r3
 8011486:	f7fd fc1d 	bl	800ecc4 <HAL_DMA_Abort_IT>
 801148a:	1e03      	subs	r3, r0, #0
 801148c:	d013      	beq.n	80114b6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011498:	0018      	movs	r0, r3
 801149a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801149c:	e00b      	b.n	80114b6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	0018      	movs	r0, r3
 80114a2:	f000 f819 	bl	80114d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80114a6:	e006      	b.n	80114b6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	0018      	movs	r0, r3
 80114ac:	f000 f814 	bl	80114d8 <I2C_TreatErrorCallback>
  }
}
 80114b0:	e002      	b.n	80114b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80114b2:	46c0      	nop			@ (mov r8, r8)
 80114b4:	e000      	b.n	80114b8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80114b6:	46c0      	nop			@ (mov r8, r8)
}
 80114b8:	46c0      	nop			@ (mov r8, r8)
 80114ba:	46bd      	mov	sp, r7
 80114bc:	b004      	add	sp, #16
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	ffff0000 	.word	0xffff0000
 80114c4:	080103b9 	.word	0x080103b9
 80114c8:	00008003 	.word	0x00008003
 80114cc:	ffffbfff 	.word	0xffffbfff
 80114d0:	080116e3 	.word	0x080116e3
 80114d4:	ffff7fff 	.word	0xffff7fff

080114d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2241      	movs	r2, #65	@ 0x41
 80114e4:	5c9b      	ldrb	r3, [r3, r2]
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	2b60      	cmp	r3, #96	@ 0x60
 80114ea:	d10f      	bne.n	801150c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2241      	movs	r2, #65	@ 0x41
 80114f0:	2120      	movs	r1, #32
 80114f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2240      	movs	r2, #64	@ 0x40
 80114fe:	2100      	movs	r1, #0
 8011500:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	0018      	movs	r0, r3
 8011506:	f7fe fe24 	bl	8010152 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801150a:	e00a      	b.n	8011522 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2240      	movs	r2, #64	@ 0x40
 8011516:	2100      	movs	r1, #0
 8011518:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	0018      	movs	r0, r3
 801151e:	f7fe fe10 	bl	8010142 <HAL_I2C_ErrorCallback>
}
 8011522:	46c0      	nop			@ (mov r8, r8)
 8011524:	46bd      	mov	sp, r7
 8011526:	b002      	add	sp, #8
 8011528:	bd80      	pop	{r7, pc}

0801152a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801152a:	b580      	push	{r7, lr}
 801152c:	b082      	sub	sp, #8
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	699b      	ldr	r3, [r3, #24]
 8011538:	2202      	movs	r2, #2
 801153a:	4013      	ands	r3, r2
 801153c:	2b02      	cmp	r3, #2
 801153e:	d103      	bne.n	8011548 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2200      	movs	r2, #0
 8011546:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	699b      	ldr	r3, [r3, #24]
 801154e:	2201      	movs	r2, #1
 8011550:	4013      	ands	r3, r2
 8011552:	2b01      	cmp	r3, #1
 8011554:	d007      	beq.n	8011566 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	699a      	ldr	r2, [r3, #24]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2101      	movs	r1, #1
 8011562:	430a      	orrs	r2, r1
 8011564:	619a      	str	r2, [r3, #24]
  }
}
 8011566:	46c0      	nop			@ (mov r8, r8)
 8011568:	46bd      	mov	sp, r7
 801156a:	b002      	add	sp, #8
 801156c:	bd80      	pop	{r7, pc}
	...

08011570 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801157c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4920      	ldr	r1, [pc, #128]	@ (801160c <I2C_DMAMasterTransmitCplt+0x9c>)
 801158a:	400a      	ands	r2, r1
 801158c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011592:	b29b      	uxth	r3, r3
 8011594:	2b00      	cmp	r3, #0
 8011596:	d105      	bne.n	80115a4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2120      	movs	r1, #32
 801159c:	0018      	movs	r0, r3
 801159e:	f000 fb4b 	bl	8011c38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80115a2:	e02e      	b.n	8011602 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80115ac:	189a      	adds	r2, r3, r2
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	2bff      	cmp	r3, #255	@ 0xff
 80115ba:	d903      	bls.n	80115c4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	22ff      	movs	r2, #255	@ 0xff
 80115c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80115c2:	e004      	b.n	80115ce <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115c8:	b29a      	uxth	r2, r3
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d6:	0019      	movs	r1, r3
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	3328      	adds	r3, #40	@ 0x28
 80115de:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80115e4:	f7fd fac8 	bl	800eb78 <HAL_DMA_Start_IT>
 80115e8:	1e03      	subs	r3, r0, #0
 80115ea:	d005      	beq.n	80115f8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2110      	movs	r1, #16
 80115f0:	0018      	movs	r0, r3
 80115f2:	f7ff fe6f 	bl	80112d4 <I2C_ITError>
}
 80115f6:	e004      	b.n	8011602 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2140      	movs	r1, #64	@ 0x40
 80115fc:	0018      	movs	r0, r3
 80115fe:	f000 fb1b 	bl	8011c38 <I2C_Enable_IRQ>
}
 8011602:	46c0      	nop			@ (mov r8, r8)
 8011604:	46bd      	mov	sp, r7
 8011606:	b004      	add	sp, #16
 8011608:	bd80      	pop	{r7, pc}
 801160a:	46c0      	nop			@ (mov r8, r8)
 801160c:	ffffbfff 	.word	0xffffbfff

08011610 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b084      	sub	sp, #16
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801161c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4920      	ldr	r1, [pc, #128]	@ (80116ac <I2C_DMAMasterReceiveCplt+0x9c>)
 801162a:	400a      	ands	r2, r1
 801162c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011632:	b29b      	uxth	r3, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	d105      	bne.n	8011644 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2120      	movs	r1, #32
 801163c:	0018      	movs	r0, r3
 801163e:	f000 fafb 	bl	8011c38 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011642:	e02e      	b.n	80116a2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801164c:	189a      	adds	r2, r3, r2
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011656:	b29b      	uxth	r3, r3
 8011658:	2bff      	cmp	r3, #255	@ 0xff
 801165a:	d903      	bls.n	8011664 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	22ff      	movs	r2, #255	@ 0xff
 8011660:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011662:	e004      	b.n	801166e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011668:	b29a      	uxth	r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3324      	adds	r3, #36	@ 0x24
 8011678:	0019      	movs	r1, r3
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801167e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011684:	f7fd fa78 	bl	800eb78 <HAL_DMA_Start_IT>
 8011688:	1e03      	subs	r3, r0, #0
 801168a:	d005      	beq.n	8011698 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2110      	movs	r1, #16
 8011690:	0018      	movs	r0, r3
 8011692:	f7ff fe1f 	bl	80112d4 <I2C_ITError>
}
 8011696:	e004      	b.n	80116a2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2140      	movs	r1, #64	@ 0x40
 801169c:	0018      	movs	r0, r3
 801169e:	f000 facb 	bl	8011c38 <I2C_Enable_IRQ>
}
 80116a2:	46c0      	nop			@ (mov r8, r8)
 80116a4:	46bd      	mov	sp, r7
 80116a6:	b004      	add	sp, #16
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	46c0      	nop			@ (mov r8, r8)
 80116ac:	ffff7fff 	.word	0xffff7fff

080116b0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116bc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2180      	movs	r1, #128	@ 0x80
 80116ca:	0209      	lsls	r1, r1, #8
 80116cc:	430a      	orrs	r2, r1
 80116ce:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2110      	movs	r1, #16
 80116d4:	0018      	movs	r0, r3
 80116d6:	f7ff fdfd 	bl	80112d4 <I2C_ITError>
}
 80116da:	46c0      	nop			@ (mov r8, r8)
 80116dc:	46bd      	mov	sp, r7
 80116de:	b004      	add	sp, #16
 80116e0:	bd80      	pop	{r7, pc}

080116e2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80116e2:	b580      	push	{r7, lr}
 80116e4:	b084      	sub	sp, #16
 80116e6:	af00      	add	r7, sp, #0
 80116e8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d003      	beq.n	8011700 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116fc:	2200      	movs	r2, #0
 80116fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011704:	2b00      	cmp	r3, #0
 8011706:	d003      	beq.n	8011710 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801170c:	2200      	movs	r2, #0
 801170e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	0018      	movs	r0, r3
 8011714:	f7ff fee0 	bl	80114d8 <I2C_TreatErrorCallback>
}
 8011718:	46c0      	nop			@ (mov r8, r8)
 801171a:	46bd      	mov	sp, r7
 801171c:	b004      	add	sp, #16
 801171e:	bd80      	pop	{r7, pc}

08011720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b084      	sub	sp, #16
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	603b      	str	r3, [r7, #0]
 801172c:	1dfb      	adds	r3, r7, #7
 801172e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011730:	e030      	b.n	8011794 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	3301      	adds	r3, #1
 8011736:	d02d      	beq.n	8011794 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011738:	f7fc fce2 	bl	800e100 <HAL_GetTick>
 801173c:	0002      	movs	r2, r0
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	683a      	ldr	r2, [r7, #0]
 8011744:	429a      	cmp	r2, r3
 8011746:	d302      	bcc.n	801174e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d122      	bne.n	8011794 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	699b      	ldr	r3, [r3, #24]
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	4013      	ands	r3, r2
 8011758:	68ba      	ldr	r2, [r7, #8]
 801175a:	1ad3      	subs	r3, r2, r3
 801175c:	425a      	negs	r2, r3
 801175e:	4153      	adcs	r3, r2
 8011760:	b2db      	uxtb	r3, r3
 8011762:	001a      	movs	r2, r3
 8011764:	1dfb      	adds	r3, r7, #7
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	429a      	cmp	r2, r3
 801176a:	d113      	bne.n	8011794 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011770:	2220      	movs	r2, #32
 8011772:	431a      	orrs	r2, r3
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2241      	movs	r2, #65	@ 0x41
 801177c:	2120      	movs	r1, #32
 801177e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2242      	movs	r2, #66	@ 0x42
 8011784:	2100      	movs	r1, #0
 8011786:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2240      	movs	r2, #64	@ 0x40
 801178c:	2100      	movs	r1, #0
 801178e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011790:	2301      	movs	r3, #1
 8011792:	e00f      	b.n	80117b4 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	699b      	ldr	r3, [r3, #24]
 801179a:	68ba      	ldr	r2, [r7, #8]
 801179c:	4013      	ands	r3, r2
 801179e:	68ba      	ldr	r2, [r7, #8]
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	425a      	negs	r2, r3
 80117a4:	4153      	adcs	r3, r2
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	001a      	movs	r2, r3
 80117aa:	1dfb      	adds	r3, r7, #7
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d0bf      	beq.n	8011732 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	0018      	movs	r0, r3
 80117b6:	46bd      	mov	sp, r7
 80117b8:	b004      	add	sp, #16
 80117ba:	bd80      	pop	{r7, pc}

080117bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	60f8      	str	r0, [r7, #12]
 80117c4:	60b9      	str	r1, [r7, #8]
 80117c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80117c8:	e032      	b.n	8011830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	68b9      	ldr	r1, [r7, #8]
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	0018      	movs	r0, r3
 80117d2:	f000 f8ff 	bl	80119d4 <I2C_IsErrorOccurred>
 80117d6:	1e03      	subs	r3, r0, #0
 80117d8:	d001      	beq.n	80117de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80117da:	2301      	movs	r3, #1
 80117dc:	e030      	b.n	8011840 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	3301      	adds	r3, #1
 80117e2:	d025      	beq.n	8011830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117e4:	f7fc fc8c 	bl	800e100 <HAL_GetTick>
 80117e8:	0002      	movs	r2, r0
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	68ba      	ldr	r2, [r7, #8]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d302      	bcc.n	80117fa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d11a      	bne.n	8011830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	699b      	ldr	r3, [r3, #24]
 8011800:	2202      	movs	r2, #2
 8011802:	4013      	ands	r3, r2
 8011804:	2b02      	cmp	r3, #2
 8011806:	d013      	beq.n	8011830 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801180c:	2220      	movs	r2, #32
 801180e:	431a      	orrs	r2, r3
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2241      	movs	r2, #65	@ 0x41
 8011818:	2120      	movs	r1, #32
 801181a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2242      	movs	r2, #66	@ 0x42
 8011820:	2100      	movs	r1, #0
 8011822:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	2240      	movs	r2, #64	@ 0x40
 8011828:	2100      	movs	r1, #0
 801182a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 801182c:	2301      	movs	r3, #1
 801182e:	e007      	b.n	8011840 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	699b      	ldr	r3, [r3, #24]
 8011836:	2202      	movs	r2, #2
 8011838:	4013      	ands	r3, r2
 801183a:	2b02      	cmp	r3, #2
 801183c:	d1c5      	bne.n	80117ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801183e:	2300      	movs	r3, #0
}
 8011840:	0018      	movs	r0, r3
 8011842:	46bd      	mov	sp, r7
 8011844:	b004      	add	sp, #16
 8011846:	bd80      	pop	{r7, pc}

08011848 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011854:	e02f      	b.n	80118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	68b9      	ldr	r1, [r7, #8]
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	0018      	movs	r0, r3
 801185e:	f000 f8b9 	bl	80119d4 <I2C_IsErrorOccurred>
 8011862:	1e03      	subs	r3, r0, #0
 8011864:	d001      	beq.n	801186a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011866:	2301      	movs	r3, #1
 8011868:	e02d      	b.n	80118c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801186a:	f7fc fc49 	bl	800e100 <HAL_GetTick>
 801186e:	0002      	movs	r2, r0
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	1ad3      	subs	r3, r2, r3
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	429a      	cmp	r2, r3
 8011878:	d302      	bcc.n	8011880 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d11a      	bne.n	80118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	699b      	ldr	r3, [r3, #24]
 8011886:	2220      	movs	r2, #32
 8011888:	4013      	ands	r3, r2
 801188a:	2b20      	cmp	r3, #32
 801188c:	d013      	beq.n	80118b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011892:	2220      	movs	r2, #32
 8011894:	431a      	orrs	r2, r3
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2241      	movs	r2, #65	@ 0x41
 801189e:	2120      	movs	r1, #32
 80118a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	2242      	movs	r2, #66	@ 0x42
 80118a6:	2100      	movs	r1, #0
 80118a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2240      	movs	r2, #64	@ 0x40
 80118ae:	2100      	movs	r1, #0
 80118b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80118b2:	2301      	movs	r3, #1
 80118b4:	e007      	b.n	80118c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	699b      	ldr	r3, [r3, #24]
 80118bc:	2220      	movs	r2, #32
 80118be:	4013      	ands	r3, r2
 80118c0:	2b20      	cmp	r3, #32
 80118c2:	d1c8      	bne.n	8011856 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80118c4:	2300      	movs	r3, #0
}
 80118c6:	0018      	movs	r0, r3
 80118c8:	46bd      	mov	sp, r7
 80118ca:	b004      	add	sp, #16
 80118cc:	bd80      	pop	{r7, pc}
	...

080118d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80118dc:	e06b      	b.n	80119b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	68b9      	ldr	r1, [r7, #8]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	0018      	movs	r0, r3
 80118e6:	f000 f875 	bl	80119d4 <I2C_IsErrorOccurred>
 80118ea:	1e03      	subs	r3, r0, #0
 80118ec:	d001      	beq.n	80118f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80118ee:	2301      	movs	r3, #1
 80118f0:	e069      	b.n	80119c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	2220      	movs	r2, #32
 80118fa:	4013      	ands	r3, r2
 80118fc:	2b20      	cmp	r3, #32
 80118fe:	d138      	bne.n	8011972 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	699b      	ldr	r3, [r3, #24]
 8011906:	2204      	movs	r2, #4
 8011908:	4013      	ands	r3, r2
 801190a:	2b04      	cmp	r3, #4
 801190c:	d105      	bne.n	801191a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8011916:	2300      	movs	r3, #0
 8011918:	e055      	b.n	80119c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2210      	movs	r2, #16
 8011922:	4013      	ands	r3, r2
 8011924:	2b10      	cmp	r3, #16
 8011926:	d107      	bne.n	8011938 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2210      	movs	r2, #16
 801192e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2204      	movs	r2, #4
 8011934:	645a      	str	r2, [r3, #68]	@ 0x44
 8011936:	e002      	b.n	801193e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2200      	movs	r2, #0
 801193c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2220      	movs	r2, #32
 8011944:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	685a      	ldr	r2, [r3, #4]
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	491f      	ldr	r1, [pc, #124]	@ (80119d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8011952:	400a      	ands	r2, r1
 8011954:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2241      	movs	r2, #65	@ 0x41
 801195a:	2120      	movs	r1, #32
 801195c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2242      	movs	r2, #66	@ 0x42
 8011962:	2100      	movs	r1, #0
 8011964:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2240      	movs	r2, #64	@ 0x40
 801196a:	2100      	movs	r1, #0
 801196c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801196e:	2301      	movs	r3, #1
 8011970:	e029      	b.n	80119c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011972:	f7fc fbc5 	bl	800e100 <HAL_GetTick>
 8011976:	0002      	movs	r2, r0
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	1ad3      	subs	r3, r2, r3
 801197c:	68ba      	ldr	r2, [r7, #8]
 801197e:	429a      	cmp	r2, r3
 8011980:	d302      	bcc.n	8011988 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d116      	bne.n	80119b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	699b      	ldr	r3, [r3, #24]
 801198e:	2204      	movs	r2, #4
 8011990:	4013      	ands	r3, r2
 8011992:	2b04      	cmp	r3, #4
 8011994:	d00f      	beq.n	80119b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801199a:	2220      	movs	r2, #32
 801199c:	431a      	orrs	r2, r3
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2241      	movs	r2, #65	@ 0x41
 80119a6:	2120      	movs	r1, #32
 80119a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2240      	movs	r2, #64	@ 0x40
 80119ae:	2100      	movs	r1, #0
 80119b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80119b2:	2301      	movs	r3, #1
 80119b4:	e007      	b.n	80119c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	699b      	ldr	r3, [r3, #24]
 80119bc:	2204      	movs	r2, #4
 80119be:	4013      	ands	r3, r2
 80119c0:	2b04      	cmp	r3, #4
 80119c2:	d18c      	bne.n	80118de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	0018      	movs	r0, r3
 80119c8:	46bd      	mov	sp, r7
 80119ca:	b004      	add	sp, #16
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	46c0      	nop			@ (mov r8, r8)
 80119d0:	fe00e800 	.word	0xfe00e800

080119d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b08a      	sub	sp, #40	@ 0x28
 80119d8:	af00      	add	r7, sp, #0
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119e0:	2327      	movs	r3, #39	@ 0x27
 80119e2:	18fb      	adds	r3, r7, r3
 80119e4:	2200      	movs	r2, #0
 80119e6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	699b      	ldr	r3, [r3, #24]
 80119ee:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80119f0:	2300      	movs	r3, #0
 80119f2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	2210      	movs	r2, #16
 80119fc:	4013      	ands	r3, r2
 80119fe:	d100      	bne.n	8011a02 <I2C_IsErrorOccurred+0x2e>
 8011a00:	e079      	b.n	8011af6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2210      	movs	r2, #16
 8011a08:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011a0a:	e057      	b.n	8011abc <I2C_IsErrorOccurred+0xe8>
 8011a0c:	2227      	movs	r2, #39	@ 0x27
 8011a0e:	18bb      	adds	r3, r7, r2
 8011a10:	18ba      	adds	r2, r7, r2
 8011a12:	7812      	ldrb	r2, [r2, #0]
 8011a14:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	d04f      	beq.n	8011abc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011a1c:	f7fc fb70 	bl	800e100 <HAL_GetTick>
 8011a20:	0002      	movs	r2, r0
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d302      	bcc.n	8011a32 <I2C_IsErrorOccurred+0x5e>
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d144      	bne.n	8011abc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	685a      	ldr	r2, [r3, #4]
 8011a38:	2380      	movs	r3, #128	@ 0x80
 8011a3a:	01db      	lsls	r3, r3, #7
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011a40:	2013      	movs	r0, #19
 8011a42:	183b      	adds	r3, r7, r0
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	2142      	movs	r1, #66	@ 0x42
 8011a48:	5c52      	ldrb	r2, [r2, r1]
 8011a4a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	699a      	ldr	r2, [r3, #24]
 8011a52:	2380      	movs	r3, #128	@ 0x80
 8011a54:	021b      	lsls	r3, r3, #8
 8011a56:	401a      	ands	r2, r3
 8011a58:	2380      	movs	r3, #128	@ 0x80
 8011a5a:	021b      	lsls	r3, r3, #8
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d126      	bne.n	8011aae <I2C_IsErrorOccurred+0xda>
 8011a60:	697a      	ldr	r2, [r7, #20]
 8011a62:	2380      	movs	r3, #128	@ 0x80
 8011a64:	01db      	lsls	r3, r3, #7
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d021      	beq.n	8011aae <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011a6a:	183b      	adds	r3, r7, r0
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	2b20      	cmp	r3, #32
 8011a70:	d01d      	beq.n	8011aae <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	685a      	ldr	r2, [r3, #4]
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2180      	movs	r1, #128	@ 0x80
 8011a7e:	01c9      	lsls	r1, r1, #7
 8011a80:	430a      	orrs	r2, r1
 8011a82:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011a84:	f7fc fb3c 	bl	800e100 <HAL_GetTick>
 8011a88:	0003      	movs	r3, r0
 8011a8a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a8c:	e00f      	b.n	8011aae <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011a8e:	f7fc fb37 	bl	800e100 <HAL_GetTick>
 8011a92:	0002      	movs	r2, r0
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	2b19      	cmp	r3, #25
 8011a9a:	d908      	bls.n	8011aae <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011a9c:	6a3b      	ldr	r3, [r7, #32]
 8011a9e:	2220      	movs	r2, #32
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011aa4:	2327      	movs	r3, #39	@ 0x27
 8011aa6:	18fb      	adds	r3, r7, r3
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	701a      	strb	r2, [r3, #0]

              break;
 8011aac:	e006      	b.n	8011abc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	2220      	movs	r2, #32
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	2b20      	cmp	r3, #32
 8011aba:	d1e8      	bne.n	8011a8e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	2220      	movs	r2, #32
 8011ac4:	4013      	ands	r3, r2
 8011ac6:	2b20      	cmp	r3, #32
 8011ac8:	d004      	beq.n	8011ad4 <I2C_IsErrorOccurred+0x100>
 8011aca:	2327      	movs	r3, #39	@ 0x27
 8011acc:	18fb      	adds	r3, r7, r3
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d09b      	beq.n	8011a0c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011ad4:	2327      	movs	r3, #39	@ 0x27
 8011ad6:	18fb      	adds	r3, r7, r3
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d103      	bne.n	8011ae6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2220      	movs	r2, #32
 8011ae4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	2204      	movs	r2, #4
 8011aea:	4313      	orrs	r3, r2
 8011aec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011aee:	2327      	movs	r3, #39	@ 0x27
 8011af0:	18fb      	adds	r3, r7, r3
 8011af2:	2201      	movs	r2, #1
 8011af4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	699b      	ldr	r3, [r3, #24]
 8011afc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011afe:	69ba      	ldr	r2, [r7, #24]
 8011b00:	2380      	movs	r3, #128	@ 0x80
 8011b02:	005b      	lsls	r3, r3, #1
 8011b04:	4013      	ands	r3, r2
 8011b06:	d00c      	beq.n	8011b22 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2280      	movs	r2, #128	@ 0x80
 8011b16:	0052      	lsls	r2, r2, #1
 8011b18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011b1a:	2327      	movs	r3, #39	@ 0x27
 8011b1c:	18fb      	adds	r3, r7, r3
 8011b1e:	2201      	movs	r2, #1
 8011b20:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011b22:	69ba      	ldr	r2, [r7, #24]
 8011b24:	2380      	movs	r3, #128	@ 0x80
 8011b26:	00db      	lsls	r3, r3, #3
 8011b28:	4013      	ands	r3, r2
 8011b2a:	d00c      	beq.n	8011b46 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
 8011b2e:	2208      	movs	r2, #8
 8011b30:	4313      	orrs	r3, r2
 8011b32:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2280      	movs	r2, #128	@ 0x80
 8011b3a:	00d2      	lsls	r2, r2, #3
 8011b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011b3e:	2327      	movs	r3, #39	@ 0x27
 8011b40:	18fb      	adds	r3, r7, r3
 8011b42:	2201      	movs	r2, #1
 8011b44:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011b46:	69ba      	ldr	r2, [r7, #24]
 8011b48:	2380      	movs	r3, #128	@ 0x80
 8011b4a:	009b      	lsls	r3, r3, #2
 8011b4c:	4013      	ands	r3, r2
 8011b4e:	d00c      	beq.n	8011b6a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011b50:	6a3b      	ldr	r3, [r7, #32]
 8011b52:	2202      	movs	r2, #2
 8011b54:	4313      	orrs	r3, r2
 8011b56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2280      	movs	r2, #128	@ 0x80
 8011b5e:	0092      	lsls	r2, r2, #2
 8011b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011b62:	2327      	movs	r3, #39	@ 0x27
 8011b64:	18fb      	adds	r3, r7, r3
 8011b66:	2201      	movs	r2, #1
 8011b68:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011b6a:	2327      	movs	r3, #39	@ 0x27
 8011b6c:	18fb      	adds	r3, r7, r3
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d01d      	beq.n	8011bb0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	0018      	movs	r0, r3
 8011b78:	f7ff fcd7 	bl	801152a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	685a      	ldr	r2, [r3, #4]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	490e      	ldr	r1, [pc, #56]	@ (8011bc0 <I2C_IsErrorOccurred+0x1ec>)
 8011b88:	400a      	ands	r2, r1
 8011b8a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b90:	6a3b      	ldr	r3, [r7, #32]
 8011b92:	431a      	orrs	r2, r3
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2241      	movs	r2, #65	@ 0x41
 8011b9c:	2120      	movs	r1, #32
 8011b9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	2242      	movs	r2, #66	@ 0x42
 8011ba4:	2100      	movs	r1, #0
 8011ba6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2240      	movs	r2, #64	@ 0x40
 8011bac:	2100      	movs	r1, #0
 8011bae:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011bb0:	2327      	movs	r3, #39	@ 0x27
 8011bb2:	18fb      	adds	r3, r7, r3
 8011bb4:	781b      	ldrb	r3, [r3, #0]
}
 8011bb6:	0018      	movs	r0, r3
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	b00a      	add	sp, #40	@ 0x28
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	46c0      	nop			@ (mov r8, r8)
 8011bc0:	fe00e800 	.word	0xfe00e800

08011bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011bc4:	b590      	push	{r4, r7, lr}
 8011bc6:	b087      	sub	sp, #28
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	0008      	movs	r0, r1
 8011bce:	0011      	movs	r1, r2
 8011bd0:	607b      	str	r3, [r7, #4]
 8011bd2:	240a      	movs	r4, #10
 8011bd4:	193b      	adds	r3, r7, r4
 8011bd6:	1c02      	adds	r2, r0, #0
 8011bd8:	801a      	strh	r2, [r3, #0]
 8011bda:	2009      	movs	r0, #9
 8011bdc:	183b      	adds	r3, r7, r0
 8011bde:	1c0a      	adds	r2, r1, #0
 8011be0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011be2:	193b      	adds	r3, r7, r4
 8011be4:	881b      	ldrh	r3, [r3, #0]
 8011be6:	059b      	lsls	r3, r3, #22
 8011be8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011bea:	183b      	adds	r3, r7, r0
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	0419      	lsls	r1, r3, #16
 8011bf0:	23ff      	movs	r3, #255	@ 0xff
 8011bf2:	041b      	lsls	r3, r3, #16
 8011bf4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011bf6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	085b      	lsrs	r3, r3, #1
 8011c04:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c0e:	0d51      	lsrs	r1, r2, #21
 8011c10:	2280      	movs	r2, #128	@ 0x80
 8011c12:	00d2      	lsls	r2, r2, #3
 8011c14:	400a      	ands	r2, r1
 8011c16:	4907      	ldr	r1, [pc, #28]	@ (8011c34 <I2C_TransferConfig+0x70>)
 8011c18:	430a      	orrs	r2, r1
 8011c1a:	43d2      	mvns	r2, r2
 8011c1c:	401a      	ands	r2, r3
 8011c1e:	0011      	movs	r1, r2
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	697a      	ldr	r2, [r7, #20]
 8011c26:	430a      	orrs	r2, r1
 8011c28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011c2a:	46c0      	nop			@ (mov r8, r8)
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	b007      	add	sp, #28
 8011c30:	bd90      	pop	{r4, r7, pc}
 8011c32:	46c0      	nop			@ (mov r8, r8)
 8011c34:	03ff63ff 	.word	0x03ff63ff

08011c38 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b084      	sub	sp, #16
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
 8011c40:	000a      	movs	r2, r1
 8011c42:	1cbb      	adds	r3, r7, #2
 8011c44:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011c46:	2300      	movs	r3, #0
 8011c48:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8011d48 <I2C_Enable_IRQ+0x110>)
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d035      	beq.n	8011cc0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011c58:	4b3c      	ldr	r3, [pc, #240]	@ (8011d4c <I2C_Enable_IRQ+0x114>)
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d030      	beq.n	8011cc0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011c62:	4b3b      	ldr	r3, [pc, #236]	@ (8011d50 <I2C_Enable_IRQ+0x118>)
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d02b      	beq.n	8011cc0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011c68:	1cbb      	adds	r3, r7, #2
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	da03      	bge.n	8011c7a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	22b8      	movs	r2, #184	@ 0xb8
 8011c76:	4313      	orrs	r3, r2
 8011c78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011c7a:	1cbb      	adds	r3, r7, #2
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	4013      	ands	r3, r2
 8011c82:	d003      	beq.n	8011c8c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	22f2      	movs	r2, #242	@ 0xf2
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011c8c:	1cbb      	adds	r3, r7, #2
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	2202      	movs	r2, #2
 8011c92:	4013      	ands	r3, r2
 8011c94:	d003      	beq.n	8011c9e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	22f4      	movs	r2, #244	@ 0xf4
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011c9e:	1cbb      	adds	r3, r7, #2
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	2b10      	cmp	r3, #16
 8011ca4:	d103      	bne.n	8011cae <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2290      	movs	r2, #144	@ 0x90
 8011caa:	4313      	orrs	r3, r2
 8011cac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011cae:	1cbb      	adds	r3, r7, #2
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	2b20      	cmp	r3, #32
 8011cb4:	d13c      	bne.n	8011d30 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2220      	movs	r2, #32
 8011cba:	4313      	orrs	r3, r2
 8011cbc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011cbe:	e037      	b.n	8011d30 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011cc0:	1cbb      	adds	r3, r7, #2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	5e9b      	ldrsh	r3, [r3, r2]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	da03      	bge.n	8011cd2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	22b8      	movs	r2, #184	@ 0xb8
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011cd2:	1cbb      	adds	r3, r7, #2
 8011cd4:	881b      	ldrh	r3, [r3, #0]
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	4013      	ands	r3, r2
 8011cda:	d003      	beq.n	8011ce4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	22f2      	movs	r2, #242	@ 0xf2
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011ce4:	1cbb      	adds	r3, r7, #2
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	2202      	movs	r2, #2
 8011cea:	4013      	ands	r3, r2
 8011cec:	d003      	beq.n	8011cf6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	22f4      	movs	r2, #244	@ 0xf4
 8011cf2:	4313      	orrs	r3, r2
 8011cf4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011cf6:	1cbb      	adds	r3, r7, #2
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d103      	bne.n	8011d06 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2290      	movs	r2, #144	@ 0x90
 8011d02:	4313      	orrs	r3, r2
 8011d04:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011d06:	1cbb      	adds	r3, r7, #2
 8011d08:	881b      	ldrh	r3, [r3, #0]
 8011d0a:	2b20      	cmp	r3, #32
 8011d0c:	d103      	bne.n	8011d16 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2260      	movs	r2, #96	@ 0x60
 8011d12:	4313      	orrs	r3, r2
 8011d14:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d50 <I2C_Enable_IRQ+0x118>)
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d007      	beq.n	8011d30 <I2C_Enable_IRQ+0xf8>
 8011d20:	1cbb      	adds	r3, r7, #2
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	2b40      	cmp	r3, #64	@ 0x40
 8011d26:	d103      	bne.n	8011d30 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2240      	movs	r2, #64	@ 0x40
 8011d2c:	4313      	orrs	r3, r2
 8011d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	6819      	ldr	r1, [r3, #0]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	68fa      	ldr	r2, [r7, #12]
 8011d3c:	430a      	orrs	r2, r1
 8011d3e:	601a      	str	r2, [r3, #0]
}
 8011d40:	46c0      	nop			@ (mov r8, r8)
 8011d42:	46bd      	mov	sp, r7
 8011d44:	b004      	add	sp, #16
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	080105b9 	.word	0x080105b9
 8011d4c:	080109e9 	.word	0x080109e9
 8011d50:	080107b1 	.word	0x080107b1

08011d54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	000a      	movs	r2, r1
 8011d5e:	1cbb      	adds	r3, r7, #2
 8011d60:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011d62:	2300      	movs	r3, #0
 8011d64:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011d66:	1cbb      	adds	r3, r7, #2
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	4013      	ands	r3, r2
 8011d6e:	d010      	beq.n	8011d92 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2242      	movs	r2, #66	@ 0x42
 8011d74:	4313      	orrs	r3, r2
 8011d76:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2241      	movs	r2, #65	@ 0x41
 8011d7c:	5c9b      	ldrb	r3, [r3, r2]
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	001a      	movs	r2, r3
 8011d82:	2328      	movs	r3, #40	@ 0x28
 8011d84:	4013      	ands	r3, r2
 8011d86:	2b28      	cmp	r3, #40	@ 0x28
 8011d88:	d003      	beq.n	8011d92 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	22b0      	movs	r2, #176	@ 0xb0
 8011d8e:	4313      	orrs	r3, r2
 8011d90:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011d92:	1cbb      	adds	r3, r7, #2
 8011d94:	881b      	ldrh	r3, [r3, #0]
 8011d96:	2202      	movs	r2, #2
 8011d98:	4013      	ands	r3, r2
 8011d9a:	d010      	beq.n	8011dbe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2244      	movs	r2, #68	@ 0x44
 8011da0:	4313      	orrs	r3, r2
 8011da2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2241      	movs	r2, #65	@ 0x41
 8011da8:	5c9b      	ldrb	r3, [r3, r2]
 8011daa:	b2db      	uxtb	r3, r3
 8011dac:	001a      	movs	r2, r3
 8011dae:	2328      	movs	r3, #40	@ 0x28
 8011db0:	4013      	ands	r3, r2
 8011db2:	2b28      	cmp	r3, #40	@ 0x28
 8011db4:	d003      	beq.n	8011dbe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	22b0      	movs	r2, #176	@ 0xb0
 8011dba:	4313      	orrs	r3, r2
 8011dbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011dbe:	1cbb      	adds	r3, r7, #2
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	5e9b      	ldrsh	r3, [r3, r2]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	da03      	bge.n	8011dd0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	22b8      	movs	r2, #184	@ 0xb8
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011dd0:	1cbb      	adds	r3, r7, #2
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	2b10      	cmp	r3, #16
 8011dd6:	d103      	bne.n	8011de0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2290      	movs	r2, #144	@ 0x90
 8011ddc:	4313      	orrs	r3, r2
 8011dde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011de0:	1cbb      	adds	r3, r7, #2
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	2b20      	cmp	r3, #32
 8011de6:	d103      	bne.n	8011df0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	2220      	movs	r2, #32
 8011dec:	4313      	orrs	r3, r2
 8011dee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011df0:	1cbb      	adds	r3, r7, #2
 8011df2:	881b      	ldrh	r3, [r3, #0]
 8011df4:	2b40      	cmp	r3, #64	@ 0x40
 8011df6:	d103      	bne.n	8011e00 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2240      	movs	r2, #64	@ 0x40
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	43d9      	mvns	r1, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	400a      	ands	r2, r1
 8011e10:	601a      	str	r2, [r3, #0]
}
 8011e12:	46c0      	nop			@ (mov r8, r8)
 8011e14:	46bd      	mov	sp, r7
 8011e16:	b004      	add	sp, #16
 8011e18:	bd80      	pop	{r7, pc}
	...

08011e1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2241      	movs	r2, #65	@ 0x41
 8011e2a:	5c9b      	ldrb	r3, [r3, r2]
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	2b20      	cmp	r3, #32
 8011e30:	d138      	bne.n	8011ea4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2240      	movs	r2, #64	@ 0x40
 8011e36:	5c9b      	ldrb	r3, [r3, r2]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d101      	bne.n	8011e40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	e032      	b.n	8011ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2240      	movs	r2, #64	@ 0x40
 8011e44:	2101      	movs	r1, #1
 8011e46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2241      	movs	r2, #65	@ 0x41
 8011e4c:	2124      	movs	r1, #36	@ 0x24
 8011e4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	681a      	ldr	r2, [r3, #0]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2101      	movs	r1, #1
 8011e5c:	438a      	bics	r2, r1
 8011e5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	4911      	ldr	r1, [pc, #68]	@ (8011eb0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011e6c:	400a      	ands	r2, r1
 8011e6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6819      	ldr	r1, [r3, #0]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	683a      	ldr	r2, [r7, #0]
 8011e7c:	430a      	orrs	r2, r1
 8011e7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	430a      	orrs	r2, r1
 8011e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2241      	movs	r2, #65	@ 0x41
 8011e94:	2120      	movs	r1, #32
 8011e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	2240      	movs	r2, #64	@ 0x40
 8011e9c:	2100      	movs	r1, #0
 8011e9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	e000      	b.n	8011ea6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011ea4:	2302      	movs	r3, #2
  }
}
 8011ea6:	0018      	movs	r0, r3
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	b002      	add	sp, #8
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	46c0      	nop			@ (mov r8, r8)
 8011eb0:	ffffefff 	.word	0xffffefff

08011eb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	2241      	movs	r2, #65	@ 0x41
 8011ec2:	5c9b      	ldrb	r3, [r3, r2]
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b20      	cmp	r3, #32
 8011ec8:	d139      	bne.n	8011f3e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2240      	movs	r2, #64	@ 0x40
 8011ece:	5c9b      	ldrb	r3, [r3, r2]
 8011ed0:	2b01      	cmp	r3, #1
 8011ed2:	d101      	bne.n	8011ed8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011ed4:	2302      	movs	r3, #2
 8011ed6:	e033      	b.n	8011f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2240      	movs	r2, #64	@ 0x40
 8011edc:	2101      	movs	r1, #1
 8011ede:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2241      	movs	r2, #65	@ 0x41
 8011ee4:	2124      	movs	r1, #36	@ 0x24
 8011ee6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	438a      	bics	r2, r1
 8011ef6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	4a11      	ldr	r2, [pc, #68]	@ (8011f48 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011f04:	4013      	ands	r3, r2
 8011f06:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	021b      	lsls	r3, r3, #8
 8011f0c:	68fa      	ldr	r2, [r7, #12]
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2101      	movs	r1, #1
 8011f26:	430a      	orrs	r2, r1
 8011f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2241      	movs	r2, #65	@ 0x41
 8011f2e:	2120      	movs	r1, #32
 8011f30:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2240      	movs	r2, #64	@ 0x40
 8011f36:	2100      	movs	r1, #0
 8011f38:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e000      	b.n	8011f40 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011f3e:	2302      	movs	r3, #2
  }
}
 8011f40:	0018      	movs	r0, r3
 8011f42:	46bd      	mov	sp, r7
 8011f44:	b004      	add	sp, #16
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	fffff0ff 	.word	0xfffff0ff

08011f4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b088      	sub	sp, #32
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d101      	bne.n	8011f5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e0e1      	b.n	8012122 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2235      	movs	r2, #53	@ 0x35
 8011f62:	5c9b      	ldrb	r3, [r3, r2]
 8011f64:	b2db      	uxtb	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d107      	bne.n	8011f7a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2234      	movs	r2, #52	@ 0x34
 8011f6e:	2100      	movs	r1, #0
 8011f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	0018      	movs	r0, r3
 8011f76:	f7f5 fc3b 	bl	80077f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2235      	movs	r2, #53	@ 0x35
 8011f7e:	2102      	movs	r1, #2
 8011f80:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	69da      	ldr	r2, [r3, #28]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	4967      	ldr	r1, [pc, #412]	@ (801212c <HAL_I2S_Init+0x1e0>)
 8011f8e:	400a      	ands	r2, r1
 8011f90:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2202      	movs	r2, #2
 8011f98:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	695b      	ldr	r3, [r3, #20]
 8011f9e:	2b02      	cmp	r3, #2
 8011fa0:	d073      	beq.n	801208a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d102      	bne.n	8011fb0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011faa:	2310      	movs	r3, #16
 8011fac:	617b      	str	r3, [r7, #20]
 8011fae:	e001      	b.n	8011fb4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011fb0:	2320      	movs	r3, #32
 8011fb2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	689b      	ldr	r3, [r3, #8]
 8011fb8:	2b20      	cmp	r3, #32
 8011fba:	d802      	bhi.n	8011fc2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011fc2:	f002 febd 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 8011fc6:	0003      	movs	r3, r0
 8011fc8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	691a      	ldr	r2, [r3, #16]
 8011fce:	2380      	movs	r3, #128	@ 0x80
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d131      	bne.n	801203a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d016      	beq.n	801200c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	0019      	movs	r1, r3
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f7ee f8dd 	bl	80001a4 <__udivsi3>
 8011fea:	0003      	movs	r3, r0
 8011fec:	001a      	movs	r2, r3
 8011fee:	0013      	movs	r3, r2
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	189b      	adds	r3, r3, r2
 8011ff4:	005b      	lsls	r3, r3, #1
 8011ff6:	001a      	movs	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	695b      	ldr	r3, [r3, #20]
 8011ffc:	0019      	movs	r1, r3
 8011ffe:	0010      	movs	r0, r2
 8012000:	f7ee f8d0 	bl	80001a4 <__udivsi3>
 8012004:	0003      	movs	r3, r0
 8012006:	3305      	adds	r3, #5
 8012008:	613b      	str	r3, [r7, #16]
 801200a:	e02a      	b.n	8012062 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	00db      	lsls	r3, r3, #3
 8012010:	0019      	movs	r1, r3
 8012012:	68f8      	ldr	r0, [r7, #12]
 8012014:	f7ee f8c6 	bl	80001a4 <__udivsi3>
 8012018:	0003      	movs	r3, r0
 801201a:	001a      	movs	r2, r3
 801201c:	0013      	movs	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	189b      	adds	r3, r3, r2
 8012022:	005b      	lsls	r3, r3, #1
 8012024:	001a      	movs	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	695b      	ldr	r3, [r3, #20]
 801202a:	0019      	movs	r1, r3
 801202c:	0010      	movs	r0, r2
 801202e:	f7ee f8b9 	bl	80001a4 <__udivsi3>
 8012032:	0003      	movs	r3, r0
 8012034:	3305      	adds	r3, #5
 8012036:	613b      	str	r3, [r7, #16]
 8012038:	e013      	b.n	8012062 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 801203a:	6979      	ldr	r1, [r7, #20]
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f7ee f8b1 	bl	80001a4 <__udivsi3>
 8012042:	0003      	movs	r3, r0
 8012044:	001a      	movs	r2, r3
 8012046:	0013      	movs	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	189b      	adds	r3, r3, r2
 801204c:	005b      	lsls	r3, r3, #1
 801204e:	001a      	movs	r2, r3
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	695b      	ldr	r3, [r3, #20]
 8012054:	0019      	movs	r1, r3
 8012056:	0010      	movs	r0, r2
 8012058:	f7ee f8a4 	bl	80001a4 <__udivsi3>
 801205c:	0003      	movs	r3, r0
 801205e:	3305      	adds	r3, #5
 8012060:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	210a      	movs	r1, #10
 8012066:	0018      	movs	r0, r3
 8012068:	f7ee f89c 	bl	80001a4 <__udivsi3>
 801206c:	0003      	movs	r3, r0
 801206e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012070:	693b      	ldr	r3, [r7, #16]
 8012072:	2201      	movs	r2, #1
 8012074:	4013      	ands	r3, r2
 8012076:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012078:	693a      	ldr	r2, [r7, #16]
 801207a:	69bb      	ldr	r3, [r7, #24]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	085b      	lsrs	r3, r3, #1
 8012080:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012082:	69bb      	ldr	r3, [r7, #24]
 8012084:	021b      	lsls	r3, r3, #8
 8012086:	61bb      	str	r3, [r7, #24]
 8012088:	e003      	b.n	8012092 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801208a:	2302      	movs	r3, #2
 801208c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801208e:	2300      	movs	r3, #0
 8012090:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d902      	bls.n	801209e <HAL_I2S_Init+0x152>
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	2bff      	cmp	r3, #255	@ 0xff
 801209c:	d907      	bls.n	80120ae <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120a2:	2210      	movs	r2, #16
 80120a4:	431a      	orrs	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80120aa:	2301      	movs	r3, #1
 80120ac:	e039      	b.n	8012122 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	691a      	ldr	r2, [r3, #16]
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	431a      	orrs	r2, r3
 80120b6:	0011      	movs	r1, r2
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	69fa      	ldr	r2, [r7, #28]
 80120be:	430a      	orrs	r2, r1
 80120c0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	69db      	ldr	r3, [r3, #28]
 80120c8:	4a18      	ldr	r2, [pc, #96]	@ (801212c <HAL_I2S_Init+0x1e0>)
 80120ca:	401a      	ands	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6859      	ldr	r1, [r3, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	4319      	orrs	r1, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	4319      	orrs	r1, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	430b      	orrs	r3, r1
 80120e2:	431a      	orrs	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2180      	movs	r1, #128	@ 0x80
 80120ea:	0109      	lsls	r1, r1, #4
 80120ec:	430a      	orrs	r2, r1
 80120ee:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	2b30      	cmp	r3, #48	@ 0x30
 80120f6:	d003      	beq.n	8012100 <HAL_I2S_Init+0x1b4>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	689b      	ldr	r3, [r3, #8]
 80120fc:	2bb0      	cmp	r3, #176	@ 0xb0
 80120fe:	d108      	bne.n	8012112 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	69da      	ldr	r2, [r3, #28]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	2180      	movs	r1, #128	@ 0x80
 801210c:	0149      	lsls	r1, r1, #5
 801210e:	430a      	orrs	r2, r1
 8012110:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2235      	movs	r2, #53	@ 0x35
 801211c:	2101      	movs	r1, #1
 801211e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	0018      	movs	r0, r3
 8012124:	46bd      	mov	sp, r7
 8012126:	b008      	add	sp, #32
 8012128:	bd80      	pop	{r7, pc}
 801212a:	46c0      	nop			@ (mov r8, r8)
 801212c:	fffff040 	.word	0xfffff040

08012130 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b086      	sub	sp, #24
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	1dbb      	adds	r3, r7, #6
 801213c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d003      	beq.n	801214c <HAL_I2S_Receive_DMA+0x1c>
 8012144:	1dbb      	adds	r3, r7, #6
 8012146:	881b      	ldrh	r3, [r3, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d101      	bne.n	8012150 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 801214c:	2301      	movs	r3, #1
 801214e:	e0a6      	b.n	801229e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2234      	movs	r2, #52	@ 0x34
 8012154:	5c9b      	ldrb	r3, [r3, r2]
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b01      	cmp	r3, #1
 801215a:	d101      	bne.n	8012160 <HAL_I2S_Receive_DMA+0x30>
 801215c:	2302      	movs	r3, #2
 801215e:	e09e      	b.n	801229e <HAL_I2S_Receive_DMA+0x16e>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2234      	movs	r2, #52	@ 0x34
 8012164:	2101      	movs	r1, #1
 8012166:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2235      	movs	r2, #53	@ 0x35
 801216c:	5c9b      	ldrb	r3, [r3, r2]
 801216e:	b2db      	uxtb	r3, r3
 8012170:	2b01      	cmp	r3, #1
 8012172:	d005      	beq.n	8012180 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2234      	movs	r2, #52	@ 0x34
 8012178:	2100      	movs	r1, #0
 801217a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 801217c:	2302      	movs	r3, #2
 801217e:	e08e      	b.n	801229e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	2235      	movs	r2, #53	@ 0x35
 8012184:	2104      	movs	r1, #4
 8012186:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	2200      	movs	r2, #0
 801218c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	69db      	ldr	r3, [r3, #28]
 801219a:	2207      	movs	r2, #7
 801219c:	4013      	ands	r3, r2
 801219e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	d002      	beq.n	80121ac <HAL_I2S_Receive_DMA+0x7c>
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2b05      	cmp	r3, #5
 80121aa:	d10c      	bne.n	80121c6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80121ac:	1dbb      	adds	r3, r7, #6
 80121ae:	881b      	ldrh	r3, [r3, #0]
 80121b0:	18db      	adds	r3, r3, r3
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80121b8:	1dbb      	adds	r3, r7, #6
 80121ba:	881b      	ldrh	r3, [r3, #0]
 80121bc:	18db      	adds	r3, r3, r3
 80121be:	b29a      	uxth	r2, r3
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80121c4:	e007      	b.n	80121d6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	1dba      	adds	r2, r7, #6
 80121ca:	8812      	ldrh	r2, [r2, #0]
 80121cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	1dba      	adds	r2, r7, #6
 80121d2:	8812      	ldrh	r2, [r2, #0]
 80121d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121da:	4a33      	ldr	r2, [pc, #204]	@ (80122a8 <HAL_I2S_Receive_DMA+0x178>)
 80121dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121e2:	4a32      	ldr	r2, [pc, #200]	@ (80122ac <HAL_I2S_Receive_DMA+0x17c>)
 80121e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121ea:	4a31      	ldr	r2, [pc, #196]	@ (80122b0 <HAL_I2S_Receive_DMA+0x180>)
 80121ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	69da      	ldr	r2, [r3, #28]
 80121f4:	23c0      	movs	r3, #192	@ 0xc0
 80121f6:	009b      	lsls	r3, r3, #2
 80121f8:	401a      	ands	r2, r3
 80121fa:	23c0      	movs	r3, #192	@ 0xc0
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	429a      	cmp	r2, r3
 8012200:	d10a      	bne.n	8012218 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012202:	2300      	movs	r3, #0
 8012204:	613b      	str	r3, [r7, #16]
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	68db      	ldr	r3, [r3, #12]
 801220c:	613b      	str	r3, [r7, #16]
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	689b      	ldr	r3, [r3, #8]
 8012214:	613b      	str	r3, [r7, #16]
 8012216:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	330c      	adds	r3, #12
 8012222:	0019      	movs	r1, r3
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012228:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801222e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012230:	f7fc fca2 	bl	800eb78 <HAL_DMA_Start_IT>
 8012234:	1e03      	subs	r3, r0, #0
 8012236:	d00f      	beq.n	8012258 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801223c:	2208      	movs	r2, #8
 801223e:	431a      	orrs	r2, r3
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2235      	movs	r2, #53	@ 0x35
 8012248:	2101      	movs	r1, #1
 801224a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2234      	movs	r2, #52	@ 0x34
 8012250:	2100      	movs	r1, #0
 8012252:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012254:	2301      	movs	r3, #1
 8012256:	e022      	b.n	801229e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	69da      	ldr	r2, [r3, #28]
 801225e:	2380      	movs	r3, #128	@ 0x80
 8012260:	00db      	lsls	r3, r3, #3
 8012262:	4013      	ands	r3, r2
 8012264:	d108      	bne.n	8012278 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	69da      	ldr	r2, [r3, #28]
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2180      	movs	r1, #128	@ 0x80
 8012272:	00c9      	lsls	r1, r1, #3
 8012274:	430a      	orrs	r2, r1
 8012276:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	2201      	movs	r2, #1
 8012280:	4013      	ands	r3, r2
 8012282:	d107      	bne.n	8012294 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	685a      	ldr	r2, [r3, #4]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2101      	movs	r1, #1
 8012290:	430a      	orrs	r2, r1
 8012292:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2234      	movs	r2, #52	@ 0x34
 8012298:	2100      	movs	r1, #0
 801229a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 801229c:	2300      	movs	r3, #0
}
 801229e:	0018      	movs	r0, r3
 80122a0:	46bd      	mov	sp, r7
 80122a2:	b006      	add	sp, #24
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	46c0      	nop			@ (mov r8, r8)
 80122a8:	08012491 	.word	0x08012491
 80122ac:	0801244d 	.word	0x0801244d
 80122b0:	080124af 	.word	0x080124af

080122b4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80122bc:	2317      	movs	r3, #23
 80122be:	18fb      	adds	r3, r7, r3
 80122c0:	2200      	movs	r2, #0
 80122c2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	2380      	movs	r3, #128	@ 0x80
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d003      	beq.n	80122d8 <HAL_I2S_DMAStop+0x24>
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d158      	bne.n	801238a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d010      	beq.n	8012302 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e4:	0018      	movs	r0, r3
 80122e6:	f7fc fcad 	bl	800ec44 <HAL_DMA_Abort>
 80122ea:	1e03      	subs	r3, r0, #0
 80122ec:	d009      	beq.n	8012302 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122f2:	2208      	movs	r2, #8
 80122f4:	431a      	orrs	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80122fa:	2317      	movs	r3, #23
 80122fc:	18fb      	adds	r3, r7, r3
 80122fe:	2201      	movs	r2, #1
 8012300:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	2364      	movs	r3, #100	@ 0x64
 8012306:	2201      	movs	r2, #1
 8012308:	2102      	movs	r1, #2
 801230a:	f000 f8f7 	bl	80124fc <I2S_WaitFlagStateUntilTimeout>
 801230e:	1e03      	subs	r3, r0, #0
 8012310:	d00d      	beq.n	801232e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012316:	2201      	movs	r2, #1
 8012318:	431a      	orrs	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2235      	movs	r2, #53	@ 0x35
 8012322:	2101      	movs	r1, #1
 8012324:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012326:	2317      	movs	r3, #23
 8012328:	18fb      	adds	r3, r7, r3
 801232a:	2201      	movs	r2, #1
 801232c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	2364      	movs	r3, #100	@ 0x64
 8012332:	2200      	movs	r2, #0
 8012334:	2180      	movs	r1, #128	@ 0x80
 8012336:	f000 f8e1 	bl	80124fc <I2S_WaitFlagStateUntilTimeout>
 801233a:	1e03      	subs	r3, r0, #0
 801233c:	d00d      	beq.n	801235a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012342:	2201      	movs	r2, #1
 8012344:	431a      	orrs	r2, r3
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2235      	movs	r2, #53	@ 0x35
 801234e:	2101      	movs	r1, #1
 8012350:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012352:	2317      	movs	r3, #23
 8012354:	18fb      	adds	r3, r7, r3
 8012356:	2201      	movs	r2, #1
 8012358:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	69da      	ldr	r2, [r3, #28]
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4938      	ldr	r1, [pc, #224]	@ (8012448 <HAL_I2S_DMAStop+0x194>)
 8012366:	400a      	ands	r2, r1
 8012368:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 801236a:	2300      	movs	r3, #0
 801236c:	613b      	str	r3, [r7, #16]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	689b      	ldr	r3, [r3, #8]
 8012374:	613b      	str	r3, [r7, #16]
 8012376:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	685a      	ldr	r2, [r3, #4]
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	2102      	movs	r1, #2
 8012384:	438a      	bics	r2, r1
 8012386:	605a      	str	r2, [r3, #4]
 8012388:	e053      	b.n	8012432 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	685a      	ldr	r2, [r3, #4]
 801238e:	23c0      	movs	r3, #192	@ 0xc0
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	429a      	cmp	r2, r3
 8012394:	d005      	beq.n	80123a2 <HAL_I2S_DMAStop+0xee>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	2380      	movs	r3, #128	@ 0x80
 801239c:	005b      	lsls	r3, r3, #1
 801239e:	429a      	cmp	r2, r3
 80123a0:	d147      	bne.n	8012432 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d010      	beq.n	80123cc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123ae:	0018      	movs	r0, r3
 80123b0:	f7fc fc48 	bl	800ec44 <HAL_DMA_Abort>
 80123b4:	1e03      	subs	r3, r0, #0
 80123b6:	d009      	beq.n	80123cc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123bc:	2208      	movs	r2, #8
 80123be:	431a      	orrs	r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80123c4:	2317      	movs	r3, #23
 80123c6:	18fb      	adds	r3, r7, r3
 80123c8:	2201      	movs	r2, #1
 80123ca:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	69da      	ldr	r2, [r3, #28]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	491c      	ldr	r1, [pc, #112]	@ (8012448 <HAL_I2S_DMAStop+0x194>)
 80123d8:	400a      	ands	r2, r1
 80123da:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80123dc:	2300      	movs	r3, #0
 80123de:	60fb      	str	r3, [r7, #12]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	68db      	ldr	r3, [r3, #12]
 80123e6:	60fb      	str	r3, [r7, #12]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	60fb      	str	r3, [r7, #12]
 80123f0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	685a      	ldr	r2, [r3, #4]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2101      	movs	r1, #1
 80123fe:	438a      	bics	r2, r1
 8012400:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	2380      	movs	r3, #128	@ 0x80
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	429a      	cmp	r2, r3
 801240c:	d10e      	bne.n	801242c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012412:	2240      	movs	r2, #64	@ 0x40
 8012414:	431a      	orrs	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2235      	movs	r2, #53	@ 0x35
 801241e:	2101      	movs	r1, #1
 8012420:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8012422:	2317      	movs	r3, #23
 8012424:	18fb      	adds	r3, r7, r3
 8012426:	2201      	movs	r2, #1
 8012428:	701a      	strb	r2, [r3, #0]
 801242a:	e002      	b.n	8012432 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2235      	movs	r2, #53	@ 0x35
 8012436:	2101      	movs	r1, #1
 8012438:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801243a:	2317      	movs	r3, #23
 801243c:	18fb      	adds	r3, r7, r3
 801243e:	781b      	ldrb	r3, [r3, #0]
}
 8012440:	0018      	movs	r0, r3
 8012442:	46bd      	mov	sp, r7
 8012444:	b006      	add	sp, #24
 8012446:	bd80      	pop	{r7, pc}
 8012448:	fffffbff 	.word	0xfffffbff

0801244c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012458:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	69db      	ldr	r3, [r3, #28]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d10e      	bne.n	8012480 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	685a      	ldr	r2, [r3, #4]
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2101      	movs	r1, #1
 801246e:	438a      	bics	r2, r1
 8012470:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2200      	movs	r2, #0
 8012476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	2235      	movs	r2, #53	@ 0x35
 801247c:	2101      	movs	r1, #1
 801247e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	0018      	movs	r0, r3
 8012484:	f7f9 fc56 	bl	800bd34 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012488:	46c0      	nop			@ (mov r8, r8)
 801248a:	46bd      	mov	sp, r7
 801248c:	b004      	add	sp, #16
 801248e:	bd80      	pop	{r7, pc}

08012490 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801249c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	0018      	movs	r0, r3
 80124a2:	f7f9 fc35 	bl	800bd10 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80124a6:	46c0      	nop			@ (mov r8, r8)
 80124a8:	46bd      	mov	sp, r7
 80124aa:	b004      	add	sp, #16
 80124ac:	bd80      	pop	{r7, pc}

080124ae <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80124ae:	b580      	push	{r7, lr}
 80124b0:	b084      	sub	sp, #16
 80124b2:	af00      	add	r7, sp, #0
 80124b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124ba:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	685a      	ldr	r2, [r3, #4]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2103      	movs	r1, #3
 80124c8:	438a      	bics	r2, r1
 80124ca:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2200      	movs	r2, #0
 80124d0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2200      	movs	r2, #0
 80124d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	2235      	movs	r2, #53	@ 0x35
 80124dc:	2101      	movs	r1, #1
 80124de:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124e4:	2208      	movs	r2, #8
 80124e6:	431a      	orrs	r2, r3
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	0018      	movs	r0, r3
 80124f0:	f7f9 fc6e 	bl	800bdd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80124f4:	46c0      	nop			@ (mov r8, r8)
 80124f6:	46bd      	mov	sp, r7
 80124f8:	b004      	add	sp, #16
 80124fa:	bd80      	pop	{r7, pc}

080124fc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	1dfb      	adds	r3, r7, #7
 801250a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801250c:	f7fb fdf8 	bl	800e100 <HAL_GetTick>
 8012510:	0003      	movs	r3, r0
 8012512:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012514:	e017      	b.n	8012546 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	3301      	adds	r3, #1
 801251a:	d014      	beq.n	8012546 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 801251c:	f7fb fdf0 	bl	800e100 <HAL_GetTick>
 8012520:	0002      	movs	r2, r0
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	683a      	ldr	r2, [r7, #0]
 8012528:	429a      	cmp	r2, r3
 801252a:	d902      	bls.n	8012532 <I2S_WaitFlagStateUntilTimeout+0x36>
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2235      	movs	r2, #53	@ 0x35
 8012536:	2101      	movs	r1, #1
 8012538:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2234      	movs	r2, #52	@ 0x34
 801253e:	2100      	movs	r1, #0
 8012540:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012542:	2303      	movs	r3, #3
 8012544:	e00f      	b.n	8012566 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	689b      	ldr	r3, [r3, #8]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	4013      	ands	r3, r2
 8012550:	68ba      	ldr	r2, [r7, #8]
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	425a      	negs	r2, r3
 8012556:	4153      	adcs	r3, r2
 8012558:	b2db      	uxtb	r3, r3
 801255a:	001a      	movs	r2, r3
 801255c:	1dfb      	adds	r3, r7, #7
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	429a      	cmp	r2, r3
 8012562:	d1d8      	bne.n	8012516 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8012564:	2300      	movs	r3, #0
}
 8012566:	0018      	movs	r0, r3
 8012568:	46bd      	mov	sp, r7
 801256a:	b006      	add	sp, #24
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012572:	b08b      	sub	sp, #44	@ 0x2c
 8012574:	af06      	add	r7, sp, #24
 8012576:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d101      	bne.n	8012582 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801257e:	2301      	movs	r3, #1
 8012580:	e0f0      	b.n	8012764 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4a79      	ldr	r2, [pc, #484]	@ (801276c <HAL_PCD_Init+0x1fc>)
 8012586:	5c9b      	ldrb	r3, [r3, r2]
 8012588:	b2db      	uxtb	r3, r3
 801258a:	2b00      	cmp	r3, #0
 801258c:	d108      	bne.n	80125a0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	23aa      	movs	r3, #170	@ 0xaa
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	2100      	movs	r1, #0
 8012596:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	0018      	movs	r0, r3
 801259c:	f009 ff34 	bl	801c408 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	4a72      	ldr	r2, [pc, #456]	@ (801276c <HAL_PCD_Init+0x1fc>)
 80125a4:	2103      	movs	r1, #3
 80125a6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	0018      	movs	r0, r3
 80125ae:	f005 fee7 	bl	8018380 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80125b2:	230f      	movs	r3, #15
 80125b4:	18fb      	adds	r3, r7, r3
 80125b6:	2200      	movs	r2, #0
 80125b8:	701a      	strb	r2, [r3, #0]
 80125ba:	e049      	b.n	8012650 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80125bc:	200f      	movs	r0, #15
 80125be:	183b      	adds	r3, r7, r0
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	6879      	ldr	r1, [r7, #4]
 80125c4:	1c5a      	adds	r2, r3, #1
 80125c6:	0013      	movs	r3, r2
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	189b      	adds	r3, r3, r2
 80125cc:	00db      	lsls	r3, r3, #3
 80125ce:	18cb      	adds	r3, r1, r3
 80125d0:	3301      	adds	r3, #1
 80125d2:	2201      	movs	r2, #1
 80125d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80125d6:	183b      	adds	r3, r7, r0
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	6879      	ldr	r1, [r7, #4]
 80125dc:	1c5a      	adds	r2, r3, #1
 80125de:	0013      	movs	r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	189b      	adds	r3, r3, r2
 80125e4:	00db      	lsls	r3, r3, #3
 80125e6:	183a      	adds	r2, r7, r0
 80125e8:	7812      	ldrb	r2, [r2, #0]
 80125ea:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80125ec:	183b      	adds	r3, r7, r0
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	6879      	ldr	r1, [r7, #4]
 80125f2:	1c5a      	adds	r2, r3, #1
 80125f4:	0013      	movs	r3, r2
 80125f6:	009b      	lsls	r3, r3, #2
 80125f8:	189b      	adds	r3, r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	18cb      	adds	r3, r1, r3
 80125fe:	3303      	adds	r3, #3
 8012600:	2200      	movs	r2, #0
 8012602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012604:	183b      	adds	r3, r7, r0
 8012606:	781a      	ldrb	r2, [r3, #0]
 8012608:	6879      	ldr	r1, [r7, #4]
 801260a:	0013      	movs	r3, r2
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	189b      	adds	r3, r3, r2
 8012610:	00db      	lsls	r3, r3, #3
 8012612:	18cb      	adds	r3, r1, r3
 8012614:	3338      	adds	r3, #56	@ 0x38
 8012616:	2200      	movs	r2, #0
 8012618:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801261a:	183b      	adds	r3, r7, r0
 801261c:	781a      	ldrb	r2, [r3, #0]
 801261e:	6879      	ldr	r1, [r7, #4]
 8012620:	0013      	movs	r3, r2
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	189b      	adds	r3, r3, r2
 8012626:	00db      	lsls	r3, r3, #3
 8012628:	18cb      	adds	r3, r1, r3
 801262a:	333c      	adds	r3, #60	@ 0x3c
 801262c:	2200      	movs	r2, #0
 801262e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8012630:	183b      	adds	r3, r7, r0
 8012632:	781a      	ldrb	r2, [r3, #0]
 8012634:	6879      	ldr	r1, [r7, #4]
 8012636:	0013      	movs	r3, r2
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	189b      	adds	r3, r3, r2
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	18cb      	adds	r3, r1, r3
 8012640:	3340      	adds	r3, #64	@ 0x40
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012646:	183b      	adds	r3, r7, r0
 8012648:	781a      	ldrb	r2, [r3, #0]
 801264a:	183b      	adds	r3, r7, r0
 801264c:	3201      	adds	r2, #1
 801264e:	701a      	strb	r2, [r3, #0]
 8012650:	210f      	movs	r1, #15
 8012652:	187b      	adds	r3, r7, r1
 8012654:	781a      	ldrb	r2, [r3, #0]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	429a      	cmp	r2, r3
 801265c:	d3ae      	bcc.n	80125bc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801265e:	187b      	adds	r3, r7, r1
 8012660:	2200      	movs	r2, #0
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	e056      	b.n	8012714 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8012666:	240f      	movs	r4, #15
 8012668:	193b      	adds	r3, r7, r4
 801266a:	781a      	ldrb	r2, [r3, #0]
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	236a      	movs	r3, #106	@ 0x6a
 8012670:	33ff      	adds	r3, #255	@ 0xff
 8012672:	0019      	movs	r1, r3
 8012674:	0013      	movs	r3, r2
 8012676:	009b      	lsls	r3, r3, #2
 8012678:	189b      	adds	r3, r3, r2
 801267a:	00db      	lsls	r3, r3, #3
 801267c:	18c3      	adds	r3, r0, r3
 801267e:	185b      	adds	r3, r3, r1
 8012680:	2200      	movs	r2, #0
 8012682:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012684:	193b      	adds	r3, r7, r4
 8012686:	781a      	ldrb	r2, [r3, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	23b4      	movs	r3, #180	@ 0xb4
 801268c:	0059      	lsls	r1, r3, #1
 801268e:	0013      	movs	r3, r2
 8012690:	009b      	lsls	r3, r3, #2
 8012692:	189b      	adds	r3, r3, r2
 8012694:	00db      	lsls	r3, r3, #3
 8012696:	18c3      	adds	r3, r0, r3
 8012698:	185b      	adds	r3, r3, r1
 801269a:	193a      	adds	r2, r7, r4
 801269c:	7812      	ldrb	r2, [r2, #0]
 801269e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80126a0:	193b      	adds	r3, r7, r4
 80126a2:	781a      	ldrb	r2, [r3, #0]
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	236c      	movs	r3, #108	@ 0x6c
 80126a8:	33ff      	adds	r3, #255	@ 0xff
 80126aa:	0019      	movs	r1, r3
 80126ac:	0013      	movs	r3, r2
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	189b      	adds	r3, r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	18c3      	adds	r3, r0, r3
 80126b6:	185b      	adds	r3, r3, r1
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80126bc:	193b      	adds	r3, r7, r4
 80126be:	781a      	ldrb	r2, [r3, #0]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	23bc      	movs	r3, #188	@ 0xbc
 80126c4:	0059      	lsls	r1, r3, #1
 80126c6:	0013      	movs	r3, r2
 80126c8:	009b      	lsls	r3, r3, #2
 80126ca:	189b      	adds	r3, r3, r2
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	18c3      	adds	r3, r0, r3
 80126d0:	185b      	adds	r3, r3, r1
 80126d2:	2200      	movs	r2, #0
 80126d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80126d6:	193b      	adds	r3, r7, r4
 80126d8:	781a      	ldrb	r2, [r3, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	23be      	movs	r3, #190	@ 0xbe
 80126de:	0059      	lsls	r1, r3, #1
 80126e0:	0013      	movs	r3, r2
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	189b      	adds	r3, r3, r2
 80126e6:	00db      	lsls	r3, r3, #3
 80126e8:	18c3      	adds	r3, r0, r3
 80126ea:	185b      	adds	r3, r3, r1
 80126ec:	2200      	movs	r2, #0
 80126ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80126f0:	193b      	adds	r3, r7, r4
 80126f2:	781a      	ldrb	r2, [r3, #0]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	23c0      	movs	r3, #192	@ 0xc0
 80126f8:	0059      	lsls	r1, r3, #1
 80126fa:	0013      	movs	r3, r2
 80126fc:	009b      	lsls	r3, r3, #2
 80126fe:	189b      	adds	r3, r3, r2
 8012700:	00db      	lsls	r3, r3, #3
 8012702:	18c3      	adds	r3, r0, r3
 8012704:	185b      	adds	r3, r3, r1
 8012706:	2200      	movs	r2, #0
 8012708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801270a:	193b      	adds	r3, r7, r4
 801270c:	781a      	ldrb	r2, [r3, #0]
 801270e:	193b      	adds	r3, r7, r4
 8012710:	3201      	adds	r2, #1
 8012712:	701a      	strb	r2, [r3, #0]
 8012714:	230f      	movs	r3, #15
 8012716:	18fb      	adds	r3, r7, r3
 8012718:	781a      	ldrb	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	429a      	cmp	r2, r3
 8012720:	d3a1      	bcc.n	8012666 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6818      	ldr	r0, [r3, #0]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	466a      	mov	r2, sp
 801272a:	0011      	movs	r1, r2
 801272c:	001a      	movs	r2, r3
 801272e:	3210      	adds	r2, #16
 8012730:	ca70      	ldmia	r2!, {r4, r5, r6}
 8012732:	c170      	stmia	r1!, {r4, r5, r6}
 8012734:	ca30      	ldmia	r2!, {r4, r5}
 8012736:	c130      	stmia	r1!, {r4, r5}
 8012738:	6859      	ldr	r1, [r3, #4]
 801273a:	689a      	ldr	r2, [r3, #8]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	f005 fe39 	bl	80183b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2224      	movs	r2, #36	@ 0x24
 8012746:	2100      	movs	r1, #0
 8012748:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4a07      	ldr	r2, [pc, #28]	@ (801276c <HAL_PCD_Init+0x1fc>)
 801274e:	2101      	movs	r1, #1
 8012750:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	69db      	ldr	r3, [r3, #28]
 8012756:	2b01      	cmp	r3, #1
 8012758:	d103      	bne.n	8012762 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	0018      	movs	r0, r3
 801275e:	f001 fd23 	bl	80141a8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8012762:	2300      	movs	r3, #0
}
 8012764:	0018      	movs	r0, r3
 8012766:	46bd      	mov	sp, r7
 8012768:	b005      	add	sp, #20
 801276a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801276c:	000002a9 	.word	0x000002a9

08012770 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012778:	687a      	ldr	r2, [r7, #4]
 801277a:	23aa      	movs	r3, #170	@ 0xaa
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	5cd3      	ldrb	r3, [r2, r3]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d101      	bne.n	8012788 <HAL_PCD_Start+0x18>
 8012784:	2302      	movs	r3, #2
 8012786:	e014      	b.n	80127b2 <HAL_PCD_Start+0x42>
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	23aa      	movs	r3, #170	@ 0xaa
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	2101      	movs	r1, #1
 8012790:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	0018      	movs	r0, r3
 8012798:	f005 fddc 	bl	8018354 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	0018      	movs	r0, r3
 80127a2:	f007 fddf 	bl	801a364 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	23aa      	movs	r3, #170	@ 0xaa
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	2100      	movs	r1, #0
 80127ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	0018      	movs	r0, r3
 80127b4:	46bd      	mov	sp, r7
 80127b6:	b002      	add	sp, #8
 80127b8:	bd80      	pop	{r7, pc}
	...

080127bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	0018      	movs	r0, r3
 80127ca:	f007 fde1 	bl	801a390 <USB_ReadInterrupts>
 80127ce:	0003      	movs	r3, r0
 80127d0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80127d2:	68fa      	ldr	r2, [r7, #12]
 80127d4:	2380      	movs	r3, #128	@ 0x80
 80127d6:	021b      	lsls	r3, r3, #8
 80127d8:	4013      	ands	r3, r2
 80127da:	d004      	beq.n	80127e6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	0018      	movs	r0, r3
 80127e0:	f000 fb62 	bl	8012ea8 <PCD_EP_ISR_Handler>

    return;
 80127e4:	e11d      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80127e6:	68fa      	ldr	r2, [r7, #12]
 80127e8:	2380      	movs	r3, #128	@ 0x80
 80127ea:	00db      	lsls	r3, r3, #3
 80127ec:	4013      	ands	r3, r2
 80127ee:	d015      	beq.n	801281c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2244      	movs	r2, #68	@ 0x44
 80127f6:	5a9b      	ldrh	r3, [r3, r2]
 80127f8:	b29a      	uxth	r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	498a      	ldr	r1, [pc, #552]	@ (8012a28 <HAL_PCD_IRQHandler+0x26c>)
 8012800:	400a      	ands	r2, r1
 8012802:	b291      	uxth	r1, r2
 8012804:	2244      	movs	r2, #68	@ 0x44
 8012806:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	0018      	movs	r0, r3
 801280c:	f009 fe7f 	bl	801c50e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2100      	movs	r1, #0
 8012814:	0018      	movs	r0, r3
 8012816:	f000 f915 	bl	8012a44 <HAL_PCD_SetAddress>

    return;
 801281a:	e102      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	2380      	movs	r3, #128	@ 0x80
 8012820:	01db      	lsls	r3, r3, #7
 8012822:	4013      	ands	r3, r2
 8012824:	d00c      	beq.n	8012840 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	2244      	movs	r2, #68	@ 0x44
 801282c:	5a9b      	ldrh	r3, [r3, r2]
 801282e:	b29a      	uxth	r2, r3
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	497d      	ldr	r1, [pc, #500]	@ (8012a2c <HAL_PCD_IRQHandler+0x270>)
 8012836:	400a      	ands	r2, r1
 8012838:	b291      	uxth	r1, r2
 801283a:	2244      	movs	r2, #68	@ 0x44
 801283c:	5299      	strh	r1, [r3, r2]

    return;
 801283e:	e0f0      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	2380      	movs	r3, #128	@ 0x80
 8012844:	019b      	lsls	r3, r3, #6
 8012846:	4013      	ands	r3, r2
 8012848:	d00c      	beq.n	8012864 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2244      	movs	r2, #68	@ 0x44
 8012850:	5a9b      	ldrh	r3, [r3, r2]
 8012852:	b29a      	uxth	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4975      	ldr	r1, [pc, #468]	@ (8012a30 <HAL_PCD_IRQHandler+0x274>)
 801285a:	400a      	ands	r2, r1
 801285c:	b291      	uxth	r1, r2
 801285e:	2244      	movs	r2, #68	@ 0x44
 8012860:	5299      	strh	r1, [r3, r2]

    return;
 8012862:	e0de      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	2380      	movs	r3, #128	@ 0x80
 8012868:	015b      	lsls	r3, r3, #5
 801286a:	4013      	ands	r3, r2
 801286c:	d038      	beq.n	80128e0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2240      	movs	r2, #64	@ 0x40
 8012874:	5a9b      	ldrh	r3, [r3, r2]
 8012876:	b29a      	uxth	r2, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	2104      	movs	r1, #4
 801287e:	438a      	bics	r2, r1
 8012880:	b291      	uxth	r1, r2
 8012882:	2240      	movs	r2, #64	@ 0x40
 8012884:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2240      	movs	r2, #64	@ 0x40
 801288c:	5a9b      	ldrh	r3, [r3, r2]
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2108      	movs	r1, #8
 8012896:	438a      	bics	r2, r1
 8012898:	b291      	uxth	r1, r2
 801289a:	2240      	movs	r2, #64	@ 0x40
 801289c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	23b8      	movs	r3, #184	@ 0xb8
 80128a2:	009b      	lsls	r3, r3, #2
 80128a4:	5cd3      	ldrb	r3, [r2, r3]
 80128a6:	2b01      	cmp	r3, #1
 80128a8:	d109      	bne.n	80128be <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 80128aa:	687a      	ldr	r2, [r7, #4]
 80128ac:	23b8      	movs	r3, #184	@ 0xb8
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	2100      	movs	r1, #0
 80128b2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2100      	movs	r1, #0
 80128b8:	0018      	movs	r0, r3
 80128ba:	f001 fc9f 	bl	80141fc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	0018      	movs	r0, r3
 80128c2:	f009 fe65 	bl	801c590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2244      	movs	r2, #68	@ 0x44
 80128cc:	5a9b      	ldrh	r3, [r3, r2]
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4957      	ldr	r1, [pc, #348]	@ (8012a34 <HAL_PCD_IRQHandler+0x278>)
 80128d6:	400a      	ands	r2, r1
 80128d8:	b291      	uxth	r1, r2
 80128da:	2244      	movs	r2, #68	@ 0x44
 80128dc:	5299      	strh	r1, [r3, r2]

    return;
 80128de:	e0a0      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80128e0:	68fa      	ldr	r2, [r7, #12]
 80128e2:	2380      	movs	r3, #128	@ 0x80
 80128e4:	011b      	lsls	r3, r3, #4
 80128e6:	4013      	ands	r3, r2
 80128e8:	d028      	beq.n	801293c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	2240      	movs	r2, #64	@ 0x40
 80128f0:	5a9b      	ldrh	r3, [r3, r2]
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2108      	movs	r1, #8
 80128fa:	430a      	orrs	r2, r1
 80128fc:	b291      	uxth	r1, r2
 80128fe:	2240      	movs	r2, #64	@ 0x40
 8012900:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2244      	movs	r2, #68	@ 0x44
 8012908:	5a9b      	ldrh	r3, [r3, r2]
 801290a:	b29a      	uxth	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4949      	ldr	r1, [pc, #292]	@ (8012a38 <HAL_PCD_IRQHandler+0x27c>)
 8012912:	400a      	ands	r2, r1
 8012914:	b291      	uxth	r1, r2
 8012916:	2244      	movs	r2, #68	@ 0x44
 8012918:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2240      	movs	r2, #64	@ 0x40
 8012920:	5a9b      	ldrh	r3, [r3, r2]
 8012922:	b29a      	uxth	r2, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2104      	movs	r1, #4
 801292a:	430a      	orrs	r2, r1
 801292c:	b291      	uxth	r1, r2
 801292e:	2240      	movs	r2, #64	@ 0x40
 8012930:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	0018      	movs	r0, r3
 8012936:	f009 fe0f 	bl	801c558 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801293a:	e072      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	2280      	movs	r2, #128	@ 0x80
 8012940:	4013      	ands	r3, r2
 8012942:	d046      	beq.n	80129d2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	2244      	movs	r2, #68	@ 0x44
 801294a:	5a9b      	ldrh	r3, [r3, r2]
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2180      	movs	r1, #128	@ 0x80
 8012954:	438a      	bics	r2, r1
 8012956:	b291      	uxth	r1, r2
 8012958:	2244      	movs	r2, #68	@ 0x44
 801295a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	23b8      	movs	r3, #184	@ 0xb8
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	5cd3      	ldrb	r3, [r2, r3]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d12f      	bne.n	80129c8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2240      	movs	r2, #64	@ 0x40
 801296e:	5a9b      	ldrh	r3, [r3, r2]
 8012970:	b29a      	uxth	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2104      	movs	r1, #4
 8012978:	430a      	orrs	r2, r1
 801297a:	b291      	uxth	r1, r2
 801297c:	2240      	movs	r2, #64	@ 0x40
 801297e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2240      	movs	r2, #64	@ 0x40
 8012986:	5a9b      	ldrh	r3, [r3, r2]
 8012988:	b29a      	uxth	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	2108      	movs	r1, #8
 8012990:	430a      	orrs	r2, r1
 8012992:	b291      	uxth	r1, r2
 8012994:	2240      	movs	r2, #64	@ 0x40
 8012996:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	23b8      	movs	r3, #184	@ 0xb8
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	2101      	movs	r1, #1
 80129a0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2254      	movs	r2, #84	@ 0x54
 80129a8:	5a9b      	ldrh	r3, [r3, r2]
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	089b      	lsrs	r3, r3, #2
 80129ae:	223c      	movs	r2, #60	@ 0x3c
 80129b0:	4013      	ands	r3, r2
 80129b2:	0019      	movs	r1, r3
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	23b9      	movs	r3, #185	@ 0xb9
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2101      	movs	r1, #1
 80129c0:	0018      	movs	r0, r3
 80129c2:	f001 fc1b 	bl	80141fc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80129c6:	e02c      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	0018      	movs	r0, r3
 80129cc:	f009 fdc4 	bl	801c558 <HAL_PCD_SuspendCallback>
    return;
 80129d0:	e027      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80129d2:	68fa      	ldr	r2, [r7, #12]
 80129d4:	2380      	movs	r3, #128	@ 0x80
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4013      	ands	r3, r2
 80129da:	d010      	beq.n	80129fe <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2244      	movs	r2, #68	@ 0x44
 80129e2:	5a9b      	ldrh	r3, [r3, r2]
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4914      	ldr	r1, [pc, #80]	@ (8012a3c <HAL_PCD_IRQHandler+0x280>)
 80129ec:	400a      	ands	r2, r1
 80129ee:	b291      	uxth	r1, r2
 80129f0:	2244      	movs	r2, #68	@ 0x44
 80129f2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	0018      	movs	r0, r3
 80129f8:	f009 fd7a 	bl	801c4f0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80129fc:	e011      	b.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	2380      	movs	r3, #128	@ 0x80
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	4013      	ands	r3, r2
 8012a06:	d00c      	beq.n	8012a22 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	2244      	movs	r2, #68	@ 0x44
 8012a0e:	5a9b      	ldrh	r3, [r3, r2]
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	490a      	ldr	r1, [pc, #40]	@ (8012a40 <HAL_PCD_IRQHandler+0x284>)
 8012a18:	400a      	ands	r2, r1
 8012a1a:	b291      	uxth	r1, r2
 8012a1c:	2244      	movs	r2, #68	@ 0x44
 8012a1e:	5299      	strh	r1, [r3, r2]

    return;
 8012a20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8012a22:	46bd      	mov	sp, r7
 8012a24:	b004      	add	sp, #16
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	fffffbff 	.word	0xfffffbff
 8012a2c:	ffffbfff 	.word	0xffffbfff
 8012a30:	ffffdfff 	.word	0xffffdfff
 8012a34:	ffffefff 	.word	0xffffefff
 8012a38:	fffff7ff 	.word	0xfffff7ff
 8012a3c:	fffffdff 	.word	0xfffffdff
 8012a40:	fffffeff 	.word	0xfffffeff

08012a44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	000a      	movs	r2, r1
 8012a4e:	1cfb      	adds	r3, r7, #3
 8012a50:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	23aa      	movs	r3, #170	@ 0xaa
 8012a56:	009b      	lsls	r3, r3, #2
 8012a58:	5cd3      	ldrb	r3, [r2, r3]
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d101      	bne.n	8012a62 <HAL_PCD_SetAddress+0x1e>
 8012a5e:	2302      	movs	r3, #2
 8012a60:	e017      	b.n	8012a92 <HAL_PCD_SetAddress+0x4e>
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	23aa      	movs	r3, #170	@ 0xaa
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	2101      	movs	r1, #1
 8012a6a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	1cfa      	adds	r2, r7, #3
 8012a70:	2124      	movs	r1, #36	@ 0x24
 8012a72:	7812      	ldrb	r2, [r2, #0]
 8012a74:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681a      	ldr	r2, [r3, #0]
 8012a7a:	1cfb      	adds	r3, r7, #3
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	0019      	movs	r1, r3
 8012a80:	0010      	movs	r0, r2
 8012a82:	f007 fc5b 	bl	801a33c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	23aa      	movs	r3, #170	@ 0xaa
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012a90:	2300      	movs	r3, #0
}
 8012a92:	0018      	movs	r0, r3
 8012a94:	46bd      	mov	sp, r7
 8012a96:	b002      	add	sp, #8
 8012a98:	bd80      	pop	{r7, pc}

08012a9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012a9a:	b590      	push	{r4, r7, lr}
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
 8012aa2:	000c      	movs	r4, r1
 8012aa4:	0010      	movs	r0, r2
 8012aa6:	0019      	movs	r1, r3
 8012aa8:	1cfb      	adds	r3, r7, #3
 8012aaa:	1c22      	adds	r2, r4, #0
 8012aac:	701a      	strb	r2, [r3, #0]
 8012aae:	003b      	movs	r3, r7
 8012ab0:	1c02      	adds	r2, r0, #0
 8012ab2:	801a      	strh	r2, [r3, #0]
 8012ab4:	1cbb      	adds	r3, r7, #2
 8012ab6:	1c0a      	adds	r2, r1, #0
 8012ab8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012aba:	230b      	movs	r3, #11
 8012abc:	18fb      	adds	r3, r7, r3
 8012abe:	2200      	movs	r2, #0
 8012ac0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012ac2:	1cfb      	adds	r3, r7, #3
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	b25b      	sxtb	r3, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	da0f      	bge.n	8012aec <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012acc:	1cfb      	adds	r3, r7, #3
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	2207      	movs	r2, #7
 8012ad2:	4013      	ands	r3, r2
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	0013      	movs	r3, r2
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	189b      	adds	r3, r3, r2
 8012adc:	00db      	lsls	r3, r3, #3
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	18d3      	adds	r3, r2, r3
 8012ae2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	705a      	strb	r2, [r3, #1]
 8012aea:	e00f      	b.n	8012b0c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012aec:	1cfb      	adds	r3, r7, #3
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	2207      	movs	r2, #7
 8012af2:	401a      	ands	r2, r3
 8012af4:	0013      	movs	r3, r2
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	189b      	adds	r3, r3, r2
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	3369      	adds	r3, #105	@ 0x69
 8012afe:	33ff      	adds	r3, #255	@ 0xff
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	18d3      	adds	r3, r2, r3
 8012b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012b0c:	1cfb      	adds	r3, r7, #3
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	2207      	movs	r2, #7
 8012b12:	4013      	ands	r3, r2
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012b1a:	003b      	movs	r3, r7
 8012b1c:	881a      	ldrh	r2, [r3, #0]
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	1cba      	adds	r2, r7, #2
 8012b26:	7812      	ldrb	r2, [r2, #0]
 8012b28:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012b2a:	1cbb      	adds	r3, r7, #2
 8012b2c:	781b      	ldrb	r3, [r3, #0]
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	d102      	bne.n	8012b38 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2200      	movs	r2, #0
 8012b36:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012b38:	687a      	ldr	r2, [r7, #4]
 8012b3a:	23aa      	movs	r3, #170	@ 0xaa
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	5cd3      	ldrb	r3, [r2, r3]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d101      	bne.n	8012b48 <HAL_PCD_EP_Open+0xae>
 8012b44:	2302      	movs	r3, #2
 8012b46:	e013      	b.n	8012b70 <HAL_PCD_EP_Open+0xd6>
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	23aa      	movs	r3, #170	@ 0xaa
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	2101      	movs	r1, #1
 8012b50:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	68fa      	ldr	r2, [r7, #12]
 8012b58:	0011      	movs	r1, r2
 8012b5a:	0018      	movs	r0, r3
 8012b5c:	f005 fc52 	bl	8018404 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	23aa      	movs	r3, #170	@ 0xaa
 8012b64:	009b      	lsls	r3, r3, #2
 8012b66:	2100      	movs	r1, #0
 8012b68:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012b6a:	230b      	movs	r3, #11
 8012b6c:	18fb      	adds	r3, r7, r3
 8012b6e:	781b      	ldrb	r3, [r3, #0]
}
 8012b70:	0018      	movs	r0, r3
 8012b72:	46bd      	mov	sp, r7
 8012b74:	b005      	add	sp, #20
 8012b76:	bd90      	pop	{r4, r7, pc}

08012b78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	000a      	movs	r2, r1
 8012b82:	1cfb      	adds	r3, r7, #3
 8012b84:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012b86:	1cfb      	adds	r3, r7, #3
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	b25b      	sxtb	r3, r3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	da0f      	bge.n	8012bb0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012b90:	1cfb      	adds	r3, r7, #3
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	2207      	movs	r2, #7
 8012b96:	4013      	ands	r3, r2
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	0013      	movs	r3, r2
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	189b      	adds	r3, r3, r2
 8012ba0:	00db      	lsls	r3, r3, #3
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	18d3      	adds	r3, r2, r3
 8012ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	2201      	movs	r2, #1
 8012bac:	705a      	strb	r2, [r3, #1]
 8012bae:	e00f      	b.n	8012bd0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012bb0:	1cfb      	adds	r3, r7, #3
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2207      	movs	r2, #7
 8012bb6:	401a      	ands	r2, r3
 8012bb8:	0013      	movs	r3, r2
 8012bba:	009b      	lsls	r3, r3, #2
 8012bbc:	189b      	adds	r3, r3, r2
 8012bbe:	00db      	lsls	r3, r3, #3
 8012bc0:	3369      	adds	r3, #105	@ 0x69
 8012bc2:	33ff      	adds	r3, #255	@ 0xff
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	18d3      	adds	r3, r2, r3
 8012bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012bd0:	1cfb      	adds	r3, r7, #3
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2207      	movs	r2, #7
 8012bd6:	4013      	ands	r3, r2
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	23aa      	movs	r3, #170	@ 0xaa
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	5cd3      	ldrb	r3, [r2, r3]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d101      	bne.n	8012bee <HAL_PCD_EP_Close+0x76>
 8012bea:	2302      	movs	r3, #2
 8012bec:	e011      	b.n	8012c12 <HAL_PCD_EP_Close+0x9a>
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	23aa      	movs	r3, #170	@ 0xaa
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	2101      	movs	r1, #1
 8012bf6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	68fa      	ldr	r2, [r7, #12]
 8012bfe:	0011      	movs	r1, r2
 8012c00:	0018      	movs	r0, r3
 8012c02:	f005 ffa1 	bl	8018b48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	23aa      	movs	r3, #170	@ 0xaa
 8012c0a:	009b      	lsls	r3, r3, #2
 8012c0c:	2100      	movs	r1, #0
 8012c0e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	0018      	movs	r0, r3
 8012c14:	46bd      	mov	sp, r7
 8012c16:	b004      	add	sp, #16
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b086      	sub	sp, #24
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	60f8      	str	r0, [r7, #12]
 8012c22:	607a      	str	r2, [r7, #4]
 8012c24:	603b      	str	r3, [r7, #0]
 8012c26:	200b      	movs	r0, #11
 8012c28:	183b      	adds	r3, r7, r0
 8012c2a:	1c0a      	adds	r2, r1, #0
 8012c2c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012c2e:	0001      	movs	r1, r0
 8012c30:	187b      	adds	r3, r7, r1
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2207      	movs	r2, #7
 8012c36:	401a      	ands	r2, r3
 8012c38:	0013      	movs	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	189b      	adds	r3, r3, r2
 8012c3e:	00db      	lsls	r3, r3, #3
 8012c40:	3369      	adds	r3, #105	@ 0x69
 8012c42:	33ff      	adds	r3, #255	@ 0xff
 8012c44:	68fa      	ldr	r2, [r7, #12]
 8012c46:	18d3      	adds	r3, r2, r3
 8012c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	2200      	movs	r2, #0
 8012c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012c62:	187b      	adds	r3, r7, r1
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	2207      	movs	r2, #7
 8012c68:	4013      	ands	r3, r2
 8012c6a:	b2da      	uxtb	r2, r3
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	697a      	ldr	r2, [r7, #20]
 8012c76:	0011      	movs	r1, r2
 8012c78:	0018      	movs	r0, r3
 8012c7a:	f006 f925 	bl	8018ec8 <USB_EPStartXfer>

  return HAL_OK;
 8012c7e:	2300      	movs	r3, #0
}
 8012c80:	0018      	movs	r0, r3
 8012c82:	46bd      	mov	sp, r7
 8012c84:	b006      	add	sp, #24
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b082      	sub	sp, #8
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	6078      	str	r0, [r7, #4]
 8012c90:	000a      	movs	r2, r1
 8012c92:	1cfb      	adds	r3, r7, #3
 8012c94:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012c96:	1cfb      	adds	r3, r7, #3
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	2207      	movs	r2, #7
 8012c9c:	401a      	ands	r2, r3
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	23c2      	movs	r3, #194	@ 0xc2
 8012ca2:	0059      	lsls	r1, r3, #1
 8012ca4:	0013      	movs	r3, r2
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	189b      	adds	r3, r3, r2
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	18c3      	adds	r3, r0, r3
 8012cae:	185b      	adds	r3, r3, r1
 8012cb0:	681b      	ldr	r3, [r3, #0]
}
 8012cb2:	0018      	movs	r0, r3
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	b002      	add	sp, #8
 8012cb8:	bd80      	pop	{r7, pc}

08012cba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012cba:	b580      	push	{r7, lr}
 8012cbc:	b086      	sub	sp, #24
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	60f8      	str	r0, [r7, #12]
 8012cc2:	607a      	str	r2, [r7, #4]
 8012cc4:	603b      	str	r3, [r7, #0]
 8012cc6:	200b      	movs	r0, #11
 8012cc8:	183b      	adds	r3, r7, r0
 8012cca:	1c0a      	adds	r2, r1, #0
 8012ccc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012cce:	183b      	adds	r3, r7, r0
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	2207      	movs	r2, #7
 8012cd4:	4013      	ands	r3, r2
 8012cd6:	1c5a      	adds	r2, r3, #1
 8012cd8:	0013      	movs	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	189b      	adds	r3, r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	18d3      	adds	r3, r2, r3
 8012ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	683a      	ldr	r2, [r7, #0]
 8012cf0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	2224      	movs	r2, #36	@ 0x24
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	683a      	ldr	r2, [r7, #0]
 8012cfe:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	2200      	movs	r2, #0
 8012d04:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	2201      	movs	r2, #1
 8012d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012d0c:	183b      	adds	r3, r7, r0
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2207      	movs	r2, #7
 8012d12:	4013      	ands	r3, r2
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	697a      	ldr	r2, [r7, #20]
 8012d20:	0011      	movs	r1, r2
 8012d22:	0018      	movs	r0, r3
 8012d24:	f006 f8d0 	bl	8018ec8 <USB_EPStartXfer>

  return HAL_OK;
 8012d28:	2300      	movs	r3, #0
}
 8012d2a:	0018      	movs	r0, r3
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	b006      	add	sp, #24
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b084      	sub	sp, #16
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	000a      	movs	r2, r1
 8012d3c:	1cfb      	adds	r3, r7, #3
 8012d3e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012d40:	1cfb      	adds	r3, r7, #3
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2207      	movs	r2, #7
 8012d46:	401a      	ands	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d901      	bls.n	8012d54 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e046      	b.n	8012de2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012d54:	1cfb      	adds	r3, r7, #3
 8012d56:	781b      	ldrb	r3, [r3, #0]
 8012d58:	b25b      	sxtb	r3, r3
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	da0f      	bge.n	8012d7e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012d5e:	1cfb      	adds	r3, r7, #3
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	2207      	movs	r2, #7
 8012d64:	4013      	ands	r3, r2
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	0013      	movs	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	189b      	adds	r3, r3, r2
 8012d6e:	00db      	lsls	r3, r3, #3
 8012d70:	687a      	ldr	r2, [r7, #4]
 8012d72:	18d3      	adds	r3, r2, r3
 8012d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	2201      	movs	r2, #1
 8012d7a:	705a      	strb	r2, [r3, #1]
 8012d7c:	e00d      	b.n	8012d9a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012d7e:	1cfb      	adds	r3, r7, #3
 8012d80:	781a      	ldrb	r2, [r3, #0]
 8012d82:	0013      	movs	r3, r2
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	189b      	adds	r3, r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	3369      	adds	r3, #105	@ 0x69
 8012d8c:	33ff      	adds	r3, #255	@ 0xff
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	18d3      	adds	r3, r2, r3
 8012d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012da0:	1cfb      	adds	r3, r7, #3
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	2207      	movs	r2, #7
 8012da6:	4013      	ands	r3, r2
 8012da8:	b2da      	uxtb	r2, r3
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	23aa      	movs	r3, #170	@ 0xaa
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	5cd3      	ldrb	r3, [r2, r3]
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d101      	bne.n	8012dbe <HAL_PCD_EP_SetStall+0x8c>
 8012dba:	2302      	movs	r3, #2
 8012dbc:	e011      	b.n	8012de2 <HAL_PCD_EP_SetStall+0xb0>
 8012dbe:	687a      	ldr	r2, [r7, #4]
 8012dc0:	23aa      	movs	r3, #170	@ 0xaa
 8012dc2:	009b      	lsls	r3, r3, #2
 8012dc4:	2101      	movs	r1, #1
 8012dc6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	0011      	movs	r1, r2
 8012dd0:	0018      	movs	r0, r3
 8012dd2:	f007 f9b1 	bl	801a138 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	23aa      	movs	r3, #170	@ 0xaa
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	2100      	movs	r1, #0
 8012dde:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	0018      	movs	r0, r3
 8012de4:	46bd      	mov	sp, r7
 8012de6:	b004      	add	sp, #16
 8012de8:	bd80      	pop	{r7, pc}

08012dea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b084      	sub	sp, #16
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	6078      	str	r0, [r7, #4]
 8012df2:	000a      	movs	r2, r1
 8012df4:	1cfb      	adds	r3, r7, #3
 8012df6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012df8:	1cfb      	adds	r3, r7, #3
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	220f      	movs	r2, #15
 8012dfe:	401a      	ands	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d901      	bls.n	8012e0c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8012e08:	2301      	movs	r3, #1
 8012e0a:	e048      	b.n	8012e9e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012e0c:	1cfb      	adds	r3, r7, #3
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	b25b      	sxtb	r3, r3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	da0f      	bge.n	8012e36 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012e16:	1cfb      	adds	r3, r7, #3
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	2207      	movs	r2, #7
 8012e1c:	4013      	ands	r3, r2
 8012e1e:	1c5a      	adds	r2, r3, #1
 8012e20:	0013      	movs	r3, r2
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	189b      	adds	r3, r3, r2
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	687a      	ldr	r2, [r7, #4]
 8012e2a:	18d3      	adds	r3, r2, r3
 8012e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2201      	movs	r2, #1
 8012e32:	705a      	strb	r2, [r3, #1]
 8012e34:	e00f      	b.n	8012e56 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012e36:	1cfb      	adds	r3, r7, #3
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	2207      	movs	r2, #7
 8012e3c:	401a      	ands	r2, r3
 8012e3e:	0013      	movs	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	189b      	adds	r3, r3, r2
 8012e44:	00db      	lsls	r3, r3, #3
 8012e46:	3369      	adds	r3, #105	@ 0x69
 8012e48:	33ff      	adds	r3, #255	@ 0xff
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	18d3      	adds	r3, r2, r3
 8012e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	2200      	movs	r2, #0
 8012e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2200      	movs	r2, #0
 8012e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012e5c:	1cfb      	adds	r3, r7, #3
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	2207      	movs	r2, #7
 8012e62:	4013      	ands	r3, r2
 8012e64:	b2da      	uxtb	r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012e6a:	687a      	ldr	r2, [r7, #4]
 8012e6c:	23aa      	movs	r3, #170	@ 0xaa
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	5cd3      	ldrb	r3, [r2, r3]
 8012e72:	2b01      	cmp	r3, #1
 8012e74:	d101      	bne.n	8012e7a <HAL_PCD_EP_ClrStall+0x90>
 8012e76:	2302      	movs	r3, #2
 8012e78:	e011      	b.n	8012e9e <HAL_PCD_EP_ClrStall+0xb4>
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	23aa      	movs	r3, #170	@ 0xaa
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	2101      	movs	r1, #1
 8012e82:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	68fa      	ldr	r2, [r7, #12]
 8012e8a:	0011      	movs	r1, r2
 8012e8c:	0018      	movs	r0, r3
 8012e8e:	f007 f9a3 	bl	801a1d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012e92:	687a      	ldr	r2, [r7, #4]
 8012e94:	23aa      	movs	r3, #170	@ 0xaa
 8012e96:	009b      	lsls	r3, r3, #2
 8012e98:	2100      	movs	r1, #0
 8012e9a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	0018      	movs	r0, r3
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	b004      	add	sp, #16
 8012ea4:	bd80      	pop	{r7, pc}
	...

08012ea8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8012ea8:	b5b0      	push	{r4, r5, r7, lr}
 8012eaa:	b096      	sub	sp, #88	@ 0x58
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012eb0:	f000 fbec 	bl	801368c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	204e      	movs	r0, #78	@ 0x4e
 8012eba:	183b      	adds	r3, r7, r0
 8012ebc:	2144      	movs	r1, #68	@ 0x44
 8012ebe:	5a52      	ldrh	r2, [r2, r1]
 8012ec0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012ec2:	183b      	adds	r3, r7, r0
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	244d      	movs	r4, #77	@ 0x4d
 8012eca:	193b      	adds	r3, r7, r4
 8012ecc:	210f      	movs	r1, #15
 8012ece:	400a      	ands	r2, r1
 8012ed0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8012ed2:	193b      	adds	r3, r7, r4
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d000      	beq.n	8012edc <PCD_EP_ISR_Handler+0x34>
 8012eda:	e18f      	b.n	80131fc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012edc:	183b      	adds	r3, r7, r0
 8012ede:	881b      	ldrh	r3, [r3, #0]
 8012ee0:	2210      	movs	r2, #16
 8012ee2:	4013      	ands	r3, r2
 8012ee4:	d155      	bne.n	8012f92 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	881b      	ldrh	r3, [r3, #0]
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	200e      	movs	r0, #14
 8012ef0:	183b      	adds	r3, r7, r0
 8012ef2:	49bb      	ldr	r1, [pc, #748]	@ (80131e0 <PCD_EP_ISR_Handler+0x338>)
 8012ef4:	400a      	ands	r2, r1
 8012ef6:	801a      	strh	r2, [r3, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	183a      	adds	r2, r7, r0
 8012efe:	8812      	ldrh	r2, [r2, #0]
 8012f00:	49b8      	ldr	r1, [pc, #736]	@ (80131e4 <PCD_EP_ISR_Handler+0x33c>)
 8012f02:	430a      	orrs	r2, r1
 8012f04:	b292      	uxth	r2, r2
 8012f06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	3328      	adds	r3, #40	@ 0x28
 8012f0c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2250      	movs	r2, #80	@ 0x50
 8012f14:	5a9b      	ldrh	r3, [r3, r2]
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	001a      	movs	r2, r3
 8012f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	00db      	lsls	r3, r3, #3
 8012f20:	18d2      	adds	r2, r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	18d3      	adds	r3, r2, r3
 8012f28:	4aaf      	ldr	r2, [pc, #700]	@ (80131e8 <PCD_EP_ISR_Handler+0x340>)
 8012f2a:	4694      	mov	ip, r2
 8012f2c:	4463      	add	r3, ip
 8012f2e:	881b      	ldrh	r3, [r3, #0]
 8012f30:	059b      	lsls	r3, r3, #22
 8012f32:	0d9a      	lsrs	r2, r3, #22
 8012f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f36:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8012f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f3a:	695a      	ldr	r2, [r3, #20]
 8012f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f3e:	69db      	ldr	r3, [r3, #28]
 8012f40:	18d2      	adds	r2, r2, r3
 8012f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f44:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2100      	movs	r1, #0
 8012f4a:	0018      	movs	r0, r3
 8012f4c:	f009 fab2 	bl	801c4b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2224      	movs	r2, #36	@ 0x24
 8012f54:	5c9b      	ldrb	r3, [r3, r2]
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <PCD_EP_ISR_Handler+0xb8>
 8012f5c:	f000 fb96 	bl	801368c <PCD_EP_ISR_Handler+0x7e4>
 8012f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f62:	699b      	ldr	r3, [r3, #24]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d001      	beq.n	8012f6c <PCD_EP_ISR_Handler+0xc4>
 8012f68:	f000 fb90 	bl	801368c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2224      	movs	r2, #36	@ 0x24
 8012f70:	5c9b      	ldrb	r3, [r3, r2]
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	2280      	movs	r2, #128	@ 0x80
 8012f76:	4252      	negs	r2, r2
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	b2da      	uxtb	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	0011      	movs	r1, r2
 8012f82:	224c      	movs	r2, #76	@ 0x4c
 8012f84:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2224      	movs	r2, #36	@ 0x24
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	5499      	strb	r1, [r3, r2]
 8012f8e:	f000 fb7d 	bl	801368c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	3369      	adds	r3, #105	@ 0x69
 8012f96:	33ff      	adds	r3, #255	@ 0xff
 8012f98:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	214a      	movs	r1, #74	@ 0x4a
 8012fa0:	187b      	adds	r3, r7, r1
 8012fa2:	8812      	ldrh	r2, [r2, #0]
 8012fa4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8012fa6:	187b      	adds	r3, r7, r1
 8012fa8:	881a      	ldrh	r2, [r3, #0]
 8012faa:	2380      	movs	r3, #128	@ 0x80
 8012fac:	011b      	lsls	r3, r3, #4
 8012fae:	4013      	ands	r3, r2
 8012fb0:	d037      	beq.n	8013022 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	2250      	movs	r2, #80	@ 0x50
 8012fb8:	5a9b      	ldrh	r3, [r3, r2]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	001a      	movs	r2, r3
 8012fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	00db      	lsls	r3, r3, #3
 8012fc4:	18d2      	adds	r2, r2, r3
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	18d3      	adds	r3, r2, r3
 8012fcc:	4a87      	ldr	r2, [pc, #540]	@ (80131ec <PCD_EP_ISR_Handler+0x344>)
 8012fce:	4694      	mov	ip, r2
 8012fd0:	4463      	add	r3, ip
 8012fd2:	881b      	ldrh	r3, [r3, #0]
 8012fd4:	059b      	lsls	r3, r3, #22
 8012fd6:	0d9a      	lsrs	r2, r3, #22
 8012fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fda:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	6818      	ldr	r0, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	22ac      	movs	r2, #172	@ 0xac
 8012fe4:	0092      	lsls	r2, r2, #2
 8012fe6:	1899      	adds	r1, r3, r2
 8012fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	f007 fa24 	bl	801a43e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	2010      	movs	r0, #16
 8013000:	183b      	adds	r3, r7, r0
 8013002:	497b      	ldr	r1, [pc, #492]	@ (80131f0 <PCD_EP_ISR_Handler+0x348>)
 8013004:	400a      	ands	r2, r1
 8013006:	801a      	strh	r2, [r3, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	183a      	adds	r2, r7, r0
 801300e:	8812      	ldrh	r2, [r2, #0]
 8013010:	2180      	movs	r1, #128	@ 0x80
 8013012:	430a      	orrs	r2, r1
 8013014:	b292      	uxth	r2, r2
 8013016:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	0018      	movs	r0, r3
 801301c:	f009 fa14 	bl	801c448 <HAL_PCD_SetupStageCallback>
 8013020:	e334      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013022:	234a      	movs	r3, #74	@ 0x4a
 8013024:	18fb      	adds	r3, r7, r3
 8013026:	2200      	movs	r2, #0
 8013028:	5e9b      	ldrsh	r3, [r3, r2]
 801302a:	2b00      	cmp	r3, #0
 801302c:	db00      	blt.n	8013030 <PCD_EP_ISR_Handler+0x188>
 801302e:	e32d      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	b29a      	uxth	r2, r3
 8013038:	201e      	movs	r0, #30
 801303a:	183b      	adds	r3, r7, r0
 801303c:	496c      	ldr	r1, [pc, #432]	@ (80131f0 <PCD_EP_ISR_Handler+0x348>)
 801303e:	400a      	ands	r2, r1
 8013040:	801a      	strh	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	183a      	adds	r2, r7, r0
 8013048:	8812      	ldrh	r2, [r2, #0]
 801304a:	2180      	movs	r1, #128	@ 0x80
 801304c:	430a      	orrs	r2, r1
 801304e:	b292      	uxth	r2, r2
 8013050:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	2250      	movs	r2, #80	@ 0x50
 8013058:	5a9b      	ldrh	r3, [r3, r2]
 801305a:	b29b      	uxth	r3, r3
 801305c:	001a      	movs	r2, r3
 801305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	18d2      	adds	r2, r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	18d3      	adds	r3, r2, r3
 801306c:	4a5f      	ldr	r2, [pc, #380]	@ (80131ec <PCD_EP_ISR_Handler+0x344>)
 801306e:	4694      	mov	ip, r2
 8013070:	4463      	add	r3, ip
 8013072:	881b      	ldrh	r3, [r3, #0]
 8013074:	059b      	lsls	r3, r3, #22
 8013076:	0d9a      	lsrs	r2, r3, #22
 8013078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801307a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801307e:	69db      	ldr	r3, [r3, #28]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d01a      	beq.n	80130ba <PCD_EP_ISR_Handler+0x212>
 8013084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d016      	beq.n	80130ba <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6818      	ldr	r0, [r3, #0]
 8013090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013092:	6959      	ldr	r1, [r3, #20]
 8013094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013096:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801309a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801309c:	b29b      	uxth	r3, r3
 801309e:	f007 f9ce 	bl	801a43e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80130a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130a4:	695a      	ldr	r2, [r3, #20]
 80130a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130a8:	69db      	ldr	r3, [r3, #28]
 80130aa:	18d2      	adds	r2, r2, r3
 80130ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2100      	movs	r1, #0
 80130b4:	0018      	movs	r0, r3
 80130b6:	f009 f9dc 	bl	801c472 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	214a      	movs	r1, #74	@ 0x4a
 80130c0:	187b      	adds	r3, r7, r1
 80130c2:	8812      	ldrh	r2, [r2, #0]
 80130c4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80130c6:	187b      	adds	r3, r7, r1
 80130c8:	881a      	ldrh	r2, [r3, #0]
 80130ca:	2380      	movs	r3, #128	@ 0x80
 80130cc:	011b      	lsls	r3, r3, #4
 80130ce:	4013      	ands	r3, r2
 80130d0:	d000      	beq.n	80130d4 <PCD_EP_ISR_Handler+0x22c>
 80130d2:	e2db      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
 80130d4:	187b      	adds	r3, r7, r1
 80130d6:	881a      	ldrh	r2, [r3, #0]
 80130d8:	23c0      	movs	r3, #192	@ 0xc0
 80130da:	019b      	lsls	r3, r3, #6
 80130dc:	401a      	ands	r2, r3
 80130de:	23c0      	movs	r3, #192	@ 0xc0
 80130e0:	019b      	lsls	r3, r3, #6
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d100      	bne.n	80130e8 <PCD_EP_ISR_Handler+0x240>
 80130e6:	e2d1      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	61bb      	str	r3, [r7, #24]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2250      	movs	r2, #80	@ 0x50
 80130f4:	5a9b      	ldrh	r3, [r3, r2]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	001a      	movs	r2, r3
 80130fa:	69bb      	ldr	r3, [r7, #24]
 80130fc:	189b      	adds	r3, r3, r2
 80130fe:	61bb      	str	r3, [r7, #24]
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	4a3a      	ldr	r2, [pc, #232]	@ (80131ec <PCD_EP_ISR_Handler+0x344>)
 8013104:	4694      	mov	ip, r2
 8013106:	4463      	add	r3, ip
 8013108:	617b      	str	r3, [r7, #20]
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	881b      	ldrh	r3, [r3, #0]
 801310e:	b29b      	uxth	r3, r3
 8013110:	059b      	lsls	r3, r3, #22
 8013112:	0d9b      	lsrs	r3, r3, #22
 8013114:	b29a      	uxth	r2, r3
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	801a      	strh	r2, [r3, #0]
 801311a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013120:	d91a      	bls.n	8013158 <PCD_EP_ISR_Handler+0x2b0>
 8013122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	095b      	lsrs	r3, r3, #5
 8013128:	647b      	str	r3, [r7, #68]	@ 0x44
 801312a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	221f      	movs	r2, #31
 8013130:	4013      	ands	r3, r2
 8013132:	d102      	bne.n	801313a <PCD_EP_ISR_Handler+0x292>
 8013134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013136:	3b01      	subs	r3, #1
 8013138:	647b      	str	r3, [r7, #68]	@ 0x44
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	881b      	ldrh	r3, [r3, #0]
 801313e:	b29a      	uxth	r2, r3
 8013140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013142:	b29b      	uxth	r3, r3
 8013144:	029b      	lsls	r3, r3, #10
 8013146:	b29b      	uxth	r3, r3
 8013148:	4313      	orrs	r3, r2
 801314a:	b29b      	uxth	r3, r3
 801314c:	4a25      	ldr	r2, [pc, #148]	@ (80131e4 <PCD_EP_ISR_Handler+0x33c>)
 801314e:	4313      	orrs	r3, r2
 8013150:	b29a      	uxth	r2, r3
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	801a      	strh	r2, [r3, #0]
 8013156:	e023      	b.n	80131a0 <PCD_EP_ISR_Handler+0x2f8>
 8013158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d108      	bne.n	8013172 <PCD_EP_ISR_Handler+0x2ca>
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	b29b      	uxth	r3, r3
 8013166:	4a1f      	ldr	r2, [pc, #124]	@ (80131e4 <PCD_EP_ISR_Handler+0x33c>)
 8013168:	4313      	orrs	r3, r2
 801316a:	b29a      	uxth	r2, r3
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	801a      	strh	r2, [r3, #0]
 8013170:	e016      	b.n	80131a0 <PCD_EP_ISR_Handler+0x2f8>
 8013172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013174:	691b      	ldr	r3, [r3, #16]
 8013176:	085b      	lsrs	r3, r3, #1
 8013178:	647b      	str	r3, [r7, #68]	@ 0x44
 801317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	2201      	movs	r2, #1
 8013180:	4013      	ands	r3, r2
 8013182:	d002      	beq.n	801318a <PCD_EP_ISR_Handler+0x2e2>
 8013184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013186:	3301      	adds	r3, #1
 8013188:	647b      	str	r3, [r7, #68]	@ 0x44
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	b29a      	uxth	r2, r3
 8013190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013192:	b29b      	uxth	r3, r3
 8013194:	029b      	lsls	r3, r3, #10
 8013196:	b29b      	uxth	r3, r3
 8013198:	4313      	orrs	r3, r2
 801319a:	b29a      	uxth	r2, r3
 801319c:	697b      	ldr	r3, [r7, #20]
 801319e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	881b      	ldrh	r3, [r3, #0]
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	2012      	movs	r0, #18
 80131aa:	183b      	adds	r3, r7, r0
 80131ac:	4911      	ldr	r1, [pc, #68]	@ (80131f4 <PCD_EP_ISR_Handler+0x34c>)
 80131ae:	400a      	ands	r2, r1
 80131b0:	801a      	strh	r2, [r3, #0]
 80131b2:	183b      	adds	r3, r7, r0
 80131b4:	183a      	adds	r2, r7, r0
 80131b6:	8812      	ldrh	r2, [r2, #0]
 80131b8:	2180      	movs	r1, #128	@ 0x80
 80131ba:	0149      	lsls	r1, r1, #5
 80131bc:	404a      	eors	r2, r1
 80131be:	801a      	strh	r2, [r3, #0]
 80131c0:	183b      	adds	r3, r7, r0
 80131c2:	183a      	adds	r2, r7, r0
 80131c4:	8812      	ldrh	r2, [r2, #0]
 80131c6:	2180      	movs	r1, #128	@ 0x80
 80131c8:	0189      	lsls	r1, r1, #6
 80131ca:	404a      	eors	r2, r1
 80131cc:	801a      	strh	r2, [r3, #0]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	183a      	adds	r2, r7, r0
 80131d4:	8812      	ldrh	r2, [r2, #0]
 80131d6:	4908      	ldr	r1, [pc, #32]	@ (80131f8 <PCD_EP_ISR_Handler+0x350>)
 80131d8:	430a      	orrs	r2, r1
 80131da:	b292      	uxth	r2, r2
 80131dc:	801a      	strh	r2, [r3, #0]
 80131de:	e255      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
 80131e0:	ffff8f0f 	.word	0xffff8f0f
 80131e4:	ffff8000 	.word	0xffff8000
 80131e8:	00000402 	.word	0x00000402
 80131ec:	00000406 	.word	0x00000406
 80131f0:	00000f8f 	.word	0x00000f8f
 80131f4:	ffffbf8f 	.word	0xffffbf8f
 80131f8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	001a      	movs	r2, r3
 8013202:	204d      	movs	r0, #77	@ 0x4d
 8013204:	183b      	adds	r3, r7, r0
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	18d2      	adds	r2, r2, r3
 801320c:	214a      	movs	r1, #74	@ 0x4a
 801320e:	187b      	adds	r3, r7, r1
 8013210:	8812      	ldrh	r2, [r2, #0]
 8013212:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013214:	187b      	adds	r3, r7, r1
 8013216:	2200      	movs	r2, #0
 8013218:	5e9b      	ldrsh	r3, [r3, r2]
 801321a:	2b00      	cmp	r3, #0
 801321c:	db00      	blt.n	8013220 <PCD_EP_ISR_Handler+0x378>
 801321e:	e0fa      	b.n	8013416 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	001a      	movs	r2, r3
 8013226:	183b      	adds	r3, r7, r0
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	18d3      	adds	r3, r2, r3
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	b29a      	uxth	r2, r3
 8013232:	2448      	movs	r4, #72	@ 0x48
 8013234:	193b      	adds	r3, r7, r4
 8013236:	49d1      	ldr	r1, [pc, #836]	@ (801357c <PCD_EP_ISR_Handler+0x6d4>)
 8013238:	400a      	ands	r2, r1
 801323a:	801a      	strh	r2, [r3, #0]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	001a      	movs	r2, r3
 8013242:	183b      	adds	r3, r7, r0
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	18d3      	adds	r3, r2, r3
 801324a:	193a      	adds	r2, r7, r4
 801324c:	8812      	ldrh	r2, [r2, #0]
 801324e:	2180      	movs	r1, #128	@ 0x80
 8013250:	430a      	orrs	r2, r1
 8013252:	b292      	uxth	r2, r2
 8013254:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013256:	183b      	adds	r3, r7, r0
 8013258:	781a      	ldrb	r2, [r3, #0]
 801325a:	0013      	movs	r3, r2
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	189b      	adds	r3, r3, r2
 8013260:	00db      	lsls	r3, r3, #3
 8013262:	3369      	adds	r3, #105	@ 0x69
 8013264:	33ff      	adds	r3, #255	@ 0xff
 8013266:	687a      	ldr	r2, [r7, #4]
 8013268:	18d3      	adds	r3, r2, r3
 801326a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801326c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801326e:	7b1b      	ldrb	r3, [r3, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d125      	bne.n	80132c0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2250      	movs	r2, #80	@ 0x50
 801327a:	5a9b      	ldrh	r3, [r3, r2]
 801327c:	b29b      	uxth	r3, r3
 801327e:	001a      	movs	r2, r3
 8013280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	00db      	lsls	r3, r3, #3
 8013286:	18d2      	adds	r2, r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	18d3      	adds	r3, r2, r3
 801328e:	4abc      	ldr	r2, [pc, #752]	@ (8013580 <PCD_EP_ISR_Handler+0x6d8>)
 8013290:	4694      	mov	ip, r2
 8013292:	4463      	add	r3, ip
 8013294:	881a      	ldrh	r2, [r3, #0]
 8013296:	2450      	movs	r4, #80	@ 0x50
 8013298:	193b      	adds	r3, r7, r4
 801329a:	0592      	lsls	r2, r2, #22
 801329c:	0d92      	lsrs	r2, r2, #22
 801329e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80132a0:	193b      	adds	r3, r7, r4
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d100      	bne.n	80132aa <PCD_EP_ISR_Handler+0x402>
 80132a8:	e08d      	b.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b0:	6959      	ldr	r1, [r3, #20]
 80132b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b4:	88da      	ldrh	r2, [r3, #6]
 80132b6:	193b      	adds	r3, r7, r4
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	f007 f8c0 	bl	801a43e <USB_ReadPMA>
 80132be:	e082      	b.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80132c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132c2:	78db      	ldrb	r3, [r3, #3]
 80132c4:	2b02      	cmp	r3, #2
 80132c6:	d10c      	bne.n	80132e2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80132c8:	2350      	movs	r3, #80	@ 0x50
 80132ca:	18fc      	adds	r4, r7, r3
 80132cc:	234a      	movs	r3, #74	@ 0x4a
 80132ce:	18fb      	adds	r3, r7, r3
 80132d0:	881a      	ldrh	r2, [r3, #0]
 80132d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	0018      	movs	r0, r3
 80132d8:	f000 f9ec 	bl	80136b4 <HAL_PCD_EP_DB_Receive>
 80132dc:	0003      	movs	r3, r0
 80132de:	8023      	strh	r3, [r4, #0]
 80132e0:	e071      	b.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	001a      	movs	r2, r3
 80132e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132ea:	781b      	ldrb	r3, [r3, #0]
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	18d3      	adds	r3, r2, r3
 80132f0:	881b      	ldrh	r3, [r3, #0]
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	2052      	movs	r0, #82	@ 0x52
 80132f6:	183b      	adds	r3, r7, r0
 80132f8:	49a2      	ldr	r1, [pc, #648]	@ (8013584 <PCD_EP_ISR_Handler+0x6dc>)
 80132fa:	400a      	ands	r2, r1
 80132fc:	801a      	strh	r2, [r3, #0]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	001a      	movs	r2, r3
 8013304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	18d3      	adds	r3, r2, r3
 801330c:	183a      	adds	r2, r7, r0
 801330e:	8812      	ldrh	r2, [r2, #0]
 8013310:	499d      	ldr	r1, [pc, #628]	@ (8013588 <PCD_EP_ISR_Handler+0x6e0>)
 8013312:	430a      	orrs	r2, r1
 8013314:	b292      	uxth	r2, r2
 8013316:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	001a      	movs	r2, r3
 801331e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	18d3      	adds	r3, r2, r3
 8013326:	881b      	ldrh	r3, [r3, #0]
 8013328:	b29b      	uxth	r3, r3
 801332a:	001a      	movs	r2, r3
 801332c:	2380      	movs	r3, #128	@ 0x80
 801332e:	01db      	lsls	r3, r3, #7
 8013330:	4013      	ands	r3, r2
 8013332:	d024      	beq.n	801337e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	2250      	movs	r2, #80	@ 0x50
 801333a:	5a9b      	ldrh	r3, [r3, r2]
 801333c:	b29b      	uxth	r3, r3
 801333e:	001a      	movs	r2, r3
 8013340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	00db      	lsls	r3, r3, #3
 8013346:	18d2      	adds	r2, r2, r3
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	4a8f      	ldr	r2, [pc, #572]	@ (801358c <PCD_EP_ISR_Handler+0x6e4>)
 8013350:	4694      	mov	ip, r2
 8013352:	4463      	add	r3, ip
 8013354:	881a      	ldrh	r2, [r3, #0]
 8013356:	2450      	movs	r4, #80	@ 0x50
 8013358:	193b      	adds	r3, r7, r4
 801335a:	0592      	lsls	r2, r2, #22
 801335c:	0d92      	lsrs	r2, r2, #22
 801335e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013360:	193b      	adds	r3, r7, r4
 8013362:	881b      	ldrh	r3, [r3, #0]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d02e      	beq.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6818      	ldr	r0, [r3, #0]
 801336c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801336e:	6959      	ldr	r1, [r3, #20]
 8013370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013372:	891a      	ldrh	r2, [r3, #8]
 8013374:	193b      	adds	r3, r7, r4
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	f007 f861 	bl	801a43e <USB_ReadPMA>
 801337c:	e023      	b.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	2250      	movs	r2, #80	@ 0x50
 8013384:	5a9b      	ldrh	r3, [r3, r2]
 8013386:	b29b      	uxth	r3, r3
 8013388:	001a      	movs	r2, r3
 801338a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	00db      	lsls	r3, r3, #3
 8013390:	18d2      	adds	r2, r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	18d3      	adds	r3, r2, r3
 8013398:	4a79      	ldr	r2, [pc, #484]	@ (8013580 <PCD_EP_ISR_Handler+0x6d8>)
 801339a:	4694      	mov	ip, r2
 801339c:	4463      	add	r3, ip
 801339e:	881a      	ldrh	r2, [r3, #0]
 80133a0:	2450      	movs	r4, #80	@ 0x50
 80133a2:	193b      	adds	r3, r7, r4
 80133a4:	0592      	lsls	r2, r2, #22
 80133a6:	0d92      	lsrs	r2, r2, #22
 80133a8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80133aa:	193b      	adds	r3, r7, r4
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d009      	beq.n	80133c6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6818      	ldr	r0, [r3, #0]
 80133b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133b8:	6959      	ldr	r1, [r3, #20]
 80133ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133bc:	895a      	ldrh	r2, [r3, #10]
 80133be:	193b      	adds	r3, r7, r4
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	f007 f83c 	bl	801a43e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80133c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133c8:	69da      	ldr	r2, [r3, #28]
 80133ca:	2150      	movs	r1, #80	@ 0x50
 80133cc:	187b      	adds	r3, r7, r1
 80133ce:	881b      	ldrh	r3, [r3, #0]
 80133d0:	18d2      	adds	r2, r2, r3
 80133d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80133d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133d8:	695a      	ldr	r2, [r3, #20]
 80133da:	187b      	adds	r3, r7, r1
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	18d2      	adds	r2, r2, r3
 80133e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80133e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133e6:	699b      	ldr	r3, [r3, #24]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d005      	beq.n	80133f8 <PCD_EP_ISR_Handler+0x550>
 80133ec:	187b      	adds	r3, r7, r1
 80133ee:	881a      	ldrh	r2, [r3, #0]
 80133f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d207      	bcs.n	8013408 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80133f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133fa:	781a      	ldrb	r2, [r3, #0]
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	0011      	movs	r1, r2
 8013400:	0018      	movs	r0, r3
 8013402:	f009 f836 	bl	801c472 <HAL_PCD_DataOutStageCallback>
 8013406:	e006      	b.n	8013416 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801340e:	0011      	movs	r1, r2
 8013410:	0018      	movs	r0, r3
 8013412:	f005 fd59 	bl	8018ec8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8013416:	244a      	movs	r4, #74	@ 0x4a
 8013418:	193b      	adds	r3, r7, r4
 801341a:	881b      	ldrh	r3, [r3, #0]
 801341c:	2280      	movs	r2, #128	@ 0x80
 801341e:	4013      	ands	r3, r2
 8013420:	d100      	bne.n	8013424 <PCD_EP_ISR_Handler+0x57c>
 8013422:	e133      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8013424:	204d      	movs	r0, #77	@ 0x4d
 8013426:	183b      	adds	r3, r7, r0
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	1c5a      	adds	r2, r3, #1
 801342c:	0013      	movs	r3, r2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	189b      	adds	r3, r3, r2
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	18d3      	adds	r3, r2, r3
 8013438:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	001a      	movs	r2, r3
 8013440:	183b      	adds	r3, r7, r0
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	18d3      	adds	r3, r2, r3
 8013448:	881b      	ldrh	r3, [r3, #0]
 801344a:	b29a      	uxth	r2, r3
 801344c:	2542      	movs	r5, #66	@ 0x42
 801344e:	197b      	adds	r3, r7, r5
 8013450:	494f      	ldr	r1, [pc, #316]	@ (8013590 <PCD_EP_ISR_Handler+0x6e8>)
 8013452:	400a      	ands	r2, r1
 8013454:	801a      	strh	r2, [r3, #0]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	001a      	movs	r2, r3
 801345c:	183b      	adds	r3, r7, r0
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	18d3      	adds	r3, r2, r3
 8013464:	197a      	adds	r2, r7, r5
 8013466:	8812      	ldrh	r2, [r2, #0]
 8013468:	494a      	ldr	r1, [pc, #296]	@ (8013594 <PCD_EP_ISR_Handler+0x6ec>)
 801346a:	430a      	orrs	r2, r1
 801346c:	b292      	uxth	r2, r2
 801346e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013472:	78db      	ldrb	r3, [r3, #3]
 8013474:	2b01      	cmp	r3, #1
 8013476:	d000      	beq.n	801347a <PCD_EP_ISR_Handler+0x5d2>
 8013478:	e0af      	b.n	80135da <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801347c:	2200      	movs	r2, #0
 801347e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013482:	7b1b      	ldrb	r3, [r3, #12]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d100      	bne.n	801348a <PCD_EP_ISR_Handler+0x5e2>
 8013488:	e09f      	b.n	80135ca <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801348a:	193b      	adds	r3, r7, r4
 801348c:	881b      	ldrh	r3, [r3, #0]
 801348e:	2240      	movs	r2, #64	@ 0x40
 8013490:	4013      	ands	r3, r2
 8013492:	d046      	beq.n	8013522 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013496:	785b      	ldrb	r3, [r3, #1]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d125      	bne.n	80134e8 <PCD_EP_ISR_Handler+0x640>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2250      	movs	r2, #80	@ 0x50
 80134a8:	5a9b      	ldrh	r3, [r3, r2]
 80134aa:	b29b      	uxth	r3, r3
 80134ac:	001a      	movs	r2, r3
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	189b      	adds	r3, r3, r2
 80134b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80134b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	00da      	lsls	r2, r3, #3
 80134ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134bc:	18d3      	adds	r3, r2, r3
 80134be:	4a33      	ldr	r2, [pc, #204]	@ (801358c <PCD_EP_ISR_Handler+0x6e4>)
 80134c0:	4694      	mov	ip, r2
 80134c2:	4463      	add	r3, ip
 80134c4:	623b      	str	r3, [r7, #32]
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	881b      	ldrh	r3, [r3, #0]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	059b      	lsls	r3, r3, #22
 80134ce:	0d9b      	lsrs	r3, r3, #22
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	6a3b      	ldr	r3, [r7, #32]
 80134d4:	801a      	strh	r2, [r3, #0]
 80134d6:	6a3b      	ldr	r3, [r7, #32]
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	b29b      	uxth	r3, r3
 80134dc:	4a2d      	ldr	r2, [pc, #180]	@ (8013594 <PCD_EP_ISR_Handler+0x6ec>)
 80134de:	4313      	orrs	r3, r2
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	6a3b      	ldr	r3, [r7, #32]
 80134e4:	801a      	strh	r2, [r3, #0]
 80134e6:	e070      	b.n	80135ca <PCD_EP_ISR_Handler+0x722>
 80134e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ea:	785b      	ldrb	r3, [r3, #1]
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d16c      	bne.n	80135ca <PCD_EP_ISR_Handler+0x722>
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2250      	movs	r2, #80	@ 0x50
 80134fc:	5a9b      	ldrh	r3, [r3, r2]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	001a      	movs	r2, r3
 8013502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013504:	189b      	adds	r3, r3, r2
 8013506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	00da      	lsls	r2, r3, #3
 801350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013510:	18d3      	adds	r3, r2, r3
 8013512:	4a1e      	ldr	r2, [pc, #120]	@ (801358c <PCD_EP_ISR_Handler+0x6e4>)
 8013514:	4694      	mov	ip, r2
 8013516:	4463      	add	r3, ip
 8013518:	62bb      	str	r3, [r7, #40]	@ 0x28
 801351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351c:	2200      	movs	r2, #0
 801351e:	801a      	strh	r2, [r3, #0]
 8013520:	e053      	b.n	80135ca <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801352a:	785b      	ldrb	r3, [r3, #1]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d133      	bne.n	8013598 <PCD_EP_ISR_Handler+0x6f0>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	637b      	str	r3, [r7, #52]	@ 0x34
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	2250      	movs	r2, #80	@ 0x50
 801353c:	5a9b      	ldrh	r3, [r3, r2]
 801353e:	b29b      	uxth	r3, r3
 8013540:	001a      	movs	r2, r3
 8013542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013544:	189b      	adds	r3, r3, r2
 8013546:	637b      	str	r3, [r7, #52]	@ 0x34
 8013548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	00da      	lsls	r2, r3, #3
 801354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013550:	18d3      	adds	r3, r2, r3
 8013552:	4a0b      	ldr	r2, [pc, #44]	@ (8013580 <PCD_EP_ISR_Handler+0x6d8>)
 8013554:	4694      	mov	ip, r2
 8013556:	4463      	add	r3, ip
 8013558:	633b      	str	r3, [r7, #48]	@ 0x30
 801355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355c:	881b      	ldrh	r3, [r3, #0]
 801355e:	b29b      	uxth	r3, r3
 8013560:	059b      	lsls	r3, r3, #22
 8013562:	0d9b      	lsrs	r3, r3, #22
 8013564:	b29a      	uxth	r2, r3
 8013566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013568:	801a      	strh	r2, [r3, #0]
 801356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356c:	881b      	ldrh	r3, [r3, #0]
 801356e:	b29b      	uxth	r3, r3
 8013570:	4a08      	ldr	r2, [pc, #32]	@ (8013594 <PCD_EP_ISR_Handler+0x6ec>)
 8013572:	4313      	orrs	r3, r2
 8013574:	b29a      	uxth	r2, r3
 8013576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013578:	801a      	strh	r2, [r3, #0]
 801357a:	e026      	b.n	80135ca <PCD_EP_ISR_Handler+0x722>
 801357c:	00000f8f 	.word	0x00000f8f
 8013580:	00000406 	.word	0x00000406
 8013584:	ffff8f8f 	.word	0xffff8f8f
 8013588:	ffff80c0 	.word	0xffff80c0
 801358c:	00000402 	.word	0x00000402
 8013590:	ffff8f0f 	.word	0xffff8f0f
 8013594:	ffff8000 	.word	0xffff8000
 8013598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801359a:	785b      	ldrb	r3, [r3, #1]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d114      	bne.n	80135ca <PCD_EP_ISR_Handler+0x722>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	2250      	movs	r2, #80	@ 0x50
 80135a6:	5a9b      	ldrh	r3, [r3, r2]
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	001a      	movs	r2, r3
 80135ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135ae:	189b      	adds	r3, r3, r2
 80135b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	00da      	lsls	r2, r3, #3
 80135b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135ba:	18d3      	adds	r3, r2, r3
 80135bc:	4a3b      	ldr	r2, [pc, #236]	@ (80136ac <PCD_EP_ISR_Handler+0x804>)
 80135be:	4694      	mov	ip, r2
 80135c0:	4463      	add	r3, ip
 80135c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80135c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c6:	2200      	movs	r2, #0
 80135c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80135ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135cc:	781a      	ldrb	r2, [r3, #0]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	0011      	movs	r1, r2
 80135d2:	0018      	movs	r0, r3
 80135d4:	f008 ff6e 	bl	801c4b4 <HAL_PCD_DataInStageCallback>
 80135d8:	e058      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80135da:	234a      	movs	r3, #74	@ 0x4a
 80135dc:	18fb      	adds	r3, r7, r3
 80135de:	881a      	ldrh	r2, [r3, #0]
 80135e0:	2380      	movs	r3, #128	@ 0x80
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4013      	ands	r3, r2
 80135e6:	d149      	bne.n	801367c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2250      	movs	r2, #80	@ 0x50
 80135ee:	5a9b      	ldrh	r3, [r3, r2]
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	001a      	movs	r2, r3
 80135f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	00db      	lsls	r3, r3, #3
 80135fa:	18d2      	adds	r2, r2, r3
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	18d3      	adds	r3, r2, r3
 8013602:	4a2b      	ldr	r2, [pc, #172]	@ (80136b0 <PCD_EP_ISR_Handler+0x808>)
 8013604:	4694      	mov	ip, r2
 8013606:	4463      	add	r3, ip
 8013608:	881a      	ldrh	r2, [r3, #0]
 801360a:	2140      	movs	r1, #64	@ 0x40
 801360c:	187b      	adds	r3, r7, r1
 801360e:	0592      	lsls	r2, r2, #22
 8013610:	0d92      	lsrs	r2, r2, #22
 8013612:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8013614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013616:	699a      	ldr	r2, [r3, #24]
 8013618:	187b      	adds	r3, r7, r1
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	429a      	cmp	r2, r3
 801361e:	d907      	bls.n	8013630 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8013620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013622:	699a      	ldr	r2, [r3, #24]
 8013624:	187b      	adds	r3, r7, r1
 8013626:	881b      	ldrh	r3, [r3, #0]
 8013628:	1ad2      	subs	r2, r2, r3
 801362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801362c:	619a      	str	r2, [r3, #24]
 801362e:	e002      	b.n	8013636 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8013630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013632:	2200      	movs	r2, #0
 8013634:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8013636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d107      	bne.n	801364e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801363e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013640:	781a      	ldrb	r2, [r3, #0]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	0011      	movs	r1, r2
 8013646:	0018      	movs	r0, r3
 8013648:	f008 ff34 	bl	801c4b4 <HAL_PCD_DataInStageCallback>
 801364c:	e01e      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013650:	695a      	ldr	r2, [r3, #20]
 8013652:	2140      	movs	r1, #64	@ 0x40
 8013654:	187b      	adds	r3, r7, r1
 8013656:	881b      	ldrh	r3, [r3, #0]
 8013658:	18d2      	adds	r2, r2, r3
 801365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801365c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013660:	69da      	ldr	r2, [r3, #28]
 8013662:	187b      	adds	r3, r7, r1
 8013664:	881b      	ldrh	r3, [r3, #0]
 8013666:	18d2      	adds	r2, r2, r3
 8013668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801366a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013672:	0011      	movs	r1, r2
 8013674:	0018      	movs	r0, r3
 8013676:	f005 fc27 	bl	8018ec8 <USB_EPStartXfer>
 801367a:	e007      	b.n	801368c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801367c:	234a      	movs	r3, #74	@ 0x4a
 801367e:	18fb      	adds	r3, r7, r3
 8013680:	881a      	ldrh	r2, [r3, #0]
 8013682:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	0018      	movs	r0, r3
 8013688:	f000 f930 	bl	80138ec <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2244      	movs	r2, #68	@ 0x44
 8013692:	5a9b      	ldrh	r3, [r3, r2]
 8013694:	b29b      	uxth	r3, r3
 8013696:	b21b      	sxth	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	da01      	bge.n	80136a0 <PCD_EP_ISR_Handler+0x7f8>
 801369c:	f7ff fc0a 	bl	8012eb4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80136a0:	2300      	movs	r3, #0
}
 80136a2:	0018      	movs	r0, r3
 80136a4:	46bd      	mov	sp, r7
 80136a6:	b016      	add	sp, #88	@ 0x58
 80136a8:	bdb0      	pop	{r4, r5, r7, pc}
 80136aa:	46c0      	nop			@ (mov r8, r8)
 80136ac:	00000406 	.word	0x00000406
 80136b0:	00000402 	.word	0x00000402

080136b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80136b4:	b590      	push	{r4, r7, lr}
 80136b6:	b089      	sub	sp, #36	@ 0x24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	60b9      	str	r1, [r7, #8]
 80136be:	1dbb      	adds	r3, r7, #6
 80136c0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80136c2:	1dbb      	adds	r3, r7, #6
 80136c4:	881a      	ldrh	r2, [r3, #0]
 80136c6:	2380      	movs	r3, #128	@ 0x80
 80136c8:	01db      	lsls	r3, r3, #7
 80136ca:	4013      	ands	r3, r2
 80136cc:	d100      	bne.n	80136d0 <HAL_PCD_EP_DB_Receive+0x1c>
 80136ce:	e07d      	b.n	80137cc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	2250      	movs	r2, #80	@ 0x50
 80136d6:	5a9b      	ldrh	r3, [r3, r2]
 80136d8:	b29b      	uxth	r3, r3
 80136da:	001a      	movs	r2, r3
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	18d2      	adds	r2, r2, r3
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	18d3      	adds	r3, r2, r3
 80136ea:	4a7a      	ldr	r2, [pc, #488]	@ (80138d4 <HAL_PCD_EP_DB_Receive+0x220>)
 80136ec:	4694      	mov	ip, r2
 80136ee:	4463      	add	r3, ip
 80136f0:	881a      	ldrh	r2, [r3, #0]
 80136f2:	211a      	movs	r1, #26
 80136f4:	187b      	adds	r3, r7, r1
 80136f6:	0592      	lsls	r2, r2, #22
 80136f8:	0d92      	lsrs	r2, r2, #22
 80136fa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	699a      	ldr	r2, [r3, #24]
 8013700:	187b      	adds	r3, r7, r1
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	429a      	cmp	r2, r3
 8013706:	d307      	bcc.n	8013718 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	699a      	ldr	r2, [r3, #24]
 801370c:	187b      	adds	r3, r7, r1
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	1ad2      	subs	r2, r2, r3
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	619a      	str	r2, [r3, #24]
 8013716:	e002      	b.n	801371e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	2200      	movs	r2, #0
 801371c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	699b      	ldr	r3, [r3, #24]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d121      	bne.n	801376a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	001a      	movs	r2, r3
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	18d3      	adds	r3, r2, r3
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	b29a      	uxth	r2, r3
 8013738:	2018      	movs	r0, #24
 801373a:	183b      	adds	r3, r7, r0
 801373c:	4966      	ldr	r1, [pc, #408]	@ (80138d8 <HAL_PCD_EP_DB_Receive+0x224>)
 801373e:	400a      	ands	r2, r1
 8013740:	801a      	strh	r2, [r3, #0]
 8013742:	183b      	adds	r3, r7, r0
 8013744:	183a      	adds	r2, r7, r0
 8013746:	8812      	ldrh	r2, [r2, #0]
 8013748:	2180      	movs	r1, #128	@ 0x80
 801374a:	0189      	lsls	r1, r1, #6
 801374c:	404a      	eors	r2, r1
 801374e:	801a      	strh	r2, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	001a      	movs	r2, r3
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	18d3      	adds	r3, r2, r3
 801375e:	183a      	adds	r2, r7, r0
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	495e      	ldr	r1, [pc, #376]	@ (80138dc <HAL_PCD_EP_DB_Receive+0x228>)
 8013764:	430a      	orrs	r2, r1
 8013766:	b292      	uxth	r2, r2
 8013768:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801376a:	1dbb      	adds	r3, r7, #6
 801376c:	881b      	ldrh	r3, [r3, #0]
 801376e:	2240      	movs	r2, #64	@ 0x40
 8013770:	4013      	ands	r3, r2
 8013772:	d01a      	beq.n	80137aa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	001a      	movs	r2, r3
 801377a:	68bb      	ldr	r3, [r7, #8]
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	009b      	lsls	r3, r3, #2
 8013780:	18d3      	adds	r3, r2, r3
 8013782:	881b      	ldrh	r3, [r3, #0]
 8013784:	b29a      	uxth	r2, r3
 8013786:	2016      	movs	r0, #22
 8013788:	183b      	adds	r3, r7, r0
 801378a:	4955      	ldr	r1, [pc, #340]	@ (80138e0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801378c:	400a      	ands	r2, r1
 801378e:	801a      	strh	r2, [r3, #0]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	001a      	movs	r2, r3
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	009b      	lsls	r3, r3, #2
 801379c:	18d3      	adds	r3, r2, r3
 801379e:	183a      	adds	r2, r7, r0
 80137a0:	8812      	ldrh	r2, [r2, #0]
 80137a2:	4950      	ldr	r1, [pc, #320]	@ (80138e4 <HAL_PCD_EP_DB_Receive+0x230>)
 80137a4:	430a      	orrs	r2, r1
 80137a6:	b292      	uxth	r2, r2
 80137a8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80137aa:	241a      	movs	r4, #26
 80137ac:	193b      	adds	r3, r7, r4
 80137ae:	881b      	ldrh	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d100      	bne.n	80137b6 <HAL_PCD_EP_DB_Receive+0x102>
 80137b4:	e086      	b.n	80138c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	6818      	ldr	r0, [r3, #0]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	6959      	ldr	r1, [r3, #20]
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	891a      	ldrh	r2, [r3, #8]
 80137c2:	193b      	adds	r3, r7, r4
 80137c4:	881b      	ldrh	r3, [r3, #0]
 80137c6:	f006 fe3a 	bl	801a43e <USB_ReadPMA>
 80137ca:	e07b      	b.n	80138c4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2250      	movs	r2, #80	@ 0x50
 80137d2:	5a9b      	ldrh	r3, [r3, r2]
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	001a      	movs	r2, r3
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	00db      	lsls	r3, r3, #3
 80137de:	18d2      	adds	r2, r2, r3
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	18d3      	adds	r3, r2, r3
 80137e6:	4a40      	ldr	r2, [pc, #256]	@ (80138e8 <HAL_PCD_EP_DB_Receive+0x234>)
 80137e8:	4694      	mov	ip, r2
 80137ea:	4463      	add	r3, ip
 80137ec:	881a      	ldrh	r2, [r3, #0]
 80137ee:	211a      	movs	r1, #26
 80137f0:	187b      	adds	r3, r7, r1
 80137f2:	0592      	lsls	r2, r2, #22
 80137f4:	0d92      	lsrs	r2, r2, #22
 80137f6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	699a      	ldr	r2, [r3, #24]
 80137fc:	187b      	adds	r3, r7, r1
 80137fe:	881b      	ldrh	r3, [r3, #0]
 8013800:	429a      	cmp	r2, r3
 8013802:	d307      	bcc.n	8013814 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	699a      	ldr	r2, [r3, #24]
 8013808:	187b      	adds	r3, r7, r1
 801380a:	881b      	ldrh	r3, [r3, #0]
 801380c:	1ad2      	subs	r2, r2, r3
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	619a      	str	r2, [r3, #24]
 8013812:	e002      	b.n	801381a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2200      	movs	r2, #0
 8013818:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	699b      	ldr	r3, [r3, #24]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d121      	bne.n	8013866 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	001a      	movs	r2, r3
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	18d3      	adds	r3, r2, r3
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	b29a      	uxth	r2, r3
 8013834:	201e      	movs	r0, #30
 8013836:	183b      	adds	r3, r7, r0
 8013838:	4927      	ldr	r1, [pc, #156]	@ (80138d8 <HAL_PCD_EP_DB_Receive+0x224>)
 801383a:	400a      	ands	r2, r1
 801383c:	801a      	strh	r2, [r3, #0]
 801383e:	183b      	adds	r3, r7, r0
 8013840:	183a      	adds	r2, r7, r0
 8013842:	8812      	ldrh	r2, [r2, #0]
 8013844:	2180      	movs	r1, #128	@ 0x80
 8013846:	0189      	lsls	r1, r1, #6
 8013848:	404a      	eors	r2, r1
 801384a:	801a      	strh	r2, [r3, #0]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	001a      	movs	r2, r3
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	18d3      	adds	r3, r2, r3
 801385a:	183a      	adds	r2, r7, r0
 801385c:	8812      	ldrh	r2, [r2, #0]
 801385e:	491f      	ldr	r1, [pc, #124]	@ (80138dc <HAL_PCD_EP_DB_Receive+0x228>)
 8013860:	430a      	orrs	r2, r1
 8013862:	b292      	uxth	r2, r2
 8013864:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8013866:	1dbb      	adds	r3, r7, #6
 8013868:	881b      	ldrh	r3, [r3, #0]
 801386a:	2240      	movs	r2, #64	@ 0x40
 801386c:	4013      	ands	r3, r2
 801386e:	d11a      	bne.n	80138a6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	001a      	movs	r2, r3
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	18d3      	adds	r3, r2, r3
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	b29a      	uxth	r2, r3
 8013882:	201c      	movs	r0, #28
 8013884:	183b      	adds	r3, r7, r0
 8013886:	4916      	ldr	r1, [pc, #88]	@ (80138e0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013888:	400a      	ands	r2, r1
 801388a:	801a      	strh	r2, [r3, #0]
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	001a      	movs	r2, r3
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	18d3      	adds	r3, r2, r3
 801389a:	183a      	adds	r2, r7, r0
 801389c:	8812      	ldrh	r2, [r2, #0]
 801389e:	4911      	ldr	r1, [pc, #68]	@ (80138e4 <HAL_PCD_EP_DB_Receive+0x230>)
 80138a0:	430a      	orrs	r2, r1
 80138a2:	b292      	uxth	r2, r2
 80138a4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80138a6:	241a      	movs	r4, #26
 80138a8:	193b      	adds	r3, r7, r4
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d009      	beq.n	80138c4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	6818      	ldr	r0, [r3, #0]
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	6959      	ldr	r1, [r3, #20]
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	895a      	ldrh	r2, [r3, #10]
 80138bc:	193b      	adds	r3, r7, r4
 80138be:	881b      	ldrh	r3, [r3, #0]
 80138c0:	f006 fdbd 	bl	801a43e <USB_ReadPMA>
    }
  }

  return count;
 80138c4:	231a      	movs	r3, #26
 80138c6:	18fb      	adds	r3, r7, r3
 80138c8:	881b      	ldrh	r3, [r3, #0]
}
 80138ca:	0018      	movs	r0, r3
 80138cc:	46bd      	mov	sp, r7
 80138ce:	b009      	add	sp, #36	@ 0x24
 80138d0:	bd90      	pop	{r4, r7, pc}
 80138d2:	46c0      	nop			@ (mov r8, r8)
 80138d4:	00000402 	.word	0x00000402
 80138d8:	ffffbf8f 	.word	0xffffbf8f
 80138dc:	ffff8080 	.word	0xffff8080
 80138e0:	ffff8f8f 	.word	0xffff8f8f
 80138e4:	ffff80c0 	.word	0xffff80c0
 80138e8:	00000406 	.word	0x00000406

080138ec <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b0a4      	sub	sp, #144	@ 0x90
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	1dbb      	adds	r3, r7, #6
 80138f8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80138fa:	1dbb      	adds	r3, r7, #6
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	2240      	movs	r2, #64	@ 0x40
 8013900:	4013      	ands	r3, r2
 8013902:	d100      	bne.n	8013906 <HAL_PCD_EP_DB_Transmit+0x1a>
 8013904:	e1e4      	b.n	8013cd0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2250      	movs	r2, #80	@ 0x50
 801390c:	5a9b      	ldrh	r3, [r3, r2]
 801390e:	b29b      	uxth	r3, r3
 8013910:	001a      	movs	r2, r3
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	781b      	ldrb	r3, [r3, #0]
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	18d2      	adds	r2, r2, r3
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	18d3      	adds	r3, r2, r3
 8013920:	4ad0      	ldr	r2, [pc, #832]	@ (8013c64 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013922:	4694      	mov	ip, r2
 8013924:	4463      	add	r3, ip
 8013926:	881a      	ldrh	r2, [r3, #0]
 8013928:	2186      	movs	r1, #134	@ 0x86
 801392a:	187b      	adds	r3, r7, r1
 801392c:	0592      	lsls	r2, r2, #22
 801392e:	0d92      	lsrs	r2, r2, #22
 8013930:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8013932:	68bb      	ldr	r3, [r7, #8]
 8013934:	699a      	ldr	r2, [r3, #24]
 8013936:	187b      	adds	r3, r7, r1
 8013938:	881b      	ldrh	r3, [r3, #0]
 801393a:	429a      	cmp	r2, r3
 801393c:	d907      	bls.n	801394e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	699a      	ldr	r2, [r3, #24]
 8013942:	187b      	adds	r3, r7, r1
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	1ad2      	subs	r2, r2, r3
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	619a      	str	r2, [r3, #24]
 801394c:	e002      	b.n	8013954 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	2200      	movs	r2, #0
 8013952:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	699b      	ldr	r3, [r3, #24]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d000      	beq.n	801395e <HAL_PCD_EP_DB_Transmit+0x72>
 801395c:	e0b5      	b.n	8013aca <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	785b      	ldrb	r3, [r3, #1]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d125      	bne.n	80139b2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2250      	movs	r2, #80	@ 0x50
 8013972:	5a9b      	ldrh	r3, [r3, r2]
 8013974:	b29b      	uxth	r3, r3
 8013976:	001a      	movs	r2, r3
 8013978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801397a:	189b      	adds	r3, r3, r2
 801397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	00da      	lsls	r2, r3, #3
 8013984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013986:	18d3      	adds	r3, r2, r3
 8013988:	4ab6      	ldr	r2, [pc, #728]	@ (8013c64 <HAL_PCD_EP_DB_Transmit+0x378>)
 801398a:	4694      	mov	ip, r2
 801398c:	4463      	add	r3, ip
 801398e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	b29b      	uxth	r3, r3
 8013996:	059b      	lsls	r3, r3, #22
 8013998:	0d9b      	lsrs	r3, r3, #22
 801399a:	b29a      	uxth	r2, r3
 801399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801399e:	801a      	strh	r2, [r3, #0]
 80139a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a2:	881b      	ldrh	r3, [r3, #0]
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	4ab0      	ldr	r2, [pc, #704]	@ (8013c68 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80139a8:	4313      	orrs	r3, r2
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ae:	801a      	strh	r2, [r3, #0]
 80139b0:	e01b      	b.n	80139ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	785b      	ldrb	r3, [r3, #1]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d117      	bne.n	80139ea <HAL_PCD_EP_DB_Transmit+0xfe>
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	637b      	str	r3, [r7, #52]	@ 0x34
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2250      	movs	r2, #80	@ 0x50
 80139c6:	5a9b      	ldrh	r3, [r3, r2]
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	001a      	movs	r2, r3
 80139cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139ce:	189b      	adds	r3, r3, r2
 80139d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	00da      	lsls	r2, r3, #3
 80139d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139da:	18d3      	adds	r3, r2, r3
 80139dc:	4aa1      	ldr	r2, [pc, #644]	@ (8013c64 <HAL_PCD_EP_DB_Transmit+0x378>)
 80139de:	4694      	mov	ip, r2
 80139e0:	4463      	add	r3, ip
 80139e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80139e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e6:	2200      	movs	r2, #0
 80139e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	785b      	ldrb	r3, [r3, #1]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d125      	bne.n	8013a44 <HAL_PCD_EP_DB_Transmit+0x158>
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	61fb      	str	r3, [r7, #28]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2250      	movs	r2, #80	@ 0x50
 8013a04:	5a9b      	ldrh	r3, [r3, r2]
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	001a      	movs	r2, r3
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	189b      	adds	r3, r3, r2
 8013a0e:	61fb      	str	r3, [r7, #28]
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	00da      	lsls	r2, r3, #3
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	18d3      	adds	r3, r2, r3
 8013a1a:	4a94      	ldr	r2, [pc, #592]	@ (8013c6c <HAL_PCD_EP_DB_Transmit+0x380>)
 8013a1c:	4694      	mov	ip, r2
 8013a1e:	4463      	add	r3, ip
 8013a20:	61bb      	str	r3, [r7, #24]
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	881b      	ldrh	r3, [r3, #0]
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	059b      	lsls	r3, r3, #22
 8013a2a:	0d9b      	lsrs	r3, r3, #22
 8013a2c:	b29a      	uxth	r2, r3
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	801a      	strh	r2, [r3, #0]
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	b29b      	uxth	r3, r3
 8013a38:	4a8b      	ldr	r2, [pc, #556]	@ (8013c68 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013a3a:	4313      	orrs	r3, r2
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	801a      	strh	r2, [r3, #0]
 8013a42:	e018      	b.n	8013a76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	785b      	ldrb	r3, [r3, #1]
 8013a48:	2b01      	cmp	r3, #1
 8013a4a:	d114      	bne.n	8013a76 <HAL_PCD_EP_DB_Transmit+0x18a>
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2250      	movs	r2, #80	@ 0x50
 8013a52:	5a9b      	ldrh	r3, [r3, r2]
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	001a      	movs	r2, r3
 8013a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a5a:	189b      	adds	r3, r3, r2
 8013a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	781b      	ldrb	r3, [r3, #0]
 8013a62:	00da      	lsls	r2, r3, #3
 8013a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a66:	18d3      	adds	r3, r2, r3
 8013a68:	4a80      	ldr	r2, [pc, #512]	@ (8013c6c <HAL_PCD_EP_DB_Transmit+0x380>)
 8013a6a:	4694      	mov	ip, r2
 8013a6c:	4463      	add	r3, ip
 8013a6e:	623b      	str	r3, [r7, #32]
 8013a70:	6a3b      	ldr	r3, [r7, #32]
 8013a72:	2200      	movs	r2, #0
 8013a74:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	781a      	ldrb	r2, [r3, #0]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	0011      	movs	r1, r2
 8013a7e:	0018      	movs	r0, r3
 8013a80:	f008 fd18 	bl	801c4b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013a84:	1dbb      	adds	r3, r7, #6
 8013a86:	881a      	ldrh	r2, [r3, #0]
 8013a88:	2380      	movs	r3, #128	@ 0x80
 8013a8a:	01db      	lsls	r3, r3, #7
 8013a8c:	4013      	ands	r3, r2
 8013a8e:	d100      	bne.n	8013a92 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013a90:	e309      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	001a      	movs	r2, r3
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	18d3      	adds	r3, r2, r3
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	2016      	movs	r0, #22
 8013aa6:	183b      	adds	r3, r7, r0
 8013aa8:	4971      	ldr	r1, [pc, #452]	@ (8013c70 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013aaa:	400a      	ands	r2, r1
 8013aac:	801a      	strh	r2, [r3, #0]
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	001a      	movs	r2, r3
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	009b      	lsls	r3, r3, #2
 8013aba:	18d3      	adds	r3, r2, r3
 8013abc:	183a      	adds	r2, r7, r0
 8013abe:	8812      	ldrh	r2, [r2, #0]
 8013ac0:	496c      	ldr	r1, [pc, #432]	@ (8013c74 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013ac2:	430a      	orrs	r2, r1
 8013ac4:	b292      	uxth	r2, r2
 8013ac6:	801a      	strh	r2, [r3, #0]
 8013ac8:	e2ed      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013aca:	1dbb      	adds	r3, r7, #6
 8013acc:	881a      	ldrh	r2, [r3, #0]
 8013ace:	2380      	movs	r3, #128	@ 0x80
 8013ad0:	01db      	lsls	r3, r3, #7
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	d01a      	beq.n	8013b0c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	001a      	movs	r2, r3
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	009b      	lsls	r3, r3, #2
 8013ae2:	18d3      	adds	r3, r2, r3
 8013ae4:	881b      	ldrh	r3, [r3, #0]
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	208a      	movs	r0, #138	@ 0x8a
 8013aea:	183b      	adds	r3, r7, r0
 8013aec:	4960      	ldr	r1, [pc, #384]	@ (8013c70 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013aee:	400a      	ands	r2, r1
 8013af0:	801a      	strh	r2, [r3, #0]
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	001a      	movs	r2, r3
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	009b      	lsls	r3, r3, #2
 8013afe:	18d3      	adds	r3, r2, r3
 8013b00:	183a      	adds	r2, r7, r0
 8013b02:	8812      	ldrh	r2, [r2, #0]
 8013b04:	495b      	ldr	r1, [pc, #364]	@ (8013c74 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013b06:	430a      	orrs	r2, r1
 8013b08:	b292      	uxth	r2, r2
 8013b0a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2224      	movs	r2, #36	@ 0x24
 8013b10:	5c9b      	ldrb	r3, [r3, r2]
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d000      	beq.n	8013b18 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013b16:	e2c6      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	695a      	ldr	r2, [r3, #20]
 8013b1c:	2186      	movs	r1, #134	@ 0x86
 8013b1e:	187b      	adds	r3, r7, r1
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	18d2      	adds	r2, r2, r3
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	69da      	ldr	r2, [r3, #28]
 8013b2c:	187b      	adds	r3, r7, r1
 8013b2e:	881b      	ldrh	r3, [r3, #0]
 8013b30:	18d2      	adds	r2, r2, r3
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013b36:	68bb      	ldr	r3, [r7, #8]
 8013b38:	6a1a      	ldr	r2, [r3, #32]
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	691b      	ldr	r3, [r3, #16]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d30c      	bcc.n	8013b5c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	691b      	ldr	r3, [r3, #16]
 8013b46:	218c      	movs	r1, #140	@ 0x8c
 8013b48:	187a      	adds	r2, r7, r1
 8013b4a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	6a1a      	ldr	r2, [r3, #32]
 8013b50:	187b      	adds	r3, r7, r1
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	1ad2      	subs	r2, r2, r3
 8013b56:	68bb      	ldr	r3, [r7, #8]
 8013b58:	621a      	str	r2, [r3, #32]
 8013b5a:	e01a      	b.n	8013b92 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	6a1b      	ldr	r3, [r3, #32]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013b64:	2386      	movs	r3, #134	@ 0x86
 8013b66:	18fb      	adds	r3, r7, r3
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	228c      	movs	r2, #140	@ 0x8c
 8013b6c:	18ba      	adds	r2, r7, r2
 8013b6e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	2224      	movs	r2, #36	@ 0x24
 8013b74:	2100      	movs	r1, #0
 8013b76:	5499      	strb	r1, [r3, r2]
 8013b78:	e00b      	b.n	8013b92 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	2224      	movs	r2, #36	@ 0x24
 8013b7e:	2100      	movs	r1, #0
 8013b80:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	6a1b      	ldr	r3, [r3, #32]
 8013b86:	228c      	movs	r2, #140	@ 0x8c
 8013b88:	18ba      	adds	r2, r7, r2
 8013b8a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	785b      	ldrb	r3, [r3, #1]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d000      	beq.n	8013b9c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013b9a:	e06d      	b.n	8013c78 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	2250      	movs	r2, #80	@ 0x50
 8013ba8:	5a9b      	ldrh	r3, [r3, r2]
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	001a      	movs	r2, r3
 8013bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bb0:	189b      	adds	r3, r3, r2
 8013bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	00da      	lsls	r2, r3, #3
 8013bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013bbc:	18d3      	adds	r3, r2, r3
 8013bbe:	4a29      	ldr	r2, [pc, #164]	@ (8013c64 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013bc0:	4694      	mov	ip, r2
 8013bc2:	4463      	add	r3, ip
 8013bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc8:	881b      	ldrh	r3, [r3, #0]
 8013bca:	b29b      	uxth	r3, r3
 8013bcc:	059b      	lsls	r3, r3, #22
 8013bce:	0d9b      	lsrs	r3, r3, #22
 8013bd0:	b29a      	uxth	r2, r3
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd4:	801a      	strh	r2, [r3, #0]
 8013bd6:	228c      	movs	r2, #140	@ 0x8c
 8013bd8:	18bb      	adds	r3, r7, r2
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b3e      	cmp	r3, #62	@ 0x3e
 8013bde:	d91a      	bls.n	8013c16 <HAL_PCD_EP_DB_Transmit+0x32a>
 8013be0:	18bb      	adds	r3, r7, r2
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	095b      	lsrs	r3, r3, #5
 8013be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013be8:	18bb      	adds	r3, r7, r2
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	221f      	movs	r2, #31
 8013bee:	4013      	ands	r3, r2
 8013bf0:	d102      	bne.n	8013bf8 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bf4:	3b01      	subs	r3, #1
 8013bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	881b      	ldrh	r3, [r3, #0]
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	029b      	lsls	r3, r3, #10
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	4313      	orrs	r3, r2
 8013c08:	b29b      	uxth	r3, r3
 8013c0a:	4a17      	ldr	r2, [pc, #92]	@ (8013c68 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013c0c:	4313      	orrs	r3, r2
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	801a      	strh	r2, [r3, #0]
 8013c14:	e04f      	b.n	8013cb6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013c16:	238c      	movs	r3, #140	@ 0x8c
 8013c18:	18fb      	adds	r3, r7, r3
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d108      	bne.n	8013c32 <HAL_PCD_EP_DB_Transmit+0x346>
 8013c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c22:	881b      	ldrh	r3, [r3, #0]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4a10      	ldr	r2, [pc, #64]	@ (8013c68 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	b29a      	uxth	r2, r3
 8013c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2e:	801a      	strh	r2, [r3, #0]
 8013c30:	e041      	b.n	8013cb6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013c32:	228c      	movs	r2, #140	@ 0x8c
 8013c34:	18bb      	adds	r3, r7, r2
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	085b      	lsrs	r3, r3, #1
 8013c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c3c:	18bb      	adds	r3, r7, r2
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2201      	movs	r2, #1
 8013c42:	4013      	ands	r3, r2
 8013c44:	d002      	beq.n	8013c4c <HAL_PCD_EP_DB_Transmit+0x360>
 8013c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c48:	3301      	adds	r3, #1
 8013c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	029b      	lsls	r3, r3, #10
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c60:	801a      	strh	r2, [r3, #0]
 8013c62:	e028      	b.n	8013cb6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013c64:	00000402 	.word	0x00000402
 8013c68:	ffff8000 	.word	0xffff8000
 8013c6c:	00000406 	.word	0x00000406
 8013c70:	ffff8f8f 	.word	0xffff8f8f
 8013c74:	ffffc080 	.word	0xffffc080
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	785b      	ldrb	r3, [r3, #1]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d11a      	bne.n	8013cb6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2250      	movs	r2, #80	@ 0x50
 8013c8c:	5a9b      	ldrh	r3, [r3, r2]
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	001a      	movs	r2, r3
 8013c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c94:	189b      	adds	r3, r3, r2
 8013c96:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	00da      	lsls	r2, r3, #3
 8013c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ca0:	18d3      	adds	r3, r2, r3
 8013ca2:	4adb      	ldr	r2, [pc, #876]	@ (8014010 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013ca4:	4694      	mov	ip, r2
 8013ca6:	4463      	add	r3, ip
 8013ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8013caa:	238c      	movs	r3, #140	@ 0x8c
 8013cac:	18fb      	adds	r3, r7, r3
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cb4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	6818      	ldr	r0, [r3, #0]
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	6959      	ldr	r1, [r3, #20]
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	891a      	ldrh	r2, [r3, #8]
 8013cc2:	238c      	movs	r3, #140	@ 0x8c
 8013cc4:	18fb      	adds	r3, r7, r3
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	f006 fb6f 	bl	801a3ac <USB_WritePMA>
 8013cce:	e1ea      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	2250      	movs	r2, #80	@ 0x50
 8013cd6:	5a9b      	ldrh	r3, [r3, r2]
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	001a      	movs	r2, r3
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	18d2      	adds	r2, r2, r3
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	18d3      	adds	r3, r2, r3
 8013cea:	4aca      	ldr	r2, [pc, #808]	@ (8014014 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013cec:	4694      	mov	ip, r2
 8013cee:	4463      	add	r3, ip
 8013cf0:	881a      	ldrh	r2, [r3, #0]
 8013cf2:	2186      	movs	r1, #134	@ 0x86
 8013cf4:	187b      	adds	r3, r7, r1
 8013cf6:	0592      	lsls	r2, r2, #22
 8013cf8:	0d92      	lsrs	r2, r2, #22
 8013cfa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	699a      	ldr	r2, [r3, #24]
 8013d00:	187b      	adds	r3, r7, r1
 8013d02:	881b      	ldrh	r3, [r3, #0]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d307      	bcc.n	8013d18 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013d08:	68bb      	ldr	r3, [r7, #8]
 8013d0a:	699a      	ldr	r2, [r3, #24]
 8013d0c:	187b      	adds	r3, r7, r1
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	1ad2      	subs	r2, r2, r3
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	619a      	str	r2, [r3, #24]
 8013d16:	e002      	b.n	8013d1e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	699b      	ldr	r3, [r3, #24]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d000      	beq.n	8013d28 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013d26:	e0bb      	b.n	8013ea0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	785b      	ldrb	r3, [r3, #1]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d125      	bne.n	8013d7c <HAL_PCD_EP_DB_Transmit+0x490>
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	2250      	movs	r2, #80	@ 0x50
 8013d3c:	5a9b      	ldrh	r3, [r3, r2]
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	001a      	movs	r2, r3
 8013d42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d44:	189b      	adds	r3, r3, r2
 8013d46:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	00da      	lsls	r2, r3, #3
 8013d4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013d50:	18d3      	adds	r3, r2, r3
 8013d52:	4aaf      	ldr	r2, [pc, #700]	@ (8014010 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013d54:	4694      	mov	ip, r2
 8013d56:	4463      	add	r3, ip
 8013d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d5c:	881b      	ldrh	r3, [r3, #0]
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	059b      	lsls	r3, r3, #22
 8013d62:	0d9b      	lsrs	r3, r3, #22
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d68:	801a      	strh	r2, [r3, #0]
 8013d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	b29b      	uxth	r3, r3
 8013d70:	4aa9      	ldr	r2, [pc, #676]	@ (8014018 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013d72:	4313      	orrs	r3, r2
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d78:	801a      	strh	r2, [r3, #0]
 8013d7a:	e01b      	b.n	8013db4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	785b      	ldrb	r3, [r3, #1]
 8013d80:	2b01      	cmp	r3, #1
 8013d82:	d117      	bne.n	8013db4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	667b      	str	r3, [r7, #100]	@ 0x64
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2250      	movs	r2, #80	@ 0x50
 8013d90:	5a9b      	ldrh	r3, [r3, r2]
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	001a      	movs	r2, r3
 8013d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d98:	189b      	adds	r3, r3, r2
 8013d9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	00da      	lsls	r2, r3, #3
 8013da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013da4:	18d3      	adds	r3, r2, r3
 8013da6:	4a9a      	ldr	r2, [pc, #616]	@ (8014010 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013da8:	4694      	mov	ip, r2
 8013daa:	4463      	add	r3, ip
 8013dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8013dae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013db0:	2200      	movs	r2, #0
 8013db2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	677b      	str	r3, [r7, #116]	@ 0x74
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	785b      	ldrb	r3, [r3, #1]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d12b      	bne.n	8013e1a <HAL_PCD_EP_DB_Transmit+0x52e>
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2250      	movs	r2, #80	@ 0x50
 8013dce:	5a9b      	ldrh	r3, [r3, r2]
 8013dd0:	b29b      	uxth	r3, r3
 8013dd2:	001a      	movs	r2, r3
 8013dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013dd6:	189b      	adds	r3, r3, r2
 8013dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	00da      	lsls	r2, r3, #3
 8013de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013de2:	18d3      	adds	r3, r2, r3
 8013de4:	4a8b      	ldr	r2, [pc, #556]	@ (8014014 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013de6:	4694      	mov	ip, r2
 8013de8:	4463      	add	r3, ip
 8013dea:	2180      	movs	r1, #128	@ 0x80
 8013dec:	187a      	adds	r2, r7, r1
 8013dee:	6013      	str	r3, [r2, #0]
 8013df0:	187b      	adds	r3, r7, r1
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	881b      	ldrh	r3, [r3, #0]
 8013df6:	b29b      	uxth	r3, r3
 8013df8:	059b      	lsls	r3, r3, #22
 8013dfa:	0d9b      	lsrs	r3, r3, #22
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	187b      	adds	r3, r7, r1
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	801a      	strh	r2, [r3, #0]
 8013e04:	187b      	adds	r3, r7, r1
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	4a82      	ldr	r2, [pc, #520]	@ (8014018 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013e0e:	4313      	orrs	r3, r2
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	187b      	adds	r3, r7, r1
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	801a      	strh	r2, [r3, #0]
 8013e18:	e018      	b.n	8013e4c <HAL_PCD_EP_DB_Transmit+0x560>
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	785b      	ldrb	r3, [r3, #1]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d114      	bne.n	8013e4c <HAL_PCD_EP_DB_Transmit+0x560>
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	2250      	movs	r2, #80	@ 0x50
 8013e28:	5a9b      	ldrh	r3, [r3, r2]
 8013e2a:	b29b      	uxth	r3, r3
 8013e2c:	001a      	movs	r2, r3
 8013e2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013e30:	189b      	adds	r3, r3, r2
 8013e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	00da      	lsls	r2, r3, #3
 8013e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013e3c:	18d3      	adds	r3, r2, r3
 8013e3e:	4a75      	ldr	r2, [pc, #468]	@ (8014014 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013e40:	4694      	mov	ip, r2
 8013e42:	4463      	add	r3, ip
 8013e44:	673b      	str	r3, [r7, #112]	@ 0x70
 8013e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013e48:	2200      	movs	r2, #0
 8013e4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013e4c:	68bb      	ldr	r3, [r7, #8]
 8013e4e:	781a      	ldrb	r2, [r3, #0]
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	0011      	movs	r1, r2
 8013e54:	0018      	movs	r0, r3
 8013e56:	f008 fb2d 	bl	801c4b4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013e5a:	1dbb      	adds	r3, r7, #6
 8013e5c:	881a      	ldrh	r2, [r3, #0]
 8013e5e:	2380      	movs	r3, #128	@ 0x80
 8013e60:	01db      	lsls	r3, r3, #7
 8013e62:	4013      	ands	r3, r2
 8013e64:	d000      	beq.n	8013e68 <HAL_PCD_EP_DB_Transmit+0x57c>
 8013e66:	e11e      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	001a      	movs	r2, r3
 8013e6e:	68bb      	ldr	r3, [r7, #8]
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	009b      	lsls	r3, r3, #2
 8013e74:	18d3      	adds	r3, r2, r3
 8013e76:	881b      	ldrh	r3, [r3, #0]
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	2088      	movs	r0, #136	@ 0x88
 8013e7c:	183b      	adds	r3, r7, r0
 8013e7e:	4967      	ldr	r1, [pc, #412]	@ (801401c <HAL_PCD_EP_DB_Transmit+0x730>)
 8013e80:	400a      	ands	r2, r1
 8013e82:	801a      	strh	r2, [r3, #0]
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	001a      	movs	r2, r3
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	18d3      	adds	r3, r2, r3
 8013e92:	183a      	adds	r2, r7, r0
 8013e94:	8812      	ldrh	r2, [r2, #0]
 8013e96:	4962      	ldr	r1, [pc, #392]	@ (8014020 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013e98:	430a      	orrs	r2, r1
 8013e9a:	b292      	uxth	r2, r2
 8013e9c:	801a      	strh	r2, [r3, #0]
 8013e9e:	e102      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013ea0:	1dbb      	adds	r3, r7, #6
 8013ea2:	881a      	ldrh	r2, [r3, #0]
 8013ea4:	2380      	movs	r3, #128	@ 0x80
 8013ea6:	01db      	lsls	r3, r3, #7
 8013ea8:	4013      	ands	r3, r2
 8013eaa:	d11a      	bne.n	8013ee2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	001a      	movs	r2, r3
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	009b      	lsls	r3, r3, #2
 8013eb8:	18d3      	adds	r3, r2, r3
 8013eba:	881b      	ldrh	r3, [r3, #0]
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	204e      	movs	r0, #78	@ 0x4e
 8013ec0:	183b      	adds	r3, r7, r0
 8013ec2:	4956      	ldr	r1, [pc, #344]	@ (801401c <HAL_PCD_EP_DB_Transmit+0x730>)
 8013ec4:	400a      	ands	r2, r1
 8013ec6:	801a      	strh	r2, [r3, #0]
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	001a      	movs	r2, r3
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	781b      	ldrb	r3, [r3, #0]
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	18d3      	adds	r3, r2, r3
 8013ed6:	183a      	adds	r2, r7, r0
 8013ed8:	8812      	ldrh	r2, [r2, #0]
 8013eda:	4951      	ldr	r1, [pc, #324]	@ (8014020 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013edc:	430a      	orrs	r2, r1
 8013ede:	b292      	uxth	r2, r2
 8013ee0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2224      	movs	r2, #36	@ 0x24
 8013ee6:	5c9b      	ldrb	r3, [r3, r2]
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d000      	beq.n	8013eee <HAL_PCD_EP_DB_Transmit+0x602>
 8013eec:	e0db      	b.n	80140a6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	695a      	ldr	r2, [r3, #20]
 8013ef2:	2186      	movs	r1, #134	@ 0x86
 8013ef4:	187b      	adds	r3, r7, r1
 8013ef6:	881b      	ldrh	r3, [r3, #0]
 8013ef8:	18d2      	adds	r2, r2, r3
 8013efa:	68bb      	ldr	r3, [r7, #8]
 8013efc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	69da      	ldr	r2, [r3, #28]
 8013f02:	187b      	adds	r3, r7, r1
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	18d2      	adds	r2, r2, r3
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	6a1a      	ldr	r2, [r3, #32]
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	691b      	ldr	r3, [r3, #16]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d30c      	bcc.n	8013f32 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8013f18:	68bb      	ldr	r3, [r7, #8]
 8013f1a:	691b      	ldr	r3, [r3, #16]
 8013f1c:	218c      	movs	r1, #140	@ 0x8c
 8013f1e:	187a      	adds	r2, r7, r1
 8013f20:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	6a1a      	ldr	r2, [r3, #32]
 8013f26:	187b      	adds	r3, r7, r1
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	1ad2      	subs	r2, r2, r3
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	621a      	str	r2, [r3, #32]
 8013f30:	e01a      	b.n	8013f68 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	6a1b      	ldr	r3, [r3, #32]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10a      	bne.n	8013f50 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8013f3a:	2386      	movs	r3, #134	@ 0x86
 8013f3c:	18fb      	adds	r3, r7, r3
 8013f3e:	881b      	ldrh	r3, [r3, #0]
 8013f40:	228c      	movs	r2, #140	@ 0x8c
 8013f42:	18ba      	adds	r2, r7, r2
 8013f44:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	2224      	movs	r2, #36	@ 0x24
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	5499      	strb	r1, [r3, r2]
 8013f4e:	e00b      	b.n	8013f68 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	6a1b      	ldr	r3, [r3, #32]
 8013f54:	228c      	movs	r2, #140	@ 0x8c
 8013f56:	18ba      	adds	r2, r7, r2
 8013f58:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	2224      	movs	r2, #36	@ 0x24
 8013f64:	2100      	movs	r1, #0
 8013f66:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	785b      	ldrb	r3, [r3, #1]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d000      	beq.n	8013f78 <HAL_PCD_EP_DB_Transmit+0x68c>
 8013f76:	e06e      	b.n	8014056 <HAL_PCD_EP_DB_Transmit+0x76a>
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	2250      	movs	r2, #80	@ 0x50
 8013f84:	5a9b      	ldrh	r3, [r3, r2]
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	001a      	movs	r2, r3
 8013f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f8c:	189b      	adds	r3, r3, r2
 8013f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	781b      	ldrb	r3, [r3, #0]
 8013f94:	00da      	lsls	r2, r3, #3
 8013f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f98:	18d3      	adds	r3, r2, r3
 8013f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8014014 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013f9c:	4694      	mov	ip, r2
 8013f9e:	4463      	add	r3, ip
 8013fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fa4:	881b      	ldrh	r3, [r3, #0]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	059b      	lsls	r3, r3, #22
 8013faa:	0d9b      	lsrs	r3, r3, #22
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fb0:	801a      	strh	r2, [r3, #0]
 8013fb2:	228c      	movs	r2, #140	@ 0x8c
 8013fb4:	18bb      	adds	r3, r7, r2
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8013fba:	d91a      	bls.n	8013ff2 <HAL_PCD_EP_DB_Transmit+0x706>
 8013fbc:	18bb      	adds	r3, r7, r2
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	095b      	lsrs	r3, r3, #5
 8013fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013fc4:	18bb      	adds	r3, r7, r2
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	221f      	movs	r2, #31
 8013fca:	4013      	ands	r3, r2
 8013fcc:	d102      	bne.n	8013fd4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013fd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fd6:	881b      	ldrh	r3, [r3, #0]
 8013fd8:	b29a      	uxth	r2, r3
 8013fda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	029b      	lsls	r3, r3, #10
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8014018 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013fe8:	4313      	orrs	r3, r2
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fee:	801a      	strh	r2, [r3, #0]
 8013ff0:	e04d      	b.n	801408e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013ff2:	238c      	movs	r3, #140	@ 0x8c
 8013ff4:	18fb      	adds	r3, r7, r3
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d113      	bne.n	8014024 <HAL_PCD_EP_DB_Transmit+0x738>
 8013ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ffe:	881b      	ldrh	r3, [r3, #0]
 8014000:	b29b      	uxth	r3, r3
 8014002:	4a05      	ldr	r2, [pc, #20]	@ (8014018 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014004:	4313      	orrs	r3, r2
 8014006:	b29a      	uxth	r2, r3
 8014008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801400a:	801a      	strh	r2, [r3, #0]
 801400c:	e03f      	b.n	801408e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801400e:	46c0      	nop			@ (mov r8, r8)
 8014010:	00000402 	.word	0x00000402
 8014014:	00000406 	.word	0x00000406
 8014018:	ffff8000 	.word	0xffff8000
 801401c:	ffff8f8f 	.word	0xffff8f8f
 8014020:	ffffc080 	.word	0xffffc080
 8014024:	228c      	movs	r2, #140	@ 0x8c
 8014026:	18bb      	adds	r3, r7, r2
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	085b      	lsrs	r3, r3, #1
 801402c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801402e:	18bb      	adds	r3, r7, r2
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2201      	movs	r2, #1
 8014034:	4013      	ands	r3, r2
 8014036:	d002      	beq.n	801403e <HAL_PCD_EP_DB_Transmit+0x752>
 8014038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801403a:	3301      	adds	r3, #1
 801403c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801403e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014040:	881b      	ldrh	r3, [r3, #0]
 8014042:	b29a      	uxth	r2, r3
 8014044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014046:	b29b      	uxth	r3, r3
 8014048:	029b      	lsls	r3, r3, #10
 801404a:	b29b      	uxth	r3, r3
 801404c:	4313      	orrs	r3, r2
 801404e:	b29a      	uxth	r2, r3
 8014050:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014052:	801a      	strh	r2, [r3, #0]
 8014054:	e01b      	b.n	801408e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	785b      	ldrb	r3, [r3, #1]
 801405a:	2b01      	cmp	r3, #1
 801405c:	d117      	bne.n	801408e <HAL_PCD_EP_DB_Transmit+0x7a2>
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2250      	movs	r2, #80	@ 0x50
 8014064:	5a9b      	ldrh	r3, [r3, r2]
 8014066:	b29b      	uxth	r3, r3
 8014068:	001a      	movs	r2, r3
 801406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801406c:	189b      	adds	r3, r3, r2
 801406e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	00da      	lsls	r2, r3, #3
 8014076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014078:	18d3      	adds	r3, r2, r3
 801407a:	4a21      	ldr	r2, [pc, #132]	@ (8014100 <HAL_PCD_EP_DB_Transmit+0x814>)
 801407c:	4694      	mov	ip, r2
 801407e:	4463      	add	r3, ip
 8014080:	653b      	str	r3, [r7, #80]	@ 0x50
 8014082:	238c      	movs	r3, #140	@ 0x8c
 8014084:	18fb      	adds	r3, r7, r3
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	b29a      	uxth	r2, r3
 801408a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801408c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6818      	ldr	r0, [r3, #0]
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	6959      	ldr	r1, [r3, #20]
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	895a      	ldrh	r2, [r3, #10]
 801409a:	238c      	movs	r3, #140	@ 0x8c
 801409c:	18fb      	adds	r3, r7, r3
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	f006 f983 	bl	801a3ac <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	001a      	movs	r2, r3
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	009b      	lsls	r3, r3, #2
 80140b2:	18d3      	adds	r3, r2, r3
 80140b4:	881b      	ldrh	r3, [r3, #0]
 80140b6:	b29a      	uxth	r2, r3
 80140b8:	2014      	movs	r0, #20
 80140ba:	183b      	adds	r3, r7, r0
 80140bc:	4911      	ldr	r1, [pc, #68]	@ (8014104 <HAL_PCD_EP_DB_Transmit+0x818>)
 80140be:	400a      	ands	r2, r1
 80140c0:	801a      	strh	r2, [r3, #0]
 80140c2:	183b      	adds	r3, r7, r0
 80140c4:	183a      	adds	r2, r7, r0
 80140c6:	8812      	ldrh	r2, [r2, #0]
 80140c8:	2110      	movs	r1, #16
 80140ca:	404a      	eors	r2, r1
 80140cc:	801a      	strh	r2, [r3, #0]
 80140ce:	183b      	adds	r3, r7, r0
 80140d0:	183a      	adds	r2, r7, r0
 80140d2:	8812      	ldrh	r2, [r2, #0]
 80140d4:	2120      	movs	r1, #32
 80140d6:	404a      	eors	r2, r1
 80140d8:	801a      	strh	r2, [r3, #0]
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	001a      	movs	r2, r3
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	18d3      	adds	r3, r2, r3
 80140e8:	183a      	adds	r2, r7, r0
 80140ea:	8812      	ldrh	r2, [r2, #0]
 80140ec:	4906      	ldr	r1, [pc, #24]	@ (8014108 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80140ee:	430a      	orrs	r2, r1
 80140f0:	b292      	uxth	r2, r2
 80140f2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	0018      	movs	r0, r3
 80140f8:	46bd      	mov	sp, r7
 80140fa:	b024      	add	sp, #144	@ 0x90
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	46c0      	nop			@ (mov r8, r8)
 8014100:	00000406 	.word	0x00000406
 8014104:	ffff8fbf 	.word	0xffff8fbf
 8014108:	ffff8080 	.word	0xffff8080

0801410c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801410c:	b590      	push	{r4, r7, lr}
 801410e:	b087      	sub	sp, #28
 8014110:	af00      	add	r7, sp, #0
 8014112:	60f8      	str	r0, [r7, #12]
 8014114:	0008      	movs	r0, r1
 8014116:	0011      	movs	r1, r2
 8014118:	607b      	str	r3, [r7, #4]
 801411a:	240a      	movs	r4, #10
 801411c:	193b      	adds	r3, r7, r4
 801411e:	1c02      	adds	r2, r0, #0
 8014120:	801a      	strh	r2, [r3, #0]
 8014122:	2308      	movs	r3, #8
 8014124:	18fb      	adds	r3, r7, r3
 8014126:	1c0a      	adds	r2, r1, #0
 8014128:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801412a:	0021      	movs	r1, r4
 801412c:	187b      	adds	r3, r7, r1
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	2280      	movs	r2, #128	@ 0x80
 8014132:	4013      	ands	r3, r2
 8014134:	b29b      	uxth	r3, r3
 8014136:	2b00      	cmp	r3, #0
 8014138:	d00c      	beq.n	8014154 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801413a:	187b      	adds	r3, r7, r1
 801413c:	881b      	ldrh	r3, [r3, #0]
 801413e:	2207      	movs	r2, #7
 8014140:	4013      	ands	r3, r2
 8014142:	1c5a      	adds	r2, r3, #1
 8014144:	0013      	movs	r3, r2
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	189b      	adds	r3, r3, r2
 801414a:	00db      	lsls	r3, r3, #3
 801414c:	68fa      	ldr	r2, [r7, #12]
 801414e:	18d3      	adds	r3, r2, r3
 8014150:	617b      	str	r3, [r7, #20]
 8014152:	e00b      	b.n	801416c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014154:	230a      	movs	r3, #10
 8014156:	18fb      	adds	r3, r7, r3
 8014158:	881a      	ldrh	r2, [r3, #0]
 801415a:	0013      	movs	r3, r2
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	189b      	adds	r3, r3, r2
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	3369      	adds	r3, #105	@ 0x69
 8014164:	33ff      	adds	r3, #255	@ 0xff
 8014166:	68fa      	ldr	r2, [r7, #12]
 8014168:	18d3      	adds	r3, r2, r3
 801416a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801416c:	2308      	movs	r3, #8
 801416e:	18fb      	adds	r3, r7, r3
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d107      	bne.n	8014186 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	2200      	movs	r2, #0
 801417a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	b29a      	uxth	r2, r3
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	80da      	strh	r2, [r3, #6]
 8014184:	e00b      	b.n	801419e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	2201      	movs	r2, #1
 801418a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	b29a      	uxth	r2, r3
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	0c1b      	lsrs	r3, r3, #16
 8014198:	b29a      	uxth	r2, r3
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801419e:	2300      	movs	r3, #0
}
 80141a0:	0018      	movs	r0, r3
 80141a2:	46bd      	mov	sp, r7
 80141a4:	b007      	add	sp, #28
 80141a6:	bd90      	pop	{r4, r7, pc}

080141a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b084      	sub	sp, #16
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	23ba      	movs	r3, #186	@ 0xba
 80141ba:	009b      	lsls	r3, r3, #2
 80141bc:	2101      	movs	r1, #1
 80141be:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80141c0:	687a      	ldr	r2, [r7, #4]
 80141c2:	23b8      	movs	r3, #184	@ 0xb8
 80141c4:	009b      	lsls	r3, r3, #2
 80141c6:	2100      	movs	r1, #0
 80141c8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	2254      	movs	r2, #84	@ 0x54
 80141ce:	5a9b      	ldrh	r3, [r3, r2]
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	2201      	movs	r2, #1
 80141d4:	4313      	orrs	r3, r2
 80141d6:	b299      	uxth	r1, r3
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2254      	movs	r2, #84	@ 0x54
 80141dc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	2254      	movs	r2, #84	@ 0x54
 80141e2:	5a9b      	ldrh	r3, [r3, r2]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	2202      	movs	r2, #2
 80141e8:	4313      	orrs	r3, r2
 80141ea:	b299      	uxth	r1, r3
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	2254      	movs	r2, #84	@ 0x54
 80141f0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80141f2:	2300      	movs	r3, #0
}
 80141f4:	0018      	movs	r0, r3
 80141f6:	46bd      	mov	sp, r7
 80141f8:	b004      	add	sp, #16
 80141fa:	bd80      	pop	{r7, pc}

080141fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b082      	sub	sp, #8
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
 8014204:	000a      	movs	r2, r1
 8014206:	1cfb      	adds	r3, r7, #3
 8014208:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801420a:	46c0      	nop			@ (mov r8, r8)
 801420c:	46bd      	mov	sp, r7
 801420e:	b002      	add	sp, #8
 8014210:	bd80      	pop	{r7, pc}
	...

08014214 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014218:	4b04      	ldr	r3, [pc, #16]	@ (801422c <HAL_PWR_EnableBkUpAccess+0x18>)
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	4b03      	ldr	r3, [pc, #12]	@ (801422c <HAL_PWR_EnableBkUpAccess+0x18>)
 801421e:	2180      	movs	r1, #128	@ 0x80
 8014220:	0049      	lsls	r1, r1, #1
 8014222:	430a      	orrs	r2, r1
 8014224:	601a      	str	r2, [r3, #0]
}
 8014226:	46c0      	nop			@ (mov r8, r8)
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	40007000 	.word	0x40007000

08014230 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014234:	4b04      	ldr	r3, [pc, #16]	@ (8014248 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	4b03      	ldr	r3, [pc, #12]	@ (8014248 <HAL_PWR_DisableBkUpAccess+0x18>)
 801423a:	4904      	ldr	r1, [pc, #16]	@ (801424c <HAL_PWR_DisableBkUpAccess+0x1c>)
 801423c:	400a      	ands	r2, r1
 801423e:	601a      	str	r2, [r3, #0]
}
 8014240:	46c0      	nop			@ (mov r8, r8)
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	40007000 	.word	0x40007000
 801424c:	fffffeff 	.word	0xfffffeff

08014250 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b086      	sub	sp, #24
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	000a      	movs	r2, r1
 801425a:	1cfb      	adds	r3, r7, #3
 801425c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801425e:	2300      	movs	r3, #0
 8014260:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014262:	4b25      	ldr	r3, [pc, #148]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014264:	681a      	ldr	r2, [r3, #0]
 8014266:	2380      	movs	r3, #128	@ 0x80
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	4013      	ands	r3, r2
 801426c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801426e:	4b23      	ldr	r3, [pc, #140]	@ (80142fc <HAL_PWR_EnterSTOPMode+0xac>)
 8014270:	6a1b      	ldr	r3, [r3, #32]
 8014272:	2201      	movs	r2, #1
 8014274:	4013      	ands	r3, r2
 8014276:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014278:	693b      	ldr	r3, [r7, #16]
 801427a:	2b00      	cmp	r3, #0
 801427c:	d008      	beq.n	8014290 <HAL_PWR_EnterSTOPMode+0x40>
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d005      	beq.n	8014290 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014284:	4b1c      	ldr	r3, [pc, #112]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	4b1b      	ldr	r3, [pc, #108]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 801428a:	491d      	ldr	r1, [pc, #116]	@ (8014300 <HAL_PWR_EnterSTOPMode+0xb0>)
 801428c:	400a      	ands	r2, r1
 801428e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014290:	4b19      	ldr	r3, [pc, #100]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	2203      	movs	r2, #3
 801429a:	4393      	bics	r3, r2
 801429c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801429e:	697a      	ldr	r2, [r7, #20]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	4313      	orrs	r3, r2
 80142a4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80142a6:	4b14      	ldr	r3, [pc, #80]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80142ac:	4b15      	ldr	r3, [pc, #84]	@ (8014304 <HAL_PWR_EnterSTOPMode+0xb4>)
 80142ae:	691a      	ldr	r2, [r3, #16]
 80142b0:	4b14      	ldr	r3, [pc, #80]	@ (8014304 <HAL_PWR_EnterSTOPMode+0xb4>)
 80142b2:	2104      	movs	r1, #4
 80142b4:	430a      	orrs	r2, r1
 80142b6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80142b8:	1cfb      	adds	r3, r7, #3
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d101      	bne.n	80142c4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80142c0:	bf30      	wfi
 80142c2:	e002      	b.n	80142ca <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80142c4:	bf40      	sev
    __WFE();
 80142c6:	bf20      	wfe
    __WFE();
 80142c8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80142ca:	4b0e      	ldr	r3, [pc, #56]	@ (8014304 <HAL_PWR_EnterSTOPMode+0xb4>)
 80142cc:	691a      	ldr	r2, [r3, #16]
 80142ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014304 <HAL_PWR_EnterSTOPMode+0xb4>)
 80142d0:	2104      	movs	r1, #4
 80142d2:	438a      	bics	r2, r1
 80142d4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d009      	beq.n	80142f0 <HAL_PWR_EnterSTOPMode+0xa0>
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d006      	beq.n	80142f0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80142e2:	4b05      	ldr	r3, [pc, #20]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80142e4:	681a      	ldr	r2, [r3, #0]
 80142e6:	4b04      	ldr	r3, [pc, #16]	@ (80142f8 <HAL_PWR_EnterSTOPMode+0xa8>)
 80142e8:	2180      	movs	r1, #128	@ 0x80
 80142ea:	0089      	lsls	r1, r1, #2
 80142ec:	430a      	orrs	r2, r1
 80142ee:	601a      	str	r2, [r3, #0]
  }
}
 80142f0:	46c0      	nop			@ (mov r8, r8)
 80142f2:	46bd      	mov	sp, r7
 80142f4:	b006      	add	sp, #24
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	40007000 	.word	0x40007000
 80142fc:	40010000 	.word	0x40010000
 8014300:	fffffdff 	.word	0xfffffdff
 8014304:	e000ed00 	.word	0xe000ed00

08014308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014308:	b5b0      	push	{r4, r5, r7, lr}
 801430a:	b08a      	sub	sp, #40	@ 0x28
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d102      	bne.n	801431c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014316:	2301      	movs	r3, #1
 8014318:	f000 fbbf 	bl	8014a9a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801431c:	4bc9      	ldr	r3, [pc, #804]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	220c      	movs	r2, #12
 8014322:	4013      	ands	r3, r2
 8014324:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014326:	4bc7      	ldr	r3, [pc, #796]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014328:	68da      	ldr	r2, [r3, #12]
 801432a:	2380      	movs	r3, #128	@ 0x80
 801432c:	025b      	lsls	r3, r3, #9
 801432e:	4013      	ands	r3, r2
 8014330:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	2201      	movs	r2, #1
 8014338:	4013      	ands	r3, r2
 801433a:	d100      	bne.n	801433e <HAL_RCC_OscConfig+0x36>
 801433c:	e07e      	b.n	801443c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	2b08      	cmp	r3, #8
 8014342:	d007      	beq.n	8014354 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	2b0c      	cmp	r3, #12
 8014348:	d112      	bne.n	8014370 <HAL_RCC_OscConfig+0x68>
 801434a:	69ba      	ldr	r2, [r7, #24]
 801434c:	2380      	movs	r3, #128	@ 0x80
 801434e:	025b      	lsls	r3, r3, #9
 8014350:	429a      	cmp	r2, r3
 8014352:	d10d      	bne.n	8014370 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014354:	4bbb      	ldr	r3, [pc, #748]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	2380      	movs	r3, #128	@ 0x80
 801435a:	029b      	lsls	r3, r3, #10
 801435c:	4013      	ands	r3, r2
 801435e:	d100      	bne.n	8014362 <HAL_RCC_OscConfig+0x5a>
 8014360:	e06b      	b.n	801443a <HAL_RCC_OscConfig+0x132>
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d167      	bne.n	801443a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801436a:	2301      	movs	r3, #1
 801436c:	f000 fb95 	bl	8014a9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	685a      	ldr	r2, [r3, #4]
 8014374:	2380      	movs	r3, #128	@ 0x80
 8014376:	025b      	lsls	r3, r3, #9
 8014378:	429a      	cmp	r2, r3
 801437a:	d107      	bne.n	801438c <HAL_RCC_OscConfig+0x84>
 801437c:	4bb1      	ldr	r3, [pc, #708]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801437e:	681a      	ldr	r2, [r3, #0]
 8014380:	4bb0      	ldr	r3, [pc, #704]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014382:	2180      	movs	r1, #128	@ 0x80
 8014384:	0249      	lsls	r1, r1, #9
 8014386:	430a      	orrs	r2, r1
 8014388:	601a      	str	r2, [r3, #0]
 801438a:	e027      	b.n	80143dc <HAL_RCC_OscConfig+0xd4>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685a      	ldr	r2, [r3, #4]
 8014390:	23a0      	movs	r3, #160	@ 0xa0
 8014392:	02db      	lsls	r3, r3, #11
 8014394:	429a      	cmp	r2, r3
 8014396:	d10e      	bne.n	80143b6 <HAL_RCC_OscConfig+0xae>
 8014398:	4baa      	ldr	r3, [pc, #680]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	4ba9      	ldr	r3, [pc, #676]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801439e:	2180      	movs	r1, #128	@ 0x80
 80143a0:	02c9      	lsls	r1, r1, #11
 80143a2:	430a      	orrs	r2, r1
 80143a4:	601a      	str	r2, [r3, #0]
 80143a6:	4ba7      	ldr	r3, [pc, #668]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143a8:	681a      	ldr	r2, [r3, #0]
 80143aa:	4ba6      	ldr	r3, [pc, #664]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143ac:	2180      	movs	r1, #128	@ 0x80
 80143ae:	0249      	lsls	r1, r1, #9
 80143b0:	430a      	orrs	r2, r1
 80143b2:	601a      	str	r2, [r3, #0]
 80143b4:	e012      	b.n	80143dc <HAL_RCC_OscConfig+0xd4>
 80143b6:	4ba3      	ldr	r3, [pc, #652]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	4ba2      	ldr	r3, [pc, #648]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143bc:	49a2      	ldr	r1, [pc, #648]	@ (8014648 <HAL_RCC_OscConfig+0x340>)
 80143be:	400a      	ands	r2, r1
 80143c0:	601a      	str	r2, [r3, #0]
 80143c2:	4ba0      	ldr	r3, [pc, #640]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	2380      	movs	r3, #128	@ 0x80
 80143c8:	025b      	lsls	r3, r3, #9
 80143ca:	4013      	ands	r3, r2
 80143cc:	60fb      	str	r3, [r7, #12]
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	4b9c      	ldr	r3, [pc, #624]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	4b9b      	ldr	r3, [pc, #620]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80143d6:	499d      	ldr	r1, [pc, #628]	@ (801464c <HAL_RCC_OscConfig+0x344>)
 80143d8:	400a      	ands	r2, r1
 80143da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	685b      	ldr	r3, [r3, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d015      	beq.n	8014410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143e4:	f7f9 fe8c 	bl	800e100 <HAL_GetTick>
 80143e8:	0003      	movs	r3, r0
 80143ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80143ec:	e009      	b.n	8014402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80143ee:	f7f9 fe87 	bl	800e100 <HAL_GetTick>
 80143f2:	0002      	movs	r2, r0
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	1ad3      	subs	r3, r2, r3
 80143f8:	2b64      	cmp	r3, #100	@ 0x64
 80143fa:	d902      	bls.n	8014402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80143fc:	2303      	movs	r3, #3
 80143fe:	f000 fb4c 	bl	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014402:	4b90      	ldr	r3, [pc, #576]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014404:	681a      	ldr	r2, [r3, #0]
 8014406:	2380      	movs	r3, #128	@ 0x80
 8014408:	029b      	lsls	r3, r3, #10
 801440a:	4013      	ands	r3, r2
 801440c:	d0ef      	beq.n	80143ee <HAL_RCC_OscConfig+0xe6>
 801440e:	e015      	b.n	801443c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014410:	f7f9 fe76 	bl	800e100 <HAL_GetTick>
 8014414:	0003      	movs	r3, r0
 8014416:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014418:	e008      	b.n	801442c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801441a:	f7f9 fe71 	bl	800e100 <HAL_GetTick>
 801441e:	0002      	movs	r2, r0
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	2b64      	cmp	r3, #100	@ 0x64
 8014426:	d901      	bls.n	801442c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8014428:	2303      	movs	r3, #3
 801442a:	e336      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801442c:	4b85      	ldr	r3, [pc, #532]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801442e:	681a      	ldr	r2, [r3, #0]
 8014430:	2380      	movs	r3, #128	@ 0x80
 8014432:	029b      	lsls	r3, r3, #10
 8014434:	4013      	ands	r3, r2
 8014436:	d1f0      	bne.n	801441a <HAL_RCC_OscConfig+0x112>
 8014438:	e000      	b.n	801443c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801443a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2202      	movs	r2, #2
 8014442:	4013      	ands	r3, r2
 8014444:	d100      	bne.n	8014448 <HAL_RCC_OscConfig+0x140>
 8014446:	e099      	b.n	801457c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801444e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014450:	2220      	movs	r2, #32
 8014452:	4013      	ands	r3, r2
 8014454:	d009      	beq.n	801446a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8014456:	4b7b      	ldr	r3, [pc, #492]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	4b7a      	ldr	r3, [pc, #488]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801445c:	2120      	movs	r1, #32
 801445e:	430a      	orrs	r2, r1
 8014460:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8014462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014464:	2220      	movs	r2, #32
 8014466:	4393      	bics	r3, r2
 8014468:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	2b04      	cmp	r3, #4
 801446e:	d005      	beq.n	801447c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	2b0c      	cmp	r3, #12
 8014474:	d13e      	bne.n	80144f4 <HAL_RCC_OscConfig+0x1ec>
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d13b      	bne.n	80144f4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801447c:	4b71      	ldr	r3, [pc, #452]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2204      	movs	r2, #4
 8014482:	4013      	ands	r3, r2
 8014484:	d004      	beq.n	8014490 <HAL_RCC_OscConfig+0x188>
 8014486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014488:	2b00      	cmp	r3, #0
 801448a:	d101      	bne.n	8014490 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801448c:	2301      	movs	r3, #1
 801448e:	e304      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014490:	4b6c      	ldr	r3, [pc, #432]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	4a6e      	ldr	r2, [pc, #440]	@ (8014650 <HAL_RCC_OscConfig+0x348>)
 8014496:	4013      	ands	r3, r2
 8014498:	0019      	movs	r1, r3
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	691b      	ldr	r3, [r3, #16]
 801449e:	021a      	lsls	r2, r3, #8
 80144a0:	4b68      	ldr	r3, [pc, #416]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80144a2:	430a      	orrs	r2, r1
 80144a4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80144a6:	4b67      	ldr	r3, [pc, #412]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	2209      	movs	r2, #9
 80144ac:	4393      	bics	r3, r2
 80144ae:	0019      	movs	r1, r3
 80144b0:	4b64      	ldr	r3, [pc, #400]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80144b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144b4:	430a      	orrs	r2, r1
 80144b6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80144b8:	f000 fc42 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 80144bc:	0001      	movs	r1, r0
 80144be:	4b61      	ldr	r3, [pc, #388]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80144c0:	68db      	ldr	r3, [r3, #12]
 80144c2:	091b      	lsrs	r3, r3, #4
 80144c4:	220f      	movs	r2, #15
 80144c6:	4013      	ands	r3, r2
 80144c8:	4a62      	ldr	r2, [pc, #392]	@ (8014654 <HAL_RCC_OscConfig+0x34c>)
 80144ca:	5cd3      	ldrb	r3, [r2, r3]
 80144cc:	000a      	movs	r2, r1
 80144ce:	40da      	lsrs	r2, r3
 80144d0:	4b61      	ldr	r3, [pc, #388]	@ (8014658 <HAL_RCC_OscConfig+0x350>)
 80144d2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80144d4:	4b61      	ldr	r3, [pc, #388]	@ (801465c <HAL_RCC_OscConfig+0x354>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2513      	movs	r5, #19
 80144da:	197c      	adds	r4, r7, r5
 80144dc:	0018      	movs	r0, r3
 80144de:	f7f9 fdc9 	bl	800e074 <HAL_InitTick>
 80144e2:	0003      	movs	r3, r0
 80144e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80144e6:	197b      	adds	r3, r7, r5
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d046      	beq.n	801457c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80144ee:	197b      	adds	r3, r7, r5
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	e2d2      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80144f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d027      	beq.n	801454a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80144fa:	4b52      	ldr	r3, [pc, #328]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2209      	movs	r2, #9
 8014500:	4393      	bics	r3, r2
 8014502:	0019      	movs	r1, r3
 8014504:	4b4f      	ldr	r3, [pc, #316]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014508:	430a      	orrs	r2, r1
 801450a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801450c:	f7f9 fdf8 	bl	800e100 <HAL_GetTick>
 8014510:	0003      	movs	r3, r0
 8014512:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014514:	e008      	b.n	8014528 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014516:	f7f9 fdf3 	bl	800e100 <HAL_GetTick>
 801451a:	0002      	movs	r2, r0
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	1ad3      	subs	r3, r2, r3
 8014520:	2b02      	cmp	r3, #2
 8014522:	d901      	bls.n	8014528 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8014524:	2303      	movs	r3, #3
 8014526:	e2b8      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014528:	4b46      	ldr	r3, [pc, #280]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	2204      	movs	r2, #4
 801452e:	4013      	ands	r3, r2
 8014530:	d0f1      	beq.n	8014516 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014532:	4b44      	ldr	r3, [pc, #272]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	4a46      	ldr	r2, [pc, #280]	@ (8014650 <HAL_RCC_OscConfig+0x348>)
 8014538:	4013      	ands	r3, r2
 801453a:	0019      	movs	r1, r3
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	691b      	ldr	r3, [r3, #16]
 8014540:	021a      	lsls	r2, r3, #8
 8014542:	4b40      	ldr	r3, [pc, #256]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014544:	430a      	orrs	r2, r1
 8014546:	605a      	str	r2, [r3, #4]
 8014548:	e018      	b.n	801457c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801454a:	4b3e      	ldr	r3, [pc, #248]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	4b3d      	ldr	r3, [pc, #244]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014550:	2101      	movs	r1, #1
 8014552:	438a      	bics	r2, r1
 8014554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014556:	f7f9 fdd3 	bl	800e100 <HAL_GetTick>
 801455a:	0003      	movs	r3, r0
 801455c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801455e:	e008      	b.n	8014572 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014560:	f7f9 fdce 	bl	800e100 <HAL_GetTick>
 8014564:	0002      	movs	r2, r0
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	1ad3      	subs	r3, r2, r3
 801456a:	2b02      	cmp	r3, #2
 801456c:	d901      	bls.n	8014572 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801456e:	2303      	movs	r3, #3
 8014570:	e293      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014572:	4b34      	ldr	r3, [pc, #208]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2204      	movs	r2, #4
 8014578:	4013      	ands	r3, r2
 801457a:	d1f1      	bne.n	8014560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2210      	movs	r2, #16
 8014582:	4013      	ands	r3, r2
 8014584:	d100      	bne.n	8014588 <HAL_RCC_OscConfig+0x280>
 8014586:	e0a2      	b.n	80146ce <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014588:	69fb      	ldr	r3, [r7, #28]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d140      	bne.n	8014610 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801458e:	4b2d      	ldr	r3, [pc, #180]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 8014590:	681a      	ldr	r2, [r3, #0]
 8014592:	2380      	movs	r3, #128	@ 0x80
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	4013      	ands	r3, r2
 8014598:	d005      	beq.n	80145a6 <HAL_RCC_OscConfig+0x29e>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	69db      	ldr	r3, [r3, #28]
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d101      	bne.n	80145a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80145a2:	2301      	movs	r3, #1
 80145a4:	e279      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80145a6:	4b27      	ldr	r3, [pc, #156]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	4a2d      	ldr	r2, [pc, #180]	@ (8014660 <HAL_RCC_OscConfig+0x358>)
 80145ac:	4013      	ands	r3, r2
 80145ae:	0019      	movs	r1, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80145b4:	4b23      	ldr	r3, [pc, #140]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80145b6:	430a      	orrs	r2, r1
 80145b8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80145ba:	4b22      	ldr	r3, [pc, #136]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	021b      	lsls	r3, r3, #8
 80145c0:	0a19      	lsrs	r1, r3, #8
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6a1b      	ldr	r3, [r3, #32]
 80145c6:	061a      	lsls	r2, r3, #24
 80145c8:	4b1e      	ldr	r3, [pc, #120]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80145ca:	430a      	orrs	r2, r1
 80145cc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145d2:	0b5b      	lsrs	r3, r3, #13
 80145d4:	3301      	adds	r3, #1
 80145d6:	2280      	movs	r2, #128	@ 0x80
 80145d8:	0212      	lsls	r2, r2, #8
 80145da:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80145dc:	4b19      	ldr	r3, [pc, #100]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	091b      	lsrs	r3, r3, #4
 80145e2:	210f      	movs	r1, #15
 80145e4:	400b      	ands	r3, r1
 80145e6:	491b      	ldr	r1, [pc, #108]	@ (8014654 <HAL_RCC_OscConfig+0x34c>)
 80145e8:	5ccb      	ldrb	r3, [r1, r3]
 80145ea:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80145ec:	4b1a      	ldr	r3, [pc, #104]	@ (8014658 <HAL_RCC_OscConfig+0x350>)
 80145ee:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80145f0:	4b1a      	ldr	r3, [pc, #104]	@ (801465c <HAL_RCC_OscConfig+0x354>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	2513      	movs	r5, #19
 80145f6:	197c      	adds	r4, r7, r5
 80145f8:	0018      	movs	r0, r3
 80145fa:	f7f9 fd3b 	bl	800e074 <HAL_InitTick>
 80145fe:	0003      	movs	r3, r0
 8014600:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8014602:	197b      	adds	r3, r7, r5
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d061      	beq.n	80146ce <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801460a:	197b      	adds	r3, r7, r5
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	e244      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	69db      	ldr	r3, [r3, #28]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d040      	beq.n	801469a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8014618:	4b0a      	ldr	r3, [pc, #40]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	4b09      	ldr	r3, [pc, #36]	@ (8014644 <HAL_RCC_OscConfig+0x33c>)
 801461e:	2180      	movs	r1, #128	@ 0x80
 8014620:	0049      	lsls	r1, r1, #1
 8014622:	430a      	orrs	r2, r1
 8014624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014626:	f7f9 fd6b 	bl	800e100 <HAL_GetTick>
 801462a:	0003      	movs	r3, r0
 801462c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801462e:	e019      	b.n	8014664 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014630:	f7f9 fd66 	bl	800e100 <HAL_GetTick>
 8014634:	0002      	movs	r2, r0
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	1ad3      	subs	r3, r2, r3
 801463a:	2b02      	cmp	r3, #2
 801463c:	d912      	bls.n	8014664 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801463e:	2303      	movs	r3, #3
 8014640:	e22b      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
 8014642:	46c0      	nop			@ (mov r8, r8)
 8014644:	40021000 	.word	0x40021000
 8014648:	fffeffff 	.word	0xfffeffff
 801464c:	fffbffff 	.word	0xfffbffff
 8014650:	ffffe0ff 	.word	0xffffe0ff
 8014654:	080245e4 	.word	0x080245e4
 8014658:	200000c8 	.word	0x200000c8
 801465c:	200000d8 	.word	0x200000d8
 8014660:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014664:	4bca      	ldr	r3, [pc, #808]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	2380      	movs	r3, #128	@ 0x80
 801466a:	009b      	lsls	r3, r3, #2
 801466c:	4013      	ands	r3, r2
 801466e:	d0df      	beq.n	8014630 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014670:	4bc7      	ldr	r3, [pc, #796]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	4ac7      	ldr	r2, [pc, #796]	@ (8014994 <HAL_RCC_OscConfig+0x68c>)
 8014676:	4013      	ands	r3, r2
 8014678:	0019      	movs	r1, r3
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801467e:	4bc4      	ldr	r3, [pc, #784]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014680:	430a      	orrs	r2, r1
 8014682:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014684:	4bc2      	ldr	r3, [pc, #776]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014686:	685b      	ldr	r3, [r3, #4]
 8014688:	021b      	lsls	r3, r3, #8
 801468a:	0a19      	lsrs	r1, r3, #8
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6a1b      	ldr	r3, [r3, #32]
 8014690:	061a      	lsls	r2, r3, #24
 8014692:	4bbf      	ldr	r3, [pc, #764]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014694:	430a      	orrs	r2, r1
 8014696:	605a      	str	r2, [r3, #4]
 8014698:	e019      	b.n	80146ce <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801469a:	4bbd      	ldr	r3, [pc, #756]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	4bbc      	ldr	r3, [pc, #752]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80146a0:	49bd      	ldr	r1, [pc, #756]	@ (8014998 <HAL_RCC_OscConfig+0x690>)
 80146a2:	400a      	ands	r2, r1
 80146a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80146a6:	f7f9 fd2b 	bl	800e100 <HAL_GetTick>
 80146aa:	0003      	movs	r3, r0
 80146ac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80146ae:	e008      	b.n	80146c2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80146b0:	f7f9 fd26 	bl	800e100 <HAL_GetTick>
 80146b4:	0002      	movs	r2, r0
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d901      	bls.n	80146c2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80146be:	2303      	movs	r3, #3
 80146c0:	e1eb      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80146c2:	4bb3      	ldr	r3, [pc, #716]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	2380      	movs	r3, #128	@ 0x80
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4013      	ands	r3, r2
 80146cc:	d1f0      	bne.n	80146b0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	2208      	movs	r2, #8
 80146d4:	4013      	ands	r3, r2
 80146d6:	d036      	beq.n	8014746 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	695b      	ldr	r3, [r3, #20]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d019      	beq.n	8014714 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80146e0:	4bab      	ldr	r3, [pc, #684]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80146e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146e4:	4baa      	ldr	r3, [pc, #680]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80146e6:	2101      	movs	r1, #1
 80146e8:	430a      	orrs	r2, r1
 80146ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80146ec:	f7f9 fd08 	bl	800e100 <HAL_GetTick>
 80146f0:	0003      	movs	r3, r0
 80146f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80146f4:	e008      	b.n	8014708 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80146f6:	f7f9 fd03 	bl	800e100 <HAL_GetTick>
 80146fa:	0002      	movs	r2, r0
 80146fc:	697b      	ldr	r3, [r7, #20]
 80146fe:	1ad3      	subs	r3, r2, r3
 8014700:	2b02      	cmp	r3, #2
 8014702:	d901      	bls.n	8014708 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8014704:	2303      	movs	r3, #3
 8014706:	e1c8      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014708:	4ba1      	ldr	r3, [pc, #644]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801470a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801470c:	2202      	movs	r2, #2
 801470e:	4013      	ands	r3, r2
 8014710:	d0f1      	beq.n	80146f6 <HAL_RCC_OscConfig+0x3ee>
 8014712:	e018      	b.n	8014746 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014714:	4b9e      	ldr	r3, [pc, #632]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014718:	4b9d      	ldr	r3, [pc, #628]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801471a:	2101      	movs	r1, #1
 801471c:	438a      	bics	r2, r1
 801471e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014720:	f7f9 fcee 	bl	800e100 <HAL_GetTick>
 8014724:	0003      	movs	r3, r0
 8014726:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014728:	e008      	b.n	801473c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801472a:	f7f9 fce9 	bl	800e100 <HAL_GetTick>
 801472e:	0002      	movs	r2, r0
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	1ad3      	subs	r3, r2, r3
 8014734:	2b02      	cmp	r3, #2
 8014736:	d901      	bls.n	801473c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8014738:	2303      	movs	r3, #3
 801473a:	e1ae      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801473c:	4b94      	ldr	r3, [pc, #592]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014740:	2202      	movs	r2, #2
 8014742:	4013      	ands	r3, r2
 8014744:	d1f1      	bne.n	801472a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2204      	movs	r2, #4
 801474c:	4013      	ands	r3, r2
 801474e:	d100      	bne.n	8014752 <HAL_RCC_OscConfig+0x44a>
 8014750:	e0ae      	b.n	80148b0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014752:	2023      	movs	r0, #35	@ 0x23
 8014754:	183b      	adds	r3, r7, r0
 8014756:	2200      	movs	r2, #0
 8014758:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801475a:	4b8d      	ldr	r3, [pc, #564]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801475c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801475e:	2380      	movs	r3, #128	@ 0x80
 8014760:	055b      	lsls	r3, r3, #21
 8014762:	4013      	ands	r3, r2
 8014764:	d109      	bne.n	801477a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014766:	4b8a      	ldr	r3, [pc, #552]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801476a:	4b89      	ldr	r3, [pc, #548]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801476c:	2180      	movs	r1, #128	@ 0x80
 801476e:	0549      	lsls	r1, r1, #21
 8014770:	430a      	orrs	r2, r1
 8014772:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014774:	183b      	adds	r3, r7, r0
 8014776:	2201      	movs	r2, #1
 8014778:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801477a:	4b88      	ldr	r3, [pc, #544]	@ (801499c <HAL_RCC_OscConfig+0x694>)
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	2380      	movs	r3, #128	@ 0x80
 8014780:	005b      	lsls	r3, r3, #1
 8014782:	4013      	ands	r3, r2
 8014784:	d11a      	bne.n	80147bc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014786:	4b85      	ldr	r3, [pc, #532]	@ (801499c <HAL_RCC_OscConfig+0x694>)
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	4b84      	ldr	r3, [pc, #528]	@ (801499c <HAL_RCC_OscConfig+0x694>)
 801478c:	2180      	movs	r1, #128	@ 0x80
 801478e:	0049      	lsls	r1, r1, #1
 8014790:	430a      	orrs	r2, r1
 8014792:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014794:	f7f9 fcb4 	bl	800e100 <HAL_GetTick>
 8014798:	0003      	movs	r3, r0
 801479a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801479c:	e008      	b.n	80147b0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801479e:	f7f9 fcaf 	bl	800e100 <HAL_GetTick>
 80147a2:	0002      	movs	r2, r0
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	2b64      	cmp	r3, #100	@ 0x64
 80147aa:	d901      	bls.n	80147b0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80147ac:	2303      	movs	r3, #3
 80147ae:	e174      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80147b0:	4b7a      	ldr	r3, [pc, #488]	@ (801499c <HAL_RCC_OscConfig+0x694>)
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	2380      	movs	r3, #128	@ 0x80
 80147b6:	005b      	lsls	r3, r3, #1
 80147b8:	4013      	ands	r3, r2
 80147ba:	d0f0      	beq.n	801479e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	689a      	ldr	r2, [r3, #8]
 80147c0:	2380      	movs	r3, #128	@ 0x80
 80147c2:	005b      	lsls	r3, r3, #1
 80147c4:	429a      	cmp	r2, r3
 80147c6:	d107      	bne.n	80147d8 <HAL_RCC_OscConfig+0x4d0>
 80147c8:	4b71      	ldr	r3, [pc, #452]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147cc:	4b70      	ldr	r3, [pc, #448]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147ce:	2180      	movs	r1, #128	@ 0x80
 80147d0:	0049      	lsls	r1, r1, #1
 80147d2:	430a      	orrs	r2, r1
 80147d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80147d6:	e031      	b.n	801483c <HAL_RCC_OscConfig+0x534>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10c      	bne.n	80147fa <HAL_RCC_OscConfig+0x4f2>
 80147e0:	4b6b      	ldr	r3, [pc, #428]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147e4:	4b6a      	ldr	r3, [pc, #424]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147e6:	496c      	ldr	r1, [pc, #432]	@ (8014998 <HAL_RCC_OscConfig+0x690>)
 80147e8:	400a      	ands	r2, r1
 80147ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80147ec:	4b68      	ldr	r3, [pc, #416]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147f0:	4b67      	ldr	r3, [pc, #412]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80147f2:	496b      	ldr	r1, [pc, #428]	@ (80149a0 <HAL_RCC_OscConfig+0x698>)
 80147f4:	400a      	ands	r2, r1
 80147f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80147f8:	e020      	b.n	801483c <HAL_RCC_OscConfig+0x534>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	689a      	ldr	r2, [r3, #8]
 80147fe:	23a0      	movs	r3, #160	@ 0xa0
 8014800:	00db      	lsls	r3, r3, #3
 8014802:	429a      	cmp	r2, r3
 8014804:	d10e      	bne.n	8014824 <HAL_RCC_OscConfig+0x51c>
 8014806:	4b62      	ldr	r3, [pc, #392]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801480a:	4b61      	ldr	r3, [pc, #388]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801480c:	2180      	movs	r1, #128	@ 0x80
 801480e:	00c9      	lsls	r1, r1, #3
 8014810:	430a      	orrs	r2, r1
 8014812:	651a      	str	r2, [r3, #80]	@ 0x50
 8014814:	4b5e      	ldr	r3, [pc, #376]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014818:	4b5d      	ldr	r3, [pc, #372]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801481a:	2180      	movs	r1, #128	@ 0x80
 801481c:	0049      	lsls	r1, r1, #1
 801481e:	430a      	orrs	r2, r1
 8014820:	651a      	str	r2, [r3, #80]	@ 0x50
 8014822:	e00b      	b.n	801483c <HAL_RCC_OscConfig+0x534>
 8014824:	4b5a      	ldr	r3, [pc, #360]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014828:	4b59      	ldr	r3, [pc, #356]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801482a:	495b      	ldr	r1, [pc, #364]	@ (8014998 <HAL_RCC_OscConfig+0x690>)
 801482c:	400a      	ands	r2, r1
 801482e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014830:	4b57      	ldr	r3, [pc, #348]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014832:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014834:	4b56      	ldr	r3, [pc, #344]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014836:	495a      	ldr	r1, [pc, #360]	@ (80149a0 <HAL_RCC_OscConfig+0x698>)
 8014838:	400a      	ands	r2, r1
 801483a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d015      	beq.n	8014870 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014844:	f7f9 fc5c 	bl	800e100 <HAL_GetTick>
 8014848:	0003      	movs	r3, r0
 801484a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801484c:	e009      	b.n	8014862 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801484e:	f7f9 fc57 	bl	800e100 <HAL_GetTick>
 8014852:	0002      	movs	r2, r0
 8014854:	697b      	ldr	r3, [r7, #20]
 8014856:	1ad3      	subs	r3, r2, r3
 8014858:	4a52      	ldr	r2, [pc, #328]	@ (80149a4 <HAL_RCC_OscConfig+0x69c>)
 801485a:	4293      	cmp	r3, r2
 801485c:	d901      	bls.n	8014862 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801485e:	2303      	movs	r3, #3
 8014860:	e11b      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014862:	4b4b      	ldr	r3, [pc, #300]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014866:	2380      	movs	r3, #128	@ 0x80
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	4013      	ands	r3, r2
 801486c:	d0ef      	beq.n	801484e <HAL_RCC_OscConfig+0x546>
 801486e:	e014      	b.n	801489a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014870:	f7f9 fc46 	bl	800e100 <HAL_GetTick>
 8014874:	0003      	movs	r3, r0
 8014876:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014878:	e009      	b.n	801488e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801487a:	f7f9 fc41 	bl	800e100 <HAL_GetTick>
 801487e:	0002      	movs	r2, r0
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	1ad3      	subs	r3, r2, r3
 8014884:	4a47      	ldr	r2, [pc, #284]	@ (80149a4 <HAL_RCC_OscConfig+0x69c>)
 8014886:	4293      	cmp	r3, r2
 8014888:	d901      	bls.n	801488e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801488a:	2303      	movs	r3, #3
 801488c:	e105      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801488e:	4b40      	ldr	r3, [pc, #256]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014892:	2380      	movs	r3, #128	@ 0x80
 8014894:	009b      	lsls	r3, r3, #2
 8014896:	4013      	ands	r3, r2
 8014898:	d1ef      	bne.n	801487a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801489a:	2323      	movs	r3, #35	@ 0x23
 801489c:	18fb      	adds	r3, r7, r3
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d105      	bne.n	80148b0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80148a4:	4b3a      	ldr	r3, [pc, #232]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148a8:	4b39      	ldr	r3, [pc, #228]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148aa:	493f      	ldr	r1, [pc, #252]	@ (80149a8 <HAL_RCC_OscConfig+0x6a0>)
 80148ac:	400a      	ands	r2, r1
 80148ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2220      	movs	r2, #32
 80148b6:	4013      	ands	r3, r2
 80148b8:	d049      	beq.n	801494e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d026      	beq.n	8014910 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80148c2:	4b33      	ldr	r3, [pc, #204]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148c4:	689a      	ldr	r2, [r3, #8]
 80148c6:	4b32      	ldr	r3, [pc, #200]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148c8:	2101      	movs	r1, #1
 80148ca:	430a      	orrs	r2, r1
 80148cc:	609a      	str	r2, [r3, #8]
 80148ce:	4b30      	ldr	r3, [pc, #192]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80148d2:	4b2f      	ldr	r3, [pc, #188]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 80148d4:	2101      	movs	r1, #1
 80148d6:	430a      	orrs	r2, r1
 80148d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80148da:	4b34      	ldr	r3, [pc, #208]	@ (80149ac <HAL_RCC_OscConfig+0x6a4>)
 80148dc:	6a1a      	ldr	r2, [r3, #32]
 80148de:	4b33      	ldr	r3, [pc, #204]	@ (80149ac <HAL_RCC_OscConfig+0x6a4>)
 80148e0:	2180      	movs	r1, #128	@ 0x80
 80148e2:	0189      	lsls	r1, r1, #6
 80148e4:	430a      	orrs	r2, r1
 80148e6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148e8:	f7f9 fc0a 	bl	800e100 <HAL_GetTick>
 80148ec:	0003      	movs	r3, r0
 80148ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80148f0:	e008      	b.n	8014904 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148f2:	f7f9 fc05 	bl	800e100 <HAL_GetTick>
 80148f6:	0002      	movs	r2, r0
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	1ad3      	subs	r3, r2, r3
 80148fc:	2b02      	cmp	r3, #2
 80148fe:	d901      	bls.n	8014904 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8014900:	2303      	movs	r3, #3
 8014902:	e0ca      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014904:	4b22      	ldr	r3, [pc, #136]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	2202      	movs	r2, #2
 801490a:	4013      	ands	r3, r2
 801490c:	d0f1      	beq.n	80148f2 <HAL_RCC_OscConfig+0x5ea>
 801490e:	e01e      	b.n	801494e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8014910:	4b1f      	ldr	r3, [pc, #124]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014912:	689a      	ldr	r2, [r3, #8]
 8014914:	4b1e      	ldr	r3, [pc, #120]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014916:	2101      	movs	r1, #1
 8014918:	438a      	bics	r2, r1
 801491a:	609a      	str	r2, [r3, #8]
 801491c:	4b23      	ldr	r3, [pc, #140]	@ (80149ac <HAL_RCC_OscConfig+0x6a4>)
 801491e:	6a1a      	ldr	r2, [r3, #32]
 8014920:	4b22      	ldr	r3, [pc, #136]	@ (80149ac <HAL_RCC_OscConfig+0x6a4>)
 8014922:	4923      	ldr	r1, [pc, #140]	@ (80149b0 <HAL_RCC_OscConfig+0x6a8>)
 8014924:	400a      	ands	r2, r1
 8014926:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014928:	f7f9 fbea 	bl	800e100 <HAL_GetTick>
 801492c:	0003      	movs	r3, r0
 801492e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014930:	e008      	b.n	8014944 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014932:	f7f9 fbe5 	bl	800e100 <HAL_GetTick>
 8014936:	0002      	movs	r2, r0
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	1ad3      	subs	r3, r2, r3
 801493c:	2b02      	cmp	r3, #2
 801493e:	d901      	bls.n	8014944 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8014940:	2303      	movs	r3, #3
 8014942:	e0aa      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014944:	4b12      	ldr	r3, [pc, #72]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 8014946:	689b      	ldr	r3, [r3, #8]
 8014948:	2202      	movs	r2, #2
 801494a:	4013      	ands	r3, r2
 801494c:	d1f1      	bne.n	8014932 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014952:	2b00      	cmp	r3, #0
 8014954:	d100      	bne.n	8014958 <HAL_RCC_OscConfig+0x650>
 8014956:	e09f      	b.n	8014a98 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2b0c      	cmp	r3, #12
 801495c:	d100      	bne.n	8014960 <HAL_RCC_OscConfig+0x658>
 801495e:	e078      	b.n	8014a52 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014964:	2b02      	cmp	r3, #2
 8014966:	d159      	bne.n	8014a1c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014968:	4b09      	ldr	r3, [pc, #36]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801496a:	681a      	ldr	r2, [r3, #0]
 801496c:	4b08      	ldr	r3, [pc, #32]	@ (8014990 <HAL_RCC_OscConfig+0x688>)
 801496e:	4911      	ldr	r1, [pc, #68]	@ (80149b4 <HAL_RCC_OscConfig+0x6ac>)
 8014970:	400a      	ands	r2, r1
 8014972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014974:	f7f9 fbc4 	bl	800e100 <HAL_GetTick>
 8014978:	0003      	movs	r3, r0
 801497a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801497c:	e01c      	b.n	80149b8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801497e:	f7f9 fbbf 	bl	800e100 <HAL_GetTick>
 8014982:	0002      	movs	r2, r0
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	1ad3      	subs	r3, r2, r3
 8014988:	2b02      	cmp	r3, #2
 801498a:	d915      	bls.n	80149b8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801498c:	2303      	movs	r3, #3
 801498e:	e084      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
 8014990:	40021000 	.word	0x40021000
 8014994:	ffff1fff 	.word	0xffff1fff
 8014998:	fffffeff 	.word	0xfffffeff
 801499c:	40007000 	.word	0x40007000
 80149a0:	fffffbff 	.word	0xfffffbff
 80149a4:	00001388 	.word	0x00001388
 80149a8:	efffffff 	.word	0xefffffff
 80149ac:	40010000 	.word	0x40010000
 80149b0:	ffffdfff 	.word	0xffffdfff
 80149b4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80149b8:	4b3a      	ldr	r3, [pc, #232]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	2380      	movs	r3, #128	@ 0x80
 80149be:	049b      	lsls	r3, r3, #18
 80149c0:	4013      	ands	r3, r2
 80149c2:	d1dc      	bne.n	801497e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80149c4:	4b37      	ldr	r3, [pc, #220]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	4a37      	ldr	r2, [pc, #220]	@ (8014aa8 <HAL_RCC_OscConfig+0x7a0>)
 80149ca:	4013      	ands	r3, r2
 80149cc:	0019      	movs	r1, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149d6:	431a      	orrs	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80149dc:	431a      	orrs	r2, r3
 80149de:	4b31      	ldr	r3, [pc, #196]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 80149e0:	430a      	orrs	r2, r1
 80149e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80149e4:	4b2f      	ldr	r3, [pc, #188]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	4b2e      	ldr	r3, [pc, #184]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 80149ea:	2180      	movs	r1, #128	@ 0x80
 80149ec:	0449      	lsls	r1, r1, #17
 80149ee:	430a      	orrs	r2, r1
 80149f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149f2:	f7f9 fb85 	bl	800e100 <HAL_GetTick>
 80149f6:	0003      	movs	r3, r0
 80149f8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80149fa:	e008      	b.n	8014a0e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80149fc:	f7f9 fb80 	bl	800e100 <HAL_GetTick>
 8014a00:	0002      	movs	r2, r0
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	1ad3      	subs	r3, r2, r3
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	d901      	bls.n	8014a0e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	e045      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014a0e:	4b25      	ldr	r3, [pc, #148]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 8014a10:	681a      	ldr	r2, [r3, #0]
 8014a12:	2380      	movs	r3, #128	@ 0x80
 8014a14:	049b      	lsls	r3, r3, #18
 8014a16:	4013      	ands	r3, r2
 8014a18:	d0f0      	beq.n	80149fc <HAL_RCC_OscConfig+0x6f4>
 8014a1a:	e03d      	b.n	8014a98 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014a1c:	4b21      	ldr	r3, [pc, #132]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	4b20      	ldr	r3, [pc, #128]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 8014a22:	4922      	ldr	r1, [pc, #136]	@ (8014aac <HAL_RCC_OscConfig+0x7a4>)
 8014a24:	400a      	ands	r2, r1
 8014a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014a28:	f7f9 fb6a 	bl	800e100 <HAL_GetTick>
 8014a2c:	0003      	movs	r3, r0
 8014a2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014a30:	e008      	b.n	8014a44 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014a32:	f7f9 fb65 	bl	800e100 <HAL_GetTick>
 8014a36:	0002      	movs	r2, r0
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	1ad3      	subs	r3, r2, r3
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d901      	bls.n	8014a44 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8014a40:	2303      	movs	r3, #3
 8014a42:	e02a      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014a44:	4b17      	ldr	r3, [pc, #92]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	2380      	movs	r3, #128	@ 0x80
 8014a4a:	049b      	lsls	r3, r3, #18
 8014a4c:	4013      	ands	r3, r2
 8014a4e:	d1f0      	bne.n	8014a32 <HAL_RCC_OscConfig+0x72a>
 8014a50:	e022      	b.n	8014a98 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a56:	2b01      	cmp	r3, #1
 8014a58:	d101      	bne.n	8014a5e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	e01d      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014a5e:	4b11      	ldr	r3, [pc, #68]	@ (8014aa4 <HAL_RCC_OscConfig+0x79c>)
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a64:	69ba      	ldr	r2, [r7, #24]
 8014a66:	2380      	movs	r3, #128	@ 0x80
 8014a68:	025b      	lsls	r3, r3, #9
 8014a6a:	401a      	ands	r2, r3
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d10f      	bne.n	8014a94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014a74:	69ba      	ldr	r2, [r7, #24]
 8014a76:	23f0      	movs	r3, #240	@ 0xf0
 8014a78:	039b      	lsls	r3, r3, #14
 8014a7a:	401a      	ands	r2, r3
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d107      	bne.n	8014a94 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014a84:	69ba      	ldr	r2, [r7, #24]
 8014a86:	23c0      	movs	r3, #192	@ 0xc0
 8014a88:	041b      	lsls	r3, r3, #16
 8014a8a:	401a      	ands	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014a90:	429a      	cmp	r2, r3
 8014a92:	d001      	beq.n	8014a98 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014a94:	2301      	movs	r3, #1
 8014a96:	e000      	b.n	8014a9a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014a98:	2300      	movs	r3, #0
}
 8014a9a:	0018      	movs	r0, r3
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	b00a      	add	sp, #40	@ 0x28
 8014aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8014aa2:	46c0      	nop			@ (mov r8, r8)
 8014aa4:	40021000 	.word	0x40021000
 8014aa8:	ff02ffff 	.word	0xff02ffff
 8014aac:	feffffff 	.word	0xfeffffff

08014ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014ab0:	b5b0      	push	{r4, r5, r7, lr}
 8014ab2:	b084      	sub	sp, #16
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
 8014ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d101      	bne.n	8014ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014ac0:	2301      	movs	r3, #1
 8014ac2:	e128      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014ac4:	4b96      	ldr	r3, [pc, #600]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	2201      	movs	r2, #1
 8014aca:	4013      	ands	r3, r2
 8014acc:	683a      	ldr	r2, [r7, #0]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d91e      	bls.n	8014b10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014ad2:	4b93      	ldr	r3, [pc, #588]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2201      	movs	r2, #1
 8014ad8:	4393      	bics	r3, r2
 8014ada:	0019      	movs	r1, r3
 8014adc:	4b90      	ldr	r3, [pc, #576]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014ade:	683a      	ldr	r2, [r7, #0]
 8014ae0:	430a      	orrs	r2, r1
 8014ae2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014ae4:	f7f9 fb0c 	bl	800e100 <HAL_GetTick>
 8014ae8:	0003      	movs	r3, r0
 8014aea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014aec:	e009      	b.n	8014b02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014aee:	f7f9 fb07 	bl	800e100 <HAL_GetTick>
 8014af2:	0002      	movs	r2, r0
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	1ad3      	subs	r3, r2, r3
 8014af8:	4a8a      	ldr	r2, [pc, #552]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014afa:	4293      	cmp	r3, r2
 8014afc:	d901      	bls.n	8014b02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014afe:	2303      	movs	r3, #3
 8014b00:	e109      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b02:	4b87      	ldr	r3, [pc, #540]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2201      	movs	r2, #1
 8014b08:	4013      	ands	r3, r2
 8014b0a:	683a      	ldr	r2, [r7, #0]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d1ee      	bne.n	8014aee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2202      	movs	r2, #2
 8014b16:	4013      	ands	r3, r2
 8014b18:	d009      	beq.n	8014b2e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014b1a:	4b83      	ldr	r3, [pc, #524]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	22f0      	movs	r2, #240	@ 0xf0
 8014b20:	4393      	bics	r3, r2
 8014b22:	0019      	movs	r1, r3
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	689a      	ldr	r2, [r3, #8]
 8014b28:	4b7f      	ldr	r3, [pc, #508]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b2a:	430a      	orrs	r2, r1
 8014b2c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	2201      	movs	r2, #1
 8014b34:	4013      	ands	r3, r2
 8014b36:	d100      	bne.n	8014b3a <HAL_RCC_ClockConfig+0x8a>
 8014b38:	e089      	b.n	8014c4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d107      	bne.n	8014b52 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014b42:	4b79      	ldr	r3, [pc, #484]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b44:	681a      	ldr	r2, [r3, #0]
 8014b46:	2380      	movs	r3, #128	@ 0x80
 8014b48:	029b      	lsls	r3, r3, #10
 8014b4a:	4013      	ands	r3, r2
 8014b4c:	d120      	bne.n	8014b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	e0e1      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	2b03      	cmp	r3, #3
 8014b58:	d107      	bne.n	8014b6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014b5a:	4b73      	ldr	r3, [pc, #460]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	2380      	movs	r3, #128	@ 0x80
 8014b60:	049b      	lsls	r3, r3, #18
 8014b62:	4013      	ands	r3, r2
 8014b64:	d114      	bne.n	8014b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b66:	2301      	movs	r3, #1
 8014b68:	e0d5      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	2b01      	cmp	r3, #1
 8014b70:	d106      	bne.n	8014b80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014b72:	4b6d      	ldr	r3, [pc, #436]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2204      	movs	r2, #4
 8014b78:	4013      	ands	r3, r2
 8014b7a:	d109      	bne.n	8014b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	e0ca      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014b80:	4b69      	ldr	r3, [pc, #420]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	2380      	movs	r3, #128	@ 0x80
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	4013      	ands	r3, r2
 8014b8a:	d101      	bne.n	8014b90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	e0c2      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014b90:	4b65      	ldr	r3, [pc, #404]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014b92:	68db      	ldr	r3, [r3, #12]
 8014b94:	2203      	movs	r2, #3
 8014b96:	4393      	bics	r3, r2
 8014b98:	0019      	movs	r1, r3
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	685a      	ldr	r2, [r3, #4]
 8014b9e:	4b62      	ldr	r3, [pc, #392]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014ba0:	430a      	orrs	r2, r1
 8014ba2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014ba4:	f7f9 faac 	bl	800e100 <HAL_GetTick>
 8014ba8:	0003      	movs	r3, r0
 8014baa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	685b      	ldr	r3, [r3, #4]
 8014bb0:	2b02      	cmp	r3, #2
 8014bb2:	d111      	bne.n	8014bd8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014bb4:	e009      	b.n	8014bca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bb6:	f7f9 faa3 	bl	800e100 <HAL_GetTick>
 8014bba:	0002      	movs	r2, r0
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	4a58      	ldr	r2, [pc, #352]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014bc2:	4293      	cmp	r3, r2
 8014bc4:	d901      	bls.n	8014bca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014bc6:	2303      	movs	r3, #3
 8014bc8:	e0a5      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014bca:	4b57      	ldr	r3, [pc, #348]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	220c      	movs	r2, #12
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	2b08      	cmp	r3, #8
 8014bd4:	d1ef      	bne.n	8014bb6 <HAL_RCC_ClockConfig+0x106>
 8014bd6:	e03a      	b.n	8014c4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	2b03      	cmp	r3, #3
 8014bde:	d111      	bne.n	8014c04 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014be0:	e009      	b.n	8014bf6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014be2:	f7f9 fa8d 	bl	800e100 <HAL_GetTick>
 8014be6:	0002      	movs	r2, r0
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	1ad3      	subs	r3, r2, r3
 8014bec:	4a4d      	ldr	r2, [pc, #308]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d901      	bls.n	8014bf6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014bf2:	2303      	movs	r3, #3
 8014bf4:	e08f      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014bf8:	68db      	ldr	r3, [r3, #12]
 8014bfa:	220c      	movs	r2, #12
 8014bfc:	4013      	ands	r3, r2
 8014bfe:	2b0c      	cmp	r3, #12
 8014c00:	d1ef      	bne.n	8014be2 <HAL_RCC_ClockConfig+0x132>
 8014c02:	e024      	b.n	8014c4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	685b      	ldr	r3, [r3, #4]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d11b      	bne.n	8014c44 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014c0c:	e009      	b.n	8014c22 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c0e:	f7f9 fa77 	bl	800e100 <HAL_GetTick>
 8014c12:	0002      	movs	r2, r0
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	4a42      	ldr	r2, [pc, #264]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d901      	bls.n	8014c22 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	e079      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014c22:	4b41      	ldr	r3, [pc, #260]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014c24:	68db      	ldr	r3, [r3, #12]
 8014c26:	220c      	movs	r2, #12
 8014c28:	4013      	ands	r3, r2
 8014c2a:	2b04      	cmp	r3, #4
 8014c2c:	d1ef      	bne.n	8014c0e <HAL_RCC_ClockConfig+0x15e>
 8014c2e:	e00e      	b.n	8014c4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c30:	f7f9 fa66 	bl	800e100 <HAL_GetTick>
 8014c34:	0002      	movs	r2, r0
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014c3c:	4293      	cmp	r3, r2
 8014c3e:	d901      	bls.n	8014c44 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014c40:	2303      	movs	r3, #3
 8014c42:	e068      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014c44:	4b38      	ldr	r3, [pc, #224]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	220c      	movs	r2, #12
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	d1f0      	bne.n	8014c30 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014c4e:	4b34      	ldr	r3, [pc, #208]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	2201      	movs	r2, #1
 8014c54:	4013      	ands	r3, r2
 8014c56:	683a      	ldr	r2, [r7, #0]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d21e      	bcs.n	8014c9a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014c5c:	4b30      	ldr	r3, [pc, #192]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	2201      	movs	r2, #1
 8014c62:	4393      	bics	r3, r2
 8014c64:	0019      	movs	r1, r3
 8014c66:	4b2e      	ldr	r3, [pc, #184]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014c68:	683a      	ldr	r2, [r7, #0]
 8014c6a:	430a      	orrs	r2, r1
 8014c6c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014c6e:	f7f9 fa47 	bl	800e100 <HAL_GetTick>
 8014c72:	0003      	movs	r3, r0
 8014c74:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c76:	e009      	b.n	8014c8c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c78:	f7f9 fa42 	bl	800e100 <HAL_GetTick>
 8014c7c:	0002      	movs	r2, r0
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	4a28      	ldr	r2, [pc, #160]	@ (8014d24 <HAL_RCC_ClockConfig+0x274>)
 8014c84:	4293      	cmp	r3, r2
 8014c86:	d901      	bls.n	8014c8c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014c88:	2303      	movs	r3, #3
 8014c8a:	e044      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c8c:	4b24      	ldr	r3, [pc, #144]	@ (8014d20 <HAL_RCC_ClockConfig+0x270>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2201      	movs	r2, #1
 8014c92:	4013      	ands	r3, r2
 8014c94:	683a      	ldr	r2, [r7, #0]
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d1ee      	bne.n	8014c78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2204      	movs	r2, #4
 8014ca0:	4013      	ands	r3, r2
 8014ca2:	d009      	beq.n	8014cb8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014ca4:	4b20      	ldr	r3, [pc, #128]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	4a20      	ldr	r2, [pc, #128]	@ (8014d2c <HAL_RCC_ClockConfig+0x27c>)
 8014caa:	4013      	ands	r3, r2
 8014cac:	0019      	movs	r1, r3
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	68da      	ldr	r2, [r3, #12]
 8014cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014cb4:	430a      	orrs	r2, r1
 8014cb6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	2208      	movs	r2, #8
 8014cbe:	4013      	ands	r3, r2
 8014cc0:	d00a      	beq.n	8014cd8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014cc2:	4b19      	ldr	r3, [pc, #100]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8014d30 <HAL_RCC_ClockConfig+0x280>)
 8014cc8:	4013      	ands	r3, r2
 8014cca:	0019      	movs	r1, r3
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	691b      	ldr	r3, [r3, #16]
 8014cd0:	00da      	lsls	r2, r3, #3
 8014cd2:	4b15      	ldr	r3, [pc, #84]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014cd4:	430a      	orrs	r2, r1
 8014cd6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014cd8:	f000 f832 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 8014cdc:	0001      	movs	r1, r0
 8014cde:	4b12      	ldr	r3, [pc, #72]	@ (8014d28 <HAL_RCC_ClockConfig+0x278>)
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	091b      	lsrs	r3, r3, #4
 8014ce4:	220f      	movs	r2, #15
 8014ce6:	4013      	ands	r3, r2
 8014ce8:	4a12      	ldr	r2, [pc, #72]	@ (8014d34 <HAL_RCC_ClockConfig+0x284>)
 8014cea:	5cd3      	ldrb	r3, [r2, r3]
 8014cec:	000a      	movs	r2, r1
 8014cee:	40da      	lsrs	r2, r3
 8014cf0:	4b11      	ldr	r3, [pc, #68]	@ (8014d38 <HAL_RCC_ClockConfig+0x288>)
 8014cf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014cf4:	4b11      	ldr	r3, [pc, #68]	@ (8014d3c <HAL_RCC_ClockConfig+0x28c>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	250b      	movs	r5, #11
 8014cfa:	197c      	adds	r4, r7, r5
 8014cfc:	0018      	movs	r0, r3
 8014cfe:	f7f9 f9b9 	bl	800e074 <HAL_InitTick>
 8014d02:	0003      	movs	r3, r0
 8014d04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014d06:	197b      	adds	r3, r7, r5
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d002      	beq.n	8014d14 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014d0e:	197b      	adds	r3, r7, r5
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	e000      	b.n	8014d16 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	0018      	movs	r0, r3
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	b004      	add	sp, #16
 8014d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d1e:	46c0      	nop			@ (mov r8, r8)
 8014d20:	40022000 	.word	0x40022000
 8014d24:	00001388 	.word	0x00001388
 8014d28:	40021000 	.word	0x40021000
 8014d2c:	fffff8ff 	.word	0xfffff8ff
 8014d30:	ffffc7ff 	.word	0xffffc7ff
 8014d34:	080245e4 	.word	0x080245e4
 8014d38:	200000c8 	.word	0x200000c8
 8014d3c:	200000d8 	.word	0x200000d8

08014d40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014d40:	b5b0      	push	{r4, r5, r7, lr}
 8014d42:	b08e      	sub	sp, #56	@ 0x38
 8014d44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8014d46:	4b4c      	ldr	r3, [pc, #304]	@ (8014e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014d4e:	230c      	movs	r3, #12
 8014d50:	4013      	ands	r3, r2
 8014d52:	2b0c      	cmp	r3, #12
 8014d54:	d014      	beq.n	8014d80 <HAL_RCC_GetSysClockFreq+0x40>
 8014d56:	d900      	bls.n	8014d5a <HAL_RCC_GetSysClockFreq+0x1a>
 8014d58:	e07b      	b.n	8014e52 <HAL_RCC_GetSysClockFreq+0x112>
 8014d5a:	2b04      	cmp	r3, #4
 8014d5c:	d002      	beq.n	8014d64 <HAL_RCC_GetSysClockFreq+0x24>
 8014d5e:	2b08      	cmp	r3, #8
 8014d60:	d00b      	beq.n	8014d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8014d62:	e076      	b.n	8014e52 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014d64:	4b44      	ldr	r3, [pc, #272]	@ (8014e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2210      	movs	r2, #16
 8014d6a:	4013      	ands	r3, r2
 8014d6c:	d002      	beq.n	8014d74 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014d6e:	4b43      	ldr	r3, [pc, #268]	@ (8014e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8014d70:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014d72:	e07c      	b.n	8014e6e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014d74:	4b42      	ldr	r3, [pc, #264]	@ (8014e80 <HAL_RCC_GetSysClockFreq+0x140>)
 8014d76:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014d78:	e079      	b.n	8014e6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014d7a:	4b42      	ldr	r3, [pc, #264]	@ (8014e84 <HAL_RCC_GetSysClockFreq+0x144>)
 8014d7c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014d7e:	e076      	b.n	8014e6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d82:	0c9a      	lsrs	r2, r3, #18
 8014d84:	230f      	movs	r3, #15
 8014d86:	401a      	ands	r2, r3
 8014d88:	4b3f      	ldr	r3, [pc, #252]	@ (8014e88 <HAL_RCC_GetSysClockFreq+0x148>)
 8014d8a:	5c9b      	ldrb	r3, [r3, r2]
 8014d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d90:	0d9a      	lsrs	r2, r3, #22
 8014d92:	2303      	movs	r3, #3
 8014d94:	4013      	ands	r3, r2
 8014d96:	3301      	adds	r3, #1
 8014d98:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014d9a:	4b37      	ldr	r3, [pc, #220]	@ (8014e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d9c:	68da      	ldr	r2, [r3, #12]
 8014d9e:	2380      	movs	r3, #128	@ 0x80
 8014da0:	025b      	lsls	r3, r3, #9
 8014da2:	4013      	ands	r3, r2
 8014da4:	d01a      	beq.n	8014ddc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014da8:	61bb      	str	r3, [r7, #24]
 8014daa:	2300      	movs	r3, #0
 8014dac:	61fb      	str	r3, [r7, #28]
 8014dae:	4a35      	ldr	r2, [pc, #212]	@ (8014e84 <HAL_RCC_GetSysClockFreq+0x144>)
 8014db0:	2300      	movs	r3, #0
 8014db2:	69b8      	ldr	r0, [r7, #24]
 8014db4:	69f9      	ldr	r1, [r7, #28]
 8014db6:	f7eb fc03 	bl	80005c0 <__aeabi_lmul>
 8014dba:	0002      	movs	r2, r0
 8014dbc:	000b      	movs	r3, r1
 8014dbe:	0010      	movs	r0, r2
 8014dc0:	0019      	movs	r1, r3
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc4:	613b      	str	r3, [r7, #16]
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	617b      	str	r3, [r7, #20]
 8014dca:	693a      	ldr	r2, [r7, #16]
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	f7eb fbd7 	bl	8000580 <__aeabi_uldivmod>
 8014dd2:	0002      	movs	r2, r0
 8014dd4:	000b      	movs	r3, r1
 8014dd6:	0013      	movs	r3, r2
 8014dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8014dda:	e037      	b.n	8014e4c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014ddc:	4b26      	ldr	r3, [pc, #152]	@ (8014e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2210      	movs	r2, #16
 8014de2:	4013      	ands	r3, r2
 8014de4:	d01a      	beq.n	8014e1c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8014de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014de8:	60bb      	str	r3, [r7, #8]
 8014dea:	2300      	movs	r3, #0
 8014dec:	60fb      	str	r3, [r7, #12]
 8014dee:	4a23      	ldr	r2, [pc, #140]	@ (8014e7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8014df0:	2300      	movs	r3, #0
 8014df2:	68b8      	ldr	r0, [r7, #8]
 8014df4:	68f9      	ldr	r1, [r7, #12]
 8014df6:	f7eb fbe3 	bl	80005c0 <__aeabi_lmul>
 8014dfa:	0002      	movs	r2, r0
 8014dfc:	000b      	movs	r3, r1
 8014dfe:	0010      	movs	r0, r2
 8014e00:	0019      	movs	r1, r3
 8014e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e04:	603b      	str	r3, [r7, #0]
 8014e06:	2300      	movs	r3, #0
 8014e08:	607b      	str	r3, [r7, #4]
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f7eb fbb7 	bl	8000580 <__aeabi_uldivmod>
 8014e12:	0002      	movs	r2, r0
 8014e14:	000b      	movs	r3, r1
 8014e16:	0013      	movs	r3, r2
 8014e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8014e1a:	e017      	b.n	8014e4c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e1e:	0018      	movs	r0, r3
 8014e20:	2300      	movs	r3, #0
 8014e22:	0019      	movs	r1, r3
 8014e24:	4a16      	ldr	r2, [pc, #88]	@ (8014e80 <HAL_RCC_GetSysClockFreq+0x140>)
 8014e26:	2300      	movs	r3, #0
 8014e28:	f7eb fbca 	bl	80005c0 <__aeabi_lmul>
 8014e2c:	0002      	movs	r2, r0
 8014e2e:	000b      	movs	r3, r1
 8014e30:	0010      	movs	r0, r2
 8014e32:	0019      	movs	r1, r3
 8014e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e36:	001c      	movs	r4, r3
 8014e38:	2300      	movs	r3, #0
 8014e3a:	001d      	movs	r5, r3
 8014e3c:	0022      	movs	r2, r4
 8014e3e:	002b      	movs	r3, r5
 8014e40:	f7eb fb9e 	bl	8000580 <__aeabi_uldivmod>
 8014e44:	0002      	movs	r2, r0
 8014e46:	000b      	movs	r3, r1
 8014e48:	0013      	movs	r3, r2
 8014e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8014e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014e50:	e00d      	b.n	8014e6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8014e52:	4b09      	ldr	r3, [pc, #36]	@ (8014e78 <HAL_RCC_GetSysClockFreq+0x138>)
 8014e54:	685b      	ldr	r3, [r3, #4]
 8014e56:	0b5b      	lsrs	r3, r3, #13
 8014e58:	2207      	movs	r2, #7
 8014e5a:	4013      	ands	r3, r2
 8014e5c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8014e5e:	6a3b      	ldr	r3, [r7, #32]
 8014e60:	3301      	adds	r3, #1
 8014e62:	2280      	movs	r2, #128	@ 0x80
 8014e64:	0212      	lsls	r2, r2, #8
 8014e66:	409a      	lsls	r2, r3
 8014e68:	0013      	movs	r3, r2
 8014e6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014e6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8014e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8014e70:	0018      	movs	r0, r3
 8014e72:	46bd      	mov	sp, r7
 8014e74:	b00e      	add	sp, #56	@ 0x38
 8014e76:	bdb0      	pop	{r4, r5, r7, pc}
 8014e78:	40021000 	.word	0x40021000
 8014e7c:	003d0900 	.word	0x003d0900
 8014e80:	00f42400 	.word	0x00f42400
 8014e84:	007a1200 	.word	0x007a1200
 8014e88:	080245fc 	.word	0x080245fc

08014e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014e90:	4b02      	ldr	r3, [pc, #8]	@ (8014e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8014e92:	681b      	ldr	r3, [r3, #0]
}
 8014e94:	0018      	movs	r0, r3
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	46c0      	nop			@ (mov r8, r8)
 8014e9c:	200000c8 	.word	0x200000c8

08014ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014ea4:	f7ff fff2 	bl	8014e8c <HAL_RCC_GetHCLKFreq>
 8014ea8:	0001      	movs	r1, r0
 8014eaa:	4b06      	ldr	r3, [pc, #24]	@ (8014ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	0a1b      	lsrs	r3, r3, #8
 8014eb0:	2207      	movs	r2, #7
 8014eb2:	4013      	ands	r3, r2
 8014eb4:	4a04      	ldr	r2, [pc, #16]	@ (8014ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014eb6:	5cd3      	ldrb	r3, [r2, r3]
 8014eb8:	40d9      	lsrs	r1, r3
 8014eba:	000b      	movs	r3, r1
}
 8014ebc:	0018      	movs	r0, r3
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	46c0      	nop			@ (mov r8, r8)
 8014ec4:	40021000 	.word	0x40021000
 8014ec8:	080245f4 	.word	0x080245f4

08014ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014ed0:	f7ff ffdc 	bl	8014e8c <HAL_RCC_GetHCLKFreq>
 8014ed4:	0001      	movs	r1, r0
 8014ed6:	4b06      	ldr	r3, [pc, #24]	@ (8014ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014ed8:	68db      	ldr	r3, [r3, #12]
 8014eda:	0adb      	lsrs	r3, r3, #11
 8014edc:	2207      	movs	r2, #7
 8014ede:	4013      	ands	r3, r2
 8014ee0:	4a04      	ldr	r2, [pc, #16]	@ (8014ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014ee2:	5cd3      	ldrb	r3, [r2, r3]
 8014ee4:	40d9      	lsrs	r1, r3
 8014ee6:	000b      	movs	r3, r1
}
 8014ee8:	0018      	movs	r0, r3
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	46c0      	nop			@ (mov r8, r8)
 8014ef0:	40021000 	.word	0x40021000
 8014ef4:	080245f4 	.word	0x080245f4

08014ef8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b086      	sub	sp, #24
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8014f00:	2017      	movs	r0, #23
 8014f02:	183b      	adds	r3, r7, r0
 8014f04:	2200      	movs	r2, #0
 8014f06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2220      	movs	r2, #32
 8014f0e:	4013      	ands	r3, r2
 8014f10:	d100      	bne.n	8014f14 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8014f12:	e0c7      	b.n	80150a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014f14:	4b9b      	ldr	r3, [pc, #620]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014f18:	2380      	movs	r3, #128	@ 0x80
 8014f1a:	055b      	lsls	r3, r3, #21
 8014f1c:	4013      	ands	r3, r2
 8014f1e:	d109      	bne.n	8014f34 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014f20:	4b98      	ldr	r3, [pc, #608]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014f24:	4b97      	ldr	r3, [pc, #604]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f26:	2180      	movs	r1, #128	@ 0x80
 8014f28:	0549      	lsls	r1, r1, #21
 8014f2a:	430a      	orrs	r2, r1
 8014f2c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014f2e:	183b      	adds	r3, r7, r0
 8014f30:	2201      	movs	r2, #1
 8014f32:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014f34:	4b94      	ldr	r3, [pc, #592]	@ (8015188 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014f36:	681a      	ldr	r2, [r3, #0]
 8014f38:	2380      	movs	r3, #128	@ 0x80
 8014f3a:	005b      	lsls	r3, r3, #1
 8014f3c:	4013      	ands	r3, r2
 8014f3e:	d11a      	bne.n	8014f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014f40:	4b91      	ldr	r3, [pc, #580]	@ (8015188 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014f42:	681a      	ldr	r2, [r3, #0]
 8014f44:	4b90      	ldr	r3, [pc, #576]	@ (8015188 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014f46:	2180      	movs	r1, #128	@ 0x80
 8014f48:	0049      	lsls	r1, r1, #1
 8014f4a:	430a      	orrs	r2, r1
 8014f4c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014f4e:	f7f9 f8d7 	bl	800e100 <HAL_GetTick>
 8014f52:	0003      	movs	r3, r0
 8014f54:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014f56:	e008      	b.n	8014f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014f58:	f7f9 f8d2 	bl	800e100 <HAL_GetTick>
 8014f5c:	0002      	movs	r2, r0
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	1ad3      	subs	r3, r2, r3
 8014f62:	2b64      	cmp	r3, #100	@ 0x64
 8014f64:	d901      	bls.n	8014f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8014f66:	2303      	movs	r3, #3
 8014f68:	e107      	b.n	801517a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014f6a:	4b87      	ldr	r3, [pc, #540]	@ (8015188 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	2380      	movs	r3, #128	@ 0x80
 8014f70:	005b      	lsls	r3, r3, #1
 8014f72:	4013      	ands	r3, r2
 8014f74:	d0f0      	beq.n	8014f58 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8014f76:	4b83      	ldr	r3, [pc, #524]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f78:	681a      	ldr	r2, [r3, #0]
 8014f7a:	23c0      	movs	r3, #192	@ 0xc0
 8014f7c:	039b      	lsls	r3, r3, #14
 8014f7e:	4013      	ands	r3, r2
 8014f80:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	685a      	ldr	r2, [r3, #4]
 8014f86:	23c0      	movs	r3, #192	@ 0xc0
 8014f88:	039b      	lsls	r3, r3, #14
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	68fa      	ldr	r2, [r7, #12]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d013      	beq.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	685a      	ldr	r2, [r3, #4]
 8014f96:	23c0      	movs	r3, #192	@ 0xc0
 8014f98:	029b      	lsls	r3, r3, #10
 8014f9a:	401a      	ands	r2, r3
 8014f9c:	23c0      	movs	r3, #192	@ 0xc0
 8014f9e:	029b      	lsls	r3, r3, #10
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d10a      	bne.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014fa4:	4b77      	ldr	r3, [pc, #476]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	2380      	movs	r3, #128	@ 0x80
 8014faa:	029b      	lsls	r3, r3, #10
 8014fac:	401a      	ands	r2, r3
 8014fae:	2380      	movs	r3, #128	@ 0x80
 8014fb0:	029b      	lsls	r3, r3, #10
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d101      	bne.n	8014fba <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e0df      	b.n	801517a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014fba:	4b72      	ldr	r3, [pc, #456]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014fbe:	23c0      	movs	r3, #192	@ 0xc0
 8014fc0:	029b      	lsls	r3, r3, #10
 8014fc2:	4013      	ands	r3, r2
 8014fc4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d03b      	beq.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685a      	ldr	r2, [r3, #4]
 8014fd0:	23c0      	movs	r3, #192	@ 0xc0
 8014fd2:	029b      	lsls	r3, r3, #10
 8014fd4:	4013      	ands	r3, r2
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d033      	beq.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	2220      	movs	r2, #32
 8014fe2:	4013      	ands	r3, r2
 8014fe4:	d02e      	beq.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014fe6:	4b67      	ldr	r3, [pc, #412]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014fea:	4a68      	ldr	r2, [pc, #416]	@ (801518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014fec:	4013      	ands	r3, r2
 8014fee:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8014ff0:	4b64      	ldr	r3, [pc, #400]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ff2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ff4:	4b63      	ldr	r3, [pc, #396]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ff6:	2180      	movs	r1, #128	@ 0x80
 8014ff8:	0309      	lsls	r1, r1, #12
 8014ffa:	430a      	orrs	r2, r1
 8014ffc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014ffe:	4b61      	ldr	r3, [pc, #388]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015002:	4b60      	ldr	r3, [pc, #384]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015004:	4962      	ldr	r1, [pc, #392]	@ (8015190 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015006:	400a      	ands	r2, r1
 8015008:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801500a:	4b5e      	ldr	r3, [pc, #376]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801500c:	68fa      	ldr	r2, [r7, #12]
 801500e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	2380      	movs	r3, #128	@ 0x80
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	4013      	ands	r3, r2
 8015018:	d014      	beq.n	8015044 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801501a:	f7f9 f871 	bl	800e100 <HAL_GetTick>
 801501e:	0003      	movs	r3, r0
 8015020:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015022:	e009      	b.n	8015038 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015024:	f7f9 f86c 	bl	800e100 <HAL_GetTick>
 8015028:	0002      	movs	r2, r0
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	4a59      	ldr	r2, [pc, #356]	@ (8015194 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015030:	4293      	cmp	r3, r2
 8015032:	d901      	bls.n	8015038 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015034:	2303      	movs	r3, #3
 8015036:	e0a0      	b.n	801517a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015038:	4b52      	ldr	r3, [pc, #328]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801503a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801503c:	2380      	movs	r3, #128	@ 0x80
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	4013      	ands	r3, r2
 8015042:	d0ef      	beq.n	8015024 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2220      	movs	r2, #32
 801504a:	4013      	ands	r3, r2
 801504c:	d01f      	beq.n	801508e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	685a      	ldr	r2, [r3, #4]
 8015052:	23c0      	movs	r3, #192	@ 0xc0
 8015054:	029b      	lsls	r3, r3, #10
 8015056:	401a      	ands	r2, r3
 8015058:	23c0      	movs	r3, #192	@ 0xc0
 801505a:	029b      	lsls	r3, r3, #10
 801505c:	429a      	cmp	r2, r3
 801505e:	d10c      	bne.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015060:	4b48      	ldr	r3, [pc, #288]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4a4c      	ldr	r2, [pc, #304]	@ (8015198 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015066:	4013      	ands	r3, r2
 8015068:	0019      	movs	r1, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	685a      	ldr	r2, [r3, #4]
 801506e:	23c0      	movs	r3, #192	@ 0xc0
 8015070:	039b      	lsls	r3, r3, #14
 8015072:	401a      	ands	r2, r3
 8015074:	4b43      	ldr	r3, [pc, #268]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015076:	430a      	orrs	r2, r1
 8015078:	601a      	str	r2, [r3, #0]
 801507a:	4b42      	ldr	r3, [pc, #264]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801507c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	685a      	ldr	r2, [r3, #4]
 8015082:	23c0      	movs	r3, #192	@ 0xc0
 8015084:	029b      	lsls	r3, r3, #10
 8015086:	401a      	ands	r2, r3
 8015088:	4b3e      	ldr	r3, [pc, #248]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801508a:	430a      	orrs	r2, r1
 801508c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801508e:	2317      	movs	r3, #23
 8015090:	18fb      	adds	r3, r7, r3
 8015092:	781b      	ldrb	r3, [r3, #0]
 8015094:	2b01      	cmp	r3, #1
 8015096:	d105      	bne.n	80150a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015098:	4b3a      	ldr	r3, [pc, #232]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801509a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801509c:	4b39      	ldr	r3, [pc, #228]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801509e:	493f      	ldr	r1, [pc, #252]	@ (801519c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80150a0:	400a      	ands	r2, r1
 80150a2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	2201      	movs	r2, #1
 80150aa:	4013      	ands	r3, r2
 80150ac:	d009      	beq.n	80150c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80150ae:	4b35      	ldr	r3, [pc, #212]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150b2:	2203      	movs	r2, #3
 80150b4:	4393      	bics	r3, r2
 80150b6:	0019      	movs	r1, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	689a      	ldr	r2, [r3, #8]
 80150bc:	4b31      	ldr	r3, [pc, #196]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150be:	430a      	orrs	r2, r1
 80150c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2202      	movs	r2, #2
 80150c8:	4013      	ands	r3, r2
 80150ca:	d009      	beq.n	80150e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80150cc:	4b2d      	ldr	r3, [pc, #180]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150d0:	220c      	movs	r2, #12
 80150d2:	4393      	bics	r3, r2
 80150d4:	0019      	movs	r1, r3
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	68da      	ldr	r2, [r3, #12]
 80150da:	4b2a      	ldr	r3, [pc, #168]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150dc:	430a      	orrs	r2, r1
 80150de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	2204      	movs	r2, #4
 80150e6:	4013      	ands	r3, r2
 80150e8:	d009      	beq.n	80150fe <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80150ea:	4b26      	ldr	r3, [pc, #152]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150ee:	4a2c      	ldr	r2, [pc, #176]	@ (80151a0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80150f0:	4013      	ands	r3, r2
 80150f2:	0019      	movs	r1, r3
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	691a      	ldr	r2, [r3, #16]
 80150f8:	4b22      	ldr	r3, [pc, #136]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150fa:	430a      	orrs	r2, r1
 80150fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	2208      	movs	r2, #8
 8015104:	4013      	ands	r3, r2
 8015106:	d009      	beq.n	801511c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015108:	4b1e      	ldr	r3, [pc, #120]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801510a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801510c:	4a25      	ldr	r2, [pc, #148]	@ (80151a4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801510e:	4013      	ands	r3, r2
 8015110:	0019      	movs	r1, r3
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	695a      	ldr	r2, [r3, #20]
 8015116:	4b1b      	ldr	r3, [pc, #108]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015118:	430a      	orrs	r2, r1
 801511a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	2380      	movs	r3, #128	@ 0x80
 8015122:	005b      	lsls	r3, r3, #1
 8015124:	4013      	ands	r3, r2
 8015126:	d009      	beq.n	801513c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015128:	4b16      	ldr	r3, [pc, #88]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801512a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801512c:	4a17      	ldr	r2, [pc, #92]	@ (801518c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801512e:	4013      	ands	r3, r2
 8015130:	0019      	movs	r1, r3
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	699a      	ldr	r2, [r3, #24]
 8015136:	4b13      	ldr	r3, [pc, #76]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015138:	430a      	orrs	r2, r1
 801513a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2240      	movs	r2, #64	@ 0x40
 8015142:	4013      	ands	r3, r2
 8015144:	d009      	beq.n	801515a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015146:	4b0f      	ldr	r3, [pc, #60]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801514a:	4a17      	ldr	r2, [pc, #92]	@ (80151a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801514c:	4013      	ands	r3, r2
 801514e:	0019      	movs	r1, r3
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6a1a      	ldr	r2, [r3, #32]
 8015154:	4b0b      	ldr	r3, [pc, #44]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015156:	430a      	orrs	r2, r1
 8015158:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2280      	movs	r2, #128	@ 0x80
 8015160:	4013      	ands	r3, r2
 8015162:	d009      	beq.n	8015178 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015164:	4b07      	ldr	r3, [pc, #28]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015168:	4a10      	ldr	r2, [pc, #64]	@ (80151ac <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801516a:	4013      	ands	r3, r2
 801516c:	0019      	movs	r1, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	69da      	ldr	r2, [r3, #28]
 8015172:	4b04      	ldr	r3, [pc, #16]	@ (8015184 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015174:	430a      	orrs	r2, r1
 8015176:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015178:	2300      	movs	r3, #0
}
 801517a:	0018      	movs	r0, r3
 801517c:	46bd      	mov	sp, r7
 801517e:	b006      	add	sp, #24
 8015180:	bd80      	pop	{r7, pc}
 8015182:	46c0      	nop			@ (mov r8, r8)
 8015184:	40021000 	.word	0x40021000
 8015188:	40007000 	.word	0x40007000
 801518c:	fffcffff 	.word	0xfffcffff
 8015190:	fff7ffff 	.word	0xfff7ffff
 8015194:	00001388 	.word	0x00001388
 8015198:	ffcfffff 	.word	0xffcfffff
 801519c:	efffffff 	.word	0xefffffff
 80151a0:	fffff3ff 	.word	0xfffff3ff
 80151a4:	ffffcfff 	.word	0xffffcfff
 80151a8:	fbffffff 	.word	0xfbffffff
 80151ac:	fff3ffff 	.word	0xfff3ffff

080151b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80151b0:	b5b0      	push	{r4, r5, r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80151b8:	230f      	movs	r3, #15
 80151ba:	18fb      	adds	r3, r7, r3
 80151bc:	2201      	movs	r2, #1
 80151be:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d101      	bne.n	80151ca <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80151c6:	2301      	movs	r3, #1
 80151c8:	e088      	b.n	80152dc <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2221      	movs	r2, #33	@ 0x21
 80151ce:	5c9b      	ldrb	r3, [r3, r2]
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d107      	bne.n	80151e6 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2220      	movs	r2, #32
 80151da:	2100      	movs	r1, #0
 80151dc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	0018      	movs	r0, r3
 80151e2:	f7f3 fc45 	bl	8008a70 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2221      	movs	r2, #33	@ 0x21
 80151ea:	2102      	movs	r1, #2
 80151ec:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	2210      	movs	r2, #16
 80151f6:	4013      	ands	r3, r2
 80151f8:	2b10      	cmp	r3, #16
 80151fa:	d05f      	beq.n	80152bc <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	22ca      	movs	r2, #202	@ 0xca
 8015202:	625a      	str	r2, [r3, #36]	@ 0x24
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2253      	movs	r2, #83	@ 0x53
 801520a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801520c:	250f      	movs	r5, #15
 801520e:	197c      	adds	r4, r7, r5
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	0018      	movs	r0, r3
 8015214:	f000 fa7c 	bl	8015710 <RTC_EnterInitMode>
 8015218:	0003      	movs	r3, r0
 801521a:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801521c:	0028      	movs	r0, r5
 801521e:	183b      	adds	r3, r7, r0
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d12c      	bne.n	8015280 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	689a      	ldr	r2, [r3, #8]
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	492c      	ldr	r1, [pc, #176]	@ (80152e4 <HAL_RTC_Init+0x134>)
 8015232:	400a      	ands	r2, r1
 8015234:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	6899      	ldr	r1, [r3, #8]
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	685a      	ldr	r2, [r3, #4]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	691b      	ldr	r3, [r3, #16]
 8015244:	431a      	orrs	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	699b      	ldr	r3, [r3, #24]
 801524a:	431a      	orrs	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	430a      	orrs	r2, r1
 8015252:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	68d2      	ldr	r2, [r2, #12]
 801525c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	6919      	ldr	r1, [r3, #16]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	689b      	ldr	r3, [r3, #8]
 8015268:	041a      	lsls	r2, r3, #16
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	430a      	orrs	r2, r1
 8015270:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015272:	183c      	adds	r4, r7, r0
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	0018      	movs	r0, r3
 8015278:	f000 fa8e 	bl	8015798 <RTC_ExitInitMode>
 801527c:	0003      	movs	r3, r0
 801527e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015280:	230f      	movs	r3, #15
 8015282:	18fb      	adds	r3, r7, r3
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d113      	bne.n	80152b2 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	2103      	movs	r1, #3
 8015296:	438a      	bics	r2, r1
 8015298:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	69da      	ldr	r2, [r3, #28]
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	695b      	ldr	r3, [r3, #20]
 80152a8:	431a      	orrs	r2, r3
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	430a      	orrs	r2, r1
 80152b0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	22ff      	movs	r2, #255	@ 0xff
 80152b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80152ba:	e003      	b.n	80152c4 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80152bc:	230f      	movs	r3, #15
 80152be:	18fb      	adds	r3, r7, r3
 80152c0:	2200      	movs	r2, #0
 80152c2:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80152c4:	230f      	movs	r3, #15
 80152c6:	18fb      	adds	r3, r7, r3
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d103      	bne.n	80152d6 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	2221      	movs	r2, #33	@ 0x21
 80152d2:	2101      	movs	r1, #1
 80152d4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80152d6:	230f      	movs	r3, #15
 80152d8:	18fb      	adds	r3, r7, r3
 80152da:	781b      	ldrb	r3, [r3, #0]
}
 80152dc:	0018      	movs	r0, r3
 80152de:	46bd      	mov	sp, r7
 80152e0:	b004      	add	sp, #16
 80152e2:	bdb0      	pop	{r4, r5, r7, pc}
 80152e4:	ff8fffbf 	.word	0xff8fffbf

080152e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80152e8:	b5b0      	push	{r4, r5, r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80152f4:	2300      	movs	r3, #0
 80152f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2220      	movs	r2, #32
 80152fc:	5c9b      	ldrb	r3, [r3, r2]
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d101      	bne.n	8015306 <HAL_RTC_SetTime+0x1e>
 8015302:	2302      	movs	r3, #2
 8015304:	e092      	b.n	801542c <HAL_RTC_SetTime+0x144>
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2220      	movs	r2, #32
 801530a:	2101      	movs	r1, #1
 801530c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2221      	movs	r2, #33	@ 0x21
 8015312:	2102      	movs	r1, #2
 8015314:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d125      	bne.n	8015368 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	2240      	movs	r2, #64	@ 0x40
 8015324:	4013      	ands	r3, r2
 8015326:	d102      	bne.n	801532e <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	2200      	movs	r2, #0
 801532c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	0018      	movs	r0, r3
 8015334:	f000 fa5a 	bl	80157ec <RTC_ByteToBcd2>
 8015338:	0003      	movs	r3, r0
 801533a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	785b      	ldrb	r3, [r3, #1]
 8015340:	0018      	movs	r0, r3
 8015342:	f000 fa53 	bl	80157ec <RTC_ByteToBcd2>
 8015346:	0003      	movs	r3, r0
 8015348:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801534a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	789b      	ldrb	r3, [r3, #2]
 8015350:	0018      	movs	r0, r3
 8015352:	f000 fa4b 	bl	80157ec <RTC_ByteToBcd2>
 8015356:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015358:	0022      	movs	r2, r4
 801535a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	78db      	ldrb	r3, [r3, #3]
 8015360:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015362:	4313      	orrs	r3, r2
 8015364:	617b      	str	r3, [r7, #20]
 8015366:	e017      	b.n	8015398 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	689b      	ldr	r3, [r3, #8]
 801536e:	2240      	movs	r2, #64	@ 0x40
 8015370:	4013      	ands	r3, r2
 8015372:	d102      	bne.n	801537a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	2200      	movs	r2, #0
 8015378:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	785b      	ldrb	r3, [r3, #1]
 8015384:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015386:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015388:	68ba      	ldr	r2, [r7, #8]
 801538a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801538c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	78db      	ldrb	r3, [r3, #3]
 8015392:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015394:	4313      	orrs	r3, r2
 8015396:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	22ca      	movs	r2, #202	@ 0xca
 801539e:	625a      	str	r2, [r3, #36]	@ 0x24
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2253      	movs	r2, #83	@ 0x53
 80153a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80153a8:	2513      	movs	r5, #19
 80153aa:	197c      	adds	r4, r7, r5
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	0018      	movs	r0, r3
 80153b0:	f000 f9ae 	bl	8015710 <RTC_EnterInitMode>
 80153b4:	0003      	movs	r3, r0
 80153b6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80153b8:	0028      	movs	r0, r5
 80153ba:	183b      	adds	r3, r7, r0
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d120      	bne.n	8015404 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	491a      	ldr	r1, [pc, #104]	@ (8015434 <HAL_RTC_SetTime+0x14c>)
 80153ca:	400a      	ands	r2, r1
 80153cc:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	689a      	ldr	r2, [r3, #8]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4917      	ldr	r1, [pc, #92]	@ (8015438 <HAL_RTC_SetTime+0x150>)
 80153da:	400a      	ands	r2, r1
 80153dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	6899      	ldr	r1, [r3, #8]
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	68da      	ldr	r2, [r3, #12]
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	691b      	ldr	r3, [r3, #16]
 80153ec:	431a      	orrs	r2, r3
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	430a      	orrs	r2, r1
 80153f4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80153f6:	183c      	adds	r4, r7, r0
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	0018      	movs	r0, r3
 80153fc:	f000 f9cc 	bl	8015798 <RTC_ExitInitMode>
 8015400:	0003      	movs	r3, r0
 8015402:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015404:	2313      	movs	r3, #19
 8015406:	18fb      	adds	r3, r7, r3
 8015408:	781b      	ldrb	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d103      	bne.n	8015416 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2221      	movs	r2, #33	@ 0x21
 8015412:	2101      	movs	r1, #1
 8015414:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	22ff      	movs	r2, #255	@ 0xff
 801541c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	2220      	movs	r2, #32
 8015422:	2100      	movs	r1, #0
 8015424:	5499      	strb	r1, [r3, r2]

  return status;
 8015426:	2313      	movs	r3, #19
 8015428:	18fb      	adds	r3, r7, r3
 801542a:	781b      	ldrb	r3, [r3, #0]
}
 801542c:	0018      	movs	r0, r3
 801542e:	46bd      	mov	sp, r7
 8015430:	b006      	add	sp, #24
 8015432:	bdb0      	pop	{r4, r5, r7, pc}
 8015434:	007f7f7f 	.word	0x007f7f7f
 8015438:	fffbffff 	.word	0xfffbffff

0801543c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015448:	2300      	movs	r3, #0
 801544a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	691b      	ldr	r3, [r3, #16]
 801545c:	045b      	lsls	r3, r3, #17
 801545e:	0c5a      	lsrs	r2, r3, #17
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	4a22      	ldr	r2, [pc, #136]	@ (80154f4 <HAL_RTC_GetTime+0xb8>)
 801546c:	4013      	ands	r3, r2
 801546e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	0c1b      	lsrs	r3, r3, #16
 8015474:	b2db      	uxtb	r3, r3
 8015476:	223f      	movs	r2, #63	@ 0x3f
 8015478:	4013      	ands	r3, r2
 801547a:	b2da      	uxtb	r2, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8015480:	697b      	ldr	r3, [r7, #20]
 8015482:	0a1b      	lsrs	r3, r3, #8
 8015484:	b2db      	uxtb	r3, r3
 8015486:	227f      	movs	r2, #127	@ 0x7f
 8015488:	4013      	ands	r3, r2
 801548a:	b2da      	uxtb	r2, r3
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8015490:	697b      	ldr	r3, [r7, #20]
 8015492:	b2db      	uxtb	r3, r3
 8015494:	227f      	movs	r2, #127	@ 0x7f
 8015496:	4013      	ands	r3, r2
 8015498:	b2da      	uxtb	r2, r3
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	0d9b      	lsrs	r3, r3, #22
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	2201      	movs	r2, #1
 80154a6:	4013      	ands	r3, r2
 80154a8:	b2da      	uxtb	r2, r3
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d11a      	bne.n	80154ea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80154b4:	68bb      	ldr	r3, [r7, #8]
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	0018      	movs	r0, r3
 80154ba:	f000 f9b8 	bl	801582e <RTC_Bcd2ToByte>
 80154be:	0003      	movs	r3, r0
 80154c0:	001a      	movs	r2, r3
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	785b      	ldrb	r3, [r3, #1]
 80154ca:	0018      	movs	r0, r3
 80154cc:	f000 f9af 	bl	801582e <RTC_Bcd2ToByte>
 80154d0:	0003      	movs	r3, r0
 80154d2:	001a      	movs	r2, r3
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	789b      	ldrb	r3, [r3, #2]
 80154dc:	0018      	movs	r0, r3
 80154de:	f000 f9a6 	bl	801582e <RTC_Bcd2ToByte>
 80154e2:	0003      	movs	r3, r0
 80154e4:	001a      	movs	r2, r3
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80154ea:	2300      	movs	r3, #0
}
 80154ec:	0018      	movs	r0, r3
 80154ee:	46bd      	mov	sp, r7
 80154f0:	b006      	add	sp, #24
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	007f7f7f 	.word	0x007f7f7f

080154f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80154f8:	b5b0      	push	{r4, r5, r7, lr}
 80154fa:	b086      	sub	sp, #24
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8015504:	2300      	movs	r3, #0
 8015506:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	2220      	movs	r2, #32
 801550c:	5c9b      	ldrb	r3, [r3, r2]
 801550e:	2b01      	cmp	r3, #1
 8015510:	d101      	bne.n	8015516 <HAL_RTC_SetDate+0x1e>
 8015512:	2302      	movs	r3, #2
 8015514:	e07e      	b.n	8015614 <HAL_RTC_SetDate+0x11c>
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	2220      	movs	r2, #32
 801551a:	2101      	movs	r1, #1
 801551c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2221      	movs	r2, #33	@ 0x21
 8015522:	2102      	movs	r1, #2
 8015524:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d10e      	bne.n	801554a <HAL_RTC_SetDate+0x52>
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	785b      	ldrb	r3, [r3, #1]
 8015530:	001a      	movs	r2, r3
 8015532:	2310      	movs	r3, #16
 8015534:	4013      	ands	r3, r2
 8015536:	d008      	beq.n	801554a <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	785b      	ldrb	r3, [r3, #1]
 801553c:	2210      	movs	r2, #16
 801553e:	4393      	bics	r3, r2
 8015540:	b2db      	uxtb	r3, r3
 8015542:	330a      	adds	r3, #10
 8015544:	b2da      	uxtb	r2, r3
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d11c      	bne.n	801558a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	78db      	ldrb	r3, [r3, #3]
 8015554:	0018      	movs	r0, r3
 8015556:	f000 f949 	bl	80157ec <RTC_ByteToBcd2>
 801555a:	0003      	movs	r3, r0
 801555c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	785b      	ldrb	r3, [r3, #1]
 8015562:	0018      	movs	r0, r3
 8015564:	f000 f942 	bl	80157ec <RTC_ByteToBcd2>
 8015568:	0003      	movs	r3, r0
 801556a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801556c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	789b      	ldrb	r3, [r3, #2]
 8015572:	0018      	movs	r0, r3
 8015574:	f000 f93a 	bl	80157ec <RTC_ByteToBcd2>
 8015578:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801557a:	0022      	movs	r2, r4
 801557c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015584:	4313      	orrs	r3, r2
 8015586:	617b      	str	r3, [r7, #20]
 8015588:	e00e      	b.n	80155a8 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	78db      	ldrb	r3, [r3, #3]
 801558e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	785b      	ldrb	r3, [r3, #1]
 8015594:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015596:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8015598:	68ba      	ldr	r2, [r7, #8]
 801559a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801559c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801559e:	68bb      	ldr	r3, [r7, #8]
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80155a4:	4313      	orrs	r3, r2
 80155a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	22ca      	movs	r2, #202	@ 0xca
 80155ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	2253      	movs	r2, #83	@ 0x53
 80155b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80155b8:	2513      	movs	r5, #19
 80155ba:	197c      	adds	r4, r7, r5
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	0018      	movs	r0, r3
 80155c0:	f000 f8a6 	bl	8015710 <RTC_EnterInitMode>
 80155c4:	0003      	movs	r3, r0
 80155c6:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80155c8:	0028      	movs	r0, r5
 80155ca:	183b      	adds	r3, r7, r0
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d10c      	bne.n	80155ec <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	697a      	ldr	r2, [r7, #20]
 80155d8:	4910      	ldr	r1, [pc, #64]	@ (801561c <HAL_RTC_SetDate+0x124>)
 80155da:	400a      	ands	r2, r1
 80155dc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80155de:	183c      	adds	r4, r7, r0
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	0018      	movs	r0, r3
 80155e4:	f000 f8d8 	bl	8015798 <RTC_ExitInitMode>
 80155e8:	0003      	movs	r3, r0
 80155ea:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80155ec:	2313      	movs	r3, #19
 80155ee:	18fb      	adds	r3, r7, r3
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d103      	bne.n	80155fe <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2221      	movs	r2, #33	@ 0x21
 80155fa:	2101      	movs	r1, #1
 80155fc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	22ff      	movs	r2, #255	@ 0xff
 8015604:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	2220      	movs	r2, #32
 801560a:	2100      	movs	r1, #0
 801560c:	5499      	strb	r1, [r3, r2]

  return status;
 801560e:	2313      	movs	r3, #19
 8015610:	18fb      	adds	r3, r7, r3
 8015612:	781b      	ldrb	r3, [r3, #0]
}
 8015614:	0018      	movs	r0, r3
 8015616:	46bd      	mov	sp, r7
 8015618:	b006      	add	sp, #24
 801561a:	bdb0      	pop	{r4, r5, r7, pc}
 801561c:	00ffff3f 	.word	0x00ffff3f

08015620 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b086      	sub	sp, #24
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801562c:	2300      	movs	r3, #0
 801562e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	685b      	ldr	r3, [r3, #4]
 8015636:	4a21      	ldr	r2, [pc, #132]	@ (80156bc <HAL_RTC_GetDate+0x9c>)
 8015638:	4013      	ands	r3, r2
 801563a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	0c1b      	lsrs	r3, r3, #16
 8015640:	b2da      	uxtb	r2, r3
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8015646:	697b      	ldr	r3, [r7, #20]
 8015648:	0a1b      	lsrs	r3, r3, #8
 801564a:	b2db      	uxtb	r3, r3
 801564c:	221f      	movs	r2, #31
 801564e:	4013      	ands	r3, r2
 8015650:	b2da      	uxtb	r2, r3
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8015656:	697b      	ldr	r3, [r7, #20]
 8015658:	b2db      	uxtb	r3, r3
 801565a:	223f      	movs	r2, #63	@ 0x3f
 801565c:	4013      	ands	r3, r2
 801565e:	b2da      	uxtb	r2, r3
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	0b5b      	lsrs	r3, r3, #13
 8015668:	b2db      	uxtb	r3, r3
 801566a:	2207      	movs	r2, #7
 801566c:	4013      	ands	r3, r2
 801566e:	b2da      	uxtb	r2, r3
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d11a      	bne.n	80156b0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	78db      	ldrb	r3, [r3, #3]
 801567e:	0018      	movs	r0, r3
 8015680:	f000 f8d5 	bl	801582e <RTC_Bcd2ToByte>
 8015684:	0003      	movs	r3, r0
 8015686:	001a      	movs	r2, r3
 8015688:	68bb      	ldr	r3, [r7, #8]
 801568a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	785b      	ldrb	r3, [r3, #1]
 8015690:	0018      	movs	r0, r3
 8015692:	f000 f8cc 	bl	801582e <RTC_Bcd2ToByte>
 8015696:	0003      	movs	r3, r0
 8015698:	001a      	movs	r2, r3
 801569a:	68bb      	ldr	r3, [r7, #8]
 801569c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	789b      	ldrb	r3, [r3, #2]
 80156a2:	0018      	movs	r0, r3
 80156a4:	f000 f8c3 	bl	801582e <RTC_Bcd2ToByte>
 80156a8:	0003      	movs	r3, r0
 80156aa:	001a      	movs	r2, r3
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80156b0:	2300      	movs	r3, #0
}
 80156b2:	0018      	movs	r0, r3
 80156b4:	46bd      	mov	sp, r7
 80156b6:	b006      	add	sp, #24
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	46c0      	nop			@ (mov r8, r8)
 80156bc:	00ffff3f 	.word	0x00ffff3f

080156c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80156c8:	2300      	movs	r3, #0
 80156ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	4a0e      	ldr	r2, [pc, #56]	@ (801570c <HAL_RTC_WaitForSynchro+0x4c>)
 80156d2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80156d4:	f7f8 fd14 	bl	800e100 <HAL_GetTick>
 80156d8:	0003      	movs	r3, r0
 80156da:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80156dc:	e00a      	b.n	80156f4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80156de:	f7f8 fd0f 	bl	800e100 <HAL_GetTick>
 80156e2:	0002      	movs	r2, r0
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	1ad2      	subs	r2, r2, r3
 80156e8:	23fa      	movs	r3, #250	@ 0xfa
 80156ea:	009b      	lsls	r3, r3, #2
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d901      	bls.n	80156f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80156f0:	2303      	movs	r3, #3
 80156f2:	e006      	b.n	8015702 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	2220      	movs	r2, #32
 80156fc:	4013      	ands	r3, r2
 80156fe:	d0ee      	beq.n	80156de <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8015700:	2300      	movs	r3, #0
}
 8015702:	0018      	movs	r0, r3
 8015704:	46bd      	mov	sp, r7
 8015706:	b004      	add	sp, #16
 8015708:	bd80      	pop	{r7, pc}
 801570a:	46c0      	nop			@ (mov r8, r8)
 801570c:	0001ff5f 	.word	0x0001ff5f

08015710 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015718:	2300      	movs	r3, #0
 801571a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801571c:	230f      	movs	r3, #15
 801571e:	18fb      	adds	r3, r7, r3
 8015720:	2200      	movs	r2, #0
 8015722:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	68db      	ldr	r3, [r3, #12]
 801572a:	2240      	movs	r2, #64	@ 0x40
 801572c:	4013      	ands	r3, r2
 801572e:	d12c      	bne.n	801578a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	68da      	ldr	r2, [r3, #12]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2180      	movs	r1, #128	@ 0x80
 801573c:	430a      	orrs	r2, r1
 801573e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015740:	f7f8 fcde 	bl	800e100 <HAL_GetTick>
 8015744:	0003      	movs	r3, r0
 8015746:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015748:	e014      	b.n	8015774 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801574a:	f7f8 fcd9 	bl	800e100 <HAL_GetTick>
 801574e:	0002      	movs	r2, r0
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	1ad2      	subs	r2, r2, r3
 8015754:	200f      	movs	r0, #15
 8015756:	183b      	adds	r3, r7, r0
 8015758:	1839      	adds	r1, r7, r0
 801575a:	7809      	ldrb	r1, [r1, #0]
 801575c:	7019      	strb	r1, [r3, #0]
 801575e:	23fa      	movs	r3, #250	@ 0xfa
 8015760:	009b      	lsls	r3, r3, #2
 8015762:	429a      	cmp	r2, r3
 8015764:	d906      	bls.n	8015774 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2221      	movs	r2, #33	@ 0x21
 801576a:	2104      	movs	r1, #4
 801576c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801576e:	183b      	adds	r3, r7, r0
 8015770:	2201      	movs	r2, #1
 8015772:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	2240      	movs	r2, #64	@ 0x40
 801577c:	4013      	ands	r3, r2
 801577e:	d104      	bne.n	801578a <RTC_EnterInitMode+0x7a>
 8015780:	230f      	movs	r3, #15
 8015782:	18fb      	adds	r3, r7, r3
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	2b01      	cmp	r3, #1
 8015788:	d1df      	bne.n	801574a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801578a:	230f      	movs	r3, #15
 801578c:	18fb      	adds	r3, r7, r3
 801578e:	781b      	ldrb	r3, [r3, #0]
}
 8015790:	0018      	movs	r0, r3
 8015792:	46bd      	mov	sp, r7
 8015794:	b004      	add	sp, #16
 8015796:	bd80      	pop	{r7, pc}

08015798 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015798:	b590      	push	{r4, r7, lr}
 801579a:	b085      	sub	sp, #20
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80157a0:	240f      	movs	r4, #15
 80157a2:	193b      	adds	r3, r7, r4
 80157a4:	2200      	movs	r2, #0
 80157a6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	68da      	ldr	r2, [r3, #12]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2180      	movs	r1, #128	@ 0x80
 80157b4:	438a      	bics	r2, r1
 80157b6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	689b      	ldr	r3, [r3, #8]
 80157be:	2220      	movs	r2, #32
 80157c0:	4013      	ands	r3, r2
 80157c2:	d10c      	bne.n	80157de <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	0018      	movs	r0, r3
 80157c8:	f7ff ff7a 	bl	80156c0 <HAL_RTC_WaitForSynchro>
 80157cc:	1e03      	subs	r3, r0, #0
 80157ce:	d006      	beq.n	80157de <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2221      	movs	r2, #33	@ 0x21
 80157d4:	2104      	movs	r1, #4
 80157d6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80157d8:	193b      	adds	r3, r7, r4
 80157da:	2201      	movs	r2, #1
 80157dc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80157de:	230f      	movs	r3, #15
 80157e0:	18fb      	adds	r3, r7, r3
 80157e2:	781b      	ldrb	r3, [r3, #0]
}
 80157e4:	0018      	movs	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	b005      	add	sp, #20
 80157ea:	bd90      	pop	{r4, r7, pc}

080157ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	0002      	movs	r2, r0
 80157f4:	1dfb      	adds	r3, r7, #7
 80157f6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80157f8:	2300      	movs	r3, #0
 80157fa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80157fc:	e007      	b.n	801580e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	3301      	adds	r3, #1
 8015802:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8015804:	1dfb      	adds	r3, r7, #7
 8015806:	1dfa      	adds	r2, r7, #7
 8015808:	7812      	ldrb	r2, [r2, #0]
 801580a:	3a0a      	subs	r2, #10
 801580c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801580e:	1dfb      	adds	r3, r7, #7
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	2b09      	cmp	r3, #9
 8015814:	d8f3      	bhi.n	80157fe <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	b2db      	uxtb	r3, r3
 801581a:	011b      	lsls	r3, r3, #4
 801581c:	b2da      	uxtb	r2, r3
 801581e:	1dfb      	adds	r3, r7, #7
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	4313      	orrs	r3, r2
 8015824:	b2db      	uxtb	r3, r3
}
 8015826:	0018      	movs	r0, r3
 8015828:	46bd      	mov	sp, r7
 801582a:	b004      	add	sp, #16
 801582c:	bd80      	pop	{r7, pc}

0801582e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801582e:	b580      	push	{r7, lr}
 8015830:	b084      	sub	sp, #16
 8015832:	af00      	add	r7, sp, #0
 8015834:	0002      	movs	r2, r0
 8015836:	1dfb      	adds	r3, r7, #7
 8015838:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801583a:	2300      	movs	r3, #0
 801583c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801583e:	1dfb      	adds	r3, r7, #7
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	091b      	lsrs	r3, r3, #4
 8015844:	b2db      	uxtb	r3, r3
 8015846:	001a      	movs	r2, r3
 8015848:	0013      	movs	r3, r2
 801584a:	009b      	lsls	r3, r3, #2
 801584c:	189b      	adds	r3, r3, r2
 801584e:	005b      	lsls	r3, r3, #1
 8015850:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	b2da      	uxtb	r2, r3
 8015856:	1dfb      	adds	r3, r7, #7
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	210f      	movs	r1, #15
 801585c:	400b      	ands	r3, r1
 801585e:	b2db      	uxtb	r3, r3
 8015860:	18d3      	adds	r3, r2, r3
 8015862:	b2db      	uxtb	r3, r3
}
 8015864:	0018      	movs	r0, r3
 8015866:	46bd      	mov	sp, r7
 8015868:	b004      	add	sp, #16
 801586a:	bd80      	pop	{r7, pc}

0801586c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015878:	4b64      	ldr	r3, [pc, #400]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	22fa      	movs	r2, #250	@ 0xfa
 801587e:	01d1      	lsls	r1, r2, #7
 8015880:	0018      	movs	r0, r3
 8015882:	f7ea fc8f 	bl	80001a4 <__udivsi3>
 8015886:	0003      	movs	r3, r0
 8015888:	001a      	movs	r2, r3
 801588a:	0013      	movs	r3, r2
 801588c:	015b      	lsls	r3, r3, #5
 801588e:	1a9b      	subs	r3, r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	189b      	adds	r3, r3, r2
 8015894:	00db      	lsls	r3, r3, #3
 8015896:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	2220      	movs	r2, #32
 801589c:	5c9b      	ldrb	r3, [r3, r2]
 801589e:	2b01      	cmp	r3, #1
 80158a0:	d101      	bne.n	80158a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80158a2:	2302      	movs	r3, #2
 80158a4:	e0ad      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	2220      	movs	r2, #32
 80158aa:	2101      	movs	r1, #1
 80158ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2221      	movs	r2, #33	@ 0x21
 80158b2:	2102      	movs	r1, #2
 80158b4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	22ca      	movs	r2, #202	@ 0xca
 80158bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	2253      	movs	r2, #83	@ 0x53
 80158c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	689a      	ldr	r2, [r3, #8]
 80158cc:	2380      	movs	r3, #128	@ 0x80
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	4013      	ands	r3, r2
 80158d2:	d019      	beq.n	8015908 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	3b01      	subs	r3, #1
 80158d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10d      	bne.n	80158fc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	22ff      	movs	r2, #255	@ 0xff
 80158e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	2221      	movs	r2, #33	@ 0x21
 80158ec:	2103      	movs	r1, #3
 80158ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2220      	movs	r2, #32
 80158f4:	2100      	movs	r1, #0
 80158f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80158f8:	2303      	movs	r3, #3
 80158fa:	e082      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	68db      	ldr	r3, [r3, #12]
 8015902:	2204      	movs	r2, #4
 8015904:	4013      	ands	r3, r2
 8015906:	d1e5      	bne.n	80158d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	689a      	ldr	r2, [r3, #8]
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	493f      	ldr	r1, [pc, #252]	@ (8015a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8015914:	400a      	ands	r2, r1
 8015916:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	68db      	ldr	r3, [r3, #12]
 801591e:	22ff      	movs	r2, #255	@ 0xff
 8015920:	401a      	ands	r2, r3
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	493b      	ldr	r1, [pc, #236]	@ (8015a14 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8015928:	430a      	orrs	r2, r1
 801592a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801592c:	4b37      	ldr	r3, [pc, #220]	@ (8015a0c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	22fa      	movs	r2, #250	@ 0xfa
 8015932:	01d1      	lsls	r1, r2, #7
 8015934:	0018      	movs	r0, r3
 8015936:	f7ea fc35 	bl	80001a4 <__udivsi3>
 801593a:	0003      	movs	r3, r0
 801593c:	001a      	movs	r2, r3
 801593e:	0013      	movs	r3, r2
 8015940:	015b      	lsls	r3, r3, #5
 8015942:	1a9b      	subs	r3, r3, r2
 8015944:	009b      	lsls	r3, r3, #2
 8015946:	189b      	adds	r3, r3, r2
 8015948:	00db      	lsls	r3, r3, #3
 801594a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	3b01      	subs	r3, #1
 8015950:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d10d      	bne.n	8015974 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	22ff      	movs	r2, #255	@ 0xff
 801595e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	2221      	movs	r2, #33	@ 0x21
 8015964:	2103      	movs	r1, #3
 8015966:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2220      	movs	r2, #32
 801596c:	2100      	movs	r1, #0
 801596e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015970:	2303      	movs	r3, #3
 8015972:	e046      	b.n	8015a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	68db      	ldr	r3, [r3, #12]
 801597a:	2204      	movs	r2, #4
 801597c:	4013      	ands	r3, r2
 801597e:	d0e5      	beq.n	801594c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	689a      	ldr	r2, [r3, #8]
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2107      	movs	r1, #7
 801598c:	438a      	bics	r2, r1
 801598e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	6899      	ldr	r1, [r3, #8]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	687a      	ldr	r2, [r7, #4]
 801599c:	430a      	orrs	r2, r1
 801599e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68ba      	ldr	r2, [r7, #8]
 80159a6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80159a8:	4b1b      	ldr	r3, [pc, #108]	@ (8015a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	4b1a      	ldr	r3, [pc, #104]	@ (8015a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80159ae:	2180      	movs	r1, #128	@ 0x80
 80159b0:	0349      	lsls	r1, r1, #13
 80159b2:	430a      	orrs	r2, r1
 80159b4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80159b6:	4b18      	ldr	r3, [pc, #96]	@ (8015a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80159b8:	689a      	ldr	r2, [r3, #8]
 80159ba:	4b17      	ldr	r3, [pc, #92]	@ (8015a18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80159bc:	2180      	movs	r1, #128	@ 0x80
 80159be:	0349      	lsls	r1, r1, #13
 80159c0:	430a      	orrs	r2, r1
 80159c2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	689a      	ldr	r2, [r3, #8]
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2180      	movs	r1, #128	@ 0x80
 80159d0:	01c9      	lsls	r1, r1, #7
 80159d2:	430a      	orrs	r2, r1
 80159d4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	689a      	ldr	r2, [r3, #8]
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2180      	movs	r1, #128	@ 0x80
 80159e2:	00c9      	lsls	r1, r1, #3
 80159e4:	430a      	orrs	r2, r1
 80159e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	22ff      	movs	r2, #255	@ 0xff
 80159ee:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	2221      	movs	r2, #33	@ 0x21
 80159f4:	2101      	movs	r1, #1
 80159f6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2220      	movs	r2, #32
 80159fc:	2100      	movs	r1, #0
 80159fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	0018      	movs	r0, r3
 8015a04:	46bd      	mov	sp, r7
 8015a06:	b006      	add	sp, #24
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	46c0      	nop			@ (mov r8, r8)
 8015a0c:	200000c8 	.word	0x200000c8
 8015a10:	fffffbff 	.word	0xfffffbff
 8015a14:	fffffb7f 	.word	0xfffffb7f
 8015a18:	40010400 	.word	0x40010400

08015a1c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015a24:	2300      	movs	r3, #0
 8015a26:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2220      	movs	r2, #32
 8015a2c:	5c9b      	ldrb	r3, [r3, r2]
 8015a2e:	2b01      	cmp	r3, #1
 8015a30:	d101      	bne.n	8015a36 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8015a32:	2302      	movs	r3, #2
 8015a34:	e04e      	b.n	8015ad4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2220      	movs	r2, #32
 8015a3a:	2101      	movs	r1, #1
 8015a3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2221      	movs	r2, #33	@ 0x21
 8015a42:	2102      	movs	r1, #2
 8015a44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	22ca      	movs	r2, #202	@ 0xca
 8015a4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2253      	movs	r2, #83	@ 0x53
 8015a54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	689a      	ldr	r2, [r3, #8]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	491e      	ldr	r1, [pc, #120]	@ (8015adc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015a62:	400a      	ands	r2, r1
 8015a64:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	689a      	ldr	r2, [r3, #8]
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	491b      	ldr	r1, [pc, #108]	@ (8015ae0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015a72:	400a      	ands	r2, r1
 8015a74:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015a76:	f7f8 fb43 	bl	800e100 <HAL_GetTick>
 8015a7a:	0003      	movs	r3, r0
 8015a7c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015a7e:	e016      	b.n	8015aae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015a80:	f7f8 fb3e 	bl	800e100 <HAL_GetTick>
 8015a84:	0002      	movs	r2, r0
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	1ad2      	subs	r2, r2, r3
 8015a8a:	23fa      	movs	r3, #250	@ 0xfa
 8015a8c:	009b      	lsls	r3, r3, #2
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d90d      	bls.n	8015aae <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	22ff      	movs	r2, #255	@ 0xff
 8015a98:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2221      	movs	r2, #33	@ 0x21
 8015a9e:	2103      	movs	r1, #3
 8015aa0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2220      	movs	r2, #32
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015aaa:	2303      	movs	r3, #3
 8015aac:	e012      	b.n	8015ad4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	2204      	movs	r2, #4
 8015ab6:	4013      	ands	r3, r2
 8015ab8:	d0e2      	beq.n	8015a80 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	22ff      	movs	r2, #255	@ 0xff
 8015ac0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2221      	movs	r2, #33	@ 0x21
 8015ac6:	2101      	movs	r1, #1
 8015ac8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2220      	movs	r2, #32
 8015ace:	2100      	movs	r1, #0
 8015ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015ad2:	2300      	movs	r3, #0
}
 8015ad4:	0018      	movs	r0, r3
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	b004      	add	sp, #16
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	fffffbff 	.word	0xfffffbff
 8015ae0:	ffffbfff 	.word	0xffffbfff

08015ae4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b082      	sub	sp, #8
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015aec:	4b13      	ldr	r3, [pc, #76]	@ (8015b3c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015aee:	2280      	movs	r2, #128	@ 0x80
 8015af0:	0352      	lsls	r2, r2, #13
 8015af2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	689a      	ldr	r2, [r3, #8]
 8015afa:	2380      	movs	r3, #128	@ 0x80
 8015afc:	01db      	lsls	r3, r3, #7
 8015afe:	4013      	ands	r3, r2
 8015b00:	d014      	beq.n	8015b2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	68da      	ldr	r2, [r3, #12]
 8015b08:	2380      	movs	r3, #128	@ 0x80
 8015b0a:	00db      	lsls	r3, r3, #3
 8015b0c:	4013      	ands	r3, r2
 8015b0e:	d00d      	beq.n	8015b2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	22ff      	movs	r2, #255	@ 0xff
 8015b18:	401a      	ands	r2, r3
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	4908      	ldr	r1, [pc, #32]	@ (8015b40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015b20:	430a      	orrs	r2, r1
 8015b22:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	0018      	movs	r0, r3
 8015b28:	f000 f80c 	bl	8015b44 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	2221      	movs	r2, #33	@ 0x21
 8015b30:	2101      	movs	r1, #1
 8015b32:	5499      	strb	r1, [r3, r2]
}
 8015b34:	46c0      	nop			@ (mov r8, r8)
 8015b36:	46bd      	mov	sp, r7
 8015b38:	b002      	add	sp, #8
 8015b3a:	bd80      	pop	{r7, pc}
 8015b3c:	40010400 	.word	0x40010400
 8015b40:	fffffb7f 	.word	0xfffffb7f

08015b44 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b082      	sub	sp, #8
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015b4c:	46c0      	nop			@ (mov r8, r8)
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	b002      	add	sp, #8
 8015b52:	bd80      	pop	{r7, pc}

08015b54 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b086      	sub	sp, #24
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	60b9      	str	r1, [r7, #8]
 8015b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8015b60:	2300      	movs	r3, #0
 8015b62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	3350      	adds	r3, #80	@ 0x50
 8015b6a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	697a      	ldr	r2, [r7, #20]
 8015b72:	18d3      	adds	r3, r2, r3
 8015b74:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	601a      	str	r2, [r3, #0]
}
 8015b7c:	46c0      	nop			@ (mov r8, r8)
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	b006      	add	sp, #24
 8015b82:	bd80      	pop	{r7, pc}

08015b84 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	3350      	adds	r3, #80	@ 0x50
 8015b98:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	18d3      	adds	r3, r2, r3
 8015ba2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	681b      	ldr	r3, [r3, #0]
}
 8015ba8:	0018      	movs	r0, r3
 8015baa:	46bd      	mov	sp, r7
 8015bac:	b004      	add	sp, #16
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d101      	bne.n	8015bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	e032      	b.n	8015c28 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2239      	movs	r2, #57	@ 0x39
 8015bc6:	5c9b      	ldrb	r3, [r3, r2]
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d107      	bne.n	8015bde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2238      	movs	r2, #56	@ 0x38
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	0018      	movs	r0, r3
 8015bda:	f7f7 fb9d 	bl	800d318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	2239      	movs	r2, #57	@ 0x39
 8015be2:	2102      	movs	r1, #2
 8015be4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	3304      	adds	r3, #4
 8015bee:	0019      	movs	r1, r3
 8015bf0:	0010      	movs	r0, r2
 8015bf2:	f000 fa1d 	bl	8016030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	223e      	movs	r2, #62	@ 0x3e
 8015bfa:	2101      	movs	r1, #1
 8015bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	223a      	movs	r2, #58	@ 0x3a
 8015c02:	2101      	movs	r1, #1
 8015c04:	5499      	strb	r1, [r3, r2]
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	223b      	movs	r2, #59	@ 0x3b
 8015c0a:	2101      	movs	r1, #1
 8015c0c:	5499      	strb	r1, [r3, r2]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	223c      	movs	r2, #60	@ 0x3c
 8015c12:	2101      	movs	r1, #1
 8015c14:	5499      	strb	r1, [r3, r2]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	223d      	movs	r2, #61	@ 0x3d
 8015c1a:	2101      	movs	r1, #1
 8015c1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2239      	movs	r2, #57	@ 0x39
 8015c22:	2101      	movs	r1, #1
 8015c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015c26:	2300      	movs	r3, #0
}
 8015c28:	0018      	movs	r0, r3
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	b002      	add	sp, #8
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b084      	sub	sp, #16
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2239      	movs	r2, #57	@ 0x39
 8015c3c:	5c9b      	ldrb	r3, [r3, r2]
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	2b01      	cmp	r3, #1
 8015c42:	d001      	beq.n	8015c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015c44:	2301      	movs	r3, #1
 8015c46:	e033      	b.n	8015cb0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2239      	movs	r2, #57	@ 0x39
 8015c4c:	2102      	movs	r1, #2
 8015c4e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681a      	ldr	r2, [r3, #0]
 8015c54:	2380      	movs	r3, #128	@ 0x80
 8015c56:	05db      	lsls	r3, r3, #23
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d00e      	beq.n	8015c7a <HAL_TIM_Base_Start+0x4a>
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	4a15      	ldr	r2, [pc, #84]	@ (8015cb8 <HAL_TIM_Base_Start+0x88>)
 8015c62:	4293      	cmp	r3, r2
 8015c64:	d009      	beq.n	8015c7a <HAL_TIM_Base_Start+0x4a>
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a14      	ldr	r2, [pc, #80]	@ (8015cbc <HAL_TIM_Base_Start+0x8c>)
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d004      	beq.n	8015c7a <HAL_TIM_Base_Start+0x4a>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4a12      	ldr	r2, [pc, #72]	@ (8015cc0 <HAL_TIM_Base_Start+0x90>)
 8015c76:	4293      	cmp	r3, r2
 8015c78:	d111      	bne.n	8015c9e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	2207      	movs	r2, #7
 8015c82:	4013      	ands	r3, r2
 8015c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2b06      	cmp	r3, #6
 8015c8a:	d010      	beq.n	8015cae <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	681a      	ldr	r2, [r3, #0]
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	2101      	movs	r1, #1
 8015c98:	430a      	orrs	r2, r1
 8015c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015c9c:	e007      	b.n	8015cae <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	681a      	ldr	r2, [r3, #0]
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	2101      	movs	r1, #1
 8015caa:	430a      	orrs	r2, r1
 8015cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015cae:	2300      	movs	r3, #0
}
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	b004      	add	sp, #16
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	40000400 	.word	0x40000400
 8015cbc:	40010800 	.word	0x40010800
 8015cc0:	40011400 	.word	0x40011400

08015cc4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	6a1b      	ldr	r3, [r3, #32]
 8015cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8015cfc <HAL_TIM_Base_Stop+0x38>)
 8015cd4:	4013      	ands	r3, r2
 8015cd6:	d107      	bne.n	8015ce8 <HAL_TIM_Base_Stop+0x24>
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	681a      	ldr	r2, [r3, #0]
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	2101      	movs	r1, #1
 8015ce4:	438a      	bics	r2, r1
 8015ce6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2239      	movs	r2, #57	@ 0x39
 8015cec:	2101      	movs	r1, #1
 8015cee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015cf0:	2300      	movs	r3, #0
}
 8015cf2:	0018      	movs	r0, r3
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	b002      	add	sp, #8
 8015cf8:	bd80      	pop	{r7, pc}
 8015cfa:	46c0      	nop			@ (mov r8, r8)
 8015cfc:	00001111 	.word	0x00001111

08015d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d101      	bne.n	8015d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	e032      	b.n	8015d78 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2239      	movs	r2, #57	@ 0x39
 8015d16:	5c9b      	ldrb	r3, [r3, r2]
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d107      	bne.n	8015d2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2238      	movs	r2, #56	@ 0x38
 8015d22:	2100      	movs	r1, #0
 8015d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	0018      	movs	r0, r3
 8015d2a:	f7f7 fad1 	bl	800d2d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2239      	movs	r2, #57	@ 0x39
 8015d32:	2102      	movs	r1, #2
 8015d34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	0019      	movs	r1, r3
 8015d40:	0010      	movs	r0, r2
 8015d42:	f000 f975 	bl	8016030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	223e      	movs	r2, #62	@ 0x3e
 8015d4a:	2101      	movs	r1, #1
 8015d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	223a      	movs	r2, #58	@ 0x3a
 8015d52:	2101      	movs	r1, #1
 8015d54:	5499      	strb	r1, [r3, r2]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	223b      	movs	r2, #59	@ 0x3b
 8015d5a:	2101      	movs	r1, #1
 8015d5c:	5499      	strb	r1, [r3, r2]
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	223c      	movs	r2, #60	@ 0x3c
 8015d62:	2101      	movs	r1, #1
 8015d64:	5499      	strb	r1, [r3, r2]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	223d      	movs	r2, #61	@ 0x3d
 8015d6a:	2101      	movs	r1, #1
 8015d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2239      	movs	r2, #57	@ 0x39
 8015d72:	2101      	movs	r1, #1
 8015d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015d76:	2300      	movs	r3, #0
}
 8015d78:	0018      	movs	r0, r3
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	b002      	add	sp, #8
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b084      	sub	sp, #16
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d108      	bne.n	8015da2 <HAL_TIM_PWM_Start+0x22>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	223a      	movs	r2, #58	@ 0x3a
 8015d94:	5c9b      	ldrb	r3, [r3, r2]
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	3b01      	subs	r3, #1
 8015d9a:	1e5a      	subs	r2, r3, #1
 8015d9c:	4193      	sbcs	r3, r2
 8015d9e:	b2db      	uxtb	r3, r3
 8015da0:	e01f      	b.n	8015de2 <HAL_TIM_PWM_Start+0x62>
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	2b04      	cmp	r3, #4
 8015da6:	d108      	bne.n	8015dba <HAL_TIM_PWM_Start+0x3a>
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	223b      	movs	r2, #59	@ 0x3b
 8015dac:	5c9b      	ldrb	r3, [r3, r2]
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	3b01      	subs	r3, #1
 8015db2:	1e5a      	subs	r2, r3, #1
 8015db4:	4193      	sbcs	r3, r2
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	e013      	b.n	8015de2 <HAL_TIM_PWM_Start+0x62>
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	2b08      	cmp	r3, #8
 8015dbe:	d108      	bne.n	8015dd2 <HAL_TIM_PWM_Start+0x52>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	223c      	movs	r2, #60	@ 0x3c
 8015dc4:	5c9b      	ldrb	r3, [r3, r2]
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	3b01      	subs	r3, #1
 8015dca:	1e5a      	subs	r2, r3, #1
 8015dcc:	4193      	sbcs	r3, r2
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	e007      	b.n	8015de2 <HAL_TIM_PWM_Start+0x62>
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	223d      	movs	r2, #61	@ 0x3d
 8015dd6:	5c9b      	ldrb	r3, [r3, r2]
 8015dd8:	b2db      	uxtb	r3, r3
 8015dda:	3b01      	subs	r3, #1
 8015ddc:	1e5a      	subs	r2, r3, #1
 8015dde:	4193      	sbcs	r3, r2
 8015de0:	b2db      	uxtb	r3, r3
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d001      	beq.n	8015dea <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8015de6:	2301      	movs	r3, #1
 8015de8:	e052      	b.n	8015e90 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d104      	bne.n	8015dfa <HAL_TIM_PWM_Start+0x7a>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	223a      	movs	r2, #58	@ 0x3a
 8015df4:	2102      	movs	r1, #2
 8015df6:	5499      	strb	r1, [r3, r2]
 8015df8:	e013      	b.n	8015e22 <HAL_TIM_PWM_Start+0xa2>
 8015dfa:	683b      	ldr	r3, [r7, #0]
 8015dfc:	2b04      	cmp	r3, #4
 8015dfe:	d104      	bne.n	8015e0a <HAL_TIM_PWM_Start+0x8a>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	223b      	movs	r2, #59	@ 0x3b
 8015e04:	2102      	movs	r1, #2
 8015e06:	5499      	strb	r1, [r3, r2]
 8015e08:	e00b      	b.n	8015e22 <HAL_TIM_PWM_Start+0xa2>
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	2b08      	cmp	r3, #8
 8015e0e:	d104      	bne.n	8015e1a <HAL_TIM_PWM_Start+0x9a>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	223c      	movs	r2, #60	@ 0x3c
 8015e14:	2102      	movs	r1, #2
 8015e16:	5499      	strb	r1, [r3, r2]
 8015e18:	e003      	b.n	8015e22 <HAL_TIM_PWM_Start+0xa2>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	223d      	movs	r2, #61	@ 0x3d
 8015e1e:	2102      	movs	r1, #2
 8015e20:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	6839      	ldr	r1, [r7, #0]
 8015e28:	2201      	movs	r2, #1
 8015e2a:	0018      	movs	r0, r3
 8015e2c:	f000 fa62 	bl	80162f4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	2380      	movs	r3, #128	@ 0x80
 8015e36:	05db      	lsls	r3, r3, #23
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d00e      	beq.n	8015e5a <HAL_TIM_PWM_Start+0xda>
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	4a15      	ldr	r2, [pc, #84]	@ (8015e98 <HAL_TIM_PWM_Start+0x118>)
 8015e42:	4293      	cmp	r3, r2
 8015e44:	d009      	beq.n	8015e5a <HAL_TIM_PWM_Start+0xda>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	4a14      	ldr	r2, [pc, #80]	@ (8015e9c <HAL_TIM_PWM_Start+0x11c>)
 8015e4c:	4293      	cmp	r3, r2
 8015e4e:	d004      	beq.n	8015e5a <HAL_TIM_PWM_Start+0xda>
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	4a12      	ldr	r2, [pc, #72]	@ (8015ea0 <HAL_TIM_PWM_Start+0x120>)
 8015e56:	4293      	cmp	r3, r2
 8015e58:	d111      	bne.n	8015e7e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	689b      	ldr	r3, [r3, #8]
 8015e60:	2207      	movs	r2, #7
 8015e62:	4013      	ands	r3, r2
 8015e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2b06      	cmp	r3, #6
 8015e6a:	d010      	beq.n	8015e8e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	2101      	movs	r1, #1
 8015e78:	430a      	orrs	r2, r1
 8015e7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015e7c:	e007      	b.n	8015e8e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	2101      	movs	r1, #1
 8015e8a:	430a      	orrs	r2, r1
 8015e8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015e8e:	2300      	movs	r3, #0
}
 8015e90:	0018      	movs	r0, r3
 8015e92:	46bd      	mov	sp, r7
 8015e94:	b004      	add	sp, #16
 8015e96:	bd80      	pop	{r7, pc}
 8015e98:	40000400 	.word	0x40000400
 8015e9c:	40010800 	.word	0x40010800
 8015ea0:	40011400 	.word	0x40011400

08015ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015eb0:	2317      	movs	r3, #23
 8015eb2:	18fb      	adds	r3, r7, r3
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2238      	movs	r2, #56	@ 0x38
 8015ebc:	5c9b      	ldrb	r3, [r3, r2]
 8015ebe:	2b01      	cmp	r3, #1
 8015ec0:	d101      	bne.n	8015ec6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8015ec2:	2302      	movs	r3, #2
 8015ec4:	e0ad      	b.n	8016022 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	2238      	movs	r2, #56	@ 0x38
 8015eca:	2101      	movs	r1, #1
 8015ecc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	2b0c      	cmp	r3, #12
 8015ed2:	d100      	bne.n	8015ed6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8015ed4:	e076      	b.n	8015fc4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b0c      	cmp	r3, #12
 8015eda:	d900      	bls.n	8015ede <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015edc:	e095      	b.n	801600a <HAL_TIM_PWM_ConfigChannel+0x166>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b08      	cmp	r3, #8
 8015ee2:	d04e      	beq.n	8015f82 <HAL_TIM_PWM_ConfigChannel+0xde>
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2b08      	cmp	r3, #8
 8015ee8:	d900      	bls.n	8015eec <HAL_TIM_PWM_ConfigChannel+0x48>
 8015eea:	e08e      	b.n	801600a <HAL_TIM_PWM_ConfigChannel+0x166>
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d003      	beq.n	8015efa <HAL_TIM_PWM_ConfigChannel+0x56>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2b04      	cmp	r3, #4
 8015ef6:	d021      	beq.n	8015f3c <HAL_TIM_PWM_ConfigChannel+0x98>
 8015ef8:	e087      	b.n	801600a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	0011      	movs	r1, r2
 8015f02:	0018      	movs	r0, r3
 8015f04:	f000 f8f2 	bl	80160ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	699a      	ldr	r2, [r3, #24]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	2108      	movs	r1, #8
 8015f14:	430a      	orrs	r2, r1
 8015f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	699a      	ldr	r2, [r3, #24]
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	2104      	movs	r1, #4
 8015f24:	438a      	bics	r2, r1
 8015f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	6999      	ldr	r1, [r3, #24]
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	68da      	ldr	r2, [r3, #12]
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	430a      	orrs	r2, r1
 8015f38:	619a      	str	r2, [r3, #24]
      break;
 8015f3a:	e06b      	b.n	8016014 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	68ba      	ldr	r2, [r7, #8]
 8015f42:	0011      	movs	r1, r2
 8015f44:	0018      	movs	r0, r3
 8015f46:	f000 f90d 	bl	8016164 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	699a      	ldr	r2, [r3, #24]
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	2180      	movs	r1, #128	@ 0x80
 8015f56:	0109      	lsls	r1, r1, #4
 8015f58:	430a      	orrs	r2, r1
 8015f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	699a      	ldr	r2, [r3, #24]
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	4931      	ldr	r1, [pc, #196]	@ (801602c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015f68:	400a      	ands	r2, r1
 8015f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	6999      	ldr	r1, [r3, #24]
 8015f72:	68bb      	ldr	r3, [r7, #8]
 8015f74:	68db      	ldr	r3, [r3, #12]
 8015f76:	021a      	lsls	r2, r3, #8
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	430a      	orrs	r2, r1
 8015f7e:	619a      	str	r2, [r3, #24]
      break;
 8015f80:	e048      	b.n	8016014 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	68ba      	ldr	r2, [r7, #8]
 8015f88:	0011      	movs	r1, r2
 8015f8a:	0018      	movs	r0, r3
 8015f8c:	f000 f92c 	bl	80161e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	69da      	ldr	r2, [r3, #28]
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2108      	movs	r1, #8
 8015f9c:	430a      	orrs	r2, r1
 8015f9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	69da      	ldr	r2, [r3, #28]
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	2104      	movs	r1, #4
 8015fac:	438a      	bics	r2, r1
 8015fae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	69d9      	ldr	r1, [r3, #28]
 8015fb6:	68bb      	ldr	r3, [r7, #8]
 8015fb8:	68da      	ldr	r2, [r3, #12]
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	430a      	orrs	r2, r1
 8015fc0:	61da      	str	r2, [r3, #28]
      break;
 8015fc2:	e027      	b.n	8016014 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	68ba      	ldr	r2, [r7, #8]
 8015fca:	0011      	movs	r1, r2
 8015fcc:	0018      	movs	r0, r3
 8015fce:	f000 f94b 	bl	8016268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	69da      	ldr	r2, [r3, #28]
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2180      	movs	r1, #128	@ 0x80
 8015fde:	0109      	lsls	r1, r1, #4
 8015fe0:	430a      	orrs	r2, r1
 8015fe2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	69da      	ldr	r2, [r3, #28]
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	490f      	ldr	r1, [pc, #60]	@ (801602c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015ff0:	400a      	ands	r2, r1
 8015ff2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	69d9      	ldr	r1, [r3, #28]
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	021a      	lsls	r2, r3, #8
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	430a      	orrs	r2, r1
 8016006:	61da      	str	r2, [r3, #28]
      break;
 8016008:	e004      	b.n	8016014 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801600a:	2317      	movs	r3, #23
 801600c:	18fb      	adds	r3, r7, r3
 801600e:	2201      	movs	r2, #1
 8016010:	701a      	strb	r2, [r3, #0]
      break;
 8016012:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2238      	movs	r2, #56	@ 0x38
 8016018:	2100      	movs	r1, #0
 801601a:	5499      	strb	r1, [r3, r2]

  return status;
 801601c:	2317      	movs	r3, #23
 801601e:	18fb      	adds	r3, r7, r3
 8016020:	781b      	ldrb	r3, [r3, #0]
}
 8016022:	0018      	movs	r0, r3
 8016024:	46bd      	mov	sp, r7
 8016026:	b006      	add	sp, #24
 8016028:	bd80      	pop	{r7, pc}
 801602a:	46c0      	nop			@ (mov r8, r8)
 801602c:	fffffbff 	.word	0xfffffbff

08016030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
 8016038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016040:	687a      	ldr	r2, [r7, #4]
 8016042:	2380      	movs	r3, #128	@ 0x80
 8016044:	05db      	lsls	r3, r3, #23
 8016046:	429a      	cmp	r2, r3
 8016048:	d00b      	beq.n	8016062 <TIM_Base_SetConfig+0x32>
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	4a23      	ldr	r2, [pc, #140]	@ (80160dc <TIM_Base_SetConfig+0xac>)
 801604e:	4293      	cmp	r3, r2
 8016050:	d007      	beq.n	8016062 <TIM_Base_SetConfig+0x32>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4a22      	ldr	r2, [pc, #136]	@ (80160e0 <TIM_Base_SetConfig+0xb0>)
 8016056:	4293      	cmp	r3, r2
 8016058:	d003      	beq.n	8016062 <TIM_Base_SetConfig+0x32>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	4a21      	ldr	r2, [pc, #132]	@ (80160e4 <TIM_Base_SetConfig+0xb4>)
 801605e:	4293      	cmp	r3, r2
 8016060:	d108      	bne.n	8016074 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2270      	movs	r2, #112	@ 0x70
 8016066:	4393      	bics	r3, r2
 8016068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	68fa      	ldr	r2, [r7, #12]
 8016070:	4313      	orrs	r3, r2
 8016072:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016074:	687a      	ldr	r2, [r7, #4]
 8016076:	2380      	movs	r3, #128	@ 0x80
 8016078:	05db      	lsls	r3, r3, #23
 801607a:	429a      	cmp	r2, r3
 801607c:	d00b      	beq.n	8016096 <TIM_Base_SetConfig+0x66>
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	4a16      	ldr	r2, [pc, #88]	@ (80160dc <TIM_Base_SetConfig+0xac>)
 8016082:	4293      	cmp	r3, r2
 8016084:	d007      	beq.n	8016096 <TIM_Base_SetConfig+0x66>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	4a15      	ldr	r2, [pc, #84]	@ (80160e0 <TIM_Base_SetConfig+0xb0>)
 801608a:	4293      	cmp	r3, r2
 801608c:	d003      	beq.n	8016096 <TIM_Base_SetConfig+0x66>
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	4a14      	ldr	r2, [pc, #80]	@ (80160e4 <TIM_Base_SetConfig+0xb4>)
 8016092:	4293      	cmp	r3, r2
 8016094:	d108      	bne.n	80160a8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	4a13      	ldr	r2, [pc, #76]	@ (80160e8 <TIM_Base_SetConfig+0xb8>)
 801609a:	4013      	ands	r3, r2
 801609c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	68db      	ldr	r3, [r3, #12]
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	4313      	orrs	r3, r2
 80160a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2280      	movs	r2, #128	@ 0x80
 80160ac:	4393      	bics	r3, r2
 80160ae:	001a      	movs	r2, r3
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	691b      	ldr	r3, [r3, #16]
 80160b4:	4313      	orrs	r3, r2
 80160b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	689a      	ldr	r2, [r3, #8]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2201      	movs	r2, #1
 80160d2:	615a      	str	r2, [r3, #20]
}
 80160d4:	46c0      	nop			@ (mov r8, r8)
 80160d6:	46bd      	mov	sp, r7
 80160d8:	b004      	add	sp, #16
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	40000400 	.word	0x40000400
 80160e0:	40010800 	.word	0x40010800
 80160e4:	40011400 	.word	0x40011400
 80160e8:	fffffcff 	.word	0xfffffcff

080160ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b086      	sub	sp, #24
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6a1b      	ldr	r3, [r3, #32]
 80160fa:	2201      	movs	r2, #1
 80160fc:	4393      	bics	r3, r2
 80160fe:	001a      	movs	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6a1b      	ldr	r3, [r3, #32]
 8016108:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	699b      	ldr	r3, [r3, #24]
 8016114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2270      	movs	r2, #112	@ 0x70
 801611a:	4393      	bics	r3, r2
 801611c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	2203      	movs	r2, #3
 8016122:	4393      	bics	r3, r2
 8016124:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	68fa      	ldr	r2, [r7, #12]
 801612c:	4313      	orrs	r3, r2
 801612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	2202      	movs	r2, #2
 8016134:	4393      	bics	r3, r2
 8016136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016138:	683b      	ldr	r3, [r7, #0]
 801613a:	689b      	ldr	r3, [r3, #8]
 801613c:	697a      	ldr	r2, [r7, #20]
 801613e:	4313      	orrs	r3, r2
 8016140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	693a      	ldr	r2, [r7, #16]
 8016146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68fa      	ldr	r2, [r7, #12]
 801614c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	685a      	ldr	r2, [r3, #4]
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	697a      	ldr	r2, [r7, #20]
 801615a:	621a      	str	r2, [r3, #32]
}
 801615c:	46c0      	nop			@ (mov r8, r8)
 801615e:	46bd      	mov	sp, r7
 8016160:	b006      	add	sp, #24
 8016162:	bd80      	pop	{r7, pc}

08016164 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b086      	sub	sp, #24
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6a1b      	ldr	r3, [r3, #32]
 8016172:	2210      	movs	r2, #16
 8016174:	4393      	bics	r3, r2
 8016176:	001a      	movs	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6a1b      	ldr	r3, [r3, #32]
 8016180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	699b      	ldr	r3, [r3, #24]
 801618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	4a13      	ldr	r2, [pc, #76]	@ (80161e0 <TIM_OC2_SetConfig+0x7c>)
 8016192:	4013      	ands	r3, r2
 8016194:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	4a12      	ldr	r2, [pc, #72]	@ (80161e4 <TIM_OC2_SetConfig+0x80>)
 801619a:	4013      	ands	r3, r2
 801619c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	021b      	lsls	r3, r3, #8
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	4313      	orrs	r3, r2
 80161a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	2220      	movs	r2, #32
 80161ae:	4393      	bics	r3, r2
 80161b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	689b      	ldr	r3, [r3, #8]
 80161b6:	011b      	lsls	r3, r3, #4
 80161b8:	697a      	ldr	r2, [r7, #20]
 80161ba:	4313      	orrs	r3, r2
 80161bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	693a      	ldr	r2, [r7, #16]
 80161c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	68fa      	ldr	r2, [r7, #12]
 80161c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	685a      	ldr	r2, [r3, #4]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	697a      	ldr	r2, [r7, #20]
 80161d6:	621a      	str	r2, [r3, #32]
}
 80161d8:	46c0      	nop			@ (mov r8, r8)
 80161da:	46bd      	mov	sp, r7
 80161dc:	b006      	add	sp, #24
 80161de:	bd80      	pop	{r7, pc}
 80161e0:	ffff8fff 	.word	0xffff8fff
 80161e4:	fffffcff 	.word	0xfffffcff

080161e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b086      	sub	sp, #24
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6a1b      	ldr	r3, [r3, #32]
 80161f6:	4a1a      	ldr	r2, [pc, #104]	@ (8016260 <TIM_OC3_SetConfig+0x78>)
 80161f8:	401a      	ands	r2, r3
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	6a1b      	ldr	r3, [r3, #32]
 8016202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	69db      	ldr	r3, [r3, #28]
 801620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2270      	movs	r2, #112	@ 0x70
 8016214:	4393      	bics	r3, r2
 8016216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2203      	movs	r2, #3
 801621c:	4393      	bics	r3, r2
 801621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	68fa      	ldr	r2, [r7, #12]
 8016226:	4313      	orrs	r3, r2
 8016228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	4a0d      	ldr	r2, [pc, #52]	@ (8016264 <TIM_OC3_SetConfig+0x7c>)
 801622e:	4013      	ands	r3, r2
 8016230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	021b      	lsls	r3, r3, #8
 8016238:	697a      	ldr	r2, [r7, #20]
 801623a:	4313      	orrs	r3, r2
 801623c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	693a      	ldr	r2, [r7, #16]
 8016242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	68fa      	ldr	r2, [r7, #12]
 8016248:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	685a      	ldr	r2, [r3, #4]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	697a      	ldr	r2, [r7, #20]
 8016256:	621a      	str	r2, [r3, #32]
}
 8016258:	46c0      	nop			@ (mov r8, r8)
 801625a:	46bd      	mov	sp, r7
 801625c:	b006      	add	sp, #24
 801625e:	bd80      	pop	{r7, pc}
 8016260:	fffffeff 	.word	0xfffffeff
 8016264:	fffffdff 	.word	0xfffffdff

08016268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b086      	sub	sp, #24
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	6a1b      	ldr	r3, [r3, #32]
 8016276:	4a1b      	ldr	r2, [pc, #108]	@ (80162e4 <TIM_OC4_SetConfig+0x7c>)
 8016278:	401a      	ands	r2, r3
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6a1b      	ldr	r3, [r3, #32]
 8016282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	685b      	ldr	r3, [r3, #4]
 8016288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	69db      	ldr	r3, [r3, #28]
 801628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	4a15      	ldr	r2, [pc, #84]	@ (80162e8 <TIM_OC4_SetConfig+0x80>)
 8016294:	4013      	ands	r3, r2
 8016296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	4a14      	ldr	r2, [pc, #80]	@ (80162ec <TIM_OC4_SetConfig+0x84>)
 801629c:	4013      	ands	r3, r2
 801629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	021b      	lsls	r3, r3, #8
 80162a6:	68fa      	ldr	r2, [r7, #12]
 80162a8:	4313      	orrs	r3, r2
 80162aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	4a10      	ldr	r2, [pc, #64]	@ (80162f0 <TIM_OC4_SetConfig+0x88>)
 80162b0:	4013      	ands	r3, r2
 80162b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	689b      	ldr	r3, [r3, #8]
 80162b8:	031b      	lsls	r3, r3, #12
 80162ba:	697a      	ldr	r2, [r7, #20]
 80162bc:	4313      	orrs	r3, r2
 80162be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	693a      	ldr	r2, [r7, #16]
 80162c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	68fa      	ldr	r2, [r7, #12]
 80162ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	685a      	ldr	r2, [r3, #4]
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	697a      	ldr	r2, [r7, #20]
 80162d8:	621a      	str	r2, [r3, #32]
}
 80162da:	46c0      	nop			@ (mov r8, r8)
 80162dc:	46bd      	mov	sp, r7
 80162de:	b006      	add	sp, #24
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	46c0      	nop			@ (mov r8, r8)
 80162e4:	ffffefff 	.word	0xffffefff
 80162e8:	ffff8fff 	.word	0xffff8fff
 80162ec:	fffffcff 	.word	0xfffffcff
 80162f0:	ffffdfff 	.word	0xffffdfff

080162f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b086      	sub	sp, #24
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	221f      	movs	r2, #31
 8016304:	4013      	ands	r3, r2
 8016306:	2201      	movs	r2, #1
 8016308:	409a      	lsls	r2, r3
 801630a:	0013      	movs	r3, r2
 801630c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	6a1b      	ldr	r3, [r3, #32]
 8016312:	697a      	ldr	r2, [r7, #20]
 8016314:	43d2      	mvns	r2, r2
 8016316:	401a      	ands	r2, r3
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	6a1a      	ldr	r2, [r3, #32]
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	211f      	movs	r1, #31
 8016324:	400b      	ands	r3, r1
 8016326:	6879      	ldr	r1, [r7, #4]
 8016328:	4099      	lsls	r1, r3
 801632a:	000b      	movs	r3, r1
 801632c:	431a      	orrs	r2, r3
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	621a      	str	r2, [r3, #32]
}
 8016332:	46c0      	nop			@ (mov r8, r8)
 8016334:	46bd      	mov	sp, r7
 8016336:	b006      	add	sp, #24
 8016338:	bd80      	pop	{r7, pc}
	...

0801633c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
 8016344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	2238      	movs	r2, #56	@ 0x38
 801634a:	5c9b      	ldrb	r3, [r3, r2]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d101      	bne.n	8016354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016350:	2302      	movs	r3, #2
 8016352:	e047      	b.n	80163e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2238      	movs	r2, #56	@ 0x38
 8016358:	2101      	movs	r1, #1
 801635a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	2239      	movs	r2, #57	@ 0x39
 8016360:	2102      	movs	r1, #2
 8016362:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	685b      	ldr	r3, [r3, #4]
 801636a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	689b      	ldr	r3, [r3, #8]
 8016372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2270      	movs	r2, #112	@ 0x70
 8016378:	4393      	bics	r3, r2
 801637a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	68fa      	ldr	r2, [r7, #12]
 8016382:	4313      	orrs	r3, r2
 8016384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	68fa      	ldr	r2, [r7, #12]
 801638c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	681a      	ldr	r2, [r3, #0]
 8016392:	2380      	movs	r3, #128	@ 0x80
 8016394:	05db      	lsls	r3, r3, #23
 8016396:	429a      	cmp	r2, r3
 8016398:	d00e      	beq.n	80163b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	4a13      	ldr	r2, [pc, #76]	@ (80163ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80163a0:	4293      	cmp	r3, r2
 80163a2:	d009      	beq.n	80163b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	4a11      	ldr	r2, [pc, #68]	@ (80163f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80163aa:	4293      	cmp	r3, r2
 80163ac:	d004      	beq.n	80163b8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	4a10      	ldr	r2, [pc, #64]	@ (80163f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d10c      	bne.n	80163d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	2280      	movs	r2, #128	@ 0x80
 80163bc:	4393      	bics	r3, r2
 80163be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	685b      	ldr	r3, [r3, #4]
 80163c4:	68ba      	ldr	r2, [r7, #8]
 80163c6:	4313      	orrs	r3, r2
 80163c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2239      	movs	r2, #57	@ 0x39
 80163d6:	2101      	movs	r1, #1
 80163d8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	2238      	movs	r2, #56	@ 0x38
 80163de:	2100      	movs	r1, #0
 80163e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80163e2:	2300      	movs	r3, #0
}
 80163e4:	0018      	movs	r0, r3
 80163e6:	46bd      	mov	sp, r7
 80163e8:	b004      	add	sp, #16
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	40000400 	.word	0x40000400
 80163f0:	40010800 	.word	0x40010800
 80163f4:	40011400 	.word	0x40011400

080163f8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b082      	sub	sp, #8
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2238      	movs	r2, #56	@ 0x38
 8016406:	5c9b      	ldrb	r3, [r3, r2]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d101      	bne.n	8016410 <HAL_TIMEx_RemapConfig+0x18>
 801640c:	2302      	movs	r3, #2
 801640e:	e00c      	b.n	801642a <HAL_TIMEx_RemapConfig+0x32>
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2238      	movs	r2, #56	@ 0x38
 8016414:	2101      	movs	r1, #1
 8016416:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	683a      	ldr	r2, [r7, #0]
 801641e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2238      	movs	r2, #56	@ 0x38
 8016424:	2100      	movs	r1, #0
 8016426:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016428:	2300      	movs	r3, #0
}
 801642a:	0018      	movs	r0, r3
 801642c:	46bd      	mov	sp, r7
 801642e:	b002      	add	sp, #8
 8016430:	bd80      	pop	{r7, pc}
	...

08016434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b082      	sub	sp, #8
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d101      	bne.n	8016446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016442:	2301      	movs	r3, #1
 8016444:	e053      	b.n	80164ee <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801644a:	2b00      	cmp	r3, #0
 801644c:	d116      	bne.n	801647c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	2278      	movs	r2, #120	@ 0x78
 8016452:	2100      	movs	r1, #0
 8016454:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	0018      	movs	r0, r3
 801645a:	f000 fd65 	bl	8016f28 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	22b0      	movs	r2, #176	@ 0xb0
 8016462:	589b      	ldr	r3, [r3, r2]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d103      	bne.n	8016470 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	21b0      	movs	r1, #176	@ 0xb0
 801646c:	4a22      	ldr	r2, [pc, #136]	@ (80164f8 <HAL_UART_Init+0xc4>)
 801646e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	22b0      	movs	r2, #176	@ 0xb0
 8016474:	589b      	ldr	r3, [r3, r2]
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	0010      	movs	r0, r2
 801647a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2224      	movs	r2, #36	@ 0x24
 8016480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2101      	movs	r1, #1
 801648e:	438a      	bics	r2, r1
 8016490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	0018      	movs	r0, r3
 8016496:	f000 fd8b 	bl	8016fb0 <UART_SetConfig>
 801649a:	0003      	movs	r3, r0
 801649c:	2b01      	cmp	r3, #1
 801649e:	d101      	bne.n	80164a4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80164a0:	2301      	movs	r3, #1
 80164a2:	e024      	b.n	80164ee <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d003      	beq.n	80164b4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	0018      	movs	r0, r3
 80164b0:	f001 f81c 	bl	80174ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	685a      	ldr	r2, [r3, #4]
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	490f      	ldr	r1, [pc, #60]	@ (80164fc <HAL_UART_Init+0xc8>)
 80164c0:	400a      	ands	r2, r1
 80164c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	689a      	ldr	r2, [r3, #8]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	681b      	ldr	r3, [r3, #0]
 80164ce:	212a      	movs	r1, #42	@ 0x2a
 80164d0:	438a      	bics	r2, r1
 80164d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	2101      	movs	r1, #1
 80164e0:	430a      	orrs	r2, r1
 80164e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	0018      	movs	r0, r3
 80164e8:	f001 f8b4 	bl	8017654 <UART_CheckIdleState>
 80164ec:	0003      	movs	r3, r0
}
 80164ee:	0018      	movs	r0, r3
 80164f0:	46bd      	mov	sp, r7
 80164f2:	b002      	add	sp, #8
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	46c0      	nop			@ (mov r8, r8)
 80164f8:	0800d54d 	.word	0x0800d54d
 80164fc:	ffffb7ff 	.word	0xffffb7ff

08016500 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b08a      	sub	sp, #40	@ 0x28
 8016504:	af02      	add	r7, sp, #8
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	603b      	str	r3, [r7, #0]
 801650c:	1dbb      	adds	r3, r7, #6
 801650e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016514:	2b20      	cmp	r3, #32
 8016516:	d000      	beq.n	801651a <HAL_UART_Transmit+0x1a>
 8016518:	e08c      	b.n	8016634 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d003      	beq.n	8016528 <HAL_UART_Transmit+0x28>
 8016520:	1dbb      	adds	r3, r7, #6
 8016522:	881b      	ldrh	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d101      	bne.n	801652c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016528:	2301      	movs	r3, #1
 801652a:	e084      	b.n	8016636 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	689a      	ldr	r2, [r3, #8]
 8016530:	2380      	movs	r3, #128	@ 0x80
 8016532:	015b      	lsls	r3, r3, #5
 8016534:	429a      	cmp	r2, r3
 8016536:	d109      	bne.n	801654c <HAL_UART_Transmit+0x4c>
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	691b      	ldr	r3, [r3, #16]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d105      	bne.n	801654c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	2201      	movs	r2, #1
 8016544:	4013      	ands	r3, r2
 8016546:	d001      	beq.n	801654c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8016548:	2301      	movs	r3, #1
 801654a:	e074      	b.n	8016636 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2284      	movs	r2, #132	@ 0x84
 8016550:	2100      	movs	r1, #0
 8016552:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2221      	movs	r2, #33	@ 0x21
 8016558:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801655a:	f7f7 fdd1 	bl	800e100 <HAL_GetTick>
 801655e:	0003      	movs	r3, r0
 8016560:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	1dba      	adds	r2, r7, #6
 8016566:	2150      	movs	r1, #80	@ 0x50
 8016568:	8812      	ldrh	r2, [r2, #0]
 801656a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	1dba      	adds	r2, r7, #6
 8016570:	2152      	movs	r1, #82	@ 0x52
 8016572:	8812      	ldrh	r2, [r2, #0]
 8016574:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	689a      	ldr	r2, [r3, #8]
 801657a:	2380      	movs	r3, #128	@ 0x80
 801657c:	015b      	lsls	r3, r3, #5
 801657e:	429a      	cmp	r2, r3
 8016580:	d108      	bne.n	8016594 <HAL_UART_Transmit+0x94>
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	691b      	ldr	r3, [r3, #16]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d104      	bne.n	8016594 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801658a:	2300      	movs	r3, #0
 801658c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	61bb      	str	r3, [r7, #24]
 8016592:	e003      	b.n	801659c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016598:	2300      	movs	r3, #0
 801659a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801659c:	e02f      	b.n	80165fe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801659e:	697a      	ldr	r2, [r7, #20]
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	9300      	str	r3, [sp, #0]
 80165a6:	0013      	movs	r3, r2
 80165a8:	2200      	movs	r2, #0
 80165aa:	2180      	movs	r1, #128	@ 0x80
 80165ac:	f001 f8fa 	bl	80177a4 <UART_WaitOnFlagUntilTimeout>
 80165b0:	1e03      	subs	r3, r0, #0
 80165b2:	d004      	beq.n	80165be <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2220      	movs	r2, #32
 80165b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80165ba:	2303      	movs	r3, #3
 80165bc:	e03b      	b.n	8016636 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80165be:	69fb      	ldr	r3, [r7, #28]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d10b      	bne.n	80165dc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	001a      	movs	r2, r3
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	05d2      	lsls	r2, r2, #23
 80165d0:	0dd2      	lsrs	r2, r2, #23
 80165d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80165d4:	69bb      	ldr	r3, [r7, #24]
 80165d6:	3302      	adds	r3, #2
 80165d8:	61bb      	str	r3, [r7, #24]
 80165da:	e007      	b.n	80165ec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80165dc:	69fb      	ldr	r3, [r7, #28]
 80165de:	781a      	ldrb	r2, [r3, #0]
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80165e6:	69fb      	ldr	r3, [r7, #28]
 80165e8:	3301      	adds	r3, #1
 80165ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2252      	movs	r2, #82	@ 0x52
 80165f0:	5a9b      	ldrh	r3, [r3, r2]
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	3b01      	subs	r3, #1
 80165f6:	b299      	uxth	r1, r3
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	2252      	movs	r2, #82	@ 0x52
 80165fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	2252      	movs	r2, #82	@ 0x52
 8016602:	5a9b      	ldrh	r3, [r3, r2]
 8016604:	b29b      	uxth	r3, r3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d1c9      	bne.n	801659e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801660a:	697a      	ldr	r2, [r7, #20]
 801660c:	68f8      	ldr	r0, [r7, #12]
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	9300      	str	r3, [sp, #0]
 8016612:	0013      	movs	r3, r2
 8016614:	2200      	movs	r2, #0
 8016616:	2140      	movs	r1, #64	@ 0x40
 8016618:	f001 f8c4 	bl	80177a4 <UART_WaitOnFlagUntilTimeout>
 801661c:	1e03      	subs	r3, r0, #0
 801661e:	d004      	beq.n	801662a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	2220      	movs	r2, #32
 8016624:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8016626:	2303      	movs	r3, #3
 8016628:	e005      	b.n	8016636 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	2220      	movs	r2, #32
 801662e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016630:	2300      	movs	r3, #0
 8016632:	e000      	b.n	8016636 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8016634:	2302      	movs	r3, #2
  }
}
 8016636:	0018      	movs	r0, r3
 8016638:	46bd      	mov	sp, r7
 801663a:	b008      	add	sp, #32
 801663c:	bd80      	pop	{r7, pc}
	...

08016640 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b088      	sub	sp, #32
 8016644:	af00      	add	r7, sp, #0
 8016646:	60f8      	str	r0, [r7, #12]
 8016648:	60b9      	str	r1, [r7, #8]
 801664a:	1dbb      	adds	r3, r7, #6
 801664c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2280      	movs	r2, #128	@ 0x80
 8016652:	589b      	ldr	r3, [r3, r2]
 8016654:	2b20      	cmp	r3, #32
 8016656:	d14a      	bne.n	80166ee <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d003      	beq.n	8016666 <HAL_UART_Receive_IT+0x26>
 801665e:	1dbb      	adds	r3, r7, #6
 8016660:	881b      	ldrh	r3, [r3, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d101      	bne.n	801666a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8016666:	2301      	movs	r3, #1
 8016668:	e042      	b.n	80166f0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	689a      	ldr	r2, [r3, #8]
 801666e:	2380      	movs	r3, #128	@ 0x80
 8016670:	015b      	lsls	r3, r3, #5
 8016672:	429a      	cmp	r2, r3
 8016674:	d109      	bne.n	801668a <HAL_UART_Receive_IT+0x4a>
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	691b      	ldr	r3, [r3, #16]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d105      	bne.n	801668a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	2201      	movs	r2, #1
 8016682:	4013      	ands	r3, r2
 8016684:	d001      	beq.n	801668a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8016686:	2301      	movs	r3, #1
 8016688:	e032      	b.n	80166f0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	2200      	movs	r2, #0
 801668e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4a18      	ldr	r2, [pc, #96]	@ (80166f8 <HAL_UART_Receive_IT+0xb8>)
 8016696:	4293      	cmp	r3, r2
 8016698:	d020      	beq.n	80166dc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	685a      	ldr	r2, [r3, #4]
 80166a0:	2380      	movs	r3, #128	@ 0x80
 80166a2:	041b      	lsls	r3, r3, #16
 80166a4:	4013      	ands	r3, r2
 80166a6:	d019      	beq.n	80166dc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166a8:	f3ef 8310 	mrs	r3, PRIMASK
 80166ac:	613b      	str	r3, [r7, #16]
  return(result);
 80166ae:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80166b0:	61fb      	str	r3, [r7, #28]
 80166b2:	2301      	movs	r3, #1
 80166b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	f383 8810 	msr	PRIMASK, r3
}
 80166bc:	46c0      	nop			@ (mov r8, r8)
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	681a      	ldr	r2, [r3, #0]
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	2180      	movs	r1, #128	@ 0x80
 80166ca:	04c9      	lsls	r1, r1, #19
 80166cc:	430a      	orrs	r2, r1
 80166ce:	601a      	str	r2, [r3, #0]
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166d4:	69bb      	ldr	r3, [r7, #24]
 80166d6:	f383 8810 	msr	PRIMASK, r3
}
 80166da:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80166dc:	1dbb      	adds	r3, r7, #6
 80166de:	881a      	ldrh	r2, [r3, #0]
 80166e0:	68b9      	ldr	r1, [r7, #8]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	0018      	movs	r0, r3
 80166e6:	f001 f8c7 	bl	8017878 <UART_Start_Receive_IT>
 80166ea:	0003      	movs	r3, r0
 80166ec:	e000      	b.n	80166f0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80166ee:	2302      	movs	r3, #2
  }
}
 80166f0:	0018      	movs	r0, r3
 80166f2:	46bd      	mov	sp, r7
 80166f4:	b008      	add	sp, #32
 80166f6:	bd80      	pop	{r7, pc}
 80166f8:	40004800 	.word	0x40004800

080166fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b088      	sub	sp, #32
 8016700:	af00      	add	r7, sp, #0
 8016702:	60f8      	str	r0, [r7, #12]
 8016704:	60b9      	str	r1, [r7, #8]
 8016706:	1dbb      	adds	r3, r7, #6
 8016708:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801670e:	2b20      	cmp	r3, #32
 8016710:	d000      	beq.n	8016714 <HAL_UART_Transmit_DMA+0x18>
 8016712:	e077      	b.n	8016804 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d003      	beq.n	8016722 <HAL_UART_Transmit_DMA+0x26>
 801671a:	1dbb      	adds	r3, r7, #6
 801671c:	881b      	ldrh	r3, [r3, #0]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d101      	bne.n	8016726 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016722:	2301      	movs	r3, #1
 8016724:	e06f      	b.n	8016806 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	689a      	ldr	r2, [r3, #8]
 801672a:	2380      	movs	r3, #128	@ 0x80
 801672c:	015b      	lsls	r3, r3, #5
 801672e:	429a      	cmp	r2, r3
 8016730:	d109      	bne.n	8016746 <HAL_UART_Transmit_DMA+0x4a>
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	691b      	ldr	r3, [r3, #16]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d105      	bne.n	8016746 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	2201      	movs	r2, #1
 801673e:	4013      	ands	r3, r2
 8016740:	d001      	beq.n	8016746 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016742:	2301      	movs	r3, #1
 8016744:	e05f      	b.n	8016806 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	68ba      	ldr	r2, [r7, #8]
 801674a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	1dba      	adds	r2, r7, #6
 8016750:	2150      	movs	r1, #80	@ 0x50
 8016752:	8812      	ldrh	r2, [r2, #0]
 8016754:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	1dba      	adds	r2, r7, #6
 801675a:	2152      	movs	r1, #82	@ 0x52
 801675c:	8812      	ldrh	r2, [r2, #0]
 801675e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2284      	movs	r2, #132	@ 0x84
 8016764:	2100      	movs	r1, #0
 8016766:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	2221      	movs	r2, #33	@ 0x21
 801676c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016772:	2b00      	cmp	r3, #0
 8016774:	d027      	beq.n	80167c6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801677a:	4a25      	ldr	r2, [pc, #148]	@ (8016810 <HAL_UART_Transmit_DMA+0x114>)
 801677c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016782:	4a24      	ldr	r2, [pc, #144]	@ (8016814 <HAL_UART_Transmit_DMA+0x118>)
 8016784:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801678a:	4a23      	ldr	r2, [pc, #140]	@ (8016818 <HAL_UART_Transmit_DMA+0x11c>)
 801678c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016792:	2200      	movs	r2, #0
 8016794:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801679e:	0019      	movs	r1, r3
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	3328      	adds	r3, #40	@ 0x28
 80167a6:	001a      	movs	r2, r3
 80167a8:	1dbb      	adds	r3, r7, #6
 80167aa:	881b      	ldrh	r3, [r3, #0]
 80167ac:	f7f8 f9e4 	bl	800eb78 <HAL_DMA_Start_IT>
 80167b0:	1e03      	subs	r3, r0, #0
 80167b2:	d008      	beq.n	80167c6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2284      	movs	r2, #132	@ 0x84
 80167b8:	2110      	movs	r1, #16
 80167ba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2220      	movs	r2, #32
 80167c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80167c2:	2301      	movs	r3, #1
 80167c4:	e01f      	b.n	8016806 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	2240      	movs	r2, #64	@ 0x40
 80167cc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167ce:	f3ef 8310 	mrs	r3, PRIMASK
 80167d2:	613b      	str	r3, [r7, #16]
  return(result);
 80167d4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80167d6:	61fb      	str	r3, [r7, #28]
 80167d8:	2301      	movs	r3, #1
 80167da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	f383 8810 	msr	PRIMASK, r3
}
 80167e2:	46c0      	nop			@ (mov r8, r8)
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	689a      	ldr	r2, [r3, #8]
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	2180      	movs	r1, #128	@ 0x80
 80167f0:	430a      	orrs	r2, r1
 80167f2:	609a      	str	r2, [r3, #8]
 80167f4:	69fb      	ldr	r3, [r7, #28]
 80167f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	f383 8810 	msr	PRIMASK, r3
}
 80167fe:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016800:	2300      	movs	r3, #0
 8016802:	e000      	b.n	8016806 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016804:	2302      	movs	r3, #2
  }
}
 8016806:	0018      	movs	r0, r3
 8016808:	46bd      	mov	sp, r7
 801680a:	b008      	add	sp, #32
 801680c:	bd80      	pop	{r7, pc}
 801680e:	46c0      	nop			@ (mov r8, r8)
 8016810:	08017c5d 	.word	0x08017c5d
 8016814:	08017cf9 	.word	0x08017cf9
 8016818:	08017e99 	.word	0x08017e99

0801681c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b088      	sub	sp, #32
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	1dbb      	adds	r3, r7, #6
 8016828:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	2280      	movs	r2, #128	@ 0x80
 801682e:	589b      	ldr	r3, [r3, r2]
 8016830:	2b20      	cmp	r3, #32
 8016832:	d14a      	bne.n	80168ca <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d003      	beq.n	8016842 <HAL_UART_Receive_DMA+0x26>
 801683a:	1dbb      	adds	r3, r7, #6
 801683c:	881b      	ldrh	r3, [r3, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d101      	bne.n	8016846 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016842:	2301      	movs	r3, #1
 8016844:	e042      	b.n	80168cc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	689a      	ldr	r2, [r3, #8]
 801684a:	2380      	movs	r3, #128	@ 0x80
 801684c:	015b      	lsls	r3, r3, #5
 801684e:	429a      	cmp	r2, r3
 8016850:	d109      	bne.n	8016866 <HAL_UART_Receive_DMA+0x4a>
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	691b      	ldr	r3, [r3, #16]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d105      	bne.n	8016866 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	2201      	movs	r2, #1
 801685e:	4013      	ands	r3, r2
 8016860:	d001      	beq.n	8016866 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016862:	2301      	movs	r3, #1
 8016864:	e032      	b.n	80168cc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2200      	movs	r2, #0
 801686a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4a18      	ldr	r2, [pc, #96]	@ (80168d4 <HAL_UART_Receive_DMA+0xb8>)
 8016872:	4293      	cmp	r3, r2
 8016874:	d020      	beq.n	80168b8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	685a      	ldr	r2, [r3, #4]
 801687c:	2380      	movs	r3, #128	@ 0x80
 801687e:	041b      	lsls	r3, r3, #16
 8016880:	4013      	ands	r3, r2
 8016882:	d019      	beq.n	80168b8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016884:	f3ef 8310 	mrs	r3, PRIMASK
 8016888:	613b      	str	r3, [r7, #16]
  return(result);
 801688a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801688c:	61fb      	str	r3, [r7, #28]
 801688e:	2301      	movs	r3, #1
 8016890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	f383 8810 	msr	PRIMASK, r3
}
 8016898:	46c0      	nop			@ (mov r8, r8)
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	681a      	ldr	r2, [r3, #0]
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2180      	movs	r1, #128	@ 0x80
 80168a6:	04c9      	lsls	r1, r1, #19
 80168a8:	430a      	orrs	r2, r1
 80168aa:	601a      	str	r2, [r3, #0]
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168b0:	69bb      	ldr	r3, [r7, #24]
 80168b2:	f383 8810 	msr	PRIMASK, r3
}
 80168b6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80168b8:	1dbb      	adds	r3, r7, #6
 80168ba:	881a      	ldrh	r2, [r3, #0]
 80168bc:	68b9      	ldr	r1, [r7, #8]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	0018      	movs	r0, r3
 80168c2:	f001 f8a3 	bl	8017a0c <UART_Start_Receive_DMA>
 80168c6:	0003      	movs	r3, r0
 80168c8:	e000      	b.n	80168cc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80168ca:	2302      	movs	r3, #2
  }
}
 80168cc:	0018      	movs	r0, r3
 80168ce:	46bd      	mov	sp, r7
 80168d0:	b008      	add	sp, #32
 80168d2:	bd80      	pop	{r7, pc}
 80168d4:	40004800 	.word	0x40004800

080168d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80168d8:	b590      	push	{r4, r7, lr}
 80168da:	b0ab      	sub	sp, #172	@ 0xac
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	69db      	ldr	r3, [r3, #28]
 80168e6:	22a4      	movs	r2, #164	@ 0xa4
 80168e8:	18b9      	adds	r1, r7, r2
 80168ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	20a0      	movs	r0, #160	@ 0xa0
 80168f4:	1839      	adds	r1, r7, r0
 80168f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	689b      	ldr	r3, [r3, #8]
 80168fe:	219c      	movs	r1, #156	@ 0x9c
 8016900:	1879      	adds	r1, r7, r1
 8016902:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016904:	0011      	movs	r1, r2
 8016906:	18bb      	adds	r3, r7, r2
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	4a9c      	ldr	r2, [pc, #624]	@ (8016b7c <HAL_UART_IRQHandler+0x2a4>)
 801690c:	4013      	ands	r3, r2
 801690e:	2298      	movs	r2, #152	@ 0x98
 8016910:	18bc      	adds	r4, r7, r2
 8016912:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016914:	18bb      	adds	r3, r7, r2
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d114      	bne.n	8016946 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801691c:	187b      	adds	r3, r7, r1
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2220      	movs	r2, #32
 8016922:	4013      	ands	r3, r2
 8016924:	d00f      	beq.n	8016946 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016926:	183b      	adds	r3, r7, r0
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2220      	movs	r2, #32
 801692c:	4013      	ands	r3, r2
 801692e:	d00a      	beq.n	8016946 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016934:	2b00      	cmp	r3, #0
 8016936:	d100      	bne.n	801693a <HAL_UART_IRQHandler+0x62>
 8016938:	e2aa      	b.n	8016e90 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801693e:	687a      	ldr	r2, [r7, #4]
 8016940:	0010      	movs	r0, r2
 8016942:	4798      	blx	r3
      }
      return;
 8016944:	e2a4      	b.n	8016e90 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016946:	2398      	movs	r3, #152	@ 0x98
 8016948:	18fb      	adds	r3, r7, r3
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d100      	bne.n	8016952 <HAL_UART_IRQHandler+0x7a>
 8016950:	e11a      	b.n	8016b88 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016952:	239c      	movs	r3, #156	@ 0x9c
 8016954:	18fb      	adds	r3, r7, r3
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2201      	movs	r2, #1
 801695a:	4013      	ands	r3, r2
 801695c:	d106      	bne.n	801696c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801695e:	23a0      	movs	r3, #160	@ 0xa0
 8016960:	18fb      	adds	r3, r7, r3
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	4a86      	ldr	r2, [pc, #536]	@ (8016b80 <HAL_UART_IRQHandler+0x2a8>)
 8016966:	4013      	ands	r3, r2
 8016968:	d100      	bne.n	801696c <HAL_UART_IRQHandler+0x94>
 801696a:	e10d      	b.n	8016b88 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801696c:	23a4      	movs	r3, #164	@ 0xa4
 801696e:	18fb      	adds	r3, r7, r3
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	2201      	movs	r2, #1
 8016974:	4013      	ands	r3, r2
 8016976:	d012      	beq.n	801699e <HAL_UART_IRQHandler+0xc6>
 8016978:	23a0      	movs	r3, #160	@ 0xa0
 801697a:	18fb      	adds	r3, r7, r3
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	2380      	movs	r3, #128	@ 0x80
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4013      	ands	r3, r2
 8016984:	d00b      	beq.n	801699e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	2201      	movs	r2, #1
 801698c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2284      	movs	r2, #132	@ 0x84
 8016992:	589b      	ldr	r3, [r3, r2]
 8016994:	2201      	movs	r2, #1
 8016996:	431a      	orrs	r2, r3
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2184      	movs	r1, #132	@ 0x84
 801699c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801699e:	23a4      	movs	r3, #164	@ 0xa4
 80169a0:	18fb      	adds	r3, r7, r3
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	2202      	movs	r2, #2
 80169a6:	4013      	ands	r3, r2
 80169a8:	d011      	beq.n	80169ce <HAL_UART_IRQHandler+0xf6>
 80169aa:	239c      	movs	r3, #156	@ 0x9c
 80169ac:	18fb      	adds	r3, r7, r3
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2201      	movs	r2, #1
 80169b2:	4013      	ands	r3, r2
 80169b4:	d00b      	beq.n	80169ce <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2202      	movs	r2, #2
 80169bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2284      	movs	r2, #132	@ 0x84
 80169c2:	589b      	ldr	r3, [r3, r2]
 80169c4:	2204      	movs	r2, #4
 80169c6:	431a      	orrs	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2184      	movs	r1, #132	@ 0x84
 80169cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80169ce:	23a4      	movs	r3, #164	@ 0xa4
 80169d0:	18fb      	adds	r3, r7, r3
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	2204      	movs	r2, #4
 80169d6:	4013      	ands	r3, r2
 80169d8:	d011      	beq.n	80169fe <HAL_UART_IRQHandler+0x126>
 80169da:	239c      	movs	r3, #156	@ 0x9c
 80169dc:	18fb      	adds	r3, r7, r3
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2201      	movs	r2, #1
 80169e2:	4013      	ands	r3, r2
 80169e4:	d00b      	beq.n	80169fe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	2204      	movs	r2, #4
 80169ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2284      	movs	r2, #132	@ 0x84
 80169f2:	589b      	ldr	r3, [r3, r2]
 80169f4:	2202      	movs	r2, #2
 80169f6:	431a      	orrs	r2, r3
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2184      	movs	r1, #132	@ 0x84
 80169fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80169fe:	23a4      	movs	r3, #164	@ 0xa4
 8016a00:	18fb      	adds	r3, r7, r3
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2208      	movs	r2, #8
 8016a06:	4013      	ands	r3, r2
 8016a08:	d017      	beq.n	8016a3a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016a0a:	23a0      	movs	r3, #160	@ 0xa0
 8016a0c:	18fb      	adds	r3, r7, r3
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	2220      	movs	r2, #32
 8016a12:	4013      	ands	r3, r2
 8016a14:	d105      	bne.n	8016a22 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016a16:	239c      	movs	r3, #156	@ 0x9c
 8016a18:	18fb      	adds	r3, r7, r3
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2201      	movs	r2, #1
 8016a1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016a20:	d00b      	beq.n	8016a3a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2208      	movs	r2, #8
 8016a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	2284      	movs	r2, #132	@ 0x84
 8016a2e:	589b      	ldr	r3, [r3, r2]
 8016a30:	2208      	movs	r2, #8
 8016a32:	431a      	orrs	r2, r3
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	2184      	movs	r1, #132	@ 0x84
 8016a38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016a3a:	23a4      	movs	r3, #164	@ 0xa4
 8016a3c:	18fb      	adds	r3, r7, r3
 8016a3e:	681a      	ldr	r2, [r3, #0]
 8016a40:	2380      	movs	r3, #128	@ 0x80
 8016a42:	011b      	lsls	r3, r3, #4
 8016a44:	4013      	ands	r3, r2
 8016a46:	d013      	beq.n	8016a70 <HAL_UART_IRQHandler+0x198>
 8016a48:	23a0      	movs	r3, #160	@ 0xa0
 8016a4a:	18fb      	adds	r3, r7, r3
 8016a4c:	681a      	ldr	r2, [r3, #0]
 8016a4e:	2380      	movs	r3, #128	@ 0x80
 8016a50:	04db      	lsls	r3, r3, #19
 8016a52:	4013      	ands	r3, r2
 8016a54:	d00c      	beq.n	8016a70 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2280      	movs	r2, #128	@ 0x80
 8016a5c:	0112      	lsls	r2, r2, #4
 8016a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2284      	movs	r2, #132	@ 0x84
 8016a64:	589b      	ldr	r3, [r3, r2]
 8016a66:	2220      	movs	r2, #32
 8016a68:	431a      	orrs	r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2184      	movs	r1, #132	@ 0x84
 8016a6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2284      	movs	r2, #132	@ 0x84
 8016a74:	589b      	ldr	r3, [r3, r2]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d100      	bne.n	8016a7c <HAL_UART_IRQHandler+0x1a4>
 8016a7a:	e20b      	b.n	8016e94 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8016a7c:	23a4      	movs	r3, #164	@ 0xa4
 8016a7e:	18fb      	adds	r3, r7, r3
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2220      	movs	r2, #32
 8016a84:	4013      	ands	r3, r2
 8016a86:	d00e      	beq.n	8016aa6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016a88:	23a0      	movs	r3, #160	@ 0xa0
 8016a8a:	18fb      	adds	r3, r7, r3
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2220      	movs	r2, #32
 8016a90:	4013      	ands	r3, r2
 8016a92:	d008      	beq.n	8016aa6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d004      	beq.n	8016aa6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	0010      	movs	r0, r2
 8016aa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2284      	movs	r2, #132	@ 0x84
 8016aaa:	589b      	ldr	r3, [r3, r2]
 8016aac:	2194      	movs	r1, #148	@ 0x94
 8016aae:	187a      	adds	r2, r7, r1
 8016ab0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	689b      	ldr	r3, [r3, #8]
 8016ab8:	2240      	movs	r2, #64	@ 0x40
 8016aba:	4013      	ands	r3, r2
 8016abc:	2b40      	cmp	r3, #64	@ 0x40
 8016abe:	d004      	beq.n	8016aca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016ac0:	187b      	adds	r3, r7, r1
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2228      	movs	r2, #40	@ 0x28
 8016ac6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016ac8:	d04b      	beq.n	8016b62 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	0018      	movs	r0, r3
 8016ace:	f001 f861 	bl	8017b94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	689b      	ldr	r3, [r3, #8]
 8016ad8:	2240      	movs	r2, #64	@ 0x40
 8016ada:	4013      	ands	r3, r2
 8016adc:	2b40      	cmp	r3, #64	@ 0x40
 8016ade:	d139      	bne.n	8016b54 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ae0:	f3ef 8310 	mrs	r3, PRIMASK
 8016ae4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016ae6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016ae8:	2090      	movs	r0, #144	@ 0x90
 8016aea:	183a      	adds	r2, r7, r0
 8016aec:	6013      	str	r3, [r2, #0]
 8016aee:	2301      	movs	r3, #1
 8016af0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016af2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016af4:	f383 8810 	msr	PRIMASK, r3
}
 8016af8:	46c0      	nop			@ (mov r8, r8)
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	689a      	ldr	r2, [r3, #8]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	2140      	movs	r1, #64	@ 0x40
 8016b06:	438a      	bics	r2, r1
 8016b08:	609a      	str	r2, [r3, #8]
 8016b0a:	183b      	adds	r3, r7, r0
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016b12:	f383 8810 	msr	PRIMASK, r3
}
 8016b16:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d012      	beq.n	8016b46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b24:	4a17      	ldr	r2, [pc, #92]	@ (8016b84 <HAL_UART_IRQHandler+0x2ac>)
 8016b26:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b2c:	0018      	movs	r0, r3
 8016b2e:	f7f8 f8c9 	bl	800ecc4 <HAL_DMA_Abort_IT>
 8016b32:	1e03      	subs	r3, r0, #0
 8016b34:	d020      	beq.n	8016b78 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b40:	0018      	movs	r0, r3
 8016b42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b44:	e018      	b.n	8016b78 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2298      	movs	r2, #152	@ 0x98
 8016b4a:	589b      	ldr	r3, [r3, r2]
 8016b4c:	687a      	ldr	r2, [r7, #4]
 8016b4e:	0010      	movs	r0, r2
 8016b50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b52:	e011      	b.n	8016b78 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2298      	movs	r2, #152	@ 0x98
 8016b58:	589b      	ldr	r3, [r3, r2]
 8016b5a:	687a      	ldr	r2, [r7, #4]
 8016b5c:	0010      	movs	r0, r2
 8016b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b60:	e00a      	b.n	8016b78 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	2298      	movs	r2, #152	@ 0x98
 8016b66:	589b      	ldr	r3, [r3, r2]
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	0010      	movs	r0, r2
 8016b6c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2284      	movs	r2, #132	@ 0x84
 8016b72:	2100      	movs	r1, #0
 8016b74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016b76:	e18d      	b.n	8016e94 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016b78:	46c0      	nop			@ (mov r8, r8)
    return;
 8016b7a:	e18b      	b.n	8016e94 <HAL_UART_IRQHandler+0x5bc>
 8016b7c:	0000080f 	.word	0x0000080f
 8016b80:	04000120 	.word	0x04000120
 8016b84:	08017f21 	.word	0x08017f21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016b8c:	2b01      	cmp	r3, #1
 8016b8e:	d000      	beq.n	8016b92 <HAL_UART_IRQHandler+0x2ba>
 8016b90:	e13d      	b.n	8016e0e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016b92:	23a4      	movs	r3, #164	@ 0xa4
 8016b94:	18fb      	adds	r3, r7, r3
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2210      	movs	r2, #16
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	d100      	bne.n	8016ba0 <HAL_UART_IRQHandler+0x2c8>
 8016b9e:	e136      	b.n	8016e0e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016ba0:	23a0      	movs	r3, #160	@ 0xa0
 8016ba2:	18fb      	adds	r3, r7, r3
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2210      	movs	r2, #16
 8016ba8:	4013      	ands	r3, r2
 8016baa:	d100      	bne.n	8016bae <HAL_UART_IRQHandler+0x2d6>
 8016bac:	e12f      	b.n	8016e0e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	2210      	movs	r2, #16
 8016bb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	689b      	ldr	r3, [r3, #8]
 8016bbc:	2240      	movs	r2, #64	@ 0x40
 8016bbe:	4013      	ands	r3, r2
 8016bc0:	2b40      	cmp	r3, #64	@ 0x40
 8016bc2:	d000      	beq.n	8016bc6 <HAL_UART_IRQHandler+0x2ee>
 8016bc4:	e0a2      	b.n	8016d0c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	685a      	ldr	r2, [r3, #4]
 8016bce:	217e      	movs	r1, #126	@ 0x7e
 8016bd0:	187b      	adds	r3, r7, r1
 8016bd2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016bd4:	187b      	adds	r3, r7, r1
 8016bd6:	881b      	ldrh	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d100      	bne.n	8016bde <HAL_UART_IRQHandler+0x306>
 8016bdc:	e15c      	b.n	8016e98 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2258      	movs	r2, #88	@ 0x58
 8016be2:	5a9b      	ldrh	r3, [r3, r2]
 8016be4:	187a      	adds	r2, r7, r1
 8016be6:	8812      	ldrh	r2, [r2, #0]
 8016be8:	429a      	cmp	r2, r3
 8016bea:	d300      	bcc.n	8016bee <HAL_UART_IRQHandler+0x316>
 8016bec:	e154      	b.n	8016e98 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	187a      	adds	r2, r7, r1
 8016bf2:	215a      	movs	r1, #90	@ 0x5a
 8016bf4:	8812      	ldrh	r2, [r2, #0]
 8016bf6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2220      	movs	r2, #32
 8016c02:	4013      	ands	r3, r2
 8016c04:	d16f      	bne.n	8016ce6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c06:	f3ef 8310 	mrs	r3, PRIMASK
 8016c0a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016c0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016c10:	2301      	movs	r3, #1
 8016c12:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c16:	f383 8810 	msr	PRIMASK, r3
}
 8016c1a:	46c0      	nop			@ (mov r8, r8)
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	49a0      	ldr	r1, [pc, #640]	@ (8016ea8 <HAL_UART_IRQHandler+0x5d0>)
 8016c28:	400a      	ands	r2, r1
 8016c2a:	601a      	str	r2, [r3, #0]
 8016c2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016c32:	f383 8810 	msr	PRIMASK, r3
}
 8016c36:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c38:	f3ef 8310 	mrs	r3, PRIMASK
 8016c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c40:	677b      	str	r3, [r7, #116]	@ 0x74
 8016c42:	2301      	movs	r3, #1
 8016c44:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016c48:	f383 8810 	msr	PRIMASK, r3
}
 8016c4c:	46c0      	nop			@ (mov r8, r8)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	689a      	ldr	r2, [r3, #8]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2101      	movs	r1, #1
 8016c5a:	438a      	bics	r2, r1
 8016c5c:	609a      	str	r2, [r3, #8]
 8016c5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016c60:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c64:	f383 8810 	msr	PRIMASK, r3
}
 8016c68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8016c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c72:	673b      	str	r3, [r7, #112]	@ 0x70
 8016c74:	2301      	movs	r3, #1
 8016c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016c7a:	f383 8810 	msr	PRIMASK, r3
}
 8016c7e:	46c0      	nop			@ (mov r8, r8)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	689a      	ldr	r2, [r3, #8]
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2140      	movs	r1, #64	@ 0x40
 8016c8c:	438a      	bics	r2, r1
 8016c8e:	609a      	str	r2, [r3, #8]
 8016c90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016c92:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016c96:	f383 8810 	msr	PRIMASK, r3
}
 8016c9a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2280      	movs	r2, #128	@ 0x80
 8016ca0:	2120      	movs	r1, #32
 8016ca2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016caa:	f3ef 8310 	mrs	r3, PRIMASK
 8016cae:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016cb4:	2301      	movs	r3, #1
 8016cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016cba:	f383 8810 	msr	PRIMASK, r3
}
 8016cbe:	46c0      	nop			@ (mov r8, r8)
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2110      	movs	r1, #16
 8016ccc:	438a      	bics	r2, r1
 8016cce:	601a      	str	r2, [r3, #0]
 8016cd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016cd6:	f383 8810 	msr	PRIMASK, r3
}
 8016cda:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016ce0:	0018      	movs	r0, r3
 8016ce2:	f7f7 ffaf 	bl	800ec44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2202      	movs	r2, #2
 8016cea:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	22ac      	movs	r2, #172	@ 0xac
 8016cf0:	589b      	ldr	r3, [r3, r2]
 8016cf2:	687a      	ldr	r2, [r7, #4]
 8016cf4:	2158      	movs	r1, #88	@ 0x58
 8016cf6:	5a51      	ldrh	r1, [r2, r1]
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	205a      	movs	r0, #90	@ 0x5a
 8016cfc:	5a12      	ldrh	r2, [r2, r0]
 8016cfe:	b292      	uxth	r2, r2
 8016d00:	1a8a      	subs	r2, r1, r2
 8016d02:	b291      	uxth	r1, r2
 8016d04:	687a      	ldr	r2, [r7, #4]
 8016d06:	0010      	movs	r0, r2
 8016d08:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016d0a:	e0c5      	b.n	8016e98 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2258      	movs	r2, #88	@ 0x58
 8016d10:	5a99      	ldrh	r1, [r3, r2]
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	225a      	movs	r2, #90	@ 0x5a
 8016d16:	5a9b      	ldrh	r3, [r3, r2]
 8016d18:	b29a      	uxth	r2, r3
 8016d1a:	208e      	movs	r0, #142	@ 0x8e
 8016d1c:	183b      	adds	r3, r7, r0
 8016d1e:	1a8a      	subs	r2, r1, r2
 8016d20:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	225a      	movs	r2, #90	@ 0x5a
 8016d26:	5a9b      	ldrh	r3, [r3, r2]
 8016d28:	b29b      	uxth	r3, r3
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d100      	bne.n	8016d30 <HAL_UART_IRQHandler+0x458>
 8016d2e:	e0b5      	b.n	8016e9c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016d30:	183b      	adds	r3, r7, r0
 8016d32:	881b      	ldrh	r3, [r3, #0]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d100      	bne.n	8016d3a <HAL_UART_IRQHandler+0x462>
 8016d38:	e0b0      	b.n	8016e9c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8016d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d40:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d42:	2488      	movs	r4, #136	@ 0x88
 8016d44:	193a      	adds	r2, r7, r4
 8016d46:	6013      	str	r3, [r2, #0]
 8016d48:	2301      	movs	r3, #1
 8016d4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	f383 8810 	msr	PRIMASK, r3
}
 8016d52:	46c0      	nop			@ (mov r8, r8)
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	4953      	ldr	r1, [pc, #332]	@ (8016eac <HAL_UART_IRQHandler+0x5d4>)
 8016d60:	400a      	ands	r2, r1
 8016d62:	601a      	str	r2, [r3, #0]
 8016d64:	193b      	adds	r3, r7, r4
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	f383 8810 	msr	PRIMASK, r3
}
 8016d70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d72:	f3ef 8310 	mrs	r3, PRIMASK
 8016d76:	61bb      	str	r3, [r7, #24]
  return(result);
 8016d78:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d7a:	2484      	movs	r4, #132	@ 0x84
 8016d7c:	193a      	adds	r2, r7, r4
 8016d7e:	6013      	str	r3, [r2, #0]
 8016d80:	2301      	movs	r3, #1
 8016d82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d84:	69fb      	ldr	r3, [r7, #28]
 8016d86:	f383 8810 	msr	PRIMASK, r3
}
 8016d8a:	46c0      	nop			@ (mov r8, r8)
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	689a      	ldr	r2, [r3, #8]
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	2101      	movs	r1, #1
 8016d98:	438a      	bics	r2, r1
 8016d9a:	609a      	str	r2, [r3, #8]
 8016d9c:	193b      	adds	r3, r7, r4
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016da2:	6a3b      	ldr	r3, [r7, #32]
 8016da4:	f383 8810 	msr	PRIMASK, r3
}
 8016da8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2280      	movs	r2, #128	@ 0x80
 8016dae:	2120      	movs	r1, #32
 8016db0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2200      	movs	r2, #0
 8016db6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8016dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016dc6:	2480      	movs	r4, #128	@ 0x80
 8016dc8:	193a      	adds	r2, r7, r4
 8016dca:	6013      	str	r3, [r2, #0]
 8016dcc:	2301      	movs	r3, #1
 8016dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dd2:	f383 8810 	msr	PRIMASK, r3
}
 8016dd6:	46c0      	nop			@ (mov r8, r8)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2110      	movs	r1, #16
 8016de4:	438a      	bics	r2, r1
 8016de6:	601a      	str	r2, [r3, #0]
 8016de8:	193b      	adds	r3, r7, r4
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016df0:	f383 8810 	msr	PRIMASK, r3
}
 8016df4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2202      	movs	r2, #2
 8016dfa:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	22ac      	movs	r2, #172	@ 0xac
 8016e00:	589b      	ldr	r3, [r3, r2]
 8016e02:	183a      	adds	r2, r7, r0
 8016e04:	8811      	ldrh	r1, [r2, #0]
 8016e06:	687a      	ldr	r2, [r7, #4]
 8016e08:	0010      	movs	r0, r2
 8016e0a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016e0c:	e046      	b.n	8016e9c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016e0e:	23a4      	movs	r3, #164	@ 0xa4
 8016e10:	18fb      	adds	r3, r7, r3
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	2380      	movs	r3, #128	@ 0x80
 8016e16:	035b      	lsls	r3, r3, #13
 8016e18:	4013      	ands	r3, r2
 8016e1a:	d012      	beq.n	8016e42 <HAL_UART_IRQHandler+0x56a>
 8016e1c:	239c      	movs	r3, #156	@ 0x9c
 8016e1e:	18fb      	adds	r3, r7, r3
 8016e20:	681a      	ldr	r2, [r3, #0]
 8016e22:	2380      	movs	r3, #128	@ 0x80
 8016e24:	03db      	lsls	r3, r3, #15
 8016e26:	4013      	ands	r3, r2
 8016e28:	d00b      	beq.n	8016e42 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2280      	movs	r2, #128	@ 0x80
 8016e30:	0352      	lsls	r2, r2, #13
 8016e32:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	22a8      	movs	r2, #168	@ 0xa8
 8016e38:	589b      	ldr	r3, [r3, r2]
 8016e3a:	687a      	ldr	r2, [r7, #4]
 8016e3c:	0010      	movs	r0, r2
 8016e3e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016e40:	e02f      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8016e42:	23a4      	movs	r3, #164	@ 0xa4
 8016e44:	18fb      	adds	r3, r7, r3
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2280      	movs	r2, #128	@ 0x80
 8016e4a:	4013      	ands	r3, r2
 8016e4c:	d00f      	beq.n	8016e6e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016e4e:	23a0      	movs	r3, #160	@ 0xa0
 8016e50:	18fb      	adds	r3, r7, r3
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2280      	movs	r2, #128	@ 0x80
 8016e56:	4013      	ands	r3, r2
 8016e58:	d009      	beq.n	8016e6e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d01e      	beq.n	8016ea0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016e66:	687a      	ldr	r2, [r7, #4]
 8016e68:	0010      	movs	r0, r2
 8016e6a:	4798      	blx	r3
    }
    return;
 8016e6c:	e018      	b.n	8016ea0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016e6e:	23a4      	movs	r3, #164	@ 0xa4
 8016e70:	18fb      	adds	r3, r7, r3
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2240      	movs	r2, #64	@ 0x40
 8016e76:	4013      	ands	r3, r2
 8016e78:	d013      	beq.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
 8016e7a:	23a0      	movs	r3, #160	@ 0xa0
 8016e7c:	18fb      	adds	r3, r7, r3
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2240      	movs	r2, #64	@ 0x40
 8016e82:	4013      	ands	r3, r2
 8016e84:	d00d      	beq.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	0018      	movs	r0, r3
 8016e8a:	f001 f862 	bl	8017f52 <UART_EndTransmit_IT>
    return;
 8016e8e:	e008      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016e90:	46c0      	nop			@ (mov r8, r8)
 8016e92:	e006      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016e94:	46c0      	nop			@ (mov r8, r8)
 8016e96:	e004      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016e98:	46c0      	nop			@ (mov r8, r8)
 8016e9a:	e002      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016e9c:	46c0      	nop			@ (mov r8, r8)
 8016e9e:	e000      	b.n	8016ea2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016ea0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	b02b      	add	sp, #172	@ 0xac
 8016ea6:	bd90      	pop	{r4, r7, pc}
 8016ea8:	fffffeff 	.word	0xfffffeff
 8016eac:	fffffedf 	.word	0xfffffedf

08016eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b082      	sub	sp, #8
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016eb8:	46c0      	nop			@ (mov r8, r8)
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	b002      	add	sp, #8
 8016ebe:	bd80      	pop	{r7, pc}

08016ec0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b082      	sub	sp, #8
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016ec8:	46c0      	nop			@ (mov r8, r8)
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	b002      	add	sp, #8
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b082      	sub	sp, #8
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016ed8:	46c0      	nop			@ (mov r8, r8)
 8016eda:	46bd      	mov	sp, r7
 8016edc:	b002      	add	sp, #8
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016ee8:	46c0      	nop			@ (mov r8, r8)
 8016eea:	46bd      	mov	sp, r7
 8016eec:	b002      	add	sp, #8
 8016eee:	bd80      	pop	{r7, pc}

08016ef0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016ef8:	46c0      	nop			@ (mov r8, r8)
 8016efa:	46bd      	mov	sp, r7
 8016efc:	b002      	add	sp, #8
 8016efe:	bd80      	pop	{r7, pc}

08016f00 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016f08:	46c0      	nop			@ (mov r8, r8)
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	b002      	add	sp, #8
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	000a      	movs	r2, r1
 8016f1a:	1cbb      	adds	r3, r7, #2
 8016f1c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016f1e:	46c0      	nop			@ (mov r8, r8)
 8016f20:	46bd      	mov	sp, r7
 8016f22:	b002      	add	sp, #8
 8016f24:	bd80      	pop	{r7, pc}
	...

08016f28 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	2188      	movs	r1, #136	@ 0x88
 8016f34:	4a14      	ldr	r2, [pc, #80]	@ (8016f88 <UART_InitCallbacksToDefault+0x60>)
 8016f36:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	218c      	movs	r1, #140	@ 0x8c
 8016f3c:	4a13      	ldr	r2, [pc, #76]	@ (8016f8c <UART_InitCallbacksToDefault+0x64>)
 8016f3e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2190      	movs	r1, #144	@ 0x90
 8016f44:	4a12      	ldr	r2, [pc, #72]	@ (8016f90 <UART_InitCallbacksToDefault+0x68>)
 8016f46:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2194      	movs	r1, #148	@ 0x94
 8016f4c:	4a11      	ldr	r2, [pc, #68]	@ (8016f94 <UART_InitCallbacksToDefault+0x6c>)
 8016f4e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2198      	movs	r1, #152	@ 0x98
 8016f54:	4a10      	ldr	r2, [pc, #64]	@ (8016f98 <UART_InitCallbacksToDefault+0x70>)
 8016f56:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	219c      	movs	r1, #156	@ 0x9c
 8016f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8016f9c <UART_InitCallbacksToDefault+0x74>)
 8016f5e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	21a0      	movs	r1, #160	@ 0xa0
 8016f64:	4a0e      	ldr	r2, [pc, #56]	@ (8016fa0 <UART_InitCallbacksToDefault+0x78>)
 8016f66:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	21a4      	movs	r1, #164	@ 0xa4
 8016f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8016fa4 <UART_InitCallbacksToDefault+0x7c>)
 8016f6e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	21a8      	movs	r1, #168	@ 0xa8
 8016f74:	4a0c      	ldr	r2, [pc, #48]	@ (8016fa8 <UART_InitCallbacksToDefault+0x80>)
 8016f76:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	21ac      	movs	r1, #172	@ 0xac
 8016f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8016fac <UART_InitCallbacksToDefault+0x84>)
 8016f7e:	505a      	str	r2, [r3, r1]

}
 8016f80:	46c0      	nop			@ (mov r8, r8)
 8016f82:	46bd      	mov	sp, r7
 8016f84:	b002      	add	sp, #8
 8016f86:	bd80      	pop	{r7, pc}
 8016f88:	08016ec1 	.word	0x08016ec1
 8016f8c:	08016eb1 	.word	0x08016eb1
 8016f90:	08016ed1 	.word	0x08016ed1
 8016f94:	08008241 	.word	0x08008241
 8016f98:	08003bd1 	.word	0x08003bd1
 8016f9c:	08016ee1 	.word	0x08016ee1
 8016fa0:	08016ef1 	.word	0x08016ef1
 8016fa4:	08016f01 	.word	0x08016f01
 8016fa8:	08018345 	.word	0x08018345
 8016fac:	08016f11 	.word	0x08016f11

08016fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016fb0:	b5b0      	push	{r4, r5, r7, lr}
 8016fb2:	b08e      	sub	sp, #56	@ 0x38
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016fb8:	231a      	movs	r3, #26
 8016fba:	2218      	movs	r2, #24
 8016fbc:	189b      	adds	r3, r3, r2
 8016fbe:	19db      	adds	r3, r3, r7
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016fc4:	69fb      	ldr	r3, [r7, #28]
 8016fc6:	689a      	ldr	r2, [r3, #8]
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	691b      	ldr	r3, [r3, #16]
 8016fcc:	431a      	orrs	r2, r3
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	695b      	ldr	r3, [r3, #20]
 8016fd2:	431a      	orrs	r2, r3
 8016fd4:	69fb      	ldr	r3, [r7, #28]
 8016fd6:	69db      	ldr	r3, [r3, #28]
 8016fd8:	4313      	orrs	r3, r2
 8016fda:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016fdc:	69fb      	ldr	r3, [r7, #28]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4ac3      	ldr	r2, [pc, #780]	@ (80172f0 <UART_SetConfig+0x340>)
 8016fe4:	4013      	ands	r3, r2
 8016fe6:	0019      	movs	r1, r3
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016fee:	430a      	orrs	r2, r1
 8016ff0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	4abe      	ldr	r2, [pc, #760]	@ (80172f4 <UART_SetConfig+0x344>)
 8016ffa:	4013      	ands	r3, r2
 8016ffc:	0019      	movs	r1, r3
 8016ffe:	69fb      	ldr	r3, [r7, #28]
 8017000:	68da      	ldr	r2, [r3, #12]
 8017002:	69fb      	ldr	r3, [r7, #28]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	430a      	orrs	r2, r1
 8017008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	699b      	ldr	r3, [r3, #24]
 801700e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	4ab8      	ldr	r2, [pc, #736]	@ (80172f8 <UART_SetConfig+0x348>)
 8017016:	4293      	cmp	r3, r2
 8017018:	d004      	beq.n	8017024 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801701a:	69fb      	ldr	r3, [r7, #28]
 801701c:	6a1b      	ldr	r3, [r3, #32]
 801701e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017020:	4313      	orrs	r3, r2
 8017022:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017024:	69fb      	ldr	r3, [r7, #28]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	689b      	ldr	r3, [r3, #8]
 801702a:	4ab4      	ldr	r2, [pc, #720]	@ (80172fc <UART_SetConfig+0x34c>)
 801702c:	4013      	ands	r3, r2
 801702e:	0019      	movs	r1, r3
 8017030:	69fb      	ldr	r3, [r7, #28]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017036:	430a      	orrs	r2, r1
 8017038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	4ab0      	ldr	r2, [pc, #704]	@ (8017300 <UART_SetConfig+0x350>)
 8017040:	4293      	cmp	r3, r2
 8017042:	d131      	bne.n	80170a8 <UART_SetConfig+0xf8>
 8017044:	4baf      	ldr	r3, [pc, #700]	@ (8017304 <UART_SetConfig+0x354>)
 8017046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017048:	2203      	movs	r2, #3
 801704a:	4013      	ands	r3, r2
 801704c:	2b03      	cmp	r3, #3
 801704e:	d01d      	beq.n	801708c <UART_SetConfig+0xdc>
 8017050:	d823      	bhi.n	801709a <UART_SetConfig+0xea>
 8017052:	2b02      	cmp	r3, #2
 8017054:	d00c      	beq.n	8017070 <UART_SetConfig+0xc0>
 8017056:	d820      	bhi.n	801709a <UART_SetConfig+0xea>
 8017058:	2b00      	cmp	r3, #0
 801705a:	d002      	beq.n	8017062 <UART_SetConfig+0xb2>
 801705c:	2b01      	cmp	r3, #1
 801705e:	d00e      	beq.n	801707e <UART_SetConfig+0xce>
 8017060:	e01b      	b.n	801709a <UART_SetConfig+0xea>
 8017062:	231b      	movs	r3, #27
 8017064:	2218      	movs	r2, #24
 8017066:	189b      	adds	r3, r3, r2
 8017068:	19db      	adds	r3, r3, r7
 801706a:	2201      	movs	r2, #1
 801706c:	701a      	strb	r2, [r3, #0]
 801706e:	e0b4      	b.n	80171da <UART_SetConfig+0x22a>
 8017070:	231b      	movs	r3, #27
 8017072:	2218      	movs	r2, #24
 8017074:	189b      	adds	r3, r3, r2
 8017076:	19db      	adds	r3, r3, r7
 8017078:	2202      	movs	r2, #2
 801707a:	701a      	strb	r2, [r3, #0]
 801707c:	e0ad      	b.n	80171da <UART_SetConfig+0x22a>
 801707e:	231b      	movs	r3, #27
 8017080:	2218      	movs	r2, #24
 8017082:	189b      	adds	r3, r3, r2
 8017084:	19db      	adds	r3, r3, r7
 8017086:	2204      	movs	r2, #4
 8017088:	701a      	strb	r2, [r3, #0]
 801708a:	e0a6      	b.n	80171da <UART_SetConfig+0x22a>
 801708c:	231b      	movs	r3, #27
 801708e:	2218      	movs	r2, #24
 8017090:	189b      	adds	r3, r3, r2
 8017092:	19db      	adds	r3, r3, r7
 8017094:	2208      	movs	r2, #8
 8017096:	701a      	strb	r2, [r3, #0]
 8017098:	e09f      	b.n	80171da <UART_SetConfig+0x22a>
 801709a:	231b      	movs	r3, #27
 801709c:	2218      	movs	r2, #24
 801709e:	189b      	adds	r3, r3, r2
 80170a0:	19db      	adds	r3, r3, r7
 80170a2:	2210      	movs	r2, #16
 80170a4:	701a      	strb	r2, [r3, #0]
 80170a6:	e098      	b.n	80171da <UART_SetConfig+0x22a>
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	4a96      	ldr	r2, [pc, #600]	@ (8017308 <UART_SetConfig+0x358>)
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d131      	bne.n	8017116 <UART_SetConfig+0x166>
 80170b2:	4b94      	ldr	r3, [pc, #592]	@ (8017304 <UART_SetConfig+0x354>)
 80170b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80170b6:	220c      	movs	r2, #12
 80170b8:	4013      	ands	r3, r2
 80170ba:	2b0c      	cmp	r3, #12
 80170bc:	d01d      	beq.n	80170fa <UART_SetConfig+0x14a>
 80170be:	d823      	bhi.n	8017108 <UART_SetConfig+0x158>
 80170c0:	2b08      	cmp	r3, #8
 80170c2:	d00c      	beq.n	80170de <UART_SetConfig+0x12e>
 80170c4:	d820      	bhi.n	8017108 <UART_SetConfig+0x158>
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d002      	beq.n	80170d0 <UART_SetConfig+0x120>
 80170ca:	2b04      	cmp	r3, #4
 80170cc:	d00e      	beq.n	80170ec <UART_SetConfig+0x13c>
 80170ce:	e01b      	b.n	8017108 <UART_SetConfig+0x158>
 80170d0:	231b      	movs	r3, #27
 80170d2:	2218      	movs	r2, #24
 80170d4:	189b      	adds	r3, r3, r2
 80170d6:	19db      	adds	r3, r3, r7
 80170d8:	2200      	movs	r2, #0
 80170da:	701a      	strb	r2, [r3, #0]
 80170dc:	e07d      	b.n	80171da <UART_SetConfig+0x22a>
 80170de:	231b      	movs	r3, #27
 80170e0:	2218      	movs	r2, #24
 80170e2:	189b      	adds	r3, r3, r2
 80170e4:	19db      	adds	r3, r3, r7
 80170e6:	2202      	movs	r2, #2
 80170e8:	701a      	strb	r2, [r3, #0]
 80170ea:	e076      	b.n	80171da <UART_SetConfig+0x22a>
 80170ec:	231b      	movs	r3, #27
 80170ee:	2218      	movs	r2, #24
 80170f0:	189b      	adds	r3, r3, r2
 80170f2:	19db      	adds	r3, r3, r7
 80170f4:	2204      	movs	r2, #4
 80170f6:	701a      	strb	r2, [r3, #0]
 80170f8:	e06f      	b.n	80171da <UART_SetConfig+0x22a>
 80170fa:	231b      	movs	r3, #27
 80170fc:	2218      	movs	r2, #24
 80170fe:	189b      	adds	r3, r3, r2
 8017100:	19db      	adds	r3, r3, r7
 8017102:	2208      	movs	r2, #8
 8017104:	701a      	strb	r2, [r3, #0]
 8017106:	e068      	b.n	80171da <UART_SetConfig+0x22a>
 8017108:	231b      	movs	r3, #27
 801710a:	2218      	movs	r2, #24
 801710c:	189b      	adds	r3, r3, r2
 801710e:	19db      	adds	r3, r3, r7
 8017110:	2210      	movs	r2, #16
 8017112:	701a      	strb	r2, [r3, #0]
 8017114:	e061      	b.n	80171da <UART_SetConfig+0x22a>
 8017116:	69fb      	ldr	r3, [r7, #28]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	4a7c      	ldr	r2, [pc, #496]	@ (801730c <UART_SetConfig+0x35c>)
 801711c:	4293      	cmp	r3, r2
 801711e:	d106      	bne.n	801712e <UART_SetConfig+0x17e>
 8017120:	231b      	movs	r3, #27
 8017122:	2218      	movs	r2, #24
 8017124:	189b      	adds	r3, r3, r2
 8017126:	19db      	adds	r3, r3, r7
 8017128:	2200      	movs	r2, #0
 801712a:	701a      	strb	r2, [r3, #0]
 801712c:	e055      	b.n	80171da <UART_SetConfig+0x22a>
 801712e:	69fb      	ldr	r3, [r7, #28]
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	4a77      	ldr	r2, [pc, #476]	@ (8017310 <UART_SetConfig+0x360>)
 8017134:	4293      	cmp	r3, r2
 8017136:	d106      	bne.n	8017146 <UART_SetConfig+0x196>
 8017138:	231b      	movs	r3, #27
 801713a:	2218      	movs	r2, #24
 801713c:	189b      	adds	r3, r3, r2
 801713e:	19db      	adds	r3, r3, r7
 8017140:	2200      	movs	r2, #0
 8017142:	701a      	strb	r2, [r3, #0]
 8017144:	e049      	b.n	80171da <UART_SetConfig+0x22a>
 8017146:	69fb      	ldr	r3, [r7, #28]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	4a6b      	ldr	r2, [pc, #428]	@ (80172f8 <UART_SetConfig+0x348>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d13e      	bne.n	80171ce <UART_SetConfig+0x21e>
 8017150:	4b6c      	ldr	r3, [pc, #432]	@ (8017304 <UART_SetConfig+0x354>)
 8017152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017154:	23c0      	movs	r3, #192	@ 0xc0
 8017156:	011b      	lsls	r3, r3, #4
 8017158:	4013      	ands	r3, r2
 801715a:	22c0      	movs	r2, #192	@ 0xc0
 801715c:	0112      	lsls	r2, r2, #4
 801715e:	4293      	cmp	r3, r2
 8017160:	d027      	beq.n	80171b2 <UART_SetConfig+0x202>
 8017162:	22c0      	movs	r2, #192	@ 0xc0
 8017164:	0112      	lsls	r2, r2, #4
 8017166:	4293      	cmp	r3, r2
 8017168:	d82a      	bhi.n	80171c0 <UART_SetConfig+0x210>
 801716a:	2280      	movs	r2, #128	@ 0x80
 801716c:	0112      	lsls	r2, r2, #4
 801716e:	4293      	cmp	r3, r2
 8017170:	d011      	beq.n	8017196 <UART_SetConfig+0x1e6>
 8017172:	2280      	movs	r2, #128	@ 0x80
 8017174:	0112      	lsls	r2, r2, #4
 8017176:	4293      	cmp	r3, r2
 8017178:	d822      	bhi.n	80171c0 <UART_SetConfig+0x210>
 801717a:	2b00      	cmp	r3, #0
 801717c:	d004      	beq.n	8017188 <UART_SetConfig+0x1d8>
 801717e:	2280      	movs	r2, #128	@ 0x80
 8017180:	00d2      	lsls	r2, r2, #3
 8017182:	4293      	cmp	r3, r2
 8017184:	d00e      	beq.n	80171a4 <UART_SetConfig+0x1f4>
 8017186:	e01b      	b.n	80171c0 <UART_SetConfig+0x210>
 8017188:	231b      	movs	r3, #27
 801718a:	2218      	movs	r2, #24
 801718c:	189b      	adds	r3, r3, r2
 801718e:	19db      	adds	r3, r3, r7
 8017190:	2200      	movs	r2, #0
 8017192:	701a      	strb	r2, [r3, #0]
 8017194:	e021      	b.n	80171da <UART_SetConfig+0x22a>
 8017196:	231b      	movs	r3, #27
 8017198:	2218      	movs	r2, #24
 801719a:	189b      	adds	r3, r3, r2
 801719c:	19db      	adds	r3, r3, r7
 801719e:	2202      	movs	r2, #2
 80171a0:	701a      	strb	r2, [r3, #0]
 80171a2:	e01a      	b.n	80171da <UART_SetConfig+0x22a>
 80171a4:	231b      	movs	r3, #27
 80171a6:	2218      	movs	r2, #24
 80171a8:	189b      	adds	r3, r3, r2
 80171aa:	19db      	adds	r3, r3, r7
 80171ac:	2204      	movs	r2, #4
 80171ae:	701a      	strb	r2, [r3, #0]
 80171b0:	e013      	b.n	80171da <UART_SetConfig+0x22a>
 80171b2:	231b      	movs	r3, #27
 80171b4:	2218      	movs	r2, #24
 80171b6:	189b      	adds	r3, r3, r2
 80171b8:	19db      	adds	r3, r3, r7
 80171ba:	2208      	movs	r2, #8
 80171bc:	701a      	strb	r2, [r3, #0]
 80171be:	e00c      	b.n	80171da <UART_SetConfig+0x22a>
 80171c0:	231b      	movs	r3, #27
 80171c2:	2218      	movs	r2, #24
 80171c4:	189b      	adds	r3, r3, r2
 80171c6:	19db      	adds	r3, r3, r7
 80171c8:	2210      	movs	r2, #16
 80171ca:	701a      	strb	r2, [r3, #0]
 80171cc:	e005      	b.n	80171da <UART_SetConfig+0x22a>
 80171ce:	231b      	movs	r3, #27
 80171d0:	2218      	movs	r2, #24
 80171d2:	189b      	adds	r3, r3, r2
 80171d4:	19db      	adds	r3, r3, r7
 80171d6:	2210      	movs	r2, #16
 80171d8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80171da:	69fb      	ldr	r3, [r7, #28]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	4a46      	ldr	r2, [pc, #280]	@ (80172f8 <UART_SetConfig+0x348>)
 80171e0:	4293      	cmp	r3, r2
 80171e2:	d000      	beq.n	80171e6 <UART_SetConfig+0x236>
 80171e4:	e09a      	b.n	801731c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80171e6:	231b      	movs	r3, #27
 80171e8:	2218      	movs	r2, #24
 80171ea:	189b      	adds	r3, r3, r2
 80171ec:	19db      	adds	r3, r3, r7
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	2b08      	cmp	r3, #8
 80171f2:	d01d      	beq.n	8017230 <UART_SetConfig+0x280>
 80171f4:	dc20      	bgt.n	8017238 <UART_SetConfig+0x288>
 80171f6:	2b04      	cmp	r3, #4
 80171f8:	d015      	beq.n	8017226 <UART_SetConfig+0x276>
 80171fa:	dc1d      	bgt.n	8017238 <UART_SetConfig+0x288>
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d002      	beq.n	8017206 <UART_SetConfig+0x256>
 8017200:	2b02      	cmp	r3, #2
 8017202:	d005      	beq.n	8017210 <UART_SetConfig+0x260>
 8017204:	e018      	b.n	8017238 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017206:	f7fd fe4b 	bl	8014ea0 <HAL_RCC_GetPCLK1Freq>
 801720a:	0003      	movs	r3, r0
 801720c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801720e:	e01c      	b.n	801724a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017210:	4b3c      	ldr	r3, [pc, #240]	@ (8017304 <UART_SetConfig+0x354>)
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	2210      	movs	r2, #16
 8017216:	4013      	ands	r3, r2
 8017218:	d002      	beq.n	8017220 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801721a:	4b3e      	ldr	r3, [pc, #248]	@ (8017314 <UART_SetConfig+0x364>)
 801721c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801721e:	e014      	b.n	801724a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017220:	4b3d      	ldr	r3, [pc, #244]	@ (8017318 <UART_SetConfig+0x368>)
 8017222:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017224:	e011      	b.n	801724a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017226:	f7fd fd8b 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 801722a:	0003      	movs	r3, r0
 801722c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801722e:	e00c      	b.n	801724a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017230:	2380      	movs	r3, #128	@ 0x80
 8017232:	021b      	lsls	r3, r3, #8
 8017234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017236:	e008      	b.n	801724a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017238:	2300      	movs	r3, #0
 801723a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801723c:	231a      	movs	r3, #26
 801723e:	2218      	movs	r2, #24
 8017240:	189b      	adds	r3, r3, r2
 8017242:	19db      	adds	r3, r3, r7
 8017244:	2201      	movs	r2, #1
 8017246:	701a      	strb	r2, [r3, #0]
        break;
 8017248:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801724a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801724c:	2b00      	cmp	r3, #0
 801724e:	d100      	bne.n	8017252 <UART_SetConfig+0x2a2>
 8017250:	e133      	b.n	80174ba <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017252:	69fb      	ldr	r3, [r7, #28]
 8017254:	685a      	ldr	r2, [r3, #4]
 8017256:	0013      	movs	r3, r2
 8017258:	005b      	lsls	r3, r3, #1
 801725a:	189b      	adds	r3, r3, r2
 801725c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801725e:	429a      	cmp	r2, r3
 8017260:	d305      	bcc.n	801726e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017262:	69fb      	ldr	r3, [r7, #28]
 8017264:	685b      	ldr	r3, [r3, #4]
 8017266:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801726a:	429a      	cmp	r2, r3
 801726c:	d906      	bls.n	801727c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801726e:	231a      	movs	r3, #26
 8017270:	2218      	movs	r2, #24
 8017272:	189b      	adds	r3, r3, r2
 8017274:	19db      	adds	r3, r3, r7
 8017276:	2201      	movs	r2, #1
 8017278:	701a      	strb	r2, [r3, #0]
 801727a:	e11e      	b.n	80174ba <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801727e:	613b      	str	r3, [r7, #16]
 8017280:	2300      	movs	r3, #0
 8017282:	617b      	str	r3, [r7, #20]
 8017284:	6939      	ldr	r1, [r7, #16]
 8017286:	697a      	ldr	r2, [r7, #20]
 8017288:	000b      	movs	r3, r1
 801728a:	0e1b      	lsrs	r3, r3, #24
 801728c:	0010      	movs	r0, r2
 801728e:	0205      	lsls	r5, r0, #8
 8017290:	431d      	orrs	r5, r3
 8017292:	000b      	movs	r3, r1
 8017294:	021c      	lsls	r4, r3, #8
 8017296:	69fb      	ldr	r3, [r7, #28]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	085b      	lsrs	r3, r3, #1
 801729c:	60bb      	str	r3, [r7, #8]
 801729e:	2300      	movs	r3, #0
 80172a0:	60fb      	str	r3, [r7, #12]
 80172a2:	68b8      	ldr	r0, [r7, #8]
 80172a4:	68f9      	ldr	r1, [r7, #12]
 80172a6:	1900      	adds	r0, r0, r4
 80172a8:	4169      	adcs	r1, r5
 80172aa:	69fb      	ldr	r3, [r7, #28]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	2300      	movs	r3, #0
 80172b2:	607b      	str	r3, [r7, #4]
 80172b4:	683a      	ldr	r2, [r7, #0]
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f7e9 f962 	bl	8000580 <__aeabi_uldivmod>
 80172bc:	0002      	movs	r2, r0
 80172be:	000b      	movs	r3, r1
 80172c0:	0013      	movs	r3, r2
 80172c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80172c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80172c6:	23c0      	movs	r3, #192	@ 0xc0
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d309      	bcc.n	80172e2 <UART_SetConfig+0x332>
 80172ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80172d0:	2380      	movs	r3, #128	@ 0x80
 80172d2:	035b      	lsls	r3, r3, #13
 80172d4:	429a      	cmp	r2, r3
 80172d6:	d204      	bcs.n	80172e2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80172d8:	69fb      	ldr	r3, [r7, #28]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80172de:	60da      	str	r2, [r3, #12]
 80172e0:	e0eb      	b.n	80174ba <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80172e2:	231a      	movs	r3, #26
 80172e4:	2218      	movs	r2, #24
 80172e6:	189b      	adds	r3, r3, r2
 80172e8:	19db      	adds	r3, r3, r7
 80172ea:	2201      	movs	r2, #1
 80172ec:	701a      	strb	r2, [r3, #0]
 80172ee:	e0e4      	b.n	80174ba <UART_SetConfig+0x50a>
 80172f0:	efff69f3 	.word	0xefff69f3
 80172f4:	ffffcfff 	.word	0xffffcfff
 80172f8:	40004800 	.word	0x40004800
 80172fc:	fffff4ff 	.word	0xfffff4ff
 8017300:	40013800 	.word	0x40013800
 8017304:	40021000 	.word	0x40021000
 8017308:	40004400 	.word	0x40004400
 801730c:	40004c00 	.word	0x40004c00
 8017310:	40005000 	.word	0x40005000
 8017314:	003d0900 	.word	0x003d0900
 8017318:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801731c:	69fb      	ldr	r3, [r7, #28]
 801731e:	69da      	ldr	r2, [r3, #28]
 8017320:	2380      	movs	r3, #128	@ 0x80
 8017322:	021b      	lsls	r3, r3, #8
 8017324:	429a      	cmp	r2, r3
 8017326:	d000      	beq.n	801732a <UART_SetConfig+0x37a>
 8017328:	e070      	b.n	801740c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801732a:	231b      	movs	r3, #27
 801732c:	2218      	movs	r2, #24
 801732e:	189b      	adds	r3, r3, r2
 8017330:	19db      	adds	r3, r3, r7
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	2b08      	cmp	r3, #8
 8017336:	d822      	bhi.n	801737e <UART_SetConfig+0x3ce>
 8017338:	009a      	lsls	r2, r3, #2
 801733a:	4b67      	ldr	r3, [pc, #412]	@ (80174d8 <UART_SetConfig+0x528>)
 801733c:	18d3      	adds	r3, r2, r3
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017342:	f7fd fdad 	bl	8014ea0 <HAL_RCC_GetPCLK1Freq>
 8017346:	0003      	movs	r3, r0
 8017348:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801734a:	e021      	b.n	8017390 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801734c:	f7fd fdbe 	bl	8014ecc <HAL_RCC_GetPCLK2Freq>
 8017350:	0003      	movs	r3, r0
 8017352:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017354:	e01c      	b.n	8017390 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017356:	4b61      	ldr	r3, [pc, #388]	@ (80174dc <UART_SetConfig+0x52c>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	2210      	movs	r2, #16
 801735c:	4013      	ands	r3, r2
 801735e:	d002      	beq.n	8017366 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017360:	4b5f      	ldr	r3, [pc, #380]	@ (80174e0 <UART_SetConfig+0x530>)
 8017362:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017364:	e014      	b.n	8017390 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017366:	4b5f      	ldr	r3, [pc, #380]	@ (80174e4 <UART_SetConfig+0x534>)
 8017368:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801736a:	e011      	b.n	8017390 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801736c:	f7fd fce8 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 8017370:	0003      	movs	r3, r0
 8017372:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017374:	e00c      	b.n	8017390 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017376:	2380      	movs	r3, #128	@ 0x80
 8017378:	021b      	lsls	r3, r3, #8
 801737a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801737c:	e008      	b.n	8017390 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801737e:	2300      	movs	r3, #0
 8017380:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017382:	231a      	movs	r3, #26
 8017384:	2218      	movs	r2, #24
 8017386:	189b      	adds	r3, r3, r2
 8017388:	19db      	adds	r3, r3, r7
 801738a:	2201      	movs	r2, #1
 801738c:	701a      	strb	r2, [r3, #0]
        break;
 801738e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017392:	2b00      	cmp	r3, #0
 8017394:	d100      	bne.n	8017398 <UART_SetConfig+0x3e8>
 8017396:	e090      	b.n	80174ba <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801739a:	005a      	lsls	r2, r3, #1
 801739c:	69fb      	ldr	r3, [r7, #28]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	085b      	lsrs	r3, r3, #1
 80173a2:	18d2      	adds	r2, r2, r3
 80173a4:	69fb      	ldr	r3, [r7, #28]
 80173a6:	685b      	ldr	r3, [r3, #4]
 80173a8:	0019      	movs	r1, r3
 80173aa:	0010      	movs	r0, r2
 80173ac:	f7e8 fefa 	bl	80001a4 <__udivsi3>
 80173b0:	0003      	movs	r3, r0
 80173b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80173b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173b6:	2b0f      	cmp	r3, #15
 80173b8:	d921      	bls.n	80173fe <UART_SetConfig+0x44e>
 80173ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80173bc:	2380      	movs	r3, #128	@ 0x80
 80173be:	025b      	lsls	r3, r3, #9
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d21c      	bcs.n	80173fe <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80173c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173c6:	b29a      	uxth	r2, r3
 80173c8:	200e      	movs	r0, #14
 80173ca:	2418      	movs	r4, #24
 80173cc:	1903      	adds	r3, r0, r4
 80173ce:	19db      	adds	r3, r3, r7
 80173d0:	210f      	movs	r1, #15
 80173d2:	438a      	bics	r2, r1
 80173d4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80173d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173d8:	085b      	lsrs	r3, r3, #1
 80173da:	b29b      	uxth	r3, r3
 80173dc:	2207      	movs	r2, #7
 80173de:	4013      	ands	r3, r2
 80173e0:	b299      	uxth	r1, r3
 80173e2:	1903      	adds	r3, r0, r4
 80173e4:	19db      	adds	r3, r3, r7
 80173e6:	1902      	adds	r2, r0, r4
 80173e8:	19d2      	adds	r2, r2, r7
 80173ea:	8812      	ldrh	r2, [r2, #0]
 80173ec:	430a      	orrs	r2, r1
 80173ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	1902      	adds	r2, r0, r4
 80173f6:	19d2      	adds	r2, r2, r7
 80173f8:	8812      	ldrh	r2, [r2, #0]
 80173fa:	60da      	str	r2, [r3, #12]
 80173fc:	e05d      	b.n	80174ba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80173fe:	231a      	movs	r3, #26
 8017400:	2218      	movs	r2, #24
 8017402:	189b      	adds	r3, r3, r2
 8017404:	19db      	adds	r3, r3, r7
 8017406:	2201      	movs	r2, #1
 8017408:	701a      	strb	r2, [r3, #0]
 801740a:	e056      	b.n	80174ba <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801740c:	231b      	movs	r3, #27
 801740e:	2218      	movs	r2, #24
 8017410:	189b      	adds	r3, r3, r2
 8017412:	19db      	adds	r3, r3, r7
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	2b08      	cmp	r3, #8
 8017418:	d822      	bhi.n	8017460 <UART_SetConfig+0x4b0>
 801741a:	009a      	lsls	r2, r3, #2
 801741c:	4b32      	ldr	r3, [pc, #200]	@ (80174e8 <UART_SetConfig+0x538>)
 801741e:	18d3      	adds	r3, r2, r3
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017424:	f7fd fd3c 	bl	8014ea0 <HAL_RCC_GetPCLK1Freq>
 8017428:	0003      	movs	r3, r0
 801742a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801742c:	e021      	b.n	8017472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801742e:	f7fd fd4d 	bl	8014ecc <HAL_RCC_GetPCLK2Freq>
 8017432:	0003      	movs	r3, r0
 8017434:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017436:	e01c      	b.n	8017472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017438:	4b28      	ldr	r3, [pc, #160]	@ (80174dc <UART_SetConfig+0x52c>)
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	2210      	movs	r2, #16
 801743e:	4013      	ands	r3, r2
 8017440:	d002      	beq.n	8017448 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017442:	4b27      	ldr	r3, [pc, #156]	@ (80174e0 <UART_SetConfig+0x530>)
 8017444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017446:	e014      	b.n	8017472 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017448:	4b26      	ldr	r3, [pc, #152]	@ (80174e4 <UART_SetConfig+0x534>)
 801744a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801744c:	e011      	b.n	8017472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801744e:	f7fd fc77 	bl	8014d40 <HAL_RCC_GetSysClockFreq>
 8017452:	0003      	movs	r3, r0
 8017454:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017456:	e00c      	b.n	8017472 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017458:	2380      	movs	r3, #128	@ 0x80
 801745a:	021b      	lsls	r3, r3, #8
 801745c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801745e:	e008      	b.n	8017472 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8017460:	2300      	movs	r3, #0
 8017462:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017464:	231a      	movs	r3, #26
 8017466:	2218      	movs	r2, #24
 8017468:	189b      	adds	r3, r3, r2
 801746a:	19db      	adds	r3, r3, r7
 801746c:	2201      	movs	r2, #1
 801746e:	701a      	strb	r2, [r3, #0]
        break;
 8017470:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8017472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017474:	2b00      	cmp	r3, #0
 8017476:	d020      	beq.n	80174ba <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	085a      	lsrs	r2, r3, #1
 801747e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017480:	18d2      	adds	r2, r2, r3
 8017482:	69fb      	ldr	r3, [r7, #28]
 8017484:	685b      	ldr	r3, [r3, #4]
 8017486:	0019      	movs	r1, r3
 8017488:	0010      	movs	r0, r2
 801748a:	f7e8 fe8b 	bl	80001a4 <__udivsi3>
 801748e:	0003      	movs	r3, r0
 8017490:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017494:	2b0f      	cmp	r3, #15
 8017496:	d90a      	bls.n	80174ae <UART_SetConfig+0x4fe>
 8017498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801749a:	2380      	movs	r3, #128	@ 0x80
 801749c:	025b      	lsls	r3, r3, #9
 801749e:	429a      	cmp	r2, r3
 80174a0:	d205      	bcs.n	80174ae <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80174a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174a4:	b29a      	uxth	r2, r3
 80174a6:	69fb      	ldr	r3, [r7, #28]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	60da      	str	r2, [r3, #12]
 80174ac:	e005      	b.n	80174ba <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80174ae:	231a      	movs	r3, #26
 80174b0:	2218      	movs	r2, #24
 80174b2:	189b      	adds	r3, r3, r2
 80174b4:	19db      	adds	r3, r3, r7
 80174b6:	2201      	movs	r2, #1
 80174b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	2200      	movs	r2, #0
 80174be:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80174c0:	69fb      	ldr	r3, [r7, #28]
 80174c2:	2200      	movs	r2, #0
 80174c4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80174c6:	231a      	movs	r3, #26
 80174c8:	2218      	movs	r2, #24
 80174ca:	189b      	adds	r3, r3, r2
 80174cc:	19db      	adds	r3, r3, r7
 80174ce:	781b      	ldrb	r3, [r3, #0]
}
 80174d0:	0018      	movs	r0, r3
 80174d2:	46bd      	mov	sp, r7
 80174d4:	b00e      	add	sp, #56	@ 0x38
 80174d6:	bdb0      	pop	{r4, r5, r7, pc}
 80174d8:	08024630 	.word	0x08024630
 80174dc:	40021000 	.word	0x40021000
 80174e0:	003d0900 	.word	0x003d0900
 80174e4:	00f42400 	.word	0x00f42400
 80174e8:	08024654 	.word	0x08024654

080174ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b082      	sub	sp, #8
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174f8:	2201      	movs	r2, #1
 80174fa:	4013      	ands	r3, r2
 80174fc:	d00b      	beq.n	8017516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	685b      	ldr	r3, [r3, #4]
 8017504:	4a4a      	ldr	r2, [pc, #296]	@ (8017630 <UART_AdvFeatureConfig+0x144>)
 8017506:	4013      	ands	r3, r2
 8017508:	0019      	movs	r1, r3
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	430a      	orrs	r2, r1
 8017514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801751a:	2202      	movs	r2, #2
 801751c:	4013      	ands	r3, r2
 801751e:	d00b      	beq.n	8017538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	4a43      	ldr	r2, [pc, #268]	@ (8017634 <UART_AdvFeatureConfig+0x148>)
 8017528:	4013      	ands	r3, r2
 801752a:	0019      	movs	r1, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	430a      	orrs	r2, r1
 8017536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801753c:	2204      	movs	r2, #4
 801753e:	4013      	ands	r3, r2
 8017540:	d00b      	beq.n	801755a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	4a3b      	ldr	r2, [pc, #236]	@ (8017638 <UART_AdvFeatureConfig+0x14c>)
 801754a:	4013      	ands	r3, r2
 801754c:	0019      	movs	r1, r3
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	430a      	orrs	r2, r1
 8017558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801755e:	2208      	movs	r2, #8
 8017560:	4013      	ands	r3, r2
 8017562:	d00b      	beq.n	801757c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	685b      	ldr	r3, [r3, #4]
 801756a:	4a34      	ldr	r2, [pc, #208]	@ (801763c <UART_AdvFeatureConfig+0x150>)
 801756c:	4013      	ands	r3, r2
 801756e:	0019      	movs	r1, r3
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	430a      	orrs	r2, r1
 801757a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017580:	2210      	movs	r2, #16
 8017582:	4013      	ands	r3, r2
 8017584:	d00b      	beq.n	801759e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	689b      	ldr	r3, [r3, #8]
 801758c:	4a2c      	ldr	r2, [pc, #176]	@ (8017640 <UART_AdvFeatureConfig+0x154>)
 801758e:	4013      	ands	r3, r2
 8017590:	0019      	movs	r1, r3
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	430a      	orrs	r2, r1
 801759c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175a2:	2220      	movs	r2, #32
 80175a4:	4013      	ands	r3, r2
 80175a6:	d00b      	beq.n	80175c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	689b      	ldr	r3, [r3, #8]
 80175ae:	4a25      	ldr	r2, [pc, #148]	@ (8017644 <UART_AdvFeatureConfig+0x158>)
 80175b0:	4013      	ands	r3, r2
 80175b2:	0019      	movs	r1, r3
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	430a      	orrs	r2, r1
 80175be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175c4:	2240      	movs	r2, #64	@ 0x40
 80175c6:	4013      	ands	r3, r2
 80175c8:	d01d      	beq.n	8017606 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	685b      	ldr	r3, [r3, #4]
 80175d0:	4a1d      	ldr	r2, [pc, #116]	@ (8017648 <UART_AdvFeatureConfig+0x15c>)
 80175d2:	4013      	ands	r3, r2
 80175d4:	0019      	movs	r1, r3
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	430a      	orrs	r2, r1
 80175e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80175e6:	2380      	movs	r3, #128	@ 0x80
 80175e8:	035b      	lsls	r3, r3, #13
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d10b      	bne.n	8017606 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	685b      	ldr	r3, [r3, #4]
 80175f4:	4a15      	ldr	r2, [pc, #84]	@ (801764c <UART_AdvFeatureConfig+0x160>)
 80175f6:	4013      	ands	r3, r2
 80175f8:	0019      	movs	r1, r3
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	430a      	orrs	r2, r1
 8017604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801760a:	2280      	movs	r2, #128	@ 0x80
 801760c:	4013      	ands	r3, r2
 801760e:	d00b      	beq.n	8017628 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	4a0e      	ldr	r2, [pc, #56]	@ (8017650 <UART_AdvFeatureConfig+0x164>)
 8017618:	4013      	ands	r3, r2
 801761a:	0019      	movs	r1, r3
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	430a      	orrs	r2, r1
 8017626:	605a      	str	r2, [r3, #4]
  }
}
 8017628:	46c0      	nop			@ (mov r8, r8)
 801762a:	46bd      	mov	sp, r7
 801762c:	b002      	add	sp, #8
 801762e:	bd80      	pop	{r7, pc}
 8017630:	fffdffff 	.word	0xfffdffff
 8017634:	fffeffff 	.word	0xfffeffff
 8017638:	fffbffff 	.word	0xfffbffff
 801763c:	ffff7fff 	.word	0xffff7fff
 8017640:	ffffefff 	.word	0xffffefff
 8017644:	ffffdfff 	.word	0xffffdfff
 8017648:	ffefffff 	.word	0xffefffff
 801764c:	ff9fffff 	.word	0xff9fffff
 8017650:	fff7ffff 	.word	0xfff7ffff

08017654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b092      	sub	sp, #72	@ 0x48
 8017658:	af02      	add	r7, sp, #8
 801765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2284      	movs	r2, #132	@ 0x84
 8017660:	2100      	movs	r1, #0
 8017662:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017664:	f7f6 fd4c 	bl	800e100 <HAL_GetTick>
 8017668:	0003      	movs	r3, r0
 801766a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	2208      	movs	r2, #8
 8017674:	4013      	ands	r3, r2
 8017676:	2b08      	cmp	r3, #8
 8017678:	d12c      	bne.n	80176d4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801767a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801767c:	2280      	movs	r2, #128	@ 0x80
 801767e:	0391      	lsls	r1, r2, #14
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	4a46      	ldr	r2, [pc, #280]	@ (801779c <UART_CheckIdleState+0x148>)
 8017684:	9200      	str	r2, [sp, #0]
 8017686:	2200      	movs	r2, #0
 8017688:	f000 f88c 	bl	80177a4 <UART_WaitOnFlagUntilTimeout>
 801768c:	1e03      	subs	r3, r0, #0
 801768e:	d021      	beq.n	80176d4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017690:	f3ef 8310 	mrs	r3, PRIMASK
 8017694:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8017698:	63bb      	str	r3, [r7, #56]	@ 0x38
 801769a:	2301      	movs	r3, #1
 801769c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801769e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176a0:	f383 8810 	msr	PRIMASK, r3
}
 80176a4:	46c0      	nop			@ (mov r8, r8)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2180      	movs	r1, #128	@ 0x80
 80176b2:	438a      	bics	r2, r1
 80176b4:	601a      	str	r2, [r3, #0]
 80176b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80176b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176bc:	f383 8810 	msr	PRIMASK, r3
}
 80176c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	2220      	movs	r2, #32
 80176c6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	2278      	movs	r2, #120	@ 0x78
 80176cc:	2100      	movs	r1, #0
 80176ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80176d0:	2303      	movs	r3, #3
 80176d2:	e05f      	b.n	8017794 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2204      	movs	r2, #4
 80176dc:	4013      	ands	r3, r2
 80176de:	2b04      	cmp	r3, #4
 80176e0:	d146      	bne.n	8017770 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80176e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176e4:	2280      	movs	r2, #128	@ 0x80
 80176e6:	03d1      	lsls	r1, r2, #15
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	4a2c      	ldr	r2, [pc, #176]	@ (801779c <UART_CheckIdleState+0x148>)
 80176ec:	9200      	str	r2, [sp, #0]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f000 f858 	bl	80177a4 <UART_WaitOnFlagUntilTimeout>
 80176f4:	1e03      	subs	r3, r0, #0
 80176f6:	d03b      	beq.n	8017770 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176f8:	f3ef 8310 	mrs	r3, PRIMASK
 80176fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80176fe:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017700:	637b      	str	r3, [r7, #52]	@ 0x34
 8017702:	2301      	movs	r3, #1
 8017704:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	f383 8810 	msr	PRIMASK, r3
}
 801770c:	46c0      	nop			@ (mov r8, r8)
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	681a      	ldr	r2, [r3, #0]
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	4921      	ldr	r1, [pc, #132]	@ (80177a0 <UART_CheckIdleState+0x14c>)
 801771a:	400a      	ands	r2, r1
 801771c:	601a      	str	r2, [r3, #0]
 801771e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017720:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017722:	697b      	ldr	r3, [r7, #20]
 8017724:	f383 8810 	msr	PRIMASK, r3
}
 8017728:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801772a:	f3ef 8310 	mrs	r3, PRIMASK
 801772e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017730:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017732:	633b      	str	r3, [r7, #48]	@ 0x30
 8017734:	2301      	movs	r3, #1
 8017736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017738:	69fb      	ldr	r3, [r7, #28]
 801773a:	f383 8810 	msr	PRIMASK, r3
}
 801773e:	46c0      	nop			@ (mov r8, r8)
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	689a      	ldr	r2, [r3, #8]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2101      	movs	r1, #1
 801774c:	438a      	bics	r2, r1
 801774e:	609a      	str	r2, [r3, #8]
 8017750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017752:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017754:	6a3b      	ldr	r3, [r7, #32]
 8017756:	f383 8810 	msr	PRIMASK, r3
}
 801775a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2280      	movs	r2, #128	@ 0x80
 8017760:	2120      	movs	r1, #32
 8017762:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2278      	movs	r2, #120	@ 0x78
 8017768:	2100      	movs	r1, #0
 801776a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801776c:	2303      	movs	r3, #3
 801776e:	e011      	b.n	8017794 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2220      	movs	r2, #32
 8017774:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2280      	movs	r2, #128	@ 0x80
 801777a:	2120      	movs	r1, #32
 801777c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	2200      	movs	r2, #0
 8017782:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	2200      	movs	r2, #0
 8017788:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	2278      	movs	r2, #120	@ 0x78
 801778e:	2100      	movs	r1, #0
 8017790:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017792:	2300      	movs	r3, #0
}
 8017794:	0018      	movs	r0, r3
 8017796:	46bd      	mov	sp, r7
 8017798:	b010      	add	sp, #64	@ 0x40
 801779a:	bd80      	pop	{r7, pc}
 801779c:	01ffffff 	.word	0x01ffffff
 80177a0:	fffffedf 	.word	0xfffffedf

080177a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b084      	sub	sp, #16
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	603b      	str	r3, [r7, #0]
 80177b0:	1dfb      	adds	r3, r7, #7
 80177b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80177b4:	e04b      	b.n	801784e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	3301      	adds	r3, #1
 80177ba:	d048      	beq.n	801784e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80177bc:	f7f6 fca0 	bl	800e100 <HAL_GetTick>
 80177c0:	0002      	movs	r2, r0
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	69ba      	ldr	r2, [r7, #24]
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d302      	bcc.n	80177d2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d101      	bne.n	80177d6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80177d2:	2303      	movs	r3, #3
 80177d4:	e04b      	b.n	801786e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2204      	movs	r2, #4
 80177de:	4013      	ands	r3, r2
 80177e0:	d035      	beq.n	801784e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	69db      	ldr	r3, [r3, #28]
 80177e8:	2208      	movs	r2, #8
 80177ea:	4013      	ands	r3, r2
 80177ec:	2b08      	cmp	r3, #8
 80177ee:	d111      	bne.n	8017814 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	2208      	movs	r2, #8
 80177f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	0018      	movs	r0, r3
 80177fc:	f000 f9ca 	bl	8017b94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017800:	68fb      	ldr	r3, [r7, #12]
 8017802:	2284      	movs	r2, #132	@ 0x84
 8017804:	2108      	movs	r1, #8
 8017806:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2278      	movs	r2, #120	@ 0x78
 801780c:	2100      	movs	r1, #0
 801780e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017810:	2301      	movs	r3, #1
 8017812:	e02c      	b.n	801786e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	69da      	ldr	r2, [r3, #28]
 801781a:	2380      	movs	r3, #128	@ 0x80
 801781c:	011b      	lsls	r3, r3, #4
 801781e:	401a      	ands	r2, r3
 8017820:	2380      	movs	r3, #128	@ 0x80
 8017822:	011b      	lsls	r3, r3, #4
 8017824:	429a      	cmp	r2, r3
 8017826:	d112      	bne.n	801784e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	2280      	movs	r2, #128	@ 0x80
 801782e:	0112      	lsls	r2, r2, #4
 8017830:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	0018      	movs	r0, r3
 8017836:	f000 f9ad 	bl	8017b94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2284      	movs	r2, #132	@ 0x84
 801783e:	2120      	movs	r1, #32
 8017840:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	2278      	movs	r2, #120	@ 0x78
 8017846:	2100      	movs	r1, #0
 8017848:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801784a:	2303      	movs	r3, #3
 801784c:	e00f      	b.n	801786e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	69db      	ldr	r3, [r3, #28]
 8017854:	68ba      	ldr	r2, [r7, #8]
 8017856:	4013      	ands	r3, r2
 8017858:	68ba      	ldr	r2, [r7, #8]
 801785a:	1ad3      	subs	r3, r2, r3
 801785c:	425a      	negs	r2, r3
 801785e:	4153      	adcs	r3, r2
 8017860:	b2db      	uxtb	r3, r3
 8017862:	001a      	movs	r2, r3
 8017864:	1dfb      	adds	r3, r7, #7
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	429a      	cmp	r2, r3
 801786a:	d0a4      	beq.n	80177b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801786c:	2300      	movs	r3, #0
}
 801786e:	0018      	movs	r0, r3
 8017870:	46bd      	mov	sp, r7
 8017872:	b004      	add	sp, #16
 8017874:	bd80      	pop	{r7, pc}
	...

08017878 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b090      	sub	sp, #64	@ 0x40
 801787c:	af00      	add	r7, sp, #0
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	1dbb      	adds	r3, r7, #6
 8017884:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	68ba      	ldr	r2, [r7, #8]
 801788a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	1dba      	adds	r2, r7, #6
 8017890:	2158      	movs	r1, #88	@ 0x58
 8017892:	8812      	ldrh	r2, [r2, #0]
 8017894:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	1dba      	adds	r2, r7, #6
 801789a:	215a      	movs	r1, #90	@ 0x5a
 801789c:	8812      	ldrh	r2, [r2, #0]
 801789e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	2200      	movs	r2, #0
 80178a4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	689a      	ldr	r2, [r3, #8]
 80178aa:	2380      	movs	r3, #128	@ 0x80
 80178ac:	015b      	lsls	r3, r3, #5
 80178ae:	429a      	cmp	r2, r3
 80178b0:	d10d      	bne.n	80178ce <UART_Start_Receive_IT+0x56>
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	691b      	ldr	r3, [r3, #16]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d104      	bne.n	80178c4 <UART_Start_Receive_IT+0x4c>
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	225c      	movs	r2, #92	@ 0x5c
 80178be:	4950      	ldr	r1, [pc, #320]	@ (8017a00 <UART_Start_Receive_IT+0x188>)
 80178c0:	5299      	strh	r1, [r3, r2]
 80178c2:	e02e      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	225c      	movs	r2, #92	@ 0x5c
 80178c8:	21ff      	movs	r1, #255	@ 0xff
 80178ca:	5299      	strh	r1, [r3, r2]
 80178cc:	e029      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d10d      	bne.n	80178f2 <UART_Start_Receive_IT+0x7a>
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	691b      	ldr	r3, [r3, #16]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d104      	bne.n	80178e8 <UART_Start_Receive_IT+0x70>
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	225c      	movs	r2, #92	@ 0x5c
 80178e2:	21ff      	movs	r1, #255	@ 0xff
 80178e4:	5299      	strh	r1, [r3, r2]
 80178e6:	e01c      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	225c      	movs	r2, #92	@ 0x5c
 80178ec:	217f      	movs	r1, #127	@ 0x7f
 80178ee:	5299      	strh	r1, [r3, r2]
 80178f0:	e017      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	689a      	ldr	r2, [r3, #8]
 80178f6:	2380      	movs	r3, #128	@ 0x80
 80178f8:	055b      	lsls	r3, r3, #21
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d10d      	bne.n	801791a <UART_Start_Receive_IT+0xa2>
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	691b      	ldr	r3, [r3, #16]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d104      	bne.n	8017910 <UART_Start_Receive_IT+0x98>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	225c      	movs	r2, #92	@ 0x5c
 801790a:	217f      	movs	r1, #127	@ 0x7f
 801790c:	5299      	strh	r1, [r3, r2]
 801790e:	e008      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	225c      	movs	r2, #92	@ 0x5c
 8017914:	213f      	movs	r1, #63	@ 0x3f
 8017916:	5299      	strh	r1, [r3, r2]
 8017918:	e003      	b.n	8017922 <UART_Start_Receive_IT+0xaa>
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	225c      	movs	r2, #92	@ 0x5c
 801791e:	2100      	movs	r1, #0
 8017920:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	2284      	movs	r2, #132	@ 0x84
 8017926:	2100      	movs	r1, #0
 8017928:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	2280      	movs	r2, #128	@ 0x80
 801792e:	2122      	movs	r1, #34	@ 0x22
 8017930:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017932:	f3ef 8310 	mrs	r3, PRIMASK
 8017936:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017938:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801793c:	2301      	movs	r3, #1
 801793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017942:	f383 8810 	msr	PRIMASK, r3
}
 8017946:	46c0      	nop			@ (mov r8, r8)
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	689a      	ldr	r2, [r3, #8]
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	2101      	movs	r1, #1
 8017954:	430a      	orrs	r2, r1
 8017956:	609a      	str	r2, [r3, #8]
 8017958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801795a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801795e:	f383 8810 	msr	PRIMASK, r3
}
 8017962:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	689a      	ldr	r2, [r3, #8]
 8017968:	2380      	movs	r3, #128	@ 0x80
 801796a:	015b      	lsls	r3, r3, #5
 801796c:	429a      	cmp	r2, r3
 801796e:	d107      	bne.n	8017980 <UART_Start_Receive_IT+0x108>
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	691b      	ldr	r3, [r3, #16]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d103      	bne.n	8017980 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	4a22      	ldr	r2, [pc, #136]	@ (8017a04 <UART_Start_Receive_IT+0x18c>)
 801797c:	669a      	str	r2, [r3, #104]	@ 0x68
 801797e:	e002      	b.n	8017986 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	4a21      	ldr	r2, [pc, #132]	@ (8017a08 <UART_Start_Receive_IT+0x190>)
 8017984:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	691b      	ldr	r3, [r3, #16]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d019      	beq.n	80179c2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801798e:	f3ef 8310 	mrs	r3, PRIMASK
 8017992:	61fb      	str	r3, [r7, #28]
  return(result);
 8017994:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8017996:	637b      	str	r3, [r7, #52]	@ 0x34
 8017998:	2301      	movs	r3, #1
 801799a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801799c:	6a3b      	ldr	r3, [r7, #32]
 801799e:	f383 8810 	msr	PRIMASK, r3
}
 80179a2:	46c0      	nop			@ (mov r8, r8)
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	681a      	ldr	r2, [r3, #0]
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2190      	movs	r1, #144	@ 0x90
 80179b0:	0049      	lsls	r1, r1, #1
 80179b2:	430a      	orrs	r2, r1
 80179b4:	601a      	str	r2, [r3, #0]
 80179b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80179b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179bc:	f383 8810 	msr	PRIMASK, r3
}
 80179c0:	e018      	b.n	80179f4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179c2:	f3ef 8310 	mrs	r3, PRIMASK
 80179c6:	613b      	str	r3, [r7, #16]
  return(result);
 80179c8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80179ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80179cc:	2301      	movs	r3, #1
 80179ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	f383 8810 	msr	PRIMASK, r3
}
 80179d6:	46c0      	nop			@ (mov r8, r8)
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	681a      	ldr	r2, [r3, #0]
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	2120      	movs	r1, #32
 80179e4:	430a      	orrs	r2, r1
 80179e6:	601a      	str	r2, [r3, #0]
 80179e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179ec:	69bb      	ldr	r3, [r7, #24]
 80179ee:	f383 8810 	msr	PRIMASK, r3
}
 80179f2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80179f4:	2300      	movs	r3, #0
}
 80179f6:	0018      	movs	r0, r3
 80179f8:	46bd      	mov	sp, r7
 80179fa:	b010      	add	sp, #64	@ 0x40
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	46c0      	nop			@ (mov r8, r8)
 8017a00:	000001ff 	.word	0x000001ff
 8017a04:	08018179 	.word	0x08018179
 8017a08:	08017fad 	.word	0x08017fad

08017a0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b090      	sub	sp, #64	@ 0x40
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	60b9      	str	r1, [r7, #8]
 8017a16:	1dbb      	adds	r3, r7, #6
 8017a18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	68ba      	ldr	r2, [r7, #8]
 8017a1e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	1dba      	adds	r2, r7, #6
 8017a24:	2158      	movs	r1, #88	@ 0x58
 8017a26:	8812      	ldrh	r2, [r2, #0]
 8017a28:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	2284      	movs	r2, #132	@ 0x84
 8017a2e:	2100      	movs	r1, #0
 8017a30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	2280      	movs	r2, #128	@ 0x80
 8017a36:	2122      	movs	r1, #34	@ 0x22
 8017a38:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d028      	beq.n	8017a94 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a46:	4a3e      	ldr	r2, [pc, #248]	@ (8017b40 <UART_Start_Receive_DMA+0x134>)
 8017a48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a4e:	4a3d      	ldr	r2, [pc, #244]	@ (8017b44 <UART_Start_Receive_DMA+0x138>)
 8017a50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017a52:	68fb      	ldr	r3, [r7, #12]
 8017a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a56:	4a3c      	ldr	r2, [pc, #240]	@ (8017b48 <UART_Start_Receive_DMA+0x13c>)
 8017a58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017a5e:	2200      	movs	r2, #0
 8017a60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	3324      	adds	r3, #36	@ 0x24
 8017a6c:	0019      	movs	r1, r3
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a72:	001a      	movs	r2, r3
 8017a74:	1dbb      	adds	r3, r7, #6
 8017a76:	881b      	ldrh	r3, [r3, #0]
 8017a78:	f7f7 f87e 	bl	800eb78 <HAL_DMA_Start_IT>
 8017a7c:	1e03      	subs	r3, r0, #0
 8017a7e:	d009      	beq.n	8017a94 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	2284      	movs	r2, #132	@ 0x84
 8017a84:	2110      	movs	r1, #16
 8017a86:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	2280      	movs	r2, #128	@ 0x80
 8017a8c:	2120      	movs	r1, #32
 8017a8e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8017a90:	2301      	movs	r3, #1
 8017a92:	e050      	b.n	8017b36 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	691b      	ldr	r3, [r3, #16]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d019      	beq.n	8017ad0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8017aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aac:	f383 8810 	msr	PRIMASK, r3
}
 8017ab0:	46c0      	nop			@ (mov r8, r8)
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	681a      	ldr	r2, [r3, #0]
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2180      	movs	r1, #128	@ 0x80
 8017abe:	0049      	lsls	r1, r1, #1
 8017ac0:	430a      	orrs	r2, r1
 8017ac2:	601a      	str	r2, [r3, #0]
 8017ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aca:	f383 8810 	msr	PRIMASK, r3
}
 8017ace:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8017ad4:	613b      	str	r3, [r7, #16]
  return(result);
 8017ad6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017ada:	2301      	movs	r3, #1
 8017adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ade:	697b      	ldr	r3, [r7, #20]
 8017ae0:	f383 8810 	msr	PRIMASK, r3
}
 8017ae4:	46c0      	nop			@ (mov r8, r8)
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	689a      	ldr	r2, [r3, #8]
 8017aec:	68fb      	ldr	r3, [r7, #12]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	2101      	movs	r1, #1
 8017af2:	430a      	orrs	r2, r1
 8017af4:	609a      	str	r2, [r3, #8]
 8017af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	f383 8810 	msr	PRIMASK, r3
}
 8017b00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b02:	f3ef 8310 	mrs	r3, PRIMASK
 8017b06:	61fb      	str	r3, [r7, #28]
  return(result);
 8017b08:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017b0c:	2301      	movs	r3, #1
 8017b0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b10:	6a3b      	ldr	r3, [r7, #32]
 8017b12:	f383 8810 	msr	PRIMASK, r3
}
 8017b16:	46c0      	nop			@ (mov r8, r8)
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	689a      	ldr	r2, [r3, #8]
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2140      	movs	r1, #64	@ 0x40
 8017b24:	430a      	orrs	r2, r1
 8017b26:	609a      	str	r2, [r3, #8]
 8017b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b2e:	f383 8810 	msr	PRIMASK, r3
}
 8017b32:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017b34:	2300      	movs	r3, #0
}
 8017b36:	0018      	movs	r0, r3
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	b010      	add	sp, #64	@ 0x40
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	46c0      	nop			@ (mov r8, r8)
 8017b40:	08017d1d 	.word	0x08017d1d
 8017b44:	08017e51 	.word	0x08017e51
 8017b48:	08017e99 	.word	0x08017e99

08017b4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b086      	sub	sp, #24
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b54:	f3ef 8310 	mrs	r3, PRIMASK
 8017b58:	60bb      	str	r3, [r7, #8]
  return(result);
 8017b5a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017b5c:	617b      	str	r3, [r7, #20]
 8017b5e:	2301      	movs	r3, #1
 8017b60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b62:	68fb      	ldr	r3, [r7, #12]
 8017b64:	f383 8810 	msr	PRIMASK, r3
}
 8017b68:	46c0      	nop			@ (mov r8, r8)
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	21c0      	movs	r1, #192	@ 0xc0
 8017b76:	438a      	bics	r2, r1
 8017b78:	601a      	str	r2, [r3, #0]
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b7e:	693b      	ldr	r3, [r7, #16]
 8017b80:	f383 8810 	msr	PRIMASK, r3
}
 8017b84:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	2220      	movs	r2, #32
 8017b8a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017b8c:	46c0      	nop			@ (mov r8, r8)
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	b006      	add	sp, #24
 8017b92:	bd80      	pop	{r7, pc}

08017b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b08e      	sub	sp, #56	@ 0x38
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8017ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8017ba2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	f383 8810 	msr	PRIMASK, r3
}
 8017bb0:	46c0      	nop			@ (mov r8, r8)
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	681a      	ldr	r2, [r3, #0]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	4926      	ldr	r1, [pc, #152]	@ (8017c58 <UART_EndRxTransfer+0xc4>)
 8017bbe:	400a      	ands	r2, r1
 8017bc0:	601a      	str	r2, [r3, #0]
 8017bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	f383 8810 	msr	PRIMASK, r3
}
 8017bcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bce:	f3ef 8310 	mrs	r3, PRIMASK
 8017bd2:	623b      	str	r3, [r7, #32]
  return(result);
 8017bd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8017bd8:	2301      	movs	r3, #1
 8017bda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bde:	f383 8810 	msr	PRIMASK, r3
}
 8017be2:	46c0      	nop			@ (mov r8, r8)
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	689a      	ldr	r2, [r3, #8]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	2101      	movs	r1, #1
 8017bf0:	438a      	bics	r2, r1
 8017bf2:	609a      	str	r2, [r3, #8]
 8017bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bfa:	f383 8810 	msr	PRIMASK, r3
}
 8017bfe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017c04:	2b01      	cmp	r3, #1
 8017c06:	d118      	bne.n	8017c3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c08:	f3ef 8310 	mrs	r3, PRIMASK
 8017c0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8017c0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017c12:	2301      	movs	r3, #1
 8017c14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f383 8810 	msr	PRIMASK, r3
}
 8017c1c:	46c0      	nop			@ (mov r8, r8)
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	681a      	ldr	r2, [r3, #0]
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	2110      	movs	r1, #16
 8017c2a:	438a      	bics	r2, r1
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	f383 8810 	msr	PRIMASK, r3
}
 8017c38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	2280      	movs	r2, #128	@ 0x80
 8017c3e:	2120      	movs	r1, #32
 8017c40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	2200      	movs	r2, #0
 8017c46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017c4e:	46c0      	nop			@ (mov r8, r8)
 8017c50:	46bd      	mov	sp, r7
 8017c52:	b00e      	add	sp, #56	@ 0x38
 8017c54:	bd80      	pop	{r7, pc}
 8017c56:	46c0      	nop			@ (mov r8, r8)
 8017c58:	fffffedf 	.word	0xfffffedf

08017c5c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b08c      	sub	sp, #48	@ 0x30
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	2220      	movs	r2, #32
 8017c72:	4013      	ands	r3, r2
 8017c74:	d135      	bne.n	8017ce2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c78:	2252      	movs	r2, #82	@ 0x52
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8017c84:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017c86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c88:	2301      	movs	r3, #1
 8017c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c8c:	693b      	ldr	r3, [r7, #16]
 8017c8e:	f383 8810 	msr	PRIMASK, r3
}
 8017c92:	46c0      	nop			@ (mov r8, r8)
 8017c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	689a      	ldr	r2, [r3, #8]
 8017c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	2180      	movs	r1, #128	@ 0x80
 8017ca0:	438a      	bics	r2, r1
 8017ca2:	609a      	str	r2, [r3, #8]
 8017ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	f383 8810 	msr	PRIMASK, r3
}
 8017cae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8017cb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8017cb6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017cba:	2301      	movs	r3, #1
 8017cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cbe:	69fb      	ldr	r3, [r7, #28]
 8017cc0:	f383 8810 	msr	PRIMASK, r3
}
 8017cc4:	46c0      	nop			@ (mov r8, r8)
 8017cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	681a      	ldr	r2, [r3, #0]
 8017ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	2140      	movs	r1, #64	@ 0x40
 8017cd2:	430a      	orrs	r2, r1
 8017cd4:	601a      	str	r2, [r3, #0]
 8017cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cda:	6a3b      	ldr	r3, [r7, #32]
 8017cdc:	f383 8810 	msr	PRIMASK, r3
}
 8017ce0:	e006      	b.n	8017cf0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ce4:	228c      	movs	r2, #140	@ 0x8c
 8017ce6:	589b      	ldr	r3, [r3, r2]
 8017ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017cea:	0010      	movs	r0, r2
 8017cec:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017cee:	46c0      	nop			@ (mov r8, r8)
 8017cf0:	46c0      	nop			@ (mov r8, r8)
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	b00c      	add	sp, #48	@ 0x30
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b084      	sub	sp, #16
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d04:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	2288      	movs	r2, #136	@ 0x88
 8017d0a:	589b      	ldr	r3, [r3, r2]
 8017d0c:	68fa      	ldr	r2, [r7, #12]
 8017d0e:	0010      	movs	r0, r2
 8017d10:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017d12:	46c0      	nop			@ (mov r8, r8)
 8017d14:	46bd      	mov	sp, r7
 8017d16:	b004      	add	sp, #16
 8017d18:	bd80      	pop	{r7, pc}
	...

08017d1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b094      	sub	sp, #80	@ 0x50
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2220      	movs	r2, #32
 8017d32:	4013      	ands	r3, r2
 8017d34:	d16f      	bne.n	8017e16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8017d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d38:	225a      	movs	r2, #90	@ 0x5a
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8017d42:	61bb      	str	r3, [r7, #24]
  return(result);
 8017d44:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017d48:	2301      	movs	r3, #1
 8017d4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d4c:	69fb      	ldr	r3, [r7, #28]
 8017d4e:	f383 8810 	msr	PRIMASK, r3
}
 8017d52:	46c0      	nop			@ (mov r8, r8)
 8017d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	681a      	ldr	r2, [r3, #0]
 8017d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	493b      	ldr	r1, [pc, #236]	@ (8017e4c <UART_DMAReceiveCplt+0x130>)
 8017d60:	400a      	ands	r2, r1
 8017d62:	601a      	str	r2, [r3, #0]
 8017d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017d66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d68:	6a3b      	ldr	r3, [r7, #32]
 8017d6a:	f383 8810 	msr	PRIMASK, r3
}
 8017d6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d70:	f3ef 8310 	mrs	r3, PRIMASK
 8017d74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d80:	f383 8810 	msr	PRIMASK, r3
}
 8017d84:	46c0      	nop			@ (mov r8, r8)
 8017d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	689a      	ldr	r2, [r3, #8]
 8017d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	2101      	movs	r1, #1
 8017d92:	438a      	bics	r2, r1
 8017d94:	609a      	str	r2, [r3, #8]
 8017d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d9c:	f383 8810 	msr	PRIMASK, r3
}
 8017da0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017da2:	f3ef 8310 	mrs	r3, PRIMASK
 8017da6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017daa:	643b      	str	r3, [r7, #64]	@ 0x40
 8017dac:	2301      	movs	r3, #1
 8017dae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017db2:	f383 8810 	msr	PRIMASK, r3
}
 8017db6:	46c0      	nop			@ (mov r8, r8)
 8017db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	689a      	ldr	r2, [r3, #8]
 8017dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	2140      	movs	r1, #64	@ 0x40
 8017dc4:	438a      	bics	r2, r1
 8017dc6:	609a      	str	r2, [r3, #8]
 8017dc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017dca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dce:	f383 8810 	msr	PRIMASK, r3
}
 8017dd2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dd6:	2280      	movs	r2, #128	@ 0x80
 8017dd8:	2120      	movs	r1, #32
 8017dda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d118      	bne.n	8017e16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017de4:	f3ef 8310 	mrs	r3, PRIMASK
 8017de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8017dea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017dee:	2301      	movs	r3, #1
 8017df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017df2:	693b      	ldr	r3, [r7, #16]
 8017df4:	f383 8810 	msr	PRIMASK, r3
}
 8017df8:	46c0      	nop			@ (mov r8, r8)
 8017dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	681a      	ldr	r2, [r3, #0]
 8017e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	2110      	movs	r1, #16
 8017e06:	438a      	bics	r2, r1
 8017e08:	601a      	str	r2, [r3, #0]
 8017e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	f383 8810 	msr	PRIMASK, r3
}
 8017e14:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e18:	2200      	movs	r2, #0
 8017e1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e20:	2b01      	cmp	r3, #1
 8017e22:	d109      	bne.n	8017e38 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8017e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e26:	22ac      	movs	r2, #172	@ 0xac
 8017e28:	589b      	ldr	r3, [r3, r2]
 8017e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017e2c:	2158      	movs	r1, #88	@ 0x58
 8017e2e:	5a51      	ldrh	r1, [r2, r1]
 8017e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017e32:	0010      	movs	r0, r2
 8017e34:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017e36:	e005      	b.n	8017e44 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8017e38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e3a:	2294      	movs	r2, #148	@ 0x94
 8017e3c:	589b      	ldr	r3, [r3, r2]
 8017e3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017e40:	0010      	movs	r0, r2
 8017e42:	4798      	blx	r3
}
 8017e44:	46c0      	nop			@ (mov r8, r8)
 8017e46:	46bd      	mov	sp, r7
 8017e48:	b014      	add	sp, #80	@ 0x50
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	fffffeff 	.word	0xfffffeff

08017e50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b084      	sub	sp, #16
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	2201      	movs	r2, #1
 8017e62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017e68:	2b01      	cmp	r3, #1
 8017e6a:	d10b      	bne.n	8017e84 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	22ac      	movs	r2, #172	@ 0xac
 8017e70:	589b      	ldr	r3, [r3, r2]
 8017e72:	68fa      	ldr	r2, [r7, #12]
 8017e74:	2158      	movs	r1, #88	@ 0x58
 8017e76:	5a52      	ldrh	r2, [r2, r1]
 8017e78:	0852      	lsrs	r2, r2, #1
 8017e7a:	b291      	uxth	r1, r2
 8017e7c:	68fa      	ldr	r2, [r7, #12]
 8017e7e:	0010      	movs	r0, r2
 8017e80:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017e82:	e005      	b.n	8017e90 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	2290      	movs	r2, #144	@ 0x90
 8017e88:	589b      	ldr	r3, [r3, r2]
 8017e8a:	68fa      	ldr	r2, [r7, #12]
 8017e8c:	0010      	movs	r0, r2
 8017e8e:	4798      	blx	r3
}
 8017e90:	46c0      	nop			@ (mov r8, r8)
 8017e92:	46bd      	mov	sp, r7
 8017e94:	b004      	add	sp, #16
 8017e96:	bd80      	pop	{r7, pc}

08017e98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b086      	sub	sp, #24
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ea4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017ea6:	697b      	ldr	r3, [r7, #20]
 8017ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017eaa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	2280      	movs	r2, #128	@ 0x80
 8017eb0:	589b      	ldr	r3, [r3, r2]
 8017eb2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	689b      	ldr	r3, [r3, #8]
 8017eba:	2280      	movs	r2, #128	@ 0x80
 8017ebc:	4013      	ands	r3, r2
 8017ebe:	2b80      	cmp	r3, #128	@ 0x80
 8017ec0:	d10a      	bne.n	8017ed8 <UART_DMAError+0x40>
 8017ec2:	693b      	ldr	r3, [r7, #16]
 8017ec4:	2b21      	cmp	r3, #33	@ 0x21
 8017ec6:	d107      	bne.n	8017ed8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	2252      	movs	r2, #82	@ 0x52
 8017ecc:	2100      	movs	r1, #0
 8017ece:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017ed0:	697b      	ldr	r3, [r7, #20]
 8017ed2:	0018      	movs	r0, r3
 8017ed4:	f7ff fe3a 	bl	8017b4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017ed8:	697b      	ldr	r3, [r7, #20]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	689b      	ldr	r3, [r3, #8]
 8017ede:	2240      	movs	r2, #64	@ 0x40
 8017ee0:	4013      	ands	r3, r2
 8017ee2:	2b40      	cmp	r3, #64	@ 0x40
 8017ee4:	d10a      	bne.n	8017efc <UART_DMAError+0x64>
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	2b22      	cmp	r3, #34	@ 0x22
 8017eea:	d107      	bne.n	8017efc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017eec:	697b      	ldr	r3, [r7, #20]
 8017eee:	225a      	movs	r2, #90	@ 0x5a
 8017ef0:	2100      	movs	r1, #0
 8017ef2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8017ef4:	697b      	ldr	r3, [r7, #20]
 8017ef6:	0018      	movs	r0, r3
 8017ef8:	f7ff fe4c 	bl	8017b94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	2284      	movs	r2, #132	@ 0x84
 8017f00:	589b      	ldr	r3, [r3, r2]
 8017f02:	2210      	movs	r2, #16
 8017f04:	431a      	orrs	r2, r3
 8017f06:	697b      	ldr	r3, [r7, #20]
 8017f08:	2184      	movs	r1, #132	@ 0x84
 8017f0a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	2298      	movs	r2, #152	@ 0x98
 8017f10:	589b      	ldr	r3, [r3, r2]
 8017f12:	697a      	ldr	r2, [r7, #20]
 8017f14:	0010      	movs	r0, r2
 8017f16:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f18:	46c0      	nop			@ (mov r8, r8)
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	b006      	add	sp, #24
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b084      	sub	sp, #16
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	225a      	movs	r2, #90	@ 0x5a
 8017f32:	2100      	movs	r1, #0
 8017f34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8017f36:	68fb      	ldr	r3, [r7, #12]
 8017f38:	2252      	movs	r2, #82	@ 0x52
 8017f3a:	2100      	movs	r1, #0
 8017f3c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	2298      	movs	r2, #152	@ 0x98
 8017f42:	589b      	ldr	r3, [r3, r2]
 8017f44:	68fa      	ldr	r2, [r7, #12]
 8017f46:	0010      	movs	r0, r2
 8017f48:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017f4a:	46c0      	nop			@ (mov r8, r8)
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	b004      	add	sp, #16
 8017f50:	bd80      	pop	{r7, pc}

08017f52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017f52:	b580      	push	{r7, lr}
 8017f54:	b086      	sub	sp, #24
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8017f5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017f60:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017f62:	617b      	str	r3, [r7, #20]
 8017f64:	2301      	movs	r3, #1
 8017f66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	f383 8810 	msr	PRIMASK, r3
}
 8017f6e:	46c0      	nop			@ (mov r8, r8)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	681a      	ldr	r2, [r3, #0]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681b      	ldr	r3, [r3, #0]
 8017f7a:	2140      	movs	r1, #64	@ 0x40
 8017f7c:	438a      	bics	r2, r1
 8017f7e:	601a      	str	r2, [r3, #0]
 8017f80:	697b      	ldr	r3, [r7, #20]
 8017f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	f383 8810 	msr	PRIMASK, r3
}
 8017f8a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2220      	movs	r2, #32
 8017f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2200      	movs	r2, #0
 8017f96:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	228c      	movs	r2, #140	@ 0x8c
 8017f9c:	589b      	ldr	r3, [r3, r2]
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	0010      	movs	r0, r2
 8017fa2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017fa4:	46c0      	nop			@ (mov r8, r8)
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	b006      	add	sp, #24
 8017faa:	bd80      	pop	{r7, pc}

08017fac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b094      	sub	sp, #80	@ 0x50
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017fb4:	204e      	movs	r0, #78	@ 0x4e
 8017fb6:	183b      	adds	r3, r7, r0
 8017fb8:	687a      	ldr	r2, [r7, #4]
 8017fba:	215c      	movs	r1, #92	@ 0x5c
 8017fbc:	5a52      	ldrh	r2, [r2, r1]
 8017fbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2280      	movs	r2, #128	@ 0x80
 8017fc4:	589b      	ldr	r3, [r3, r2]
 8017fc6:	2b22      	cmp	r3, #34	@ 0x22
 8017fc8:	d000      	beq.n	8017fcc <UART_RxISR_8BIT+0x20>
 8017fca:	e0c2      	b.n	8018152 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017fd2:	214c      	movs	r1, #76	@ 0x4c
 8017fd4:	187b      	adds	r3, r7, r1
 8017fd6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017fd8:	187b      	adds	r3, r7, r1
 8017fda:	881b      	ldrh	r3, [r3, #0]
 8017fdc:	b2da      	uxtb	r2, r3
 8017fde:	183b      	adds	r3, r7, r0
 8017fe0:	881b      	ldrh	r3, [r3, #0]
 8017fe2:	b2d9      	uxtb	r1, r3
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017fe8:	400a      	ands	r2, r1
 8017fea:	b2d2      	uxtb	r2, r2
 8017fec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017ff2:	1c5a      	adds	r2, r3, #1
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	225a      	movs	r2, #90	@ 0x5a
 8017ffc:	5a9b      	ldrh	r3, [r3, r2]
 8017ffe:	b29b      	uxth	r3, r3
 8018000:	3b01      	subs	r3, #1
 8018002:	b299      	uxth	r1, r3
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	225a      	movs	r2, #90	@ 0x5a
 8018008:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	225a      	movs	r2, #90	@ 0x5a
 801800e:	5a9b      	ldrh	r3, [r3, r2]
 8018010:	b29b      	uxth	r3, r3
 8018012:	2b00      	cmp	r3, #0
 8018014:	d000      	beq.n	8018018 <UART_RxISR_8BIT+0x6c>
 8018016:	e0a4      	b.n	8018162 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018018:	f3ef 8310 	mrs	r3, PRIMASK
 801801c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018022:	2301      	movs	r3, #1
 8018024:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018028:	f383 8810 	msr	PRIMASK, r3
}
 801802c:	46c0      	nop			@ (mov r8, r8)
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	681a      	ldr	r2, [r3, #0]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	494c      	ldr	r1, [pc, #304]	@ (801816c <UART_RxISR_8BIT+0x1c0>)
 801803a:	400a      	ands	r2, r1
 801803c:	601a      	str	r2, [r3, #0]
 801803e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018040:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018044:	f383 8810 	msr	PRIMASK, r3
}
 8018048:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801804a:	f3ef 8310 	mrs	r3, PRIMASK
 801804e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018052:	647b      	str	r3, [r7, #68]	@ 0x44
 8018054:	2301      	movs	r3, #1
 8018056:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801805a:	f383 8810 	msr	PRIMASK, r3
}
 801805e:	46c0      	nop			@ (mov r8, r8)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	689a      	ldr	r2, [r3, #8]
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	2101      	movs	r1, #1
 801806c:	438a      	bics	r2, r1
 801806e:	609a      	str	r2, [r3, #8]
 8018070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018072:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018076:	f383 8810 	msr	PRIMASK, r3
}
 801807a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2280      	movs	r2, #128	@ 0x80
 8018080:	2120      	movs	r1, #32
 8018082:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2200      	movs	r2, #0
 8018088:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2200      	movs	r2, #0
 801808e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	4a36      	ldr	r2, [pc, #216]	@ (8018170 <UART_RxISR_8BIT+0x1c4>)
 8018096:	4293      	cmp	r3, r2
 8018098:	d01f      	beq.n	80180da <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	685a      	ldr	r2, [r3, #4]
 80180a0:	2380      	movs	r3, #128	@ 0x80
 80180a2:	041b      	lsls	r3, r3, #16
 80180a4:	4013      	ands	r3, r2
 80180a6:	d018      	beq.n	80180da <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180a8:	f3ef 8310 	mrs	r3, PRIMASK
 80180ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80180ae:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80180b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80180b2:	2301      	movs	r3, #1
 80180b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180b6:	69fb      	ldr	r3, [r7, #28]
 80180b8:	f383 8810 	msr	PRIMASK, r3
}
 80180bc:	46c0      	nop			@ (mov r8, r8)
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	681a      	ldr	r2, [r3, #0]
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	492a      	ldr	r1, [pc, #168]	@ (8018174 <UART_RxISR_8BIT+0x1c8>)
 80180ca:	400a      	ands	r2, r1
 80180cc:	601a      	str	r2, [r3, #0]
 80180ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180d2:	6a3b      	ldr	r3, [r7, #32]
 80180d4:	f383 8810 	msr	PRIMASK, r3
}
 80180d8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80180de:	2b01      	cmp	r3, #1
 80180e0:	d130      	bne.n	8018144 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80180e8:	f3ef 8310 	mrs	r3, PRIMASK
 80180ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80180ee:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80180f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80180f2:	2301      	movs	r3, #1
 80180f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	f383 8810 	msr	PRIMASK, r3
}
 80180fc:	46c0      	nop			@ (mov r8, r8)
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	681a      	ldr	r2, [r3, #0]
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	2110      	movs	r1, #16
 801810a:	438a      	bics	r2, r1
 801810c:	601a      	str	r2, [r3, #0]
 801810e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	f383 8810 	msr	PRIMASK, r3
}
 8018118:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	69db      	ldr	r3, [r3, #28]
 8018120:	2210      	movs	r2, #16
 8018122:	4013      	ands	r3, r2
 8018124:	2b10      	cmp	r3, #16
 8018126:	d103      	bne.n	8018130 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	2210      	movs	r2, #16
 801812e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	22ac      	movs	r2, #172	@ 0xac
 8018134:	589b      	ldr	r3, [r3, r2]
 8018136:	687a      	ldr	r2, [r7, #4]
 8018138:	2158      	movs	r1, #88	@ 0x58
 801813a:	5a51      	ldrh	r1, [r2, r1]
 801813c:	687a      	ldr	r2, [r7, #4]
 801813e:	0010      	movs	r0, r2
 8018140:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018142:	e00e      	b.n	8018162 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2294      	movs	r2, #148	@ 0x94
 8018148:	589b      	ldr	r3, [r3, r2]
 801814a:	687a      	ldr	r2, [r7, #4]
 801814c:	0010      	movs	r0, r2
 801814e:	4798      	blx	r3
}
 8018150:	e007      	b.n	8018162 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	699a      	ldr	r2, [r3, #24]
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2108      	movs	r1, #8
 801815e:	430a      	orrs	r2, r1
 8018160:	619a      	str	r2, [r3, #24]
}
 8018162:	46c0      	nop			@ (mov r8, r8)
 8018164:	46bd      	mov	sp, r7
 8018166:	b014      	add	sp, #80	@ 0x50
 8018168:	bd80      	pop	{r7, pc}
 801816a:	46c0      	nop			@ (mov r8, r8)
 801816c:	fffffedf 	.word	0xfffffedf
 8018170:	40004800 	.word	0x40004800
 8018174:	fbffffff 	.word	0xfbffffff

08018178 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b094      	sub	sp, #80	@ 0x50
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018180:	204e      	movs	r0, #78	@ 0x4e
 8018182:	183b      	adds	r3, r7, r0
 8018184:	687a      	ldr	r2, [r7, #4]
 8018186:	215c      	movs	r1, #92	@ 0x5c
 8018188:	5a52      	ldrh	r2, [r2, r1]
 801818a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2280      	movs	r2, #128	@ 0x80
 8018190:	589b      	ldr	r3, [r3, r2]
 8018192:	2b22      	cmp	r3, #34	@ 0x22
 8018194:	d000      	beq.n	8018198 <UART_RxISR_16BIT+0x20>
 8018196:	e0c2      	b.n	801831e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801819e:	214c      	movs	r1, #76	@ 0x4c
 80181a0:	187b      	adds	r3, r7, r1
 80181a2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80181a8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80181aa:	187b      	adds	r3, r7, r1
 80181ac:	183a      	adds	r2, r7, r0
 80181ae:	881b      	ldrh	r3, [r3, #0]
 80181b0:	8812      	ldrh	r2, [r2, #0]
 80181b2:	4013      	ands	r3, r2
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80181b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80181be:	1c9a      	adds	r2, r3, #2
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	225a      	movs	r2, #90	@ 0x5a
 80181c8:	5a9b      	ldrh	r3, [r3, r2]
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	3b01      	subs	r3, #1
 80181ce:	b299      	uxth	r1, r3
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	225a      	movs	r2, #90	@ 0x5a
 80181d4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	225a      	movs	r2, #90	@ 0x5a
 80181da:	5a9b      	ldrh	r3, [r3, r2]
 80181dc:	b29b      	uxth	r3, r3
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d000      	beq.n	80181e4 <UART_RxISR_16BIT+0x6c>
 80181e2:	e0a4      	b.n	801832e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181e4:	f3ef 8310 	mrs	r3, PRIMASK
 80181e8:	623b      	str	r3, [r7, #32]
  return(result);
 80181ea:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80181ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80181ee:	2301      	movs	r3, #1
 80181f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181f4:	f383 8810 	msr	PRIMASK, r3
}
 80181f8:	46c0      	nop			@ (mov r8, r8)
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	681a      	ldr	r2, [r3, #0]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	494c      	ldr	r1, [pc, #304]	@ (8018338 <UART_RxISR_16BIT+0x1c0>)
 8018206:	400a      	ands	r2, r1
 8018208:	601a      	str	r2, [r3, #0]
 801820a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801820c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018210:	f383 8810 	msr	PRIMASK, r3
}
 8018214:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018216:	f3ef 8310 	mrs	r3, PRIMASK
 801821a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801821e:	643b      	str	r3, [r7, #64]	@ 0x40
 8018220:	2301      	movs	r3, #1
 8018222:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018226:	f383 8810 	msr	PRIMASK, r3
}
 801822a:	46c0      	nop			@ (mov r8, r8)
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	689a      	ldr	r2, [r3, #8]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2101      	movs	r1, #1
 8018238:	438a      	bics	r2, r1
 801823a:	609a      	str	r2, [r3, #8]
 801823c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801823e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018242:	f383 8810 	msr	PRIMASK, r3
}
 8018246:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2280      	movs	r2, #128	@ 0x80
 801824c:	2120      	movs	r1, #32
 801824e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2200      	movs	r2, #0
 8018254:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2200      	movs	r2, #0
 801825a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a36      	ldr	r2, [pc, #216]	@ (801833c <UART_RxISR_16BIT+0x1c4>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d01f      	beq.n	80182a6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	685a      	ldr	r2, [r3, #4]
 801826c:	2380      	movs	r3, #128	@ 0x80
 801826e:	041b      	lsls	r3, r3, #16
 8018270:	4013      	ands	r3, r2
 8018272:	d018      	beq.n	80182a6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018274:	f3ef 8310 	mrs	r3, PRIMASK
 8018278:	617b      	str	r3, [r7, #20]
  return(result);
 801827a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801827c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801827e:	2301      	movs	r3, #1
 8018280:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	f383 8810 	msr	PRIMASK, r3
}
 8018288:	46c0      	nop			@ (mov r8, r8)
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	681a      	ldr	r2, [r3, #0]
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	681b      	ldr	r3, [r3, #0]
 8018294:	492a      	ldr	r1, [pc, #168]	@ (8018340 <UART_RxISR_16BIT+0x1c8>)
 8018296:	400a      	ands	r2, r1
 8018298:	601a      	str	r2, [r3, #0]
 801829a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801829c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801829e:	69fb      	ldr	r3, [r7, #28]
 80182a0:	f383 8810 	msr	PRIMASK, r3
}
 80182a4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80182aa:	2b01      	cmp	r3, #1
 80182ac:	d130      	bne.n	8018310 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	2200      	movs	r2, #0
 80182b2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182b4:	f3ef 8310 	mrs	r3, PRIMASK
 80182b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80182ba:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80182bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80182be:	2301      	movs	r3, #1
 80182c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	f383 8810 	msr	PRIMASK, r3
}
 80182c8:	46c0      	nop			@ (mov r8, r8)
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	681a      	ldr	r2, [r3, #0]
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	2110      	movs	r1, #16
 80182d6:	438a      	bics	r2, r1
 80182d8:	601a      	str	r2, [r3, #0]
 80182da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182de:	693b      	ldr	r3, [r7, #16]
 80182e0:	f383 8810 	msr	PRIMASK, r3
}
 80182e4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	69db      	ldr	r3, [r3, #28]
 80182ec:	2210      	movs	r2, #16
 80182ee:	4013      	ands	r3, r2
 80182f0:	2b10      	cmp	r3, #16
 80182f2:	d103      	bne.n	80182fc <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	2210      	movs	r2, #16
 80182fa:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	22ac      	movs	r2, #172	@ 0xac
 8018300:	589b      	ldr	r3, [r3, r2]
 8018302:	687a      	ldr	r2, [r7, #4]
 8018304:	2158      	movs	r1, #88	@ 0x58
 8018306:	5a51      	ldrh	r1, [r2, r1]
 8018308:	687a      	ldr	r2, [r7, #4]
 801830a:	0010      	movs	r0, r2
 801830c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801830e:	e00e      	b.n	801832e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	2294      	movs	r2, #148	@ 0x94
 8018314:	589b      	ldr	r3, [r3, r2]
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	0010      	movs	r0, r2
 801831a:	4798      	blx	r3
}
 801831c:	e007      	b.n	801832e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	699a      	ldr	r2, [r3, #24]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	2108      	movs	r1, #8
 801832a:	430a      	orrs	r2, r1
 801832c:	619a      	str	r2, [r3, #24]
}
 801832e:	46c0      	nop			@ (mov r8, r8)
 8018330:	46bd      	mov	sp, r7
 8018332:	b014      	add	sp, #80	@ 0x50
 8018334:	bd80      	pop	{r7, pc}
 8018336:	46c0      	nop			@ (mov r8, r8)
 8018338:	fffffedf 	.word	0xfffffedf
 801833c:	40004800 	.word	0x40004800
 8018340:	fbffffff 	.word	0xfbffffff

08018344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b082      	sub	sp, #8
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801834c:	46c0      	nop			@ (mov r8, r8)
 801834e:	46bd      	mov	sp, r7
 8018350:	b002      	add	sp, #8
 8018352:	bd80      	pop	{r7, pc}

08018354 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018354:	b580      	push	{r7, lr}
 8018356:	b084      	sub	sp, #16
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2244      	movs	r2, #68	@ 0x44
 8018360:	2100      	movs	r1, #0
 8018362:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018364:	4b05      	ldr	r3, [pc, #20]	@ (801837c <USB_EnableGlobalInt+0x28>)
 8018366:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	b299      	uxth	r1, r3
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2240      	movs	r2, #64	@ 0x40
 8018370:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018372:	2300      	movs	r3, #0
}
 8018374:	0018      	movs	r0, r3
 8018376:	46bd      	mov	sp, r7
 8018378:	b004      	add	sp, #16
 801837a:	bd80      	pop	{r7, pc}
 801837c:	0000bf80 	.word	0x0000bf80

08018380 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b084      	sub	sp, #16
 8018384:	af00      	add	r7, sp, #0
 8018386:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018388:	4b09      	ldr	r3, [pc, #36]	@ (80183b0 <USB_DisableGlobalInt+0x30>)
 801838a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2240      	movs	r2, #64	@ 0x40
 8018390:	5a9b      	ldrh	r3, [r3, r2]
 8018392:	b29b      	uxth	r3, r3
 8018394:	68fa      	ldr	r2, [r7, #12]
 8018396:	b292      	uxth	r2, r2
 8018398:	43d2      	mvns	r2, r2
 801839a:	b292      	uxth	r2, r2
 801839c:	4013      	ands	r3, r2
 801839e:	b299      	uxth	r1, r3
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2240      	movs	r2, #64	@ 0x40
 80183a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80183a6:	2300      	movs	r3, #0
}
 80183a8:	0018      	movs	r0, r3
 80183aa:	46bd      	mov	sp, r7
 80183ac:	b004      	add	sp, #16
 80183ae:	bd80      	pop	{r7, pc}
 80183b0:	0000bf80 	.word	0x0000bf80

080183b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80183b4:	b084      	sub	sp, #16
 80183b6:	b590      	push	{r4, r7, lr}
 80183b8:	b083      	sub	sp, #12
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
 80183be:	2004      	movs	r0, #4
 80183c0:	2410      	movs	r4, #16
 80183c2:	1900      	adds	r0, r0, r4
 80183c4:	2408      	movs	r4, #8
 80183c6:	46a4      	mov	ip, r4
 80183c8:	44bc      	add	ip, r7
 80183ca:	4460      	add	r0, ip
 80183cc:	6001      	str	r1, [r0, #0]
 80183ce:	6042      	str	r2, [r0, #4]
 80183d0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	2240      	movs	r2, #64	@ 0x40
 80183d6:	2101      	movs	r1, #1
 80183d8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2240      	movs	r2, #64	@ 0x40
 80183de:	2100      	movs	r1, #0
 80183e0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2244      	movs	r2, #68	@ 0x44
 80183e6:	2100      	movs	r1, #0
 80183e8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	2250      	movs	r2, #80	@ 0x50
 80183ee:	2100      	movs	r1, #0
 80183f0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80183f2:	2300      	movs	r3, #0
}
 80183f4:	0018      	movs	r0, r3
 80183f6:	46bd      	mov	sp, r7
 80183f8:	b003      	add	sp, #12
 80183fa:	bc90      	pop	{r4, r7}
 80183fc:	bc08      	pop	{r3}
 80183fe:	b004      	add	sp, #16
 8018400:	4718      	bx	r3
	...

08018404 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018404:	b580      	push	{r7, lr}
 8018406:	b09c      	sub	sp, #112	@ 0x70
 8018408:	af00      	add	r7, sp, #0
 801840a:	6078      	str	r0, [r7, #4]
 801840c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801840e:	236f      	movs	r3, #111	@ 0x6f
 8018410:	18fb      	adds	r3, r7, r3
 8018412:	2200      	movs	r2, #0
 8018414:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	009b      	lsls	r3, r3, #2
 801841e:	18d3      	adds	r3, r2, r3
 8018420:	881b      	ldrh	r3, [r3, #0]
 8018422:	b29a      	uxth	r2, r3
 8018424:	236c      	movs	r3, #108	@ 0x6c
 8018426:	18fb      	adds	r3, r7, r3
 8018428:	49a3      	ldr	r1, [pc, #652]	@ (80186b8 <USB_ActivateEndpoint+0x2b4>)
 801842a:	400a      	ands	r2, r1
 801842c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801842e:	683b      	ldr	r3, [r7, #0]
 8018430:	78db      	ldrb	r3, [r3, #3]
 8018432:	2b03      	cmp	r3, #3
 8018434:	d017      	beq.n	8018466 <USB_ActivateEndpoint+0x62>
 8018436:	dc28      	bgt.n	801848a <USB_ActivateEndpoint+0x86>
 8018438:	2b02      	cmp	r3, #2
 801843a:	d00e      	beq.n	801845a <USB_ActivateEndpoint+0x56>
 801843c:	dc25      	bgt.n	801848a <USB_ActivateEndpoint+0x86>
 801843e:	2b00      	cmp	r3, #0
 8018440:	d002      	beq.n	8018448 <USB_ActivateEndpoint+0x44>
 8018442:	2b01      	cmp	r3, #1
 8018444:	d018      	beq.n	8018478 <USB_ActivateEndpoint+0x74>
 8018446:	e020      	b.n	801848a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018448:	226c      	movs	r2, #108	@ 0x6c
 801844a:	18bb      	adds	r3, r7, r2
 801844c:	18ba      	adds	r2, r7, r2
 801844e:	8812      	ldrh	r2, [r2, #0]
 8018450:	2180      	movs	r1, #128	@ 0x80
 8018452:	0089      	lsls	r1, r1, #2
 8018454:	430a      	orrs	r2, r1
 8018456:	801a      	strh	r2, [r3, #0]
      break;
 8018458:	e01c      	b.n	8018494 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801845a:	226c      	movs	r2, #108	@ 0x6c
 801845c:	18bb      	adds	r3, r7, r2
 801845e:	18ba      	adds	r2, r7, r2
 8018460:	8812      	ldrh	r2, [r2, #0]
 8018462:	801a      	strh	r2, [r3, #0]
      break;
 8018464:	e016      	b.n	8018494 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8018466:	226c      	movs	r2, #108	@ 0x6c
 8018468:	18bb      	adds	r3, r7, r2
 801846a:	18ba      	adds	r2, r7, r2
 801846c:	8812      	ldrh	r2, [r2, #0]
 801846e:	21c0      	movs	r1, #192	@ 0xc0
 8018470:	00c9      	lsls	r1, r1, #3
 8018472:	430a      	orrs	r2, r1
 8018474:	801a      	strh	r2, [r3, #0]
      break;
 8018476:	e00d      	b.n	8018494 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8018478:	226c      	movs	r2, #108	@ 0x6c
 801847a:	18bb      	adds	r3, r7, r2
 801847c:	18ba      	adds	r2, r7, r2
 801847e:	8812      	ldrh	r2, [r2, #0]
 8018480:	2180      	movs	r1, #128	@ 0x80
 8018482:	00c9      	lsls	r1, r1, #3
 8018484:	430a      	orrs	r2, r1
 8018486:	801a      	strh	r2, [r3, #0]
      break;
 8018488:	e004      	b.n	8018494 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801848a:	236f      	movs	r3, #111	@ 0x6f
 801848c:	18fb      	adds	r3, r7, r3
 801848e:	2201      	movs	r2, #1
 8018490:	701a      	strb	r2, [r3, #0]
      break;
 8018492:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8018494:	687a      	ldr	r2, [r7, #4]
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	009b      	lsls	r3, r3, #2
 801849c:	18d3      	adds	r3, r2, r3
 801849e:	226c      	movs	r2, #108	@ 0x6c
 80184a0:	18ba      	adds	r2, r7, r2
 80184a2:	8812      	ldrh	r2, [r2, #0]
 80184a4:	4985      	ldr	r1, [pc, #532]	@ (80186bc <USB_ActivateEndpoint+0x2b8>)
 80184a6:	430a      	orrs	r2, r1
 80184a8:	b292      	uxth	r2, r2
 80184aa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80184ac:	687a      	ldr	r2, [r7, #4]
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	009b      	lsls	r3, r3, #2
 80184b4:	18d3      	adds	r3, r2, r3
 80184b6:	881b      	ldrh	r3, [r3, #0]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	b21b      	sxth	r3, r3
 80184bc:	4a80      	ldr	r2, [pc, #512]	@ (80186c0 <USB_ActivateEndpoint+0x2bc>)
 80184be:	4013      	ands	r3, r2
 80184c0:	b21a      	sxth	r2, r3
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	b21b      	sxth	r3, r3
 80184c8:	4313      	orrs	r3, r2
 80184ca:	b21a      	sxth	r2, r3
 80184cc:	2166      	movs	r1, #102	@ 0x66
 80184ce:	187b      	adds	r3, r7, r1
 80184d0:	801a      	strh	r2, [r3, #0]
 80184d2:	687a      	ldr	r2, [r7, #4]
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	781b      	ldrb	r3, [r3, #0]
 80184d8:	009b      	lsls	r3, r3, #2
 80184da:	18d3      	adds	r3, r2, r3
 80184dc:	187a      	adds	r2, r7, r1
 80184de:	8812      	ldrh	r2, [r2, #0]
 80184e0:	4976      	ldr	r1, [pc, #472]	@ (80186bc <USB_ActivateEndpoint+0x2b8>)
 80184e2:	430a      	orrs	r2, r1
 80184e4:	b292      	uxth	r2, r2
 80184e6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	7b1b      	ldrb	r3, [r3, #12]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d000      	beq.n	80184f2 <USB_ActivateEndpoint+0xee>
 80184f0:	e178      	b.n	80187e4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80184f2:	683b      	ldr	r3, [r7, #0]
 80184f4:	785b      	ldrb	r3, [r3, #1]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d100      	bne.n	80184fc <USB_ActivateEndpoint+0xf8>
 80184fa:	e07a      	b.n	80185f2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	61bb      	str	r3, [r7, #24]
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2250      	movs	r2, #80	@ 0x50
 8018504:	5a9b      	ldrh	r3, [r3, r2]
 8018506:	b29b      	uxth	r3, r3
 8018508:	001a      	movs	r2, r3
 801850a:	69bb      	ldr	r3, [r7, #24]
 801850c:	189b      	adds	r3, r3, r2
 801850e:	61bb      	str	r3, [r7, #24]
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	781b      	ldrb	r3, [r3, #0]
 8018514:	00da      	lsls	r2, r3, #3
 8018516:	69bb      	ldr	r3, [r7, #24]
 8018518:	18d3      	adds	r3, r2, r3
 801851a:	2280      	movs	r2, #128	@ 0x80
 801851c:	00d2      	lsls	r2, r2, #3
 801851e:	4694      	mov	ip, r2
 8018520:	4463      	add	r3, ip
 8018522:	617b      	str	r3, [r7, #20]
 8018524:	683b      	ldr	r3, [r7, #0]
 8018526:	88db      	ldrh	r3, [r3, #6]
 8018528:	085b      	lsrs	r3, r3, #1
 801852a:	b29b      	uxth	r3, r3
 801852c:	18db      	adds	r3, r3, r3
 801852e:	b29a      	uxth	r2, r3
 8018530:	697b      	ldr	r3, [r7, #20]
 8018532:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018534:	687a      	ldr	r2, [r7, #4]
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	781b      	ldrb	r3, [r3, #0]
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	18d2      	adds	r2, r2, r3
 801853e:	2112      	movs	r1, #18
 8018540:	187b      	adds	r3, r7, r1
 8018542:	8812      	ldrh	r2, [r2, #0]
 8018544:	801a      	strh	r2, [r3, #0]
 8018546:	187b      	adds	r3, r7, r1
 8018548:	881b      	ldrh	r3, [r3, #0]
 801854a:	2240      	movs	r2, #64	@ 0x40
 801854c:	4013      	ands	r3, r2
 801854e:	d016      	beq.n	801857e <USB_ActivateEndpoint+0x17a>
 8018550:	687a      	ldr	r2, [r7, #4]
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	18d3      	adds	r3, r2, r3
 801855a:	881b      	ldrh	r3, [r3, #0]
 801855c:	b29a      	uxth	r2, r3
 801855e:	2010      	movs	r0, #16
 8018560:	183b      	adds	r3, r7, r0
 8018562:	4957      	ldr	r1, [pc, #348]	@ (80186c0 <USB_ActivateEndpoint+0x2bc>)
 8018564:	400a      	ands	r2, r1
 8018566:	801a      	strh	r2, [r3, #0]
 8018568:	687a      	ldr	r2, [r7, #4]
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	781b      	ldrb	r3, [r3, #0]
 801856e:	009b      	lsls	r3, r3, #2
 8018570:	18d3      	adds	r3, r2, r3
 8018572:	183a      	adds	r2, r7, r0
 8018574:	8812      	ldrh	r2, [r2, #0]
 8018576:	4953      	ldr	r1, [pc, #332]	@ (80186c4 <USB_ActivateEndpoint+0x2c0>)
 8018578:	430a      	orrs	r2, r1
 801857a:	b292      	uxth	r2, r2
 801857c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801857e:	683b      	ldr	r3, [r7, #0]
 8018580:	78db      	ldrb	r3, [r3, #3]
 8018582:	2b01      	cmp	r3, #1
 8018584:	d01d      	beq.n	80185c2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018586:	687a      	ldr	r2, [r7, #4]
 8018588:	683b      	ldr	r3, [r7, #0]
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	009b      	lsls	r3, r3, #2
 801858e:	18d3      	adds	r3, r2, r3
 8018590:	881b      	ldrh	r3, [r3, #0]
 8018592:	b29a      	uxth	r2, r3
 8018594:	200c      	movs	r0, #12
 8018596:	183b      	adds	r3, r7, r0
 8018598:	494b      	ldr	r1, [pc, #300]	@ (80186c8 <USB_ActivateEndpoint+0x2c4>)
 801859a:	400a      	ands	r2, r1
 801859c:	801a      	strh	r2, [r3, #0]
 801859e:	183b      	adds	r3, r7, r0
 80185a0:	183a      	adds	r2, r7, r0
 80185a2:	8812      	ldrh	r2, [r2, #0]
 80185a4:	2120      	movs	r1, #32
 80185a6:	404a      	eors	r2, r1
 80185a8:	801a      	strh	r2, [r3, #0]
 80185aa:	687a      	ldr	r2, [r7, #4]
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	009b      	lsls	r3, r3, #2
 80185b2:	18d3      	adds	r3, r2, r3
 80185b4:	183a      	adds	r2, r7, r0
 80185b6:	8812      	ldrh	r2, [r2, #0]
 80185b8:	4940      	ldr	r1, [pc, #256]	@ (80186bc <USB_ActivateEndpoint+0x2b8>)
 80185ba:	430a      	orrs	r2, r1
 80185bc:	b292      	uxth	r2, r2
 80185be:	801a      	strh	r2, [r3, #0]
 80185c0:	e2b4      	b.n	8018b2c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	683b      	ldr	r3, [r7, #0]
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	18d3      	adds	r3, r2, r3
 80185cc:	881b      	ldrh	r3, [r3, #0]
 80185ce:	b29a      	uxth	r2, r3
 80185d0:	200e      	movs	r0, #14
 80185d2:	183b      	adds	r3, r7, r0
 80185d4:	493c      	ldr	r1, [pc, #240]	@ (80186c8 <USB_ActivateEndpoint+0x2c4>)
 80185d6:	400a      	ands	r2, r1
 80185d8:	801a      	strh	r2, [r3, #0]
 80185da:	687a      	ldr	r2, [r7, #4]
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	781b      	ldrb	r3, [r3, #0]
 80185e0:	009b      	lsls	r3, r3, #2
 80185e2:	18d3      	adds	r3, r2, r3
 80185e4:	183a      	adds	r2, r7, r0
 80185e6:	8812      	ldrh	r2, [r2, #0]
 80185e8:	4934      	ldr	r1, [pc, #208]	@ (80186bc <USB_ActivateEndpoint+0x2b8>)
 80185ea:	430a      	orrs	r2, r1
 80185ec:	b292      	uxth	r2, r2
 80185ee:	801a      	strh	r2, [r3, #0]
 80185f0:	e29c      	b.n	8018b2c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	2250      	movs	r2, #80	@ 0x50
 80185fa:	5a9b      	ldrh	r3, [r3, r2]
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	001a      	movs	r2, r3
 8018600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018602:	189b      	adds	r3, r3, r2
 8018604:	633b      	str	r3, [r7, #48]	@ 0x30
 8018606:	683b      	ldr	r3, [r7, #0]
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	00da      	lsls	r2, r3, #3
 801860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801860e:	18d3      	adds	r3, r2, r3
 8018610:	4a2e      	ldr	r2, [pc, #184]	@ (80186cc <USB_ActivateEndpoint+0x2c8>)
 8018612:	4694      	mov	ip, r2
 8018614:	4463      	add	r3, ip
 8018616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	88db      	ldrh	r3, [r3, #6]
 801861c:	085b      	lsrs	r3, r3, #1
 801861e:	b29b      	uxth	r3, r3
 8018620:	18db      	adds	r3, r3, r3
 8018622:	b29a      	uxth	r2, r3
 8018624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018626:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2250      	movs	r2, #80	@ 0x50
 8018630:	5a9b      	ldrh	r3, [r3, r2]
 8018632:	b29b      	uxth	r3, r3
 8018634:	001a      	movs	r2, r3
 8018636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018638:	189b      	adds	r3, r3, r2
 801863a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	00da      	lsls	r2, r3, #3
 8018642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018644:	18d3      	adds	r3, r2, r3
 8018646:	4a22      	ldr	r2, [pc, #136]	@ (80186d0 <USB_ActivateEndpoint+0x2cc>)
 8018648:	4694      	mov	ip, r2
 801864a:	4463      	add	r3, ip
 801864c:	627b      	str	r3, [r7, #36]	@ 0x24
 801864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018650:	881b      	ldrh	r3, [r3, #0]
 8018652:	b29b      	uxth	r3, r3
 8018654:	059b      	lsls	r3, r3, #22
 8018656:	0d9b      	lsrs	r3, r3, #22
 8018658:	b29a      	uxth	r2, r3
 801865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801865c:	801a      	strh	r2, [r3, #0]
 801865e:	683b      	ldr	r3, [r7, #0]
 8018660:	691b      	ldr	r3, [r3, #16]
 8018662:	2b3e      	cmp	r3, #62	@ 0x3e
 8018664:	d91a      	bls.n	801869c <USB_ActivateEndpoint+0x298>
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	691b      	ldr	r3, [r3, #16]
 801866a:	095b      	lsrs	r3, r3, #5
 801866c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	691b      	ldr	r3, [r3, #16]
 8018672:	221f      	movs	r2, #31
 8018674:	4013      	ands	r3, r2
 8018676:	d102      	bne.n	801867e <USB_ActivateEndpoint+0x27a>
 8018678:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801867a:	3b01      	subs	r3, #1
 801867c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018680:	881b      	ldrh	r3, [r3, #0]
 8018682:	b29a      	uxth	r2, r3
 8018684:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018686:	b29b      	uxth	r3, r3
 8018688:	029b      	lsls	r3, r3, #10
 801868a:	b29b      	uxth	r3, r3
 801868c:	4313      	orrs	r3, r2
 801868e:	b29b      	uxth	r3, r3
 8018690:	4a10      	ldr	r2, [pc, #64]	@ (80186d4 <USB_ActivateEndpoint+0x2d0>)
 8018692:	4313      	orrs	r3, r2
 8018694:	b29a      	uxth	r2, r3
 8018696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018698:	801a      	strh	r2, [r3, #0]
 801869a:	e034      	b.n	8018706 <USB_ActivateEndpoint+0x302>
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	691b      	ldr	r3, [r3, #16]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d119      	bne.n	80186d8 <USB_ActivateEndpoint+0x2d4>
 80186a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a6:	881b      	ldrh	r3, [r3, #0]
 80186a8:	b29b      	uxth	r3, r3
 80186aa:	4a0a      	ldr	r2, [pc, #40]	@ (80186d4 <USB_ActivateEndpoint+0x2d0>)
 80186ac:	4313      	orrs	r3, r2
 80186ae:	b29a      	uxth	r2, r3
 80186b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b2:	801a      	strh	r2, [r3, #0]
 80186b4:	e027      	b.n	8018706 <USB_ActivateEndpoint+0x302>
 80186b6:	46c0      	nop			@ (mov r8, r8)
 80186b8:	ffff898f 	.word	0xffff898f
 80186bc:	ffff8080 	.word	0xffff8080
 80186c0:	ffff8f8f 	.word	0xffff8f8f
 80186c4:	ffff80c0 	.word	0xffff80c0
 80186c8:	ffff8fbf 	.word	0xffff8fbf
 80186cc:	00000404 	.word	0x00000404
 80186d0:	00000406 	.word	0x00000406
 80186d4:	ffff8000 	.word	0xffff8000
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	691b      	ldr	r3, [r3, #16]
 80186dc:	085b      	lsrs	r3, r3, #1
 80186de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80186e0:	683b      	ldr	r3, [r7, #0]
 80186e2:	691b      	ldr	r3, [r3, #16]
 80186e4:	2201      	movs	r2, #1
 80186e6:	4013      	ands	r3, r2
 80186e8:	d002      	beq.n	80186f0 <USB_ActivateEndpoint+0x2ec>
 80186ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80186ec:	3301      	adds	r3, #1
 80186ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80186f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f2:	881b      	ldrh	r3, [r3, #0]
 80186f4:	b29a      	uxth	r2, r3
 80186f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	029b      	lsls	r3, r3, #10
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	4313      	orrs	r3, r2
 8018700:	b29a      	uxth	r2, r3
 8018702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018704:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018706:	687a      	ldr	r2, [r7, #4]
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	781b      	ldrb	r3, [r3, #0]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	18d2      	adds	r2, r2, r3
 8018710:	2122      	movs	r1, #34	@ 0x22
 8018712:	187b      	adds	r3, r7, r1
 8018714:	8812      	ldrh	r2, [r2, #0]
 8018716:	801a      	strh	r2, [r3, #0]
 8018718:	187b      	adds	r3, r7, r1
 801871a:	881a      	ldrh	r2, [r3, #0]
 801871c:	2380      	movs	r3, #128	@ 0x80
 801871e:	01db      	lsls	r3, r3, #7
 8018720:	4013      	ands	r3, r2
 8018722:	d016      	beq.n	8018752 <USB_ActivateEndpoint+0x34e>
 8018724:	687a      	ldr	r2, [r7, #4]
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	18d3      	adds	r3, r2, r3
 801872e:	881b      	ldrh	r3, [r3, #0]
 8018730:	b29a      	uxth	r2, r3
 8018732:	2020      	movs	r0, #32
 8018734:	183b      	adds	r3, r7, r0
 8018736:	49dd      	ldr	r1, [pc, #884]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 8018738:	400a      	ands	r2, r1
 801873a:	801a      	strh	r2, [r3, #0]
 801873c:	687a      	ldr	r2, [r7, #4]
 801873e:	683b      	ldr	r3, [r7, #0]
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	009b      	lsls	r3, r3, #2
 8018744:	18d3      	adds	r3, r2, r3
 8018746:	183a      	adds	r2, r7, r0
 8018748:	8812      	ldrh	r2, [r2, #0]
 801874a:	49d9      	ldr	r1, [pc, #868]	@ (8018ab0 <USB_ActivateEndpoint+0x6ac>)
 801874c:	430a      	orrs	r2, r1
 801874e:	b292      	uxth	r2, r2
 8018750:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	781b      	ldrb	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d125      	bne.n	80187a6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801875a:	687a      	ldr	r2, [r7, #4]
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	009b      	lsls	r3, r3, #2
 8018762:	18d3      	adds	r3, r2, r3
 8018764:	881b      	ldrh	r3, [r3, #0]
 8018766:	b29a      	uxth	r2, r3
 8018768:	201c      	movs	r0, #28
 801876a:	183b      	adds	r3, r7, r0
 801876c:	49d1      	ldr	r1, [pc, #836]	@ (8018ab4 <USB_ActivateEndpoint+0x6b0>)
 801876e:	400a      	ands	r2, r1
 8018770:	801a      	strh	r2, [r3, #0]
 8018772:	183b      	adds	r3, r7, r0
 8018774:	183a      	adds	r2, r7, r0
 8018776:	8812      	ldrh	r2, [r2, #0]
 8018778:	2180      	movs	r1, #128	@ 0x80
 801877a:	0149      	lsls	r1, r1, #5
 801877c:	404a      	eors	r2, r1
 801877e:	801a      	strh	r2, [r3, #0]
 8018780:	183b      	adds	r3, r7, r0
 8018782:	183a      	adds	r2, r7, r0
 8018784:	8812      	ldrh	r2, [r2, #0]
 8018786:	2180      	movs	r1, #128	@ 0x80
 8018788:	0189      	lsls	r1, r1, #6
 801878a:	404a      	eors	r2, r1
 801878c:	801a      	strh	r2, [r3, #0]
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	009b      	lsls	r3, r3, #2
 8018796:	18d3      	adds	r3, r2, r3
 8018798:	183a      	adds	r2, r7, r0
 801879a:	8812      	ldrh	r2, [r2, #0]
 801879c:	49c6      	ldr	r1, [pc, #792]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 801879e:	430a      	orrs	r2, r1
 80187a0:	b292      	uxth	r2, r2
 80187a2:	801a      	strh	r2, [r3, #0]
 80187a4:	e1c2      	b.n	8018b2c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80187a6:	687a      	ldr	r2, [r7, #4]
 80187a8:	683b      	ldr	r3, [r7, #0]
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	009b      	lsls	r3, r3, #2
 80187ae:	18d3      	adds	r3, r2, r3
 80187b0:	881b      	ldrh	r3, [r3, #0]
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	201e      	movs	r0, #30
 80187b6:	183b      	adds	r3, r7, r0
 80187b8:	49be      	ldr	r1, [pc, #760]	@ (8018ab4 <USB_ActivateEndpoint+0x6b0>)
 80187ba:	400a      	ands	r2, r1
 80187bc:	801a      	strh	r2, [r3, #0]
 80187be:	183b      	adds	r3, r7, r0
 80187c0:	183a      	adds	r2, r7, r0
 80187c2:	8812      	ldrh	r2, [r2, #0]
 80187c4:	2180      	movs	r1, #128	@ 0x80
 80187c6:	0189      	lsls	r1, r1, #6
 80187c8:	404a      	eors	r2, r1
 80187ca:	801a      	strh	r2, [r3, #0]
 80187cc:	687a      	ldr	r2, [r7, #4]
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	781b      	ldrb	r3, [r3, #0]
 80187d2:	009b      	lsls	r3, r3, #2
 80187d4:	18d3      	adds	r3, r2, r3
 80187d6:	183a      	adds	r2, r7, r0
 80187d8:	8812      	ldrh	r2, [r2, #0]
 80187da:	49b7      	ldr	r1, [pc, #732]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 80187dc:	430a      	orrs	r2, r1
 80187de:	b292      	uxth	r2, r2
 80187e0:	801a      	strh	r2, [r3, #0]
 80187e2:	e1a3      	b.n	8018b2c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80187e4:	683b      	ldr	r3, [r7, #0]
 80187e6:	78db      	ldrb	r3, [r3, #3]
 80187e8:	2b02      	cmp	r3, #2
 80187ea:	d117      	bne.n	801881c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	18d3      	adds	r3, r2, r3
 80187f6:	881b      	ldrh	r3, [r3, #0]
 80187f8:	b29a      	uxth	r2, r3
 80187fa:	2062      	movs	r0, #98	@ 0x62
 80187fc:	183b      	adds	r3, r7, r0
 80187fe:	49ab      	ldr	r1, [pc, #684]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 8018800:	400a      	ands	r2, r1
 8018802:	801a      	strh	r2, [r3, #0]
 8018804:	687a      	ldr	r2, [r7, #4]
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	18d3      	adds	r3, r2, r3
 801880e:	183a      	adds	r2, r7, r0
 8018810:	8812      	ldrh	r2, [r2, #0]
 8018812:	49aa      	ldr	r1, [pc, #680]	@ (8018abc <USB_ActivateEndpoint+0x6b8>)
 8018814:	430a      	orrs	r2, r1
 8018816:	b292      	uxth	r2, r2
 8018818:	801a      	strh	r2, [r3, #0]
 801881a:	e016      	b.n	801884a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801881c:	687a      	ldr	r2, [r7, #4]
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	781b      	ldrb	r3, [r3, #0]
 8018822:	009b      	lsls	r3, r3, #2
 8018824:	18d3      	adds	r3, r2, r3
 8018826:	881b      	ldrh	r3, [r3, #0]
 8018828:	b29a      	uxth	r2, r3
 801882a:	2064      	movs	r0, #100	@ 0x64
 801882c:	183b      	adds	r3, r7, r0
 801882e:	49a4      	ldr	r1, [pc, #656]	@ (8018ac0 <USB_ActivateEndpoint+0x6bc>)
 8018830:	400a      	ands	r2, r1
 8018832:	801a      	strh	r2, [r3, #0]
 8018834:	687a      	ldr	r2, [r7, #4]
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	009b      	lsls	r3, r3, #2
 801883c:	18d3      	adds	r3, r2, r3
 801883e:	183a      	adds	r2, r7, r0
 8018840:	8812      	ldrh	r2, [r2, #0]
 8018842:	499d      	ldr	r1, [pc, #628]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 8018844:	430a      	orrs	r2, r1
 8018846:	b292      	uxth	r2, r2
 8018848:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	2250      	movs	r2, #80	@ 0x50
 8018852:	5a9b      	ldrh	r3, [r3, r2]
 8018854:	b29b      	uxth	r3, r3
 8018856:	001a      	movs	r2, r3
 8018858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801885a:	189b      	adds	r3, r3, r2
 801885c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	781b      	ldrb	r3, [r3, #0]
 8018862:	00da      	lsls	r2, r3, #3
 8018864:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018866:	18d3      	adds	r3, r2, r3
 8018868:	2280      	movs	r2, #128	@ 0x80
 801886a:	00d2      	lsls	r2, r2, #3
 801886c:	4694      	mov	ip, r2
 801886e:	4463      	add	r3, ip
 8018870:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018872:	683b      	ldr	r3, [r7, #0]
 8018874:	891b      	ldrh	r3, [r3, #8]
 8018876:	085b      	lsrs	r3, r3, #1
 8018878:	b29b      	uxth	r3, r3
 801887a:	18db      	adds	r3, r3, r3
 801887c:	b29a      	uxth	r2, r3
 801887e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018880:	801a      	strh	r2, [r3, #0]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	657b      	str	r3, [r7, #84]	@ 0x54
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2250      	movs	r2, #80	@ 0x50
 801888a:	5a9b      	ldrh	r3, [r3, r2]
 801888c:	b29b      	uxth	r3, r3
 801888e:	001a      	movs	r2, r3
 8018890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018892:	189b      	adds	r3, r3, r2
 8018894:	657b      	str	r3, [r7, #84]	@ 0x54
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	781b      	ldrb	r3, [r3, #0]
 801889a:	00da      	lsls	r2, r3, #3
 801889c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801889e:	18d3      	adds	r3, r2, r3
 80188a0:	4a88      	ldr	r2, [pc, #544]	@ (8018ac4 <USB_ActivateEndpoint+0x6c0>)
 80188a2:	4694      	mov	ip, r2
 80188a4:	4463      	add	r3, ip
 80188a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	895b      	ldrh	r3, [r3, #10]
 80188ac:	085b      	lsrs	r3, r3, #1
 80188ae:	b29b      	uxth	r3, r3
 80188b0:	18db      	adds	r3, r3, r3
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80188b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	785b      	ldrb	r3, [r3, #1]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d000      	beq.n	80188c2 <USB_ActivateEndpoint+0x4be>
 80188c0:	e087      	b.n	80189d2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	781b      	ldrb	r3, [r3, #0]
 80188c8:	009b      	lsls	r3, r3, #2
 80188ca:	18d2      	adds	r2, r2, r3
 80188cc:	2140      	movs	r1, #64	@ 0x40
 80188ce:	187b      	adds	r3, r7, r1
 80188d0:	8812      	ldrh	r2, [r2, #0]
 80188d2:	801a      	strh	r2, [r3, #0]
 80188d4:	187b      	adds	r3, r7, r1
 80188d6:	881a      	ldrh	r2, [r3, #0]
 80188d8:	2380      	movs	r3, #128	@ 0x80
 80188da:	01db      	lsls	r3, r3, #7
 80188dc:	4013      	ands	r3, r2
 80188de:	d016      	beq.n	801890e <USB_ActivateEndpoint+0x50a>
 80188e0:	687a      	ldr	r2, [r7, #4]
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	781b      	ldrb	r3, [r3, #0]
 80188e6:	009b      	lsls	r3, r3, #2
 80188e8:	18d3      	adds	r3, r2, r3
 80188ea:	881b      	ldrh	r3, [r3, #0]
 80188ec:	b29a      	uxth	r2, r3
 80188ee:	203e      	movs	r0, #62	@ 0x3e
 80188f0:	183b      	adds	r3, r7, r0
 80188f2:	496e      	ldr	r1, [pc, #440]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 80188f4:	400a      	ands	r2, r1
 80188f6:	801a      	strh	r2, [r3, #0]
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	781b      	ldrb	r3, [r3, #0]
 80188fe:	009b      	lsls	r3, r3, #2
 8018900:	18d3      	adds	r3, r2, r3
 8018902:	183a      	adds	r2, r7, r0
 8018904:	8812      	ldrh	r2, [r2, #0]
 8018906:	496a      	ldr	r1, [pc, #424]	@ (8018ab0 <USB_ActivateEndpoint+0x6ac>)
 8018908:	430a      	orrs	r2, r1
 801890a:	b292      	uxth	r2, r2
 801890c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801890e:	687a      	ldr	r2, [r7, #4]
 8018910:	683b      	ldr	r3, [r7, #0]
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	009b      	lsls	r3, r3, #2
 8018916:	18d2      	adds	r2, r2, r3
 8018918:	213c      	movs	r1, #60	@ 0x3c
 801891a:	187b      	adds	r3, r7, r1
 801891c:	8812      	ldrh	r2, [r2, #0]
 801891e:	801a      	strh	r2, [r3, #0]
 8018920:	187b      	adds	r3, r7, r1
 8018922:	881b      	ldrh	r3, [r3, #0]
 8018924:	2240      	movs	r2, #64	@ 0x40
 8018926:	4013      	ands	r3, r2
 8018928:	d016      	beq.n	8018958 <USB_ActivateEndpoint+0x554>
 801892a:	687a      	ldr	r2, [r7, #4]
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	781b      	ldrb	r3, [r3, #0]
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	18d3      	adds	r3, r2, r3
 8018934:	881b      	ldrh	r3, [r3, #0]
 8018936:	b29a      	uxth	r2, r3
 8018938:	203a      	movs	r0, #58	@ 0x3a
 801893a:	183b      	adds	r3, r7, r0
 801893c:	495b      	ldr	r1, [pc, #364]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 801893e:	400a      	ands	r2, r1
 8018940:	801a      	strh	r2, [r3, #0]
 8018942:	687a      	ldr	r2, [r7, #4]
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	18d3      	adds	r3, r2, r3
 801894c:	183a      	adds	r2, r7, r0
 801894e:	8812      	ldrh	r2, [r2, #0]
 8018950:	495d      	ldr	r1, [pc, #372]	@ (8018ac8 <USB_ActivateEndpoint+0x6c4>)
 8018952:	430a      	orrs	r2, r1
 8018954:	b292      	uxth	r2, r2
 8018956:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018958:	687a      	ldr	r2, [r7, #4]
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	781b      	ldrb	r3, [r3, #0]
 801895e:	009b      	lsls	r3, r3, #2
 8018960:	18d3      	adds	r3, r2, r3
 8018962:	881b      	ldrh	r3, [r3, #0]
 8018964:	b29a      	uxth	r2, r3
 8018966:	2038      	movs	r0, #56	@ 0x38
 8018968:	183b      	adds	r3, r7, r0
 801896a:	4952      	ldr	r1, [pc, #328]	@ (8018ab4 <USB_ActivateEndpoint+0x6b0>)
 801896c:	400a      	ands	r2, r1
 801896e:	801a      	strh	r2, [r3, #0]
 8018970:	183b      	adds	r3, r7, r0
 8018972:	183a      	adds	r2, r7, r0
 8018974:	8812      	ldrh	r2, [r2, #0]
 8018976:	2180      	movs	r1, #128	@ 0x80
 8018978:	0149      	lsls	r1, r1, #5
 801897a:	404a      	eors	r2, r1
 801897c:	801a      	strh	r2, [r3, #0]
 801897e:	183b      	adds	r3, r7, r0
 8018980:	183a      	adds	r2, r7, r0
 8018982:	8812      	ldrh	r2, [r2, #0]
 8018984:	2180      	movs	r1, #128	@ 0x80
 8018986:	0189      	lsls	r1, r1, #6
 8018988:	404a      	eors	r2, r1
 801898a:	801a      	strh	r2, [r3, #0]
 801898c:	687a      	ldr	r2, [r7, #4]
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	18d3      	adds	r3, r2, r3
 8018996:	183a      	adds	r2, r7, r0
 8018998:	8812      	ldrh	r2, [r2, #0]
 801899a:	4947      	ldr	r1, [pc, #284]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 801899c:	430a      	orrs	r2, r1
 801899e:	b292      	uxth	r2, r2
 80189a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80189a2:	687a      	ldr	r2, [r7, #4]
 80189a4:	683b      	ldr	r3, [r7, #0]
 80189a6:	781b      	ldrb	r3, [r3, #0]
 80189a8:	009b      	lsls	r3, r3, #2
 80189aa:	18d3      	adds	r3, r2, r3
 80189ac:	881b      	ldrh	r3, [r3, #0]
 80189ae:	b29a      	uxth	r2, r3
 80189b0:	2036      	movs	r0, #54	@ 0x36
 80189b2:	183b      	adds	r3, r7, r0
 80189b4:	4945      	ldr	r1, [pc, #276]	@ (8018acc <USB_ActivateEndpoint+0x6c8>)
 80189b6:	400a      	ands	r2, r1
 80189b8:	801a      	strh	r2, [r3, #0]
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	009b      	lsls	r3, r3, #2
 80189c2:	18d3      	adds	r3, r2, r3
 80189c4:	183a      	adds	r2, r7, r0
 80189c6:	8812      	ldrh	r2, [r2, #0]
 80189c8:	493b      	ldr	r1, [pc, #236]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 80189ca:	430a      	orrs	r2, r1
 80189cc:	b292      	uxth	r2, r2
 80189ce:	801a      	strh	r2, [r3, #0]
 80189d0:	e0ac      	b.n	8018b2c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80189d2:	687a      	ldr	r2, [r7, #4]
 80189d4:	683b      	ldr	r3, [r7, #0]
 80189d6:	781b      	ldrb	r3, [r3, #0]
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	18d2      	adds	r2, r2, r3
 80189dc:	214e      	movs	r1, #78	@ 0x4e
 80189de:	187b      	adds	r3, r7, r1
 80189e0:	8812      	ldrh	r2, [r2, #0]
 80189e2:	801a      	strh	r2, [r3, #0]
 80189e4:	187b      	adds	r3, r7, r1
 80189e6:	881a      	ldrh	r2, [r3, #0]
 80189e8:	2380      	movs	r3, #128	@ 0x80
 80189ea:	01db      	lsls	r3, r3, #7
 80189ec:	4013      	ands	r3, r2
 80189ee:	d016      	beq.n	8018a1e <USB_ActivateEndpoint+0x61a>
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	683b      	ldr	r3, [r7, #0]
 80189f4:	781b      	ldrb	r3, [r3, #0]
 80189f6:	009b      	lsls	r3, r3, #2
 80189f8:	18d3      	adds	r3, r2, r3
 80189fa:	881b      	ldrh	r3, [r3, #0]
 80189fc:	b29a      	uxth	r2, r3
 80189fe:	204c      	movs	r0, #76	@ 0x4c
 8018a00:	183b      	adds	r3, r7, r0
 8018a02:	492a      	ldr	r1, [pc, #168]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 8018a04:	400a      	ands	r2, r1
 8018a06:	801a      	strh	r2, [r3, #0]
 8018a08:	687a      	ldr	r2, [r7, #4]
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	781b      	ldrb	r3, [r3, #0]
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	18d3      	adds	r3, r2, r3
 8018a12:	183a      	adds	r2, r7, r0
 8018a14:	8812      	ldrh	r2, [r2, #0]
 8018a16:	4926      	ldr	r1, [pc, #152]	@ (8018ab0 <USB_ActivateEndpoint+0x6ac>)
 8018a18:	430a      	orrs	r2, r1
 8018a1a:	b292      	uxth	r2, r2
 8018a1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018a1e:	687a      	ldr	r2, [r7, #4]
 8018a20:	683b      	ldr	r3, [r7, #0]
 8018a22:	781b      	ldrb	r3, [r3, #0]
 8018a24:	009b      	lsls	r3, r3, #2
 8018a26:	18d2      	adds	r2, r2, r3
 8018a28:	214a      	movs	r1, #74	@ 0x4a
 8018a2a:	187b      	adds	r3, r7, r1
 8018a2c:	8812      	ldrh	r2, [r2, #0]
 8018a2e:	801a      	strh	r2, [r3, #0]
 8018a30:	187b      	adds	r3, r7, r1
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	2240      	movs	r2, #64	@ 0x40
 8018a36:	4013      	ands	r3, r2
 8018a38:	d016      	beq.n	8018a68 <USB_ActivateEndpoint+0x664>
 8018a3a:	687a      	ldr	r2, [r7, #4]
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	009b      	lsls	r3, r3, #2
 8018a42:	18d3      	adds	r3, r2, r3
 8018a44:	881b      	ldrh	r3, [r3, #0]
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	2048      	movs	r0, #72	@ 0x48
 8018a4a:	183b      	adds	r3, r7, r0
 8018a4c:	4917      	ldr	r1, [pc, #92]	@ (8018aac <USB_ActivateEndpoint+0x6a8>)
 8018a4e:	400a      	ands	r2, r1
 8018a50:	801a      	strh	r2, [r3, #0]
 8018a52:	687a      	ldr	r2, [r7, #4]
 8018a54:	683b      	ldr	r3, [r7, #0]
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	18d3      	adds	r3, r2, r3
 8018a5c:	183a      	adds	r2, r7, r0
 8018a5e:	8812      	ldrh	r2, [r2, #0]
 8018a60:	4919      	ldr	r1, [pc, #100]	@ (8018ac8 <USB_ActivateEndpoint+0x6c4>)
 8018a62:	430a      	orrs	r2, r1
 8018a64:	b292      	uxth	r2, r2
 8018a66:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	78db      	ldrb	r3, [r3, #3]
 8018a6c:	2b01      	cmp	r3, #1
 8018a6e:	d02f      	beq.n	8018ad0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8018a70:	687a      	ldr	r2, [r7, #4]
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	18d3      	adds	r3, r2, r3
 8018a7a:	881b      	ldrh	r3, [r3, #0]
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	2044      	movs	r0, #68	@ 0x44
 8018a80:	183b      	adds	r3, r7, r0
 8018a82:	4912      	ldr	r1, [pc, #72]	@ (8018acc <USB_ActivateEndpoint+0x6c8>)
 8018a84:	400a      	ands	r2, r1
 8018a86:	801a      	strh	r2, [r3, #0]
 8018a88:	183b      	adds	r3, r7, r0
 8018a8a:	183a      	adds	r2, r7, r0
 8018a8c:	8812      	ldrh	r2, [r2, #0]
 8018a8e:	2120      	movs	r1, #32
 8018a90:	404a      	eors	r2, r1
 8018a92:	801a      	strh	r2, [r3, #0]
 8018a94:	687a      	ldr	r2, [r7, #4]
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	18d3      	adds	r3, r2, r3
 8018a9e:	183a      	adds	r2, r7, r0
 8018aa0:	8812      	ldrh	r2, [r2, #0]
 8018aa2:	4905      	ldr	r1, [pc, #20]	@ (8018ab8 <USB_ActivateEndpoint+0x6b4>)
 8018aa4:	430a      	orrs	r2, r1
 8018aa6:	b292      	uxth	r2, r2
 8018aa8:	801a      	strh	r2, [r3, #0]
 8018aaa:	e028      	b.n	8018afe <USB_ActivateEndpoint+0x6fa>
 8018aac:	ffff8f8f 	.word	0xffff8f8f
 8018ab0:	ffffc080 	.word	0xffffc080
 8018ab4:	ffffbf8f 	.word	0xffffbf8f
 8018ab8:	ffff8080 	.word	0xffff8080
 8018abc:	ffff8180 	.word	0xffff8180
 8018ac0:	ffff8e8f 	.word	0xffff8e8f
 8018ac4:	00000404 	.word	0x00000404
 8018ac8:	ffff80c0 	.word	0xffff80c0
 8018acc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	009b      	lsls	r3, r3, #2
 8018ad8:	18d3      	adds	r3, r2, r3
 8018ada:	881b      	ldrh	r3, [r3, #0]
 8018adc:	b29a      	uxth	r2, r3
 8018ade:	2046      	movs	r0, #70	@ 0x46
 8018ae0:	183b      	adds	r3, r7, r0
 8018ae2:	4916      	ldr	r1, [pc, #88]	@ (8018b3c <USB_ActivateEndpoint+0x738>)
 8018ae4:	400a      	ands	r2, r1
 8018ae6:	801a      	strh	r2, [r3, #0]
 8018ae8:	687a      	ldr	r2, [r7, #4]
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	009b      	lsls	r3, r3, #2
 8018af0:	18d3      	adds	r3, r2, r3
 8018af2:	183a      	adds	r2, r7, r0
 8018af4:	8812      	ldrh	r2, [r2, #0]
 8018af6:	4912      	ldr	r1, [pc, #72]	@ (8018b40 <USB_ActivateEndpoint+0x73c>)
 8018af8:	430a      	orrs	r2, r1
 8018afa:	b292      	uxth	r2, r2
 8018afc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018afe:	687a      	ldr	r2, [r7, #4]
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	781b      	ldrb	r3, [r3, #0]
 8018b04:	009b      	lsls	r3, r3, #2
 8018b06:	18d3      	adds	r3, r2, r3
 8018b08:	881b      	ldrh	r3, [r3, #0]
 8018b0a:	b29a      	uxth	r2, r3
 8018b0c:	2042      	movs	r0, #66	@ 0x42
 8018b0e:	183b      	adds	r3, r7, r0
 8018b10:	490c      	ldr	r1, [pc, #48]	@ (8018b44 <USB_ActivateEndpoint+0x740>)
 8018b12:	400a      	ands	r2, r1
 8018b14:	801a      	strh	r2, [r3, #0]
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	683b      	ldr	r3, [r7, #0]
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	009b      	lsls	r3, r3, #2
 8018b1e:	18d3      	adds	r3, r2, r3
 8018b20:	183a      	adds	r2, r7, r0
 8018b22:	8812      	ldrh	r2, [r2, #0]
 8018b24:	4906      	ldr	r1, [pc, #24]	@ (8018b40 <USB_ActivateEndpoint+0x73c>)
 8018b26:	430a      	orrs	r2, r1
 8018b28:	b292      	uxth	r2, r2
 8018b2a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018b2c:	236f      	movs	r3, #111	@ 0x6f
 8018b2e:	18fb      	adds	r3, r7, r3
 8018b30:	781b      	ldrb	r3, [r3, #0]
}
 8018b32:	0018      	movs	r0, r3
 8018b34:	46bd      	mov	sp, r7
 8018b36:	b01c      	add	sp, #112	@ 0x70
 8018b38:	bd80      	pop	{r7, pc}
 8018b3a:	46c0      	nop			@ (mov r8, r8)
 8018b3c:	ffff8fbf 	.word	0xffff8fbf
 8018b40:	ffff8080 	.word	0xffff8080
 8018b44:	ffffbf8f 	.word	0xffffbf8f

08018b48 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b08c      	sub	sp, #48	@ 0x30
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
 8018b50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	7b1b      	ldrb	r3, [r3, #12]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d000      	beq.n	8018b5c <USB_DeactivateEndpoint+0x14>
 8018b5a:	e07e      	b.n	8018c5a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018b5c:	683b      	ldr	r3, [r7, #0]
 8018b5e:	785b      	ldrb	r3, [r3, #1]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d03c      	beq.n	8018bde <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	781b      	ldrb	r3, [r3, #0]
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	18d2      	adds	r2, r2, r3
 8018b6e:	210c      	movs	r1, #12
 8018b70:	187b      	adds	r3, r7, r1
 8018b72:	8812      	ldrh	r2, [r2, #0]
 8018b74:	801a      	strh	r2, [r3, #0]
 8018b76:	187b      	adds	r3, r7, r1
 8018b78:	881b      	ldrh	r3, [r3, #0]
 8018b7a:	2240      	movs	r2, #64	@ 0x40
 8018b7c:	4013      	ands	r3, r2
 8018b7e:	d016      	beq.n	8018bae <USB_DeactivateEndpoint+0x66>
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	781b      	ldrb	r3, [r3, #0]
 8018b86:	009b      	lsls	r3, r3, #2
 8018b88:	18d3      	adds	r3, r2, r3
 8018b8a:	881b      	ldrh	r3, [r3, #0]
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	200a      	movs	r0, #10
 8018b90:	183b      	adds	r3, r7, r0
 8018b92:	49c7      	ldr	r1, [pc, #796]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018b94:	400a      	ands	r2, r1
 8018b96:	801a      	strh	r2, [r3, #0]
 8018b98:	687a      	ldr	r2, [r7, #4]
 8018b9a:	683b      	ldr	r3, [r7, #0]
 8018b9c:	781b      	ldrb	r3, [r3, #0]
 8018b9e:	009b      	lsls	r3, r3, #2
 8018ba0:	18d3      	adds	r3, r2, r3
 8018ba2:	183a      	adds	r2, r7, r0
 8018ba4:	8812      	ldrh	r2, [r2, #0]
 8018ba6:	49c3      	ldr	r1, [pc, #780]	@ (8018eb4 <USB_DeactivateEndpoint+0x36c>)
 8018ba8:	430a      	orrs	r2, r1
 8018baa:	b292      	uxth	r2, r2
 8018bac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018bae:	687a      	ldr	r2, [r7, #4]
 8018bb0:	683b      	ldr	r3, [r7, #0]
 8018bb2:	781b      	ldrb	r3, [r3, #0]
 8018bb4:	009b      	lsls	r3, r3, #2
 8018bb6:	18d3      	adds	r3, r2, r3
 8018bb8:	881b      	ldrh	r3, [r3, #0]
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	2008      	movs	r0, #8
 8018bbe:	183b      	adds	r3, r7, r0
 8018bc0:	49bd      	ldr	r1, [pc, #756]	@ (8018eb8 <USB_DeactivateEndpoint+0x370>)
 8018bc2:	400a      	ands	r2, r1
 8018bc4:	801a      	strh	r2, [r3, #0]
 8018bc6:	687a      	ldr	r2, [r7, #4]
 8018bc8:	683b      	ldr	r3, [r7, #0]
 8018bca:	781b      	ldrb	r3, [r3, #0]
 8018bcc:	009b      	lsls	r3, r3, #2
 8018bce:	18d3      	adds	r3, r2, r3
 8018bd0:	183a      	adds	r2, r7, r0
 8018bd2:	8812      	ldrh	r2, [r2, #0]
 8018bd4:	49b9      	ldr	r1, [pc, #740]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018bd6:	430a      	orrs	r2, r1
 8018bd8:	b292      	uxth	r2, r2
 8018bda:	801a      	strh	r2, [r3, #0]
 8018bdc:	e163      	b.n	8018ea6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018bde:	687a      	ldr	r2, [r7, #4]
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	781b      	ldrb	r3, [r3, #0]
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	18d2      	adds	r2, r2, r3
 8018be8:	2112      	movs	r1, #18
 8018bea:	187b      	adds	r3, r7, r1
 8018bec:	8812      	ldrh	r2, [r2, #0]
 8018bee:	801a      	strh	r2, [r3, #0]
 8018bf0:	187b      	adds	r3, r7, r1
 8018bf2:	881a      	ldrh	r2, [r3, #0]
 8018bf4:	2380      	movs	r3, #128	@ 0x80
 8018bf6:	01db      	lsls	r3, r3, #7
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	d016      	beq.n	8018c2a <USB_DeactivateEndpoint+0xe2>
 8018bfc:	687a      	ldr	r2, [r7, #4]
 8018bfe:	683b      	ldr	r3, [r7, #0]
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	009b      	lsls	r3, r3, #2
 8018c04:	18d3      	adds	r3, r2, r3
 8018c06:	881b      	ldrh	r3, [r3, #0]
 8018c08:	b29a      	uxth	r2, r3
 8018c0a:	2010      	movs	r0, #16
 8018c0c:	183b      	adds	r3, r7, r0
 8018c0e:	49a8      	ldr	r1, [pc, #672]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018c10:	400a      	ands	r2, r1
 8018c12:	801a      	strh	r2, [r3, #0]
 8018c14:	687a      	ldr	r2, [r7, #4]
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	781b      	ldrb	r3, [r3, #0]
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	18d3      	adds	r3, r2, r3
 8018c1e:	183a      	adds	r2, r7, r0
 8018c20:	8812      	ldrh	r2, [r2, #0]
 8018c22:	49a7      	ldr	r1, [pc, #668]	@ (8018ec0 <USB_DeactivateEndpoint+0x378>)
 8018c24:	430a      	orrs	r2, r1
 8018c26:	b292      	uxth	r2, r2
 8018c28:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018c2a:	687a      	ldr	r2, [r7, #4]
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	781b      	ldrb	r3, [r3, #0]
 8018c30:	009b      	lsls	r3, r3, #2
 8018c32:	18d3      	adds	r3, r2, r3
 8018c34:	881b      	ldrh	r3, [r3, #0]
 8018c36:	b29a      	uxth	r2, r3
 8018c38:	200e      	movs	r0, #14
 8018c3a:	183b      	adds	r3, r7, r0
 8018c3c:	49a1      	ldr	r1, [pc, #644]	@ (8018ec4 <USB_DeactivateEndpoint+0x37c>)
 8018c3e:	400a      	ands	r2, r1
 8018c40:	801a      	strh	r2, [r3, #0]
 8018c42:	687a      	ldr	r2, [r7, #4]
 8018c44:	683b      	ldr	r3, [r7, #0]
 8018c46:	781b      	ldrb	r3, [r3, #0]
 8018c48:	009b      	lsls	r3, r3, #2
 8018c4a:	18d3      	adds	r3, r2, r3
 8018c4c:	183a      	adds	r2, r7, r0
 8018c4e:	8812      	ldrh	r2, [r2, #0]
 8018c50:	499a      	ldr	r1, [pc, #616]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018c52:	430a      	orrs	r2, r1
 8018c54:	b292      	uxth	r2, r2
 8018c56:	801a      	strh	r2, [r3, #0]
 8018c58:	e125      	b.n	8018ea6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	785b      	ldrb	r3, [r3, #1]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d000      	beq.n	8018c64 <USB_DeactivateEndpoint+0x11c>
 8018c62:	e090      	b.n	8018d86 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018c64:	687a      	ldr	r2, [r7, #4]
 8018c66:	683b      	ldr	r3, [r7, #0]
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	009b      	lsls	r3, r3, #2
 8018c6c:	18d2      	adds	r2, r2, r3
 8018c6e:	2120      	movs	r1, #32
 8018c70:	187b      	adds	r3, r7, r1
 8018c72:	8812      	ldrh	r2, [r2, #0]
 8018c74:	801a      	strh	r2, [r3, #0]
 8018c76:	187b      	adds	r3, r7, r1
 8018c78:	881a      	ldrh	r2, [r3, #0]
 8018c7a:	2380      	movs	r3, #128	@ 0x80
 8018c7c:	01db      	lsls	r3, r3, #7
 8018c7e:	4013      	ands	r3, r2
 8018c80:	d016      	beq.n	8018cb0 <USB_DeactivateEndpoint+0x168>
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	781b      	ldrb	r3, [r3, #0]
 8018c88:	009b      	lsls	r3, r3, #2
 8018c8a:	18d3      	adds	r3, r2, r3
 8018c8c:	881b      	ldrh	r3, [r3, #0]
 8018c8e:	b29a      	uxth	r2, r3
 8018c90:	201e      	movs	r0, #30
 8018c92:	183b      	adds	r3, r7, r0
 8018c94:	4986      	ldr	r1, [pc, #536]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018c96:	400a      	ands	r2, r1
 8018c98:	801a      	strh	r2, [r3, #0]
 8018c9a:	687a      	ldr	r2, [r7, #4]
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	009b      	lsls	r3, r3, #2
 8018ca2:	18d3      	adds	r3, r2, r3
 8018ca4:	183a      	adds	r2, r7, r0
 8018ca6:	8812      	ldrh	r2, [r2, #0]
 8018ca8:	4985      	ldr	r1, [pc, #532]	@ (8018ec0 <USB_DeactivateEndpoint+0x378>)
 8018caa:	430a      	orrs	r2, r1
 8018cac:	b292      	uxth	r2, r2
 8018cae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018cb0:	687a      	ldr	r2, [r7, #4]
 8018cb2:	683b      	ldr	r3, [r7, #0]
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	009b      	lsls	r3, r3, #2
 8018cb8:	18d2      	adds	r2, r2, r3
 8018cba:	211c      	movs	r1, #28
 8018cbc:	187b      	adds	r3, r7, r1
 8018cbe:	8812      	ldrh	r2, [r2, #0]
 8018cc0:	801a      	strh	r2, [r3, #0]
 8018cc2:	187b      	adds	r3, r7, r1
 8018cc4:	881b      	ldrh	r3, [r3, #0]
 8018cc6:	2240      	movs	r2, #64	@ 0x40
 8018cc8:	4013      	ands	r3, r2
 8018cca:	d016      	beq.n	8018cfa <USB_DeactivateEndpoint+0x1b2>
 8018ccc:	687a      	ldr	r2, [r7, #4]
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	18d3      	adds	r3, r2, r3
 8018cd6:	881b      	ldrh	r3, [r3, #0]
 8018cd8:	b29a      	uxth	r2, r3
 8018cda:	201a      	movs	r0, #26
 8018cdc:	183b      	adds	r3, r7, r0
 8018cde:	4974      	ldr	r1, [pc, #464]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018ce0:	400a      	ands	r2, r1
 8018ce2:	801a      	strh	r2, [r3, #0]
 8018ce4:	687a      	ldr	r2, [r7, #4]
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	18d3      	adds	r3, r2, r3
 8018cee:	183a      	adds	r2, r7, r0
 8018cf0:	8812      	ldrh	r2, [r2, #0]
 8018cf2:	4970      	ldr	r1, [pc, #448]	@ (8018eb4 <USB_DeactivateEndpoint+0x36c>)
 8018cf4:	430a      	orrs	r2, r1
 8018cf6:	b292      	uxth	r2, r2
 8018cf8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018cfa:	687a      	ldr	r2, [r7, #4]
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	781b      	ldrb	r3, [r3, #0]
 8018d00:	009b      	lsls	r3, r3, #2
 8018d02:	18d3      	adds	r3, r2, r3
 8018d04:	881b      	ldrh	r3, [r3, #0]
 8018d06:	b29a      	uxth	r2, r3
 8018d08:	2018      	movs	r0, #24
 8018d0a:	183b      	adds	r3, r7, r0
 8018d0c:	4968      	ldr	r1, [pc, #416]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018d0e:	400a      	ands	r2, r1
 8018d10:	801a      	strh	r2, [r3, #0]
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	009b      	lsls	r3, r3, #2
 8018d1a:	18d3      	adds	r3, r2, r3
 8018d1c:	183a      	adds	r2, r7, r0
 8018d1e:	8812      	ldrh	r2, [r2, #0]
 8018d20:	4964      	ldr	r1, [pc, #400]	@ (8018eb4 <USB_DeactivateEndpoint+0x36c>)
 8018d22:	430a      	orrs	r2, r1
 8018d24:	b292      	uxth	r2, r2
 8018d26:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018d28:	687a      	ldr	r2, [r7, #4]
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	009b      	lsls	r3, r3, #2
 8018d30:	18d3      	adds	r3, r2, r3
 8018d32:	881b      	ldrh	r3, [r3, #0]
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	2016      	movs	r0, #22
 8018d38:	183b      	adds	r3, r7, r0
 8018d3a:	4962      	ldr	r1, [pc, #392]	@ (8018ec4 <USB_DeactivateEndpoint+0x37c>)
 8018d3c:	400a      	ands	r2, r1
 8018d3e:	801a      	strh	r2, [r3, #0]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	18d3      	adds	r3, r2, r3
 8018d4a:	183a      	adds	r2, r7, r0
 8018d4c:	8812      	ldrh	r2, [r2, #0]
 8018d4e:	495b      	ldr	r1, [pc, #364]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018d50:	430a      	orrs	r2, r1
 8018d52:	b292      	uxth	r2, r2
 8018d54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018d56:	687a      	ldr	r2, [r7, #4]
 8018d58:	683b      	ldr	r3, [r7, #0]
 8018d5a:	781b      	ldrb	r3, [r3, #0]
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	18d3      	adds	r3, r2, r3
 8018d60:	881b      	ldrh	r3, [r3, #0]
 8018d62:	b29a      	uxth	r2, r3
 8018d64:	2014      	movs	r0, #20
 8018d66:	183b      	adds	r3, r7, r0
 8018d68:	4953      	ldr	r1, [pc, #332]	@ (8018eb8 <USB_DeactivateEndpoint+0x370>)
 8018d6a:	400a      	ands	r2, r1
 8018d6c:	801a      	strh	r2, [r3, #0]
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	683b      	ldr	r3, [r7, #0]
 8018d72:	781b      	ldrb	r3, [r3, #0]
 8018d74:	009b      	lsls	r3, r3, #2
 8018d76:	18d3      	adds	r3, r2, r3
 8018d78:	183a      	adds	r2, r7, r0
 8018d7a:	8812      	ldrh	r2, [r2, #0]
 8018d7c:	494f      	ldr	r1, [pc, #316]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018d7e:	430a      	orrs	r2, r1
 8018d80:	b292      	uxth	r2, r2
 8018d82:	801a      	strh	r2, [r3, #0]
 8018d84:	e08f      	b.n	8018ea6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018d86:	687a      	ldr	r2, [r7, #4]
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	009b      	lsls	r3, r3, #2
 8018d8e:	18d2      	adds	r2, r2, r3
 8018d90:	212e      	movs	r1, #46	@ 0x2e
 8018d92:	187b      	adds	r3, r7, r1
 8018d94:	8812      	ldrh	r2, [r2, #0]
 8018d96:	801a      	strh	r2, [r3, #0]
 8018d98:	187b      	adds	r3, r7, r1
 8018d9a:	881a      	ldrh	r2, [r3, #0]
 8018d9c:	2380      	movs	r3, #128	@ 0x80
 8018d9e:	01db      	lsls	r3, r3, #7
 8018da0:	4013      	ands	r3, r2
 8018da2:	d016      	beq.n	8018dd2 <USB_DeactivateEndpoint+0x28a>
 8018da4:	687a      	ldr	r2, [r7, #4]
 8018da6:	683b      	ldr	r3, [r7, #0]
 8018da8:	781b      	ldrb	r3, [r3, #0]
 8018daa:	009b      	lsls	r3, r3, #2
 8018dac:	18d3      	adds	r3, r2, r3
 8018dae:	881b      	ldrh	r3, [r3, #0]
 8018db0:	b29a      	uxth	r2, r3
 8018db2:	202c      	movs	r0, #44	@ 0x2c
 8018db4:	183b      	adds	r3, r7, r0
 8018db6:	493e      	ldr	r1, [pc, #248]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018db8:	400a      	ands	r2, r1
 8018dba:	801a      	strh	r2, [r3, #0]
 8018dbc:	687a      	ldr	r2, [r7, #4]
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	009b      	lsls	r3, r3, #2
 8018dc4:	18d3      	adds	r3, r2, r3
 8018dc6:	183a      	adds	r2, r7, r0
 8018dc8:	8812      	ldrh	r2, [r2, #0]
 8018dca:	493d      	ldr	r1, [pc, #244]	@ (8018ec0 <USB_DeactivateEndpoint+0x378>)
 8018dcc:	430a      	orrs	r2, r1
 8018dce:	b292      	uxth	r2, r2
 8018dd0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018dd2:	687a      	ldr	r2, [r7, #4]
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	18d2      	adds	r2, r2, r3
 8018ddc:	212a      	movs	r1, #42	@ 0x2a
 8018dde:	187b      	adds	r3, r7, r1
 8018de0:	8812      	ldrh	r2, [r2, #0]
 8018de2:	801a      	strh	r2, [r3, #0]
 8018de4:	187b      	adds	r3, r7, r1
 8018de6:	881b      	ldrh	r3, [r3, #0]
 8018de8:	2240      	movs	r2, #64	@ 0x40
 8018dea:	4013      	ands	r3, r2
 8018dec:	d016      	beq.n	8018e1c <USB_DeactivateEndpoint+0x2d4>
 8018dee:	687a      	ldr	r2, [r7, #4]
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	781b      	ldrb	r3, [r3, #0]
 8018df4:	009b      	lsls	r3, r3, #2
 8018df6:	18d3      	adds	r3, r2, r3
 8018df8:	881b      	ldrh	r3, [r3, #0]
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	2028      	movs	r0, #40	@ 0x28
 8018dfe:	183b      	adds	r3, r7, r0
 8018e00:	492b      	ldr	r1, [pc, #172]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018e02:	400a      	ands	r2, r1
 8018e04:	801a      	strh	r2, [r3, #0]
 8018e06:	687a      	ldr	r2, [r7, #4]
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	781b      	ldrb	r3, [r3, #0]
 8018e0c:	009b      	lsls	r3, r3, #2
 8018e0e:	18d3      	adds	r3, r2, r3
 8018e10:	183a      	adds	r2, r7, r0
 8018e12:	8812      	ldrh	r2, [r2, #0]
 8018e14:	4927      	ldr	r1, [pc, #156]	@ (8018eb4 <USB_DeactivateEndpoint+0x36c>)
 8018e16:	430a      	orrs	r2, r1
 8018e18:	b292      	uxth	r2, r2
 8018e1a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8018e1c:	687a      	ldr	r2, [r7, #4]
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	781b      	ldrb	r3, [r3, #0]
 8018e22:	009b      	lsls	r3, r3, #2
 8018e24:	18d3      	adds	r3, r2, r3
 8018e26:	881b      	ldrh	r3, [r3, #0]
 8018e28:	b29a      	uxth	r2, r3
 8018e2a:	2026      	movs	r0, #38	@ 0x26
 8018e2c:	183b      	adds	r3, r7, r0
 8018e2e:	4920      	ldr	r1, [pc, #128]	@ (8018eb0 <USB_DeactivateEndpoint+0x368>)
 8018e30:	400a      	ands	r2, r1
 8018e32:	801a      	strh	r2, [r3, #0]
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	683b      	ldr	r3, [r7, #0]
 8018e38:	781b      	ldrb	r3, [r3, #0]
 8018e3a:	009b      	lsls	r3, r3, #2
 8018e3c:	18d3      	adds	r3, r2, r3
 8018e3e:	183a      	adds	r2, r7, r0
 8018e40:	8812      	ldrh	r2, [r2, #0]
 8018e42:	491f      	ldr	r1, [pc, #124]	@ (8018ec0 <USB_DeactivateEndpoint+0x378>)
 8018e44:	430a      	orrs	r2, r1
 8018e46:	b292      	uxth	r2, r2
 8018e48:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018e4a:	687a      	ldr	r2, [r7, #4]
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	781b      	ldrb	r3, [r3, #0]
 8018e50:	009b      	lsls	r3, r3, #2
 8018e52:	18d3      	adds	r3, r2, r3
 8018e54:	881b      	ldrh	r3, [r3, #0]
 8018e56:	b29a      	uxth	r2, r3
 8018e58:	2024      	movs	r0, #36	@ 0x24
 8018e5a:	183b      	adds	r3, r7, r0
 8018e5c:	4916      	ldr	r1, [pc, #88]	@ (8018eb8 <USB_DeactivateEndpoint+0x370>)
 8018e5e:	400a      	ands	r2, r1
 8018e60:	801a      	strh	r2, [r3, #0]
 8018e62:	687a      	ldr	r2, [r7, #4]
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	009b      	lsls	r3, r3, #2
 8018e6a:	18d3      	adds	r3, r2, r3
 8018e6c:	183a      	adds	r2, r7, r0
 8018e6e:	8812      	ldrh	r2, [r2, #0]
 8018e70:	4912      	ldr	r1, [pc, #72]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018e72:	430a      	orrs	r2, r1
 8018e74:	b292      	uxth	r2, r2
 8018e76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	781b      	ldrb	r3, [r3, #0]
 8018e7e:	009b      	lsls	r3, r3, #2
 8018e80:	18d3      	adds	r3, r2, r3
 8018e82:	881b      	ldrh	r3, [r3, #0]
 8018e84:	b29a      	uxth	r2, r3
 8018e86:	2022      	movs	r0, #34	@ 0x22
 8018e88:	183b      	adds	r3, r7, r0
 8018e8a:	490e      	ldr	r1, [pc, #56]	@ (8018ec4 <USB_DeactivateEndpoint+0x37c>)
 8018e8c:	400a      	ands	r2, r1
 8018e8e:	801a      	strh	r2, [r3, #0]
 8018e90:	687a      	ldr	r2, [r7, #4]
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	009b      	lsls	r3, r3, #2
 8018e98:	18d3      	adds	r3, r2, r3
 8018e9a:	183a      	adds	r2, r7, r0
 8018e9c:	8812      	ldrh	r2, [r2, #0]
 8018e9e:	4907      	ldr	r1, [pc, #28]	@ (8018ebc <USB_DeactivateEndpoint+0x374>)
 8018ea0:	430a      	orrs	r2, r1
 8018ea2:	b292      	uxth	r2, r2
 8018ea4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8018ea6:	2300      	movs	r3, #0
}
 8018ea8:	0018      	movs	r0, r3
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	b00c      	add	sp, #48	@ 0x30
 8018eae:	bd80      	pop	{r7, pc}
 8018eb0:	ffff8f8f 	.word	0xffff8f8f
 8018eb4:	ffff80c0 	.word	0xffff80c0
 8018eb8:	ffff8fbf 	.word	0xffff8fbf
 8018ebc:	ffff8080 	.word	0xffff8080
 8018ec0:	ffffc080 	.word	0xffffc080
 8018ec4:	ffffbf8f 	.word	0xffffbf8f

08018ec8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018ec8:	b590      	push	{r4, r7, lr}
 8018eca:	b0c3      	sub	sp, #268	@ 0x10c
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	785b      	ldrb	r3, [r3, #1]
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	d001      	beq.n	8018ede <USB_EPStartXfer+0x16>
 8018eda:	f000 fd2d 	bl	8019938 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018ede:	683b      	ldr	r3, [r7, #0]
 8018ee0:	699a      	ldr	r2, [r3, #24]
 8018ee2:	683b      	ldr	r3, [r7, #0]
 8018ee4:	691b      	ldr	r3, [r3, #16]
 8018ee6:	429a      	cmp	r2, r3
 8018ee8:	d905      	bls.n	8018ef6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	691b      	ldr	r3, [r3, #16]
 8018eee:	1d7a      	adds	r2, r7, #5
 8018ef0:	32ff      	adds	r2, #255	@ 0xff
 8018ef2:	6013      	str	r3, [r2, #0]
 8018ef4:	e004      	b.n	8018f00 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8018ef6:	683b      	ldr	r3, [r7, #0]
 8018ef8:	699b      	ldr	r3, [r3, #24]
 8018efa:	1d7a      	adds	r2, r7, #5
 8018efc:	32ff      	adds	r2, #255	@ 0xff
 8018efe:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	7b1b      	ldrb	r3, [r3, #12]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d125      	bne.n	8018f54 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8018f08:	683b      	ldr	r3, [r7, #0]
 8018f0a:	6959      	ldr	r1, [r3, #20]
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	88da      	ldrh	r2, [r3, #6]
 8018f10:	1d7b      	adds	r3, r7, #5
 8018f12:	33ff      	adds	r3, #255	@ 0xff
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	b29b      	uxth	r3, r3
 8018f18:	6878      	ldr	r0, [r7, #4]
 8018f1a:	f001 fa47 	bl	801a3ac <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	613b      	str	r3, [r7, #16]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	2250      	movs	r2, #80	@ 0x50
 8018f26:	5a9b      	ldrh	r3, [r3, r2]
 8018f28:	b29b      	uxth	r3, r3
 8018f2a:	001a      	movs	r2, r3
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	189b      	adds	r3, r3, r2
 8018f30:	613b      	str	r3, [r7, #16]
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	781b      	ldrb	r3, [r3, #0]
 8018f36:	00da      	lsls	r2, r3, #3
 8018f38:	693b      	ldr	r3, [r7, #16]
 8018f3a:	18d3      	adds	r3, r2, r3
 8018f3c:	4ad7      	ldr	r2, [pc, #860]	@ (801929c <USB_EPStartXfer+0x3d4>)
 8018f3e:	4694      	mov	ip, r2
 8018f40:	4463      	add	r3, ip
 8018f42:	60fb      	str	r3, [r7, #12]
 8018f44:	1d7b      	adds	r3, r7, #5
 8018f46:	33ff      	adds	r3, #255	@ 0xff
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	b29a      	uxth	r2, r3
 8018f4c:	68fb      	ldr	r3, [r7, #12]
 8018f4e:	801a      	strh	r2, [r3, #0]
 8018f50:	f000 fccd 	bl	80198ee <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8018f54:	683b      	ldr	r3, [r7, #0]
 8018f56:	78db      	ldrb	r3, [r3, #3]
 8018f58:	2b02      	cmp	r3, #2
 8018f5a:	d000      	beq.n	8018f5e <USB_EPStartXfer+0x96>
 8018f5c:	e362      	b.n	8019624 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	6a1a      	ldr	r2, [r3, #32]
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	691b      	ldr	r3, [r3, #16]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d800      	bhi.n	8018f6c <USB_EPStartXfer+0xa4>
 8018f6a:	e309      	b.n	8019580 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018f6c:	687a      	ldr	r2, [r7, #4]
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	18d3      	adds	r3, r2, r3
 8018f76:	881b      	ldrh	r3, [r3, #0]
 8018f78:	b29a      	uxth	r2, r3
 8018f7a:	2056      	movs	r0, #86	@ 0x56
 8018f7c:	183b      	adds	r3, r7, r0
 8018f7e:	49c8      	ldr	r1, [pc, #800]	@ (80192a0 <USB_EPStartXfer+0x3d8>)
 8018f80:	400a      	ands	r2, r1
 8018f82:	801a      	strh	r2, [r3, #0]
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	009b      	lsls	r3, r3, #2
 8018f8c:	18d3      	adds	r3, r2, r3
 8018f8e:	183a      	adds	r2, r7, r0
 8018f90:	8812      	ldrh	r2, [r2, #0]
 8018f92:	49c4      	ldr	r1, [pc, #784]	@ (80192a4 <USB_EPStartXfer+0x3dc>)
 8018f94:	430a      	orrs	r2, r1
 8018f96:	b292      	uxth	r2, r2
 8018f98:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8018f9a:	683b      	ldr	r3, [r7, #0]
 8018f9c:	6a1a      	ldr	r2, [r3, #32]
 8018f9e:	1d7b      	adds	r3, r7, #5
 8018fa0:	33ff      	adds	r3, #255	@ 0xff
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	1ad2      	subs	r2, r2, r3
 8018fa6:	683b      	ldr	r3, [r7, #0]
 8018fa8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018faa:	687a      	ldr	r2, [r7, #4]
 8018fac:	683b      	ldr	r3, [r7, #0]
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	009b      	lsls	r3, r3, #2
 8018fb2:	18d3      	adds	r3, r2, r3
 8018fb4:	881b      	ldrh	r3, [r3, #0]
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	001a      	movs	r2, r3
 8018fba:	2340      	movs	r3, #64	@ 0x40
 8018fbc:	4013      	ands	r3, r2
 8018fbe:	d100      	bne.n	8018fc2 <USB_EPStartXfer+0xfa>
 8018fc0:	e176      	b.n	80192b0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8018fc6:	683b      	ldr	r3, [r7, #0]
 8018fc8:	785b      	ldrb	r3, [r3, #1]
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d000      	beq.n	8018fd0 <USB_EPStartXfer+0x108>
 8018fce:	e074      	b.n	80190ba <USB_EPStartXfer+0x1f2>
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	2250      	movs	r2, #80	@ 0x50
 8018fd8:	5a9b      	ldrh	r3, [r3, r2]
 8018fda:	b29b      	uxth	r3, r3
 8018fdc:	001a      	movs	r2, r3
 8018fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fe0:	189b      	adds	r3, r3, r2
 8018fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018fe4:	683b      	ldr	r3, [r7, #0]
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	00da      	lsls	r2, r3, #3
 8018fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fec:	18d3      	adds	r3, r2, r3
 8018fee:	4aae      	ldr	r2, [pc, #696]	@ (80192a8 <USB_EPStartXfer+0x3e0>)
 8018ff0:	4694      	mov	ip, r2
 8018ff2:	4463      	add	r3, ip
 8018ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ff8:	881b      	ldrh	r3, [r3, #0]
 8018ffa:	b29b      	uxth	r3, r3
 8018ffc:	059b      	lsls	r3, r3, #22
 8018ffe:	0d9b      	lsrs	r3, r3, #22
 8019000:	b29a      	uxth	r2, r3
 8019002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019004:	801a      	strh	r2, [r3, #0]
 8019006:	1d7b      	adds	r3, r7, #5
 8019008:	33ff      	adds	r3, #255	@ 0xff
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b3e      	cmp	r3, #62	@ 0x3e
 801900e:	d924      	bls.n	801905a <USB_EPStartXfer+0x192>
 8019010:	1d7b      	adds	r3, r7, #5
 8019012:	33ff      	adds	r3, #255	@ 0xff
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	095b      	lsrs	r3, r3, #5
 8019018:	1c7a      	adds	r2, r7, #1
 801901a:	32ff      	adds	r2, #255	@ 0xff
 801901c:	6013      	str	r3, [r2, #0]
 801901e:	1d7b      	adds	r3, r7, #5
 8019020:	33ff      	adds	r3, #255	@ 0xff
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	221f      	movs	r2, #31
 8019026:	4013      	ands	r3, r2
 8019028:	d106      	bne.n	8019038 <USB_EPStartXfer+0x170>
 801902a:	1c7b      	adds	r3, r7, #1
 801902c:	33ff      	adds	r3, #255	@ 0xff
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	3b01      	subs	r3, #1
 8019032:	1c7a      	adds	r2, r7, #1
 8019034:	32ff      	adds	r2, #255	@ 0xff
 8019036:	6013      	str	r3, [r2, #0]
 8019038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801903a:	881b      	ldrh	r3, [r3, #0]
 801903c:	b29a      	uxth	r2, r3
 801903e:	1c7b      	adds	r3, r7, #1
 8019040:	33ff      	adds	r3, #255	@ 0xff
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	b29b      	uxth	r3, r3
 8019046:	029b      	lsls	r3, r3, #10
 8019048:	b29b      	uxth	r3, r3
 801904a:	4313      	orrs	r3, r2
 801904c:	b29b      	uxth	r3, r3
 801904e:	4a97      	ldr	r2, [pc, #604]	@ (80192ac <USB_EPStartXfer+0x3e4>)
 8019050:	4313      	orrs	r3, r2
 8019052:	b29a      	uxth	r2, r3
 8019054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019056:	801a      	strh	r2, [r3, #0]
 8019058:	e04a      	b.n	80190f0 <USB_EPStartXfer+0x228>
 801905a:	1d7b      	adds	r3, r7, #5
 801905c:	33ff      	adds	r3, #255	@ 0xff
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d108      	bne.n	8019076 <USB_EPStartXfer+0x1ae>
 8019064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019066:	881b      	ldrh	r3, [r3, #0]
 8019068:	b29b      	uxth	r3, r3
 801906a:	4a90      	ldr	r2, [pc, #576]	@ (80192ac <USB_EPStartXfer+0x3e4>)
 801906c:	4313      	orrs	r3, r2
 801906e:	b29a      	uxth	r2, r3
 8019070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019072:	801a      	strh	r2, [r3, #0]
 8019074:	e03c      	b.n	80190f0 <USB_EPStartXfer+0x228>
 8019076:	1d7b      	adds	r3, r7, #5
 8019078:	33ff      	adds	r3, #255	@ 0xff
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	085b      	lsrs	r3, r3, #1
 801907e:	1c7a      	adds	r2, r7, #1
 8019080:	32ff      	adds	r2, #255	@ 0xff
 8019082:	6013      	str	r3, [r2, #0]
 8019084:	1d7b      	adds	r3, r7, #5
 8019086:	33ff      	adds	r3, #255	@ 0xff
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	2201      	movs	r2, #1
 801908c:	4013      	ands	r3, r2
 801908e:	d006      	beq.n	801909e <USB_EPStartXfer+0x1d6>
 8019090:	1c7b      	adds	r3, r7, #1
 8019092:	33ff      	adds	r3, #255	@ 0xff
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	3301      	adds	r3, #1
 8019098:	1c7a      	adds	r2, r7, #1
 801909a:	32ff      	adds	r2, #255	@ 0xff
 801909c:	6013      	str	r3, [r2, #0]
 801909e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190a0:	881b      	ldrh	r3, [r3, #0]
 80190a2:	b29a      	uxth	r2, r3
 80190a4:	1c7b      	adds	r3, r7, #1
 80190a6:	33ff      	adds	r3, #255	@ 0xff
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	b29b      	uxth	r3, r3
 80190ac:	029b      	lsls	r3, r3, #10
 80190ae:	b29b      	uxth	r3, r3
 80190b0:	4313      	orrs	r3, r2
 80190b2:	b29a      	uxth	r2, r3
 80190b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190b6:	801a      	strh	r2, [r3, #0]
 80190b8:	e01a      	b.n	80190f0 <USB_EPStartXfer+0x228>
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	785b      	ldrb	r3, [r3, #1]
 80190be:	2b01      	cmp	r3, #1
 80190c0:	d116      	bne.n	80190f0 <USB_EPStartXfer+0x228>
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	2250      	movs	r2, #80	@ 0x50
 80190c6:	5a9b      	ldrh	r3, [r3, r2]
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	001a      	movs	r2, r3
 80190cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190ce:	189b      	adds	r3, r3, r2
 80190d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	781b      	ldrb	r3, [r3, #0]
 80190d6:	00da      	lsls	r2, r3, #3
 80190d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80190da:	18d3      	adds	r3, r2, r3
 80190dc:	4a72      	ldr	r2, [pc, #456]	@ (80192a8 <USB_EPStartXfer+0x3e0>)
 80190de:	4694      	mov	ip, r2
 80190e0:	4463      	add	r3, ip
 80190e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80190e4:	1d7b      	adds	r3, r7, #5
 80190e6:	33ff      	adds	r3, #255	@ 0xff
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	b29a      	uxth	r2, r3
 80190ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80190f0:	2076      	movs	r0, #118	@ 0x76
 80190f2:	183b      	adds	r3, r7, r0
 80190f4:	683a      	ldr	r2, [r7, #0]
 80190f6:	8952      	ldrh	r2, [r2, #10]
 80190f8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80190fa:	683b      	ldr	r3, [r7, #0]
 80190fc:	6959      	ldr	r1, [r3, #20]
 80190fe:	1d7b      	adds	r3, r7, #5
 8019100:	33ff      	adds	r3, #255	@ 0xff
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	b29c      	uxth	r4, r3
 8019106:	183b      	adds	r3, r7, r0
 8019108:	881a      	ldrh	r2, [r3, #0]
 801910a:	6878      	ldr	r0, [r7, #4]
 801910c:	0023      	movs	r3, r4
 801910e:	f001 f94d 	bl	801a3ac <USB_WritePMA>
            ep->xfer_buff += len;
 8019112:	683b      	ldr	r3, [r7, #0]
 8019114:	695a      	ldr	r2, [r3, #20]
 8019116:	1d7b      	adds	r3, r7, #5
 8019118:	33ff      	adds	r3, #255	@ 0xff
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	18d2      	adds	r2, r2, r3
 801911e:	683b      	ldr	r3, [r7, #0]
 8019120:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019122:	683b      	ldr	r3, [r7, #0]
 8019124:	6a1a      	ldr	r2, [r3, #32]
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	691b      	ldr	r3, [r3, #16]
 801912a:	429a      	cmp	r2, r3
 801912c:	d908      	bls.n	8019140 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801912e:	683b      	ldr	r3, [r7, #0]
 8019130:	6a1a      	ldr	r2, [r3, #32]
 8019132:	1d7b      	adds	r3, r7, #5
 8019134:	33ff      	adds	r3, #255	@ 0xff
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	1ad2      	subs	r2, r2, r3
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	621a      	str	r2, [r3, #32]
 801913e:	e007      	b.n	8019150 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	6a1b      	ldr	r3, [r3, #32]
 8019144:	1d7a      	adds	r2, r7, #5
 8019146:	32ff      	adds	r2, #255	@ 0xff
 8019148:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	2200      	movs	r2, #0
 801914e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019150:	683b      	ldr	r3, [r7, #0]
 8019152:	785b      	ldrb	r3, [r3, #1]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d000      	beq.n	801915a <USB_EPStartXfer+0x292>
 8019158:	e070      	b.n	801923c <USB_EPStartXfer+0x374>
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	61bb      	str	r3, [r7, #24]
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	2250      	movs	r2, #80	@ 0x50
 8019162:	5a9b      	ldrh	r3, [r3, r2]
 8019164:	b29b      	uxth	r3, r3
 8019166:	001a      	movs	r2, r3
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	189b      	adds	r3, r3, r2
 801916c:	61bb      	str	r3, [r7, #24]
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	00da      	lsls	r2, r3, #3
 8019174:	69bb      	ldr	r3, [r7, #24]
 8019176:	18d3      	adds	r3, r2, r3
 8019178:	4a48      	ldr	r2, [pc, #288]	@ (801929c <USB_EPStartXfer+0x3d4>)
 801917a:	4694      	mov	ip, r2
 801917c:	4463      	add	r3, ip
 801917e:	617b      	str	r3, [r7, #20]
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	881b      	ldrh	r3, [r3, #0]
 8019184:	b29b      	uxth	r3, r3
 8019186:	059b      	lsls	r3, r3, #22
 8019188:	0d9b      	lsrs	r3, r3, #22
 801918a:	b29a      	uxth	r2, r3
 801918c:	697b      	ldr	r3, [r7, #20]
 801918e:	801a      	strh	r2, [r3, #0]
 8019190:	1d7b      	adds	r3, r7, #5
 8019192:	33ff      	adds	r3, #255	@ 0xff
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	2b3e      	cmp	r3, #62	@ 0x3e
 8019198:	d922      	bls.n	80191e0 <USB_EPStartXfer+0x318>
 801919a:	1d7b      	adds	r3, r7, #5
 801919c:	33ff      	adds	r3, #255	@ 0xff
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	095b      	lsrs	r3, r3, #5
 80191a2:	21fc      	movs	r1, #252	@ 0xfc
 80191a4:	187a      	adds	r2, r7, r1
 80191a6:	6013      	str	r3, [r2, #0]
 80191a8:	1d7b      	adds	r3, r7, #5
 80191aa:	33ff      	adds	r3, #255	@ 0xff
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	221f      	movs	r2, #31
 80191b0:	4013      	ands	r3, r2
 80191b2:	d104      	bne.n	80191be <USB_EPStartXfer+0x2f6>
 80191b4:	187b      	adds	r3, r7, r1
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	3b01      	subs	r3, #1
 80191ba:	187a      	adds	r2, r7, r1
 80191bc:	6013      	str	r3, [r2, #0]
 80191be:	697b      	ldr	r3, [r7, #20]
 80191c0:	881b      	ldrh	r3, [r3, #0]
 80191c2:	b29a      	uxth	r2, r3
 80191c4:	23fc      	movs	r3, #252	@ 0xfc
 80191c6:	18fb      	adds	r3, r7, r3
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	b29b      	uxth	r3, r3
 80191cc:	029b      	lsls	r3, r3, #10
 80191ce:	b29b      	uxth	r3, r3
 80191d0:	4313      	orrs	r3, r2
 80191d2:	b29b      	uxth	r3, r3
 80191d4:	4a35      	ldr	r2, [pc, #212]	@ (80192ac <USB_EPStartXfer+0x3e4>)
 80191d6:	4313      	orrs	r3, r2
 80191d8:	b29a      	uxth	r2, r3
 80191da:	697b      	ldr	r3, [r7, #20]
 80191dc:	801a      	strh	r2, [r3, #0]
 80191de:	e04a      	b.n	8019276 <USB_EPStartXfer+0x3ae>
 80191e0:	1d7b      	adds	r3, r7, #5
 80191e2:	33ff      	adds	r3, #255	@ 0xff
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d108      	bne.n	80191fc <USB_EPStartXfer+0x334>
 80191ea:	697b      	ldr	r3, [r7, #20]
 80191ec:	881b      	ldrh	r3, [r3, #0]
 80191ee:	b29b      	uxth	r3, r3
 80191f0:	4a2e      	ldr	r2, [pc, #184]	@ (80192ac <USB_EPStartXfer+0x3e4>)
 80191f2:	4313      	orrs	r3, r2
 80191f4:	b29a      	uxth	r2, r3
 80191f6:	697b      	ldr	r3, [r7, #20]
 80191f8:	801a      	strh	r2, [r3, #0]
 80191fa:	e03c      	b.n	8019276 <USB_EPStartXfer+0x3ae>
 80191fc:	1d7b      	adds	r3, r7, #5
 80191fe:	33ff      	adds	r3, #255	@ 0xff
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	085b      	lsrs	r3, r3, #1
 8019204:	21fc      	movs	r1, #252	@ 0xfc
 8019206:	187a      	adds	r2, r7, r1
 8019208:	6013      	str	r3, [r2, #0]
 801920a:	1d7b      	adds	r3, r7, #5
 801920c:	33ff      	adds	r3, #255	@ 0xff
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	2201      	movs	r2, #1
 8019212:	4013      	ands	r3, r2
 8019214:	d004      	beq.n	8019220 <USB_EPStartXfer+0x358>
 8019216:	187b      	adds	r3, r7, r1
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	3301      	adds	r3, #1
 801921c:	187a      	adds	r2, r7, r1
 801921e:	6013      	str	r3, [r2, #0]
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	881b      	ldrh	r3, [r3, #0]
 8019224:	b29a      	uxth	r2, r3
 8019226:	23fc      	movs	r3, #252	@ 0xfc
 8019228:	18fb      	adds	r3, r7, r3
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	b29b      	uxth	r3, r3
 801922e:	029b      	lsls	r3, r3, #10
 8019230:	b29b      	uxth	r3, r3
 8019232:	4313      	orrs	r3, r2
 8019234:	b29a      	uxth	r2, r3
 8019236:	697b      	ldr	r3, [r7, #20]
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	e01c      	b.n	8019276 <USB_EPStartXfer+0x3ae>
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	785b      	ldrb	r3, [r3, #1]
 8019240:	2b01      	cmp	r3, #1
 8019242:	d118      	bne.n	8019276 <USB_EPStartXfer+0x3ae>
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	623b      	str	r3, [r7, #32]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	2250      	movs	r2, #80	@ 0x50
 801924c:	5a9b      	ldrh	r3, [r3, r2]
 801924e:	b29b      	uxth	r3, r3
 8019250:	001a      	movs	r2, r3
 8019252:	6a3b      	ldr	r3, [r7, #32]
 8019254:	189b      	adds	r3, r3, r2
 8019256:	623b      	str	r3, [r7, #32]
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	781b      	ldrb	r3, [r3, #0]
 801925c:	00da      	lsls	r2, r3, #3
 801925e:	6a3b      	ldr	r3, [r7, #32]
 8019260:	18d3      	adds	r3, r2, r3
 8019262:	4a0e      	ldr	r2, [pc, #56]	@ (801929c <USB_EPStartXfer+0x3d4>)
 8019264:	4694      	mov	ip, r2
 8019266:	4463      	add	r3, ip
 8019268:	61fb      	str	r3, [r7, #28]
 801926a:	1d7b      	adds	r3, r7, #5
 801926c:	33ff      	adds	r3, #255	@ 0xff
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	b29a      	uxth	r2, r3
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019276:	2076      	movs	r0, #118	@ 0x76
 8019278:	183b      	adds	r3, r7, r0
 801927a:	683a      	ldr	r2, [r7, #0]
 801927c:	8912      	ldrh	r2, [r2, #8]
 801927e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	6959      	ldr	r1, [r3, #20]
 8019284:	1d7b      	adds	r3, r7, #5
 8019286:	33ff      	adds	r3, #255	@ 0xff
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	b29c      	uxth	r4, r3
 801928c:	183b      	adds	r3, r7, r0
 801928e:	881a      	ldrh	r2, [r3, #0]
 8019290:	6878      	ldr	r0, [r7, #4]
 8019292:	0023      	movs	r3, r4
 8019294:	f001 f88a 	bl	801a3ac <USB_WritePMA>
 8019298:	e329      	b.n	80198ee <USB_EPStartXfer+0xa26>
 801929a:	46c0      	nop			@ (mov r8, r8)
 801929c:	00000402 	.word	0x00000402
 80192a0:	ffff8f8f 	.word	0xffff8f8f
 80192a4:	ffff8180 	.word	0xffff8180
 80192a8:	00000406 	.word	0x00000406
 80192ac:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	785b      	ldrb	r3, [r3, #1]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d000      	beq.n	80192ba <USB_EPStartXfer+0x3f2>
 80192b8:	e070      	b.n	801939c <USB_EPStartXfer+0x4d4>
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	2250      	movs	r2, #80	@ 0x50
 80192c2:	5a9b      	ldrh	r3, [r3, r2]
 80192c4:	b29b      	uxth	r3, r3
 80192c6:	001a      	movs	r2, r3
 80192c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192ca:	189b      	adds	r3, r3, r2
 80192cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	781b      	ldrb	r3, [r3, #0]
 80192d2:	00da      	lsls	r2, r3, #3
 80192d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192d6:	18d3      	adds	r3, r2, r3
 80192d8:	4acd      	ldr	r2, [pc, #820]	@ (8019610 <USB_EPStartXfer+0x748>)
 80192da:	4694      	mov	ip, r2
 80192dc:	4463      	add	r3, ip
 80192de:	647b      	str	r3, [r7, #68]	@ 0x44
 80192e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192e2:	881b      	ldrh	r3, [r3, #0]
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	059b      	lsls	r3, r3, #22
 80192e8:	0d9b      	lsrs	r3, r3, #22
 80192ea:	b29a      	uxth	r2, r3
 80192ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192ee:	801a      	strh	r2, [r3, #0]
 80192f0:	1d7b      	adds	r3, r7, #5
 80192f2:	33ff      	adds	r3, #255	@ 0xff
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80192f8:	d922      	bls.n	8019340 <USB_EPStartXfer+0x478>
 80192fa:	1d7b      	adds	r3, r7, #5
 80192fc:	33ff      	adds	r3, #255	@ 0xff
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	095b      	lsrs	r3, r3, #5
 8019302:	21f8      	movs	r1, #248	@ 0xf8
 8019304:	187a      	adds	r2, r7, r1
 8019306:	6013      	str	r3, [r2, #0]
 8019308:	1d7b      	adds	r3, r7, #5
 801930a:	33ff      	adds	r3, #255	@ 0xff
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	221f      	movs	r2, #31
 8019310:	4013      	ands	r3, r2
 8019312:	d104      	bne.n	801931e <USB_EPStartXfer+0x456>
 8019314:	187b      	adds	r3, r7, r1
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	3b01      	subs	r3, #1
 801931a:	187a      	adds	r2, r7, r1
 801931c:	6013      	str	r3, [r2, #0]
 801931e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019320:	881b      	ldrh	r3, [r3, #0]
 8019322:	b29a      	uxth	r2, r3
 8019324:	23f8      	movs	r3, #248	@ 0xf8
 8019326:	18fb      	adds	r3, r7, r3
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	b29b      	uxth	r3, r3
 801932c:	029b      	lsls	r3, r3, #10
 801932e:	b29b      	uxth	r3, r3
 8019330:	4313      	orrs	r3, r2
 8019332:	b29b      	uxth	r3, r3
 8019334:	4ab7      	ldr	r2, [pc, #732]	@ (8019614 <USB_EPStartXfer+0x74c>)
 8019336:	4313      	orrs	r3, r2
 8019338:	b29a      	uxth	r2, r3
 801933a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801933c:	801a      	strh	r2, [r3, #0]
 801933e:	e04a      	b.n	80193d6 <USB_EPStartXfer+0x50e>
 8019340:	1d7b      	adds	r3, r7, #5
 8019342:	33ff      	adds	r3, #255	@ 0xff
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d108      	bne.n	801935c <USB_EPStartXfer+0x494>
 801934a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801934c:	881b      	ldrh	r3, [r3, #0]
 801934e:	b29b      	uxth	r3, r3
 8019350:	4ab0      	ldr	r2, [pc, #704]	@ (8019614 <USB_EPStartXfer+0x74c>)
 8019352:	4313      	orrs	r3, r2
 8019354:	b29a      	uxth	r2, r3
 8019356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019358:	801a      	strh	r2, [r3, #0]
 801935a:	e03c      	b.n	80193d6 <USB_EPStartXfer+0x50e>
 801935c:	1d7b      	adds	r3, r7, #5
 801935e:	33ff      	adds	r3, #255	@ 0xff
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	085b      	lsrs	r3, r3, #1
 8019364:	21f8      	movs	r1, #248	@ 0xf8
 8019366:	187a      	adds	r2, r7, r1
 8019368:	6013      	str	r3, [r2, #0]
 801936a:	1d7b      	adds	r3, r7, #5
 801936c:	33ff      	adds	r3, #255	@ 0xff
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	2201      	movs	r2, #1
 8019372:	4013      	ands	r3, r2
 8019374:	d004      	beq.n	8019380 <USB_EPStartXfer+0x4b8>
 8019376:	187b      	adds	r3, r7, r1
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	3301      	adds	r3, #1
 801937c:	187a      	adds	r2, r7, r1
 801937e:	6013      	str	r3, [r2, #0]
 8019380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019382:	881b      	ldrh	r3, [r3, #0]
 8019384:	b29a      	uxth	r2, r3
 8019386:	23f8      	movs	r3, #248	@ 0xf8
 8019388:	18fb      	adds	r3, r7, r3
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	b29b      	uxth	r3, r3
 801938e:	029b      	lsls	r3, r3, #10
 8019390:	b29b      	uxth	r3, r3
 8019392:	4313      	orrs	r3, r2
 8019394:	b29a      	uxth	r2, r3
 8019396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019398:	801a      	strh	r2, [r3, #0]
 801939a:	e01c      	b.n	80193d6 <USB_EPStartXfer+0x50e>
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	785b      	ldrb	r3, [r3, #1]
 80193a0:	2b01      	cmp	r3, #1
 80193a2:	d118      	bne.n	80193d6 <USB_EPStartXfer+0x50e>
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2250      	movs	r2, #80	@ 0x50
 80193ac:	5a9b      	ldrh	r3, [r3, r2]
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	001a      	movs	r2, r3
 80193b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193b4:	189b      	adds	r3, r3, r2
 80193b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80193b8:	683b      	ldr	r3, [r7, #0]
 80193ba:	781b      	ldrb	r3, [r3, #0]
 80193bc:	00da      	lsls	r2, r3, #3
 80193be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80193c0:	18d3      	adds	r3, r2, r3
 80193c2:	4a93      	ldr	r2, [pc, #588]	@ (8019610 <USB_EPStartXfer+0x748>)
 80193c4:	4694      	mov	ip, r2
 80193c6:	4463      	add	r3, ip
 80193c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80193ca:	1d7b      	adds	r3, r7, #5
 80193cc:	33ff      	adds	r3, #255	@ 0xff
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	b29a      	uxth	r2, r3
 80193d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80193d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80193d6:	2076      	movs	r0, #118	@ 0x76
 80193d8:	183b      	adds	r3, r7, r0
 80193da:	683a      	ldr	r2, [r7, #0]
 80193dc:	8912      	ldrh	r2, [r2, #8]
 80193de:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	6959      	ldr	r1, [r3, #20]
 80193e4:	1d7b      	adds	r3, r7, #5
 80193e6:	33ff      	adds	r3, #255	@ 0xff
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	b29c      	uxth	r4, r3
 80193ec:	183b      	adds	r3, r7, r0
 80193ee:	881a      	ldrh	r2, [r3, #0]
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	0023      	movs	r3, r4
 80193f4:	f000 ffda 	bl	801a3ac <USB_WritePMA>
            ep->xfer_buff += len;
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	695a      	ldr	r2, [r3, #20]
 80193fc:	1d7b      	adds	r3, r7, #5
 80193fe:	33ff      	adds	r3, #255	@ 0xff
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	18d2      	adds	r2, r2, r3
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	6a1a      	ldr	r2, [r3, #32]
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	691b      	ldr	r3, [r3, #16]
 8019410:	429a      	cmp	r2, r3
 8019412:	d908      	bls.n	8019426 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019414:	683b      	ldr	r3, [r7, #0]
 8019416:	6a1a      	ldr	r2, [r3, #32]
 8019418:	1d7b      	adds	r3, r7, #5
 801941a:	33ff      	adds	r3, #255	@ 0xff
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	1ad2      	subs	r2, r2, r3
 8019420:	683b      	ldr	r3, [r7, #0]
 8019422:	621a      	str	r2, [r3, #32]
 8019424:	e007      	b.n	8019436 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8019426:	683b      	ldr	r3, [r7, #0]
 8019428:	6a1b      	ldr	r3, [r3, #32]
 801942a:	1d7a      	adds	r2, r7, #5
 801942c:	32ff      	adds	r2, #255	@ 0xff
 801942e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	2200      	movs	r2, #0
 8019434:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	643b      	str	r3, [r7, #64]	@ 0x40
 801943a:	683b      	ldr	r3, [r7, #0]
 801943c:	785b      	ldrb	r3, [r3, #1]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d000      	beq.n	8019444 <USB_EPStartXfer+0x57c>
 8019442:	e070      	b.n	8019526 <USB_EPStartXfer+0x65e>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2250      	movs	r2, #80	@ 0x50
 801944c:	5a9b      	ldrh	r3, [r3, r2]
 801944e:	b29b      	uxth	r3, r3
 8019450:	001a      	movs	r2, r3
 8019452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019454:	189b      	adds	r3, r3, r2
 8019456:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	00da      	lsls	r2, r3, #3
 801945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019460:	18d3      	adds	r3, r2, r3
 8019462:	4a6d      	ldr	r2, [pc, #436]	@ (8019618 <USB_EPStartXfer+0x750>)
 8019464:	4694      	mov	ip, r2
 8019466:	4463      	add	r3, ip
 8019468:	637b      	str	r3, [r7, #52]	@ 0x34
 801946a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801946c:	881b      	ldrh	r3, [r3, #0]
 801946e:	b29b      	uxth	r3, r3
 8019470:	059b      	lsls	r3, r3, #22
 8019472:	0d9b      	lsrs	r3, r3, #22
 8019474:	b29a      	uxth	r2, r3
 8019476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019478:	801a      	strh	r2, [r3, #0]
 801947a:	1d7b      	adds	r3, r7, #5
 801947c:	33ff      	adds	r3, #255	@ 0xff
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	2b3e      	cmp	r3, #62	@ 0x3e
 8019482:	d922      	bls.n	80194ca <USB_EPStartXfer+0x602>
 8019484:	1d7b      	adds	r3, r7, #5
 8019486:	33ff      	adds	r3, #255	@ 0xff
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	095b      	lsrs	r3, r3, #5
 801948c:	21f4      	movs	r1, #244	@ 0xf4
 801948e:	187a      	adds	r2, r7, r1
 8019490:	6013      	str	r3, [r2, #0]
 8019492:	1d7b      	adds	r3, r7, #5
 8019494:	33ff      	adds	r3, #255	@ 0xff
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	221f      	movs	r2, #31
 801949a:	4013      	ands	r3, r2
 801949c:	d104      	bne.n	80194a8 <USB_EPStartXfer+0x5e0>
 801949e:	187b      	adds	r3, r7, r1
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	3b01      	subs	r3, #1
 80194a4:	187a      	adds	r2, r7, r1
 80194a6:	6013      	str	r3, [r2, #0]
 80194a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194aa:	881b      	ldrh	r3, [r3, #0]
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	23f4      	movs	r3, #244	@ 0xf4
 80194b0:	18fb      	adds	r3, r7, r3
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	029b      	lsls	r3, r3, #10
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	4313      	orrs	r3, r2
 80194bc:	b29b      	uxth	r3, r3
 80194be:	4a55      	ldr	r2, [pc, #340]	@ (8019614 <USB_EPStartXfer+0x74c>)
 80194c0:	4313      	orrs	r3, r2
 80194c2:	b29a      	uxth	r2, r3
 80194c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194c6:	801a      	strh	r2, [r3, #0]
 80194c8:	e048      	b.n	801955c <USB_EPStartXfer+0x694>
 80194ca:	1d7b      	adds	r3, r7, #5
 80194cc:	33ff      	adds	r3, #255	@ 0xff
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d108      	bne.n	80194e6 <USB_EPStartXfer+0x61e>
 80194d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194d6:	881b      	ldrh	r3, [r3, #0]
 80194d8:	b29b      	uxth	r3, r3
 80194da:	4a4e      	ldr	r2, [pc, #312]	@ (8019614 <USB_EPStartXfer+0x74c>)
 80194dc:	4313      	orrs	r3, r2
 80194de:	b29a      	uxth	r2, r3
 80194e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80194e2:	801a      	strh	r2, [r3, #0]
 80194e4:	e03a      	b.n	801955c <USB_EPStartXfer+0x694>
 80194e6:	1d7b      	adds	r3, r7, #5
 80194e8:	33ff      	adds	r3, #255	@ 0xff
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	085b      	lsrs	r3, r3, #1
 80194ee:	21f4      	movs	r1, #244	@ 0xf4
 80194f0:	187a      	adds	r2, r7, r1
 80194f2:	6013      	str	r3, [r2, #0]
 80194f4:	1d7b      	adds	r3, r7, #5
 80194f6:	33ff      	adds	r3, #255	@ 0xff
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	2201      	movs	r2, #1
 80194fc:	4013      	ands	r3, r2
 80194fe:	d004      	beq.n	801950a <USB_EPStartXfer+0x642>
 8019500:	187b      	adds	r3, r7, r1
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	3301      	adds	r3, #1
 8019506:	187a      	adds	r2, r7, r1
 8019508:	6013      	str	r3, [r2, #0]
 801950a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801950c:	881b      	ldrh	r3, [r3, #0]
 801950e:	b29a      	uxth	r2, r3
 8019510:	23f4      	movs	r3, #244	@ 0xf4
 8019512:	18fb      	adds	r3, r7, r3
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	b29b      	uxth	r3, r3
 8019518:	029b      	lsls	r3, r3, #10
 801951a:	b29b      	uxth	r3, r3
 801951c:	4313      	orrs	r3, r2
 801951e:	b29a      	uxth	r2, r3
 8019520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019522:	801a      	strh	r2, [r3, #0]
 8019524:	e01a      	b.n	801955c <USB_EPStartXfer+0x694>
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	785b      	ldrb	r3, [r3, #1]
 801952a:	2b01      	cmp	r3, #1
 801952c:	d116      	bne.n	801955c <USB_EPStartXfer+0x694>
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	2250      	movs	r2, #80	@ 0x50
 8019532:	5a9b      	ldrh	r3, [r3, r2]
 8019534:	b29b      	uxth	r3, r3
 8019536:	001a      	movs	r2, r3
 8019538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801953a:	189b      	adds	r3, r3, r2
 801953c:	643b      	str	r3, [r7, #64]	@ 0x40
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	00da      	lsls	r2, r3, #3
 8019544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019546:	18d3      	adds	r3, r2, r3
 8019548:	4a33      	ldr	r2, [pc, #204]	@ (8019618 <USB_EPStartXfer+0x750>)
 801954a:	4694      	mov	ip, r2
 801954c:	4463      	add	r3, ip
 801954e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019550:	1d7b      	adds	r3, r7, #5
 8019552:	33ff      	adds	r3, #255	@ 0xff
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	b29a      	uxth	r2, r3
 8019558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801955a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801955c:	2076      	movs	r0, #118	@ 0x76
 801955e:	183b      	adds	r3, r7, r0
 8019560:	683a      	ldr	r2, [r7, #0]
 8019562:	8952      	ldrh	r2, [r2, #10]
 8019564:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	6959      	ldr	r1, [r3, #20]
 801956a:	1d7b      	adds	r3, r7, #5
 801956c:	33ff      	adds	r3, #255	@ 0xff
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	b29c      	uxth	r4, r3
 8019572:	183b      	adds	r3, r7, r0
 8019574:	881a      	ldrh	r2, [r3, #0]
 8019576:	6878      	ldr	r0, [r7, #4]
 8019578:	0023      	movs	r3, r4
 801957a:	f000 ff17 	bl	801a3ac <USB_WritePMA>
 801957e:	e1b6      	b.n	80198ee <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	6a1b      	ldr	r3, [r3, #32]
 8019584:	1d7a      	adds	r2, r7, #5
 8019586:	32ff      	adds	r2, #255	@ 0xff
 8019588:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801958a:	687a      	ldr	r2, [r7, #4]
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	781b      	ldrb	r3, [r3, #0]
 8019590:	009b      	lsls	r3, r3, #2
 8019592:	18d3      	adds	r3, r2, r3
 8019594:	881b      	ldrh	r3, [r3, #0]
 8019596:	b29a      	uxth	r2, r3
 8019598:	2062      	movs	r0, #98	@ 0x62
 801959a:	183b      	adds	r3, r7, r0
 801959c:	491f      	ldr	r1, [pc, #124]	@ (801961c <USB_EPStartXfer+0x754>)
 801959e:	400a      	ands	r2, r1
 80195a0:	801a      	strh	r2, [r3, #0]
 80195a2:	687a      	ldr	r2, [r7, #4]
 80195a4:	683b      	ldr	r3, [r7, #0]
 80195a6:	781b      	ldrb	r3, [r3, #0]
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	18d3      	adds	r3, r2, r3
 80195ac:	183a      	adds	r2, r7, r0
 80195ae:	8812      	ldrh	r2, [r2, #0]
 80195b0:	491b      	ldr	r1, [pc, #108]	@ (8019620 <USB_EPStartXfer+0x758>)
 80195b2:	430a      	orrs	r2, r1
 80195b4:	b292      	uxth	r2, r2
 80195b6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	2250      	movs	r2, #80	@ 0x50
 80195c0:	5a9b      	ldrh	r3, [r3, r2]
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	001a      	movs	r2, r3
 80195c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80195c8:	189b      	adds	r3, r3, r2
 80195ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	781b      	ldrb	r3, [r3, #0]
 80195d0:	00da      	lsls	r2, r3, #3
 80195d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80195d4:	18d3      	adds	r3, r2, r3
 80195d6:	4a0e      	ldr	r2, [pc, #56]	@ (8019610 <USB_EPStartXfer+0x748>)
 80195d8:	4694      	mov	ip, r2
 80195da:	4463      	add	r3, ip
 80195dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80195de:	1d7b      	adds	r3, r7, #5
 80195e0:	33ff      	adds	r3, #255	@ 0xff
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80195e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80195ea:	2076      	movs	r0, #118	@ 0x76
 80195ec:	183b      	adds	r3, r7, r0
 80195ee:	683a      	ldr	r2, [r7, #0]
 80195f0:	8912      	ldrh	r2, [r2, #8]
 80195f2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80195f4:	683b      	ldr	r3, [r7, #0]
 80195f6:	6959      	ldr	r1, [r3, #20]
 80195f8:	1d7b      	adds	r3, r7, #5
 80195fa:	33ff      	adds	r3, #255	@ 0xff
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	b29c      	uxth	r4, r3
 8019600:	183b      	adds	r3, r7, r0
 8019602:	881a      	ldrh	r2, [r3, #0]
 8019604:	6878      	ldr	r0, [r7, #4]
 8019606:	0023      	movs	r3, r4
 8019608:	f000 fed0 	bl	801a3ac <USB_WritePMA>
 801960c:	e16f      	b.n	80198ee <USB_EPStartXfer+0xa26>
 801960e:	46c0      	nop			@ (mov r8, r8)
 8019610:	00000402 	.word	0x00000402
 8019614:	ffff8000 	.word	0xffff8000
 8019618:	00000406 	.word	0x00000406
 801961c:	ffff8e8f 	.word	0xffff8e8f
 8019620:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8019624:	683b      	ldr	r3, [r7, #0]
 8019626:	6a1a      	ldr	r2, [r3, #32]
 8019628:	1d7b      	adds	r3, r7, #5
 801962a:	33ff      	adds	r3, #255	@ 0xff
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	1ad2      	subs	r2, r2, r3
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	683b      	ldr	r3, [r7, #0]
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	009b      	lsls	r3, r3, #2
 801963c:	18d3      	adds	r3, r2, r3
 801963e:	881b      	ldrh	r3, [r3, #0]
 8019640:	b29b      	uxth	r3, r3
 8019642:	001a      	movs	r2, r3
 8019644:	2340      	movs	r3, #64	@ 0x40
 8019646:	4013      	ands	r3, r2
 8019648:	d100      	bne.n	801964c <USB_EPStartXfer+0x784>
 801964a:	e0a4      	b.n	8019796 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	673b      	str	r3, [r7, #112]	@ 0x70
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	785b      	ldrb	r3, [r3, #1]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d000      	beq.n	801965a <USB_EPStartXfer+0x792>
 8019658:	e070      	b.n	801973c <USB_EPStartXfer+0x874>
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	2250      	movs	r2, #80	@ 0x50
 8019662:	5a9b      	ldrh	r3, [r3, r2]
 8019664:	b29b      	uxth	r3, r3
 8019666:	001a      	movs	r2, r3
 8019668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801966a:	189b      	adds	r3, r3, r2
 801966c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	781b      	ldrb	r3, [r3, #0]
 8019672:	00da      	lsls	r2, r3, #3
 8019674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019676:	18d3      	adds	r3, r2, r3
 8019678:	4abc      	ldr	r2, [pc, #752]	@ (801996c <USB_EPStartXfer+0xaa4>)
 801967a:	4694      	mov	ip, r2
 801967c:	4463      	add	r3, ip
 801967e:	667b      	str	r3, [r7, #100]	@ 0x64
 8019680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019682:	881b      	ldrh	r3, [r3, #0]
 8019684:	b29b      	uxth	r3, r3
 8019686:	059b      	lsls	r3, r3, #22
 8019688:	0d9b      	lsrs	r3, r3, #22
 801968a:	b29a      	uxth	r2, r3
 801968c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801968e:	801a      	strh	r2, [r3, #0]
 8019690:	1d7b      	adds	r3, r7, #5
 8019692:	33ff      	adds	r3, #255	@ 0xff
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	2b3e      	cmp	r3, #62	@ 0x3e
 8019698:	d922      	bls.n	80196e0 <USB_EPStartXfer+0x818>
 801969a:	1d7b      	adds	r3, r7, #5
 801969c:	33ff      	adds	r3, #255	@ 0xff
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	095b      	lsrs	r3, r3, #5
 80196a2:	21f0      	movs	r1, #240	@ 0xf0
 80196a4:	187a      	adds	r2, r7, r1
 80196a6:	6013      	str	r3, [r2, #0]
 80196a8:	1d7b      	adds	r3, r7, #5
 80196aa:	33ff      	adds	r3, #255	@ 0xff
 80196ac:	681b      	ldr	r3, [r3, #0]
 80196ae:	221f      	movs	r2, #31
 80196b0:	4013      	ands	r3, r2
 80196b2:	d104      	bne.n	80196be <USB_EPStartXfer+0x7f6>
 80196b4:	187b      	adds	r3, r7, r1
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	3b01      	subs	r3, #1
 80196ba:	187a      	adds	r2, r7, r1
 80196bc:	6013      	str	r3, [r2, #0]
 80196be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80196c0:	881b      	ldrh	r3, [r3, #0]
 80196c2:	b29a      	uxth	r2, r3
 80196c4:	23f0      	movs	r3, #240	@ 0xf0
 80196c6:	18fb      	adds	r3, r7, r3
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	029b      	lsls	r3, r3, #10
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	4313      	orrs	r3, r2
 80196d2:	b29b      	uxth	r3, r3
 80196d4:	4aa6      	ldr	r2, [pc, #664]	@ (8019970 <USB_EPStartXfer+0xaa8>)
 80196d6:	4313      	orrs	r3, r2
 80196d8:	b29a      	uxth	r2, r3
 80196da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80196dc:	801a      	strh	r2, [r3, #0]
 80196de:	e048      	b.n	8019772 <USB_EPStartXfer+0x8aa>
 80196e0:	1d7b      	adds	r3, r7, #5
 80196e2:	33ff      	adds	r3, #255	@ 0xff
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d108      	bne.n	80196fc <USB_EPStartXfer+0x834>
 80196ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80196ec:	881b      	ldrh	r3, [r3, #0]
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	4a9f      	ldr	r2, [pc, #636]	@ (8019970 <USB_EPStartXfer+0xaa8>)
 80196f2:	4313      	orrs	r3, r2
 80196f4:	b29a      	uxth	r2, r3
 80196f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80196f8:	801a      	strh	r2, [r3, #0]
 80196fa:	e03a      	b.n	8019772 <USB_EPStartXfer+0x8aa>
 80196fc:	1d7b      	adds	r3, r7, #5
 80196fe:	33ff      	adds	r3, #255	@ 0xff
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	085b      	lsrs	r3, r3, #1
 8019704:	21f0      	movs	r1, #240	@ 0xf0
 8019706:	187a      	adds	r2, r7, r1
 8019708:	6013      	str	r3, [r2, #0]
 801970a:	1d7b      	adds	r3, r7, #5
 801970c:	33ff      	adds	r3, #255	@ 0xff
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	2201      	movs	r2, #1
 8019712:	4013      	ands	r3, r2
 8019714:	d004      	beq.n	8019720 <USB_EPStartXfer+0x858>
 8019716:	187b      	adds	r3, r7, r1
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	3301      	adds	r3, #1
 801971c:	187a      	adds	r2, r7, r1
 801971e:	6013      	str	r3, [r2, #0]
 8019720:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019722:	881b      	ldrh	r3, [r3, #0]
 8019724:	b29a      	uxth	r2, r3
 8019726:	23f0      	movs	r3, #240	@ 0xf0
 8019728:	18fb      	adds	r3, r7, r3
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	b29b      	uxth	r3, r3
 801972e:	029b      	lsls	r3, r3, #10
 8019730:	b29b      	uxth	r3, r3
 8019732:	4313      	orrs	r3, r2
 8019734:	b29a      	uxth	r2, r3
 8019736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019738:	801a      	strh	r2, [r3, #0]
 801973a:	e01a      	b.n	8019772 <USB_EPStartXfer+0x8aa>
 801973c:	683b      	ldr	r3, [r7, #0]
 801973e:	785b      	ldrb	r3, [r3, #1]
 8019740:	2b01      	cmp	r3, #1
 8019742:	d116      	bne.n	8019772 <USB_EPStartXfer+0x8aa>
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2250      	movs	r2, #80	@ 0x50
 8019748:	5a9b      	ldrh	r3, [r3, r2]
 801974a:	b29b      	uxth	r3, r3
 801974c:	001a      	movs	r2, r3
 801974e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019750:	189b      	adds	r3, r3, r2
 8019752:	673b      	str	r3, [r7, #112]	@ 0x70
 8019754:	683b      	ldr	r3, [r7, #0]
 8019756:	781b      	ldrb	r3, [r3, #0]
 8019758:	00da      	lsls	r2, r3, #3
 801975a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801975c:	18d3      	adds	r3, r2, r3
 801975e:	4a83      	ldr	r2, [pc, #524]	@ (801996c <USB_EPStartXfer+0xaa4>)
 8019760:	4694      	mov	ip, r2
 8019762:	4463      	add	r3, ip
 8019764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019766:	1d7b      	adds	r3, r7, #5
 8019768:	33ff      	adds	r3, #255	@ 0xff
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	b29a      	uxth	r2, r3
 801976e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019770:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8019772:	2076      	movs	r0, #118	@ 0x76
 8019774:	183b      	adds	r3, r7, r0
 8019776:	683a      	ldr	r2, [r7, #0]
 8019778:	8952      	ldrh	r2, [r2, #10]
 801977a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801977c:	683b      	ldr	r3, [r7, #0]
 801977e:	6959      	ldr	r1, [r3, #20]
 8019780:	1d7b      	adds	r3, r7, #5
 8019782:	33ff      	adds	r3, #255	@ 0xff
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	b29c      	uxth	r4, r3
 8019788:	183b      	adds	r3, r7, r0
 801978a:	881a      	ldrh	r2, [r3, #0]
 801978c:	6878      	ldr	r0, [r7, #4]
 801978e:	0023      	movs	r3, r4
 8019790:	f000 fe0c 	bl	801a3ac <USB_WritePMA>
 8019794:	e0ab      	b.n	80198ee <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	785b      	ldrb	r3, [r3, #1]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d000      	beq.n	80197a0 <USB_EPStartXfer+0x8d8>
 801979e:	e070      	b.n	8019882 <USB_EPStartXfer+0x9ba>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	2250      	movs	r2, #80	@ 0x50
 80197a8:	5a9b      	ldrh	r3, [r3, r2]
 80197aa:	b29b      	uxth	r3, r3
 80197ac:	001a      	movs	r2, r3
 80197ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80197b0:	189b      	adds	r3, r3, r2
 80197b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80197b4:	683b      	ldr	r3, [r7, #0]
 80197b6:	781b      	ldrb	r3, [r3, #0]
 80197b8:	00da      	lsls	r2, r3, #3
 80197ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80197bc:	18d3      	adds	r3, r2, r3
 80197be:	4a6d      	ldr	r2, [pc, #436]	@ (8019974 <USB_EPStartXfer+0xaac>)
 80197c0:	4694      	mov	ip, r2
 80197c2:	4463      	add	r3, ip
 80197c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80197c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80197c8:	881b      	ldrh	r3, [r3, #0]
 80197ca:	b29b      	uxth	r3, r3
 80197cc:	059b      	lsls	r3, r3, #22
 80197ce:	0d9b      	lsrs	r3, r3, #22
 80197d0:	b29a      	uxth	r2, r3
 80197d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80197d4:	801a      	strh	r2, [r3, #0]
 80197d6:	1d7b      	adds	r3, r7, #5
 80197d8:	33ff      	adds	r3, #255	@ 0xff
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80197de:	d922      	bls.n	8019826 <USB_EPStartXfer+0x95e>
 80197e0:	1d7b      	adds	r3, r7, #5
 80197e2:	33ff      	adds	r3, #255	@ 0xff
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	095b      	lsrs	r3, r3, #5
 80197e8:	21ec      	movs	r1, #236	@ 0xec
 80197ea:	187a      	adds	r2, r7, r1
 80197ec:	6013      	str	r3, [r2, #0]
 80197ee:	1d7b      	adds	r3, r7, #5
 80197f0:	33ff      	adds	r3, #255	@ 0xff
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	221f      	movs	r2, #31
 80197f6:	4013      	ands	r3, r2
 80197f8:	d104      	bne.n	8019804 <USB_EPStartXfer+0x93c>
 80197fa:	187b      	adds	r3, r7, r1
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	3b01      	subs	r3, #1
 8019800:	187a      	adds	r2, r7, r1
 8019802:	6013      	str	r3, [r2, #0]
 8019804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019806:	881b      	ldrh	r3, [r3, #0]
 8019808:	b29a      	uxth	r2, r3
 801980a:	23ec      	movs	r3, #236	@ 0xec
 801980c:	18fb      	adds	r3, r7, r3
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	b29b      	uxth	r3, r3
 8019812:	029b      	lsls	r3, r3, #10
 8019814:	b29b      	uxth	r3, r3
 8019816:	4313      	orrs	r3, r2
 8019818:	b29b      	uxth	r3, r3
 801981a:	4a55      	ldr	r2, [pc, #340]	@ (8019970 <USB_EPStartXfer+0xaa8>)
 801981c:	4313      	orrs	r3, r2
 801981e:	b29a      	uxth	r2, r3
 8019820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019822:	801a      	strh	r2, [r3, #0]
 8019824:	e052      	b.n	80198cc <USB_EPStartXfer+0xa04>
 8019826:	1d7b      	adds	r3, r7, #5
 8019828:	33ff      	adds	r3, #255	@ 0xff
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d108      	bne.n	8019842 <USB_EPStartXfer+0x97a>
 8019830:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019832:	881b      	ldrh	r3, [r3, #0]
 8019834:	b29b      	uxth	r3, r3
 8019836:	4a4e      	ldr	r2, [pc, #312]	@ (8019970 <USB_EPStartXfer+0xaa8>)
 8019838:	4313      	orrs	r3, r2
 801983a:	b29a      	uxth	r2, r3
 801983c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801983e:	801a      	strh	r2, [r3, #0]
 8019840:	e044      	b.n	80198cc <USB_EPStartXfer+0xa04>
 8019842:	1d7b      	adds	r3, r7, #5
 8019844:	33ff      	adds	r3, #255	@ 0xff
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	085b      	lsrs	r3, r3, #1
 801984a:	21ec      	movs	r1, #236	@ 0xec
 801984c:	187a      	adds	r2, r7, r1
 801984e:	6013      	str	r3, [r2, #0]
 8019850:	1d7b      	adds	r3, r7, #5
 8019852:	33ff      	adds	r3, #255	@ 0xff
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2201      	movs	r2, #1
 8019858:	4013      	ands	r3, r2
 801985a:	d004      	beq.n	8019866 <USB_EPStartXfer+0x99e>
 801985c:	187b      	adds	r3, r7, r1
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	3301      	adds	r3, #1
 8019862:	187a      	adds	r2, r7, r1
 8019864:	6013      	str	r3, [r2, #0]
 8019866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019868:	881b      	ldrh	r3, [r3, #0]
 801986a:	b29a      	uxth	r2, r3
 801986c:	23ec      	movs	r3, #236	@ 0xec
 801986e:	18fb      	adds	r3, r7, r3
 8019870:	681b      	ldr	r3, [r3, #0]
 8019872:	b29b      	uxth	r3, r3
 8019874:	029b      	lsls	r3, r3, #10
 8019876:	b29b      	uxth	r3, r3
 8019878:	4313      	orrs	r3, r2
 801987a:	b29a      	uxth	r2, r3
 801987c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801987e:	801a      	strh	r2, [r3, #0]
 8019880:	e024      	b.n	80198cc <USB_EPStartXfer+0xa04>
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	785b      	ldrb	r3, [r3, #1]
 8019886:	2b01      	cmp	r3, #1
 8019888:	d120      	bne.n	80198cc <USB_EPStartXfer+0xa04>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2184      	movs	r1, #132	@ 0x84
 801988e:	187a      	adds	r2, r7, r1
 8019890:	6013      	str	r3, [r2, #0]
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2250      	movs	r2, #80	@ 0x50
 8019896:	5a9b      	ldrh	r3, [r3, r2]
 8019898:	b29b      	uxth	r3, r3
 801989a:	001a      	movs	r2, r3
 801989c:	187b      	adds	r3, r7, r1
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	189b      	adds	r3, r3, r2
 80198a2:	187a      	adds	r2, r7, r1
 80198a4:	6013      	str	r3, [r2, #0]
 80198a6:	683b      	ldr	r3, [r7, #0]
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	00da      	lsls	r2, r3, #3
 80198ac:	187b      	adds	r3, r7, r1
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	18d3      	adds	r3, r2, r3
 80198b2:	4a30      	ldr	r2, [pc, #192]	@ (8019974 <USB_EPStartXfer+0xaac>)
 80198b4:	4694      	mov	ip, r2
 80198b6:	4463      	add	r3, ip
 80198b8:	2180      	movs	r1, #128	@ 0x80
 80198ba:	187a      	adds	r2, r7, r1
 80198bc:	6013      	str	r3, [r2, #0]
 80198be:	1d7b      	adds	r3, r7, #5
 80198c0:	33ff      	adds	r3, #255	@ 0xff
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	b29a      	uxth	r2, r3
 80198c6:	187b      	adds	r3, r7, r1
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80198cc:	2076      	movs	r0, #118	@ 0x76
 80198ce:	183b      	adds	r3, r7, r0
 80198d0:	683a      	ldr	r2, [r7, #0]
 80198d2:	8912      	ldrh	r2, [r2, #8]
 80198d4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	6959      	ldr	r1, [r3, #20]
 80198da:	1d7b      	adds	r3, r7, #5
 80198dc:	33ff      	adds	r3, #255	@ 0xff
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	b29c      	uxth	r4, r3
 80198e2:	183b      	adds	r3, r7, r0
 80198e4:	881a      	ldrh	r2, [r3, #0]
 80198e6:	6878      	ldr	r0, [r7, #4]
 80198e8:	0023      	movs	r3, r4
 80198ea:	f000 fd5f 	bl	801a3ac <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	683b      	ldr	r3, [r7, #0]
 80198f2:	781b      	ldrb	r3, [r3, #0]
 80198f4:	009b      	lsls	r3, r3, #2
 80198f6:	18d3      	adds	r3, r2, r3
 80198f8:	881b      	ldrh	r3, [r3, #0]
 80198fa:	b29a      	uxth	r2, r3
 80198fc:	200a      	movs	r0, #10
 80198fe:	183b      	adds	r3, r7, r0
 8019900:	491d      	ldr	r1, [pc, #116]	@ (8019978 <USB_EPStartXfer+0xab0>)
 8019902:	400a      	ands	r2, r1
 8019904:	801a      	strh	r2, [r3, #0]
 8019906:	183b      	adds	r3, r7, r0
 8019908:	183a      	adds	r2, r7, r0
 801990a:	8812      	ldrh	r2, [r2, #0]
 801990c:	2110      	movs	r1, #16
 801990e:	404a      	eors	r2, r1
 8019910:	801a      	strh	r2, [r3, #0]
 8019912:	183b      	adds	r3, r7, r0
 8019914:	183a      	adds	r2, r7, r0
 8019916:	8812      	ldrh	r2, [r2, #0]
 8019918:	2120      	movs	r1, #32
 801991a:	404a      	eors	r2, r1
 801991c:	801a      	strh	r2, [r3, #0]
 801991e:	687a      	ldr	r2, [r7, #4]
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	18d3      	adds	r3, r2, r3
 8019928:	183a      	adds	r2, r7, r0
 801992a:	8812      	ldrh	r2, [r2, #0]
 801992c:	4913      	ldr	r1, [pc, #76]	@ (801997c <USB_EPStartXfer+0xab4>)
 801992e:	430a      	orrs	r2, r1
 8019930:	b292      	uxth	r2, r2
 8019932:	801a      	strh	r2, [r3, #0]
 8019934:	f000 fbf4 	bl	801a120 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	7b1b      	ldrb	r3, [r3, #12]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d000      	beq.n	8019942 <USB_EPStartXfer+0xa7a>
 8019940:	e0a9      	b.n	8019a96 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	699a      	ldr	r2, [r3, #24]
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	691b      	ldr	r3, [r3, #16]
 801994a:	429a      	cmp	r2, r3
 801994c:	d918      	bls.n	8019980 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801994e:	683b      	ldr	r3, [r7, #0]
 8019950:	691b      	ldr	r3, [r3, #16]
 8019952:	1d7a      	adds	r2, r7, #5
 8019954:	32ff      	adds	r2, #255	@ 0xff
 8019956:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019958:	683b      	ldr	r3, [r7, #0]
 801995a:	699a      	ldr	r2, [r3, #24]
 801995c:	1d7b      	adds	r3, r7, #5
 801995e:	33ff      	adds	r3, #255	@ 0xff
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	1ad2      	subs	r2, r2, r3
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	619a      	str	r2, [r3, #24]
 8019968:	e012      	b.n	8019990 <USB_EPStartXfer+0xac8>
 801996a:	46c0      	nop			@ (mov r8, r8)
 801996c:	00000406 	.word	0x00000406
 8019970:	ffff8000 	.word	0xffff8000
 8019974:	00000402 	.word	0x00000402
 8019978:	ffff8fbf 	.word	0xffff8fbf
 801997c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8019980:	683b      	ldr	r3, [r7, #0]
 8019982:	699b      	ldr	r3, [r3, #24]
 8019984:	1d7a      	adds	r2, r7, #5
 8019986:	32ff      	adds	r2, #255	@ 0xff
 8019988:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801998a:	683b      	ldr	r3, [r7, #0]
 801998c:	2200      	movs	r2, #0
 801998e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	2190      	movs	r1, #144	@ 0x90
 8019994:	187a      	adds	r2, r7, r1
 8019996:	6013      	str	r3, [r2, #0]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	2250      	movs	r2, #80	@ 0x50
 801999c:	5a9b      	ldrh	r3, [r3, r2]
 801999e:	b29b      	uxth	r3, r3
 80199a0:	001a      	movs	r2, r3
 80199a2:	187b      	adds	r3, r7, r1
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	189b      	adds	r3, r3, r2
 80199a8:	187a      	adds	r2, r7, r1
 80199aa:	6013      	str	r3, [r2, #0]
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	781b      	ldrb	r3, [r3, #0]
 80199b0:	00da      	lsls	r2, r3, #3
 80199b2:	187b      	adds	r3, r7, r1
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	18d3      	adds	r3, r2, r3
 80199b8:	4acf      	ldr	r2, [pc, #828]	@ (8019cf8 <USB_EPStartXfer+0xe30>)
 80199ba:	4694      	mov	ip, r2
 80199bc:	4463      	add	r3, ip
 80199be:	218c      	movs	r1, #140	@ 0x8c
 80199c0:	187a      	adds	r2, r7, r1
 80199c2:	6013      	str	r3, [r2, #0]
 80199c4:	187b      	adds	r3, r7, r1
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	881b      	ldrh	r3, [r3, #0]
 80199ca:	b29b      	uxth	r3, r3
 80199cc:	059b      	lsls	r3, r3, #22
 80199ce:	0d9b      	lsrs	r3, r3, #22
 80199d0:	b29a      	uxth	r2, r3
 80199d2:	187b      	adds	r3, r7, r1
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	801a      	strh	r2, [r3, #0]
 80199d8:	1d7b      	adds	r3, r7, #5
 80199da:	33ff      	adds	r3, #255	@ 0xff
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	2b3e      	cmp	r3, #62	@ 0x3e
 80199e0:	d925      	bls.n	8019a2e <USB_EPStartXfer+0xb66>
 80199e2:	1d7b      	adds	r3, r7, #5
 80199e4:	33ff      	adds	r3, #255	@ 0xff
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	095b      	lsrs	r3, r3, #5
 80199ea:	21e8      	movs	r1, #232	@ 0xe8
 80199ec:	187a      	adds	r2, r7, r1
 80199ee:	6013      	str	r3, [r2, #0]
 80199f0:	1d7b      	adds	r3, r7, #5
 80199f2:	33ff      	adds	r3, #255	@ 0xff
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	221f      	movs	r2, #31
 80199f8:	4013      	ands	r3, r2
 80199fa:	d104      	bne.n	8019a06 <USB_EPStartXfer+0xb3e>
 80199fc:	187b      	adds	r3, r7, r1
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	3b01      	subs	r3, #1
 8019a02:	187a      	adds	r2, r7, r1
 8019a04:	6013      	str	r3, [r2, #0]
 8019a06:	218c      	movs	r1, #140	@ 0x8c
 8019a08:	187b      	adds	r3, r7, r1
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	881b      	ldrh	r3, [r3, #0]
 8019a0e:	b29a      	uxth	r2, r3
 8019a10:	23e8      	movs	r3, #232	@ 0xe8
 8019a12:	18fb      	adds	r3, r7, r3
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	b29b      	uxth	r3, r3
 8019a18:	029b      	lsls	r3, r3, #10
 8019a1a:	b29b      	uxth	r3, r3
 8019a1c:	4313      	orrs	r3, r2
 8019a1e:	b29b      	uxth	r3, r3
 8019a20:	4ab6      	ldr	r2, [pc, #728]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019a22:	4313      	orrs	r3, r2
 8019a24:	b29a      	uxth	r2, r3
 8019a26:	187b      	adds	r3, r7, r1
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	801a      	strh	r2, [r3, #0]
 8019a2c:	e353      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
 8019a2e:	1d7b      	adds	r3, r7, #5
 8019a30:	33ff      	adds	r3, #255	@ 0xff
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d10b      	bne.n	8019a50 <USB_EPStartXfer+0xb88>
 8019a38:	218c      	movs	r1, #140	@ 0x8c
 8019a3a:	187b      	adds	r3, r7, r1
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	881b      	ldrh	r3, [r3, #0]
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	4aae      	ldr	r2, [pc, #696]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019a44:	4313      	orrs	r3, r2
 8019a46:	b29a      	uxth	r2, r3
 8019a48:	187b      	adds	r3, r7, r1
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	801a      	strh	r2, [r3, #0]
 8019a4e:	e342      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
 8019a50:	1d7b      	adds	r3, r7, #5
 8019a52:	33ff      	adds	r3, #255	@ 0xff
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	085b      	lsrs	r3, r3, #1
 8019a58:	21e8      	movs	r1, #232	@ 0xe8
 8019a5a:	187a      	adds	r2, r7, r1
 8019a5c:	6013      	str	r3, [r2, #0]
 8019a5e:	1d7b      	adds	r3, r7, #5
 8019a60:	33ff      	adds	r3, #255	@ 0xff
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	2201      	movs	r2, #1
 8019a66:	4013      	ands	r3, r2
 8019a68:	d004      	beq.n	8019a74 <USB_EPStartXfer+0xbac>
 8019a6a:	187b      	adds	r3, r7, r1
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	3301      	adds	r3, #1
 8019a70:	187a      	adds	r2, r7, r1
 8019a72:	6013      	str	r3, [r2, #0]
 8019a74:	218c      	movs	r1, #140	@ 0x8c
 8019a76:	187b      	adds	r3, r7, r1
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	881b      	ldrh	r3, [r3, #0]
 8019a7c:	b29a      	uxth	r2, r3
 8019a7e:	23e8      	movs	r3, #232	@ 0xe8
 8019a80:	18fb      	adds	r3, r7, r3
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	b29b      	uxth	r3, r3
 8019a86:	029b      	lsls	r3, r3, #10
 8019a88:	b29b      	uxth	r3, r3
 8019a8a:	4313      	orrs	r3, r2
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	187b      	adds	r3, r7, r1
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	801a      	strh	r2, [r3, #0]
 8019a94:	e31f      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8019a96:	683b      	ldr	r3, [r7, #0]
 8019a98:	78db      	ldrb	r3, [r3, #3]
 8019a9a:	2b02      	cmp	r3, #2
 8019a9c:	d000      	beq.n	8019aa0 <USB_EPStartXfer+0xbd8>
 8019a9e:	e191      	b.n	8019dc4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8019aa0:	683b      	ldr	r3, [r7, #0]
 8019aa2:	785b      	ldrb	r3, [r3, #1]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d000      	beq.n	8019aaa <USB_EPStartXfer+0xbe2>
 8019aa8:	e07c      	b.n	8019ba4 <USB_EPStartXfer+0xcdc>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	21ac      	movs	r1, #172	@ 0xac
 8019aae:	187a      	adds	r2, r7, r1
 8019ab0:	6013      	str	r3, [r2, #0]
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	2250      	movs	r2, #80	@ 0x50
 8019ab6:	5a9b      	ldrh	r3, [r3, r2]
 8019ab8:	b29b      	uxth	r3, r3
 8019aba:	001a      	movs	r2, r3
 8019abc:	187b      	adds	r3, r7, r1
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	189b      	adds	r3, r3, r2
 8019ac2:	187a      	adds	r2, r7, r1
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	683b      	ldr	r3, [r7, #0]
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	00da      	lsls	r2, r3, #3
 8019acc:	187b      	adds	r3, r7, r1
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	18d3      	adds	r3, r2, r3
 8019ad2:	4a8b      	ldr	r2, [pc, #556]	@ (8019d00 <USB_EPStartXfer+0xe38>)
 8019ad4:	4694      	mov	ip, r2
 8019ad6:	4463      	add	r3, ip
 8019ad8:	21a8      	movs	r1, #168	@ 0xa8
 8019ada:	187a      	adds	r2, r7, r1
 8019adc:	6013      	str	r3, [r2, #0]
 8019ade:	187b      	adds	r3, r7, r1
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	881b      	ldrh	r3, [r3, #0]
 8019ae4:	b29b      	uxth	r3, r3
 8019ae6:	059b      	lsls	r3, r3, #22
 8019ae8:	0d9b      	lsrs	r3, r3, #22
 8019aea:	b29a      	uxth	r2, r3
 8019aec:	187b      	adds	r3, r7, r1
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	801a      	strh	r2, [r3, #0]
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	691b      	ldr	r3, [r3, #16]
 8019af6:	2b3e      	cmp	r3, #62	@ 0x3e
 8019af8:	d923      	bls.n	8019b42 <USB_EPStartXfer+0xc7a>
 8019afa:	683b      	ldr	r3, [r7, #0]
 8019afc:	691b      	ldr	r3, [r3, #16]
 8019afe:	095b      	lsrs	r3, r3, #5
 8019b00:	21e4      	movs	r1, #228	@ 0xe4
 8019b02:	187a      	adds	r2, r7, r1
 8019b04:	6013      	str	r3, [r2, #0]
 8019b06:	683b      	ldr	r3, [r7, #0]
 8019b08:	691b      	ldr	r3, [r3, #16]
 8019b0a:	221f      	movs	r2, #31
 8019b0c:	4013      	ands	r3, r2
 8019b0e:	d104      	bne.n	8019b1a <USB_EPStartXfer+0xc52>
 8019b10:	187b      	adds	r3, r7, r1
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	3b01      	subs	r3, #1
 8019b16:	187a      	adds	r2, r7, r1
 8019b18:	6013      	str	r3, [r2, #0]
 8019b1a:	21a8      	movs	r1, #168	@ 0xa8
 8019b1c:	187b      	adds	r3, r7, r1
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	881b      	ldrh	r3, [r3, #0]
 8019b22:	b29a      	uxth	r2, r3
 8019b24:	23e4      	movs	r3, #228	@ 0xe4
 8019b26:	18fb      	adds	r3, r7, r3
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	b29b      	uxth	r3, r3
 8019b2c:	029b      	lsls	r3, r3, #10
 8019b2e:	b29b      	uxth	r3, r3
 8019b30:	4313      	orrs	r3, r2
 8019b32:	b29b      	uxth	r3, r3
 8019b34:	4a71      	ldr	r2, [pc, #452]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019b36:	4313      	orrs	r3, r2
 8019b38:	b29a      	uxth	r2, r3
 8019b3a:	187b      	adds	r3, r7, r1
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	801a      	strh	r2, [r3, #0]
 8019b40:	e054      	b.n	8019bec <USB_EPStartXfer+0xd24>
 8019b42:	683b      	ldr	r3, [r7, #0]
 8019b44:	691b      	ldr	r3, [r3, #16]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d10b      	bne.n	8019b62 <USB_EPStartXfer+0xc9a>
 8019b4a:	21a8      	movs	r1, #168	@ 0xa8
 8019b4c:	187b      	adds	r3, r7, r1
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	881b      	ldrh	r3, [r3, #0]
 8019b52:	b29b      	uxth	r3, r3
 8019b54:	4a69      	ldr	r2, [pc, #420]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019b56:	4313      	orrs	r3, r2
 8019b58:	b29a      	uxth	r2, r3
 8019b5a:	187b      	adds	r3, r7, r1
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	801a      	strh	r2, [r3, #0]
 8019b60:	e044      	b.n	8019bec <USB_EPStartXfer+0xd24>
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	691b      	ldr	r3, [r3, #16]
 8019b66:	085b      	lsrs	r3, r3, #1
 8019b68:	21e4      	movs	r1, #228	@ 0xe4
 8019b6a:	187a      	adds	r2, r7, r1
 8019b6c:	6013      	str	r3, [r2, #0]
 8019b6e:	683b      	ldr	r3, [r7, #0]
 8019b70:	691b      	ldr	r3, [r3, #16]
 8019b72:	2201      	movs	r2, #1
 8019b74:	4013      	ands	r3, r2
 8019b76:	d004      	beq.n	8019b82 <USB_EPStartXfer+0xcba>
 8019b78:	187b      	adds	r3, r7, r1
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	3301      	adds	r3, #1
 8019b7e:	187a      	adds	r2, r7, r1
 8019b80:	6013      	str	r3, [r2, #0]
 8019b82:	21a8      	movs	r1, #168	@ 0xa8
 8019b84:	187b      	adds	r3, r7, r1
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	881b      	ldrh	r3, [r3, #0]
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	23e4      	movs	r3, #228	@ 0xe4
 8019b8e:	18fb      	adds	r3, r7, r3
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	b29b      	uxth	r3, r3
 8019b94:	029b      	lsls	r3, r3, #10
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	4313      	orrs	r3, r2
 8019b9a:	b29a      	uxth	r2, r3
 8019b9c:	187b      	adds	r3, r7, r1
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	801a      	strh	r2, [r3, #0]
 8019ba2:	e023      	b.n	8019bec <USB_EPStartXfer+0xd24>
 8019ba4:	683b      	ldr	r3, [r7, #0]
 8019ba6:	785b      	ldrb	r3, [r3, #1]
 8019ba8:	2b01      	cmp	r3, #1
 8019baa:	d11f      	bne.n	8019bec <USB_EPStartXfer+0xd24>
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	21b4      	movs	r1, #180	@ 0xb4
 8019bb0:	187a      	adds	r2, r7, r1
 8019bb2:	6013      	str	r3, [r2, #0]
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2250      	movs	r2, #80	@ 0x50
 8019bb8:	5a9b      	ldrh	r3, [r3, r2]
 8019bba:	b29b      	uxth	r3, r3
 8019bbc:	001a      	movs	r2, r3
 8019bbe:	187b      	adds	r3, r7, r1
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	189b      	adds	r3, r3, r2
 8019bc4:	187a      	adds	r2, r7, r1
 8019bc6:	6013      	str	r3, [r2, #0]
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	781b      	ldrb	r3, [r3, #0]
 8019bcc:	00da      	lsls	r2, r3, #3
 8019bce:	187b      	adds	r3, r7, r1
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	18d3      	adds	r3, r2, r3
 8019bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8019d00 <USB_EPStartXfer+0xe38>)
 8019bd6:	4694      	mov	ip, r2
 8019bd8:	4463      	add	r3, ip
 8019bda:	21b0      	movs	r1, #176	@ 0xb0
 8019bdc:	187a      	adds	r2, r7, r1
 8019bde:	6013      	str	r3, [r2, #0]
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	691b      	ldr	r3, [r3, #16]
 8019be4:	b29a      	uxth	r2, r3
 8019be6:	187b      	adds	r3, r7, r1
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	801a      	strh	r2, [r3, #0]
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	22a4      	movs	r2, #164	@ 0xa4
 8019bf0:	18ba      	adds	r2, r7, r2
 8019bf2:	6013      	str	r3, [r2, #0]
 8019bf4:	683b      	ldr	r3, [r7, #0]
 8019bf6:	785b      	ldrb	r3, [r3, #1]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d000      	beq.n	8019bfe <USB_EPStartXfer+0xd36>
 8019bfc:	e082      	b.n	8019d04 <USB_EPStartXfer+0xe3c>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	219c      	movs	r1, #156	@ 0x9c
 8019c02:	187a      	adds	r2, r7, r1
 8019c04:	6013      	str	r3, [r2, #0]
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	2250      	movs	r2, #80	@ 0x50
 8019c0a:	5a9b      	ldrh	r3, [r3, r2]
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	001a      	movs	r2, r3
 8019c10:	187b      	adds	r3, r7, r1
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	189b      	adds	r3, r3, r2
 8019c16:	187a      	adds	r2, r7, r1
 8019c18:	6013      	str	r3, [r2, #0]
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	781b      	ldrb	r3, [r3, #0]
 8019c1e:	00da      	lsls	r2, r3, #3
 8019c20:	187b      	adds	r3, r7, r1
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	18d3      	adds	r3, r2, r3
 8019c26:	4a34      	ldr	r2, [pc, #208]	@ (8019cf8 <USB_EPStartXfer+0xe30>)
 8019c28:	4694      	mov	ip, r2
 8019c2a:	4463      	add	r3, ip
 8019c2c:	2198      	movs	r1, #152	@ 0x98
 8019c2e:	187a      	adds	r2, r7, r1
 8019c30:	6013      	str	r3, [r2, #0]
 8019c32:	187b      	adds	r3, r7, r1
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	881b      	ldrh	r3, [r3, #0]
 8019c38:	b29b      	uxth	r3, r3
 8019c3a:	059b      	lsls	r3, r3, #22
 8019c3c:	0d9b      	lsrs	r3, r3, #22
 8019c3e:	b29a      	uxth	r2, r3
 8019c40:	187b      	adds	r3, r7, r1
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	801a      	strh	r2, [r3, #0]
 8019c46:	683b      	ldr	r3, [r7, #0]
 8019c48:	691b      	ldr	r3, [r3, #16]
 8019c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c4c:	d923      	bls.n	8019c96 <USB_EPStartXfer+0xdce>
 8019c4e:	683b      	ldr	r3, [r7, #0]
 8019c50:	691b      	ldr	r3, [r3, #16]
 8019c52:	095b      	lsrs	r3, r3, #5
 8019c54:	21e0      	movs	r1, #224	@ 0xe0
 8019c56:	187a      	adds	r2, r7, r1
 8019c58:	6013      	str	r3, [r2, #0]
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	691b      	ldr	r3, [r3, #16]
 8019c5e:	221f      	movs	r2, #31
 8019c60:	4013      	ands	r3, r2
 8019c62:	d104      	bne.n	8019c6e <USB_EPStartXfer+0xda6>
 8019c64:	187b      	adds	r3, r7, r1
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	187a      	adds	r2, r7, r1
 8019c6c:	6013      	str	r3, [r2, #0]
 8019c6e:	2198      	movs	r1, #152	@ 0x98
 8019c70:	187b      	adds	r3, r7, r1
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	881b      	ldrh	r3, [r3, #0]
 8019c76:	b29a      	uxth	r2, r3
 8019c78:	23e0      	movs	r3, #224	@ 0xe0
 8019c7a:	18fb      	adds	r3, r7, r3
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	b29b      	uxth	r3, r3
 8019c80:	029b      	lsls	r3, r3, #10
 8019c82:	b29b      	uxth	r3, r3
 8019c84:	4313      	orrs	r3, r2
 8019c86:	b29b      	uxth	r3, r3
 8019c88:	4a1c      	ldr	r2, [pc, #112]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019c8a:	4313      	orrs	r3, r2
 8019c8c:	b29a      	uxth	r2, r3
 8019c8e:	187b      	adds	r3, r7, r1
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	801a      	strh	r2, [r3, #0]
 8019c94:	e057      	b.n	8019d46 <USB_EPStartXfer+0xe7e>
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	691b      	ldr	r3, [r3, #16]
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d10b      	bne.n	8019cb6 <USB_EPStartXfer+0xdee>
 8019c9e:	2198      	movs	r1, #152	@ 0x98
 8019ca0:	187b      	adds	r3, r7, r1
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	881b      	ldrh	r3, [r3, #0]
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	4a14      	ldr	r2, [pc, #80]	@ (8019cfc <USB_EPStartXfer+0xe34>)
 8019caa:	4313      	orrs	r3, r2
 8019cac:	b29a      	uxth	r2, r3
 8019cae:	187b      	adds	r3, r7, r1
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	801a      	strh	r2, [r3, #0]
 8019cb4:	e047      	b.n	8019d46 <USB_EPStartXfer+0xe7e>
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	691b      	ldr	r3, [r3, #16]
 8019cba:	085b      	lsrs	r3, r3, #1
 8019cbc:	21e0      	movs	r1, #224	@ 0xe0
 8019cbe:	187a      	adds	r2, r7, r1
 8019cc0:	6013      	str	r3, [r2, #0]
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	691b      	ldr	r3, [r3, #16]
 8019cc6:	2201      	movs	r2, #1
 8019cc8:	4013      	ands	r3, r2
 8019cca:	d004      	beq.n	8019cd6 <USB_EPStartXfer+0xe0e>
 8019ccc:	187b      	adds	r3, r7, r1
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	3301      	adds	r3, #1
 8019cd2:	187a      	adds	r2, r7, r1
 8019cd4:	6013      	str	r3, [r2, #0]
 8019cd6:	2198      	movs	r1, #152	@ 0x98
 8019cd8:	187b      	adds	r3, r7, r1
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	881b      	ldrh	r3, [r3, #0]
 8019cde:	b29a      	uxth	r2, r3
 8019ce0:	23e0      	movs	r3, #224	@ 0xe0
 8019ce2:	18fb      	adds	r3, r7, r3
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	b29b      	uxth	r3, r3
 8019ce8:	029b      	lsls	r3, r3, #10
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	4313      	orrs	r3, r2
 8019cee:	b29a      	uxth	r2, r3
 8019cf0:	187b      	adds	r3, r7, r1
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	801a      	strh	r2, [r3, #0]
 8019cf6:	e026      	b.n	8019d46 <USB_EPStartXfer+0xe7e>
 8019cf8:	00000406 	.word	0x00000406
 8019cfc:	ffff8000 	.word	0xffff8000
 8019d00:	00000402 	.word	0x00000402
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	785b      	ldrb	r3, [r3, #1]
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	d11c      	bne.n	8019d46 <USB_EPStartXfer+0xe7e>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	2250      	movs	r2, #80	@ 0x50
 8019d10:	5a9b      	ldrh	r3, [r3, r2]
 8019d12:	b29b      	uxth	r3, r3
 8019d14:	001a      	movs	r2, r3
 8019d16:	21a4      	movs	r1, #164	@ 0xa4
 8019d18:	187b      	adds	r3, r7, r1
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	189b      	adds	r3, r3, r2
 8019d1e:	187a      	adds	r2, r7, r1
 8019d20:	6013      	str	r3, [r2, #0]
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	781b      	ldrb	r3, [r3, #0]
 8019d26:	00da      	lsls	r2, r3, #3
 8019d28:	187b      	adds	r3, r7, r1
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	18d3      	adds	r3, r2, r3
 8019d2e:	4ad2      	ldr	r2, [pc, #840]	@ (801a078 <USB_EPStartXfer+0x11b0>)
 8019d30:	4694      	mov	ip, r2
 8019d32:	4463      	add	r3, ip
 8019d34:	21a0      	movs	r1, #160	@ 0xa0
 8019d36:	187a      	adds	r2, r7, r1
 8019d38:	6013      	str	r3, [r2, #0]
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	691b      	ldr	r3, [r3, #16]
 8019d3e:	b29a      	uxth	r2, r3
 8019d40:	187b      	adds	r3, r7, r1
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	69db      	ldr	r3, [r3, #28]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d100      	bne.n	8019d50 <USB_EPStartXfer+0xe88>
 8019d4e:	e1c2      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019d50:	687a      	ldr	r2, [r7, #4]
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	009b      	lsls	r3, r3, #2
 8019d58:	18d2      	adds	r2, r2, r3
 8019d5a:	2196      	movs	r1, #150	@ 0x96
 8019d5c:	187b      	adds	r3, r7, r1
 8019d5e:	8812      	ldrh	r2, [r2, #0]
 8019d60:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019d62:	187b      	adds	r3, r7, r1
 8019d64:	881a      	ldrh	r2, [r3, #0]
 8019d66:	2380      	movs	r3, #128	@ 0x80
 8019d68:	01db      	lsls	r3, r3, #7
 8019d6a:	4013      	ands	r3, r2
 8019d6c:	d004      	beq.n	8019d78 <USB_EPStartXfer+0xeb0>
 8019d6e:	187b      	adds	r3, r7, r1
 8019d70:	881b      	ldrh	r3, [r3, #0]
 8019d72:	2240      	movs	r2, #64	@ 0x40
 8019d74:	4013      	ands	r3, r2
 8019d76:	d10d      	bne.n	8019d94 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019d78:	2196      	movs	r1, #150	@ 0x96
 8019d7a:	187b      	adds	r3, r7, r1
 8019d7c:	881a      	ldrh	r2, [r3, #0]
 8019d7e:	2380      	movs	r3, #128	@ 0x80
 8019d80:	01db      	lsls	r3, r3, #7
 8019d82:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019d84:	d000      	beq.n	8019d88 <USB_EPStartXfer+0xec0>
 8019d86:	e1a6      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019d88:	187b      	adds	r3, r7, r1
 8019d8a:	881b      	ldrh	r3, [r3, #0]
 8019d8c:	2240      	movs	r2, #64	@ 0x40
 8019d8e:	4013      	ands	r3, r2
 8019d90:	d000      	beq.n	8019d94 <USB_EPStartXfer+0xecc>
 8019d92:	e1a0      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8019d94:	687a      	ldr	r2, [r7, #4]
 8019d96:	683b      	ldr	r3, [r7, #0]
 8019d98:	781b      	ldrb	r3, [r3, #0]
 8019d9a:	009b      	lsls	r3, r3, #2
 8019d9c:	18d3      	adds	r3, r2, r3
 8019d9e:	881b      	ldrh	r3, [r3, #0]
 8019da0:	b29a      	uxth	r2, r3
 8019da2:	2094      	movs	r0, #148	@ 0x94
 8019da4:	183b      	adds	r3, r7, r0
 8019da6:	49b5      	ldr	r1, [pc, #724]	@ (801a07c <USB_EPStartXfer+0x11b4>)
 8019da8:	400a      	ands	r2, r1
 8019daa:	801a      	strh	r2, [r3, #0]
 8019dac:	687a      	ldr	r2, [r7, #4]
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	781b      	ldrb	r3, [r3, #0]
 8019db2:	009b      	lsls	r3, r3, #2
 8019db4:	18d3      	adds	r3, r2, r3
 8019db6:	183a      	adds	r2, r7, r0
 8019db8:	8812      	ldrh	r2, [r2, #0]
 8019dba:	49b1      	ldr	r1, [pc, #708]	@ (801a080 <USB_EPStartXfer+0x11b8>)
 8019dbc:	430a      	orrs	r2, r1
 8019dbe:	b292      	uxth	r2, r2
 8019dc0:	801a      	strh	r2, [r3, #0]
 8019dc2:	e188      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	78db      	ldrb	r3, [r3, #3]
 8019dc8:	2b01      	cmp	r3, #1
 8019dca:	d000      	beq.n	8019dce <USB_EPStartXfer+0xf06>
 8019dcc:	e181      	b.n	801a0d2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	699a      	ldr	r2, [r3, #24]
 8019dd2:	683b      	ldr	r3, [r7, #0]
 8019dd4:	691b      	ldr	r3, [r3, #16]
 8019dd6:	429a      	cmp	r2, r3
 8019dd8:	d90d      	bls.n	8019df6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	691b      	ldr	r3, [r3, #16]
 8019dde:	1d7a      	adds	r2, r7, #5
 8019de0:	32ff      	adds	r2, #255	@ 0xff
 8019de2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	699a      	ldr	r2, [r3, #24]
 8019de8:	1d7b      	adds	r3, r7, #5
 8019dea:	33ff      	adds	r3, #255	@ 0xff
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	1ad2      	subs	r2, r2, r3
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	619a      	str	r2, [r3, #24]
 8019df4:	e007      	b.n	8019e06 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	699b      	ldr	r3, [r3, #24]
 8019dfa:	1d7a      	adds	r2, r7, #5
 8019dfc:	32ff      	adds	r2, #255	@ 0xff
 8019dfe:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	2200      	movs	r2, #0
 8019e04:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	785b      	ldrb	r3, [r3, #1]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d000      	beq.n	8019e10 <USB_EPStartXfer+0xf48>
 8019e0e:	e082      	b.n	8019f16 <USB_EPStartXfer+0x104e>
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	21cc      	movs	r1, #204	@ 0xcc
 8019e14:	187a      	adds	r2, r7, r1
 8019e16:	6013      	str	r3, [r2, #0]
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	2250      	movs	r2, #80	@ 0x50
 8019e1c:	5a9b      	ldrh	r3, [r3, r2]
 8019e1e:	b29b      	uxth	r3, r3
 8019e20:	001a      	movs	r2, r3
 8019e22:	187b      	adds	r3, r7, r1
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	189b      	adds	r3, r3, r2
 8019e28:	187a      	adds	r2, r7, r1
 8019e2a:	6013      	str	r3, [r2, #0]
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	00da      	lsls	r2, r3, #3
 8019e32:	187b      	adds	r3, r7, r1
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	18d3      	adds	r3, r2, r3
 8019e38:	4a92      	ldr	r2, [pc, #584]	@ (801a084 <USB_EPStartXfer+0x11bc>)
 8019e3a:	4694      	mov	ip, r2
 8019e3c:	4463      	add	r3, ip
 8019e3e:	21c8      	movs	r1, #200	@ 0xc8
 8019e40:	187a      	adds	r2, r7, r1
 8019e42:	6013      	str	r3, [r2, #0]
 8019e44:	187b      	adds	r3, r7, r1
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	881b      	ldrh	r3, [r3, #0]
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	059b      	lsls	r3, r3, #22
 8019e4e:	0d9b      	lsrs	r3, r3, #22
 8019e50:	b29a      	uxth	r2, r3
 8019e52:	187b      	adds	r3, r7, r1
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	801a      	strh	r2, [r3, #0]
 8019e58:	1d7b      	adds	r3, r7, #5
 8019e5a:	33ff      	adds	r3, #255	@ 0xff
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019e60:	d925      	bls.n	8019eae <USB_EPStartXfer+0xfe6>
 8019e62:	1d7b      	adds	r3, r7, #5
 8019e64:	33ff      	adds	r3, #255	@ 0xff
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	095b      	lsrs	r3, r3, #5
 8019e6a:	21dc      	movs	r1, #220	@ 0xdc
 8019e6c:	187a      	adds	r2, r7, r1
 8019e6e:	6013      	str	r3, [r2, #0]
 8019e70:	1d7b      	adds	r3, r7, #5
 8019e72:	33ff      	adds	r3, #255	@ 0xff
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	221f      	movs	r2, #31
 8019e78:	4013      	ands	r3, r2
 8019e7a:	d104      	bne.n	8019e86 <USB_EPStartXfer+0xfbe>
 8019e7c:	187b      	adds	r3, r7, r1
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	3b01      	subs	r3, #1
 8019e82:	187a      	adds	r2, r7, r1
 8019e84:	6013      	str	r3, [r2, #0]
 8019e86:	21c8      	movs	r1, #200	@ 0xc8
 8019e88:	187b      	adds	r3, r7, r1
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	881b      	ldrh	r3, [r3, #0]
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	23dc      	movs	r3, #220	@ 0xdc
 8019e92:	18fb      	adds	r3, r7, r3
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	b29b      	uxth	r3, r3
 8019e98:	029b      	lsls	r3, r3, #10
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	4313      	orrs	r3, r2
 8019e9e:	b29b      	uxth	r3, r3
 8019ea0:	4a79      	ldr	r2, [pc, #484]	@ (801a088 <USB_EPStartXfer+0x11c0>)
 8019ea2:	4313      	orrs	r3, r2
 8019ea4:	b29a      	uxth	r2, r3
 8019ea6:	187b      	adds	r3, r7, r1
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	801a      	strh	r2, [r3, #0]
 8019eac:	e058      	b.n	8019f60 <USB_EPStartXfer+0x1098>
 8019eae:	1d7b      	adds	r3, r7, #5
 8019eb0:	33ff      	adds	r3, #255	@ 0xff
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d10b      	bne.n	8019ed0 <USB_EPStartXfer+0x1008>
 8019eb8:	21c8      	movs	r1, #200	@ 0xc8
 8019eba:	187b      	adds	r3, r7, r1
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	881b      	ldrh	r3, [r3, #0]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	4a71      	ldr	r2, [pc, #452]	@ (801a088 <USB_EPStartXfer+0x11c0>)
 8019ec4:	4313      	orrs	r3, r2
 8019ec6:	b29a      	uxth	r2, r3
 8019ec8:	187b      	adds	r3, r7, r1
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	801a      	strh	r2, [r3, #0]
 8019ece:	e047      	b.n	8019f60 <USB_EPStartXfer+0x1098>
 8019ed0:	1d7b      	adds	r3, r7, #5
 8019ed2:	33ff      	adds	r3, #255	@ 0xff
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	085b      	lsrs	r3, r3, #1
 8019ed8:	21dc      	movs	r1, #220	@ 0xdc
 8019eda:	187a      	adds	r2, r7, r1
 8019edc:	6013      	str	r3, [r2, #0]
 8019ede:	1d7b      	adds	r3, r7, #5
 8019ee0:	33ff      	adds	r3, #255	@ 0xff
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	2201      	movs	r2, #1
 8019ee6:	4013      	ands	r3, r2
 8019ee8:	d004      	beq.n	8019ef4 <USB_EPStartXfer+0x102c>
 8019eea:	187b      	adds	r3, r7, r1
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	3301      	adds	r3, #1
 8019ef0:	187a      	adds	r2, r7, r1
 8019ef2:	6013      	str	r3, [r2, #0]
 8019ef4:	21c8      	movs	r1, #200	@ 0xc8
 8019ef6:	187b      	adds	r3, r7, r1
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	881b      	ldrh	r3, [r3, #0]
 8019efc:	b29a      	uxth	r2, r3
 8019efe:	23dc      	movs	r3, #220	@ 0xdc
 8019f00:	18fb      	adds	r3, r7, r3
 8019f02:	681b      	ldr	r3, [r3, #0]
 8019f04:	b29b      	uxth	r3, r3
 8019f06:	029b      	lsls	r3, r3, #10
 8019f08:	b29b      	uxth	r3, r3
 8019f0a:	4313      	orrs	r3, r2
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	187b      	adds	r3, r7, r1
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	801a      	strh	r2, [r3, #0]
 8019f14:	e024      	b.n	8019f60 <USB_EPStartXfer+0x1098>
 8019f16:	683b      	ldr	r3, [r7, #0]
 8019f18:	785b      	ldrb	r3, [r3, #1]
 8019f1a:	2b01      	cmp	r3, #1
 8019f1c:	d120      	bne.n	8019f60 <USB_EPStartXfer+0x1098>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	21d4      	movs	r1, #212	@ 0xd4
 8019f22:	187a      	adds	r2, r7, r1
 8019f24:	6013      	str	r3, [r2, #0]
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	2250      	movs	r2, #80	@ 0x50
 8019f2a:	5a9b      	ldrh	r3, [r3, r2]
 8019f2c:	b29b      	uxth	r3, r3
 8019f2e:	001a      	movs	r2, r3
 8019f30:	187b      	adds	r3, r7, r1
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	189b      	adds	r3, r3, r2
 8019f36:	187a      	adds	r2, r7, r1
 8019f38:	6013      	str	r3, [r2, #0]
 8019f3a:	683b      	ldr	r3, [r7, #0]
 8019f3c:	781b      	ldrb	r3, [r3, #0]
 8019f3e:	00da      	lsls	r2, r3, #3
 8019f40:	187b      	adds	r3, r7, r1
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	18d3      	adds	r3, r2, r3
 8019f46:	4a4f      	ldr	r2, [pc, #316]	@ (801a084 <USB_EPStartXfer+0x11bc>)
 8019f48:	4694      	mov	ip, r2
 8019f4a:	4463      	add	r3, ip
 8019f4c:	21d0      	movs	r1, #208	@ 0xd0
 8019f4e:	187a      	adds	r2, r7, r1
 8019f50:	6013      	str	r3, [r2, #0]
 8019f52:	1d7b      	adds	r3, r7, #5
 8019f54:	33ff      	adds	r3, #255	@ 0xff
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	187b      	adds	r3, r7, r1
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	801a      	strh	r2, [r3, #0]
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	22c4      	movs	r2, #196	@ 0xc4
 8019f64:	18ba      	adds	r2, r7, r2
 8019f66:	6013      	str	r3, [r2, #0]
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	785b      	ldrb	r3, [r3, #1]
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d000      	beq.n	8019f72 <USB_EPStartXfer+0x10aa>
 8019f70:	e08c      	b.n	801a08c <USB_EPStartXfer+0x11c4>
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	21bc      	movs	r1, #188	@ 0xbc
 8019f76:	187a      	adds	r2, r7, r1
 8019f78:	6013      	str	r3, [r2, #0]
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2250      	movs	r2, #80	@ 0x50
 8019f7e:	5a9b      	ldrh	r3, [r3, r2]
 8019f80:	b29b      	uxth	r3, r3
 8019f82:	001a      	movs	r2, r3
 8019f84:	187b      	adds	r3, r7, r1
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	189b      	adds	r3, r3, r2
 8019f8a:	187a      	adds	r2, r7, r1
 8019f8c:	6013      	str	r3, [r2, #0]
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	00da      	lsls	r2, r3, #3
 8019f94:	187b      	adds	r3, r7, r1
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	18d3      	adds	r3, r2, r3
 8019f9a:	4a37      	ldr	r2, [pc, #220]	@ (801a078 <USB_EPStartXfer+0x11b0>)
 8019f9c:	4694      	mov	ip, r2
 8019f9e:	4463      	add	r3, ip
 8019fa0:	21b8      	movs	r1, #184	@ 0xb8
 8019fa2:	187a      	adds	r2, r7, r1
 8019fa4:	6013      	str	r3, [r2, #0]
 8019fa6:	187b      	adds	r3, r7, r1
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	881b      	ldrh	r3, [r3, #0]
 8019fac:	b29b      	uxth	r3, r3
 8019fae:	059b      	lsls	r3, r3, #22
 8019fb0:	0d9b      	lsrs	r3, r3, #22
 8019fb2:	b29a      	uxth	r2, r3
 8019fb4:	187b      	adds	r3, r7, r1
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	801a      	strh	r2, [r3, #0]
 8019fba:	1d7b      	adds	r3, r7, #5
 8019fbc:	33ff      	adds	r3, #255	@ 0xff
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8019fc2:	d925      	bls.n	801a010 <USB_EPStartXfer+0x1148>
 8019fc4:	1d7b      	adds	r3, r7, #5
 8019fc6:	33ff      	adds	r3, #255	@ 0xff
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	095b      	lsrs	r3, r3, #5
 8019fcc:	21d8      	movs	r1, #216	@ 0xd8
 8019fce:	187a      	adds	r2, r7, r1
 8019fd0:	6013      	str	r3, [r2, #0]
 8019fd2:	1d7b      	adds	r3, r7, #5
 8019fd4:	33ff      	adds	r3, #255	@ 0xff
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	221f      	movs	r2, #31
 8019fda:	4013      	ands	r3, r2
 8019fdc:	d104      	bne.n	8019fe8 <USB_EPStartXfer+0x1120>
 8019fde:	187b      	adds	r3, r7, r1
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	3b01      	subs	r3, #1
 8019fe4:	187a      	adds	r2, r7, r1
 8019fe6:	6013      	str	r3, [r2, #0]
 8019fe8:	21b8      	movs	r1, #184	@ 0xb8
 8019fea:	187b      	adds	r3, r7, r1
 8019fec:	681b      	ldr	r3, [r3, #0]
 8019fee:	881b      	ldrh	r3, [r3, #0]
 8019ff0:	b29a      	uxth	r2, r3
 8019ff2:	23d8      	movs	r3, #216	@ 0xd8
 8019ff4:	18fb      	adds	r3, r7, r3
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	b29b      	uxth	r3, r3
 8019ffa:	029b      	lsls	r3, r3, #10
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	4313      	orrs	r3, r2
 801a000:	b29b      	uxth	r3, r3
 801a002:	4a21      	ldr	r2, [pc, #132]	@ (801a088 <USB_EPStartXfer+0x11c0>)
 801a004:	4313      	orrs	r3, r2
 801a006:	b29a      	uxth	r2, r3
 801a008:	187b      	adds	r3, r7, r1
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	801a      	strh	r2, [r3, #0]
 801a00e:	e062      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
 801a010:	1d7b      	adds	r3, r7, #5
 801a012:	33ff      	adds	r3, #255	@ 0xff
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d10b      	bne.n	801a032 <USB_EPStartXfer+0x116a>
 801a01a:	21b8      	movs	r1, #184	@ 0xb8
 801a01c:	187b      	adds	r3, r7, r1
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	881b      	ldrh	r3, [r3, #0]
 801a022:	b29b      	uxth	r3, r3
 801a024:	4a18      	ldr	r2, [pc, #96]	@ (801a088 <USB_EPStartXfer+0x11c0>)
 801a026:	4313      	orrs	r3, r2
 801a028:	b29a      	uxth	r2, r3
 801a02a:	187b      	adds	r3, r7, r1
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	801a      	strh	r2, [r3, #0]
 801a030:	e051      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
 801a032:	1d7b      	adds	r3, r7, #5
 801a034:	33ff      	adds	r3, #255	@ 0xff
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	085b      	lsrs	r3, r3, #1
 801a03a:	21d8      	movs	r1, #216	@ 0xd8
 801a03c:	187a      	adds	r2, r7, r1
 801a03e:	6013      	str	r3, [r2, #0]
 801a040:	1d7b      	adds	r3, r7, #5
 801a042:	33ff      	adds	r3, #255	@ 0xff
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2201      	movs	r2, #1
 801a048:	4013      	ands	r3, r2
 801a04a:	d004      	beq.n	801a056 <USB_EPStartXfer+0x118e>
 801a04c:	187b      	adds	r3, r7, r1
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	3301      	adds	r3, #1
 801a052:	187a      	adds	r2, r7, r1
 801a054:	6013      	str	r3, [r2, #0]
 801a056:	21b8      	movs	r1, #184	@ 0xb8
 801a058:	187b      	adds	r3, r7, r1
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	881b      	ldrh	r3, [r3, #0]
 801a05e:	b29a      	uxth	r2, r3
 801a060:	23d8      	movs	r3, #216	@ 0xd8
 801a062:	18fb      	adds	r3, r7, r3
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	b29b      	uxth	r3, r3
 801a068:	029b      	lsls	r3, r3, #10
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	4313      	orrs	r3, r2
 801a06e:	b29a      	uxth	r2, r3
 801a070:	187b      	adds	r3, r7, r1
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	801a      	strh	r2, [r3, #0]
 801a076:	e02e      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
 801a078:	00000406 	.word	0x00000406
 801a07c:	ffff8f8f 	.word	0xffff8f8f
 801a080:	ffff80c0 	.word	0xffff80c0
 801a084:	00000402 	.word	0x00000402
 801a088:	ffff8000 	.word	0xffff8000
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	785b      	ldrb	r3, [r3, #1]
 801a090:	2b01      	cmp	r3, #1
 801a092:	d120      	bne.n	801a0d6 <USB_EPStartXfer+0x120e>
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2250      	movs	r2, #80	@ 0x50
 801a098:	5a9b      	ldrh	r3, [r3, r2]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	001a      	movs	r2, r3
 801a09e:	21c4      	movs	r1, #196	@ 0xc4
 801a0a0:	187b      	adds	r3, r7, r1
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	189b      	adds	r3, r3, r2
 801a0a6:	187a      	adds	r2, r7, r1
 801a0a8:	6013      	str	r3, [r2, #0]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	781b      	ldrb	r3, [r3, #0]
 801a0ae:	00da      	lsls	r2, r3, #3
 801a0b0:	187b      	adds	r3, r7, r1
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	18d3      	adds	r3, r2, r3
 801a0b6:	4a1d      	ldr	r2, [pc, #116]	@ (801a12c <USB_EPStartXfer+0x1264>)
 801a0b8:	4694      	mov	ip, r2
 801a0ba:	4463      	add	r3, ip
 801a0bc:	21c0      	movs	r1, #192	@ 0xc0
 801a0be:	187a      	adds	r2, r7, r1
 801a0c0:	6013      	str	r3, [r2, #0]
 801a0c2:	1d7b      	adds	r3, r7, #5
 801a0c4:	33ff      	adds	r3, #255	@ 0xff
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	b29a      	uxth	r2, r3
 801a0ca:	187b      	adds	r3, r7, r1
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	801a      	strh	r2, [r3, #0]
 801a0d0:	e001      	b.n	801a0d6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a0d2:	2301      	movs	r3, #1
 801a0d4:	e025      	b.n	801a122 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a0d6:	687a      	ldr	r2, [r7, #4]
 801a0d8:	683b      	ldr	r3, [r7, #0]
 801a0da:	781b      	ldrb	r3, [r3, #0]
 801a0dc:	009b      	lsls	r3, r3, #2
 801a0de:	18d3      	adds	r3, r2, r3
 801a0e0:	881b      	ldrh	r3, [r3, #0]
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	208a      	movs	r0, #138	@ 0x8a
 801a0e6:	183b      	adds	r3, r7, r0
 801a0e8:	4911      	ldr	r1, [pc, #68]	@ (801a130 <USB_EPStartXfer+0x1268>)
 801a0ea:	400a      	ands	r2, r1
 801a0ec:	801a      	strh	r2, [r3, #0]
 801a0ee:	183b      	adds	r3, r7, r0
 801a0f0:	183a      	adds	r2, r7, r0
 801a0f2:	8812      	ldrh	r2, [r2, #0]
 801a0f4:	2180      	movs	r1, #128	@ 0x80
 801a0f6:	0149      	lsls	r1, r1, #5
 801a0f8:	404a      	eors	r2, r1
 801a0fa:	801a      	strh	r2, [r3, #0]
 801a0fc:	183b      	adds	r3, r7, r0
 801a0fe:	183a      	adds	r2, r7, r0
 801a100:	8812      	ldrh	r2, [r2, #0]
 801a102:	2180      	movs	r1, #128	@ 0x80
 801a104:	0189      	lsls	r1, r1, #6
 801a106:	404a      	eors	r2, r1
 801a108:	801a      	strh	r2, [r3, #0]
 801a10a:	687a      	ldr	r2, [r7, #4]
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	781b      	ldrb	r3, [r3, #0]
 801a110:	009b      	lsls	r3, r3, #2
 801a112:	18d3      	adds	r3, r2, r3
 801a114:	183a      	adds	r2, r7, r0
 801a116:	8812      	ldrh	r2, [r2, #0]
 801a118:	4906      	ldr	r1, [pc, #24]	@ (801a134 <USB_EPStartXfer+0x126c>)
 801a11a:	430a      	orrs	r2, r1
 801a11c:	b292      	uxth	r2, r2
 801a11e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a120:	2300      	movs	r3, #0
}
 801a122:	0018      	movs	r0, r3
 801a124:	46bd      	mov	sp, r7
 801a126:	b043      	add	sp, #268	@ 0x10c
 801a128:	bd90      	pop	{r4, r7, pc}
 801a12a:	46c0      	nop			@ (mov r8, r8)
 801a12c:	00000406 	.word	0x00000406
 801a130:	ffffbf8f 	.word	0xffffbf8f
 801a134:	ffff8080 	.word	0xffff8080

0801a138 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b084      	sub	sp, #16
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
 801a140:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	785b      	ldrb	r3, [r3, #1]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d01d      	beq.n	801a186 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a14a:	687a      	ldr	r2, [r7, #4]
 801a14c:	683b      	ldr	r3, [r7, #0]
 801a14e:	781b      	ldrb	r3, [r3, #0]
 801a150:	009b      	lsls	r3, r3, #2
 801a152:	18d3      	adds	r3, r2, r3
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	b29a      	uxth	r2, r3
 801a158:	200c      	movs	r0, #12
 801a15a:	183b      	adds	r3, r7, r0
 801a15c:	491b      	ldr	r1, [pc, #108]	@ (801a1cc <USB_EPSetStall+0x94>)
 801a15e:	400a      	ands	r2, r1
 801a160:	801a      	strh	r2, [r3, #0]
 801a162:	183b      	adds	r3, r7, r0
 801a164:	183a      	adds	r2, r7, r0
 801a166:	8812      	ldrh	r2, [r2, #0]
 801a168:	2110      	movs	r1, #16
 801a16a:	404a      	eors	r2, r1
 801a16c:	801a      	strh	r2, [r3, #0]
 801a16e:	687a      	ldr	r2, [r7, #4]
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	781b      	ldrb	r3, [r3, #0]
 801a174:	009b      	lsls	r3, r3, #2
 801a176:	18d3      	adds	r3, r2, r3
 801a178:	183a      	adds	r2, r7, r0
 801a17a:	8812      	ldrh	r2, [r2, #0]
 801a17c:	4914      	ldr	r1, [pc, #80]	@ (801a1d0 <USB_EPSetStall+0x98>)
 801a17e:	430a      	orrs	r2, r1
 801a180:	b292      	uxth	r2, r2
 801a182:	801a      	strh	r2, [r3, #0]
 801a184:	e01d      	b.n	801a1c2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	781b      	ldrb	r3, [r3, #0]
 801a18c:	009b      	lsls	r3, r3, #2
 801a18e:	18d3      	adds	r3, r2, r3
 801a190:	881b      	ldrh	r3, [r3, #0]
 801a192:	b29a      	uxth	r2, r3
 801a194:	200e      	movs	r0, #14
 801a196:	183b      	adds	r3, r7, r0
 801a198:	490e      	ldr	r1, [pc, #56]	@ (801a1d4 <USB_EPSetStall+0x9c>)
 801a19a:	400a      	ands	r2, r1
 801a19c:	801a      	strh	r2, [r3, #0]
 801a19e:	183b      	adds	r3, r7, r0
 801a1a0:	183a      	adds	r2, r7, r0
 801a1a2:	8812      	ldrh	r2, [r2, #0]
 801a1a4:	2180      	movs	r1, #128	@ 0x80
 801a1a6:	0149      	lsls	r1, r1, #5
 801a1a8:	404a      	eors	r2, r1
 801a1aa:	801a      	strh	r2, [r3, #0]
 801a1ac:	687a      	ldr	r2, [r7, #4]
 801a1ae:	683b      	ldr	r3, [r7, #0]
 801a1b0:	781b      	ldrb	r3, [r3, #0]
 801a1b2:	009b      	lsls	r3, r3, #2
 801a1b4:	18d3      	adds	r3, r2, r3
 801a1b6:	183a      	adds	r2, r7, r0
 801a1b8:	8812      	ldrh	r2, [r2, #0]
 801a1ba:	4905      	ldr	r1, [pc, #20]	@ (801a1d0 <USB_EPSetStall+0x98>)
 801a1bc:	430a      	orrs	r2, r1
 801a1be:	b292      	uxth	r2, r2
 801a1c0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a1c2:	2300      	movs	r3, #0
}
 801a1c4:	0018      	movs	r0, r3
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	b004      	add	sp, #16
 801a1ca:	bd80      	pop	{r7, pc}
 801a1cc:	ffff8fbf 	.word	0xffff8fbf
 801a1d0:	ffff8080 	.word	0xffff8080
 801a1d4:	ffffbf8f 	.word	0xffffbf8f

0801a1d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a1d8:	b580      	push	{r7, lr}
 801a1da:	b086      	sub	sp, #24
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
 801a1e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	7b1b      	ldrb	r3, [r3, #12]
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d000      	beq.n	801a1ec <USB_EPClearStall+0x14>
 801a1ea:	e095      	b.n	801a318 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	785b      	ldrb	r3, [r3, #1]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d046      	beq.n	801a282 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a1f4:	687a      	ldr	r2, [r7, #4]
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	781b      	ldrb	r3, [r3, #0]
 801a1fa:	009b      	lsls	r3, r3, #2
 801a1fc:	18d2      	adds	r2, r2, r3
 801a1fe:	2110      	movs	r1, #16
 801a200:	187b      	adds	r3, r7, r1
 801a202:	8812      	ldrh	r2, [r2, #0]
 801a204:	801a      	strh	r2, [r3, #0]
 801a206:	187b      	adds	r3, r7, r1
 801a208:	881b      	ldrh	r3, [r3, #0]
 801a20a:	2240      	movs	r2, #64	@ 0x40
 801a20c:	4013      	ands	r3, r2
 801a20e:	d016      	beq.n	801a23e <USB_EPClearStall+0x66>
 801a210:	687a      	ldr	r2, [r7, #4]
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	781b      	ldrb	r3, [r3, #0]
 801a216:	009b      	lsls	r3, r3, #2
 801a218:	18d3      	adds	r3, r2, r3
 801a21a:	881b      	ldrh	r3, [r3, #0]
 801a21c:	b29a      	uxth	r2, r3
 801a21e:	200e      	movs	r0, #14
 801a220:	183b      	adds	r3, r7, r0
 801a222:	4940      	ldr	r1, [pc, #256]	@ (801a324 <USB_EPClearStall+0x14c>)
 801a224:	400a      	ands	r2, r1
 801a226:	801a      	strh	r2, [r3, #0]
 801a228:	687a      	ldr	r2, [r7, #4]
 801a22a:	683b      	ldr	r3, [r7, #0]
 801a22c:	781b      	ldrb	r3, [r3, #0]
 801a22e:	009b      	lsls	r3, r3, #2
 801a230:	18d3      	adds	r3, r2, r3
 801a232:	183a      	adds	r2, r7, r0
 801a234:	8812      	ldrh	r2, [r2, #0]
 801a236:	493c      	ldr	r1, [pc, #240]	@ (801a328 <USB_EPClearStall+0x150>)
 801a238:	430a      	orrs	r2, r1
 801a23a:	b292      	uxth	r2, r2
 801a23c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a23e:	683b      	ldr	r3, [r7, #0]
 801a240:	78db      	ldrb	r3, [r3, #3]
 801a242:	2b01      	cmp	r3, #1
 801a244:	d068      	beq.n	801a318 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	009b      	lsls	r3, r3, #2
 801a24e:	18d3      	adds	r3, r2, r3
 801a250:	881b      	ldrh	r3, [r3, #0]
 801a252:	b29a      	uxth	r2, r3
 801a254:	200c      	movs	r0, #12
 801a256:	183b      	adds	r3, r7, r0
 801a258:	4934      	ldr	r1, [pc, #208]	@ (801a32c <USB_EPClearStall+0x154>)
 801a25a:	400a      	ands	r2, r1
 801a25c:	801a      	strh	r2, [r3, #0]
 801a25e:	183b      	adds	r3, r7, r0
 801a260:	183a      	adds	r2, r7, r0
 801a262:	8812      	ldrh	r2, [r2, #0]
 801a264:	2120      	movs	r1, #32
 801a266:	404a      	eors	r2, r1
 801a268:	801a      	strh	r2, [r3, #0]
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	683b      	ldr	r3, [r7, #0]
 801a26e:	781b      	ldrb	r3, [r3, #0]
 801a270:	009b      	lsls	r3, r3, #2
 801a272:	18d3      	adds	r3, r2, r3
 801a274:	183a      	adds	r2, r7, r0
 801a276:	8812      	ldrh	r2, [r2, #0]
 801a278:	492d      	ldr	r1, [pc, #180]	@ (801a330 <USB_EPClearStall+0x158>)
 801a27a:	430a      	orrs	r2, r1
 801a27c:	b292      	uxth	r2, r2
 801a27e:	801a      	strh	r2, [r3, #0]
 801a280:	e04a      	b.n	801a318 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a282:	687a      	ldr	r2, [r7, #4]
 801a284:	683b      	ldr	r3, [r7, #0]
 801a286:	781b      	ldrb	r3, [r3, #0]
 801a288:	009b      	lsls	r3, r3, #2
 801a28a:	18d2      	adds	r2, r2, r3
 801a28c:	2116      	movs	r1, #22
 801a28e:	187b      	adds	r3, r7, r1
 801a290:	8812      	ldrh	r2, [r2, #0]
 801a292:	801a      	strh	r2, [r3, #0]
 801a294:	187b      	adds	r3, r7, r1
 801a296:	881a      	ldrh	r2, [r3, #0]
 801a298:	2380      	movs	r3, #128	@ 0x80
 801a29a:	01db      	lsls	r3, r3, #7
 801a29c:	4013      	ands	r3, r2
 801a29e:	d016      	beq.n	801a2ce <USB_EPClearStall+0xf6>
 801a2a0:	687a      	ldr	r2, [r7, #4]
 801a2a2:	683b      	ldr	r3, [r7, #0]
 801a2a4:	781b      	ldrb	r3, [r3, #0]
 801a2a6:	009b      	lsls	r3, r3, #2
 801a2a8:	18d3      	adds	r3, r2, r3
 801a2aa:	881b      	ldrh	r3, [r3, #0]
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	2014      	movs	r0, #20
 801a2b0:	183b      	adds	r3, r7, r0
 801a2b2:	491c      	ldr	r1, [pc, #112]	@ (801a324 <USB_EPClearStall+0x14c>)
 801a2b4:	400a      	ands	r2, r1
 801a2b6:	801a      	strh	r2, [r3, #0]
 801a2b8:	687a      	ldr	r2, [r7, #4]
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	009b      	lsls	r3, r3, #2
 801a2c0:	18d3      	adds	r3, r2, r3
 801a2c2:	183a      	adds	r2, r7, r0
 801a2c4:	8812      	ldrh	r2, [r2, #0]
 801a2c6:	491b      	ldr	r1, [pc, #108]	@ (801a334 <USB_EPClearStall+0x15c>)
 801a2c8:	430a      	orrs	r2, r1
 801a2ca:	b292      	uxth	r2, r2
 801a2cc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a2ce:	687a      	ldr	r2, [r7, #4]
 801a2d0:	683b      	ldr	r3, [r7, #0]
 801a2d2:	781b      	ldrb	r3, [r3, #0]
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	18d3      	adds	r3, r2, r3
 801a2d8:	881b      	ldrh	r3, [r3, #0]
 801a2da:	b29a      	uxth	r2, r3
 801a2dc:	2012      	movs	r0, #18
 801a2de:	183b      	adds	r3, r7, r0
 801a2e0:	4915      	ldr	r1, [pc, #84]	@ (801a338 <USB_EPClearStall+0x160>)
 801a2e2:	400a      	ands	r2, r1
 801a2e4:	801a      	strh	r2, [r3, #0]
 801a2e6:	183b      	adds	r3, r7, r0
 801a2e8:	183a      	adds	r2, r7, r0
 801a2ea:	8812      	ldrh	r2, [r2, #0]
 801a2ec:	2180      	movs	r1, #128	@ 0x80
 801a2ee:	0149      	lsls	r1, r1, #5
 801a2f0:	404a      	eors	r2, r1
 801a2f2:	801a      	strh	r2, [r3, #0]
 801a2f4:	183b      	adds	r3, r7, r0
 801a2f6:	183a      	adds	r2, r7, r0
 801a2f8:	8812      	ldrh	r2, [r2, #0]
 801a2fa:	2180      	movs	r1, #128	@ 0x80
 801a2fc:	0189      	lsls	r1, r1, #6
 801a2fe:	404a      	eors	r2, r1
 801a300:	801a      	strh	r2, [r3, #0]
 801a302:	687a      	ldr	r2, [r7, #4]
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	781b      	ldrb	r3, [r3, #0]
 801a308:	009b      	lsls	r3, r3, #2
 801a30a:	18d3      	adds	r3, r2, r3
 801a30c:	183a      	adds	r2, r7, r0
 801a30e:	8812      	ldrh	r2, [r2, #0]
 801a310:	4907      	ldr	r1, [pc, #28]	@ (801a330 <USB_EPClearStall+0x158>)
 801a312:	430a      	orrs	r2, r1
 801a314:	b292      	uxth	r2, r2
 801a316:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a318:	2300      	movs	r3, #0
}
 801a31a:	0018      	movs	r0, r3
 801a31c:	46bd      	mov	sp, r7
 801a31e:	b006      	add	sp, #24
 801a320:	bd80      	pop	{r7, pc}
 801a322:	46c0      	nop			@ (mov r8, r8)
 801a324:	ffff8f8f 	.word	0xffff8f8f
 801a328:	ffff80c0 	.word	0xffff80c0
 801a32c:	ffff8fbf 	.word	0xffff8fbf
 801a330:	ffff8080 	.word	0xffff8080
 801a334:	ffffc080 	.word	0xffffc080
 801a338:	ffffbf8f 	.word	0xffffbf8f

0801a33c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
 801a344:	000a      	movs	r2, r1
 801a346:	1cfb      	adds	r3, r7, #3
 801a348:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a34a:	1cfb      	adds	r3, r7, #3
 801a34c:	781b      	ldrb	r3, [r3, #0]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d103      	bne.n	801a35a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	224c      	movs	r2, #76	@ 0x4c
 801a356:	2180      	movs	r1, #128	@ 0x80
 801a358:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a35a:	2300      	movs	r3, #0
}
 801a35c:	0018      	movs	r0, r3
 801a35e:	46bd      	mov	sp, r7
 801a360:	b002      	add	sp, #8
 801a362:	bd80      	pop	{r7, pc}

0801a364 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a364:	b580      	push	{r7, lr}
 801a366:	b082      	sub	sp, #8
 801a368:	af00      	add	r7, sp, #0
 801a36a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	2258      	movs	r2, #88	@ 0x58
 801a370:	5a9b      	ldrh	r3, [r3, r2]
 801a372:	b29b      	uxth	r3, r3
 801a374:	4a05      	ldr	r2, [pc, #20]	@ (801a38c <USB_DevConnect+0x28>)
 801a376:	4313      	orrs	r3, r2
 801a378:	b299      	uxth	r1, r3
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	2258      	movs	r2, #88	@ 0x58
 801a37e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a380:	2300      	movs	r3, #0
}
 801a382:	0018      	movs	r0, r3
 801a384:	46bd      	mov	sp, r7
 801a386:	b002      	add	sp, #8
 801a388:	bd80      	pop	{r7, pc}
 801a38a:	46c0      	nop			@ (mov r8, r8)
 801a38c:	ffff8000 	.word	0xffff8000

0801a390 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b084      	sub	sp, #16
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2244      	movs	r2, #68	@ 0x44
 801a39c:	5a9b      	ldrh	r3, [r3, r2]
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a3a2:	68fb      	ldr	r3, [r7, #12]
}
 801a3a4:	0018      	movs	r0, r3
 801a3a6:	46bd      	mov	sp, r7
 801a3a8:	b004      	add	sp, #16
 801a3aa:	bd80      	pop	{r7, pc}

0801a3ac <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b08a      	sub	sp, #40	@ 0x28
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	60f8      	str	r0, [r7, #12]
 801a3b4:	60b9      	str	r1, [r7, #8]
 801a3b6:	0019      	movs	r1, r3
 801a3b8:	1dbb      	adds	r3, r7, #6
 801a3ba:	801a      	strh	r2, [r3, #0]
 801a3bc:	1d3b      	adds	r3, r7, #4
 801a3be:	1c0a      	adds	r2, r1, #0
 801a3c0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a3c2:	1d3b      	adds	r3, r7, #4
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	085b      	lsrs	r3, r3, #1
 801a3ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a3d4:	1dbb      	adds	r3, r7, #6
 801a3d6:	881a      	ldrh	r2, [r3, #0]
 801a3d8:	697b      	ldr	r3, [r7, #20]
 801a3da:	18d3      	adds	r3, r2, r3
 801a3dc:	2280      	movs	r2, #128	@ 0x80
 801a3de:	00d2      	lsls	r2, r2, #3
 801a3e0:	4694      	mov	ip, r2
 801a3e2:	4463      	add	r3, ip
 801a3e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a3e6:	69bb      	ldr	r3, [r7, #24]
 801a3e8:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3ea:	e020      	b.n	801a42e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	781a      	ldrb	r2, [r3, #0]
 801a3f0:	2112      	movs	r1, #18
 801a3f2:	187b      	adds	r3, r7, r1
 801a3f4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a3f6:	69fb      	ldr	r3, [r7, #28]
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	021b      	lsls	r3, r3, #8
 801a3fe:	b21a      	sxth	r2, r3
 801a400:	187b      	adds	r3, r7, r1
 801a402:	2000      	movs	r0, #0
 801a404:	5e1b      	ldrsh	r3, [r3, r0]
 801a406:	4313      	orrs	r3, r2
 801a408:	b21a      	sxth	r2, r3
 801a40a:	187b      	adds	r3, r7, r1
 801a40c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a40e:	6a3b      	ldr	r3, [r7, #32]
 801a410:	187a      	adds	r2, r7, r1
 801a412:	8812      	ldrh	r2, [r2, #0]
 801a414:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a416:	6a3b      	ldr	r3, [r7, #32]
 801a418:	3302      	adds	r3, #2
 801a41a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	3301      	adds	r3, #1
 801a420:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	3301      	adds	r3, #1
 801a426:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a42a:	3b01      	subs	r3, #1
 801a42c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a430:	2b00      	cmp	r3, #0
 801a432:	d1db      	bne.n	801a3ec <USB_WritePMA+0x40>
  }
}
 801a434:	46c0      	nop			@ (mov r8, r8)
 801a436:	46c0      	nop			@ (mov r8, r8)
 801a438:	46bd      	mov	sp, r7
 801a43a:	b00a      	add	sp, #40	@ 0x28
 801a43c:	bd80      	pop	{r7, pc}

0801a43e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a43e:	b580      	push	{r7, lr}
 801a440:	b08a      	sub	sp, #40	@ 0x28
 801a442:	af00      	add	r7, sp, #0
 801a444:	60f8      	str	r0, [r7, #12]
 801a446:	60b9      	str	r1, [r7, #8]
 801a448:	0019      	movs	r1, r3
 801a44a:	1dbb      	adds	r3, r7, #6
 801a44c:	801a      	strh	r2, [r3, #0]
 801a44e:	1d3b      	adds	r3, r7, #4
 801a450:	1c0a      	adds	r2, r1, #0
 801a452:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a454:	1d3b      	adds	r3, r7, #4
 801a456:	881b      	ldrh	r3, [r3, #0]
 801a458:	085b      	lsrs	r3, r3, #1
 801a45a:	b29b      	uxth	r3, r3
 801a45c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a466:	1dbb      	adds	r3, r7, #6
 801a468:	881a      	ldrh	r2, [r3, #0]
 801a46a:	697b      	ldr	r3, [r7, #20]
 801a46c:	18d3      	adds	r3, r2, r3
 801a46e:	2280      	movs	r2, #128	@ 0x80
 801a470:	00d2      	lsls	r2, r2, #3
 801a472:	4694      	mov	ip, r2
 801a474:	4463      	add	r3, ip
 801a476:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a478:	69bb      	ldr	r3, [r7, #24]
 801a47a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a47c:	e018      	b.n	801a4b0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a47e:	6a3b      	ldr	r3, [r7, #32]
 801a480:	881b      	ldrh	r3, [r3, #0]
 801a482:	b29b      	uxth	r3, r3
 801a484:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a486:	6a3b      	ldr	r3, [r7, #32]
 801a488:	3302      	adds	r3, #2
 801a48a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a48c:	693b      	ldr	r3, [r7, #16]
 801a48e:	b2da      	uxtb	r2, r3
 801a490:	69fb      	ldr	r3, [r7, #28]
 801a492:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a494:	69fb      	ldr	r3, [r7, #28]
 801a496:	3301      	adds	r3, #1
 801a498:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a49a:	693b      	ldr	r3, [r7, #16]
 801a49c:	0a1b      	lsrs	r3, r3, #8
 801a49e:	b2da      	uxtb	r2, r3
 801a4a0:	69fb      	ldr	r3, [r7, #28]
 801a4a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a4a4:	69fb      	ldr	r3, [r7, #28]
 801a4a6:	3301      	adds	r3, #1
 801a4a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4ac:	3b01      	subs	r3, #1
 801a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 801a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	d1e3      	bne.n	801a47e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a4b6:	1d3b      	adds	r3, r7, #4
 801a4b8:	881b      	ldrh	r3, [r3, #0]
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	4013      	ands	r3, r2
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d007      	beq.n	801a4d4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a4c4:	6a3b      	ldr	r3, [r7, #32]
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	b29b      	uxth	r3, r3
 801a4ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a4cc:	693b      	ldr	r3, [r7, #16]
 801a4ce:	b2da      	uxtb	r2, r3
 801a4d0:	69fb      	ldr	r3, [r7, #28]
 801a4d2:	701a      	strb	r2, [r3, #0]
  }
}
 801a4d4:	46c0      	nop			@ (mov r8, r8)
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	b00a      	add	sp, #40	@ 0x28
 801a4da:	bd80      	pop	{r7, pc}

0801a4dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a4dc:	b580      	push	{r7, lr}
 801a4de:	b084      	sub	sp, #16
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	6078      	str	r0, [r7, #4]
 801a4e4:	000a      	movs	r2, r1
 801a4e6:	1cfb      	adds	r3, r7, #3
 801a4e8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a4ea:	230f      	movs	r3, #15
 801a4ec:	18fb      	adds	r3, r7, r3
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	7c1b      	ldrb	r3, [r3, #16]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d116      	bne.n	801a528 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a4fa:	2380      	movs	r3, #128	@ 0x80
 801a4fc:	009b      	lsls	r3, r3, #2
 801a4fe:	6878      	ldr	r0, [r7, #4]
 801a500:	2202      	movs	r2, #2
 801a502:	2181      	movs	r1, #129	@ 0x81
 801a504:	f002 f8eb 	bl	801c6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	2201      	movs	r2, #1
 801a50c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a50e:	2380      	movs	r3, #128	@ 0x80
 801a510:	009b      	lsls	r3, r3, #2
 801a512:	6878      	ldr	r0, [r7, #4]
 801a514:	2202      	movs	r2, #2
 801a516:	2101      	movs	r1, #1
 801a518:	f002 f8e1 	bl	801c6de <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a51c:	687a      	ldr	r2, [r7, #4]
 801a51e:	23b6      	movs	r3, #182	@ 0xb6
 801a520:	005b      	lsls	r3, r3, #1
 801a522:	2101      	movs	r1, #1
 801a524:	50d1      	str	r1, [r2, r3]
 801a526:	e013      	b.n	801a550 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a528:	6878      	ldr	r0, [r7, #4]
 801a52a:	2340      	movs	r3, #64	@ 0x40
 801a52c:	2202      	movs	r2, #2
 801a52e:	2181      	movs	r1, #129	@ 0x81
 801a530:	f002 f8d5 	bl	801c6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2201      	movs	r2, #1
 801a538:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a53a:	6878      	ldr	r0, [r7, #4]
 801a53c:	2340      	movs	r3, #64	@ 0x40
 801a53e:	2202      	movs	r2, #2
 801a540:	2101      	movs	r1, #1
 801a542:	f002 f8cc 	bl	801c6de <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	23b6      	movs	r3, #182	@ 0xb6
 801a54a:	005b      	lsls	r3, r3, #1
 801a54c:	2101      	movs	r1, #1
 801a54e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a550:	6878      	ldr	r0, [r7, #4]
 801a552:	2308      	movs	r3, #8
 801a554:	2203      	movs	r2, #3
 801a556:	2182      	movs	r1, #130	@ 0x82
 801a558:	f002 f8c1 	bl	801c6de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	2201      	movs	r2, #1
 801a560:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a562:	2387      	movs	r3, #135	@ 0x87
 801a564:	009b      	lsls	r3, r3, #2
 801a566:	0018      	movs	r0, r3
 801a568:	f002 fa52 	bl	801ca10 <USBD_static_malloc>
 801a56c:	0001      	movs	r1, r0
 801a56e:	687a      	ldr	r2, [r7, #4]
 801a570:	23ae      	movs	r3, #174	@ 0xae
 801a572:	009b      	lsls	r3, r3, #2
 801a574:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a576:	687a      	ldr	r2, [r7, #4]
 801a578:	23ae      	movs	r3, #174	@ 0xae
 801a57a:	009b      	lsls	r3, r3, #2
 801a57c:	58d3      	ldr	r3, [r2, r3]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d104      	bne.n	801a58c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a582:	230f      	movs	r3, #15
 801a584:	18fb      	adds	r3, r7, r3
 801a586:	2201      	movs	r2, #1
 801a588:	701a      	strb	r2, [r3, #0]
 801a58a:	e02c      	b.n	801a5e6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a58c:	687a      	ldr	r2, [r7, #4]
 801a58e:	23ae      	movs	r3, #174	@ 0xae
 801a590:	009b      	lsls	r3, r3, #2
 801a592:	58d3      	ldr	r3, [r2, r3]
 801a594:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a596:	687a      	ldr	r2, [r7, #4]
 801a598:	23af      	movs	r3, #175	@ 0xaf
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	58d3      	ldr	r3, [r2, r3]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a5a2:	68ba      	ldr	r2, [r7, #8]
 801a5a4:	2385      	movs	r3, #133	@ 0x85
 801a5a6:	009b      	lsls	r3, r3, #2
 801a5a8:	2100      	movs	r1, #0
 801a5aa:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a5ac:	68ba      	ldr	r2, [r7, #8]
 801a5ae:	2386      	movs	r3, #134	@ 0x86
 801a5b0:	009b      	lsls	r3, r3, #2
 801a5b2:	2100      	movs	r1, #0
 801a5b4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	7c1b      	ldrb	r3, [r3, #16]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d10a      	bne.n	801a5d4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a5be:	68ba      	ldr	r2, [r7, #8]
 801a5c0:	2381      	movs	r3, #129	@ 0x81
 801a5c2:	009b      	lsls	r3, r3, #2
 801a5c4:	58d2      	ldr	r2, [r2, r3]
 801a5c6:	2380      	movs	r3, #128	@ 0x80
 801a5c8:	009b      	lsls	r3, r3, #2
 801a5ca:	6878      	ldr	r0, [r7, #4]
 801a5cc:	2101      	movs	r1, #1
 801a5ce:	f002 f9d1 	bl	801c974 <USBD_LL_PrepareReceive>
 801a5d2:	e008      	b.n	801a5e6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a5d4:	68ba      	ldr	r2, [r7, #8]
 801a5d6:	2381      	movs	r3, #129	@ 0x81
 801a5d8:	009b      	lsls	r3, r3, #2
 801a5da:	58d2      	ldr	r2, [r2, r3]
 801a5dc:	6878      	ldr	r0, [r7, #4]
 801a5de:	2340      	movs	r3, #64	@ 0x40
 801a5e0:	2101      	movs	r1, #1
 801a5e2:	f002 f9c7 	bl	801c974 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a5e6:	230f      	movs	r3, #15
 801a5e8:	18fb      	adds	r3, r7, r3
 801a5ea:	781b      	ldrb	r3, [r3, #0]
}
 801a5ec:	0018      	movs	r0, r3
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	b004      	add	sp, #16
 801a5f2:	bd80      	pop	{r7, pc}

0801a5f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b084      	sub	sp, #16
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	000a      	movs	r2, r1
 801a5fe:	1cfb      	adds	r3, r7, #3
 801a600:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a602:	230f      	movs	r3, #15
 801a604:	18fb      	adds	r3, r7, r3
 801a606:	2200      	movs	r2, #0
 801a608:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	2181      	movs	r1, #129	@ 0x81
 801a60e:	0018      	movs	r0, r3
 801a610:	f002 f89c 	bl	801c74c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	2200      	movs	r2, #0
 801a618:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	2101      	movs	r1, #1
 801a61e:	0018      	movs	r0, r3
 801a620:	f002 f894 	bl	801c74c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a624:	687a      	ldr	r2, [r7, #4]
 801a626:	23b6      	movs	r3, #182	@ 0xb6
 801a628:	005b      	lsls	r3, r3, #1
 801a62a:	2100      	movs	r1, #0
 801a62c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2182      	movs	r1, #130	@ 0x82
 801a632:	0018      	movs	r0, r3
 801a634:	f002 f88a 	bl	801c74c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2200      	movs	r2, #0
 801a63c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a63e:	687a      	ldr	r2, [r7, #4]
 801a640:	23ae      	movs	r3, #174	@ 0xae
 801a642:	009b      	lsls	r3, r3, #2
 801a644:	58d3      	ldr	r3, [r2, r3]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d011      	beq.n	801a66e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a64a:	687a      	ldr	r2, [r7, #4]
 801a64c:	23af      	movs	r3, #175	@ 0xaf
 801a64e:	009b      	lsls	r3, r3, #2
 801a650:	58d3      	ldr	r3, [r2, r3]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a656:	687a      	ldr	r2, [r7, #4]
 801a658:	23ae      	movs	r3, #174	@ 0xae
 801a65a:	009b      	lsls	r3, r3, #2
 801a65c:	58d3      	ldr	r3, [r2, r3]
 801a65e:	0018      	movs	r0, r3
 801a660:	f002 f9e2 	bl	801ca28 <USBD_static_free>
    pdev->pClassData = NULL;
 801a664:	687a      	ldr	r2, [r7, #4]
 801a666:	23ae      	movs	r3, #174	@ 0xae
 801a668:	009b      	lsls	r3, r3, #2
 801a66a:	2100      	movs	r1, #0
 801a66c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a66e:	230f      	movs	r3, #15
 801a670:	18fb      	adds	r3, r7, r3
 801a672:	781b      	ldrb	r3, [r3, #0]
}
 801a674:	0018      	movs	r0, r3
 801a676:	46bd      	mov	sp, r7
 801a678:	b004      	add	sp, #16
 801a67a:	bd80      	pop	{r7, pc}

0801a67c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a67c:	b580      	push	{r7, lr}
 801a67e:	b086      	sub	sp, #24
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
 801a684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a686:	687a      	ldr	r2, [r7, #4]
 801a688:	23ae      	movs	r3, #174	@ 0xae
 801a68a:	009b      	lsls	r3, r3, #2
 801a68c:	58d3      	ldr	r3, [r2, r3]
 801a68e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a690:	230f      	movs	r3, #15
 801a692:	18fb      	adds	r3, r7, r3
 801a694:	2200      	movs	r2, #0
 801a696:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a698:	230c      	movs	r3, #12
 801a69a:	18fb      	adds	r3, r7, r3
 801a69c:	2200      	movs	r2, #0
 801a69e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a6a0:	2317      	movs	r3, #23
 801a6a2:	18fb      	adds	r3, r7, r3
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a6a8:	683b      	ldr	r3, [r7, #0]
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	001a      	movs	r2, r3
 801a6ae:	2360      	movs	r3, #96	@ 0x60
 801a6b0:	4013      	ands	r3, r2
 801a6b2:	d03d      	beq.n	801a730 <USBD_CDC_Setup+0xb4>
 801a6b4:	2b20      	cmp	r3, #32
 801a6b6:	d000      	beq.n	801a6ba <USBD_CDC_Setup+0x3e>
 801a6b8:	e094      	b.n	801a7e4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	88db      	ldrh	r3, [r3, #6]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d02b      	beq.n	801a71a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	b25b      	sxtb	r3, r3
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	da12      	bge.n	801a6f2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a6cc:	687a      	ldr	r2, [r7, #4]
 801a6ce:	23af      	movs	r3, #175	@ 0xaf
 801a6d0:	009b      	lsls	r3, r3, #2
 801a6d2:	58d3      	ldr	r3, [r2, r3]
 801a6d4:	689b      	ldr	r3, [r3, #8]
 801a6d6:	683a      	ldr	r2, [r7, #0]
 801a6d8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a6da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a6dc:	683a      	ldr	r2, [r7, #0]
 801a6de:	88d2      	ldrh	r2, [r2, #6]
 801a6e0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a6e2:	6939      	ldr	r1, [r7, #16]
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	88da      	ldrh	r2, [r3, #6]
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	0018      	movs	r0, r3
 801a6ec:	f001 fbaf 	bl	801be4e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a6f0:	e083      	b.n	801a7fa <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a6f2:	683b      	ldr	r3, [r7, #0]
 801a6f4:	7859      	ldrb	r1, [r3, #1]
 801a6f6:	693a      	ldr	r2, [r7, #16]
 801a6f8:	2380      	movs	r3, #128	@ 0x80
 801a6fa:	009b      	lsls	r3, r3, #2
 801a6fc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a6fe:	683b      	ldr	r3, [r7, #0]
 801a700:	88db      	ldrh	r3, [r3, #6]
 801a702:	b2d9      	uxtb	r1, r3
 801a704:	693b      	ldr	r3, [r7, #16]
 801a706:	4a40      	ldr	r2, [pc, #256]	@ (801a808 <USBD_CDC_Setup+0x18c>)
 801a708:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a70a:	6939      	ldr	r1, [r7, #16]
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	88da      	ldrh	r2, [r3, #6]
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	0018      	movs	r0, r3
 801a714:	f001 fbce 	bl	801beb4 <USBD_CtlPrepareRx>
      break;
 801a718:	e06f      	b.n	801a7fa <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a71a:	687a      	ldr	r2, [r7, #4]
 801a71c:	23af      	movs	r3, #175	@ 0xaf
 801a71e:	009b      	lsls	r3, r3, #2
 801a720:	58d3      	ldr	r3, [r2, r3]
 801a722:	689b      	ldr	r3, [r3, #8]
 801a724:	683a      	ldr	r2, [r7, #0]
 801a726:	7850      	ldrb	r0, [r2, #1]
 801a728:	6839      	ldr	r1, [r7, #0]
 801a72a:	2200      	movs	r2, #0
 801a72c:	4798      	blx	r3
      break;
 801a72e:	e064      	b.n	801a7fa <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	785b      	ldrb	r3, [r3, #1]
 801a734:	2b0b      	cmp	r3, #11
 801a736:	d037      	beq.n	801a7a8 <USBD_CDC_Setup+0x12c>
 801a738:	dc47      	bgt.n	801a7ca <USBD_CDC_Setup+0x14e>
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d002      	beq.n	801a744 <USBD_CDC_Setup+0xc8>
 801a73e:	2b0a      	cmp	r3, #10
 801a740:	d019      	beq.n	801a776 <USBD_CDC_Setup+0xfa>
 801a742:	e042      	b.n	801a7ca <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a744:	687a      	ldr	r2, [r7, #4]
 801a746:	23a7      	movs	r3, #167	@ 0xa7
 801a748:	009b      	lsls	r3, r3, #2
 801a74a:	5cd3      	ldrb	r3, [r2, r3]
 801a74c:	2b03      	cmp	r3, #3
 801a74e:	d107      	bne.n	801a760 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a750:	230c      	movs	r3, #12
 801a752:	18f9      	adds	r1, r7, r3
 801a754:	687b      	ldr	r3, [r7, #4]
 801a756:	2202      	movs	r2, #2
 801a758:	0018      	movs	r0, r3
 801a75a:	f001 fb78 	bl	801be4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a75e:	e040      	b.n	801a7e2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a760:	683a      	ldr	r2, [r7, #0]
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	0011      	movs	r1, r2
 801a766:	0018      	movs	r0, r3
 801a768:	f001 faf3 	bl	801bd52 <USBD_CtlError>
            ret = USBD_FAIL;
 801a76c:	2317      	movs	r3, #23
 801a76e:	18fb      	adds	r3, r7, r3
 801a770:	2202      	movs	r2, #2
 801a772:	701a      	strb	r2, [r3, #0]
          break;
 801a774:	e035      	b.n	801a7e2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a776:	687a      	ldr	r2, [r7, #4]
 801a778:	23a7      	movs	r3, #167	@ 0xa7
 801a77a:	009b      	lsls	r3, r3, #2
 801a77c:	5cd3      	ldrb	r3, [r2, r3]
 801a77e:	2b03      	cmp	r3, #3
 801a780:	d107      	bne.n	801a792 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a782:	230f      	movs	r3, #15
 801a784:	18f9      	adds	r1, r7, r3
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	2201      	movs	r2, #1
 801a78a:	0018      	movs	r0, r3
 801a78c:	f001 fb5f 	bl	801be4e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a790:	e027      	b.n	801a7e2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a792:	683a      	ldr	r2, [r7, #0]
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	0011      	movs	r1, r2
 801a798:	0018      	movs	r0, r3
 801a79a:	f001 fada 	bl	801bd52 <USBD_CtlError>
            ret = USBD_FAIL;
 801a79e:	2317      	movs	r3, #23
 801a7a0:	18fb      	adds	r3, r7, r3
 801a7a2:	2202      	movs	r2, #2
 801a7a4:	701a      	strb	r2, [r3, #0]
          break;
 801a7a6:	e01c      	b.n	801a7e2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a7a8:	687a      	ldr	r2, [r7, #4]
 801a7aa:	23a7      	movs	r3, #167	@ 0xa7
 801a7ac:	009b      	lsls	r3, r3, #2
 801a7ae:	5cd3      	ldrb	r3, [r2, r3]
 801a7b0:	2b03      	cmp	r3, #3
 801a7b2:	d015      	beq.n	801a7e0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a7b4:	683a      	ldr	r2, [r7, #0]
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	0011      	movs	r1, r2
 801a7ba:	0018      	movs	r0, r3
 801a7bc:	f001 fac9 	bl	801bd52 <USBD_CtlError>
            ret = USBD_FAIL;
 801a7c0:	2317      	movs	r3, #23
 801a7c2:	18fb      	adds	r3, r7, r3
 801a7c4:	2202      	movs	r2, #2
 801a7c6:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a7c8:	e00a      	b.n	801a7e0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a7ca:	683a      	ldr	r2, [r7, #0]
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	0011      	movs	r1, r2
 801a7d0:	0018      	movs	r0, r3
 801a7d2:	f001 fabe 	bl	801bd52 <USBD_CtlError>
          ret = USBD_FAIL;
 801a7d6:	2317      	movs	r3, #23
 801a7d8:	18fb      	adds	r3, r7, r3
 801a7da:	2202      	movs	r2, #2
 801a7dc:	701a      	strb	r2, [r3, #0]
          break;
 801a7de:	e000      	b.n	801a7e2 <USBD_CDC_Setup+0x166>
          break;
 801a7e0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a7e2:	e00a      	b.n	801a7fa <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801a7e4:	683a      	ldr	r2, [r7, #0]
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	0011      	movs	r1, r2
 801a7ea:	0018      	movs	r0, r3
 801a7ec:	f001 fab1 	bl	801bd52 <USBD_CtlError>
      ret = USBD_FAIL;
 801a7f0:	2317      	movs	r3, #23
 801a7f2:	18fb      	adds	r3, r7, r3
 801a7f4:	2202      	movs	r2, #2
 801a7f6:	701a      	strb	r2, [r3, #0]
      break;
 801a7f8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a7fa:	2317      	movs	r3, #23
 801a7fc:	18fb      	adds	r3, r7, r3
 801a7fe:	781b      	ldrb	r3, [r3, #0]
}
 801a800:	0018      	movs	r0, r3
 801a802:	46bd      	mov	sp, r7
 801a804:	b006      	add	sp, #24
 801a806:	bd80      	pop	{r7, pc}
 801a808:	00000201 	.word	0x00000201

0801a80c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b084      	sub	sp, #16
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
 801a814:	000a      	movs	r2, r1
 801a816:	1cfb      	adds	r3, r7, #3
 801a818:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a81a:	687a      	ldr	r2, [r7, #4]
 801a81c:	23ae      	movs	r3, #174	@ 0xae
 801a81e:	009b      	lsls	r3, r3, #2
 801a820:	58d3      	ldr	r3, [r2, r3]
 801a822:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a824:	687a      	ldr	r2, [r7, #4]
 801a826:	23b0      	movs	r3, #176	@ 0xb0
 801a828:	009b      	lsls	r3, r3, #2
 801a82a:	58d3      	ldr	r3, [r2, r3]
 801a82c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801a82e:	687a      	ldr	r2, [r7, #4]
 801a830:	23ae      	movs	r3, #174	@ 0xae
 801a832:	009b      	lsls	r3, r3, #2
 801a834:	58d3      	ldr	r3, [r2, r3]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d03e      	beq.n	801a8b8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a83a:	1cfb      	adds	r3, r7, #3
 801a83c:	781a      	ldrb	r2, [r3, #0]
 801a83e:	6879      	ldr	r1, [r7, #4]
 801a840:	0013      	movs	r3, r2
 801a842:	009b      	lsls	r3, r3, #2
 801a844:	189b      	adds	r3, r3, r2
 801a846:	009b      	lsls	r3, r3, #2
 801a848:	18cb      	adds	r3, r1, r3
 801a84a:	331c      	adds	r3, #28
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d02b      	beq.n	801a8aa <USBD_CDC_DataIn+0x9e>
 801a852:	1cfb      	adds	r3, r7, #3
 801a854:	781a      	ldrb	r2, [r3, #0]
 801a856:	6879      	ldr	r1, [r7, #4]
 801a858:	0013      	movs	r3, r2
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	189b      	adds	r3, r3, r2
 801a85e:	009b      	lsls	r3, r3, #2
 801a860:	18cb      	adds	r3, r1, r3
 801a862:	331c      	adds	r3, #28
 801a864:	6818      	ldr	r0, [r3, #0]
 801a866:	1cfb      	adds	r3, r7, #3
 801a868:	781a      	ldrb	r2, [r3, #0]
 801a86a:	68b9      	ldr	r1, [r7, #8]
 801a86c:	0013      	movs	r3, r2
 801a86e:	009b      	lsls	r3, r3, #2
 801a870:	189b      	adds	r3, r3, r2
 801a872:	00db      	lsls	r3, r3, #3
 801a874:	18cb      	adds	r3, r1, r3
 801a876:	3338      	adds	r3, #56	@ 0x38
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	0019      	movs	r1, r3
 801a87c:	f7e5 fd18 	bl	80002b0 <__aeabi_uidivmod>
 801a880:	1e0b      	subs	r3, r1, #0
 801a882:	d112      	bne.n	801a8aa <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801a884:	1cfb      	adds	r3, r7, #3
 801a886:	781a      	ldrb	r2, [r3, #0]
 801a888:	6879      	ldr	r1, [r7, #4]
 801a88a:	0013      	movs	r3, r2
 801a88c:	009b      	lsls	r3, r3, #2
 801a88e:	189b      	adds	r3, r3, r2
 801a890:	009b      	lsls	r3, r3, #2
 801a892:	18cb      	adds	r3, r1, r3
 801a894:	331c      	adds	r3, #28
 801a896:	2200      	movs	r2, #0
 801a898:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a89a:	1cfb      	adds	r3, r7, #3
 801a89c:	7819      	ldrb	r1, [r3, #0]
 801a89e:	6878      	ldr	r0, [r7, #4]
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	f002 f82f 	bl	801c906 <USBD_LL_Transmit>
 801a8a8:	e004      	b.n	801a8b4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801a8aa:	68fa      	ldr	r2, [r7, #12]
 801a8ac:	2385      	movs	r3, #133	@ 0x85
 801a8ae:	009b      	lsls	r3, r3, #2
 801a8b0:	2100      	movs	r1, #0
 801a8b2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	e000      	b.n	801a8ba <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801a8b8:	2302      	movs	r3, #2
  }
}
 801a8ba:	0018      	movs	r0, r3
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	b004      	add	sp, #16
 801a8c0:	bd80      	pop	{r7, pc}

0801a8c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a8c2:	b580      	push	{r7, lr}
 801a8c4:	b084      	sub	sp, #16
 801a8c6:	af00      	add	r7, sp, #0
 801a8c8:	6078      	str	r0, [r7, #4]
 801a8ca:	000a      	movs	r2, r1
 801a8cc:	1cfb      	adds	r3, r7, #3
 801a8ce:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a8d0:	687a      	ldr	r2, [r7, #4]
 801a8d2:	23ae      	movs	r3, #174	@ 0xae
 801a8d4:	009b      	lsls	r3, r3, #2
 801a8d6:	58d3      	ldr	r3, [r2, r3]
 801a8d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a8da:	1cfb      	adds	r3, r7, #3
 801a8dc:	781a      	ldrb	r2, [r3, #0]
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	0011      	movs	r1, r2
 801a8e2:	0018      	movs	r0, r3
 801a8e4:	f002 f87d 	bl	801c9e2 <USBD_LL_GetRxDataSize>
 801a8e8:	0001      	movs	r1, r0
 801a8ea:	68fa      	ldr	r2, [r7, #12]
 801a8ec:	2383      	movs	r3, #131	@ 0x83
 801a8ee:	009b      	lsls	r3, r3, #2
 801a8f0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801a8f2:	687a      	ldr	r2, [r7, #4]
 801a8f4:	23ae      	movs	r3, #174	@ 0xae
 801a8f6:	009b      	lsls	r3, r3, #2
 801a8f8:	58d3      	ldr	r3, [r2, r3]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d011      	beq.n	801a922 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a8fe:	687a      	ldr	r2, [r7, #4]
 801a900:	23af      	movs	r3, #175	@ 0xaf
 801a902:	009b      	lsls	r3, r3, #2
 801a904:	58d3      	ldr	r3, [r2, r3]
 801a906:	68da      	ldr	r2, [r3, #12]
 801a908:	68f9      	ldr	r1, [r7, #12]
 801a90a:	2381      	movs	r3, #129	@ 0x81
 801a90c:	009b      	lsls	r3, r3, #2
 801a90e:	58c8      	ldr	r0, [r1, r3]
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	2183      	movs	r1, #131	@ 0x83
 801a914:	0089      	lsls	r1, r1, #2
 801a916:	468c      	mov	ip, r1
 801a918:	4463      	add	r3, ip
 801a91a:	0019      	movs	r1, r3
 801a91c:	4790      	blx	r2

    return USBD_OK;
 801a91e:	2300      	movs	r3, #0
 801a920:	e000      	b.n	801a924 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801a922:	2302      	movs	r3, #2
  }
}
 801a924:	0018      	movs	r0, r3
 801a926:	46bd      	mov	sp, r7
 801a928:	b004      	add	sp, #16
 801a92a:	bd80      	pop	{r7, pc}

0801a92c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a92c:	b590      	push	{r4, r7, lr}
 801a92e:	b085      	sub	sp, #20
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a934:	687a      	ldr	r2, [r7, #4]
 801a936:	23ae      	movs	r3, #174	@ 0xae
 801a938:	009b      	lsls	r3, r3, #2
 801a93a:	58d3      	ldr	r3, [r2, r3]
 801a93c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a93e:	687a      	ldr	r2, [r7, #4]
 801a940:	23af      	movs	r3, #175	@ 0xaf
 801a942:	009b      	lsls	r3, r3, #2
 801a944:	58d3      	ldr	r3, [r2, r3]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d018      	beq.n	801a97c <USBD_CDC_EP0_RxReady+0x50>
 801a94a:	68fa      	ldr	r2, [r7, #12]
 801a94c:	2380      	movs	r3, #128	@ 0x80
 801a94e:	009b      	lsls	r3, r3, #2
 801a950:	5cd3      	ldrb	r3, [r2, r3]
 801a952:	2bff      	cmp	r3, #255	@ 0xff
 801a954:	d012      	beq.n	801a97c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a956:	687a      	ldr	r2, [r7, #4]
 801a958:	23af      	movs	r3, #175	@ 0xaf
 801a95a:	009b      	lsls	r3, r3, #2
 801a95c:	58d3      	ldr	r3, [r2, r3]
 801a95e:	689b      	ldr	r3, [r3, #8]
 801a960:	68f9      	ldr	r1, [r7, #12]
 801a962:	2280      	movs	r2, #128	@ 0x80
 801a964:	0092      	lsls	r2, r2, #2
 801a966:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801a968:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a96a:	68fa      	ldr	r2, [r7, #12]
 801a96c:	4c06      	ldr	r4, [pc, #24]	@ (801a988 <USBD_CDC_EP0_RxReady+0x5c>)
 801a96e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a970:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a972:	68fa      	ldr	r2, [r7, #12]
 801a974:	2380      	movs	r3, #128	@ 0x80
 801a976:	009b      	lsls	r3, r3, #2
 801a978:	21ff      	movs	r1, #255	@ 0xff
 801a97a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	0018      	movs	r0, r3
 801a980:	46bd      	mov	sp, r7
 801a982:	b005      	add	sp, #20
 801a984:	bd90      	pop	{r4, r7, pc}
 801a986:	46c0      	nop			@ (mov r8, r8)
 801a988:	00000201 	.word	0x00000201

0801a98c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a98c:	b580      	push	{r7, lr}
 801a98e:	b082      	sub	sp, #8
 801a990:	af00      	add	r7, sp, #0
 801a992:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	2243      	movs	r2, #67	@ 0x43
 801a998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801a99a:	4b02      	ldr	r3, [pc, #8]	@ (801a9a4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801a99c:	0018      	movs	r0, r3
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	b002      	add	sp, #8
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	20000168 	.word	0x20000168

0801a9a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b082      	sub	sp, #8
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2243      	movs	r2, #67	@ 0x43
 801a9b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801a9b6:	4b02      	ldr	r3, [pc, #8]	@ (801a9c0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801a9b8:	0018      	movs	r0, r3
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	b002      	add	sp, #8
 801a9be:	bd80      	pop	{r7, pc}
 801a9c0:	20000124 	.word	0x20000124

0801a9c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b082      	sub	sp, #8
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	2243      	movs	r2, #67	@ 0x43
 801a9d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801a9d2:	4b02      	ldr	r3, [pc, #8]	@ (801a9dc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801a9d4:	0018      	movs	r0, r3
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	b002      	add	sp, #8
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	200001ac 	.word	0x200001ac

0801a9e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b082      	sub	sp, #8
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	220a      	movs	r2, #10
 801a9ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801a9ee:	4b02      	ldr	r3, [pc, #8]	@ (801a9f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801a9f0:	0018      	movs	r0, r3
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	b002      	add	sp, #8
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	200000e0 	.word	0x200000e0

0801a9fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b084      	sub	sp, #16
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801aa06:	200f      	movs	r0, #15
 801aa08:	183b      	adds	r3, r7, r0
 801aa0a:	2202      	movs	r2, #2
 801aa0c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801aa0e:	683b      	ldr	r3, [r7, #0]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d007      	beq.n	801aa24 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801aa14:	687a      	ldr	r2, [r7, #4]
 801aa16:	23af      	movs	r3, #175	@ 0xaf
 801aa18:	009b      	lsls	r3, r3, #2
 801aa1a:	6839      	ldr	r1, [r7, #0]
 801aa1c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801aa1e:	183b      	adds	r3, r7, r0
 801aa20:	2200      	movs	r2, #0
 801aa22:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801aa24:	230f      	movs	r3, #15
 801aa26:	18fb      	adds	r3, r7, r3
 801aa28:	781b      	ldrb	r3, [r3, #0]
}
 801aa2a:	0018      	movs	r0, r3
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	b004      	add	sp, #16
 801aa30:	bd80      	pop	{r7, pc}

0801aa32 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801aa32:	b580      	push	{r7, lr}
 801aa34:	b086      	sub	sp, #24
 801aa36:	af00      	add	r7, sp, #0
 801aa38:	60f8      	str	r0, [r7, #12]
 801aa3a:	60b9      	str	r1, [r7, #8]
 801aa3c:	1dbb      	adds	r3, r7, #6
 801aa3e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aa40:	68fa      	ldr	r2, [r7, #12]
 801aa42:	23ae      	movs	r3, #174	@ 0xae
 801aa44:	009b      	lsls	r3, r3, #2
 801aa46:	58d3      	ldr	r3, [r2, r3]
 801aa48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801aa4a:	697a      	ldr	r2, [r7, #20]
 801aa4c:	2382      	movs	r3, #130	@ 0x82
 801aa4e:	009b      	lsls	r3, r3, #2
 801aa50:	68b9      	ldr	r1, [r7, #8]
 801aa52:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801aa54:	1dbb      	adds	r3, r7, #6
 801aa56:	8819      	ldrh	r1, [r3, #0]
 801aa58:	697a      	ldr	r2, [r7, #20]
 801aa5a:	2384      	movs	r3, #132	@ 0x84
 801aa5c:	009b      	lsls	r3, r3, #2
 801aa5e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801aa60:	2300      	movs	r3, #0
}
 801aa62:	0018      	movs	r0, r3
 801aa64:	46bd      	mov	sp, r7
 801aa66:	b006      	add	sp, #24
 801aa68:	bd80      	pop	{r7, pc}

0801aa6a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801aa6a:	b580      	push	{r7, lr}
 801aa6c:	b084      	sub	sp, #16
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
 801aa72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aa74:	687a      	ldr	r2, [r7, #4]
 801aa76:	23ae      	movs	r3, #174	@ 0xae
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	58d3      	ldr	r3, [r2, r3]
 801aa7c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801aa7e:	68fa      	ldr	r2, [r7, #12]
 801aa80:	2381      	movs	r3, #129	@ 0x81
 801aa82:	009b      	lsls	r3, r3, #2
 801aa84:	6839      	ldr	r1, [r7, #0]
 801aa86:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801aa88:	2300      	movs	r3, #0
}
 801aa8a:	0018      	movs	r0, r3
 801aa8c:	46bd      	mov	sp, r7
 801aa8e:	b004      	add	sp, #16
 801aa90:	bd80      	pop	{r7, pc}

0801aa92 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801aa92:	b580      	push	{r7, lr}
 801aa94:	b084      	sub	sp, #16
 801aa96:	af00      	add	r7, sp, #0
 801aa98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	23ae      	movs	r3, #174	@ 0xae
 801aa9e:	009b      	lsls	r3, r3, #2
 801aaa0:	58d3      	ldr	r3, [r2, r3]
 801aaa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801aaa4:	687a      	ldr	r2, [r7, #4]
 801aaa6:	23ae      	movs	r3, #174	@ 0xae
 801aaa8:	009b      	lsls	r3, r3, #2
 801aaaa:	58d3      	ldr	r3, [r2, r3]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d022      	beq.n	801aaf6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801aab0:	68fa      	ldr	r2, [r7, #12]
 801aab2:	2385      	movs	r3, #133	@ 0x85
 801aab4:	009b      	lsls	r3, r3, #2
 801aab6:	58d3      	ldr	r3, [r2, r3]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d11a      	bne.n	801aaf2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801aabc:	68fa      	ldr	r2, [r7, #12]
 801aabe:	2385      	movs	r3, #133	@ 0x85
 801aac0:	009b      	lsls	r3, r3, #2
 801aac2:	2101      	movs	r1, #1
 801aac4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801aac6:	68fa      	ldr	r2, [r7, #12]
 801aac8:	2384      	movs	r3, #132	@ 0x84
 801aaca:	009b      	lsls	r3, r3, #2
 801aacc:	58d2      	ldr	r2, [r2, r3]
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801aad2:	68fa      	ldr	r2, [r7, #12]
 801aad4:	2382      	movs	r3, #130	@ 0x82
 801aad6:	009b      	lsls	r3, r3, #2
 801aad8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801aada:	68fa      	ldr	r2, [r7, #12]
 801aadc:	2384      	movs	r3, #132	@ 0x84
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	6878      	ldr	r0, [r7, #4]
 801aae6:	000a      	movs	r2, r1
 801aae8:	2181      	movs	r1, #129	@ 0x81
 801aaea:	f001 ff0c 	bl	801c906 <USBD_LL_Transmit>

      return USBD_OK;
 801aaee:	2300      	movs	r3, #0
 801aaf0:	e002      	b.n	801aaf8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	e000      	b.n	801aaf8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801aaf6:	2302      	movs	r3, #2
  }
}
 801aaf8:	0018      	movs	r0, r3
 801aafa:	46bd      	mov	sp, r7
 801aafc:	b004      	add	sp, #16
 801aafe:	bd80      	pop	{r7, pc}

0801ab00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b084      	sub	sp, #16
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ab08:	687a      	ldr	r2, [r7, #4]
 801ab0a:	23ae      	movs	r3, #174	@ 0xae
 801ab0c:	009b      	lsls	r3, r3, #2
 801ab0e:	58d3      	ldr	r3, [r2, r3]
 801ab10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801ab12:	687a      	ldr	r2, [r7, #4]
 801ab14:	23ae      	movs	r3, #174	@ 0xae
 801ab16:	009b      	lsls	r3, r3, #2
 801ab18:	58d3      	ldr	r3, [r2, r3]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d019      	beq.n	801ab52 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	7c1b      	ldrb	r3, [r3, #16]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d10a      	bne.n	801ab3c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ab26:	68fa      	ldr	r2, [r7, #12]
 801ab28:	2381      	movs	r3, #129	@ 0x81
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	58d2      	ldr	r2, [r2, r3]
 801ab2e:	2380      	movs	r3, #128	@ 0x80
 801ab30:	009b      	lsls	r3, r3, #2
 801ab32:	6878      	ldr	r0, [r7, #4]
 801ab34:	2101      	movs	r1, #1
 801ab36:	f001 ff1d 	bl	801c974 <USBD_LL_PrepareReceive>
 801ab3a:	e008      	b.n	801ab4e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ab3c:	68fa      	ldr	r2, [r7, #12]
 801ab3e:	2381      	movs	r3, #129	@ 0x81
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	58d2      	ldr	r2, [r2, r3]
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	2340      	movs	r3, #64	@ 0x40
 801ab48:	2101      	movs	r1, #1
 801ab4a:	f001 ff13 	bl	801c974 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ab4e:	2300      	movs	r3, #0
 801ab50:	e000      	b.n	801ab54 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801ab52:	2302      	movs	r3, #2
  }
}
 801ab54:	0018      	movs	r0, r3
 801ab56:	46bd      	mov	sp, r7
 801ab58:	b004      	add	sp, #16
 801ab5a:	bd80      	pop	{r7, pc}

0801ab5c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b084      	sub	sp, #16
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	60f8      	str	r0, [r7, #12]
 801ab64:	60b9      	str	r1, [r7, #8]
 801ab66:	1dfb      	adds	r3, r7, #7
 801ab68:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ab6a:	68fb      	ldr	r3, [r7, #12]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d101      	bne.n	801ab74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ab70:	2302      	movs	r3, #2
 801ab72:	e020      	b.n	801abb6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ab74:	68fa      	ldr	r2, [r7, #12]
 801ab76:	23ad      	movs	r3, #173	@ 0xad
 801ab78:	009b      	lsls	r3, r3, #2
 801ab7a:	58d3      	ldr	r3, [r2, r3]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d004      	beq.n	801ab8a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801ab80:	68fa      	ldr	r2, [r7, #12]
 801ab82:	23ad      	movs	r3, #173	@ 0xad
 801ab84:	009b      	lsls	r3, r3, #2
 801ab86:	2100      	movs	r1, #0
 801ab88:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d004      	beq.n	801ab9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	23ac      	movs	r3, #172	@ 0xac
 801ab94:	009b      	lsls	r3, r3, #2
 801ab96:	68b9      	ldr	r1, [r7, #8]
 801ab98:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ab9a:	68fa      	ldr	r2, [r7, #12]
 801ab9c:	23a7      	movs	r3, #167	@ 0xa7
 801ab9e:	009b      	lsls	r3, r3, #2
 801aba0:	2101      	movs	r1, #1
 801aba2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	1dfa      	adds	r2, r7, #7
 801aba8:	7812      	ldrb	r2, [r2, #0]
 801abaa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	0018      	movs	r0, r3
 801abb0:	f001 fd0c 	bl	801c5cc <USBD_LL_Init>

  return USBD_OK;
 801abb4:	2300      	movs	r3, #0
}
 801abb6:	0018      	movs	r0, r3
 801abb8:	46bd      	mov	sp, r7
 801abba:	b004      	add	sp, #16
 801abbc:	bd80      	pop	{r7, pc}

0801abbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801abbe:	b580      	push	{r7, lr}
 801abc0:	b084      	sub	sp, #16
 801abc2:	af00      	add	r7, sp, #0
 801abc4:	6078      	str	r0, [r7, #4]
 801abc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801abc8:	200f      	movs	r0, #15
 801abca:	183b      	adds	r3, r7, r0
 801abcc:	2200      	movs	r2, #0
 801abce:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801abd0:	683b      	ldr	r3, [r7, #0]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d008      	beq.n	801abe8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	23ad      	movs	r3, #173	@ 0xad
 801abda:	009b      	lsls	r3, r3, #2
 801abdc:	6839      	ldr	r1, [r7, #0]
 801abde:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801abe0:	183b      	adds	r3, r7, r0
 801abe2:	2200      	movs	r2, #0
 801abe4:	701a      	strb	r2, [r3, #0]
 801abe6:	e003      	b.n	801abf0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801abe8:	230f      	movs	r3, #15
 801abea:	18fb      	adds	r3, r7, r3
 801abec:	2202      	movs	r2, #2
 801abee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801abf0:	230f      	movs	r3, #15
 801abf2:	18fb      	adds	r3, r7, r3
 801abf4:	781b      	ldrb	r3, [r3, #0]
}
 801abf6:	0018      	movs	r0, r3
 801abf8:	46bd      	mov	sp, r7
 801abfa:	b004      	add	sp, #16
 801abfc:	bd80      	pop	{r7, pc}

0801abfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801abfe:	b580      	push	{r7, lr}
 801ac00:	b082      	sub	sp, #8
 801ac02:	af00      	add	r7, sp, #0
 801ac04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	0018      	movs	r0, r3
 801ac0a:	f001 fd43 	bl	801c694 <USBD_LL_Start>

  return USBD_OK;
 801ac0e:	2300      	movs	r3, #0
}
 801ac10:	0018      	movs	r0, r3
 801ac12:	46bd      	mov	sp, r7
 801ac14:	b002      	add	sp, #8
 801ac16:	bd80      	pop	{r7, pc}

0801ac18 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b082      	sub	sp, #8
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ac20:	2300      	movs	r3, #0
}
 801ac22:	0018      	movs	r0, r3
 801ac24:	46bd      	mov	sp, r7
 801ac26:	b002      	add	sp, #8
 801ac28:	bd80      	pop	{r7, pc}

0801ac2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ac2a:	b590      	push	{r4, r7, lr}
 801ac2c:	b085      	sub	sp, #20
 801ac2e:	af00      	add	r7, sp, #0
 801ac30:	6078      	str	r0, [r7, #4]
 801ac32:	000a      	movs	r2, r1
 801ac34:	1cfb      	adds	r3, r7, #3
 801ac36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ac38:	240f      	movs	r4, #15
 801ac3a:	193b      	adds	r3, r7, r4
 801ac3c:	2202      	movs	r2, #2
 801ac3e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ac40:	687a      	ldr	r2, [r7, #4]
 801ac42:	23ad      	movs	r3, #173	@ 0xad
 801ac44:	009b      	lsls	r3, r3, #2
 801ac46:	58d3      	ldr	r3, [r2, r3]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d00e      	beq.n	801ac6a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ac4c:	687a      	ldr	r2, [r7, #4]
 801ac4e:	23ad      	movs	r3, #173	@ 0xad
 801ac50:	009b      	lsls	r3, r3, #2
 801ac52:	58d3      	ldr	r3, [r2, r3]
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	1cfa      	adds	r2, r7, #3
 801ac58:	7811      	ldrb	r1, [r2, #0]
 801ac5a:	687a      	ldr	r2, [r7, #4]
 801ac5c:	0010      	movs	r0, r2
 801ac5e:	4798      	blx	r3
 801ac60:	1e03      	subs	r3, r0, #0
 801ac62:	d102      	bne.n	801ac6a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801ac64:	193b      	adds	r3, r7, r4
 801ac66:	2200      	movs	r2, #0
 801ac68:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801ac6a:	230f      	movs	r3, #15
 801ac6c:	18fb      	adds	r3, r7, r3
 801ac6e:	781b      	ldrb	r3, [r3, #0]
}
 801ac70:	0018      	movs	r0, r3
 801ac72:	46bd      	mov	sp, r7
 801ac74:	b005      	add	sp, #20
 801ac76:	bd90      	pop	{r4, r7, pc}

0801ac78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b082      	sub	sp, #8
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	000a      	movs	r2, r1
 801ac82:	1cfb      	adds	r3, r7, #3
 801ac84:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801ac86:	687a      	ldr	r2, [r7, #4]
 801ac88:	23ad      	movs	r3, #173	@ 0xad
 801ac8a:	009b      	lsls	r3, r3, #2
 801ac8c:	58d3      	ldr	r3, [r2, r3]
 801ac8e:	685b      	ldr	r3, [r3, #4]
 801ac90:	1cfa      	adds	r2, r7, #3
 801ac92:	7811      	ldrb	r1, [r2, #0]
 801ac94:	687a      	ldr	r2, [r7, #4]
 801ac96:	0010      	movs	r0, r2
 801ac98:	4798      	blx	r3

  return USBD_OK;
 801ac9a:	2300      	movs	r3, #0
}
 801ac9c:	0018      	movs	r0, r3
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	b002      	add	sp, #8
 801aca2:	bd80      	pop	{r7, pc}

0801aca4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801aca4:	b580      	push	{r7, lr}
 801aca6:	b082      	sub	sp, #8
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	22aa      	movs	r2, #170	@ 0xaa
 801acb2:	0092      	lsls	r2, r2, #2
 801acb4:	4694      	mov	ip, r2
 801acb6:	4463      	add	r3, ip
 801acb8:	683a      	ldr	r2, [r7, #0]
 801acba:	0011      	movs	r1, r2
 801acbc:	0018      	movs	r0, r3
 801acbe:	f001 f810 	bl	801bce2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801acc2:	687a      	ldr	r2, [r7, #4]
 801acc4:	23a5      	movs	r3, #165	@ 0xa5
 801acc6:	009b      	lsls	r3, r3, #2
 801acc8:	2101      	movs	r1, #1
 801acca:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	4a23      	ldr	r2, [pc, #140]	@ (801ad5c <USBD_LL_SetupStage+0xb8>)
 801acd0:	5a9b      	ldrh	r3, [r3, r2]
 801acd2:	0019      	movs	r1, r3
 801acd4:	687a      	ldr	r2, [r7, #4]
 801acd6:	23a6      	movs	r3, #166	@ 0xa6
 801acd8:	009b      	lsls	r3, r3, #2
 801acda:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801acdc:	687a      	ldr	r2, [r7, #4]
 801acde:	23aa      	movs	r3, #170	@ 0xaa
 801ace0:	009b      	lsls	r3, r3, #2
 801ace2:	5cd3      	ldrb	r3, [r2, r3]
 801ace4:	001a      	movs	r2, r3
 801ace6:	231f      	movs	r3, #31
 801ace8:	4013      	ands	r3, r2
 801acea:	2b02      	cmp	r3, #2
 801acec:	d019      	beq.n	801ad22 <USBD_LL_SetupStage+0x7e>
 801acee:	d822      	bhi.n	801ad36 <USBD_LL_SetupStage+0x92>
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d002      	beq.n	801acfa <USBD_LL_SetupStage+0x56>
 801acf4:	2b01      	cmp	r3, #1
 801acf6:	d00a      	beq.n	801ad0e <USBD_LL_SetupStage+0x6a>
 801acf8:	e01d      	b.n	801ad36 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	22aa      	movs	r2, #170	@ 0xaa
 801acfe:	0092      	lsls	r2, r2, #2
 801ad00:	189a      	adds	r2, r3, r2
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	0011      	movs	r1, r2
 801ad06:	0018      	movs	r0, r3
 801ad08:	f000 fa10 	bl	801b12c <USBD_StdDevReq>
      break;
 801ad0c:	e020      	b.n	801ad50 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	22aa      	movs	r2, #170	@ 0xaa
 801ad12:	0092      	lsls	r2, r2, #2
 801ad14:	189a      	adds	r2, r3, r2
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	0011      	movs	r1, r2
 801ad1a:	0018      	movs	r0, r3
 801ad1c:	f000 fa78 	bl	801b210 <USBD_StdItfReq>
      break;
 801ad20:	e016      	b.n	801ad50 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	22aa      	movs	r2, #170	@ 0xaa
 801ad26:	0092      	lsls	r2, r2, #2
 801ad28:	189a      	adds	r2, r3, r2
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	0011      	movs	r1, r2
 801ad2e:	0018      	movs	r0, r3
 801ad30:	f000 fac5 	bl	801b2be <USBD_StdEPReq>
      break;
 801ad34:	e00c      	b.n	801ad50 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801ad36:	687a      	ldr	r2, [r7, #4]
 801ad38:	23aa      	movs	r3, #170	@ 0xaa
 801ad3a:	009b      	lsls	r3, r3, #2
 801ad3c:	5cd3      	ldrb	r3, [r2, r3]
 801ad3e:	227f      	movs	r2, #127	@ 0x7f
 801ad40:	4393      	bics	r3, r2
 801ad42:	b2da      	uxtb	r2, r3
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	0011      	movs	r1, r2
 801ad48:	0018      	movs	r0, r3
 801ad4a:	f001 fd2a 	bl	801c7a2 <USBD_LL_StallEP>
      break;
 801ad4e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801ad50:	2300      	movs	r3, #0
}
 801ad52:	0018      	movs	r0, r3
 801ad54:	46bd      	mov	sp, r7
 801ad56:	b002      	add	sp, #8
 801ad58:	bd80      	pop	{r7, pc}
 801ad5a:	46c0      	nop			@ (mov r8, r8)
 801ad5c:	000002ae 	.word	0x000002ae

0801ad60 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801ad60:	b580      	push	{r7, lr}
 801ad62:	b086      	sub	sp, #24
 801ad64:	af00      	add	r7, sp, #0
 801ad66:	60f8      	str	r0, [r7, #12]
 801ad68:	607a      	str	r2, [r7, #4]
 801ad6a:	200b      	movs	r0, #11
 801ad6c:	183b      	adds	r3, r7, r0
 801ad6e:	1c0a      	adds	r2, r1, #0
 801ad70:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ad72:	183b      	adds	r3, r7, r0
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d154      	bne.n	801ae24 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801ad7a:	68fb      	ldr	r3, [r7, #12]
 801ad7c:	3355      	adds	r3, #85	@ 0x55
 801ad7e:	33ff      	adds	r3, #255	@ 0xff
 801ad80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801ad82:	68fa      	ldr	r2, [r7, #12]
 801ad84:	23a5      	movs	r3, #165	@ 0xa5
 801ad86:	009b      	lsls	r3, r3, #2
 801ad88:	58d3      	ldr	r3, [r2, r3]
 801ad8a:	2b03      	cmp	r3, #3
 801ad8c:	d139      	bne.n	801ae02 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801ad8e:	697b      	ldr	r3, [r7, #20]
 801ad90:	68da      	ldr	r2, [r3, #12]
 801ad92:	697b      	ldr	r3, [r7, #20]
 801ad94:	691b      	ldr	r3, [r3, #16]
 801ad96:	429a      	cmp	r2, r3
 801ad98:	d919      	bls.n	801adce <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801ad9a:	697b      	ldr	r3, [r7, #20]
 801ad9c:	68da      	ldr	r2, [r3, #12]
 801ad9e:	697b      	ldr	r3, [r7, #20]
 801ada0:	691b      	ldr	r3, [r3, #16]
 801ada2:	1ad2      	subs	r2, r2, r3
 801ada4:	697b      	ldr	r3, [r7, #20]
 801ada6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ada8:	697b      	ldr	r3, [r7, #20]
 801adaa:	68da      	ldr	r2, [r3, #12]
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d203      	bcs.n	801adbc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801adb4:	697b      	ldr	r3, [r7, #20]
 801adb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801adb8:	b29b      	uxth	r3, r3
 801adba:	e002      	b.n	801adc2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801adc0:	b29b      	uxth	r3, r3
 801adc2:	6879      	ldr	r1, [r7, #4]
 801adc4:	68f8      	ldr	r0, [r7, #12]
 801adc6:	001a      	movs	r2, r3
 801adc8:	f001 f898 	bl	801befc <USBD_CtlContinueRx>
 801adcc:	e045      	b.n	801ae5a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801adce:	68fa      	ldr	r2, [r7, #12]
 801add0:	23ad      	movs	r3, #173	@ 0xad
 801add2:	009b      	lsls	r3, r3, #2
 801add4:	58d3      	ldr	r3, [r2, r3]
 801add6:	691b      	ldr	r3, [r3, #16]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d00d      	beq.n	801adf8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801addc:	68fa      	ldr	r2, [r7, #12]
 801adde:	23a7      	movs	r3, #167	@ 0xa7
 801ade0:	009b      	lsls	r3, r3, #2
 801ade2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ade4:	2b03      	cmp	r3, #3
 801ade6:	d107      	bne.n	801adf8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801ade8:	68fa      	ldr	r2, [r7, #12]
 801adea:	23ad      	movs	r3, #173	@ 0xad
 801adec:	009b      	lsls	r3, r3, #2
 801adee:	58d3      	ldr	r3, [r2, r3]
 801adf0:	691b      	ldr	r3, [r3, #16]
 801adf2:	68fa      	ldr	r2, [r7, #12]
 801adf4:	0010      	movs	r0, r2
 801adf6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801adf8:	68fb      	ldr	r3, [r7, #12]
 801adfa:	0018      	movs	r0, r3
 801adfc:	f001 f891 	bl	801bf22 <USBD_CtlSendStatus>
 801ae00:	e02b      	b.n	801ae5a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801ae02:	68fa      	ldr	r2, [r7, #12]
 801ae04:	23a5      	movs	r3, #165	@ 0xa5
 801ae06:	009b      	lsls	r3, r3, #2
 801ae08:	58d3      	ldr	r3, [r2, r3]
 801ae0a:	2b05      	cmp	r3, #5
 801ae0c:	d125      	bne.n	801ae5a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801ae0e:	68fa      	ldr	r2, [r7, #12]
 801ae10:	23a5      	movs	r3, #165	@ 0xa5
 801ae12:	009b      	lsls	r3, r3, #2
 801ae14:	2100      	movs	r1, #0
 801ae16:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	2100      	movs	r1, #0
 801ae1c:	0018      	movs	r0, r3
 801ae1e:	f001 fcc0 	bl	801c7a2 <USBD_LL_StallEP>
 801ae22:	e01a      	b.n	801ae5a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ae24:	68fa      	ldr	r2, [r7, #12]
 801ae26:	23ad      	movs	r3, #173	@ 0xad
 801ae28:	009b      	lsls	r3, r3, #2
 801ae2a:	58d3      	ldr	r3, [r2, r3]
 801ae2c:	699b      	ldr	r3, [r3, #24]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d011      	beq.n	801ae56 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ae32:	68fa      	ldr	r2, [r7, #12]
 801ae34:	23a7      	movs	r3, #167	@ 0xa7
 801ae36:	009b      	lsls	r3, r3, #2
 801ae38:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801ae3a:	2b03      	cmp	r3, #3
 801ae3c:	d10b      	bne.n	801ae56 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ae3e:	68fa      	ldr	r2, [r7, #12]
 801ae40:	23ad      	movs	r3, #173	@ 0xad
 801ae42:	009b      	lsls	r3, r3, #2
 801ae44:	58d3      	ldr	r3, [r2, r3]
 801ae46:	699b      	ldr	r3, [r3, #24]
 801ae48:	220b      	movs	r2, #11
 801ae4a:	18ba      	adds	r2, r7, r2
 801ae4c:	7811      	ldrb	r1, [r2, #0]
 801ae4e:	68fa      	ldr	r2, [r7, #12]
 801ae50:	0010      	movs	r0, r2
 801ae52:	4798      	blx	r3
 801ae54:	e001      	b.n	801ae5a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ae56:	2302      	movs	r3, #2
 801ae58:	e000      	b.n	801ae5c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ae5a:	2300      	movs	r3, #0
}
 801ae5c:	0018      	movs	r0, r3
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	b006      	add	sp, #24
 801ae62:	bd80      	pop	{r7, pc}

0801ae64 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ae64:	b580      	push	{r7, lr}
 801ae66:	b086      	sub	sp, #24
 801ae68:	af00      	add	r7, sp, #0
 801ae6a:	60f8      	str	r0, [r7, #12]
 801ae6c:	607a      	str	r2, [r7, #4]
 801ae6e:	200b      	movs	r0, #11
 801ae70:	183b      	adds	r3, r7, r0
 801ae72:	1c0a      	adds	r2, r1, #0
 801ae74:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ae76:	183b      	adds	r3, r7, r0
 801ae78:	781b      	ldrb	r3, [r3, #0]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d000      	beq.n	801ae80 <USBD_LL_DataInStage+0x1c>
 801ae7e:	e08e      	b.n	801af9e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	3314      	adds	r3, #20
 801ae84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801ae86:	68fa      	ldr	r2, [r7, #12]
 801ae88:	23a5      	movs	r3, #165	@ 0xa5
 801ae8a:	009b      	lsls	r3, r3, #2
 801ae8c:	58d3      	ldr	r3, [r2, r3]
 801ae8e:	2b02      	cmp	r3, #2
 801ae90:	d164      	bne.n	801af5c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801ae92:	697b      	ldr	r3, [r7, #20]
 801ae94:	68da      	ldr	r2, [r3, #12]
 801ae96:	697b      	ldr	r3, [r7, #20]
 801ae98:	691b      	ldr	r3, [r3, #16]
 801ae9a:	429a      	cmp	r2, r3
 801ae9c:	d915      	bls.n	801aeca <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	68da      	ldr	r2, [r3, #12]
 801aea2:	697b      	ldr	r3, [r7, #20]
 801aea4:	691b      	ldr	r3, [r3, #16]
 801aea6:	1ad2      	subs	r2, r2, r3
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	68db      	ldr	r3, [r3, #12]
 801aeb0:	b29a      	uxth	r2, r3
 801aeb2:	6879      	ldr	r1, [r7, #4]
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	0018      	movs	r0, r3
 801aeb8:	f000 ffe9 	bl	801be8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801aebc:	68f8      	ldr	r0, [r7, #12]
 801aebe:	2300      	movs	r3, #0
 801aec0:	2200      	movs	r2, #0
 801aec2:	2100      	movs	r1, #0
 801aec4:	f001 fd56 	bl	801c974 <USBD_LL_PrepareReceive>
 801aec8:	e059      	b.n	801af7e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801aeca:	697b      	ldr	r3, [r7, #20]
 801aecc:	689a      	ldr	r2, [r3, #8]
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	691b      	ldr	r3, [r3, #16]
 801aed2:	0019      	movs	r1, r3
 801aed4:	0010      	movs	r0, r2
 801aed6:	f7e5 f9eb 	bl	80002b0 <__aeabi_uidivmod>
 801aeda:	1e0b      	subs	r3, r1, #0
 801aedc:	d11f      	bne.n	801af1e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	689a      	ldr	r2, [r3, #8]
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801aee6:	429a      	cmp	r2, r3
 801aee8:	d319      	bcc.n	801af1e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801aeea:	697b      	ldr	r3, [r7, #20]
 801aeec:	689a      	ldr	r2, [r3, #8]
 801aeee:	68f9      	ldr	r1, [r7, #12]
 801aef0:	23a6      	movs	r3, #166	@ 0xa6
 801aef2:	009b      	lsls	r3, r3, #2
 801aef4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801aef6:	429a      	cmp	r2, r3
 801aef8:	d211      	bcs.n	801af1e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801aefa:	68fb      	ldr	r3, [r7, #12]
 801aefc:	2200      	movs	r2, #0
 801aefe:	2100      	movs	r1, #0
 801af00:	0018      	movs	r0, r3
 801af02:	f000 ffc4 	bl	801be8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801af06:	68fa      	ldr	r2, [r7, #12]
 801af08:	23a6      	movs	r3, #166	@ 0xa6
 801af0a:	009b      	lsls	r3, r3, #2
 801af0c:	2100      	movs	r1, #0
 801af0e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801af10:	68f8      	ldr	r0, [r7, #12]
 801af12:	2300      	movs	r3, #0
 801af14:	2200      	movs	r2, #0
 801af16:	2100      	movs	r1, #0
 801af18:	f001 fd2c 	bl	801c974 <USBD_LL_PrepareReceive>
 801af1c:	e02f      	b.n	801af7e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801af1e:	68fa      	ldr	r2, [r7, #12]
 801af20:	23ad      	movs	r3, #173	@ 0xad
 801af22:	009b      	lsls	r3, r3, #2
 801af24:	58d3      	ldr	r3, [r2, r3]
 801af26:	68db      	ldr	r3, [r3, #12]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	d00d      	beq.n	801af48 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801af2c:	68fa      	ldr	r2, [r7, #12]
 801af2e:	23a7      	movs	r3, #167	@ 0xa7
 801af30:	009b      	lsls	r3, r3, #2
 801af32:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801af34:	2b03      	cmp	r3, #3
 801af36:	d107      	bne.n	801af48 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801af38:	68fa      	ldr	r2, [r7, #12]
 801af3a:	23ad      	movs	r3, #173	@ 0xad
 801af3c:	009b      	lsls	r3, r3, #2
 801af3e:	58d3      	ldr	r3, [r2, r3]
 801af40:	68db      	ldr	r3, [r3, #12]
 801af42:	68fa      	ldr	r2, [r7, #12]
 801af44:	0010      	movs	r0, r2
 801af46:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	2180      	movs	r1, #128	@ 0x80
 801af4c:	0018      	movs	r0, r3
 801af4e:	f001 fc28 	bl	801c7a2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	0018      	movs	r0, r3
 801af56:	f000 fff8 	bl	801bf4a <USBD_CtlReceiveStatus>
 801af5a:	e010      	b.n	801af7e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801af5c:	68fa      	ldr	r2, [r7, #12]
 801af5e:	23a5      	movs	r3, #165	@ 0xa5
 801af60:	009b      	lsls	r3, r3, #2
 801af62:	58d3      	ldr	r3, [r2, r3]
 801af64:	2b04      	cmp	r3, #4
 801af66:	d005      	beq.n	801af74 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801af68:	68fa      	ldr	r2, [r7, #12]
 801af6a:	23a5      	movs	r3, #165	@ 0xa5
 801af6c:	009b      	lsls	r3, r3, #2
 801af6e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801af70:	2b00      	cmp	r3, #0
 801af72:	d104      	bne.n	801af7e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	2180      	movs	r1, #128	@ 0x80
 801af78:	0018      	movs	r0, r3
 801af7a:	f001 fc12 	bl	801c7a2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801af7e:	68fa      	ldr	r2, [r7, #12]
 801af80:	23a8      	movs	r3, #168	@ 0xa8
 801af82:	009b      	lsls	r3, r3, #2
 801af84:	5cd3      	ldrb	r3, [r2, r3]
 801af86:	2b01      	cmp	r3, #1
 801af88:	d124      	bne.n	801afd4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	0018      	movs	r0, r3
 801af8e:	f7ff fe43 	bl	801ac18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801af92:	68fa      	ldr	r2, [r7, #12]
 801af94:	23a8      	movs	r3, #168	@ 0xa8
 801af96:	009b      	lsls	r3, r3, #2
 801af98:	2100      	movs	r1, #0
 801af9a:	54d1      	strb	r1, [r2, r3]
 801af9c:	e01a      	b.n	801afd4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801af9e:	68fa      	ldr	r2, [r7, #12]
 801afa0:	23ad      	movs	r3, #173	@ 0xad
 801afa2:	009b      	lsls	r3, r3, #2
 801afa4:	58d3      	ldr	r3, [r2, r3]
 801afa6:	695b      	ldr	r3, [r3, #20]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d011      	beq.n	801afd0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801afac:	68fa      	ldr	r2, [r7, #12]
 801afae:	23a7      	movs	r3, #167	@ 0xa7
 801afb0:	009b      	lsls	r3, r3, #2
 801afb2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801afb4:	2b03      	cmp	r3, #3
 801afb6:	d10b      	bne.n	801afd0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801afb8:	68fa      	ldr	r2, [r7, #12]
 801afba:	23ad      	movs	r3, #173	@ 0xad
 801afbc:	009b      	lsls	r3, r3, #2
 801afbe:	58d3      	ldr	r3, [r2, r3]
 801afc0:	695b      	ldr	r3, [r3, #20]
 801afc2:	220b      	movs	r2, #11
 801afc4:	18ba      	adds	r2, r7, r2
 801afc6:	7811      	ldrb	r1, [r2, #0]
 801afc8:	68fa      	ldr	r2, [r7, #12]
 801afca:	0010      	movs	r0, r2
 801afcc:	4798      	blx	r3
 801afce:	e001      	b.n	801afd4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801afd0:	2302      	movs	r3, #2
 801afd2:	e000      	b.n	801afd6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801afd4:	2300      	movs	r3, #0
}
 801afd6:	0018      	movs	r0, r3
 801afd8:	46bd      	mov	sp, r7
 801afda:	b006      	add	sp, #24
 801afdc:	bd80      	pop	{r7, pc}

0801afde <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801afde:	b580      	push	{r7, lr}
 801afe0:	b082      	sub	sp, #8
 801afe2:	af00      	add	r7, sp, #0
 801afe4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801afe6:	6878      	ldr	r0, [r7, #4]
 801afe8:	2340      	movs	r3, #64	@ 0x40
 801afea:	2200      	movs	r2, #0
 801afec:	2100      	movs	r1, #0
 801afee:	f001 fb76 	bl	801c6de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801aff2:	687a      	ldr	r2, [r7, #4]
 801aff4:	23ac      	movs	r3, #172	@ 0xac
 801aff6:	005b      	lsls	r3, r3, #1
 801aff8:	2101      	movs	r1, #1
 801affa:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801affc:	687a      	ldr	r2, [r7, #4]
 801affe:	23b2      	movs	r3, #178	@ 0xb2
 801b000:	005b      	lsls	r3, r3, #1
 801b002:	2140      	movs	r1, #64	@ 0x40
 801b004:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801b006:	6878      	ldr	r0, [r7, #4]
 801b008:	2340      	movs	r3, #64	@ 0x40
 801b00a:	2200      	movs	r2, #0
 801b00c:	2180      	movs	r1, #128	@ 0x80
 801b00e:	f001 fb66 	bl	801c6de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2201      	movs	r2, #1
 801b016:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2240      	movs	r2, #64	@ 0x40
 801b01c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b01e:	687a      	ldr	r2, [r7, #4]
 801b020:	23a7      	movs	r3, #167	@ 0xa7
 801b022:	009b      	lsls	r3, r3, #2
 801b024:	2101      	movs	r1, #1
 801b026:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801b028:	687a      	ldr	r2, [r7, #4]
 801b02a:	23a5      	movs	r3, #165	@ 0xa5
 801b02c:	009b      	lsls	r3, r3, #2
 801b02e:	2100      	movs	r1, #0
 801b030:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	2200      	movs	r2, #0
 801b036:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801b038:	687a      	ldr	r2, [r7, #4]
 801b03a:	23a9      	movs	r3, #169	@ 0xa9
 801b03c:	009b      	lsls	r3, r3, #2
 801b03e:	2100      	movs	r1, #0
 801b040:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801b042:	687a      	ldr	r2, [r7, #4]
 801b044:	23ae      	movs	r3, #174	@ 0xae
 801b046:	009b      	lsls	r3, r3, #2
 801b048:	58d3      	ldr	r3, [r2, r3]
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	d00a      	beq.n	801b064 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801b04e:	687a      	ldr	r2, [r7, #4]
 801b050:	23ad      	movs	r3, #173	@ 0xad
 801b052:	009b      	lsls	r3, r3, #2
 801b054:	58d3      	ldr	r3, [r2, r3]
 801b056:	685a      	ldr	r2, [r3, #4]
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	685b      	ldr	r3, [r3, #4]
 801b05c:	b2d9      	uxtb	r1, r3
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	0018      	movs	r0, r3
 801b062:	4790      	blx	r2
  }

  return USBD_OK;
 801b064:	2300      	movs	r3, #0
}
 801b066:	0018      	movs	r0, r3
 801b068:	46bd      	mov	sp, r7
 801b06a:	b002      	add	sp, #8
 801b06c:	bd80      	pop	{r7, pc}

0801b06e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801b06e:	b580      	push	{r7, lr}
 801b070:	b082      	sub	sp, #8
 801b072:	af00      	add	r7, sp, #0
 801b074:	6078      	str	r0, [r7, #4]
 801b076:	000a      	movs	r2, r1
 801b078:	1cfb      	adds	r3, r7, #3
 801b07a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	1cfa      	adds	r2, r7, #3
 801b080:	7812      	ldrb	r2, [r2, #0]
 801b082:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801b084:	2300      	movs	r3, #0
}
 801b086:	0018      	movs	r0, r3
 801b088:	46bd      	mov	sp, r7
 801b08a:	b002      	add	sp, #8
 801b08c:	bd80      	pop	{r7, pc}
	...

0801b090 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b082      	sub	sp, #8
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801b098:	687a      	ldr	r2, [r7, #4]
 801b09a:	23a7      	movs	r3, #167	@ 0xa7
 801b09c:	009b      	lsls	r3, r3, #2
 801b09e:	5cd1      	ldrb	r1, [r2, r3]
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	4a06      	ldr	r2, [pc, #24]	@ (801b0bc <USBD_LL_Suspend+0x2c>)
 801b0a4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801b0a6:	687a      	ldr	r2, [r7, #4]
 801b0a8:	23a7      	movs	r3, #167	@ 0xa7
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	2104      	movs	r1, #4
 801b0ae:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801b0b0:	2300      	movs	r3, #0
}
 801b0b2:	0018      	movs	r0, r3
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	b002      	add	sp, #8
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	46c0      	nop			@ (mov r8, r8)
 801b0bc:	0000029d 	.word	0x0000029d

0801b0c0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b0c8:	687a      	ldr	r2, [r7, #4]
 801b0ca:	23a7      	movs	r3, #167	@ 0xa7
 801b0cc:	009b      	lsls	r3, r3, #2
 801b0ce:	5cd3      	ldrb	r3, [r2, r3]
 801b0d0:	2b04      	cmp	r3, #4
 801b0d2:	d106      	bne.n	801b0e2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	4a05      	ldr	r2, [pc, #20]	@ (801b0ec <USBD_LL_Resume+0x2c>)
 801b0d8:	5c99      	ldrb	r1, [r3, r2]
 801b0da:	687a      	ldr	r2, [r7, #4]
 801b0dc:	23a7      	movs	r3, #167	@ 0xa7
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b0e2:	2300      	movs	r3, #0
}
 801b0e4:	0018      	movs	r0, r3
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	b002      	add	sp, #8
 801b0ea:	bd80      	pop	{r7, pc}
 801b0ec:	0000029d 	.word	0x0000029d

0801b0f0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b082      	sub	sp, #8
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b0f8:	687a      	ldr	r2, [r7, #4]
 801b0fa:	23a7      	movs	r3, #167	@ 0xa7
 801b0fc:	009b      	lsls	r3, r3, #2
 801b0fe:	5cd3      	ldrb	r3, [r2, r3]
 801b100:	2b03      	cmp	r3, #3
 801b102:	d10e      	bne.n	801b122 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b104:	687a      	ldr	r2, [r7, #4]
 801b106:	23ad      	movs	r3, #173	@ 0xad
 801b108:	009b      	lsls	r3, r3, #2
 801b10a:	58d3      	ldr	r3, [r2, r3]
 801b10c:	69db      	ldr	r3, [r3, #28]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d007      	beq.n	801b122 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b112:	687a      	ldr	r2, [r7, #4]
 801b114:	23ad      	movs	r3, #173	@ 0xad
 801b116:	009b      	lsls	r3, r3, #2
 801b118:	58d3      	ldr	r3, [r2, r3]
 801b11a:	69db      	ldr	r3, [r3, #28]
 801b11c:	687a      	ldr	r2, [r7, #4]
 801b11e:	0010      	movs	r0, r2
 801b120:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b122:	2300      	movs	r3, #0
}
 801b124:	0018      	movs	r0, r3
 801b126:	46bd      	mov	sp, r7
 801b128:	b002      	add	sp, #8
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b084      	sub	sp, #16
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
 801b134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b136:	230f      	movs	r3, #15
 801b138:	18fb      	adds	r3, r7, r3
 801b13a:	2200      	movs	r2, #0
 801b13c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b13e:	683b      	ldr	r3, [r7, #0]
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	001a      	movs	r2, r3
 801b144:	2360      	movs	r3, #96	@ 0x60
 801b146:	4013      	ands	r3, r2
 801b148:	2b40      	cmp	r3, #64	@ 0x40
 801b14a:	d004      	beq.n	801b156 <USBD_StdDevReq+0x2a>
 801b14c:	d84f      	bhi.n	801b1ee <USBD_StdDevReq+0xc2>
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d00b      	beq.n	801b16a <USBD_StdDevReq+0x3e>
 801b152:	2b20      	cmp	r3, #32
 801b154:	d14b      	bne.n	801b1ee <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b156:	687a      	ldr	r2, [r7, #4]
 801b158:	23ad      	movs	r3, #173	@ 0xad
 801b15a:	009b      	lsls	r3, r3, #2
 801b15c:	58d3      	ldr	r3, [r2, r3]
 801b15e:	689b      	ldr	r3, [r3, #8]
 801b160:	6839      	ldr	r1, [r7, #0]
 801b162:	687a      	ldr	r2, [r7, #4]
 801b164:	0010      	movs	r0, r2
 801b166:	4798      	blx	r3
      break;
 801b168:	e048      	b.n	801b1fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b16a:	683b      	ldr	r3, [r7, #0]
 801b16c:	785b      	ldrb	r3, [r3, #1]
 801b16e:	2b09      	cmp	r3, #9
 801b170:	d835      	bhi.n	801b1de <USBD_StdDevReq+0xb2>
 801b172:	009a      	lsls	r2, r3, #2
 801b174:	4b25      	ldr	r3, [pc, #148]	@ (801b20c <USBD_StdDevReq+0xe0>)
 801b176:	18d3      	adds	r3, r2, r3
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b17c:	683a      	ldr	r2, [r7, #0]
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	0011      	movs	r1, r2
 801b182:	0018      	movs	r0, r3
 801b184:	f000 fa52 	bl	801b62c <USBD_GetDescriptor>
          break;
 801b188:	e030      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b18a:	683a      	ldr	r2, [r7, #0]
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	0011      	movs	r1, r2
 801b190:	0018      	movs	r0, r3
 801b192:	f000 fbfd 	bl	801b990 <USBD_SetAddress>
          break;
 801b196:	e029      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b198:	683a      	ldr	r2, [r7, #0]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	0011      	movs	r1, r2
 801b19e:	0018      	movs	r0, r3
 801b1a0:	f000 fc4a 	bl	801ba38 <USBD_SetConfig>
          break;
 801b1a4:	e022      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b1a6:	683a      	ldr	r2, [r7, #0]
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	0011      	movs	r1, r2
 801b1ac:	0018      	movs	r0, r3
 801b1ae:	f000 fce7 	bl	801bb80 <USBD_GetConfig>
          break;
 801b1b2:	e01b      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b1b4:	683a      	ldr	r2, [r7, #0]
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	0011      	movs	r1, r2
 801b1ba:	0018      	movs	r0, r3
 801b1bc:	f000 fd1b 	bl	801bbf6 <USBD_GetStatus>
          break;
 801b1c0:	e014      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b1c2:	683a      	ldr	r2, [r7, #0]
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	0011      	movs	r1, r2
 801b1c8:	0018      	movs	r0, r3
 801b1ca:	f000 fd4e 	bl	801bc6a <USBD_SetFeature>
          break;
 801b1ce:	e00d      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b1d0:	683a      	ldr	r2, [r7, #0]
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	0011      	movs	r1, r2
 801b1d6:	0018      	movs	r0, r3
 801b1d8:	f000 fd5d 	bl	801bc96 <USBD_ClrFeature>
          break;
 801b1dc:	e006      	b.n	801b1ec <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b1de:	683a      	ldr	r2, [r7, #0]
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	0011      	movs	r1, r2
 801b1e4:	0018      	movs	r0, r3
 801b1e6:	f000 fdb4 	bl	801bd52 <USBD_CtlError>
          break;
 801b1ea:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b1ec:	e006      	b.n	801b1fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b1ee:	683a      	ldr	r2, [r7, #0]
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	0011      	movs	r1, r2
 801b1f4:	0018      	movs	r0, r3
 801b1f6:	f000 fdac 	bl	801bd52 <USBD_CtlError>
      break;
 801b1fa:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b1fc:	230f      	movs	r3, #15
 801b1fe:	18fb      	adds	r3, r7, r3
 801b200:	781b      	ldrb	r3, [r3, #0]
}
 801b202:	0018      	movs	r0, r3
 801b204:	46bd      	mov	sp, r7
 801b206:	b004      	add	sp, #16
 801b208:	bd80      	pop	{r7, pc}
 801b20a:	46c0      	nop			@ (mov r8, r8)
 801b20c:	08024678 	.word	0x08024678

0801b210 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b210:	b5b0      	push	{r4, r5, r7, lr}
 801b212:	b084      	sub	sp, #16
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
 801b218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b21a:	230f      	movs	r3, #15
 801b21c:	18fb      	adds	r3, r7, r3
 801b21e:	2200      	movs	r2, #0
 801b220:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	781b      	ldrb	r3, [r3, #0]
 801b226:	001a      	movs	r2, r3
 801b228:	2360      	movs	r3, #96	@ 0x60
 801b22a:	4013      	ands	r3, r2
 801b22c:	2b40      	cmp	r3, #64	@ 0x40
 801b22e:	d004      	beq.n	801b23a <USBD_StdItfReq+0x2a>
 801b230:	d839      	bhi.n	801b2a6 <USBD_StdItfReq+0x96>
 801b232:	2b00      	cmp	r3, #0
 801b234:	d001      	beq.n	801b23a <USBD_StdItfReq+0x2a>
 801b236:	2b20      	cmp	r3, #32
 801b238:	d135      	bne.n	801b2a6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	23a7      	movs	r3, #167	@ 0xa7
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	5cd3      	ldrb	r3, [r2, r3]
 801b242:	3b01      	subs	r3, #1
 801b244:	2b02      	cmp	r3, #2
 801b246:	d825      	bhi.n	801b294 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	889b      	ldrh	r3, [r3, #4]
 801b24c:	b2db      	uxtb	r3, r3
 801b24e:	2b01      	cmp	r3, #1
 801b250:	d819      	bhi.n	801b286 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	23ad      	movs	r3, #173	@ 0xad
 801b256:	009b      	lsls	r3, r3, #2
 801b258:	58d3      	ldr	r3, [r2, r3]
 801b25a:	689b      	ldr	r3, [r3, #8]
 801b25c:	250f      	movs	r5, #15
 801b25e:	197c      	adds	r4, r7, r5
 801b260:	6839      	ldr	r1, [r7, #0]
 801b262:	687a      	ldr	r2, [r7, #4]
 801b264:	0010      	movs	r0, r2
 801b266:	4798      	blx	r3
 801b268:	0003      	movs	r3, r0
 801b26a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	88db      	ldrh	r3, [r3, #6]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d116      	bne.n	801b2a2 <USBD_StdItfReq+0x92>
 801b274:	197b      	adds	r3, r7, r5
 801b276:	781b      	ldrb	r3, [r3, #0]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d112      	bne.n	801b2a2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	0018      	movs	r0, r3
 801b280:	f000 fe4f 	bl	801bf22 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b284:	e00d      	b.n	801b2a2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b286:	683a      	ldr	r2, [r7, #0]
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	0011      	movs	r1, r2
 801b28c:	0018      	movs	r0, r3
 801b28e:	f000 fd60 	bl	801bd52 <USBD_CtlError>
          break;
 801b292:	e006      	b.n	801b2a2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b294:	683a      	ldr	r2, [r7, #0]
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	0011      	movs	r1, r2
 801b29a:	0018      	movs	r0, r3
 801b29c:	f000 fd59 	bl	801bd52 <USBD_CtlError>
          break;
 801b2a0:	e000      	b.n	801b2a4 <USBD_StdItfReq+0x94>
          break;
 801b2a2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b2a4:	e006      	b.n	801b2b4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b2a6:	683a      	ldr	r2, [r7, #0]
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	0011      	movs	r1, r2
 801b2ac:	0018      	movs	r0, r3
 801b2ae:	f000 fd50 	bl	801bd52 <USBD_CtlError>
      break;
 801b2b2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b2b4:	2300      	movs	r3, #0
}
 801b2b6:	0018      	movs	r0, r3
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	b004      	add	sp, #16
 801b2bc:	bdb0      	pop	{r4, r5, r7, pc}

0801b2be <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b2be:	b5b0      	push	{r4, r5, r7, lr}
 801b2c0:	b084      	sub	sp, #16
 801b2c2:	af00      	add	r7, sp, #0
 801b2c4:	6078      	str	r0, [r7, #4]
 801b2c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b2c8:	230f      	movs	r3, #15
 801b2ca:	18fb      	adds	r3, r7, r3
 801b2cc:	2200      	movs	r2, #0
 801b2ce:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b2d0:	683b      	ldr	r3, [r7, #0]
 801b2d2:	889a      	ldrh	r2, [r3, #4]
 801b2d4:	230e      	movs	r3, #14
 801b2d6:	18fb      	adds	r3, r7, r3
 801b2d8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b2da:	683b      	ldr	r3, [r7, #0]
 801b2dc:	781b      	ldrb	r3, [r3, #0]
 801b2de:	001a      	movs	r2, r3
 801b2e0:	2360      	movs	r3, #96	@ 0x60
 801b2e2:	4013      	ands	r3, r2
 801b2e4:	2b40      	cmp	r3, #64	@ 0x40
 801b2e6:	d006      	beq.n	801b2f6 <USBD_StdEPReq+0x38>
 801b2e8:	d900      	bls.n	801b2ec <USBD_StdEPReq+0x2e>
 801b2ea:	e190      	b.n	801b60e <USBD_StdEPReq+0x350>
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d00c      	beq.n	801b30a <USBD_StdEPReq+0x4c>
 801b2f0:	2b20      	cmp	r3, #32
 801b2f2:	d000      	beq.n	801b2f6 <USBD_StdEPReq+0x38>
 801b2f4:	e18b      	b.n	801b60e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b2f6:	687a      	ldr	r2, [r7, #4]
 801b2f8:	23ad      	movs	r3, #173	@ 0xad
 801b2fa:	009b      	lsls	r3, r3, #2
 801b2fc:	58d3      	ldr	r3, [r2, r3]
 801b2fe:	689b      	ldr	r3, [r3, #8]
 801b300:	6839      	ldr	r1, [r7, #0]
 801b302:	687a      	ldr	r2, [r7, #4]
 801b304:	0010      	movs	r0, r2
 801b306:	4798      	blx	r3
      break;
 801b308:	e188      	b.n	801b61c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b30a:	683b      	ldr	r3, [r7, #0]
 801b30c:	781b      	ldrb	r3, [r3, #0]
 801b30e:	001a      	movs	r2, r3
 801b310:	2360      	movs	r3, #96	@ 0x60
 801b312:	4013      	ands	r3, r2
 801b314:	2b20      	cmp	r3, #32
 801b316:	d10f      	bne.n	801b338 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b318:	687a      	ldr	r2, [r7, #4]
 801b31a:	23ad      	movs	r3, #173	@ 0xad
 801b31c:	009b      	lsls	r3, r3, #2
 801b31e:	58d3      	ldr	r3, [r2, r3]
 801b320:	689b      	ldr	r3, [r3, #8]
 801b322:	250f      	movs	r5, #15
 801b324:	197c      	adds	r4, r7, r5
 801b326:	6839      	ldr	r1, [r7, #0]
 801b328:	687a      	ldr	r2, [r7, #4]
 801b32a:	0010      	movs	r0, r2
 801b32c:	4798      	blx	r3
 801b32e:	0003      	movs	r3, r0
 801b330:	7023      	strb	r3, [r4, #0]

        return ret;
 801b332:	197b      	adds	r3, r7, r5
 801b334:	781b      	ldrb	r3, [r3, #0]
 801b336:	e174      	b.n	801b622 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	785b      	ldrb	r3, [r3, #1]
 801b33c:	2b03      	cmp	r3, #3
 801b33e:	d007      	beq.n	801b350 <USBD_StdEPReq+0x92>
 801b340:	dd00      	ble.n	801b344 <USBD_StdEPReq+0x86>
 801b342:	e15c      	b.n	801b5fe <USBD_StdEPReq+0x340>
 801b344:	2b00      	cmp	r3, #0
 801b346:	d100      	bne.n	801b34a <USBD_StdEPReq+0x8c>
 801b348:	e092      	b.n	801b470 <USBD_StdEPReq+0x1b2>
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d04b      	beq.n	801b3e6 <USBD_StdEPReq+0x128>
 801b34e:	e156      	b.n	801b5fe <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b350:	687a      	ldr	r2, [r7, #4]
 801b352:	23a7      	movs	r3, #167	@ 0xa7
 801b354:	009b      	lsls	r3, r3, #2
 801b356:	5cd3      	ldrb	r3, [r2, r3]
 801b358:	2b02      	cmp	r3, #2
 801b35a:	d002      	beq.n	801b362 <USBD_StdEPReq+0xa4>
 801b35c:	2b03      	cmp	r3, #3
 801b35e:	d01d      	beq.n	801b39c <USBD_StdEPReq+0xde>
 801b360:	e039      	b.n	801b3d6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b362:	220e      	movs	r2, #14
 801b364:	18bb      	adds	r3, r7, r2
 801b366:	781b      	ldrb	r3, [r3, #0]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d010      	beq.n	801b38e <USBD_StdEPReq+0xd0>
 801b36c:	18bb      	adds	r3, r7, r2
 801b36e:	781b      	ldrb	r3, [r3, #0]
 801b370:	2b80      	cmp	r3, #128	@ 0x80
 801b372:	d00c      	beq.n	801b38e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b374:	18bb      	adds	r3, r7, r2
 801b376:	781a      	ldrb	r2, [r3, #0]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	0011      	movs	r1, r2
 801b37c:	0018      	movs	r0, r3
 801b37e:	f001 fa10 	bl	801c7a2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	2180      	movs	r1, #128	@ 0x80
 801b386:	0018      	movs	r0, r3
 801b388:	f001 fa0b 	bl	801c7a2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b38c:	e02a      	b.n	801b3e4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	0011      	movs	r1, r2
 801b394:	0018      	movs	r0, r3
 801b396:	f000 fcdc 	bl	801bd52 <USBD_CtlError>
              break;
 801b39a:	e023      	b.n	801b3e4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b39c:	683b      	ldr	r3, [r7, #0]
 801b39e:	885b      	ldrh	r3, [r3, #2]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d113      	bne.n	801b3cc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b3a4:	220e      	movs	r2, #14
 801b3a6:	18bb      	adds	r3, r7, r2
 801b3a8:	781b      	ldrb	r3, [r3, #0]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d00e      	beq.n	801b3cc <USBD_StdEPReq+0x10e>
 801b3ae:	18bb      	adds	r3, r7, r2
 801b3b0:	781b      	ldrb	r3, [r3, #0]
 801b3b2:	2b80      	cmp	r3, #128	@ 0x80
 801b3b4:	d00a      	beq.n	801b3cc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	88db      	ldrh	r3, [r3, #6]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d106      	bne.n	801b3cc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b3be:	18bb      	adds	r3, r7, r2
 801b3c0:	781a      	ldrb	r2, [r3, #0]
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	0011      	movs	r1, r2
 801b3c6:	0018      	movs	r0, r3
 801b3c8:	f001 f9eb 	bl	801c7a2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	0018      	movs	r0, r3
 801b3d0:	f000 fda7 	bl	801bf22 <USBD_CtlSendStatus>

              break;
 801b3d4:	e006      	b.n	801b3e4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b3d6:	683a      	ldr	r2, [r7, #0]
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	0011      	movs	r1, r2
 801b3dc:	0018      	movs	r0, r3
 801b3de:	f000 fcb8 	bl	801bd52 <USBD_CtlError>
              break;
 801b3e2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b3e4:	e112      	b.n	801b60c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b3e6:	687a      	ldr	r2, [r7, #4]
 801b3e8:	23a7      	movs	r3, #167	@ 0xa7
 801b3ea:	009b      	lsls	r3, r3, #2
 801b3ec:	5cd3      	ldrb	r3, [r2, r3]
 801b3ee:	2b02      	cmp	r3, #2
 801b3f0:	d002      	beq.n	801b3f8 <USBD_StdEPReq+0x13a>
 801b3f2:	2b03      	cmp	r3, #3
 801b3f4:	d01d      	beq.n	801b432 <USBD_StdEPReq+0x174>
 801b3f6:	e032      	b.n	801b45e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b3f8:	220e      	movs	r2, #14
 801b3fa:	18bb      	adds	r3, r7, r2
 801b3fc:	781b      	ldrb	r3, [r3, #0]
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d010      	beq.n	801b424 <USBD_StdEPReq+0x166>
 801b402:	18bb      	adds	r3, r7, r2
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	2b80      	cmp	r3, #128	@ 0x80
 801b408:	d00c      	beq.n	801b424 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b40a:	18bb      	adds	r3, r7, r2
 801b40c:	781a      	ldrb	r2, [r3, #0]
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	0011      	movs	r1, r2
 801b412:	0018      	movs	r0, r3
 801b414:	f001 f9c5 	bl	801c7a2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	2180      	movs	r1, #128	@ 0x80
 801b41c:	0018      	movs	r0, r3
 801b41e:	f001 f9c0 	bl	801c7a2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b422:	e024      	b.n	801b46e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b424:	683a      	ldr	r2, [r7, #0]
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	0011      	movs	r1, r2
 801b42a:	0018      	movs	r0, r3
 801b42c:	f000 fc91 	bl	801bd52 <USBD_CtlError>
              break;
 801b430:	e01d      	b.n	801b46e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	885b      	ldrh	r3, [r3, #2]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d118      	bne.n	801b46c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b43a:	210e      	movs	r1, #14
 801b43c:	187b      	adds	r3, r7, r1
 801b43e:	781b      	ldrb	r3, [r3, #0]
 801b440:	227f      	movs	r2, #127	@ 0x7f
 801b442:	4013      	ands	r3, r2
 801b444:	d006      	beq.n	801b454 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b446:	187b      	adds	r3, r7, r1
 801b448:	781a      	ldrb	r2, [r3, #0]
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	0011      	movs	r1, r2
 801b44e:	0018      	movs	r0, r3
 801b450:	f001 f9d2 	bl	801c7f8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	0018      	movs	r0, r3
 801b458:	f000 fd63 	bl	801bf22 <USBD_CtlSendStatus>
              }
              break;
 801b45c:	e006      	b.n	801b46c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b45e:	683a      	ldr	r2, [r7, #0]
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	0011      	movs	r1, r2
 801b464:	0018      	movs	r0, r3
 801b466:	f000 fc74 	bl	801bd52 <USBD_CtlError>
              break;
 801b46a:	e000      	b.n	801b46e <USBD_StdEPReq+0x1b0>
              break;
 801b46c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b46e:	e0cd      	b.n	801b60c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b470:	687a      	ldr	r2, [r7, #4]
 801b472:	23a7      	movs	r3, #167	@ 0xa7
 801b474:	009b      	lsls	r3, r3, #2
 801b476:	5cd3      	ldrb	r3, [r2, r3]
 801b478:	2b02      	cmp	r3, #2
 801b47a:	d002      	beq.n	801b482 <USBD_StdEPReq+0x1c4>
 801b47c:	2b03      	cmp	r3, #3
 801b47e:	d03c      	beq.n	801b4fa <USBD_StdEPReq+0x23c>
 801b480:	e0b5      	b.n	801b5ee <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b482:	220e      	movs	r2, #14
 801b484:	18bb      	adds	r3, r7, r2
 801b486:	781b      	ldrb	r3, [r3, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d00a      	beq.n	801b4a2 <USBD_StdEPReq+0x1e4>
 801b48c:	18bb      	adds	r3, r7, r2
 801b48e:	781b      	ldrb	r3, [r3, #0]
 801b490:	2b80      	cmp	r3, #128	@ 0x80
 801b492:	d006      	beq.n	801b4a2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b494:	683a      	ldr	r2, [r7, #0]
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	0011      	movs	r1, r2
 801b49a:	0018      	movs	r0, r3
 801b49c:	f000 fc59 	bl	801bd52 <USBD_CtlError>
                break;
 801b4a0:	e0ac      	b.n	801b5fc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b4a2:	220e      	movs	r2, #14
 801b4a4:	18bb      	adds	r3, r7, r2
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	b25b      	sxtb	r3, r3
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	da0c      	bge.n	801b4c8 <USBD_StdEPReq+0x20a>
 801b4ae:	18bb      	adds	r3, r7, r2
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	227f      	movs	r2, #127	@ 0x7f
 801b4b4:	401a      	ands	r2, r3
 801b4b6:	0013      	movs	r3, r2
 801b4b8:	009b      	lsls	r3, r3, #2
 801b4ba:	189b      	adds	r3, r3, r2
 801b4bc:	009b      	lsls	r3, r3, #2
 801b4be:	3310      	adds	r3, #16
 801b4c0:	687a      	ldr	r2, [r7, #4]
 801b4c2:	18d3      	adds	r3, r2, r3
 801b4c4:	3304      	adds	r3, #4
 801b4c6:	e00d      	b.n	801b4e4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b4c8:	230e      	movs	r3, #14
 801b4ca:	18fb      	adds	r3, r7, r3
 801b4cc:	781b      	ldrb	r3, [r3, #0]
 801b4ce:	227f      	movs	r2, #127	@ 0x7f
 801b4d0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b4d2:	0013      	movs	r3, r2
 801b4d4:	009b      	lsls	r3, r3, #2
 801b4d6:	189b      	adds	r3, r3, r2
 801b4d8:	009b      	lsls	r3, r3, #2
 801b4da:	3351      	adds	r3, #81	@ 0x51
 801b4dc:	33ff      	adds	r3, #255	@ 0xff
 801b4de:	687a      	ldr	r2, [r7, #4]
 801b4e0:	18d3      	adds	r3, r2, r3
 801b4e2:	3304      	adds	r3, #4
 801b4e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b4e6:	68bb      	ldr	r3, [r7, #8]
 801b4e8:	2200      	movs	r2, #0
 801b4ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b4ec:	68b9      	ldr	r1, [r7, #8]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	2202      	movs	r2, #2
 801b4f2:	0018      	movs	r0, r3
 801b4f4:	f000 fcab 	bl	801be4e <USBD_CtlSendData>
              break;
 801b4f8:	e080      	b.n	801b5fc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b4fa:	220e      	movs	r2, #14
 801b4fc:	18bb      	adds	r3, r7, r2
 801b4fe:	781b      	ldrb	r3, [r3, #0]
 801b500:	b25b      	sxtb	r3, r3
 801b502:	2b00      	cmp	r3, #0
 801b504:	da14      	bge.n	801b530 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b506:	18bb      	adds	r3, r7, r2
 801b508:	781b      	ldrb	r3, [r3, #0]
 801b50a:	220f      	movs	r2, #15
 801b50c:	401a      	ands	r2, r3
 801b50e:	6879      	ldr	r1, [r7, #4]
 801b510:	0013      	movs	r3, r2
 801b512:	009b      	lsls	r3, r3, #2
 801b514:	189b      	adds	r3, r3, r2
 801b516:	009b      	lsls	r3, r3, #2
 801b518:	18cb      	adds	r3, r1, r3
 801b51a:	3318      	adds	r3, #24
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d11e      	bne.n	801b560 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b522:	683a      	ldr	r2, [r7, #0]
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	0011      	movs	r1, r2
 801b528:	0018      	movs	r0, r3
 801b52a:	f000 fc12 	bl	801bd52 <USBD_CtlError>
                  break;
 801b52e:	e065      	b.n	801b5fc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b530:	230e      	movs	r3, #14
 801b532:	18fb      	adds	r3, r7, r3
 801b534:	781b      	ldrb	r3, [r3, #0]
 801b536:	220f      	movs	r2, #15
 801b538:	401a      	ands	r2, r3
 801b53a:	6878      	ldr	r0, [r7, #4]
 801b53c:	23ac      	movs	r3, #172	@ 0xac
 801b53e:	0059      	lsls	r1, r3, #1
 801b540:	0013      	movs	r3, r2
 801b542:	009b      	lsls	r3, r3, #2
 801b544:	189b      	adds	r3, r3, r2
 801b546:	009b      	lsls	r3, r3, #2
 801b548:	18c3      	adds	r3, r0, r3
 801b54a:	185b      	adds	r3, r3, r1
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d106      	bne.n	801b560 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b552:	683a      	ldr	r2, [r7, #0]
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	0011      	movs	r1, r2
 801b558:	0018      	movs	r0, r3
 801b55a:	f000 fbfa 	bl	801bd52 <USBD_CtlError>
                  break;
 801b55e:	e04d      	b.n	801b5fc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b560:	220e      	movs	r2, #14
 801b562:	18bb      	adds	r3, r7, r2
 801b564:	781b      	ldrb	r3, [r3, #0]
 801b566:	b25b      	sxtb	r3, r3
 801b568:	2b00      	cmp	r3, #0
 801b56a:	da0c      	bge.n	801b586 <USBD_StdEPReq+0x2c8>
 801b56c:	18bb      	adds	r3, r7, r2
 801b56e:	781b      	ldrb	r3, [r3, #0]
 801b570:	227f      	movs	r2, #127	@ 0x7f
 801b572:	401a      	ands	r2, r3
 801b574:	0013      	movs	r3, r2
 801b576:	009b      	lsls	r3, r3, #2
 801b578:	189b      	adds	r3, r3, r2
 801b57a:	009b      	lsls	r3, r3, #2
 801b57c:	3310      	adds	r3, #16
 801b57e:	687a      	ldr	r2, [r7, #4]
 801b580:	18d3      	adds	r3, r2, r3
 801b582:	3304      	adds	r3, #4
 801b584:	e00d      	b.n	801b5a2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b586:	230e      	movs	r3, #14
 801b588:	18fb      	adds	r3, r7, r3
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	227f      	movs	r2, #127	@ 0x7f
 801b58e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b590:	0013      	movs	r3, r2
 801b592:	009b      	lsls	r3, r3, #2
 801b594:	189b      	adds	r3, r3, r2
 801b596:	009b      	lsls	r3, r3, #2
 801b598:	3351      	adds	r3, #81	@ 0x51
 801b59a:	33ff      	adds	r3, #255	@ 0xff
 801b59c:	687a      	ldr	r2, [r7, #4]
 801b59e:	18d3      	adds	r3, r2, r3
 801b5a0:	3304      	adds	r3, #4
 801b5a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b5a4:	220e      	movs	r2, #14
 801b5a6:	18bb      	adds	r3, r7, r2
 801b5a8:	781b      	ldrb	r3, [r3, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d003      	beq.n	801b5b6 <USBD_StdEPReq+0x2f8>
 801b5ae:	18bb      	adds	r3, r7, r2
 801b5b0:	781b      	ldrb	r3, [r3, #0]
 801b5b2:	2b80      	cmp	r3, #128	@ 0x80
 801b5b4:	d103      	bne.n	801b5be <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b5b6:	68bb      	ldr	r3, [r7, #8]
 801b5b8:	2200      	movs	r2, #0
 801b5ba:	601a      	str	r2, [r3, #0]
 801b5bc:	e010      	b.n	801b5e0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b5be:	230e      	movs	r3, #14
 801b5c0:	18fb      	adds	r3, r7, r3
 801b5c2:	781a      	ldrb	r2, [r3, #0]
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	0011      	movs	r1, r2
 801b5c8:	0018      	movs	r0, r3
 801b5ca:	f001 f940 	bl	801c84e <USBD_LL_IsStallEP>
 801b5ce:	1e03      	subs	r3, r0, #0
 801b5d0:	d003      	beq.n	801b5da <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b5d2:	68bb      	ldr	r3, [r7, #8]
 801b5d4:	2201      	movs	r2, #1
 801b5d6:	601a      	str	r2, [r3, #0]
 801b5d8:	e002      	b.n	801b5e0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b5da:	68bb      	ldr	r3, [r7, #8]
 801b5dc:	2200      	movs	r2, #0
 801b5de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b5e0:	68b9      	ldr	r1, [r7, #8]
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	2202      	movs	r2, #2
 801b5e6:	0018      	movs	r0, r3
 801b5e8:	f000 fc31 	bl	801be4e <USBD_CtlSendData>
              break;
 801b5ec:	e006      	b.n	801b5fc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b5ee:	683a      	ldr	r2, [r7, #0]
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	0011      	movs	r1, r2
 801b5f4:	0018      	movs	r0, r3
 801b5f6:	f000 fbac 	bl	801bd52 <USBD_CtlError>
              break;
 801b5fa:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b5fc:	e006      	b.n	801b60c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b5fe:	683a      	ldr	r2, [r7, #0]
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	0011      	movs	r1, r2
 801b604:	0018      	movs	r0, r3
 801b606:	f000 fba4 	bl	801bd52 <USBD_CtlError>
          break;
 801b60a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b60c:	e006      	b.n	801b61c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b60e:	683a      	ldr	r2, [r7, #0]
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	0011      	movs	r1, r2
 801b614:	0018      	movs	r0, r3
 801b616:	f000 fb9c 	bl	801bd52 <USBD_CtlError>
      break;
 801b61a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b61c:	230f      	movs	r3, #15
 801b61e:	18fb      	adds	r3, r7, r3
 801b620:	781b      	ldrb	r3, [r3, #0]
}
 801b622:	0018      	movs	r0, r3
 801b624:	46bd      	mov	sp, r7
 801b626:	b004      	add	sp, #16
 801b628:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b62c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b084      	sub	sp, #16
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b636:	2308      	movs	r3, #8
 801b638:	18fb      	adds	r3, r7, r3
 801b63a:	2200      	movs	r2, #0
 801b63c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b63e:	2300      	movs	r3, #0
 801b640:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b642:	230b      	movs	r3, #11
 801b644:	18fb      	adds	r3, r7, r3
 801b646:	2200      	movs	r2, #0
 801b648:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b64a:	683b      	ldr	r3, [r7, #0]
 801b64c:	885b      	ldrh	r3, [r3, #2]
 801b64e:	0a1b      	lsrs	r3, r3, #8
 801b650:	b29b      	uxth	r3, r3
 801b652:	2b07      	cmp	r3, #7
 801b654:	d900      	bls.n	801b658 <USBD_GetDescriptor+0x2c>
 801b656:	e159      	b.n	801b90c <USBD_GetDescriptor+0x2e0>
 801b658:	009a      	lsls	r2, r3, #2
 801b65a:	4bcb      	ldr	r3, [pc, #812]	@ (801b988 <USBD_GetDescriptor+0x35c>)
 801b65c:	18d3      	adds	r3, r2, r3
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b662:	687a      	ldr	r2, [r7, #4]
 801b664:	23ac      	movs	r3, #172	@ 0xac
 801b666:	009b      	lsls	r3, r3, #2
 801b668:	58d3      	ldr	r3, [r2, r3]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	687a      	ldr	r2, [r7, #4]
 801b66e:	7c12      	ldrb	r2, [r2, #16]
 801b670:	2108      	movs	r1, #8
 801b672:	1879      	adds	r1, r7, r1
 801b674:	0010      	movs	r0, r2
 801b676:	4798      	blx	r3
 801b678:	0003      	movs	r3, r0
 801b67a:	60fb      	str	r3, [r7, #12]
      break;
 801b67c:	e153      	b.n	801b926 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	7c1b      	ldrb	r3, [r3, #16]
 801b682:	2b00      	cmp	r3, #0
 801b684:	d10f      	bne.n	801b6a6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b686:	687a      	ldr	r2, [r7, #4]
 801b688:	23ad      	movs	r3, #173	@ 0xad
 801b68a:	009b      	lsls	r3, r3, #2
 801b68c:	58d3      	ldr	r3, [r2, r3]
 801b68e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b690:	2208      	movs	r2, #8
 801b692:	18ba      	adds	r2, r7, r2
 801b694:	0010      	movs	r0, r2
 801b696:	4798      	blx	r3
 801b698:	0003      	movs	r3, r0
 801b69a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	3301      	adds	r3, #1
 801b6a0:	2202      	movs	r2, #2
 801b6a2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b6a4:	e13f      	b.n	801b926 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b6a6:	687a      	ldr	r2, [r7, #4]
 801b6a8:	23ad      	movs	r3, #173	@ 0xad
 801b6aa:	009b      	lsls	r3, r3, #2
 801b6ac:	58d3      	ldr	r3, [r2, r3]
 801b6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6b0:	2208      	movs	r2, #8
 801b6b2:	18ba      	adds	r2, r7, r2
 801b6b4:	0010      	movs	r0, r2
 801b6b6:	4798      	blx	r3
 801b6b8:	0003      	movs	r3, r0
 801b6ba:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	3301      	adds	r3, #1
 801b6c0:	2202      	movs	r2, #2
 801b6c2:	701a      	strb	r2, [r3, #0]
      break;
 801b6c4:	e12f      	b.n	801b926 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b6c6:	683b      	ldr	r3, [r7, #0]
 801b6c8:	885b      	ldrh	r3, [r3, #2]
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	2b05      	cmp	r3, #5
 801b6ce:	d900      	bls.n	801b6d2 <USBD_GetDescriptor+0xa6>
 801b6d0:	e0d0      	b.n	801b874 <USBD_GetDescriptor+0x248>
 801b6d2:	009a      	lsls	r2, r3, #2
 801b6d4:	4bad      	ldr	r3, [pc, #692]	@ (801b98c <USBD_GetDescriptor+0x360>)
 801b6d6:	18d3      	adds	r3, r2, r3
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b6dc:	687a      	ldr	r2, [r7, #4]
 801b6de:	23ac      	movs	r3, #172	@ 0xac
 801b6e0:	009b      	lsls	r3, r3, #2
 801b6e2:	58d3      	ldr	r3, [r2, r3]
 801b6e4:	685b      	ldr	r3, [r3, #4]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d00d      	beq.n	801b706 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b6ea:	687a      	ldr	r2, [r7, #4]
 801b6ec:	23ac      	movs	r3, #172	@ 0xac
 801b6ee:	009b      	lsls	r3, r3, #2
 801b6f0:	58d3      	ldr	r3, [r2, r3]
 801b6f2:	685b      	ldr	r3, [r3, #4]
 801b6f4:	687a      	ldr	r2, [r7, #4]
 801b6f6:	7c12      	ldrb	r2, [r2, #16]
 801b6f8:	2108      	movs	r1, #8
 801b6fa:	1879      	adds	r1, r7, r1
 801b6fc:	0010      	movs	r0, r2
 801b6fe:	4798      	blx	r3
 801b700:	0003      	movs	r3, r0
 801b702:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b704:	e0c3      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b706:	683a      	ldr	r2, [r7, #0]
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	0011      	movs	r1, r2
 801b70c:	0018      	movs	r0, r3
 801b70e:	f000 fb20 	bl	801bd52 <USBD_CtlError>
            err++;
 801b712:	210b      	movs	r1, #11
 801b714:	187b      	adds	r3, r7, r1
 801b716:	781a      	ldrb	r2, [r3, #0]
 801b718:	187b      	adds	r3, r7, r1
 801b71a:	3201      	adds	r2, #1
 801b71c:	701a      	strb	r2, [r3, #0]
          break;
 801b71e:	e0b6      	b.n	801b88e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b720:	687a      	ldr	r2, [r7, #4]
 801b722:	23ac      	movs	r3, #172	@ 0xac
 801b724:	009b      	lsls	r3, r3, #2
 801b726:	58d3      	ldr	r3, [r2, r3]
 801b728:	689b      	ldr	r3, [r3, #8]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d00d      	beq.n	801b74a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	23ac      	movs	r3, #172	@ 0xac
 801b732:	009b      	lsls	r3, r3, #2
 801b734:	58d3      	ldr	r3, [r2, r3]
 801b736:	689b      	ldr	r3, [r3, #8]
 801b738:	687a      	ldr	r2, [r7, #4]
 801b73a:	7c12      	ldrb	r2, [r2, #16]
 801b73c:	2108      	movs	r1, #8
 801b73e:	1879      	adds	r1, r7, r1
 801b740:	0010      	movs	r0, r2
 801b742:	4798      	blx	r3
 801b744:	0003      	movs	r3, r0
 801b746:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b748:	e0a1      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b74a:	683a      	ldr	r2, [r7, #0]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	0011      	movs	r1, r2
 801b750:	0018      	movs	r0, r3
 801b752:	f000 fafe 	bl	801bd52 <USBD_CtlError>
            err++;
 801b756:	210b      	movs	r1, #11
 801b758:	187b      	adds	r3, r7, r1
 801b75a:	781a      	ldrb	r2, [r3, #0]
 801b75c:	187b      	adds	r3, r7, r1
 801b75e:	3201      	adds	r2, #1
 801b760:	701a      	strb	r2, [r3, #0]
          break;
 801b762:	e094      	b.n	801b88e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b764:	687a      	ldr	r2, [r7, #4]
 801b766:	23ac      	movs	r3, #172	@ 0xac
 801b768:	009b      	lsls	r3, r3, #2
 801b76a:	58d3      	ldr	r3, [r2, r3]
 801b76c:	68db      	ldr	r3, [r3, #12]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d00d      	beq.n	801b78e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b772:	687a      	ldr	r2, [r7, #4]
 801b774:	23ac      	movs	r3, #172	@ 0xac
 801b776:	009b      	lsls	r3, r3, #2
 801b778:	58d3      	ldr	r3, [r2, r3]
 801b77a:	68db      	ldr	r3, [r3, #12]
 801b77c:	687a      	ldr	r2, [r7, #4]
 801b77e:	7c12      	ldrb	r2, [r2, #16]
 801b780:	2108      	movs	r1, #8
 801b782:	1879      	adds	r1, r7, r1
 801b784:	0010      	movs	r0, r2
 801b786:	4798      	blx	r3
 801b788:	0003      	movs	r3, r0
 801b78a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b78c:	e07f      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b78e:	683a      	ldr	r2, [r7, #0]
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	0011      	movs	r1, r2
 801b794:	0018      	movs	r0, r3
 801b796:	f000 fadc 	bl	801bd52 <USBD_CtlError>
            err++;
 801b79a:	210b      	movs	r1, #11
 801b79c:	187b      	adds	r3, r7, r1
 801b79e:	781a      	ldrb	r2, [r3, #0]
 801b7a0:	187b      	adds	r3, r7, r1
 801b7a2:	3201      	adds	r2, #1
 801b7a4:	701a      	strb	r2, [r3, #0]
          break;
 801b7a6:	e072      	b.n	801b88e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b7a8:	687a      	ldr	r2, [r7, #4]
 801b7aa:	23ac      	movs	r3, #172	@ 0xac
 801b7ac:	009b      	lsls	r3, r3, #2
 801b7ae:	58d3      	ldr	r3, [r2, r3]
 801b7b0:	691b      	ldr	r3, [r3, #16]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d00d      	beq.n	801b7d2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b7b6:	687a      	ldr	r2, [r7, #4]
 801b7b8:	23ac      	movs	r3, #172	@ 0xac
 801b7ba:	009b      	lsls	r3, r3, #2
 801b7bc:	58d3      	ldr	r3, [r2, r3]
 801b7be:	691b      	ldr	r3, [r3, #16]
 801b7c0:	687a      	ldr	r2, [r7, #4]
 801b7c2:	7c12      	ldrb	r2, [r2, #16]
 801b7c4:	2108      	movs	r1, #8
 801b7c6:	1879      	adds	r1, r7, r1
 801b7c8:	0010      	movs	r0, r2
 801b7ca:	4798      	blx	r3
 801b7cc:	0003      	movs	r3, r0
 801b7ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b7d0:	e05d      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b7d2:	683a      	ldr	r2, [r7, #0]
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	0011      	movs	r1, r2
 801b7d8:	0018      	movs	r0, r3
 801b7da:	f000 faba 	bl	801bd52 <USBD_CtlError>
            err++;
 801b7de:	210b      	movs	r1, #11
 801b7e0:	187b      	adds	r3, r7, r1
 801b7e2:	781a      	ldrb	r2, [r3, #0]
 801b7e4:	187b      	adds	r3, r7, r1
 801b7e6:	3201      	adds	r2, #1
 801b7e8:	701a      	strb	r2, [r3, #0]
          break;
 801b7ea:	e050      	b.n	801b88e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b7ec:	687a      	ldr	r2, [r7, #4]
 801b7ee:	23ac      	movs	r3, #172	@ 0xac
 801b7f0:	009b      	lsls	r3, r3, #2
 801b7f2:	58d3      	ldr	r3, [r2, r3]
 801b7f4:	695b      	ldr	r3, [r3, #20]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d00d      	beq.n	801b816 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b7fa:	687a      	ldr	r2, [r7, #4]
 801b7fc:	23ac      	movs	r3, #172	@ 0xac
 801b7fe:	009b      	lsls	r3, r3, #2
 801b800:	58d3      	ldr	r3, [r2, r3]
 801b802:	695b      	ldr	r3, [r3, #20]
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	7c12      	ldrb	r2, [r2, #16]
 801b808:	2108      	movs	r1, #8
 801b80a:	1879      	adds	r1, r7, r1
 801b80c:	0010      	movs	r0, r2
 801b80e:	4798      	blx	r3
 801b810:	0003      	movs	r3, r0
 801b812:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b814:	e03b      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b816:	683a      	ldr	r2, [r7, #0]
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	0011      	movs	r1, r2
 801b81c:	0018      	movs	r0, r3
 801b81e:	f000 fa98 	bl	801bd52 <USBD_CtlError>
            err++;
 801b822:	210b      	movs	r1, #11
 801b824:	187b      	adds	r3, r7, r1
 801b826:	781a      	ldrb	r2, [r3, #0]
 801b828:	187b      	adds	r3, r7, r1
 801b82a:	3201      	adds	r2, #1
 801b82c:	701a      	strb	r2, [r3, #0]
          break;
 801b82e:	e02e      	b.n	801b88e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	23ac      	movs	r3, #172	@ 0xac
 801b834:	009b      	lsls	r3, r3, #2
 801b836:	58d3      	ldr	r3, [r2, r3]
 801b838:	699b      	ldr	r3, [r3, #24]
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d00d      	beq.n	801b85a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b83e:	687a      	ldr	r2, [r7, #4]
 801b840:	23ac      	movs	r3, #172	@ 0xac
 801b842:	009b      	lsls	r3, r3, #2
 801b844:	58d3      	ldr	r3, [r2, r3]
 801b846:	699b      	ldr	r3, [r3, #24]
 801b848:	687a      	ldr	r2, [r7, #4]
 801b84a:	7c12      	ldrb	r2, [r2, #16]
 801b84c:	2108      	movs	r1, #8
 801b84e:	1879      	adds	r1, r7, r1
 801b850:	0010      	movs	r0, r2
 801b852:	4798      	blx	r3
 801b854:	0003      	movs	r3, r0
 801b856:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b858:	e019      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b85a:	683a      	ldr	r2, [r7, #0]
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	0011      	movs	r1, r2
 801b860:	0018      	movs	r0, r3
 801b862:	f000 fa76 	bl	801bd52 <USBD_CtlError>
            err++;
 801b866:	210b      	movs	r1, #11
 801b868:	187b      	adds	r3, r7, r1
 801b86a:	781a      	ldrb	r2, [r3, #0]
 801b86c:	187b      	adds	r3, r7, r1
 801b86e:	3201      	adds	r2, #1
 801b870:	701a      	strb	r2, [r3, #0]
          break;
 801b872:	e00c      	b.n	801b88e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801b874:	683a      	ldr	r2, [r7, #0]
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	0011      	movs	r1, r2
 801b87a:	0018      	movs	r0, r3
 801b87c:	f000 fa69 	bl	801bd52 <USBD_CtlError>
          err++;
 801b880:	210b      	movs	r1, #11
 801b882:	187b      	adds	r3, r7, r1
 801b884:	781a      	ldrb	r2, [r3, #0]
 801b886:	187b      	adds	r3, r7, r1
 801b888:	3201      	adds	r2, #1
 801b88a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801b88c:	e04b      	b.n	801b926 <USBD_GetDescriptor+0x2fa>
 801b88e:	e04a      	b.n	801b926 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	7c1b      	ldrb	r3, [r3, #16]
 801b894:	2b00      	cmp	r3, #0
 801b896:	d10b      	bne.n	801b8b0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b898:	687a      	ldr	r2, [r7, #4]
 801b89a:	23ad      	movs	r3, #173	@ 0xad
 801b89c:	009b      	lsls	r3, r3, #2
 801b89e:	58d3      	ldr	r3, [r2, r3]
 801b8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b8a2:	2208      	movs	r2, #8
 801b8a4:	18ba      	adds	r2, r7, r2
 801b8a6:	0010      	movs	r0, r2
 801b8a8:	4798      	blx	r3
 801b8aa:	0003      	movs	r3, r0
 801b8ac:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b8ae:	e03a      	b.n	801b926 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b8b0:	683a      	ldr	r2, [r7, #0]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	0011      	movs	r1, r2
 801b8b6:	0018      	movs	r0, r3
 801b8b8:	f000 fa4b 	bl	801bd52 <USBD_CtlError>
        err++;
 801b8bc:	210b      	movs	r1, #11
 801b8be:	187b      	adds	r3, r7, r1
 801b8c0:	781a      	ldrb	r2, [r3, #0]
 801b8c2:	187b      	adds	r3, r7, r1
 801b8c4:	3201      	adds	r2, #1
 801b8c6:	701a      	strb	r2, [r3, #0]
      break;
 801b8c8:	e02d      	b.n	801b926 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	7c1b      	ldrb	r3, [r3, #16]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d10f      	bne.n	801b8f2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b8d2:	687a      	ldr	r2, [r7, #4]
 801b8d4:	23ad      	movs	r3, #173	@ 0xad
 801b8d6:	009b      	lsls	r3, r3, #2
 801b8d8:	58d3      	ldr	r3, [r2, r3]
 801b8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b8dc:	2208      	movs	r2, #8
 801b8de:	18ba      	adds	r2, r7, r2
 801b8e0:	0010      	movs	r0, r2
 801b8e2:	4798      	blx	r3
 801b8e4:	0003      	movs	r3, r0
 801b8e6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	3301      	adds	r3, #1
 801b8ec:	2207      	movs	r2, #7
 801b8ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b8f0:	e019      	b.n	801b926 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b8f2:	683a      	ldr	r2, [r7, #0]
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	0011      	movs	r1, r2
 801b8f8:	0018      	movs	r0, r3
 801b8fa:	f000 fa2a 	bl	801bd52 <USBD_CtlError>
        err++;
 801b8fe:	210b      	movs	r1, #11
 801b900:	187b      	adds	r3, r7, r1
 801b902:	781a      	ldrb	r2, [r3, #0]
 801b904:	187b      	adds	r3, r7, r1
 801b906:	3201      	adds	r2, #1
 801b908:	701a      	strb	r2, [r3, #0]
      break;
 801b90a:	e00c      	b.n	801b926 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801b90c:	683a      	ldr	r2, [r7, #0]
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	0011      	movs	r1, r2
 801b912:	0018      	movs	r0, r3
 801b914:	f000 fa1d 	bl	801bd52 <USBD_CtlError>
      err++;
 801b918:	210b      	movs	r1, #11
 801b91a:	187b      	adds	r3, r7, r1
 801b91c:	781a      	ldrb	r2, [r3, #0]
 801b91e:	187b      	adds	r3, r7, r1
 801b920:	3201      	adds	r2, #1
 801b922:	701a      	strb	r2, [r3, #0]
      break;
 801b924:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801b926:	230b      	movs	r3, #11
 801b928:	18fb      	adds	r3, r7, r3
 801b92a:	781b      	ldrb	r3, [r3, #0]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d127      	bne.n	801b980 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801b930:	2108      	movs	r1, #8
 801b932:	187b      	adds	r3, r7, r1
 801b934:	881b      	ldrh	r3, [r3, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	d019      	beq.n	801b96e <USBD_GetDescriptor+0x342>
 801b93a:	683b      	ldr	r3, [r7, #0]
 801b93c:	88db      	ldrh	r3, [r3, #6]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d015      	beq.n	801b96e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801b942:	683b      	ldr	r3, [r7, #0]
 801b944:	88da      	ldrh	r2, [r3, #6]
 801b946:	187b      	adds	r3, r7, r1
 801b948:	881b      	ldrh	r3, [r3, #0]
 801b94a:	1c18      	adds	r0, r3, #0
 801b94c:	1c11      	adds	r1, r2, #0
 801b94e:	b28a      	uxth	r2, r1
 801b950:	b283      	uxth	r3, r0
 801b952:	429a      	cmp	r2, r3
 801b954:	d900      	bls.n	801b958 <USBD_GetDescriptor+0x32c>
 801b956:	1c01      	adds	r1, r0, #0
 801b958:	b28a      	uxth	r2, r1
 801b95a:	2108      	movs	r1, #8
 801b95c:	187b      	adds	r3, r7, r1
 801b95e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b960:	187b      	adds	r3, r7, r1
 801b962:	881a      	ldrh	r2, [r3, #0]
 801b964:	68f9      	ldr	r1, [r7, #12]
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	0018      	movs	r0, r3
 801b96a:	f000 fa70 	bl	801be4e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801b96e:	683b      	ldr	r3, [r7, #0]
 801b970:	88db      	ldrh	r3, [r3, #6]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d105      	bne.n	801b982 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	0018      	movs	r0, r3
 801b97a:	f000 fad2 	bl	801bf22 <USBD_CtlSendStatus>
 801b97e:	e000      	b.n	801b982 <USBD_GetDescriptor+0x356>
    return;
 801b980:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b982:	46bd      	mov	sp, r7
 801b984:	b004      	add	sp, #16
 801b986:	bd80      	pop	{r7, pc}
 801b988:	080246a0 	.word	0x080246a0
 801b98c:	080246c0 	.word	0x080246c0

0801b990 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b990:	b590      	push	{r4, r7, lr}
 801b992:	b085      	sub	sp, #20
 801b994:	af00      	add	r7, sp, #0
 801b996:	6078      	str	r0, [r7, #4]
 801b998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b99a:	683b      	ldr	r3, [r7, #0]
 801b99c:	889b      	ldrh	r3, [r3, #4]
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d13d      	bne.n	801ba1e <USBD_SetAddress+0x8e>
 801b9a2:	683b      	ldr	r3, [r7, #0]
 801b9a4:	88db      	ldrh	r3, [r3, #6]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d139      	bne.n	801ba1e <USBD_SetAddress+0x8e>
 801b9aa:	683b      	ldr	r3, [r7, #0]
 801b9ac:	885b      	ldrh	r3, [r3, #2]
 801b9ae:	2b7f      	cmp	r3, #127	@ 0x7f
 801b9b0:	d835      	bhi.n	801ba1e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b9b2:	683b      	ldr	r3, [r7, #0]
 801b9b4:	885b      	ldrh	r3, [r3, #2]
 801b9b6:	b2da      	uxtb	r2, r3
 801b9b8:	230f      	movs	r3, #15
 801b9ba:	18fb      	adds	r3, r7, r3
 801b9bc:	217f      	movs	r1, #127	@ 0x7f
 801b9be:	400a      	ands	r2, r1
 801b9c0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b9c2:	687a      	ldr	r2, [r7, #4]
 801b9c4:	23a7      	movs	r3, #167	@ 0xa7
 801b9c6:	009b      	lsls	r3, r3, #2
 801b9c8:	5cd3      	ldrb	r3, [r2, r3]
 801b9ca:	2b03      	cmp	r3, #3
 801b9cc:	d106      	bne.n	801b9dc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801b9ce:	683a      	ldr	r2, [r7, #0]
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	0011      	movs	r1, r2
 801b9d4:	0018      	movs	r0, r3
 801b9d6:	f000 f9bc 	bl	801bd52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b9da:	e027      	b.n	801ba2c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	240f      	movs	r4, #15
 801b9e0:	193a      	adds	r2, r7, r4
 801b9e2:	4914      	ldr	r1, [pc, #80]	@ (801ba34 <USBD_SetAddress+0xa4>)
 801b9e4:	7812      	ldrb	r2, [r2, #0]
 801b9e6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b9e8:	193b      	adds	r3, r7, r4
 801b9ea:	781a      	ldrb	r2, [r3, #0]
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	0011      	movs	r1, r2
 801b9f0:	0018      	movs	r0, r3
 801b9f2:	f000 ff5d 	bl	801c8b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	0018      	movs	r0, r3
 801b9fa:	f000 fa92 	bl	801bf22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b9fe:	193b      	adds	r3, r7, r4
 801ba00:	781b      	ldrb	r3, [r3, #0]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d005      	beq.n	801ba12 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801ba06:	687a      	ldr	r2, [r7, #4]
 801ba08:	23a7      	movs	r3, #167	@ 0xa7
 801ba0a:	009b      	lsls	r3, r3, #2
 801ba0c:	2102      	movs	r1, #2
 801ba0e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ba10:	e00c      	b.n	801ba2c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801ba12:	687a      	ldr	r2, [r7, #4]
 801ba14:	23a7      	movs	r3, #167	@ 0xa7
 801ba16:	009b      	lsls	r3, r3, #2
 801ba18:	2101      	movs	r1, #1
 801ba1a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ba1c:	e006      	b.n	801ba2c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801ba1e:	683a      	ldr	r2, [r7, #0]
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	0011      	movs	r1, r2
 801ba24:	0018      	movs	r0, r3
 801ba26:	f000 f994 	bl	801bd52 <USBD_CtlError>
  }
}
 801ba2a:	46c0      	nop			@ (mov r8, r8)
 801ba2c:	46c0      	nop			@ (mov r8, r8)
 801ba2e:	46bd      	mov	sp, r7
 801ba30:	b005      	add	sp, #20
 801ba32:	bd90      	pop	{r4, r7, pc}
 801ba34:	0000029e 	.word	0x0000029e

0801ba38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ba38:	b580      	push	{r7, lr}
 801ba3a:	b082      	sub	sp, #8
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ba42:	683b      	ldr	r3, [r7, #0]
 801ba44:	885b      	ldrh	r3, [r3, #2]
 801ba46:	b2da      	uxtb	r2, r3
 801ba48:	4b4c      	ldr	r3, [pc, #304]	@ (801bb7c <USBD_SetConfig+0x144>)
 801ba4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ba4c:	4b4b      	ldr	r3, [pc, #300]	@ (801bb7c <USBD_SetConfig+0x144>)
 801ba4e:	781b      	ldrb	r3, [r3, #0]
 801ba50:	2b01      	cmp	r3, #1
 801ba52:	d906      	bls.n	801ba62 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ba54:	683a      	ldr	r2, [r7, #0]
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	0011      	movs	r1, r2
 801ba5a:	0018      	movs	r0, r3
 801ba5c:	f000 f979 	bl	801bd52 <USBD_CtlError>
 801ba60:	e088      	b.n	801bb74 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ba62:	687a      	ldr	r2, [r7, #4]
 801ba64:	23a7      	movs	r3, #167	@ 0xa7
 801ba66:	009b      	lsls	r3, r3, #2
 801ba68:	5cd3      	ldrb	r3, [r2, r3]
 801ba6a:	2b02      	cmp	r3, #2
 801ba6c:	d002      	beq.n	801ba74 <USBD_SetConfig+0x3c>
 801ba6e:	2b03      	cmp	r3, #3
 801ba70:	d029      	beq.n	801bac6 <USBD_SetConfig+0x8e>
 801ba72:	e071      	b.n	801bb58 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801ba74:	4b41      	ldr	r3, [pc, #260]	@ (801bb7c <USBD_SetConfig+0x144>)
 801ba76:	781b      	ldrb	r3, [r3, #0]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d01f      	beq.n	801babc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801ba7c:	4b3f      	ldr	r3, [pc, #252]	@ (801bb7c <USBD_SetConfig+0x144>)
 801ba7e:	781b      	ldrb	r3, [r3, #0]
 801ba80:	001a      	movs	r2, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ba86:	687a      	ldr	r2, [r7, #4]
 801ba88:	23a7      	movs	r3, #167	@ 0xa7
 801ba8a:	009b      	lsls	r3, r3, #2
 801ba8c:	2103      	movs	r1, #3
 801ba8e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ba90:	4b3a      	ldr	r3, [pc, #232]	@ (801bb7c <USBD_SetConfig+0x144>)
 801ba92:	781a      	ldrb	r2, [r3, #0]
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	0011      	movs	r1, r2
 801ba98:	0018      	movs	r0, r3
 801ba9a:	f7ff f8c6 	bl	801ac2a <USBD_SetClassConfig>
 801ba9e:	0003      	movs	r3, r0
 801baa0:	2b02      	cmp	r3, #2
 801baa2:	d106      	bne.n	801bab2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801baa4:	683a      	ldr	r2, [r7, #0]
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	0011      	movs	r1, r2
 801baaa:	0018      	movs	r0, r3
 801baac:	f000 f951 	bl	801bd52 <USBD_CtlError>
            return;
 801bab0:	e060      	b.n	801bb74 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	0018      	movs	r0, r3
 801bab6:	f000 fa34 	bl	801bf22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801baba:	e05b      	b.n	801bb74 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	0018      	movs	r0, r3
 801bac0:	f000 fa2f 	bl	801bf22 <USBD_CtlSendStatus>
        break;
 801bac4:	e056      	b.n	801bb74 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801bac6:	4b2d      	ldr	r3, [pc, #180]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d115      	bne.n	801bafa <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801bace:	687a      	ldr	r2, [r7, #4]
 801bad0:	23a7      	movs	r3, #167	@ 0xa7
 801bad2:	009b      	lsls	r3, r3, #2
 801bad4:	2102      	movs	r1, #2
 801bad6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801bad8:	4b28      	ldr	r3, [pc, #160]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	001a      	movs	r2, r3
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801bae2:	4b26      	ldr	r3, [pc, #152]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bae4:	781a      	ldrb	r2, [r3, #0]
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	0011      	movs	r1, r2
 801baea:	0018      	movs	r0, r3
 801baec:	f7ff f8c4 	bl	801ac78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	0018      	movs	r0, r3
 801baf4:	f000 fa15 	bl	801bf22 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801baf8:	e03c      	b.n	801bb74 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801bafa:	4b20      	ldr	r3, [pc, #128]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bafc:	781b      	ldrb	r3, [r3, #0]
 801bafe:	001a      	movs	r2, r3
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	685b      	ldr	r3, [r3, #4]
 801bb04:	429a      	cmp	r2, r3
 801bb06:	d022      	beq.n	801bb4e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	685b      	ldr	r3, [r3, #4]
 801bb0c:	b2da      	uxtb	r2, r3
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	0011      	movs	r1, r2
 801bb12:	0018      	movs	r0, r3
 801bb14:	f7ff f8b0 	bl	801ac78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801bb18:	4b18      	ldr	r3, [pc, #96]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bb1a:	781b      	ldrb	r3, [r3, #0]
 801bb1c:	001a      	movs	r2, r3
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801bb22:	4b16      	ldr	r3, [pc, #88]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bb24:	781a      	ldrb	r2, [r3, #0]
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	0011      	movs	r1, r2
 801bb2a:	0018      	movs	r0, r3
 801bb2c:	f7ff f87d 	bl	801ac2a <USBD_SetClassConfig>
 801bb30:	0003      	movs	r3, r0
 801bb32:	2b02      	cmp	r3, #2
 801bb34:	d106      	bne.n	801bb44 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	0011      	movs	r1, r2
 801bb3c:	0018      	movs	r0, r3
 801bb3e:	f000 f908 	bl	801bd52 <USBD_CtlError>
            return;
 801bb42:	e017      	b.n	801bb74 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	0018      	movs	r0, r3
 801bb48:	f000 f9eb 	bl	801bf22 <USBD_CtlSendStatus>
        break;
 801bb4c:	e012      	b.n	801bb74 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	0018      	movs	r0, r3
 801bb52:	f000 f9e6 	bl	801bf22 <USBD_CtlSendStatus>
        break;
 801bb56:	e00d      	b.n	801bb74 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801bb58:	683a      	ldr	r2, [r7, #0]
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	0011      	movs	r1, r2
 801bb5e:	0018      	movs	r0, r3
 801bb60:	f000 f8f7 	bl	801bd52 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801bb64:	4b05      	ldr	r3, [pc, #20]	@ (801bb7c <USBD_SetConfig+0x144>)
 801bb66:	781a      	ldrb	r2, [r3, #0]
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	0011      	movs	r1, r2
 801bb6c:	0018      	movs	r0, r3
 801bb6e:	f7ff f883 	bl	801ac78 <USBD_ClrClassConfig>
        break;
 801bb72:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bb74:	46bd      	mov	sp, r7
 801bb76:	b002      	add	sp, #8
 801bb78:	bd80      	pop	{r7, pc}
 801bb7a:	46c0      	nop			@ (mov r8, r8)
 801bb7c:	20002514 	.word	0x20002514

0801bb80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	b082      	sub	sp, #8
 801bb84:	af00      	add	r7, sp, #0
 801bb86:	6078      	str	r0, [r7, #4]
 801bb88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801bb8a:	683b      	ldr	r3, [r7, #0]
 801bb8c:	88db      	ldrh	r3, [r3, #6]
 801bb8e:	2b01      	cmp	r3, #1
 801bb90:	d006      	beq.n	801bba0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801bb92:	683a      	ldr	r2, [r7, #0]
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	0011      	movs	r1, r2
 801bb98:	0018      	movs	r0, r3
 801bb9a:	f000 f8da 	bl	801bd52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bb9e:	e026      	b.n	801bbee <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801bba0:	687a      	ldr	r2, [r7, #4]
 801bba2:	23a7      	movs	r3, #167	@ 0xa7
 801bba4:	009b      	lsls	r3, r3, #2
 801bba6:	5cd3      	ldrb	r3, [r2, r3]
 801bba8:	2b02      	cmp	r3, #2
 801bbaa:	dc02      	bgt.n	801bbb2 <USBD_GetConfig+0x32>
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	dc03      	bgt.n	801bbb8 <USBD_GetConfig+0x38>
 801bbb0:	e016      	b.n	801bbe0 <USBD_GetConfig+0x60>
 801bbb2:	2b03      	cmp	r3, #3
 801bbb4:	d00c      	beq.n	801bbd0 <USBD_GetConfig+0x50>
 801bbb6:	e013      	b.n	801bbe0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2200      	movs	r2, #0
 801bbbc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	3308      	adds	r3, #8
 801bbc2:	0019      	movs	r1, r3
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	2201      	movs	r2, #1
 801bbc8:	0018      	movs	r0, r3
 801bbca:	f000 f940 	bl	801be4e <USBD_CtlSendData>
        break;
 801bbce:	e00e      	b.n	801bbee <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	1d19      	adds	r1, r3, #4
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	2201      	movs	r2, #1
 801bbd8:	0018      	movs	r0, r3
 801bbda:	f000 f938 	bl	801be4e <USBD_CtlSendData>
        break;
 801bbde:	e006      	b.n	801bbee <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801bbe0:	683a      	ldr	r2, [r7, #0]
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	0011      	movs	r1, r2
 801bbe6:	0018      	movs	r0, r3
 801bbe8:	f000 f8b3 	bl	801bd52 <USBD_CtlError>
        break;
 801bbec:	46c0      	nop			@ (mov r8, r8)
}
 801bbee:	46c0      	nop			@ (mov r8, r8)
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	b002      	add	sp, #8
 801bbf4:	bd80      	pop	{r7, pc}

0801bbf6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bbf6:	b580      	push	{r7, lr}
 801bbf8:	b082      	sub	sp, #8
 801bbfa:	af00      	add	r7, sp, #0
 801bbfc:	6078      	str	r0, [r7, #4]
 801bbfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bc00:	687a      	ldr	r2, [r7, #4]
 801bc02:	23a7      	movs	r3, #167	@ 0xa7
 801bc04:	009b      	lsls	r3, r3, #2
 801bc06:	5cd3      	ldrb	r3, [r2, r3]
 801bc08:	3b01      	subs	r3, #1
 801bc0a:	2b02      	cmp	r3, #2
 801bc0c:	d822      	bhi.n	801bc54 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bc0e:	683b      	ldr	r3, [r7, #0]
 801bc10:	88db      	ldrh	r3, [r3, #6]
 801bc12:	2b02      	cmp	r3, #2
 801bc14:	d006      	beq.n	801bc24 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801bc16:	683a      	ldr	r2, [r7, #0]
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	0011      	movs	r1, r2
 801bc1c:	0018      	movs	r0, r3
 801bc1e:	f000 f898 	bl	801bd52 <USBD_CtlError>
        break;
 801bc22:	e01e      	b.n	801bc62 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	2201      	movs	r2, #1
 801bc28:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801bc2a:	687a      	ldr	r2, [r7, #4]
 801bc2c:	23a9      	movs	r3, #169	@ 0xa9
 801bc2e:	009b      	lsls	r3, r3, #2
 801bc30:	58d3      	ldr	r3, [r2, r3]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d005      	beq.n	801bc42 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	68db      	ldr	r3, [r3, #12]
 801bc3a:	2202      	movs	r2, #2
 801bc3c:	431a      	orrs	r2, r3
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	330c      	adds	r3, #12
 801bc46:	0019      	movs	r1, r3
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	2202      	movs	r2, #2
 801bc4c:	0018      	movs	r0, r3
 801bc4e:	f000 f8fe 	bl	801be4e <USBD_CtlSendData>
      break;
 801bc52:	e006      	b.n	801bc62 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801bc54:	683a      	ldr	r2, [r7, #0]
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	0011      	movs	r1, r2
 801bc5a:	0018      	movs	r0, r3
 801bc5c:	f000 f879 	bl	801bd52 <USBD_CtlError>
      break;
 801bc60:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bc62:	46c0      	nop			@ (mov r8, r8)
 801bc64:	46bd      	mov	sp, r7
 801bc66:	b002      	add	sp, #8
 801bc68:	bd80      	pop	{r7, pc}

0801bc6a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bc6a:	b580      	push	{r7, lr}
 801bc6c:	b082      	sub	sp, #8
 801bc6e:	af00      	add	r7, sp, #0
 801bc70:	6078      	str	r0, [r7, #4]
 801bc72:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bc74:	683b      	ldr	r3, [r7, #0]
 801bc76:	885b      	ldrh	r3, [r3, #2]
 801bc78:	2b01      	cmp	r3, #1
 801bc7a:	d108      	bne.n	801bc8e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801bc7c:	687a      	ldr	r2, [r7, #4]
 801bc7e:	23a9      	movs	r3, #169	@ 0xa9
 801bc80:	009b      	lsls	r3, r3, #2
 801bc82:	2101      	movs	r1, #1
 801bc84:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	0018      	movs	r0, r3
 801bc8a:	f000 f94a 	bl	801bf22 <USBD_CtlSendStatus>
  }
}
 801bc8e:	46c0      	nop			@ (mov r8, r8)
 801bc90:	46bd      	mov	sp, r7
 801bc92:	b002      	add	sp, #8
 801bc94:	bd80      	pop	{r7, pc}

0801bc96 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bc96:	b580      	push	{r7, lr}
 801bc98:	b082      	sub	sp, #8
 801bc9a:	af00      	add	r7, sp, #0
 801bc9c:	6078      	str	r0, [r7, #4]
 801bc9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bca0:	687a      	ldr	r2, [r7, #4]
 801bca2:	23a7      	movs	r3, #167	@ 0xa7
 801bca4:	009b      	lsls	r3, r3, #2
 801bca6:	5cd3      	ldrb	r3, [r2, r3]
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	2b02      	cmp	r3, #2
 801bcac:	d80d      	bhi.n	801bcca <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bcae:	683b      	ldr	r3, [r7, #0]
 801bcb0:	885b      	ldrh	r3, [r3, #2]
 801bcb2:	2b01      	cmp	r3, #1
 801bcb4:	d110      	bne.n	801bcd8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801bcb6:	687a      	ldr	r2, [r7, #4]
 801bcb8:	23a9      	movs	r3, #169	@ 0xa9
 801bcba:	009b      	lsls	r3, r3, #2
 801bcbc:	2100      	movs	r1, #0
 801bcbe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	0018      	movs	r0, r3
 801bcc4:	f000 f92d 	bl	801bf22 <USBD_CtlSendStatus>
      }
      break;
 801bcc8:	e006      	b.n	801bcd8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801bcca:	683a      	ldr	r2, [r7, #0]
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	0011      	movs	r1, r2
 801bcd0:	0018      	movs	r0, r3
 801bcd2:	f000 f83e 	bl	801bd52 <USBD_CtlError>
      break;
 801bcd6:	e000      	b.n	801bcda <USBD_ClrFeature+0x44>
      break;
 801bcd8:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bcda:	46c0      	nop			@ (mov r8, r8)
 801bcdc:	46bd      	mov	sp, r7
 801bcde:	b002      	add	sp, #8
 801bce0:	bd80      	pop	{r7, pc}

0801bce2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bce2:	b580      	push	{r7, lr}
 801bce4:	b082      	sub	sp, #8
 801bce6:	af00      	add	r7, sp, #0
 801bce8:	6078      	str	r0, [r7, #4]
 801bcea:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801bcec:	683b      	ldr	r3, [r7, #0]
 801bcee:	781a      	ldrb	r2, [r3, #0]
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bcf4:	683b      	ldr	r3, [r7, #0]
 801bcf6:	785a      	ldrb	r2, [r3, #1]
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	3302      	adds	r3, #2
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	001a      	movs	r2, r3
 801bd04:	683b      	ldr	r3, [r7, #0]
 801bd06:	3303      	adds	r3, #3
 801bd08:	781b      	ldrb	r3, [r3, #0]
 801bd0a:	021b      	lsls	r3, r3, #8
 801bd0c:	b29b      	uxth	r3, r3
 801bd0e:	18d3      	adds	r3, r2, r3
 801bd10:	b29a      	uxth	r2, r3
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bd16:	683b      	ldr	r3, [r7, #0]
 801bd18:	3304      	adds	r3, #4
 801bd1a:	781b      	ldrb	r3, [r3, #0]
 801bd1c:	001a      	movs	r2, r3
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	3305      	adds	r3, #5
 801bd22:	781b      	ldrb	r3, [r3, #0]
 801bd24:	021b      	lsls	r3, r3, #8
 801bd26:	b29b      	uxth	r3, r3
 801bd28:	18d3      	adds	r3, r2, r3
 801bd2a:	b29a      	uxth	r2, r3
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801bd30:	683b      	ldr	r3, [r7, #0]
 801bd32:	3306      	adds	r3, #6
 801bd34:	781b      	ldrb	r3, [r3, #0]
 801bd36:	001a      	movs	r2, r3
 801bd38:	683b      	ldr	r3, [r7, #0]
 801bd3a:	3307      	adds	r3, #7
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	021b      	lsls	r3, r3, #8
 801bd40:	b29b      	uxth	r3, r3
 801bd42:	18d3      	adds	r3, r2, r3
 801bd44:	b29a      	uxth	r2, r3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	80da      	strh	r2, [r3, #6]

}
 801bd4a:	46c0      	nop			@ (mov r8, r8)
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	b002      	add	sp, #8
 801bd50:	bd80      	pop	{r7, pc}

0801bd52 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801bd52:	b580      	push	{r7, lr}
 801bd54:	b082      	sub	sp, #8
 801bd56:	af00      	add	r7, sp, #0
 801bd58:	6078      	str	r0, [r7, #4]
 801bd5a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	2180      	movs	r1, #128	@ 0x80
 801bd60:	0018      	movs	r0, r3
 801bd62:	f000 fd1e 	bl	801c7a2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	2100      	movs	r1, #0
 801bd6a:	0018      	movs	r0, r3
 801bd6c:	f000 fd19 	bl	801c7a2 <USBD_LL_StallEP>
}
 801bd70:	46c0      	nop			@ (mov r8, r8)
 801bd72:	46bd      	mov	sp, r7
 801bd74:	b002      	add	sp, #8
 801bd76:	bd80      	pop	{r7, pc}

0801bd78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bd78:	b590      	push	{r4, r7, lr}
 801bd7a:	b087      	sub	sp, #28
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	60f8      	str	r0, [r7, #12]
 801bd80:	60b9      	str	r1, [r7, #8]
 801bd82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bd84:	2417      	movs	r4, #23
 801bd86:	193b      	adds	r3, r7, r4
 801bd88:	2200      	movs	r2, #0
 801bd8a:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	d03c      	beq.n	801be0c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	0018      	movs	r0, r3
 801bd96:	f000 f83d 	bl	801be14 <USBD_GetLen>
 801bd9a:	0003      	movs	r3, r0
 801bd9c:	3301      	adds	r3, #1
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	18db      	adds	r3, r3, r3
 801bda2:	b29a      	uxth	r2, r3
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801bda8:	193b      	adds	r3, r7, r4
 801bdaa:	781b      	ldrb	r3, [r3, #0]
 801bdac:	193a      	adds	r2, r7, r4
 801bdae:	1c59      	adds	r1, r3, #1
 801bdb0:	7011      	strb	r1, [r2, #0]
 801bdb2:	001a      	movs	r2, r3
 801bdb4:	68bb      	ldr	r3, [r7, #8]
 801bdb6:	189b      	adds	r3, r3, r2
 801bdb8:	687a      	ldr	r2, [r7, #4]
 801bdba:	7812      	ldrb	r2, [r2, #0]
 801bdbc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801bdbe:	193b      	adds	r3, r7, r4
 801bdc0:	781b      	ldrb	r3, [r3, #0]
 801bdc2:	193a      	adds	r2, r7, r4
 801bdc4:	1c59      	adds	r1, r3, #1
 801bdc6:	7011      	strb	r1, [r2, #0]
 801bdc8:	001a      	movs	r2, r3
 801bdca:	68bb      	ldr	r3, [r7, #8]
 801bdcc:	189b      	adds	r3, r3, r2
 801bdce:	2203      	movs	r2, #3
 801bdd0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801bdd2:	e017      	b.n	801be04 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	1c5a      	adds	r2, r3, #1
 801bdd8:	60fa      	str	r2, [r7, #12]
 801bdda:	2417      	movs	r4, #23
 801bddc:	193a      	adds	r2, r7, r4
 801bdde:	7812      	ldrb	r2, [r2, #0]
 801bde0:	1939      	adds	r1, r7, r4
 801bde2:	1c50      	adds	r0, r2, #1
 801bde4:	7008      	strb	r0, [r1, #0]
 801bde6:	0011      	movs	r1, r2
 801bde8:	68ba      	ldr	r2, [r7, #8]
 801bdea:	1852      	adds	r2, r2, r1
 801bdec:	781b      	ldrb	r3, [r3, #0]
 801bdee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801bdf0:	193b      	adds	r3, r7, r4
 801bdf2:	781b      	ldrb	r3, [r3, #0]
 801bdf4:	193a      	adds	r2, r7, r4
 801bdf6:	1c59      	adds	r1, r3, #1
 801bdf8:	7011      	strb	r1, [r2, #0]
 801bdfa:	001a      	movs	r2, r3
 801bdfc:	68bb      	ldr	r3, [r7, #8]
 801bdfe:	189b      	adds	r3, r3, r2
 801be00:	2200      	movs	r2, #0
 801be02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	781b      	ldrb	r3, [r3, #0]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d1e3      	bne.n	801bdd4 <USBD_GetString+0x5c>
    }
  }
}
 801be0c:	46c0      	nop			@ (mov r8, r8)
 801be0e:	46bd      	mov	sp, r7
 801be10:	b007      	add	sp, #28
 801be12:	bd90      	pop	{r4, r7, pc}

0801be14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b084      	sub	sp, #16
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801be1c:	230f      	movs	r3, #15
 801be1e:	18fb      	adds	r3, r7, r3
 801be20:	2200      	movs	r2, #0
 801be22:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801be24:	e008      	b.n	801be38 <USBD_GetLen+0x24>
  {
    len++;
 801be26:	210f      	movs	r1, #15
 801be28:	187b      	adds	r3, r7, r1
 801be2a:	781a      	ldrb	r2, [r3, #0]
 801be2c:	187b      	adds	r3, r7, r1
 801be2e:	3201      	adds	r2, #1
 801be30:	701a      	strb	r2, [r3, #0]
    buf++;
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	3301      	adds	r3, #1
 801be36:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	781b      	ldrb	r3, [r3, #0]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d1f2      	bne.n	801be26 <USBD_GetLen+0x12>
  }

  return len;
 801be40:	230f      	movs	r3, #15
 801be42:	18fb      	adds	r3, r7, r3
 801be44:	781b      	ldrb	r3, [r3, #0]
}
 801be46:	0018      	movs	r0, r3
 801be48:	46bd      	mov	sp, r7
 801be4a:	b004      	add	sp, #16
 801be4c:	bd80      	pop	{r7, pc}

0801be4e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801be4e:	b580      	push	{r7, lr}
 801be50:	b084      	sub	sp, #16
 801be52:	af00      	add	r7, sp, #0
 801be54:	60f8      	str	r0, [r7, #12]
 801be56:	60b9      	str	r1, [r7, #8]
 801be58:	1dbb      	adds	r3, r7, #6
 801be5a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801be5c:	68fa      	ldr	r2, [r7, #12]
 801be5e:	23a5      	movs	r3, #165	@ 0xa5
 801be60:	009b      	lsls	r3, r3, #2
 801be62:	2102      	movs	r1, #2
 801be64:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801be66:	1dbb      	adds	r3, r7, #6
 801be68:	881a      	ldrh	r2, [r3, #0]
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801be6e:	1dbb      	adds	r3, r7, #6
 801be70:	881a      	ldrh	r2, [r3, #0]
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801be76:	1dbb      	adds	r3, r7, #6
 801be78:	881b      	ldrh	r3, [r3, #0]
 801be7a:	68ba      	ldr	r2, [r7, #8]
 801be7c:	68f8      	ldr	r0, [r7, #12]
 801be7e:	2100      	movs	r1, #0
 801be80:	f000 fd41 	bl	801c906 <USBD_LL_Transmit>

  return USBD_OK;
 801be84:	2300      	movs	r3, #0
}
 801be86:	0018      	movs	r0, r3
 801be88:	46bd      	mov	sp, r7
 801be8a:	b004      	add	sp, #16
 801be8c:	bd80      	pop	{r7, pc}

0801be8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801be8e:	b580      	push	{r7, lr}
 801be90:	b084      	sub	sp, #16
 801be92:	af00      	add	r7, sp, #0
 801be94:	60f8      	str	r0, [r7, #12]
 801be96:	60b9      	str	r1, [r7, #8]
 801be98:	1dbb      	adds	r3, r7, #6
 801be9a:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801be9c:	1dbb      	adds	r3, r7, #6
 801be9e:	881b      	ldrh	r3, [r3, #0]
 801bea0:	68ba      	ldr	r2, [r7, #8]
 801bea2:	68f8      	ldr	r0, [r7, #12]
 801bea4:	2100      	movs	r1, #0
 801bea6:	f000 fd2e 	bl	801c906 <USBD_LL_Transmit>

  return USBD_OK;
 801beaa:	2300      	movs	r3, #0
}
 801beac:	0018      	movs	r0, r3
 801beae:	46bd      	mov	sp, r7
 801beb0:	b004      	add	sp, #16
 801beb2:	bd80      	pop	{r7, pc}

0801beb4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	b084      	sub	sp, #16
 801beb8:	af00      	add	r7, sp, #0
 801beba:	60f8      	str	r0, [r7, #12]
 801bebc:	60b9      	str	r1, [r7, #8]
 801bebe:	1dbb      	adds	r3, r7, #6
 801bec0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801bec2:	68fa      	ldr	r2, [r7, #12]
 801bec4:	23a5      	movs	r3, #165	@ 0xa5
 801bec6:	009b      	lsls	r3, r3, #2
 801bec8:	2103      	movs	r1, #3
 801beca:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801becc:	1dbb      	adds	r3, r7, #6
 801bece:	8819      	ldrh	r1, [r3, #0]
 801bed0:	68fa      	ldr	r2, [r7, #12]
 801bed2:	23ae      	movs	r3, #174	@ 0xae
 801bed4:	005b      	lsls	r3, r3, #1
 801bed6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801bed8:	1dbb      	adds	r3, r7, #6
 801beda:	8819      	ldrh	r1, [r3, #0]
 801bedc:	68fa      	ldr	r2, [r7, #12]
 801bede:	23b0      	movs	r3, #176	@ 0xb0
 801bee0:	005b      	lsls	r3, r3, #1
 801bee2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801bee4:	1dbb      	adds	r3, r7, #6
 801bee6:	881b      	ldrh	r3, [r3, #0]
 801bee8:	68ba      	ldr	r2, [r7, #8]
 801beea:	68f8      	ldr	r0, [r7, #12]
 801beec:	2100      	movs	r1, #0
 801beee:	f000 fd41 	bl	801c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bef2:	2300      	movs	r3, #0
}
 801bef4:	0018      	movs	r0, r3
 801bef6:	46bd      	mov	sp, r7
 801bef8:	b004      	add	sp, #16
 801befa:	bd80      	pop	{r7, pc}

0801befc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b084      	sub	sp, #16
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	60f8      	str	r0, [r7, #12]
 801bf04:	60b9      	str	r1, [r7, #8]
 801bf06:	1dbb      	adds	r3, r7, #6
 801bf08:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801bf0a:	1dbb      	adds	r3, r7, #6
 801bf0c:	881b      	ldrh	r3, [r3, #0]
 801bf0e:	68ba      	ldr	r2, [r7, #8]
 801bf10:	68f8      	ldr	r0, [r7, #12]
 801bf12:	2100      	movs	r1, #0
 801bf14:	f000 fd2e 	bl	801c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bf18:	2300      	movs	r3, #0
}
 801bf1a:	0018      	movs	r0, r3
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	b004      	add	sp, #16
 801bf20:	bd80      	pop	{r7, pc}

0801bf22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801bf22:	b580      	push	{r7, lr}
 801bf24:	b082      	sub	sp, #8
 801bf26:	af00      	add	r7, sp, #0
 801bf28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801bf2a:	687a      	ldr	r2, [r7, #4]
 801bf2c:	23a5      	movs	r3, #165	@ 0xa5
 801bf2e:	009b      	lsls	r3, r3, #2
 801bf30:	2104      	movs	r1, #4
 801bf32:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801bf34:	6878      	ldr	r0, [r7, #4]
 801bf36:	2300      	movs	r3, #0
 801bf38:	2200      	movs	r2, #0
 801bf3a:	2100      	movs	r1, #0
 801bf3c:	f000 fce3 	bl	801c906 <USBD_LL_Transmit>

  return USBD_OK;
 801bf40:	2300      	movs	r3, #0
}
 801bf42:	0018      	movs	r0, r3
 801bf44:	46bd      	mov	sp, r7
 801bf46:	b002      	add	sp, #8
 801bf48:	bd80      	pop	{r7, pc}

0801bf4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801bf4a:	b580      	push	{r7, lr}
 801bf4c:	b082      	sub	sp, #8
 801bf4e:	af00      	add	r7, sp, #0
 801bf50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801bf52:	687a      	ldr	r2, [r7, #4]
 801bf54:	23a5      	movs	r3, #165	@ 0xa5
 801bf56:	009b      	lsls	r3, r3, #2
 801bf58:	2105      	movs	r1, #5
 801bf5a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bf5c:	6878      	ldr	r0, [r7, #4]
 801bf5e:	2300      	movs	r3, #0
 801bf60:	2200      	movs	r2, #0
 801bf62:	2100      	movs	r1, #0
 801bf64:	f000 fd06 	bl	801c974 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bf68:	2300      	movs	r3, #0
}
 801bf6a:	0018      	movs	r0, r3
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	b002      	add	sp, #8
 801bf70:	bd80      	pop	{r7, pc}
	...

0801bf74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801bf78:	4914      	ldr	r1, [pc, #80]	@ (801bfcc <MX_USB_DEVICE_Init+0x58>)
 801bf7a:	4b15      	ldr	r3, [pc, #84]	@ (801bfd0 <MX_USB_DEVICE_Init+0x5c>)
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	0018      	movs	r0, r3
 801bf80:	f7fe fdec 	bl	801ab5c <USBD_Init>
 801bf84:	1e03      	subs	r3, r0, #0
 801bf86:	d001      	beq.n	801bf8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801bf88:	f7ec fa02 	bl	8008390 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801bf8c:	4a11      	ldr	r2, [pc, #68]	@ (801bfd4 <MX_USB_DEVICE_Init+0x60>)
 801bf8e:	4b10      	ldr	r3, [pc, #64]	@ (801bfd0 <MX_USB_DEVICE_Init+0x5c>)
 801bf90:	0011      	movs	r1, r2
 801bf92:	0018      	movs	r0, r3
 801bf94:	f7fe fe13 	bl	801abbe <USBD_RegisterClass>
 801bf98:	1e03      	subs	r3, r0, #0
 801bf9a:	d001      	beq.n	801bfa0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801bf9c:	f7ec f9f8 	bl	8008390 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801bfa0:	4a0d      	ldr	r2, [pc, #52]	@ (801bfd8 <MX_USB_DEVICE_Init+0x64>)
 801bfa2:	4b0b      	ldr	r3, [pc, #44]	@ (801bfd0 <MX_USB_DEVICE_Init+0x5c>)
 801bfa4:	0011      	movs	r1, r2
 801bfa6:	0018      	movs	r0, r3
 801bfa8:	f7fe fd28 	bl	801a9fc <USBD_CDC_RegisterInterface>
 801bfac:	1e03      	subs	r3, r0, #0
 801bfae:	d001      	beq.n	801bfb4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801bfb0:	f7ec f9ee 	bl	8008390 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801bfb4:	4b06      	ldr	r3, [pc, #24]	@ (801bfd0 <MX_USB_DEVICE_Init+0x5c>)
 801bfb6:	0018      	movs	r0, r3
 801bfb8:	f7fe fe21 	bl	801abfe <USBD_Start>
 801bfbc:	1e03      	subs	r3, r0, #0
 801bfbe:	d001      	beq.n	801bfc4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801bfc0:	f7ec f9e6 	bl	8008390 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801bfc4:	46c0      	nop			@ (mov r8, r8)
 801bfc6:	46bd      	mov	sp, r7
 801bfc8:	bd80      	pop	{r7, pc}
 801bfca:	46c0      	nop			@ (mov r8, r8)
 801bfcc:	20000200 	.word	0x20000200
 801bfd0:	20002518 	.word	0x20002518
 801bfd4:	200000ec 	.word	0x200000ec
 801bfd8:	200001f0 	.word	0x200001f0

0801bfdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801bfe0:	4907      	ldr	r1, [pc, #28]	@ (801c000 <CDC_Init_FS+0x24>)
 801bfe2:	4b08      	ldr	r3, [pc, #32]	@ (801c004 <CDC_Init_FS+0x28>)
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	0018      	movs	r0, r3
 801bfe8:	f7fe fd23 	bl	801aa32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801bfec:	4a06      	ldr	r2, [pc, #24]	@ (801c008 <CDC_Init_FS+0x2c>)
 801bfee:	4b05      	ldr	r3, [pc, #20]	@ (801c004 <CDC_Init_FS+0x28>)
 801bff0:	0011      	movs	r1, r2
 801bff2:	0018      	movs	r0, r3
 801bff4:	f7fe fd39 	bl	801aa6a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801bff8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801bffa:	0018      	movs	r0, r3
 801bffc:	46bd      	mov	sp, r7
 801bffe:	bd80      	pop	{r7, pc}
 801c000:	20002c9c 	.word	0x20002c9c
 801c004:	20002518 	.word	0x20002518
 801c008:	2000289c 	.word	0x2000289c

0801c00c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801c00c:	b580      	push	{r7, lr}
 801c00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801c010:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801c012:	0018      	movs	r0, r3
 801c014:	46bd      	mov	sp, r7
 801c016:	bd80      	pop	{r7, pc}

0801c018 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801c018:	b580      	push	{r7, lr}
 801c01a:	b082      	sub	sp, #8
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6039      	str	r1, [r7, #0]
 801c020:	0011      	movs	r1, r2
 801c022:	1dfb      	adds	r3, r7, #7
 801c024:	1c02      	adds	r2, r0, #0
 801c026:	701a      	strb	r2, [r3, #0]
 801c028:	1d3b      	adds	r3, r7, #4
 801c02a:	1c0a      	adds	r2, r1, #0
 801c02c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801c02e:	1dfb      	adds	r3, r7, #7
 801c030:	781b      	ldrb	r3, [r3, #0]
 801c032:	2b23      	cmp	r3, #35	@ 0x23
 801c034:	d804      	bhi.n	801c040 <CDC_Control_FS+0x28>
 801c036:	009a      	lsls	r2, r3, #2
 801c038:	4b04      	ldr	r3, [pc, #16]	@ (801c04c <CDC_Control_FS+0x34>)
 801c03a:	18d3      	adds	r3, r2, r3
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801c040:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801c042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801c044:	0018      	movs	r0, r3
 801c046:	46bd      	mov	sp, r7
 801c048:	b002      	add	sp, #8
 801c04a:	bd80      	pop	{r7, pc}
 801c04c:	080246d8 	.word	0x080246d8

0801c050 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b082      	sub	sp, #8
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
 801c058:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801c05a:	4b12      	ldr	r3, [pc, #72]	@ (801c0a4 <CDC_Receive_FS+0x54>)
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d013      	beq.n	801c08a <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801c062:	683b      	ldr	r3, [r7, #0]
 801c064:	681b      	ldr	r3, [r3, #0]
 801c066:	b29a      	uxth	r2, r3
 801c068:	2301      	movs	r3, #1
 801c06a:	425b      	negs	r3, r3
 801c06c:	6879      	ldr	r1, [r7, #4]
 801c06e:	480e      	ldr	r0, [pc, #56]	@ (801c0a8 <CDC_Receive_FS+0x58>)
 801c070:	f7fa fa46 	bl	8016500 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801c074:	687a      	ldr	r2, [r7, #4]
 801c076:	4b0d      	ldr	r3, [pc, #52]	@ (801c0ac <CDC_Receive_FS+0x5c>)
 801c078:	0011      	movs	r1, r2
 801c07a:	0018      	movs	r0, r3
 801c07c:	f7fe fcf5 	bl	801aa6a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c080:	4b0a      	ldr	r3, [pc, #40]	@ (801c0ac <CDC_Receive_FS+0x5c>)
 801c082:	0018      	movs	r0, r3
 801c084:	f7fe fd3c 	bl	801ab00 <USBD_CDC_ReceivePacket>
 801c088:	e006      	b.n	801c098 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801c08a:	683b      	ldr	r3, [r7, #0]
 801c08c:	681a      	ldr	r2, [r3, #0]
 801c08e:	4b08      	ldr	r3, [pc, #32]	@ (801c0b0 <CDC_Receive_FS+0x60>)
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	18d2      	adds	r2, r2, r3
 801c094:	4b06      	ldr	r3, [pc, #24]	@ (801c0b0 <CDC_Receive_FS+0x60>)
 801c096:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801c098:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801c09a:	0018      	movs	r0, r3
 801c09c:	46bd      	mov	sp, r7
 801c09e:	b002      	add	sp, #8
 801c0a0:	bd80      	pop	{r7, pc}
 801c0a2:	46c0      	nop			@ (mov r8, r8)
 801c0a4:	200027dc 	.word	0x200027dc
 801c0a8:	200027e0 	.word	0x200027e0
 801c0ac:	20002518 	.word	0x20002518
 801c0b0:	20002898 	.word	0x20002898

0801c0b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801c0b4:	b5b0      	push	{r4, r5, r7, lr}
 801c0b6:	b084      	sub	sp, #16
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	000a      	movs	r2, r1
 801c0be:	1cbb      	adds	r3, r7, #2
 801c0c0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c0c2:	230f      	movs	r3, #15
 801c0c4:	18fb      	adds	r3, r7, r3
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c0ca:	4a11      	ldr	r2, [pc, #68]	@ (801c110 <CDC_Transmit_FS+0x5c>)
 801c0cc:	23ae      	movs	r3, #174	@ 0xae
 801c0ce:	009b      	lsls	r3, r3, #2
 801c0d0:	58d3      	ldr	r3, [r2, r3]
 801c0d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c0d4:	68ba      	ldr	r2, [r7, #8]
 801c0d6:	2385      	movs	r3, #133	@ 0x85
 801c0d8:	009b      	lsls	r3, r3, #2
 801c0da:	58d3      	ldr	r3, [r2, r3]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d001      	beq.n	801c0e4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c0e0:	2301      	movs	r3, #1
 801c0e2:	e010      	b.n	801c106 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c0e4:	1cbb      	adds	r3, r7, #2
 801c0e6:	881a      	ldrh	r2, [r3, #0]
 801c0e8:	6879      	ldr	r1, [r7, #4]
 801c0ea:	4b09      	ldr	r3, [pc, #36]	@ (801c110 <CDC_Transmit_FS+0x5c>)
 801c0ec:	0018      	movs	r0, r3
 801c0ee:	f7fe fca0 	bl	801aa32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c0f2:	250f      	movs	r5, #15
 801c0f4:	197c      	adds	r4, r7, r5
 801c0f6:	4b06      	ldr	r3, [pc, #24]	@ (801c110 <CDC_Transmit_FS+0x5c>)
 801c0f8:	0018      	movs	r0, r3
 801c0fa:	f7fe fcca 	bl	801aa92 <USBD_CDC_TransmitPacket>
 801c0fe:	0003      	movs	r3, r0
 801c100:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c102:	197b      	adds	r3, r7, r5
 801c104:	781b      	ldrb	r3, [r3, #0]
}
 801c106:	0018      	movs	r0, r3
 801c108:	46bd      	mov	sp, r7
 801c10a:	b004      	add	sp, #16
 801c10c:	bdb0      	pop	{r4, r5, r7, pc}
 801c10e:	46c0      	nop			@ (mov r8, r8)
 801c110:	20002518 	.word	0x20002518

0801c114 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c114:	b580      	push	{r7, lr}
 801c116:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c118:	4b02      	ldr	r3, [pc, #8]	@ (801c124 <EnableESPProg+0x10>)
 801c11a:	2201      	movs	r2, #1
 801c11c:	701a      	strb	r2, [r3, #0]
}
 801c11e:	46c0      	nop			@ (mov r8, r8)
 801c120:	46bd      	mov	sp, r7
 801c122:	bd80      	pop	{r7, pc}
 801c124:	200027dc 	.word	0x200027dc

0801c128 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c12c:	4b01      	ldr	r3, [pc, #4]	@ (801c134 <GetUsbRxPointer+0xc>)
}
 801c12e:	0018      	movs	r0, r3
 801c130:	46bd      	mov	sp, r7
 801c132:	bd80      	pop	{r7, pc}
 801c134:	2000289c 	.word	0x2000289c

0801c138 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c138:	b580      	push	{r7, lr}
 801c13a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c13c:	4b07      	ldr	r3, [pc, #28]	@ (801c15c <ResetUsbRxDataSize+0x24>)
 801c13e:	2200      	movs	r2, #0
 801c140:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c142:	4a07      	ldr	r2, [pc, #28]	@ (801c160 <ResetUsbRxDataSize+0x28>)
 801c144:	4b07      	ldr	r3, [pc, #28]	@ (801c164 <ResetUsbRxDataSize+0x2c>)
 801c146:	0011      	movs	r1, r2
 801c148:	0018      	movs	r0, r3
 801c14a:	f7fe fc8e 	bl	801aa6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c14e:	4b05      	ldr	r3, [pc, #20]	@ (801c164 <ResetUsbRxDataSize+0x2c>)
 801c150:	0018      	movs	r0, r3
 801c152:	f7fe fcd5 	bl	801ab00 <USBD_CDC_ReceivePacket>
}
 801c156:	46c0      	nop			@ (mov r8, r8)
 801c158:	46bd      	mov	sp, r7
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	20002898 	.word	0x20002898
 801c160:	2000289c 	.word	0x2000289c
 801c164:	20002518 	.word	0x20002518

0801c168 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c16c:	4b02      	ldr	r3, [pc, #8]	@ (801c178 <GetUsbRxDataSize+0x10>)
 801c16e:	681b      	ldr	r3, [r3, #0]
}
 801c170:	0018      	movs	r0, r3
 801c172:	46bd      	mov	sp, r7
 801c174:	bd80      	pop	{r7, pc}
 801c176:	46c0      	nop			@ (mov r8, r8)
 801c178:	20002898 	.word	0x20002898

0801c17c <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b082      	sub	sp, #8
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c184:	687a      	ldr	r2, [r7, #4]
 801c186:	4b07      	ldr	r3, [pc, #28]	@ (801c1a4 <GetUsbRxNextChunk+0x28>)
 801c188:	18d2      	adds	r2, r2, r3
 801c18a:	4b07      	ldr	r3, [pc, #28]	@ (801c1a8 <GetUsbRxNextChunk+0x2c>)
 801c18c:	0011      	movs	r1, r2
 801c18e:	0018      	movs	r0, r3
 801c190:	f7fe fc6b 	bl	801aa6a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c194:	4b04      	ldr	r3, [pc, #16]	@ (801c1a8 <GetUsbRxNextChunk+0x2c>)
 801c196:	0018      	movs	r0, r3
 801c198:	f7fe fcb2 	bl	801ab00 <USBD_CDC_ReceivePacket>
}
 801c19c:	46c0      	nop			@ (mov r8, r8)
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	b002      	add	sp, #8
 801c1a2:	bd80      	pop	{r7, pc}
 801c1a4:	2000289c 	.word	0x2000289c
 801c1a8:	20002518 	.word	0x20002518

0801c1ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	0002      	movs	r2, r0
 801c1b4:	6039      	str	r1, [r7, #0]
 801c1b6:	1dfb      	adds	r3, r7, #7
 801c1b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c1ba:	683b      	ldr	r3, [r7, #0]
 801c1bc:	2212      	movs	r2, #18
 801c1be:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c1c0:	4b02      	ldr	r3, [pc, #8]	@ (801c1cc <USBD_FS_DeviceDescriptor+0x20>)
}
 801c1c2:	0018      	movs	r0, r3
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	b002      	add	sp, #8
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	46c0      	nop			@ (mov r8, r8)
 801c1cc:	2000021c 	.word	0x2000021c

0801c1d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b082      	sub	sp, #8
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	0002      	movs	r2, r0
 801c1d8:	6039      	str	r1, [r7, #0]
 801c1da:	1dfb      	adds	r3, r7, #7
 801c1dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	2204      	movs	r2, #4
 801c1e2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c1e4:	4b02      	ldr	r3, [pc, #8]	@ (801c1f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c1e6:	0018      	movs	r0, r3
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	b002      	add	sp, #8
 801c1ec:	bd80      	pop	{r7, pc}
 801c1ee:	46c0      	nop			@ (mov r8, r8)
 801c1f0:	20000230 	.word	0x20000230

0801c1f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b082      	sub	sp, #8
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	0002      	movs	r2, r0
 801c1fc:	6039      	str	r1, [r7, #0]
 801c1fe:	1dfb      	adds	r3, r7, #7
 801c200:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c202:	1dfb      	adds	r3, r7, #7
 801c204:	781b      	ldrb	r3, [r3, #0]
 801c206:	2b00      	cmp	r3, #0
 801c208:	d106      	bne.n	801c218 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c20a:	683a      	ldr	r2, [r7, #0]
 801c20c:	4908      	ldr	r1, [pc, #32]	@ (801c230 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c20e:	4b09      	ldr	r3, [pc, #36]	@ (801c234 <USBD_FS_ProductStrDescriptor+0x40>)
 801c210:	0018      	movs	r0, r3
 801c212:	f7ff fdb1 	bl	801bd78 <USBD_GetString>
 801c216:	e005      	b.n	801c224 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c218:	683a      	ldr	r2, [r7, #0]
 801c21a:	4905      	ldr	r1, [pc, #20]	@ (801c230 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c21c:	4b05      	ldr	r3, [pc, #20]	@ (801c234 <USBD_FS_ProductStrDescriptor+0x40>)
 801c21e:	0018      	movs	r0, r3
 801c220:	f7ff fdaa 	bl	801bd78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c224:	4b02      	ldr	r3, [pc, #8]	@ (801c230 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c226:	0018      	movs	r0, r3
 801c228:	46bd      	mov	sp, r7
 801c22a:	b002      	add	sp, #8
 801c22c:	bd80      	pop	{r7, pc}
 801c22e:	46c0      	nop			@ (mov r8, r8)
 801c230:	2000309c 	.word	0x2000309c
 801c234:	08024168 	.word	0x08024168

0801c238 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	0002      	movs	r2, r0
 801c240:	6039      	str	r1, [r7, #0]
 801c242:	1dfb      	adds	r3, r7, #7
 801c244:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c246:	683a      	ldr	r2, [r7, #0]
 801c248:	4904      	ldr	r1, [pc, #16]	@ (801c25c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c24a:	4b05      	ldr	r3, [pc, #20]	@ (801c260 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c24c:	0018      	movs	r0, r3
 801c24e:	f7ff fd93 	bl	801bd78 <USBD_GetString>
  return USBD_StrDesc;
 801c252:	4b02      	ldr	r3, [pc, #8]	@ (801c25c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c254:	0018      	movs	r0, r3
 801c256:	46bd      	mov	sp, r7
 801c258:	b002      	add	sp, #8
 801c25a:	bd80      	pop	{r7, pc}
 801c25c:	2000309c 	.word	0x2000309c
 801c260:	08024180 	.word	0x08024180

0801c264 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b082      	sub	sp, #8
 801c268:	af00      	add	r7, sp, #0
 801c26a:	0002      	movs	r2, r0
 801c26c:	6039      	str	r1, [r7, #0]
 801c26e:	1dfb      	adds	r3, r7, #7
 801c270:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	221a      	movs	r2, #26
 801c276:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c278:	f000 f84c 	bl	801c314 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c27c:	4b02      	ldr	r3, [pc, #8]	@ (801c288 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c27e:	0018      	movs	r0, r3
 801c280:	46bd      	mov	sp, r7
 801c282:	b002      	add	sp, #8
 801c284:	bd80      	pop	{r7, pc}
 801c286:	46c0      	nop			@ (mov r8, r8)
 801c288:	20000234 	.word	0x20000234

0801c28c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c28c:	b580      	push	{r7, lr}
 801c28e:	b082      	sub	sp, #8
 801c290:	af00      	add	r7, sp, #0
 801c292:	0002      	movs	r2, r0
 801c294:	6039      	str	r1, [r7, #0]
 801c296:	1dfb      	adds	r3, r7, #7
 801c298:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c29a:	1dfb      	adds	r3, r7, #7
 801c29c:	781b      	ldrb	r3, [r3, #0]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d106      	bne.n	801c2b0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c2a2:	683a      	ldr	r2, [r7, #0]
 801c2a4:	4908      	ldr	r1, [pc, #32]	@ (801c2c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c2a6:	4b09      	ldr	r3, [pc, #36]	@ (801c2cc <USBD_FS_ConfigStrDescriptor+0x40>)
 801c2a8:	0018      	movs	r0, r3
 801c2aa:	f7ff fd65 	bl	801bd78 <USBD_GetString>
 801c2ae:	e005      	b.n	801c2bc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c2b0:	683a      	ldr	r2, [r7, #0]
 801c2b2:	4905      	ldr	r1, [pc, #20]	@ (801c2c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c2b4:	4b05      	ldr	r3, [pc, #20]	@ (801c2cc <USBD_FS_ConfigStrDescriptor+0x40>)
 801c2b6:	0018      	movs	r0, r3
 801c2b8:	f7ff fd5e 	bl	801bd78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c2bc:	4b02      	ldr	r3, [pc, #8]	@ (801c2c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c2be:	0018      	movs	r0, r3
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	b002      	add	sp, #8
 801c2c4:	bd80      	pop	{r7, pc}
 801c2c6:	46c0      	nop			@ (mov r8, r8)
 801c2c8:	2000309c 	.word	0x2000309c
 801c2cc:	08024194 	.word	0x08024194

0801c2d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b082      	sub	sp, #8
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	0002      	movs	r2, r0
 801c2d8:	6039      	str	r1, [r7, #0]
 801c2da:	1dfb      	adds	r3, r7, #7
 801c2dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c2de:	1dfb      	adds	r3, r7, #7
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d106      	bne.n	801c2f4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c2e6:	683a      	ldr	r2, [r7, #0]
 801c2e8:	4908      	ldr	r1, [pc, #32]	@ (801c30c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c2ea:	4b09      	ldr	r3, [pc, #36]	@ (801c310 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c2ec:	0018      	movs	r0, r3
 801c2ee:	f7ff fd43 	bl	801bd78 <USBD_GetString>
 801c2f2:	e005      	b.n	801c300 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c2f4:	683a      	ldr	r2, [r7, #0]
 801c2f6:	4905      	ldr	r1, [pc, #20]	@ (801c30c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c2f8:	4b05      	ldr	r3, [pc, #20]	@ (801c310 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c2fa:	0018      	movs	r0, r3
 801c2fc:	f7ff fd3c 	bl	801bd78 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c300:	4b02      	ldr	r3, [pc, #8]	@ (801c30c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c302:	0018      	movs	r0, r3
 801c304:	46bd      	mov	sp, r7
 801c306:	b002      	add	sp, #8
 801c308:	bd80      	pop	{r7, pc}
 801c30a:	46c0      	nop			@ (mov r8, r8)
 801c30c:	2000309c 	.word	0x2000309c
 801c310:	080241a0 	.word	0x080241a0

0801c314 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c314:	b580      	push	{r7, lr}
 801c316:	b084      	sub	sp, #16
 801c318:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c31a:	4b10      	ldr	r3, [pc, #64]	@ (801c35c <Get_SerialNum+0x48>)
 801c31c:	681b      	ldr	r3, [r3, #0]
 801c31e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c320:	4b0f      	ldr	r3, [pc, #60]	@ (801c360 <Get_SerialNum+0x4c>)
 801c322:	681b      	ldr	r3, [r3, #0]
 801c324:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c326:	4b0f      	ldr	r3, [pc, #60]	@ (801c364 <Get_SerialNum+0x50>)
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c32c:	68fa      	ldr	r2, [r7, #12]
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	18d3      	adds	r3, r2, r3
 801c332:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d00b      	beq.n	801c352 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c33a:	490b      	ldr	r1, [pc, #44]	@ (801c368 <Get_SerialNum+0x54>)
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	2208      	movs	r2, #8
 801c340:	0018      	movs	r0, r3
 801c342:	f000 f815 	bl	801c370 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c346:	4909      	ldr	r1, [pc, #36]	@ (801c36c <Get_SerialNum+0x58>)
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	2204      	movs	r2, #4
 801c34c:	0018      	movs	r0, r3
 801c34e:	f000 f80f 	bl	801c370 <IntToUnicode>
  }
}
 801c352:	46c0      	nop			@ (mov r8, r8)
 801c354:	46bd      	mov	sp, r7
 801c356:	b004      	add	sp, #16
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	46c0      	nop			@ (mov r8, r8)
 801c35c:	1ff80050 	.word	0x1ff80050
 801c360:	1ff80054 	.word	0x1ff80054
 801c364:	1ff80058 	.word	0x1ff80058
 801c368:	20000236 	.word	0x20000236
 801c36c:	20000246 	.word	0x20000246

0801c370 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c370:	b580      	push	{r7, lr}
 801c372:	b086      	sub	sp, #24
 801c374:	af00      	add	r7, sp, #0
 801c376:	60f8      	str	r0, [r7, #12]
 801c378:	60b9      	str	r1, [r7, #8]
 801c37a:	1dfb      	adds	r3, r7, #7
 801c37c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c37e:	2117      	movs	r1, #23
 801c380:	187b      	adds	r3, r7, r1
 801c382:	2200      	movs	r2, #0
 801c384:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c386:	187b      	adds	r3, r7, r1
 801c388:	2200      	movs	r2, #0
 801c38a:	701a      	strb	r2, [r3, #0]
 801c38c:	e02f      	b.n	801c3ee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	0f1b      	lsrs	r3, r3, #28
 801c392:	2b09      	cmp	r3, #9
 801c394:	d80d      	bhi.n	801c3b2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	0f1b      	lsrs	r3, r3, #28
 801c39a:	b2da      	uxtb	r2, r3
 801c39c:	2317      	movs	r3, #23
 801c39e:	18fb      	adds	r3, r7, r3
 801c3a0:	781b      	ldrb	r3, [r3, #0]
 801c3a2:	005b      	lsls	r3, r3, #1
 801c3a4:	0019      	movs	r1, r3
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	185b      	adds	r3, r3, r1
 801c3aa:	3230      	adds	r2, #48	@ 0x30
 801c3ac:	b2d2      	uxtb	r2, r2
 801c3ae:	701a      	strb	r2, [r3, #0]
 801c3b0:	e00c      	b.n	801c3cc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c3b2:	68fb      	ldr	r3, [r7, #12]
 801c3b4:	0f1b      	lsrs	r3, r3, #28
 801c3b6:	b2da      	uxtb	r2, r3
 801c3b8:	2317      	movs	r3, #23
 801c3ba:	18fb      	adds	r3, r7, r3
 801c3bc:	781b      	ldrb	r3, [r3, #0]
 801c3be:	005b      	lsls	r3, r3, #1
 801c3c0:	0019      	movs	r1, r3
 801c3c2:	68bb      	ldr	r3, [r7, #8]
 801c3c4:	185b      	adds	r3, r3, r1
 801c3c6:	3237      	adds	r2, #55	@ 0x37
 801c3c8:	b2d2      	uxtb	r2, r2
 801c3ca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	011b      	lsls	r3, r3, #4
 801c3d0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c3d2:	2117      	movs	r1, #23
 801c3d4:	187b      	adds	r3, r7, r1
 801c3d6:	781b      	ldrb	r3, [r3, #0]
 801c3d8:	005b      	lsls	r3, r3, #1
 801c3da:	3301      	adds	r3, #1
 801c3dc:	68ba      	ldr	r2, [r7, #8]
 801c3de:	18d3      	adds	r3, r2, r3
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c3e4:	187b      	adds	r3, r7, r1
 801c3e6:	781a      	ldrb	r2, [r3, #0]
 801c3e8:	187b      	adds	r3, r7, r1
 801c3ea:	3201      	adds	r2, #1
 801c3ec:	701a      	strb	r2, [r3, #0]
 801c3ee:	2317      	movs	r3, #23
 801c3f0:	18fa      	adds	r2, r7, r3
 801c3f2:	1dfb      	adds	r3, r7, #7
 801c3f4:	7812      	ldrb	r2, [r2, #0]
 801c3f6:	781b      	ldrb	r3, [r3, #0]
 801c3f8:	429a      	cmp	r2, r3
 801c3fa:	d3c8      	bcc.n	801c38e <IntToUnicode+0x1e>
  }
}
 801c3fc:	46c0      	nop			@ (mov r8, r8)
 801c3fe:	46c0      	nop			@ (mov r8, r8)
 801c400:	46bd      	mov	sp, r7
 801c402:	b006      	add	sp, #24
 801c404:	bd80      	pop	{r7, pc}
	...

0801c408 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b082      	sub	sp, #8
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	4a0a      	ldr	r2, [pc, #40]	@ (801c440 <HAL_PCD_MspInit+0x38>)
 801c416:	4293      	cmp	r3, r2
 801c418:	d10e      	bne.n	801c438 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c41a:	4b0a      	ldr	r3, [pc, #40]	@ (801c444 <HAL_PCD_MspInit+0x3c>)
 801c41c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c41e:	4b09      	ldr	r3, [pc, #36]	@ (801c444 <HAL_PCD_MspInit+0x3c>)
 801c420:	2180      	movs	r1, #128	@ 0x80
 801c422:	0409      	lsls	r1, r1, #16
 801c424:	430a      	orrs	r2, r1
 801c426:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c428:	2200      	movs	r2, #0
 801c42a:	2100      	movs	r1, #0
 801c42c:	201f      	movs	r0, #31
 801c42e:	f7f2 faf9 	bl	800ea24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c432:	201f      	movs	r0, #31
 801c434:	f7f2 fb0b 	bl	800ea4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c438:	46c0      	nop			@ (mov r8, r8)
 801c43a:	46bd      	mov	sp, r7
 801c43c:	b002      	add	sp, #8
 801c43e:	bd80      	pop	{r7, pc}
 801c440:	40005c00 	.word	0x40005c00
 801c444:	40021000 	.word	0x40021000

0801c448 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c448:	b580      	push	{r7, lr}
 801c44a:	b082      	sub	sp, #8
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c450:	687a      	ldr	r2, [r7, #4]
 801c452:	23bc      	movs	r3, #188	@ 0xbc
 801c454:	009b      	lsls	r3, r3, #2
 801c456:	58d2      	ldr	r2, [r2, r3]
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	21ac      	movs	r1, #172	@ 0xac
 801c45c:	0089      	lsls	r1, r1, #2
 801c45e:	468c      	mov	ip, r1
 801c460:	4463      	add	r3, ip
 801c462:	0019      	movs	r1, r3
 801c464:	0010      	movs	r0, r2
 801c466:	f7fe fc1d 	bl	801aca4 <USBD_LL_SetupStage>
}
 801c46a:	46c0      	nop			@ (mov r8, r8)
 801c46c:	46bd      	mov	sp, r7
 801c46e:	b002      	add	sp, #8
 801c470:	bd80      	pop	{r7, pc}

0801c472 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c472:	b590      	push	{r4, r7, lr}
 801c474:	b083      	sub	sp, #12
 801c476:	af00      	add	r7, sp, #0
 801c478:	6078      	str	r0, [r7, #4]
 801c47a:	000a      	movs	r2, r1
 801c47c:	1cfb      	adds	r3, r7, #3
 801c47e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c480:	687a      	ldr	r2, [r7, #4]
 801c482:	23bc      	movs	r3, #188	@ 0xbc
 801c484:	009b      	lsls	r3, r3, #2
 801c486:	58d4      	ldr	r4, [r2, r3]
 801c488:	1cfb      	adds	r3, r7, #3
 801c48a:	781a      	ldrb	r2, [r3, #0]
 801c48c:	6878      	ldr	r0, [r7, #4]
 801c48e:	23be      	movs	r3, #190	@ 0xbe
 801c490:	0059      	lsls	r1, r3, #1
 801c492:	0013      	movs	r3, r2
 801c494:	009b      	lsls	r3, r3, #2
 801c496:	189b      	adds	r3, r3, r2
 801c498:	00db      	lsls	r3, r3, #3
 801c49a:	18c3      	adds	r3, r0, r3
 801c49c:	185b      	adds	r3, r3, r1
 801c49e:	681a      	ldr	r2, [r3, #0]
 801c4a0:	1cfb      	adds	r3, r7, #3
 801c4a2:	781b      	ldrb	r3, [r3, #0]
 801c4a4:	0019      	movs	r1, r3
 801c4a6:	0020      	movs	r0, r4
 801c4a8:	f7fe fc5a 	bl	801ad60 <USBD_LL_DataOutStage>
}
 801c4ac:	46c0      	nop			@ (mov r8, r8)
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	b003      	add	sp, #12
 801c4b2:	bd90      	pop	{r4, r7, pc}

0801c4b4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b082      	sub	sp, #8
 801c4b8:	af00      	add	r7, sp, #0
 801c4ba:	6078      	str	r0, [r7, #4]
 801c4bc:	000a      	movs	r2, r1
 801c4be:	1cfb      	adds	r3, r7, #3
 801c4c0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c4c2:	687a      	ldr	r2, [r7, #4]
 801c4c4:	23bc      	movs	r3, #188	@ 0xbc
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	58d0      	ldr	r0, [r2, r3]
 801c4ca:	1cfb      	adds	r3, r7, #3
 801c4cc:	781a      	ldrb	r2, [r3, #0]
 801c4ce:	6879      	ldr	r1, [r7, #4]
 801c4d0:	0013      	movs	r3, r2
 801c4d2:	009b      	lsls	r3, r3, #2
 801c4d4:	189b      	adds	r3, r3, r2
 801c4d6:	00db      	lsls	r3, r3, #3
 801c4d8:	18cb      	adds	r3, r1, r3
 801c4da:	333c      	adds	r3, #60	@ 0x3c
 801c4dc:	681a      	ldr	r2, [r3, #0]
 801c4de:	1cfb      	adds	r3, r7, #3
 801c4e0:	781b      	ldrb	r3, [r3, #0]
 801c4e2:	0019      	movs	r1, r3
 801c4e4:	f7fe fcbe 	bl	801ae64 <USBD_LL_DataInStage>
}
 801c4e8:	46c0      	nop			@ (mov r8, r8)
 801c4ea:	46bd      	mov	sp, r7
 801c4ec:	b002      	add	sp, #8
 801c4ee:	bd80      	pop	{r7, pc}

0801c4f0 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b082      	sub	sp, #8
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c4f8:	687a      	ldr	r2, [r7, #4]
 801c4fa:	23bc      	movs	r3, #188	@ 0xbc
 801c4fc:	009b      	lsls	r3, r3, #2
 801c4fe:	58d3      	ldr	r3, [r2, r3]
 801c500:	0018      	movs	r0, r3
 801c502:	f7fe fdf5 	bl	801b0f0 <USBD_LL_SOF>
}
 801c506:	46c0      	nop			@ (mov r8, r8)
 801c508:	46bd      	mov	sp, r7
 801c50a:	b002      	add	sp, #8
 801c50c:	bd80      	pop	{r7, pc}

0801c50e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c50e:	b580      	push	{r7, lr}
 801c510:	b084      	sub	sp, #16
 801c512:	af00      	add	r7, sp, #0
 801c514:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c516:	230f      	movs	r3, #15
 801c518:	18fb      	adds	r3, r7, r3
 801c51a:	2201      	movs	r2, #1
 801c51c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	689b      	ldr	r3, [r3, #8]
 801c522:	2b02      	cmp	r3, #2
 801c524:	d001      	beq.n	801c52a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c526:	f7eb ff33 	bl	8008390 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c52a:	687a      	ldr	r2, [r7, #4]
 801c52c:	23bc      	movs	r3, #188	@ 0xbc
 801c52e:	009b      	lsls	r3, r3, #2
 801c530:	58d2      	ldr	r2, [r2, r3]
 801c532:	230f      	movs	r3, #15
 801c534:	18fb      	adds	r3, r7, r3
 801c536:	781b      	ldrb	r3, [r3, #0]
 801c538:	0019      	movs	r1, r3
 801c53a:	0010      	movs	r0, r2
 801c53c:	f7fe fd97 	bl	801b06e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c540:	687a      	ldr	r2, [r7, #4]
 801c542:	23bc      	movs	r3, #188	@ 0xbc
 801c544:	009b      	lsls	r3, r3, #2
 801c546:	58d3      	ldr	r3, [r2, r3]
 801c548:	0018      	movs	r0, r3
 801c54a:	f7fe fd48 	bl	801afde <USBD_LL_Reset>
}
 801c54e:	46c0      	nop			@ (mov r8, r8)
 801c550:	46bd      	mov	sp, r7
 801c552:	b004      	add	sp, #16
 801c554:	bd80      	pop	{r7, pc}
	...

0801c558 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c558:	b580      	push	{r7, lr}
 801c55a:	b082      	sub	sp, #8
 801c55c:	af00      	add	r7, sp, #0
 801c55e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c560:	687a      	ldr	r2, [r7, #4]
 801c562:	23bc      	movs	r3, #188	@ 0xbc
 801c564:	009b      	lsls	r3, r3, #2
 801c566:	58d3      	ldr	r3, [r2, r3]
 801c568:	0018      	movs	r0, r3
 801c56a:	f7fe fd91 	bl	801b090 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	699b      	ldr	r3, [r3, #24]
 801c572:	2b00      	cmp	r3, #0
 801c574:	d005      	beq.n	801c582 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c576:	4b05      	ldr	r3, [pc, #20]	@ (801c58c <HAL_PCD_SuspendCallback+0x34>)
 801c578:	691a      	ldr	r2, [r3, #16]
 801c57a:	4b04      	ldr	r3, [pc, #16]	@ (801c58c <HAL_PCD_SuspendCallback+0x34>)
 801c57c:	2106      	movs	r1, #6
 801c57e:	430a      	orrs	r2, r1
 801c580:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c582:	46c0      	nop			@ (mov r8, r8)
 801c584:	46bd      	mov	sp, r7
 801c586:	b002      	add	sp, #8
 801c588:	bd80      	pop	{r7, pc}
 801c58a:	46c0      	nop			@ (mov r8, r8)
 801c58c:	e000ed00 	.word	0xe000ed00

0801c590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b082      	sub	sp, #8
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	699b      	ldr	r3, [r3, #24]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d007      	beq.n	801c5b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c5a0:	4b09      	ldr	r3, [pc, #36]	@ (801c5c8 <HAL_PCD_ResumeCallback+0x38>)
 801c5a2:	691a      	ldr	r2, [r3, #16]
 801c5a4:	4b08      	ldr	r3, [pc, #32]	@ (801c5c8 <HAL_PCD_ResumeCallback+0x38>)
 801c5a6:	2106      	movs	r1, #6
 801c5a8:	438a      	bics	r2, r1
 801c5aa:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c5ac:	f000 fa44 	bl	801ca38 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c5b0:	687a      	ldr	r2, [r7, #4]
 801c5b2:	23bc      	movs	r3, #188	@ 0xbc
 801c5b4:	009b      	lsls	r3, r3, #2
 801c5b6:	58d3      	ldr	r3, [r2, r3]
 801c5b8:	0018      	movs	r0, r3
 801c5ba:	f7fe fd81 	bl	801b0c0 <USBD_LL_Resume>
}
 801c5be:	46c0      	nop			@ (mov r8, r8)
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	b002      	add	sp, #8
 801c5c4:	bd80      	pop	{r7, pc}
 801c5c6:	46c0      	nop			@ (mov r8, r8)
 801c5c8:	e000ed00 	.word	0xe000ed00

0801c5cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b082      	sub	sp, #8
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c5d4:	4a2d      	ldr	r2, [pc, #180]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5d6:	23bc      	movs	r3, #188	@ 0xbc
 801c5d8:	009b      	lsls	r3, r3, #2
 801c5da:	6879      	ldr	r1, [r7, #4]
 801c5dc:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c5de:	687a      	ldr	r2, [r7, #4]
 801c5e0:	23b0      	movs	r3, #176	@ 0xb0
 801c5e2:	009b      	lsls	r3, r3, #2
 801c5e4:	4929      	ldr	r1, [pc, #164]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5e6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c5e8:	4b28      	ldr	r3, [pc, #160]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5ea:	4a29      	ldr	r2, [pc, #164]	@ (801c690 <USBD_LL_Init+0xc4>)
 801c5ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c5ee:	4b27      	ldr	r3, [pc, #156]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5f0:	2208      	movs	r2, #8
 801c5f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c5f4:	4b25      	ldr	r3, [pc, #148]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5f6:	2202      	movs	r2, #2
 801c5f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c5fa:	4b24      	ldr	r3, [pc, #144]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c5fc:	2202      	movs	r2, #2
 801c5fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c600:	4b22      	ldr	r3, [pc, #136]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c602:	2200      	movs	r2, #0
 801c604:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c606:	4b21      	ldr	r3, [pc, #132]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c608:	2200      	movs	r2, #0
 801c60a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c60c:	4b1f      	ldr	r3, [pc, #124]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c60e:	2200      	movs	r2, #0
 801c610:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c612:	4b1e      	ldr	r3, [pc, #120]	@ (801c68c <USBD_LL_Init+0xc0>)
 801c614:	0018      	movs	r0, r3
 801c616:	f7f5 ffab 	bl	8012570 <HAL_PCD_Init>
 801c61a:	1e03      	subs	r3, r0, #0
 801c61c:	d001      	beq.n	801c622 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c61e:	f7eb feb7 	bl	8008390 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c622:	687a      	ldr	r2, [r7, #4]
 801c624:	23b0      	movs	r3, #176	@ 0xb0
 801c626:	009b      	lsls	r3, r3, #2
 801c628:	58d0      	ldr	r0, [r2, r3]
 801c62a:	2318      	movs	r3, #24
 801c62c:	2200      	movs	r2, #0
 801c62e:	2100      	movs	r1, #0
 801c630:	f7f7 fd6c 	bl	801410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c634:	687a      	ldr	r2, [r7, #4]
 801c636:	23b0      	movs	r3, #176	@ 0xb0
 801c638:	009b      	lsls	r3, r3, #2
 801c63a:	58d0      	ldr	r0, [r2, r3]
 801c63c:	2358      	movs	r3, #88	@ 0x58
 801c63e:	2200      	movs	r2, #0
 801c640:	2180      	movs	r1, #128	@ 0x80
 801c642:	f7f7 fd63 	bl	801410c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c646:	687a      	ldr	r2, [r7, #4]
 801c648:	23b0      	movs	r3, #176	@ 0xb0
 801c64a:	009b      	lsls	r3, r3, #2
 801c64c:	58d0      	ldr	r0, [r2, r3]
 801c64e:	23c0      	movs	r3, #192	@ 0xc0
 801c650:	2200      	movs	r2, #0
 801c652:	2181      	movs	r1, #129	@ 0x81
 801c654:	f7f7 fd5a 	bl	801410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c658:	687a      	ldr	r2, [r7, #4]
 801c65a:	23b0      	movs	r3, #176	@ 0xb0
 801c65c:	009b      	lsls	r3, r3, #2
 801c65e:	58d0      	ldr	r0, [r2, r3]
 801c660:	2388      	movs	r3, #136	@ 0x88
 801c662:	005b      	lsls	r3, r3, #1
 801c664:	2200      	movs	r2, #0
 801c666:	2101      	movs	r1, #1
 801c668:	f7f7 fd50 	bl	801410c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c66c:	687a      	ldr	r2, [r7, #4]
 801c66e:	23b0      	movs	r3, #176	@ 0xb0
 801c670:	009b      	lsls	r3, r3, #2
 801c672:	58d0      	ldr	r0, [r2, r3]
 801c674:	2380      	movs	r3, #128	@ 0x80
 801c676:	005b      	lsls	r3, r3, #1
 801c678:	2200      	movs	r2, #0
 801c67a:	2182      	movs	r1, #130	@ 0x82
 801c67c:	f7f7 fd46 	bl	801410c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c680:	2300      	movs	r3, #0
}
 801c682:	0018      	movs	r0, r3
 801c684:	46bd      	mov	sp, r7
 801c686:	b002      	add	sp, #8
 801c688:	bd80      	pop	{r7, pc}
 801c68a:	46c0      	nop			@ (mov r8, r8)
 801c68c:	2000329c 	.word	0x2000329c
 801c690:	40005c00 	.word	0x40005c00

0801c694 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c694:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c696:	b085      	sub	sp, #20
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c69c:	210f      	movs	r1, #15
 801c69e:	187b      	adds	r3, r7, r1
 801c6a0:	2200      	movs	r2, #0
 801c6a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6a4:	260e      	movs	r6, #14
 801c6a6:	19bb      	adds	r3, r7, r6
 801c6a8:	2200      	movs	r2, #0
 801c6aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c6ac:	687a      	ldr	r2, [r7, #4]
 801c6ae:	23b0      	movs	r3, #176	@ 0xb0
 801c6b0:	009b      	lsls	r3, r3, #2
 801c6b2:	58d3      	ldr	r3, [r2, r3]
 801c6b4:	000d      	movs	r5, r1
 801c6b6:	187c      	adds	r4, r7, r1
 801c6b8:	0018      	movs	r0, r3
 801c6ba:	f7f6 f859 	bl	8012770 <HAL_PCD_Start>
 801c6be:	0003      	movs	r3, r0
 801c6c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c6c2:	19bc      	adds	r4, r7, r6
 801c6c4:	197b      	adds	r3, r7, r5
 801c6c6:	781b      	ldrb	r3, [r3, #0]
 801c6c8:	0018      	movs	r0, r3
 801c6ca:	f000 f9bc 	bl	801ca46 <USBD_Get_USB_Status>
 801c6ce:	0003      	movs	r3, r0
 801c6d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c6d2:	19bb      	adds	r3, r7, r6
 801c6d4:	781b      	ldrb	r3, [r3, #0]
}
 801c6d6:	0018      	movs	r0, r3
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	b005      	add	sp, #20
 801c6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c6de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6e0:	b085      	sub	sp, #20
 801c6e2:	af00      	add	r7, sp, #0
 801c6e4:	6078      	str	r0, [r7, #4]
 801c6e6:	000c      	movs	r4, r1
 801c6e8:	0010      	movs	r0, r2
 801c6ea:	0019      	movs	r1, r3
 801c6ec:	1cfb      	adds	r3, r7, #3
 801c6ee:	1c22      	adds	r2, r4, #0
 801c6f0:	701a      	strb	r2, [r3, #0]
 801c6f2:	1cbb      	adds	r3, r7, #2
 801c6f4:	1c02      	adds	r2, r0, #0
 801c6f6:	701a      	strb	r2, [r3, #0]
 801c6f8:	003b      	movs	r3, r7
 801c6fa:	1c0a      	adds	r2, r1, #0
 801c6fc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c6fe:	260f      	movs	r6, #15
 801c700:	19bb      	adds	r3, r7, r6
 801c702:	2200      	movs	r2, #0
 801c704:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c706:	250e      	movs	r5, #14
 801c708:	197b      	adds	r3, r7, r5
 801c70a:	2200      	movs	r2, #0
 801c70c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c70e:	687a      	ldr	r2, [r7, #4]
 801c710:	23b0      	movs	r3, #176	@ 0xb0
 801c712:	009b      	lsls	r3, r3, #2
 801c714:	58d0      	ldr	r0, [r2, r3]
 801c716:	19bc      	adds	r4, r7, r6
 801c718:	1cbb      	adds	r3, r7, #2
 801c71a:	781d      	ldrb	r5, [r3, #0]
 801c71c:	003b      	movs	r3, r7
 801c71e:	881a      	ldrh	r2, [r3, #0]
 801c720:	1cfb      	adds	r3, r7, #3
 801c722:	7819      	ldrb	r1, [r3, #0]
 801c724:	002b      	movs	r3, r5
 801c726:	f7f6 f9b8 	bl	8012a9a <HAL_PCD_EP_Open>
 801c72a:	0003      	movs	r3, r0
 801c72c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c72e:	250e      	movs	r5, #14
 801c730:	197c      	adds	r4, r7, r5
 801c732:	19bb      	adds	r3, r7, r6
 801c734:	781b      	ldrb	r3, [r3, #0]
 801c736:	0018      	movs	r0, r3
 801c738:	f000 f985 	bl	801ca46 <USBD_Get_USB_Status>
 801c73c:	0003      	movs	r3, r0
 801c73e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c740:	197b      	adds	r3, r7, r5
 801c742:	781b      	ldrb	r3, [r3, #0]
}
 801c744:	0018      	movs	r0, r3
 801c746:	46bd      	mov	sp, r7
 801c748:	b005      	add	sp, #20
 801c74a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c74c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c74e:	b085      	sub	sp, #20
 801c750:	af00      	add	r7, sp, #0
 801c752:	6078      	str	r0, [r7, #4]
 801c754:	000a      	movs	r2, r1
 801c756:	1cfb      	adds	r3, r7, #3
 801c758:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c75a:	210f      	movs	r1, #15
 801c75c:	187b      	adds	r3, r7, r1
 801c75e:	2200      	movs	r2, #0
 801c760:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c762:	260e      	movs	r6, #14
 801c764:	19bb      	adds	r3, r7, r6
 801c766:	2200      	movs	r2, #0
 801c768:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c76a:	687a      	ldr	r2, [r7, #4]
 801c76c:	23b0      	movs	r3, #176	@ 0xb0
 801c76e:	009b      	lsls	r3, r3, #2
 801c770:	58d2      	ldr	r2, [r2, r3]
 801c772:	000d      	movs	r5, r1
 801c774:	187c      	adds	r4, r7, r1
 801c776:	1cfb      	adds	r3, r7, #3
 801c778:	781b      	ldrb	r3, [r3, #0]
 801c77a:	0019      	movs	r1, r3
 801c77c:	0010      	movs	r0, r2
 801c77e:	f7f6 f9fb 	bl	8012b78 <HAL_PCD_EP_Close>
 801c782:	0003      	movs	r3, r0
 801c784:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c786:	19bc      	adds	r4, r7, r6
 801c788:	197b      	adds	r3, r7, r5
 801c78a:	781b      	ldrb	r3, [r3, #0]
 801c78c:	0018      	movs	r0, r3
 801c78e:	f000 f95a 	bl	801ca46 <USBD_Get_USB_Status>
 801c792:	0003      	movs	r3, r0
 801c794:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c796:	19bb      	adds	r3, r7, r6
 801c798:	781b      	ldrb	r3, [r3, #0]
}
 801c79a:	0018      	movs	r0, r3
 801c79c:	46bd      	mov	sp, r7
 801c79e:	b005      	add	sp, #20
 801c7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7a2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c7a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7a4:	b085      	sub	sp, #20
 801c7a6:	af00      	add	r7, sp, #0
 801c7a8:	6078      	str	r0, [r7, #4]
 801c7aa:	000a      	movs	r2, r1
 801c7ac:	1cfb      	adds	r3, r7, #3
 801c7ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c7b0:	210f      	movs	r1, #15
 801c7b2:	187b      	adds	r3, r7, r1
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c7b8:	260e      	movs	r6, #14
 801c7ba:	19bb      	adds	r3, r7, r6
 801c7bc:	2200      	movs	r2, #0
 801c7be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c7c0:	687a      	ldr	r2, [r7, #4]
 801c7c2:	23b0      	movs	r3, #176	@ 0xb0
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	58d2      	ldr	r2, [r2, r3]
 801c7c8:	000d      	movs	r5, r1
 801c7ca:	187c      	adds	r4, r7, r1
 801c7cc:	1cfb      	adds	r3, r7, #3
 801c7ce:	781b      	ldrb	r3, [r3, #0]
 801c7d0:	0019      	movs	r1, r3
 801c7d2:	0010      	movs	r0, r2
 801c7d4:	f7f6 faad 	bl	8012d32 <HAL_PCD_EP_SetStall>
 801c7d8:	0003      	movs	r3, r0
 801c7da:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c7dc:	19bc      	adds	r4, r7, r6
 801c7de:	197b      	adds	r3, r7, r5
 801c7e0:	781b      	ldrb	r3, [r3, #0]
 801c7e2:	0018      	movs	r0, r3
 801c7e4:	f000 f92f 	bl	801ca46 <USBD_Get_USB_Status>
 801c7e8:	0003      	movs	r3, r0
 801c7ea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c7ec:	19bb      	adds	r3, r7, r6
 801c7ee:	781b      	ldrb	r3, [r3, #0]
}
 801c7f0:	0018      	movs	r0, r3
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	b005      	add	sp, #20
 801c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c7f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7fa:	b085      	sub	sp, #20
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
 801c800:	000a      	movs	r2, r1
 801c802:	1cfb      	adds	r3, r7, #3
 801c804:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c806:	210f      	movs	r1, #15
 801c808:	187b      	adds	r3, r7, r1
 801c80a:	2200      	movs	r2, #0
 801c80c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c80e:	260e      	movs	r6, #14
 801c810:	19bb      	adds	r3, r7, r6
 801c812:	2200      	movs	r2, #0
 801c814:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c816:	687a      	ldr	r2, [r7, #4]
 801c818:	23b0      	movs	r3, #176	@ 0xb0
 801c81a:	009b      	lsls	r3, r3, #2
 801c81c:	58d2      	ldr	r2, [r2, r3]
 801c81e:	000d      	movs	r5, r1
 801c820:	187c      	adds	r4, r7, r1
 801c822:	1cfb      	adds	r3, r7, #3
 801c824:	781b      	ldrb	r3, [r3, #0]
 801c826:	0019      	movs	r1, r3
 801c828:	0010      	movs	r0, r2
 801c82a:	f7f6 fade 	bl	8012dea <HAL_PCD_EP_ClrStall>
 801c82e:	0003      	movs	r3, r0
 801c830:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c832:	19bc      	adds	r4, r7, r6
 801c834:	197b      	adds	r3, r7, r5
 801c836:	781b      	ldrb	r3, [r3, #0]
 801c838:	0018      	movs	r0, r3
 801c83a:	f000 f904 	bl	801ca46 <USBD_Get_USB_Status>
 801c83e:	0003      	movs	r3, r0
 801c840:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c842:	19bb      	adds	r3, r7, r6
 801c844:	781b      	ldrb	r3, [r3, #0]
}
 801c846:	0018      	movs	r0, r3
 801c848:	46bd      	mov	sp, r7
 801c84a:	b005      	add	sp, #20
 801c84c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c84e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c84e:	b580      	push	{r7, lr}
 801c850:	b084      	sub	sp, #16
 801c852:	af00      	add	r7, sp, #0
 801c854:	6078      	str	r0, [r7, #4]
 801c856:	000a      	movs	r2, r1
 801c858:	1cfb      	adds	r3, r7, #3
 801c85a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	23b0      	movs	r3, #176	@ 0xb0
 801c860:	009b      	lsls	r3, r3, #2
 801c862:	58d3      	ldr	r3, [r2, r3]
 801c864:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c866:	1cfb      	adds	r3, r7, #3
 801c868:	781b      	ldrb	r3, [r3, #0]
 801c86a:	b25b      	sxtb	r3, r3
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	da0d      	bge.n	801c88c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c870:	1cfb      	adds	r3, r7, #3
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	227f      	movs	r2, #127	@ 0x7f
 801c876:	4013      	ands	r3, r2
 801c878:	68f9      	ldr	r1, [r7, #12]
 801c87a:	1c5a      	adds	r2, r3, #1
 801c87c:	0013      	movs	r3, r2
 801c87e:	009b      	lsls	r3, r3, #2
 801c880:	189b      	adds	r3, r3, r2
 801c882:	00db      	lsls	r3, r3, #3
 801c884:	18cb      	adds	r3, r1, r3
 801c886:	3302      	adds	r3, #2
 801c888:	781b      	ldrb	r3, [r3, #0]
 801c88a:	e00d      	b.n	801c8a8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c88c:	1cfb      	adds	r3, r7, #3
 801c88e:	781b      	ldrb	r3, [r3, #0]
 801c890:	227f      	movs	r2, #127	@ 0x7f
 801c892:	401a      	ands	r2, r3
 801c894:	68f8      	ldr	r0, [r7, #12]
 801c896:	23b5      	movs	r3, #181	@ 0xb5
 801c898:	0059      	lsls	r1, r3, #1
 801c89a:	0013      	movs	r3, r2
 801c89c:	009b      	lsls	r3, r3, #2
 801c89e:	189b      	adds	r3, r3, r2
 801c8a0:	00db      	lsls	r3, r3, #3
 801c8a2:	18c3      	adds	r3, r0, r3
 801c8a4:	185b      	adds	r3, r3, r1
 801c8a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c8a8:	0018      	movs	r0, r3
 801c8aa:	46bd      	mov	sp, r7
 801c8ac:	b004      	add	sp, #16
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8b2:	b085      	sub	sp, #20
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
 801c8b8:	000a      	movs	r2, r1
 801c8ba:	1cfb      	adds	r3, r7, #3
 801c8bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8be:	210f      	movs	r1, #15
 801c8c0:	187b      	adds	r3, r7, r1
 801c8c2:	2200      	movs	r2, #0
 801c8c4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c8c6:	260e      	movs	r6, #14
 801c8c8:	19bb      	adds	r3, r7, r6
 801c8ca:	2200      	movs	r2, #0
 801c8cc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c8ce:	687a      	ldr	r2, [r7, #4]
 801c8d0:	23b0      	movs	r3, #176	@ 0xb0
 801c8d2:	009b      	lsls	r3, r3, #2
 801c8d4:	58d2      	ldr	r2, [r2, r3]
 801c8d6:	000d      	movs	r5, r1
 801c8d8:	187c      	adds	r4, r7, r1
 801c8da:	1cfb      	adds	r3, r7, #3
 801c8dc:	781b      	ldrb	r3, [r3, #0]
 801c8de:	0019      	movs	r1, r3
 801c8e0:	0010      	movs	r0, r2
 801c8e2:	f7f6 f8af 	bl	8012a44 <HAL_PCD_SetAddress>
 801c8e6:	0003      	movs	r3, r0
 801c8e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c8ea:	19bc      	adds	r4, r7, r6
 801c8ec:	197b      	adds	r3, r7, r5
 801c8ee:	781b      	ldrb	r3, [r3, #0]
 801c8f0:	0018      	movs	r0, r3
 801c8f2:	f000 f8a8 	bl	801ca46 <USBD_Get_USB_Status>
 801c8f6:	0003      	movs	r3, r0
 801c8f8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c8fa:	19bb      	adds	r3, r7, r6
 801c8fc:	781b      	ldrb	r3, [r3, #0]
}
 801c8fe:	0018      	movs	r0, r3
 801c900:	46bd      	mov	sp, r7
 801c902:	b005      	add	sp, #20
 801c904:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c906 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c906:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c908:	b087      	sub	sp, #28
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	60f8      	str	r0, [r7, #12]
 801c90e:	0008      	movs	r0, r1
 801c910:	607a      	str	r2, [r7, #4]
 801c912:	0019      	movs	r1, r3
 801c914:	230b      	movs	r3, #11
 801c916:	18fb      	adds	r3, r7, r3
 801c918:	1c02      	adds	r2, r0, #0
 801c91a:	701a      	strb	r2, [r3, #0]
 801c91c:	2408      	movs	r4, #8
 801c91e:	193b      	adds	r3, r7, r4
 801c920:	1c0a      	adds	r2, r1, #0
 801c922:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c924:	2117      	movs	r1, #23
 801c926:	187b      	adds	r3, r7, r1
 801c928:	2200      	movs	r2, #0
 801c92a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c92c:	2516      	movs	r5, #22
 801c92e:	197b      	adds	r3, r7, r5
 801c930:	2200      	movs	r2, #0
 801c932:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c934:	68fa      	ldr	r2, [r7, #12]
 801c936:	23b0      	movs	r3, #176	@ 0xb0
 801c938:	009b      	lsls	r3, r3, #2
 801c93a:	58d0      	ldr	r0, [r2, r3]
 801c93c:	193b      	adds	r3, r7, r4
 801c93e:	881d      	ldrh	r5, [r3, #0]
 801c940:	000e      	movs	r6, r1
 801c942:	187c      	adds	r4, r7, r1
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	230b      	movs	r3, #11
 801c948:	18fb      	adds	r3, r7, r3
 801c94a:	7819      	ldrb	r1, [r3, #0]
 801c94c:	002b      	movs	r3, r5
 801c94e:	f7f6 f9b4 	bl	8012cba <HAL_PCD_EP_Transmit>
 801c952:	0003      	movs	r3, r0
 801c954:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c956:	2516      	movs	r5, #22
 801c958:	197c      	adds	r4, r7, r5
 801c95a:	19bb      	adds	r3, r7, r6
 801c95c:	781b      	ldrb	r3, [r3, #0]
 801c95e:	0018      	movs	r0, r3
 801c960:	f000 f871 	bl	801ca46 <USBD_Get_USB_Status>
 801c964:	0003      	movs	r3, r0
 801c966:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c968:	197b      	adds	r3, r7, r5
 801c96a:	781b      	ldrb	r3, [r3, #0]
}
 801c96c:	0018      	movs	r0, r3
 801c96e:	46bd      	mov	sp, r7
 801c970:	b007      	add	sp, #28
 801c972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c974 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c974:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c976:	b087      	sub	sp, #28
 801c978:	af00      	add	r7, sp, #0
 801c97a:	60f8      	str	r0, [r7, #12]
 801c97c:	0008      	movs	r0, r1
 801c97e:	607a      	str	r2, [r7, #4]
 801c980:	0019      	movs	r1, r3
 801c982:	230b      	movs	r3, #11
 801c984:	18fb      	adds	r3, r7, r3
 801c986:	1c02      	adds	r2, r0, #0
 801c988:	701a      	strb	r2, [r3, #0]
 801c98a:	2408      	movs	r4, #8
 801c98c:	193b      	adds	r3, r7, r4
 801c98e:	1c0a      	adds	r2, r1, #0
 801c990:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c992:	2117      	movs	r1, #23
 801c994:	187b      	adds	r3, r7, r1
 801c996:	2200      	movs	r2, #0
 801c998:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c99a:	2516      	movs	r5, #22
 801c99c:	197b      	adds	r3, r7, r5
 801c99e:	2200      	movs	r2, #0
 801c9a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c9a2:	68fa      	ldr	r2, [r7, #12]
 801c9a4:	23b0      	movs	r3, #176	@ 0xb0
 801c9a6:	009b      	lsls	r3, r3, #2
 801c9a8:	58d0      	ldr	r0, [r2, r3]
 801c9aa:	193b      	adds	r3, r7, r4
 801c9ac:	881d      	ldrh	r5, [r3, #0]
 801c9ae:	000e      	movs	r6, r1
 801c9b0:	187c      	adds	r4, r7, r1
 801c9b2:	687a      	ldr	r2, [r7, #4]
 801c9b4:	230b      	movs	r3, #11
 801c9b6:	18fb      	adds	r3, r7, r3
 801c9b8:	7819      	ldrb	r1, [r3, #0]
 801c9ba:	002b      	movs	r3, r5
 801c9bc:	f7f6 f92d 	bl	8012c1a <HAL_PCD_EP_Receive>
 801c9c0:	0003      	movs	r3, r0
 801c9c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c9c4:	2516      	movs	r5, #22
 801c9c6:	197c      	adds	r4, r7, r5
 801c9c8:	19bb      	adds	r3, r7, r6
 801c9ca:	781b      	ldrb	r3, [r3, #0]
 801c9cc:	0018      	movs	r0, r3
 801c9ce:	f000 f83a 	bl	801ca46 <USBD_Get_USB_Status>
 801c9d2:	0003      	movs	r3, r0
 801c9d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c9d6:	197b      	adds	r3, r7, r5
 801c9d8:	781b      	ldrb	r3, [r3, #0]
}
 801c9da:	0018      	movs	r0, r3
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	b007      	add	sp, #28
 801c9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c9e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c9e2:	b580      	push	{r7, lr}
 801c9e4:	b082      	sub	sp, #8
 801c9e6:	af00      	add	r7, sp, #0
 801c9e8:	6078      	str	r0, [r7, #4]
 801c9ea:	000a      	movs	r2, r1
 801c9ec:	1cfb      	adds	r3, r7, #3
 801c9ee:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c9f0:	687a      	ldr	r2, [r7, #4]
 801c9f2:	23b0      	movs	r3, #176	@ 0xb0
 801c9f4:	009b      	lsls	r3, r3, #2
 801c9f6:	58d2      	ldr	r2, [r2, r3]
 801c9f8:	1cfb      	adds	r3, r7, #3
 801c9fa:	781b      	ldrb	r3, [r3, #0]
 801c9fc:	0019      	movs	r1, r3
 801c9fe:	0010      	movs	r0, r2
 801ca00:	f7f6 f942 	bl	8012c88 <HAL_PCD_EP_GetRxCount>
 801ca04:	0003      	movs	r3, r0
}
 801ca06:	0018      	movs	r0, r3
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	b002      	add	sp, #8
 801ca0c:	bd80      	pop	{r7, pc}
	...

0801ca10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b082      	sub	sp, #8
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801ca18:	4b02      	ldr	r3, [pc, #8]	@ (801ca24 <USBD_static_malloc+0x14>)
}
 801ca1a:	0018      	movs	r0, r3
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	b002      	add	sp, #8
 801ca20:	bd80      	pop	{r7, pc}
 801ca22:	46c0      	nop			@ (mov r8, r8)
 801ca24:	20003590 	.word	0x20003590

0801ca28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	b082      	sub	sp, #8
 801ca2c:	af00      	add	r7, sp, #0
 801ca2e:	6078      	str	r0, [r7, #4]

}
 801ca30:	46c0      	nop			@ (mov r8, r8)
 801ca32:	46bd      	mov	sp, r7
 801ca34:	b002      	add	sp, #8
 801ca36:	bd80      	pop	{r7, pc}

0801ca38 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801ca38:	b580      	push	{r7, lr}
 801ca3a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801ca3c:	f7eb fb5e 	bl	80080fc <SystemClock_Config>
}
 801ca40:	46c0      	nop			@ (mov r8, r8)
 801ca42:	46bd      	mov	sp, r7
 801ca44:	bd80      	pop	{r7, pc}

0801ca46 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ca46:	b580      	push	{r7, lr}
 801ca48:	b084      	sub	sp, #16
 801ca4a:	af00      	add	r7, sp, #0
 801ca4c:	0002      	movs	r2, r0
 801ca4e:	1dfb      	adds	r3, r7, #7
 801ca50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ca52:	230f      	movs	r3, #15
 801ca54:	18fb      	adds	r3, r7, r3
 801ca56:	2200      	movs	r2, #0
 801ca58:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801ca5a:	1dfb      	adds	r3, r7, #7
 801ca5c:	781b      	ldrb	r3, [r3, #0]
 801ca5e:	2b03      	cmp	r3, #3
 801ca60:	d017      	beq.n	801ca92 <USBD_Get_USB_Status+0x4c>
 801ca62:	dc1b      	bgt.n	801ca9c <USBD_Get_USB_Status+0x56>
 801ca64:	2b02      	cmp	r3, #2
 801ca66:	d00f      	beq.n	801ca88 <USBD_Get_USB_Status+0x42>
 801ca68:	dc18      	bgt.n	801ca9c <USBD_Get_USB_Status+0x56>
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d002      	beq.n	801ca74 <USBD_Get_USB_Status+0x2e>
 801ca6e:	2b01      	cmp	r3, #1
 801ca70:	d005      	beq.n	801ca7e <USBD_Get_USB_Status+0x38>
 801ca72:	e013      	b.n	801ca9c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ca74:	230f      	movs	r3, #15
 801ca76:	18fb      	adds	r3, r7, r3
 801ca78:	2200      	movs	r2, #0
 801ca7a:	701a      	strb	r2, [r3, #0]
    break;
 801ca7c:	e013      	b.n	801caa6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ca7e:	230f      	movs	r3, #15
 801ca80:	18fb      	adds	r3, r7, r3
 801ca82:	2202      	movs	r2, #2
 801ca84:	701a      	strb	r2, [r3, #0]
    break;
 801ca86:	e00e      	b.n	801caa6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ca88:	230f      	movs	r3, #15
 801ca8a:	18fb      	adds	r3, r7, r3
 801ca8c:	2201      	movs	r2, #1
 801ca8e:	701a      	strb	r2, [r3, #0]
    break;
 801ca90:	e009      	b.n	801caa6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ca92:	230f      	movs	r3, #15
 801ca94:	18fb      	adds	r3, r7, r3
 801ca96:	2202      	movs	r2, #2
 801ca98:	701a      	strb	r2, [r3, #0]
    break;
 801ca9a:	e004      	b.n	801caa6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801ca9c:	230f      	movs	r3, #15
 801ca9e:	18fb      	adds	r3, r7, r3
 801caa0:	2202      	movs	r2, #2
 801caa2:	701a      	strb	r2, [r3, #0]
    break;
 801caa4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801caa6:	230f      	movs	r3, #15
 801caa8:	18fb      	adds	r3, r7, r3
 801caaa:	781b      	ldrb	r3, [r3, #0]
}
 801caac:	0018      	movs	r0, r3
 801caae:	46bd      	mov	sp, r7
 801cab0:	b004      	add	sp, #16
 801cab2:	bd80      	pop	{r7, pc}

0801cab4 <arm_cfft_radix4by2_q31>:
 801cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cab6:	465f      	mov	r7, fp
 801cab8:	4656      	mov	r6, sl
 801caba:	464d      	mov	r5, r9
 801cabc:	4644      	mov	r4, r8
 801cabe:	000b      	movs	r3, r1
 801cac0:	b4f0      	push	{r4, r5, r6, r7}
 801cac2:	085b      	lsrs	r3, r3, #1
 801cac4:	b08f      	sub	sp, #60	@ 0x3c
 801cac6:	910a      	str	r1, [sp, #40]	@ 0x28
 801cac8:	0007      	movs	r7, r0
 801caca:	9009      	str	r0, [sp, #36]	@ 0x24
 801cacc:	0011      	movs	r1, r2
 801cace:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cad0:	930c      	str	r3, [sp, #48]	@ 0x30
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	d100      	bne.n	801cad8 <arm_cfft_radix4by2_q31+0x24>
 801cad6:	e0a0      	b.n	801cc1a <arm_cfft_radix4by2_q31+0x166>
 801cad8:	0002      	movs	r2, r0
 801cada:	00db      	lsls	r3, r3, #3
 801cadc:	3204      	adds	r2, #4
 801cade:	4691      	mov	r9, r2
 801cae0:	4698      	mov	r8, r3
 801cae2:	000a      	movs	r2, r1
 801cae4:	464e      	mov	r6, r9
 801cae6:	4442      	add	r2, r8
 801cae8:	4699      	mov	r9, r3
 801caea:	4688      	mov	r8, r1
 801caec:	9208      	str	r2, [sp, #32]
 801caee:	900d      	str	r0, [sp, #52]	@ 0x34
 801caf0:	4643      	mov	r3, r8
 801caf2:	681b      	ldr	r3, [r3, #0]
 801caf4:	469b      	mov	fp, r3
 801caf6:	4643      	mov	r3, r8
 801caf8:	685b      	ldr	r3, [r3, #4]
 801cafa:	469a      	mov	sl, r3
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	109c      	asrs	r4, r3, #2
 801cb00:	464b      	mov	r3, r9
 801cb02:	58fb      	ldr	r3, [r7, r3]
 801cb04:	109a      	asrs	r2, r3, #2
 801cb06:	18a3      	adds	r3, r4, r2
 801cb08:	603b      	str	r3, [r7, #0]
 801cb0a:	6833      	ldr	r3, [r6, #0]
 801cb0c:	1aa4      	subs	r4, r4, r2
 801cb0e:	109d      	asrs	r5, r3, #2
 801cb10:	464b      	mov	r3, r9
 801cb12:	58f3      	ldr	r3, [r6, r3]
 801cb14:	17e2      	asrs	r2, r4, #31
 801cb16:	109b      	asrs	r3, r3, #2
 801cb18:	18e9      	adds	r1, r5, r3
 801cb1a:	6031      	str	r1, [r6, #0]
 801cb1c:	0011      	movs	r1, r2
 801cb1e:	465a      	mov	r2, fp
 801cb20:	17d2      	asrs	r2, r2, #31
 801cb22:	0010      	movs	r0, r2
 801cb24:	4652      	mov	r2, sl
 801cb26:	1aed      	subs	r5, r5, r3
 801cb28:	17eb      	asrs	r3, r5, #31
 801cb2a:	17d2      	asrs	r2, r2, #31
 801cb2c:	9307      	str	r3, [sp, #28]
 801cb2e:	9204      	str	r2, [sp, #16]
 801cb30:	0003      	movs	r3, r0
 801cb32:	465a      	mov	r2, fp
 801cb34:	9006      	str	r0, [sp, #24]
 801cb36:	0020      	movs	r0, r4
 801cb38:	9105      	str	r1, [sp, #20]
 801cb3a:	f7e3 fd41 	bl	80005c0 <__aeabi_lmul>
 801cb3e:	2280      	movs	r2, #128	@ 0x80
 801cb40:	2300      	movs	r3, #0
 801cb42:	0612      	lsls	r2, r2, #24
 801cb44:	1880      	adds	r0, r0, r2
 801cb46:	4159      	adcs	r1, r3
 801cb48:	2300      	movs	r3, #0
 801cb4a:	9101      	str	r1, [sp, #4]
 801cb4c:	9300      	str	r3, [sp, #0]
 801cb4e:	4652      	mov	r2, sl
 801cb50:	9b04      	ldr	r3, [sp, #16]
 801cb52:	0028      	movs	r0, r5
 801cb54:	17e9      	asrs	r1, r5, #31
 801cb56:	f7e3 fd33 	bl	80005c0 <__aeabi_lmul>
 801cb5a:	9a00      	ldr	r2, [sp, #0]
 801cb5c:	9b01      	ldr	r3, [sp, #4]
 801cb5e:	1880      	adds	r0, r0, r2
 801cb60:	4159      	adcs	r1, r3
 801cb62:	2280      	movs	r2, #128	@ 0x80
 801cb64:	2300      	movs	r3, #0
 801cb66:	0612      	lsls	r2, r2, #24
 801cb68:	1880      	adds	r0, r0, r2
 801cb6a:	4159      	adcs	r1, r3
 801cb6c:	464a      	mov	r2, r9
 801cb6e:	004b      	lsls	r3, r1, #1
 801cb70:	50bb      	str	r3, [r7, r2]
 801cb72:	4658      	mov	r0, fp
 801cb74:	002a      	movs	r2, r5
 801cb76:	9b07      	ldr	r3, [sp, #28]
 801cb78:	9906      	ldr	r1, [sp, #24]
 801cb7a:	f7e3 fd21 	bl	80005c0 <__aeabi_lmul>
 801cb7e:	2280      	movs	r2, #128	@ 0x80
 801cb80:	2300      	movs	r3, #0
 801cb82:	0612      	lsls	r2, r2, #24
 801cb84:	1880      	adds	r0, r0, r2
 801cb86:	4159      	adcs	r1, r3
 801cb88:	2000      	movs	r0, #0
 801cb8a:	9103      	str	r1, [sp, #12]
 801cb8c:	9002      	str	r0, [sp, #8]
 801cb8e:	4652      	mov	r2, sl
 801cb90:	9b04      	ldr	r3, [sp, #16]
 801cb92:	0020      	movs	r0, r4
 801cb94:	9905      	ldr	r1, [sp, #20]
 801cb96:	f7e3 fd13 	bl	80005c0 <__aeabi_lmul>
 801cb9a:	9a02      	ldr	r2, [sp, #8]
 801cb9c:	9b03      	ldr	r3, [sp, #12]
 801cb9e:	1a12      	subs	r2, r2, r0
 801cba0:	418b      	sbcs	r3, r1
 801cba2:	2080      	movs	r0, #128	@ 0x80
 801cba4:	2100      	movs	r1, #0
 801cba6:	0600      	lsls	r0, r0, #24
 801cba8:	1812      	adds	r2, r2, r0
 801cbaa:	414b      	adcs	r3, r1
 801cbac:	464a      	mov	r2, r9
 801cbae:	005b      	lsls	r3, r3, #1
 801cbb0:	50b3      	str	r3, [r6, r2]
 801cbb2:	2308      	movs	r3, #8
 801cbb4:	469c      	mov	ip, r3
 801cbb6:	9b08      	ldr	r3, [sp, #32]
 801cbb8:	44e0      	add	r8, ip
 801cbba:	3708      	adds	r7, #8
 801cbbc:	3608      	adds	r6, #8
 801cbbe:	4598      	cmp	r8, r3
 801cbc0:	d196      	bne.n	801caf0 <arm_cfft_radix4by2_q31+0x3c>
 801cbc2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cbc4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cbc6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cbc8:	2302      	movs	r3, #2
 801cbca:	003a      	movs	r2, r7
 801cbcc:	0029      	movs	r1, r5
 801cbce:	0020      	movs	r0, r4
 801cbd0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cbd2:	f000 f957 	bl	801ce84 <arm_radix4_butterfly_q31>
 801cbd6:	46a4      	mov	ip, r4
 801cbd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cbda:	2302      	movs	r3, #2
 801cbdc:	0088      	lsls	r0, r1, #2
 801cbde:	4460      	add	r0, ip
 801cbe0:	003a      	movs	r2, r7
 801cbe2:	0029      	movs	r1, r5
 801cbe4:	f000 f94e 	bl	801ce84 <arm_radix4_butterfly_q31>
 801cbe8:	46a4      	mov	ip, r4
 801cbea:	0128      	lsls	r0, r5, #4
 801cbec:	4460      	add	r0, ip
 801cbee:	6833      	ldr	r3, [r6, #0]
 801cbf0:	005b      	lsls	r3, r3, #1
 801cbf2:	6033      	str	r3, [r6, #0]
 801cbf4:	6873      	ldr	r3, [r6, #4]
 801cbf6:	005b      	lsls	r3, r3, #1
 801cbf8:	6073      	str	r3, [r6, #4]
 801cbfa:	68b3      	ldr	r3, [r6, #8]
 801cbfc:	005b      	lsls	r3, r3, #1
 801cbfe:	60b3      	str	r3, [r6, #8]
 801cc00:	68f3      	ldr	r3, [r6, #12]
 801cc02:	005b      	lsls	r3, r3, #1
 801cc04:	60f3      	str	r3, [r6, #12]
 801cc06:	3610      	adds	r6, #16
 801cc08:	42b0      	cmp	r0, r6
 801cc0a:	d1f0      	bne.n	801cbee <arm_cfft_radix4by2_q31+0x13a>
 801cc0c:	b00f      	add	sp, #60	@ 0x3c
 801cc0e:	bc3c      	pop	{r2, r3, r4, r5}
 801cc10:	4690      	mov	r8, r2
 801cc12:	4699      	mov	r9, r3
 801cc14:	46a2      	mov	sl, r4
 801cc16:	46ab      	mov	fp, r5
 801cc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc1a:	2302      	movs	r3, #2
 801cc1c:	2100      	movs	r1, #0
 801cc1e:	0015      	movs	r5, r2
 801cc20:	f000 f930 	bl	801ce84 <arm_radix4_butterfly_q31>
 801cc24:	46bc      	mov	ip, r7
 801cc26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc28:	002a      	movs	r2, r5
 801cc2a:	0098      	lsls	r0, r3, #2
 801cc2c:	4460      	add	r0, ip
 801cc2e:	2302      	movs	r3, #2
 801cc30:	2100      	movs	r1, #0
 801cc32:	f000 f927 	bl	801ce84 <arm_radix4_butterfly_q31>
 801cc36:	e7e9      	b.n	801cc0c <arm_cfft_radix4by2_q31+0x158>

0801cc38 <arm_cfft_radix4by2_inverse_q31>:
 801cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc3a:	465f      	mov	r7, fp
 801cc3c:	4656      	mov	r6, sl
 801cc3e:	464d      	mov	r5, r9
 801cc40:	4644      	mov	r4, r8
 801cc42:	000b      	movs	r3, r1
 801cc44:	b4f0      	push	{r4, r5, r6, r7}
 801cc46:	085b      	lsrs	r3, r3, #1
 801cc48:	b08f      	sub	sp, #60	@ 0x3c
 801cc4a:	910a      	str	r1, [sp, #40]	@ 0x28
 801cc4c:	0007      	movs	r7, r0
 801cc4e:	9009      	str	r0, [sp, #36]	@ 0x24
 801cc50:	0011      	movs	r1, r2
 801cc52:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cc54:	930c      	str	r3, [sp, #48]	@ 0x30
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d100      	bne.n	801cc5c <arm_cfft_radix4by2_inverse_q31+0x24>
 801cc5a:	e0a0      	b.n	801cd9e <arm_cfft_radix4by2_inverse_q31+0x166>
 801cc5c:	0002      	movs	r2, r0
 801cc5e:	00db      	lsls	r3, r3, #3
 801cc60:	3204      	adds	r2, #4
 801cc62:	4691      	mov	r9, r2
 801cc64:	4698      	mov	r8, r3
 801cc66:	000a      	movs	r2, r1
 801cc68:	464e      	mov	r6, r9
 801cc6a:	4442      	add	r2, r8
 801cc6c:	4699      	mov	r9, r3
 801cc6e:	4688      	mov	r8, r1
 801cc70:	9208      	str	r2, [sp, #32]
 801cc72:	900d      	str	r0, [sp, #52]	@ 0x34
 801cc74:	4643      	mov	r3, r8
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	469b      	mov	fp, r3
 801cc7a:	4643      	mov	r3, r8
 801cc7c:	685b      	ldr	r3, [r3, #4]
 801cc7e:	469a      	mov	sl, r3
 801cc80:	683b      	ldr	r3, [r7, #0]
 801cc82:	109c      	asrs	r4, r3, #2
 801cc84:	464b      	mov	r3, r9
 801cc86:	58fb      	ldr	r3, [r7, r3]
 801cc88:	109a      	asrs	r2, r3, #2
 801cc8a:	18a3      	adds	r3, r4, r2
 801cc8c:	603b      	str	r3, [r7, #0]
 801cc8e:	6833      	ldr	r3, [r6, #0]
 801cc90:	1aa4      	subs	r4, r4, r2
 801cc92:	109d      	asrs	r5, r3, #2
 801cc94:	464b      	mov	r3, r9
 801cc96:	58f3      	ldr	r3, [r6, r3]
 801cc98:	17e2      	asrs	r2, r4, #31
 801cc9a:	109b      	asrs	r3, r3, #2
 801cc9c:	18e9      	adds	r1, r5, r3
 801cc9e:	6031      	str	r1, [r6, #0]
 801cca0:	0011      	movs	r1, r2
 801cca2:	465a      	mov	r2, fp
 801cca4:	17d2      	asrs	r2, r2, #31
 801cca6:	0010      	movs	r0, r2
 801cca8:	4652      	mov	r2, sl
 801ccaa:	1aed      	subs	r5, r5, r3
 801ccac:	17eb      	asrs	r3, r5, #31
 801ccae:	17d2      	asrs	r2, r2, #31
 801ccb0:	9307      	str	r3, [sp, #28]
 801ccb2:	9204      	str	r2, [sp, #16]
 801ccb4:	0003      	movs	r3, r0
 801ccb6:	465a      	mov	r2, fp
 801ccb8:	9006      	str	r0, [sp, #24]
 801ccba:	0020      	movs	r0, r4
 801ccbc:	9105      	str	r1, [sp, #20]
 801ccbe:	f7e3 fc7f 	bl	80005c0 <__aeabi_lmul>
 801ccc2:	2280      	movs	r2, #128	@ 0x80
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	0612      	lsls	r2, r2, #24
 801ccc8:	1880      	adds	r0, r0, r2
 801ccca:	4159      	adcs	r1, r3
 801cccc:	2300      	movs	r3, #0
 801ccce:	9101      	str	r1, [sp, #4]
 801ccd0:	9300      	str	r3, [sp, #0]
 801ccd2:	4652      	mov	r2, sl
 801ccd4:	9b04      	ldr	r3, [sp, #16]
 801ccd6:	0028      	movs	r0, r5
 801ccd8:	17e9      	asrs	r1, r5, #31
 801ccda:	f7e3 fc71 	bl	80005c0 <__aeabi_lmul>
 801ccde:	9a00      	ldr	r2, [sp, #0]
 801cce0:	9b01      	ldr	r3, [sp, #4]
 801cce2:	1a12      	subs	r2, r2, r0
 801cce4:	418b      	sbcs	r3, r1
 801cce6:	2080      	movs	r0, #128	@ 0x80
 801cce8:	2100      	movs	r1, #0
 801ccea:	0600      	lsls	r0, r0, #24
 801ccec:	1812      	adds	r2, r2, r0
 801ccee:	414b      	adcs	r3, r1
 801ccf0:	464a      	mov	r2, r9
 801ccf2:	005b      	lsls	r3, r3, #1
 801ccf4:	50bb      	str	r3, [r7, r2]
 801ccf6:	4658      	mov	r0, fp
 801ccf8:	002a      	movs	r2, r5
 801ccfa:	9b07      	ldr	r3, [sp, #28]
 801ccfc:	9906      	ldr	r1, [sp, #24]
 801ccfe:	f7e3 fc5f 	bl	80005c0 <__aeabi_lmul>
 801cd02:	2280      	movs	r2, #128	@ 0x80
 801cd04:	2300      	movs	r3, #0
 801cd06:	0612      	lsls	r2, r2, #24
 801cd08:	1880      	adds	r0, r0, r2
 801cd0a:	4159      	adcs	r1, r3
 801cd0c:	2000      	movs	r0, #0
 801cd0e:	9103      	str	r1, [sp, #12]
 801cd10:	9002      	str	r0, [sp, #8]
 801cd12:	4652      	mov	r2, sl
 801cd14:	9b04      	ldr	r3, [sp, #16]
 801cd16:	0020      	movs	r0, r4
 801cd18:	9905      	ldr	r1, [sp, #20]
 801cd1a:	f7e3 fc51 	bl	80005c0 <__aeabi_lmul>
 801cd1e:	9b02      	ldr	r3, [sp, #8]
 801cd20:	9c03      	ldr	r4, [sp, #12]
 801cd22:	18c0      	adds	r0, r0, r3
 801cd24:	4161      	adcs	r1, r4
 801cd26:	2380      	movs	r3, #128	@ 0x80
 801cd28:	2400      	movs	r4, #0
 801cd2a:	061b      	lsls	r3, r3, #24
 801cd2c:	18c0      	adds	r0, r0, r3
 801cd2e:	4161      	adcs	r1, r4
 801cd30:	464a      	mov	r2, r9
 801cd32:	004b      	lsls	r3, r1, #1
 801cd34:	50b3      	str	r3, [r6, r2]
 801cd36:	2308      	movs	r3, #8
 801cd38:	469c      	mov	ip, r3
 801cd3a:	9b08      	ldr	r3, [sp, #32]
 801cd3c:	44e0      	add	r8, ip
 801cd3e:	3708      	adds	r7, #8
 801cd40:	3608      	adds	r6, #8
 801cd42:	4598      	cmp	r8, r3
 801cd44:	d196      	bne.n	801cc74 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801cd46:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cd48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cd4a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cd4c:	2302      	movs	r3, #2
 801cd4e:	003a      	movs	r2, r7
 801cd50:	0029      	movs	r1, r5
 801cd52:	0020      	movs	r0, r4
 801cd54:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cd56:	f000 fb3b 	bl	801d3d0 <arm_radix4_butterfly_inverse_q31>
 801cd5a:	46a4      	mov	ip, r4
 801cd5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cd5e:	2302      	movs	r3, #2
 801cd60:	0088      	lsls	r0, r1, #2
 801cd62:	4460      	add	r0, ip
 801cd64:	003a      	movs	r2, r7
 801cd66:	0029      	movs	r1, r5
 801cd68:	f000 fb32 	bl	801d3d0 <arm_radix4_butterfly_inverse_q31>
 801cd6c:	46a4      	mov	ip, r4
 801cd6e:	0128      	lsls	r0, r5, #4
 801cd70:	4460      	add	r0, ip
 801cd72:	6833      	ldr	r3, [r6, #0]
 801cd74:	005b      	lsls	r3, r3, #1
 801cd76:	6033      	str	r3, [r6, #0]
 801cd78:	6873      	ldr	r3, [r6, #4]
 801cd7a:	005b      	lsls	r3, r3, #1
 801cd7c:	6073      	str	r3, [r6, #4]
 801cd7e:	68b3      	ldr	r3, [r6, #8]
 801cd80:	005b      	lsls	r3, r3, #1
 801cd82:	60b3      	str	r3, [r6, #8]
 801cd84:	68f3      	ldr	r3, [r6, #12]
 801cd86:	005b      	lsls	r3, r3, #1
 801cd88:	60f3      	str	r3, [r6, #12]
 801cd8a:	3610      	adds	r6, #16
 801cd8c:	42b0      	cmp	r0, r6
 801cd8e:	d1f0      	bne.n	801cd72 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801cd90:	b00f      	add	sp, #60	@ 0x3c
 801cd92:	bc3c      	pop	{r2, r3, r4, r5}
 801cd94:	4690      	mov	r8, r2
 801cd96:	4699      	mov	r9, r3
 801cd98:	46a2      	mov	sl, r4
 801cd9a:	46ab      	mov	fp, r5
 801cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd9e:	2302      	movs	r3, #2
 801cda0:	2100      	movs	r1, #0
 801cda2:	0015      	movs	r5, r2
 801cda4:	f000 fb14 	bl	801d3d0 <arm_radix4_butterfly_inverse_q31>
 801cda8:	46bc      	mov	ip, r7
 801cdaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cdac:	002a      	movs	r2, r5
 801cdae:	0098      	lsls	r0, r3, #2
 801cdb0:	4460      	add	r0, ip
 801cdb2:	2302      	movs	r3, #2
 801cdb4:	2100      	movs	r1, #0
 801cdb6:	f000 fb0b 	bl	801d3d0 <arm_radix4_butterfly_inverse_q31>
 801cdba:	e7e9      	b.n	801cd90 <arm_cfft_radix4by2_inverse_q31+0x158>

0801cdbc <arm_cfft_q31>:
 801cdbc:	b570      	push	{r4, r5, r6, lr}
 801cdbe:	001e      	movs	r6, r3
 801cdc0:	2380      	movs	r3, #128	@ 0x80
 801cdc2:	000d      	movs	r5, r1
 801cdc4:	0004      	movs	r4, r0
 801cdc6:	8801      	ldrh	r1, [r0, #0]
 801cdc8:	005b      	lsls	r3, r3, #1
 801cdca:	2a01      	cmp	r2, #1
 801cdcc:	d028      	beq.n	801ce20 <arm_cfft_q31+0x64>
 801cdce:	4299      	cmp	r1, r3
 801cdd0:	d020      	beq.n	801ce14 <arm_cfft_q31+0x58>
 801cdd2:	d812      	bhi.n	801cdfa <arm_cfft_q31+0x3e>
 801cdd4:	2920      	cmp	r1, #32
 801cdd6:	d004      	beq.n	801cde2 <arm_cfft_q31+0x26>
 801cdd8:	d949      	bls.n	801ce6e <arm_cfft_q31+0xb2>
 801cdda:	2940      	cmp	r1, #64	@ 0x40
 801cddc:	d01a      	beq.n	801ce14 <arm_cfft_q31+0x58>
 801cdde:	2980      	cmp	r1, #128	@ 0x80
 801cde0:	d103      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801cde2:	6862      	ldr	r2, [r4, #4]
 801cde4:	0028      	movs	r0, r5
 801cde6:	f7ff fe65 	bl	801cab4 <arm_cfft_radix4by2_q31>
 801cdea:	2e00      	cmp	r6, #0
 801cdec:	d004      	beq.n	801cdf8 <arm_cfft_q31+0x3c>
 801cdee:	68a2      	ldr	r2, [r4, #8]
 801cdf0:	89a1      	ldrh	r1, [r4, #12]
 801cdf2:	0028      	movs	r0, r5
 801cdf4:	f7e3 f988 	bl	8000108 <arm_bitreversal_32>
 801cdf8:	bd70      	pop	{r4, r5, r6, pc}
 801cdfa:	2380      	movs	r3, #128	@ 0x80
 801cdfc:	00db      	lsls	r3, r3, #3
 801cdfe:	4299      	cmp	r1, r3
 801ce00:	d008      	beq.n	801ce14 <arm_cfft_q31+0x58>
 801ce02:	d92f      	bls.n	801ce64 <arm_cfft_q31+0xa8>
 801ce04:	2380      	movs	r3, #128	@ 0x80
 801ce06:	011b      	lsls	r3, r3, #4
 801ce08:	4299      	cmp	r1, r3
 801ce0a:	d0ea      	beq.n	801cde2 <arm_cfft_q31+0x26>
 801ce0c:	2380      	movs	r3, #128	@ 0x80
 801ce0e:	015b      	lsls	r3, r3, #5
 801ce10:	4299      	cmp	r1, r3
 801ce12:	d1ea      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801ce14:	2301      	movs	r3, #1
 801ce16:	6862      	ldr	r2, [r4, #4]
 801ce18:	0028      	movs	r0, r5
 801ce1a:	f000 f833 	bl	801ce84 <arm_radix4_butterfly_q31>
 801ce1e:	e7e4      	b.n	801cdea <arm_cfft_q31+0x2e>
 801ce20:	4299      	cmp	r1, r3
 801ce22:	d019      	beq.n	801ce58 <arm_cfft_q31+0x9c>
 801ce24:	d80b      	bhi.n	801ce3e <arm_cfft_q31+0x82>
 801ce26:	2920      	cmp	r1, #32
 801ce28:	d004      	beq.n	801ce34 <arm_cfft_q31+0x78>
 801ce2a:	d928      	bls.n	801ce7e <arm_cfft_q31+0xc2>
 801ce2c:	2940      	cmp	r1, #64	@ 0x40
 801ce2e:	d013      	beq.n	801ce58 <arm_cfft_q31+0x9c>
 801ce30:	2980      	cmp	r1, #128	@ 0x80
 801ce32:	d1da      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801ce34:	6862      	ldr	r2, [r4, #4]
 801ce36:	0028      	movs	r0, r5
 801ce38:	f7ff fefe 	bl	801cc38 <arm_cfft_radix4by2_inverse_q31>
 801ce3c:	e7d5      	b.n	801cdea <arm_cfft_q31+0x2e>
 801ce3e:	2380      	movs	r3, #128	@ 0x80
 801ce40:	00db      	lsls	r3, r3, #3
 801ce42:	4299      	cmp	r1, r3
 801ce44:	d008      	beq.n	801ce58 <arm_cfft_q31+0x9c>
 801ce46:	d915      	bls.n	801ce74 <arm_cfft_q31+0xb8>
 801ce48:	2380      	movs	r3, #128	@ 0x80
 801ce4a:	011b      	lsls	r3, r3, #4
 801ce4c:	4299      	cmp	r1, r3
 801ce4e:	d0f1      	beq.n	801ce34 <arm_cfft_q31+0x78>
 801ce50:	2380      	movs	r3, #128	@ 0x80
 801ce52:	015b      	lsls	r3, r3, #5
 801ce54:	4299      	cmp	r1, r3
 801ce56:	d1c8      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801ce58:	2301      	movs	r3, #1
 801ce5a:	6862      	ldr	r2, [r4, #4]
 801ce5c:	0028      	movs	r0, r5
 801ce5e:	f000 fab7 	bl	801d3d0 <arm_radix4_butterfly_inverse_q31>
 801ce62:	e7c2      	b.n	801cdea <arm_cfft_q31+0x2e>
 801ce64:	2380      	movs	r3, #128	@ 0x80
 801ce66:	009b      	lsls	r3, r3, #2
 801ce68:	4299      	cmp	r1, r3
 801ce6a:	d0ba      	beq.n	801cde2 <arm_cfft_q31+0x26>
 801ce6c:	e7bd      	b.n	801cdea <arm_cfft_q31+0x2e>
 801ce6e:	2910      	cmp	r1, #16
 801ce70:	d1bb      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801ce72:	e7cf      	b.n	801ce14 <arm_cfft_q31+0x58>
 801ce74:	2380      	movs	r3, #128	@ 0x80
 801ce76:	009b      	lsls	r3, r3, #2
 801ce78:	4299      	cmp	r1, r3
 801ce7a:	d0db      	beq.n	801ce34 <arm_cfft_q31+0x78>
 801ce7c:	e7b5      	b.n	801cdea <arm_cfft_q31+0x2e>
 801ce7e:	2910      	cmp	r1, #16
 801ce80:	d1b3      	bne.n	801cdea <arm_cfft_q31+0x2e>
 801ce82:	e7e9      	b.n	801ce58 <arm_cfft_q31+0x9c>

0801ce84 <arm_radix4_butterfly_q31>:
 801ce84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce86:	464d      	mov	r5, r9
 801ce88:	4644      	mov	r4, r8
 801ce8a:	465f      	mov	r7, fp
 801ce8c:	4656      	mov	r6, sl
 801ce8e:	469c      	mov	ip, r3
 801ce90:	b4f0      	push	{r4, r5, r6, r7}
 801ce92:	b0a7      	sub	sp, #156	@ 0x9c
 801ce94:	9114      	str	r1, [sp, #80]	@ 0x50
 801ce96:	0889      	lsrs	r1, r1, #2
 801ce98:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce9a:	00cb      	lsls	r3, r1, #3
 801ce9c:	0015      	movs	r5, r2
 801ce9e:	9223      	str	r2, [sp, #140]	@ 0x8c
 801cea0:	18c2      	adds	r2, r0, r3
 801cea2:	000c      	movs	r4, r1
 801cea4:	469a      	mov	sl, r3
 801cea6:	9124      	str	r1, [sp, #144]	@ 0x90
 801cea8:	18d1      	adds	r1, r2, r3
 801ceaa:	4663      	mov	r3, ip
 801ceac:	468b      	mov	fp, r1
 801ceae:	0119      	lsls	r1, r3, #4
 801ceb0:	910d      	str	r1, [sp, #52]	@ 0x34
 801ceb2:	00d9      	lsls	r1, r3, #3
 801ceb4:	005b      	lsls	r3, r3, #1
 801ceb6:	4463      	add	r3, ip
 801ceb8:	910e      	str	r1, [sp, #56]	@ 0x38
 801ceba:	00d9      	lsls	r1, r3, #3
 801cebc:	465b      	mov	r3, fp
 801cebe:	44da      	add	sl, fp
 801cec0:	4690      	mov	r8, r2
 801cec2:	4683      	mov	fp, r0
 801cec4:	4699      	mov	r9, r3
 801cec6:	9022      	str	r0, [sp, #136]	@ 0x88
 801cec8:	9025      	str	r0, [sp, #148]	@ 0x94
 801ceca:	910f      	str	r1, [sp, #60]	@ 0x3c
 801cecc:	9502      	str	r5, [sp, #8]
 801cece:	9500      	str	r5, [sp, #0]
 801ced0:	9501      	str	r5, [sp, #4]
 801ced2:	9407      	str	r4, [sp, #28]
 801ced4:	465b      	mov	r3, fp
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	4642      	mov	r2, r8
 801ceda:	111c      	asrs	r4, r3, #4
 801cedc:	464b      	mov	r3, r9
 801cede:	4658      	mov	r0, fp
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	6812      	ldr	r2, [r2, #0]
 801cee4:	111b      	asrs	r3, r3, #4
 801cee6:	18e7      	adds	r7, r4, r3
 801cee8:	1ae3      	subs	r3, r4, r3
 801ceea:	1114      	asrs	r4, r2, #4
 801ceec:	4652      	mov	r2, sl
 801ceee:	6840      	ldr	r0, [r0, #4]
 801cef0:	6812      	ldr	r2, [r2, #0]
 801cef2:	1105      	asrs	r5, r0, #4
 801cef4:	4648      	mov	r0, r9
 801cef6:	9303      	str	r3, [sp, #12]
 801cef8:	1113      	asrs	r3, r2, #4
 801cefa:	18e2      	adds	r2, r4, r3
 801cefc:	465c      	mov	r4, fp
 801cefe:	6840      	ldr	r0, [r0, #4]
 801cf00:	1103      	asrs	r3, r0, #4
 801cf02:	18ee      	adds	r6, r5, r3
 801cf04:	1ae8      	subs	r0, r5, r3
 801cf06:	18bb      	adds	r3, r7, r2
 801cf08:	6023      	str	r3, [r4, #0]
 801cf0a:	4644      	mov	r4, r8
 801cf0c:	6864      	ldr	r4, [r4, #4]
 801cf0e:	9004      	str	r0, [sp, #16]
 801cf10:	1125      	asrs	r5, r4, #4
 801cf12:	4654      	mov	r4, sl
 801cf14:	6864      	ldr	r4, [r4, #4]
 801cf16:	1123      	asrs	r3, r4, #4
 801cf18:	465c      	mov	r4, fp
 801cf1a:	18eb      	adds	r3, r5, r3
 801cf1c:	18f1      	adds	r1, r6, r3
 801cf1e:	6061      	str	r1, [r4, #4]
 801cf20:	4655      	mov	r5, sl
 801cf22:	4644      	mov	r4, r8
 801cf24:	686d      	ldr	r5, [r5, #4]
 801cf26:	6864      	ldr	r4, [r4, #4]
 801cf28:	1129      	asrs	r1, r5, #4
 801cf2a:	1124      	asrs	r4, r4, #4
 801cf2c:	1a64      	subs	r4, r4, r1
 801cf2e:	4641      	mov	r1, r8
 801cf30:	6809      	ldr	r1, [r1, #0]
 801cf32:	9405      	str	r4, [sp, #20]
 801cf34:	1108      	asrs	r0, r1, #4
 801cf36:	4651      	mov	r1, sl
 801cf38:	6809      	ldr	r1, [r1, #0]
 801cf3a:	1abc      	subs	r4, r7, r2
 801cf3c:	1109      	asrs	r1, r1, #4
 801cf3e:	1a41      	subs	r1, r0, r1
 801cf40:	17e2      	asrs	r2, r4, #31
 801cf42:	9106      	str	r1, [sp, #24]
 801cf44:	0011      	movs	r1, r2
 801cf46:	9a01      	ldr	r2, [sp, #4]
 801cf48:	9108      	str	r1, [sp, #32]
 801cf4a:	6817      	ldr	r7, [r2, #0]
 801cf4c:	17fd      	asrs	r5, r7, #31
 801cf4e:	0028      	movs	r0, r5
 801cf50:	1af5      	subs	r5, r6, r3
 801cf52:	17ee      	asrs	r6, r5, #31
 801cf54:	960a      	str	r6, [sp, #40]	@ 0x28
 801cf56:	6856      	ldr	r6, [r2, #4]
 801cf58:	9009      	str	r0, [sp, #36]	@ 0x24
 801cf5a:	17f3      	asrs	r3, r6, #31
 801cf5c:	003a      	movs	r2, r7
 801cf5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf60:	0003      	movs	r3, r0
 801cf62:	0020      	movs	r0, r4
 801cf64:	f7e3 fb2c 	bl	80005c0 <__aeabi_lmul>
 801cf68:	0032      	movs	r2, r6
 801cf6a:	17f3      	asrs	r3, r6, #31
 801cf6c:	910c      	str	r1, [sp, #48]	@ 0x30
 801cf6e:	0028      	movs	r0, r5
 801cf70:	17e9      	asrs	r1, r5, #31
 801cf72:	f7e3 fb25 	bl	80005c0 <__aeabi_lmul>
 801cf76:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cf78:	002a      	movs	r2, r5
 801cf7a:	4684      	mov	ip, r0
 801cf7c:	4640      	mov	r0, r8
 801cf7e:	4461      	add	r1, ip
 801cf80:	0049      	lsls	r1, r1, #1
 801cf82:	6001      	str	r1, [r0, #0]
 801cf84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cf88:	0038      	movs	r0, r7
 801cf8a:	f7e3 fb19 	bl	80005c0 <__aeabi_lmul>
 801cf8e:	0032      	movs	r2, r6
 801cf90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf92:	000d      	movs	r5, r1
 801cf94:	0020      	movs	r0, r4
 801cf96:	9908      	ldr	r1, [sp, #32]
 801cf98:	f7e3 fb12 	bl	80005c0 <__aeabi_lmul>
 801cf9c:	4646      	mov	r6, r8
 801cf9e:	1a6d      	subs	r5, r5, r1
 801cfa0:	006d      	lsls	r5, r5, #1
 801cfa2:	6075      	str	r5, [r6, #4]
 801cfa4:	9903      	ldr	r1, [sp, #12]
 801cfa6:	9d05      	ldr	r5, [sp, #20]
 801cfa8:	000c      	movs	r4, r1
 801cfaa:	46ac      	mov	ip, r5
 801cfac:	4464      	add	r4, ip
 801cfae:	17e6      	asrs	r6, r4, #31
 801cfb0:	0031      	movs	r1, r6
 801cfb2:	9b00      	ldr	r3, [sp, #0]
 801cfb4:	9804      	ldr	r0, [sp, #16]
 801cfb6:	681e      	ldr	r6, [r3, #0]
 801cfb8:	17f7      	asrs	r7, r6, #31
 801cfba:	9709      	str	r7, [sp, #36]	@ 0x24
 801cfbc:	9f06      	ldr	r7, [sp, #24]
 801cfbe:	0032      	movs	r2, r6
 801cfc0:	1bc7      	subs	r7, r0, r7
 801cfc2:	17fd      	asrs	r5, r7, #31
 801cfc4:	950a      	str	r5, [sp, #40]	@ 0x28
 801cfc6:	685d      	ldr	r5, [r3, #4]
 801cfc8:	17f3      	asrs	r3, r6, #31
 801cfca:	17e8      	asrs	r0, r5, #31
 801cfcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801cfce:	0020      	movs	r0, r4
 801cfd0:	9108      	str	r1, [sp, #32]
 801cfd2:	f7e3 faf5 	bl	80005c0 <__aeabi_lmul>
 801cfd6:	002a      	movs	r2, r5
 801cfd8:	17eb      	asrs	r3, r5, #31
 801cfda:	910c      	str	r1, [sp, #48]	@ 0x30
 801cfdc:	0038      	movs	r0, r7
 801cfde:	17f9      	asrs	r1, r7, #31
 801cfe0:	f7e3 faee 	bl	80005c0 <__aeabi_lmul>
 801cfe4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cfe6:	003a      	movs	r2, r7
 801cfe8:	4684      	mov	ip, r0
 801cfea:	4648      	mov	r0, r9
 801cfec:	4461      	add	r1, ip
 801cfee:	0049      	lsls	r1, r1, #1
 801cff0:	6001      	str	r1, [r0, #0]
 801cff2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cff4:	0030      	movs	r0, r6
 801cff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cff8:	f7e3 fae2 	bl	80005c0 <__aeabi_lmul>
 801cffc:	002a      	movs	r2, r5
 801cffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d000:	000e      	movs	r6, r1
 801d002:	0020      	movs	r0, r4
 801d004:	9908      	ldr	r1, [sp, #32]
 801d006:	f7e3 fadb 	bl	80005c0 <__aeabi_lmul>
 801d00a:	464c      	mov	r4, r9
 801d00c:	9d05      	ldr	r5, [sp, #20]
 801d00e:	1a76      	subs	r6, r6, r1
 801d010:	9903      	ldr	r1, [sp, #12]
 801d012:	0076      	lsls	r6, r6, #1
 801d014:	6066      	str	r6, [r4, #4]
 801d016:	1b4c      	subs	r4, r1, r5
 801d018:	9e06      	ldr	r6, [sp, #24]
 801d01a:	17e1      	asrs	r1, r4, #31
 801d01c:	9103      	str	r1, [sp, #12]
 801d01e:	9902      	ldr	r1, [sp, #8]
 801d020:	46b4      	mov	ip, r6
 801d022:	680f      	ldr	r7, [r1, #0]
 801d024:	9804      	ldr	r0, [sp, #16]
 801d026:	17fd      	asrs	r5, r7, #31
 801d028:	002b      	movs	r3, r5
 801d02a:	684e      	ldr	r6, [r1, #4]
 801d02c:	4460      	add	r0, ip
 801d02e:	0005      	movs	r5, r0
 801d030:	17c0      	asrs	r0, r0, #31
 801d032:	9005      	str	r0, [sp, #20]
 801d034:	17f0      	asrs	r0, r6, #31
 801d036:	9006      	str	r0, [sp, #24]
 801d038:	003a      	movs	r2, r7
 801d03a:	0020      	movs	r0, r4
 801d03c:	17e1      	asrs	r1, r4, #31
 801d03e:	9304      	str	r3, [sp, #16]
 801d040:	f7e3 fabe 	bl	80005c0 <__aeabi_lmul>
 801d044:	0032      	movs	r2, r6
 801d046:	9108      	str	r1, [sp, #32]
 801d048:	17f3      	asrs	r3, r6, #31
 801d04a:	0028      	movs	r0, r5
 801d04c:	17e9      	asrs	r1, r5, #31
 801d04e:	f7e3 fab7 	bl	80005c0 <__aeabi_lmul>
 801d052:	9808      	ldr	r0, [sp, #32]
 801d054:	002a      	movs	r2, r5
 801d056:	4684      	mov	ip, r0
 801d058:	4650      	mov	r0, sl
 801d05a:	4461      	add	r1, ip
 801d05c:	0049      	lsls	r1, r1, #1
 801d05e:	6001      	str	r1, [r0, #0]
 801d060:	9b05      	ldr	r3, [sp, #20]
 801d062:	9904      	ldr	r1, [sp, #16]
 801d064:	0038      	movs	r0, r7
 801d066:	f7e3 faab 	bl	80005c0 <__aeabi_lmul>
 801d06a:	0020      	movs	r0, r4
 801d06c:	2408      	movs	r4, #8
 801d06e:	000d      	movs	r5, r1
 801d070:	0032      	movs	r2, r6
 801d072:	9b06      	ldr	r3, [sp, #24]
 801d074:	9903      	ldr	r1, [sp, #12]
 801d076:	f7e3 faa3 	bl	80005c0 <__aeabi_lmul>
 801d07a:	46a4      	mov	ip, r4
 801d07c:	4650      	mov	r0, sl
 801d07e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d080:	44e3      	add	fp, ip
 801d082:	44e0      	add	r8, ip
 801d084:	44e1      	add	r9, ip
 801d086:	44e2      	add	sl, ip
 801d088:	46a4      	mov	ip, r4
 801d08a:	1a6d      	subs	r5, r5, r1
 801d08c:	006d      	lsls	r5, r5, #1
 801d08e:	9a01      	ldr	r2, [sp, #4]
 801d090:	6045      	str	r5, [r0, #4]
 801d092:	9807      	ldr	r0, [sp, #28]
 801d094:	4462      	add	r2, ip
 801d096:	3801      	subs	r0, #1
 801d098:	9201      	str	r2, [sp, #4]
 801d09a:	9007      	str	r0, [sp, #28]
 801d09c:	9b00      	ldr	r3, [sp, #0]
 801d09e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d0a0:	9902      	ldr	r1, [sp, #8]
 801d0a2:	4694      	mov	ip, r2
 801d0a4:	4463      	add	r3, ip
 801d0a6:	9300      	str	r3, [sp, #0]
 801d0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0aa:	469c      	mov	ip, r3
 801d0ac:	4461      	add	r1, ip
 801d0ae:	9102      	str	r1, [sp, #8]
 801d0b0:	2800      	cmp	r0, #0
 801d0b2:	d000      	beq.n	801d0b6 <arm_radix4_butterfly_q31+0x232>
 801d0b4:	e70e      	b.n	801ced4 <arm_radix4_butterfly_q31+0x50>
 801d0b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d0b8:	009b      	lsls	r3, r3, #2
 801d0ba:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d0bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d0be:	9320      	str	r3, [sp, #128]	@ 0x80
 801d0c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d0c2:	2b04      	cmp	r3, #4
 801d0c4:	d800      	bhi.n	801d0c8 <arm_radix4_butterfly_q31+0x244>
 801d0c6:	e180      	b.n	801d3ca <arm_radix4_butterfly_q31+0x546>
 801d0c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d0ca:	0893      	lsrs	r3, r2, #2
 801d0cc:	1e59      	subs	r1, r3, #1
 801d0ce:	9321      	str	r3, [sp, #132]	@ 0x84
 801d0d0:	00db      	lsls	r3, r3, #3
 801d0d2:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d0d4:	00d3      	lsls	r3, r2, #3
 801d0d6:	9300      	str	r3, [sp, #0]
 801d0d8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d0da:	911a      	str	r1, [sp, #104]	@ 0x68
 801d0dc:	00da      	lsls	r2, r3, #3
 801d0de:	921e      	str	r2, [sp, #120]	@ 0x78
 801d0e0:	011a      	lsls	r2, r3, #4
 801d0e2:	921d      	str	r2, [sp, #116]	@ 0x74
 801d0e4:	001a      	movs	r2, r3
 801d0e6:	4694      	mov	ip, r2
 801d0e8:	005b      	lsls	r3, r3, #1
 801d0ea:	4463      	add	r3, ip
 801d0ec:	00db      	lsls	r3, r3, #3
 801d0ee:	931c      	str	r3, [sp, #112]	@ 0x70
 801d0f0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d0f2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d0f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d0f6:	9318      	str	r3, [sp, #96]	@ 0x60
 801d0f8:	9319      	str	r3, [sp, #100]	@ 0x64
 801d0fa:	9316      	str	r3, [sp, #88]	@ 0x58
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	9315      	str	r3, [sp, #84]	@ 0x54
 801d100:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d102:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d104:	681a      	ldr	r2, [r3, #0]
 801d106:	685b      	ldr	r3, [r3, #4]
 801d108:	9205      	str	r2, [sp, #20]
 801d10a:	9306      	str	r3, [sp, #24]
 801d10c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d10e:	468c      	mov	ip, r1
 801d110:	681a      	ldr	r2, [r3, #0]
 801d112:	685b      	ldr	r3, [r3, #4]
 801d114:	9207      	str	r2, [sp, #28]
 801d116:	9308      	str	r3, [sp, #32]
 801d118:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d11a:	681a      	ldr	r2, [r3, #0]
 801d11c:	685b      	ldr	r3, [r3, #4]
 801d11e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d120:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d122:	930a      	str	r3, [sp, #40]	@ 0x28
 801d124:	0013      	movs	r3, r2
 801d126:	4463      	add	r3, ip
 801d128:	4698      	mov	r8, r3
 801d12a:	0013      	movs	r3, r2
 801d12c:	4442      	add	r2, r8
 801d12e:	4691      	mov	r9, r2
 801d130:	001a      	movs	r2, r3
 801d132:	444a      	add	r2, r9
 801d134:	4692      	mov	sl, r2
 801d136:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d138:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d13a:	4293      	cmp	r3, r2
 801d13c:	d800      	bhi.n	801d140 <arm_radix4_butterfly_q31+0x2bc>
 801d13e:	e0dd      	b.n	801d2fc <arm_radix4_butterfly_q31+0x478>
 801d140:	4694      	mov	ip, r2
 801d142:	468b      	mov	fp, r1
 801d144:	4644      	mov	r4, r8
 801d146:	4655      	mov	r5, sl
 801d148:	9b07      	ldr	r3, [sp, #28]
 801d14a:	17db      	asrs	r3, r3, #31
 801d14c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d14e:	9b08      	ldr	r3, [sp, #32]
 801d150:	17db      	asrs	r3, r3, #31
 801d152:	930d      	str	r3, [sp, #52]	@ 0x34
 801d154:	9b05      	ldr	r3, [sp, #20]
 801d156:	17db      	asrs	r3, r3, #31
 801d158:	930e      	str	r3, [sp, #56]	@ 0x38
 801d15a:	9b06      	ldr	r3, [sp, #24]
 801d15c:	17db      	asrs	r3, r3, #31
 801d15e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d162:	17db      	asrs	r3, r3, #31
 801d164:	9310      	str	r3, [sp, #64]	@ 0x40
 801d166:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d168:	17db      	asrs	r3, r3, #31
 801d16a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d16c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d16e:	4463      	add	r3, ip
 801d170:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d172:	465b      	mov	r3, fp
 801d174:	4659      	mov	r1, fp
 801d176:	681a      	ldr	r2, [r3, #0]
 801d178:	464b      	mov	r3, r9
 801d17a:	684f      	ldr	r7, [r1, #4]
 801d17c:	4649      	mov	r1, r9
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	18d6      	adds	r6, r2, r3
 801d182:	1ad3      	subs	r3, r2, r3
 801d184:	9301      	str	r3, [sp, #4]
 801d186:	684b      	ldr	r3, [r1, #4]
 801d188:	18f8      	adds	r0, r7, r3
 801d18a:	1af9      	subs	r1, r7, r3
 801d18c:	6827      	ldr	r7, [r4, #0]
 801d18e:	9102      	str	r1, [sp, #8]
 801d190:	003a      	movs	r2, r7
 801d192:	682f      	ldr	r7, [r5, #0]
 801d194:	46bc      	mov	ip, r7
 801d196:	465f      	mov	r7, fp
 801d198:	4462      	add	r2, ip
 801d19a:	18b3      	adds	r3, r6, r2
 801d19c:	109b      	asrs	r3, r3, #2
 801d19e:	603b      	str	r3, [r7, #0]
 801d1a0:	6867      	ldr	r7, [r4, #4]
 801d1a2:	1ab6      	subs	r6, r6, r2
 801d1a4:	46b8      	mov	r8, r7
 801d1a6:	686f      	ldr	r7, [r5, #4]
 801d1a8:	17f2      	asrs	r2, r6, #31
 801d1aa:	46bc      	mov	ip, r7
 801d1ac:	44e0      	add	r8, ip
 801d1ae:	4643      	mov	r3, r8
 801d1b0:	465f      	mov	r7, fp
 801d1b2:	18c1      	adds	r1, r0, r3
 801d1b4:	1089      	asrs	r1, r1, #2
 801d1b6:	6079      	str	r1, [r7, #4]
 801d1b8:	9900      	ldr	r1, [sp, #0]
 801d1ba:	4690      	mov	r8, r2
 801d1bc:	468c      	mov	ip, r1
 801d1be:	6867      	ldr	r7, [r4, #4]
 801d1c0:	6869      	ldr	r1, [r5, #4]
 801d1c2:	44e3      	add	fp, ip
 801d1c4:	1a7f      	subs	r7, r7, r1
 801d1c6:	9703      	str	r7, [sp, #12]
 801d1c8:	6829      	ldr	r1, [r5, #0]
 801d1ca:	6827      	ldr	r7, [r4, #0]
 801d1cc:	1a7f      	subs	r7, r7, r1
 801d1ce:	9704      	str	r7, [sp, #16]
 801d1d0:	1ac7      	subs	r7, r0, r3
 801d1d2:	17fa      	asrs	r2, r7, #31
 801d1d4:	4692      	mov	sl, r2
 801d1d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d1d8:	9a07      	ldr	r2, [sp, #28]
 801d1da:	0030      	movs	r0, r6
 801d1dc:	4641      	mov	r1, r8
 801d1de:	f7e3 f9ef 	bl	80005c0 <__aeabi_lmul>
 801d1e2:	9a08      	ldr	r2, [sp, #32]
 801d1e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1e6:	9112      	str	r1, [sp, #72]	@ 0x48
 801d1e8:	0038      	movs	r0, r7
 801d1ea:	4651      	mov	r1, sl
 801d1ec:	f7e3 f9e8 	bl	80005c0 <__aeabi_lmul>
 801d1f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d1f2:	9a07      	ldr	r2, [sp, #28]
 801d1f4:	4684      	mov	ip, r0
 801d1f6:	4461      	add	r1, ip
 801d1f8:	1049      	asrs	r1, r1, #1
 801d1fa:	6021      	str	r1, [r4, #0]
 801d1fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d1fe:	0038      	movs	r0, r7
 801d200:	4651      	mov	r1, sl
 801d202:	f7e3 f9dd 	bl	80005c0 <__aeabi_lmul>
 801d206:	9a08      	ldr	r2, [sp, #32]
 801d208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d20a:	000f      	movs	r7, r1
 801d20c:	0030      	movs	r0, r6
 801d20e:	4641      	mov	r1, r8
 801d210:	f7e3 f9d6 	bl	80005c0 <__aeabi_lmul>
 801d214:	9b00      	ldr	r3, [sp, #0]
 801d216:	9a01      	ldr	r2, [sp, #4]
 801d218:	469c      	mov	ip, r3
 801d21a:	9803      	ldr	r0, [sp, #12]
 801d21c:	1a7f      	subs	r7, r7, r1
 801d21e:	107f      	asrs	r7, r7, #1
 801d220:	6067      	str	r7, [r4, #4]
 801d222:	0016      	movs	r6, r2
 801d224:	4464      	add	r4, ip
 801d226:	4684      	mov	ip, r0
 801d228:	4466      	add	r6, ip
 801d22a:	17f2      	asrs	r2, r6, #31
 801d22c:	4690      	mov	r8, r2
 801d22e:	9902      	ldr	r1, [sp, #8]
 801d230:	9f04      	ldr	r7, [sp, #16]
 801d232:	0030      	movs	r0, r6
 801d234:	1bcf      	subs	r7, r1, r7
 801d236:	17fa      	asrs	r2, r7, #31
 801d238:	4692      	mov	sl, r2
 801d23a:	4641      	mov	r1, r8
 801d23c:	9a05      	ldr	r2, [sp, #20]
 801d23e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d240:	f7e3 f9be 	bl	80005c0 <__aeabi_lmul>
 801d244:	9a06      	ldr	r2, [sp, #24]
 801d246:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d248:	9112      	str	r1, [sp, #72]	@ 0x48
 801d24a:	0038      	movs	r0, r7
 801d24c:	4651      	mov	r1, sl
 801d24e:	f7e3 f9b7 	bl	80005c0 <__aeabi_lmul>
 801d252:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d254:	9a05      	ldr	r2, [sp, #20]
 801d256:	4684      	mov	ip, r0
 801d258:	4648      	mov	r0, r9
 801d25a:	4461      	add	r1, ip
 801d25c:	1049      	asrs	r1, r1, #1
 801d25e:	6001      	str	r1, [r0, #0]
 801d260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d262:	0038      	movs	r0, r7
 801d264:	4651      	mov	r1, sl
 801d266:	f7e3 f9ab 	bl	80005c0 <__aeabi_lmul>
 801d26a:	9a06      	ldr	r2, [sp, #24]
 801d26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d26e:	000f      	movs	r7, r1
 801d270:	0030      	movs	r0, r6
 801d272:	4641      	mov	r1, r8
 801d274:	f7e3 f9a4 	bl	80005c0 <__aeabi_lmul>
 801d278:	464e      	mov	r6, r9
 801d27a:	9a00      	ldr	r2, [sp, #0]
 801d27c:	9b01      	ldr	r3, [sp, #4]
 801d27e:	4694      	mov	ip, r2
 801d280:	9803      	ldr	r0, [sp, #12]
 801d282:	1a7f      	subs	r7, r7, r1
 801d284:	107f      	asrs	r7, r7, #1
 801d286:	6077      	str	r7, [r6, #4]
 801d288:	1a1e      	subs	r6, r3, r0
 801d28a:	9b04      	ldr	r3, [sp, #16]
 801d28c:	44e1      	add	r9, ip
 801d28e:	469c      	mov	ip, r3
 801d290:	17f0      	asrs	r0, r6, #31
 801d292:	4680      	mov	r8, r0
 801d294:	9902      	ldr	r1, [sp, #8]
 801d296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d298:	4461      	add	r1, ip
 801d29a:	17cb      	asrs	r3, r1, #31
 801d29c:	000f      	movs	r7, r1
 801d29e:	469a      	mov	sl, r3
 801d2a0:	0030      	movs	r0, r6
 801d2a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2a4:	4641      	mov	r1, r8
 801d2a6:	f7e3 f98b 	bl	80005c0 <__aeabi_lmul>
 801d2aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d2ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d2ae:	9101      	str	r1, [sp, #4]
 801d2b0:	0038      	movs	r0, r7
 801d2b2:	4651      	mov	r1, sl
 801d2b4:	f7e3 f984 	bl	80005c0 <__aeabi_lmul>
 801d2b8:	9801      	ldr	r0, [sp, #4]
 801d2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d2bc:	4684      	mov	ip, r0
 801d2be:	4461      	add	r1, ip
 801d2c0:	1049      	asrs	r1, r1, #1
 801d2c2:	6029      	str	r1, [r5, #0]
 801d2c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d2c6:	0038      	movs	r0, r7
 801d2c8:	4651      	mov	r1, sl
 801d2ca:	f7e3 f979 	bl	80005c0 <__aeabi_lmul>
 801d2ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d2d0:	000f      	movs	r7, r1
 801d2d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d2d4:	0030      	movs	r0, r6
 801d2d6:	4641      	mov	r1, r8
 801d2d8:	f7e3 f972 	bl	80005c0 <__aeabi_lmul>
 801d2dc:	1a7f      	subs	r7, r7, r1
 801d2de:	107f      	asrs	r7, r7, #1
 801d2e0:	606f      	str	r7, [r5, #4]
 801d2e2:	9a00      	ldr	r2, [sp, #0]
 801d2e4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d2e6:	4694      	mov	ip, r2
 801d2e8:	4465      	add	r5, ip
 801d2ea:	468c      	mov	ip, r1
 801d2ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d2ee:	0013      	movs	r3, r2
 801d2f0:	4462      	add	r2, ip
 801d2f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d2f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d2f6:	429a      	cmp	r2, r3
 801d2f8:	d900      	bls.n	801d2fc <arm_radix4_butterfly_q31+0x478>
 801d2fa:	e73a      	b.n	801d172 <arm_radix4_butterfly_q31+0x2ee>
 801d2fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d2fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d300:	468c      	mov	ip, r1
 801d302:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d304:	4462      	add	r2, ip
 801d306:	468c      	mov	ip, r1
 801d308:	9216      	str	r2, [sp, #88]	@ 0x58
 801d30a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d30c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d30e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d310:	4462      	add	r2, ip
 801d312:	468c      	mov	ip, r1
 801d314:	9219      	str	r2, [sp, #100]	@ 0x64
 801d316:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d318:	3301      	adds	r3, #1
 801d31a:	4462      	add	r2, ip
 801d31c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d31e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d320:	9315      	str	r3, [sp, #84]	@ 0x54
 801d322:	3208      	adds	r2, #8
 801d324:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d326:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d328:	4293      	cmp	r3, r2
 801d32a:	d800      	bhi.n	801d32e <arm_radix4_butterfly_q31+0x4aa>
 801d32c:	e6e8      	b.n	801d100 <arm_radix4_butterfly_q31+0x27c>
 801d32e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d330:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d332:	009b      	lsls	r3, r3, #2
 801d334:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d336:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d338:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d33a:	089b      	lsrs	r3, r3, #2
 801d33c:	9320      	str	r3, [sp, #128]	@ 0x80
 801d33e:	2b04      	cmp	r3, #4
 801d340:	d900      	bls.n	801d344 <arm_radix4_butterfly_q31+0x4c0>
 801d342:	e6c1      	b.n	801d0c8 <arm_radix4_butterfly_q31+0x244>
 801d344:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d346:	469a      	mov	sl, r3
 801d348:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d34a:	691c      	ldr	r4, [r3, #16]
 801d34c:	685a      	ldr	r2, [r3, #4]
 801d34e:	46a1      	mov	r9, r4
 801d350:	4690      	mov	r8, r2
 801d352:	6819      	ldr	r1, [r3, #0]
 801d354:	689a      	ldr	r2, [r3, #8]
 801d356:	699f      	ldr	r7, [r3, #24]
 801d358:	188d      	adds	r5, r1, r2
 801d35a:	444d      	add	r5, r9
 801d35c:	19ed      	adds	r5, r5, r7
 801d35e:	69de      	ldr	r6, [r3, #28]
 801d360:	601d      	str	r5, [r3, #0]
 801d362:	4645      	mov	r5, r8
 801d364:	46b4      	mov	ip, r6
 801d366:	68d8      	ldr	r0, [r3, #12]
 801d368:	695c      	ldr	r4, [r3, #20]
 801d36a:	182d      	adds	r5, r5, r0
 801d36c:	192d      	adds	r5, r5, r4
 801d36e:	4465      	add	r5, ip
 801d370:	605d      	str	r5, [r3, #4]
 801d372:	1a8d      	subs	r5, r1, r2
 801d374:	444d      	add	r5, r9
 801d376:	1bed      	subs	r5, r5, r7
 801d378:	609d      	str	r5, [r3, #8]
 801d37a:	4645      	mov	r5, r8
 801d37c:	1a2d      	subs	r5, r5, r0
 801d37e:	192d      	adds	r5, r5, r4
 801d380:	1bad      	subs	r5, r5, r6
 801d382:	464e      	mov	r6, r9
 801d384:	60dd      	str	r5, [r3, #12]
 801d386:	180d      	adds	r5, r1, r0
 801d388:	1bad      	subs	r5, r5, r6
 801d38a:	4666      	mov	r6, ip
 801d38c:	1bad      	subs	r5, r5, r6
 801d38e:	611d      	str	r5, [r3, #16]
 801d390:	4645      	mov	r5, r8
 801d392:	1aad      	subs	r5, r5, r2
 801d394:	4442      	add	r2, r8
 801d396:	1b12      	subs	r2, r2, r4
 801d398:	1bd2      	subs	r2, r2, r7
 801d39a:	1a08      	subs	r0, r1, r0
 801d39c:	61da      	str	r2, [r3, #28]
 801d39e:	4649      	mov	r1, r9
 801d3a0:	2201      	movs	r2, #1
 801d3a2:	1a41      	subs	r1, r0, r1
 801d3a4:	4252      	negs	r2, r2
 801d3a6:	4461      	add	r1, ip
 801d3a8:	4694      	mov	ip, r2
 801d3aa:	44e2      	add	sl, ip
 801d3ac:	4652      	mov	r2, sl
 801d3ae:	1b2d      	subs	r5, r5, r4
 801d3b0:	19ed      	adds	r5, r5, r7
 801d3b2:	615d      	str	r5, [r3, #20]
 801d3b4:	6199      	str	r1, [r3, #24]
 801d3b6:	3320      	adds	r3, #32
 801d3b8:	2a00      	cmp	r2, #0
 801d3ba:	d1c6      	bne.n	801d34a <arm_radix4_butterfly_q31+0x4c6>
 801d3bc:	b027      	add	sp, #156	@ 0x9c
 801d3be:	bc3c      	pop	{r2, r3, r4, r5}
 801d3c0:	4690      	mov	r8, r2
 801d3c2:	4699      	mov	r9, r3
 801d3c4:	46a2      	mov	sl, r4
 801d3c6:	46ab      	mov	fp, r5
 801d3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3ca:	469a      	mov	sl, r3
 801d3cc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d3ce:	e7bc      	b.n	801d34a <arm_radix4_butterfly_q31+0x4c6>

0801d3d0 <arm_radix4_butterfly_inverse_q31>:
 801d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3d2:	464d      	mov	r5, r9
 801d3d4:	4644      	mov	r4, r8
 801d3d6:	465f      	mov	r7, fp
 801d3d8:	4656      	mov	r6, sl
 801d3da:	b4f0      	push	{r4, r5, r6, r7}
 801d3dc:	b0a7      	sub	sp, #156	@ 0x9c
 801d3de:	469c      	mov	ip, r3
 801d3e0:	9114      	str	r1, [sp, #80]	@ 0x50
 801d3e2:	0889      	lsrs	r1, r1, #2
 801d3e4:	9310      	str	r3, [sp, #64]	@ 0x40
 801d3e6:	00cb      	lsls	r3, r1, #3
 801d3e8:	0015      	movs	r5, r2
 801d3ea:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d3ec:	18c2      	adds	r2, r0, r3
 801d3ee:	000c      	movs	r4, r1
 801d3f0:	9124      	str	r1, [sp, #144]	@ 0x90
 801d3f2:	18d1      	adds	r1, r2, r3
 801d3f4:	468b      	mov	fp, r1
 801d3f6:	469a      	mov	sl, r3
 801d3f8:	4663      	mov	r3, ip
 801d3fa:	44da      	add	sl, fp
 801d3fc:	46d0      	mov	r8, sl
 801d3fe:	4681      	mov	r9, r0
 801d400:	4692      	mov	sl, r2
 801d402:	0119      	lsls	r1, r3, #4
 801d404:	910d      	str	r1, [sp, #52]	@ 0x34
 801d406:	00d9      	lsls	r1, r3, #3
 801d408:	005b      	lsls	r3, r3, #1
 801d40a:	4463      	add	r3, ip
 801d40c:	910e      	str	r1, [sp, #56]	@ 0x38
 801d40e:	00d9      	lsls	r1, r3, #3
 801d410:	9022      	str	r0, [sp, #136]	@ 0x88
 801d412:	9025      	str	r0, [sp, #148]	@ 0x94
 801d414:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d416:	9502      	str	r5, [sp, #8]
 801d418:	9500      	str	r5, [sp, #0]
 801d41a:	9501      	str	r5, [sp, #4]
 801d41c:	9409      	str	r4, [sp, #36]	@ 0x24
 801d41e:	464b      	mov	r3, r9
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	4652      	mov	r2, sl
 801d424:	111c      	asrs	r4, r3, #4
 801d426:	465b      	mov	r3, fp
 801d428:	4648      	mov	r0, r9
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	6812      	ldr	r2, [r2, #0]
 801d42e:	6840      	ldr	r0, [r0, #4]
 801d430:	111b      	asrs	r3, r3, #4
 801d432:	18e7      	adds	r7, r4, r3
 801d434:	1ae3      	subs	r3, r4, r3
 801d436:	1114      	asrs	r4, r2, #4
 801d438:	4642      	mov	r2, r8
 801d43a:	1105      	asrs	r5, r0, #4
 801d43c:	4658      	mov	r0, fp
 801d43e:	6812      	ldr	r2, [r2, #0]
 801d440:	6840      	ldr	r0, [r0, #4]
 801d442:	9303      	str	r3, [sp, #12]
 801d444:	1113      	asrs	r3, r2, #4
 801d446:	18e2      	adds	r2, r4, r3
 801d448:	1103      	asrs	r3, r0, #4
 801d44a:	18ee      	adds	r6, r5, r3
 801d44c:	1ae8      	subs	r0, r5, r3
 801d44e:	464d      	mov	r5, r9
 801d450:	18bb      	adds	r3, r7, r2
 801d452:	602b      	str	r3, [r5, #0]
 801d454:	4641      	mov	r1, r8
 801d456:	4655      	mov	r5, sl
 801d458:	6849      	ldr	r1, [r1, #4]
 801d45a:	686d      	ldr	r5, [r5, #4]
 801d45c:	110b      	asrs	r3, r1, #4
 801d45e:	112d      	asrs	r5, r5, #4
 801d460:	18eb      	adds	r3, r5, r3
 801d462:	464d      	mov	r5, r9
 801d464:	18f1      	adds	r1, r6, r3
 801d466:	6069      	str	r1, [r5, #4]
 801d468:	4655      	mov	r5, sl
 801d46a:	686d      	ldr	r5, [r5, #4]
 801d46c:	9004      	str	r0, [sp, #16]
 801d46e:	112c      	asrs	r4, r5, #4
 801d470:	4645      	mov	r5, r8
 801d472:	686d      	ldr	r5, [r5, #4]
 801d474:	1129      	asrs	r1, r5, #4
 801d476:	1a65      	subs	r5, r4, r1
 801d478:	4651      	mov	r1, sl
 801d47a:	6809      	ldr	r1, [r1, #0]
 801d47c:	1abc      	subs	r4, r7, r2
 801d47e:	1108      	asrs	r0, r1, #4
 801d480:	4641      	mov	r1, r8
 801d482:	17e2      	asrs	r2, r4, #31
 801d484:	6809      	ldr	r1, [r1, #0]
 801d486:	9207      	str	r2, [sp, #28]
 801d488:	9a01      	ldr	r2, [sp, #4]
 801d48a:	1109      	asrs	r1, r1, #4
 801d48c:	6817      	ldr	r7, [r2, #0]
 801d48e:	1a41      	subs	r1, r0, r1
 801d490:	9106      	str	r1, [sp, #24]
 801d492:	0039      	movs	r1, r7
 801d494:	17ff      	asrs	r7, r7, #31
 801d496:	0038      	movs	r0, r7
 801d498:	9505      	str	r5, [sp, #20]
 801d49a:	1af5      	subs	r5, r6, r3
 801d49c:	17ef      	asrs	r7, r5, #31
 801d49e:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d4a0:	6857      	ldr	r7, [r2, #4]
 801d4a2:	0003      	movs	r3, r0
 801d4a4:	17fe      	asrs	r6, r7, #31
 801d4a6:	000a      	movs	r2, r1
 801d4a8:	9108      	str	r1, [sp, #32]
 801d4aa:	900a      	str	r0, [sp, #40]	@ 0x28
 801d4ac:	17e1      	asrs	r1, r4, #31
 801d4ae:	0020      	movs	r0, r4
 801d4b0:	960c      	str	r6, [sp, #48]	@ 0x30
 801d4b2:	f7e3 f885 	bl	80005c0 <__aeabi_lmul>
 801d4b6:	003a      	movs	r2, r7
 801d4b8:	17fb      	asrs	r3, r7, #31
 801d4ba:	000e      	movs	r6, r1
 801d4bc:	0028      	movs	r0, r5
 801d4be:	17e9      	asrs	r1, r5, #31
 801d4c0:	f7e3 f87e 	bl	80005c0 <__aeabi_lmul>
 801d4c4:	4653      	mov	r3, sl
 801d4c6:	1a76      	subs	r6, r6, r1
 801d4c8:	0076      	lsls	r6, r6, #1
 801d4ca:	601e      	str	r6, [r3, #0]
 801d4cc:	002a      	movs	r2, r5
 801d4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4d0:	9808      	ldr	r0, [sp, #32]
 801d4d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d4d4:	f7e3 f874 	bl	80005c0 <__aeabi_lmul>
 801d4d8:	003a      	movs	r2, r7
 801d4da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d4dc:	000d      	movs	r5, r1
 801d4de:	0020      	movs	r0, r4
 801d4e0:	9907      	ldr	r1, [sp, #28]
 801d4e2:	f7e3 f86d 	bl	80005c0 <__aeabi_lmul>
 801d4e6:	4657      	mov	r7, sl
 801d4e8:	186d      	adds	r5, r5, r1
 801d4ea:	006d      	lsls	r5, r5, #1
 801d4ec:	607d      	str	r5, [r7, #4]
 801d4ee:	9b03      	ldr	r3, [sp, #12]
 801d4f0:	9e06      	ldr	r6, [sp, #24]
 801d4f2:	9d05      	ldr	r5, [sp, #20]
 801d4f4:	46b4      	mov	ip, r6
 801d4f6:	1b5d      	subs	r5, r3, r5
 801d4f8:	9b00      	ldr	r3, [sp, #0]
 801d4fa:	17ef      	asrs	r7, r5, #31
 801d4fc:	0039      	movs	r1, r7
 801d4fe:	681f      	ldr	r7, [r3, #0]
 801d500:	17fc      	asrs	r4, r7, #31
 801d502:	0020      	movs	r0, r4
 801d504:	9c04      	ldr	r4, [sp, #16]
 801d506:	4464      	add	r4, ip
 801d508:	17e6      	asrs	r6, r4, #31
 801d50a:	9407      	str	r4, [sp, #28]
 801d50c:	9608      	str	r6, [sp, #32]
 801d50e:	685e      	ldr	r6, [r3, #4]
 801d510:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d512:	17f2      	asrs	r2, r6, #31
 801d514:	0003      	movs	r3, r0
 801d516:	920c      	str	r2, [sp, #48]	@ 0x30
 801d518:	0028      	movs	r0, r5
 801d51a:	003a      	movs	r2, r7
 801d51c:	910a      	str	r1, [sp, #40]	@ 0x28
 801d51e:	f7e3 f84f 	bl	80005c0 <__aeabi_lmul>
 801d522:	0032      	movs	r2, r6
 801d524:	17f3      	asrs	r3, r6, #31
 801d526:	9807      	ldr	r0, [sp, #28]
 801d528:	000c      	movs	r4, r1
 801d52a:	9908      	ldr	r1, [sp, #32]
 801d52c:	f7e3 f848 	bl	80005c0 <__aeabi_lmul>
 801d530:	4658      	mov	r0, fp
 801d532:	1a64      	subs	r4, r4, r1
 801d534:	0064      	lsls	r4, r4, #1
 801d536:	9a07      	ldr	r2, [sp, #28]
 801d538:	6004      	str	r4, [r0, #0]
 801d53a:	9b08      	ldr	r3, [sp, #32]
 801d53c:	0038      	movs	r0, r7
 801d53e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d540:	f7e3 f83e 	bl	80005c0 <__aeabi_lmul>
 801d544:	0032      	movs	r2, r6
 801d546:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d548:	000c      	movs	r4, r1
 801d54a:	0028      	movs	r0, r5
 801d54c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d54e:	f7e3 f837 	bl	80005c0 <__aeabi_lmul>
 801d552:	9d05      	ldr	r5, [sp, #20]
 801d554:	465f      	mov	r7, fp
 801d556:	46ac      	mov	ip, r5
 801d558:	1864      	adds	r4, r4, r1
 801d55a:	9903      	ldr	r1, [sp, #12]
 801d55c:	0064      	lsls	r4, r4, #1
 801d55e:	4461      	add	r1, ip
 801d560:	607c      	str	r4, [r7, #4]
 801d562:	000c      	movs	r4, r1
 801d564:	17c9      	asrs	r1, r1, #31
 801d566:	9105      	str	r1, [sp, #20]
 801d568:	9902      	ldr	r1, [sp, #8]
 801d56a:	9804      	ldr	r0, [sp, #16]
 801d56c:	680d      	ldr	r5, [r1, #0]
 801d56e:	9e06      	ldr	r6, [sp, #24]
 801d570:	002b      	movs	r3, r5
 801d572:	17ed      	asrs	r5, r5, #31
 801d574:	684f      	ldr	r7, [r1, #4]
 801d576:	9503      	str	r5, [sp, #12]
 801d578:	1b85      	subs	r5, r0, r6
 801d57a:	17e8      	asrs	r0, r5, #31
 801d57c:	001a      	movs	r2, r3
 801d57e:	9006      	str	r0, [sp, #24]
 801d580:	17fe      	asrs	r6, r7, #31
 801d582:	9304      	str	r3, [sp, #16]
 801d584:	0020      	movs	r0, r4
 801d586:	9b03      	ldr	r3, [sp, #12]
 801d588:	17e1      	asrs	r1, r4, #31
 801d58a:	9607      	str	r6, [sp, #28]
 801d58c:	f7e3 f818 	bl	80005c0 <__aeabi_lmul>
 801d590:	003a      	movs	r2, r7
 801d592:	000e      	movs	r6, r1
 801d594:	17fb      	asrs	r3, r7, #31
 801d596:	0028      	movs	r0, r5
 801d598:	17e9      	asrs	r1, r5, #31
 801d59a:	f7e3 f811 	bl	80005c0 <__aeabi_lmul>
 801d59e:	4640      	mov	r0, r8
 801d5a0:	1a76      	subs	r6, r6, r1
 801d5a2:	0076      	lsls	r6, r6, #1
 801d5a4:	002a      	movs	r2, r5
 801d5a6:	9b06      	ldr	r3, [sp, #24]
 801d5a8:	6006      	str	r6, [r0, #0]
 801d5aa:	9903      	ldr	r1, [sp, #12]
 801d5ac:	9804      	ldr	r0, [sp, #16]
 801d5ae:	f7e3 f807 	bl	80005c0 <__aeabi_lmul>
 801d5b2:	0020      	movs	r0, r4
 801d5b4:	2408      	movs	r4, #8
 801d5b6:	9b07      	ldr	r3, [sp, #28]
 801d5b8:	000d      	movs	r5, r1
 801d5ba:	003a      	movs	r2, r7
 801d5bc:	9905      	ldr	r1, [sp, #20]
 801d5be:	f7e2 ffff 	bl	80005c0 <__aeabi_lmul>
 801d5c2:	4640      	mov	r0, r8
 801d5c4:	46a4      	mov	ip, r4
 801d5c6:	186d      	adds	r5, r5, r1
 801d5c8:	006d      	lsls	r5, r5, #1
 801d5ca:	6045      	str	r5, [r0, #4]
 801d5cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d5ce:	44e1      	add	r9, ip
 801d5d0:	3801      	subs	r0, #1
 801d5d2:	9009      	str	r0, [sp, #36]	@ 0x24
 801d5d4:	9a01      	ldr	r2, [sp, #4]
 801d5d6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d5d8:	44e2      	add	sl, ip
 801d5da:	44e3      	add	fp, ip
 801d5dc:	44e0      	add	r8, ip
 801d5de:	46a4      	mov	ip, r4
 801d5e0:	4462      	add	r2, ip
 801d5e2:	9201      	str	r2, [sp, #4]
 801d5e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d5e6:	9b00      	ldr	r3, [sp, #0]
 801d5e8:	4694      	mov	ip, r2
 801d5ea:	4463      	add	r3, ip
 801d5ec:	9300      	str	r3, [sp, #0]
 801d5ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d5f0:	9902      	ldr	r1, [sp, #8]
 801d5f2:	469c      	mov	ip, r3
 801d5f4:	4461      	add	r1, ip
 801d5f6:	9102      	str	r1, [sp, #8]
 801d5f8:	2800      	cmp	r0, #0
 801d5fa:	d000      	beq.n	801d5fe <arm_radix4_butterfly_inverse_q31+0x22e>
 801d5fc:	e70f      	b.n	801d41e <arm_radix4_butterfly_inverse_q31+0x4e>
 801d5fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d600:	009b      	lsls	r3, r3, #2
 801d602:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d604:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d606:	9320      	str	r3, [sp, #128]	@ 0x80
 801d608:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d60a:	2b04      	cmp	r3, #4
 801d60c:	d800      	bhi.n	801d610 <arm_radix4_butterfly_inverse_q31+0x240>
 801d60e:	e17c      	b.n	801d90a <arm_radix4_butterfly_inverse_q31+0x53a>
 801d610:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d612:	0893      	lsrs	r3, r2, #2
 801d614:	1e59      	subs	r1, r3, #1
 801d616:	9321      	str	r3, [sp, #132]	@ 0x84
 801d618:	00db      	lsls	r3, r3, #3
 801d61a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d61c:	00d3      	lsls	r3, r2, #3
 801d61e:	9300      	str	r3, [sp, #0]
 801d620:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d622:	911a      	str	r1, [sp, #104]	@ 0x68
 801d624:	00da      	lsls	r2, r3, #3
 801d626:	921e      	str	r2, [sp, #120]	@ 0x78
 801d628:	011a      	lsls	r2, r3, #4
 801d62a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d62c:	001a      	movs	r2, r3
 801d62e:	4694      	mov	ip, r2
 801d630:	005b      	lsls	r3, r3, #1
 801d632:	4463      	add	r3, ip
 801d634:	00db      	lsls	r3, r3, #3
 801d636:	931c      	str	r3, [sp, #112]	@ 0x70
 801d638:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d63a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d63c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d63e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d640:	9319      	str	r3, [sp, #100]	@ 0x64
 801d642:	9316      	str	r3, [sp, #88]	@ 0x58
 801d644:	2300      	movs	r3, #0
 801d646:	9315      	str	r3, [sp, #84]	@ 0x54
 801d648:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d64a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d64c:	681a      	ldr	r2, [r3, #0]
 801d64e:	685b      	ldr	r3, [r3, #4]
 801d650:	9205      	str	r2, [sp, #20]
 801d652:	9306      	str	r3, [sp, #24]
 801d654:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d656:	468c      	mov	ip, r1
 801d658:	681a      	ldr	r2, [r3, #0]
 801d65a:	685b      	ldr	r3, [r3, #4]
 801d65c:	9207      	str	r2, [sp, #28]
 801d65e:	9308      	str	r3, [sp, #32]
 801d660:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d662:	681a      	ldr	r2, [r3, #0]
 801d664:	685b      	ldr	r3, [r3, #4]
 801d666:	9209      	str	r2, [sp, #36]	@ 0x24
 801d668:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d66a:	930a      	str	r3, [sp, #40]	@ 0x28
 801d66c:	0013      	movs	r3, r2
 801d66e:	4463      	add	r3, ip
 801d670:	4698      	mov	r8, r3
 801d672:	0013      	movs	r3, r2
 801d674:	4442      	add	r2, r8
 801d676:	4691      	mov	r9, r2
 801d678:	001a      	movs	r2, r3
 801d67a:	444a      	add	r2, r9
 801d67c:	4692      	mov	sl, r2
 801d67e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d680:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d682:	4293      	cmp	r3, r2
 801d684:	d800      	bhi.n	801d688 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d686:	e0d9      	b.n	801d83c <arm_radix4_butterfly_inverse_q31+0x46c>
 801d688:	4694      	mov	ip, r2
 801d68a:	4644      	mov	r4, r8
 801d68c:	4655      	mov	r5, sl
 801d68e:	4688      	mov	r8, r1
 801d690:	9b07      	ldr	r3, [sp, #28]
 801d692:	17db      	asrs	r3, r3, #31
 801d694:	930c      	str	r3, [sp, #48]	@ 0x30
 801d696:	9b08      	ldr	r3, [sp, #32]
 801d698:	17db      	asrs	r3, r3, #31
 801d69a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d69c:	9b05      	ldr	r3, [sp, #20]
 801d69e:	17db      	asrs	r3, r3, #31
 801d6a0:	930e      	str	r3, [sp, #56]	@ 0x38
 801d6a2:	9b06      	ldr	r3, [sp, #24]
 801d6a4:	17db      	asrs	r3, r3, #31
 801d6a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6aa:	17db      	asrs	r3, r3, #31
 801d6ac:	9310      	str	r3, [sp, #64]	@ 0x40
 801d6ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6b0:	17db      	asrs	r3, r3, #31
 801d6b2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d6b6:	4463      	add	r3, ip
 801d6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d6ba:	4643      	mov	r3, r8
 801d6bc:	4641      	mov	r1, r8
 801d6be:	681a      	ldr	r2, [r3, #0]
 801d6c0:	464b      	mov	r3, r9
 801d6c2:	684f      	ldr	r7, [r1, #4]
 801d6c4:	4649      	mov	r1, r9
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	18d6      	adds	r6, r2, r3
 801d6ca:	1ad3      	subs	r3, r2, r3
 801d6cc:	9301      	str	r3, [sp, #4]
 801d6ce:	684b      	ldr	r3, [r1, #4]
 801d6d0:	1af9      	subs	r1, r7, r3
 801d6d2:	9102      	str	r1, [sp, #8]
 801d6d4:	6829      	ldr	r1, [r5, #0]
 801d6d6:	18f8      	adds	r0, r7, r3
 801d6d8:	468c      	mov	ip, r1
 801d6da:	6827      	ldr	r7, [r4, #0]
 801d6dc:	4467      	add	r7, ip
 801d6de:	003a      	movs	r2, r7
 801d6e0:	19f3      	adds	r3, r6, r7
 801d6e2:	4647      	mov	r7, r8
 801d6e4:	109b      	asrs	r3, r3, #2
 801d6e6:	603b      	str	r3, [r7, #0]
 801d6e8:	6869      	ldr	r1, [r5, #4]
 801d6ea:	6867      	ldr	r7, [r4, #4]
 801d6ec:	468c      	mov	ip, r1
 801d6ee:	4467      	add	r7, ip
 801d6f0:	003b      	movs	r3, r7
 801d6f2:	19c1      	adds	r1, r0, r7
 801d6f4:	4647      	mov	r7, r8
 801d6f6:	1ab6      	subs	r6, r6, r2
 801d6f8:	1089      	asrs	r1, r1, #2
 801d6fa:	6079      	str	r1, [r7, #4]
 801d6fc:	17f2      	asrs	r2, r6, #31
 801d6fe:	9900      	ldr	r1, [sp, #0]
 801d700:	4692      	mov	sl, r2
 801d702:	468c      	mov	ip, r1
 801d704:	6867      	ldr	r7, [r4, #4]
 801d706:	6869      	ldr	r1, [r5, #4]
 801d708:	44e0      	add	r8, ip
 801d70a:	1a7f      	subs	r7, r7, r1
 801d70c:	9703      	str	r7, [sp, #12]
 801d70e:	6821      	ldr	r1, [r4, #0]
 801d710:	682f      	ldr	r7, [r5, #0]
 801d712:	1bc9      	subs	r1, r1, r7
 801d714:	1ac7      	subs	r7, r0, r3
 801d716:	17fa      	asrs	r2, r7, #31
 801d718:	4693      	mov	fp, r2
 801d71a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d71c:	9a07      	ldr	r2, [sp, #28]
 801d71e:	9104      	str	r1, [sp, #16]
 801d720:	0030      	movs	r0, r6
 801d722:	4651      	mov	r1, sl
 801d724:	f7e2 ff4c 	bl	80005c0 <__aeabi_lmul>
 801d728:	9a08      	ldr	r2, [sp, #32]
 801d72a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d72c:	9112      	str	r1, [sp, #72]	@ 0x48
 801d72e:	0038      	movs	r0, r7
 801d730:	4659      	mov	r1, fp
 801d732:	f7e2 ff45 	bl	80005c0 <__aeabi_lmul>
 801d736:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d738:	9a07      	ldr	r2, [sp, #28]
 801d73a:	1a41      	subs	r1, r0, r1
 801d73c:	1049      	asrs	r1, r1, #1
 801d73e:	6021      	str	r1, [r4, #0]
 801d740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d742:	0038      	movs	r0, r7
 801d744:	4659      	mov	r1, fp
 801d746:	f7e2 ff3b 	bl	80005c0 <__aeabi_lmul>
 801d74a:	9a08      	ldr	r2, [sp, #32]
 801d74c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d74e:	000f      	movs	r7, r1
 801d750:	0030      	movs	r0, r6
 801d752:	4651      	mov	r1, sl
 801d754:	f7e2 ff34 	bl	80005c0 <__aeabi_lmul>
 801d758:	9b00      	ldr	r3, [sp, #0]
 801d75a:	187f      	adds	r7, r7, r1
 801d75c:	469c      	mov	ip, r3
 801d75e:	107f      	asrs	r7, r7, #1
 801d760:	6067      	str	r7, [r4, #4]
 801d762:	9a01      	ldr	r2, [sp, #4]
 801d764:	9f03      	ldr	r7, [sp, #12]
 801d766:	9802      	ldr	r0, [sp, #8]
 801d768:	1bd7      	subs	r7, r2, r7
 801d76a:	17fe      	asrs	r6, r7, #31
 801d76c:	0031      	movs	r1, r6
 801d76e:	9e04      	ldr	r6, [sp, #16]
 801d770:	4682      	mov	sl, r0
 801d772:	4464      	add	r4, ip
 801d774:	46b4      	mov	ip, r6
 801d776:	44e2      	add	sl, ip
 801d778:	4652      	mov	r2, sl
 801d77a:	17d2      	asrs	r2, r2, #31
 801d77c:	4693      	mov	fp, r2
 801d77e:	0038      	movs	r0, r7
 801d780:	9a05      	ldr	r2, [sp, #20]
 801d782:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d784:	9112      	str	r1, [sp, #72]	@ 0x48
 801d786:	f7e2 ff1b 	bl	80005c0 <__aeabi_lmul>
 801d78a:	9a06      	ldr	r2, [sp, #24]
 801d78c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d78e:	000e      	movs	r6, r1
 801d790:	4650      	mov	r0, sl
 801d792:	4659      	mov	r1, fp
 801d794:	f7e2 ff14 	bl	80005c0 <__aeabi_lmul>
 801d798:	4648      	mov	r0, r9
 801d79a:	1a76      	subs	r6, r6, r1
 801d79c:	1076      	asrs	r6, r6, #1
 801d79e:	6006      	str	r6, [r0, #0]
 801d7a0:	9a05      	ldr	r2, [sp, #20]
 801d7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7a4:	4650      	mov	r0, sl
 801d7a6:	4659      	mov	r1, fp
 801d7a8:	f7e2 ff0a 	bl	80005c0 <__aeabi_lmul>
 801d7ac:	9a06      	ldr	r2, [sp, #24]
 801d7ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7b0:	000e      	movs	r6, r1
 801d7b2:	0038      	movs	r0, r7
 801d7b4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d7b6:	f7e2 ff03 	bl	80005c0 <__aeabi_lmul>
 801d7ba:	9a00      	ldr	r2, [sp, #0]
 801d7bc:	9f03      	ldr	r7, [sp, #12]
 801d7be:	4694      	mov	ip, r2
 801d7c0:	1876      	adds	r6, r6, r1
 801d7c2:	4649      	mov	r1, r9
 801d7c4:	44e1      	add	r9, ip
 801d7c6:	46bc      	mov	ip, r7
 801d7c8:	9b01      	ldr	r3, [sp, #4]
 801d7ca:	1076      	asrs	r6, r6, #1
 801d7cc:	4463      	add	r3, ip
 801d7ce:	17df      	asrs	r7, r3, #31
 801d7d0:	604e      	str	r6, [r1, #4]
 801d7d2:	46ba      	mov	sl, r7
 801d7d4:	001e      	movs	r6, r3
 801d7d6:	9802      	ldr	r0, [sp, #8]
 801d7d8:	9b04      	ldr	r3, [sp, #16]
 801d7da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7dc:	1ac7      	subs	r7, r0, r3
 801d7de:	17fb      	asrs	r3, r7, #31
 801d7e0:	469b      	mov	fp, r3
 801d7e2:	0030      	movs	r0, r6
 801d7e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d7e6:	4651      	mov	r1, sl
 801d7e8:	f7e2 feea 	bl	80005c0 <__aeabi_lmul>
 801d7ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d7ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d7f0:	9101      	str	r1, [sp, #4]
 801d7f2:	0038      	movs	r0, r7
 801d7f4:	4659      	mov	r1, fp
 801d7f6:	f7e2 fee3 	bl	80005c0 <__aeabi_lmul>
 801d7fa:	9801      	ldr	r0, [sp, #4]
 801d7fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7fe:	1a41      	subs	r1, r0, r1
 801d800:	1049      	asrs	r1, r1, #1
 801d802:	6029      	str	r1, [r5, #0]
 801d804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d806:	0038      	movs	r0, r7
 801d808:	4659      	mov	r1, fp
 801d80a:	f7e2 fed9 	bl	80005c0 <__aeabi_lmul>
 801d80e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d810:	000f      	movs	r7, r1
 801d812:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d814:	0030      	movs	r0, r6
 801d816:	4651      	mov	r1, sl
 801d818:	f7e2 fed2 	bl	80005c0 <__aeabi_lmul>
 801d81c:	187f      	adds	r7, r7, r1
 801d81e:	107f      	asrs	r7, r7, #1
 801d820:	606f      	str	r7, [r5, #4]
 801d822:	9a00      	ldr	r2, [sp, #0]
 801d824:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d826:	4694      	mov	ip, r2
 801d828:	4465      	add	r5, ip
 801d82a:	468c      	mov	ip, r1
 801d82c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d82e:	0013      	movs	r3, r2
 801d830:	4462      	add	r2, ip
 801d832:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d834:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d836:	429a      	cmp	r2, r3
 801d838:	d900      	bls.n	801d83c <arm_radix4_butterfly_inverse_q31+0x46c>
 801d83a:	e73e      	b.n	801d6ba <arm_radix4_butterfly_inverse_q31+0x2ea>
 801d83c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d83e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d840:	468c      	mov	ip, r1
 801d842:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d844:	4462      	add	r2, ip
 801d846:	468c      	mov	ip, r1
 801d848:	9216      	str	r2, [sp, #88]	@ 0x58
 801d84a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d84c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d84e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d850:	4462      	add	r2, ip
 801d852:	468c      	mov	ip, r1
 801d854:	9219      	str	r2, [sp, #100]	@ 0x64
 801d856:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d858:	3301      	adds	r3, #1
 801d85a:	4462      	add	r2, ip
 801d85c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d85e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d860:	9315      	str	r3, [sp, #84]	@ 0x54
 801d862:	3208      	adds	r2, #8
 801d864:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d866:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d868:	4293      	cmp	r3, r2
 801d86a:	d800      	bhi.n	801d86e <arm_radix4_butterfly_inverse_q31+0x49e>
 801d86c:	e6ec      	b.n	801d648 <arm_radix4_butterfly_inverse_q31+0x278>
 801d86e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d870:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d872:	009b      	lsls	r3, r3, #2
 801d874:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d876:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d878:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d87a:	089b      	lsrs	r3, r3, #2
 801d87c:	9320      	str	r3, [sp, #128]	@ 0x80
 801d87e:	2b04      	cmp	r3, #4
 801d880:	d900      	bls.n	801d884 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801d882:	e6c5      	b.n	801d610 <arm_radix4_butterfly_inverse_q31+0x240>
 801d884:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d886:	469a      	mov	sl, r3
 801d888:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d88a:	681a      	ldr	r2, [r3, #0]
 801d88c:	6918      	ldr	r0, [r3, #16]
 801d88e:	4691      	mov	r9, r2
 801d890:	464c      	mov	r4, r9
 801d892:	4680      	mov	r8, r0
 801d894:	69de      	ldr	r6, [r3, #28]
 801d896:	689d      	ldr	r5, [r3, #8]
 801d898:	46b4      	mov	ip, r6
 801d89a:	6998      	ldr	r0, [r3, #24]
 801d89c:	1964      	adds	r4, r4, r5
 801d89e:	6859      	ldr	r1, [r3, #4]
 801d8a0:	68da      	ldr	r2, [r3, #12]
 801d8a2:	4444      	add	r4, r8
 801d8a4:	695f      	ldr	r7, [r3, #20]
 801d8a6:	1824      	adds	r4, r4, r0
 801d8a8:	601c      	str	r4, [r3, #0]
 801d8aa:	188c      	adds	r4, r1, r2
 801d8ac:	19e4      	adds	r4, r4, r7
 801d8ae:	4464      	add	r4, ip
 801d8b0:	605c      	str	r4, [r3, #4]
 801d8b2:	464c      	mov	r4, r9
 801d8b4:	1b64      	subs	r4, r4, r5
 801d8b6:	4444      	add	r4, r8
 801d8b8:	1a24      	subs	r4, r4, r0
 801d8ba:	609c      	str	r4, [r3, #8]
 801d8bc:	1a8c      	subs	r4, r1, r2
 801d8be:	19e4      	adds	r4, r4, r7
 801d8c0:	1ba4      	subs	r4, r4, r6
 801d8c2:	60dc      	str	r4, [r3, #12]
 801d8c4:	464c      	mov	r4, r9
 801d8c6:	4646      	mov	r6, r8
 801d8c8:	1aa4      	subs	r4, r4, r2
 801d8ca:	1ba4      	subs	r4, r4, r6
 801d8cc:	4464      	add	r4, ip
 801d8ce:	611c      	str	r4, [r3, #16]
 801d8d0:	194c      	adds	r4, r1, r5
 801d8d2:	1be4      	subs	r4, r4, r7
 801d8d4:	1a24      	subs	r4, r4, r0
 801d8d6:	615c      	str	r4, [r3, #20]
 801d8d8:	4644      	mov	r4, r8
 801d8da:	4666      	mov	r6, ip
 801d8dc:	444a      	add	r2, r9
 801d8de:	1b12      	subs	r2, r2, r4
 801d8e0:	1b92      	subs	r2, r2, r6
 801d8e2:	619a      	str	r2, [r3, #24]
 801d8e4:	1b4a      	subs	r2, r1, r5
 801d8e6:	1bd1      	subs	r1, r2, r7
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	4252      	negs	r2, r2
 801d8ec:	4694      	mov	ip, r2
 801d8ee:	44e2      	add	sl, ip
 801d8f0:	4652      	mov	r2, sl
 801d8f2:	1809      	adds	r1, r1, r0
 801d8f4:	61d9      	str	r1, [r3, #28]
 801d8f6:	3320      	adds	r3, #32
 801d8f8:	2a00      	cmp	r2, #0
 801d8fa:	d1c6      	bne.n	801d88a <arm_radix4_butterfly_inverse_q31+0x4ba>
 801d8fc:	b027      	add	sp, #156	@ 0x9c
 801d8fe:	bc3c      	pop	{r2, r3, r4, r5}
 801d900:	4690      	mov	r8, r2
 801d902:	4699      	mov	r9, r3
 801d904:	46a2      	mov	sl, r4
 801d906:	46ab      	mov	fp, r5
 801d908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d90a:	469a      	mov	sl, r3
 801d90c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d90e:	e7bc      	b.n	801d88a <arm_radix4_butterfly_inverse_q31+0x4ba>

0801d910 <arm_cmplx_mag_squared_q31>:
 801d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d912:	464f      	mov	r7, r9
 801d914:	4646      	mov	r6, r8
 801d916:	0004      	movs	r4, r0
 801d918:	b4c0      	push	{r6, r7}
 801d91a:	0016      	movs	r6, r2
 801d91c:	000f      	movs	r7, r1
 801d91e:	2a00      	cmp	r2, #0
 801d920:	d018      	beq.n	801d954 <arm_cmplx_mag_squared_q31+0x44>
 801d922:	6823      	ldr	r3, [r4, #0]
 801d924:	6822      	ldr	r2, [r4, #0]
 801d926:	17d9      	asrs	r1, r3, #31
 801d928:	6863      	ldr	r3, [r4, #4]
 801d92a:	0010      	movs	r0, r2
 801d92c:	4698      	mov	r8, r3
 801d92e:	17db      	asrs	r3, r3, #31
 801d930:	4699      	mov	r9, r3
 801d932:	000b      	movs	r3, r1
 801d934:	f7e2 fe44 	bl	80005c0 <__aeabi_lmul>
 801d938:	4642      	mov	r2, r8
 801d93a:	104d      	asrs	r5, r1, #1
 801d93c:	464b      	mov	r3, r9
 801d93e:	4640      	mov	r0, r8
 801d940:	4649      	mov	r1, r9
 801d942:	f7e2 fe3d 	bl	80005c0 <__aeabi_lmul>
 801d946:	1049      	asrs	r1, r1, #1
 801d948:	1869      	adds	r1, r5, r1
 801d94a:	3e01      	subs	r6, #1
 801d94c:	c702      	stmia	r7!, {r1}
 801d94e:	3408      	adds	r4, #8
 801d950:	2e00      	cmp	r6, #0
 801d952:	d1e6      	bne.n	801d922 <arm_cmplx_mag_squared_q31+0x12>
 801d954:	bc0c      	pop	{r2, r3}
 801d956:	4690      	mov	r8, r2
 801d958:	4699      	mov	r9, r3
 801d95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d95c <arm_mult_q31>:
 801d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d95e:	4646      	mov	r6, r8
 801d960:	464f      	mov	r7, r9
 801d962:	4690      	mov	r8, r2
 801d964:	b4c0      	push	{r6, r7}
 801d966:	001d      	movs	r5, r3
 801d968:	0006      	movs	r6, r0
 801d96a:	000f      	movs	r7, r1
 801d96c:	2400      	movs	r4, #0
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d020      	beq.n	801d9b4 <arm_mult_q31+0x58>
 801d972:	4b12      	ldr	r3, [pc, #72]	@ (801d9bc <arm_mult_q31+0x60>)
 801d974:	4699      	mov	r9, r3
 801d976:	e007      	b.n	801d988 <arm_mult_q31+0x2c>
 801d978:	464b      	mov	r3, r9
 801d97a:	4059      	eors	r1, r3
 801d97c:	4643      	mov	r3, r8
 801d97e:	3d01      	subs	r5, #1
 801d980:	5119      	str	r1, [r3, r4]
 801d982:	3404      	adds	r4, #4
 801d984:	2d00      	cmp	r5, #0
 801d986:	d015      	beq.n	801d9b4 <arm_mult_q31+0x58>
 801d988:	5933      	ldr	r3, [r6, r4]
 801d98a:	593a      	ldr	r2, [r7, r4]
 801d98c:	17d9      	asrs	r1, r3, #31
 801d98e:	593b      	ldr	r3, [r7, r4]
 801d990:	5930      	ldr	r0, [r6, r4]
 801d992:	17db      	asrs	r3, r3, #31
 801d994:	f7e2 fe14 	bl	80005c0 <__aeabi_lmul>
 801d998:	004b      	lsls	r3, r1, #1
 801d99a:	0fc0      	lsrs	r0, r0, #31
 801d99c:	4318      	orrs	r0, r3
 801d99e:	17c9      	asrs	r1, r1, #31
 801d9a0:	17c3      	asrs	r3, r0, #31
 801d9a2:	428b      	cmp	r3, r1
 801d9a4:	d1e8      	bne.n	801d978 <arm_mult_q31+0x1c>
 801d9a6:	0001      	movs	r1, r0
 801d9a8:	4643      	mov	r3, r8
 801d9aa:	3d01      	subs	r5, #1
 801d9ac:	5119      	str	r1, [r3, r4]
 801d9ae:	3404      	adds	r4, #4
 801d9b0:	2d00      	cmp	r5, #0
 801d9b2:	d1e9      	bne.n	801d988 <arm_mult_q31+0x2c>
 801d9b4:	bc0c      	pop	{r2, r3}
 801d9b6:	4690      	mov	r8, r2
 801d9b8:	4699      	mov	r9, r3
 801d9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9bc:	7fffffff 	.word	0x7fffffff

0801d9c0 <arm_add_q31>:
 801d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9c2:	465f      	mov	r7, fp
 801d9c4:	4656      	mov	r6, sl
 801d9c6:	464d      	mov	r5, r9
 801d9c8:	4644      	mov	r4, r8
 801d9ca:	b4f0      	push	{r4, r5, r6, r7}
 801d9cc:	4693      	mov	fp, r2
 801d9ce:	b083      	sub	sp, #12
 801d9d0:	4681      	mov	r9, r0
 801d9d2:	468a      	mov	sl, r1
 801d9d4:	4698      	mov	r8, r3
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d020      	beq.n	801da1e <arm_add_q31+0x5e>
 801d9dc:	4649      	mov	r1, r9
 801d9de:	4653      	mov	r3, sl
 801d9e0:	588e      	ldr	r6, [r1, r2]
 801d9e2:	589b      	ldr	r3, [r3, r2]
 801d9e4:	17f7      	asrs	r7, r6, #31
 801d9e6:	001c      	movs	r4, r3
 801d9e8:	0030      	movs	r0, r6
 801d9ea:	0039      	movs	r1, r7
 801d9ec:	17dd      	asrs	r5, r3, #31
 801d9ee:	46b4      	mov	ip, r6
 801d9f0:	1900      	adds	r0, r0, r4
 801d9f2:	4169      	adcs	r1, r5
 801d9f4:	4463      	add	r3, ip
 801d9f6:	9000      	str	r0, [sp, #0]
 801d9f8:	9101      	str	r1, [sp, #4]
 801d9fa:	17d9      	asrs	r1, r3, #31
 801d9fc:	468c      	mov	ip, r1
 801d9fe:	9901      	ldr	r1, [sp, #4]
 801da00:	458c      	cmp	ip, r1
 801da02:	d002      	beq.n	801da0a <arm_add_q31+0x4a>
 801da04:	17cb      	asrs	r3, r1, #31
 801da06:	4909      	ldr	r1, [pc, #36]	@ (801da2c <arm_add_q31+0x6c>)
 801da08:	404b      	eors	r3, r1
 801da0a:	4659      	mov	r1, fp
 801da0c:	508b      	str	r3, [r1, r2]
 801da0e:	2301      	movs	r3, #1
 801da10:	425b      	negs	r3, r3
 801da12:	469c      	mov	ip, r3
 801da14:	44e0      	add	r8, ip
 801da16:	4643      	mov	r3, r8
 801da18:	3204      	adds	r2, #4
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d1de      	bne.n	801d9dc <arm_add_q31+0x1c>
 801da1e:	b003      	add	sp, #12
 801da20:	bc3c      	pop	{r2, r3, r4, r5}
 801da22:	4690      	mov	r8, r2
 801da24:	4699      	mov	r9, r3
 801da26:	46a2      	mov	sl, r4
 801da28:	46ab      	mov	fp, r5
 801da2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da2c:	7fffffff 	.word	0x7fffffff

0801da30 <atof>:
 801da30:	b510      	push	{r4, lr}
 801da32:	2100      	movs	r1, #0
 801da34:	f000 fe12 	bl	801e65c <strtod>
 801da38:	bd10      	pop	{r4, pc}

0801da3a <atoi>:
 801da3a:	b510      	push	{r4, lr}
 801da3c:	220a      	movs	r2, #10
 801da3e:	2100      	movs	r1, #0
 801da40:	f000 fea4 	bl	801e78c <strtol>
 801da44:	bd10      	pop	{r4, pc}
	...

0801da48 <sulp>:
 801da48:	b570      	push	{r4, r5, r6, lr}
 801da4a:	0016      	movs	r6, r2
 801da4c:	000d      	movs	r5, r1
 801da4e:	f003 fcf3 	bl	8021438 <__ulp>
 801da52:	2e00      	cmp	r6, #0
 801da54:	d00d      	beq.n	801da72 <sulp+0x2a>
 801da56:	236b      	movs	r3, #107	@ 0x6b
 801da58:	006a      	lsls	r2, r5, #1
 801da5a:	0d52      	lsrs	r2, r2, #21
 801da5c:	1a9b      	subs	r3, r3, r2
 801da5e:	2b00      	cmp	r3, #0
 801da60:	dd07      	ble.n	801da72 <sulp+0x2a>
 801da62:	2400      	movs	r4, #0
 801da64:	4a03      	ldr	r2, [pc, #12]	@ (801da74 <sulp+0x2c>)
 801da66:	051b      	lsls	r3, r3, #20
 801da68:	189d      	adds	r5, r3, r2
 801da6a:	002b      	movs	r3, r5
 801da6c:	0022      	movs	r2, r4
 801da6e:	f7e4 fde5 	bl	800263c <__aeabi_dmul>
 801da72:	bd70      	pop	{r4, r5, r6, pc}
 801da74:	3ff00000 	.word	0x3ff00000

0801da78 <_strtod_l>:
 801da78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da7a:	b0a3      	sub	sp, #140	@ 0x8c
 801da7c:	921b      	str	r2, [sp, #108]	@ 0x6c
 801da7e:	2200      	movs	r2, #0
 801da80:	2600      	movs	r6, #0
 801da82:	2700      	movs	r7, #0
 801da84:	9005      	str	r0, [sp, #20]
 801da86:	9109      	str	r1, [sp, #36]	@ 0x24
 801da88:	921e      	str	r2, [sp, #120]	@ 0x78
 801da8a:	911d      	str	r1, [sp, #116]	@ 0x74
 801da8c:	780a      	ldrb	r2, [r1, #0]
 801da8e:	2a2b      	cmp	r2, #43	@ 0x2b
 801da90:	d053      	beq.n	801db3a <_strtod_l+0xc2>
 801da92:	d83f      	bhi.n	801db14 <_strtod_l+0x9c>
 801da94:	2a0d      	cmp	r2, #13
 801da96:	d839      	bhi.n	801db0c <_strtod_l+0x94>
 801da98:	2a08      	cmp	r2, #8
 801da9a:	d839      	bhi.n	801db10 <_strtod_l+0x98>
 801da9c:	2a00      	cmp	r2, #0
 801da9e:	d042      	beq.n	801db26 <_strtod_l+0xae>
 801daa0:	2200      	movs	r2, #0
 801daa2:	9212      	str	r2, [sp, #72]	@ 0x48
 801daa4:	2100      	movs	r1, #0
 801daa6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801daa8:	910c      	str	r1, [sp, #48]	@ 0x30
 801daaa:	782a      	ldrb	r2, [r5, #0]
 801daac:	2a30      	cmp	r2, #48	@ 0x30
 801daae:	d000      	beq.n	801dab2 <_strtod_l+0x3a>
 801dab0:	e083      	b.n	801dbba <_strtod_l+0x142>
 801dab2:	786a      	ldrb	r2, [r5, #1]
 801dab4:	3120      	adds	r1, #32
 801dab6:	438a      	bics	r2, r1
 801dab8:	2a58      	cmp	r2, #88	@ 0x58
 801daba:	d000      	beq.n	801dabe <_strtod_l+0x46>
 801dabc:	e073      	b.n	801dba6 <_strtod_l+0x12e>
 801dabe:	9302      	str	r3, [sp, #8]
 801dac0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dac2:	4a95      	ldr	r2, [pc, #596]	@ (801dd18 <_strtod_l+0x2a0>)
 801dac4:	9301      	str	r3, [sp, #4]
 801dac6:	ab1e      	add	r3, sp, #120	@ 0x78
 801dac8:	9300      	str	r3, [sp, #0]
 801daca:	9805      	ldr	r0, [sp, #20]
 801dacc:	ab1f      	add	r3, sp, #124	@ 0x7c
 801dace:	a91d      	add	r1, sp, #116	@ 0x74
 801dad0:	f002 fd62 	bl	8020598 <__gethex>
 801dad4:	230f      	movs	r3, #15
 801dad6:	0002      	movs	r2, r0
 801dad8:	401a      	ands	r2, r3
 801dada:	0004      	movs	r4, r0
 801dadc:	9206      	str	r2, [sp, #24]
 801dade:	4218      	tst	r0, r3
 801dae0:	d005      	beq.n	801daee <_strtod_l+0x76>
 801dae2:	2a06      	cmp	r2, #6
 801dae4:	d12b      	bne.n	801db3e <_strtod_l+0xc6>
 801dae6:	2300      	movs	r3, #0
 801dae8:	3501      	adds	r5, #1
 801daea:	951d      	str	r5, [sp, #116]	@ 0x74
 801daec:	9312      	str	r3, [sp, #72]	@ 0x48
 801daee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d002      	beq.n	801dafa <_strtod_l+0x82>
 801daf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801daf6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801daf8:	6013      	str	r3, [r2, #0]
 801dafa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d019      	beq.n	801db34 <_strtod_l+0xbc>
 801db00:	2380      	movs	r3, #128	@ 0x80
 801db02:	0030      	movs	r0, r6
 801db04:	061b      	lsls	r3, r3, #24
 801db06:	18f9      	adds	r1, r7, r3
 801db08:	b023      	add	sp, #140	@ 0x8c
 801db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db0c:	2a20      	cmp	r2, #32
 801db0e:	d1c7      	bne.n	801daa0 <_strtod_l+0x28>
 801db10:	3101      	adds	r1, #1
 801db12:	e7ba      	b.n	801da8a <_strtod_l+0x12>
 801db14:	2a2d      	cmp	r2, #45	@ 0x2d
 801db16:	d1c3      	bne.n	801daa0 <_strtod_l+0x28>
 801db18:	3a2c      	subs	r2, #44	@ 0x2c
 801db1a:	9212      	str	r2, [sp, #72]	@ 0x48
 801db1c:	1c4a      	adds	r2, r1, #1
 801db1e:	921d      	str	r2, [sp, #116]	@ 0x74
 801db20:	784a      	ldrb	r2, [r1, #1]
 801db22:	2a00      	cmp	r2, #0
 801db24:	d1be      	bne.n	801daa4 <_strtod_l+0x2c>
 801db26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db28:	931d      	str	r3, [sp, #116]	@ 0x74
 801db2a:	2300      	movs	r3, #0
 801db2c:	9312      	str	r3, [sp, #72]	@ 0x48
 801db2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801db30:	2b00      	cmp	r3, #0
 801db32:	d1df      	bne.n	801daf4 <_strtod_l+0x7c>
 801db34:	0030      	movs	r0, r6
 801db36:	0039      	movs	r1, r7
 801db38:	e7e6      	b.n	801db08 <_strtod_l+0x90>
 801db3a:	2200      	movs	r2, #0
 801db3c:	e7ed      	b.n	801db1a <_strtod_l+0xa2>
 801db3e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801db40:	2a00      	cmp	r2, #0
 801db42:	d007      	beq.n	801db54 <_strtod_l+0xdc>
 801db44:	2135      	movs	r1, #53	@ 0x35
 801db46:	a820      	add	r0, sp, #128	@ 0x80
 801db48:	f003 fd6c 	bl	8021624 <__copybits>
 801db4c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801db4e:	9805      	ldr	r0, [sp, #20]
 801db50:	f003 f926 	bl	8020da0 <_Bfree>
 801db54:	9806      	ldr	r0, [sp, #24]
 801db56:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801db58:	3801      	subs	r0, #1
 801db5a:	2804      	cmp	r0, #4
 801db5c:	d806      	bhi.n	801db6c <_strtod_l+0xf4>
 801db5e:	f7e2 fb0d 	bl	800017c <__gnu_thumb1_case_uqi>
 801db62:	0312      	.short	0x0312
 801db64:	1e1c      	.short	0x1e1c
 801db66:	12          	.byte	0x12
 801db67:	00          	.byte	0x00
 801db68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801db6a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801db6c:	05e4      	lsls	r4, r4, #23
 801db6e:	d502      	bpl.n	801db76 <_strtod_l+0xfe>
 801db70:	2380      	movs	r3, #128	@ 0x80
 801db72:	061b      	lsls	r3, r3, #24
 801db74:	431f      	orrs	r7, r3
 801db76:	4b69      	ldr	r3, [pc, #420]	@ (801dd1c <_strtod_l+0x2a4>)
 801db78:	423b      	tst	r3, r7
 801db7a:	d1b8      	bne.n	801daee <_strtod_l+0x76>
 801db7c:	f001 fd90 	bl	801f6a0 <__errno>
 801db80:	2322      	movs	r3, #34	@ 0x22
 801db82:	6003      	str	r3, [r0, #0]
 801db84:	e7b3      	b.n	801daee <_strtod_l+0x76>
 801db86:	4966      	ldr	r1, [pc, #408]	@ (801dd20 <_strtod_l+0x2a8>)
 801db88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801db8a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801db8c:	400a      	ands	r2, r1
 801db8e:	4965      	ldr	r1, [pc, #404]	@ (801dd24 <_strtod_l+0x2ac>)
 801db90:	185b      	adds	r3, r3, r1
 801db92:	051b      	lsls	r3, r3, #20
 801db94:	431a      	orrs	r2, r3
 801db96:	0017      	movs	r7, r2
 801db98:	e7e8      	b.n	801db6c <_strtod_l+0xf4>
 801db9a:	4f60      	ldr	r7, [pc, #384]	@ (801dd1c <_strtod_l+0x2a4>)
 801db9c:	e7e6      	b.n	801db6c <_strtod_l+0xf4>
 801db9e:	2601      	movs	r6, #1
 801dba0:	4f61      	ldr	r7, [pc, #388]	@ (801dd28 <_strtod_l+0x2b0>)
 801dba2:	4276      	negs	r6, r6
 801dba4:	e7e2      	b.n	801db6c <_strtod_l+0xf4>
 801dba6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dba8:	1c5a      	adds	r2, r3, #1
 801dbaa:	921d      	str	r2, [sp, #116]	@ 0x74
 801dbac:	785b      	ldrb	r3, [r3, #1]
 801dbae:	2b30      	cmp	r3, #48	@ 0x30
 801dbb0:	d0f9      	beq.n	801dba6 <_strtod_l+0x12e>
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d09b      	beq.n	801daee <_strtod_l+0x76>
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbba:	2500      	movs	r5, #0
 801dbbc:	220a      	movs	r2, #10
 801dbbe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dbc0:	950d      	str	r5, [sp, #52]	@ 0x34
 801dbc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dbc4:	9508      	str	r5, [sp, #32]
 801dbc6:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801dbc8:	7804      	ldrb	r4, [r0, #0]
 801dbca:	0023      	movs	r3, r4
 801dbcc:	3b30      	subs	r3, #48	@ 0x30
 801dbce:	b2d9      	uxtb	r1, r3
 801dbd0:	2909      	cmp	r1, #9
 801dbd2:	d927      	bls.n	801dc24 <_strtod_l+0x1ac>
 801dbd4:	2201      	movs	r2, #1
 801dbd6:	4955      	ldr	r1, [pc, #340]	@ (801dd2c <_strtod_l+0x2b4>)
 801dbd8:	f001 fcd4 	bl	801f584 <strncmp>
 801dbdc:	2800      	cmp	r0, #0
 801dbde:	d031      	beq.n	801dc44 <_strtod_l+0x1cc>
 801dbe0:	2000      	movs	r0, #0
 801dbe2:	0023      	movs	r3, r4
 801dbe4:	4684      	mov	ip, r0
 801dbe6:	9a08      	ldr	r2, [sp, #32]
 801dbe8:	900e      	str	r0, [sp, #56]	@ 0x38
 801dbea:	9206      	str	r2, [sp, #24]
 801dbec:	2220      	movs	r2, #32
 801dbee:	0019      	movs	r1, r3
 801dbf0:	4391      	bics	r1, r2
 801dbf2:	000a      	movs	r2, r1
 801dbf4:	2100      	movs	r1, #0
 801dbf6:	9107      	str	r1, [sp, #28]
 801dbf8:	2a45      	cmp	r2, #69	@ 0x45
 801dbfa:	d000      	beq.n	801dbfe <_strtod_l+0x186>
 801dbfc:	e0c0      	b.n	801dd80 <_strtod_l+0x308>
 801dbfe:	9b06      	ldr	r3, [sp, #24]
 801dc00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dc02:	4303      	orrs	r3, r0
 801dc04:	4313      	orrs	r3, r2
 801dc06:	428b      	cmp	r3, r1
 801dc08:	d08d      	beq.n	801db26 <_strtod_l+0xae>
 801dc0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc0e:	3301      	adds	r3, #1
 801dc10:	931d      	str	r3, [sp, #116]	@ 0x74
 801dc12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc14:	785b      	ldrb	r3, [r3, #1]
 801dc16:	2b2b      	cmp	r3, #43	@ 0x2b
 801dc18:	d070      	beq.n	801dcfc <_strtod_l+0x284>
 801dc1a:	000c      	movs	r4, r1
 801dc1c:	2b2d      	cmp	r3, #45	@ 0x2d
 801dc1e:	d173      	bne.n	801dd08 <_strtod_l+0x290>
 801dc20:	2401      	movs	r4, #1
 801dc22:	e06c      	b.n	801dcfe <_strtod_l+0x286>
 801dc24:	9908      	ldr	r1, [sp, #32]
 801dc26:	2908      	cmp	r1, #8
 801dc28:	dc09      	bgt.n	801dc3e <_strtod_l+0x1c6>
 801dc2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dc2c:	4351      	muls	r1, r2
 801dc2e:	185b      	adds	r3, r3, r1
 801dc30:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc32:	9b08      	ldr	r3, [sp, #32]
 801dc34:	3001      	adds	r0, #1
 801dc36:	3301      	adds	r3, #1
 801dc38:	9308      	str	r3, [sp, #32]
 801dc3a:	901d      	str	r0, [sp, #116]	@ 0x74
 801dc3c:	e7c3      	b.n	801dbc6 <_strtod_l+0x14e>
 801dc3e:	4355      	muls	r5, r2
 801dc40:	195d      	adds	r5, r3, r5
 801dc42:	e7f6      	b.n	801dc32 <_strtod_l+0x1ba>
 801dc44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc46:	1c5a      	adds	r2, r3, #1
 801dc48:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc4a:	9a08      	ldr	r2, [sp, #32]
 801dc4c:	785b      	ldrb	r3, [r3, #1]
 801dc4e:	2a00      	cmp	r2, #0
 801dc50:	d03a      	beq.n	801dcc8 <_strtod_l+0x250>
 801dc52:	900e      	str	r0, [sp, #56]	@ 0x38
 801dc54:	9206      	str	r2, [sp, #24]
 801dc56:	001a      	movs	r2, r3
 801dc58:	3a30      	subs	r2, #48	@ 0x30
 801dc5a:	2a09      	cmp	r2, #9
 801dc5c:	d912      	bls.n	801dc84 <_strtod_l+0x20c>
 801dc5e:	2201      	movs	r2, #1
 801dc60:	4694      	mov	ip, r2
 801dc62:	e7c3      	b.n	801dbec <_strtod_l+0x174>
 801dc64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc66:	3001      	adds	r0, #1
 801dc68:	1c5a      	adds	r2, r3, #1
 801dc6a:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc6c:	785b      	ldrb	r3, [r3, #1]
 801dc6e:	2b30      	cmp	r3, #48	@ 0x30
 801dc70:	d0f8      	beq.n	801dc64 <_strtod_l+0x1ec>
 801dc72:	001a      	movs	r2, r3
 801dc74:	3a31      	subs	r2, #49	@ 0x31
 801dc76:	2a08      	cmp	r2, #8
 801dc78:	d83b      	bhi.n	801dcf2 <_strtod_l+0x27a>
 801dc7a:	900e      	str	r0, [sp, #56]	@ 0x38
 801dc7c:	2000      	movs	r0, #0
 801dc7e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801dc80:	9006      	str	r0, [sp, #24]
 801dc82:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dc84:	001a      	movs	r2, r3
 801dc86:	1c41      	adds	r1, r0, #1
 801dc88:	3a30      	subs	r2, #48	@ 0x30
 801dc8a:	2b30      	cmp	r3, #48	@ 0x30
 801dc8c:	d016      	beq.n	801dcbc <_strtod_l+0x244>
 801dc8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc90:	185b      	adds	r3, r3, r1
 801dc92:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc94:	9b06      	ldr	r3, [sp, #24]
 801dc96:	210a      	movs	r1, #10
 801dc98:	469c      	mov	ip, r3
 801dc9a:	4484      	add	ip, r0
 801dc9c:	459c      	cmp	ip, r3
 801dc9e:	d115      	bne.n	801dccc <_strtod_l+0x254>
 801dca0:	9906      	ldr	r1, [sp, #24]
 801dca2:	9b06      	ldr	r3, [sp, #24]
 801dca4:	3101      	adds	r1, #1
 801dca6:	1809      	adds	r1, r1, r0
 801dca8:	181b      	adds	r3, r3, r0
 801dcaa:	9106      	str	r1, [sp, #24]
 801dcac:	2b08      	cmp	r3, #8
 801dcae:	dc19      	bgt.n	801dce4 <_strtod_l+0x26c>
 801dcb0:	230a      	movs	r3, #10
 801dcb2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dcb4:	434b      	muls	r3, r1
 801dcb6:	2100      	movs	r1, #0
 801dcb8:	18d3      	adds	r3, r2, r3
 801dcba:	930d      	str	r3, [sp, #52]	@ 0x34
 801dcbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dcbe:	0008      	movs	r0, r1
 801dcc0:	1c5a      	adds	r2, r3, #1
 801dcc2:	921d      	str	r2, [sp, #116]	@ 0x74
 801dcc4:	785b      	ldrb	r3, [r3, #1]
 801dcc6:	e7c6      	b.n	801dc56 <_strtod_l+0x1de>
 801dcc8:	9808      	ldr	r0, [sp, #32]
 801dcca:	e7d0      	b.n	801dc6e <_strtod_l+0x1f6>
 801dccc:	1c5c      	adds	r4, r3, #1
 801dcce:	2b08      	cmp	r3, #8
 801dcd0:	dc04      	bgt.n	801dcdc <_strtod_l+0x264>
 801dcd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dcd4:	434b      	muls	r3, r1
 801dcd6:	930d      	str	r3, [sp, #52]	@ 0x34
 801dcd8:	0023      	movs	r3, r4
 801dcda:	e7df      	b.n	801dc9c <_strtod_l+0x224>
 801dcdc:	2c10      	cmp	r4, #16
 801dcde:	dcfb      	bgt.n	801dcd8 <_strtod_l+0x260>
 801dce0:	434d      	muls	r5, r1
 801dce2:	e7f9      	b.n	801dcd8 <_strtod_l+0x260>
 801dce4:	2100      	movs	r1, #0
 801dce6:	2b0f      	cmp	r3, #15
 801dce8:	dce8      	bgt.n	801dcbc <_strtod_l+0x244>
 801dcea:	230a      	movs	r3, #10
 801dcec:	435d      	muls	r5, r3
 801dcee:	1955      	adds	r5, r2, r5
 801dcf0:	e7e4      	b.n	801dcbc <_strtod_l+0x244>
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	920e      	str	r2, [sp, #56]	@ 0x38
 801dcf6:	9206      	str	r2, [sp, #24]
 801dcf8:	3201      	adds	r2, #1
 801dcfa:	e7b1      	b.n	801dc60 <_strtod_l+0x1e8>
 801dcfc:	2400      	movs	r4, #0
 801dcfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd00:	3302      	adds	r3, #2
 801dd02:	931d      	str	r3, [sp, #116]	@ 0x74
 801dd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd06:	789b      	ldrb	r3, [r3, #2]
 801dd08:	001a      	movs	r2, r3
 801dd0a:	3a30      	subs	r2, #48	@ 0x30
 801dd0c:	2a09      	cmp	r2, #9
 801dd0e:	d913      	bls.n	801dd38 <_strtod_l+0x2c0>
 801dd10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd12:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd14:	2200      	movs	r2, #0
 801dd16:	e032      	b.n	801dd7e <_strtod_l+0x306>
 801dd18:	08024b70 	.word	0x08024b70
 801dd1c:	7ff00000 	.word	0x7ff00000
 801dd20:	ffefffff 	.word	0xffefffff
 801dd24:	00000433 	.word	0x00000433
 801dd28:	7fffffff 	.word	0x7fffffff
 801dd2c:	08024b58 	.word	0x08024b58
 801dd30:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd32:	1c5a      	adds	r2, r3, #1
 801dd34:	921d      	str	r2, [sp, #116]	@ 0x74
 801dd36:	785b      	ldrb	r3, [r3, #1]
 801dd38:	2b30      	cmp	r3, #48	@ 0x30
 801dd3a:	d0f9      	beq.n	801dd30 <_strtod_l+0x2b8>
 801dd3c:	2200      	movs	r2, #0
 801dd3e:	9207      	str	r2, [sp, #28]
 801dd40:	001a      	movs	r2, r3
 801dd42:	3a31      	subs	r2, #49	@ 0x31
 801dd44:	2a08      	cmp	r2, #8
 801dd46:	d81b      	bhi.n	801dd80 <_strtod_l+0x308>
 801dd48:	3b30      	subs	r3, #48	@ 0x30
 801dd4a:	9310      	str	r3, [sp, #64]	@ 0x40
 801dd4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd4e:	9307      	str	r3, [sp, #28]
 801dd50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd52:	1c59      	adds	r1, r3, #1
 801dd54:	911d      	str	r1, [sp, #116]	@ 0x74
 801dd56:	785b      	ldrb	r3, [r3, #1]
 801dd58:	001a      	movs	r2, r3
 801dd5a:	3a30      	subs	r2, #48	@ 0x30
 801dd5c:	2a09      	cmp	r2, #9
 801dd5e:	d93a      	bls.n	801ddd6 <_strtod_l+0x35e>
 801dd60:	9a07      	ldr	r2, [sp, #28]
 801dd62:	1a8a      	subs	r2, r1, r2
 801dd64:	49b4      	ldr	r1, [pc, #720]	@ (801e038 <_strtod_l+0x5c0>)
 801dd66:	9107      	str	r1, [sp, #28]
 801dd68:	2a08      	cmp	r2, #8
 801dd6a:	dc04      	bgt.n	801dd76 <_strtod_l+0x2fe>
 801dd6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dd6e:	9207      	str	r2, [sp, #28]
 801dd70:	428a      	cmp	r2, r1
 801dd72:	dd00      	ble.n	801dd76 <_strtod_l+0x2fe>
 801dd74:	9107      	str	r1, [sp, #28]
 801dd76:	2c00      	cmp	r4, #0
 801dd78:	d002      	beq.n	801dd80 <_strtod_l+0x308>
 801dd7a:	9a07      	ldr	r2, [sp, #28]
 801dd7c:	4252      	negs	r2, r2
 801dd7e:	9207      	str	r2, [sp, #28]
 801dd80:	9a06      	ldr	r2, [sp, #24]
 801dd82:	2a00      	cmp	r2, #0
 801dd84:	d14d      	bne.n	801de22 <_strtod_l+0x3aa>
 801dd86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd88:	4310      	orrs	r0, r2
 801dd8a:	d000      	beq.n	801dd8e <_strtod_l+0x316>
 801dd8c:	e6af      	b.n	801daee <_strtod_l+0x76>
 801dd8e:	4662      	mov	r2, ip
 801dd90:	2a00      	cmp	r2, #0
 801dd92:	d000      	beq.n	801dd96 <_strtod_l+0x31e>
 801dd94:	e6c7      	b.n	801db26 <_strtod_l+0xae>
 801dd96:	2b69      	cmp	r3, #105	@ 0x69
 801dd98:	d027      	beq.n	801ddea <_strtod_l+0x372>
 801dd9a:	dc23      	bgt.n	801dde4 <_strtod_l+0x36c>
 801dd9c:	2b49      	cmp	r3, #73	@ 0x49
 801dd9e:	d024      	beq.n	801ddea <_strtod_l+0x372>
 801dda0:	2b4e      	cmp	r3, #78	@ 0x4e
 801dda2:	d000      	beq.n	801dda6 <_strtod_l+0x32e>
 801dda4:	e6bf      	b.n	801db26 <_strtod_l+0xae>
 801dda6:	49a5      	ldr	r1, [pc, #660]	@ (801e03c <_strtod_l+0x5c4>)
 801dda8:	a81d      	add	r0, sp, #116	@ 0x74
 801ddaa:	f002 fe2b 	bl	8020a04 <__match>
 801ddae:	2800      	cmp	r0, #0
 801ddb0:	d100      	bne.n	801ddb4 <_strtod_l+0x33c>
 801ddb2:	e6b8      	b.n	801db26 <_strtod_l+0xae>
 801ddb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddb6:	781b      	ldrb	r3, [r3, #0]
 801ddb8:	2b28      	cmp	r3, #40	@ 0x28
 801ddba:	d12c      	bne.n	801de16 <_strtod_l+0x39e>
 801ddbc:	49a0      	ldr	r1, [pc, #640]	@ (801e040 <_strtod_l+0x5c8>)
 801ddbe:	aa20      	add	r2, sp, #128	@ 0x80
 801ddc0:	a81d      	add	r0, sp, #116	@ 0x74
 801ddc2:	f002 fe33 	bl	8020a2c <__hexnan>
 801ddc6:	2805      	cmp	r0, #5
 801ddc8:	d125      	bne.n	801de16 <_strtod_l+0x39e>
 801ddca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ddcc:	4a9d      	ldr	r2, [pc, #628]	@ (801e044 <_strtod_l+0x5cc>)
 801ddce:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ddd0:	431a      	orrs	r2, r3
 801ddd2:	0017      	movs	r7, r2
 801ddd4:	e68b      	b.n	801daee <_strtod_l+0x76>
 801ddd6:	220a      	movs	r2, #10
 801ddd8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ddda:	434a      	muls	r2, r1
 801dddc:	18d2      	adds	r2, r2, r3
 801ddde:	3a30      	subs	r2, #48	@ 0x30
 801dde0:	9210      	str	r2, [sp, #64]	@ 0x40
 801dde2:	e7b5      	b.n	801dd50 <_strtod_l+0x2d8>
 801dde4:	2b6e      	cmp	r3, #110	@ 0x6e
 801dde6:	d0de      	beq.n	801dda6 <_strtod_l+0x32e>
 801dde8:	e69d      	b.n	801db26 <_strtod_l+0xae>
 801ddea:	4997      	ldr	r1, [pc, #604]	@ (801e048 <_strtod_l+0x5d0>)
 801ddec:	a81d      	add	r0, sp, #116	@ 0x74
 801ddee:	f002 fe09 	bl	8020a04 <__match>
 801ddf2:	2800      	cmp	r0, #0
 801ddf4:	d100      	bne.n	801ddf8 <_strtod_l+0x380>
 801ddf6:	e696      	b.n	801db26 <_strtod_l+0xae>
 801ddf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ddfa:	4994      	ldr	r1, [pc, #592]	@ (801e04c <_strtod_l+0x5d4>)
 801ddfc:	3b01      	subs	r3, #1
 801ddfe:	a81d      	add	r0, sp, #116	@ 0x74
 801de00:	931d      	str	r3, [sp, #116]	@ 0x74
 801de02:	f002 fdff 	bl	8020a04 <__match>
 801de06:	2800      	cmp	r0, #0
 801de08:	d102      	bne.n	801de10 <_strtod_l+0x398>
 801de0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801de0c:	3301      	adds	r3, #1
 801de0e:	931d      	str	r3, [sp, #116]	@ 0x74
 801de10:	2600      	movs	r6, #0
 801de12:	4f8c      	ldr	r7, [pc, #560]	@ (801e044 <_strtod_l+0x5cc>)
 801de14:	e66b      	b.n	801daee <_strtod_l+0x76>
 801de16:	488e      	ldr	r0, [pc, #568]	@ (801e050 <_strtod_l+0x5d8>)
 801de18:	f001 fc84 	bl	801f724 <nan>
 801de1c:	0006      	movs	r6, r0
 801de1e:	000f      	movs	r7, r1
 801de20:	e665      	b.n	801daee <_strtod_l+0x76>
 801de22:	9b07      	ldr	r3, [sp, #28]
 801de24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801de26:	1a9b      	subs	r3, r3, r2
 801de28:	930c      	str	r3, [sp, #48]	@ 0x30
 801de2a:	9b08      	ldr	r3, [sp, #32]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d101      	bne.n	801de34 <_strtod_l+0x3bc>
 801de30:	9b06      	ldr	r3, [sp, #24]
 801de32:	9308      	str	r3, [sp, #32]
 801de34:	9c06      	ldr	r4, [sp, #24]
 801de36:	2c10      	cmp	r4, #16
 801de38:	dd00      	ble.n	801de3c <_strtod_l+0x3c4>
 801de3a:	2410      	movs	r4, #16
 801de3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801de3e:	f7e5 faed 	bl	800341c <__aeabi_ui2d>
 801de42:	9b06      	ldr	r3, [sp, #24]
 801de44:	0006      	movs	r6, r0
 801de46:	000f      	movs	r7, r1
 801de48:	2b09      	cmp	r3, #9
 801de4a:	dc13      	bgt.n	801de74 <_strtod_l+0x3fc>
 801de4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d100      	bne.n	801de54 <_strtod_l+0x3dc>
 801de52:	e64c      	b.n	801daee <_strtod_l+0x76>
 801de54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de56:	2b00      	cmp	r3, #0
 801de58:	dc00      	bgt.n	801de5c <_strtod_l+0x3e4>
 801de5a:	e07e      	b.n	801df5a <_strtod_l+0x4e2>
 801de5c:	2b16      	cmp	r3, #22
 801de5e:	dc63      	bgt.n	801df28 <_strtod_l+0x4b0>
 801de60:	497c      	ldr	r1, [pc, #496]	@ (801e054 <_strtod_l+0x5dc>)
 801de62:	00db      	lsls	r3, r3, #3
 801de64:	18c9      	adds	r1, r1, r3
 801de66:	0032      	movs	r2, r6
 801de68:	6808      	ldr	r0, [r1, #0]
 801de6a:	6849      	ldr	r1, [r1, #4]
 801de6c:	003b      	movs	r3, r7
 801de6e:	f7e4 fbe5 	bl	800263c <__aeabi_dmul>
 801de72:	e7d3      	b.n	801de1c <_strtod_l+0x3a4>
 801de74:	0022      	movs	r2, r4
 801de76:	4b77      	ldr	r3, [pc, #476]	@ (801e054 <_strtod_l+0x5dc>)
 801de78:	3a09      	subs	r2, #9
 801de7a:	00d2      	lsls	r2, r2, #3
 801de7c:	189b      	adds	r3, r3, r2
 801de7e:	681a      	ldr	r2, [r3, #0]
 801de80:	685b      	ldr	r3, [r3, #4]
 801de82:	f7e4 fbdb 	bl	800263c <__aeabi_dmul>
 801de86:	0006      	movs	r6, r0
 801de88:	0028      	movs	r0, r5
 801de8a:	000f      	movs	r7, r1
 801de8c:	f7e5 fac6 	bl	800341c <__aeabi_ui2d>
 801de90:	000b      	movs	r3, r1
 801de92:	0002      	movs	r2, r0
 801de94:	0039      	movs	r1, r7
 801de96:	0030      	movs	r0, r6
 801de98:	f7e3 fc28 	bl	80016ec <__aeabi_dadd>
 801de9c:	9b06      	ldr	r3, [sp, #24]
 801de9e:	0006      	movs	r6, r0
 801dea0:	000f      	movs	r7, r1
 801dea2:	2b0f      	cmp	r3, #15
 801dea4:	ddd2      	ble.n	801de4c <_strtod_l+0x3d4>
 801dea6:	9b06      	ldr	r3, [sp, #24]
 801dea8:	1b1c      	subs	r4, r3, r4
 801deaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deac:	18e4      	adds	r4, r4, r3
 801deae:	2c00      	cmp	r4, #0
 801deb0:	dc00      	bgt.n	801deb4 <_strtod_l+0x43c>
 801deb2:	e09b      	b.n	801dfec <_strtod_l+0x574>
 801deb4:	220f      	movs	r2, #15
 801deb6:	0023      	movs	r3, r4
 801deb8:	4013      	ands	r3, r2
 801deba:	4214      	tst	r4, r2
 801debc:	d00a      	beq.n	801ded4 <_strtod_l+0x45c>
 801debe:	4965      	ldr	r1, [pc, #404]	@ (801e054 <_strtod_l+0x5dc>)
 801dec0:	00db      	lsls	r3, r3, #3
 801dec2:	18c9      	adds	r1, r1, r3
 801dec4:	0032      	movs	r2, r6
 801dec6:	6808      	ldr	r0, [r1, #0]
 801dec8:	6849      	ldr	r1, [r1, #4]
 801deca:	003b      	movs	r3, r7
 801decc:	f7e4 fbb6 	bl	800263c <__aeabi_dmul>
 801ded0:	0006      	movs	r6, r0
 801ded2:	000f      	movs	r7, r1
 801ded4:	230f      	movs	r3, #15
 801ded6:	439c      	bics	r4, r3
 801ded8:	d073      	beq.n	801dfc2 <_strtod_l+0x54a>
 801deda:	3326      	adds	r3, #38	@ 0x26
 801dedc:	33ff      	adds	r3, #255	@ 0xff
 801dede:	429c      	cmp	r4, r3
 801dee0:	dd4b      	ble.n	801df7a <_strtod_l+0x502>
 801dee2:	2300      	movs	r3, #0
 801dee4:	9306      	str	r3, [sp, #24]
 801dee6:	9307      	str	r3, [sp, #28]
 801dee8:	930d      	str	r3, [sp, #52]	@ 0x34
 801deea:	9308      	str	r3, [sp, #32]
 801deec:	2322      	movs	r3, #34	@ 0x22
 801deee:	2600      	movs	r6, #0
 801def0:	9a05      	ldr	r2, [sp, #20]
 801def2:	4f54      	ldr	r7, [pc, #336]	@ (801e044 <_strtod_l+0x5cc>)
 801def4:	6013      	str	r3, [r2, #0]
 801def6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801def8:	42b3      	cmp	r3, r6
 801defa:	d100      	bne.n	801defe <_strtod_l+0x486>
 801defc:	e5f7      	b.n	801daee <_strtod_l+0x76>
 801defe:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801df00:	9805      	ldr	r0, [sp, #20]
 801df02:	f002 ff4d 	bl	8020da0 <_Bfree>
 801df06:	9908      	ldr	r1, [sp, #32]
 801df08:	9805      	ldr	r0, [sp, #20]
 801df0a:	f002 ff49 	bl	8020da0 <_Bfree>
 801df0e:	9907      	ldr	r1, [sp, #28]
 801df10:	9805      	ldr	r0, [sp, #20]
 801df12:	f002 ff45 	bl	8020da0 <_Bfree>
 801df16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801df18:	9805      	ldr	r0, [sp, #20]
 801df1a:	f002 ff41 	bl	8020da0 <_Bfree>
 801df1e:	9906      	ldr	r1, [sp, #24]
 801df20:	9805      	ldr	r0, [sp, #20]
 801df22:	f002 ff3d 	bl	8020da0 <_Bfree>
 801df26:	e5e2      	b.n	801daee <_strtod_l+0x76>
 801df28:	2325      	movs	r3, #37	@ 0x25
 801df2a:	9a06      	ldr	r2, [sp, #24]
 801df2c:	1a9b      	subs	r3, r3, r2
 801df2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801df30:	4293      	cmp	r3, r2
 801df32:	dbb8      	blt.n	801dea6 <_strtod_l+0x42e>
 801df34:	240f      	movs	r4, #15
 801df36:	9b06      	ldr	r3, [sp, #24]
 801df38:	4d46      	ldr	r5, [pc, #280]	@ (801e054 <_strtod_l+0x5dc>)
 801df3a:	1ae4      	subs	r4, r4, r3
 801df3c:	00e1      	lsls	r1, r4, #3
 801df3e:	1869      	adds	r1, r5, r1
 801df40:	0032      	movs	r2, r6
 801df42:	6808      	ldr	r0, [r1, #0]
 801df44:	6849      	ldr	r1, [r1, #4]
 801df46:	003b      	movs	r3, r7
 801df48:	f7e4 fb78 	bl	800263c <__aeabi_dmul>
 801df4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df4e:	1b1c      	subs	r4, r3, r4
 801df50:	00e4      	lsls	r4, r4, #3
 801df52:	192d      	adds	r5, r5, r4
 801df54:	682a      	ldr	r2, [r5, #0]
 801df56:	686b      	ldr	r3, [r5, #4]
 801df58:	e789      	b.n	801de6e <_strtod_l+0x3f6>
 801df5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801df5c:	3316      	adds	r3, #22
 801df5e:	dba2      	blt.n	801dea6 <_strtod_l+0x42e>
 801df60:	9907      	ldr	r1, [sp, #28]
 801df62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801df64:	4b3b      	ldr	r3, [pc, #236]	@ (801e054 <_strtod_l+0x5dc>)
 801df66:	1a52      	subs	r2, r2, r1
 801df68:	00d2      	lsls	r2, r2, #3
 801df6a:	189b      	adds	r3, r3, r2
 801df6c:	0030      	movs	r0, r6
 801df6e:	681a      	ldr	r2, [r3, #0]
 801df70:	685b      	ldr	r3, [r3, #4]
 801df72:	0039      	movs	r1, r7
 801df74:	f7e3 ff1e 	bl	8001db4 <__aeabi_ddiv>
 801df78:	e750      	b.n	801de1c <_strtod_l+0x3a4>
 801df7a:	2300      	movs	r3, #0
 801df7c:	0030      	movs	r0, r6
 801df7e:	0039      	movs	r1, r7
 801df80:	4d35      	ldr	r5, [pc, #212]	@ (801e058 <_strtod_l+0x5e0>)
 801df82:	1124      	asrs	r4, r4, #4
 801df84:	9309      	str	r3, [sp, #36]	@ 0x24
 801df86:	2c01      	cmp	r4, #1
 801df88:	dc1e      	bgt.n	801dfc8 <_strtod_l+0x550>
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d001      	beq.n	801df92 <_strtod_l+0x51a>
 801df8e:	0006      	movs	r6, r0
 801df90:	000f      	movs	r7, r1
 801df92:	4b32      	ldr	r3, [pc, #200]	@ (801e05c <_strtod_l+0x5e4>)
 801df94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df96:	18ff      	adds	r7, r7, r3
 801df98:	4b2f      	ldr	r3, [pc, #188]	@ (801e058 <_strtod_l+0x5e0>)
 801df9a:	00d5      	lsls	r5, r2, #3
 801df9c:	195d      	adds	r5, r3, r5
 801df9e:	0032      	movs	r2, r6
 801dfa0:	6828      	ldr	r0, [r5, #0]
 801dfa2:	6869      	ldr	r1, [r5, #4]
 801dfa4:	003b      	movs	r3, r7
 801dfa6:	f7e4 fb49 	bl	800263c <__aeabi_dmul>
 801dfaa:	4b26      	ldr	r3, [pc, #152]	@ (801e044 <_strtod_l+0x5cc>)
 801dfac:	4a2c      	ldr	r2, [pc, #176]	@ (801e060 <_strtod_l+0x5e8>)
 801dfae:	0006      	movs	r6, r0
 801dfb0:	400b      	ands	r3, r1
 801dfb2:	4293      	cmp	r3, r2
 801dfb4:	d895      	bhi.n	801dee2 <_strtod_l+0x46a>
 801dfb6:	4a2b      	ldr	r2, [pc, #172]	@ (801e064 <_strtod_l+0x5ec>)
 801dfb8:	4293      	cmp	r3, r2
 801dfba:	d913      	bls.n	801dfe4 <_strtod_l+0x56c>
 801dfbc:	2601      	movs	r6, #1
 801dfbe:	4f2a      	ldr	r7, [pc, #168]	@ (801e068 <_strtod_l+0x5f0>)
 801dfc0:	4276      	negs	r6, r6
 801dfc2:	2300      	movs	r3, #0
 801dfc4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfc6:	e086      	b.n	801e0d6 <_strtod_l+0x65e>
 801dfc8:	2201      	movs	r2, #1
 801dfca:	4214      	tst	r4, r2
 801dfcc:	d004      	beq.n	801dfd8 <_strtod_l+0x560>
 801dfce:	682a      	ldr	r2, [r5, #0]
 801dfd0:	686b      	ldr	r3, [r5, #4]
 801dfd2:	f7e4 fb33 	bl	800263c <__aeabi_dmul>
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfda:	1064      	asrs	r4, r4, #1
 801dfdc:	3201      	adds	r2, #1
 801dfde:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfe0:	3508      	adds	r5, #8
 801dfe2:	e7d0      	b.n	801df86 <_strtod_l+0x50e>
 801dfe4:	23d4      	movs	r3, #212	@ 0xd4
 801dfe6:	049b      	lsls	r3, r3, #18
 801dfe8:	18cf      	adds	r7, r1, r3
 801dfea:	e7ea      	b.n	801dfc2 <_strtod_l+0x54a>
 801dfec:	2c00      	cmp	r4, #0
 801dfee:	d0e8      	beq.n	801dfc2 <_strtod_l+0x54a>
 801dff0:	4264      	negs	r4, r4
 801dff2:	230f      	movs	r3, #15
 801dff4:	0022      	movs	r2, r4
 801dff6:	401a      	ands	r2, r3
 801dff8:	421c      	tst	r4, r3
 801dffa:	d00a      	beq.n	801e012 <_strtod_l+0x59a>
 801dffc:	4b15      	ldr	r3, [pc, #84]	@ (801e054 <_strtod_l+0x5dc>)
 801dffe:	00d2      	lsls	r2, r2, #3
 801e000:	189b      	adds	r3, r3, r2
 801e002:	0030      	movs	r0, r6
 801e004:	681a      	ldr	r2, [r3, #0]
 801e006:	685b      	ldr	r3, [r3, #4]
 801e008:	0039      	movs	r1, r7
 801e00a:	f7e3 fed3 	bl	8001db4 <__aeabi_ddiv>
 801e00e:	0006      	movs	r6, r0
 801e010:	000f      	movs	r7, r1
 801e012:	1124      	asrs	r4, r4, #4
 801e014:	d0d5      	beq.n	801dfc2 <_strtod_l+0x54a>
 801e016:	2c1f      	cmp	r4, #31
 801e018:	dd28      	ble.n	801e06c <_strtod_l+0x5f4>
 801e01a:	2300      	movs	r3, #0
 801e01c:	9306      	str	r3, [sp, #24]
 801e01e:	9307      	str	r3, [sp, #28]
 801e020:	930d      	str	r3, [sp, #52]	@ 0x34
 801e022:	9308      	str	r3, [sp, #32]
 801e024:	2322      	movs	r3, #34	@ 0x22
 801e026:	9a05      	ldr	r2, [sp, #20]
 801e028:	2600      	movs	r6, #0
 801e02a:	6013      	str	r3, [r2, #0]
 801e02c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e02e:	2700      	movs	r7, #0
 801e030:	2b00      	cmp	r3, #0
 801e032:	d000      	beq.n	801e036 <_strtod_l+0x5be>
 801e034:	e763      	b.n	801defe <_strtod_l+0x486>
 801e036:	e55a      	b.n	801daee <_strtod_l+0x76>
 801e038:	00004e1f 	.word	0x00004e1f
 801e03c:	08024cbe 	.word	0x08024cbe
 801e040:	08024b5c 	.word	0x08024b5c
 801e044:	7ff00000 	.word	0x7ff00000
 801e048:	08024cb6 	.word	0x08024cb6
 801e04c:	08024cf0 	.word	0x08024cf0
 801e050:	08024f7c 	.word	0x08024f7c
 801e054:	08024e68 	.word	0x08024e68
 801e058:	08024e40 	.word	0x08024e40
 801e05c:	fcb00000 	.word	0xfcb00000
 801e060:	7ca00000 	.word	0x7ca00000
 801e064:	7c900000 	.word	0x7c900000
 801e068:	7fefffff 	.word	0x7fefffff
 801e06c:	2310      	movs	r3, #16
 801e06e:	0022      	movs	r2, r4
 801e070:	401a      	ands	r2, r3
 801e072:	9209      	str	r2, [sp, #36]	@ 0x24
 801e074:	421c      	tst	r4, r3
 801e076:	d001      	beq.n	801e07c <_strtod_l+0x604>
 801e078:	335a      	adds	r3, #90	@ 0x5a
 801e07a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e07c:	0030      	movs	r0, r6
 801e07e:	0039      	movs	r1, r7
 801e080:	2300      	movs	r3, #0
 801e082:	4dbf      	ldr	r5, [pc, #764]	@ (801e380 <_strtod_l+0x908>)
 801e084:	2201      	movs	r2, #1
 801e086:	4214      	tst	r4, r2
 801e088:	d004      	beq.n	801e094 <_strtod_l+0x61c>
 801e08a:	682a      	ldr	r2, [r5, #0]
 801e08c:	686b      	ldr	r3, [r5, #4]
 801e08e:	f7e4 fad5 	bl	800263c <__aeabi_dmul>
 801e092:	2301      	movs	r3, #1
 801e094:	1064      	asrs	r4, r4, #1
 801e096:	3508      	adds	r5, #8
 801e098:	2c00      	cmp	r4, #0
 801e09a:	d1f3      	bne.n	801e084 <_strtod_l+0x60c>
 801e09c:	2b00      	cmp	r3, #0
 801e09e:	d001      	beq.n	801e0a4 <_strtod_l+0x62c>
 801e0a0:	0006      	movs	r6, r0
 801e0a2:	000f      	movs	r7, r1
 801e0a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d00d      	beq.n	801e0c6 <_strtod_l+0x64e>
 801e0aa:	236b      	movs	r3, #107	@ 0x6b
 801e0ac:	007a      	lsls	r2, r7, #1
 801e0ae:	0d52      	lsrs	r2, r2, #21
 801e0b0:	0039      	movs	r1, r7
 801e0b2:	1a9b      	subs	r3, r3, r2
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	dd06      	ble.n	801e0c6 <_strtod_l+0x64e>
 801e0b8:	2b1f      	cmp	r3, #31
 801e0ba:	dd5a      	ble.n	801e172 <_strtod_l+0x6fa>
 801e0bc:	2600      	movs	r6, #0
 801e0be:	2b34      	cmp	r3, #52	@ 0x34
 801e0c0:	dd50      	ble.n	801e164 <_strtod_l+0x6ec>
 801e0c2:	27dc      	movs	r7, #220	@ 0xdc
 801e0c4:	04bf      	lsls	r7, r7, #18
 801e0c6:	2200      	movs	r2, #0
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	0030      	movs	r0, r6
 801e0cc:	0039      	movs	r1, r7
 801e0ce:	f7e2 f9ef 	bl	80004b0 <__aeabi_dcmpeq>
 801e0d2:	2800      	cmp	r0, #0
 801e0d4:	d1a1      	bne.n	801e01a <_strtod_l+0x5a2>
 801e0d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e0d8:	9a08      	ldr	r2, [sp, #32]
 801e0da:	9300      	str	r3, [sp, #0]
 801e0dc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e0de:	9b06      	ldr	r3, [sp, #24]
 801e0e0:	9805      	ldr	r0, [sp, #20]
 801e0e2:	f002 fec5 	bl	8020e70 <__s2b>
 801e0e6:	900d      	str	r0, [sp, #52]	@ 0x34
 801e0e8:	2800      	cmp	r0, #0
 801e0ea:	d100      	bne.n	801e0ee <_strtod_l+0x676>
 801e0ec:	e6f9      	b.n	801dee2 <_strtod_l+0x46a>
 801e0ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0f0:	9907      	ldr	r1, [sp, #28]
 801e0f2:	17da      	asrs	r2, r3, #31
 801e0f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e0f6:	1a5b      	subs	r3, r3, r1
 801e0f8:	401a      	ands	r2, r3
 801e0fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0fc:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e0fe:	43db      	mvns	r3, r3
 801e100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e102:	17db      	asrs	r3, r3, #31
 801e104:	401a      	ands	r2, r3
 801e106:	2300      	movs	r3, #0
 801e108:	921a      	str	r2, [sp, #104]	@ 0x68
 801e10a:	9306      	str	r3, [sp, #24]
 801e10c:	9307      	str	r3, [sp, #28]
 801e10e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e110:	9805      	ldr	r0, [sp, #20]
 801e112:	6859      	ldr	r1, [r3, #4]
 801e114:	f002 fe00 	bl	8020d18 <_Balloc>
 801e118:	9008      	str	r0, [sp, #32]
 801e11a:	2800      	cmp	r0, #0
 801e11c:	d100      	bne.n	801e120 <_strtod_l+0x6a8>
 801e11e:	e6e5      	b.n	801deec <_strtod_l+0x474>
 801e120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e122:	300c      	adds	r0, #12
 801e124:	0019      	movs	r1, r3
 801e126:	691a      	ldr	r2, [r3, #16]
 801e128:	310c      	adds	r1, #12
 801e12a:	3202      	adds	r2, #2
 801e12c:	0092      	lsls	r2, r2, #2
 801e12e:	f001 faef 	bl	801f710 <memcpy>
 801e132:	ab20      	add	r3, sp, #128	@ 0x80
 801e134:	9301      	str	r3, [sp, #4]
 801e136:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e138:	9300      	str	r3, [sp, #0]
 801e13a:	0032      	movs	r2, r6
 801e13c:	003b      	movs	r3, r7
 801e13e:	9805      	ldr	r0, [sp, #20]
 801e140:	9610      	str	r6, [sp, #64]	@ 0x40
 801e142:	9711      	str	r7, [sp, #68]	@ 0x44
 801e144:	f003 f9e4 	bl	8021510 <__d2b>
 801e148:	901e      	str	r0, [sp, #120]	@ 0x78
 801e14a:	2800      	cmp	r0, #0
 801e14c:	d100      	bne.n	801e150 <_strtod_l+0x6d8>
 801e14e:	e6cd      	b.n	801deec <_strtod_l+0x474>
 801e150:	2101      	movs	r1, #1
 801e152:	9805      	ldr	r0, [sp, #20]
 801e154:	f002 ff28 	bl	8020fa8 <__i2b>
 801e158:	9007      	str	r0, [sp, #28]
 801e15a:	2800      	cmp	r0, #0
 801e15c:	d10e      	bne.n	801e17c <_strtod_l+0x704>
 801e15e:	2300      	movs	r3, #0
 801e160:	9307      	str	r3, [sp, #28]
 801e162:	e6c3      	b.n	801deec <_strtod_l+0x474>
 801e164:	234b      	movs	r3, #75	@ 0x4b
 801e166:	1a9a      	subs	r2, r3, r2
 801e168:	3b4c      	subs	r3, #76	@ 0x4c
 801e16a:	4093      	lsls	r3, r2
 801e16c:	4019      	ands	r1, r3
 801e16e:	000f      	movs	r7, r1
 801e170:	e7a9      	b.n	801e0c6 <_strtod_l+0x64e>
 801e172:	2201      	movs	r2, #1
 801e174:	4252      	negs	r2, r2
 801e176:	409a      	lsls	r2, r3
 801e178:	4016      	ands	r6, r2
 801e17a:	e7a4      	b.n	801e0c6 <_strtod_l+0x64e>
 801e17c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e17e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e180:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e182:	1ad4      	subs	r4, r2, r3
 801e184:	2b00      	cmp	r3, #0
 801e186:	db01      	blt.n	801e18c <_strtod_l+0x714>
 801e188:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e18a:	195d      	adds	r5, r3, r5
 801e18c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e18e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e190:	1a5b      	subs	r3, r3, r1
 801e192:	2136      	movs	r1, #54	@ 0x36
 801e194:	189b      	adds	r3, r3, r2
 801e196:	1a8a      	subs	r2, r1, r2
 801e198:	497a      	ldr	r1, [pc, #488]	@ (801e384 <_strtod_l+0x90c>)
 801e19a:	2001      	movs	r0, #1
 801e19c:	468c      	mov	ip, r1
 801e19e:	2100      	movs	r1, #0
 801e1a0:	3b01      	subs	r3, #1
 801e1a2:	9116      	str	r1, [sp, #88]	@ 0x58
 801e1a4:	9014      	str	r0, [sp, #80]	@ 0x50
 801e1a6:	4563      	cmp	r3, ip
 801e1a8:	da06      	bge.n	801e1b8 <_strtod_l+0x740>
 801e1aa:	4661      	mov	r1, ip
 801e1ac:	1ac9      	subs	r1, r1, r3
 801e1ae:	1a52      	subs	r2, r2, r1
 801e1b0:	291f      	cmp	r1, #31
 801e1b2:	dc3f      	bgt.n	801e234 <_strtod_l+0x7bc>
 801e1b4:	4088      	lsls	r0, r1
 801e1b6:	9014      	str	r0, [sp, #80]	@ 0x50
 801e1b8:	18ab      	adds	r3, r5, r2
 801e1ba:	930e      	str	r3, [sp, #56]	@ 0x38
 801e1bc:	18a4      	adds	r4, r4, r2
 801e1be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1c2:	191c      	adds	r4, r3, r4
 801e1c4:	002b      	movs	r3, r5
 801e1c6:	4295      	cmp	r5, r2
 801e1c8:	dd00      	ble.n	801e1cc <_strtod_l+0x754>
 801e1ca:	0013      	movs	r3, r2
 801e1cc:	42a3      	cmp	r3, r4
 801e1ce:	dd00      	ble.n	801e1d2 <_strtod_l+0x75a>
 801e1d0:	0023      	movs	r3, r4
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	dd04      	ble.n	801e1e0 <_strtod_l+0x768>
 801e1d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1d8:	1ae4      	subs	r4, r4, r3
 801e1da:	1ad2      	subs	r2, r2, r3
 801e1dc:	920e      	str	r2, [sp, #56]	@ 0x38
 801e1de:	1aed      	subs	r5, r5, r3
 801e1e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	dd16      	ble.n	801e214 <_strtod_l+0x79c>
 801e1e6:	001a      	movs	r2, r3
 801e1e8:	9907      	ldr	r1, [sp, #28]
 801e1ea:	9805      	ldr	r0, [sp, #20]
 801e1ec:	f002 ffa6 	bl	802113c <__pow5mult>
 801e1f0:	9007      	str	r0, [sp, #28]
 801e1f2:	2800      	cmp	r0, #0
 801e1f4:	d0b3      	beq.n	801e15e <_strtod_l+0x6e6>
 801e1f6:	0001      	movs	r1, r0
 801e1f8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e1fa:	9805      	ldr	r0, [sp, #20]
 801e1fc:	f002 feec 	bl	8020fd8 <__multiply>
 801e200:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e202:	2800      	cmp	r0, #0
 801e204:	d100      	bne.n	801e208 <_strtod_l+0x790>
 801e206:	e671      	b.n	801deec <_strtod_l+0x474>
 801e208:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e20a:	9805      	ldr	r0, [sp, #20]
 801e20c:	f002 fdc8 	bl	8020da0 <_Bfree>
 801e210:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e212:	931e      	str	r3, [sp, #120]	@ 0x78
 801e214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e216:	2b00      	cmp	r3, #0
 801e218:	dc12      	bgt.n	801e240 <_strtod_l+0x7c8>
 801e21a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	dd18      	ble.n	801e252 <_strtod_l+0x7da>
 801e220:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e222:	9908      	ldr	r1, [sp, #32]
 801e224:	9805      	ldr	r0, [sp, #20]
 801e226:	f002 ff89 	bl	802113c <__pow5mult>
 801e22a:	9008      	str	r0, [sp, #32]
 801e22c:	2800      	cmp	r0, #0
 801e22e:	d110      	bne.n	801e252 <_strtod_l+0x7da>
 801e230:	2300      	movs	r3, #0
 801e232:	e65a      	b.n	801deea <_strtod_l+0x472>
 801e234:	4954      	ldr	r1, [pc, #336]	@ (801e388 <_strtod_l+0x910>)
 801e236:	1acb      	subs	r3, r1, r3
 801e238:	0001      	movs	r1, r0
 801e23a:	4099      	lsls	r1, r3
 801e23c:	9116      	str	r1, [sp, #88]	@ 0x58
 801e23e:	e7ba      	b.n	801e1b6 <_strtod_l+0x73e>
 801e240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e242:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e244:	9805      	ldr	r0, [sp, #20]
 801e246:	f002 ffd5 	bl	80211f4 <__lshift>
 801e24a:	901e      	str	r0, [sp, #120]	@ 0x78
 801e24c:	2800      	cmp	r0, #0
 801e24e:	d1e4      	bne.n	801e21a <_strtod_l+0x7a2>
 801e250:	e64c      	b.n	801deec <_strtod_l+0x474>
 801e252:	2c00      	cmp	r4, #0
 801e254:	dd07      	ble.n	801e266 <_strtod_l+0x7ee>
 801e256:	0022      	movs	r2, r4
 801e258:	9908      	ldr	r1, [sp, #32]
 801e25a:	9805      	ldr	r0, [sp, #20]
 801e25c:	f002 ffca 	bl	80211f4 <__lshift>
 801e260:	9008      	str	r0, [sp, #32]
 801e262:	2800      	cmp	r0, #0
 801e264:	d0e4      	beq.n	801e230 <_strtod_l+0x7b8>
 801e266:	2d00      	cmp	r5, #0
 801e268:	dd08      	ble.n	801e27c <_strtod_l+0x804>
 801e26a:	002a      	movs	r2, r5
 801e26c:	9907      	ldr	r1, [sp, #28]
 801e26e:	9805      	ldr	r0, [sp, #20]
 801e270:	f002 ffc0 	bl	80211f4 <__lshift>
 801e274:	9007      	str	r0, [sp, #28]
 801e276:	2800      	cmp	r0, #0
 801e278:	d100      	bne.n	801e27c <_strtod_l+0x804>
 801e27a:	e637      	b.n	801deec <_strtod_l+0x474>
 801e27c:	9a08      	ldr	r2, [sp, #32]
 801e27e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e280:	9805      	ldr	r0, [sp, #20]
 801e282:	f003 f83f 	bl	8021304 <__mdiff>
 801e286:	9006      	str	r0, [sp, #24]
 801e288:	2800      	cmp	r0, #0
 801e28a:	d100      	bne.n	801e28e <_strtod_l+0x816>
 801e28c:	e62e      	b.n	801deec <_strtod_l+0x474>
 801e28e:	68c3      	ldr	r3, [r0, #12]
 801e290:	9907      	ldr	r1, [sp, #28]
 801e292:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e294:	2300      	movs	r3, #0
 801e296:	60c3      	str	r3, [r0, #12]
 801e298:	f003 f818 	bl	80212cc <__mcmp>
 801e29c:	2800      	cmp	r0, #0
 801e29e:	da3b      	bge.n	801e318 <_strtod_l+0x8a0>
 801e2a0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2a2:	4333      	orrs	r3, r6
 801e2a4:	d167      	bne.n	801e376 <_strtod_l+0x8fe>
 801e2a6:	033b      	lsls	r3, r7, #12
 801e2a8:	d165      	bne.n	801e376 <_strtod_l+0x8fe>
 801e2aa:	22d6      	movs	r2, #214	@ 0xd6
 801e2ac:	4b37      	ldr	r3, [pc, #220]	@ (801e38c <_strtod_l+0x914>)
 801e2ae:	04d2      	lsls	r2, r2, #19
 801e2b0:	403b      	ands	r3, r7
 801e2b2:	4293      	cmp	r3, r2
 801e2b4:	d95f      	bls.n	801e376 <_strtod_l+0x8fe>
 801e2b6:	9b06      	ldr	r3, [sp, #24]
 801e2b8:	695b      	ldr	r3, [r3, #20]
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	d103      	bne.n	801e2c6 <_strtod_l+0x84e>
 801e2be:	9b06      	ldr	r3, [sp, #24]
 801e2c0:	691b      	ldr	r3, [r3, #16]
 801e2c2:	2b01      	cmp	r3, #1
 801e2c4:	dd57      	ble.n	801e376 <_strtod_l+0x8fe>
 801e2c6:	9906      	ldr	r1, [sp, #24]
 801e2c8:	2201      	movs	r2, #1
 801e2ca:	9805      	ldr	r0, [sp, #20]
 801e2cc:	f002 ff92 	bl	80211f4 <__lshift>
 801e2d0:	9907      	ldr	r1, [sp, #28]
 801e2d2:	9006      	str	r0, [sp, #24]
 801e2d4:	f002 fffa 	bl	80212cc <__mcmp>
 801e2d8:	2800      	cmp	r0, #0
 801e2da:	dd4c      	ble.n	801e376 <_strtod_l+0x8fe>
 801e2dc:	4b2b      	ldr	r3, [pc, #172]	@ (801e38c <_strtod_l+0x914>)
 801e2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2e0:	403b      	ands	r3, r7
 801e2e2:	2a00      	cmp	r2, #0
 801e2e4:	d074      	beq.n	801e3d0 <_strtod_l+0x958>
 801e2e6:	22d6      	movs	r2, #214	@ 0xd6
 801e2e8:	04d2      	lsls	r2, r2, #19
 801e2ea:	4293      	cmp	r3, r2
 801e2ec:	d870      	bhi.n	801e3d0 <_strtod_l+0x958>
 801e2ee:	22dc      	movs	r2, #220	@ 0xdc
 801e2f0:	0492      	lsls	r2, r2, #18
 801e2f2:	4293      	cmp	r3, r2
 801e2f4:	d800      	bhi.n	801e2f8 <_strtod_l+0x880>
 801e2f6:	e695      	b.n	801e024 <_strtod_l+0x5ac>
 801e2f8:	0030      	movs	r0, r6
 801e2fa:	0039      	movs	r1, r7
 801e2fc:	4b24      	ldr	r3, [pc, #144]	@ (801e390 <_strtod_l+0x918>)
 801e2fe:	2200      	movs	r2, #0
 801e300:	f7e4 f99c 	bl	800263c <__aeabi_dmul>
 801e304:	4b21      	ldr	r3, [pc, #132]	@ (801e38c <_strtod_l+0x914>)
 801e306:	0006      	movs	r6, r0
 801e308:	000f      	movs	r7, r1
 801e30a:	420b      	tst	r3, r1
 801e30c:	d000      	beq.n	801e310 <_strtod_l+0x898>
 801e30e:	e5f6      	b.n	801defe <_strtod_l+0x486>
 801e310:	2322      	movs	r3, #34	@ 0x22
 801e312:	9a05      	ldr	r2, [sp, #20]
 801e314:	6013      	str	r3, [r2, #0]
 801e316:	e5f2      	b.n	801defe <_strtod_l+0x486>
 801e318:	970e      	str	r7, [sp, #56]	@ 0x38
 801e31a:	2800      	cmp	r0, #0
 801e31c:	d175      	bne.n	801e40a <_strtod_l+0x992>
 801e31e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e320:	033b      	lsls	r3, r7, #12
 801e322:	0b1b      	lsrs	r3, r3, #12
 801e324:	2a00      	cmp	r2, #0
 801e326:	d039      	beq.n	801e39c <_strtod_l+0x924>
 801e328:	4a1a      	ldr	r2, [pc, #104]	@ (801e394 <_strtod_l+0x91c>)
 801e32a:	4293      	cmp	r3, r2
 801e32c:	d138      	bne.n	801e3a0 <_strtod_l+0x928>
 801e32e:	2101      	movs	r1, #1
 801e330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e332:	4249      	negs	r1, r1
 801e334:	0032      	movs	r2, r6
 801e336:	0008      	movs	r0, r1
 801e338:	2b00      	cmp	r3, #0
 801e33a:	d00b      	beq.n	801e354 <_strtod_l+0x8dc>
 801e33c:	24d4      	movs	r4, #212	@ 0xd4
 801e33e:	4b13      	ldr	r3, [pc, #76]	@ (801e38c <_strtod_l+0x914>)
 801e340:	0008      	movs	r0, r1
 801e342:	403b      	ands	r3, r7
 801e344:	04e4      	lsls	r4, r4, #19
 801e346:	42a3      	cmp	r3, r4
 801e348:	d804      	bhi.n	801e354 <_strtod_l+0x8dc>
 801e34a:	306c      	adds	r0, #108	@ 0x6c
 801e34c:	0d1b      	lsrs	r3, r3, #20
 801e34e:	1ac3      	subs	r3, r0, r3
 801e350:	4099      	lsls	r1, r3
 801e352:	0008      	movs	r0, r1
 801e354:	4282      	cmp	r2, r0
 801e356:	d123      	bne.n	801e3a0 <_strtod_l+0x928>
 801e358:	4b0f      	ldr	r3, [pc, #60]	@ (801e398 <_strtod_l+0x920>)
 801e35a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e35c:	4299      	cmp	r1, r3
 801e35e:	d102      	bne.n	801e366 <_strtod_l+0x8ee>
 801e360:	3201      	adds	r2, #1
 801e362:	d100      	bne.n	801e366 <_strtod_l+0x8ee>
 801e364:	e5c2      	b.n	801deec <_strtod_l+0x474>
 801e366:	4b09      	ldr	r3, [pc, #36]	@ (801e38c <_strtod_l+0x914>)
 801e368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e36a:	2600      	movs	r6, #0
 801e36c:	401a      	ands	r2, r3
 801e36e:	0013      	movs	r3, r2
 801e370:	2280      	movs	r2, #128	@ 0x80
 801e372:	0352      	lsls	r2, r2, #13
 801e374:	189f      	adds	r7, r3, r2
 801e376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d1bd      	bne.n	801e2f8 <_strtod_l+0x880>
 801e37c:	e5bf      	b.n	801defe <_strtod_l+0x486>
 801e37e:	46c0      	nop			@ (mov r8, r8)
 801e380:	08024b88 	.word	0x08024b88
 801e384:	fffffc02 	.word	0xfffffc02
 801e388:	fffffbe2 	.word	0xfffffbe2
 801e38c:	7ff00000 	.word	0x7ff00000
 801e390:	39500000 	.word	0x39500000
 801e394:	000fffff 	.word	0x000fffff
 801e398:	7fefffff 	.word	0x7fefffff
 801e39c:	4333      	orrs	r3, r6
 801e39e:	d09d      	beq.n	801e2dc <_strtod_l+0x864>
 801e3a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	d01c      	beq.n	801e3e0 <_strtod_l+0x968>
 801e3a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3a8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e3aa:	4213      	tst	r3, r2
 801e3ac:	d0e3      	beq.n	801e376 <_strtod_l+0x8fe>
 801e3ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e3b0:	0030      	movs	r0, r6
 801e3b2:	0039      	movs	r1, r7
 801e3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3b6:	2b00      	cmp	r3, #0
 801e3b8:	d016      	beq.n	801e3e8 <_strtod_l+0x970>
 801e3ba:	f7ff fb45 	bl	801da48 <sulp>
 801e3be:	0002      	movs	r2, r0
 801e3c0:	000b      	movs	r3, r1
 801e3c2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e3c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e3c6:	f7e3 f991 	bl	80016ec <__aeabi_dadd>
 801e3ca:	0006      	movs	r6, r0
 801e3cc:	000f      	movs	r7, r1
 801e3ce:	e7d2      	b.n	801e376 <_strtod_l+0x8fe>
 801e3d0:	2601      	movs	r6, #1
 801e3d2:	4a92      	ldr	r2, [pc, #584]	@ (801e61c <_strtod_l+0xba4>)
 801e3d4:	4276      	negs	r6, r6
 801e3d6:	189b      	adds	r3, r3, r2
 801e3d8:	4a91      	ldr	r2, [pc, #580]	@ (801e620 <_strtod_l+0xba8>)
 801e3da:	431a      	orrs	r2, r3
 801e3dc:	0017      	movs	r7, r2
 801e3de:	e7ca      	b.n	801e376 <_strtod_l+0x8fe>
 801e3e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e3e2:	4233      	tst	r3, r6
 801e3e4:	d0c7      	beq.n	801e376 <_strtod_l+0x8fe>
 801e3e6:	e7e2      	b.n	801e3ae <_strtod_l+0x936>
 801e3e8:	f7ff fb2e 	bl	801da48 <sulp>
 801e3ec:	0002      	movs	r2, r0
 801e3ee:	000b      	movs	r3, r1
 801e3f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e3f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e3f4:	f7e4 fbea 	bl	8002bcc <__aeabi_dsub>
 801e3f8:	2200      	movs	r2, #0
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	0006      	movs	r6, r0
 801e3fe:	000f      	movs	r7, r1
 801e400:	f7e2 f856 	bl	80004b0 <__aeabi_dcmpeq>
 801e404:	2800      	cmp	r0, #0
 801e406:	d0b6      	beq.n	801e376 <_strtod_l+0x8fe>
 801e408:	e60c      	b.n	801e024 <_strtod_l+0x5ac>
 801e40a:	9907      	ldr	r1, [sp, #28]
 801e40c:	9806      	ldr	r0, [sp, #24]
 801e40e:	f003 f8df 	bl	80215d0 <__ratio>
 801e412:	2380      	movs	r3, #128	@ 0x80
 801e414:	2200      	movs	r2, #0
 801e416:	05db      	lsls	r3, r3, #23
 801e418:	0004      	movs	r4, r0
 801e41a:	000d      	movs	r5, r1
 801e41c:	f7e2 f858 	bl	80004d0 <__aeabi_dcmple>
 801e420:	2800      	cmp	r0, #0
 801e422:	d06c      	beq.n	801e4fe <_strtod_l+0xa86>
 801e424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e426:	2b00      	cmp	r3, #0
 801e428:	d177      	bne.n	801e51a <_strtod_l+0xaa2>
 801e42a:	2e00      	cmp	r6, #0
 801e42c:	d157      	bne.n	801e4de <_strtod_l+0xa66>
 801e42e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e430:	031b      	lsls	r3, r3, #12
 801e432:	d15a      	bne.n	801e4ea <_strtod_l+0xa72>
 801e434:	2200      	movs	r2, #0
 801e436:	0020      	movs	r0, r4
 801e438:	0029      	movs	r1, r5
 801e43a:	4b7a      	ldr	r3, [pc, #488]	@ (801e624 <_strtod_l+0xbac>)
 801e43c:	f7e2 f83e 	bl	80004bc <__aeabi_dcmplt>
 801e440:	2800      	cmp	r0, #0
 801e442:	d159      	bne.n	801e4f8 <_strtod_l+0xa80>
 801e444:	0020      	movs	r0, r4
 801e446:	0029      	movs	r1, r5
 801e448:	2200      	movs	r2, #0
 801e44a:	4b77      	ldr	r3, [pc, #476]	@ (801e628 <_strtod_l+0xbb0>)
 801e44c:	f7e4 f8f6 	bl	800263c <__aeabi_dmul>
 801e450:	0004      	movs	r4, r0
 801e452:	000d      	movs	r5, r1
 801e454:	2380      	movs	r3, #128	@ 0x80
 801e456:	061b      	lsls	r3, r3, #24
 801e458:	18eb      	adds	r3, r5, r3
 801e45a:	940a      	str	r4, [sp, #40]	@ 0x28
 801e45c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e45e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e462:	9214      	str	r2, [sp, #80]	@ 0x50
 801e464:	9315      	str	r3, [sp, #84]	@ 0x54
 801e466:	4a71      	ldr	r2, [pc, #452]	@ (801e62c <_strtod_l+0xbb4>)
 801e468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e46a:	4013      	ands	r3, r2
 801e46c:	9316      	str	r3, [sp, #88]	@ 0x58
 801e46e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e470:	4b6f      	ldr	r3, [pc, #444]	@ (801e630 <_strtod_l+0xbb8>)
 801e472:	429a      	cmp	r2, r3
 801e474:	d000      	beq.n	801e478 <_strtod_l+0xa00>
 801e476:	e087      	b.n	801e588 <_strtod_l+0xb10>
 801e478:	4a6e      	ldr	r2, [pc, #440]	@ (801e634 <_strtod_l+0xbbc>)
 801e47a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e47c:	4694      	mov	ip, r2
 801e47e:	4463      	add	r3, ip
 801e480:	001f      	movs	r7, r3
 801e482:	0030      	movs	r0, r6
 801e484:	0019      	movs	r1, r3
 801e486:	f002 ffd7 	bl	8021438 <__ulp>
 801e48a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e48c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e48e:	f7e4 f8d5 	bl	800263c <__aeabi_dmul>
 801e492:	0032      	movs	r2, r6
 801e494:	003b      	movs	r3, r7
 801e496:	f7e3 f929 	bl	80016ec <__aeabi_dadd>
 801e49a:	4a64      	ldr	r2, [pc, #400]	@ (801e62c <_strtod_l+0xbb4>)
 801e49c:	4b66      	ldr	r3, [pc, #408]	@ (801e638 <_strtod_l+0xbc0>)
 801e49e:	0006      	movs	r6, r0
 801e4a0:	400a      	ands	r2, r1
 801e4a2:	429a      	cmp	r2, r3
 801e4a4:	d940      	bls.n	801e528 <_strtod_l+0xab0>
 801e4a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e4a8:	4a64      	ldr	r2, [pc, #400]	@ (801e63c <_strtod_l+0xbc4>)
 801e4aa:	4293      	cmp	r3, r2
 801e4ac:	d103      	bne.n	801e4b6 <_strtod_l+0xa3e>
 801e4ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e4b0:	3301      	adds	r3, #1
 801e4b2:	d100      	bne.n	801e4b6 <_strtod_l+0xa3e>
 801e4b4:	e51a      	b.n	801deec <_strtod_l+0x474>
 801e4b6:	2601      	movs	r6, #1
 801e4b8:	4f60      	ldr	r7, [pc, #384]	@ (801e63c <_strtod_l+0xbc4>)
 801e4ba:	4276      	negs	r6, r6
 801e4bc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e4be:	9805      	ldr	r0, [sp, #20]
 801e4c0:	f002 fc6e 	bl	8020da0 <_Bfree>
 801e4c4:	9908      	ldr	r1, [sp, #32]
 801e4c6:	9805      	ldr	r0, [sp, #20]
 801e4c8:	f002 fc6a 	bl	8020da0 <_Bfree>
 801e4cc:	9907      	ldr	r1, [sp, #28]
 801e4ce:	9805      	ldr	r0, [sp, #20]
 801e4d0:	f002 fc66 	bl	8020da0 <_Bfree>
 801e4d4:	9906      	ldr	r1, [sp, #24]
 801e4d6:	9805      	ldr	r0, [sp, #20]
 801e4d8:	f002 fc62 	bl	8020da0 <_Bfree>
 801e4dc:	e617      	b.n	801e10e <_strtod_l+0x696>
 801e4de:	2e01      	cmp	r6, #1
 801e4e0:	d103      	bne.n	801e4ea <_strtod_l+0xa72>
 801e4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	d100      	bne.n	801e4ea <_strtod_l+0xa72>
 801e4e8:	e59c      	b.n	801e024 <_strtod_l+0x5ac>
 801e4ea:	2300      	movs	r3, #0
 801e4ec:	4c54      	ldr	r4, [pc, #336]	@ (801e640 <_strtod_l+0xbc8>)
 801e4ee:	4d4d      	ldr	r5, [pc, #308]	@ (801e624 <_strtod_l+0xbac>)
 801e4f0:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e4f4:	2400      	movs	r4, #0
 801e4f6:	e7b2      	b.n	801e45e <_strtod_l+0x9e6>
 801e4f8:	2400      	movs	r4, #0
 801e4fa:	4d4b      	ldr	r5, [pc, #300]	@ (801e628 <_strtod_l+0xbb0>)
 801e4fc:	e7aa      	b.n	801e454 <_strtod_l+0x9dc>
 801e4fe:	0020      	movs	r0, r4
 801e500:	0029      	movs	r1, r5
 801e502:	4b49      	ldr	r3, [pc, #292]	@ (801e628 <_strtod_l+0xbb0>)
 801e504:	2200      	movs	r2, #0
 801e506:	f7e4 f899 	bl	800263c <__aeabi_dmul>
 801e50a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e50c:	0004      	movs	r4, r0
 801e50e:	000d      	movs	r5, r1
 801e510:	2b00      	cmp	r3, #0
 801e512:	d09f      	beq.n	801e454 <_strtod_l+0x9dc>
 801e514:	940a      	str	r4, [sp, #40]	@ 0x28
 801e516:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e518:	e7a1      	b.n	801e45e <_strtod_l+0x9e6>
 801e51a:	2300      	movs	r3, #0
 801e51c:	4c41      	ldr	r4, [pc, #260]	@ (801e624 <_strtod_l+0xbac>)
 801e51e:	0025      	movs	r5, r4
 801e520:	930a      	str	r3, [sp, #40]	@ 0x28
 801e522:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e524:	001c      	movs	r4, r3
 801e526:	e79a      	b.n	801e45e <_strtod_l+0x9e6>
 801e528:	23d4      	movs	r3, #212	@ 0xd4
 801e52a:	049b      	lsls	r3, r3, #18
 801e52c:	18cf      	adds	r7, r1, r3
 801e52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e530:	9710      	str	r7, [sp, #64]	@ 0x40
 801e532:	2b00      	cmp	r3, #0
 801e534:	d1c2      	bne.n	801e4bc <_strtod_l+0xa44>
 801e536:	4b3d      	ldr	r3, [pc, #244]	@ (801e62c <_strtod_l+0xbb4>)
 801e538:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e53a:	403b      	ands	r3, r7
 801e53c:	429a      	cmp	r2, r3
 801e53e:	d1bd      	bne.n	801e4bc <_strtod_l+0xa44>
 801e540:	0020      	movs	r0, r4
 801e542:	0029      	movs	r1, r5
 801e544:	f7e2 f8a0 	bl	8000688 <__aeabi_d2lz>
 801e548:	f7e2 f8d8 	bl	80006fc <__aeabi_l2d>
 801e54c:	0002      	movs	r2, r0
 801e54e:	000b      	movs	r3, r1
 801e550:	0020      	movs	r0, r4
 801e552:	0029      	movs	r1, r5
 801e554:	f7e4 fb3a 	bl	8002bcc <__aeabi_dsub>
 801e558:	033c      	lsls	r4, r7, #12
 801e55a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e55c:	0b24      	lsrs	r4, r4, #12
 801e55e:	4334      	orrs	r4, r6
 801e560:	900e      	str	r0, [sp, #56]	@ 0x38
 801e562:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e564:	4a37      	ldr	r2, [pc, #220]	@ (801e644 <_strtod_l+0xbcc>)
 801e566:	431c      	orrs	r4, r3
 801e568:	d052      	beq.n	801e610 <_strtod_l+0xb98>
 801e56a:	4b37      	ldr	r3, [pc, #220]	@ (801e648 <_strtod_l+0xbd0>)
 801e56c:	f7e1 ffa6 	bl	80004bc <__aeabi_dcmplt>
 801e570:	2800      	cmp	r0, #0
 801e572:	d000      	beq.n	801e576 <_strtod_l+0xafe>
 801e574:	e4c3      	b.n	801defe <_strtod_l+0x486>
 801e576:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e578:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e57a:	4a34      	ldr	r2, [pc, #208]	@ (801e64c <_strtod_l+0xbd4>)
 801e57c:	4b2a      	ldr	r3, [pc, #168]	@ (801e628 <_strtod_l+0xbb0>)
 801e57e:	f7e1 ffb1 	bl	80004e4 <__aeabi_dcmpgt>
 801e582:	2800      	cmp	r0, #0
 801e584:	d09a      	beq.n	801e4bc <_strtod_l+0xa44>
 801e586:	e4ba      	b.n	801defe <_strtod_l+0x486>
 801e588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d02a      	beq.n	801e5e4 <_strtod_l+0xb6c>
 801e58e:	23d4      	movs	r3, #212	@ 0xd4
 801e590:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e592:	04db      	lsls	r3, r3, #19
 801e594:	429a      	cmp	r2, r3
 801e596:	d825      	bhi.n	801e5e4 <_strtod_l+0xb6c>
 801e598:	0020      	movs	r0, r4
 801e59a:	0029      	movs	r1, r5
 801e59c:	4a2c      	ldr	r2, [pc, #176]	@ (801e650 <_strtod_l+0xbd8>)
 801e59e:	4b2d      	ldr	r3, [pc, #180]	@ (801e654 <_strtod_l+0xbdc>)
 801e5a0:	f7e1 ff96 	bl	80004d0 <__aeabi_dcmple>
 801e5a4:	2800      	cmp	r0, #0
 801e5a6:	d016      	beq.n	801e5d6 <_strtod_l+0xb5e>
 801e5a8:	0020      	movs	r0, r4
 801e5aa:	0029      	movs	r1, r5
 801e5ac:	f7e2 f84e 	bl	800064c <__aeabi_d2uiz>
 801e5b0:	2800      	cmp	r0, #0
 801e5b2:	d100      	bne.n	801e5b6 <_strtod_l+0xb3e>
 801e5b4:	3001      	adds	r0, #1
 801e5b6:	f7e4 ff31 	bl	800341c <__aeabi_ui2d>
 801e5ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5bc:	0004      	movs	r4, r0
 801e5be:	000d      	movs	r5, r1
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d122      	bne.n	801e60a <_strtod_l+0xb92>
 801e5c4:	2380      	movs	r3, #128	@ 0x80
 801e5c6:	061b      	lsls	r3, r3, #24
 801e5c8:	18cb      	adds	r3, r1, r3
 801e5ca:	9018      	str	r0, [sp, #96]	@ 0x60
 801e5cc:	9319      	str	r3, [sp, #100]	@ 0x64
 801e5ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e5d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e5d2:	9214      	str	r2, [sp, #80]	@ 0x50
 801e5d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e5d6:	22d6      	movs	r2, #214	@ 0xd6
 801e5d8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e5da:	04d2      	lsls	r2, r2, #19
 801e5dc:	189b      	adds	r3, r3, r2
 801e5de:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e5e0:	1a9b      	subs	r3, r3, r2
 801e5e2:	9315      	str	r3, [sp, #84]	@ 0x54
 801e5e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e5e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e5e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e5ea:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e5ec:	f002 ff24 	bl	8021438 <__ulp>
 801e5f0:	0002      	movs	r2, r0
 801e5f2:	000b      	movs	r3, r1
 801e5f4:	0030      	movs	r0, r6
 801e5f6:	0039      	movs	r1, r7
 801e5f8:	f7e4 f820 	bl	800263c <__aeabi_dmul>
 801e5fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e5fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e600:	f7e3 f874 	bl	80016ec <__aeabi_dadd>
 801e604:	0006      	movs	r6, r0
 801e606:	000f      	movs	r7, r1
 801e608:	e791      	b.n	801e52e <_strtod_l+0xab6>
 801e60a:	9418      	str	r4, [sp, #96]	@ 0x60
 801e60c:	9519      	str	r5, [sp, #100]	@ 0x64
 801e60e:	e7de      	b.n	801e5ce <_strtod_l+0xb56>
 801e610:	4b11      	ldr	r3, [pc, #68]	@ (801e658 <_strtod_l+0xbe0>)
 801e612:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e614:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e616:	f7e1 ff51 	bl	80004bc <__aeabi_dcmplt>
 801e61a:	e7b2      	b.n	801e582 <_strtod_l+0xb0a>
 801e61c:	fff00000 	.word	0xfff00000
 801e620:	000fffff 	.word	0x000fffff
 801e624:	3ff00000 	.word	0x3ff00000
 801e628:	3fe00000 	.word	0x3fe00000
 801e62c:	7ff00000 	.word	0x7ff00000
 801e630:	7fe00000 	.word	0x7fe00000
 801e634:	fcb00000 	.word	0xfcb00000
 801e638:	7c9fffff 	.word	0x7c9fffff
 801e63c:	7fefffff 	.word	0x7fefffff
 801e640:	bff00000 	.word	0xbff00000
 801e644:	94a03595 	.word	0x94a03595
 801e648:	3fdfffff 	.word	0x3fdfffff
 801e64c:	35afe535 	.word	0x35afe535
 801e650:	ffc00000 	.word	0xffc00000
 801e654:	41dfffff 	.word	0x41dfffff
 801e658:	3fcfffff 	.word	0x3fcfffff

0801e65c <strtod>:
 801e65c:	b510      	push	{r4, lr}
 801e65e:	4c04      	ldr	r4, [pc, #16]	@ (801e670 <strtod+0x14>)
 801e660:	000a      	movs	r2, r1
 801e662:	0001      	movs	r1, r0
 801e664:	4b03      	ldr	r3, [pc, #12]	@ (801e674 <strtod+0x18>)
 801e666:	6820      	ldr	r0, [r4, #0]
 801e668:	f7ff fa06 	bl	801da78 <_strtod_l>
 801e66c:	bd10      	pop	{r4, pc}
 801e66e:	46c0      	nop			@ (mov r8, r8)
 801e670:	200003c8 	.word	0x200003c8
 801e674:	2000025c 	.word	0x2000025c

0801e678 <_strtol_l.constprop.0>:
 801e678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e67a:	b085      	sub	sp, #20
 801e67c:	0017      	movs	r7, r2
 801e67e:	001e      	movs	r6, r3
 801e680:	9003      	str	r0, [sp, #12]
 801e682:	9101      	str	r1, [sp, #4]
 801e684:	2b24      	cmp	r3, #36	@ 0x24
 801e686:	d844      	bhi.n	801e712 <_strtol_l.constprop.0+0x9a>
 801e688:	000c      	movs	r4, r1
 801e68a:	2b01      	cmp	r3, #1
 801e68c:	d041      	beq.n	801e712 <_strtol_l.constprop.0+0x9a>
 801e68e:	4b3d      	ldr	r3, [pc, #244]	@ (801e784 <_strtol_l.constprop.0+0x10c>)
 801e690:	2208      	movs	r2, #8
 801e692:	469c      	mov	ip, r3
 801e694:	0023      	movs	r3, r4
 801e696:	4661      	mov	r1, ip
 801e698:	781d      	ldrb	r5, [r3, #0]
 801e69a:	3401      	adds	r4, #1
 801e69c:	5d48      	ldrb	r0, [r1, r5]
 801e69e:	0001      	movs	r1, r0
 801e6a0:	4011      	ands	r1, r2
 801e6a2:	4210      	tst	r0, r2
 801e6a4:	d1f6      	bne.n	801e694 <_strtol_l.constprop.0+0x1c>
 801e6a6:	2d2d      	cmp	r5, #45	@ 0x2d
 801e6a8:	d13a      	bne.n	801e720 <_strtol_l.constprop.0+0xa8>
 801e6aa:	7825      	ldrb	r5, [r4, #0]
 801e6ac:	1c9c      	adds	r4, r3, #2
 801e6ae:	2301      	movs	r3, #1
 801e6b0:	9300      	str	r3, [sp, #0]
 801e6b2:	2210      	movs	r2, #16
 801e6b4:	0033      	movs	r3, r6
 801e6b6:	4393      	bics	r3, r2
 801e6b8:	d109      	bne.n	801e6ce <_strtol_l.constprop.0+0x56>
 801e6ba:	2d30      	cmp	r5, #48	@ 0x30
 801e6bc:	d136      	bne.n	801e72c <_strtol_l.constprop.0+0xb4>
 801e6be:	2120      	movs	r1, #32
 801e6c0:	7823      	ldrb	r3, [r4, #0]
 801e6c2:	438b      	bics	r3, r1
 801e6c4:	2b58      	cmp	r3, #88	@ 0x58
 801e6c6:	d131      	bne.n	801e72c <_strtol_l.constprop.0+0xb4>
 801e6c8:	0016      	movs	r6, r2
 801e6ca:	7865      	ldrb	r5, [r4, #1]
 801e6cc:	3402      	adds	r4, #2
 801e6ce:	4a2e      	ldr	r2, [pc, #184]	@ (801e788 <_strtol_l.constprop.0+0x110>)
 801e6d0:	9b00      	ldr	r3, [sp, #0]
 801e6d2:	4694      	mov	ip, r2
 801e6d4:	4463      	add	r3, ip
 801e6d6:	0031      	movs	r1, r6
 801e6d8:	0018      	movs	r0, r3
 801e6da:	9302      	str	r3, [sp, #8]
 801e6dc:	f7e1 fde8 	bl	80002b0 <__aeabi_uidivmod>
 801e6e0:	2200      	movs	r2, #0
 801e6e2:	4684      	mov	ip, r0
 801e6e4:	0010      	movs	r0, r2
 801e6e6:	002b      	movs	r3, r5
 801e6e8:	3b30      	subs	r3, #48	@ 0x30
 801e6ea:	2b09      	cmp	r3, #9
 801e6ec:	d825      	bhi.n	801e73a <_strtol_l.constprop.0+0xc2>
 801e6ee:	001d      	movs	r5, r3
 801e6f0:	42ae      	cmp	r6, r5
 801e6f2:	dd31      	ble.n	801e758 <_strtol_l.constprop.0+0xe0>
 801e6f4:	1c53      	adds	r3, r2, #1
 801e6f6:	d009      	beq.n	801e70c <_strtol_l.constprop.0+0x94>
 801e6f8:	2201      	movs	r2, #1
 801e6fa:	4252      	negs	r2, r2
 801e6fc:	4584      	cmp	ip, r0
 801e6fe:	d305      	bcc.n	801e70c <_strtol_l.constprop.0+0x94>
 801e700:	d101      	bne.n	801e706 <_strtol_l.constprop.0+0x8e>
 801e702:	42a9      	cmp	r1, r5
 801e704:	db25      	blt.n	801e752 <_strtol_l.constprop.0+0xda>
 801e706:	2201      	movs	r2, #1
 801e708:	4370      	muls	r0, r6
 801e70a:	1828      	adds	r0, r5, r0
 801e70c:	7825      	ldrb	r5, [r4, #0]
 801e70e:	3401      	adds	r4, #1
 801e710:	e7e9      	b.n	801e6e6 <_strtol_l.constprop.0+0x6e>
 801e712:	f000 ffc5 	bl	801f6a0 <__errno>
 801e716:	2316      	movs	r3, #22
 801e718:	6003      	str	r3, [r0, #0]
 801e71a:	2000      	movs	r0, #0
 801e71c:	b005      	add	sp, #20
 801e71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e720:	9100      	str	r1, [sp, #0]
 801e722:	2d2b      	cmp	r5, #43	@ 0x2b
 801e724:	d1c5      	bne.n	801e6b2 <_strtol_l.constprop.0+0x3a>
 801e726:	7825      	ldrb	r5, [r4, #0]
 801e728:	1c9c      	adds	r4, r3, #2
 801e72a:	e7c2      	b.n	801e6b2 <_strtol_l.constprop.0+0x3a>
 801e72c:	2e00      	cmp	r6, #0
 801e72e:	d1ce      	bne.n	801e6ce <_strtol_l.constprop.0+0x56>
 801e730:	3608      	adds	r6, #8
 801e732:	2d30      	cmp	r5, #48	@ 0x30
 801e734:	d0cb      	beq.n	801e6ce <_strtol_l.constprop.0+0x56>
 801e736:	3602      	adds	r6, #2
 801e738:	e7c9      	b.n	801e6ce <_strtol_l.constprop.0+0x56>
 801e73a:	002b      	movs	r3, r5
 801e73c:	3b41      	subs	r3, #65	@ 0x41
 801e73e:	2b19      	cmp	r3, #25
 801e740:	d801      	bhi.n	801e746 <_strtol_l.constprop.0+0xce>
 801e742:	3d37      	subs	r5, #55	@ 0x37
 801e744:	e7d4      	b.n	801e6f0 <_strtol_l.constprop.0+0x78>
 801e746:	002b      	movs	r3, r5
 801e748:	3b61      	subs	r3, #97	@ 0x61
 801e74a:	2b19      	cmp	r3, #25
 801e74c:	d804      	bhi.n	801e758 <_strtol_l.constprop.0+0xe0>
 801e74e:	3d57      	subs	r5, #87	@ 0x57
 801e750:	e7ce      	b.n	801e6f0 <_strtol_l.constprop.0+0x78>
 801e752:	2201      	movs	r2, #1
 801e754:	4252      	negs	r2, r2
 801e756:	e7d9      	b.n	801e70c <_strtol_l.constprop.0+0x94>
 801e758:	1c53      	adds	r3, r2, #1
 801e75a:	d108      	bne.n	801e76e <_strtol_l.constprop.0+0xf6>
 801e75c:	2322      	movs	r3, #34	@ 0x22
 801e75e:	9a03      	ldr	r2, [sp, #12]
 801e760:	9802      	ldr	r0, [sp, #8]
 801e762:	6013      	str	r3, [r2, #0]
 801e764:	2f00      	cmp	r7, #0
 801e766:	d0d9      	beq.n	801e71c <_strtol_l.constprop.0+0xa4>
 801e768:	1e63      	subs	r3, r4, #1
 801e76a:	9301      	str	r3, [sp, #4]
 801e76c:	e007      	b.n	801e77e <_strtol_l.constprop.0+0x106>
 801e76e:	9b00      	ldr	r3, [sp, #0]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d000      	beq.n	801e776 <_strtol_l.constprop.0+0xfe>
 801e774:	4240      	negs	r0, r0
 801e776:	2f00      	cmp	r7, #0
 801e778:	d0d0      	beq.n	801e71c <_strtol_l.constprop.0+0xa4>
 801e77a:	2a00      	cmp	r2, #0
 801e77c:	d1f4      	bne.n	801e768 <_strtol_l.constprop.0+0xf0>
 801e77e:	9b01      	ldr	r3, [sp, #4]
 801e780:	603b      	str	r3, [r7, #0]
 801e782:	e7cb      	b.n	801e71c <_strtol_l.constprop.0+0xa4>
 801e784:	08024bb1 	.word	0x08024bb1
 801e788:	7fffffff 	.word	0x7fffffff

0801e78c <strtol>:
 801e78c:	b510      	push	{r4, lr}
 801e78e:	4c04      	ldr	r4, [pc, #16]	@ (801e7a0 <strtol+0x14>)
 801e790:	0013      	movs	r3, r2
 801e792:	000a      	movs	r2, r1
 801e794:	0001      	movs	r1, r0
 801e796:	6820      	ldr	r0, [r4, #0]
 801e798:	f7ff ff6e 	bl	801e678 <_strtol_l.constprop.0>
 801e79c:	bd10      	pop	{r4, pc}
 801e79e:	46c0      	nop			@ (mov r8, r8)
 801e7a0:	200003c8 	.word	0x200003c8

0801e7a4 <__cvt>:
 801e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7a6:	001f      	movs	r7, r3
 801e7a8:	2300      	movs	r3, #0
 801e7aa:	0016      	movs	r6, r2
 801e7ac:	b08b      	sub	sp, #44	@ 0x2c
 801e7ae:	429f      	cmp	r7, r3
 801e7b0:	da04      	bge.n	801e7bc <__cvt+0x18>
 801e7b2:	2180      	movs	r1, #128	@ 0x80
 801e7b4:	0609      	lsls	r1, r1, #24
 801e7b6:	187b      	adds	r3, r7, r1
 801e7b8:	001f      	movs	r7, r3
 801e7ba:	232d      	movs	r3, #45	@ 0x2d
 801e7bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e7be:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e7c0:	7013      	strb	r3, [r2, #0]
 801e7c2:	2320      	movs	r3, #32
 801e7c4:	2203      	movs	r2, #3
 801e7c6:	439d      	bics	r5, r3
 801e7c8:	2d46      	cmp	r5, #70	@ 0x46
 801e7ca:	d007      	beq.n	801e7dc <__cvt+0x38>
 801e7cc:	002b      	movs	r3, r5
 801e7ce:	3b45      	subs	r3, #69	@ 0x45
 801e7d0:	4259      	negs	r1, r3
 801e7d2:	414b      	adcs	r3, r1
 801e7d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e7d6:	3a01      	subs	r2, #1
 801e7d8:	18cb      	adds	r3, r1, r3
 801e7da:	9310      	str	r3, [sp, #64]	@ 0x40
 801e7dc:	ab09      	add	r3, sp, #36	@ 0x24
 801e7de:	9304      	str	r3, [sp, #16]
 801e7e0:	ab08      	add	r3, sp, #32
 801e7e2:	9303      	str	r3, [sp, #12]
 801e7e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7e6:	9200      	str	r2, [sp, #0]
 801e7e8:	9302      	str	r3, [sp, #8]
 801e7ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7ec:	0032      	movs	r2, r6
 801e7ee:	9301      	str	r3, [sp, #4]
 801e7f0:	003b      	movs	r3, r7
 801e7f2:	f001 f82b 	bl	801f84c <_dtoa_r>
 801e7f6:	0004      	movs	r4, r0
 801e7f8:	2d47      	cmp	r5, #71	@ 0x47
 801e7fa:	d11b      	bne.n	801e834 <__cvt+0x90>
 801e7fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e7fe:	07db      	lsls	r3, r3, #31
 801e800:	d511      	bpl.n	801e826 <__cvt+0x82>
 801e802:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e804:	18c3      	adds	r3, r0, r3
 801e806:	9307      	str	r3, [sp, #28]
 801e808:	2200      	movs	r2, #0
 801e80a:	2300      	movs	r3, #0
 801e80c:	0030      	movs	r0, r6
 801e80e:	0039      	movs	r1, r7
 801e810:	f7e1 fe4e 	bl	80004b0 <__aeabi_dcmpeq>
 801e814:	2800      	cmp	r0, #0
 801e816:	d001      	beq.n	801e81c <__cvt+0x78>
 801e818:	9b07      	ldr	r3, [sp, #28]
 801e81a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e81c:	2230      	movs	r2, #48	@ 0x30
 801e81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e820:	9907      	ldr	r1, [sp, #28]
 801e822:	428b      	cmp	r3, r1
 801e824:	d320      	bcc.n	801e868 <__cvt+0xc4>
 801e826:	0020      	movs	r0, r4
 801e828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e82a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e82c:	1b1b      	subs	r3, r3, r4
 801e82e:	6013      	str	r3, [r2, #0]
 801e830:	b00b      	add	sp, #44	@ 0x2c
 801e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e834:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e836:	18c3      	adds	r3, r0, r3
 801e838:	9307      	str	r3, [sp, #28]
 801e83a:	2d46      	cmp	r5, #70	@ 0x46
 801e83c:	d1e4      	bne.n	801e808 <__cvt+0x64>
 801e83e:	7803      	ldrb	r3, [r0, #0]
 801e840:	2b30      	cmp	r3, #48	@ 0x30
 801e842:	d10c      	bne.n	801e85e <__cvt+0xba>
 801e844:	2200      	movs	r2, #0
 801e846:	2300      	movs	r3, #0
 801e848:	0030      	movs	r0, r6
 801e84a:	0039      	movs	r1, r7
 801e84c:	f7e1 fe30 	bl	80004b0 <__aeabi_dcmpeq>
 801e850:	2800      	cmp	r0, #0
 801e852:	d104      	bne.n	801e85e <__cvt+0xba>
 801e854:	2301      	movs	r3, #1
 801e856:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e858:	1a9b      	subs	r3, r3, r2
 801e85a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e85c:	6013      	str	r3, [r2, #0]
 801e85e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e860:	9a07      	ldr	r2, [sp, #28]
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	18d3      	adds	r3, r2, r3
 801e866:	e7ce      	b.n	801e806 <__cvt+0x62>
 801e868:	1c59      	adds	r1, r3, #1
 801e86a:	9109      	str	r1, [sp, #36]	@ 0x24
 801e86c:	701a      	strb	r2, [r3, #0]
 801e86e:	e7d6      	b.n	801e81e <__cvt+0x7a>

0801e870 <__exponent>:
 801e870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e872:	232b      	movs	r3, #43	@ 0x2b
 801e874:	0005      	movs	r5, r0
 801e876:	000c      	movs	r4, r1
 801e878:	b085      	sub	sp, #20
 801e87a:	7002      	strb	r2, [r0, #0]
 801e87c:	2900      	cmp	r1, #0
 801e87e:	da01      	bge.n	801e884 <__exponent+0x14>
 801e880:	424c      	negs	r4, r1
 801e882:	3302      	adds	r3, #2
 801e884:	706b      	strb	r3, [r5, #1]
 801e886:	2c09      	cmp	r4, #9
 801e888:	dd2c      	ble.n	801e8e4 <__exponent+0x74>
 801e88a:	ab02      	add	r3, sp, #8
 801e88c:	1dde      	adds	r6, r3, #7
 801e88e:	0020      	movs	r0, r4
 801e890:	210a      	movs	r1, #10
 801e892:	f7e1 fdf7 	bl	8000484 <__aeabi_idivmod>
 801e896:	0037      	movs	r7, r6
 801e898:	3130      	adds	r1, #48	@ 0x30
 801e89a:	3e01      	subs	r6, #1
 801e89c:	0020      	movs	r0, r4
 801e89e:	7031      	strb	r1, [r6, #0]
 801e8a0:	210a      	movs	r1, #10
 801e8a2:	9401      	str	r4, [sp, #4]
 801e8a4:	f7e1 fd08 	bl	80002b8 <__divsi3>
 801e8a8:	9b01      	ldr	r3, [sp, #4]
 801e8aa:	0004      	movs	r4, r0
 801e8ac:	2b63      	cmp	r3, #99	@ 0x63
 801e8ae:	dcee      	bgt.n	801e88e <__exponent+0x1e>
 801e8b0:	1eba      	subs	r2, r7, #2
 801e8b2:	1ca8      	adds	r0, r5, #2
 801e8b4:	0001      	movs	r1, r0
 801e8b6:	0013      	movs	r3, r2
 801e8b8:	3430      	adds	r4, #48	@ 0x30
 801e8ba:	7014      	strb	r4, [r2, #0]
 801e8bc:	ac02      	add	r4, sp, #8
 801e8be:	3407      	adds	r4, #7
 801e8c0:	429c      	cmp	r4, r3
 801e8c2:	d80a      	bhi.n	801e8da <__exponent+0x6a>
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	42a2      	cmp	r2, r4
 801e8c8:	d803      	bhi.n	801e8d2 <__exponent+0x62>
 801e8ca:	3309      	adds	r3, #9
 801e8cc:	aa02      	add	r2, sp, #8
 801e8ce:	189b      	adds	r3, r3, r2
 801e8d0:	1bdb      	subs	r3, r3, r7
 801e8d2:	18c0      	adds	r0, r0, r3
 801e8d4:	1b40      	subs	r0, r0, r5
 801e8d6:	b005      	add	sp, #20
 801e8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8da:	781c      	ldrb	r4, [r3, #0]
 801e8dc:	3301      	adds	r3, #1
 801e8de:	700c      	strb	r4, [r1, #0]
 801e8e0:	3101      	adds	r1, #1
 801e8e2:	e7eb      	b.n	801e8bc <__exponent+0x4c>
 801e8e4:	2330      	movs	r3, #48	@ 0x30
 801e8e6:	18e4      	adds	r4, r4, r3
 801e8e8:	70ab      	strb	r3, [r5, #2]
 801e8ea:	1d28      	adds	r0, r5, #4
 801e8ec:	70ec      	strb	r4, [r5, #3]
 801e8ee:	e7f1      	b.n	801e8d4 <__exponent+0x64>

0801e8f0 <_printf_float>:
 801e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8f2:	b097      	sub	sp, #92	@ 0x5c
 801e8f4:	000d      	movs	r5, r1
 801e8f6:	920a      	str	r2, [sp, #40]	@ 0x28
 801e8f8:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e8fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e8fc:	9009      	str	r0, [sp, #36]	@ 0x24
 801e8fe:	f000 fe7d 	bl	801f5fc <_localeconv_r>
 801e902:	6803      	ldr	r3, [r0, #0]
 801e904:	0018      	movs	r0, r3
 801e906:	930d      	str	r3, [sp, #52]	@ 0x34
 801e908:	f7e1 fc30 	bl	800016c <strlen>
 801e90c:	2300      	movs	r3, #0
 801e90e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e910:	9314      	str	r3, [sp, #80]	@ 0x50
 801e912:	7e2b      	ldrb	r3, [r5, #24]
 801e914:	2207      	movs	r2, #7
 801e916:	930c      	str	r3, [sp, #48]	@ 0x30
 801e918:	682b      	ldr	r3, [r5, #0]
 801e91a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e91c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e91e:	6823      	ldr	r3, [r4, #0]
 801e920:	05c9      	lsls	r1, r1, #23
 801e922:	d545      	bpl.n	801e9b0 <_printf_float+0xc0>
 801e924:	189b      	adds	r3, r3, r2
 801e926:	4393      	bics	r3, r2
 801e928:	001a      	movs	r2, r3
 801e92a:	3208      	adds	r2, #8
 801e92c:	6022      	str	r2, [r4, #0]
 801e92e:	2201      	movs	r2, #1
 801e930:	681e      	ldr	r6, [r3, #0]
 801e932:	685f      	ldr	r7, [r3, #4]
 801e934:	007b      	lsls	r3, r7, #1
 801e936:	085b      	lsrs	r3, r3, #1
 801e938:	9311      	str	r3, [sp, #68]	@ 0x44
 801e93a:	9610      	str	r6, [sp, #64]	@ 0x40
 801e93c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801e93e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801e940:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e942:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e944:	4ba7      	ldr	r3, [pc, #668]	@ (801ebe4 <_printf_float+0x2f4>)
 801e946:	4252      	negs	r2, r2
 801e948:	f7e4 fcdc 	bl	8003304 <__aeabi_dcmpun>
 801e94c:	2800      	cmp	r0, #0
 801e94e:	d131      	bne.n	801e9b4 <_printf_float+0xc4>
 801e950:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e952:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e954:	2201      	movs	r2, #1
 801e956:	4ba3      	ldr	r3, [pc, #652]	@ (801ebe4 <_printf_float+0x2f4>)
 801e958:	4252      	negs	r2, r2
 801e95a:	f7e1 fdb9 	bl	80004d0 <__aeabi_dcmple>
 801e95e:	2800      	cmp	r0, #0
 801e960:	d128      	bne.n	801e9b4 <_printf_float+0xc4>
 801e962:	2200      	movs	r2, #0
 801e964:	2300      	movs	r3, #0
 801e966:	0030      	movs	r0, r6
 801e968:	0039      	movs	r1, r7
 801e96a:	f7e1 fda7 	bl	80004bc <__aeabi_dcmplt>
 801e96e:	2800      	cmp	r0, #0
 801e970:	d003      	beq.n	801e97a <_printf_float+0x8a>
 801e972:	002b      	movs	r3, r5
 801e974:	222d      	movs	r2, #45	@ 0x2d
 801e976:	3343      	adds	r3, #67	@ 0x43
 801e978:	701a      	strb	r2, [r3, #0]
 801e97a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e97c:	4f9a      	ldr	r7, [pc, #616]	@ (801ebe8 <_printf_float+0x2f8>)
 801e97e:	2b47      	cmp	r3, #71	@ 0x47
 801e980:	d900      	bls.n	801e984 <_printf_float+0x94>
 801e982:	4f9a      	ldr	r7, [pc, #616]	@ (801ebec <_printf_float+0x2fc>)
 801e984:	2303      	movs	r3, #3
 801e986:	2400      	movs	r4, #0
 801e988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e98a:	612b      	str	r3, [r5, #16]
 801e98c:	3301      	adds	r3, #1
 801e98e:	439a      	bics	r2, r3
 801e990:	602a      	str	r2, [r5, #0]
 801e992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e994:	0029      	movs	r1, r5
 801e996:	9300      	str	r3, [sp, #0]
 801e998:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e99a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e99c:	aa15      	add	r2, sp, #84	@ 0x54
 801e99e:	f000 f9e5 	bl	801ed6c <_printf_common>
 801e9a2:	3001      	adds	r0, #1
 801e9a4:	d000      	beq.n	801e9a8 <_printf_float+0xb8>
 801e9a6:	e09f      	b.n	801eae8 <_printf_float+0x1f8>
 801e9a8:	2001      	movs	r0, #1
 801e9aa:	4240      	negs	r0, r0
 801e9ac:	b017      	add	sp, #92	@ 0x5c
 801e9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9b0:	3307      	adds	r3, #7
 801e9b2:	e7b8      	b.n	801e926 <_printf_float+0x36>
 801e9b4:	0032      	movs	r2, r6
 801e9b6:	003b      	movs	r3, r7
 801e9b8:	0030      	movs	r0, r6
 801e9ba:	0039      	movs	r1, r7
 801e9bc:	f7e4 fca2 	bl	8003304 <__aeabi_dcmpun>
 801e9c0:	2800      	cmp	r0, #0
 801e9c2:	d00b      	beq.n	801e9dc <_printf_float+0xec>
 801e9c4:	2f00      	cmp	r7, #0
 801e9c6:	da03      	bge.n	801e9d0 <_printf_float+0xe0>
 801e9c8:	002b      	movs	r3, r5
 801e9ca:	222d      	movs	r2, #45	@ 0x2d
 801e9cc:	3343      	adds	r3, #67	@ 0x43
 801e9ce:	701a      	strb	r2, [r3, #0]
 801e9d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9d2:	4f87      	ldr	r7, [pc, #540]	@ (801ebf0 <_printf_float+0x300>)
 801e9d4:	2b47      	cmp	r3, #71	@ 0x47
 801e9d6:	d9d5      	bls.n	801e984 <_printf_float+0x94>
 801e9d8:	4f86      	ldr	r7, [pc, #536]	@ (801ebf4 <_printf_float+0x304>)
 801e9da:	e7d3      	b.n	801e984 <_printf_float+0x94>
 801e9dc:	2220      	movs	r2, #32
 801e9de:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e9e0:	686b      	ldr	r3, [r5, #4]
 801e9e2:	4394      	bics	r4, r2
 801e9e4:	1c5a      	adds	r2, r3, #1
 801e9e6:	d146      	bne.n	801ea76 <_printf_float+0x186>
 801e9e8:	3307      	adds	r3, #7
 801e9ea:	606b      	str	r3, [r5, #4]
 801e9ec:	2380      	movs	r3, #128	@ 0x80
 801e9ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e9f0:	00db      	lsls	r3, r3, #3
 801e9f2:	4313      	orrs	r3, r2
 801e9f4:	2200      	movs	r2, #0
 801e9f6:	602b      	str	r3, [r5, #0]
 801e9f8:	9206      	str	r2, [sp, #24]
 801e9fa:	aa14      	add	r2, sp, #80	@ 0x50
 801e9fc:	9205      	str	r2, [sp, #20]
 801e9fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea00:	a90a      	add	r1, sp, #40	@ 0x28
 801ea02:	9204      	str	r2, [sp, #16]
 801ea04:	aa13      	add	r2, sp, #76	@ 0x4c
 801ea06:	9203      	str	r2, [sp, #12]
 801ea08:	2223      	movs	r2, #35	@ 0x23
 801ea0a:	1852      	adds	r2, r2, r1
 801ea0c:	9202      	str	r2, [sp, #8]
 801ea0e:	9301      	str	r3, [sp, #4]
 801ea10:	686b      	ldr	r3, [r5, #4]
 801ea12:	0032      	movs	r2, r6
 801ea14:	9300      	str	r3, [sp, #0]
 801ea16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea18:	003b      	movs	r3, r7
 801ea1a:	f7ff fec3 	bl	801e7a4 <__cvt>
 801ea1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ea20:	0007      	movs	r7, r0
 801ea22:	2c47      	cmp	r4, #71	@ 0x47
 801ea24:	d12d      	bne.n	801ea82 <_printf_float+0x192>
 801ea26:	1cd3      	adds	r3, r2, #3
 801ea28:	db02      	blt.n	801ea30 <_printf_float+0x140>
 801ea2a:	686b      	ldr	r3, [r5, #4]
 801ea2c:	429a      	cmp	r2, r3
 801ea2e:	dd48      	ble.n	801eac2 <_printf_float+0x1d2>
 801ea30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ea34:	3b02      	subs	r3, #2
 801ea36:	b2db      	uxtb	r3, r3
 801ea38:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea3a:	0028      	movs	r0, r5
 801ea3c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ea3e:	3901      	subs	r1, #1
 801ea40:	3050      	adds	r0, #80	@ 0x50
 801ea42:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ea44:	f7ff ff14 	bl	801e870 <__exponent>
 801ea48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ea4a:	0004      	movs	r4, r0
 801ea4c:	1813      	adds	r3, r2, r0
 801ea4e:	612b      	str	r3, [r5, #16]
 801ea50:	2a01      	cmp	r2, #1
 801ea52:	dc02      	bgt.n	801ea5a <_printf_float+0x16a>
 801ea54:	682a      	ldr	r2, [r5, #0]
 801ea56:	07d2      	lsls	r2, r2, #31
 801ea58:	d501      	bpl.n	801ea5e <_printf_float+0x16e>
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	612b      	str	r3, [r5, #16]
 801ea5e:	2323      	movs	r3, #35	@ 0x23
 801ea60:	aa0a      	add	r2, sp, #40	@ 0x28
 801ea62:	189b      	adds	r3, r3, r2
 801ea64:	781b      	ldrb	r3, [r3, #0]
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d100      	bne.n	801ea6c <_printf_float+0x17c>
 801ea6a:	e792      	b.n	801e992 <_printf_float+0xa2>
 801ea6c:	002b      	movs	r3, r5
 801ea6e:	222d      	movs	r2, #45	@ 0x2d
 801ea70:	3343      	adds	r3, #67	@ 0x43
 801ea72:	701a      	strb	r2, [r3, #0]
 801ea74:	e78d      	b.n	801e992 <_printf_float+0xa2>
 801ea76:	2c47      	cmp	r4, #71	@ 0x47
 801ea78:	d1b8      	bne.n	801e9ec <_printf_float+0xfc>
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d1b6      	bne.n	801e9ec <_printf_float+0xfc>
 801ea7e:	3301      	adds	r3, #1
 801ea80:	e7b3      	b.n	801e9ea <_printf_float+0xfa>
 801ea82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea84:	0011      	movs	r1, r2
 801ea86:	2b65      	cmp	r3, #101	@ 0x65
 801ea88:	d9d7      	bls.n	801ea3a <_printf_float+0x14a>
 801ea8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea8c:	2b66      	cmp	r3, #102	@ 0x66
 801ea8e:	d11a      	bne.n	801eac6 <_printf_float+0x1d6>
 801ea90:	686b      	ldr	r3, [r5, #4]
 801ea92:	2a00      	cmp	r2, #0
 801ea94:	dd09      	ble.n	801eaaa <_printf_float+0x1ba>
 801ea96:	612a      	str	r2, [r5, #16]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d102      	bne.n	801eaa2 <_printf_float+0x1b2>
 801ea9c:	6829      	ldr	r1, [r5, #0]
 801ea9e:	07c9      	lsls	r1, r1, #31
 801eaa0:	d50b      	bpl.n	801eaba <_printf_float+0x1ca>
 801eaa2:	3301      	adds	r3, #1
 801eaa4:	189b      	adds	r3, r3, r2
 801eaa6:	612b      	str	r3, [r5, #16]
 801eaa8:	e007      	b.n	801eaba <_printf_float+0x1ca>
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d103      	bne.n	801eab6 <_printf_float+0x1c6>
 801eaae:	2201      	movs	r2, #1
 801eab0:	6829      	ldr	r1, [r5, #0]
 801eab2:	4211      	tst	r1, r2
 801eab4:	d000      	beq.n	801eab8 <_printf_float+0x1c8>
 801eab6:	1c9a      	adds	r2, r3, #2
 801eab8:	612a      	str	r2, [r5, #16]
 801eaba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eabc:	2400      	movs	r4, #0
 801eabe:	65ab      	str	r3, [r5, #88]	@ 0x58
 801eac0:	e7cd      	b.n	801ea5e <_printf_float+0x16e>
 801eac2:	2367      	movs	r3, #103	@ 0x67
 801eac4:	930c      	str	r3, [sp, #48]	@ 0x30
 801eac6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eac8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eaca:	4299      	cmp	r1, r3
 801eacc:	db06      	blt.n	801eadc <_printf_float+0x1ec>
 801eace:	682b      	ldr	r3, [r5, #0]
 801ead0:	6129      	str	r1, [r5, #16]
 801ead2:	07db      	lsls	r3, r3, #31
 801ead4:	d5f1      	bpl.n	801eaba <_printf_float+0x1ca>
 801ead6:	3101      	adds	r1, #1
 801ead8:	6129      	str	r1, [r5, #16]
 801eada:	e7ee      	b.n	801eaba <_printf_float+0x1ca>
 801eadc:	2201      	movs	r2, #1
 801eade:	2900      	cmp	r1, #0
 801eae0:	dce0      	bgt.n	801eaa4 <_printf_float+0x1b4>
 801eae2:	1892      	adds	r2, r2, r2
 801eae4:	1a52      	subs	r2, r2, r1
 801eae6:	e7dd      	b.n	801eaa4 <_printf_float+0x1b4>
 801eae8:	682a      	ldr	r2, [r5, #0]
 801eaea:	0553      	lsls	r3, r2, #21
 801eaec:	d408      	bmi.n	801eb00 <_printf_float+0x210>
 801eaee:	692b      	ldr	r3, [r5, #16]
 801eaf0:	003a      	movs	r2, r7
 801eaf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eaf4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eaf6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eaf8:	47a0      	blx	r4
 801eafa:	3001      	adds	r0, #1
 801eafc:	d129      	bne.n	801eb52 <_printf_float+0x262>
 801eafe:	e753      	b.n	801e9a8 <_printf_float+0xb8>
 801eb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb02:	2b65      	cmp	r3, #101	@ 0x65
 801eb04:	d800      	bhi.n	801eb08 <_printf_float+0x218>
 801eb06:	e0da      	b.n	801ecbe <_printf_float+0x3ce>
 801eb08:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801eb0a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801eb0c:	2200      	movs	r2, #0
 801eb0e:	2300      	movs	r3, #0
 801eb10:	f7e1 fcce 	bl	80004b0 <__aeabi_dcmpeq>
 801eb14:	2800      	cmp	r0, #0
 801eb16:	d033      	beq.n	801eb80 <_printf_float+0x290>
 801eb18:	2301      	movs	r3, #1
 801eb1a:	4a37      	ldr	r2, [pc, #220]	@ (801ebf8 <_printf_float+0x308>)
 801eb1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eb22:	47a0      	blx	r4
 801eb24:	3001      	adds	r0, #1
 801eb26:	d100      	bne.n	801eb2a <_printf_float+0x23a>
 801eb28:	e73e      	b.n	801e9a8 <_printf_float+0xb8>
 801eb2a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801eb2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb2e:	42b3      	cmp	r3, r6
 801eb30:	db02      	blt.n	801eb38 <_printf_float+0x248>
 801eb32:	682b      	ldr	r3, [r5, #0]
 801eb34:	07db      	lsls	r3, r3, #31
 801eb36:	d50c      	bpl.n	801eb52 <_printf_float+0x262>
 801eb38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eb3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eb3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb42:	47a0      	blx	r4
 801eb44:	2400      	movs	r4, #0
 801eb46:	3001      	adds	r0, #1
 801eb48:	d100      	bne.n	801eb4c <_printf_float+0x25c>
 801eb4a:	e72d      	b.n	801e9a8 <_printf_float+0xb8>
 801eb4c:	1e73      	subs	r3, r6, #1
 801eb4e:	42a3      	cmp	r3, r4
 801eb50:	dc0a      	bgt.n	801eb68 <_printf_float+0x278>
 801eb52:	682b      	ldr	r3, [r5, #0]
 801eb54:	079b      	lsls	r3, r3, #30
 801eb56:	d500      	bpl.n	801eb5a <_printf_float+0x26a>
 801eb58:	e105      	b.n	801ed66 <_printf_float+0x476>
 801eb5a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eb5c:	68e8      	ldr	r0, [r5, #12]
 801eb5e:	4298      	cmp	r0, r3
 801eb60:	db00      	blt.n	801eb64 <_printf_float+0x274>
 801eb62:	e723      	b.n	801e9ac <_printf_float+0xbc>
 801eb64:	0018      	movs	r0, r3
 801eb66:	e721      	b.n	801e9ac <_printf_float+0xbc>
 801eb68:	002a      	movs	r2, r5
 801eb6a:	2301      	movs	r3, #1
 801eb6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eb72:	321a      	adds	r2, #26
 801eb74:	47b8      	blx	r7
 801eb76:	3001      	adds	r0, #1
 801eb78:	d100      	bne.n	801eb7c <_printf_float+0x28c>
 801eb7a:	e715      	b.n	801e9a8 <_printf_float+0xb8>
 801eb7c:	3401      	adds	r4, #1
 801eb7e:	e7e5      	b.n	801eb4c <_printf_float+0x25c>
 801eb80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb82:	2b00      	cmp	r3, #0
 801eb84:	dc3a      	bgt.n	801ebfc <_printf_float+0x30c>
 801eb86:	2301      	movs	r3, #1
 801eb88:	4a1b      	ldr	r2, [pc, #108]	@ (801ebf8 <_printf_float+0x308>)
 801eb8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb8e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eb90:	47a0      	blx	r4
 801eb92:	3001      	adds	r0, #1
 801eb94:	d100      	bne.n	801eb98 <_printf_float+0x2a8>
 801eb96:	e707      	b.n	801e9a8 <_printf_float+0xb8>
 801eb98:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801eb9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb9c:	4333      	orrs	r3, r6
 801eb9e:	d102      	bne.n	801eba6 <_printf_float+0x2b6>
 801eba0:	682b      	ldr	r3, [r5, #0]
 801eba2:	07db      	lsls	r3, r3, #31
 801eba4:	d5d5      	bpl.n	801eb52 <_printf_float+0x262>
 801eba6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eba8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ebaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ebb0:	47a0      	blx	r4
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	3001      	adds	r0, #1
 801ebb6:	d100      	bne.n	801ebba <_printf_float+0x2ca>
 801ebb8:	e6f6      	b.n	801e9a8 <_printf_float+0xb8>
 801ebba:	930c      	str	r3, [sp, #48]	@ 0x30
 801ebbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ebbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ebc0:	425b      	negs	r3, r3
 801ebc2:	4293      	cmp	r3, r2
 801ebc4:	dc01      	bgt.n	801ebca <_printf_float+0x2da>
 801ebc6:	0033      	movs	r3, r6
 801ebc8:	e792      	b.n	801eaf0 <_printf_float+0x200>
 801ebca:	002a      	movs	r2, r5
 801ebcc:	2301      	movs	r3, #1
 801ebce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebd0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebd2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ebd4:	321a      	adds	r2, #26
 801ebd6:	47a0      	blx	r4
 801ebd8:	3001      	adds	r0, #1
 801ebda:	d100      	bne.n	801ebde <_printf_float+0x2ee>
 801ebdc:	e6e4      	b.n	801e9a8 <_printf_float+0xb8>
 801ebde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ebe0:	3301      	adds	r3, #1
 801ebe2:	e7ea      	b.n	801ebba <_printf_float+0x2ca>
 801ebe4:	7fefffff 	.word	0x7fefffff
 801ebe8:	08024cb1 	.word	0x08024cb1
 801ebec:	08024cb5 	.word	0x08024cb5
 801ebf0:	08024cb9 	.word	0x08024cb9
 801ebf4:	08024cbd 	.word	0x08024cbd
 801ebf8:	08024cc1 	.word	0x08024cc1
 801ebfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ebfe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ec00:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec02:	429e      	cmp	r6, r3
 801ec04:	dd00      	ble.n	801ec08 <_printf_float+0x318>
 801ec06:	001e      	movs	r6, r3
 801ec08:	2e00      	cmp	r6, #0
 801ec0a:	dc31      	bgt.n	801ec70 <_printf_float+0x380>
 801ec0c:	43f3      	mvns	r3, r6
 801ec0e:	2400      	movs	r4, #0
 801ec10:	17db      	asrs	r3, r3, #31
 801ec12:	4033      	ands	r3, r6
 801ec14:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec16:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ec18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ec1a:	1af3      	subs	r3, r6, r3
 801ec1c:	42a3      	cmp	r3, r4
 801ec1e:	dc30      	bgt.n	801ec82 <_printf_float+0x392>
 801ec20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ec22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec24:	429a      	cmp	r2, r3
 801ec26:	dc38      	bgt.n	801ec9a <_printf_float+0x3aa>
 801ec28:	682b      	ldr	r3, [r5, #0]
 801ec2a:	07db      	lsls	r3, r3, #31
 801ec2c:	d435      	bmi.n	801ec9a <_printf_float+0x3aa>
 801ec2e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ec30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec32:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec34:	1b9b      	subs	r3, r3, r6
 801ec36:	1b14      	subs	r4, r2, r4
 801ec38:	429c      	cmp	r4, r3
 801ec3a:	dd00      	ble.n	801ec3e <_printf_float+0x34e>
 801ec3c:	001c      	movs	r4, r3
 801ec3e:	2c00      	cmp	r4, #0
 801ec40:	dc34      	bgt.n	801ecac <_printf_float+0x3bc>
 801ec42:	43e3      	mvns	r3, r4
 801ec44:	2600      	movs	r6, #0
 801ec46:	17db      	asrs	r3, r3, #31
 801ec48:	401c      	ands	r4, r3
 801ec4a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ec4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ec4e:	1ad3      	subs	r3, r2, r3
 801ec50:	1b1b      	subs	r3, r3, r4
 801ec52:	42b3      	cmp	r3, r6
 801ec54:	dc00      	bgt.n	801ec58 <_printf_float+0x368>
 801ec56:	e77c      	b.n	801eb52 <_printf_float+0x262>
 801ec58:	002a      	movs	r2, r5
 801ec5a:	2301      	movs	r3, #1
 801ec5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ec62:	321a      	adds	r2, #26
 801ec64:	47b8      	blx	r7
 801ec66:	3001      	adds	r0, #1
 801ec68:	d100      	bne.n	801ec6c <_printf_float+0x37c>
 801ec6a:	e69d      	b.n	801e9a8 <_printf_float+0xb8>
 801ec6c:	3601      	adds	r6, #1
 801ec6e:	e7ec      	b.n	801ec4a <_printf_float+0x35a>
 801ec70:	0033      	movs	r3, r6
 801ec72:	003a      	movs	r2, r7
 801ec74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ec7a:	47a0      	blx	r4
 801ec7c:	3001      	adds	r0, #1
 801ec7e:	d1c5      	bne.n	801ec0c <_printf_float+0x31c>
 801ec80:	e692      	b.n	801e9a8 <_printf_float+0xb8>
 801ec82:	002a      	movs	r2, r5
 801ec84:	2301      	movs	r3, #1
 801ec86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec8a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ec8c:	321a      	adds	r2, #26
 801ec8e:	47b0      	blx	r6
 801ec90:	3001      	adds	r0, #1
 801ec92:	d100      	bne.n	801ec96 <_printf_float+0x3a6>
 801ec94:	e688      	b.n	801e9a8 <_printf_float+0xb8>
 801ec96:	3401      	adds	r4, #1
 801ec98:	e7bd      	b.n	801ec16 <_printf_float+0x326>
 801ec9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eca0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eca2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eca4:	47a0      	blx	r4
 801eca6:	3001      	adds	r0, #1
 801eca8:	d1c1      	bne.n	801ec2e <_printf_float+0x33e>
 801ecaa:	e67d      	b.n	801e9a8 <_printf_float+0xb8>
 801ecac:	19ba      	adds	r2, r7, r6
 801ecae:	0023      	movs	r3, r4
 801ecb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ecb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ecb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ecb6:	47b0      	blx	r6
 801ecb8:	3001      	adds	r0, #1
 801ecba:	d1c2      	bne.n	801ec42 <_printf_float+0x352>
 801ecbc:	e674      	b.n	801e9a8 <_printf_float+0xb8>
 801ecbe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ecc0:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecc2:	2b01      	cmp	r3, #1
 801ecc4:	dc02      	bgt.n	801eccc <_printf_float+0x3dc>
 801ecc6:	2301      	movs	r3, #1
 801ecc8:	421a      	tst	r2, r3
 801ecca:	d039      	beq.n	801ed40 <_printf_float+0x450>
 801eccc:	2301      	movs	r3, #1
 801ecce:	003a      	movs	r2, r7
 801ecd0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ecd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ecd4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ecd6:	47b0      	blx	r6
 801ecd8:	3001      	adds	r0, #1
 801ecda:	d100      	bne.n	801ecde <_printf_float+0x3ee>
 801ecdc:	e664      	b.n	801e9a8 <_printf_float+0xb8>
 801ecde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ece0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ece2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ece4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ece6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ece8:	47b0      	blx	r6
 801ecea:	3001      	adds	r0, #1
 801ecec:	d100      	bne.n	801ecf0 <_printf_float+0x400>
 801ecee:	e65b      	b.n	801e9a8 <_printf_float+0xb8>
 801ecf0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ecf2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ecf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecf6:	2200      	movs	r2, #0
 801ecf8:	3b01      	subs	r3, #1
 801ecfa:	930c      	str	r3, [sp, #48]	@ 0x30
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	f7e1 fbd7 	bl	80004b0 <__aeabi_dcmpeq>
 801ed02:	2800      	cmp	r0, #0
 801ed04:	d11a      	bne.n	801ed3c <_printf_float+0x44c>
 801ed06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed08:	1c7a      	adds	r2, r7, #1
 801ed0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed0e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ed10:	47b0      	blx	r6
 801ed12:	3001      	adds	r0, #1
 801ed14:	d10e      	bne.n	801ed34 <_printf_float+0x444>
 801ed16:	e647      	b.n	801e9a8 <_printf_float+0xb8>
 801ed18:	002a      	movs	r2, r5
 801ed1a:	2301      	movs	r3, #1
 801ed1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed20:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ed22:	321a      	adds	r2, #26
 801ed24:	47b8      	blx	r7
 801ed26:	3001      	adds	r0, #1
 801ed28:	d100      	bne.n	801ed2c <_printf_float+0x43c>
 801ed2a:	e63d      	b.n	801e9a8 <_printf_float+0xb8>
 801ed2c:	3601      	adds	r6, #1
 801ed2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed30:	429e      	cmp	r6, r3
 801ed32:	dbf1      	blt.n	801ed18 <_printf_float+0x428>
 801ed34:	002a      	movs	r2, r5
 801ed36:	0023      	movs	r3, r4
 801ed38:	3250      	adds	r2, #80	@ 0x50
 801ed3a:	e6da      	b.n	801eaf2 <_printf_float+0x202>
 801ed3c:	2600      	movs	r6, #0
 801ed3e:	e7f6      	b.n	801ed2e <_printf_float+0x43e>
 801ed40:	003a      	movs	r2, r7
 801ed42:	e7e2      	b.n	801ed0a <_printf_float+0x41a>
 801ed44:	002a      	movs	r2, r5
 801ed46:	2301      	movs	r3, #1
 801ed48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ed4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ed4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ed4e:	3219      	adds	r2, #25
 801ed50:	47b0      	blx	r6
 801ed52:	3001      	adds	r0, #1
 801ed54:	d100      	bne.n	801ed58 <_printf_float+0x468>
 801ed56:	e627      	b.n	801e9a8 <_printf_float+0xb8>
 801ed58:	3401      	adds	r4, #1
 801ed5a:	68eb      	ldr	r3, [r5, #12]
 801ed5c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ed5e:	1a9b      	subs	r3, r3, r2
 801ed60:	42a3      	cmp	r3, r4
 801ed62:	dcef      	bgt.n	801ed44 <_printf_float+0x454>
 801ed64:	e6f9      	b.n	801eb5a <_printf_float+0x26a>
 801ed66:	2400      	movs	r4, #0
 801ed68:	e7f7      	b.n	801ed5a <_printf_float+0x46a>
 801ed6a:	46c0      	nop			@ (mov r8, r8)

0801ed6c <_printf_common>:
 801ed6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ed6e:	0016      	movs	r6, r2
 801ed70:	9301      	str	r3, [sp, #4]
 801ed72:	688a      	ldr	r2, [r1, #8]
 801ed74:	690b      	ldr	r3, [r1, #16]
 801ed76:	000c      	movs	r4, r1
 801ed78:	9000      	str	r0, [sp, #0]
 801ed7a:	4293      	cmp	r3, r2
 801ed7c:	da00      	bge.n	801ed80 <_printf_common+0x14>
 801ed7e:	0013      	movs	r3, r2
 801ed80:	0022      	movs	r2, r4
 801ed82:	6033      	str	r3, [r6, #0]
 801ed84:	3243      	adds	r2, #67	@ 0x43
 801ed86:	7812      	ldrb	r2, [r2, #0]
 801ed88:	2a00      	cmp	r2, #0
 801ed8a:	d001      	beq.n	801ed90 <_printf_common+0x24>
 801ed8c:	3301      	adds	r3, #1
 801ed8e:	6033      	str	r3, [r6, #0]
 801ed90:	6823      	ldr	r3, [r4, #0]
 801ed92:	069b      	lsls	r3, r3, #26
 801ed94:	d502      	bpl.n	801ed9c <_printf_common+0x30>
 801ed96:	6833      	ldr	r3, [r6, #0]
 801ed98:	3302      	adds	r3, #2
 801ed9a:	6033      	str	r3, [r6, #0]
 801ed9c:	6822      	ldr	r2, [r4, #0]
 801ed9e:	2306      	movs	r3, #6
 801eda0:	0015      	movs	r5, r2
 801eda2:	401d      	ands	r5, r3
 801eda4:	421a      	tst	r2, r3
 801eda6:	d027      	beq.n	801edf8 <_printf_common+0x8c>
 801eda8:	0023      	movs	r3, r4
 801edaa:	3343      	adds	r3, #67	@ 0x43
 801edac:	781b      	ldrb	r3, [r3, #0]
 801edae:	1e5a      	subs	r2, r3, #1
 801edb0:	4193      	sbcs	r3, r2
 801edb2:	6822      	ldr	r2, [r4, #0]
 801edb4:	0692      	lsls	r2, r2, #26
 801edb6:	d430      	bmi.n	801ee1a <_printf_common+0xae>
 801edb8:	0022      	movs	r2, r4
 801edba:	9901      	ldr	r1, [sp, #4]
 801edbc:	9800      	ldr	r0, [sp, #0]
 801edbe:	9d08      	ldr	r5, [sp, #32]
 801edc0:	3243      	adds	r2, #67	@ 0x43
 801edc2:	47a8      	blx	r5
 801edc4:	3001      	adds	r0, #1
 801edc6:	d025      	beq.n	801ee14 <_printf_common+0xa8>
 801edc8:	2206      	movs	r2, #6
 801edca:	6823      	ldr	r3, [r4, #0]
 801edcc:	2500      	movs	r5, #0
 801edce:	4013      	ands	r3, r2
 801edd0:	2b04      	cmp	r3, #4
 801edd2:	d105      	bne.n	801ede0 <_printf_common+0x74>
 801edd4:	6833      	ldr	r3, [r6, #0]
 801edd6:	68e5      	ldr	r5, [r4, #12]
 801edd8:	1aed      	subs	r5, r5, r3
 801edda:	43eb      	mvns	r3, r5
 801eddc:	17db      	asrs	r3, r3, #31
 801edde:	401d      	ands	r5, r3
 801ede0:	68a3      	ldr	r3, [r4, #8]
 801ede2:	6922      	ldr	r2, [r4, #16]
 801ede4:	4293      	cmp	r3, r2
 801ede6:	dd01      	ble.n	801edec <_printf_common+0x80>
 801ede8:	1a9b      	subs	r3, r3, r2
 801edea:	18ed      	adds	r5, r5, r3
 801edec:	2600      	movs	r6, #0
 801edee:	42b5      	cmp	r5, r6
 801edf0:	d120      	bne.n	801ee34 <_printf_common+0xc8>
 801edf2:	2000      	movs	r0, #0
 801edf4:	e010      	b.n	801ee18 <_printf_common+0xac>
 801edf6:	3501      	adds	r5, #1
 801edf8:	68e3      	ldr	r3, [r4, #12]
 801edfa:	6832      	ldr	r2, [r6, #0]
 801edfc:	1a9b      	subs	r3, r3, r2
 801edfe:	42ab      	cmp	r3, r5
 801ee00:	ddd2      	ble.n	801eda8 <_printf_common+0x3c>
 801ee02:	0022      	movs	r2, r4
 801ee04:	2301      	movs	r3, #1
 801ee06:	9901      	ldr	r1, [sp, #4]
 801ee08:	9800      	ldr	r0, [sp, #0]
 801ee0a:	9f08      	ldr	r7, [sp, #32]
 801ee0c:	3219      	adds	r2, #25
 801ee0e:	47b8      	blx	r7
 801ee10:	3001      	adds	r0, #1
 801ee12:	d1f0      	bne.n	801edf6 <_printf_common+0x8a>
 801ee14:	2001      	movs	r0, #1
 801ee16:	4240      	negs	r0, r0
 801ee18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ee1a:	2030      	movs	r0, #48	@ 0x30
 801ee1c:	18e1      	adds	r1, r4, r3
 801ee1e:	3143      	adds	r1, #67	@ 0x43
 801ee20:	7008      	strb	r0, [r1, #0]
 801ee22:	0021      	movs	r1, r4
 801ee24:	1c5a      	adds	r2, r3, #1
 801ee26:	3145      	adds	r1, #69	@ 0x45
 801ee28:	7809      	ldrb	r1, [r1, #0]
 801ee2a:	18a2      	adds	r2, r4, r2
 801ee2c:	3243      	adds	r2, #67	@ 0x43
 801ee2e:	3302      	adds	r3, #2
 801ee30:	7011      	strb	r1, [r2, #0]
 801ee32:	e7c1      	b.n	801edb8 <_printf_common+0x4c>
 801ee34:	0022      	movs	r2, r4
 801ee36:	2301      	movs	r3, #1
 801ee38:	9901      	ldr	r1, [sp, #4]
 801ee3a:	9800      	ldr	r0, [sp, #0]
 801ee3c:	9f08      	ldr	r7, [sp, #32]
 801ee3e:	321a      	adds	r2, #26
 801ee40:	47b8      	blx	r7
 801ee42:	3001      	adds	r0, #1
 801ee44:	d0e6      	beq.n	801ee14 <_printf_common+0xa8>
 801ee46:	3601      	adds	r6, #1
 801ee48:	e7d1      	b.n	801edee <_printf_common+0x82>
	...

0801ee4c <_printf_i>:
 801ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee4e:	b08b      	sub	sp, #44	@ 0x2c
 801ee50:	9206      	str	r2, [sp, #24]
 801ee52:	000a      	movs	r2, r1
 801ee54:	3243      	adds	r2, #67	@ 0x43
 801ee56:	9307      	str	r3, [sp, #28]
 801ee58:	9005      	str	r0, [sp, #20]
 801ee5a:	9203      	str	r2, [sp, #12]
 801ee5c:	7e0a      	ldrb	r2, [r1, #24]
 801ee5e:	000c      	movs	r4, r1
 801ee60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ee62:	2a78      	cmp	r2, #120	@ 0x78
 801ee64:	d809      	bhi.n	801ee7a <_printf_i+0x2e>
 801ee66:	2a62      	cmp	r2, #98	@ 0x62
 801ee68:	d80b      	bhi.n	801ee82 <_printf_i+0x36>
 801ee6a:	2a00      	cmp	r2, #0
 801ee6c:	d100      	bne.n	801ee70 <_printf_i+0x24>
 801ee6e:	e0bc      	b.n	801efea <_printf_i+0x19e>
 801ee70:	497b      	ldr	r1, [pc, #492]	@ (801f060 <_printf_i+0x214>)
 801ee72:	9104      	str	r1, [sp, #16]
 801ee74:	2a58      	cmp	r2, #88	@ 0x58
 801ee76:	d100      	bne.n	801ee7a <_printf_i+0x2e>
 801ee78:	e090      	b.n	801ef9c <_printf_i+0x150>
 801ee7a:	0025      	movs	r5, r4
 801ee7c:	3542      	adds	r5, #66	@ 0x42
 801ee7e:	702a      	strb	r2, [r5, #0]
 801ee80:	e022      	b.n	801eec8 <_printf_i+0x7c>
 801ee82:	0010      	movs	r0, r2
 801ee84:	3863      	subs	r0, #99	@ 0x63
 801ee86:	2815      	cmp	r0, #21
 801ee88:	d8f7      	bhi.n	801ee7a <_printf_i+0x2e>
 801ee8a:	f7e1 f981 	bl	8000190 <__gnu_thumb1_case_shi>
 801ee8e:	0016      	.short	0x0016
 801ee90:	fff6001f 	.word	0xfff6001f
 801ee94:	fff6fff6 	.word	0xfff6fff6
 801ee98:	001ffff6 	.word	0x001ffff6
 801ee9c:	fff6fff6 	.word	0xfff6fff6
 801eea0:	fff6fff6 	.word	0xfff6fff6
 801eea4:	003600a1 	.word	0x003600a1
 801eea8:	fff60080 	.word	0xfff60080
 801eeac:	00b2fff6 	.word	0x00b2fff6
 801eeb0:	0036fff6 	.word	0x0036fff6
 801eeb4:	fff6fff6 	.word	0xfff6fff6
 801eeb8:	0084      	.short	0x0084
 801eeba:	0025      	movs	r5, r4
 801eebc:	681a      	ldr	r2, [r3, #0]
 801eebe:	3542      	adds	r5, #66	@ 0x42
 801eec0:	1d11      	adds	r1, r2, #4
 801eec2:	6019      	str	r1, [r3, #0]
 801eec4:	6813      	ldr	r3, [r2, #0]
 801eec6:	702b      	strb	r3, [r5, #0]
 801eec8:	2301      	movs	r3, #1
 801eeca:	e0a0      	b.n	801f00e <_printf_i+0x1c2>
 801eecc:	6818      	ldr	r0, [r3, #0]
 801eece:	6809      	ldr	r1, [r1, #0]
 801eed0:	1d02      	adds	r2, r0, #4
 801eed2:	060d      	lsls	r5, r1, #24
 801eed4:	d50b      	bpl.n	801eeee <_printf_i+0xa2>
 801eed6:	6806      	ldr	r6, [r0, #0]
 801eed8:	601a      	str	r2, [r3, #0]
 801eeda:	2e00      	cmp	r6, #0
 801eedc:	da03      	bge.n	801eee6 <_printf_i+0x9a>
 801eede:	232d      	movs	r3, #45	@ 0x2d
 801eee0:	9a03      	ldr	r2, [sp, #12]
 801eee2:	4276      	negs	r6, r6
 801eee4:	7013      	strb	r3, [r2, #0]
 801eee6:	4b5e      	ldr	r3, [pc, #376]	@ (801f060 <_printf_i+0x214>)
 801eee8:	270a      	movs	r7, #10
 801eeea:	9304      	str	r3, [sp, #16]
 801eeec:	e018      	b.n	801ef20 <_printf_i+0xd4>
 801eeee:	6806      	ldr	r6, [r0, #0]
 801eef0:	601a      	str	r2, [r3, #0]
 801eef2:	0649      	lsls	r1, r1, #25
 801eef4:	d5f1      	bpl.n	801eeda <_printf_i+0x8e>
 801eef6:	b236      	sxth	r6, r6
 801eef8:	e7ef      	b.n	801eeda <_printf_i+0x8e>
 801eefa:	6808      	ldr	r0, [r1, #0]
 801eefc:	6819      	ldr	r1, [r3, #0]
 801eefe:	c940      	ldmia	r1!, {r6}
 801ef00:	0605      	lsls	r5, r0, #24
 801ef02:	d402      	bmi.n	801ef0a <_printf_i+0xbe>
 801ef04:	0640      	lsls	r0, r0, #25
 801ef06:	d500      	bpl.n	801ef0a <_printf_i+0xbe>
 801ef08:	b2b6      	uxth	r6, r6
 801ef0a:	6019      	str	r1, [r3, #0]
 801ef0c:	4b54      	ldr	r3, [pc, #336]	@ (801f060 <_printf_i+0x214>)
 801ef0e:	270a      	movs	r7, #10
 801ef10:	9304      	str	r3, [sp, #16]
 801ef12:	2a6f      	cmp	r2, #111	@ 0x6f
 801ef14:	d100      	bne.n	801ef18 <_printf_i+0xcc>
 801ef16:	3f02      	subs	r7, #2
 801ef18:	0023      	movs	r3, r4
 801ef1a:	2200      	movs	r2, #0
 801ef1c:	3343      	adds	r3, #67	@ 0x43
 801ef1e:	701a      	strb	r2, [r3, #0]
 801ef20:	6863      	ldr	r3, [r4, #4]
 801ef22:	60a3      	str	r3, [r4, #8]
 801ef24:	2b00      	cmp	r3, #0
 801ef26:	db03      	blt.n	801ef30 <_printf_i+0xe4>
 801ef28:	2104      	movs	r1, #4
 801ef2a:	6822      	ldr	r2, [r4, #0]
 801ef2c:	438a      	bics	r2, r1
 801ef2e:	6022      	str	r2, [r4, #0]
 801ef30:	2e00      	cmp	r6, #0
 801ef32:	d102      	bne.n	801ef3a <_printf_i+0xee>
 801ef34:	9d03      	ldr	r5, [sp, #12]
 801ef36:	2b00      	cmp	r3, #0
 801ef38:	d00c      	beq.n	801ef54 <_printf_i+0x108>
 801ef3a:	9d03      	ldr	r5, [sp, #12]
 801ef3c:	0030      	movs	r0, r6
 801ef3e:	0039      	movs	r1, r7
 801ef40:	f7e1 f9b6 	bl	80002b0 <__aeabi_uidivmod>
 801ef44:	9b04      	ldr	r3, [sp, #16]
 801ef46:	3d01      	subs	r5, #1
 801ef48:	5c5b      	ldrb	r3, [r3, r1]
 801ef4a:	702b      	strb	r3, [r5, #0]
 801ef4c:	0033      	movs	r3, r6
 801ef4e:	0006      	movs	r6, r0
 801ef50:	429f      	cmp	r7, r3
 801ef52:	d9f3      	bls.n	801ef3c <_printf_i+0xf0>
 801ef54:	2f08      	cmp	r7, #8
 801ef56:	d109      	bne.n	801ef6c <_printf_i+0x120>
 801ef58:	6823      	ldr	r3, [r4, #0]
 801ef5a:	07db      	lsls	r3, r3, #31
 801ef5c:	d506      	bpl.n	801ef6c <_printf_i+0x120>
 801ef5e:	6862      	ldr	r2, [r4, #4]
 801ef60:	6923      	ldr	r3, [r4, #16]
 801ef62:	429a      	cmp	r2, r3
 801ef64:	dc02      	bgt.n	801ef6c <_printf_i+0x120>
 801ef66:	2330      	movs	r3, #48	@ 0x30
 801ef68:	3d01      	subs	r5, #1
 801ef6a:	702b      	strb	r3, [r5, #0]
 801ef6c:	9b03      	ldr	r3, [sp, #12]
 801ef6e:	1b5b      	subs	r3, r3, r5
 801ef70:	6123      	str	r3, [r4, #16]
 801ef72:	9b07      	ldr	r3, [sp, #28]
 801ef74:	0021      	movs	r1, r4
 801ef76:	9300      	str	r3, [sp, #0]
 801ef78:	9805      	ldr	r0, [sp, #20]
 801ef7a:	9b06      	ldr	r3, [sp, #24]
 801ef7c:	aa09      	add	r2, sp, #36	@ 0x24
 801ef7e:	f7ff fef5 	bl	801ed6c <_printf_common>
 801ef82:	3001      	adds	r0, #1
 801ef84:	d148      	bne.n	801f018 <_printf_i+0x1cc>
 801ef86:	2001      	movs	r0, #1
 801ef88:	4240      	negs	r0, r0
 801ef8a:	b00b      	add	sp, #44	@ 0x2c
 801ef8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef8e:	2220      	movs	r2, #32
 801ef90:	6809      	ldr	r1, [r1, #0]
 801ef92:	430a      	orrs	r2, r1
 801ef94:	6022      	str	r2, [r4, #0]
 801ef96:	2278      	movs	r2, #120	@ 0x78
 801ef98:	4932      	ldr	r1, [pc, #200]	@ (801f064 <_printf_i+0x218>)
 801ef9a:	9104      	str	r1, [sp, #16]
 801ef9c:	0021      	movs	r1, r4
 801ef9e:	3145      	adds	r1, #69	@ 0x45
 801efa0:	700a      	strb	r2, [r1, #0]
 801efa2:	6819      	ldr	r1, [r3, #0]
 801efa4:	6822      	ldr	r2, [r4, #0]
 801efa6:	c940      	ldmia	r1!, {r6}
 801efa8:	0610      	lsls	r0, r2, #24
 801efaa:	d402      	bmi.n	801efb2 <_printf_i+0x166>
 801efac:	0650      	lsls	r0, r2, #25
 801efae:	d500      	bpl.n	801efb2 <_printf_i+0x166>
 801efb0:	b2b6      	uxth	r6, r6
 801efb2:	6019      	str	r1, [r3, #0]
 801efb4:	07d3      	lsls	r3, r2, #31
 801efb6:	d502      	bpl.n	801efbe <_printf_i+0x172>
 801efb8:	2320      	movs	r3, #32
 801efba:	4313      	orrs	r3, r2
 801efbc:	6023      	str	r3, [r4, #0]
 801efbe:	2e00      	cmp	r6, #0
 801efc0:	d001      	beq.n	801efc6 <_printf_i+0x17a>
 801efc2:	2710      	movs	r7, #16
 801efc4:	e7a8      	b.n	801ef18 <_printf_i+0xcc>
 801efc6:	2220      	movs	r2, #32
 801efc8:	6823      	ldr	r3, [r4, #0]
 801efca:	4393      	bics	r3, r2
 801efcc:	6023      	str	r3, [r4, #0]
 801efce:	e7f8      	b.n	801efc2 <_printf_i+0x176>
 801efd0:	681a      	ldr	r2, [r3, #0]
 801efd2:	680d      	ldr	r5, [r1, #0]
 801efd4:	1d10      	adds	r0, r2, #4
 801efd6:	6949      	ldr	r1, [r1, #20]
 801efd8:	6018      	str	r0, [r3, #0]
 801efda:	6813      	ldr	r3, [r2, #0]
 801efdc:	062e      	lsls	r6, r5, #24
 801efde:	d501      	bpl.n	801efe4 <_printf_i+0x198>
 801efe0:	6019      	str	r1, [r3, #0]
 801efe2:	e002      	b.n	801efea <_printf_i+0x19e>
 801efe4:	066d      	lsls	r5, r5, #25
 801efe6:	d5fb      	bpl.n	801efe0 <_printf_i+0x194>
 801efe8:	8019      	strh	r1, [r3, #0]
 801efea:	2300      	movs	r3, #0
 801efec:	9d03      	ldr	r5, [sp, #12]
 801efee:	6123      	str	r3, [r4, #16]
 801eff0:	e7bf      	b.n	801ef72 <_printf_i+0x126>
 801eff2:	681a      	ldr	r2, [r3, #0]
 801eff4:	1d11      	adds	r1, r2, #4
 801eff6:	6019      	str	r1, [r3, #0]
 801eff8:	6815      	ldr	r5, [r2, #0]
 801effa:	2100      	movs	r1, #0
 801effc:	0028      	movs	r0, r5
 801effe:	6862      	ldr	r2, [r4, #4]
 801f000:	f000 fb7b 	bl	801f6fa <memchr>
 801f004:	2800      	cmp	r0, #0
 801f006:	d001      	beq.n	801f00c <_printf_i+0x1c0>
 801f008:	1b40      	subs	r0, r0, r5
 801f00a:	6060      	str	r0, [r4, #4]
 801f00c:	6863      	ldr	r3, [r4, #4]
 801f00e:	6123      	str	r3, [r4, #16]
 801f010:	2300      	movs	r3, #0
 801f012:	9a03      	ldr	r2, [sp, #12]
 801f014:	7013      	strb	r3, [r2, #0]
 801f016:	e7ac      	b.n	801ef72 <_printf_i+0x126>
 801f018:	002a      	movs	r2, r5
 801f01a:	6923      	ldr	r3, [r4, #16]
 801f01c:	9906      	ldr	r1, [sp, #24]
 801f01e:	9805      	ldr	r0, [sp, #20]
 801f020:	9d07      	ldr	r5, [sp, #28]
 801f022:	47a8      	blx	r5
 801f024:	3001      	adds	r0, #1
 801f026:	d0ae      	beq.n	801ef86 <_printf_i+0x13a>
 801f028:	6823      	ldr	r3, [r4, #0]
 801f02a:	079b      	lsls	r3, r3, #30
 801f02c:	d415      	bmi.n	801f05a <_printf_i+0x20e>
 801f02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f030:	68e0      	ldr	r0, [r4, #12]
 801f032:	4298      	cmp	r0, r3
 801f034:	daa9      	bge.n	801ef8a <_printf_i+0x13e>
 801f036:	0018      	movs	r0, r3
 801f038:	e7a7      	b.n	801ef8a <_printf_i+0x13e>
 801f03a:	0022      	movs	r2, r4
 801f03c:	2301      	movs	r3, #1
 801f03e:	9906      	ldr	r1, [sp, #24]
 801f040:	9805      	ldr	r0, [sp, #20]
 801f042:	9e07      	ldr	r6, [sp, #28]
 801f044:	3219      	adds	r2, #25
 801f046:	47b0      	blx	r6
 801f048:	3001      	adds	r0, #1
 801f04a:	d09c      	beq.n	801ef86 <_printf_i+0x13a>
 801f04c:	3501      	adds	r5, #1
 801f04e:	68e3      	ldr	r3, [r4, #12]
 801f050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f052:	1a9b      	subs	r3, r3, r2
 801f054:	42ab      	cmp	r3, r5
 801f056:	dcf0      	bgt.n	801f03a <_printf_i+0x1ee>
 801f058:	e7e9      	b.n	801f02e <_printf_i+0x1e2>
 801f05a:	2500      	movs	r5, #0
 801f05c:	e7f7      	b.n	801f04e <_printf_i+0x202>
 801f05e:	46c0      	nop			@ (mov r8, r8)
 801f060:	08024cc3 	.word	0x08024cc3
 801f064:	08024cd4 	.word	0x08024cd4

0801f068 <std>:
 801f068:	2300      	movs	r3, #0
 801f06a:	b510      	push	{r4, lr}
 801f06c:	0004      	movs	r4, r0
 801f06e:	6003      	str	r3, [r0, #0]
 801f070:	6043      	str	r3, [r0, #4]
 801f072:	6083      	str	r3, [r0, #8]
 801f074:	8181      	strh	r1, [r0, #12]
 801f076:	6643      	str	r3, [r0, #100]	@ 0x64
 801f078:	81c2      	strh	r2, [r0, #14]
 801f07a:	6103      	str	r3, [r0, #16]
 801f07c:	6143      	str	r3, [r0, #20]
 801f07e:	6183      	str	r3, [r0, #24]
 801f080:	0019      	movs	r1, r3
 801f082:	2208      	movs	r2, #8
 801f084:	305c      	adds	r0, #92	@ 0x5c
 801f086:	f000 fa67 	bl	801f558 <memset>
 801f08a:	4b0b      	ldr	r3, [pc, #44]	@ (801f0b8 <std+0x50>)
 801f08c:	6224      	str	r4, [r4, #32]
 801f08e:	6263      	str	r3, [r4, #36]	@ 0x24
 801f090:	4b0a      	ldr	r3, [pc, #40]	@ (801f0bc <std+0x54>)
 801f092:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f094:	4b0a      	ldr	r3, [pc, #40]	@ (801f0c0 <std+0x58>)
 801f096:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f098:	4b0a      	ldr	r3, [pc, #40]	@ (801f0c4 <std+0x5c>)
 801f09a:	6323      	str	r3, [r4, #48]	@ 0x30
 801f09c:	4b0a      	ldr	r3, [pc, #40]	@ (801f0c8 <std+0x60>)
 801f09e:	429c      	cmp	r4, r3
 801f0a0:	d005      	beq.n	801f0ae <std+0x46>
 801f0a2:	4b0a      	ldr	r3, [pc, #40]	@ (801f0cc <std+0x64>)
 801f0a4:	429c      	cmp	r4, r3
 801f0a6:	d002      	beq.n	801f0ae <std+0x46>
 801f0a8:	4b09      	ldr	r3, [pc, #36]	@ (801f0d0 <std+0x68>)
 801f0aa:	429c      	cmp	r4, r3
 801f0ac:	d103      	bne.n	801f0b6 <std+0x4e>
 801f0ae:	0020      	movs	r0, r4
 801f0b0:	3058      	adds	r0, #88	@ 0x58
 801f0b2:	f000 fb1f 	bl	801f6f4 <__retarget_lock_init_recursive>
 801f0b6:	bd10      	pop	{r4, pc}
 801f0b8:	0801f311 	.word	0x0801f311
 801f0bc:	0801f339 	.word	0x0801f339
 801f0c0:	0801f371 	.word	0x0801f371
 801f0c4:	0801f39d 	.word	0x0801f39d
 801f0c8:	200037b0 	.word	0x200037b0
 801f0cc:	20003818 	.word	0x20003818
 801f0d0:	20003880 	.word	0x20003880

0801f0d4 <stdio_exit_handler>:
 801f0d4:	b510      	push	{r4, lr}
 801f0d6:	4a03      	ldr	r2, [pc, #12]	@ (801f0e4 <stdio_exit_handler+0x10>)
 801f0d8:	4903      	ldr	r1, [pc, #12]	@ (801f0e8 <stdio_exit_handler+0x14>)
 801f0da:	4804      	ldr	r0, [pc, #16]	@ (801f0ec <stdio_exit_handler+0x18>)
 801f0dc:	f000 f86c 	bl	801f1b8 <_fwalk_sglue>
 801f0e0:	bd10      	pop	{r4, pc}
 801f0e2:	46c0      	nop			@ (mov r8, r8)
 801f0e4:	20000250 	.word	0x20000250
 801f0e8:	08021d19 	.word	0x08021d19
 801f0ec:	200003cc 	.word	0x200003cc

0801f0f0 <cleanup_stdio>:
 801f0f0:	6841      	ldr	r1, [r0, #4]
 801f0f2:	4b0b      	ldr	r3, [pc, #44]	@ (801f120 <cleanup_stdio+0x30>)
 801f0f4:	b510      	push	{r4, lr}
 801f0f6:	0004      	movs	r4, r0
 801f0f8:	4299      	cmp	r1, r3
 801f0fa:	d001      	beq.n	801f100 <cleanup_stdio+0x10>
 801f0fc:	f002 fe0c 	bl	8021d18 <_fflush_r>
 801f100:	68a1      	ldr	r1, [r4, #8]
 801f102:	4b08      	ldr	r3, [pc, #32]	@ (801f124 <cleanup_stdio+0x34>)
 801f104:	4299      	cmp	r1, r3
 801f106:	d002      	beq.n	801f10e <cleanup_stdio+0x1e>
 801f108:	0020      	movs	r0, r4
 801f10a:	f002 fe05 	bl	8021d18 <_fflush_r>
 801f10e:	68e1      	ldr	r1, [r4, #12]
 801f110:	4b05      	ldr	r3, [pc, #20]	@ (801f128 <cleanup_stdio+0x38>)
 801f112:	4299      	cmp	r1, r3
 801f114:	d002      	beq.n	801f11c <cleanup_stdio+0x2c>
 801f116:	0020      	movs	r0, r4
 801f118:	f002 fdfe 	bl	8021d18 <_fflush_r>
 801f11c:	bd10      	pop	{r4, pc}
 801f11e:	46c0      	nop			@ (mov r8, r8)
 801f120:	200037b0 	.word	0x200037b0
 801f124:	20003818 	.word	0x20003818
 801f128:	20003880 	.word	0x20003880

0801f12c <global_stdio_init.part.0>:
 801f12c:	b510      	push	{r4, lr}
 801f12e:	4b09      	ldr	r3, [pc, #36]	@ (801f154 <global_stdio_init.part.0+0x28>)
 801f130:	4a09      	ldr	r2, [pc, #36]	@ (801f158 <global_stdio_init.part.0+0x2c>)
 801f132:	2104      	movs	r1, #4
 801f134:	601a      	str	r2, [r3, #0]
 801f136:	4809      	ldr	r0, [pc, #36]	@ (801f15c <global_stdio_init.part.0+0x30>)
 801f138:	2200      	movs	r2, #0
 801f13a:	f7ff ff95 	bl	801f068 <std>
 801f13e:	2201      	movs	r2, #1
 801f140:	2109      	movs	r1, #9
 801f142:	4807      	ldr	r0, [pc, #28]	@ (801f160 <global_stdio_init.part.0+0x34>)
 801f144:	f7ff ff90 	bl	801f068 <std>
 801f148:	2202      	movs	r2, #2
 801f14a:	2112      	movs	r1, #18
 801f14c:	4805      	ldr	r0, [pc, #20]	@ (801f164 <global_stdio_init.part.0+0x38>)
 801f14e:	f7ff ff8b 	bl	801f068 <std>
 801f152:	bd10      	pop	{r4, pc}
 801f154:	200038e8 	.word	0x200038e8
 801f158:	0801f0d5 	.word	0x0801f0d5
 801f15c:	200037b0 	.word	0x200037b0
 801f160:	20003818 	.word	0x20003818
 801f164:	20003880 	.word	0x20003880

0801f168 <__sfp_lock_acquire>:
 801f168:	b510      	push	{r4, lr}
 801f16a:	4802      	ldr	r0, [pc, #8]	@ (801f174 <__sfp_lock_acquire+0xc>)
 801f16c:	f000 fac3 	bl	801f6f6 <__retarget_lock_acquire_recursive>
 801f170:	bd10      	pop	{r4, pc}
 801f172:	46c0      	nop			@ (mov r8, r8)
 801f174:	200038f1 	.word	0x200038f1

0801f178 <__sfp_lock_release>:
 801f178:	b510      	push	{r4, lr}
 801f17a:	4802      	ldr	r0, [pc, #8]	@ (801f184 <__sfp_lock_release+0xc>)
 801f17c:	f000 fabc 	bl	801f6f8 <__retarget_lock_release_recursive>
 801f180:	bd10      	pop	{r4, pc}
 801f182:	46c0      	nop			@ (mov r8, r8)
 801f184:	200038f1 	.word	0x200038f1

0801f188 <__sinit>:
 801f188:	b510      	push	{r4, lr}
 801f18a:	0004      	movs	r4, r0
 801f18c:	f7ff ffec 	bl	801f168 <__sfp_lock_acquire>
 801f190:	6a23      	ldr	r3, [r4, #32]
 801f192:	2b00      	cmp	r3, #0
 801f194:	d002      	beq.n	801f19c <__sinit+0x14>
 801f196:	f7ff ffef 	bl	801f178 <__sfp_lock_release>
 801f19a:	bd10      	pop	{r4, pc}
 801f19c:	4b04      	ldr	r3, [pc, #16]	@ (801f1b0 <__sinit+0x28>)
 801f19e:	6223      	str	r3, [r4, #32]
 801f1a0:	4b04      	ldr	r3, [pc, #16]	@ (801f1b4 <__sinit+0x2c>)
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d1f6      	bne.n	801f196 <__sinit+0xe>
 801f1a8:	f7ff ffc0 	bl	801f12c <global_stdio_init.part.0>
 801f1ac:	e7f3      	b.n	801f196 <__sinit+0xe>
 801f1ae:	46c0      	nop			@ (mov r8, r8)
 801f1b0:	0801f0f1 	.word	0x0801f0f1
 801f1b4:	200038e8 	.word	0x200038e8

0801f1b8 <_fwalk_sglue>:
 801f1b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1ba:	0014      	movs	r4, r2
 801f1bc:	2600      	movs	r6, #0
 801f1be:	9000      	str	r0, [sp, #0]
 801f1c0:	9101      	str	r1, [sp, #4]
 801f1c2:	68a5      	ldr	r5, [r4, #8]
 801f1c4:	6867      	ldr	r7, [r4, #4]
 801f1c6:	3f01      	subs	r7, #1
 801f1c8:	d504      	bpl.n	801f1d4 <_fwalk_sglue+0x1c>
 801f1ca:	6824      	ldr	r4, [r4, #0]
 801f1cc:	2c00      	cmp	r4, #0
 801f1ce:	d1f8      	bne.n	801f1c2 <_fwalk_sglue+0xa>
 801f1d0:	0030      	movs	r0, r6
 801f1d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f1d4:	89ab      	ldrh	r3, [r5, #12]
 801f1d6:	2b01      	cmp	r3, #1
 801f1d8:	d908      	bls.n	801f1ec <_fwalk_sglue+0x34>
 801f1da:	220e      	movs	r2, #14
 801f1dc:	5eab      	ldrsh	r3, [r5, r2]
 801f1de:	3301      	adds	r3, #1
 801f1e0:	d004      	beq.n	801f1ec <_fwalk_sglue+0x34>
 801f1e2:	0029      	movs	r1, r5
 801f1e4:	9800      	ldr	r0, [sp, #0]
 801f1e6:	9b01      	ldr	r3, [sp, #4]
 801f1e8:	4798      	blx	r3
 801f1ea:	4306      	orrs	r6, r0
 801f1ec:	3568      	adds	r5, #104	@ 0x68
 801f1ee:	e7ea      	b.n	801f1c6 <_fwalk_sglue+0xe>

0801f1f0 <iprintf>:
 801f1f0:	b40f      	push	{r0, r1, r2, r3}
 801f1f2:	b507      	push	{r0, r1, r2, lr}
 801f1f4:	4905      	ldr	r1, [pc, #20]	@ (801f20c <iprintf+0x1c>)
 801f1f6:	ab04      	add	r3, sp, #16
 801f1f8:	6808      	ldr	r0, [r1, #0]
 801f1fa:	cb04      	ldmia	r3!, {r2}
 801f1fc:	6881      	ldr	r1, [r0, #8]
 801f1fe:	9301      	str	r3, [sp, #4]
 801f200:	f002 fbe8 	bl	80219d4 <_vfiprintf_r>
 801f204:	b003      	add	sp, #12
 801f206:	bc08      	pop	{r3}
 801f208:	b004      	add	sp, #16
 801f20a:	4718      	bx	r3
 801f20c:	200003c8 	.word	0x200003c8

0801f210 <_puts_r>:
 801f210:	6a03      	ldr	r3, [r0, #32]
 801f212:	b570      	push	{r4, r5, r6, lr}
 801f214:	0005      	movs	r5, r0
 801f216:	000e      	movs	r6, r1
 801f218:	6884      	ldr	r4, [r0, #8]
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d101      	bne.n	801f222 <_puts_r+0x12>
 801f21e:	f7ff ffb3 	bl	801f188 <__sinit>
 801f222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f224:	07db      	lsls	r3, r3, #31
 801f226:	d405      	bmi.n	801f234 <_puts_r+0x24>
 801f228:	89a3      	ldrh	r3, [r4, #12]
 801f22a:	059b      	lsls	r3, r3, #22
 801f22c:	d402      	bmi.n	801f234 <_puts_r+0x24>
 801f22e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f230:	f000 fa61 	bl	801f6f6 <__retarget_lock_acquire_recursive>
 801f234:	89a3      	ldrh	r3, [r4, #12]
 801f236:	071b      	lsls	r3, r3, #28
 801f238:	d502      	bpl.n	801f240 <_puts_r+0x30>
 801f23a:	6923      	ldr	r3, [r4, #16]
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d11f      	bne.n	801f280 <_puts_r+0x70>
 801f240:	0021      	movs	r1, r4
 801f242:	0028      	movs	r0, r5
 801f244:	f000 f92a 	bl	801f49c <__swsetup_r>
 801f248:	2800      	cmp	r0, #0
 801f24a:	d019      	beq.n	801f280 <_puts_r+0x70>
 801f24c:	2501      	movs	r5, #1
 801f24e:	426d      	negs	r5, r5
 801f250:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f252:	07db      	lsls	r3, r3, #31
 801f254:	d405      	bmi.n	801f262 <_puts_r+0x52>
 801f256:	89a3      	ldrh	r3, [r4, #12]
 801f258:	059b      	lsls	r3, r3, #22
 801f25a:	d402      	bmi.n	801f262 <_puts_r+0x52>
 801f25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f25e:	f000 fa4b 	bl	801f6f8 <__retarget_lock_release_recursive>
 801f262:	0028      	movs	r0, r5
 801f264:	bd70      	pop	{r4, r5, r6, pc}
 801f266:	3601      	adds	r6, #1
 801f268:	60a3      	str	r3, [r4, #8]
 801f26a:	2b00      	cmp	r3, #0
 801f26c:	da04      	bge.n	801f278 <_puts_r+0x68>
 801f26e:	69a2      	ldr	r2, [r4, #24]
 801f270:	429a      	cmp	r2, r3
 801f272:	dc16      	bgt.n	801f2a2 <_puts_r+0x92>
 801f274:	290a      	cmp	r1, #10
 801f276:	d014      	beq.n	801f2a2 <_puts_r+0x92>
 801f278:	6823      	ldr	r3, [r4, #0]
 801f27a:	1c5a      	adds	r2, r3, #1
 801f27c:	6022      	str	r2, [r4, #0]
 801f27e:	7019      	strb	r1, [r3, #0]
 801f280:	68a3      	ldr	r3, [r4, #8]
 801f282:	7831      	ldrb	r1, [r6, #0]
 801f284:	3b01      	subs	r3, #1
 801f286:	2900      	cmp	r1, #0
 801f288:	d1ed      	bne.n	801f266 <_puts_r+0x56>
 801f28a:	60a3      	str	r3, [r4, #8]
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	da0f      	bge.n	801f2b0 <_puts_r+0xa0>
 801f290:	0022      	movs	r2, r4
 801f292:	0028      	movs	r0, r5
 801f294:	310a      	adds	r1, #10
 801f296:	f000 f8bf 	bl	801f418 <__swbuf_r>
 801f29a:	3001      	adds	r0, #1
 801f29c:	d0d6      	beq.n	801f24c <_puts_r+0x3c>
 801f29e:	250a      	movs	r5, #10
 801f2a0:	e7d6      	b.n	801f250 <_puts_r+0x40>
 801f2a2:	0022      	movs	r2, r4
 801f2a4:	0028      	movs	r0, r5
 801f2a6:	f000 f8b7 	bl	801f418 <__swbuf_r>
 801f2aa:	3001      	adds	r0, #1
 801f2ac:	d1e8      	bne.n	801f280 <_puts_r+0x70>
 801f2ae:	e7cd      	b.n	801f24c <_puts_r+0x3c>
 801f2b0:	6823      	ldr	r3, [r4, #0]
 801f2b2:	1c5a      	adds	r2, r3, #1
 801f2b4:	6022      	str	r2, [r4, #0]
 801f2b6:	220a      	movs	r2, #10
 801f2b8:	701a      	strb	r2, [r3, #0]
 801f2ba:	e7f0      	b.n	801f29e <_puts_r+0x8e>

0801f2bc <puts>:
 801f2bc:	b510      	push	{r4, lr}
 801f2be:	4b03      	ldr	r3, [pc, #12]	@ (801f2cc <puts+0x10>)
 801f2c0:	0001      	movs	r1, r0
 801f2c2:	6818      	ldr	r0, [r3, #0]
 801f2c4:	f7ff ffa4 	bl	801f210 <_puts_r>
 801f2c8:	bd10      	pop	{r4, pc}
 801f2ca:	46c0      	nop			@ (mov r8, r8)
 801f2cc:	200003c8 	.word	0x200003c8

0801f2d0 <siprintf>:
 801f2d0:	b40e      	push	{r1, r2, r3}
 801f2d2:	b500      	push	{lr}
 801f2d4:	490b      	ldr	r1, [pc, #44]	@ (801f304 <siprintf+0x34>)
 801f2d6:	b09c      	sub	sp, #112	@ 0x70
 801f2d8:	ab1d      	add	r3, sp, #116	@ 0x74
 801f2da:	9002      	str	r0, [sp, #8]
 801f2dc:	9006      	str	r0, [sp, #24]
 801f2de:	9107      	str	r1, [sp, #28]
 801f2e0:	9104      	str	r1, [sp, #16]
 801f2e2:	4809      	ldr	r0, [pc, #36]	@ (801f308 <siprintf+0x38>)
 801f2e4:	4909      	ldr	r1, [pc, #36]	@ (801f30c <siprintf+0x3c>)
 801f2e6:	cb04      	ldmia	r3!, {r2}
 801f2e8:	9105      	str	r1, [sp, #20]
 801f2ea:	6800      	ldr	r0, [r0, #0]
 801f2ec:	a902      	add	r1, sp, #8
 801f2ee:	9301      	str	r3, [sp, #4]
 801f2f0:	f002 fa4a 	bl	8021788 <_svfiprintf_r>
 801f2f4:	2200      	movs	r2, #0
 801f2f6:	9b02      	ldr	r3, [sp, #8]
 801f2f8:	701a      	strb	r2, [r3, #0]
 801f2fa:	b01c      	add	sp, #112	@ 0x70
 801f2fc:	bc08      	pop	{r3}
 801f2fe:	b003      	add	sp, #12
 801f300:	4718      	bx	r3
 801f302:	46c0      	nop			@ (mov r8, r8)
 801f304:	7fffffff 	.word	0x7fffffff
 801f308:	200003c8 	.word	0x200003c8
 801f30c:	ffff0208 	.word	0xffff0208

0801f310 <__sread>:
 801f310:	b570      	push	{r4, r5, r6, lr}
 801f312:	000c      	movs	r4, r1
 801f314:	250e      	movs	r5, #14
 801f316:	5f49      	ldrsh	r1, [r1, r5]
 801f318:	f000 f99a 	bl	801f650 <_read_r>
 801f31c:	2800      	cmp	r0, #0
 801f31e:	db03      	blt.n	801f328 <__sread+0x18>
 801f320:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f322:	181b      	adds	r3, r3, r0
 801f324:	6563      	str	r3, [r4, #84]	@ 0x54
 801f326:	bd70      	pop	{r4, r5, r6, pc}
 801f328:	89a3      	ldrh	r3, [r4, #12]
 801f32a:	4a02      	ldr	r2, [pc, #8]	@ (801f334 <__sread+0x24>)
 801f32c:	4013      	ands	r3, r2
 801f32e:	81a3      	strh	r3, [r4, #12]
 801f330:	e7f9      	b.n	801f326 <__sread+0x16>
 801f332:	46c0      	nop			@ (mov r8, r8)
 801f334:	ffffefff 	.word	0xffffefff

0801f338 <__swrite>:
 801f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f33a:	001f      	movs	r7, r3
 801f33c:	898b      	ldrh	r3, [r1, #12]
 801f33e:	0005      	movs	r5, r0
 801f340:	000c      	movs	r4, r1
 801f342:	0016      	movs	r6, r2
 801f344:	05db      	lsls	r3, r3, #23
 801f346:	d505      	bpl.n	801f354 <__swrite+0x1c>
 801f348:	230e      	movs	r3, #14
 801f34a:	5ec9      	ldrsh	r1, [r1, r3]
 801f34c:	2200      	movs	r2, #0
 801f34e:	2302      	movs	r3, #2
 801f350:	f000 f96a 	bl	801f628 <_lseek_r>
 801f354:	89a3      	ldrh	r3, [r4, #12]
 801f356:	4a05      	ldr	r2, [pc, #20]	@ (801f36c <__swrite+0x34>)
 801f358:	0028      	movs	r0, r5
 801f35a:	4013      	ands	r3, r2
 801f35c:	81a3      	strh	r3, [r4, #12]
 801f35e:	0032      	movs	r2, r6
 801f360:	230e      	movs	r3, #14
 801f362:	5ee1      	ldrsh	r1, [r4, r3]
 801f364:	003b      	movs	r3, r7
 801f366:	f000 f987 	bl	801f678 <_write_r>
 801f36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f36c:	ffffefff 	.word	0xffffefff

0801f370 <__sseek>:
 801f370:	b570      	push	{r4, r5, r6, lr}
 801f372:	000c      	movs	r4, r1
 801f374:	250e      	movs	r5, #14
 801f376:	5f49      	ldrsh	r1, [r1, r5]
 801f378:	f000 f956 	bl	801f628 <_lseek_r>
 801f37c:	89a3      	ldrh	r3, [r4, #12]
 801f37e:	1c42      	adds	r2, r0, #1
 801f380:	d103      	bne.n	801f38a <__sseek+0x1a>
 801f382:	4a05      	ldr	r2, [pc, #20]	@ (801f398 <__sseek+0x28>)
 801f384:	4013      	ands	r3, r2
 801f386:	81a3      	strh	r3, [r4, #12]
 801f388:	bd70      	pop	{r4, r5, r6, pc}
 801f38a:	2280      	movs	r2, #128	@ 0x80
 801f38c:	0152      	lsls	r2, r2, #5
 801f38e:	4313      	orrs	r3, r2
 801f390:	81a3      	strh	r3, [r4, #12]
 801f392:	6560      	str	r0, [r4, #84]	@ 0x54
 801f394:	e7f8      	b.n	801f388 <__sseek+0x18>
 801f396:	46c0      	nop			@ (mov r8, r8)
 801f398:	ffffefff 	.word	0xffffefff

0801f39c <__sclose>:
 801f39c:	b510      	push	{r4, lr}
 801f39e:	230e      	movs	r3, #14
 801f3a0:	5ec9      	ldrsh	r1, [r1, r3]
 801f3a2:	f000 f92f 	bl	801f604 <_close_r>
 801f3a6:	bd10      	pop	{r4, pc}

0801f3a8 <_vsniprintf_r>:
 801f3a8:	b530      	push	{r4, r5, lr}
 801f3aa:	0014      	movs	r4, r2
 801f3ac:	0005      	movs	r5, r0
 801f3ae:	001a      	movs	r2, r3
 801f3b0:	b09b      	sub	sp, #108	@ 0x6c
 801f3b2:	2c00      	cmp	r4, #0
 801f3b4:	da05      	bge.n	801f3c2 <_vsniprintf_r+0x1a>
 801f3b6:	238b      	movs	r3, #139	@ 0x8b
 801f3b8:	6003      	str	r3, [r0, #0]
 801f3ba:	2001      	movs	r0, #1
 801f3bc:	4240      	negs	r0, r0
 801f3be:	b01b      	add	sp, #108	@ 0x6c
 801f3c0:	bd30      	pop	{r4, r5, pc}
 801f3c2:	2382      	movs	r3, #130	@ 0x82
 801f3c4:	4668      	mov	r0, sp
 801f3c6:	009b      	lsls	r3, r3, #2
 801f3c8:	8183      	strh	r3, [r0, #12]
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	9100      	str	r1, [sp, #0]
 801f3ce:	9104      	str	r1, [sp, #16]
 801f3d0:	429c      	cmp	r4, r3
 801f3d2:	d000      	beq.n	801f3d6 <_vsniprintf_r+0x2e>
 801f3d4:	1e63      	subs	r3, r4, #1
 801f3d6:	9302      	str	r3, [sp, #8]
 801f3d8:	9305      	str	r3, [sp, #20]
 801f3da:	2301      	movs	r3, #1
 801f3dc:	4669      	mov	r1, sp
 801f3de:	425b      	negs	r3, r3
 801f3e0:	81cb      	strh	r3, [r1, #14]
 801f3e2:	0028      	movs	r0, r5
 801f3e4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f3e6:	f002 f9cf 	bl	8021788 <_svfiprintf_r>
 801f3ea:	1c43      	adds	r3, r0, #1
 801f3ec:	da01      	bge.n	801f3f2 <_vsniprintf_r+0x4a>
 801f3ee:	238b      	movs	r3, #139	@ 0x8b
 801f3f0:	602b      	str	r3, [r5, #0]
 801f3f2:	2c00      	cmp	r4, #0
 801f3f4:	d0e3      	beq.n	801f3be <_vsniprintf_r+0x16>
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	9b00      	ldr	r3, [sp, #0]
 801f3fa:	701a      	strb	r2, [r3, #0]
 801f3fc:	e7df      	b.n	801f3be <_vsniprintf_r+0x16>
	...

0801f400 <vsniprintf>:
 801f400:	b513      	push	{r0, r1, r4, lr}
 801f402:	4c04      	ldr	r4, [pc, #16]	@ (801f414 <vsniprintf+0x14>)
 801f404:	9300      	str	r3, [sp, #0]
 801f406:	0013      	movs	r3, r2
 801f408:	000a      	movs	r2, r1
 801f40a:	0001      	movs	r1, r0
 801f40c:	6820      	ldr	r0, [r4, #0]
 801f40e:	f7ff ffcb 	bl	801f3a8 <_vsniprintf_r>
 801f412:	bd16      	pop	{r1, r2, r4, pc}
 801f414:	200003c8 	.word	0x200003c8

0801f418 <__swbuf_r>:
 801f418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f41a:	0006      	movs	r6, r0
 801f41c:	000d      	movs	r5, r1
 801f41e:	0014      	movs	r4, r2
 801f420:	2800      	cmp	r0, #0
 801f422:	d004      	beq.n	801f42e <__swbuf_r+0x16>
 801f424:	6a03      	ldr	r3, [r0, #32]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d101      	bne.n	801f42e <__swbuf_r+0x16>
 801f42a:	f7ff fead 	bl	801f188 <__sinit>
 801f42e:	69a3      	ldr	r3, [r4, #24]
 801f430:	60a3      	str	r3, [r4, #8]
 801f432:	89a3      	ldrh	r3, [r4, #12]
 801f434:	071b      	lsls	r3, r3, #28
 801f436:	d502      	bpl.n	801f43e <__swbuf_r+0x26>
 801f438:	6923      	ldr	r3, [r4, #16]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	d109      	bne.n	801f452 <__swbuf_r+0x3a>
 801f43e:	0021      	movs	r1, r4
 801f440:	0030      	movs	r0, r6
 801f442:	f000 f82b 	bl	801f49c <__swsetup_r>
 801f446:	2800      	cmp	r0, #0
 801f448:	d003      	beq.n	801f452 <__swbuf_r+0x3a>
 801f44a:	2501      	movs	r5, #1
 801f44c:	426d      	negs	r5, r5
 801f44e:	0028      	movs	r0, r5
 801f450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f452:	6923      	ldr	r3, [r4, #16]
 801f454:	6820      	ldr	r0, [r4, #0]
 801f456:	b2ef      	uxtb	r7, r5
 801f458:	1ac0      	subs	r0, r0, r3
 801f45a:	6963      	ldr	r3, [r4, #20]
 801f45c:	b2ed      	uxtb	r5, r5
 801f45e:	4283      	cmp	r3, r0
 801f460:	dc05      	bgt.n	801f46e <__swbuf_r+0x56>
 801f462:	0021      	movs	r1, r4
 801f464:	0030      	movs	r0, r6
 801f466:	f002 fc57 	bl	8021d18 <_fflush_r>
 801f46a:	2800      	cmp	r0, #0
 801f46c:	d1ed      	bne.n	801f44a <__swbuf_r+0x32>
 801f46e:	68a3      	ldr	r3, [r4, #8]
 801f470:	3001      	adds	r0, #1
 801f472:	3b01      	subs	r3, #1
 801f474:	60a3      	str	r3, [r4, #8]
 801f476:	6823      	ldr	r3, [r4, #0]
 801f478:	1c5a      	adds	r2, r3, #1
 801f47a:	6022      	str	r2, [r4, #0]
 801f47c:	701f      	strb	r7, [r3, #0]
 801f47e:	6963      	ldr	r3, [r4, #20]
 801f480:	4283      	cmp	r3, r0
 801f482:	d004      	beq.n	801f48e <__swbuf_r+0x76>
 801f484:	89a3      	ldrh	r3, [r4, #12]
 801f486:	07db      	lsls	r3, r3, #31
 801f488:	d5e1      	bpl.n	801f44e <__swbuf_r+0x36>
 801f48a:	2d0a      	cmp	r5, #10
 801f48c:	d1df      	bne.n	801f44e <__swbuf_r+0x36>
 801f48e:	0021      	movs	r1, r4
 801f490:	0030      	movs	r0, r6
 801f492:	f002 fc41 	bl	8021d18 <_fflush_r>
 801f496:	2800      	cmp	r0, #0
 801f498:	d0d9      	beq.n	801f44e <__swbuf_r+0x36>
 801f49a:	e7d6      	b.n	801f44a <__swbuf_r+0x32>

0801f49c <__swsetup_r>:
 801f49c:	4b2d      	ldr	r3, [pc, #180]	@ (801f554 <__swsetup_r+0xb8>)
 801f49e:	b570      	push	{r4, r5, r6, lr}
 801f4a0:	0005      	movs	r5, r0
 801f4a2:	6818      	ldr	r0, [r3, #0]
 801f4a4:	000c      	movs	r4, r1
 801f4a6:	2800      	cmp	r0, #0
 801f4a8:	d004      	beq.n	801f4b4 <__swsetup_r+0x18>
 801f4aa:	6a03      	ldr	r3, [r0, #32]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d101      	bne.n	801f4b4 <__swsetup_r+0x18>
 801f4b0:	f7ff fe6a 	bl	801f188 <__sinit>
 801f4b4:	230c      	movs	r3, #12
 801f4b6:	5ee2      	ldrsh	r2, [r4, r3]
 801f4b8:	0713      	lsls	r3, r2, #28
 801f4ba:	d423      	bmi.n	801f504 <__swsetup_r+0x68>
 801f4bc:	06d3      	lsls	r3, r2, #27
 801f4be:	d407      	bmi.n	801f4d0 <__swsetup_r+0x34>
 801f4c0:	2309      	movs	r3, #9
 801f4c2:	602b      	str	r3, [r5, #0]
 801f4c4:	2340      	movs	r3, #64	@ 0x40
 801f4c6:	2001      	movs	r0, #1
 801f4c8:	4313      	orrs	r3, r2
 801f4ca:	81a3      	strh	r3, [r4, #12]
 801f4cc:	4240      	negs	r0, r0
 801f4ce:	e03a      	b.n	801f546 <__swsetup_r+0xaa>
 801f4d0:	0752      	lsls	r2, r2, #29
 801f4d2:	d513      	bpl.n	801f4fc <__swsetup_r+0x60>
 801f4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f4d6:	2900      	cmp	r1, #0
 801f4d8:	d008      	beq.n	801f4ec <__swsetup_r+0x50>
 801f4da:	0023      	movs	r3, r4
 801f4dc:	3344      	adds	r3, #68	@ 0x44
 801f4de:	4299      	cmp	r1, r3
 801f4e0:	d002      	beq.n	801f4e8 <__swsetup_r+0x4c>
 801f4e2:	0028      	movs	r0, r5
 801f4e4:	f000 ffa6 	bl	8020434 <_free_r>
 801f4e8:	2300      	movs	r3, #0
 801f4ea:	6363      	str	r3, [r4, #52]	@ 0x34
 801f4ec:	2224      	movs	r2, #36	@ 0x24
 801f4ee:	89a3      	ldrh	r3, [r4, #12]
 801f4f0:	4393      	bics	r3, r2
 801f4f2:	81a3      	strh	r3, [r4, #12]
 801f4f4:	2300      	movs	r3, #0
 801f4f6:	6063      	str	r3, [r4, #4]
 801f4f8:	6923      	ldr	r3, [r4, #16]
 801f4fa:	6023      	str	r3, [r4, #0]
 801f4fc:	2308      	movs	r3, #8
 801f4fe:	89a2      	ldrh	r2, [r4, #12]
 801f500:	4313      	orrs	r3, r2
 801f502:	81a3      	strh	r3, [r4, #12]
 801f504:	6923      	ldr	r3, [r4, #16]
 801f506:	2b00      	cmp	r3, #0
 801f508:	d10b      	bne.n	801f522 <__swsetup_r+0x86>
 801f50a:	21a0      	movs	r1, #160	@ 0xa0
 801f50c:	2280      	movs	r2, #128	@ 0x80
 801f50e:	89a3      	ldrh	r3, [r4, #12]
 801f510:	0089      	lsls	r1, r1, #2
 801f512:	0092      	lsls	r2, r2, #2
 801f514:	400b      	ands	r3, r1
 801f516:	4293      	cmp	r3, r2
 801f518:	d003      	beq.n	801f522 <__swsetup_r+0x86>
 801f51a:	0021      	movs	r1, r4
 801f51c:	0028      	movs	r0, r5
 801f51e:	f002 fc51 	bl	8021dc4 <__smakebuf_r>
 801f522:	230c      	movs	r3, #12
 801f524:	5ee2      	ldrsh	r2, [r4, r3]
 801f526:	2101      	movs	r1, #1
 801f528:	0013      	movs	r3, r2
 801f52a:	400b      	ands	r3, r1
 801f52c:	420a      	tst	r2, r1
 801f52e:	d00b      	beq.n	801f548 <__swsetup_r+0xac>
 801f530:	2300      	movs	r3, #0
 801f532:	60a3      	str	r3, [r4, #8]
 801f534:	6963      	ldr	r3, [r4, #20]
 801f536:	425b      	negs	r3, r3
 801f538:	61a3      	str	r3, [r4, #24]
 801f53a:	2000      	movs	r0, #0
 801f53c:	6923      	ldr	r3, [r4, #16]
 801f53e:	4283      	cmp	r3, r0
 801f540:	d101      	bne.n	801f546 <__swsetup_r+0xaa>
 801f542:	0613      	lsls	r3, r2, #24
 801f544:	d4be      	bmi.n	801f4c4 <__swsetup_r+0x28>
 801f546:	bd70      	pop	{r4, r5, r6, pc}
 801f548:	0791      	lsls	r1, r2, #30
 801f54a:	d400      	bmi.n	801f54e <__swsetup_r+0xb2>
 801f54c:	6963      	ldr	r3, [r4, #20]
 801f54e:	60a3      	str	r3, [r4, #8]
 801f550:	e7f3      	b.n	801f53a <__swsetup_r+0x9e>
 801f552:	46c0      	nop			@ (mov r8, r8)
 801f554:	200003c8 	.word	0x200003c8

0801f558 <memset>:
 801f558:	0003      	movs	r3, r0
 801f55a:	1882      	adds	r2, r0, r2
 801f55c:	4293      	cmp	r3, r2
 801f55e:	d100      	bne.n	801f562 <memset+0xa>
 801f560:	4770      	bx	lr
 801f562:	7019      	strb	r1, [r3, #0]
 801f564:	3301      	adds	r3, #1
 801f566:	e7f9      	b.n	801f55c <memset+0x4>

0801f568 <strchr>:
 801f568:	b2c9      	uxtb	r1, r1
 801f56a:	7803      	ldrb	r3, [r0, #0]
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d004      	beq.n	801f57a <strchr+0x12>
 801f570:	428b      	cmp	r3, r1
 801f572:	d100      	bne.n	801f576 <strchr+0xe>
 801f574:	4770      	bx	lr
 801f576:	3001      	adds	r0, #1
 801f578:	e7f7      	b.n	801f56a <strchr+0x2>
 801f57a:	424b      	negs	r3, r1
 801f57c:	4159      	adcs	r1, r3
 801f57e:	4249      	negs	r1, r1
 801f580:	4008      	ands	r0, r1
 801f582:	e7f7      	b.n	801f574 <strchr+0xc>

0801f584 <strncmp>:
 801f584:	b530      	push	{r4, r5, lr}
 801f586:	0005      	movs	r5, r0
 801f588:	1e10      	subs	r0, r2, #0
 801f58a:	d00b      	beq.n	801f5a4 <strncmp+0x20>
 801f58c:	2400      	movs	r4, #0
 801f58e:	3a01      	subs	r2, #1
 801f590:	5d2b      	ldrb	r3, [r5, r4]
 801f592:	5d08      	ldrb	r0, [r1, r4]
 801f594:	4283      	cmp	r3, r0
 801f596:	d104      	bne.n	801f5a2 <strncmp+0x1e>
 801f598:	42a2      	cmp	r2, r4
 801f59a:	d002      	beq.n	801f5a2 <strncmp+0x1e>
 801f59c:	3401      	adds	r4, #1
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d1f6      	bne.n	801f590 <strncmp+0xc>
 801f5a2:	1a18      	subs	r0, r3, r0
 801f5a4:	bd30      	pop	{r4, r5, pc}

0801f5a6 <strncpy>:
 801f5a6:	0003      	movs	r3, r0
 801f5a8:	b530      	push	{r4, r5, lr}
 801f5aa:	001d      	movs	r5, r3
 801f5ac:	2a00      	cmp	r2, #0
 801f5ae:	d006      	beq.n	801f5be <strncpy+0x18>
 801f5b0:	780c      	ldrb	r4, [r1, #0]
 801f5b2:	3a01      	subs	r2, #1
 801f5b4:	3301      	adds	r3, #1
 801f5b6:	702c      	strb	r4, [r5, #0]
 801f5b8:	3101      	adds	r1, #1
 801f5ba:	2c00      	cmp	r4, #0
 801f5bc:	d1f5      	bne.n	801f5aa <strncpy+0x4>
 801f5be:	2100      	movs	r1, #0
 801f5c0:	189a      	adds	r2, r3, r2
 801f5c2:	4293      	cmp	r3, r2
 801f5c4:	d100      	bne.n	801f5c8 <strncpy+0x22>
 801f5c6:	bd30      	pop	{r4, r5, pc}
 801f5c8:	7019      	strb	r1, [r3, #0]
 801f5ca:	3301      	adds	r3, #1
 801f5cc:	e7f9      	b.n	801f5c2 <strncpy+0x1c>

0801f5ce <strstr>:
 801f5ce:	780a      	ldrb	r2, [r1, #0]
 801f5d0:	b530      	push	{r4, r5, lr}
 801f5d2:	2a00      	cmp	r2, #0
 801f5d4:	d10c      	bne.n	801f5f0 <strstr+0x22>
 801f5d6:	bd30      	pop	{r4, r5, pc}
 801f5d8:	429a      	cmp	r2, r3
 801f5da:	d108      	bne.n	801f5ee <strstr+0x20>
 801f5dc:	2301      	movs	r3, #1
 801f5de:	5ccc      	ldrb	r4, [r1, r3]
 801f5e0:	2c00      	cmp	r4, #0
 801f5e2:	d0f8      	beq.n	801f5d6 <strstr+0x8>
 801f5e4:	5cc5      	ldrb	r5, [r0, r3]
 801f5e6:	42a5      	cmp	r5, r4
 801f5e8:	d101      	bne.n	801f5ee <strstr+0x20>
 801f5ea:	3301      	adds	r3, #1
 801f5ec:	e7f7      	b.n	801f5de <strstr+0x10>
 801f5ee:	3001      	adds	r0, #1
 801f5f0:	7803      	ldrb	r3, [r0, #0]
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d1f0      	bne.n	801f5d8 <strstr+0xa>
 801f5f6:	0018      	movs	r0, r3
 801f5f8:	e7ed      	b.n	801f5d6 <strstr+0x8>
	...

0801f5fc <_localeconv_r>:
 801f5fc:	4800      	ldr	r0, [pc, #0]	@ (801f600 <_localeconv_r+0x4>)
 801f5fe:	4770      	bx	lr
 801f600:	2000034c 	.word	0x2000034c

0801f604 <_close_r>:
 801f604:	2300      	movs	r3, #0
 801f606:	b570      	push	{r4, r5, r6, lr}
 801f608:	4d06      	ldr	r5, [pc, #24]	@ (801f624 <_close_r+0x20>)
 801f60a:	0004      	movs	r4, r0
 801f60c:	0008      	movs	r0, r1
 801f60e:	602b      	str	r3, [r5, #0]
 801f610:	f7ed fcc8 	bl	800cfa4 <_close>
 801f614:	1c43      	adds	r3, r0, #1
 801f616:	d103      	bne.n	801f620 <_close_r+0x1c>
 801f618:	682b      	ldr	r3, [r5, #0]
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d000      	beq.n	801f620 <_close_r+0x1c>
 801f61e:	6023      	str	r3, [r4, #0]
 801f620:	bd70      	pop	{r4, r5, r6, pc}
 801f622:	46c0      	nop			@ (mov r8, r8)
 801f624:	200038ec 	.word	0x200038ec

0801f628 <_lseek_r>:
 801f628:	b570      	push	{r4, r5, r6, lr}
 801f62a:	0004      	movs	r4, r0
 801f62c:	0008      	movs	r0, r1
 801f62e:	0011      	movs	r1, r2
 801f630:	001a      	movs	r2, r3
 801f632:	2300      	movs	r3, #0
 801f634:	4d05      	ldr	r5, [pc, #20]	@ (801f64c <_lseek_r+0x24>)
 801f636:	602b      	str	r3, [r5, #0]
 801f638:	f7ed fcd5 	bl	800cfe6 <_lseek>
 801f63c:	1c43      	adds	r3, r0, #1
 801f63e:	d103      	bne.n	801f648 <_lseek_r+0x20>
 801f640:	682b      	ldr	r3, [r5, #0]
 801f642:	2b00      	cmp	r3, #0
 801f644:	d000      	beq.n	801f648 <_lseek_r+0x20>
 801f646:	6023      	str	r3, [r4, #0]
 801f648:	bd70      	pop	{r4, r5, r6, pc}
 801f64a:	46c0      	nop			@ (mov r8, r8)
 801f64c:	200038ec 	.word	0x200038ec

0801f650 <_read_r>:
 801f650:	b570      	push	{r4, r5, r6, lr}
 801f652:	0004      	movs	r4, r0
 801f654:	0008      	movs	r0, r1
 801f656:	0011      	movs	r1, r2
 801f658:	001a      	movs	r2, r3
 801f65a:	2300      	movs	r3, #0
 801f65c:	4d05      	ldr	r5, [pc, #20]	@ (801f674 <_read_r+0x24>)
 801f65e:	602b      	str	r3, [r5, #0]
 801f660:	f7ed fc83 	bl	800cf6a <_read>
 801f664:	1c43      	adds	r3, r0, #1
 801f666:	d103      	bne.n	801f670 <_read_r+0x20>
 801f668:	682b      	ldr	r3, [r5, #0]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	d000      	beq.n	801f670 <_read_r+0x20>
 801f66e:	6023      	str	r3, [r4, #0]
 801f670:	bd70      	pop	{r4, r5, r6, pc}
 801f672:	46c0      	nop			@ (mov r8, r8)
 801f674:	200038ec 	.word	0x200038ec

0801f678 <_write_r>:
 801f678:	b570      	push	{r4, r5, r6, lr}
 801f67a:	0004      	movs	r4, r0
 801f67c:	0008      	movs	r0, r1
 801f67e:	0011      	movs	r1, r2
 801f680:	001a      	movs	r2, r3
 801f682:	2300      	movs	r3, #0
 801f684:	4d05      	ldr	r5, [pc, #20]	@ (801f69c <_write_r+0x24>)
 801f686:	602b      	str	r3, [r5, #0]
 801f688:	f7ee f944 	bl	800d914 <_write>
 801f68c:	1c43      	adds	r3, r0, #1
 801f68e:	d103      	bne.n	801f698 <_write_r+0x20>
 801f690:	682b      	ldr	r3, [r5, #0]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d000      	beq.n	801f698 <_write_r+0x20>
 801f696:	6023      	str	r3, [r4, #0]
 801f698:	bd70      	pop	{r4, r5, r6, pc}
 801f69a:	46c0      	nop			@ (mov r8, r8)
 801f69c:	200038ec 	.word	0x200038ec

0801f6a0 <__errno>:
 801f6a0:	4b01      	ldr	r3, [pc, #4]	@ (801f6a8 <__errno+0x8>)
 801f6a2:	6818      	ldr	r0, [r3, #0]
 801f6a4:	4770      	bx	lr
 801f6a6:	46c0      	nop			@ (mov r8, r8)
 801f6a8:	200003c8 	.word	0x200003c8

0801f6ac <__libc_init_array>:
 801f6ac:	b570      	push	{r4, r5, r6, lr}
 801f6ae:	2600      	movs	r6, #0
 801f6b0:	4c0c      	ldr	r4, [pc, #48]	@ (801f6e4 <__libc_init_array+0x38>)
 801f6b2:	4d0d      	ldr	r5, [pc, #52]	@ (801f6e8 <__libc_init_array+0x3c>)
 801f6b4:	1b64      	subs	r4, r4, r5
 801f6b6:	10a4      	asrs	r4, r4, #2
 801f6b8:	42a6      	cmp	r6, r4
 801f6ba:	d109      	bne.n	801f6d0 <__libc_init_array+0x24>
 801f6bc:	2600      	movs	r6, #0
 801f6be:	f002 fee9 	bl	8022494 <_init>
 801f6c2:	4c0a      	ldr	r4, [pc, #40]	@ (801f6ec <__libc_init_array+0x40>)
 801f6c4:	4d0a      	ldr	r5, [pc, #40]	@ (801f6f0 <__libc_init_array+0x44>)
 801f6c6:	1b64      	subs	r4, r4, r5
 801f6c8:	10a4      	asrs	r4, r4, #2
 801f6ca:	42a6      	cmp	r6, r4
 801f6cc:	d105      	bne.n	801f6da <__libc_init_array+0x2e>
 801f6ce:	bd70      	pop	{r4, r5, r6, pc}
 801f6d0:	00b3      	lsls	r3, r6, #2
 801f6d2:	58eb      	ldr	r3, [r5, r3]
 801f6d4:	4798      	blx	r3
 801f6d6:	3601      	adds	r6, #1
 801f6d8:	e7ee      	b.n	801f6b8 <__libc_init_array+0xc>
 801f6da:	00b3      	lsls	r3, r6, #2
 801f6dc:	58eb      	ldr	r3, [r5, r3]
 801f6de:	4798      	blx	r3
 801f6e0:	3601      	adds	r6, #1
 801f6e2:	e7f2      	b.n	801f6ca <__libc_init_array+0x1e>
 801f6e4:	08024fa0 	.word	0x08024fa0
 801f6e8:	08024fa0 	.word	0x08024fa0
 801f6ec:	08024fa4 	.word	0x08024fa4
 801f6f0:	08024fa0 	.word	0x08024fa0

0801f6f4 <__retarget_lock_init_recursive>:
 801f6f4:	4770      	bx	lr

0801f6f6 <__retarget_lock_acquire_recursive>:
 801f6f6:	4770      	bx	lr

0801f6f8 <__retarget_lock_release_recursive>:
 801f6f8:	4770      	bx	lr

0801f6fa <memchr>:
 801f6fa:	b2c9      	uxtb	r1, r1
 801f6fc:	1882      	adds	r2, r0, r2
 801f6fe:	4290      	cmp	r0, r2
 801f700:	d101      	bne.n	801f706 <memchr+0xc>
 801f702:	2000      	movs	r0, #0
 801f704:	4770      	bx	lr
 801f706:	7803      	ldrb	r3, [r0, #0]
 801f708:	428b      	cmp	r3, r1
 801f70a:	d0fb      	beq.n	801f704 <memchr+0xa>
 801f70c:	3001      	adds	r0, #1
 801f70e:	e7f6      	b.n	801f6fe <memchr+0x4>

0801f710 <memcpy>:
 801f710:	2300      	movs	r3, #0
 801f712:	b510      	push	{r4, lr}
 801f714:	429a      	cmp	r2, r3
 801f716:	d100      	bne.n	801f71a <memcpy+0xa>
 801f718:	bd10      	pop	{r4, pc}
 801f71a:	5ccc      	ldrb	r4, [r1, r3]
 801f71c:	54c4      	strb	r4, [r0, r3]
 801f71e:	3301      	adds	r3, #1
 801f720:	e7f8      	b.n	801f714 <memcpy+0x4>
	...

0801f724 <nan>:
 801f724:	2000      	movs	r0, #0
 801f726:	4901      	ldr	r1, [pc, #4]	@ (801f72c <nan+0x8>)
 801f728:	4770      	bx	lr
 801f72a:	46c0      	nop			@ (mov r8, r8)
 801f72c:	7ff80000 	.word	0x7ff80000

0801f730 <quorem>:
 801f730:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f732:	6902      	ldr	r2, [r0, #16]
 801f734:	690f      	ldr	r7, [r1, #16]
 801f736:	b087      	sub	sp, #28
 801f738:	0006      	movs	r6, r0
 801f73a:	000b      	movs	r3, r1
 801f73c:	2000      	movs	r0, #0
 801f73e:	9102      	str	r1, [sp, #8]
 801f740:	42ba      	cmp	r2, r7
 801f742:	db6d      	blt.n	801f820 <quorem+0xf0>
 801f744:	3f01      	subs	r7, #1
 801f746:	00bc      	lsls	r4, r7, #2
 801f748:	3314      	adds	r3, #20
 801f74a:	9305      	str	r3, [sp, #20]
 801f74c:	191b      	adds	r3, r3, r4
 801f74e:	9303      	str	r3, [sp, #12]
 801f750:	0033      	movs	r3, r6
 801f752:	3314      	adds	r3, #20
 801f754:	191c      	adds	r4, r3, r4
 801f756:	9301      	str	r3, [sp, #4]
 801f758:	6823      	ldr	r3, [r4, #0]
 801f75a:	9304      	str	r3, [sp, #16]
 801f75c:	9b03      	ldr	r3, [sp, #12]
 801f75e:	9804      	ldr	r0, [sp, #16]
 801f760:	681d      	ldr	r5, [r3, #0]
 801f762:	3501      	adds	r5, #1
 801f764:	0029      	movs	r1, r5
 801f766:	f7e0 fd1d 	bl	80001a4 <__udivsi3>
 801f76a:	9b04      	ldr	r3, [sp, #16]
 801f76c:	9000      	str	r0, [sp, #0]
 801f76e:	42ab      	cmp	r3, r5
 801f770:	d32b      	bcc.n	801f7ca <quorem+0x9a>
 801f772:	9b05      	ldr	r3, [sp, #20]
 801f774:	9d01      	ldr	r5, [sp, #4]
 801f776:	469c      	mov	ip, r3
 801f778:	2300      	movs	r3, #0
 801f77a:	9305      	str	r3, [sp, #20]
 801f77c:	9304      	str	r3, [sp, #16]
 801f77e:	4662      	mov	r2, ip
 801f780:	ca08      	ldmia	r2!, {r3}
 801f782:	6828      	ldr	r0, [r5, #0]
 801f784:	4694      	mov	ip, r2
 801f786:	9a00      	ldr	r2, [sp, #0]
 801f788:	b299      	uxth	r1, r3
 801f78a:	4351      	muls	r1, r2
 801f78c:	9a05      	ldr	r2, [sp, #20]
 801f78e:	0c1b      	lsrs	r3, r3, #16
 801f790:	1889      	adds	r1, r1, r2
 801f792:	9a00      	ldr	r2, [sp, #0]
 801f794:	4353      	muls	r3, r2
 801f796:	0c0a      	lsrs	r2, r1, #16
 801f798:	189b      	adds	r3, r3, r2
 801f79a:	0c1a      	lsrs	r2, r3, #16
 801f79c:	b289      	uxth	r1, r1
 801f79e:	9205      	str	r2, [sp, #20]
 801f7a0:	b282      	uxth	r2, r0
 801f7a2:	1a52      	subs	r2, r2, r1
 801f7a4:	9904      	ldr	r1, [sp, #16]
 801f7a6:	0c00      	lsrs	r0, r0, #16
 801f7a8:	1852      	adds	r2, r2, r1
 801f7aa:	b29b      	uxth	r3, r3
 801f7ac:	1411      	asrs	r1, r2, #16
 801f7ae:	1ac3      	subs	r3, r0, r3
 801f7b0:	185b      	adds	r3, r3, r1
 801f7b2:	1419      	asrs	r1, r3, #16
 801f7b4:	b292      	uxth	r2, r2
 801f7b6:	041b      	lsls	r3, r3, #16
 801f7b8:	431a      	orrs	r2, r3
 801f7ba:	9b03      	ldr	r3, [sp, #12]
 801f7bc:	9104      	str	r1, [sp, #16]
 801f7be:	c504      	stmia	r5!, {r2}
 801f7c0:	4563      	cmp	r3, ip
 801f7c2:	d2dc      	bcs.n	801f77e <quorem+0x4e>
 801f7c4:	6823      	ldr	r3, [r4, #0]
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d030      	beq.n	801f82c <quorem+0xfc>
 801f7ca:	0030      	movs	r0, r6
 801f7cc:	9902      	ldr	r1, [sp, #8]
 801f7ce:	f001 fd7d 	bl	80212cc <__mcmp>
 801f7d2:	2800      	cmp	r0, #0
 801f7d4:	db23      	blt.n	801f81e <quorem+0xee>
 801f7d6:	0034      	movs	r4, r6
 801f7d8:	2500      	movs	r5, #0
 801f7da:	9902      	ldr	r1, [sp, #8]
 801f7dc:	3414      	adds	r4, #20
 801f7de:	3114      	adds	r1, #20
 801f7e0:	6823      	ldr	r3, [r4, #0]
 801f7e2:	c901      	ldmia	r1!, {r0}
 801f7e4:	9302      	str	r3, [sp, #8]
 801f7e6:	466b      	mov	r3, sp
 801f7e8:	891b      	ldrh	r3, [r3, #8]
 801f7ea:	b282      	uxth	r2, r0
 801f7ec:	1a9a      	subs	r2, r3, r2
 801f7ee:	9b02      	ldr	r3, [sp, #8]
 801f7f0:	1952      	adds	r2, r2, r5
 801f7f2:	0c00      	lsrs	r0, r0, #16
 801f7f4:	0c1b      	lsrs	r3, r3, #16
 801f7f6:	1a1b      	subs	r3, r3, r0
 801f7f8:	1410      	asrs	r0, r2, #16
 801f7fa:	181b      	adds	r3, r3, r0
 801f7fc:	141d      	asrs	r5, r3, #16
 801f7fe:	b292      	uxth	r2, r2
 801f800:	041b      	lsls	r3, r3, #16
 801f802:	431a      	orrs	r2, r3
 801f804:	9b03      	ldr	r3, [sp, #12]
 801f806:	c404      	stmia	r4!, {r2}
 801f808:	428b      	cmp	r3, r1
 801f80a:	d2e9      	bcs.n	801f7e0 <quorem+0xb0>
 801f80c:	9a01      	ldr	r2, [sp, #4]
 801f80e:	00bb      	lsls	r3, r7, #2
 801f810:	18d3      	adds	r3, r2, r3
 801f812:	681a      	ldr	r2, [r3, #0]
 801f814:	2a00      	cmp	r2, #0
 801f816:	d013      	beq.n	801f840 <quorem+0x110>
 801f818:	9b00      	ldr	r3, [sp, #0]
 801f81a:	3301      	adds	r3, #1
 801f81c:	9300      	str	r3, [sp, #0]
 801f81e:	9800      	ldr	r0, [sp, #0]
 801f820:	b007      	add	sp, #28
 801f822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	2b00      	cmp	r3, #0
 801f828:	d104      	bne.n	801f834 <quorem+0x104>
 801f82a:	3f01      	subs	r7, #1
 801f82c:	9b01      	ldr	r3, [sp, #4]
 801f82e:	3c04      	subs	r4, #4
 801f830:	42a3      	cmp	r3, r4
 801f832:	d3f7      	bcc.n	801f824 <quorem+0xf4>
 801f834:	6137      	str	r7, [r6, #16]
 801f836:	e7c8      	b.n	801f7ca <quorem+0x9a>
 801f838:	681a      	ldr	r2, [r3, #0]
 801f83a:	2a00      	cmp	r2, #0
 801f83c:	d104      	bne.n	801f848 <quorem+0x118>
 801f83e:	3f01      	subs	r7, #1
 801f840:	9a01      	ldr	r2, [sp, #4]
 801f842:	3b04      	subs	r3, #4
 801f844:	429a      	cmp	r2, r3
 801f846:	d3f7      	bcc.n	801f838 <quorem+0x108>
 801f848:	6137      	str	r7, [r6, #16]
 801f84a:	e7e5      	b.n	801f818 <quorem+0xe8>

0801f84c <_dtoa_r>:
 801f84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f84e:	0014      	movs	r4, r2
 801f850:	001d      	movs	r5, r3
 801f852:	69c6      	ldr	r6, [r0, #28]
 801f854:	b09d      	sub	sp, #116	@ 0x74
 801f856:	940a      	str	r4, [sp, #40]	@ 0x28
 801f858:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f85a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801f85c:	9003      	str	r0, [sp, #12]
 801f85e:	2e00      	cmp	r6, #0
 801f860:	d10f      	bne.n	801f882 <_dtoa_r+0x36>
 801f862:	2010      	movs	r0, #16
 801f864:	f001 f98a 	bl	8020b7c <malloc>
 801f868:	9b03      	ldr	r3, [sp, #12]
 801f86a:	1e02      	subs	r2, r0, #0
 801f86c:	61d8      	str	r0, [r3, #28]
 801f86e:	d104      	bne.n	801f87a <_dtoa_r+0x2e>
 801f870:	21ef      	movs	r1, #239	@ 0xef
 801f872:	4bc7      	ldr	r3, [pc, #796]	@ (801fb90 <_dtoa_r+0x344>)
 801f874:	48c7      	ldr	r0, [pc, #796]	@ (801fb94 <_dtoa_r+0x348>)
 801f876:	f002 fb2f 	bl	8021ed8 <__assert_func>
 801f87a:	6046      	str	r6, [r0, #4]
 801f87c:	6086      	str	r6, [r0, #8]
 801f87e:	6006      	str	r6, [r0, #0]
 801f880:	60c6      	str	r6, [r0, #12]
 801f882:	9b03      	ldr	r3, [sp, #12]
 801f884:	69db      	ldr	r3, [r3, #28]
 801f886:	6819      	ldr	r1, [r3, #0]
 801f888:	2900      	cmp	r1, #0
 801f88a:	d00b      	beq.n	801f8a4 <_dtoa_r+0x58>
 801f88c:	685a      	ldr	r2, [r3, #4]
 801f88e:	2301      	movs	r3, #1
 801f890:	4093      	lsls	r3, r2
 801f892:	604a      	str	r2, [r1, #4]
 801f894:	608b      	str	r3, [r1, #8]
 801f896:	9803      	ldr	r0, [sp, #12]
 801f898:	f001 fa82 	bl	8020da0 <_Bfree>
 801f89c:	2200      	movs	r2, #0
 801f89e:	9b03      	ldr	r3, [sp, #12]
 801f8a0:	69db      	ldr	r3, [r3, #28]
 801f8a2:	601a      	str	r2, [r3, #0]
 801f8a4:	2d00      	cmp	r5, #0
 801f8a6:	da1e      	bge.n	801f8e6 <_dtoa_r+0x9a>
 801f8a8:	2301      	movs	r3, #1
 801f8aa:	603b      	str	r3, [r7, #0]
 801f8ac:	006b      	lsls	r3, r5, #1
 801f8ae:	085b      	lsrs	r3, r3, #1
 801f8b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f8b2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f8b4:	4bb8      	ldr	r3, [pc, #736]	@ (801fb98 <_dtoa_r+0x34c>)
 801f8b6:	4ab8      	ldr	r2, [pc, #736]	@ (801fb98 <_dtoa_r+0x34c>)
 801f8b8:	403b      	ands	r3, r7
 801f8ba:	4293      	cmp	r3, r2
 801f8bc:	d116      	bne.n	801f8ec <_dtoa_r+0xa0>
 801f8be:	4bb7      	ldr	r3, [pc, #732]	@ (801fb9c <_dtoa_r+0x350>)
 801f8c0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f8c2:	6013      	str	r3, [r2, #0]
 801f8c4:	033b      	lsls	r3, r7, #12
 801f8c6:	0b1b      	lsrs	r3, r3, #12
 801f8c8:	4323      	orrs	r3, r4
 801f8ca:	d101      	bne.n	801f8d0 <_dtoa_r+0x84>
 801f8cc:	f000 fd83 	bl	80203d6 <_dtoa_r+0xb8a>
 801f8d0:	4bb3      	ldr	r3, [pc, #716]	@ (801fba0 <_dtoa_r+0x354>)
 801f8d2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f8d4:	9308      	str	r3, [sp, #32]
 801f8d6:	2a00      	cmp	r2, #0
 801f8d8:	d002      	beq.n	801f8e0 <_dtoa_r+0x94>
 801f8da:	4bb2      	ldr	r3, [pc, #712]	@ (801fba4 <_dtoa_r+0x358>)
 801f8dc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f8de:	6013      	str	r3, [r2, #0]
 801f8e0:	9808      	ldr	r0, [sp, #32]
 801f8e2:	b01d      	add	sp, #116	@ 0x74
 801f8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f8e6:	2300      	movs	r3, #0
 801f8e8:	603b      	str	r3, [r7, #0]
 801f8ea:	e7e2      	b.n	801f8b2 <_dtoa_r+0x66>
 801f8ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f8ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8f0:	9212      	str	r2, [sp, #72]	@ 0x48
 801f8f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f8f4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f8f6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	2300      	movs	r3, #0
 801f8fc:	f7e0 fdd8 	bl	80004b0 <__aeabi_dcmpeq>
 801f900:	1e06      	subs	r6, r0, #0
 801f902:	d00b      	beq.n	801f91c <_dtoa_r+0xd0>
 801f904:	2301      	movs	r3, #1
 801f906:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f908:	6013      	str	r3, [r2, #0]
 801f90a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d002      	beq.n	801f916 <_dtoa_r+0xca>
 801f910:	4ba5      	ldr	r3, [pc, #660]	@ (801fba8 <_dtoa_r+0x35c>)
 801f912:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f914:	6013      	str	r3, [r2, #0]
 801f916:	4ba5      	ldr	r3, [pc, #660]	@ (801fbac <_dtoa_r+0x360>)
 801f918:	9308      	str	r3, [sp, #32]
 801f91a:	e7e1      	b.n	801f8e0 <_dtoa_r+0x94>
 801f91c:	ab1a      	add	r3, sp, #104	@ 0x68
 801f91e:	9301      	str	r3, [sp, #4]
 801f920:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f922:	9300      	str	r3, [sp, #0]
 801f924:	9803      	ldr	r0, [sp, #12]
 801f926:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f928:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f92a:	f001 fdf1 	bl	8021510 <__d2b>
 801f92e:	007a      	lsls	r2, r7, #1
 801f930:	9005      	str	r0, [sp, #20]
 801f932:	0d52      	lsrs	r2, r2, #21
 801f934:	d100      	bne.n	801f938 <_dtoa_r+0xec>
 801f936:	e07b      	b.n	801fa30 <_dtoa_r+0x1e4>
 801f938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f93a:	9618      	str	r6, [sp, #96]	@ 0x60
 801f93c:	0319      	lsls	r1, r3, #12
 801f93e:	4b9c      	ldr	r3, [pc, #624]	@ (801fbb0 <_dtoa_r+0x364>)
 801f940:	0b09      	lsrs	r1, r1, #12
 801f942:	430b      	orrs	r3, r1
 801f944:	499b      	ldr	r1, [pc, #620]	@ (801fbb4 <_dtoa_r+0x368>)
 801f946:	1857      	adds	r7, r2, r1
 801f948:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f94a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f94c:	0019      	movs	r1, r3
 801f94e:	2200      	movs	r2, #0
 801f950:	4b99      	ldr	r3, [pc, #612]	@ (801fbb8 <_dtoa_r+0x36c>)
 801f952:	f7e3 f93b 	bl	8002bcc <__aeabi_dsub>
 801f956:	4a99      	ldr	r2, [pc, #612]	@ (801fbbc <_dtoa_r+0x370>)
 801f958:	4b99      	ldr	r3, [pc, #612]	@ (801fbc0 <_dtoa_r+0x374>)
 801f95a:	f7e2 fe6f 	bl	800263c <__aeabi_dmul>
 801f95e:	4a99      	ldr	r2, [pc, #612]	@ (801fbc4 <_dtoa_r+0x378>)
 801f960:	4b99      	ldr	r3, [pc, #612]	@ (801fbc8 <_dtoa_r+0x37c>)
 801f962:	f7e1 fec3 	bl	80016ec <__aeabi_dadd>
 801f966:	0004      	movs	r4, r0
 801f968:	0038      	movs	r0, r7
 801f96a:	000d      	movs	r5, r1
 801f96c:	f7e3 fd28 	bl	80033c0 <__aeabi_i2d>
 801f970:	4a96      	ldr	r2, [pc, #600]	@ (801fbcc <_dtoa_r+0x380>)
 801f972:	4b97      	ldr	r3, [pc, #604]	@ (801fbd0 <_dtoa_r+0x384>)
 801f974:	f7e2 fe62 	bl	800263c <__aeabi_dmul>
 801f978:	0002      	movs	r2, r0
 801f97a:	000b      	movs	r3, r1
 801f97c:	0020      	movs	r0, r4
 801f97e:	0029      	movs	r1, r5
 801f980:	f7e1 feb4 	bl	80016ec <__aeabi_dadd>
 801f984:	0004      	movs	r4, r0
 801f986:	000d      	movs	r5, r1
 801f988:	f7e3 fcde 	bl	8003348 <__aeabi_d2iz>
 801f98c:	2200      	movs	r2, #0
 801f98e:	9004      	str	r0, [sp, #16]
 801f990:	2300      	movs	r3, #0
 801f992:	0020      	movs	r0, r4
 801f994:	0029      	movs	r1, r5
 801f996:	f7e0 fd91 	bl	80004bc <__aeabi_dcmplt>
 801f99a:	2800      	cmp	r0, #0
 801f99c:	d00b      	beq.n	801f9b6 <_dtoa_r+0x16a>
 801f99e:	9804      	ldr	r0, [sp, #16]
 801f9a0:	f7e3 fd0e 	bl	80033c0 <__aeabi_i2d>
 801f9a4:	002b      	movs	r3, r5
 801f9a6:	0022      	movs	r2, r4
 801f9a8:	f7e0 fd82 	bl	80004b0 <__aeabi_dcmpeq>
 801f9ac:	4243      	negs	r3, r0
 801f9ae:	4158      	adcs	r0, r3
 801f9b0:	9b04      	ldr	r3, [sp, #16]
 801f9b2:	1a1b      	subs	r3, r3, r0
 801f9b4:	9304      	str	r3, [sp, #16]
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	9315      	str	r3, [sp, #84]	@ 0x54
 801f9ba:	9b04      	ldr	r3, [sp, #16]
 801f9bc:	2b16      	cmp	r3, #22
 801f9be:	d810      	bhi.n	801f9e2 <_dtoa_r+0x196>
 801f9c0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f9c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f9c4:	9a04      	ldr	r2, [sp, #16]
 801f9c6:	4b83      	ldr	r3, [pc, #524]	@ (801fbd4 <_dtoa_r+0x388>)
 801f9c8:	00d2      	lsls	r2, r2, #3
 801f9ca:	189b      	adds	r3, r3, r2
 801f9cc:	681a      	ldr	r2, [r3, #0]
 801f9ce:	685b      	ldr	r3, [r3, #4]
 801f9d0:	f7e0 fd74 	bl	80004bc <__aeabi_dcmplt>
 801f9d4:	2800      	cmp	r0, #0
 801f9d6:	d047      	beq.n	801fa68 <_dtoa_r+0x21c>
 801f9d8:	9b04      	ldr	r3, [sp, #16]
 801f9da:	3b01      	subs	r3, #1
 801f9dc:	9304      	str	r3, [sp, #16]
 801f9de:	2300      	movs	r3, #0
 801f9e0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f9e6:	9206      	str	r2, [sp, #24]
 801f9e8:	1bdb      	subs	r3, r3, r7
 801f9ea:	1e5a      	subs	r2, r3, #1
 801f9ec:	d53e      	bpl.n	801fa6c <_dtoa_r+0x220>
 801f9ee:	2201      	movs	r2, #1
 801f9f0:	1ad3      	subs	r3, r2, r3
 801f9f2:	9306      	str	r3, [sp, #24]
 801f9f4:	2300      	movs	r3, #0
 801f9f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801f9f8:	9b04      	ldr	r3, [sp, #16]
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	db38      	blt.n	801fa70 <_dtoa_r+0x224>
 801f9fe:	9a04      	ldr	r2, [sp, #16]
 801fa00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa02:	4694      	mov	ip, r2
 801fa04:	4463      	add	r3, ip
 801fa06:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa08:	2300      	movs	r3, #0
 801fa0a:	9214      	str	r2, [sp, #80]	@ 0x50
 801fa0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fa0e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fa10:	2401      	movs	r4, #1
 801fa12:	2b09      	cmp	r3, #9
 801fa14:	d867      	bhi.n	801fae6 <_dtoa_r+0x29a>
 801fa16:	2b05      	cmp	r3, #5
 801fa18:	dd02      	ble.n	801fa20 <_dtoa_r+0x1d4>
 801fa1a:	2400      	movs	r4, #0
 801fa1c:	3b04      	subs	r3, #4
 801fa1e:	9322      	str	r3, [sp, #136]	@ 0x88
 801fa20:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fa22:	1e98      	subs	r0, r3, #2
 801fa24:	2803      	cmp	r0, #3
 801fa26:	d867      	bhi.n	801faf8 <_dtoa_r+0x2ac>
 801fa28:	f7e0 fba8 	bl	800017c <__gnu_thumb1_case_uqi>
 801fa2c:	5b383a2b 	.word	0x5b383a2b
 801fa30:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fa32:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801fa34:	18f6      	adds	r6, r6, r3
 801fa36:	4b68      	ldr	r3, [pc, #416]	@ (801fbd8 <_dtoa_r+0x38c>)
 801fa38:	18f2      	adds	r2, r6, r3
 801fa3a:	2a20      	cmp	r2, #32
 801fa3c:	dd0f      	ble.n	801fa5e <_dtoa_r+0x212>
 801fa3e:	2340      	movs	r3, #64	@ 0x40
 801fa40:	1a9b      	subs	r3, r3, r2
 801fa42:	409f      	lsls	r7, r3
 801fa44:	4b65      	ldr	r3, [pc, #404]	@ (801fbdc <_dtoa_r+0x390>)
 801fa46:	0038      	movs	r0, r7
 801fa48:	18f3      	adds	r3, r6, r3
 801fa4a:	40dc      	lsrs	r4, r3
 801fa4c:	4320      	orrs	r0, r4
 801fa4e:	f7e3 fce5 	bl	800341c <__aeabi_ui2d>
 801fa52:	2201      	movs	r2, #1
 801fa54:	4b62      	ldr	r3, [pc, #392]	@ (801fbe0 <_dtoa_r+0x394>)
 801fa56:	1e77      	subs	r7, r6, #1
 801fa58:	18cb      	adds	r3, r1, r3
 801fa5a:	9218      	str	r2, [sp, #96]	@ 0x60
 801fa5c:	e776      	b.n	801f94c <_dtoa_r+0x100>
 801fa5e:	2320      	movs	r3, #32
 801fa60:	0020      	movs	r0, r4
 801fa62:	1a9b      	subs	r3, r3, r2
 801fa64:	4098      	lsls	r0, r3
 801fa66:	e7f2      	b.n	801fa4e <_dtoa_r+0x202>
 801fa68:	9015      	str	r0, [sp, #84]	@ 0x54
 801fa6a:	e7ba      	b.n	801f9e2 <_dtoa_r+0x196>
 801fa6c:	920d      	str	r2, [sp, #52]	@ 0x34
 801fa6e:	e7c3      	b.n	801f9f8 <_dtoa_r+0x1ac>
 801fa70:	9b06      	ldr	r3, [sp, #24]
 801fa72:	9a04      	ldr	r2, [sp, #16]
 801fa74:	1a9b      	subs	r3, r3, r2
 801fa76:	9306      	str	r3, [sp, #24]
 801fa78:	4253      	negs	r3, r2
 801fa7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	9314      	str	r3, [sp, #80]	@ 0x50
 801fa80:	e7c5      	b.n	801fa0e <_dtoa_r+0x1c2>
 801fa82:	2300      	movs	r3, #0
 801fa84:	9310      	str	r3, [sp, #64]	@ 0x40
 801fa86:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fa88:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	dc13      	bgt.n	801fab8 <_dtoa_r+0x26c>
 801fa90:	2301      	movs	r3, #1
 801fa92:	001a      	movs	r2, r3
 801fa94:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa96:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa98:	9223      	str	r2, [sp, #140]	@ 0x8c
 801fa9a:	e00d      	b.n	801fab8 <_dtoa_r+0x26c>
 801fa9c:	2301      	movs	r3, #1
 801fa9e:	e7f1      	b.n	801fa84 <_dtoa_r+0x238>
 801faa0:	2300      	movs	r3, #0
 801faa2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801faa4:	9310      	str	r3, [sp, #64]	@ 0x40
 801faa6:	4694      	mov	ip, r2
 801faa8:	9b04      	ldr	r3, [sp, #16]
 801faaa:	4463      	add	r3, ip
 801faac:	930e      	str	r3, [sp, #56]	@ 0x38
 801faae:	3301      	adds	r3, #1
 801fab0:	9309      	str	r3, [sp, #36]	@ 0x24
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	dc00      	bgt.n	801fab8 <_dtoa_r+0x26c>
 801fab6:	2301      	movs	r3, #1
 801fab8:	9a03      	ldr	r2, [sp, #12]
 801faba:	2100      	movs	r1, #0
 801fabc:	69d0      	ldr	r0, [r2, #28]
 801fabe:	2204      	movs	r2, #4
 801fac0:	0015      	movs	r5, r2
 801fac2:	3514      	adds	r5, #20
 801fac4:	429d      	cmp	r5, r3
 801fac6:	d91b      	bls.n	801fb00 <_dtoa_r+0x2b4>
 801fac8:	6041      	str	r1, [r0, #4]
 801faca:	9803      	ldr	r0, [sp, #12]
 801facc:	f001 f924 	bl	8020d18 <_Balloc>
 801fad0:	9008      	str	r0, [sp, #32]
 801fad2:	2800      	cmp	r0, #0
 801fad4:	d117      	bne.n	801fb06 <_dtoa_r+0x2ba>
 801fad6:	21b0      	movs	r1, #176	@ 0xb0
 801fad8:	4b42      	ldr	r3, [pc, #264]	@ (801fbe4 <_dtoa_r+0x398>)
 801fada:	482e      	ldr	r0, [pc, #184]	@ (801fb94 <_dtoa_r+0x348>)
 801fadc:	9a08      	ldr	r2, [sp, #32]
 801fade:	31ff      	adds	r1, #255	@ 0xff
 801fae0:	e6c9      	b.n	801f876 <_dtoa_r+0x2a>
 801fae2:	2301      	movs	r3, #1
 801fae4:	e7dd      	b.n	801faa2 <_dtoa_r+0x256>
 801fae6:	2300      	movs	r3, #0
 801fae8:	9410      	str	r4, [sp, #64]	@ 0x40
 801faea:	9322      	str	r3, [sp, #136]	@ 0x88
 801faec:	3b01      	subs	r3, #1
 801faee:	930e      	str	r3, [sp, #56]	@ 0x38
 801faf0:	9309      	str	r3, [sp, #36]	@ 0x24
 801faf2:	2200      	movs	r2, #0
 801faf4:	3313      	adds	r3, #19
 801faf6:	e7cf      	b.n	801fa98 <_dtoa_r+0x24c>
 801faf8:	2301      	movs	r3, #1
 801fafa:	9310      	str	r3, [sp, #64]	@ 0x40
 801fafc:	3b02      	subs	r3, #2
 801fafe:	e7f6      	b.n	801faee <_dtoa_r+0x2a2>
 801fb00:	3101      	adds	r1, #1
 801fb02:	0052      	lsls	r2, r2, #1
 801fb04:	e7dc      	b.n	801fac0 <_dtoa_r+0x274>
 801fb06:	9b03      	ldr	r3, [sp, #12]
 801fb08:	9a08      	ldr	r2, [sp, #32]
 801fb0a:	69db      	ldr	r3, [r3, #28]
 801fb0c:	601a      	str	r2, [r3, #0]
 801fb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb10:	2b0e      	cmp	r3, #14
 801fb12:	d900      	bls.n	801fb16 <_dtoa_r+0x2ca>
 801fb14:	e0d9      	b.n	801fcca <_dtoa_r+0x47e>
 801fb16:	2c00      	cmp	r4, #0
 801fb18:	d100      	bne.n	801fb1c <_dtoa_r+0x2d0>
 801fb1a:	e0d6      	b.n	801fcca <_dtoa_r+0x47e>
 801fb1c:	9b04      	ldr	r3, [sp, #16]
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	dd64      	ble.n	801fbec <_dtoa_r+0x3a0>
 801fb22:	210f      	movs	r1, #15
 801fb24:	9a04      	ldr	r2, [sp, #16]
 801fb26:	4b2b      	ldr	r3, [pc, #172]	@ (801fbd4 <_dtoa_r+0x388>)
 801fb28:	400a      	ands	r2, r1
 801fb2a:	00d2      	lsls	r2, r2, #3
 801fb2c:	189b      	adds	r3, r3, r2
 801fb2e:	681e      	ldr	r6, [r3, #0]
 801fb30:	685f      	ldr	r7, [r3, #4]
 801fb32:	9b04      	ldr	r3, [sp, #16]
 801fb34:	2402      	movs	r4, #2
 801fb36:	111d      	asrs	r5, r3, #4
 801fb38:	05db      	lsls	r3, r3, #23
 801fb3a:	d50a      	bpl.n	801fb52 <_dtoa_r+0x306>
 801fb3c:	4b2a      	ldr	r3, [pc, #168]	@ (801fbe8 <_dtoa_r+0x39c>)
 801fb3e:	400d      	ands	r5, r1
 801fb40:	6a1a      	ldr	r2, [r3, #32]
 801fb42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fb44:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb48:	f7e2 f934 	bl	8001db4 <__aeabi_ddiv>
 801fb4c:	900a      	str	r0, [sp, #40]	@ 0x28
 801fb4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fb50:	3401      	adds	r4, #1
 801fb52:	4b25      	ldr	r3, [pc, #148]	@ (801fbe8 <_dtoa_r+0x39c>)
 801fb54:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb56:	2d00      	cmp	r5, #0
 801fb58:	d108      	bne.n	801fb6c <_dtoa_r+0x320>
 801fb5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fb5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fb5e:	0032      	movs	r2, r6
 801fb60:	003b      	movs	r3, r7
 801fb62:	f7e2 f927 	bl	8001db4 <__aeabi_ddiv>
 801fb66:	900a      	str	r0, [sp, #40]	@ 0x28
 801fb68:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fb6a:	e05a      	b.n	801fc22 <_dtoa_r+0x3d6>
 801fb6c:	2301      	movs	r3, #1
 801fb6e:	421d      	tst	r5, r3
 801fb70:	d009      	beq.n	801fb86 <_dtoa_r+0x33a>
 801fb72:	18e4      	adds	r4, r4, r3
 801fb74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb76:	0030      	movs	r0, r6
 801fb78:	681a      	ldr	r2, [r3, #0]
 801fb7a:	685b      	ldr	r3, [r3, #4]
 801fb7c:	0039      	movs	r1, r7
 801fb7e:	f7e2 fd5d 	bl	800263c <__aeabi_dmul>
 801fb82:	0006      	movs	r6, r0
 801fb84:	000f      	movs	r7, r1
 801fb86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fb88:	106d      	asrs	r5, r5, #1
 801fb8a:	3308      	adds	r3, #8
 801fb8c:	e7e2      	b.n	801fb54 <_dtoa_r+0x308>
 801fb8e:	46c0      	nop			@ (mov r8, r8)
 801fb90:	08024cfa 	.word	0x08024cfa
 801fb94:	08024d11 	.word	0x08024d11
 801fb98:	7ff00000 	.word	0x7ff00000
 801fb9c:	0000270f 	.word	0x0000270f
 801fba0:	08024cf6 	.word	0x08024cf6
 801fba4:	08024cf9 	.word	0x08024cf9
 801fba8:	08024cc2 	.word	0x08024cc2
 801fbac:	08024cc1 	.word	0x08024cc1
 801fbb0:	3ff00000 	.word	0x3ff00000
 801fbb4:	fffffc01 	.word	0xfffffc01
 801fbb8:	3ff80000 	.word	0x3ff80000
 801fbbc:	636f4361 	.word	0x636f4361
 801fbc0:	3fd287a7 	.word	0x3fd287a7
 801fbc4:	8b60c8b3 	.word	0x8b60c8b3
 801fbc8:	3fc68a28 	.word	0x3fc68a28
 801fbcc:	509f79fb 	.word	0x509f79fb
 801fbd0:	3fd34413 	.word	0x3fd34413
 801fbd4:	08024e68 	.word	0x08024e68
 801fbd8:	00000432 	.word	0x00000432
 801fbdc:	00000412 	.word	0x00000412
 801fbe0:	fe100000 	.word	0xfe100000
 801fbe4:	08024d69 	.word	0x08024d69
 801fbe8:	08024e40 	.word	0x08024e40
 801fbec:	9b04      	ldr	r3, [sp, #16]
 801fbee:	2402      	movs	r4, #2
 801fbf0:	2b00      	cmp	r3, #0
 801fbf2:	d016      	beq.n	801fc22 <_dtoa_r+0x3d6>
 801fbf4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fbf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fbf8:	220f      	movs	r2, #15
 801fbfa:	425d      	negs	r5, r3
 801fbfc:	402a      	ands	r2, r5
 801fbfe:	4bd7      	ldr	r3, [pc, #860]	@ (801ff5c <_dtoa_r+0x710>)
 801fc00:	00d2      	lsls	r2, r2, #3
 801fc02:	189b      	adds	r3, r3, r2
 801fc04:	681a      	ldr	r2, [r3, #0]
 801fc06:	685b      	ldr	r3, [r3, #4]
 801fc08:	f7e2 fd18 	bl	800263c <__aeabi_dmul>
 801fc0c:	2701      	movs	r7, #1
 801fc0e:	2300      	movs	r3, #0
 801fc10:	900a      	str	r0, [sp, #40]	@ 0x28
 801fc12:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fc14:	4ed2      	ldr	r6, [pc, #840]	@ (801ff60 <_dtoa_r+0x714>)
 801fc16:	112d      	asrs	r5, r5, #4
 801fc18:	2d00      	cmp	r5, #0
 801fc1a:	d000      	beq.n	801fc1e <_dtoa_r+0x3d2>
 801fc1c:	e0ba      	b.n	801fd94 <_dtoa_r+0x548>
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d1a1      	bne.n	801fb66 <_dtoa_r+0x31a>
 801fc22:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fc24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d100      	bne.n	801fc2e <_dtoa_r+0x3e2>
 801fc2c:	e0bd      	b.n	801fdaa <_dtoa_r+0x55e>
 801fc2e:	2200      	movs	r2, #0
 801fc30:	0030      	movs	r0, r6
 801fc32:	0039      	movs	r1, r7
 801fc34:	4bcb      	ldr	r3, [pc, #812]	@ (801ff64 <_dtoa_r+0x718>)
 801fc36:	f7e0 fc41 	bl	80004bc <__aeabi_dcmplt>
 801fc3a:	2800      	cmp	r0, #0
 801fc3c:	d100      	bne.n	801fc40 <_dtoa_r+0x3f4>
 801fc3e:	e0b4      	b.n	801fdaa <_dtoa_r+0x55e>
 801fc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc42:	2b00      	cmp	r3, #0
 801fc44:	d100      	bne.n	801fc48 <_dtoa_r+0x3fc>
 801fc46:	e0b0      	b.n	801fdaa <_dtoa_r+0x55e>
 801fc48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	dd39      	ble.n	801fcc2 <_dtoa_r+0x476>
 801fc4e:	9b04      	ldr	r3, [sp, #16]
 801fc50:	2200      	movs	r2, #0
 801fc52:	3b01      	subs	r3, #1
 801fc54:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc56:	0030      	movs	r0, r6
 801fc58:	4bc3      	ldr	r3, [pc, #780]	@ (801ff68 <_dtoa_r+0x71c>)
 801fc5a:	0039      	movs	r1, r7
 801fc5c:	f7e2 fcee 	bl	800263c <__aeabi_dmul>
 801fc60:	900a      	str	r0, [sp, #40]	@ 0x28
 801fc62:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fc64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc66:	3401      	adds	r4, #1
 801fc68:	0020      	movs	r0, r4
 801fc6a:	9311      	str	r3, [sp, #68]	@ 0x44
 801fc6c:	f7e3 fba8 	bl	80033c0 <__aeabi_i2d>
 801fc70:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fc74:	f7e2 fce2 	bl	800263c <__aeabi_dmul>
 801fc78:	4bbc      	ldr	r3, [pc, #752]	@ (801ff6c <_dtoa_r+0x720>)
 801fc7a:	2200      	movs	r2, #0
 801fc7c:	f7e1 fd36 	bl	80016ec <__aeabi_dadd>
 801fc80:	4bbb      	ldr	r3, [pc, #748]	@ (801ff70 <_dtoa_r+0x724>)
 801fc82:	0006      	movs	r6, r0
 801fc84:	18cf      	adds	r7, r1, r3
 801fc86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d000      	beq.n	801fc8e <_dtoa_r+0x442>
 801fc8c:	e091      	b.n	801fdb2 <_dtoa_r+0x566>
 801fc8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fc90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fc92:	2200      	movs	r2, #0
 801fc94:	4bb7      	ldr	r3, [pc, #732]	@ (801ff74 <_dtoa_r+0x728>)
 801fc96:	f7e2 ff99 	bl	8002bcc <__aeabi_dsub>
 801fc9a:	0032      	movs	r2, r6
 801fc9c:	003b      	movs	r3, r7
 801fc9e:	0004      	movs	r4, r0
 801fca0:	000d      	movs	r5, r1
 801fca2:	f7e0 fc1f 	bl	80004e4 <__aeabi_dcmpgt>
 801fca6:	2800      	cmp	r0, #0
 801fca8:	d000      	beq.n	801fcac <_dtoa_r+0x460>
 801fcaa:	e29d      	b.n	80201e8 <_dtoa_r+0x99c>
 801fcac:	2180      	movs	r1, #128	@ 0x80
 801fcae:	0609      	lsls	r1, r1, #24
 801fcb0:	187b      	adds	r3, r7, r1
 801fcb2:	0032      	movs	r2, r6
 801fcb4:	0020      	movs	r0, r4
 801fcb6:	0029      	movs	r1, r5
 801fcb8:	f7e0 fc00 	bl	80004bc <__aeabi_dcmplt>
 801fcbc:	2800      	cmp	r0, #0
 801fcbe:	d000      	beq.n	801fcc2 <_dtoa_r+0x476>
 801fcc0:	e130      	b.n	801ff24 <_dtoa_r+0x6d8>
 801fcc2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fcc4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fcc6:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcc8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fcca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	da00      	bge.n	801fcd2 <_dtoa_r+0x486>
 801fcd0:	e177      	b.n	801ffc2 <_dtoa_r+0x776>
 801fcd2:	9a04      	ldr	r2, [sp, #16]
 801fcd4:	2a0e      	cmp	r2, #14
 801fcd6:	dd00      	ble.n	801fcda <_dtoa_r+0x48e>
 801fcd8:	e173      	b.n	801ffc2 <_dtoa_r+0x776>
 801fcda:	4ba0      	ldr	r3, [pc, #640]	@ (801ff5c <_dtoa_r+0x710>)
 801fcdc:	00d2      	lsls	r2, r2, #3
 801fcde:	189b      	adds	r3, r3, r2
 801fce0:	685c      	ldr	r4, [r3, #4]
 801fce2:	681b      	ldr	r3, [r3, #0]
 801fce4:	9306      	str	r3, [sp, #24]
 801fce6:	9407      	str	r4, [sp, #28]
 801fce8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	da03      	bge.n	801fcf6 <_dtoa_r+0x4aa>
 801fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	dc00      	bgt.n	801fcf6 <_dtoa_r+0x4aa>
 801fcf4:	e106      	b.n	801ff04 <_dtoa_r+0x6b8>
 801fcf6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fcf8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcfc:	9d08      	ldr	r5, [sp, #32]
 801fcfe:	3b01      	subs	r3, #1
 801fd00:	195b      	adds	r3, r3, r5
 801fd02:	930a      	str	r3, [sp, #40]	@ 0x28
 801fd04:	9a06      	ldr	r2, [sp, #24]
 801fd06:	9b07      	ldr	r3, [sp, #28]
 801fd08:	0030      	movs	r0, r6
 801fd0a:	0039      	movs	r1, r7
 801fd0c:	f7e2 f852 	bl	8001db4 <__aeabi_ddiv>
 801fd10:	f7e3 fb1a 	bl	8003348 <__aeabi_d2iz>
 801fd14:	9009      	str	r0, [sp, #36]	@ 0x24
 801fd16:	f7e3 fb53 	bl	80033c0 <__aeabi_i2d>
 801fd1a:	9a06      	ldr	r2, [sp, #24]
 801fd1c:	9b07      	ldr	r3, [sp, #28]
 801fd1e:	f7e2 fc8d 	bl	800263c <__aeabi_dmul>
 801fd22:	0002      	movs	r2, r0
 801fd24:	000b      	movs	r3, r1
 801fd26:	0030      	movs	r0, r6
 801fd28:	0039      	movs	r1, r7
 801fd2a:	f7e2 ff4f 	bl	8002bcc <__aeabi_dsub>
 801fd2e:	002b      	movs	r3, r5
 801fd30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fd32:	3501      	adds	r5, #1
 801fd34:	3230      	adds	r2, #48	@ 0x30
 801fd36:	701a      	strb	r2, [r3, #0]
 801fd38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fd3a:	002c      	movs	r4, r5
 801fd3c:	429a      	cmp	r2, r3
 801fd3e:	d000      	beq.n	801fd42 <_dtoa_r+0x4f6>
 801fd40:	e131      	b.n	801ffa6 <_dtoa_r+0x75a>
 801fd42:	0002      	movs	r2, r0
 801fd44:	000b      	movs	r3, r1
 801fd46:	f7e1 fcd1 	bl	80016ec <__aeabi_dadd>
 801fd4a:	9a06      	ldr	r2, [sp, #24]
 801fd4c:	9b07      	ldr	r3, [sp, #28]
 801fd4e:	0006      	movs	r6, r0
 801fd50:	000f      	movs	r7, r1
 801fd52:	f7e0 fbc7 	bl	80004e4 <__aeabi_dcmpgt>
 801fd56:	2800      	cmp	r0, #0
 801fd58:	d000      	beq.n	801fd5c <_dtoa_r+0x510>
 801fd5a:	e10f      	b.n	801ff7c <_dtoa_r+0x730>
 801fd5c:	9a06      	ldr	r2, [sp, #24]
 801fd5e:	9b07      	ldr	r3, [sp, #28]
 801fd60:	0030      	movs	r0, r6
 801fd62:	0039      	movs	r1, r7
 801fd64:	f7e0 fba4 	bl	80004b0 <__aeabi_dcmpeq>
 801fd68:	2800      	cmp	r0, #0
 801fd6a:	d003      	beq.n	801fd74 <_dtoa_r+0x528>
 801fd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd6e:	07dd      	lsls	r5, r3, #31
 801fd70:	d500      	bpl.n	801fd74 <_dtoa_r+0x528>
 801fd72:	e103      	b.n	801ff7c <_dtoa_r+0x730>
 801fd74:	9905      	ldr	r1, [sp, #20]
 801fd76:	9803      	ldr	r0, [sp, #12]
 801fd78:	f001 f812 	bl	8020da0 <_Bfree>
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	7023      	strb	r3, [r4, #0]
 801fd80:	9b04      	ldr	r3, [sp, #16]
 801fd82:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fd84:	3301      	adds	r3, #1
 801fd86:	6013      	str	r3, [r2, #0]
 801fd88:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d100      	bne.n	801fd90 <_dtoa_r+0x544>
 801fd8e:	e5a7      	b.n	801f8e0 <_dtoa_r+0x94>
 801fd90:	601c      	str	r4, [r3, #0]
 801fd92:	e5a5      	b.n	801f8e0 <_dtoa_r+0x94>
 801fd94:	423d      	tst	r5, r7
 801fd96:	d005      	beq.n	801fda4 <_dtoa_r+0x558>
 801fd98:	6832      	ldr	r2, [r6, #0]
 801fd9a:	6873      	ldr	r3, [r6, #4]
 801fd9c:	f7e2 fc4e 	bl	800263c <__aeabi_dmul>
 801fda0:	003b      	movs	r3, r7
 801fda2:	3401      	adds	r4, #1
 801fda4:	106d      	asrs	r5, r5, #1
 801fda6:	3608      	adds	r6, #8
 801fda8:	e736      	b.n	801fc18 <_dtoa_r+0x3cc>
 801fdaa:	9b04      	ldr	r3, [sp, #16]
 801fdac:	930c      	str	r3, [sp, #48]	@ 0x30
 801fdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdb0:	e75a      	b.n	801fc68 <_dtoa_r+0x41c>
 801fdb2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fdb4:	4b69      	ldr	r3, [pc, #420]	@ (801ff5c <_dtoa_r+0x710>)
 801fdb6:	3a01      	subs	r2, #1
 801fdb8:	00d2      	lsls	r2, r2, #3
 801fdba:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fdbc:	189b      	adds	r3, r3, r2
 801fdbe:	681a      	ldr	r2, [r3, #0]
 801fdc0:	685b      	ldr	r3, [r3, #4]
 801fdc2:	2900      	cmp	r1, #0
 801fdc4:	d04c      	beq.n	801fe60 <_dtoa_r+0x614>
 801fdc6:	2000      	movs	r0, #0
 801fdc8:	496b      	ldr	r1, [pc, #428]	@ (801ff78 <_dtoa_r+0x72c>)
 801fdca:	f7e1 fff3 	bl	8001db4 <__aeabi_ddiv>
 801fdce:	0032      	movs	r2, r6
 801fdd0:	003b      	movs	r3, r7
 801fdd2:	f7e2 fefb 	bl	8002bcc <__aeabi_dsub>
 801fdd6:	9a08      	ldr	r2, [sp, #32]
 801fdd8:	0006      	movs	r6, r0
 801fdda:	4694      	mov	ip, r2
 801fddc:	000f      	movs	r7, r1
 801fdde:	9b08      	ldr	r3, [sp, #32]
 801fde0:	9316      	str	r3, [sp, #88]	@ 0x58
 801fde2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fde4:	4463      	add	r3, ip
 801fde6:	9311      	str	r3, [sp, #68]	@ 0x44
 801fde8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fdea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fdec:	f7e3 faac 	bl	8003348 <__aeabi_d2iz>
 801fdf0:	0005      	movs	r5, r0
 801fdf2:	f7e3 fae5 	bl	80033c0 <__aeabi_i2d>
 801fdf6:	0002      	movs	r2, r0
 801fdf8:	000b      	movs	r3, r1
 801fdfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fdfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fdfe:	f7e2 fee5 	bl	8002bcc <__aeabi_dsub>
 801fe02:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fe04:	3530      	adds	r5, #48	@ 0x30
 801fe06:	1c5c      	adds	r4, r3, #1
 801fe08:	701d      	strb	r5, [r3, #0]
 801fe0a:	0032      	movs	r2, r6
 801fe0c:	003b      	movs	r3, r7
 801fe0e:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe10:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe12:	f7e0 fb53 	bl	80004bc <__aeabi_dcmplt>
 801fe16:	2800      	cmp	r0, #0
 801fe18:	d16a      	bne.n	801fef0 <_dtoa_r+0x6a4>
 801fe1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fe1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fe1e:	2000      	movs	r0, #0
 801fe20:	4950      	ldr	r1, [pc, #320]	@ (801ff64 <_dtoa_r+0x718>)
 801fe22:	f7e2 fed3 	bl	8002bcc <__aeabi_dsub>
 801fe26:	0032      	movs	r2, r6
 801fe28:	003b      	movs	r3, r7
 801fe2a:	f7e0 fb47 	bl	80004bc <__aeabi_dcmplt>
 801fe2e:	2800      	cmp	r0, #0
 801fe30:	d000      	beq.n	801fe34 <_dtoa_r+0x5e8>
 801fe32:	e0a5      	b.n	801ff80 <_dtoa_r+0x734>
 801fe34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fe36:	42a3      	cmp	r3, r4
 801fe38:	d100      	bne.n	801fe3c <_dtoa_r+0x5f0>
 801fe3a:	e742      	b.n	801fcc2 <_dtoa_r+0x476>
 801fe3c:	2200      	movs	r2, #0
 801fe3e:	0030      	movs	r0, r6
 801fe40:	0039      	movs	r1, r7
 801fe42:	4b49      	ldr	r3, [pc, #292]	@ (801ff68 <_dtoa_r+0x71c>)
 801fe44:	f7e2 fbfa 	bl	800263c <__aeabi_dmul>
 801fe48:	2200      	movs	r2, #0
 801fe4a:	0006      	movs	r6, r0
 801fe4c:	000f      	movs	r7, r1
 801fe4e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fe50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fe52:	4b45      	ldr	r3, [pc, #276]	@ (801ff68 <_dtoa_r+0x71c>)
 801fe54:	f7e2 fbf2 	bl	800263c <__aeabi_dmul>
 801fe58:	9416      	str	r4, [sp, #88]	@ 0x58
 801fe5a:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe5e:	e7c3      	b.n	801fde8 <_dtoa_r+0x59c>
 801fe60:	0030      	movs	r0, r6
 801fe62:	0039      	movs	r1, r7
 801fe64:	f7e2 fbea 	bl	800263c <__aeabi_dmul>
 801fe68:	9d08      	ldr	r5, [sp, #32]
 801fe6a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fe6c:	002b      	movs	r3, r5
 801fe6e:	4694      	mov	ip, r2
 801fe70:	9016      	str	r0, [sp, #88]	@ 0x58
 801fe72:	9117      	str	r1, [sp, #92]	@ 0x5c
 801fe74:	4463      	add	r3, ip
 801fe76:	9319      	str	r3, [sp, #100]	@ 0x64
 801fe78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fe7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fe7c:	f7e3 fa64 	bl	8003348 <__aeabi_d2iz>
 801fe80:	0004      	movs	r4, r0
 801fe82:	f7e3 fa9d 	bl	80033c0 <__aeabi_i2d>
 801fe86:	000b      	movs	r3, r1
 801fe88:	0002      	movs	r2, r0
 801fe8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fe8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fe8e:	f7e2 fe9d 	bl	8002bcc <__aeabi_dsub>
 801fe92:	3430      	adds	r4, #48	@ 0x30
 801fe94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fe96:	702c      	strb	r4, [r5, #0]
 801fe98:	3501      	adds	r5, #1
 801fe9a:	0006      	movs	r6, r0
 801fe9c:	000f      	movs	r7, r1
 801fe9e:	42ab      	cmp	r3, r5
 801fea0:	d129      	bne.n	801fef6 <_dtoa_r+0x6aa>
 801fea2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801fea4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fea6:	9b08      	ldr	r3, [sp, #32]
 801fea8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801feaa:	469c      	mov	ip, r3
 801feac:	2200      	movs	r2, #0
 801feae:	4b32      	ldr	r3, [pc, #200]	@ (801ff78 <_dtoa_r+0x72c>)
 801feb0:	4464      	add	r4, ip
 801feb2:	f7e1 fc1b 	bl	80016ec <__aeabi_dadd>
 801feb6:	0002      	movs	r2, r0
 801feb8:	000b      	movs	r3, r1
 801feba:	0030      	movs	r0, r6
 801febc:	0039      	movs	r1, r7
 801febe:	f7e0 fb11 	bl	80004e4 <__aeabi_dcmpgt>
 801fec2:	2800      	cmp	r0, #0
 801fec4:	d15c      	bne.n	801ff80 <_dtoa_r+0x734>
 801fec6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fec8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801feca:	2000      	movs	r0, #0
 801fecc:	492a      	ldr	r1, [pc, #168]	@ (801ff78 <_dtoa_r+0x72c>)
 801fece:	f7e2 fe7d 	bl	8002bcc <__aeabi_dsub>
 801fed2:	0002      	movs	r2, r0
 801fed4:	000b      	movs	r3, r1
 801fed6:	0030      	movs	r0, r6
 801fed8:	0039      	movs	r1, r7
 801feda:	f7e0 faef 	bl	80004bc <__aeabi_dcmplt>
 801fede:	2800      	cmp	r0, #0
 801fee0:	d100      	bne.n	801fee4 <_dtoa_r+0x698>
 801fee2:	e6ee      	b.n	801fcc2 <_dtoa_r+0x476>
 801fee4:	0023      	movs	r3, r4
 801fee6:	3c01      	subs	r4, #1
 801fee8:	7822      	ldrb	r2, [r4, #0]
 801feea:	2a30      	cmp	r2, #48	@ 0x30
 801feec:	d0fa      	beq.n	801fee4 <_dtoa_r+0x698>
 801feee:	001c      	movs	r4, r3
 801fef0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fef2:	9304      	str	r3, [sp, #16]
 801fef4:	e73e      	b.n	801fd74 <_dtoa_r+0x528>
 801fef6:	2200      	movs	r2, #0
 801fef8:	4b1b      	ldr	r3, [pc, #108]	@ (801ff68 <_dtoa_r+0x71c>)
 801fefa:	f7e2 fb9f 	bl	800263c <__aeabi_dmul>
 801fefe:	900a      	str	r0, [sp, #40]	@ 0x28
 801ff00:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ff02:	e7b9      	b.n	801fe78 <_dtoa_r+0x62c>
 801ff04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ff06:	2b00      	cmp	r3, #0
 801ff08:	d10c      	bne.n	801ff24 <_dtoa_r+0x6d8>
 801ff0a:	9806      	ldr	r0, [sp, #24]
 801ff0c:	9907      	ldr	r1, [sp, #28]
 801ff0e:	2200      	movs	r2, #0
 801ff10:	4b18      	ldr	r3, [pc, #96]	@ (801ff74 <_dtoa_r+0x728>)
 801ff12:	f7e2 fb93 	bl	800263c <__aeabi_dmul>
 801ff16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ff18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff1a:	f7e0 faed 	bl	80004f8 <__aeabi_dcmpge>
 801ff1e:	2800      	cmp	r0, #0
 801ff20:	d100      	bne.n	801ff24 <_dtoa_r+0x6d8>
 801ff22:	e164      	b.n	80201ee <_dtoa_r+0x9a2>
 801ff24:	2600      	movs	r6, #0
 801ff26:	0037      	movs	r7, r6
 801ff28:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ff2a:	9c08      	ldr	r4, [sp, #32]
 801ff2c:	43db      	mvns	r3, r3
 801ff2e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff30:	2300      	movs	r3, #0
 801ff32:	9304      	str	r3, [sp, #16]
 801ff34:	0031      	movs	r1, r6
 801ff36:	9803      	ldr	r0, [sp, #12]
 801ff38:	f000 ff32 	bl	8020da0 <_Bfree>
 801ff3c:	2f00      	cmp	r7, #0
 801ff3e:	d0d7      	beq.n	801fef0 <_dtoa_r+0x6a4>
 801ff40:	9b04      	ldr	r3, [sp, #16]
 801ff42:	2b00      	cmp	r3, #0
 801ff44:	d005      	beq.n	801ff52 <_dtoa_r+0x706>
 801ff46:	42bb      	cmp	r3, r7
 801ff48:	d003      	beq.n	801ff52 <_dtoa_r+0x706>
 801ff4a:	0019      	movs	r1, r3
 801ff4c:	9803      	ldr	r0, [sp, #12]
 801ff4e:	f000 ff27 	bl	8020da0 <_Bfree>
 801ff52:	0039      	movs	r1, r7
 801ff54:	9803      	ldr	r0, [sp, #12]
 801ff56:	f000 ff23 	bl	8020da0 <_Bfree>
 801ff5a:	e7c9      	b.n	801fef0 <_dtoa_r+0x6a4>
 801ff5c:	08024e68 	.word	0x08024e68
 801ff60:	08024e40 	.word	0x08024e40
 801ff64:	3ff00000 	.word	0x3ff00000
 801ff68:	40240000 	.word	0x40240000
 801ff6c:	401c0000 	.word	0x401c0000
 801ff70:	fcc00000 	.word	0xfcc00000
 801ff74:	40140000 	.word	0x40140000
 801ff78:	3fe00000 	.word	0x3fe00000
 801ff7c:	9b04      	ldr	r3, [sp, #16]
 801ff7e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ff80:	0023      	movs	r3, r4
 801ff82:	001c      	movs	r4, r3
 801ff84:	3b01      	subs	r3, #1
 801ff86:	781a      	ldrb	r2, [r3, #0]
 801ff88:	2a39      	cmp	r2, #57	@ 0x39
 801ff8a:	d108      	bne.n	801ff9e <_dtoa_r+0x752>
 801ff8c:	9a08      	ldr	r2, [sp, #32]
 801ff8e:	429a      	cmp	r2, r3
 801ff90:	d1f7      	bne.n	801ff82 <_dtoa_r+0x736>
 801ff92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ff94:	9908      	ldr	r1, [sp, #32]
 801ff96:	3201      	adds	r2, #1
 801ff98:	920c      	str	r2, [sp, #48]	@ 0x30
 801ff9a:	2230      	movs	r2, #48	@ 0x30
 801ff9c:	700a      	strb	r2, [r1, #0]
 801ff9e:	781a      	ldrb	r2, [r3, #0]
 801ffa0:	3201      	adds	r2, #1
 801ffa2:	701a      	strb	r2, [r3, #0]
 801ffa4:	e7a4      	b.n	801fef0 <_dtoa_r+0x6a4>
 801ffa6:	2200      	movs	r2, #0
 801ffa8:	4bc6      	ldr	r3, [pc, #792]	@ (80202c4 <_dtoa_r+0xa78>)
 801ffaa:	f7e2 fb47 	bl	800263c <__aeabi_dmul>
 801ffae:	2200      	movs	r2, #0
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	0006      	movs	r6, r0
 801ffb4:	000f      	movs	r7, r1
 801ffb6:	f7e0 fa7b 	bl	80004b0 <__aeabi_dcmpeq>
 801ffba:	2800      	cmp	r0, #0
 801ffbc:	d100      	bne.n	801ffc0 <_dtoa_r+0x774>
 801ffbe:	e6a1      	b.n	801fd04 <_dtoa_r+0x4b8>
 801ffc0:	e6d8      	b.n	801fd74 <_dtoa_r+0x528>
 801ffc2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ffc4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ffc6:	9c06      	ldr	r4, [sp, #24]
 801ffc8:	2f00      	cmp	r7, #0
 801ffca:	d014      	beq.n	801fff6 <_dtoa_r+0x7aa>
 801ffcc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ffce:	2a01      	cmp	r2, #1
 801ffd0:	dd00      	ble.n	801ffd4 <_dtoa_r+0x788>
 801ffd2:	e0c8      	b.n	8020166 <_dtoa_r+0x91a>
 801ffd4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ffd6:	2a00      	cmp	r2, #0
 801ffd8:	d100      	bne.n	801ffdc <_dtoa_r+0x790>
 801ffda:	e0be      	b.n	802015a <_dtoa_r+0x90e>
 801ffdc:	4aba      	ldr	r2, [pc, #744]	@ (80202c8 <_dtoa_r+0xa7c>)
 801ffde:	189b      	adds	r3, r3, r2
 801ffe0:	9a06      	ldr	r2, [sp, #24]
 801ffe2:	2101      	movs	r1, #1
 801ffe4:	18d2      	adds	r2, r2, r3
 801ffe6:	9206      	str	r2, [sp, #24]
 801ffe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ffea:	9803      	ldr	r0, [sp, #12]
 801ffec:	18d3      	adds	r3, r2, r3
 801ffee:	930d      	str	r3, [sp, #52]	@ 0x34
 801fff0:	f000 ffda 	bl	8020fa8 <__i2b>
 801fff4:	0007      	movs	r7, r0
 801fff6:	2c00      	cmp	r4, #0
 801fff8:	d00e      	beq.n	8020018 <_dtoa_r+0x7cc>
 801fffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fffc:	2b00      	cmp	r3, #0
 801fffe:	dd0b      	ble.n	8020018 <_dtoa_r+0x7cc>
 8020000:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020002:	0023      	movs	r3, r4
 8020004:	4294      	cmp	r4, r2
 8020006:	dd00      	ble.n	802000a <_dtoa_r+0x7be>
 8020008:	0013      	movs	r3, r2
 802000a:	9a06      	ldr	r2, [sp, #24]
 802000c:	1ae4      	subs	r4, r4, r3
 802000e:	1ad2      	subs	r2, r2, r3
 8020010:	9206      	str	r2, [sp, #24]
 8020012:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020014:	1ad3      	subs	r3, r2, r3
 8020016:	930d      	str	r3, [sp, #52]	@ 0x34
 8020018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802001a:	2b00      	cmp	r3, #0
 802001c:	d01f      	beq.n	802005e <_dtoa_r+0x812>
 802001e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020020:	2b00      	cmp	r3, #0
 8020022:	d100      	bne.n	8020026 <_dtoa_r+0x7da>
 8020024:	e0b5      	b.n	8020192 <_dtoa_r+0x946>
 8020026:	2d00      	cmp	r5, #0
 8020028:	d010      	beq.n	802004c <_dtoa_r+0x800>
 802002a:	0039      	movs	r1, r7
 802002c:	002a      	movs	r2, r5
 802002e:	9803      	ldr	r0, [sp, #12]
 8020030:	f001 f884 	bl	802113c <__pow5mult>
 8020034:	9a05      	ldr	r2, [sp, #20]
 8020036:	0001      	movs	r1, r0
 8020038:	0007      	movs	r7, r0
 802003a:	9803      	ldr	r0, [sp, #12]
 802003c:	f000 ffcc 	bl	8020fd8 <__multiply>
 8020040:	0006      	movs	r6, r0
 8020042:	9905      	ldr	r1, [sp, #20]
 8020044:	9803      	ldr	r0, [sp, #12]
 8020046:	f000 feab 	bl	8020da0 <_Bfree>
 802004a:	9605      	str	r6, [sp, #20]
 802004c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802004e:	1b5a      	subs	r2, r3, r5
 8020050:	42ab      	cmp	r3, r5
 8020052:	d004      	beq.n	802005e <_dtoa_r+0x812>
 8020054:	9905      	ldr	r1, [sp, #20]
 8020056:	9803      	ldr	r0, [sp, #12]
 8020058:	f001 f870 	bl	802113c <__pow5mult>
 802005c:	9005      	str	r0, [sp, #20]
 802005e:	2101      	movs	r1, #1
 8020060:	9803      	ldr	r0, [sp, #12]
 8020062:	f000 ffa1 	bl	8020fa8 <__i2b>
 8020066:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020068:	0006      	movs	r6, r0
 802006a:	2b00      	cmp	r3, #0
 802006c:	d100      	bne.n	8020070 <_dtoa_r+0x824>
 802006e:	e1bc      	b.n	80203ea <_dtoa_r+0xb9e>
 8020070:	001a      	movs	r2, r3
 8020072:	0001      	movs	r1, r0
 8020074:	9803      	ldr	r0, [sp, #12]
 8020076:	f001 f861 	bl	802113c <__pow5mult>
 802007a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802007c:	0006      	movs	r6, r0
 802007e:	2500      	movs	r5, #0
 8020080:	2b01      	cmp	r3, #1
 8020082:	dc16      	bgt.n	80200b2 <_dtoa_r+0x866>
 8020084:	2500      	movs	r5, #0
 8020086:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020088:	42ab      	cmp	r3, r5
 802008a:	d10e      	bne.n	80200aa <_dtoa_r+0x85e>
 802008c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802008e:	031b      	lsls	r3, r3, #12
 8020090:	42ab      	cmp	r3, r5
 8020092:	d10a      	bne.n	80200aa <_dtoa_r+0x85e>
 8020094:	4b8d      	ldr	r3, [pc, #564]	@ (80202cc <_dtoa_r+0xa80>)
 8020096:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020098:	4213      	tst	r3, r2
 802009a:	d006      	beq.n	80200aa <_dtoa_r+0x85e>
 802009c:	9b06      	ldr	r3, [sp, #24]
 802009e:	3501      	adds	r5, #1
 80200a0:	3301      	adds	r3, #1
 80200a2:	9306      	str	r3, [sp, #24]
 80200a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80200a6:	3301      	adds	r3, #1
 80200a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80200aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80200ac:	2001      	movs	r0, #1
 80200ae:	2b00      	cmp	r3, #0
 80200b0:	d008      	beq.n	80200c4 <_dtoa_r+0x878>
 80200b2:	6933      	ldr	r3, [r6, #16]
 80200b4:	3303      	adds	r3, #3
 80200b6:	009b      	lsls	r3, r3, #2
 80200b8:	18f3      	adds	r3, r6, r3
 80200ba:	6858      	ldr	r0, [r3, #4]
 80200bc:	f000 ff24 	bl	8020f08 <__hi0bits>
 80200c0:	2320      	movs	r3, #32
 80200c2:	1a18      	subs	r0, r3, r0
 80200c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80200c6:	1818      	adds	r0, r3, r0
 80200c8:	0002      	movs	r2, r0
 80200ca:	231f      	movs	r3, #31
 80200cc:	401a      	ands	r2, r3
 80200ce:	4218      	tst	r0, r3
 80200d0:	d065      	beq.n	802019e <_dtoa_r+0x952>
 80200d2:	3301      	adds	r3, #1
 80200d4:	1a9b      	subs	r3, r3, r2
 80200d6:	2b04      	cmp	r3, #4
 80200d8:	dd5d      	ble.n	8020196 <_dtoa_r+0x94a>
 80200da:	231c      	movs	r3, #28
 80200dc:	1a9b      	subs	r3, r3, r2
 80200de:	9a06      	ldr	r2, [sp, #24]
 80200e0:	18e4      	adds	r4, r4, r3
 80200e2:	18d2      	adds	r2, r2, r3
 80200e4:	9206      	str	r2, [sp, #24]
 80200e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80200e8:	18d3      	adds	r3, r2, r3
 80200ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80200ec:	9b06      	ldr	r3, [sp, #24]
 80200ee:	2b00      	cmp	r3, #0
 80200f0:	dd05      	ble.n	80200fe <_dtoa_r+0x8b2>
 80200f2:	001a      	movs	r2, r3
 80200f4:	9905      	ldr	r1, [sp, #20]
 80200f6:	9803      	ldr	r0, [sp, #12]
 80200f8:	f001 f87c 	bl	80211f4 <__lshift>
 80200fc:	9005      	str	r0, [sp, #20]
 80200fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020100:	2b00      	cmp	r3, #0
 8020102:	dd05      	ble.n	8020110 <_dtoa_r+0x8c4>
 8020104:	0031      	movs	r1, r6
 8020106:	001a      	movs	r2, r3
 8020108:	9803      	ldr	r0, [sp, #12]
 802010a:	f001 f873 	bl	80211f4 <__lshift>
 802010e:	0006      	movs	r6, r0
 8020110:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020112:	2b00      	cmp	r3, #0
 8020114:	d045      	beq.n	80201a2 <_dtoa_r+0x956>
 8020116:	0031      	movs	r1, r6
 8020118:	9805      	ldr	r0, [sp, #20]
 802011a:	f001 f8d7 	bl	80212cc <__mcmp>
 802011e:	2800      	cmp	r0, #0
 8020120:	da3f      	bge.n	80201a2 <_dtoa_r+0x956>
 8020122:	9b04      	ldr	r3, [sp, #16]
 8020124:	220a      	movs	r2, #10
 8020126:	3b01      	subs	r3, #1
 8020128:	930c      	str	r3, [sp, #48]	@ 0x30
 802012a:	9905      	ldr	r1, [sp, #20]
 802012c:	2300      	movs	r3, #0
 802012e:	9803      	ldr	r0, [sp, #12]
 8020130:	f000 fe5a 	bl	8020de8 <__multadd>
 8020134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020136:	9005      	str	r0, [sp, #20]
 8020138:	2b00      	cmp	r3, #0
 802013a:	d100      	bne.n	802013e <_dtoa_r+0x8f2>
 802013c:	e15c      	b.n	80203f8 <_dtoa_r+0xbac>
 802013e:	2300      	movs	r3, #0
 8020140:	0039      	movs	r1, r7
 8020142:	220a      	movs	r2, #10
 8020144:	9803      	ldr	r0, [sp, #12]
 8020146:	f000 fe4f 	bl	8020de8 <__multadd>
 802014a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802014c:	0007      	movs	r7, r0
 802014e:	2b00      	cmp	r3, #0
 8020150:	dc55      	bgt.n	80201fe <_dtoa_r+0x9b2>
 8020152:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020154:	2b02      	cmp	r3, #2
 8020156:	dc2d      	bgt.n	80201b4 <_dtoa_r+0x968>
 8020158:	e051      	b.n	80201fe <_dtoa_r+0x9b2>
 802015a:	2336      	movs	r3, #54	@ 0x36
 802015c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802015e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020160:	9c06      	ldr	r4, [sp, #24]
 8020162:	1a9b      	subs	r3, r3, r2
 8020164:	e73c      	b.n	801ffe0 <_dtoa_r+0x794>
 8020166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020168:	1e5d      	subs	r5, r3, #1
 802016a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802016c:	42ab      	cmp	r3, r5
 802016e:	db08      	blt.n	8020182 <_dtoa_r+0x936>
 8020170:	1b5d      	subs	r5, r3, r5
 8020172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020174:	9c06      	ldr	r4, [sp, #24]
 8020176:	2b00      	cmp	r3, #0
 8020178:	db00      	blt.n	802017c <_dtoa_r+0x930>
 802017a:	e731      	b.n	801ffe0 <_dtoa_r+0x794>
 802017c:	1ae4      	subs	r4, r4, r3
 802017e:	2300      	movs	r3, #0
 8020180:	e72e      	b.n	801ffe0 <_dtoa_r+0x794>
 8020182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020184:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020186:	1aeb      	subs	r3, r5, r3
 8020188:	18d3      	adds	r3, r2, r3
 802018a:	950f      	str	r5, [sp, #60]	@ 0x3c
 802018c:	9314      	str	r3, [sp, #80]	@ 0x50
 802018e:	2500      	movs	r5, #0
 8020190:	e7ef      	b.n	8020172 <_dtoa_r+0x926>
 8020192:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020194:	e75e      	b.n	8020054 <_dtoa_r+0x808>
 8020196:	2b04      	cmp	r3, #4
 8020198:	d0a8      	beq.n	80200ec <_dtoa_r+0x8a0>
 802019a:	331c      	adds	r3, #28
 802019c:	e79f      	b.n	80200de <_dtoa_r+0x892>
 802019e:	0013      	movs	r3, r2
 80201a0:	e7fb      	b.n	802019a <_dtoa_r+0x94e>
 80201a2:	9b04      	ldr	r3, [sp, #16]
 80201a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80201a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80201a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	dc23      	bgt.n	80201f6 <_dtoa_r+0x9aa>
 80201ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80201b0:	2b02      	cmp	r3, #2
 80201b2:	dd20      	ble.n	80201f6 <_dtoa_r+0x9aa>
 80201b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	d000      	beq.n	80201bc <_dtoa_r+0x970>
 80201ba:	e6b5      	b.n	801ff28 <_dtoa_r+0x6dc>
 80201bc:	0031      	movs	r1, r6
 80201be:	2205      	movs	r2, #5
 80201c0:	9803      	ldr	r0, [sp, #12]
 80201c2:	f000 fe11 	bl	8020de8 <__multadd>
 80201c6:	0006      	movs	r6, r0
 80201c8:	0001      	movs	r1, r0
 80201ca:	9805      	ldr	r0, [sp, #20]
 80201cc:	f001 f87e 	bl	80212cc <__mcmp>
 80201d0:	2800      	cmp	r0, #0
 80201d2:	dc00      	bgt.n	80201d6 <_dtoa_r+0x98a>
 80201d4:	e6a8      	b.n	801ff28 <_dtoa_r+0x6dc>
 80201d6:	9b08      	ldr	r3, [sp, #32]
 80201d8:	9a08      	ldr	r2, [sp, #32]
 80201da:	1c5c      	adds	r4, r3, #1
 80201dc:	2331      	movs	r3, #49	@ 0x31
 80201de:	7013      	strb	r3, [r2, #0]
 80201e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80201e2:	3301      	adds	r3, #1
 80201e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80201e6:	e6a3      	b.n	801ff30 <_dtoa_r+0x6e4>
 80201e8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80201ea:	0037      	movs	r7, r6
 80201ec:	e7f3      	b.n	80201d6 <_dtoa_r+0x98a>
 80201ee:	9b04      	ldr	r3, [sp, #16]
 80201f0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80201f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80201f4:	e7f9      	b.n	80201ea <_dtoa_r+0x99e>
 80201f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80201f8:	2b00      	cmp	r3, #0
 80201fa:	d100      	bne.n	80201fe <_dtoa_r+0x9b2>
 80201fc:	e100      	b.n	8020400 <_dtoa_r+0xbb4>
 80201fe:	2c00      	cmp	r4, #0
 8020200:	dd05      	ble.n	802020e <_dtoa_r+0x9c2>
 8020202:	0039      	movs	r1, r7
 8020204:	0022      	movs	r2, r4
 8020206:	9803      	ldr	r0, [sp, #12]
 8020208:	f000 fff4 	bl	80211f4 <__lshift>
 802020c:	0007      	movs	r7, r0
 802020e:	0038      	movs	r0, r7
 8020210:	2d00      	cmp	r5, #0
 8020212:	d018      	beq.n	8020246 <_dtoa_r+0x9fa>
 8020214:	6879      	ldr	r1, [r7, #4]
 8020216:	9803      	ldr	r0, [sp, #12]
 8020218:	f000 fd7e 	bl	8020d18 <_Balloc>
 802021c:	1e04      	subs	r4, r0, #0
 802021e:	d105      	bne.n	802022c <_dtoa_r+0x9e0>
 8020220:	0022      	movs	r2, r4
 8020222:	4b2b      	ldr	r3, [pc, #172]	@ (80202d0 <_dtoa_r+0xa84>)
 8020224:	482b      	ldr	r0, [pc, #172]	@ (80202d4 <_dtoa_r+0xa88>)
 8020226:	492c      	ldr	r1, [pc, #176]	@ (80202d8 <_dtoa_r+0xa8c>)
 8020228:	f7ff fb25 	bl	801f876 <_dtoa_r+0x2a>
 802022c:	0039      	movs	r1, r7
 802022e:	693a      	ldr	r2, [r7, #16]
 8020230:	310c      	adds	r1, #12
 8020232:	3202      	adds	r2, #2
 8020234:	0092      	lsls	r2, r2, #2
 8020236:	300c      	adds	r0, #12
 8020238:	f7ff fa6a 	bl	801f710 <memcpy>
 802023c:	2201      	movs	r2, #1
 802023e:	0021      	movs	r1, r4
 8020240:	9803      	ldr	r0, [sp, #12]
 8020242:	f000 ffd7 	bl	80211f4 <__lshift>
 8020246:	9b08      	ldr	r3, [sp, #32]
 8020248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802024a:	9306      	str	r3, [sp, #24]
 802024c:	3b01      	subs	r3, #1
 802024e:	189b      	adds	r3, r3, r2
 8020250:	2201      	movs	r2, #1
 8020252:	9704      	str	r7, [sp, #16]
 8020254:	0007      	movs	r7, r0
 8020256:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802025a:	4013      	ands	r3, r2
 802025c:	930e      	str	r3, [sp, #56]	@ 0x38
 802025e:	0031      	movs	r1, r6
 8020260:	9805      	ldr	r0, [sp, #20]
 8020262:	f7ff fa65 	bl	801f730 <quorem>
 8020266:	9904      	ldr	r1, [sp, #16]
 8020268:	0005      	movs	r5, r0
 802026a:	900a      	str	r0, [sp, #40]	@ 0x28
 802026c:	9805      	ldr	r0, [sp, #20]
 802026e:	f001 f82d 	bl	80212cc <__mcmp>
 8020272:	003a      	movs	r2, r7
 8020274:	900d      	str	r0, [sp, #52]	@ 0x34
 8020276:	0031      	movs	r1, r6
 8020278:	9803      	ldr	r0, [sp, #12]
 802027a:	f001 f843 	bl	8021304 <__mdiff>
 802027e:	2201      	movs	r2, #1
 8020280:	68c3      	ldr	r3, [r0, #12]
 8020282:	0004      	movs	r4, r0
 8020284:	3530      	adds	r5, #48	@ 0x30
 8020286:	9209      	str	r2, [sp, #36]	@ 0x24
 8020288:	2b00      	cmp	r3, #0
 802028a:	d104      	bne.n	8020296 <_dtoa_r+0xa4a>
 802028c:	0001      	movs	r1, r0
 802028e:	9805      	ldr	r0, [sp, #20]
 8020290:	f001 f81c 	bl	80212cc <__mcmp>
 8020294:	9009      	str	r0, [sp, #36]	@ 0x24
 8020296:	0021      	movs	r1, r4
 8020298:	9803      	ldr	r0, [sp, #12]
 802029a:	f000 fd81 	bl	8020da0 <_Bfree>
 802029e:	9b06      	ldr	r3, [sp, #24]
 80202a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80202a2:	1c5c      	adds	r4, r3, #1
 80202a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80202a6:	4313      	orrs	r3, r2
 80202a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202aa:	4313      	orrs	r3, r2
 80202ac:	d116      	bne.n	80202dc <_dtoa_r+0xa90>
 80202ae:	2d39      	cmp	r5, #57	@ 0x39
 80202b0:	d02f      	beq.n	8020312 <_dtoa_r+0xac6>
 80202b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	dd01      	ble.n	80202bc <_dtoa_r+0xa70>
 80202b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80202ba:	3531      	adds	r5, #49	@ 0x31
 80202bc:	9b06      	ldr	r3, [sp, #24]
 80202be:	701d      	strb	r5, [r3, #0]
 80202c0:	e638      	b.n	801ff34 <_dtoa_r+0x6e8>
 80202c2:	46c0      	nop			@ (mov r8, r8)
 80202c4:	40240000 	.word	0x40240000
 80202c8:	00000433 	.word	0x00000433
 80202cc:	7ff00000 	.word	0x7ff00000
 80202d0:	08024d69 	.word	0x08024d69
 80202d4:	08024d11 	.word	0x08024d11
 80202d8:	000002ef 	.word	0x000002ef
 80202dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80202de:	2b00      	cmp	r3, #0
 80202e0:	db04      	blt.n	80202ec <_dtoa_r+0xaa0>
 80202e2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80202e4:	4313      	orrs	r3, r2
 80202e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80202e8:	4313      	orrs	r3, r2
 80202ea:	d11e      	bne.n	802032a <_dtoa_r+0xade>
 80202ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202ee:	2b00      	cmp	r3, #0
 80202f0:	dde4      	ble.n	80202bc <_dtoa_r+0xa70>
 80202f2:	9905      	ldr	r1, [sp, #20]
 80202f4:	2201      	movs	r2, #1
 80202f6:	9803      	ldr	r0, [sp, #12]
 80202f8:	f000 ff7c 	bl	80211f4 <__lshift>
 80202fc:	0031      	movs	r1, r6
 80202fe:	9005      	str	r0, [sp, #20]
 8020300:	f000 ffe4 	bl	80212cc <__mcmp>
 8020304:	2800      	cmp	r0, #0
 8020306:	dc02      	bgt.n	802030e <_dtoa_r+0xac2>
 8020308:	d1d8      	bne.n	80202bc <_dtoa_r+0xa70>
 802030a:	07eb      	lsls	r3, r5, #31
 802030c:	d5d6      	bpl.n	80202bc <_dtoa_r+0xa70>
 802030e:	2d39      	cmp	r5, #57	@ 0x39
 8020310:	d1d2      	bne.n	80202b8 <_dtoa_r+0xa6c>
 8020312:	2339      	movs	r3, #57	@ 0x39
 8020314:	9a06      	ldr	r2, [sp, #24]
 8020316:	7013      	strb	r3, [r2, #0]
 8020318:	0023      	movs	r3, r4
 802031a:	001c      	movs	r4, r3
 802031c:	3b01      	subs	r3, #1
 802031e:	781a      	ldrb	r2, [r3, #0]
 8020320:	2a39      	cmp	r2, #57	@ 0x39
 8020322:	d04f      	beq.n	80203c4 <_dtoa_r+0xb78>
 8020324:	3201      	adds	r2, #1
 8020326:	701a      	strb	r2, [r3, #0]
 8020328:	e604      	b.n	801ff34 <_dtoa_r+0x6e8>
 802032a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802032c:	2b00      	cmp	r3, #0
 802032e:	dd03      	ble.n	8020338 <_dtoa_r+0xaec>
 8020330:	2d39      	cmp	r5, #57	@ 0x39
 8020332:	d0ee      	beq.n	8020312 <_dtoa_r+0xac6>
 8020334:	3501      	adds	r5, #1
 8020336:	e7c1      	b.n	80202bc <_dtoa_r+0xa70>
 8020338:	9b06      	ldr	r3, [sp, #24]
 802033a:	9a06      	ldr	r2, [sp, #24]
 802033c:	701d      	strb	r5, [r3, #0]
 802033e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020340:	4293      	cmp	r3, r2
 8020342:	d02a      	beq.n	802039a <_dtoa_r+0xb4e>
 8020344:	2300      	movs	r3, #0
 8020346:	220a      	movs	r2, #10
 8020348:	9905      	ldr	r1, [sp, #20]
 802034a:	9803      	ldr	r0, [sp, #12]
 802034c:	f000 fd4c 	bl	8020de8 <__multadd>
 8020350:	9b04      	ldr	r3, [sp, #16]
 8020352:	9005      	str	r0, [sp, #20]
 8020354:	42bb      	cmp	r3, r7
 8020356:	d109      	bne.n	802036c <_dtoa_r+0xb20>
 8020358:	2300      	movs	r3, #0
 802035a:	220a      	movs	r2, #10
 802035c:	9904      	ldr	r1, [sp, #16]
 802035e:	9803      	ldr	r0, [sp, #12]
 8020360:	f000 fd42 	bl	8020de8 <__multadd>
 8020364:	9004      	str	r0, [sp, #16]
 8020366:	0007      	movs	r7, r0
 8020368:	9406      	str	r4, [sp, #24]
 802036a:	e778      	b.n	802025e <_dtoa_r+0xa12>
 802036c:	9904      	ldr	r1, [sp, #16]
 802036e:	2300      	movs	r3, #0
 8020370:	220a      	movs	r2, #10
 8020372:	9803      	ldr	r0, [sp, #12]
 8020374:	f000 fd38 	bl	8020de8 <__multadd>
 8020378:	2300      	movs	r3, #0
 802037a:	9004      	str	r0, [sp, #16]
 802037c:	220a      	movs	r2, #10
 802037e:	0039      	movs	r1, r7
 8020380:	9803      	ldr	r0, [sp, #12]
 8020382:	f000 fd31 	bl	8020de8 <__multadd>
 8020386:	e7ee      	b.n	8020366 <_dtoa_r+0xb1a>
 8020388:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802038a:	2401      	movs	r4, #1
 802038c:	2b00      	cmp	r3, #0
 802038e:	dd00      	ble.n	8020392 <_dtoa_r+0xb46>
 8020390:	001c      	movs	r4, r3
 8020392:	9b08      	ldr	r3, [sp, #32]
 8020394:	191c      	adds	r4, r3, r4
 8020396:	2300      	movs	r3, #0
 8020398:	9304      	str	r3, [sp, #16]
 802039a:	9905      	ldr	r1, [sp, #20]
 802039c:	2201      	movs	r2, #1
 802039e:	9803      	ldr	r0, [sp, #12]
 80203a0:	f000 ff28 	bl	80211f4 <__lshift>
 80203a4:	0031      	movs	r1, r6
 80203a6:	9005      	str	r0, [sp, #20]
 80203a8:	f000 ff90 	bl	80212cc <__mcmp>
 80203ac:	2800      	cmp	r0, #0
 80203ae:	dcb3      	bgt.n	8020318 <_dtoa_r+0xacc>
 80203b0:	d101      	bne.n	80203b6 <_dtoa_r+0xb6a>
 80203b2:	07ed      	lsls	r5, r5, #31
 80203b4:	d4b0      	bmi.n	8020318 <_dtoa_r+0xacc>
 80203b6:	0023      	movs	r3, r4
 80203b8:	001c      	movs	r4, r3
 80203ba:	3b01      	subs	r3, #1
 80203bc:	781a      	ldrb	r2, [r3, #0]
 80203be:	2a30      	cmp	r2, #48	@ 0x30
 80203c0:	d0fa      	beq.n	80203b8 <_dtoa_r+0xb6c>
 80203c2:	e5b7      	b.n	801ff34 <_dtoa_r+0x6e8>
 80203c4:	9a08      	ldr	r2, [sp, #32]
 80203c6:	429a      	cmp	r2, r3
 80203c8:	d1a7      	bne.n	802031a <_dtoa_r+0xace>
 80203ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80203cc:	3301      	adds	r3, #1
 80203ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80203d0:	2331      	movs	r3, #49	@ 0x31
 80203d2:	7013      	strb	r3, [r2, #0]
 80203d4:	e5ae      	b.n	801ff34 <_dtoa_r+0x6e8>
 80203d6:	4b15      	ldr	r3, [pc, #84]	@ (802042c <_dtoa_r+0xbe0>)
 80203d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80203da:	9308      	str	r3, [sp, #32]
 80203dc:	4b14      	ldr	r3, [pc, #80]	@ (8020430 <_dtoa_r+0xbe4>)
 80203de:	2a00      	cmp	r2, #0
 80203e0:	d001      	beq.n	80203e6 <_dtoa_r+0xb9a>
 80203e2:	f7ff fa7b 	bl	801f8dc <_dtoa_r+0x90>
 80203e6:	f7ff fa7b 	bl	801f8e0 <_dtoa_r+0x94>
 80203ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80203ec:	2b01      	cmp	r3, #1
 80203ee:	dc00      	bgt.n	80203f2 <_dtoa_r+0xba6>
 80203f0:	e648      	b.n	8020084 <_dtoa_r+0x838>
 80203f2:	2001      	movs	r0, #1
 80203f4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80203f6:	e665      	b.n	80200c4 <_dtoa_r+0x878>
 80203f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80203fa:	2b00      	cmp	r3, #0
 80203fc:	dc00      	bgt.n	8020400 <_dtoa_r+0xbb4>
 80203fe:	e6d6      	b.n	80201ae <_dtoa_r+0x962>
 8020400:	2400      	movs	r4, #0
 8020402:	0031      	movs	r1, r6
 8020404:	9805      	ldr	r0, [sp, #20]
 8020406:	f7ff f993 	bl	801f730 <quorem>
 802040a:	9b08      	ldr	r3, [sp, #32]
 802040c:	3030      	adds	r0, #48	@ 0x30
 802040e:	5518      	strb	r0, [r3, r4]
 8020410:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020412:	3401      	adds	r4, #1
 8020414:	0005      	movs	r5, r0
 8020416:	429c      	cmp	r4, r3
 8020418:	dab6      	bge.n	8020388 <_dtoa_r+0xb3c>
 802041a:	2300      	movs	r3, #0
 802041c:	220a      	movs	r2, #10
 802041e:	9905      	ldr	r1, [sp, #20]
 8020420:	9803      	ldr	r0, [sp, #12]
 8020422:	f000 fce1 	bl	8020de8 <__multadd>
 8020426:	9005      	str	r0, [sp, #20]
 8020428:	e7eb      	b.n	8020402 <_dtoa_r+0xbb6>
 802042a:	46c0      	nop			@ (mov r8, r8)
 802042c:	08024ced 	.word	0x08024ced
 8020430:	08024cf5 	.word	0x08024cf5

08020434 <_free_r>:
 8020434:	b570      	push	{r4, r5, r6, lr}
 8020436:	0005      	movs	r5, r0
 8020438:	1e0c      	subs	r4, r1, #0
 802043a:	d010      	beq.n	802045e <_free_r+0x2a>
 802043c:	3c04      	subs	r4, #4
 802043e:	6823      	ldr	r3, [r4, #0]
 8020440:	2b00      	cmp	r3, #0
 8020442:	da00      	bge.n	8020446 <_free_r+0x12>
 8020444:	18e4      	adds	r4, r4, r3
 8020446:	0028      	movs	r0, r5
 8020448:	f000 fc56 	bl	8020cf8 <__malloc_lock>
 802044c:	4a1d      	ldr	r2, [pc, #116]	@ (80204c4 <_free_r+0x90>)
 802044e:	6813      	ldr	r3, [r2, #0]
 8020450:	2b00      	cmp	r3, #0
 8020452:	d105      	bne.n	8020460 <_free_r+0x2c>
 8020454:	6063      	str	r3, [r4, #4]
 8020456:	6014      	str	r4, [r2, #0]
 8020458:	0028      	movs	r0, r5
 802045a:	f000 fc55 	bl	8020d08 <__malloc_unlock>
 802045e:	bd70      	pop	{r4, r5, r6, pc}
 8020460:	42a3      	cmp	r3, r4
 8020462:	d908      	bls.n	8020476 <_free_r+0x42>
 8020464:	6820      	ldr	r0, [r4, #0]
 8020466:	1821      	adds	r1, r4, r0
 8020468:	428b      	cmp	r3, r1
 802046a:	d1f3      	bne.n	8020454 <_free_r+0x20>
 802046c:	6819      	ldr	r1, [r3, #0]
 802046e:	685b      	ldr	r3, [r3, #4]
 8020470:	1809      	adds	r1, r1, r0
 8020472:	6021      	str	r1, [r4, #0]
 8020474:	e7ee      	b.n	8020454 <_free_r+0x20>
 8020476:	001a      	movs	r2, r3
 8020478:	685b      	ldr	r3, [r3, #4]
 802047a:	2b00      	cmp	r3, #0
 802047c:	d001      	beq.n	8020482 <_free_r+0x4e>
 802047e:	42a3      	cmp	r3, r4
 8020480:	d9f9      	bls.n	8020476 <_free_r+0x42>
 8020482:	6811      	ldr	r1, [r2, #0]
 8020484:	1850      	adds	r0, r2, r1
 8020486:	42a0      	cmp	r0, r4
 8020488:	d10b      	bne.n	80204a2 <_free_r+0x6e>
 802048a:	6820      	ldr	r0, [r4, #0]
 802048c:	1809      	adds	r1, r1, r0
 802048e:	1850      	adds	r0, r2, r1
 8020490:	6011      	str	r1, [r2, #0]
 8020492:	4283      	cmp	r3, r0
 8020494:	d1e0      	bne.n	8020458 <_free_r+0x24>
 8020496:	6818      	ldr	r0, [r3, #0]
 8020498:	685b      	ldr	r3, [r3, #4]
 802049a:	1841      	adds	r1, r0, r1
 802049c:	6011      	str	r1, [r2, #0]
 802049e:	6053      	str	r3, [r2, #4]
 80204a0:	e7da      	b.n	8020458 <_free_r+0x24>
 80204a2:	42a0      	cmp	r0, r4
 80204a4:	d902      	bls.n	80204ac <_free_r+0x78>
 80204a6:	230c      	movs	r3, #12
 80204a8:	602b      	str	r3, [r5, #0]
 80204aa:	e7d5      	b.n	8020458 <_free_r+0x24>
 80204ac:	6820      	ldr	r0, [r4, #0]
 80204ae:	1821      	adds	r1, r4, r0
 80204b0:	428b      	cmp	r3, r1
 80204b2:	d103      	bne.n	80204bc <_free_r+0x88>
 80204b4:	6819      	ldr	r1, [r3, #0]
 80204b6:	685b      	ldr	r3, [r3, #4]
 80204b8:	1809      	adds	r1, r1, r0
 80204ba:	6021      	str	r1, [r4, #0]
 80204bc:	6063      	str	r3, [r4, #4]
 80204be:	6054      	str	r4, [r2, #4]
 80204c0:	e7ca      	b.n	8020458 <_free_r+0x24>
 80204c2:	46c0      	nop			@ (mov r8, r8)
 80204c4:	200038f8 	.word	0x200038f8

080204c8 <rshift>:
 80204c8:	0002      	movs	r2, r0
 80204ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204cc:	6904      	ldr	r4, [r0, #16]
 80204ce:	b085      	sub	sp, #20
 80204d0:	3214      	adds	r2, #20
 80204d2:	114b      	asrs	r3, r1, #5
 80204d4:	0016      	movs	r6, r2
 80204d6:	9302      	str	r3, [sp, #8]
 80204d8:	429c      	cmp	r4, r3
 80204da:	dd31      	ble.n	8020540 <rshift+0x78>
 80204dc:	261f      	movs	r6, #31
 80204de:	000f      	movs	r7, r1
 80204e0:	009b      	lsls	r3, r3, #2
 80204e2:	00a5      	lsls	r5, r4, #2
 80204e4:	18d3      	adds	r3, r2, r3
 80204e6:	4037      	ands	r7, r6
 80204e8:	1955      	adds	r5, r2, r5
 80204ea:	9300      	str	r3, [sp, #0]
 80204ec:	9701      	str	r7, [sp, #4]
 80204ee:	4231      	tst	r1, r6
 80204f0:	d10d      	bne.n	802050e <rshift+0x46>
 80204f2:	0016      	movs	r6, r2
 80204f4:	0019      	movs	r1, r3
 80204f6:	428d      	cmp	r5, r1
 80204f8:	d836      	bhi.n	8020568 <rshift+0xa0>
 80204fa:	9b00      	ldr	r3, [sp, #0]
 80204fc:	2600      	movs	r6, #0
 80204fe:	3b03      	subs	r3, #3
 8020500:	429d      	cmp	r5, r3
 8020502:	d302      	bcc.n	802050a <rshift+0x42>
 8020504:	9b02      	ldr	r3, [sp, #8]
 8020506:	1ae4      	subs	r4, r4, r3
 8020508:	00a6      	lsls	r6, r4, #2
 802050a:	1996      	adds	r6, r2, r6
 802050c:	e018      	b.n	8020540 <rshift+0x78>
 802050e:	2120      	movs	r1, #32
 8020510:	9e01      	ldr	r6, [sp, #4]
 8020512:	9f01      	ldr	r7, [sp, #4]
 8020514:	1b89      	subs	r1, r1, r6
 8020516:	9e00      	ldr	r6, [sp, #0]
 8020518:	9103      	str	r1, [sp, #12]
 802051a:	ce02      	ldmia	r6!, {r1}
 802051c:	4694      	mov	ip, r2
 802051e:	40f9      	lsrs	r1, r7
 8020520:	42b5      	cmp	r5, r6
 8020522:	d816      	bhi.n	8020552 <rshift+0x8a>
 8020524:	9b00      	ldr	r3, [sp, #0]
 8020526:	2600      	movs	r6, #0
 8020528:	3301      	adds	r3, #1
 802052a:	429d      	cmp	r5, r3
 802052c:	d303      	bcc.n	8020536 <rshift+0x6e>
 802052e:	9b02      	ldr	r3, [sp, #8]
 8020530:	1ae4      	subs	r4, r4, r3
 8020532:	00a6      	lsls	r6, r4, #2
 8020534:	3e04      	subs	r6, #4
 8020536:	1996      	adds	r6, r2, r6
 8020538:	6031      	str	r1, [r6, #0]
 802053a:	2900      	cmp	r1, #0
 802053c:	d000      	beq.n	8020540 <rshift+0x78>
 802053e:	3604      	adds	r6, #4
 8020540:	1ab1      	subs	r1, r6, r2
 8020542:	1089      	asrs	r1, r1, #2
 8020544:	6101      	str	r1, [r0, #16]
 8020546:	4296      	cmp	r6, r2
 8020548:	d101      	bne.n	802054e <rshift+0x86>
 802054a:	2300      	movs	r3, #0
 802054c:	6143      	str	r3, [r0, #20]
 802054e:	b005      	add	sp, #20
 8020550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020552:	6837      	ldr	r7, [r6, #0]
 8020554:	9b03      	ldr	r3, [sp, #12]
 8020556:	409f      	lsls	r7, r3
 8020558:	430f      	orrs	r7, r1
 802055a:	4661      	mov	r1, ip
 802055c:	c180      	stmia	r1!, {r7}
 802055e:	468c      	mov	ip, r1
 8020560:	9b01      	ldr	r3, [sp, #4]
 8020562:	ce02      	ldmia	r6!, {r1}
 8020564:	40d9      	lsrs	r1, r3
 8020566:	e7db      	b.n	8020520 <rshift+0x58>
 8020568:	c980      	ldmia	r1!, {r7}
 802056a:	c680      	stmia	r6!, {r7}
 802056c:	e7c3      	b.n	80204f6 <rshift+0x2e>

0802056e <__hexdig_fun>:
 802056e:	0002      	movs	r2, r0
 8020570:	3a30      	subs	r2, #48	@ 0x30
 8020572:	0003      	movs	r3, r0
 8020574:	2a09      	cmp	r2, #9
 8020576:	d802      	bhi.n	802057e <__hexdig_fun+0x10>
 8020578:	3b20      	subs	r3, #32
 802057a:	b2d8      	uxtb	r0, r3
 802057c:	4770      	bx	lr
 802057e:	0002      	movs	r2, r0
 8020580:	3a61      	subs	r2, #97	@ 0x61
 8020582:	2a05      	cmp	r2, #5
 8020584:	d801      	bhi.n	802058a <__hexdig_fun+0x1c>
 8020586:	3b47      	subs	r3, #71	@ 0x47
 8020588:	e7f7      	b.n	802057a <__hexdig_fun+0xc>
 802058a:	001a      	movs	r2, r3
 802058c:	3a41      	subs	r2, #65	@ 0x41
 802058e:	2000      	movs	r0, #0
 8020590:	2a05      	cmp	r2, #5
 8020592:	d8f3      	bhi.n	802057c <__hexdig_fun+0xe>
 8020594:	3b27      	subs	r3, #39	@ 0x27
 8020596:	e7f0      	b.n	802057a <__hexdig_fun+0xc>

08020598 <__gethex>:
 8020598:	b5f0      	push	{r4, r5, r6, r7, lr}
 802059a:	b089      	sub	sp, #36	@ 0x24
 802059c:	9307      	str	r3, [sp, #28]
 802059e:	680b      	ldr	r3, [r1, #0]
 80205a0:	9201      	str	r2, [sp, #4]
 80205a2:	9003      	str	r0, [sp, #12]
 80205a4:	9106      	str	r1, [sp, #24]
 80205a6:	1c9a      	adds	r2, r3, #2
 80205a8:	0011      	movs	r1, r2
 80205aa:	3201      	adds	r2, #1
 80205ac:	1e50      	subs	r0, r2, #1
 80205ae:	7800      	ldrb	r0, [r0, #0]
 80205b0:	2830      	cmp	r0, #48	@ 0x30
 80205b2:	d0f9      	beq.n	80205a8 <__gethex+0x10>
 80205b4:	1acb      	subs	r3, r1, r3
 80205b6:	3b02      	subs	r3, #2
 80205b8:	9305      	str	r3, [sp, #20]
 80205ba:	9100      	str	r1, [sp, #0]
 80205bc:	f7ff ffd7 	bl	802056e <__hexdig_fun>
 80205c0:	2300      	movs	r3, #0
 80205c2:	001d      	movs	r5, r3
 80205c4:	9302      	str	r3, [sp, #8]
 80205c6:	4298      	cmp	r0, r3
 80205c8:	d11e      	bne.n	8020608 <__gethex+0x70>
 80205ca:	2201      	movs	r2, #1
 80205cc:	49a6      	ldr	r1, [pc, #664]	@ (8020868 <__gethex+0x2d0>)
 80205ce:	9800      	ldr	r0, [sp, #0]
 80205d0:	f7fe ffd8 	bl	801f584 <strncmp>
 80205d4:	0007      	movs	r7, r0
 80205d6:	42a8      	cmp	r0, r5
 80205d8:	d000      	beq.n	80205dc <__gethex+0x44>
 80205da:	e06a      	b.n	80206b2 <__gethex+0x11a>
 80205dc:	9b00      	ldr	r3, [sp, #0]
 80205de:	7858      	ldrb	r0, [r3, #1]
 80205e0:	1c5c      	adds	r4, r3, #1
 80205e2:	f7ff ffc4 	bl	802056e <__hexdig_fun>
 80205e6:	2301      	movs	r3, #1
 80205e8:	9302      	str	r3, [sp, #8]
 80205ea:	42a8      	cmp	r0, r5
 80205ec:	d02f      	beq.n	802064e <__gethex+0xb6>
 80205ee:	9400      	str	r4, [sp, #0]
 80205f0:	9b00      	ldr	r3, [sp, #0]
 80205f2:	7818      	ldrb	r0, [r3, #0]
 80205f4:	2830      	cmp	r0, #48	@ 0x30
 80205f6:	d009      	beq.n	802060c <__gethex+0x74>
 80205f8:	f7ff ffb9 	bl	802056e <__hexdig_fun>
 80205fc:	4242      	negs	r2, r0
 80205fe:	4142      	adcs	r2, r0
 8020600:	2301      	movs	r3, #1
 8020602:	0025      	movs	r5, r4
 8020604:	9202      	str	r2, [sp, #8]
 8020606:	9305      	str	r3, [sp, #20]
 8020608:	9c00      	ldr	r4, [sp, #0]
 802060a:	e004      	b.n	8020616 <__gethex+0x7e>
 802060c:	9b00      	ldr	r3, [sp, #0]
 802060e:	3301      	adds	r3, #1
 8020610:	9300      	str	r3, [sp, #0]
 8020612:	e7ed      	b.n	80205f0 <__gethex+0x58>
 8020614:	3401      	adds	r4, #1
 8020616:	7820      	ldrb	r0, [r4, #0]
 8020618:	f7ff ffa9 	bl	802056e <__hexdig_fun>
 802061c:	1e07      	subs	r7, r0, #0
 802061e:	d1f9      	bne.n	8020614 <__gethex+0x7c>
 8020620:	2201      	movs	r2, #1
 8020622:	0020      	movs	r0, r4
 8020624:	4990      	ldr	r1, [pc, #576]	@ (8020868 <__gethex+0x2d0>)
 8020626:	f7fe ffad 	bl	801f584 <strncmp>
 802062a:	2800      	cmp	r0, #0
 802062c:	d10d      	bne.n	802064a <__gethex+0xb2>
 802062e:	2d00      	cmp	r5, #0
 8020630:	d106      	bne.n	8020640 <__gethex+0xa8>
 8020632:	3401      	adds	r4, #1
 8020634:	0025      	movs	r5, r4
 8020636:	7820      	ldrb	r0, [r4, #0]
 8020638:	f7ff ff99 	bl	802056e <__hexdig_fun>
 802063c:	2800      	cmp	r0, #0
 802063e:	d102      	bne.n	8020646 <__gethex+0xae>
 8020640:	1b2d      	subs	r5, r5, r4
 8020642:	00af      	lsls	r7, r5, #2
 8020644:	e003      	b.n	802064e <__gethex+0xb6>
 8020646:	3401      	adds	r4, #1
 8020648:	e7f5      	b.n	8020636 <__gethex+0x9e>
 802064a:	2d00      	cmp	r5, #0
 802064c:	d1f8      	bne.n	8020640 <__gethex+0xa8>
 802064e:	2220      	movs	r2, #32
 8020650:	7823      	ldrb	r3, [r4, #0]
 8020652:	0026      	movs	r6, r4
 8020654:	4393      	bics	r3, r2
 8020656:	2b50      	cmp	r3, #80	@ 0x50
 8020658:	d11d      	bne.n	8020696 <__gethex+0xfe>
 802065a:	7863      	ldrb	r3, [r4, #1]
 802065c:	2b2b      	cmp	r3, #43	@ 0x2b
 802065e:	d02d      	beq.n	80206bc <__gethex+0x124>
 8020660:	2b2d      	cmp	r3, #45	@ 0x2d
 8020662:	d02f      	beq.n	80206c4 <__gethex+0x12c>
 8020664:	2300      	movs	r3, #0
 8020666:	1c66      	adds	r6, r4, #1
 8020668:	9304      	str	r3, [sp, #16]
 802066a:	7830      	ldrb	r0, [r6, #0]
 802066c:	f7ff ff7f 	bl	802056e <__hexdig_fun>
 8020670:	1e43      	subs	r3, r0, #1
 8020672:	b2db      	uxtb	r3, r3
 8020674:	0005      	movs	r5, r0
 8020676:	2b18      	cmp	r3, #24
 8020678:	d82a      	bhi.n	80206d0 <__gethex+0x138>
 802067a:	7870      	ldrb	r0, [r6, #1]
 802067c:	f7ff ff77 	bl	802056e <__hexdig_fun>
 8020680:	1e43      	subs	r3, r0, #1
 8020682:	b2db      	uxtb	r3, r3
 8020684:	3601      	adds	r6, #1
 8020686:	3d10      	subs	r5, #16
 8020688:	2b18      	cmp	r3, #24
 802068a:	d91d      	bls.n	80206c8 <__gethex+0x130>
 802068c:	9b04      	ldr	r3, [sp, #16]
 802068e:	2b00      	cmp	r3, #0
 8020690:	d000      	beq.n	8020694 <__gethex+0xfc>
 8020692:	426d      	negs	r5, r5
 8020694:	197f      	adds	r7, r7, r5
 8020696:	9b06      	ldr	r3, [sp, #24]
 8020698:	601e      	str	r6, [r3, #0]
 802069a:	9b02      	ldr	r3, [sp, #8]
 802069c:	2b00      	cmp	r3, #0
 802069e:	d019      	beq.n	80206d4 <__gethex+0x13c>
 80206a0:	9b05      	ldr	r3, [sp, #20]
 80206a2:	2606      	movs	r6, #6
 80206a4:	425a      	negs	r2, r3
 80206a6:	4153      	adcs	r3, r2
 80206a8:	425b      	negs	r3, r3
 80206aa:	401e      	ands	r6, r3
 80206ac:	0030      	movs	r0, r6
 80206ae:	b009      	add	sp, #36	@ 0x24
 80206b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80206b2:	2301      	movs	r3, #1
 80206b4:	2700      	movs	r7, #0
 80206b6:	9c00      	ldr	r4, [sp, #0]
 80206b8:	9302      	str	r3, [sp, #8]
 80206ba:	e7c8      	b.n	802064e <__gethex+0xb6>
 80206bc:	2300      	movs	r3, #0
 80206be:	9304      	str	r3, [sp, #16]
 80206c0:	1ca6      	adds	r6, r4, #2
 80206c2:	e7d2      	b.n	802066a <__gethex+0xd2>
 80206c4:	2301      	movs	r3, #1
 80206c6:	e7fa      	b.n	80206be <__gethex+0x126>
 80206c8:	230a      	movs	r3, #10
 80206ca:	435d      	muls	r5, r3
 80206cc:	182d      	adds	r5, r5, r0
 80206ce:	e7d4      	b.n	802067a <__gethex+0xe2>
 80206d0:	0026      	movs	r6, r4
 80206d2:	e7e0      	b.n	8020696 <__gethex+0xfe>
 80206d4:	9b00      	ldr	r3, [sp, #0]
 80206d6:	9902      	ldr	r1, [sp, #8]
 80206d8:	1ae3      	subs	r3, r4, r3
 80206da:	3b01      	subs	r3, #1
 80206dc:	2b07      	cmp	r3, #7
 80206de:	dc0a      	bgt.n	80206f6 <__gethex+0x15e>
 80206e0:	9803      	ldr	r0, [sp, #12]
 80206e2:	f000 fb19 	bl	8020d18 <_Balloc>
 80206e6:	1e05      	subs	r5, r0, #0
 80206e8:	d108      	bne.n	80206fc <__gethex+0x164>
 80206ea:	002a      	movs	r2, r5
 80206ec:	21e4      	movs	r1, #228	@ 0xe4
 80206ee:	4b5f      	ldr	r3, [pc, #380]	@ (802086c <__gethex+0x2d4>)
 80206f0:	485f      	ldr	r0, [pc, #380]	@ (8020870 <__gethex+0x2d8>)
 80206f2:	f001 fbf1 	bl	8021ed8 <__assert_func>
 80206f6:	3101      	adds	r1, #1
 80206f8:	105b      	asrs	r3, r3, #1
 80206fa:	e7ef      	b.n	80206dc <__gethex+0x144>
 80206fc:	0003      	movs	r3, r0
 80206fe:	3314      	adds	r3, #20
 8020700:	9302      	str	r3, [sp, #8]
 8020702:	9305      	str	r3, [sp, #20]
 8020704:	2300      	movs	r3, #0
 8020706:	001e      	movs	r6, r3
 8020708:	9304      	str	r3, [sp, #16]
 802070a:	9b00      	ldr	r3, [sp, #0]
 802070c:	42a3      	cmp	r3, r4
 802070e:	d338      	bcc.n	8020782 <__gethex+0x1ea>
 8020710:	9c05      	ldr	r4, [sp, #20]
 8020712:	9b02      	ldr	r3, [sp, #8]
 8020714:	c440      	stmia	r4!, {r6}
 8020716:	1ae4      	subs	r4, r4, r3
 8020718:	10a4      	asrs	r4, r4, #2
 802071a:	0030      	movs	r0, r6
 802071c:	612c      	str	r4, [r5, #16]
 802071e:	f000 fbf3 	bl	8020f08 <__hi0bits>
 8020722:	9b01      	ldr	r3, [sp, #4]
 8020724:	0164      	lsls	r4, r4, #5
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	1a26      	subs	r6, r4, r0
 802072a:	9300      	str	r3, [sp, #0]
 802072c:	429e      	cmp	r6, r3
 802072e:	dd52      	ble.n	80207d6 <__gethex+0x23e>
 8020730:	1af6      	subs	r6, r6, r3
 8020732:	0031      	movs	r1, r6
 8020734:	0028      	movs	r0, r5
 8020736:	f000 ff96 	bl	8021666 <__any_on>
 802073a:	1e04      	subs	r4, r0, #0
 802073c:	d00f      	beq.n	802075e <__gethex+0x1c6>
 802073e:	2401      	movs	r4, #1
 8020740:	231f      	movs	r3, #31
 8020742:	0020      	movs	r0, r4
 8020744:	1e72      	subs	r2, r6, #1
 8020746:	4013      	ands	r3, r2
 8020748:	4098      	lsls	r0, r3
 802074a:	0003      	movs	r3, r0
 802074c:	1151      	asrs	r1, r2, #5
 802074e:	9802      	ldr	r0, [sp, #8]
 8020750:	0089      	lsls	r1, r1, #2
 8020752:	5809      	ldr	r1, [r1, r0]
 8020754:	4219      	tst	r1, r3
 8020756:	d002      	beq.n	802075e <__gethex+0x1c6>
 8020758:	42a2      	cmp	r2, r4
 802075a:	dc34      	bgt.n	80207c6 <__gethex+0x22e>
 802075c:	2402      	movs	r4, #2
 802075e:	0031      	movs	r1, r6
 8020760:	0028      	movs	r0, r5
 8020762:	f7ff feb1 	bl	80204c8 <rshift>
 8020766:	19bf      	adds	r7, r7, r6
 8020768:	9b01      	ldr	r3, [sp, #4]
 802076a:	689b      	ldr	r3, [r3, #8]
 802076c:	42bb      	cmp	r3, r7
 802076e:	da42      	bge.n	80207f6 <__gethex+0x25e>
 8020770:	0029      	movs	r1, r5
 8020772:	9803      	ldr	r0, [sp, #12]
 8020774:	f000 fb14 	bl	8020da0 <_Bfree>
 8020778:	2300      	movs	r3, #0
 802077a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802077c:	26a3      	movs	r6, #163	@ 0xa3
 802077e:	6013      	str	r3, [r2, #0]
 8020780:	e794      	b.n	80206ac <__gethex+0x114>
 8020782:	3c01      	subs	r4, #1
 8020784:	7823      	ldrb	r3, [r4, #0]
 8020786:	2b2e      	cmp	r3, #46	@ 0x2e
 8020788:	d012      	beq.n	80207b0 <__gethex+0x218>
 802078a:	9b04      	ldr	r3, [sp, #16]
 802078c:	2b20      	cmp	r3, #32
 802078e:	d104      	bne.n	802079a <__gethex+0x202>
 8020790:	9b05      	ldr	r3, [sp, #20]
 8020792:	c340      	stmia	r3!, {r6}
 8020794:	2600      	movs	r6, #0
 8020796:	9305      	str	r3, [sp, #20]
 8020798:	9604      	str	r6, [sp, #16]
 802079a:	7820      	ldrb	r0, [r4, #0]
 802079c:	f7ff fee7 	bl	802056e <__hexdig_fun>
 80207a0:	230f      	movs	r3, #15
 80207a2:	4018      	ands	r0, r3
 80207a4:	9b04      	ldr	r3, [sp, #16]
 80207a6:	4098      	lsls	r0, r3
 80207a8:	3304      	adds	r3, #4
 80207aa:	4306      	orrs	r6, r0
 80207ac:	9304      	str	r3, [sp, #16]
 80207ae:	e7ac      	b.n	802070a <__gethex+0x172>
 80207b0:	9b00      	ldr	r3, [sp, #0]
 80207b2:	42a3      	cmp	r3, r4
 80207b4:	d8e9      	bhi.n	802078a <__gethex+0x1f2>
 80207b6:	2201      	movs	r2, #1
 80207b8:	0020      	movs	r0, r4
 80207ba:	492b      	ldr	r1, [pc, #172]	@ (8020868 <__gethex+0x2d0>)
 80207bc:	f7fe fee2 	bl	801f584 <strncmp>
 80207c0:	2800      	cmp	r0, #0
 80207c2:	d1e2      	bne.n	802078a <__gethex+0x1f2>
 80207c4:	e7a1      	b.n	802070a <__gethex+0x172>
 80207c6:	0028      	movs	r0, r5
 80207c8:	1eb1      	subs	r1, r6, #2
 80207ca:	f000 ff4c 	bl	8021666 <__any_on>
 80207ce:	2800      	cmp	r0, #0
 80207d0:	d0c4      	beq.n	802075c <__gethex+0x1c4>
 80207d2:	2403      	movs	r4, #3
 80207d4:	e7c3      	b.n	802075e <__gethex+0x1c6>
 80207d6:	9b00      	ldr	r3, [sp, #0]
 80207d8:	2400      	movs	r4, #0
 80207da:	429e      	cmp	r6, r3
 80207dc:	dac4      	bge.n	8020768 <__gethex+0x1d0>
 80207de:	1b9e      	subs	r6, r3, r6
 80207e0:	0029      	movs	r1, r5
 80207e2:	0032      	movs	r2, r6
 80207e4:	9803      	ldr	r0, [sp, #12]
 80207e6:	f000 fd05 	bl	80211f4 <__lshift>
 80207ea:	0003      	movs	r3, r0
 80207ec:	3314      	adds	r3, #20
 80207ee:	0005      	movs	r5, r0
 80207f0:	1bbf      	subs	r7, r7, r6
 80207f2:	9302      	str	r3, [sp, #8]
 80207f4:	e7b8      	b.n	8020768 <__gethex+0x1d0>
 80207f6:	9b01      	ldr	r3, [sp, #4]
 80207f8:	685e      	ldr	r6, [r3, #4]
 80207fa:	42be      	cmp	r6, r7
 80207fc:	dd6f      	ble.n	80208de <__gethex+0x346>
 80207fe:	9b00      	ldr	r3, [sp, #0]
 8020800:	1bf6      	subs	r6, r6, r7
 8020802:	42b3      	cmp	r3, r6
 8020804:	dc36      	bgt.n	8020874 <__gethex+0x2dc>
 8020806:	9b01      	ldr	r3, [sp, #4]
 8020808:	68db      	ldr	r3, [r3, #12]
 802080a:	2b02      	cmp	r3, #2
 802080c:	d024      	beq.n	8020858 <__gethex+0x2c0>
 802080e:	2b03      	cmp	r3, #3
 8020810:	d026      	beq.n	8020860 <__gethex+0x2c8>
 8020812:	2b01      	cmp	r3, #1
 8020814:	d117      	bne.n	8020846 <__gethex+0x2ae>
 8020816:	9b00      	ldr	r3, [sp, #0]
 8020818:	42b3      	cmp	r3, r6
 802081a:	d114      	bne.n	8020846 <__gethex+0x2ae>
 802081c:	2b01      	cmp	r3, #1
 802081e:	d10b      	bne.n	8020838 <__gethex+0x2a0>
 8020820:	9b01      	ldr	r3, [sp, #4]
 8020822:	9a07      	ldr	r2, [sp, #28]
 8020824:	685b      	ldr	r3, [r3, #4]
 8020826:	2662      	movs	r6, #98	@ 0x62
 8020828:	6013      	str	r3, [r2, #0]
 802082a:	2301      	movs	r3, #1
 802082c:	9a02      	ldr	r2, [sp, #8]
 802082e:	612b      	str	r3, [r5, #16]
 8020830:	6013      	str	r3, [r2, #0]
 8020832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020834:	601d      	str	r5, [r3, #0]
 8020836:	e739      	b.n	80206ac <__gethex+0x114>
 8020838:	9900      	ldr	r1, [sp, #0]
 802083a:	0028      	movs	r0, r5
 802083c:	3901      	subs	r1, #1
 802083e:	f000 ff12 	bl	8021666 <__any_on>
 8020842:	2800      	cmp	r0, #0
 8020844:	d1ec      	bne.n	8020820 <__gethex+0x288>
 8020846:	0029      	movs	r1, r5
 8020848:	9803      	ldr	r0, [sp, #12]
 802084a:	f000 faa9 	bl	8020da0 <_Bfree>
 802084e:	2300      	movs	r3, #0
 8020850:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020852:	2650      	movs	r6, #80	@ 0x50
 8020854:	6013      	str	r3, [r2, #0]
 8020856:	e729      	b.n	80206ac <__gethex+0x114>
 8020858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802085a:	2b00      	cmp	r3, #0
 802085c:	d1f3      	bne.n	8020846 <__gethex+0x2ae>
 802085e:	e7df      	b.n	8020820 <__gethex+0x288>
 8020860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020862:	2b00      	cmp	r3, #0
 8020864:	d1dc      	bne.n	8020820 <__gethex+0x288>
 8020866:	e7ee      	b.n	8020846 <__gethex+0x2ae>
 8020868:	08024b58 	.word	0x08024b58
 802086c:	08024d69 	.word	0x08024d69
 8020870:	08024d7a 	.word	0x08024d7a
 8020874:	1e77      	subs	r7, r6, #1
 8020876:	2c00      	cmp	r4, #0
 8020878:	d12f      	bne.n	80208da <__gethex+0x342>
 802087a:	2f00      	cmp	r7, #0
 802087c:	d004      	beq.n	8020888 <__gethex+0x2f0>
 802087e:	0039      	movs	r1, r7
 8020880:	0028      	movs	r0, r5
 8020882:	f000 fef0 	bl	8021666 <__any_on>
 8020886:	0004      	movs	r4, r0
 8020888:	231f      	movs	r3, #31
 802088a:	117a      	asrs	r2, r7, #5
 802088c:	401f      	ands	r7, r3
 802088e:	3b1e      	subs	r3, #30
 8020890:	40bb      	lsls	r3, r7
 8020892:	9902      	ldr	r1, [sp, #8]
 8020894:	0092      	lsls	r2, r2, #2
 8020896:	5852      	ldr	r2, [r2, r1]
 8020898:	421a      	tst	r2, r3
 802089a:	d001      	beq.n	80208a0 <__gethex+0x308>
 802089c:	2302      	movs	r3, #2
 802089e:	431c      	orrs	r4, r3
 80208a0:	9b00      	ldr	r3, [sp, #0]
 80208a2:	0031      	movs	r1, r6
 80208a4:	1b9b      	subs	r3, r3, r6
 80208a6:	2602      	movs	r6, #2
 80208a8:	0028      	movs	r0, r5
 80208aa:	9300      	str	r3, [sp, #0]
 80208ac:	f7ff fe0c 	bl	80204c8 <rshift>
 80208b0:	9b01      	ldr	r3, [sp, #4]
 80208b2:	685f      	ldr	r7, [r3, #4]
 80208b4:	2c00      	cmp	r4, #0
 80208b6:	d03f      	beq.n	8020938 <__gethex+0x3a0>
 80208b8:	9b01      	ldr	r3, [sp, #4]
 80208ba:	68db      	ldr	r3, [r3, #12]
 80208bc:	2b02      	cmp	r3, #2
 80208be:	d010      	beq.n	80208e2 <__gethex+0x34a>
 80208c0:	2b03      	cmp	r3, #3
 80208c2:	d012      	beq.n	80208ea <__gethex+0x352>
 80208c4:	2b01      	cmp	r3, #1
 80208c6:	d106      	bne.n	80208d6 <__gethex+0x33e>
 80208c8:	07a2      	lsls	r2, r4, #30
 80208ca:	d504      	bpl.n	80208d6 <__gethex+0x33e>
 80208cc:	9a02      	ldr	r2, [sp, #8]
 80208ce:	6812      	ldr	r2, [r2, #0]
 80208d0:	4314      	orrs	r4, r2
 80208d2:	421c      	tst	r4, r3
 80208d4:	d10c      	bne.n	80208f0 <__gethex+0x358>
 80208d6:	2310      	movs	r3, #16
 80208d8:	e02d      	b.n	8020936 <__gethex+0x39e>
 80208da:	2401      	movs	r4, #1
 80208dc:	e7d4      	b.n	8020888 <__gethex+0x2f0>
 80208de:	2601      	movs	r6, #1
 80208e0:	e7e8      	b.n	80208b4 <__gethex+0x31c>
 80208e2:	2301      	movs	r3, #1
 80208e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80208e6:	1a9b      	subs	r3, r3, r2
 80208e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80208ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	d0f2      	beq.n	80208d6 <__gethex+0x33e>
 80208f0:	692b      	ldr	r3, [r5, #16]
 80208f2:	2000      	movs	r0, #0
 80208f4:	9302      	str	r3, [sp, #8]
 80208f6:	009b      	lsls	r3, r3, #2
 80208f8:	9304      	str	r3, [sp, #16]
 80208fa:	002b      	movs	r3, r5
 80208fc:	9a04      	ldr	r2, [sp, #16]
 80208fe:	3314      	adds	r3, #20
 8020900:	1899      	adds	r1, r3, r2
 8020902:	681a      	ldr	r2, [r3, #0]
 8020904:	1c54      	adds	r4, r2, #1
 8020906:	d01c      	beq.n	8020942 <__gethex+0x3aa>
 8020908:	3201      	adds	r2, #1
 802090a:	601a      	str	r2, [r3, #0]
 802090c:	002b      	movs	r3, r5
 802090e:	3314      	adds	r3, #20
 8020910:	2e02      	cmp	r6, #2
 8020912:	d13f      	bne.n	8020994 <__gethex+0x3fc>
 8020914:	9a01      	ldr	r2, [sp, #4]
 8020916:	9900      	ldr	r1, [sp, #0]
 8020918:	6812      	ldr	r2, [r2, #0]
 802091a:	3a01      	subs	r2, #1
 802091c:	428a      	cmp	r2, r1
 802091e:	d109      	bne.n	8020934 <__gethex+0x39c>
 8020920:	000a      	movs	r2, r1
 8020922:	201f      	movs	r0, #31
 8020924:	4010      	ands	r0, r2
 8020926:	2201      	movs	r2, #1
 8020928:	4082      	lsls	r2, r0
 802092a:	1149      	asrs	r1, r1, #5
 802092c:	0089      	lsls	r1, r1, #2
 802092e:	58cb      	ldr	r3, [r1, r3]
 8020930:	4213      	tst	r3, r2
 8020932:	d13d      	bne.n	80209b0 <__gethex+0x418>
 8020934:	2320      	movs	r3, #32
 8020936:	431e      	orrs	r6, r3
 8020938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802093a:	601d      	str	r5, [r3, #0]
 802093c:	9b07      	ldr	r3, [sp, #28]
 802093e:	601f      	str	r7, [r3, #0]
 8020940:	e6b4      	b.n	80206ac <__gethex+0x114>
 8020942:	c301      	stmia	r3!, {r0}
 8020944:	4299      	cmp	r1, r3
 8020946:	d8dc      	bhi.n	8020902 <__gethex+0x36a>
 8020948:	68ab      	ldr	r3, [r5, #8]
 802094a:	9a02      	ldr	r2, [sp, #8]
 802094c:	429a      	cmp	r2, r3
 802094e:	db18      	blt.n	8020982 <__gethex+0x3ea>
 8020950:	6869      	ldr	r1, [r5, #4]
 8020952:	9803      	ldr	r0, [sp, #12]
 8020954:	3101      	adds	r1, #1
 8020956:	f000 f9df 	bl	8020d18 <_Balloc>
 802095a:	1e04      	subs	r4, r0, #0
 802095c:	d104      	bne.n	8020968 <__gethex+0x3d0>
 802095e:	0022      	movs	r2, r4
 8020960:	2184      	movs	r1, #132	@ 0x84
 8020962:	4b1d      	ldr	r3, [pc, #116]	@ (80209d8 <__gethex+0x440>)
 8020964:	481d      	ldr	r0, [pc, #116]	@ (80209dc <__gethex+0x444>)
 8020966:	e6c4      	b.n	80206f2 <__gethex+0x15a>
 8020968:	0029      	movs	r1, r5
 802096a:	692a      	ldr	r2, [r5, #16]
 802096c:	310c      	adds	r1, #12
 802096e:	3202      	adds	r2, #2
 8020970:	0092      	lsls	r2, r2, #2
 8020972:	300c      	adds	r0, #12
 8020974:	f7fe fecc 	bl	801f710 <memcpy>
 8020978:	0029      	movs	r1, r5
 802097a:	9803      	ldr	r0, [sp, #12]
 802097c:	f000 fa10 	bl	8020da0 <_Bfree>
 8020980:	0025      	movs	r5, r4
 8020982:	692b      	ldr	r3, [r5, #16]
 8020984:	1c5a      	adds	r2, r3, #1
 8020986:	612a      	str	r2, [r5, #16]
 8020988:	2201      	movs	r2, #1
 802098a:	3304      	adds	r3, #4
 802098c:	009b      	lsls	r3, r3, #2
 802098e:	18eb      	adds	r3, r5, r3
 8020990:	605a      	str	r2, [r3, #4]
 8020992:	e7bb      	b.n	802090c <__gethex+0x374>
 8020994:	692a      	ldr	r2, [r5, #16]
 8020996:	9902      	ldr	r1, [sp, #8]
 8020998:	428a      	cmp	r2, r1
 802099a:	dd0b      	ble.n	80209b4 <__gethex+0x41c>
 802099c:	2101      	movs	r1, #1
 802099e:	0028      	movs	r0, r5
 80209a0:	f7ff fd92 	bl	80204c8 <rshift>
 80209a4:	9b01      	ldr	r3, [sp, #4]
 80209a6:	3701      	adds	r7, #1
 80209a8:	689b      	ldr	r3, [r3, #8]
 80209aa:	42bb      	cmp	r3, r7
 80209ac:	da00      	bge.n	80209b0 <__gethex+0x418>
 80209ae:	e6df      	b.n	8020770 <__gethex+0x1d8>
 80209b0:	2601      	movs	r6, #1
 80209b2:	e7bf      	b.n	8020934 <__gethex+0x39c>
 80209b4:	221f      	movs	r2, #31
 80209b6:	9c00      	ldr	r4, [sp, #0]
 80209b8:	9900      	ldr	r1, [sp, #0]
 80209ba:	4014      	ands	r4, r2
 80209bc:	4211      	tst	r1, r2
 80209be:	d0f7      	beq.n	80209b0 <__gethex+0x418>
 80209c0:	9a04      	ldr	r2, [sp, #16]
 80209c2:	189b      	adds	r3, r3, r2
 80209c4:	3b04      	subs	r3, #4
 80209c6:	6818      	ldr	r0, [r3, #0]
 80209c8:	f000 fa9e 	bl	8020f08 <__hi0bits>
 80209cc:	2320      	movs	r3, #32
 80209ce:	1b1b      	subs	r3, r3, r4
 80209d0:	4298      	cmp	r0, r3
 80209d2:	dbe3      	blt.n	802099c <__gethex+0x404>
 80209d4:	e7ec      	b.n	80209b0 <__gethex+0x418>
 80209d6:	46c0      	nop			@ (mov r8, r8)
 80209d8:	08024d69 	.word	0x08024d69
 80209dc:	08024d7a 	.word	0x08024d7a

080209e0 <L_shift>:
 80209e0:	2308      	movs	r3, #8
 80209e2:	b570      	push	{r4, r5, r6, lr}
 80209e4:	2520      	movs	r5, #32
 80209e6:	1a9a      	subs	r2, r3, r2
 80209e8:	0092      	lsls	r2, r2, #2
 80209ea:	1aad      	subs	r5, r5, r2
 80209ec:	6843      	ldr	r3, [r0, #4]
 80209ee:	6804      	ldr	r4, [r0, #0]
 80209f0:	001e      	movs	r6, r3
 80209f2:	40ae      	lsls	r6, r5
 80209f4:	40d3      	lsrs	r3, r2
 80209f6:	4334      	orrs	r4, r6
 80209f8:	6004      	str	r4, [r0, #0]
 80209fa:	6043      	str	r3, [r0, #4]
 80209fc:	3004      	adds	r0, #4
 80209fe:	4288      	cmp	r0, r1
 8020a00:	d3f4      	bcc.n	80209ec <L_shift+0xc>
 8020a02:	bd70      	pop	{r4, r5, r6, pc}

08020a04 <__match>:
 8020a04:	b530      	push	{r4, r5, lr}
 8020a06:	6803      	ldr	r3, [r0, #0]
 8020a08:	780c      	ldrb	r4, [r1, #0]
 8020a0a:	3301      	adds	r3, #1
 8020a0c:	2c00      	cmp	r4, #0
 8020a0e:	d102      	bne.n	8020a16 <__match+0x12>
 8020a10:	6003      	str	r3, [r0, #0]
 8020a12:	2001      	movs	r0, #1
 8020a14:	bd30      	pop	{r4, r5, pc}
 8020a16:	781a      	ldrb	r2, [r3, #0]
 8020a18:	0015      	movs	r5, r2
 8020a1a:	3d41      	subs	r5, #65	@ 0x41
 8020a1c:	2d19      	cmp	r5, #25
 8020a1e:	d800      	bhi.n	8020a22 <__match+0x1e>
 8020a20:	3220      	adds	r2, #32
 8020a22:	3101      	adds	r1, #1
 8020a24:	42a2      	cmp	r2, r4
 8020a26:	d0ef      	beq.n	8020a08 <__match+0x4>
 8020a28:	2000      	movs	r0, #0
 8020a2a:	e7f3      	b.n	8020a14 <__match+0x10>

08020a2c <__hexnan>:
 8020a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a2e:	680b      	ldr	r3, [r1, #0]
 8020a30:	b08b      	sub	sp, #44	@ 0x2c
 8020a32:	9201      	str	r2, [sp, #4]
 8020a34:	9901      	ldr	r1, [sp, #4]
 8020a36:	115a      	asrs	r2, r3, #5
 8020a38:	0092      	lsls	r2, r2, #2
 8020a3a:	188a      	adds	r2, r1, r2
 8020a3c:	9202      	str	r2, [sp, #8]
 8020a3e:	0019      	movs	r1, r3
 8020a40:	221f      	movs	r2, #31
 8020a42:	4011      	ands	r1, r2
 8020a44:	9008      	str	r0, [sp, #32]
 8020a46:	9106      	str	r1, [sp, #24]
 8020a48:	4213      	tst	r3, r2
 8020a4a:	d002      	beq.n	8020a52 <__hexnan+0x26>
 8020a4c:	9b02      	ldr	r3, [sp, #8]
 8020a4e:	3304      	adds	r3, #4
 8020a50:	9302      	str	r3, [sp, #8]
 8020a52:	9b02      	ldr	r3, [sp, #8]
 8020a54:	2500      	movs	r5, #0
 8020a56:	1f1f      	subs	r7, r3, #4
 8020a58:	003e      	movs	r6, r7
 8020a5a:	003c      	movs	r4, r7
 8020a5c:	9b08      	ldr	r3, [sp, #32]
 8020a5e:	603d      	str	r5, [r7, #0]
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	9507      	str	r5, [sp, #28]
 8020a64:	9305      	str	r3, [sp, #20]
 8020a66:	9503      	str	r5, [sp, #12]
 8020a68:	9b05      	ldr	r3, [sp, #20]
 8020a6a:	3301      	adds	r3, #1
 8020a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a6e:	9b05      	ldr	r3, [sp, #20]
 8020a70:	785b      	ldrb	r3, [r3, #1]
 8020a72:	9304      	str	r3, [sp, #16]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d028      	beq.n	8020aca <__hexnan+0x9e>
 8020a78:	9804      	ldr	r0, [sp, #16]
 8020a7a:	f7ff fd78 	bl	802056e <__hexdig_fun>
 8020a7e:	2800      	cmp	r0, #0
 8020a80:	d155      	bne.n	8020b2e <__hexnan+0x102>
 8020a82:	9b04      	ldr	r3, [sp, #16]
 8020a84:	2b20      	cmp	r3, #32
 8020a86:	d819      	bhi.n	8020abc <__hexnan+0x90>
 8020a88:	9b03      	ldr	r3, [sp, #12]
 8020a8a:	9a07      	ldr	r2, [sp, #28]
 8020a8c:	4293      	cmp	r3, r2
 8020a8e:	dd12      	ble.n	8020ab6 <__hexnan+0x8a>
 8020a90:	42b4      	cmp	r4, r6
 8020a92:	d206      	bcs.n	8020aa2 <__hexnan+0x76>
 8020a94:	2d07      	cmp	r5, #7
 8020a96:	dc04      	bgt.n	8020aa2 <__hexnan+0x76>
 8020a98:	002a      	movs	r2, r5
 8020a9a:	0031      	movs	r1, r6
 8020a9c:	0020      	movs	r0, r4
 8020a9e:	f7ff ff9f 	bl	80209e0 <L_shift>
 8020aa2:	9b01      	ldr	r3, [sp, #4]
 8020aa4:	2508      	movs	r5, #8
 8020aa6:	429c      	cmp	r4, r3
 8020aa8:	d905      	bls.n	8020ab6 <__hexnan+0x8a>
 8020aaa:	1f26      	subs	r6, r4, #4
 8020aac:	2500      	movs	r5, #0
 8020aae:	0034      	movs	r4, r6
 8020ab0:	9b03      	ldr	r3, [sp, #12]
 8020ab2:	6035      	str	r5, [r6, #0]
 8020ab4:	9307      	str	r3, [sp, #28]
 8020ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ab8:	9305      	str	r3, [sp, #20]
 8020aba:	e7d5      	b.n	8020a68 <__hexnan+0x3c>
 8020abc:	9b04      	ldr	r3, [sp, #16]
 8020abe:	2b29      	cmp	r3, #41	@ 0x29
 8020ac0:	d15a      	bne.n	8020b78 <__hexnan+0x14c>
 8020ac2:	9b05      	ldr	r3, [sp, #20]
 8020ac4:	9a08      	ldr	r2, [sp, #32]
 8020ac6:	3302      	adds	r3, #2
 8020ac8:	6013      	str	r3, [r2, #0]
 8020aca:	9b03      	ldr	r3, [sp, #12]
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	d053      	beq.n	8020b78 <__hexnan+0x14c>
 8020ad0:	42b4      	cmp	r4, r6
 8020ad2:	d206      	bcs.n	8020ae2 <__hexnan+0xb6>
 8020ad4:	2d07      	cmp	r5, #7
 8020ad6:	dc04      	bgt.n	8020ae2 <__hexnan+0xb6>
 8020ad8:	002a      	movs	r2, r5
 8020ada:	0031      	movs	r1, r6
 8020adc:	0020      	movs	r0, r4
 8020ade:	f7ff ff7f 	bl	80209e0 <L_shift>
 8020ae2:	9b01      	ldr	r3, [sp, #4]
 8020ae4:	429c      	cmp	r4, r3
 8020ae6:	d936      	bls.n	8020b56 <__hexnan+0x12a>
 8020ae8:	001a      	movs	r2, r3
 8020aea:	0023      	movs	r3, r4
 8020aec:	cb02      	ldmia	r3!, {r1}
 8020aee:	c202      	stmia	r2!, {r1}
 8020af0:	429f      	cmp	r7, r3
 8020af2:	d2fb      	bcs.n	8020aec <__hexnan+0xc0>
 8020af4:	9b02      	ldr	r3, [sp, #8]
 8020af6:	1c61      	adds	r1, r4, #1
 8020af8:	1eda      	subs	r2, r3, #3
 8020afa:	2304      	movs	r3, #4
 8020afc:	4291      	cmp	r1, r2
 8020afe:	d805      	bhi.n	8020b0c <__hexnan+0xe0>
 8020b00:	9b02      	ldr	r3, [sp, #8]
 8020b02:	3b04      	subs	r3, #4
 8020b04:	1b1b      	subs	r3, r3, r4
 8020b06:	089b      	lsrs	r3, r3, #2
 8020b08:	3301      	adds	r3, #1
 8020b0a:	009b      	lsls	r3, r3, #2
 8020b0c:	9a01      	ldr	r2, [sp, #4]
 8020b0e:	18d3      	adds	r3, r2, r3
 8020b10:	2200      	movs	r2, #0
 8020b12:	c304      	stmia	r3!, {r2}
 8020b14:	429f      	cmp	r7, r3
 8020b16:	d2fc      	bcs.n	8020b12 <__hexnan+0xe6>
 8020b18:	683b      	ldr	r3, [r7, #0]
 8020b1a:	2b00      	cmp	r3, #0
 8020b1c:	d104      	bne.n	8020b28 <__hexnan+0xfc>
 8020b1e:	9b01      	ldr	r3, [sp, #4]
 8020b20:	429f      	cmp	r7, r3
 8020b22:	d127      	bne.n	8020b74 <__hexnan+0x148>
 8020b24:	2301      	movs	r3, #1
 8020b26:	603b      	str	r3, [r7, #0]
 8020b28:	2005      	movs	r0, #5
 8020b2a:	b00b      	add	sp, #44	@ 0x2c
 8020b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b2e:	9b03      	ldr	r3, [sp, #12]
 8020b30:	3501      	adds	r5, #1
 8020b32:	3301      	adds	r3, #1
 8020b34:	9303      	str	r3, [sp, #12]
 8020b36:	2d08      	cmp	r5, #8
 8020b38:	dd06      	ble.n	8020b48 <__hexnan+0x11c>
 8020b3a:	9b01      	ldr	r3, [sp, #4]
 8020b3c:	429c      	cmp	r4, r3
 8020b3e:	d9ba      	bls.n	8020ab6 <__hexnan+0x8a>
 8020b40:	2300      	movs	r3, #0
 8020b42:	2501      	movs	r5, #1
 8020b44:	3c04      	subs	r4, #4
 8020b46:	6023      	str	r3, [r4, #0]
 8020b48:	220f      	movs	r2, #15
 8020b4a:	6823      	ldr	r3, [r4, #0]
 8020b4c:	4010      	ands	r0, r2
 8020b4e:	011b      	lsls	r3, r3, #4
 8020b50:	4303      	orrs	r3, r0
 8020b52:	6023      	str	r3, [r4, #0]
 8020b54:	e7af      	b.n	8020ab6 <__hexnan+0x8a>
 8020b56:	9b06      	ldr	r3, [sp, #24]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d0dd      	beq.n	8020b18 <__hexnan+0xec>
 8020b5c:	2320      	movs	r3, #32
 8020b5e:	9a06      	ldr	r2, [sp, #24]
 8020b60:	9902      	ldr	r1, [sp, #8]
 8020b62:	1a9b      	subs	r3, r3, r2
 8020b64:	2201      	movs	r2, #1
 8020b66:	4252      	negs	r2, r2
 8020b68:	40da      	lsrs	r2, r3
 8020b6a:	3904      	subs	r1, #4
 8020b6c:	680b      	ldr	r3, [r1, #0]
 8020b6e:	4013      	ands	r3, r2
 8020b70:	600b      	str	r3, [r1, #0]
 8020b72:	e7d1      	b.n	8020b18 <__hexnan+0xec>
 8020b74:	3f04      	subs	r7, #4
 8020b76:	e7cf      	b.n	8020b18 <__hexnan+0xec>
 8020b78:	2004      	movs	r0, #4
 8020b7a:	e7d6      	b.n	8020b2a <__hexnan+0xfe>

08020b7c <malloc>:
 8020b7c:	b510      	push	{r4, lr}
 8020b7e:	4b03      	ldr	r3, [pc, #12]	@ (8020b8c <malloc+0x10>)
 8020b80:	0001      	movs	r1, r0
 8020b82:	6818      	ldr	r0, [r3, #0]
 8020b84:	f000 f826 	bl	8020bd4 <_malloc_r>
 8020b88:	bd10      	pop	{r4, pc}
 8020b8a:	46c0      	nop			@ (mov r8, r8)
 8020b8c:	200003c8 	.word	0x200003c8

08020b90 <sbrk_aligned>:
 8020b90:	b570      	push	{r4, r5, r6, lr}
 8020b92:	4e0f      	ldr	r6, [pc, #60]	@ (8020bd0 <sbrk_aligned+0x40>)
 8020b94:	000d      	movs	r5, r1
 8020b96:	6831      	ldr	r1, [r6, #0]
 8020b98:	0004      	movs	r4, r0
 8020b9a:	2900      	cmp	r1, #0
 8020b9c:	d102      	bne.n	8020ba4 <sbrk_aligned+0x14>
 8020b9e:	f001 f989 	bl	8021eb4 <_sbrk_r>
 8020ba2:	6030      	str	r0, [r6, #0]
 8020ba4:	0029      	movs	r1, r5
 8020ba6:	0020      	movs	r0, r4
 8020ba8:	f001 f984 	bl	8021eb4 <_sbrk_r>
 8020bac:	1c43      	adds	r3, r0, #1
 8020bae:	d103      	bne.n	8020bb8 <sbrk_aligned+0x28>
 8020bb0:	2501      	movs	r5, #1
 8020bb2:	426d      	negs	r5, r5
 8020bb4:	0028      	movs	r0, r5
 8020bb6:	bd70      	pop	{r4, r5, r6, pc}
 8020bb8:	2303      	movs	r3, #3
 8020bba:	1cc5      	adds	r5, r0, #3
 8020bbc:	439d      	bics	r5, r3
 8020bbe:	42a8      	cmp	r0, r5
 8020bc0:	d0f8      	beq.n	8020bb4 <sbrk_aligned+0x24>
 8020bc2:	1a29      	subs	r1, r5, r0
 8020bc4:	0020      	movs	r0, r4
 8020bc6:	f001 f975 	bl	8021eb4 <_sbrk_r>
 8020bca:	3001      	adds	r0, #1
 8020bcc:	d1f2      	bne.n	8020bb4 <sbrk_aligned+0x24>
 8020bce:	e7ef      	b.n	8020bb0 <sbrk_aligned+0x20>
 8020bd0:	200038f4 	.word	0x200038f4

08020bd4 <_malloc_r>:
 8020bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020bd6:	2203      	movs	r2, #3
 8020bd8:	1ccb      	adds	r3, r1, #3
 8020bda:	4393      	bics	r3, r2
 8020bdc:	3308      	adds	r3, #8
 8020bde:	0005      	movs	r5, r0
 8020be0:	001f      	movs	r7, r3
 8020be2:	2b0c      	cmp	r3, #12
 8020be4:	d234      	bcs.n	8020c50 <_malloc_r+0x7c>
 8020be6:	270c      	movs	r7, #12
 8020be8:	42b9      	cmp	r1, r7
 8020bea:	d833      	bhi.n	8020c54 <_malloc_r+0x80>
 8020bec:	0028      	movs	r0, r5
 8020bee:	f000 f883 	bl	8020cf8 <__malloc_lock>
 8020bf2:	4e37      	ldr	r6, [pc, #220]	@ (8020cd0 <_malloc_r+0xfc>)
 8020bf4:	6833      	ldr	r3, [r6, #0]
 8020bf6:	001c      	movs	r4, r3
 8020bf8:	2c00      	cmp	r4, #0
 8020bfa:	d12f      	bne.n	8020c5c <_malloc_r+0x88>
 8020bfc:	0039      	movs	r1, r7
 8020bfe:	0028      	movs	r0, r5
 8020c00:	f7ff ffc6 	bl	8020b90 <sbrk_aligned>
 8020c04:	0004      	movs	r4, r0
 8020c06:	1c43      	adds	r3, r0, #1
 8020c08:	d15f      	bne.n	8020cca <_malloc_r+0xf6>
 8020c0a:	6834      	ldr	r4, [r6, #0]
 8020c0c:	9400      	str	r4, [sp, #0]
 8020c0e:	9b00      	ldr	r3, [sp, #0]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d14a      	bne.n	8020caa <_malloc_r+0xd6>
 8020c14:	2c00      	cmp	r4, #0
 8020c16:	d052      	beq.n	8020cbe <_malloc_r+0xea>
 8020c18:	6823      	ldr	r3, [r4, #0]
 8020c1a:	0028      	movs	r0, r5
 8020c1c:	18e3      	adds	r3, r4, r3
 8020c1e:	9900      	ldr	r1, [sp, #0]
 8020c20:	9301      	str	r3, [sp, #4]
 8020c22:	f001 f947 	bl	8021eb4 <_sbrk_r>
 8020c26:	9b01      	ldr	r3, [sp, #4]
 8020c28:	4283      	cmp	r3, r0
 8020c2a:	d148      	bne.n	8020cbe <_malloc_r+0xea>
 8020c2c:	6823      	ldr	r3, [r4, #0]
 8020c2e:	0028      	movs	r0, r5
 8020c30:	1aff      	subs	r7, r7, r3
 8020c32:	0039      	movs	r1, r7
 8020c34:	f7ff ffac 	bl	8020b90 <sbrk_aligned>
 8020c38:	3001      	adds	r0, #1
 8020c3a:	d040      	beq.n	8020cbe <_malloc_r+0xea>
 8020c3c:	6823      	ldr	r3, [r4, #0]
 8020c3e:	19db      	adds	r3, r3, r7
 8020c40:	6023      	str	r3, [r4, #0]
 8020c42:	6833      	ldr	r3, [r6, #0]
 8020c44:	685a      	ldr	r2, [r3, #4]
 8020c46:	2a00      	cmp	r2, #0
 8020c48:	d133      	bne.n	8020cb2 <_malloc_r+0xde>
 8020c4a:	9b00      	ldr	r3, [sp, #0]
 8020c4c:	6033      	str	r3, [r6, #0]
 8020c4e:	e019      	b.n	8020c84 <_malloc_r+0xb0>
 8020c50:	2b00      	cmp	r3, #0
 8020c52:	dac9      	bge.n	8020be8 <_malloc_r+0x14>
 8020c54:	230c      	movs	r3, #12
 8020c56:	602b      	str	r3, [r5, #0]
 8020c58:	2000      	movs	r0, #0
 8020c5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020c5c:	6821      	ldr	r1, [r4, #0]
 8020c5e:	1bc9      	subs	r1, r1, r7
 8020c60:	d420      	bmi.n	8020ca4 <_malloc_r+0xd0>
 8020c62:	290b      	cmp	r1, #11
 8020c64:	d90a      	bls.n	8020c7c <_malloc_r+0xa8>
 8020c66:	19e2      	adds	r2, r4, r7
 8020c68:	6027      	str	r7, [r4, #0]
 8020c6a:	42a3      	cmp	r3, r4
 8020c6c:	d104      	bne.n	8020c78 <_malloc_r+0xa4>
 8020c6e:	6032      	str	r2, [r6, #0]
 8020c70:	6863      	ldr	r3, [r4, #4]
 8020c72:	6011      	str	r1, [r2, #0]
 8020c74:	6053      	str	r3, [r2, #4]
 8020c76:	e005      	b.n	8020c84 <_malloc_r+0xb0>
 8020c78:	605a      	str	r2, [r3, #4]
 8020c7a:	e7f9      	b.n	8020c70 <_malloc_r+0x9c>
 8020c7c:	6862      	ldr	r2, [r4, #4]
 8020c7e:	42a3      	cmp	r3, r4
 8020c80:	d10e      	bne.n	8020ca0 <_malloc_r+0xcc>
 8020c82:	6032      	str	r2, [r6, #0]
 8020c84:	0028      	movs	r0, r5
 8020c86:	f000 f83f 	bl	8020d08 <__malloc_unlock>
 8020c8a:	0020      	movs	r0, r4
 8020c8c:	2207      	movs	r2, #7
 8020c8e:	300b      	adds	r0, #11
 8020c90:	1d23      	adds	r3, r4, #4
 8020c92:	4390      	bics	r0, r2
 8020c94:	1ac2      	subs	r2, r0, r3
 8020c96:	4298      	cmp	r0, r3
 8020c98:	d0df      	beq.n	8020c5a <_malloc_r+0x86>
 8020c9a:	1a1b      	subs	r3, r3, r0
 8020c9c:	50a3      	str	r3, [r4, r2]
 8020c9e:	e7dc      	b.n	8020c5a <_malloc_r+0x86>
 8020ca0:	605a      	str	r2, [r3, #4]
 8020ca2:	e7ef      	b.n	8020c84 <_malloc_r+0xb0>
 8020ca4:	0023      	movs	r3, r4
 8020ca6:	6864      	ldr	r4, [r4, #4]
 8020ca8:	e7a6      	b.n	8020bf8 <_malloc_r+0x24>
 8020caa:	9c00      	ldr	r4, [sp, #0]
 8020cac:	6863      	ldr	r3, [r4, #4]
 8020cae:	9300      	str	r3, [sp, #0]
 8020cb0:	e7ad      	b.n	8020c0e <_malloc_r+0x3a>
 8020cb2:	001a      	movs	r2, r3
 8020cb4:	685b      	ldr	r3, [r3, #4]
 8020cb6:	42a3      	cmp	r3, r4
 8020cb8:	d1fb      	bne.n	8020cb2 <_malloc_r+0xde>
 8020cba:	2300      	movs	r3, #0
 8020cbc:	e7da      	b.n	8020c74 <_malloc_r+0xa0>
 8020cbe:	230c      	movs	r3, #12
 8020cc0:	0028      	movs	r0, r5
 8020cc2:	602b      	str	r3, [r5, #0]
 8020cc4:	f000 f820 	bl	8020d08 <__malloc_unlock>
 8020cc8:	e7c6      	b.n	8020c58 <_malloc_r+0x84>
 8020cca:	6007      	str	r7, [r0, #0]
 8020ccc:	e7da      	b.n	8020c84 <_malloc_r+0xb0>
 8020cce:	46c0      	nop			@ (mov r8, r8)
 8020cd0:	200038f8 	.word	0x200038f8

08020cd4 <__ascii_mbtowc>:
 8020cd4:	b082      	sub	sp, #8
 8020cd6:	2900      	cmp	r1, #0
 8020cd8:	d100      	bne.n	8020cdc <__ascii_mbtowc+0x8>
 8020cda:	a901      	add	r1, sp, #4
 8020cdc:	1e10      	subs	r0, r2, #0
 8020cde:	d006      	beq.n	8020cee <__ascii_mbtowc+0x1a>
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d006      	beq.n	8020cf2 <__ascii_mbtowc+0x1e>
 8020ce4:	7813      	ldrb	r3, [r2, #0]
 8020ce6:	600b      	str	r3, [r1, #0]
 8020ce8:	7810      	ldrb	r0, [r2, #0]
 8020cea:	1e43      	subs	r3, r0, #1
 8020cec:	4198      	sbcs	r0, r3
 8020cee:	b002      	add	sp, #8
 8020cf0:	4770      	bx	lr
 8020cf2:	2002      	movs	r0, #2
 8020cf4:	4240      	negs	r0, r0
 8020cf6:	e7fa      	b.n	8020cee <__ascii_mbtowc+0x1a>

08020cf8 <__malloc_lock>:
 8020cf8:	b510      	push	{r4, lr}
 8020cfa:	4802      	ldr	r0, [pc, #8]	@ (8020d04 <__malloc_lock+0xc>)
 8020cfc:	f7fe fcfb 	bl	801f6f6 <__retarget_lock_acquire_recursive>
 8020d00:	bd10      	pop	{r4, pc}
 8020d02:	46c0      	nop			@ (mov r8, r8)
 8020d04:	200038f0 	.word	0x200038f0

08020d08 <__malloc_unlock>:
 8020d08:	b510      	push	{r4, lr}
 8020d0a:	4802      	ldr	r0, [pc, #8]	@ (8020d14 <__malloc_unlock+0xc>)
 8020d0c:	f7fe fcf4 	bl	801f6f8 <__retarget_lock_release_recursive>
 8020d10:	bd10      	pop	{r4, pc}
 8020d12:	46c0      	nop			@ (mov r8, r8)
 8020d14:	200038f0 	.word	0x200038f0

08020d18 <_Balloc>:
 8020d18:	b570      	push	{r4, r5, r6, lr}
 8020d1a:	69c5      	ldr	r5, [r0, #28]
 8020d1c:	0006      	movs	r6, r0
 8020d1e:	000c      	movs	r4, r1
 8020d20:	2d00      	cmp	r5, #0
 8020d22:	d10e      	bne.n	8020d42 <_Balloc+0x2a>
 8020d24:	2010      	movs	r0, #16
 8020d26:	f7ff ff29 	bl	8020b7c <malloc>
 8020d2a:	1e02      	subs	r2, r0, #0
 8020d2c:	61f0      	str	r0, [r6, #28]
 8020d2e:	d104      	bne.n	8020d3a <_Balloc+0x22>
 8020d30:	216b      	movs	r1, #107	@ 0x6b
 8020d32:	4b19      	ldr	r3, [pc, #100]	@ (8020d98 <_Balloc+0x80>)
 8020d34:	4819      	ldr	r0, [pc, #100]	@ (8020d9c <_Balloc+0x84>)
 8020d36:	f001 f8cf 	bl	8021ed8 <__assert_func>
 8020d3a:	6045      	str	r5, [r0, #4]
 8020d3c:	6085      	str	r5, [r0, #8]
 8020d3e:	6005      	str	r5, [r0, #0]
 8020d40:	60c5      	str	r5, [r0, #12]
 8020d42:	69f5      	ldr	r5, [r6, #28]
 8020d44:	68eb      	ldr	r3, [r5, #12]
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	d013      	beq.n	8020d72 <_Balloc+0x5a>
 8020d4a:	69f3      	ldr	r3, [r6, #28]
 8020d4c:	00a2      	lsls	r2, r4, #2
 8020d4e:	68db      	ldr	r3, [r3, #12]
 8020d50:	189b      	adds	r3, r3, r2
 8020d52:	6818      	ldr	r0, [r3, #0]
 8020d54:	2800      	cmp	r0, #0
 8020d56:	d118      	bne.n	8020d8a <_Balloc+0x72>
 8020d58:	2101      	movs	r1, #1
 8020d5a:	000d      	movs	r5, r1
 8020d5c:	40a5      	lsls	r5, r4
 8020d5e:	1d6a      	adds	r2, r5, #5
 8020d60:	0030      	movs	r0, r6
 8020d62:	0092      	lsls	r2, r2, #2
 8020d64:	f001 f8d6 	bl	8021f14 <_calloc_r>
 8020d68:	2800      	cmp	r0, #0
 8020d6a:	d00c      	beq.n	8020d86 <_Balloc+0x6e>
 8020d6c:	6044      	str	r4, [r0, #4]
 8020d6e:	6085      	str	r5, [r0, #8]
 8020d70:	e00d      	b.n	8020d8e <_Balloc+0x76>
 8020d72:	2221      	movs	r2, #33	@ 0x21
 8020d74:	2104      	movs	r1, #4
 8020d76:	0030      	movs	r0, r6
 8020d78:	f001 f8cc 	bl	8021f14 <_calloc_r>
 8020d7c:	69f3      	ldr	r3, [r6, #28]
 8020d7e:	60e8      	str	r0, [r5, #12]
 8020d80:	68db      	ldr	r3, [r3, #12]
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d1e1      	bne.n	8020d4a <_Balloc+0x32>
 8020d86:	2000      	movs	r0, #0
 8020d88:	bd70      	pop	{r4, r5, r6, pc}
 8020d8a:	6802      	ldr	r2, [r0, #0]
 8020d8c:	601a      	str	r2, [r3, #0]
 8020d8e:	2300      	movs	r3, #0
 8020d90:	6103      	str	r3, [r0, #16]
 8020d92:	60c3      	str	r3, [r0, #12]
 8020d94:	e7f8      	b.n	8020d88 <_Balloc+0x70>
 8020d96:	46c0      	nop			@ (mov r8, r8)
 8020d98:	08024cfa 	.word	0x08024cfa
 8020d9c:	08024dda 	.word	0x08024dda

08020da0 <_Bfree>:
 8020da0:	b570      	push	{r4, r5, r6, lr}
 8020da2:	69c6      	ldr	r6, [r0, #28]
 8020da4:	0005      	movs	r5, r0
 8020da6:	000c      	movs	r4, r1
 8020da8:	2e00      	cmp	r6, #0
 8020daa:	d10e      	bne.n	8020dca <_Bfree+0x2a>
 8020dac:	2010      	movs	r0, #16
 8020dae:	f7ff fee5 	bl	8020b7c <malloc>
 8020db2:	1e02      	subs	r2, r0, #0
 8020db4:	61e8      	str	r0, [r5, #28]
 8020db6:	d104      	bne.n	8020dc2 <_Bfree+0x22>
 8020db8:	218f      	movs	r1, #143	@ 0x8f
 8020dba:	4b09      	ldr	r3, [pc, #36]	@ (8020de0 <_Bfree+0x40>)
 8020dbc:	4809      	ldr	r0, [pc, #36]	@ (8020de4 <_Bfree+0x44>)
 8020dbe:	f001 f88b 	bl	8021ed8 <__assert_func>
 8020dc2:	6046      	str	r6, [r0, #4]
 8020dc4:	6086      	str	r6, [r0, #8]
 8020dc6:	6006      	str	r6, [r0, #0]
 8020dc8:	60c6      	str	r6, [r0, #12]
 8020dca:	2c00      	cmp	r4, #0
 8020dcc:	d007      	beq.n	8020dde <_Bfree+0x3e>
 8020dce:	69eb      	ldr	r3, [r5, #28]
 8020dd0:	6862      	ldr	r2, [r4, #4]
 8020dd2:	68db      	ldr	r3, [r3, #12]
 8020dd4:	0092      	lsls	r2, r2, #2
 8020dd6:	189b      	adds	r3, r3, r2
 8020dd8:	681a      	ldr	r2, [r3, #0]
 8020dda:	6022      	str	r2, [r4, #0]
 8020ddc:	601c      	str	r4, [r3, #0]
 8020dde:	bd70      	pop	{r4, r5, r6, pc}
 8020de0:	08024cfa 	.word	0x08024cfa
 8020de4:	08024dda 	.word	0x08024dda

08020de8 <__multadd>:
 8020de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020dea:	000f      	movs	r7, r1
 8020dec:	9001      	str	r0, [sp, #4]
 8020dee:	000c      	movs	r4, r1
 8020df0:	001e      	movs	r6, r3
 8020df2:	2000      	movs	r0, #0
 8020df4:	690d      	ldr	r5, [r1, #16]
 8020df6:	3714      	adds	r7, #20
 8020df8:	683b      	ldr	r3, [r7, #0]
 8020dfa:	3001      	adds	r0, #1
 8020dfc:	b299      	uxth	r1, r3
 8020dfe:	4351      	muls	r1, r2
 8020e00:	0c1b      	lsrs	r3, r3, #16
 8020e02:	4353      	muls	r3, r2
 8020e04:	1989      	adds	r1, r1, r6
 8020e06:	0c0e      	lsrs	r6, r1, #16
 8020e08:	199b      	adds	r3, r3, r6
 8020e0a:	0c1e      	lsrs	r6, r3, #16
 8020e0c:	b289      	uxth	r1, r1
 8020e0e:	041b      	lsls	r3, r3, #16
 8020e10:	185b      	adds	r3, r3, r1
 8020e12:	c708      	stmia	r7!, {r3}
 8020e14:	4285      	cmp	r5, r0
 8020e16:	dcef      	bgt.n	8020df8 <__multadd+0x10>
 8020e18:	2e00      	cmp	r6, #0
 8020e1a:	d022      	beq.n	8020e62 <__multadd+0x7a>
 8020e1c:	68a3      	ldr	r3, [r4, #8]
 8020e1e:	42ab      	cmp	r3, r5
 8020e20:	dc19      	bgt.n	8020e56 <__multadd+0x6e>
 8020e22:	6861      	ldr	r1, [r4, #4]
 8020e24:	9801      	ldr	r0, [sp, #4]
 8020e26:	3101      	adds	r1, #1
 8020e28:	f7ff ff76 	bl	8020d18 <_Balloc>
 8020e2c:	1e07      	subs	r7, r0, #0
 8020e2e:	d105      	bne.n	8020e3c <__multadd+0x54>
 8020e30:	003a      	movs	r2, r7
 8020e32:	21ba      	movs	r1, #186	@ 0xba
 8020e34:	4b0c      	ldr	r3, [pc, #48]	@ (8020e68 <__multadd+0x80>)
 8020e36:	480d      	ldr	r0, [pc, #52]	@ (8020e6c <__multadd+0x84>)
 8020e38:	f001 f84e 	bl	8021ed8 <__assert_func>
 8020e3c:	0021      	movs	r1, r4
 8020e3e:	6922      	ldr	r2, [r4, #16]
 8020e40:	310c      	adds	r1, #12
 8020e42:	3202      	adds	r2, #2
 8020e44:	0092      	lsls	r2, r2, #2
 8020e46:	300c      	adds	r0, #12
 8020e48:	f7fe fc62 	bl	801f710 <memcpy>
 8020e4c:	0021      	movs	r1, r4
 8020e4e:	9801      	ldr	r0, [sp, #4]
 8020e50:	f7ff ffa6 	bl	8020da0 <_Bfree>
 8020e54:	003c      	movs	r4, r7
 8020e56:	1d2b      	adds	r3, r5, #4
 8020e58:	009b      	lsls	r3, r3, #2
 8020e5a:	18e3      	adds	r3, r4, r3
 8020e5c:	3501      	adds	r5, #1
 8020e5e:	605e      	str	r6, [r3, #4]
 8020e60:	6125      	str	r5, [r4, #16]
 8020e62:	0020      	movs	r0, r4
 8020e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020e66:	46c0      	nop			@ (mov r8, r8)
 8020e68:	08024d69 	.word	0x08024d69
 8020e6c:	08024dda 	.word	0x08024dda

08020e70 <__s2b>:
 8020e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020e72:	0007      	movs	r7, r0
 8020e74:	0018      	movs	r0, r3
 8020e76:	000c      	movs	r4, r1
 8020e78:	3008      	adds	r0, #8
 8020e7a:	2109      	movs	r1, #9
 8020e7c:	9301      	str	r3, [sp, #4]
 8020e7e:	0015      	movs	r5, r2
 8020e80:	f7df fa1a 	bl	80002b8 <__divsi3>
 8020e84:	2301      	movs	r3, #1
 8020e86:	2100      	movs	r1, #0
 8020e88:	4283      	cmp	r3, r0
 8020e8a:	db0a      	blt.n	8020ea2 <__s2b+0x32>
 8020e8c:	0038      	movs	r0, r7
 8020e8e:	f7ff ff43 	bl	8020d18 <_Balloc>
 8020e92:	1e01      	subs	r1, r0, #0
 8020e94:	d108      	bne.n	8020ea8 <__s2b+0x38>
 8020e96:	000a      	movs	r2, r1
 8020e98:	4b19      	ldr	r3, [pc, #100]	@ (8020f00 <__s2b+0x90>)
 8020e9a:	481a      	ldr	r0, [pc, #104]	@ (8020f04 <__s2b+0x94>)
 8020e9c:	31d3      	adds	r1, #211	@ 0xd3
 8020e9e:	f001 f81b 	bl	8021ed8 <__assert_func>
 8020ea2:	005b      	lsls	r3, r3, #1
 8020ea4:	3101      	adds	r1, #1
 8020ea6:	e7ef      	b.n	8020e88 <__s2b+0x18>
 8020ea8:	9b08      	ldr	r3, [sp, #32]
 8020eaa:	6143      	str	r3, [r0, #20]
 8020eac:	2301      	movs	r3, #1
 8020eae:	6103      	str	r3, [r0, #16]
 8020eb0:	2d09      	cmp	r5, #9
 8020eb2:	dd18      	ble.n	8020ee6 <__s2b+0x76>
 8020eb4:	0023      	movs	r3, r4
 8020eb6:	3309      	adds	r3, #9
 8020eb8:	001e      	movs	r6, r3
 8020eba:	9300      	str	r3, [sp, #0]
 8020ebc:	1964      	adds	r4, r4, r5
 8020ebe:	7833      	ldrb	r3, [r6, #0]
 8020ec0:	220a      	movs	r2, #10
 8020ec2:	0038      	movs	r0, r7
 8020ec4:	3b30      	subs	r3, #48	@ 0x30
 8020ec6:	f7ff ff8f 	bl	8020de8 <__multadd>
 8020eca:	3601      	adds	r6, #1
 8020ecc:	0001      	movs	r1, r0
 8020ece:	42a6      	cmp	r6, r4
 8020ed0:	d1f5      	bne.n	8020ebe <__s2b+0x4e>
 8020ed2:	002c      	movs	r4, r5
 8020ed4:	9b00      	ldr	r3, [sp, #0]
 8020ed6:	3c08      	subs	r4, #8
 8020ed8:	191c      	adds	r4, r3, r4
 8020eda:	002e      	movs	r6, r5
 8020edc:	9b01      	ldr	r3, [sp, #4]
 8020ede:	429e      	cmp	r6, r3
 8020ee0:	db04      	blt.n	8020eec <__s2b+0x7c>
 8020ee2:	0008      	movs	r0, r1
 8020ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ee6:	2509      	movs	r5, #9
 8020ee8:	340a      	adds	r4, #10
 8020eea:	e7f6      	b.n	8020eda <__s2b+0x6a>
 8020eec:	1b63      	subs	r3, r4, r5
 8020eee:	5d9b      	ldrb	r3, [r3, r6]
 8020ef0:	220a      	movs	r2, #10
 8020ef2:	0038      	movs	r0, r7
 8020ef4:	3b30      	subs	r3, #48	@ 0x30
 8020ef6:	f7ff ff77 	bl	8020de8 <__multadd>
 8020efa:	3601      	adds	r6, #1
 8020efc:	0001      	movs	r1, r0
 8020efe:	e7ed      	b.n	8020edc <__s2b+0x6c>
 8020f00:	08024d69 	.word	0x08024d69
 8020f04:	08024dda 	.word	0x08024dda

08020f08 <__hi0bits>:
 8020f08:	2280      	movs	r2, #128	@ 0x80
 8020f0a:	0003      	movs	r3, r0
 8020f0c:	0252      	lsls	r2, r2, #9
 8020f0e:	2000      	movs	r0, #0
 8020f10:	4293      	cmp	r3, r2
 8020f12:	d201      	bcs.n	8020f18 <__hi0bits+0x10>
 8020f14:	041b      	lsls	r3, r3, #16
 8020f16:	3010      	adds	r0, #16
 8020f18:	2280      	movs	r2, #128	@ 0x80
 8020f1a:	0452      	lsls	r2, r2, #17
 8020f1c:	4293      	cmp	r3, r2
 8020f1e:	d201      	bcs.n	8020f24 <__hi0bits+0x1c>
 8020f20:	3008      	adds	r0, #8
 8020f22:	021b      	lsls	r3, r3, #8
 8020f24:	2280      	movs	r2, #128	@ 0x80
 8020f26:	0552      	lsls	r2, r2, #21
 8020f28:	4293      	cmp	r3, r2
 8020f2a:	d201      	bcs.n	8020f30 <__hi0bits+0x28>
 8020f2c:	3004      	adds	r0, #4
 8020f2e:	011b      	lsls	r3, r3, #4
 8020f30:	2280      	movs	r2, #128	@ 0x80
 8020f32:	05d2      	lsls	r2, r2, #23
 8020f34:	4293      	cmp	r3, r2
 8020f36:	d201      	bcs.n	8020f3c <__hi0bits+0x34>
 8020f38:	3002      	adds	r0, #2
 8020f3a:	009b      	lsls	r3, r3, #2
 8020f3c:	2b00      	cmp	r3, #0
 8020f3e:	db03      	blt.n	8020f48 <__hi0bits+0x40>
 8020f40:	3001      	adds	r0, #1
 8020f42:	4213      	tst	r3, r2
 8020f44:	d100      	bne.n	8020f48 <__hi0bits+0x40>
 8020f46:	2020      	movs	r0, #32
 8020f48:	4770      	bx	lr

08020f4a <__lo0bits>:
 8020f4a:	6803      	ldr	r3, [r0, #0]
 8020f4c:	0001      	movs	r1, r0
 8020f4e:	2207      	movs	r2, #7
 8020f50:	0018      	movs	r0, r3
 8020f52:	4010      	ands	r0, r2
 8020f54:	4213      	tst	r3, r2
 8020f56:	d00d      	beq.n	8020f74 <__lo0bits+0x2a>
 8020f58:	3a06      	subs	r2, #6
 8020f5a:	2000      	movs	r0, #0
 8020f5c:	4213      	tst	r3, r2
 8020f5e:	d105      	bne.n	8020f6c <__lo0bits+0x22>
 8020f60:	3002      	adds	r0, #2
 8020f62:	4203      	tst	r3, r0
 8020f64:	d003      	beq.n	8020f6e <__lo0bits+0x24>
 8020f66:	40d3      	lsrs	r3, r2
 8020f68:	0010      	movs	r0, r2
 8020f6a:	600b      	str	r3, [r1, #0]
 8020f6c:	4770      	bx	lr
 8020f6e:	089b      	lsrs	r3, r3, #2
 8020f70:	600b      	str	r3, [r1, #0]
 8020f72:	e7fb      	b.n	8020f6c <__lo0bits+0x22>
 8020f74:	b29a      	uxth	r2, r3
 8020f76:	2a00      	cmp	r2, #0
 8020f78:	d101      	bne.n	8020f7e <__lo0bits+0x34>
 8020f7a:	2010      	movs	r0, #16
 8020f7c:	0c1b      	lsrs	r3, r3, #16
 8020f7e:	b2da      	uxtb	r2, r3
 8020f80:	2a00      	cmp	r2, #0
 8020f82:	d101      	bne.n	8020f88 <__lo0bits+0x3e>
 8020f84:	3008      	adds	r0, #8
 8020f86:	0a1b      	lsrs	r3, r3, #8
 8020f88:	071a      	lsls	r2, r3, #28
 8020f8a:	d101      	bne.n	8020f90 <__lo0bits+0x46>
 8020f8c:	3004      	adds	r0, #4
 8020f8e:	091b      	lsrs	r3, r3, #4
 8020f90:	079a      	lsls	r2, r3, #30
 8020f92:	d101      	bne.n	8020f98 <__lo0bits+0x4e>
 8020f94:	3002      	adds	r0, #2
 8020f96:	089b      	lsrs	r3, r3, #2
 8020f98:	07da      	lsls	r2, r3, #31
 8020f9a:	d4e9      	bmi.n	8020f70 <__lo0bits+0x26>
 8020f9c:	3001      	adds	r0, #1
 8020f9e:	085b      	lsrs	r3, r3, #1
 8020fa0:	d1e6      	bne.n	8020f70 <__lo0bits+0x26>
 8020fa2:	2020      	movs	r0, #32
 8020fa4:	e7e2      	b.n	8020f6c <__lo0bits+0x22>
	...

08020fa8 <__i2b>:
 8020fa8:	b510      	push	{r4, lr}
 8020faa:	000c      	movs	r4, r1
 8020fac:	2101      	movs	r1, #1
 8020fae:	f7ff feb3 	bl	8020d18 <_Balloc>
 8020fb2:	2800      	cmp	r0, #0
 8020fb4:	d107      	bne.n	8020fc6 <__i2b+0x1e>
 8020fb6:	2146      	movs	r1, #70	@ 0x46
 8020fb8:	4c05      	ldr	r4, [pc, #20]	@ (8020fd0 <__i2b+0x28>)
 8020fba:	0002      	movs	r2, r0
 8020fbc:	4b05      	ldr	r3, [pc, #20]	@ (8020fd4 <__i2b+0x2c>)
 8020fbe:	0020      	movs	r0, r4
 8020fc0:	31ff      	adds	r1, #255	@ 0xff
 8020fc2:	f000 ff89 	bl	8021ed8 <__assert_func>
 8020fc6:	2301      	movs	r3, #1
 8020fc8:	6144      	str	r4, [r0, #20]
 8020fca:	6103      	str	r3, [r0, #16]
 8020fcc:	bd10      	pop	{r4, pc}
 8020fce:	46c0      	nop			@ (mov r8, r8)
 8020fd0:	08024dda 	.word	0x08024dda
 8020fd4:	08024d69 	.word	0x08024d69

08020fd8 <__multiply>:
 8020fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020fda:	0014      	movs	r4, r2
 8020fdc:	690a      	ldr	r2, [r1, #16]
 8020fde:	6923      	ldr	r3, [r4, #16]
 8020fe0:	000d      	movs	r5, r1
 8020fe2:	b08b      	sub	sp, #44	@ 0x2c
 8020fe4:	429a      	cmp	r2, r3
 8020fe6:	db02      	blt.n	8020fee <__multiply+0x16>
 8020fe8:	0023      	movs	r3, r4
 8020fea:	000c      	movs	r4, r1
 8020fec:	001d      	movs	r5, r3
 8020fee:	6927      	ldr	r7, [r4, #16]
 8020ff0:	692e      	ldr	r6, [r5, #16]
 8020ff2:	6861      	ldr	r1, [r4, #4]
 8020ff4:	19bb      	adds	r3, r7, r6
 8020ff6:	9303      	str	r3, [sp, #12]
 8020ff8:	68a3      	ldr	r3, [r4, #8]
 8020ffa:	19ba      	adds	r2, r7, r6
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	da00      	bge.n	8021002 <__multiply+0x2a>
 8021000:	3101      	adds	r1, #1
 8021002:	f7ff fe89 	bl	8020d18 <_Balloc>
 8021006:	9002      	str	r0, [sp, #8]
 8021008:	2800      	cmp	r0, #0
 802100a:	d106      	bne.n	802101a <__multiply+0x42>
 802100c:	21b1      	movs	r1, #177	@ 0xb1
 802100e:	4b49      	ldr	r3, [pc, #292]	@ (8021134 <__multiply+0x15c>)
 8021010:	4849      	ldr	r0, [pc, #292]	@ (8021138 <__multiply+0x160>)
 8021012:	9a02      	ldr	r2, [sp, #8]
 8021014:	0049      	lsls	r1, r1, #1
 8021016:	f000 ff5f 	bl	8021ed8 <__assert_func>
 802101a:	9b02      	ldr	r3, [sp, #8]
 802101c:	2200      	movs	r2, #0
 802101e:	3314      	adds	r3, #20
 8021020:	469c      	mov	ip, r3
 8021022:	19bb      	adds	r3, r7, r6
 8021024:	009b      	lsls	r3, r3, #2
 8021026:	4463      	add	r3, ip
 8021028:	9304      	str	r3, [sp, #16]
 802102a:	4663      	mov	r3, ip
 802102c:	9904      	ldr	r1, [sp, #16]
 802102e:	428b      	cmp	r3, r1
 8021030:	d32a      	bcc.n	8021088 <__multiply+0xb0>
 8021032:	0023      	movs	r3, r4
 8021034:	00bf      	lsls	r7, r7, #2
 8021036:	3314      	adds	r3, #20
 8021038:	3514      	adds	r5, #20
 802103a:	9308      	str	r3, [sp, #32]
 802103c:	00b6      	lsls	r6, r6, #2
 802103e:	19db      	adds	r3, r3, r7
 8021040:	9305      	str	r3, [sp, #20]
 8021042:	19ab      	adds	r3, r5, r6
 8021044:	9309      	str	r3, [sp, #36]	@ 0x24
 8021046:	2304      	movs	r3, #4
 8021048:	9306      	str	r3, [sp, #24]
 802104a:	0023      	movs	r3, r4
 802104c:	9a05      	ldr	r2, [sp, #20]
 802104e:	3315      	adds	r3, #21
 8021050:	9501      	str	r5, [sp, #4]
 8021052:	429a      	cmp	r2, r3
 8021054:	d305      	bcc.n	8021062 <__multiply+0x8a>
 8021056:	1b13      	subs	r3, r2, r4
 8021058:	3b15      	subs	r3, #21
 802105a:	089b      	lsrs	r3, r3, #2
 802105c:	3301      	adds	r3, #1
 802105e:	009b      	lsls	r3, r3, #2
 8021060:	9306      	str	r3, [sp, #24]
 8021062:	9b01      	ldr	r3, [sp, #4]
 8021064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021066:	4293      	cmp	r3, r2
 8021068:	d310      	bcc.n	802108c <__multiply+0xb4>
 802106a:	9b03      	ldr	r3, [sp, #12]
 802106c:	2b00      	cmp	r3, #0
 802106e:	dd05      	ble.n	802107c <__multiply+0xa4>
 8021070:	9b04      	ldr	r3, [sp, #16]
 8021072:	3b04      	subs	r3, #4
 8021074:	9304      	str	r3, [sp, #16]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	2b00      	cmp	r3, #0
 802107a:	d056      	beq.n	802112a <__multiply+0x152>
 802107c:	9b02      	ldr	r3, [sp, #8]
 802107e:	9a03      	ldr	r2, [sp, #12]
 8021080:	0018      	movs	r0, r3
 8021082:	611a      	str	r2, [r3, #16]
 8021084:	b00b      	add	sp, #44	@ 0x2c
 8021086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021088:	c304      	stmia	r3!, {r2}
 802108a:	e7cf      	b.n	802102c <__multiply+0x54>
 802108c:	9b01      	ldr	r3, [sp, #4]
 802108e:	6818      	ldr	r0, [r3, #0]
 8021090:	b280      	uxth	r0, r0
 8021092:	2800      	cmp	r0, #0
 8021094:	d01e      	beq.n	80210d4 <__multiply+0xfc>
 8021096:	4667      	mov	r7, ip
 8021098:	2500      	movs	r5, #0
 802109a:	9e08      	ldr	r6, [sp, #32]
 802109c:	ce02      	ldmia	r6!, {r1}
 802109e:	683b      	ldr	r3, [r7, #0]
 80210a0:	9307      	str	r3, [sp, #28]
 80210a2:	b28b      	uxth	r3, r1
 80210a4:	4343      	muls	r3, r0
 80210a6:	001a      	movs	r2, r3
 80210a8:	466b      	mov	r3, sp
 80210aa:	0c09      	lsrs	r1, r1, #16
 80210ac:	8b9b      	ldrh	r3, [r3, #28]
 80210ae:	4341      	muls	r1, r0
 80210b0:	18d3      	adds	r3, r2, r3
 80210b2:	9a07      	ldr	r2, [sp, #28]
 80210b4:	195b      	adds	r3, r3, r5
 80210b6:	0c12      	lsrs	r2, r2, #16
 80210b8:	1889      	adds	r1, r1, r2
 80210ba:	0c1a      	lsrs	r2, r3, #16
 80210bc:	188a      	adds	r2, r1, r2
 80210be:	b29b      	uxth	r3, r3
 80210c0:	0c15      	lsrs	r5, r2, #16
 80210c2:	0412      	lsls	r2, r2, #16
 80210c4:	431a      	orrs	r2, r3
 80210c6:	9b05      	ldr	r3, [sp, #20]
 80210c8:	c704      	stmia	r7!, {r2}
 80210ca:	42b3      	cmp	r3, r6
 80210cc:	d8e6      	bhi.n	802109c <__multiply+0xc4>
 80210ce:	4663      	mov	r3, ip
 80210d0:	9a06      	ldr	r2, [sp, #24]
 80210d2:	509d      	str	r5, [r3, r2]
 80210d4:	9b01      	ldr	r3, [sp, #4]
 80210d6:	6818      	ldr	r0, [r3, #0]
 80210d8:	0c00      	lsrs	r0, r0, #16
 80210da:	d020      	beq.n	802111e <__multiply+0x146>
 80210dc:	4663      	mov	r3, ip
 80210de:	0025      	movs	r5, r4
 80210e0:	4661      	mov	r1, ip
 80210e2:	2700      	movs	r7, #0
 80210e4:	681b      	ldr	r3, [r3, #0]
 80210e6:	3514      	adds	r5, #20
 80210e8:	682a      	ldr	r2, [r5, #0]
 80210ea:	680e      	ldr	r6, [r1, #0]
 80210ec:	b292      	uxth	r2, r2
 80210ee:	4342      	muls	r2, r0
 80210f0:	0c36      	lsrs	r6, r6, #16
 80210f2:	1992      	adds	r2, r2, r6
 80210f4:	19d2      	adds	r2, r2, r7
 80210f6:	0416      	lsls	r6, r2, #16
 80210f8:	b29b      	uxth	r3, r3
 80210fa:	431e      	orrs	r6, r3
 80210fc:	600e      	str	r6, [r1, #0]
 80210fe:	cd40      	ldmia	r5!, {r6}
 8021100:	684b      	ldr	r3, [r1, #4]
 8021102:	0c36      	lsrs	r6, r6, #16
 8021104:	4346      	muls	r6, r0
 8021106:	b29b      	uxth	r3, r3
 8021108:	0c12      	lsrs	r2, r2, #16
 802110a:	18f3      	adds	r3, r6, r3
 802110c:	189b      	adds	r3, r3, r2
 802110e:	9a05      	ldr	r2, [sp, #20]
 8021110:	0c1f      	lsrs	r7, r3, #16
 8021112:	3104      	adds	r1, #4
 8021114:	42aa      	cmp	r2, r5
 8021116:	d8e7      	bhi.n	80210e8 <__multiply+0x110>
 8021118:	4662      	mov	r2, ip
 802111a:	9906      	ldr	r1, [sp, #24]
 802111c:	5053      	str	r3, [r2, r1]
 802111e:	9b01      	ldr	r3, [sp, #4]
 8021120:	3304      	adds	r3, #4
 8021122:	9301      	str	r3, [sp, #4]
 8021124:	2304      	movs	r3, #4
 8021126:	449c      	add	ip, r3
 8021128:	e79b      	b.n	8021062 <__multiply+0x8a>
 802112a:	9b03      	ldr	r3, [sp, #12]
 802112c:	3b01      	subs	r3, #1
 802112e:	9303      	str	r3, [sp, #12]
 8021130:	e79b      	b.n	802106a <__multiply+0x92>
 8021132:	46c0      	nop			@ (mov r8, r8)
 8021134:	08024d69 	.word	0x08024d69
 8021138:	08024dda 	.word	0x08024dda

0802113c <__pow5mult>:
 802113c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802113e:	2303      	movs	r3, #3
 8021140:	0015      	movs	r5, r2
 8021142:	0007      	movs	r7, r0
 8021144:	000e      	movs	r6, r1
 8021146:	401a      	ands	r2, r3
 8021148:	421d      	tst	r5, r3
 802114a:	d008      	beq.n	802115e <__pow5mult+0x22>
 802114c:	4925      	ldr	r1, [pc, #148]	@ (80211e4 <__pow5mult+0xa8>)
 802114e:	3a01      	subs	r2, #1
 8021150:	0092      	lsls	r2, r2, #2
 8021152:	5852      	ldr	r2, [r2, r1]
 8021154:	2300      	movs	r3, #0
 8021156:	0031      	movs	r1, r6
 8021158:	f7ff fe46 	bl	8020de8 <__multadd>
 802115c:	0006      	movs	r6, r0
 802115e:	10ad      	asrs	r5, r5, #2
 8021160:	d03d      	beq.n	80211de <__pow5mult+0xa2>
 8021162:	69fc      	ldr	r4, [r7, #28]
 8021164:	2c00      	cmp	r4, #0
 8021166:	d10f      	bne.n	8021188 <__pow5mult+0x4c>
 8021168:	2010      	movs	r0, #16
 802116a:	f7ff fd07 	bl	8020b7c <malloc>
 802116e:	1e02      	subs	r2, r0, #0
 8021170:	61f8      	str	r0, [r7, #28]
 8021172:	d105      	bne.n	8021180 <__pow5mult+0x44>
 8021174:	21b4      	movs	r1, #180	@ 0xb4
 8021176:	4b1c      	ldr	r3, [pc, #112]	@ (80211e8 <__pow5mult+0xac>)
 8021178:	481c      	ldr	r0, [pc, #112]	@ (80211ec <__pow5mult+0xb0>)
 802117a:	31ff      	adds	r1, #255	@ 0xff
 802117c:	f000 feac 	bl	8021ed8 <__assert_func>
 8021180:	6044      	str	r4, [r0, #4]
 8021182:	6084      	str	r4, [r0, #8]
 8021184:	6004      	str	r4, [r0, #0]
 8021186:	60c4      	str	r4, [r0, #12]
 8021188:	69fb      	ldr	r3, [r7, #28]
 802118a:	689c      	ldr	r4, [r3, #8]
 802118c:	9301      	str	r3, [sp, #4]
 802118e:	2c00      	cmp	r4, #0
 8021190:	d108      	bne.n	80211a4 <__pow5mult+0x68>
 8021192:	0038      	movs	r0, r7
 8021194:	4916      	ldr	r1, [pc, #88]	@ (80211f0 <__pow5mult+0xb4>)
 8021196:	f7ff ff07 	bl	8020fa8 <__i2b>
 802119a:	9b01      	ldr	r3, [sp, #4]
 802119c:	0004      	movs	r4, r0
 802119e:	6098      	str	r0, [r3, #8]
 80211a0:	2300      	movs	r3, #0
 80211a2:	6003      	str	r3, [r0, #0]
 80211a4:	2301      	movs	r3, #1
 80211a6:	421d      	tst	r5, r3
 80211a8:	d00a      	beq.n	80211c0 <__pow5mult+0x84>
 80211aa:	0031      	movs	r1, r6
 80211ac:	0022      	movs	r2, r4
 80211ae:	0038      	movs	r0, r7
 80211b0:	f7ff ff12 	bl	8020fd8 <__multiply>
 80211b4:	0031      	movs	r1, r6
 80211b6:	9001      	str	r0, [sp, #4]
 80211b8:	0038      	movs	r0, r7
 80211ba:	f7ff fdf1 	bl	8020da0 <_Bfree>
 80211be:	9e01      	ldr	r6, [sp, #4]
 80211c0:	106d      	asrs	r5, r5, #1
 80211c2:	d00c      	beq.n	80211de <__pow5mult+0xa2>
 80211c4:	6820      	ldr	r0, [r4, #0]
 80211c6:	2800      	cmp	r0, #0
 80211c8:	d107      	bne.n	80211da <__pow5mult+0x9e>
 80211ca:	0022      	movs	r2, r4
 80211cc:	0021      	movs	r1, r4
 80211ce:	0038      	movs	r0, r7
 80211d0:	f7ff ff02 	bl	8020fd8 <__multiply>
 80211d4:	2300      	movs	r3, #0
 80211d6:	6020      	str	r0, [r4, #0]
 80211d8:	6003      	str	r3, [r0, #0]
 80211da:	0004      	movs	r4, r0
 80211dc:	e7e2      	b.n	80211a4 <__pow5mult+0x68>
 80211de:	0030      	movs	r0, r6
 80211e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80211e2:	46c0      	nop			@ (mov r8, r8)
 80211e4:	08024e34 	.word	0x08024e34
 80211e8:	08024cfa 	.word	0x08024cfa
 80211ec:	08024dda 	.word	0x08024dda
 80211f0:	00000271 	.word	0x00000271

080211f4 <__lshift>:
 80211f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211f6:	000c      	movs	r4, r1
 80211f8:	0016      	movs	r6, r2
 80211fa:	6923      	ldr	r3, [r4, #16]
 80211fc:	1157      	asrs	r7, r2, #5
 80211fe:	b085      	sub	sp, #20
 8021200:	18fb      	adds	r3, r7, r3
 8021202:	9301      	str	r3, [sp, #4]
 8021204:	3301      	adds	r3, #1
 8021206:	9300      	str	r3, [sp, #0]
 8021208:	6849      	ldr	r1, [r1, #4]
 802120a:	68a3      	ldr	r3, [r4, #8]
 802120c:	9002      	str	r0, [sp, #8]
 802120e:	9a00      	ldr	r2, [sp, #0]
 8021210:	4293      	cmp	r3, r2
 8021212:	db10      	blt.n	8021236 <__lshift+0x42>
 8021214:	9802      	ldr	r0, [sp, #8]
 8021216:	f7ff fd7f 	bl	8020d18 <_Balloc>
 802121a:	2300      	movs	r3, #0
 802121c:	0001      	movs	r1, r0
 802121e:	0005      	movs	r5, r0
 8021220:	001a      	movs	r2, r3
 8021222:	3114      	adds	r1, #20
 8021224:	4298      	cmp	r0, r3
 8021226:	d10c      	bne.n	8021242 <__lshift+0x4e>
 8021228:	21ef      	movs	r1, #239	@ 0xef
 802122a:	002a      	movs	r2, r5
 802122c:	4b25      	ldr	r3, [pc, #148]	@ (80212c4 <__lshift+0xd0>)
 802122e:	4826      	ldr	r0, [pc, #152]	@ (80212c8 <__lshift+0xd4>)
 8021230:	0049      	lsls	r1, r1, #1
 8021232:	f000 fe51 	bl	8021ed8 <__assert_func>
 8021236:	3101      	adds	r1, #1
 8021238:	005b      	lsls	r3, r3, #1
 802123a:	e7e8      	b.n	802120e <__lshift+0x1a>
 802123c:	0098      	lsls	r0, r3, #2
 802123e:	500a      	str	r2, [r1, r0]
 8021240:	3301      	adds	r3, #1
 8021242:	42bb      	cmp	r3, r7
 8021244:	dbfa      	blt.n	802123c <__lshift+0x48>
 8021246:	43fb      	mvns	r3, r7
 8021248:	17db      	asrs	r3, r3, #31
 802124a:	401f      	ands	r7, r3
 802124c:	00bf      	lsls	r7, r7, #2
 802124e:	0023      	movs	r3, r4
 8021250:	201f      	movs	r0, #31
 8021252:	19c9      	adds	r1, r1, r7
 8021254:	0037      	movs	r7, r6
 8021256:	6922      	ldr	r2, [r4, #16]
 8021258:	3314      	adds	r3, #20
 802125a:	0092      	lsls	r2, r2, #2
 802125c:	189a      	adds	r2, r3, r2
 802125e:	4007      	ands	r7, r0
 8021260:	4206      	tst	r6, r0
 8021262:	d029      	beq.n	80212b8 <__lshift+0xc4>
 8021264:	3001      	adds	r0, #1
 8021266:	1bc0      	subs	r0, r0, r7
 8021268:	9003      	str	r0, [sp, #12]
 802126a:	468c      	mov	ip, r1
 802126c:	2000      	movs	r0, #0
 802126e:	681e      	ldr	r6, [r3, #0]
 8021270:	40be      	lsls	r6, r7
 8021272:	4306      	orrs	r6, r0
 8021274:	4660      	mov	r0, ip
 8021276:	c040      	stmia	r0!, {r6}
 8021278:	4684      	mov	ip, r0
 802127a:	9e03      	ldr	r6, [sp, #12]
 802127c:	cb01      	ldmia	r3!, {r0}
 802127e:	40f0      	lsrs	r0, r6
 8021280:	429a      	cmp	r2, r3
 8021282:	d8f4      	bhi.n	802126e <__lshift+0x7a>
 8021284:	0026      	movs	r6, r4
 8021286:	3615      	adds	r6, #21
 8021288:	2304      	movs	r3, #4
 802128a:	42b2      	cmp	r2, r6
 802128c:	d304      	bcc.n	8021298 <__lshift+0xa4>
 802128e:	1b13      	subs	r3, r2, r4
 8021290:	3b15      	subs	r3, #21
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	3301      	adds	r3, #1
 8021296:	009b      	lsls	r3, r3, #2
 8021298:	50c8      	str	r0, [r1, r3]
 802129a:	2800      	cmp	r0, #0
 802129c:	d002      	beq.n	80212a4 <__lshift+0xb0>
 802129e:	9b01      	ldr	r3, [sp, #4]
 80212a0:	3302      	adds	r3, #2
 80212a2:	9300      	str	r3, [sp, #0]
 80212a4:	9b00      	ldr	r3, [sp, #0]
 80212a6:	9802      	ldr	r0, [sp, #8]
 80212a8:	3b01      	subs	r3, #1
 80212aa:	0021      	movs	r1, r4
 80212ac:	612b      	str	r3, [r5, #16]
 80212ae:	f7ff fd77 	bl	8020da0 <_Bfree>
 80212b2:	0028      	movs	r0, r5
 80212b4:	b005      	add	sp, #20
 80212b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212b8:	cb01      	ldmia	r3!, {r0}
 80212ba:	c101      	stmia	r1!, {r0}
 80212bc:	429a      	cmp	r2, r3
 80212be:	d8fb      	bhi.n	80212b8 <__lshift+0xc4>
 80212c0:	e7f0      	b.n	80212a4 <__lshift+0xb0>
 80212c2:	46c0      	nop			@ (mov r8, r8)
 80212c4:	08024d69 	.word	0x08024d69
 80212c8:	08024dda 	.word	0x08024dda

080212cc <__mcmp>:
 80212cc:	b530      	push	{r4, r5, lr}
 80212ce:	690b      	ldr	r3, [r1, #16]
 80212d0:	6904      	ldr	r4, [r0, #16]
 80212d2:	0002      	movs	r2, r0
 80212d4:	1ae0      	subs	r0, r4, r3
 80212d6:	429c      	cmp	r4, r3
 80212d8:	d10f      	bne.n	80212fa <__mcmp+0x2e>
 80212da:	3214      	adds	r2, #20
 80212dc:	009b      	lsls	r3, r3, #2
 80212de:	3114      	adds	r1, #20
 80212e0:	0014      	movs	r4, r2
 80212e2:	18c9      	adds	r1, r1, r3
 80212e4:	18d2      	adds	r2, r2, r3
 80212e6:	3a04      	subs	r2, #4
 80212e8:	3904      	subs	r1, #4
 80212ea:	6815      	ldr	r5, [r2, #0]
 80212ec:	680b      	ldr	r3, [r1, #0]
 80212ee:	429d      	cmp	r5, r3
 80212f0:	d004      	beq.n	80212fc <__mcmp+0x30>
 80212f2:	2001      	movs	r0, #1
 80212f4:	429d      	cmp	r5, r3
 80212f6:	d200      	bcs.n	80212fa <__mcmp+0x2e>
 80212f8:	3802      	subs	r0, #2
 80212fa:	bd30      	pop	{r4, r5, pc}
 80212fc:	4294      	cmp	r4, r2
 80212fe:	d3f2      	bcc.n	80212e6 <__mcmp+0x1a>
 8021300:	e7fb      	b.n	80212fa <__mcmp+0x2e>
	...

08021304 <__mdiff>:
 8021304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021306:	000c      	movs	r4, r1
 8021308:	b087      	sub	sp, #28
 802130a:	9000      	str	r0, [sp, #0]
 802130c:	0011      	movs	r1, r2
 802130e:	0020      	movs	r0, r4
 8021310:	0017      	movs	r7, r2
 8021312:	f7ff ffdb 	bl	80212cc <__mcmp>
 8021316:	1e05      	subs	r5, r0, #0
 8021318:	d110      	bne.n	802133c <__mdiff+0x38>
 802131a:	0001      	movs	r1, r0
 802131c:	9800      	ldr	r0, [sp, #0]
 802131e:	f7ff fcfb 	bl	8020d18 <_Balloc>
 8021322:	1e02      	subs	r2, r0, #0
 8021324:	d104      	bne.n	8021330 <__mdiff+0x2c>
 8021326:	4b40      	ldr	r3, [pc, #256]	@ (8021428 <__mdiff+0x124>)
 8021328:	4840      	ldr	r0, [pc, #256]	@ (802142c <__mdiff+0x128>)
 802132a:	4941      	ldr	r1, [pc, #260]	@ (8021430 <__mdiff+0x12c>)
 802132c:	f000 fdd4 	bl	8021ed8 <__assert_func>
 8021330:	2301      	movs	r3, #1
 8021332:	6145      	str	r5, [r0, #20]
 8021334:	6103      	str	r3, [r0, #16]
 8021336:	0010      	movs	r0, r2
 8021338:	b007      	add	sp, #28
 802133a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802133c:	2600      	movs	r6, #0
 802133e:	42b0      	cmp	r0, r6
 8021340:	da03      	bge.n	802134a <__mdiff+0x46>
 8021342:	0023      	movs	r3, r4
 8021344:	003c      	movs	r4, r7
 8021346:	001f      	movs	r7, r3
 8021348:	3601      	adds	r6, #1
 802134a:	6861      	ldr	r1, [r4, #4]
 802134c:	9800      	ldr	r0, [sp, #0]
 802134e:	f7ff fce3 	bl	8020d18 <_Balloc>
 8021352:	1e02      	subs	r2, r0, #0
 8021354:	d103      	bne.n	802135e <__mdiff+0x5a>
 8021356:	4b34      	ldr	r3, [pc, #208]	@ (8021428 <__mdiff+0x124>)
 8021358:	4834      	ldr	r0, [pc, #208]	@ (802142c <__mdiff+0x128>)
 802135a:	4936      	ldr	r1, [pc, #216]	@ (8021434 <__mdiff+0x130>)
 802135c:	e7e6      	b.n	802132c <__mdiff+0x28>
 802135e:	6923      	ldr	r3, [r4, #16]
 8021360:	3414      	adds	r4, #20
 8021362:	9300      	str	r3, [sp, #0]
 8021364:	009b      	lsls	r3, r3, #2
 8021366:	18e3      	adds	r3, r4, r3
 8021368:	0021      	movs	r1, r4
 802136a:	9401      	str	r4, [sp, #4]
 802136c:	003c      	movs	r4, r7
 802136e:	9302      	str	r3, [sp, #8]
 8021370:	693b      	ldr	r3, [r7, #16]
 8021372:	3414      	adds	r4, #20
 8021374:	009b      	lsls	r3, r3, #2
 8021376:	18e3      	adds	r3, r4, r3
 8021378:	9303      	str	r3, [sp, #12]
 802137a:	0003      	movs	r3, r0
 802137c:	60c6      	str	r6, [r0, #12]
 802137e:	468c      	mov	ip, r1
 8021380:	2000      	movs	r0, #0
 8021382:	3314      	adds	r3, #20
 8021384:	9304      	str	r3, [sp, #16]
 8021386:	9305      	str	r3, [sp, #20]
 8021388:	4663      	mov	r3, ip
 802138a:	cb20      	ldmia	r3!, {r5}
 802138c:	b2a9      	uxth	r1, r5
 802138e:	000e      	movs	r6, r1
 8021390:	469c      	mov	ip, r3
 8021392:	cc08      	ldmia	r4!, {r3}
 8021394:	0c2d      	lsrs	r5, r5, #16
 8021396:	b299      	uxth	r1, r3
 8021398:	1a71      	subs	r1, r6, r1
 802139a:	1809      	adds	r1, r1, r0
 802139c:	0c1b      	lsrs	r3, r3, #16
 802139e:	1408      	asrs	r0, r1, #16
 80213a0:	1aeb      	subs	r3, r5, r3
 80213a2:	181b      	adds	r3, r3, r0
 80213a4:	1418      	asrs	r0, r3, #16
 80213a6:	b289      	uxth	r1, r1
 80213a8:	041b      	lsls	r3, r3, #16
 80213aa:	4319      	orrs	r1, r3
 80213ac:	9b05      	ldr	r3, [sp, #20]
 80213ae:	c302      	stmia	r3!, {r1}
 80213b0:	9305      	str	r3, [sp, #20]
 80213b2:	9b03      	ldr	r3, [sp, #12]
 80213b4:	42a3      	cmp	r3, r4
 80213b6:	d8e7      	bhi.n	8021388 <__mdiff+0x84>
 80213b8:	0039      	movs	r1, r7
 80213ba:	9c03      	ldr	r4, [sp, #12]
 80213bc:	3115      	adds	r1, #21
 80213be:	2304      	movs	r3, #4
 80213c0:	428c      	cmp	r4, r1
 80213c2:	d304      	bcc.n	80213ce <__mdiff+0xca>
 80213c4:	1be3      	subs	r3, r4, r7
 80213c6:	3b15      	subs	r3, #21
 80213c8:	089b      	lsrs	r3, r3, #2
 80213ca:	3301      	adds	r3, #1
 80213cc:	009b      	lsls	r3, r3, #2
 80213ce:	9901      	ldr	r1, [sp, #4]
 80213d0:	18cd      	adds	r5, r1, r3
 80213d2:	9904      	ldr	r1, [sp, #16]
 80213d4:	002e      	movs	r6, r5
 80213d6:	18cb      	adds	r3, r1, r3
 80213d8:	001f      	movs	r7, r3
 80213da:	9902      	ldr	r1, [sp, #8]
 80213dc:	428e      	cmp	r6, r1
 80213de:	d311      	bcc.n	8021404 <__mdiff+0x100>
 80213e0:	9c02      	ldr	r4, [sp, #8]
 80213e2:	1ee9      	subs	r1, r5, #3
 80213e4:	2000      	movs	r0, #0
 80213e6:	428c      	cmp	r4, r1
 80213e8:	d304      	bcc.n	80213f4 <__mdiff+0xf0>
 80213ea:	0021      	movs	r1, r4
 80213ec:	3103      	adds	r1, #3
 80213ee:	1b49      	subs	r1, r1, r5
 80213f0:	0889      	lsrs	r1, r1, #2
 80213f2:	0088      	lsls	r0, r1, #2
 80213f4:	181b      	adds	r3, r3, r0
 80213f6:	3b04      	subs	r3, #4
 80213f8:	6819      	ldr	r1, [r3, #0]
 80213fa:	2900      	cmp	r1, #0
 80213fc:	d010      	beq.n	8021420 <__mdiff+0x11c>
 80213fe:	9b00      	ldr	r3, [sp, #0]
 8021400:	6113      	str	r3, [r2, #16]
 8021402:	e798      	b.n	8021336 <__mdiff+0x32>
 8021404:	4684      	mov	ip, r0
 8021406:	ce02      	ldmia	r6!, {r1}
 8021408:	b288      	uxth	r0, r1
 802140a:	4460      	add	r0, ip
 802140c:	1400      	asrs	r0, r0, #16
 802140e:	0c0c      	lsrs	r4, r1, #16
 8021410:	1904      	adds	r4, r0, r4
 8021412:	4461      	add	r1, ip
 8021414:	1420      	asrs	r0, r4, #16
 8021416:	b289      	uxth	r1, r1
 8021418:	0424      	lsls	r4, r4, #16
 802141a:	4321      	orrs	r1, r4
 802141c:	c702      	stmia	r7!, {r1}
 802141e:	e7dc      	b.n	80213da <__mdiff+0xd6>
 8021420:	9900      	ldr	r1, [sp, #0]
 8021422:	3901      	subs	r1, #1
 8021424:	9100      	str	r1, [sp, #0]
 8021426:	e7e6      	b.n	80213f6 <__mdiff+0xf2>
 8021428:	08024d69 	.word	0x08024d69
 802142c:	08024dda 	.word	0x08024dda
 8021430:	00000237 	.word	0x00000237
 8021434:	00000245 	.word	0x00000245

08021438 <__ulp>:
 8021438:	b510      	push	{r4, lr}
 802143a:	2400      	movs	r4, #0
 802143c:	4b0c      	ldr	r3, [pc, #48]	@ (8021470 <__ulp+0x38>)
 802143e:	4a0d      	ldr	r2, [pc, #52]	@ (8021474 <__ulp+0x3c>)
 8021440:	400b      	ands	r3, r1
 8021442:	189b      	adds	r3, r3, r2
 8021444:	42a3      	cmp	r3, r4
 8021446:	dc06      	bgt.n	8021456 <__ulp+0x1e>
 8021448:	425b      	negs	r3, r3
 802144a:	151a      	asrs	r2, r3, #20
 802144c:	2a13      	cmp	r2, #19
 802144e:	dc05      	bgt.n	802145c <__ulp+0x24>
 8021450:	2380      	movs	r3, #128	@ 0x80
 8021452:	031b      	lsls	r3, r3, #12
 8021454:	4113      	asrs	r3, r2
 8021456:	0019      	movs	r1, r3
 8021458:	0020      	movs	r0, r4
 802145a:	bd10      	pop	{r4, pc}
 802145c:	3a14      	subs	r2, #20
 802145e:	2401      	movs	r4, #1
 8021460:	2a1e      	cmp	r2, #30
 8021462:	dc02      	bgt.n	802146a <__ulp+0x32>
 8021464:	2480      	movs	r4, #128	@ 0x80
 8021466:	0624      	lsls	r4, r4, #24
 8021468:	40d4      	lsrs	r4, r2
 802146a:	2300      	movs	r3, #0
 802146c:	e7f3      	b.n	8021456 <__ulp+0x1e>
 802146e:	46c0      	nop			@ (mov r8, r8)
 8021470:	7ff00000 	.word	0x7ff00000
 8021474:	fcc00000 	.word	0xfcc00000

08021478 <__b2d>:
 8021478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802147a:	0006      	movs	r6, r0
 802147c:	6903      	ldr	r3, [r0, #16]
 802147e:	3614      	adds	r6, #20
 8021480:	009b      	lsls	r3, r3, #2
 8021482:	18f3      	adds	r3, r6, r3
 8021484:	1f1d      	subs	r5, r3, #4
 8021486:	682c      	ldr	r4, [r5, #0]
 8021488:	000f      	movs	r7, r1
 802148a:	0020      	movs	r0, r4
 802148c:	9301      	str	r3, [sp, #4]
 802148e:	f7ff fd3b 	bl	8020f08 <__hi0bits>
 8021492:	2220      	movs	r2, #32
 8021494:	1a12      	subs	r2, r2, r0
 8021496:	603a      	str	r2, [r7, #0]
 8021498:	0003      	movs	r3, r0
 802149a:	4a1c      	ldr	r2, [pc, #112]	@ (802150c <__b2d+0x94>)
 802149c:	280a      	cmp	r0, #10
 802149e:	dc15      	bgt.n	80214cc <__b2d+0x54>
 80214a0:	210b      	movs	r1, #11
 80214a2:	0027      	movs	r7, r4
 80214a4:	1a09      	subs	r1, r1, r0
 80214a6:	40cf      	lsrs	r7, r1
 80214a8:	433a      	orrs	r2, r7
 80214aa:	468c      	mov	ip, r1
 80214ac:	0011      	movs	r1, r2
 80214ae:	2200      	movs	r2, #0
 80214b0:	42ae      	cmp	r6, r5
 80214b2:	d202      	bcs.n	80214ba <__b2d+0x42>
 80214b4:	9a01      	ldr	r2, [sp, #4]
 80214b6:	3a08      	subs	r2, #8
 80214b8:	6812      	ldr	r2, [r2, #0]
 80214ba:	3315      	adds	r3, #21
 80214bc:	409c      	lsls	r4, r3
 80214be:	4663      	mov	r3, ip
 80214c0:	0027      	movs	r7, r4
 80214c2:	40da      	lsrs	r2, r3
 80214c4:	4317      	orrs	r7, r2
 80214c6:	0038      	movs	r0, r7
 80214c8:	b003      	add	sp, #12
 80214ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214cc:	2700      	movs	r7, #0
 80214ce:	42ae      	cmp	r6, r5
 80214d0:	d202      	bcs.n	80214d8 <__b2d+0x60>
 80214d2:	9d01      	ldr	r5, [sp, #4]
 80214d4:	3d08      	subs	r5, #8
 80214d6:	682f      	ldr	r7, [r5, #0]
 80214d8:	210b      	movs	r1, #11
 80214da:	4249      	negs	r1, r1
 80214dc:	468c      	mov	ip, r1
 80214de:	449c      	add	ip, r3
 80214e0:	2b0b      	cmp	r3, #11
 80214e2:	d010      	beq.n	8021506 <__b2d+0x8e>
 80214e4:	4661      	mov	r1, ip
 80214e6:	2320      	movs	r3, #32
 80214e8:	408c      	lsls	r4, r1
 80214ea:	1a5b      	subs	r3, r3, r1
 80214ec:	0039      	movs	r1, r7
 80214ee:	40d9      	lsrs	r1, r3
 80214f0:	430c      	orrs	r4, r1
 80214f2:	4322      	orrs	r2, r4
 80214f4:	0011      	movs	r1, r2
 80214f6:	2200      	movs	r2, #0
 80214f8:	42b5      	cmp	r5, r6
 80214fa:	d901      	bls.n	8021500 <__b2d+0x88>
 80214fc:	3d04      	subs	r5, #4
 80214fe:	682a      	ldr	r2, [r5, #0]
 8021500:	4664      	mov	r4, ip
 8021502:	40a7      	lsls	r7, r4
 8021504:	e7dd      	b.n	80214c2 <__b2d+0x4a>
 8021506:	4322      	orrs	r2, r4
 8021508:	0011      	movs	r1, r2
 802150a:	e7dc      	b.n	80214c6 <__b2d+0x4e>
 802150c:	3ff00000 	.word	0x3ff00000

08021510 <__d2b>:
 8021510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021512:	2101      	movs	r1, #1
 8021514:	0016      	movs	r6, r2
 8021516:	001f      	movs	r7, r3
 8021518:	f7ff fbfe 	bl	8020d18 <_Balloc>
 802151c:	1e04      	subs	r4, r0, #0
 802151e:	d105      	bne.n	802152c <__d2b+0x1c>
 8021520:	0022      	movs	r2, r4
 8021522:	4b25      	ldr	r3, [pc, #148]	@ (80215b8 <__d2b+0xa8>)
 8021524:	4825      	ldr	r0, [pc, #148]	@ (80215bc <__d2b+0xac>)
 8021526:	4926      	ldr	r1, [pc, #152]	@ (80215c0 <__d2b+0xb0>)
 8021528:	f000 fcd6 	bl	8021ed8 <__assert_func>
 802152c:	033b      	lsls	r3, r7, #12
 802152e:	007d      	lsls	r5, r7, #1
 8021530:	0b1b      	lsrs	r3, r3, #12
 8021532:	0d6d      	lsrs	r5, r5, #21
 8021534:	d002      	beq.n	802153c <__d2b+0x2c>
 8021536:	2280      	movs	r2, #128	@ 0x80
 8021538:	0352      	lsls	r2, r2, #13
 802153a:	4313      	orrs	r3, r2
 802153c:	9301      	str	r3, [sp, #4]
 802153e:	2e00      	cmp	r6, #0
 8021540:	d025      	beq.n	802158e <__d2b+0x7e>
 8021542:	4668      	mov	r0, sp
 8021544:	9600      	str	r6, [sp, #0]
 8021546:	f7ff fd00 	bl	8020f4a <__lo0bits>
 802154a:	9b01      	ldr	r3, [sp, #4]
 802154c:	9900      	ldr	r1, [sp, #0]
 802154e:	2800      	cmp	r0, #0
 8021550:	d01b      	beq.n	802158a <__d2b+0x7a>
 8021552:	2220      	movs	r2, #32
 8021554:	001e      	movs	r6, r3
 8021556:	1a12      	subs	r2, r2, r0
 8021558:	4096      	lsls	r6, r2
 802155a:	0032      	movs	r2, r6
 802155c:	40c3      	lsrs	r3, r0
 802155e:	430a      	orrs	r2, r1
 8021560:	6162      	str	r2, [r4, #20]
 8021562:	9301      	str	r3, [sp, #4]
 8021564:	9e01      	ldr	r6, [sp, #4]
 8021566:	61a6      	str	r6, [r4, #24]
 8021568:	1e73      	subs	r3, r6, #1
 802156a:	419e      	sbcs	r6, r3
 802156c:	3601      	adds	r6, #1
 802156e:	6126      	str	r6, [r4, #16]
 8021570:	2d00      	cmp	r5, #0
 8021572:	d014      	beq.n	802159e <__d2b+0x8e>
 8021574:	2635      	movs	r6, #53	@ 0x35
 8021576:	4b13      	ldr	r3, [pc, #76]	@ (80215c4 <__d2b+0xb4>)
 8021578:	18ed      	adds	r5, r5, r3
 802157a:	9b08      	ldr	r3, [sp, #32]
 802157c:	182d      	adds	r5, r5, r0
 802157e:	601d      	str	r5, [r3, #0]
 8021580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021582:	1a36      	subs	r6, r6, r0
 8021584:	601e      	str	r6, [r3, #0]
 8021586:	0020      	movs	r0, r4
 8021588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802158a:	6161      	str	r1, [r4, #20]
 802158c:	e7ea      	b.n	8021564 <__d2b+0x54>
 802158e:	a801      	add	r0, sp, #4
 8021590:	f7ff fcdb 	bl	8020f4a <__lo0bits>
 8021594:	9b01      	ldr	r3, [sp, #4]
 8021596:	2601      	movs	r6, #1
 8021598:	6163      	str	r3, [r4, #20]
 802159a:	3020      	adds	r0, #32
 802159c:	e7e7      	b.n	802156e <__d2b+0x5e>
 802159e:	4b0a      	ldr	r3, [pc, #40]	@ (80215c8 <__d2b+0xb8>)
 80215a0:	18c0      	adds	r0, r0, r3
 80215a2:	9b08      	ldr	r3, [sp, #32]
 80215a4:	6018      	str	r0, [r3, #0]
 80215a6:	4b09      	ldr	r3, [pc, #36]	@ (80215cc <__d2b+0xbc>)
 80215a8:	18f3      	adds	r3, r6, r3
 80215aa:	009b      	lsls	r3, r3, #2
 80215ac:	18e3      	adds	r3, r4, r3
 80215ae:	6958      	ldr	r0, [r3, #20]
 80215b0:	f7ff fcaa 	bl	8020f08 <__hi0bits>
 80215b4:	0176      	lsls	r6, r6, #5
 80215b6:	e7e3      	b.n	8021580 <__d2b+0x70>
 80215b8:	08024d69 	.word	0x08024d69
 80215bc:	08024dda 	.word	0x08024dda
 80215c0:	0000030f 	.word	0x0000030f
 80215c4:	fffffbcd 	.word	0xfffffbcd
 80215c8:	fffffbce 	.word	0xfffffbce
 80215cc:	3fffffff 	.word	0x3fffffff

080215d0 <__ratio>:
 80215d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80215d2:	b087      	sub	sp, #28
 80215d4:	000f      	movs	r7, r1
 80215d6:	a904      	add	r1, sp, #16
 80215d8:	0006      	movs	r6, r0
 80215da:	f7ff ff4d 	bl	8021478 <__b2d>
 80215de:	9000      	str	r0, [sp, #0]
 80215e0:	9101      	str	r1, [sp, #4]
 80215e2:	9b00      	ldr	r3, [sp, #0]
 80215e4:	9c01      	ldr	r4, [sp, #4]
 80215e6:	0038      	movs	r0, r7
 80215e8:	a905      	add	r1, sp, #20
 80215ea:	9302      	str	r3, [sp, #8]
 80215ec:	9403      	str	r4, [sp, #12]
 80215ee:	f7ff ff43 	bl	8021478 <__b2d>
 80215f2:	000d      	movs	r5, r1
 80215f4:	0002      	movs	r2, r0
 80215f6:	000b      	movs	r3, r1
 80215f8:	6930      	ldr	r0, [r6, #16]
 80215fa:	6939      	ldr	r1, [r7, #16]
 80215fc:	9e04      	ldr	r6, [sp, #16]
 80215fe:	1a40      	subs	r0, r0, r1
 8021600:	9905      	ldr	r1, [sp, #20]
 8021602:	0140      	lsls	r0, r0, #5
 8021604:	1a71      	subs	r1, r6, r1
 8021606:	1841      	adds	r1, r0, r1
 8021608:	0508      	lsls	r0, r1, #20
 802160a:	2900      	cmp	r1, #0
 802160c:	dd08      	ble.n	8021620 <__ratio+0x50>
 802160e:	9901      	ldr	r1, [sp, #4]
 8021610:	1841      	adds	r1, r0, r1
 8021612:	9103      	str	r1, [sp, #12]
 8021614:	9802      	ldr	r0, [sp, #8]
 8021616:	9903      	ldr	r1, [sp, #12]
 8021618:	f7e0 fbcc 	bl	8001db4 <__aeabi_ddiv>
 802161c:	b007      	add	sp, #28
 802161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021620:	1a2b      	subs	r3, r5, r0
 8021622:	e7f7      	b.n	8021614 <__ratio+0x44>

08021624 <__copybits>:
 8021624:	b570      	push	{r4, r5, r6, lr}
 8021626:	0014      	movs	r4, r2
 8021628:	0005      	movs	r5, r0
 802162a:	3901      	subs	r1, #1
 802162c:	6913      	ldr	r3, [r2, #16]
 802162e:	1149      	asrs	r1, r1, #5
 8021630:	3101      	adds	r1, #1
 8021632:	0089      	lsls	r1, r1, #2
 8021634:	3414      	adds	r4, #20
 8021636:	009b      	lsls	r3, r3, #2
 8021638:	1841      	adds	r1, r0, r1
 802163a:	18e3      	adds	r3, r4, r3
 802163c:	42a3      	cmp	r3, r4
 802163e:	d80d      	bhi.n	802165c <__copybits+0x38>
 8021640:	0014      	movs	r4, r2
 8021642:	3411      	adds	r4, #17
 8021644:	2500      	movs	r5, #0
 8021646:	429c      	cmp	r4, r3
 8021648:	d803      	bhi.n	8021652 <__copybits+0x2e>
 802164a:	1a9b      	subs	r3, r3, r2
 802164c:	3b11      	subs	r3, #17
 802164e:	089b      	lsrs	r3, r3, #2
 8021650:	009d      	lsls	r5, r3, #2
 8021652:	2300      	movs	r3, #0
 8021654:	1940      	adds	r0, r0, r5
 8021656:	4281      	cmp	r1, r0
 8021658:	d803      	bhi.n	8021662 <__copybits+0x3e>
 802165a:	bd70      	pop	{r4, r5, r6, pc}
 802165c:	cc40      	ldmia	r4!, {r6}
 802165e:	c540      	stmia	r5!, {r6}
 8021660:	e7ec      	b.n	802163c <__copybits+0x18>
 8021662:	c008      	stmia	r0!, {r3}
 8021664:	e7f7      	b.n	8021656 <__copybits+0x32>

08021666 <__any_on>:
 8021666:	0002      	movs	r2, r0
 8021668:	6900      	ldr	r0, [r0, #16]
 802166a:	b510      	push	{r4, lr}
 802166c:	3214      	adds	r2, #20
 802166e:	114b      	asrs	r3, r1, #5
 8021670:	4298      	cmp	r0, r3
 8021672:	db13      	blt.n	802169c <__any_on+0x36>
 8021674:	dd0c      	ble.n	8021690 <__any_on+0x2a>
 8021676:	241f      	movs	r4, #31
 8021678:	0008      	movs	r0, r1
 802167a:	4020      	ands	r0, r4
 802167c:	4221      	tst	r1, r4
 802167e:	d007      	beq.n	8021690 <__any_on+0x2a>
 8021680:	0099      	lsls	r1, r3, #2
 8021682:	588c      	ldr	r4, [r1, r2]
 8021684:	0021      	movs	r1, r4
 8021686:	40c1      	lsrs	r1, r0
 8021688:	4081      	lsls	r1, r0
 802168a:	2001      	movs	r0, #1
 802168c:	428c      	cmp	r4, r1
 802168e:	d104      	bne.n	802169a <__any_on+0x34>
 8021690:	009b      	lsls	r3, r3, #2
 8021692:	18d3      	adds	r3, r2, r3
 8021694:	4293      	cmp	r3, r2
 8021696:	d803      	bhi.n	80216a0 <__any_on+0x3a>
 8021698:	2000      	movs	r0, #0
 802169a:	bd10      	pop	{r4, pc}
 802169c:	0003      	movs	r3, r0
 802169e:	e7f7      	b.n	8021690 <__any_on+0x2a>
 80216a0:	3b04      	subs	r3, #4
 80216a2:	6819      	ldr	r1, [r3, #0]
 80216a4:	2900      	cmp	r1, #0
 80216a6:	d0f5      	beq.n	8021694 <__any_on+0x2e>
 80216a8:	2001      	movs	r0, #1
 80216aa:	e7f6      	b.n	802169a <__any_on+0x34>

080216ac <__ascii_wctomb>:
 80216ac:	0003      	movs	r3, r0
 80216ae:	1e08      	subs	r0, r1, #0
 80216b0:	d005      	beq.n	80216be <__ascii_wctomb+0x12>
 80216b2:	2aff      	cmp	r2, #255	@ 0xff
 80216b4:	d904      	bls.n	80216c0 <__ascii_wctomb+0x14>
 80216b6:	228a      	movs	r2, #138	@ 0x8a
 80216b8:	2001      	movs	r0, #1
 80216ba:	601a      	str	r2, [r3, #0]
 80216bc:	4240      	negs	r0, r0
 80216be:	4770      	bx	lr
 80216c0:	2001      	movs	r0, #1
 80216c2:	700a      	strb	r2, [r1, #0]
 80216c4:	e7fb      	b.n	80216be <__ascii_wctomb+0x12>
	...

080216c8 <__ssputs_r>:
 80216c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ca:	688e      	ldr	r6, [r1, #8]
 80216cc:	b085      	sub	sp, #20
 80216ce:	001f      	movs	r7, r3
 80216d0:	000c      	movs	r4, r1
 80216d2:	680b      	ldr	r3, [r1, #0]
 80216d4:	9002      	str	r0, [sp, #8]
 80216d6:	9203      	str	r2, [sp, #12]
 80216d8:	42be      	cmp	r6, r7
 80216da:	d830      	bhi.n	802173e <__ssputs_r+0x76>
 80216dc:	210c      	movs	r1, #12
 80216de:	5e62      	ldrsh	r2, [r4, r1]
 80216e0:	2190      	movs	r1, #144	@ 0x90
 80216e2:	00c9      	lsls	r1, r1, #3
 80216e4:	420a      	tst	r2, r1
 80216e6:	d028      	beq.n	802173a <__ssputs_r+0x72>
 80216e8:	2003      	movs	r0, #3
 80216ea:	6921      	ldr	r1, [r4, #16]
 80216ec:	1a5b      	subs	r3, r3, r1
 80216ee:	9301      	str	r3, [sp, #4]
 80216f0:	6963      	ldr	r3, [r4, #20]
 80216f2:	4343      	muls	r3, r0
 80216f4:	9801      	ldr	r0, [sp, #4]
 80216f6:	0fdd      	lsrs	r5, r3, #31
 80216f8:	18ed      	adds	r5, r5, r3
 80216fa:	1c7b      	adds	r3, r7, #1
 80216fc:	181b      	adds	r3, r3, r0
 80216fe:	106d      	asrs	r5, r5, #1
 8021700:	42ab      	cmp	r3, r5
 8021702:	d900      	bls.n	8021706 <__ssputs_r+0x3e>
 8021704:	001d      	movs	r5, r3
 8021706:	0552      	lsls	r2, r2, #21
 8021708:	d528      	bpl.n	802175c <__ssputs_r+0x94>
 802170a:	0029      	movs	r1, r5
 802170c:	9802      	ldr	r0, [sp, #8]
 802170e:	f7ff fa61 	bl	8020bd4 <_malloc_r>
 8021712:	1e06      	subs	r6, r0, #0
 8021714:	d02c      	beq.n	8021770 <__ssputs_r+0xa8>
 8021716:	9a01      	ldr	r2, [sp, #4]
 8021718:	6921      	ldr	r1, [r4, #16]
 802171a:	f7fd fff9 	bl	801f710 <memcpy>
 802171e:	89a2      	ldrh	r2, [r4, #12]
 8021720:	4b18      	ldr	r3, [pc, #96]	@ (8021784 <__ssputs_r+0xbc>)
 8021722:	401a      	ands	r2, r3
 8021724:	2380      	movs	r3, #128	@ 0x80
 8021726:	4313      	orrs	r3, r2
 8021728:	81a3      	strh	r3, [r4, #12]
 802172a:	9b01      	ldr	r3, [sp, #4]
 802172c:	6126      	str	r6, [r4, #16]
 802172e:	18f6      	adds	r6, r6, r3
 8021730:	6026      	str	r6, [r4, #0]
 8021732:	003e      	movs	r6, r7
 8021734:	6165      	str	r5, [r4, #20]
 8021736:	1aed      	subs	r5, r5, r3
 8021738:	60a5      	str	r5, [r4, #8]
 802173a:	42be      	cmp	r6, r7
 802173c:	d900      	bls.n	8021740 <__ssputs_r+0x78>
 802173e:	003e      	movs	r6, r7
 8021740:	0032      	movs	r2, r6
 8021742:	9903      	ldr	r1, [sp, #12]
 8021744:	6820      	ldr	r0, [r4, #0]
 8021746:	f000 fb7e 	bl	8021e46 <memmove>
 802174a:	2000      	movs	r0, #0
 802174c:	68a3      	ldr	r3, [r4, #8]
 802174e:	1b9b      	subs	r3, r3, r6
 8021750:	60a3      	str	r3, [r4, #8]
 8021752:	6823      	ldr	r3, [r4, #0]
 8021754:	199b      	adds	r3, r3, r6
 8021756:	6023      	str	r3, [r4, #0]
 8021758:	b005      	add	sp, #20
 802175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802175c:	002a      	movs	r2, r5
 802175e:	9802      	ldr	r0, [sp, #8]
 8021760:	f000 fc05 	bl	8021f6e <_realloc_r>
 8021764:	1e06      	subs	r6, r0, #0
 8021766:	d1e0      	bne.n	802172a <__ssputs_r+0x62>
 8021768:	6921      	ldr	r1, [r4, #16]
 802176a:	9802      	ldr	r0, [sp, #8]
 802176c:	f7fe fe62 	bl	8020434 <_free_r>
 8021770:	230c      	movs	r3, #12
 8021772:	2001      	movs	r0, #1
 8021774:	9a02      	ldr	r2, [sp, #8]
 8021776:	4240      	negs	r0, r0
 8021778:	6013      	str	r3, [r2, #0]
 802177a:	89a2      	ldrh	r2, [r4, #12]
 802177c:	3334      	adds	r3, #52	@ 0x34
 802177e:	4313      	orrs	r3, r2
 8021780:	81a3      	strh	r3, [r4, #12]
 8021782:	e7e9      	b.n	8021758 <__ssputs_r+0x90>
 8021784:	fffffb7f 	.word	0xfffffb7f

08021788 <_svfiprintf_r>:
 8021788:	b5f0      	push	{r4, r5, r6, r7, lr}
 802178a:	b0a1      	sub	sp, #132	@ 0x84
 802178c:	9003      	str	r0, [sp, #12]
 802178e:	001d      	movs	r5, r3
 8021790:	898b      	ldrh	r3, [r1, #12]
 8021792:	000f      	movs	r7, r1
 8021794:	0016      	movs	r6, r2
 8021796:	061b      	lsls	r3, r3, #24
 8021798:	d511      	bpl.n	80217be <_svfiprintf_r+0x36>
 802179a:	690b      	ldr	r3, [r1, #16]
 802179c:	2b00      	cmp	r3, #0
 802179e:	d10e      	bne.n	80217be <_svfiprintf_r+0x36>
 80217a0:	2140      	movs	r1, #64	@ 0x40
 80217a2:	f7ff fa17 	bl	8020bd4 <_malloc_r>
 80217a6:	6038      	str	r0, [r7, #0]
 80217a8:	6138      	str	r0, [r7, #16]
 80217aa:	2800      	cmp	r0, #0
 80217ac:	d105      	bne.n	80217ba <_svfiprintf_r+0x32>
 80217ae:	230c      	movs	r3, #12
 80217b0:	9a03      	ldr	r2, [sp, #12]
 80217b2:	6013      	str	r3, [r2, #0]
 80217b4:	2001      	movs	r0, #1
 80217b6:	4240      	negs	r0, r0
 80217b8:	e0cf      	b.n	802195a <_svfiprintf_r+0x1d2>
 80217ba:	2340      	movs	r3, #64	@ 0x40
 80217bc:	617b      	str	r3, [r7, #20]
 80217be:	2300      	movs	r3, #0
 80217c0:	ac08      	add	r4, sp, #32
 80217c2:	6163      	str	r3, [r4, #20]
 80217c4:	3320      	adds	r3, #32
 80217c6:	7663      	strb	r3, [r4, #25]
 80217c8:	3310      	adds	r3, #16
 80217ca:	76a3      	strb	r3, [r4, #26]
 80217cc:	9507      	str	r5, [sp, #28]
 80217ce:	0035      	movs	r5, r6
 80217d0:	782b      	ldrb	r3, [r5, #0]
 80217d2:	2b00      	cmp	r3, #0
 80217d4:	d001      	beq.n	80217da <_svfiprintf_r+0x52>
 80217d6:	2b25      	cmp	r3, #37	@ 0x25
 80217d8:	d148      	bne.n	802186c <_svfiprintf_r+0xe4>
 80217da:	1bab      	subs	r3, r5, r6
 80217dc:	9305      	str	r3, [sp, #20]
 80217de:	42b5      	cmp	r5, r6
 80217e0:	d00b      	beq.n	80217fa <_svfiprintf_r+0x72>
 80217e2:	0032      	movs	r2, r6
 80217e4:	0039      	movs	r1, r7
 80217e6:	9803      	ldr	r0, [sp, #12]
 80217e8:	f7ff ff6e 	bl	80216c8 <__ssputs_r>
 80217ec:	3001      	adds	r0, #1
 80217ee:	d100      	bne.n	80217f2 <_svfiprintf_r+0x6a>
 80217f0:	e0ae      	b.n	8021950 <_svfiprintf_r+0x1c8>
 80217f2:	6963      	ldr	r3, [r4, #20]
 80217f4:	9a05      	ldr	r2, [sp, #20]
 80217f6:	189b      	adds	r3, r3, r2
 80217f8:	6163      	str	r3, [r4, #20]
 80217fa:	782b      	ldrb	r3, [r5, #0]
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	d100      	bne.n	8021802 <_svfiprintf_r+0x7a>
 8021800:	e0a6      	b.n	8021950 <_svfiprintf_r+0x1c8>
 8021802:	2201      	movs	r2, #1
 8021804:	2300      	movs	r3, #0
 8021806:	4252      	negs	r2, r2
 8021808:	6062      	str	r2, [r4, #4]
 802180a:	a904      	add	r1, sp, #16
 802180c:	3254      	adds	r2, #84	@ 0x54
 802180e:	1852      	adds	r2, r2, r1
 8021810:	1c6e      	adds	r6, r5, #1
 8021812:	6023      	str	r3, [r4, #0]
 8021814:	60e3      	str	r3, [r4, #12]
 8021816:	60a3      	str	r3, [r4, #8]
 8021818:	7013      	strb	r3, [r2, #0]
 802181a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802181c:	4b54      	ldr	r3, [pc, #336]	@ (8021970 <_svfiprintf_r+0x1e8>)
 802181e:	2205      	movs	r2, #5
 8021820:	0018      	movs	r0, r3
 8021822:	7831      	ldrb	r1, [r6, #0]
 8021824:	9305      	str	r3, [sp, #20]
 8021826:	f7fd ff68 	bl	801f6fa <memchr>
 802182a:	1c75      	adds	r5, r6, #1
 802182c:	2800      	cmp	r0, #0
 802182e:	d11f      	bne.n	8021870 <_svfiprintf_r+0xe8>
 8021830:	6822      	ldr	r2, [r4, #0]
 8021832:	06d3      	lsls	r3, r2, #27
 8021834:	d504      	bpl.n	8021840 <_svfiprintf_r+0xb8>
 8021836:	2353      	movs	r3, #83	@ 0x53
 8021838:	a904      	add	r1, sp, #16
 802183a:	185b      	adds	r3, r3, r1
 802183c:	2120      	movs	r1, #32
 802183e:	7019      	strb	r1, [r3, #0]
 8021840:	0713      	lsls	r3, r2, #28
 8021842:	d504      	bpl.n	802184e <_svfiprintf_r+0xc6>
 8021844:	2353      	movs	r3, #83	@ 0x53
 8021846:	a904      	add	r1, sp, #16
 8021848:	185b      	adds	r3, r3, r1
 802184a:	212b      	movs	r1, #43	@ 0x2b
 802184c:	7019      	strb	r1, [r3, #0]
 802184e:	7833      	ldrb	r3, [r6, #0]
 8021850:	2b2a      	cmp	r3, #42	@ 0x2a
 8021852:	d016      	beq.n	8021882 <_svfiprintf_r+0xfa>
 8021854:	0035      	movs	r5, r6
 8021856:	2100      	movs	r1, #0
 8021858:	200a      	movs	r0, #10
 802185a:	68e3      	ldr	r3, [r4, #12]
 802185c:	782a      	ldrb	r2, [r5, #0]
 802185e:	1c6e      	adds	r6, r5, #1
 8021860:	3a30      	subs	r2, #48	@ 0x30
 8021862:	2a09      	cmp	r2, #9
 8021864:	d950      	bls.n	8021908 <_svfiprintf_r+0x180>
 8021866:	2900      	cmp	r1, #0
 8021868:	d111      	bne.n	802188e <_svfiprintf_r+0x106>
 802186a:	e017      	b.n	802189c <_svfiprintf_r+0x114>
 802186c:	3501      	adds	r5, #1
 802186e:	e7af      	b.n	80217d0 <_svfiprintf_r+0x48>
 8021870:	9b05      	ldr	r3, [sp, #20]
 8021872:	6822      	ldr	r2, [r4, #0]
 8021874:	1ac0      	subs	r0, r0, r3
 8021876:	2301      	movs	r3, #1
 8021878:	4083      	lsls	r3, r0
 802187a:	4313      	orrs	r3, r2
 802187c:	002e      	movs	r6, r5
 802187e:	6023      	str	r3, [r4, #0]
 8021880:	e7cc      	b.n	802181c <_svfiprintf_r+0x94>
 8021882:	9b07      	ldr	r3, [sp, #28]
 8021884:	1d19      	adds	r1, r3, #4
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	9107      	str	r1, [sp, #28]
 802188a:	2b00      	cmp	r3, #0
 802188c:	db01      	blt.n	8021892 <_svfiprintf_r+0x10a>
 802188e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021890:	e004      	b.n	802189c <_svfiprintf_r+0x114>
 8021892:	425b      	negs	r3, r3
 8021894:	60e3      	str	r3, [r4, #12]
 8021896:	2302      	movs	r3, #2
 8021898:	4313      	orrs	r3, r2
 802189a:	6023      	str	r3, [r4, #0]
 802189c:	782b      	ldrb	r3, [r5, #0]
 802189e:	2b2e      	cmp	r3, #46	@ 0x2e
 80218a0:	d10c      	bne.n	80218bc <_svfiprintf_r+0x134>
 80218a2:	786b      	ldrb	r3, [r5, #1]
 80218a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80218a6:	d134      	bne.n	8021912 <_svfiprintf_r+0x18a>
 80218a8:	9b07      	ldr	r3, [sp, #28]
 80218aa:	3502      	adds	r5, #2
 80218ac:	1d1a      	adds	r2, r3, #4
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	9207      	str	r2, [sp, #28]
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	da01      	bge.n	80218ba <_svfiprintf_r+0x132>
 80218b6:	2301      	movs	r3, #1
 80218b8:	425b      	negs	r3, r3
 80218ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80218bc:	4e2d      	ldr	r6, [pc, #180]	@ (8021974 <_svfiprintf_r+0x1ec>)
 80218be:	2203      	movs	r2, #3
 80218c0:	0030      	movs	r0, r6
 80218c2:	7829      	ldrb	r1, [r5, #0]
 80218c4:	f7fd ff19 	bl	801f6fa <memchr>
 80218c8:	2800      	cmp	r0, #0
 80218ca:	d006      	beq.n	80218da <_svfiprintf_r+0x152>
 80218cc:	2340      	movs	r3, #64	@ 0x40
 80218ce:	1b80      	subs	r0, r0, r6
 80218d0:	4083      	lsls	r3, r0
 80218d2:	6822      	ldr	r2, [r4, #0]
 80218d4:	3501      	adds	r5, #1
 80218d6:	4313      	orrs	r3, r2
 80218d8:	6023      	str	r3, [r4, #0]
 80218da:	7829      	ldrb	r1, [r5, #0]
 80218dc:	2206      	movs	r2, #6
 80218de:	4826      	ldr	r0, [pc, #152]	@ (8021978 <_svfiprintf_r+0x1f0>)
 80218e0:	1c6e      	adds	r6, r5, #1
 80218e2:	7621      	strb	r1, [r4, #24]
 80218e4:	f7fd ff09 	bl	801f6fa <memchr>
 80218e8:	2800      	cmp	r0, #0
 80218ea:	d038      	beq.n	802195e <_svfiprintf_r+0x1d6>
 80218ec:	4b23      	ldr	r3, [pc, #140]	@ (802197c <_svfiprintf_r+0x1f4>)
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	d122      	bne.n	8021938 <_svfiprintf_r+0x1b0>
 80218f2:	2207      	movs	r2, #7
 80218f4:	9b07      	ldr	r3, [sp, #28]
 80218f6:	3307      	adds	r3, #7
 80218f8:	4393      	bics	r3, r2
 80218fa:	3308      	adds	r3, #8
 80218fc:	9307      	str	r3, [sp, #28]
 80218fe:	6963      	ldr	r3, [r4, #20]
 8021900:	9a04      	ldr	r2, [sp, #16]
 8021902:	189b      	adds	r3, r3, r2
 8021904:	6163      	str	r3, [r4, #20]
 8021906:	e762      	b.n	80217ce <_svfiprintf_r+0x46>
 8021908:	4343      	muls	r3, r0
 802190a:	0035      	movs	r5, r6
 802190c:	2101      	movs	r1, #1
 802190e:	189b      	adds	r3, r3, r2
 8021910:	e7a4      	b.n	802185c <_svfiprintf_r+0xd4>
 8021912:	2300      	movs	r3, #0
 8021914:	200a      	movs	r0, #10
 8021916:	0019      	movs	r1, r3
 8021918:	3501      	adds	r5, #1
 802191a:	6063      	str	r3, [r4, #4]
 802191c:	782a      	ldrb	r2, [r5, #0]
 802191e:	1c6e      	adds	r6, r5, #1
 8021920:	3a30      	subs	r2, #48	@ 0x30
 8021922:	2a09      	cmp	r2, #9
 8021924:	d903      	bls.n	802192e <_svfiprintf_r+0x1a6>
 8021926:	2b00      	cmp	r3, #0
 8021928:	d0c8      	beq.n	80218bc <_svfiprintf_r+0x134>
 802192a:	9109      	str	r1, [sp, #36]	@ 0x24
 802192c:	e7c6      	b.n	80218bc <_svfiprintf_r+0x134>
 802192e:	4341      	muls	r1, r0
 8021930:	0035      	movs	r5, r6
 8021932:	2301      	movs	r3, #1
 8021934:	1889      	adds	r1, r1, r2
 8021936:	e7f1      	b.n	802191c <_svfiprintf_r+0x194>
 8021938:	aa07      	add	r2, sp, #28
 802193a:	9200      	str	r2, [sp, #0]
 802193c:	0021      	movs	r1, r4
 802193e:	003a      	movs	r2, r7
 8021940:	4b0f      	ldr	r3, [pc, #60]	@ (8021980 <_svfiprintf_r+0x1f8>)
 8021942:	9803      	ldr	r0, [sp, #12]
 8021944:	f7fc ffd4 	bl	801e8f0 <_printf_float>
 8021948:	9004      	str	r0, [sp, #16]
 802194a:	9b04      	ldr	r3, [sp, #16]
 802194c:	3301      	adds	r3, #1
 802194e:	d1d6      	bne.n	80218fe <_svfiprintf_r+0x176>
 8021950:	89bb      	ldrh	r3, [r7, #12]
 8021952:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021954:	065b      	lsls	r3, r3, #25
 8021956:	d500      	bpl.n	802195a <_svfiprintf_r+0x1d2>
 8021958:	e72c      	b.n	80217b4 <_svfiprintf_r+0x2c>
 802195a:	b021      	add	sp, #132	@ 0x84
 802195c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802195e:	aa07      	add	r2, sp, #28
 8021960:	9200      	str	r2, [sp, #0]
 8021962:	0021      	movs	r1, r4
 8021964:	003a      	movs	r2, r7
 8021966:	4b06      	ldr	r3, [pc, #24]	@ (8021980 <_svfiprintf_r+0x1f8>)
 8021968:	9803      	ldr	r0, [sp, #12]
 802196a:	f7fd fa6f 	bl	801ee4c <_printf_i>
 802196e:	e7eb      	b.n	8021948 <_svfiprintf_r+0x1c0>
 8021970:	08024f30 	.word	0x08024f30
 8021974:	08024f36 	.word	0x08024f36
 8021978:	08024f3a 	.word	0x08024f3a
 802197c:	0801e8f1 	.word	0x0801e8f1
 8021980:	080216c9 	.word	0x080216c9

08021984 <__sfputc_r>:
 8021984:	6893      	ldr	r3, [r2, #8]
 8021986:	b510      	push	{r4, lr}
 8021988:	3b01      	subs	r3, #1
 802198a:	6093      	str	r3, [r2, #8]
 802198c:	2b00      	cmp	r3, #0
 802198e:	da04      	bge.n	802199a <__sfputc_r+0x16>
 8021990:	6994      	ldr	r4, [r2, #24]
 8021992:	42a3      	cmp	r3, r4
 8021994:	db07      	blt.n	80219a6 <__sfputc_r+0x22>
 8021996:	290a      	cmp	r1, #10
 8021998:	d005      	beq.n	80219a6 <__sfputc_r+0x22>
 802199a:	6813      	ldr	r3, [r2, #0]
 802199c:	1c58      	adds	r0, r3, #1
 802199e:	6010      	str	r0, [r2, #0]
 80219a0:	7019      	strb	r1, [r3, #0]
 80219a2:	0008      	movs	r0, r1
 80219a4:	bd10      	pop	{r4, pc}
 80219a6:	f7fd fd37 	bl	801f418 <__swbuf_r>
 80219aa:	0001      	movs	r1, r0
 80219ac:	e7f9      	b.n	80219a2 <__sfputc_r+0x1e>

080219ae <__sfputs_r>:
 80219ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80219b0:	0006      	movs	r6, r0
 80219b2:	000f      	movs	r7, r1
 80219b4:	0014      	movs	r4, r2
 80219b6:	18d5      	adds	r5, r2, r3
 80219b8:	42ac      	cmp	r4, r5
 80219ba:	d101      	bne.n	80219c0 <__sfputs_r+0x12>
 80219bc:	2000      	movs	r0, #0
 80219be:	e007      	b.n	80219d0 <__sfputs_r+0x22>
 80219c0:	7821      	ldrb	r1, [r4, #0]
 80219c2:	003a      	movs	r2, r7
 80219c4:	0030      	movs	r0, r6
 80219c6:	f7ff ffdd 	bl	8021984 <__sfputc_r>
 80219ca:	3401      	adds	r4, #1
 80219cc:	1c43      	adds	r3, r0, #1
 80219ce:	d1f3      	bne.n	80219b8 <__sfputs_r+0xa>
 80219d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080219d4 <_vfiprintf_r>:
 80219d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219d6:	b0a1      	sub	sp, #132	@ 0x84
 80219d8:	000f      	movs	r7, r1
 80219da:	0015      	movs	r5, r2
 80219dc:	001e      	movs	r6, r3
 80219de:	9003      	str	r0, [sp, #12]
 80219e0:	2800      	cmp	r0, #0
 80219e2:	d004      	beq.n	80219ee <_vfiprintf_r+0x1a>
 80219e4:	6a03      	ldr	r3, [r0, #32]
 80219e6:	2b00      	cmp	r3, #0
 80219e8:	d101      	bne.n	80219ee <_vfiprintf_r+0x1a>
 80219ea:	f7fd fbcd 	bl	801f188 <__sinit>
 80219ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80219f0:	07db      	lsls	r3, r3, #31
 80219f2:	d405      	bmi.n	8021a00 <_vfiprintf_r+0x2c>
 80219f4:	89bb      	ldrh	r3, [r7, #12]
 80219f6:	059b      	lsls	r3, r3, #22
 80219f8:	d402      	bmi.n	8021a00 <_vfiprintf_r+0x2c>
 80219fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80219fc:	f7fd fe7b 	bl	801f6f6 <__retarget_lock_acquire_recursive>
 8021a00:	89bb      	ldrh	r3, [r7, #12]
 8021a02:	071b      	lsls	r3, r3, #28
 8021a04:	d502      	bpl.n	8021a0c <_vfiprintf_r+0x38>
 8021a06:	693b      	ldr	r3, [r7, #16]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d113      	bne.n	8021a34 <_vfiprintf_r+0x60>
 8021a0c:	0039      	movs	r1, r7
 8021a0e:	9803      	ldr	r0, [sp, #12]
 8021a10:	f7fd fd44 	bl	801f49c <__swsetup_r>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	d00d      	beq.n	8021a34 <_vfiprintf_r+0x60>
 8021a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021a1a:	07db      	lsls	r3, r3, #31
 8021a1c:	d503      	bpl.n	8021a26 <_vfiprintf_r+0x52>
 8021a1e:	2001      	movs	r0, #1
 8021a20:	4240      	negs	r0, r0
 8021a22:	b021      	add	sp, #132	@ 0x84
 8021a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a26:	89bb      	ldrh	r3, [r7, #12]
 8021a28:	059b      	lsls	r3, r3, #22
 8021a2a:	d4f8      	bmi.n	8021a1e <_vfiprintf_r+0x4a>
 8021a2c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021a2e:	f7fd fe63 	bl	801f6f8 <__retarget_lock_release_recursive>
 8021a32:	e7f4      	b.n	8021a1e <_vfiprintf_r+0x4a>
 8021a34:	2300      	movs	r3, #0
 8021a36:	ac08      	add	r4, sp, #32
 8021a38:	6163      	str	r3, [r4, #20]
 8021a3a:	3320      	adds	r3, #32
 8021a3c:	7663      	strb	r3, [r4, #25]
 8021a3e:	3310      	adds	r3, #16
 8021a40:	76a3      	strb	r3, [r4, #26]
 8021a42:	9607      	str	r6, [sp, #28]
 8021a44:	002e      	movs	r6, r5
 8021a46:	7833      	ldrb	r3, [r6, #0]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d001      	beq.n	8021a50 <_vfiprintf_r+0x7c>
 8021a4c:	2b25      	cmp	r3, #37	@ 0x25
 8021a4e:	d148      	bne.n	8021ae2 <_vfiprintf_r+0x10e>
 8021a50:	1b73      	subs	r3, r6, r5
 8021a52:	9305      	str	r3, [sp, #20]
 8021a54:	42ae      	cmp	r6, r5
 8021a56:	d00b      	beq.n	8021a70 <_vfiprintf_r+0x9c>
 8021a58:	002a      	movs	r2, r5
 8021a5a:	0039      	movs	r1, r7
 8021a5c:	9803      	ldr	r0, [sp, #12]
 8021a5e:	f7ff ffa6 	bl	80219ae <__sfputs_r>
 8021a62:	3001      	adds	r0, #1
 8021a64:	d100      	bne.n	8021a68 <_vfiprintf_r+0x94>
 8021a66:	e0ae      	b.n	8021bc6 <_vfiprintf_r+0x1f2>
 8021a68:	6963      	ldr	r3, [r4, #20]
 8021a6a:	9a05      	ldr	r2, [sp, #20]
 8021a6c:	189b      	adds	r3, r3, r2
 8021a6e:	6163      	str	r3, [r4, #20]
 8021a70:	7833      	ldrb	r3, [r6, #0]
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d100      	bne.n	8021a78 <_vfiprintf_r+0xa4>
 8021a76:	e0a6      	b.n	8021bc6 <_vfiprintf_r+0x1f2>
 8021a78:	2201      	movs	r2, #1
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	4252      	negs	r2, r2
 8021a7e:	6062      	str	r2, [r4, #4]
 8021a80:	a904      	add	r1, sp, #16
 8021a82:	3254      	adds	r2, #84	@ 0x54
 8021a84:	1852      	adds	r2, r2, r1
 8021a86:	1c75      	adds	r5, r6, #1
 8021a88:	6023      	str	r3, [r4, #0]
 8021a8a:	60e3      	str	r3, [r4, #12]
 8021a8c:	60a3      	str	r3, [r4, #8]
 8021a8e:	7013      	strb	r3, [r2, #0]
 8021a90:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021a92:	4b59      	ldr	r3, [pc, #356]	@ (8021bf8 <_vfiprintf_r+0x224>)
 8021a94:	2205      	movs	r2, #5
 8021a96:	0018      	movs	r0, r3
 8021a98:	7829      	ldrb	r1, [r5, #0]
 8021a9a:	9305      	str	r3, [sp, #20]
 8021a9c:	f7fd fe2d 	bl	801f6fa <memchr>
 8021aa0:	1c6e      	adds	r6, r5, #1
 8021aa2:	2800      	cmp	r0, #0
 8021aa4:	d11f      	bne.n	8021ae6 <_vfiprintf_r+0x112>
 8021aa6:	6822      	ldr	r2, [r4, #0]
 8021aa8:	06d3      	lsls	r3, r2, #27
 8021aaa:	d504      	bpl.n	8021ab6 <_vfiprintf_r+0xe2>
 8021aac:	2353      	movs	r3, #83	@ 0x53
 8021aae:	a904      	add	r1, sp, #16
 8021ab0:	185b      	adds	r3, r3, r1
 8021ab2:	2120      	movs	r1, #32
 8021ab4:	7019      	strb	r1, [r3, #0]
 8021ab6:	0713      	lsls	r3, r2, #28
 8021ab8:	d504      	bpl.n	8021ac4 <_vfiprintf_r+0xf0>
 8021aba:	2353      	movs	r3, #83	@ 0x53
 8021abc:	a904      	add	r1, sp, #16
 8021abe:	185b      	adds	r3, r3, r1
 8021ac0:	212b      	movs	r1, #43	@ 0x2b
 8021ac2:	7019      	strb	r1, [r3, #0]
 8021ac4:	782b      	ldrb	r3, [r5, #0]
 8021ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ac8:	d016      	beq.n	8021af8 <_vfiprintf_r+0x124>
 8021aca:	002e      	movs	r6, r5
 8021acc:	2100      	movs	r1, #0
 8021ace:	200a      	movs	r0, #10
 8021ad0:	68e3      	ldr	r3, [r4, #12]
 8021ad2:	7832      	ldrb	r2, [r6, #0]
 8021ad4:	1c75      	adds	r5, r6, #1
 8021ad6:	3a30      	subs	r2, #48	@ 0x30
 8021ad8:	2a09      	cmp	r2, #9
 8021ada:	d950      	bls.n	8021b7e <_vfiprintf_r+0x1aa>
 8021adc:	2900      	cmp	r1, #0
 8021ade:	d111      	bne.n	8021b04 <_vfiprintf_r+0x130>
 8021ae0:	e017      	b.n	8021b12 <_vfiprintf_r+0x13e>
 8021ae2:	3601      	adds	r6, #1
 8021ae4:	e7af      	b.n	8021a46 <_vfiprintf_r+0x72>
 8021ae6:	9b05      	ldr	r3, [sp, #20]
 8021ae8:	6822      	ldr	r2, [r4, #0]
 8021aea:	1ac0      	subs	r0, r0, r3
 8021aec:	2301      	movs	r3, #1
 8021aee:	4083      	lsls	r3, r0
 8021af0:	4313      	orrs	r3, r2
 8021af2:	0035      	movs	r5, r6
 8021af4:	6023      	str	r3, [r4, #0]
 8021af6:	e7cc      	b.n	8021a92 <_vfiprintf_r+0xbe>
 8021af8:	9b07      	ldr	r3, [sp, #28]
 8021afa:	1d19      	adds	r1, r3, #4
 8021afc:	681b      	ldr	r3, [r3, #0]
 8021afe:	9107      	str	r1, [sp, #28]
 8021b00:	2b00      	cmp	r3, #0
 8021b02:	db01      	blt.n	8021b08 <_vfiprintf_r+0x134>
 8021b04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021b06:	e004      	b.n	8021b12 <_vfiprintf_r+0x13e>
 8021b08:	425b      	negs	r3, r3
 8021b0a:	60e3      	str	r3, [r4, #12]
 8021b0c:	2302      	movs	r3, #2
 8021b0e:	4313      	orrs	r3, r2
 8021b10:	6023      	str	r3, [r4, #0]
 8021b12:	7833      	ldrb	r3, [r6, #0]
 8021b14:	2b2e      	cmp	r3, #46	@ 0x2e
 8021b16:	d10c      	bne.n	8021b32 <_vfiprintf_r+0x15e>
 8021b18:	7873      	ldrb	r3, [r6, #1]
 8021b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8021b1c:	d134      	bne.n	8021b88 <_vfiprintf_r+0x1b4>
 8021b1e:	9b07      	ldr	r3, [sp, #28]
 8021b20:	3602      	adds	r6, #2
 8021b22:	1d1a      	adds	r2, r3, #4
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	9207      	str	r2, [sp, #28]
 8021b28:	2b00      	cmp	r3, #0
 8021b2a:	da01      	bge.n	8021b30 <_vfiprintf_r+0x15c>
 8021b2c:	2301      	movs	r3, #1
 8021b2e:	425b      	negs	r3, r3
 8021b30:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b32:	4d32      	ldr	r5, [pc, #200]	@ (8021bfc <_vfiprintf_r+0x228>)
 8021b34:	2203      	movs	r2, #3
 8021b36:	0028      	movs	r0, r5
 8021b38:	7831      	ldrb	r1, [r6, #0]
 8021b3a:	f7fd fdde 	bl	801f6fa <memchr>
 8021b3e:	2800      	cmp	r0, #0
 8021b40:	d006      	beq.n	8021b50 <_vfiprintf_r+0x17c>
 8021b42:	2340      	movs	r3, #64	@ 0x40
 8021b44:	1b40      	subs	r0, r0, r5
 8021b46:	4083      	lsls	r3, r0
 8021b48:	6822      	ldr	r2, [r4, #0]
 8021b4a:	3601      	adds	r6, #1
 8021b4c:	4313      	orrs	r3, r2
 8021b4e:	6023      	str	r3, [r4, #0]
 8021b50:	7831      	ldrb	r1, [r6, #0]
 8021b52:	2206      	movs	r2, #6
 8021b54:	482a      	ldr	r0, [pc, #168]	@ (8021c00 <_vfiprintf_r+0x22c>)
 8021b56:	1c75      	adds	r5, r6, #1
 8021b58:	7621      	strb	r1, [r4, #24]
 8021b5a:	f7fd fdce 	bl	801f6fa <memchr>
 8021b5e:	2800      	cmp	r0, #0
 8021b60:	d040      	beq.n	8021be4 <_vfiprintf_r+0x210>
 8021b62:	4b28      	ldr	r3, [pc, #160]	@ (8021c04 <_vfiprintf_r+0x230>)
 8021b64:	2b00      	cmp	r3, #0
 8021b66:	d122      	bne.n	8021bae <_vfiprintf_r+0x1da>
 8021b68:	2207      	movs	r2, #7
 8021b6a:	9b07      	ldr	r3, [sp, #28]
 8021b6c:	3307      	adds	r3, #7
 8021b6e:	4393      	bics	r3, r2
 8021b70:	3308      	adds	r3, #8
 8021b72:	9307      	str	r3, [sp, #28]
 8021b74:	6963      	ldr	r3, [r4, #20]
 8021b76:	9a04      	ldr	r2, [sp, #16]
 8021b78:	189b      	adds	r3, r3, r2
 8021b7a:	6163      	str	r3, [r4, #20]
 8021b7c:	e762      	b.n	8021a44 <_vfiprintf_r+0x70>
 8021b7e:	4343      	muls	r3, r0
 8021b80:	002e      	movs	r6, r5
 8021b82:	2101      	movs	r1, #1
 8021b84:	189b      	adds	r3, r3, r2
 8021b86:	e7a4      	b.n	8021ad2 <_vfiprintf_r+0xfe>
 8021b88:	2300      	movs	r3, #0
 8021b8a:	200a      	movs	r0, #10
 8021b8c:	0019      	movs	r1, r3
 8021b8e:	3601      	adds	r6, #1
 8021b90:	6063      	str	r3, [r4, #4]
 8021b92:	7832      	ldrb	r2, [r6, #0]
 8021b94:	1c75      	adds	r5, r6, #1
 8021b96:	3a30      	subs	r2, #48	@ 0x30
 8021b98:	2a09      	cmp	r2, #9
 8021b9a:	d903      	bls.n	8021ba4 <_vfiprintf_r+0x1d0>
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d0c8      	beq.n	8021b32 <_vfiprintf_r+0x15e>
 8021ba0:	9109      	str	r1, [sp, #36]	@ 0x24
 8021ba2:	e7c6      	b.n	8021b32 <_vfiprintf_r+0x15e>
 8021ba4:	4341      	muls	r1, r0
 8021ba6:	002e      	movs	r6, r5
 8021ba8:	2301      	movs	r3, #1
 8021baa:	1889      	adds	r1, r1, r2
 8021bac:	e7f1      	b.n	8021b92 <_vfiprintf_r+0x1be>
 8021bae:	aa07      	add	r2, sp, #28
 8021bb0:	9200      	str	r2, [sp, #0]
 8021bb2:	0021      	movs	r1, r4
 8021bb4:	003a      	movs	r2, r7
 8021bb6:	4b14      	ldr	r3, [pc, #80]	@ (8021c08 <_vfiprintf_r+0x234>)
 8021bb8:	9803      	ldr	r0, [sp, #12]
 8021bba:	f7fc fe99 	bl	801e8f0 <_printf_float>
 8021bbe:	9004      	str	r0, [sp, #16]
 8021bc0:	9b04      	ldr	r3, [sp, #16]
 8021bc2:	3301      	adds	r3, #1
 8021bc4:	d1d6      	bne.n	8021b74 <_vfiprintf_r+0x1a0>
 8021bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021bc8:	07db      	lsls	r3, r3, #31
 8021bca:	d405      	bmi.n	8021bd8 <_vfiprintf_r+0x204>
 8021bcc:	89bb      	ldrh	r3, [r7, #12]
 8021bce:	059b      	lsls	r3, r3, #22
 8021bd0:	d402      	bmi.n	8021bd8 <_vfiprintf_r+0x204>
 8021bd2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021bd4:	f7fd fd90 	bl	801f6f8 <__retarget_lock_release_recursive>
 8021bd8:	89bb      	ldrh	r3, [r7, #12]
 8021bda:	065b      	lsls	r3, r3, #25
 8021bdc:	d500      	bpl.n	8021be0 <_vfiprintf_r+0x20c>
 8021bde:	e71e      	b.n	8021a1e <_vfiprintf_r+0x4a>
 8021be0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021be2:	e71e      	b.n	8021a22 <_vfiprintf_r+0x4e>
 8021be4:	aa07      	add	r2, sp, #28
 8021be6:	9200      	str	r2, [sp, #0]
 8021be8:	0021      	movs	r1, r4
 8021bea:	003a      	movs	r2, r7
 8021bec:	4b06      	ldr	r3, [pc, #24]	@ (8021c08 <_vfiprintf_r+0x234>)
 8021bee:	9803      	ldr	r0, [sp, #12]
 8021bf0:	f7fd f92c 	bl	801ee4c <_printf_i>
 8021bf4:	e7e3      	b.n	8021bbe <_vfiprintf_r+0x1ea>
 8021bf6:	46c0      	nop			@ (mov r8, r8)
 8021bf8:	08024f30 	.word	0x08024f30
 8021bfc:	08024f36 	.word	0x08024f36
 8021c00:	08024f3a 	.word	0x08024f3a
 8021c04:	0801e8f1 	.word	0x0801e8f1
 8021c08:	080219af 	.word	0x080219af

08021c0c <__sflush_r>:
 8021c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021c0e:	220c      	movs	r2, #12
 8021c10:	5e8b      	ldrsh	r3, [r1, r2]
 8021c12:	0005      	movs	r5, r0
 8021c14:	000c      	movs	r4, r1
 8021c16:	071a      	lsls	r2, r3, #28
 8021c18:	d456      	bmi.n	8021cc8 <__sflush_r+0xbc>
 8021c1a:	684a      	ldr	r2, [r1, #4]
 8021c1c:	2a00      	cmp	r2, #0
 8021c1e:	dc02      	bgt.n	8021c26 <__sflush_r+0x1a>
 8021c20:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021c22:	2a00      	cmp	r2, #0
 8021c24:	dd4e      	ble.n	8021cc4 <__sflush_r+0xb8>
 8021c26:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021c28:	2f00      	cmp	r7, #0
 8021c2a:	d04b      	beq.n	8021cc4 <__sflush_r+0xb8>
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	2080      	movs	r0, #128	@ 0x80
 8021c30:	682e      	ldr	r6, [r5, #0]
 8021c32:	602a      	str	r2, [r5, #0]
 8021c34:	001a      	movs	r2, r3
 8021c36:	0140      	lsls	r0, r0, #5
 8021c38:	6a21      	ldr	r1, [r4, #32]
 8021c3a:	4002      	ands	r2, r0
 8021c3c:	4203      	tst	r3, r0
 8021c3e:	d033      	beq.n	8021ca8 <__sflush_r+0x9c>
 8021c40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021c42:	89a3      	ldrh	r3, [r4, #12]
 8021c44:	075b      	lsls	r3, r3, #29
 8021c46:	d506      	bpl.n	8021c56 <__sflush_r+0x4a>
 8021c48:	6863      	ldr	r3, [r4, #4]
 8021c4a:	1ad2      	subs	r2, r2, r3
 8021c4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021c4e:	2b00      	cmp	r3, #0
 8021c50:	d001      	beq.n	8021c56 <__sflush_r+0x4a>
 8021c52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021c54:	1ad2      	subs	r2, r2, r3
 8021c56:	2300      	movs	r3, #0
 8021c58:	0028      	movs	r0, r5
 8021c5a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021c5c:	6a21      	ldr	r1, [r4, #32]
 8021c5e:	47b8      	blx	r7
 8021c60:	89a2      	ldrh	r2, [r4, #12]
 8021c62:	1c43      	adds	r3, r0, #1
 8021c64:	d106      	bne.n	8021c74 <__sflush_r+0x68>
 8021c66:	6829      	ldr	r1, [r5, #0]
 8021c68:	291d      	cmp	r1, #29
 8021c6a:	d846      	bhi.n	8021cfa <__sflush_r+0xee>
 8021c6c:	4b29      	ldr	r3, [pc, #164]	@ (8021d14 <__sflush_r+0x108>)
 8021c6e:	410b      	asrs	r3, r1
 8021c70:	07db      	lsls	r3, r3, #31
 8021c72:	d442      	bmi.n	8021cfa <__sflush_r+0xee>
 8021c74:	2300      	movs	r3, #0
 8021c76:	6063      	str	r3, [r4, #4]
 8021c78:	6923      	ldr	r3, [r4, #16]
 8021c7a:	6023      	str	r3, [r4, #0]
 8021c7c:	04d2      	lsls	r2, r2, #19
 8021c7e:	d505      	bpl.n	8021c8c <__sflush_r+0x80>
 8021c80:	1c43      	adds	r3, r0, #1
 8021c82:	d102      	bne.n	8021c8a <__sflush_r+0x7e>
 8021c84:	682b      	ldr	r3, [r5, #0]
 8021c86:	2b00      	cmp	r3, #0
 8021c88:	d100      	bne.n	8021c8c <__sflush_r+0x80>
 8021c8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8021c8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021c8e:	602e      	str	r6, [r5, #0]
 8021c90:	2900      	cmp	r1, #0
 8021c92:	d017      	beq.n	8021cc4 <__sflush_r+0xb8>
 8021c94:	0023      	movs	r3, r4
 8021c96:	3344      	adds	r3, #68	@ 0x44
 8021c98:	4299      	cmp	r1, r3
 8021c9a:	d002      	beq.n	8021ca2 <__sflush_r+0x96>
 8021c9c:	0028      	movs	r0, r5
 8021c9e:	f7fe fbc9 	bl	8020434 <_free_r>
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8021ca6:	e00d      	b.n	8021cc4 <__sflush_r+0xb8>
 8021ca8:	2301      	movs	r3, #1
 8021caa:	0028      	movs	r0, r5
 8021cac:	47b8      	blx	r7
 8021cae:	0002      	movs	r2, r0
 8021cb0:	1c43      	adds	r3, r0, #1
 8021cb2:	d1c6      	bne.n	8021c42 <__sflush_r+0x36>
 8021cb4:	682b      	ldr	r3, [r5, #0]
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	d0c3      	beq.n	8021c42 <__sflush_r+0x36>
 8021cba:	2b1d      	cmp	r3, #29
 8021cbc:	d001      	beq.n	8021cc2 <__sflush_r+0xb6>
 8021cbe:	2b16      	cmp	r3, #22
 8021cc0:	d11a      	bne.n	8021cf8 <__sflush_r+0xec>
 8021cc2:	602e      	str	r6, [r5, #0]
 8021cc4:	2000      	movs	r0, #0
 8021cc6:	e01e      	b.n	8021d06 <__sflush_r+0xfa>
 8021cc8:	690e      	ldr	r6, [r1, #16]
 8021cca:	2e00      	cmp	r6, #0
 8021ccc:	d0fa      	beq.n	8021cc4 <__sflush_r+0xb8>
 8021cce:	680f      	ldr	r7, [r1, #0]
 8021cd0:	600e      	str	r6, [r1, #0]
 8021cd2:	1bba      	subs	r2, r7, r6
 8021cd4:	9201      	str	r2, [sp, #4]
 8021cd6:	2200      	movs	r2, #0
 8021cd8:	079b      	lsls	r3, r3, #30
 8021cda:	d100      	bne.n	8021cde <__sflush_r+0xd2>
 8021cdc:	694a      	ldr	r2, [r1, #20]
 8021cde:	60a2      	str	r2, [r4, #8]
 8021ce0:	9b01      	ldr	r3, [sp, #4]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	ddee      	ble.n	8021cc4 <__sflush_r+0xb8>
 8021ce6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021ce8:	0032      	movs	r2, r6
 8021cea:	001f      	movs	r7, r3
 8021cec:	0028      	movs	r0, r5
 8021cee:	9b01      	ldr	r3, [sp, #4]
 8021cf0:	6a21      	ldr	r1, [r4, #32]
 8021cf2:	47b8      	blx	r7
 8021cf4:	2800      	cmp	r0, #0
 8021cf6:	dc07      	bgt.n	8021d08 <__sflush_r+0xfc>
 8021cf8:	89a2      	ldrh	r2, [r4, #12]
 8021cfa:	2340      	movs	r3, #64	@ 0x40
 8021cfc:	2001      	movs	r0, #1
 8021cfe:	4313      	orrs	r3, r2
 8021d00:	b21b      	sxth	r3, r3
 8021d02:	81a3      	strh	r3, [r4, #12]
 8021d04:	4240      	negs	r0, r0
 8021d06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021d08:	9b01      	ldr	r3, [sp, #4]
 8021d0a:	1836      	adds	r6, r6, r0
 8021d0c:	1a1b      	subs	r3, r3, r0
 8021d0e:	9301      	str	r3, [sp, #4]
 8021d10:	e7e6      	b.n	8021ce0 <__sflush_r+0xd4>
 8021d12:	46c0      	nop			@ (mov r8, r8)
 8021d14:	dfbffffe 	.word	0xdfbffffe

08021d18 <_fflush_r>:
 8021d18:	690b      	ldr	r3, [r1, #16]
 8021d1a:	b570      	push	{r4, r5, r6, lr}
 8021d1c:	0005      	movs	r5, r0
 8021d1e:	000c      	movs	r4, r1
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	d102      	bne.n	8021d2a <_fflush_r+0x12>
 8021d24:	2500      	movs	r5, #0
 8021d26:	0028      	movs	r0, r5
 8021d28:	bd70      	pop	{r4, r5, r6, pc}
 8021d2a:	2800      	cmp	r0, #0
 8021d2c:	d004      	beq.n	8021d38 <_fflush_r+0x20>
 8021d2e:	6a03      	ldr	r3, [r0, #32]
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d101      	bne.n	8021d38 <_fflush_r+0x20>
 8021d34:	f7fd fa28 	bl	801f188 <__sinit>
 8021d38:	220c      	movs	r2, #12
 8021d3a:	5ea3      	ldrsh	r3, [r4, r2]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d0f1      	beq.n	8021d24 <_fflush_r+0xc>
 8021d40:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021d42:	07d2      	lsls	r2, r2, #31
 8021d44:	d404      	bmi.n	8021d50 <_fflush_r+0x38>
 8021d46:	059b      	lsls	r3, r3, #22
 8021d48:	d402      	bmi.n	8021d50 <_fflush_r+0x38>
 8021d4a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021d4c:	f7fd fcd3 	bl	801f6f6 <__retarget_lock_acquire_recursive>
 8021d50:	0028      	movs	r0, r5
 8021d52:	0021      	movs	r1, r4
 8021d54:	f7ff ff5a 	bl	8021c0c <__sflush_r>
 8021d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021d5a:	0005      	movs	r5, r0
 8021d5c:	07db      	lsls	r3, r3, #31
 8021d5e:	d4e2      	bmi.n	8021d26 <_fflush_r+0xe>
 8021d60:	89a3      	ldrh	r3, [r4, #12]
 8021d62:	059b      	lsls	r3, r3, #22
 8021d64:	d4df      	bmi.n	8021d26 <_fflush_r+0xe>
 8021d66:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021d68:	f7fd fcc6 	bl	801f6f8 <__retarget_lock_release_recursive>
 8021d6c:	e7db      	b.n	8021d26 <_fflush_r+0xe>
	...

08021d70 <__swhatbuf_r>:
 8021d70:	b570      	push	{r4, r5, r6, lr}
 8021d72:	000e      	movs	r6, r1
 8021d74:	001d      	movs	r5, r3
 8021d76:	230e      	movs	r3, #14
 8021d78:	5ec9      	ldrsh	r1, [r1, r3]
 8021d7a:	0014      	movs	r4, r2
 8021d7c:	b096      	sub	sp, #88	@ 0x58
 8021d7e:	2900      	cmp	r1, #0
 8021d80:	da0c      	bge.n	8021d9c <__swhatbuf_r+0x2c>
 8021d82:	89b2      	ldrh	r2, [r6, #12]
 8021d84:	2380      	movs	r3, #128	@ 0x80
 8021d86:	0011      	movs	r1, r2
 8021d88:	4019      	ands	r1, r3
 8021d8a:	421a      	tst	r2, r3
 8021d8c:	d114      	bne.n	8021db8 <__swhatbuf_r+0x48>
 8021d8e:	2380      	movs	r3, #128	@ 0x80
 8021d90:	00db      	lsls	r3, r3, #3
 8021d92:	2000      	movs	r0, #0
 8021d94:	6029      	str	r1, [r5, #0]
 8021d96:	6023      	str	r3, [r4, #0]
 8021d98:	b016      	add	sp, #88	@ 0x58
 8021d9a:	bd70      	pop	{r4, r5, r6, pc}
 8021d9c:	466a      	mov	r2, sp
 8021d9e:	f000 f865 	bl	8021e6c <_fstat_r>
 8021da2:	2800      	cmp	r0, #0
 8021da4:	dbed      	blt.n	8021d82 <__swhatbuf_r+0x12>
 8021da6:	23f0      	movs	r3, #240	@ 0xf0
 8021da8:	9901      	ldr	r1, [sp, #4]
 8021daa:	021b      	lsls	r3, r3, #8
 8021dac:	4019      	ands	r1, r3
 8021dae:	4b04      	ldr	r3, [pc, #16]	@ (8021dc0 <__swhatbuf_r+0x50>)
 8021db0:	18c9      	adds	r1, r1, r3
 8021db2:	424b      	negs	r3, r1
 8021db4:	4159      	adcs	r1, r3
 8021db6:	e7ea      	b.n	8021d8e <__swhatbuf_r+0x1e>
 8021db8:	2100      	movs	r1, #0
 8021dba:	2340      	movs	r3, #64	@ 0x40
 8021dbc:	e7e9      	b.n	8021d92 <__swhatbuf_r+0x22>
 8021dbe:	46c0      	nop			@ (mov r8, r8)
 8021dc0:	ffffe000 	.word	0xffffe000

08021dc4 <__smakebuf_r>:
 8021dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021dc6:	2602      	movs	r6, #2
 8021dc8:	898b      	ldrh	r3, [r1, #12]
 8021dca:	0005      	movs	r5, r0
 8021dcc:	000c      	movs	r4, r1
 8021dce:	b085      	sub	sp, #20
 8021dd0:	4233      	tst	r3, r6
 8021dd2:	d007      	beq.n	8021de4 <__smakebuf_r+0x20>
 8021dd4:	0023      	movs	r3, r4
 8021dd6:	3347      	adds	r3, #71	@ 0x47
 8021dd8:	6023      	str	r3, [r4, #0]
 8021dda:	6123      	str	r3, [r4, #16]
 8021ddc:	2301      	movs	r3, #1
 8021dde:	6163      	str	r3, [r4, #20]
 8021de0:	b005      	add	sp, #20
 8021de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021de4:	ab03      	add	r3, sp, #12
 8021de6:	aa02      	add	r2, sp, #8
 8021de8:	f7ff ffc2 	bl	8021d70 <__swhatbuf_r>
 8021dec:	9f02      	ldr	r7, [sp, #8]
 8021dee:	9001      	str	r0, [sp, #4]
 8021df0:	0039      	movs	r1, r7
 8021df2:	0028      	movs	r0, r5
 8021df4:	f7fe feee 	bl	8020bd4 <_malloc_r>
 8021df8:	2800      	cmp	r0, #0
 8021dfa:	d108      	bne.n	8021e0e <__smakebuf_r+0x4a>
 8021dfc:	220c      	movs	r2, #12
 8021dfe:	5ea3      	ldrsh	r3, [r4, r2]
 8021e00:	059a      	lsls	r2, r3, #22
 8021e02:	d4ed      	bmi.n	8021de0 <__smakebuf_r+0x1c>
 8021e04:	2203      	movs	r2, #3
 8021e06:	4393      	bics	r3, r2
 8021e08:	431e      	orrs	r6, r3
 8021e0a:	81a6      	strh	r6, [r4, #12]
 8021e0c:	e7e2      	b.n	8021dd4 <__smakebuf_r+0x10>
 8021e0e:	2380      	movs	r3, #128	@ 0x80
 8021e10:	89a2      	ldrh	r2, [r4, #12]
 8021e12:	6020      	str	r0, [r4, #0]
 8021e14:	4313      	orrs	r3, r2
 8021e16:	81a3      	strh	r3, [r4, #12]
 8021e18:	9b03      	ldr	r3, [sp, #12]
 8021e1a:	6120      	str	r0, [r4, #16]
 8021e1c:	6167      	str	r7, [r4, #20]
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d00c      	beq.n	8021e3c <__smakebuf_r+0x78>
 8021e22:	0028      	movs	r0, r5
 8021e24:	230e      	movs	r3, #14
 8021e26:	5ee1      	ldrsh	r1, [r4, r3]
 8021e28:	f000 f832 	bl	8021e90 <_isatty_r>
 8021e2c:	2800      	cmp	r0, #0
 8021e2e:	d005      	beq.n	8021e3c <__smakebuf_r+0x78>
 8021e30:	2303      	movs	r3, #3
 8021e32:	89a2      	ldrh	r2, [r4, #12]
 8021e34:	439a      	bics	r2, r3
 8021e36:	3b02      	subs	r3, #2
 8021e38:	4313      	orrs	r3, r2
 8021e3a:	81a3      	strh	r3, [r4, #12]
 8021e3c:	89a3      	ldrh	r3, [r4, #12]
 8021e3e:	9a01      	ldr	r2, [sp, #4]
 8021e40:	4313      	orrs	r3, r2
 8021e42:	81a3      	strh	r3, [r4, #12]
 8021e44:	e7cc      	b.n	8021de0 <__smakebuf_r+0x1c>

08021e46 <memmove>:
 8021e46:	b510      	push	{r4, lr}
 8021e48:	4288      	cmp	r0, r1
 8021e4a:	d806      	bhi.n	8021e5a <memmove+0x14>
 8021e4c:	2300      	movs	r3, #0
 8021e4e:	429a      	cmp	r2, r3
 8021e50:	d008      	beq.n	8021e64 <memmove+0x1e>
 8021e52:	5ccc      	ldrb	r4, [r1, r3]
 8021e54:	54c4      	strb	r4, [r0, r3]
 8021e56:	3301      	adds	r3, #1
 8021e58:	e7f9      	b.n	8021e4e <memmove+0x8>
 8021e5a:	188b      	adds	r3, r1, r2
 8021e5c:	4298      	cmp	r0, r3
 8021e5e:	d2f5      	bcs.n	8021e4c <memmove+0x6>
 8021e60:	3a01      	subs	r2, #1
 8021e62:	d200      	bcs.n	8021e66 <memmove+0x20>
 8021e64:	bd10      	pop	{r4, pc}
 8021e66:	5c8b      	ldrb	r3, [r1, r2]
 8021e68:	5483      	strb	r3, [r0, r2]
 8021e6a:	e7f9      	b.n	8021e60 <memmove+0x1a>

08021e6c <_fstat_r>:
 8021e6c:	2300      	movs	r3, #0
 8021e6e:	b570      	push	{r4, r5, r6, lr}
 8021e70:	4d06      	ldr	r5, [pc, #24]	@ (8021e8c <_fstat_r+0x20>)
 8021e72:	0004      	movs	r4, r0
 8021e74:	0008      	movs	r0, r1
 8021e76:	0011      	movs	r1, r2
 8021e78:	602b      	str	r3, [r5, #0]
 8021e7a:	f7eb f89d 	bl	800cfb8 <_fstat>
 8021e7e:	1c43      	adds	r3, r0, #1
 8021e80:	d103      	bne.n	8021e8a <_fstat_r+0x1e>
 8021e82:	682b      	ldr	r3, [r5, #0]
 8021e84:	2b00      	cmp	r3, #0
 8021e86:	d000      	beq.n	8021e8a <_fstat_r+0x1e>
 8021e88:	6023      	str	r3, [r4, #0]
 8021e8a:	bd70      	pop	{r4, r5, r6, pc}
 8021e8c:	200038ec 	.word	0x200038ec

08021e90 <_isatty_r>:
 8021e90:	2300      	movs	r3, #0
 8021e92:	b570      	push	{r4, r5, r6, lr}
 8021e94:	4d06      	ldr	r5, [pc, #24]	@ (8021eb0 <_isatty_r+0x20>)
 8021e96:	0004      	movs	r4, r0
 8021e98:	0008      	movs	r0, r1
 8021e9a:	602b      	str	r3, [r5, #0]
 8021e9c:	f7eb f89a 	bl	800cfd4 <_isatty>
 8021ea0:	1c43      	adds	r3, r0, #1
 8021ea2:	d103      	bne.n	8021eac <_isatty_r+0x1c>
 8021ea4:	682b      	ldr	r3, [r5, #0]
 8021ea6:	2b00      	cmp	r3, #0
 8021ea8:	d000      	beq.n	8021eac <_isatty_r+0x1c>
 8021eaa:	6023      	str	r3, [r4, #0]
 8021eac:	bd70      	pop	{r4, r5, r6, pc}
 8021eae:	46c0      	nop			@ (mov r8, r8)
 8021eb0:	200038ec 	.word	0x200038ec

08021eb4 <_sbrk_r>:
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	b570      	push	{r4, r5, r6, lr}
 8021eb8:	4d06      	ldr	r5, [pc, #24]	@ (8021ed4 <_sbrk_r+0x20>)
 8021eba:	0004      	movs	r4, r0
 8021ebc:	0008      	movs	r0, r1
 8021ebe:	602b      	str	r3, [r5, #0]
 8021ec0:	f7eb f89c 	bl	800cffc <_sbrk>
 8021ec4:	1c43      	adds	r3, r0, #1
 8021ec6:	d103      	bne.n	8021ed0 <_sbrk_r+0x1c>
 8021ec8:	682b      	ldr	r3, [r5, #0]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d000      	beq.n	8021ed0 <_sbrk_r+0x1c>
 8021ece:	6023      	str	r3, [r4, #0]
 8021ed0:	bd70      	pop	{r4, r5, r6, pc}
 8021ed2:	46c0      	nop			@ (mov r8, r8)
 8021ed4:	200038ec 	.word	0x200038ec

08021ed8 <__assert_func>:
 8021ed8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021eda:	0014      	movs	r4, r2
 8021edc:	001a      	movs	r2, r3
 8021ede:	4b09      	ldr	r3, [pc, #36]	@ (8021f04 <__assert_func+0x2c>)
 8021ee0:	0005      	movs	r5, r0
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	000e      	movs	r6, r1
 8021ee6:	68d8      	ldr	r0, [r3, #12]
 8021ee8:	4b07      	ldr	r3, [pc, #28]	@ (8021f08 <__assert_func+0x30>)
 8021eea:	2c00      	cmp	r4, #0
 8021eec:	d101      	bne.n	8021ef2 <__assert_func+0x1a>
 8021eee:	4b07      	ldr	r3, [pc, #28]	@ (8021f0c <__assert_func+0x34>)
 8021ef0:	001c      	movs	r4, r3
 8021ef2:	4907      	ldr	r1, [pc, #28]	@ (8021f10 <__assert_func+0x38>)
 8021ef4:	9301      	str	r3, [sp, #4]
 8021ef6:	9402      	str	r4, [sp, #8]
 8021ef8:	002b      	movs	r3, r5
 8021efa:	9600      	str	r6, [sp, #0]
 8021efc:	f000 f866 	bl	8021fcc <fiprintf>
 8021f00:	f000 f874 	bl	8021fec <abort>
 8021f04:	200003c8 	.word	0x200003c8
 8021f08:	08024f41 	.word	0x08024f41
 8021f0c:	08024f7c 	.word	0x08024f7c
 8021f10:	08024f4e 	.word	0x08024f4e

08021f14 <_calloc_r>:
 8021f14:	b570      	push	{r4, r5, r6, lr}
 8021f16:	0c0b      	lsrs	r3, r1, #16
 8021f18:	0c15      	lsrs	r5, r2, #16
 8021f1a:	2b00      	cmp	r3, #0
 8021f1c:	d11e      	bne.n	8021f5c <_calloc_r+0x48>
 8021f1e:	2d00      	cmp	r5, #0
 8021f20:	d10c      	bne.n	8021f3c <_calloc_r+0x28>
 8021f22:	b289      	uxth	r1, r1
 8021f24:	b294      	uxth	r4, r2
 8021f26:	434c      	muls	r4, r1
 8021f28:	0021      	movs	r1, r4
 8021f2a:	f7fe fe53 	bl	8020bd4 <_malloc_r>
 8021f2e:	1e05      	subs	r5, r0, #0
 8021f30:	d01a      	beq.n	8021f68 <_calloc_r+0x54>
 8021f32:	0022      	movs	r2, r4
 8021f34:	2100      	movs	r1, #0
 8021f36:	f7fd fb0f 	bl	801f558 <memset>
 8021f3a:	e016      	b.n	8021f6a <_calloc_r+0x56>
 8021f3c:	1c2b      	adds	r3, r5, #0
 8021f3e:	1c0c      	adds	r4, r1, #0
 8021f40:	b289      	uxth	r1, r1
 8021f42:	b292      	uxth	r2, r2
 8021f44:	434a      	muls	r2, r1
 8021f46:	b29b      	uxth	r3, r3
 8021f48:	b2a1      	uxth	r1, r4
 8021f4a:	4359      	muls	r1, r3
 8021f4c:	0c14      	lsrs	r4, r2, #16
 8021f4e:	190c      	adds	r4, r1, r4
 8021f50:	0c23      	lsrs	r3, r4, #16
 8021f52:	d107      	bne.n	8021f64 <_calloc_r+0x50>
 8021f54:	0424      	lsls	r4, r4, #16
 8021f56:	b292      	uxth	r2, r2
 8021f58:	4314      	orrs	r4, r2
 8021f5a:	e7e5      	b.n	8021f28 <_calloc_r+0x14>
 8021f5c:	2d00      	cmp	r5, #0
 8021f5e:	d101      	bne.n	8021f64 <_calloc_r+0x50>
 8021f60:	1c14      	adds	r4, r2, #0
 8021f62:	e7ed      	b.n	8021f40 <_calloc_r+0x2c>
 8021f64:	230c      	movs	r3, #12
 8021f66:	6003      	str	r3, [r0, #0]
 8021f68:	2500      	movs	r5, #0
 8021f6a:	0028      	movs	r0, r5
 8021f6c:	bd70      	pop	{r4, r5, r6, pc}

08021f6e <_realloc_r>:
 8021f6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021f70:	0006      	movs	r6, r0
 8021f72:	000c      	movs	r4, r1
 8021f74:	0015      	movs	r5, r2
 8021f76:	2900      	cmp	r1, #0
 8021f78:	d105      	bne.n	8021f86 <_realloc_r+0x18>
 8021f7a:	0011      	movs	r1, r2
 8021f7c:	f7fe fe2a 	bl	8020bd4 <_malloc_r>
 8021f80:	0004      	movs	r4, r0
 8021f82:	0020      	movs	r0, r4
 8021f84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021f86:	2a00      	cmp	r2, #0
 8021f88:	d103      	bne.n	8021f92 <_realloc_r+0x24>
 8021f8a:	f7fe fa53 	bl	8020434 <_free_r>
 8021f8e:	2400      	movs	r4, #0
 8021f90:	e7f7      	b.n	8021f82 <_realloc_r+0x14>
 8021f92:	f000 f832 	bl	8021ffa <_malloc_usable_size_r>
 8021f96:	0007      	movs	r7, r0
 8021f98:	4285      	cmp	r5, r0
 8021f9a:	d802      	bhi.n	8021fa2 <_realloc_r+0x34>
 8021f9c:	0843      	lsrs	r3, r0, #1
 8021f9e:	42ab      	cmp	r3, r5
 8021fa0:	d3ef      	bcc.n	8021f82 <_realloc_r+0x14>
 8021fa2:	0029      	movs	r1, r5
 8021fa4:	0030      	movs	r0, r6
 8021fa6:	f7fe fe15 	bl	8020bd4 <_malloc_r>
 8021faa:	9001      	str	r0, [sp, #4]
 8021fac:	2800      	cmp	r0, #0
 8021fae:	d0ee      	beq.n	8021f8e <_realloc_r+0x20>
 8021fb0:	002a      	movs	r2, r5
 8021fb2:	42bd      	cmp	r5, r7
 8021fb4:	d900      	bls.n	8021fb8 <_realloc_r+0x4a>
 8021fb6:	003a      	movs	r2, r7
 8021fb8:	0021      	movs	r1, r4
 8021fba:	9801      	ldr	r0, [sp, #4]
 8021fbc:	f7fd fba8 	bl	801f710 <memcpy>
 8021fc0:	0021      	movs	r1, r4
 8021fc2:	0030      	movs	r0, r6
 8021fc4:	f7fe fa36 	bl	8020434 <_free_r>
 8021fc8:	9c01      	ldr	r4, [sp, #4]
 8021fca:	e7da      	b.n	8021f82 <_realloc_r+0x14>

08021fcc <fiprintf>:
 8021fcc:	b40e      	push	{r1, r2, r3}
 8021fce:	b517      	push	{r0, r1, r2, r4, lr}
 8021fd0:	4c05      	ldr	r4, [pc, #20]	@ (8021fe8 <fiprintf+0x1c>)
 8021fd2:	ab05      	add	r3, sp, #20
 8021fd4:	cb04      	ldmia	r3!, {r2}
 8021fd6:	0001      	movs	r1, r0
 8021fd8:	6820      	ldr	r0, [r4, #0]
 8021fda:	9301      	str	r3, [sp, #4]
 8021fdc:	f7ff fcfa 	bl	80219d4 <_vfiprintf_r>
 8021fe0:	bc1e      	pop	{r1, r2, r3, r4}
 8021fe2:	bc08      	pop	{r3}
 8021fe4:	b003      	add	sp, #12
 8021fe6:	4718      	bx	r3
 8021fe8:	200003c8 	.word	0x200003c8

08021fec <abort>:
 8021fec:	2006      	movs	r0, #6
 8021fee:	b510      	push	{r4, lr}
 8021ff0:	f000 f834 	bl	802205c <raise>
 8021ff4:	2001      	movs	r0, #1
 8021ff6:	f7ea ffab 	bl	800cf50 <_exit>

08021ffa <_malloc_usable_size_r>:
 8021ffa:	1f0b      	subs	r3, r1, #4
 8021ffc:	681b      	ldr	r3, [r3, #0]
 8021ffe:	1f18      	subs	r0, r3, #4
 8022000:	2b00      	cmp	r3, #0
 8022002:	da01      	bge.n	8022008 <_malloc_usable_size_r+0xe>
 8022004:	580b      	ldr	r3, [r1, r0]
 8022006:	18c0      	adds	r0, r0, r3
 8022008:	4770      	bx	lr

0802200a <_raise_r>:
 802200a:	b570      	push	{r4, r5, r6, lr}
 802200c:	0004      	movs	r4, r0
 802200e:	000d      	movs	r5, r1
 8022010:	291f      	cmp	r1, #31
 8022012:	d904      	bls.n	802201e <_raise_r+0x14>
 8022014:	2316      	movs	r3, #22
 8022016:	6003      	str	r3, [r0, #0]
 8022018:	2001      	movs	r0, #1
 802201a:	4240      	negs	r0, r0
 802201c:	bd70      	pop	{r4, r5, r6, pc}
 802201e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022020:	2b00      	cmp	r3, #0
 8022022:	d004      	beq.n	802202e <_raise_r+0x24>
 8022024:	008a      	lsls	r2, r1, #2
 8022026:	189b      	adds	r3, r3, r2
 8022028:	681a      	ldr	r2, [r3, #0]
 802202a:	2a00      	cmp	r2, #0
 802202c:	d108      	bne.n	8022040 <_raise_r+0x36>
 802202e:	0020      	movs	r0, r4
 8022030:	f000 f830 	bl	8022094 <_getpid_r>
 8022034:	002a      	movs	r2, r5
 8022036:	0001      	movs	r1, r0
 8022038:	0020      	movs	r0, r4
 802203a:	f000 f819 	bl	8022070 <_kill_r>
 802203e:	e7ed      	b.n	802201c <_raise_r+0x12>
 8022040:	2a01      	cmp	r2, #1
 8022042:	d009      	beq.n	8022058 <_raise_r+0x4e>
 8022044:	1c51      	adds	r1, r2, #1
 8022046:	d103      	bne.n	8022050 <_raise_r+0x46>
 8022048:	2316      	movs	r3, #22
 802204a:	6003      	str	r3, [r0, #0]
 802204c:	2001      	movs	r0, #1
 802204e:	e7e5      	b.n	802201c <_raise_r+0x12>
 8022050:	2100      	movs	r1, #0
 8022052:	0028      	movs	r0, r5
 8022054:	6019      	str	r1, [r3, #0]
 8022056:	4790      	blx	r2
 8022058:	2000      	movs	r0, #0
 802205a:	e7df      	b.n	802201c <_raise_r+0x12>

0802205c <raise>:
 802205c:	b510      	push	{r4, lr}
 802205e:	4b03      	ldr	r3, [pc, #12]	@ (802206c <raise+0x10>)
 8022060:	0001      	movs	r1, r0
 8022062:	6818      	ldr	r0, [r3, #0]
 8022064:	f7ff ffd1 	bl	802200a <_raise_r>
 8022068:	bd10      	pop	{r4, pc}
 802206a:	46c0      	nop			@ (mov r8, r8)
 802206c:	200003c8 	.word	0x200003c8

08022070 <_kill_r>:
 8022070:	2300      	movs	r3, #0
 8022072:	b570      	push	{r4, r5, r6, lr}
 8022074:	4d06      	ldr	r5, [pc, #24]	@ (8022090 <_kill_r+0x20>)
 8022076:	0004      	movs	r4, r0
 8022078:	0008      	movs	r0, r1
 802207a:	0011      	movs	r1, r2
 802207c:	602b      	str	r3, [r5, #0]
 802207e:	f7ea ff57 	bl	800cf30 <_kill>
 8022082:	1c43      	adds	r3, r0, #1
 8022084:	d103      	bne.n	802208e <_kill_r+0x1e>
 8022086:	682b      	ldr	r3, [r5, #0]
 8022088:	2b00      	cmp	r3, #0
 802208a:	d000      	beq.n	802208e <_kill_r+0x1e>
 802208c:	6023      	str	r3, [r4, #0]
 802208e:	bd70      	pop	{r4, r5, r6, pc}
 8022090:	200038ec 	.word	0x200038ec

08022094 <_getpid_r>:
 8022094:	b510      	push	{r4, lr}
 8022096:	f7ea ff45 	bl	800cf24 <_getpid>
 802209a:	bd10      	pop	{r4, pc}

0802209c <expf>:
 802209c:	b570      	push	{r4, r5, r6, lr}
 802209e:	1c04      	adds	r4, r0, #0
 80220a0:	f000 f8e6 	bl	8022270 <__ieee754_expf>
 80220a4:	1c05      	adds	r5, r0, #0
 80220a6:	1c20      	adds	r0, r4, #0
 80220a8:	f000 f83c 	bl	8022124 <finitef>
 80220ac:	2800      	cmp	r0, #0
 80220ae:	d00b      	beq.n	80220c8 <expf+0x2c>
 80220b0:	490c      	ldr	r1, [pc, #48]	@ (80220e4 <expf+0x48>)
 80220b2:	1c20      	adds	r0, r4, #0
 80220b4:	f7de fa50 	bl	8000558 <__aeabi_fcmpgt>
 80220b8:	2800      	cmp	r0, #0
 80220ba:	d007      	beq.n	80220cc <expf+0x30>
 80220bc:	f7fd faf0 	bl	801f6a0 <__errno>
 80220c0:	25ff      	movs	r5, #255	@ 0xff
 80220c2:	2322      	movs	r3, #34	@ 0x22
 80220c4:	05ed      	lsls	r5, r5, #23
 80220c6:	6003      	str	r3, [r0, #0]
 80220c8:	1c28      	adds	r0, r5, #0
 80220ca:	bd70      	pop	{r4, r5, r6, pc}
 80220cc:	4906      	ldr	r1, [pc, #24]	@ (80220e8 <expf+0x4c>)
 80220ce:	1c20      	adds	r0, r4, #0
 80220d0:	f7de fa2e 	bl	8000530 <__aeabi_fcmplt>
 80220d4:	2800      	cmp	r0, #0
 80220d6:	d0f7      	beq.n	80220c8 <expf+0x2c>
 80220d8:	f7fd fae2 	bl	801f6a0 <__errno>
 80220dc:	2322      	movs	r3, #34	@ 0x22
 80220de:	2500      	movs	r5, #0
 80220e0:	6003      	str	r3, [r0, #0]
 80220e2:	e7f1      	b.n	80220c8 <expf+0x2c>
 80220e4:	42b17217 	.word	0x42b17217
 80220e8:	c2cff1b5 	.word	0xc2cff1b5

080220ec <sqrtf>:
 80220ec:	b570      	push	{r4, r5, r6, lr}
 80220ee:	1c05      	adds	r5, r0, #0
 80220f0:	f000 f822 	bl	8022138 <__ieee754_sqrtf>
 80220f4:	1c29      	adds	r1, r5, #0
 80220f6:	1c04      	adds	r4, r0, #0
 80220f8:	1c28      	adds	r0, r5, #0
 80220fa:	f7df fa33 	bl	8001564 <__aeabi_fcmpun>
 80220fe:	2800      	cmp	r0, #0
 8022100:	d10e      	bne.n	8022120 <sqrtf+0x34>
 8022102:	2100      	movs	r1, #0
 8022104:	1c28      	adds	r0, r5, #0
 8022106:	f7de fa13 	bl	8000530 <__aeabi_fcmplt>
 802210a:	2800      	cmp	r0, #0
 802210c:	d008      	beq.n	8022120 <sqrtf+0x34>
 802210e:	f7fd fac7 	bl	801f6a0 <__errno>
 8022112:	2321      	movs	r3, #33	@ 0x21
 8022114:	2100      	movs	r1, #0
 8022116:	6003      	str	r3, [r0, #0]
 8022118:	1c08      	adds	r0, r1, #0
 802211a:	f7de fd5b 	bl	8000bd4 <__aeabi_fdiv>
 802211e:	1c04      	adds	r4, r0, #0
 8022120:	1c20      	adds	r0, r4, #0
 8022122:	bd70      	pop	{r4, r5, r6, pc}

08022124 <finitef>:
 8022124:	22ff      	movs	r2, #255	@ 0xff
 8022126:	0043      	lsls	r3, r0, #1
 8022128:	085b      	lsrs	r3, r3, #1
 802212a:	2001      	movs	r0, #1
 802212c:	05d2      	lsls	r2, r2, #23
 802212e:	4293      	cmp	r3, r2
 8022130:	db00      	blt.n	8022134 <finitef+0x10>
 8022132:	2000      	movs	r0, #0
 8022134:	4770      	bx	lr
	...

08022138 <__ieee754_sqrtf>:
 8022138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802213a:	0003      	movs	r3, r0
 802213c:	0042      	lsls	r2, r0, #1
 802213e:	1c04      	adds	r4, r0, #0
 8022140:	20ff      	movs	r0, #255	@ 0xff
 8022142:	0852      	lsrs	r2, r2, #1
 8022144:	05c0      	lsls	r0, r0, #23
 8022146:	4282      	cmp	r2, r0
 8022148:	d30a      	bcc.n	8022160 <__ieee754_sqrtf+0x28>
 802214a:	1c21      	adds	r1, r4, #0
 802214c:	1c20      	adds	r0, r4, #0
 802214e:	f7de ff27 	bl	8000fa0 <__aeabi_fmul>
 8022152:	1c01      	adds	r1, r0, #0
 8022154:	1c20      	adds	r0, r4, #0
 8022156:	f7de fbb3 	bl	80008c0 <__aeabi_fadd>
 802215a:	1c04      	adds	r4, r0, #0
 802215c:	1c20      	adds	r0, r4, #0
 802215e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022160:	2a00      	cmp	r2, #0
 8022162:	d0fb      	beq.n	802215c <__ieee754_sqrtf+0x24>
 8022164:	2c00      	cmp	r4, #0
 8022166:	da07      	bge.n	8022178 <__ieee754_sqrtf+0x40>
 8022168:	1c21      	adds	r1, r4, #0
 802216a:	1c20      	adds	r0, r4, #0
 802216c:	f7df f856 	bl	800121c <__aeabi_fsub>
 8022170:	1c01      	adds	r1, r0, #0
 8022172:	f7de fd2f 	bl	8000bd4 <__aeabi_fdiv>
 8022176:	e7f0      	b.n	802215a <__ieee754_sqrtf+0x22>
 8022178:	0022      	movs	r2, r4
 802217a:	15e1      	asrs	r1, r4, #23
 802217c:	4002      	ands	r2, r0
 802217e:	4204      	tst	r4, r0
 8022180:	d046      	beq.n	8022210 <__ieee754_sqrtf+0xd8>
 8022182:	2280      	movs	r2, #128	@ 0x80
 8022184:	000f      	movs	r7, r1
 8022186:	025b      	lsls	r3, r3, #9
 8022188:	0a5b      	lsrs	r3, r3, #9
 802218a:	0412      	lsls	r2, r2, #16
 802218c:	3f7f      	subs	r7, #127	@ 0x7f
 802218e:	4313      	orrs	r3, r2
 8022190:	07c9      	lsls	r1, r1, #31
 8022192:	d400      	bmi.n	8022196 <__ieee754_sqrtf+0x5e>
 8022194:	005b      	lsls	r3, r3, #1
 8022196:	2400      	movs	r4, #0
 8022198:	2180      	movs	r1, #128	@ 0x80
 802219a:	2019      	movs	r0, #25
 802219c:	0026      	movs	r6, r4
 802219e:	107f      	asrs	r7, r7, #1
 80221a0:	005b      	lsls	r3, r3, #1
 80221a2:	0449      	lsls	r1, r1, #17
 80221a4:	1875      	adds	r5, r6, r1
 80221a6:	001a      	movs	r2, r3
 80221a8:	429d      	cmp	r5, r3
 80221aa:	dc02      	bgt.n	80221b2 <__ieee754_sqrtf+0x7a>
 80221ac:	186e      	adds	r6, r5, r1
 80221ae:	1b5a      	subs	r2, r3, r5
 80221b0:	1864      	adds	r4, r4, r1
 80221b2:	3801      	subs	r0, #1
 80221b4:	0053      	lsls	r3, r2, #1
 80221b6:	0849      	lsrs	r1, r1, #1
 80221b8:	2800      	cmp	r0, #0
 80221ba:	d1f3      	bne.n	80221a4 <__ieee754_sqrtf+0x6c>
 80221bc:	2a00      	cmp	r2, #0
 80221be:	d019      	beq.n	80221f4 <__ieee754_sqrtf+0xbc>
 80221c0:	4d17      	ldr	r5, [pc, #92]	@ (8022220 <__ieee754_sqrtf+0xe8>)
 80221c2:	4e18      	ldr	r6, [pc, #96]	@ (8022224 <__ieee754_sqrtf+0xec>)
 80221c4:	6828      	ldr	r0, [r5, #0]
 80221c6:	6831      	ldr	r1, [r6, #0]
 80221c8:	682b      	ldr	r3, [r5, #0]
 80221ca:	9301      	str	r3, [sp, #4]
 80221cc:	f7df f826 	bl	800121c <__aeabi_fsub>
 80221d0:	1c01      	adds	r1, r0, #0
 80221d2:	9801      	ldr	r0, [sp, #4]
 80221d4:	f7de f9b6 	bl	8000544 <__aeabi_fcmple>
 80221d8:	2800      	cmp	r0, #0
 80221da:	d00b      	beq.n	80221f4 <__ieee754_sqrtf+0xbc>
 80221dc:	6828      	ldr	r0, [r5, #0]
 80221de:	6831      	ldr	r1, [r6, #0]
 80221e0:	f7de fb6e 	bl	80008c0 <__aeabi_fadd>
 80221e4:	682d      	ldr	r5, [r5, #0]
 80221e6:	1c01      	adds	r1, r0, #0
 80221e8:	1c28      	adds	r0, r5, #0
 80221ea:	f7de f9a1 	bl	8000530 <__aeabi_fcmplt>
 80221ee:	2800      	cmp	r0, #0
 80221f0:	d011      	beq.n	8022216 <__ieee754_sqrtf+0xde>
 80221f2:	3402      	adds	r4, #2
 80221f4:	23fc      	movs	r3, #252	@ 0xfc
 80221f6:	1064      	asrs	r4, r4, #1
 80221f8:	059b      	lsls	r3, r3, #22
 80221fa:	18e3      	adds	r3, r4, r3
 80221fc:	05fc      	lsls	r4, r7, #23
 80221fe:	18e4      	adds	r4, r4, r3
 8022200:	e7ac      	b.n	802215c <__ieee754_sqrtf+0x24>
 8022202:	005b      	lsls	r3, r3, #1
 8022204:	3201      	adds	r2, #1
 8022206:	4203      	tst	r3, r0
 8022208:	d0fb      	beq.n	8022202 <__ieee754_sqrtf+0xca>
 802220a:	3a01      	subs	r2, #1
 802220c:	1a89      	subs	r1, r1, r2
 802220e:	e7b8      	b.n	8022182 <__ieee754_sqrtf+0x4a>
 8022210:	2080      	movs	r0, #128	@ 0x80
 8022212:	0400      	lsls	r0, r0, #16
 8022214:	e7f7      	b.n	8022206 <__ieee754_sqrtf+0xce>
 8022216:	2301      	movs	r3, #1
 8022218:	3401      	adds	r4, #1
 802221a:	439c      	bics	r4, r3
 802221c:	e7ea      	b.n	80221f4 <__ieee754_sqrtf+0xbc>
 802221e:	46c0      	nop			@ (mov r8, r8)
 8022220:	2000041c 	.word	0x2000041c
 8022224:	20000418 	.word	0x20000418

08022228 <roundf>:
 8022228:	0dc3      	lsrs	r3, r0, #23
 802222a:	b2db      	uxtb	r3, r3
 802222c:	3b7f      	subs	r3, #127	@ 0x7f
 802222e:	0002      	movs	r2, r0
 8022230:	b510      	push	{r4, lr}
 8022232:	2b16      	cmp	r3, #22
 8022234:	dc13      	bgt.n	802225e <roundf+0x36>
 8022236:	2b00      	cmp	r3, #0
 8022238:	da07      	bge.n	802224a <roundf+0x22>
 802223a:	0fc2      	lsrs	r2, r0, #31
 802223c:	07d0      	lsls	r0, r2, #31
 802223e:	3301      	adds	r3, #1
 8022240:	d102      	bne.n	8022248 <roundf+0x20>
 8022242:	23fe      	movs	r3, #254	@ 0xfe
 8022244:	059b      	lsls	r3, r3, #22
 8022246:	4318      	orrs	r0, r3
 8022248:	bd10      	pop	{r4, pc}
 802224a:	4908      	ldr	r1, [pc, #32]	@ (802226c <roundf+0x44>)
 802224c:	4119      	asrs	r1, r3
 802224e:	4208      	tst	r0, r1
 8022250:	d0fa      	beq.n	8022248 <roundf+0x20>
 8022252:	2080      	movs	r0, #128	@ 0x80
 8022254:	03c0      	lsls	r0, r0, #15
 8022256:	4118      	asrs	r0, r3
 8022258:	1880      	adds	r0, r0, r2
 802225a:	4388      	bics	r0, r1
 802225c:	e7f4      	b.n	8022248 <roundf+0x20>
 802225e:	2b80      	cmp	r3, #128	@ 0x80
 8022260:	d1f2      	bne.n	8022248 <roundf+0x20>
 8022262:	1c01      	adds	r1, r0, #0
 8022264:	f7de fb2c 	bl	80008c0 <__aeabi_fadd>
 8022268:	e7ee      	b.n	8022248 <roundf+0x20>
 802226a:	46c0      	nop			@ (mov r8, r8)
 802226c:	007fffff 	.word	0x007fffff

08022270 <__ieee754_expf>:
 8022270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022272:	21ff      	movs	r1, #255	@ 0xff
 8022274:	0043      	lsls	r3, r0, #1
 8022276:	1c04      	adds	r4, r0, #0
 8022278:	085b      	lsrs	r3, r3, #1
 802227a:	05c9      	lsls	r1, r1, #23
 802227c:	428b      	cmp	r3, r1
 802227e:	d904      	bls.n	802228a <__ieee754_expf+0x1a>
 8022280:	1c01      	adds	r1, r0, #0
 8022282:	1c20      	adds	r0, r4, #0
 8022284:	f7de fb1c 	bl	80008c0 <__aeabi_fadd>
 8022288:	e00d      	b.n	80222a6 <__ieee754_expf+0x36>
 802228a:	0fc6      	lsrs	r6, r0, #31
 802228c:	428b      	cmp	r3, r1
 802228e:	d104      	bne.n	802229a <__ieee754_expf+0x2a>
 8022290:	2e00      	cmp	r6, #0
 8022292:	d000      	beq.n	8022296 <__ieee754_expf+0x26>
 8022294:	e0ba      	b.n	802240c <__ieee754_expf+0x19c>
 8022296:	1c20      	adds	r0, r4, #0
 8022298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802229a:	495d      	ldr	r1, [pc, #372]	@ (8022410 <__ieee754_expf+0x1a0>)
 802229c:	4288      	cmp	r0, r1
 802229e:	dd04      	ble.n	80222aa <__ieee754_expf+0x3a>
 80222a0:	2000      	movs	r0, #0
 80222a2:	f000 f8f1 	bl	8022488 <__math_oflowf>
 80222a6:	1c04      	adds	r4, r0, #0
 80222a8:	e7f5      	b.n	8022296 <__ieee754_expf+0x26>
 80222aa:	2800      	cmp	r0, #0
 80222ac:	da06      	bge.n	80222bc <__ieee754_expf+0x4c>
 80222ae:	4a59      	ldr	r2, [pc, #356]	@ (8022414 <__ieee754_expf+0x1a4>)
 80222b0:	4293      	cmp	r3, r2
 80222b2:	d903      	bls.n	80222bc <__ieee754_expf+0x4c>
 80222b4:	2000      	movs	r0, #0
 80222b6:	f000 f8e1 	bl	802247c <__math_uflowf>
 80222ba:	e7f4      	b.n	80222a6 <__ieee754_expf+0x36>
 80222bc:	4a56      	ldr	r2, [pc, #344]	@ (8022418 <__ieee754_expf+0x1a8>)
 80222be:	4293      	cmp	r3, r2
 80222c0:	d96e      	bls.n	80223a0 <__ieee754_expf+0x130>
 80222c2:	4a56      	ldr	r2, [pc, #344]	@ (802241c <__ieee754_expf+0x1ac>)
 80222c4:	00b5      	lsls	r5, r6, #2
 80222c6:	4293      	cmp	r3, r2
 80222c8:	d84e      	bhi.n	8022368 <__ieee754_expf+0xf8>
 80222ca:	4b55      	ldr	r3, [pc, #340]	@ (8022420 <__ieee754_expf+0x1b0>)
 80222cc:	1c20      	adds	r0, r4, #0
 80222ce:	5959      	ldr	r1, [r3, r5]
 80222d0:	f7de ffa4 	bl	800121c <__aeabi_fsub>
 80222d4:	4b53      	ldr	r3, [pc, #332]	@ (8022424 <__ieee754_expf+0x1b4>)
 80222d6:	1c07      	adds	r7, r0, #0
 80222d8:	595b      	ldr	r3, [r3, r5]
 80222da:	2501      	movs	r5, #1
 80222dc:	1bad      	subs	r5, r5, r6
 80222de:	9300      	str	r3, [sp, #0]
 80222e0:	1bad      	subs	r5, r5, r6
 80222e2:	9900      	ldr	r1, [sp, #0]
 80222e4:	1c38      	adds	r0, r7, #0
 80222e6:	f7de ff99 	bl	800121c <__aeabi_fsub>
 80222ea:	1c04      	adds	r4, r0, #0
 80222ec:	1c21      	adds	r1, r4, #0
 80222ee:	1c20      	adds	r0, r4, #0
 80222f0:	f7de fe56 	bl	8000fa0 <__aeabi_fmul>
 80222f4:	494c      	ldr	r1, [pc, #304]	@ (8022428 <__ieee754_expf+0x1b8>)
 80222f6:	1c06      	adds	r6, r0, #0
 80222f8:	f7de fe52 	bl	8000fa0 <__aeabi_fmul>
 80222fc:	494b      	ldr	r1, [pc, #300]	@ (802242c <__ieee754_expf+0x1bc>)
 80222fe:	f7de ff8d 	bl	800121c <__aeabi_fsub>
 8022302:	1c31      	adds	r1, r6, #0
 8022304:	f7de fe4c 	bl	8000fa0 <__aeabi_fmul>
 8022308:	4949      	ldr	r1, [pc, #292]	@ (8022430 <__ieee754_expf+0x1c0>)
 802230a:	f7de fad9 	bl	80008c0 <__aeabi_fadd>
 802230e:	1c31      	adds	r1, r6, #0
 8022310:	f7de fe46 	bl	8000fa0 <__aeabi_fmul>
 8022314:	4947      	ldr	r1, [pc, #284]	@ (8022434 <__ieee754_expf+0x1c4>)
 8022316:	f7de ff81 	bl	800121c <__aeabi_fsub>
 802231a:	1c31      	adds	r1, r6, #0
 802231c:	f7de fe40 	bl	8000fa0 <__aeabi_fmul>
 8022320:	4945      	ldr	r1, [pc, #276]	@ (8022438 <__ieee754_expf+0x1c8>)
 8022322:	f7de facd 	bl	80008c0 <__aeabi_fadd>
 8022326:	1c31      	adds	r1, r6, #0
 8022328:	f7de fe3a 	bl	8000fa0 <__aeabi_fmul>
 802232c:	1c01      	adds	r1, r0, #0
 802232e:	1c20      	adds	r0, r4, #0
 8022330:	f7de ff74 	bl	800121c <__aeabi_fsub>
 8022334:	1c01      	adds	r1, r0, #0
 8022336:	1c06      	adds	r6, r0, #0
 8022338:	1c20      	adds	r0, r4, #0
 802233a:	f7de fe31 	bl	8000fa0 <__aeabi_fmul>
 802233e:	9001      	str	r0, [sp, #4]
 8022340:	2d00      	cmp	r5, #0
 8022342:	d140      	bne.n	80223c6 <__ieee754_expf+0x156>
 8022344:	2180      	movs	r1, #128	@ 0x80
 8022346:	1c30      	adds	r0, r6, #0
 8022348:	05c9      	lsls	r1, r1, #23
 802234a:	f7de ff67 	bl	800121c <__aeabi_fsub>
 802234e:	1c01      	adds	r1, r0, #0
 8022350:	9801      	ldr	r0, [sp, #4]
 8022352:	f7de fc3f 	bl	8000bd4 <__aeabi_fdiv>
 8022356:	1c21      	adds	r1, r4, #0
 8022358:	f7de ff60 	bl	800121c <__aeabi_fsub>
 802235c:	1c01      	adds	r1, r0, #0
 802235e:	20fe      	movs	r0, #254	@ 0xfe
 8022360:	0580      	lsls	r0, r0, #22
 8022362:	f7de ff5b 	bl	800121c <__aeabi_fsub>
 8022366:	e79e      	b.n	80222a6 <__ieee754_expf+0x36>
 8022368:	4934      	ldr	r1, [pc, #208]	@ (802243c <__ieee754_expf+0x1cc>)
 802236a:	1c20      	adds	r0, r4, #0
 802236c:	f7de fe18 	bl	8000fa0 <__aeabi_fmul>
 8022370:	4b33      	ldr	r3, [pc, #204]	@ (8022440 <__ieee754_expf+0x1d0>)
 8022372:	5959      	ldr	r1, [r3, r5]
 8022374:	f7de faa4 	bl	80008c0 <__aeabi_fadd>
 8022378:	f7df f90a 	bl	8001590 <__aeabi_f2iz>
 802237c:	0005      	movs	r5, r0
 802237e:	f7df f927 	bl	80015d0 <__aeabi_i2f>
 8022382:	4930      	ldr	r1, [pc, #192]	@ (8022444 <__ieee754_expf+0x1d4>)
 8022384:	1c06      	adds	r6, r0, #0
 8022386:	f7de fe0b 	bl	8000fa0 <__aeabi_fmul>
 802238a:	1c01      	adds	r1, r0, #0
 802238c:	1c20      	adds	r0, r4, #0
 802238e:	f7de ff45 	bl	800121c <__aeabi_fsub>
 8022392:	492d      	ldr	r1, [pc, #180]	@ (8022448 <__ieee754_expf+0x1d8>)
 8022394:	1c07      	adds	r7, r0, #0
 8022396:	1c30      	adds	r0, r6, #0
 8022398:	f7de fe02 	bl	8000fa0 <__aeabi_fmul>
 802239c:	9000      	str	r0, [sp, #0]
 802239e:	e7a0      	b.n	80222e2 <__ieee754_expf+0x72>
 80223a0:	22d0      	movs	r2, #208	@ 0xd0
 80223a2:	0592      	lsls	r2, r2, #22
 80223a4:	4293      	cmp	r3, r2
 80223a6:	d20c      	bcs.n	80223c2 <__ieee754_expf+0x152>
 80223a8:	4928      	ldr	r1, [pc, #160]	@ (802244c <__ieee754_expf+0x1dc>)
 80223aa:	1c20      	adds	r0, r4, #0
 80223ac:	f7de fa88 	bl	80008c0 <__aeabi_fadd>
 80223b0:	21fe      	movs	r1, #254	@ 0xfe
 80223b2:	0589      	lsls	r1, r1, #22
 80223b4:	f7de f8d0 	bl	8000558 <__aeabi_fcmpgt>
 80223b8:	1e05      	subs	r5, r0, #0
 80223ba:	d097      	beq.n	80222ec <__ieee754_expf+0x7c>
 80223bc:	21fe      	movs	r1, #254	@ 0xfe
 80223be:	0589      	lsls	r1, r1, #22
 80223c0:	e75f      	b.n	8022282 <__ieee754_expf+0x12>
 80223c2:	2500      	movs	r5, #0
 80223c4:	e792      	b.n	80222ec <__ieee754_expf+0x7c>
 80223c6:	2080      	movs	r0, #128	@ 0x80
 80223c8:	1c31      	adds	r1, r6, #0
 80223ca:	05c0      	lsls	r0, r0, #23
 80223cc:	f7de ff26 	bl	800121c <__aeabi_fsub>
 80223d0:	1c01      	adds	r1, r0, #0
 80223d2:	9801      	ldr	r0, [sp, #4]
 80223d4:	f7de fbfe 	bl	8000bd4 <__aeabi_fdiv>
 80223d8:	1c01      	adds	r1, r0, #0
 80223da:	9800      	ldr	r0, [sp, #0]
 80223dc:	f7de ff1e 	bl	800121c <__aeabi_fsub>
 80223e0:	1c39      	adds	r1, r7, #0
 80223e2:	f7de ff1b 	bl	800121c <__aeabi_fsub>
 80223e6:	1c01      	adds	r1, r0, #0
 80223e8:	20fe      	movs	r0, #254	@ 0xfe
 80223ea:	0580      	lsls	r0, r0, #22
 80223ec:	f7de ff16 	bl	800121c <__aeabi_fsub>
 80223f0:	002b      	movs	r3, r5
 80223f2:	337d      	adds	r3, #125	@ 0x7d
 80223f4:	db02      	blt.n	80223fc <__ieee754_expf+0x18c>
 80223f6:	05ec      	lsls	r4, r5, #23
 80223f8:	1824      	adds	r4, r4, r0
 80223fa:	e74c      	b.n	8022296 <__ieee754_expf+0x26>
 80223fc:	21d8      	movs	r1, #216	@ 0xd8
 80223fe:	3564      	adds	r5, #100	@ 0x64
 8022400:	05ed      	lsls	r5, r5, #23
 8022402:	1828      	adds	r0, r5, r0
 8022404:	0509      	lsls	r1, r1, #20
 8022406:	f7de fdcb 	bl	8000fa0 <__aeabi_fmul>
 802240a:	e74c      	b.n	80222a6 <__ieee754_expf+0x36>
 802240c:	2400      	movs	r4, #0
 802240e:	e742      	b.n	8022296 <__ieee754_expf+0x26>
 8022410:	42b17217 	.word	0x42b17217
 8022414:	42cff1b5 	.word	0x42cff1b5
 8022418:	3eb17218 	.word	0x3eb17218
 802241c:	3f851591 	.word	0x3f851591
 8022420:	08024f88 	.word	0x08024f88
 8022424:	08024f80 	.word	0x08024f80
 8022428:	3331bb4c 	.word	0x3331bb4c
 802242c:	35ddea0e 	.word	0x35ddea0e
 8022430:	388ab355 	.word	0x388ab355
 8022434:	3b360b61 	.word	0x3b360b61
 8022438:	3e2aaaab 	.word	0x3e2aaaab
 802243c:	3fb8aa3b 	.word	0x3fb8aa3b
 8022440:	08024f90 	.word	0x08024f90
 8022444:	3f317180 	.word	0x3f317180
 8022448:	3717f7d1 	.word	0x3717f7d1
 802244c:	7149f2ca 	.word	0x7149f2ca

08022450 <with_errnof>:
 8022450:	b570      	push	{r4, r5, r6, lr}
 8022452:	000d      	movs	r5, r1
 8022454:	1c04      	adds	r4, r0, #0
 8022456:	f7fd f923 	bl	801f6a0 <__errno>
 802245a:	6005      	str	r5, [r0, #0]
 802245c:	1c20      	adds	r0, r4, #0
 802245e:	bd70      	pop	{r4, r5, r6, pc}

08022460 <xflowf>:
 8022460:	b510      	push	{r4, lr}
 8022462:	1c0b      	adds	r3, r1, #0
 8022464:	2800      	cmp	r0, #0
 8022466:	d002      	beq.n	802246e <xflowf+0xe>
 8022468:	2380      	movs	r3, #128	@ 0x80
 802246a:	061b      	lsls	r3, r3, #24
 802246c:	18cb      	adds	r3, r1, r3
 802246e:	1c18      	adds	r0, r3, #0
 8022470:	f7de fd96 	bl	8000fa0 <__aeabi_fmul>
 8022474:	2122      	movs	r1, #34	@ 0x22
 8022476:	f7ff ffeb 	bl	8022450 <with_errnof>
 802247a:	bd10      	pop	{r4, pc}

0802247c <__math_uflowf>:
 802247c:	2180      	movs	r1, #128	@ 0x80
 802247e:	b510      	push	{r4, lr}
 8022480:	0549      	lsls	r1, r1, #21
 8022482:	f7ff ffed 	bl	8022460 <xflowf>
 8022486:	bd10      	pop	{r4, pc}

08022488 <__math_oflowf>:
 8022488:	21e0      	movs	r1, #224	@ 0xe0
 802248a:	b510      	push	{r4, lr}
 802248c:	05c9      	lsls	r1, r1, #23
 802248e:	f7ff ffe7 	bl	8022460 <xflowf>
 8022492:	bd10      	pop	{r4, pc}

08022494 <_init>:
 8022494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022496:	46c0      	nop			@ (mov r8, r8)
 8022498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802249a:	bc08      	pop	{r3}
 802249c:	469e      	mov	lr, r3
 802249e:	4770      	bx	lr

080224a0 <_fini>:
 80224a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224a2:	46c0      	nop			@ (mov r8, r8)
 80224a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80224a6:	bc08      	pop	{r3}
 80224a8:	469e      	mov	lr, r3
 80224aa:	4770      	bx	lr
